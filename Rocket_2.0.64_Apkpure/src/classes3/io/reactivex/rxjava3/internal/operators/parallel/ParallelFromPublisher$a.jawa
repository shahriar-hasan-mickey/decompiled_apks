record `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber`[] `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLongArray` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.b` @AccessFlag FINAL;
  `long`[] `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.d` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.e` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.f` @AccessFlag ;
  `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.g` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.h` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.i` @AccessFlag VOLATILE;
  `int` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.j` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.k` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.l` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.m` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.n` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a` v3 @kind this, `org.reactivestreams.Subscriber`[] v4 @kind object, `int` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a;.<init>:([Lorg/reactivestreams/Subscriber;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L4d09e0.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4d09e6.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4d09ea.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4d09f0.  v3.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.l` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L4d09f4.  v3.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.a` @type ^`org.reactivestreams.Subscriber`[] := v4 @kind object;
  #L4d09f8.  v3.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.d` @type ^`int` := v5;
  #L4d09fc.  v0:= v5 ^> 2;
  #L4d0a00.  v5:= v5 - v0 @kind int;
  #L4d0a02.  v3.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.e` @type ^`int` := v5;
  #L4d0a06.  v4:= length @variable v4;
  #L4d0a08.  v5:= new `java.util.concurrent.atomic.AtomicLongArray`;
  #L4d0a0c.  v0:= v4 + v4 @kind int;
  #L4d0a10.  v1:= v0 + 1;
  #L4d0a14.  call `<init>`(v5, v1) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.<init>:(I)V` @kind direct;
  #L4d0a1a.  v3.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.b` @type ^`java.util.concurrent.atomic.AtomicLongArray` := v5 @kind object;
  #L4d0a1e.  v1:= (`long`) v4 @kind i2l;
  #L4d0a20.  call `lazySet`(v5, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.lazySet:(IJ)V` @kind virtual;
  #L4d0a26.  v4:= new `long`[v4];
  #L4d0a2a.  v3.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.c` @type ^`long`[] := v4 @kind object;
  #L4d0a2e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a` v4 @kind this, `int` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a;.a:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4d0a40.  v0:= v4.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.b` @type ^`java.util.concurrent.atomic.AtomicLongArray` @kind object;
  #L4d0a44.  call temp:= `decrementAndGet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.decrementAndGet:(I)J` @kind virtual;
  #L4d0a4a.  v0:= temp @kind wide;
  #L4d0a4c.  v2:= 0L;
  #L4d0a50.  v5:= lcmp(v0, v2);
  #L4d0a54.  if v5 != 0 then goto L4d0a7e;
  #L4d0a58.  v5:= 1I;
  #L4d0a5a.  v4.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.k` @type ^`boolean` := v5 @kind boolean;
  #L4d0a5e.  v5:= v4.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d0a62.  call `cancel`(v5) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d0a68.  call temp:= `getAndIncrement`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4d0a6e.  v5:= temp;
  #L4d0a70.  if v5 != 0 then goto L4d0a7e;
  #L4d0a74.  v5:= v4.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4d0a78.  call `clear`(v5) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4d0a7e.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4d0a90.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4d0a96.  v0:= temp;
  #L4d0a98.  if v0 == 0 then goto L4d0a9e;
  #L4d0a9c.  return @kind void;
  #L4d0a9e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.n` @type ^`int`;
  #L4d0aa2.  v1:= 1I;
  #L4d0aa4.  if v0 != v1 then goto L4d0ab0;
  #L4d0aa8.  call `d`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a;.d:()V` @kind virtual;
  #L4d0aae.  goto L4d0ab6;
  #L4d0ab0.  call `c`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a;.c:()V` @kind virtual;
  #L4d0ab6.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a` v19 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;

  #L4d0ac8.  v1:= v19 @kind object;
  #L4d0acc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4d0ad0.  v2:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.a` @type ^`org.reactivestreams.Subscriber`[] @kind object;
  #L4d0ad4.  v3:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.b` @type ^`java.util.concurrent.atomic.AtomicLongArray` @kind object;
  #L4d0ad8.  v4:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.c` @type ^`long`[] @kind object;
  #L4d0adc.  v5:= length @variable v4;
  #L4d0ade.  v6:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.j` @type ^`int`;
  #L4d0ae2.  v7:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.m` @type ^`int`;
  #L4d0ae6.  v8:= 1I;
  #L4d0ae8.  v9:= 1I;
  #L4d0aea.  v10:= 0I;
  #L4d0aec.  v11:= 0I;
  #L4d0aee.  v12:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.k` @type ^`boolean` @kind boolean;
  #L4d0af2.  if v12 == 0 then goto L4d0afe;
  #L4d0af6.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4d0afc.  return @kind void;
  #L4d0afe.  v12:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.i` @type ^`boolean` @kind boolean;
  #L4d0b02.  if v12 == 0 then goto L4d0b2c;
  #L4d0b06.  v13:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.h` @type ^`java.lang.Throwable` @kind object;
  #L4d0b0a.  if v13 == 0 then goto L4d0b2c;
  #L4d0b0e.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4d0b14.  v0:= length @variable v2;
  #L4d0b16.  if v10 >= v0 then goto L4d0b2a;
  #L4d0b1a.  v3:= v2[v10] @kind object;
  #L4d0b1e.  call `onError`(v3, v13) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d0b24.  v10:= v10 + 1;
  #L4d0b28.  goto L4d0b16;
  #L4d0b2a.  return @kind void;
  #L4d0b2c.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4d0b32.  v13:= temp;
  #L4d0b34.  if v12 == 0 then goto L4d0b54;
  #L4d0b38.  if v13 == 0 then goto L4d0b54;
  #L4d0b3c.  v0:= length @variable v2;
  #L4d0b3e.  if v10 >= v0 then goto L4d0b52;
  #L4d0b42.  v3:= v2[v10] @kind object;
  #L4d0b46.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d0b4c.  v10:= v10 + 1;
  #L4d0b50.  goto L4d0b3e;
  #L4d0b52.  return @kind void;
  #L4d0b54.  if v13 == 0 then goto L4d0b5a;
  #L4d0b58.  goto L4d0c02;
  #L4d0b5a.  call temp:= `get`(v3, v6) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.get:(I)J` @kind virtual;
  #L4d0b60.  v12:= temp @kind wide;
  #L4d0b62.  v14:= v4[v6] @kind wide;
  #L4d0b66.  v16:= lcmp(v12, v14);
  #L4d0b6a.  if v16 == 0 then goto L4d0bf2;
  #L4d0b6e.  v12:= v5 + v6 @kind int;
  #L4d0b72.  call temp:= `get`(v3, v12) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.get:(I)J` @kind virtual;
  #L4d0b78.  v12:= temp @kind wide;
  #L4d0b7a.  v16:= 0L;
  #L4d0b7e.  v18:= lcmp(v12, v16);
  #L4d0b82.  if v18 != 0 then goto L4d0bf2;
  #L4d0b86.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4d0b8c.  v11:= temp @kind object;
  #L4d0b8e.  if v11 != 0 then goto L4d0b94;
  #L4d0b92.  goto L4d0c02;
  #L4d0b94.  v12:= v2[v6] @kind object;
  #L4d0b98.  call `onNext`(v12, v11) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d0b9e.  v11:= 1L;
  #L4d0ba2.  v14:= v14 + v11 @kind long;
  #L4d0ba4.  v4[v6]:= v14 @kind wide;
  #L4d0ba8.  v7:= v7 + 1;
  #L4d0bac.  v11:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.e` @type ^`int`;
  #L4d0bb0.  if v7 != v11 then goto L4d0bc2;
  #L4d0bb4.  v11:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d0bb8.  v12:= (`long`) v7 @kind i2l;
  #L4d0bba.  call `request`(v11, v12) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d0bc0.  v7:= 0I;
  #L4d0bc2.  v11:= 0I;
  #L4d0bc4.  goto L4d0bf4;
  #L4d0bc6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d0bc8.  v3:= v0 @kind object;
  #L4d0bca.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d0bd0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d0bd4.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d0bda.  v0:= length @variable v2;
  #L4d0bdc.  if v10 >= v0 then goto L4d0bf0;
  #L4d0be0.  v4:= v2[v10] @kind object;
  #L4d0be4.  call `onError`(v4, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d0bea.  v10:= v10 + 1;
  #L4d0bee.  goto L4d0bdc;
  #L4d0bf0.  return @kind void;
  #L4d0bf2.  v11:= v11 + v8 @kind int;
  #L4d0bf4.  v6:= v6 + 1;
  #L4d0bf8.  if v6 != v5 then goto L4d0bfe;
  #L4d0bfc.  v6:= 0I;
  #L4d0bfe.  if v11 != v5 then goto L4d0aee;
  #L4d0c02.  call temp:= `get`(v19) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4d0c08.  v10:= temp;
  #L4d0c0a.  if v10 != v9 then goto L4d0c26;
  #L4d0c0e.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.j` @type ^`int` := v6;
  #L4d0c12.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.m` @type ^`int` := v7;
  #L4d0c16.  v9:= -v9 @kind int;
  #L4d0c18.  call temp:= `addAndGet`(v1, v9) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4d0c1e.  v9:= temp;
  #L4d0c20.  if v9 != 0 then goto L4d0aea;
  #L4d0c24.  return @kind void;
  #L4d0c26.  v9:= v10;
  #L4d0c28.  goto L4d0aea;
  catch `java.lang.Throwable` @[L4d0b86..L4d0b8e] goto L4d0bc6;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a` v18 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L4d0c48.  v1:= v18 @kind object;
  #L4d0c4c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4d0c50.  v2:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.a` @type ^`org.reactivestreams.Subscriber`[] @kind object;
  #L4d0c54.  v3:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.b` @type ^`java.util.concurrent.atomic.AtomicLongArray` @kind object;
  #L4d0c58.  v4:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.c` @type ^`long`[] @kind object;
  #L4d0c5c.  v5:= length @variable v4;
  #L4d0c5e.  v6:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.j` @type ^`int`;
  #L4d0c62.  v7:= 1I;
  #L4d0c64.  v8:= 1I;
  #L4d0c66.  v9:= 0I;
  #L4d0c68.  v10:= 0I;
  #L4d0c6a.  v11:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.k` @type ^`boolean` @kind boolean;
  #L4d0c6e.  if v11 == 0 then goto L4d0c7a;
  #L4d0c72.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4d0c78.  return @kind void;
  #L4d0c7a.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4d0c80.  v11:= temp;
  #L4d0c82.  if v11 == 0 then goto L4d0c9e;
  #L4d0c86.  v0:= length @variable v2;
  #L4d0c88.  if v9 >= v0 then goto L4d0c9c;
  #L4d0c8c.  v3:= v2[v9] @kind object;
  #L4d0c90.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d0c96.  v9:= v9 + 1;
  #L4d0c9a.  goto L4d0c88;
  #L4d0c9c.  return @kind void;
  #L4d0c9e.  call temp:= `get`(v3, v6) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.get:(I)J` @kind virtual;
  #L4d0ca4.  v11:= temp @kind wide;
  #L4d0ca6.  v13:= v4[v6] @kind wide;
  #L4d0caa.  v15:= lcmp(v11, v13);
  #L4d0cae.  if v15 == 0 then goto L4d0d32;
  #L4d0cb2.  v11:= v5 + v6 @kind int;
  #L4d0cb6.  call temp:= `get`(v3, v11) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.get:(I)J` @kind virtual;
  #L4d0cbc.  v11:= temp @kind wide;
  #L4d0cbe.  v15:= 0L;
  #L4d0cc2.  v17:= lcmp(v11, v15);
  #L4d0cc6.  if v17 != 0 then goto L4d0d32;
  #L4d0cca.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4d0cd0.  v10:= temp @kind object;
  #L4d0cd2.  if v10 != 0 then goto L4d0cee;
  #L4d0cd6.  v0:= length @variable v2;
  #L4d0cd8.  if v9 >= v0 then goto L4d0cec;
  #L4d0cdc.  v3:= v2[v9] @kind object;
  #L4d0ce0.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d0ce6.  v9:= v9 + 1;
  #L4d0cea.  goto L4d0cd8;
  #L4d0cec.  return @kind void;
  #L4d0cee.  v11:= v2[v6] @kind object;
  #L4d0cf2.  call `onNext`(v11, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d0cf8.  v10:= 1L;
  #L4d0cfc.  v13:= v13 + v10 @kind long;
  #L4d0cfe.  v4[v6]:= v13 @kind wide;
  #L4d0d02.  v10:= 0I;
  #L4d0d04.  goto L4d0d34;
  #L4d0d06.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d0d08.  v3:= v0 @kind object;
  #L4d0d0a.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d0d10.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d0d14.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d0d1a.  v0:= length @variable v2;
  #L4d0d1c.  if v9 >= v0 then goto L4d0d30;
  #L4d0d20.  v4:= v2[v9] @kind object;
  #L4d0d24.  call `onError`(v4, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d0d2a.  v9:= v9 + 1;
  #L4d0d2e.  goto L4d0d1c;
  #L4d0d30.  return @kind void;
  #L4d0d32.  v10:= v10 + v7 @kind int;
  #L4d0d34.  v6:= v6 + 1;
  #L4d0d38.  if v6 != v5 then goto L4d0d3e;
  #L4d0d3c.  v6:= 0I;
  #L4d0d3e.  if v10 != v5 then goto L4d0c6a;
  #L4d0d42.  call temp:= `get`(v18) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4d0d48.  v9:= temp;
  #L4d0d4a.  if v9 != v8 then goto L4d0d62;
  #L4d0d4e.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.j` @type ^`int` := v6;
  #L4d0d52.  v8:= -v8 @kind int;
  #L4d0d54.  call temp:= `addAndGet`(v1, v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4d0d5a.  v8:= temp;
  #L4d0d5c.  if v8 != 0 then goto L4d0c66;
  #L4d0d60.  return @kind void;
  #L4d0d62.  v8:= v9;
  #L4d0d64.  goto L4d0c66;
  catch `java.lang.Throwable` @[L4d0cca..L4d0cd2] goto L4d0d06;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a` v6 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4d0ebc.  v0:= v6.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.a` @type ^`org.reactivestreams.Subscriber`[] @kind object;
  #L4d0ec0.  v1:= length @variable v0;
  #L4d0ec2.  v2:= 0I;
  #L4d0ec4.  if v2 >= v1 then goto L4d0eee;
  #L4d0ec8.  v3:= v6.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4d0ecc.  v4:= v2 + 1;
  #L4d0ed0.  call `lazySet`(v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4d0ed6.  v3:= v0[v2] @kind object;
  #L4d0eda.  v5:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a$a`;
  #L4d0ede.  call `<init>`(v5, v6, v2, v1) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a;II)V` @kind direct;
  #L4d0ee4.  call `onSubscribe`(v3, v5) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4d0eea.  v2:= v4;
  #L4d0eec.  goto L4d0ec4;
  #L4d0eee.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d0d84.  v0:= 1I;
  #L4d0d86.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.i` @type ^`boolean` := v0 @kind boolean;
  #L4d0d8a.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a;.b:()V` @kind virtual;
  #L4d0d90.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L4d0da4.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.h` @type ^`java.lang.Throwable` := v1 @kind object;
  #L4d0da8.  v1:= 1I;
  #L4d0daa.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.i` @type ^`boolean` := v1 @kind boolean;
  #L4d0dae.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a;.b:()V` @kind virtual;
  #L4d0db4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d0dc8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.n` @type ^`int`;
  #L4d0dcc.  if v0 != 0 then goto L4d0e00;
  #L4d0dd0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4d0dd4.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4d0dda.  v2:= temp;
  #L4d0ddc.  if v2 != 0 then goto L4d0e00;
  #L4d0de0.  v2:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d0de4.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d0dea.  v2:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4d0dee.  v0:= "Queue is full?" @kind object;
  #L4d0df2.  call `<init>`(v2, v0) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4d0df8.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4d0dfe.  return @kind void;
  #L4d0e00.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a;.b:()V` @kind virtual;
  #L4d0e06.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4d0e18.  v0:= v3.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d0e1c.  call temp:= `validate`(v0, v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4d0e22.  v0:= temp;
  #L4d0e24.  if v0 == 0 then goto L4d0eaa;
  #L4d0e28.  v3.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.f` @type ^`org.reactivestreams.Subscription` := v4 @kind object;
  #L4d0e2c.  v0:= instanceof @variable v4 @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind boolean;
  #L4d0e30.  if v0 == 0 then goto L4d0e86;
  #L4d0e34.  v0:= v4 @kind object;
  #L4d0e36.  v0:= (`io.reactivex.rxjava3.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L4d0e3a.  v1:= 7I;
  #L4d0e3c.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L4d0e42.  v1:= temp;
  #L4d0e44.  v2:= 1I;
  #L4d0e46.  if v1 != v2 then goto L4d0e64;
  #L4d0e4a.  v3.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.n` @type ^`int` := v1;
  #L4d0e4e.  v3.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4d0e52.  v3.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.i` @type ^`boolean` := v2 @kind boolean;
  #L4d0e56.  call `e`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a;.e:()V` @kind virtual;
  #L4d0e5c.  call `b`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a;.b:()V` @kind virtual;
  #L4d0e62.  return @kind void;
  #L4d0e64.  v2:= 2I;
  #L4d0e66.  if v1 != v2 then goto L4d0e86;
  #L4d0e6a.  v3.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.n` @type ^`int` := v1;
  #L4d0e6e.  v3.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4d0e72.  call `e`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a;.e:()V` @kind virtual;
  #L4d0e78.  v0:= v3.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.d` @type ^`int`;
  #L4d0e7c.  v0:= (`long`) v0 @kind i2l;
  #L4d0e7e.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d0e84.  return @kind void;
  #L4d0e86.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L4d0e8a.  v1:= v3.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.d` @type ^`int`;
  #L4d0e8e.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L4d0e94.  v3.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4d0e98.  call `e`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a;.e:()V` @kind virtual;
  #L4d0e9e.  v0:= v3.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.d` @type ^`int`;
  #L4d0ea2.  v0:= (`long`) v0 @kind i2l;
  #L4d0ea4.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d0eaa.  return @kind void;
}
