record `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.core.MaybeObserver` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.MaybeSource` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a.b` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a.c` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatWithMaybe$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/core/MaybeSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4babd8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4babde.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4babe2.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a.b` @type ^`io.reactivex.rxjava3.core.MaybeSource` := v2 @kind object;
  #L4babe6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatWithMaybe$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4babf8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4babfe.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatWithMaybe$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4babb0.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4babb6.  v0:= temp @kind object;
  #L4babb8.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4babbc.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4babc2.  v0:= temp;
  #L4babc4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatWithMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bac10.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a.c` @type ^`boolean` @kind boolean;
  #L4bac14.  if v0 == 0 then goto L4bac24;
  #L4bac18.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4bac1c.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4bac22.  goto L4bac40;
  #L4bac24.  v0:= 1I;
  #L4bac26.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a.c` @type ^`boolean` := v0 @kind boolean;
  #L4bac2a.  v0:= 0I;
  #L4bac2c.  call temp:= `replace`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4bac32.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a.b` @type ^`io.reactivex.rxjava3.core.MaybeSource` @kind object;
  #L4bac36.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a.b` @type ^`io.reactivex.rxjava3.core.MaybeSource` := v0 @kind object;
  #L4bac3a.  call `subscribe`(v1, v2) @signature `Lio/reactivex/rxjava3/core/MaybeSource;.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind interface;
  #L4bac40.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatWithMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bac54.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4bac58.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4bac5e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatWithMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bac70.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4bac74.  call `onNext`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4bac7a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatWithMaybe$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4bac8c.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4bac92.  v1:= temp;
  #L4bac94.  if v1 == 0 then goto L4bacaa;
  #L4bac98.  v1:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a.c` @type ^`boolean` @kind boolean;
  #L4bac9c.  if v1 != 0 then goto L4bacaa;
  #L4baca0.  v1:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4baca4.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4bacaa.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatWithMaybe$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bacbc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4bacc0.  call `onNext`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4bacc6.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4bacca.  call `onComplete`(v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4bacd0.  return @kind void;
}
