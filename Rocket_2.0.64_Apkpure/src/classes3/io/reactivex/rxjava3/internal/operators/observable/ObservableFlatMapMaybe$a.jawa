record `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.CompositeDisposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.g` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.h` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.i` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4be760.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4be766.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4be76a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.f` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4be76e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.b` @type ^`boolean` := v3 @kind boolean;
  #L4be772.  v1:= new `io.reactivex.rxjava3.disposables.CompositeDisposable`;
  #L4be776.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L4be77c.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` := v1 @kind object;
  #L4be780.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4be784.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4be78a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4be78e.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4be792.  v2:= 1I;
  #L4be794.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L4be79a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L4be79e.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4be7a2.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4be7a8.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4be7ac.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L4be7c0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4be7c4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4be7ca.  v0:= temp @kind object;
  #L4be7cc.  v0:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L4be7d0.  if v0 == 0 then goto L4be7da;
  #L4be7d4.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4be7da.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L4be824.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4be82a.  v0:= temp;
  #L4be82c.  if v0 != 0 then goto L4be836;
  #L4be830.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.c:()V` @kind virtual;
  #L4be836.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a` v8 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4be848.  v0:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4be84c.  v1:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4be850.  v2:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4be854.  v3:= 1I;
  #L4be856.  v4:= 1I;
  #L4be858.  v5:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.i` @type ^`boolean` @kind boolean;
  #L4be85c.  if v5 == 0 then goto L4be868;
  #L4be860.  call `a`(v8) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.a:()V` @kind virtual;
  #L4be866.  return @kind void;
  #L4be868.  v5:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.b` @type ^`boolean` @kind boolean;
  #L4be86c.  if v5 != 0 then goto L4be896;
  #L4be870.  v5:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4be874.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4be87a.  v5:= temp @kind object;
  #L4be87c.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L4be880.  if v5 == 0 then goto L4be896;
  #L4be884.  call `a`(v8) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.a:()V` @kind virtual;
  #L4be88a.  v1:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4be88e.  call `tryTerminateConsumer`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4be894.  return @kind void;
  #L4be896.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4be89c.  v5:= temp;
  #L4be89e.  v6:= 0I;
  #L4be8a0.  if v5 != 0 then goto L4be8a8;
  #L4be8a4.  v5:= 1I;
  #L4be8a6.  goto L4be8aa;
  #L4be8a8.  v5:= 0I;
  #L4be8aa.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4be8b0.  v7:= temp @kind object;
  #L4be8b2.  v7:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v7 @kind object;
  #L4be8b6.  if v7 == 0 then goto L4be8c4;
  #L4be8ba.  call temp:= `poll`(v7) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4be8c0.  v7:= temp @kind object;
  #L4be8c2.  goto L4be8c6;
  #L4be8c4.  v7:= 0I;
  #L4be8c6.  if v7 != 0 then goto L4be8cc;
  #L4be8ca.  v6:= 1I;
  #L4be8cc.  if v5 == 0 then goto L4be8e0;
  #L4be8d0.  if v6 == 0 then goto L4be8e0;
  #L4be8d4.  v1:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4be8d8.  call `tryTerminateConsumer`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4be8de.  return @kind void;
  #L4be8e0.  if v6 == 0 then goto L4be8f4;
  #L4be8e4.  v4:= -v4 @kind int;
  #L4be8e6.  call temp:= `addAndGet`(v8, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4be8ec.  v4:= temp;
  #L4be8ee.  if v4 != 0 then goto L4be858;
  #L4be8f2.  return @kind void;
  #L4be8f4.  call `onNext`(v0, v7) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4be8fa.  goto L4be858;
}
procedure `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` `d`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.d:()Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4be700.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4be704.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4be70a.  v0:= temp @kind object;
  #L4be70c.  v0:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L4be710.  if v0 == 0 then goto L4be716;
  #L4be714.  return v0 @kind object;
  #L4be716.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4be71a.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Observable;.bufferSize:()I` @kind static;
  #L4be720.  v1:= temp;
  #L4be722.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4be728.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4be72c.  v2:= 0I;
  #L4be72e.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4be734.  v1:= temp;
  #L4be736.  if v1 == 0 then goto L4be73c;
  #L4be73a.  return v0 @kind object;
  #L4be73c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4be740.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4be746.  v0:= temp @kind object;
  #L4be748.  v0:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L4be74c.  return v0 @kind object;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4be7ec.  v0:= 1I;
  #L4be7ee.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.i` @type ^`boolean` := v0 @kind boolean;
  #L4be7f2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4be7f6.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4be7fc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4be800.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4be806.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4be80a.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4be810.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a` v2 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a$a` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.e:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4be90c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4be910.  call temp:= `delete`(v0, v3) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4be916.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4be91c.  v3:= temp;
  #L4be91e.  if v3 != 0 then goto L4be98e;
  #L4be922.  v3:= 0I;
  #L4be924.  v0:= 1I;
  #L4be926.  call temp:= `compareAndSet`(v2, v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4be92c.  v1:= temp;
  #L4be92e.  if v1 == 0 then goto L4be98e;
  #L4be932.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4be936.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4be93c.  v1:= temp;
  #L4be93e.  if v1 != 0 then goto L4be944;
  #L4be942.  v3:= 1I;
  #L4be944.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4be948.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4be94e.  v0:= temp @kind object;
  #L4be950.  v0:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L4be954.  if v3 == 0 then goto L4be978;
  #L4be958.  if v0 == 0 then goto L4be968;
  #L4be95c.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L4be962.  v3:= temp;
  #L4be964.  if v3 == 0 then goto L4be978;
  #L4be968.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4be96c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4be970.  call `tryTerminateConsumer`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4be976.  return @kind void;
  #L4be978.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4be97e.  v3:= temp;
  #L4be980.  if v3 != 0 then goto L4be986;
  #L4be984.  return @kind void;
  #L4be986.  call `c`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.c:()V` @kind virtual;
  #L4be98c.  goto L4be99e;
  #L4be98e.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4be992.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4be998.  call `b`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.b:()V` @kind virtual;
  #L4be99e.  return @kind void;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a` v1 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a$a` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.f:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4be9b0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4be9b4.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4be9ba.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4be9be.  call temp:= `tryAddThrowableOrReport`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4be9c4.  v2:= temp;
  #L4be9c6.  if v2 == 0 then goto L4be9f6;
  #L4be9ca.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.b` @type ^`boolean` @kind boolean;
  #L4be9ce.  if v2 != 0 then goto L4be9e6;
  #L4be9d2.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4be9d6.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4be9dc.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4be9e0.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4be9e6.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4be9ea.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4be9f0.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.b:()V` @kind virtual;
  #L4be9f6.  return @kind void;
}
procedure `void` `g`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a` v2 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a$a` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.g:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a$a;Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4bea08.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4bea0c.  call temp:= `delete`(v0, v3) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4bea12.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4bea18.  v3:= temp;
  #L4bea1a.  if v3 != 0 then goto L4bea8c;
  #L4bea1e.  v3:= 0I;
  #L4bea20.  v0:= 1I;
  #L4bea22.  call temp:= `compareAndSet`(v2, v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4bea28.  v1:= temp;
  #L4bea2a.  if v1 == 0 then goto L4bea8c;
  #L4bea2e.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4bea32.  call `onNext`(v1, v4) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4bea38.  v4:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4bea3c.  call temp:= `decrementAndGet`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4bea42.  v4:= temp;
  #L4bea44.  if v4 != 0 then goto L4bea4a;
  #L4bea48.  v3:= 1I;
  #L4bea4a.  v4:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4bea4e.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4bea54.  v4:= temp @kind object;
  #L4bea56.  v4:= (`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`) v4 @kind object;
  #L4bea5a.  if v3 == 0 then goto L4bea7e;
  #L4bea5e.  if v4 == 0 then goto L4bea6e;
  #L4bea62.  call temp:= `isEmpty`(v4) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L4bea68.  v3:= temp;
  #L4bea6a.  if v3 == 0 then goto L4bea7e;
  #L4bea6e.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bea72.  v4:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4bea76.  call `tryTerminateConsumer`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4bea7c.  return @kind void;
  #L4bea7e.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4bea84.  v3:= temp;
  #L4bea86.  if v3 != 0 then goto L4beab6;
  #L4bea8a.  return @kind void;
  #L4bea8c.  call temp:= `d`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.d:()Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;` @kind virtual;
  #L4bea92.  v3:= temp @kind object;
  #L4bea94.  @monitorenter v3
  #L4bea96.  call temp:= `offer`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4bea9c.  @monitorexit v3
  #L4bea9e.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4beaa2.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4beaa8.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4beaae.  v3:= temp;
  #L4beab0.  if v3 == 0 then goto L4beab6;
  #L4beab4.  return @kind void;
  #L4beab6.  call `c`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.c:()V` @kind virtual;
  #L4beabc.  return @kind void;
  #L4beabe.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4beac0.  @monitorexit v3
  #L4beac2.  throw v4;
  catch `java.lang.Throwable` @[L4bea96..L4bea9e] goto L4beabe;
  catch `java.lang.Throwable` @[L4beac0..L4beac2] goto L4beabe;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4be6e8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.i` @type ^`boolean` @kind boolean;
  #L4be6ec.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4beae8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4beaec.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4beaf2.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.b:()V` @kind virtual;
  #L4beaf8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4beb0c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4beb10.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4beb16.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4beb1a.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4beb20.  v2:= temp;
  #L4beb22.  if v2 == 0 then goto L4beb3e;
  #L4beb26.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.b` @type ^`boolean` @kind boolean;
  #L4beb2a.  if v2 != 0 then goto L4beb38;
  #L4beb2e.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4beb32.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4beb38.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.b:()V` @kind virtual;
  #L4beb3e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4beb50.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.f` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4beb54.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4beb5a.  v3:= temp @kind object;
  #L4beb5c.  v0:= "The mapper returned a null MaybeSource" @kind object;
  #L4beb60.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4beb66.  v3:= (`io.reactivex.rxjava3.core.MaybeSource`) v3 @kind object;
  #L4beb6a.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4beb6e.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4beb74.  v0:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a$a`;
  #L4beb78.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;)V` @kind direct;
  #L4beb7e.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.i` @type ^`boolean` @kind boolean;
  #L4beb82.  if v1 != 0 then goto L4beb9c;
  #L4beb86.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4beb8a.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4beb90.  v1:= temp;
  #L4beb92.  if v1 == 0 then goto L4beb9c;
  #L4beb96.  call `subscribe`(v3, v0) @signature `Lio/reactivex/rxjava3/core/MaybeSource;.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind interface;
  #L4beb9c.  return @kind void;
  #L4beb9e.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4beba0.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4beba6.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4bebaa.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4bebb0.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4bebb6.  return @kind void;
  catch `java.lang.Throwable` @[L4beb50..L4beb6a] goto L4beb9e;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bebd4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4bebd8.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4bebde.  v0:= temp;
  #L4bebe0.  if v0 == 0 then goto L4bebf2;
  #L4bebe4.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.h` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4bebe8.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4bebec.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4bebf2.  return @kind void;
}
