record `io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Observable` @kind class {
  `io.reactivex.rxjava3.core.Scheduler` `io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange.a` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange.b` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange.c` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange.d` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange.e` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange.f` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange` v0 @kind this, `long` v1 , `long` v3 , `long` v5 , `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `io.reactivex.rxjava3.core.Scheduler` v10 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableIntervalRange;.<init>:(JJJJLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4c1cfc.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/core/Observable;.<init>:()V` @kind direct;
  #L4c1d02.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange.d` @type ^`long` := v5 @kind wide;
  #L4c1d06.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange.e` @type ^`long` := v7 @kind wide;
  #L4c1d0a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange.f` @type ^`java.util.concurrent.TimeUnit` := v9 @kind object;
  #L4c1d0e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange.a` @type ^`io.reactivex.rxjava3.core.Scheduler` := v10 @kind object;
  #L4c1d12.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange.b` @type ^`long` := v1 @kind wide;
  #L4c1d16.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange.c` @type ^`long` := v3 @kind wide;
  #L4c1d1a.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange` v8 @kind this, `io.reactivex.rxjava3.core.Observer` v9 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableIntervalRange;.subscribeActual:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4c1d2c.  v7:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange$a`;
  #L4c1d30.  v2:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange.b` @type ^`long` @kind wide;
  #L4c1d34.  v4:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange.c` @type ^`long` @kind wide;
  #L4c1d38.  v0:= v7 @kind object;
  #L4c1d3a.  v1:= v9 @kind object;
  #L4c1d3c.  call `<init>`(v0, v1, v2, v4) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableIntervalRange$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;JJ)V` @kind direct;
  #L4c1d42.  call `onSubscribe`(v9, v7) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4c1d48.  v0:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange.a` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4c1d4c.  v9:= instanceof @variable v0 @type ^`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler` @kind boolean;
  #L4c1d50.  if v9 == 0 then goto L4c1d78;
  #L4c1d54.  call temp:= `createWorker`(v0) @signature `Lio/reactivex/rxjava3/core/Scheduler;.createWorker:()Lio/reactivex/rxjava3/core/Scheduler$Worker;` @kind virtual;
  #L4c1d5a.  v0:= temp @kind object;
  #L4c1d5c.  call `a`(v7, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableIntervalRange$a;.a:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind virtual;
  #L4c1d62.  v2:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange.d` @type ^`long` @kind wide;
  #L4c1d66.  v4:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange.e` @type ^`long` @kind wide;
  #L4c1d6a.  v6:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange.f` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4c1d6e.  v1:= v7 @kind object;
  #L4c1d70.  call temp:= `schedulePeriodically`(v0, v1, v2, v4, v6) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4c1d76.  goto L4c1d94;
  #L4c1d78.  v2:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange.d` @type ^`long` @kind wide;
  #L4c1d7c.  v4:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange.e` @type ^`long` @kind wide;
  #L4c1d80.  v6:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange.f` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4c1d84.  v1:= v7 @kind object;
  #L4c1d86.  call temp:= `schedulePeriodicallyDirect`(v0, v1, v2, v4, v6) @signature `Lio/reactivex/rxjava3/core/Scheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4c1d8c.  v9:= temp @kind object;
  #L4c1d8e.  call `a`(v7, v9) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableIntervalRange$a;.a:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind virtual;
  #L4c1d94.  return @kind void;
}
