record `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c.m` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c.n` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `int` v3 , `boolean` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$c;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;IZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L48b4b0.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$b;.<init>:(Lio/reactivex/rxjava3/functions/Function;I)V` @kind direct;
  #L48b4b6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c.m` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L48b4ba.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c.n` @type ^`boolean` := v4 @kind boolean;
  #L48b4be.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$c;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48b714.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48b718.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L48b71e.  v2:= temp;
  #L48b720.  if v2 == 0 then goto L48b748;
  #L48b724.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c.n` @type ^`boolean` @kind boolean;
  #L48b728.  if v2 != 0 then goto L48b73c;
  #L48b72c.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48b730.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L48b736.  v2:= 1I;
  #L48b738.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.h` @type ^`boolean` := v2 @kind boolean;
  #L48b73c.  v2:= 0I;
  #L48b73e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.k` @type ^`boolean` := v2 @kind boolean;
  #L48b742.  call `d`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$c;.d:()V` @kind virtual;
  #L48b748.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$c;.c:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48b75c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48b760.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L48b766.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48b4d0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.i` @type ^`boolean` @kind boolean;
  #L48b4d4.  if v0 != 0 then goto L48b4fc;
  #L48b4d8.  v0:= 1I;
  #L48b4da.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.i` @type ^`boolean` := v0 @kind boolean;
  #L48b4de.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L48b4e2.  call `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.cancel:()V` @kind virtual;
  #L48b4e8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48b4ec.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L48b4f2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48b4f6.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L48b4fc.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c` v6 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$c;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L48b510.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L48b516.  v0:= temp;
  #L48b518.  if v0 != 0 then goto L48b6de;
  #L48b51c.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.i` @type ^`boolean` @kind boolean;
  #L48b520.  if v0 == 0 then goto L48b526;
  #L48b524.  return @kind void;
  #L48b526.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.k` @type ^`boolean` @kind boolean;
  #L48b52a.  if v0 != 0 then goto L48b6d2;
  #L48b52e.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.h` @type ^`boolean` @kind boolean;
  #L48b532.  if v0 == 0 then goto L48b562;
  #L48b536.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c.n` @type ^`boolean` @kind boolean;
  #L48b53a.  if v1 != 0 then goto L48b562;
  #L48b53e.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48b542.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L48b548.  v1:= temp @kind object;
  #L48b54a.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L48b54e.  if v1 == 0 then goto L48b562;
  #L48b552.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48b556.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48b55a.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L48b560.  return @kind void;
  #L48b562.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L48b566.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L48b56c.  v1:= temp @kind object;
  #L48b56e.  v2:= 0I;
  #L48b570.  v3:= 1I;
  #L48b572.  if v1 != 0 then goto L48b57a;
  #L48b576.  v4:= 1I;
  #L48b578.  goto L48b57c;
  #L48b57a.  v4:= 0I;
  #L48b57c.  if v0 == 0 then goto L48b594;
  #L48b580.  if v4 == 0 then goto L48b594;
  #L48b584.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48b588.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48b58c.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L48b592.  return @kind void;
  #L48b594.  if v4 != 0 then goto L48b6d2;
  #L48b598.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L48b59c.  call temp:= `apply`(v0, v1) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L48b5a2.  v0:= temp @kind object;
  #L48b5a4.  v1:= "The mapper returned a null Publisher" @kind object;
  #L48b5a8.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48b5ae.  v0:= (`org.reactivestreams.Publisher`) v0 @kind object;
  #L48b5b2.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.l` @type ^`int`;
  #L48b5b6.  if v1 == v3 then goto L48b5de;
  #L48b5ba.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.f` @type ^`int`;
  #L48b5be.  v1:= v1 + v3 @kind int;
  #L48b5c0.  v4:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.d` @type ^`int`;
  #L48b5c4.  if v1 != v4 then goto L48b5da;
  #L48b5c8.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.f` @type ^`int` := v2;
  #L48b5cc.  v2:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48b5d0.  v4:= (`long`) v1 @kind i2l;
  #L48b5d2.  call `request`(v2, v4) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L48b5d8.  goto L48b5de;
  #L48b5da.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.f` @type ^`int` := v1;
  #L48b5de.  v1:= instanceof @variable v0 @type ^`io.reactivex.rxjava3.functions.Supplier` @kind boolean;
  #L48b5e2.  if v1 == 0 then goto L48b66a;
  #L48b5e6.  v0:= (`io.reactivex.rxjava3.functions.Supplier`) v0 @kind object;
  #L48b5ea.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L48b5f0.  v0:= temp @kind object;
  #L48b5f2.  goto L48b62a;
  #L48b5f4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48b5f6.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L48b5fc.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48b600.  call temp:= `tryAddThrowableOrReport`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L48b606.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c.n` @type ^`boolean` @kind boolean;
  #L48b60a.  if v0 != 0 then goto L48b628;
  #L48b60e.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48b612.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L48b618.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48b61c.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48b620.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L48b626.  return @kind void;
  #L48b628.  v0:= 0I;
  #L48b62a.  if v0 != 0 then goto L48b632;
  #L48b62e.  goto L48b51c;
  #L48b632.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L48b636.  call temp:= `isUnbounded`(v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.isUnbounded:()Z` @kind virtual;
  #L48b63c.  v1:= temp;
  #L48b63e.  if v1 == 0 then goto L48b650;
  #L48b642.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48b646.  call `onNext`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L48b64c.  goto L48b51c;
  #L48b650.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.k` @type ^`boolean` := v3 @kind boolean;
  #L48b654.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L48b658.  v2:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$g`;
  #L48b65c.  call `<init>`(v2, v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$g;.<init>:(Ljava/lang/Object;Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L48b662.  call `setSubscription`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L48b668.  goto L48b6d2;
  #L48b66a.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.k` @type ^`boolean` := v3 @kind boolean;
  #L48b66e.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L48b672.  call `subscribe`(v0, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L48b678.  goto L48b6d2;
  #L48b67a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48b67c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L48b682.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48b686.  call `cancel`(v1) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L48b68c.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48b690.  call temp:= `tryAddThrowableOrReport`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L48b696.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48b69a.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48b69e.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L48b6a4.  return @kind void;
  #L48b6a6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48b6a8.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L48b6ae.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48b6b2.  call `cancel`(v1) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L48b6b8.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48b6bc.  call temp:= `tryAddThrowableOrReport`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L48b6c2.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48b6c6.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48b6ca.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L48b6d0.  return @kind void;
  #L48b6d2.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L48b6d8.  v0:= temp;
  #L48b6da.  if v0 != 0 then goto L48b51c;
  #L48b6de.  return @kind void;
  catch `java.lang.Throwable` @[L48b562..L48b56e] goto L48b6a6;
  catch `java.lang.Throwable` @[L48b598..L48b5b2] goto L48b67a;
  catch `java.lang.Throwable` @[L48b5ea..L48b5f2] goto L48b5f4;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$c;.e:()V` @AccessFlag  {
    temp;
    v0;

  #L48b7c4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48b7c8.  call `onSubscribe`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L48b7ce.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48b778.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48b77c.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L48b782.  v2:= temp;
  #L48b784.  if v2 == 0 then goto L48b794;
  #L48b788.  v2:= 1I;
  #L48b78a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.h` @type ^`boolean` := v2 @kind boolean;
  #L48b78e.  call `d`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$c;.d:()V` @kind virtual;
  #L48b794.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$c` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48b7a8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L48b7ac.  call `request`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.request:(J)V` @kind virtual;
  #L48b7b2.  return @kind void;
}
