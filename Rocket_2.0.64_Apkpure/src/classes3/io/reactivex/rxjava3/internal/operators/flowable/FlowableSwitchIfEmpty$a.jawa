record `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$a.a` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$a.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchIfEmpty$a;.<init>:(Lorg/reactivestreams/Subscriber;Lorg/reactivestreams/Publisher;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a2024.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a202a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4a202e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$a.b` @type ^`org.reactivestreams.Publisher` := v2 @kind object;
  #L4a2032.  v1:= 1I;
  #L4a2034.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$a.d` @type ^`boolean` := v1 @kind boolean;
  #L4a2038.  v1:= new `io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter`;
  #L4a203c.  v2:= 0I;
  #L4a203e.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.<init>:(Z)V` @kind direct;
  #L4a2044.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$a.c` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` := v1 @kind object;
  #L4a2048.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchIfEmpty$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a205c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$a.d` @type ^`boolean` @kind boolean;
  #L4a2060.  if v0 == 0 then goto L4a2076;
  #L4a2064.  v0:= 0I;
  #L4a2066.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4a206a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$a.b` @type ^`org.reactivestreams.Publisher` @kind object;
  #L4a206e.  call `subscribe`(v0, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4a2074.  goto L4a2080;
  #L4a2076.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a207a.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4a2080.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchIfEmpty$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a2094.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a2098.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a209e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchIfEmpty$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a20b0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$a.d` @type ^`boolean` @kind boolean;
  #L4a20b4.  if v0 == 0 then goto L4a20be;
  #L4a20b8.  v0:= 0I;
  #L4a20ba.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4a20be.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a20c2.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4a20c8.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchIfEmpty$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a20dc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$a.c` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L4a20e0.  call `setSubscription`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L4a20e6.  return @kind void;
}
