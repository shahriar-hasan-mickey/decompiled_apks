record `io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.parallel.ParallelFlowable` @kind class {
  `io.reactivex.rxjava3.parallel.ParallelFlowable` `io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiFunction` `io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry` v0 @kind this, `io.reactivex.rxjava3.parallel.ParallelFlowable` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry;.<init>:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/BiFunction;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4d20e0.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.<init>:()V` @kind direct;
  #L4d20e6.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry.a` @type ^`io.reactivex.rxjava3.parallel.ParallelFlowable` := v1 @kind object;
  #L4d20ea.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4d20ee.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry.c` @type ^`io.reactivex.rxjava3.functions.BiFunction` := v3 @kind object;
  #L4d20f2.  return @kind void;
}
procedure `int` `parallelism`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry;.parallelism:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d20c0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry.a` @type ^`io.reactivex.rxjava3.parallel.ParallelFlowable` @kind object;
  #L4d20c4.  call temp:= `parallelism`(v0) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.parallelism:()I` @kind virtual;
  #L4d20ca.  v0:= temp;
  #L4d20cc.  return v0;
}
procedure `void` `subscribe`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry` v7 @kind this, `org.reactivestreams.Subscriber`[] v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4d2104.  call temp:= `validate`(v7, v8) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.validate:([Lorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L4d210a.  v0:= temp;
  #L4d210c.  if v0 != 0 then goto L4d2112;
  #L4d2110.  return @kind void;
  #L4d2112.  v0:= length @variable v8;
  #L4d2114.  v1:= new `org.reactivestreams.Subscriber`[v0];
  #L4d2118.  v2:= 0I;
  #L4d211a.  if v2 >= v0 then goto L4d2162;
  #L4d211e.  v3:= v8[v2] @kind object;
  #L4d2122.  v4:= instanceof @variable v3 @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind boolean;
  #L4d2126.  if v4 == 0 then goto L4d2146;
  #L4d212a.  v4:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$b`;
  #L4d212e.  v3:= (`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber`) v3 @kind object;
  #L4d2132.  v5:= v7.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4d2136.  v6:= v7.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry.c` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L4d213a.  call `<init>`(v4, v3, v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$b;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/BiFunction;)V` @kind direct;
  #L4d2140.  v1[v2]:= v4 @kind object;
  #L4d2144.  goto L4d215c;
  #L4d2146.  v4:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c`;
  #L4d214a.  v5:= v7.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4d214e.  v6:= v7.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry.c` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L4d2152.  call `<init>`(v4, v3, v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$c;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/BiFunction;)V` @kind direct;
  #L4d2158.  v1[v2]:= v4 @kind object;
  #L4d215c.  v2:= v2 + 1;
  #L4d2160.  goto L4d211a;
  #L4d2162.  v8:= v7.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry.a` @type ^`io.reactivex.rxjava3.parallel.ParallelFlowable` @kind object;
  #L4d2166.  call `subscribe`(v8, v1) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4d216c.  return @kind void;
}
