record `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `java.lang.Runnable` @kind interface, `io.reactivex.rxjava3.functions.Consumer` @kind interface {
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.b` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.c` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.d` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.e` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a` v0 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49d134.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L49d13a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount` := v1 @kind object;
  #L49d13e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$a;.a:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49d150.  call temp:= `replace`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L49d156.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount` @kind object;
  #L49d15a.  @monitorenter v2
  #L49d15c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.e` @type ^`boolean` @kind boolean;
  #L49d160.  if v0 == 0 then goto L49d172;
  #L49d164.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount` @kind object;
  #L49d168.  v0:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount.b` @type ^`io.reactivex.rxjava3.flowables.ConnectableFlowable` @kind object;
  #L49d16c.  call `reset`(v0) @signature `Lio/reactivex/rxjava3/flowables/ConnectableFlowable;.reset:()V` @kind virtual;
  #L49d172.  @monitorexit v2
  #L49d174.  return @kind void;
  #L49d176.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49d178.  @monitorexit v2
  #L49d17a.  throw v0;
  catch `java.lang.Throwable` @[L49d15c..L49d17a] goto L49d176;
}
procedure `void` `accept`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$a;.accept:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L49d198.  v1:= (`io.reactivex.rxjava3.disposables.Disposable`) v1 @kind object;
  #L49d19c.  call `a`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$a;.a:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind virtual;
  #L49d1a2.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49d1b4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount$a.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCount` @kind object;
  #L49d1b8.  call `g`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount;.g:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRefCount$a;)V` @kind virtual;
  #L49d1be.  return @kind void;
}
