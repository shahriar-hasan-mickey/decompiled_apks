record `io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.observers.BasicIntQueueDisposable` @kind class {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a.b` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a.c` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a.d` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `long` v2 , `long` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRangeLong$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;JJ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c4b34.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/observers/BasicIntQueueDisposable;.<init>:()V` @kind direct;
  #L4c4b3a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4c4b3e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a.c` @type ^`long` := v2 @kind wide;
  #L4c4b42.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a.b` @type ^`long` := v4 @kind wide;
  #L4c4b46.  return @kind void;
}
procedure `java.lang.Long` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRangeLong$a;.a:()Ljava/lang/Long;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4c4ad8.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a.c` @type ^`long` @kind wide;
  #L4c4adc.  v2:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a.b` @type ^`long` @kind wide;
  #L4c4ae0.  v4:= lcmp(v0, v2);
  #L4c4ae4.  if v4 == 0 then goto L4c4afc;
  #L4c4ae8.  v2:= 1L;
  #L4c4aec.  v2:= v2 + v0 @kind long;
  #L4c4aee.  v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a.c` @type ^`long` := v2 @kind wide;
  #L4c4af2.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4c4af8.  v0:= temp @kind object;
  #L4c4afa.  return v0 @kind object;
  #L4c4afc.  v0:= 1I;
  #L4c4afe.  call `lazySet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4c4b04.  v0:= 0I;
  #L4c4b06.  return v0 @kind object;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRangeLong$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c4b58.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a.b` @type ^`long` @kind wide;
  #L4c4b5c.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a.c` @type ^`long` := v0 @kind wide;
  #L4c4b60.  v0:= 1I;
  #L4c4b62.  call `lazySet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4c4b68.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRangeLong$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c4b7c.  v0:= 1I;
  #L4c4b7e.  call `set`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L4c4b84.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRangeLong$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c4a68.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4c4a6e.  v0:= temp;
  #L4c4a70.  if v0 == 0 then goto L4c4a78;
  #L4c4a74.  v0:= 1I;
  #L4c4a76.  goto L4c4a7a;
  #L4c4a78.  v0:= 0I;
  #L4c4a7a.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRangeLong$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4c4a8c.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a.c` @type ^`long` @kind wide;
  #L4c4a90.  v2:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a.b` @type ^`long` @kind wide;
  #L4c4a94.  v4:= lcmp(v0, v2);
  #L4c4a98.  if v4 != 0 then goto L4c4aa0;
  #L4c4a9c.  v0:= 1I;
  #L4c4a9e.  goto L4c4aa2;
  #L4c4aa0.  v0:= 0I;
  #L4c4aa2.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRangeLong$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L4c4b18.  call temp:= `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRangeLong$a;.a:()Ljava/lang/Long;` @kind virtual;
  #L4c4b1e.  v0:= temp @kind object;
  #L4c4b20.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRangeLong$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c4ab4.  v0:= 1I;
  #L4c4ab6.  v2:= v2 ^& v0 @kind int;
  #L4c4ab8.  if v2 == 0 then goto L4c4ac2;
  #L4c4abc.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4c4ac0.  return v0;
  #L4c4ac2.  v2:= 0I;
  #L4c4ac4.  return v2;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a` v7 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRangeLong$a;.run:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4c4b98.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a.d` @type ^`boolean` @kind boolean;
  #L4c4b9c.  if v0 == 0 then goto L4c4ba2;
  #L4c4ba0.  return @kind void;
  #L4c4ba2.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c4ba6.  v1:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a.b` @type ^`long` @kind wide;
  #L4c4baa.  v3:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$a.c` @type ^`long` @kind wide;
  #L4c4bae.  v5:= lcmp(v3, v1);
  #L4c4bb2.  if v5 == 0 then goto L4c4bd8;
  #L4c4bb6.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4c4bbc.  v5:= temp;
  #L4c4bbe.  if v5 != 0 then goto L4c4bd8;
  #L4c4bc2.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4c4bc8.  v5:= temp @kind object;
  #L4c4bca.  call `onNext`(v0, v5) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c4bd0.  v5:= 1L;
  #L4c4bd4.  v3:= v3 + v5 @kind long;
  #L4c4bd6.  goto L4c4bae;
  #L4c4bd8.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4c4bde.  v1:= temp;
  #L4c4be0.  if v1 != 0 then goto L4c4bf2;
  #L4c4be4.  v1:= 1I;
  #L4c4be6.  call `lazySet`(v7, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4c4bec.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4c4bf2.  return @kind void;
}
