record `io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.observers.BasicQueueDisposable` @kind class {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.a` @AccessFlag FINAL;
  `java.util.Iterator` `io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.c` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.d` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.e` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.f` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `java.util.Iterator` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFromIterable$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Ljava/util/Iterator;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4bfa4c.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/observers/BasicQueueDisposable;.<init>:()V` @kind direct;
  #L4bfa52.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4bfa56.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.b` @type ^`java.util.Iterator` := v2 @kind object;
  #L4bfa5a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFromIterable$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4bfa9c.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFromIterable$a;.isDisposed:()Z` @kind virtual;
  #L4bfaa2.  v0:= temp;
  #L4bfaa4.  if v0 == 0 then goto L4bfaaa;
  #L4bfaa8.  return @kind void;
  #L4bfaaa.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.b` @type ^`java.util.Iterator` @kind object;
  #L4bfaae.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4bfab4.  v0:= temp @kind object;
  #L4bfab6.  v1:= "The iterator returned a null value" @kind object;
  #L4bfaba.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4bfac0.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4bfac4.  call `onNext`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4bfaca.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFromIterable$a;.isDisposed:()Z` @kind virtual;
  #L4bfad0.  v0:= temp;
  #L4bfad2.  if v0 == 0 then goto L4bfad8;
  #L4bfad6.  return @kind void;
  #L4bfad8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.b` @type ^`java.util.Iterator` @kind object;
  #L4bfadc.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4bfae2.  v0:= temp;
  #L4bfae4.  if v0 != 0 then goto L4bfa9c;
  #L4bfae8.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFromIterable$a;.isDisposed:()Z` @kind virtual;
  #L4bfaee.  v0:= temp;
  #L4bfaf0.  if v0 != 0 then goto L4bfafe;
  #L4bfaf4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4bfaf8.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4bfafe.  return @kind void;
  #L4bfb00.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bfb02.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4bfb08.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4bfb0c.  call `onError`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4bfb12.  return @kind void;
  #L4bfb14.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bfb16.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4bfb1c.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4bfb20.  call `onError`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4bfb26.  return @kind void;
  catch `java.lang.Throwable` @[L4bfaaa..L4bfac0] goto L4bfb14;
  catch `java.lang.Throwable` @[L4bfad8..L4bfae4] goto L4bfb00;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFromIterable$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bfa6c.  v0:= 1I;
  #L4bfa6e.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4bfa72.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFromIterable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bfa84.  v0:= 1I;
  #L4bfa86.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.c` @type ^`boolean` := v0 @kind boolean;
  #L4bfa8a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFromIterable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bf9a0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.c` @type ^`boolean` @kind boolean;
  #L4bf9a4.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFromIterable$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bf9b8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.e` @type ^`boolean` @kind boolean;
  #L4bf9bc.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFromIterable$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4bf9f4.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.e` @type ^`boolean` @kind boolean;
  #L4bf9f8.  v1:= 0I;
  #L4bf9fa.  if v0 == 0 then goto L4bfa00;
  #L4bf9fe.  return v1 @kind object;
  #L4bfa00.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.f` @type ^`boolean` @kind boolean;
  #L4bfa04.  v2:= 1I;
  #L4bfa06.  if v0 == 0 then goto L4bfa20;
  #L4bfa0a.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.b` @type ^`java.util.Iterator` @kind object;
  #L4bfa0e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4bfa14.  v0:= temp;
  #L4bfa16.  if v0 != 0 then goto L4bfa24;
  #L4bfa1a.  v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.e` @type ^`boolean` := v2 @kind boolean;
  #L4bfa1e.  return v1 @kind object;
  #L4bfa20.  v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.f` @type ^`boolean` := v2 @kind boolean;
  #L4bfa24.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.b` @type ^`java.util.Iterator` @kind object;
  #L4bfa28.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4bfa2e.  v0:= temp @kind object;
  #L4bfa30.  v1:= "The iterator returned a null value" @kind object;
  #L4bfa34.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4bfa3a.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFromIterable$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bf9d0.  v0:= 1I;
  #L4bf9d2.  v2:= v2 ^& v0 @kind int;
  #L4bf9d4.  if v2 == 0 then goto L4bf9de;
  #L4bf9d8.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4bf9dc.  return v0;
  #L4bf9de.  v2:= 0I;
  #L4bf9e0.  return v2;
}
