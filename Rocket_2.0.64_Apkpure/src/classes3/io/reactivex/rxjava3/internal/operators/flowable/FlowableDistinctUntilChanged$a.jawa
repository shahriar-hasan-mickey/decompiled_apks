record `io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber` @kind class {
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiPredicate` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a.c` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a` v0 @kind this, `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `io.reactivex.rxjava3.functions.BiPredicate` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDistinctUntilChanged$a;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/BiPredicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L48f44c.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableConditionalSubscriber;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;)V` @kind direct;
  #L48f452.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a.a` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L48f456.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a.b` @type ^`io.reactivex.rxjava3.functions.BiPredicate` := v3 @kind object;
  #L48f45a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDistinctUntilChanged$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48f46c.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDistinctUntilChanged$a;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L48f472.  v3:= temp;
  #L48f474.  if v3 != 0 then goto L48f486;
  #L48f478.  v3:= v2.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48f47c.  v0:= 1L;
  #L48f480.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L48f486.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDistinctUntilChanged$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L48f3d0.  v0:= v5.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.qs` @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind object;
  #L48f3d4.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L48f3da.  v0:= temp @kind object;
  #L48f3dc.  if v0 != 0 then goto L48f3e4;
  #L48f3e0.  v0:= 0I;
  #L48f3e2.  return v0 @kind object;
  #L48f3e4.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a.a` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L48f3e8.  call temp:= `apply`(v1, v0) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L48f3ee.  v1:= temp @kind object;
  #L48f3f0.  v2:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a.d` @type ^`boolean` @kind boolean;
  #L48f3f4.  v3:= 1I;
  #L48f3f6.  if v2 != 0 then goto L48f404;
  #L48f3fa.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a.d` @type ^`boolean` := v3 @kind boolean;
  #L48f3fe.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a.c` @type ^`java.lang.Object` := v1 @kind object;
  #L48f402.  return v0 @kind object;
  #L48f404.  v2:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a.b` @type ^`io.reactivex.rxjava3.functions.BiPredicate` @kind object;
  #L48f408.  v4:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a.c` @type ^`java.lang.Object` @kind object;
  #L48f40c.  call temp:= `test`(v2, v4, v1) @signature `Lio/reactivex/rxjava3/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L48f412.  v2:= temp;
  #L48f414.  if v2 != 0 then goto L48f41e;
  #L48f418.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a.c` @type ^`java.lang.Object` := v1 @kind object;
  #L48f41c.  return v0 @kind object;
  #L48f41e.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a.c` @type ^`java.lang.Object` := v1 @kind object;
  #L48f422.  v0:= v5.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.sourceMode` @type ^`int`;
  #L48f426.  if v0 == v3 then goto L48f3d0;
  #L48f42a.  v0:= v5.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48f42e.  v1:= 1L;
  #L48f432.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L48f438.  goto L48f3d0;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDistinctUntilChanged$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L48f3b4.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableConditionalSubscriber;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L48f3ba.  v1:= temp;
  #L48f3bc.  return v1;
}
procedure `boolean` `tryOnNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDistinctUntilChanged$a;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L48f328.  v0:= v5.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L48f32c.  v1:= 0I;
  #L48f32e.  if v0 == 0 then goto L48f334;
  #L48f332.  return v1;
  #L48f334.  v0:= v5.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.sourceMode` @type ^`int`;
  #L48f338.  if v0 == 0 then goto L48f34a;
  #L48f33c.  v0:= v5.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L48f340.  call temp:= `tryOnNext`(v0, v6) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L48f346.  v6:= temp;
  #L48f348.  return v6;
  #L48f34a.  v0:= 1I;
  #L48f34c.  v2:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a.a` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L48f350.  call temp:= `apply`(v2, v6) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L48f356.  v2:= temp @kind object;
  #L48f358.  v3:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a.d` @type ^`boolean` @kind boolean;
  #L48f35c.  if v3 == 0 then goto L48f37a;
  #L48f360.  v3:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a.b` @type ^`io.reactivex.rxjava3.functions.BiPredicate` @kind object;
  #L48f364.  v4:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a.c` @type ^`java.lang.Object` @kind object;
  #L48f368.  call temp:= `test`(v3, v4, v2) @signature `Lio/reactivex/rxjava3/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L48f36e.  v3:= temp;
  #L48f370.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a.c` @type ^`java.lang.Object` := v2 @kind object;
  #L48f374.  if v3 == 0 then goto L48f382;
  #L48f378.  return v1;
  #L48f37a.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a.d` @type ^`boolean` := v0 @kind boolean;
  #L48f37e.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$a.c` @type ^`java.lang.Object` := v2 @kind object;
  #L48f382.  v1:= v5.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L48f386.  call `onNext`(v1, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L48f38c.  return v0;
  #L48f38e.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48f390.  call `fail`(v5, v6) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableConditionalSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L48f396.  return v0;
  catch `java.lang.Throwable` @[L48f34c..L48f382] goto L48f38e;
}
