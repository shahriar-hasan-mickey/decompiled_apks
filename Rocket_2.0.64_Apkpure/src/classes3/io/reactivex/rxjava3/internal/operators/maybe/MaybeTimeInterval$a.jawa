record `io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.MaybeObserver` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.MaybeObserver` `io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval$a.a` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler` `io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval$a.c` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval$a` v0 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v1 @kind object, `java.util.concurrent.TimeUnit` v2 @kind object, `io.reactivex.rxjava3.core.Scheduler` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTimeInterval$a;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;Ljava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4afb2c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4afb32.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` := v1 @kind object;
  #L4afb36.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval$a.b` @type ^`java.util.concurrent.TimeUnit` := v2 @kind object;
  #L4afb3a.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval$a.c` @type ^`io.reactivex.rxjava3.core.Scheduler` := v3 @kind object;
  #L4afb3e.  if v4 == 0 then goto L4afb4c;
  #L4afb42.  call temp:= `now`(v3, v2) @signature `Lio/reactivex/rxjava3/core/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4afb48.  v1:= temp @kind wide;
  #L4afb4a.  goto L4afb50;
  #L4afb4c.  v1:= 0L;
  #L4afb50.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval$a.d` @type ^`long` := v1 @kind wide;
  #L4afb54.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTimeInterval$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4afb68.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval$a.e` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4afb6c.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4afb72.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTimeInterval$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4afb0c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval$a.e` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4afb10.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4afb16.  v0:= temp;
  #L4afb18.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTimeInterval$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4afb84.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4afb88.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L4afb8e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTimeInterval$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4afba0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4afba4.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4afbaa.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTimeInterval$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4afbbc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval$a.e` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4afbc0.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4afbc6.  v0:= temp;
  #L4afbc8.  if v0 == 0 then goto L4afbda;
  #L4afbcc.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval$a.e` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4afbd0.  v2:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4afbd4.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4afbda.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval$a` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTimeInterval$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4afbec.  v0:= v6.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4afbf0.  v1:= new `io.reactivex.rxjava3.schedulers.Timed`;
  #L4afbf4.  v2:= v6.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval$a.c` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4afbf8.  v3:= v6.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval$a.b` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4afbfc.  call temp:= `now`(v2, v3) @signature `Lio/reactivex/rxjava3/core/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4afc02.  v2:= temp @kind wide;
  #L4afc04.  v4:= v6.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval$a.d` @type ^`long` @kind wide;
  #L4afc08.  v2:= v2 - v4 @kind long;
  #L4afc0a.  v4:= v6.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval$a.b` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4afc0e.  call `<init>`(v1, v7, v2, v4) @signature `Lio/reactivex/rxjava3/schedulers/Timed;.<init>:(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L4afc14.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4afc1a.  return @kind void;
}
