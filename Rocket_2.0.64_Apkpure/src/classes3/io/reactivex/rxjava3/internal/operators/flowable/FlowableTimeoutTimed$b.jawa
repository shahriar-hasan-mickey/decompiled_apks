record `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$d` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.h` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.i` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.j` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler$Worker` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.k` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.disposables.SequentialDisposable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.l` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.m` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.n` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.o` @AccessFlag ;
  `org.reactivestreams.Publisher` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.p` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.rxjava3.core.Scheduler$Worker` v6 @kind object, `org.reactivestreams.Publisher` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed$b;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler$Worker;Lorg/reactivestreams/Publisher;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4a4710.  v0:= 1I;
  #L4a4712.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.<init>:(Z)V` @kind direct;
  #L4a4718.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.h` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L4a471c.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.i` @type ^`long` := v3 @kind wide;
  #L4a4720.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.j` @type ^`java.util.concurrent.TimeUnit` := v5 @kind object;
  #L4a4724.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.k` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` := v6 @kind object;
  #L4a4728.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.p` @type ^`org.reactivestreams.Publisher` := v7 @kind object;
  #L4a472c.  v2:= new `io.reactivex.rxjava3.internal.disposables.SequentialDisposable`;
  #L4a4730.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L4a4736.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.l` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` := v2 @kind object;
  #L4a473a.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4a473e.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4a4744.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.m` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4a4748.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4a474c.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4a4752.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.n` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L4a4756.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed$b;.b:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4a48d8.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.n` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a48dc.  v1:= 9223372036854775807L;
  #L4a48e6.  call temp:= `compareAndSet`(v0, v4, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4a48ec.  v4:= temp;
  #L4a48ee.  if v4 == 0 then goto L4a493a;
  #L4a48f2.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.m` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a48f6.  call temp:= `cancel`(v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4a48fc.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.o` @type ^`long` @kind wide;
  #L4a4900.  v0:= 0L;
  #L4a4904.  v2:= lcmp(v4, v0);
  #L4a4908.  if v2 == 0 then goto L4a4912;
  #L4a490c.  call `produced`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @kind virtual;
  #L4a4912.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.p` @type ^`org.reactivestreams.Publisher` @kind object;
  #L4a4916.  v5:= 0I;
  #L4a4918.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.p` @type ^`org.reactivestreams.Publisher` := v5 @kind object;
  #L4a491c.  v5:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$a`;
  #L4a4920.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a4924.  call `<init>`(v5, v0, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;)V` @kind direct;
  #L4a492a.  call `subscribe`(v4, v5) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4a4930.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.k` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4a4934.  call `dispose`(v4) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4a493a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a4768.  call `cancel`(v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.cancel:()V` @kind super;
  #L4a476e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.k` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4a4772.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4a4778.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b` v4 @kind this, `long` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed$b;.e:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4a494c.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.l` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4a4950.  v1:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.k` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4a4954.  v2:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$e`;
  #L4a4958.  call `<init>`(v2, v5, v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed$e;.<init>:(JLio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed$d;)V` @kind direct;
  #L4a495e.  v5:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.i` @type ^`long` @kind wide;
  #L4a4962.  v3:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.j` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4a4966.  call temp:= `schedule`(v1, v2, v5, v3) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4a496c.  v5:= temp @kind object;
  #L4a496e.  call temp:= `replace`(v0, v5) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4a4974.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4a478c.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.n` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a4790.  v1:= 9223372036854775807L;
  #L4a479a.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L4a47a0.  v3:= temp @kind wide;
  #L4a47a2.  v0:= lcmp(v3, v1);
  #L4a47a6.  if v0 == 0 then goto L4a47c8;
  #L4a47aa.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.l` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4a47ae.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4a47b4.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a47b8.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4a47be.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.k` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4a47c2.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4a47c8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4a47dc.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.n` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a47e0.  v1:= 9223372036854775807L;
  #L4a47ea.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L4a47f0.  v3:= temp @kind wide;
  #L4a47f2.  v0:= lcmp(v3, v1);
  #L4a47f6.  if v0 == 0 then goto L4a481a;
  #L4a47fa.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.l` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4a47fe.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4a4804.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a4808.  call `onError`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a480e.  v6:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.k` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4a4812.  call `dispose`(v6) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4a4818.  goto L4a4820;
  #L4a481a.  call `onError`(v6) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4a4820.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4a4834.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.n` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a4838.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4a483e.  v0:= temp @kind wide;
  #L4a4840.  v2:= 9223372036854775807L;
  #L4a484a.  v4:= lcmp(v0, v2);
  #L4a484e.  if v4 == 0 then goto L4a489c;
  #L4a4852.  v2:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.n` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a4856.  v3:= 1L;
  #L4a485a.  v5:= v0 + v3 @kind long;
  #L4a485e.  call temp:= `compareAndSet`(v2, v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4a4864.  v0:= temp;
  #L4a4866.  if v0 != 0 then goto L4a486c;
  #L4a486a.  goto L4a489c;
  #L4a486c.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.l` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4a4870.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a4876.  v0:= temp @kind object;
  #L4a4878.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4a487c.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4a4882.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.o` @type ^`long` @kind wide;
  #L4a4886.  v0:= v0 + v3 @kind long;
  #L4a4888.  v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.o` @type ^`long` := v0 @kind wide;
  #L4a488c.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a4890.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4a4896.  call `e`(v7, v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed$b;.e:(J)V` @kind virtual;
  #L4a489c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a48b0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b.m` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a48b4.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4a48ba.  v0:= temp;
  #L4a48bc.  if v0 == 0 then goto L4a48c6;
  #L4a48c0.  call `setSubscription`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L4a48c6.  return @kind void;
}
