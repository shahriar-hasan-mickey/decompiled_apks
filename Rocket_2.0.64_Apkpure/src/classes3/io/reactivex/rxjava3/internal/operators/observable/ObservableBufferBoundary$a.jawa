record `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Supplier` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.ObservableSource` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.CompositeDisposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.g` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.h` @AccessFlag VOLATILE;
  `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.i` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.j` @AccessFlag VOLATILE;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.k` @AccessFlag ;
  `java.util.Map` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.l` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.core.ObservableSource` v2 @kind object, `io.reactivex.rxjava3.functions.Function` v3 @kind object, `io.reactivex.rxjava3.functions.Supplier` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/core/ObservableSource;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/Supplier;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b6e60.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4b6e66.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4b6e6a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.b` @type ^`io.reactivex.rxjava3.functions.Supplier` := v4 @kind object;
  #L4b6e6e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.c` @type ^`io.reactivex.rxjava3.core.ObservableSource` := v2 @kind object;
  #L4b6e72.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.d` @type ^`io.reactivex.rxjava3.functions.Function` := v3 @kind object;
  #L4b6e76.  v1:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4b6e7a.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Observable;.bufferSize:()I` @kind static;
  #L4b6e80.  v2:= temp;
  #L4b6e82.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4b6e88.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.i` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` := v1 @kind object;
  #L4b6e8c.  v1:= new `io.reactivex.rxjava3.disposables.CompositeDisposable`;
  #L4b6e90.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L4b6e96.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` := v1 @kind object;
  #L4b6e9a.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4b6e9e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4b6ea4.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4b6ea8.  v1:= new `java.util.LinkedHashMap`;
  #L4b6eac.  call `<init>`(v1) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L4b6eb2.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.l` @type ^`java.util.Map` := v1 @kind object;
  #L4b6eb6.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4b6eba.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4b6ec0.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4b6ec4.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a;.a:(Lio/reactivex/rxjava3/disposables/Disposable;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4b6ed8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b6edc.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4b6ee2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4b6ee6.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4b6eec.  call `onError`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b6ef2.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a` v3 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$b` v4 @kind object, `long` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a;.b:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$b;J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4b6f04.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4b6f08.  call temp:= `delete`(v0, v4) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4b6f0e.  v4:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4b6f12.  call temp:= `size`(v4) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.size:()I` @kind virtual;
  #L4b6f18.  v4:= temp;
  #L4b6f1a.  v0:= 1I;
  #L4b6f1c.  if v4 != 0 then goto L4b6f2e;
  #L4b6f20.  v4:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b6f24.  call temp:= `dispose`(v4) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4b6f2a.  v4:= 1I;
  #L4b6f2c.  goto L4b6f30;
  #L4b6f2e.  v4:= 0I;
  #L4b6f30.  @monitorenter v3
  #L4b6f32.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.l` @type ^`java.util.Map` @kind object;
  #L4b6f36.  if v1 != 0 then goto L4b6f3e;
  #L4b6f3a.  @monitorexit v3
  #L4b6f3c.  return @kind void;
  #L4b6f3e.  v2:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.i` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4b6f42.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4b6f48.  v5:= temp @kind object;
  #L4b6f4a.  call temp:= `remove`(v1, v5) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4b6f50.  v5:= temp @kind object;
  #L4b6f52.  call temp:= `offer`(v2, v5) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4b6f58.  @monitorexit v3
  #L4b6f5a.  if v4 == 0 then goto L4b6f62;
  #L4b6f5e.  v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4b6f62.  call `c`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a;.c:()V` @kind virtual;
  #L4b6f68.  return @kind void;
  #L4b6f6a.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b6f6c.  @monitorexit v3
  #L4b6f6e.  throw v4;
  catch `java.lang.Throwable` @[L4b6f32..L4b6f5a] goto L4b6f6a;
  catch `java.lang.Throwable` @[L4b6f6c..L4b6f6e] goto L4b6f6a;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a` v7 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4b7004.  call temp:= `getAndIncrement`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4b700a.  v0:= temp;
  #L4b700c.  if v0 == 0 then goto L4b7012;
  #L4b7010.  return @kind void;
  #L4b7012.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b7016.  v1:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.i` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4b701a.  v2:= 1I;
  #L4b701c.  v3:= 1I;
  #L4b701e.  v4:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.j` @type ^`boolean` @kind boolean;
  #L4b7022.  if v4 == 0 then goto L4b702e;
  #L4b7026.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4b702c.  return @kind void;
  #L4b702e.  v4:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.h` @type ^`boolean` @kind boolean;
  #L4b7032.  if v4 == 0 then goto L4b7058;
  #L4b7036.  v5:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b703a.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b7040.  v5:= temp @kind object;
  #L4b7042.  if v5 == 0 then goto L4b7058;
  #L4b7046.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4b704c.  v1:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b7050.  call `tryTerminateConsumer`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4b7056.  return @kind void;
  #L4b7058.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4b705e.  v5:= temp @kind object;
  #L4b7060.  v5:= (`java.util.Collection`) v5 @kind object;
  #L4b7064.  if v5 != 0 then goto L4b706c;
  #L4b7068.  v6:= 1I;
  #L4b706a.  goto L4b706e;
  #L4b706c.  v6:= 0I;
  #L4b706e.  if v4 == 0 then goto L4b707e;
  #L4b7072.  if v6 == 0 then goto L4b707e;
  #L4b7076.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4b707c.  return @kind void;
  #L4b707e.  if v6 == 0 then goto L4b7092;
  #L4b7082.  v3:= -v3 @kind int;
  #L4b7084.  call temp:= `addAndGet`(v7, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4b708a.  v3:= temp;
  #L4b708c.  if v3 != 0 then goto L4b701e;
  #L4b7090.  return @kind void;
  #L4b7092.  call `onNext`(v0, v5) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4b7098.  goto L4b701e;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a;.d:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4b723c.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.b` @type ^`io.reactivex.rxjava3.functions.Supplier` @kind object;
  #L4b7240.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L4b7246.  v0:= temp @kind object;
  #L4b7248.  v1:= "The bufferSupplier returned a null Collection" @kind object;
  #L4b724c.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b7252.  v0:= (`java.util.Collection`) v0 @kind object;
  #L4b7256.  v1:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.d` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4b725a.  call temp:= `apply`(v1, v6) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4b7260.  v6:= temp @kind object;
  #L4b7262.  v1:= "The bufferClose returned a null ObservableSource" @kind object;
  #L4b7266.  call temp:= `requireNonNull`(v6, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b726c.  v6:= (`io.reactivex.rxjava3.core.ObservableSource`) v6 @kind object;
  #L4b7270.  v1:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.k` @type ^`long` @kind wide;
  #L4b7274.  v3:= 1L;
  #L4b7278.  v3:= v3 + v1 @kind long;
  #L4b727a.  v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.k` @type ^`long` := v3 @kind wide;
  #L4b727e.  @monitorenter v5
  #L4b7280.  v3:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.l` @type ^`java.util.Map` @kind object;
  #L4b7284.  if v3 != 0 then goto L4b728c;
  #L4b7288.  @monitorexit v5
  #L4b728a.  return @kind void;
  #L4b728c.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4b7292.  v4:= temp @kind object;
  #L4b7294.  call temp:= `put`(v3, v4, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4b729a.  @monitorexit v5
  #L4b729c.  v0:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$b`;
  #L4b72a0.  call `<init>`(v0, v5, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$b;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a;J)V` @kind direct;
  #L4b72a6.  v1:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4b72aa.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4b72b0.  call `subscribe`(v6, v0) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4b72b6.  return @kind void;
  #L4b72b8.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b72ba.  @monitorexit v5
  #L4b72bc.  throw v6;
  #L4b72be.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b72c0.  call `throwIfFatal`(v6) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b72c6.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b72ca.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4b72d0.  call `onError`(v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b72d6.  return @kind void;
  catch `java.lang.Throwable` @[L4b723c..L4b7270] goto L4b72be;
  catch `java.lang.Throwable` @[L4b7280..L4b729c] goto L4b72b8;
  catch `java.lang.Throwable` @[L4b72ba..L4b72bc] goto L4b72b8;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b6f94.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b6f98.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4b6f9e.  v0:= temp;
  #L4b6fa0.  if v0 == 0 then goto L4b6fdc;
  #L4b6fa4.  v0:= 1I;
  #L4b6fa6.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.j` @type ^`boolean` := v0 @kind boolean;
  #L4b6faa.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4b6fae.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4b6fb4.  @monitorenter v1
  #L4b6fb6.  v0:= 0I;
  #L4b6fb8.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.l` @type ^`java.util.Map` := v0 @kind object;
  #L4b6fbc.  @monitorexit v1
  #L4b6fbe.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4b6fc4.  v0:= temp;
  #L4b6fc6.  if v0 == 0 then goto L4b6fdc;
  #L4b6fca.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.i` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4b6fce.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4b6fd4.  goto L4b6fdc;
  #L4b6fd6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b6fd8.  @monitorexit v1
  #L4b6fda.  throw v0;
  #L4b6fdc.  return @kind void;
  catch `java.lang.Throwable` @[L4b6fb8..L4b6fbe] goto L4b6fd6;
  catch `java.lang.Throwable` @[L4b6fd8..L4b6fda] goto L4b6fd6;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a` v1 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a$a` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a;.e:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a$a;)V` @AccessFlag  {
    temp;
    v0;

  #L4b7308.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4b730c.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4b7312.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4b7316.  call temp:= `size`(v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.size:()I` @kind virtual;
  #L4b731c.  v2:= temp;
  #L4b731e.  if v2 != 0 then goto L4b7338;
  #L4b7322.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b7326.  call temp:= `dispose`(v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4b732c.  v2:= 1I;
  #L4b732e.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.h` @type ^`boolean` := v2 @kind boolean;
  #L4b7332.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a;.c:()V` @kind virtual;
  #L4b7338.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b6e34.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b6e38.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b6e3e.  v0:= temp @kind object;
  #L4b6e40.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4b6e44.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4b6e4a.  v0:= temp;
  #L4b6e4c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4b70ac.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4b70b0.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4b70b6.  @monitorenter v3
  #L4b70b8.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.l` @type ^`java.util.Map` @kind object;
  #L4b70bc.  if v0 != 0 then goto L4b70c4;
  #L4b70c0.  @monitorexit v3
  #L4b70c2.  return @kind void;
  #L4b70c4.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L4b70ca.  v0:= temp @kind object;
  #L4b70cc.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4b70d2.  v0:= temp @kind object;
  #L4b70d4.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4b70da.  v1:= temp;
  #L4b70dc.  if v1 == 0 then goto L4b70f8;
  #L4b70e0.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4b70e6.  v1:= temp @kind object;
  #L4b70e8.  v1:= (`java.util.Collection`) v1 @kind object;
  #L4b70ec.  v2:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.i` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4b70f0.  call temp:= `offer`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4b70f6.  goto L4b70d4;
  #L4b70f8.  v0:= 0I;
  #L4b70fa.  v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.l` @type ^`java.util.Map` := v0 @kind object;
  #L4b70fe.  @monitorexit v3
  #L4b7100.  v0:= 1I;
  #L4b7102.  v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4b7106.  call `c`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a;.c:()V` @kind virtual;
  #L4b710c.  return @kind void;
  #L4b710e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b7110.  @monitorexit v3
  #L4b7112.  throw v0;
  catch `java.lang.Throwable` @[L4b70b8..L4b7100] goto L4b710e;
  catch `java.lang.Throwable` @[L4b7110..L4b7112] goto L4b710e;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b7138.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.g` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b713c.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4b7142.  v2:= temp;
  #L4b7144.  if v2 == 0 then goto L4b7170;
  #L4b7148.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4b714c.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4b7152.  @monitorenter v1
  #L4b7154.  v2:= 0I;
  #L4b7156.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.l` @type ^`java.util.Map` := v2 @kind object;
  #L4b715a.  @monitorexit v1
  #L4b715c.  v2:= 1I;
  #L4b715e.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.h` @type ^`boolean` := v2 @kind boolean;
  #L4b7162.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a;.c:()V` @kind virtual;
  #L4b7168.  goto L4b7170;
  #L4b716a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b716c.  @monitorexit v1
  #L4b716e.  throw v2;
  #L4b7170.  return @kind void;
  catch `java.lang.Throwable` @[L4b7156..L4b715c] goto L4b716a;
  catch `java.lang.Throwable` @[L4b716c..L4b716e] goto L4b716a;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b7198.  @monitorenter v2
  #L4b719a.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.l` @type ^`java.util.Map` @kind object;
  #L4b719e.  if v0 != 0 then goto L4b71a6;
  #L4b71a2.  @monitorexit v2
  #L4b71a4.  return @kind void;
  #L4b71a6.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L4b71ac.  v0:= temp @kind object;
  #L4b71ae.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4b71b4.  v0:= temp @kind object;
  #L4b71b6.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4b71bc.  v1:= temp;
  #L4b71be.  if v1 == 0 then goto L4b71d6;
  #L4b71c2.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4b71c8.  v1:= temp @kind object;
  #L4b71ca.  v1:= (`java.util.Collection`) v1 @kind object;
  #L4b71ce.  call temp:= `add`(v1, v3) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4b71d4.  goto L4b71b6;
  #L4b71d6.  @monitorexit v2
  #L4b71d8.  return @kind void;
  #L4b71da.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b71dc.  @monitorexit v2
  #L4b71de.  throw v3;
  catch `java.lang.Throwable` @[L4b719a..L4b71de] goto L4b71da;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b71fc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b7200.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4b7206.  v2:= temp;
  #L4b7208.  if v2 == 0 then goto L4b722a;
  #L4b720c.  v2:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a$a`;
  #L4b7210.  call `<init>`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferBoundary$a;)V` @kind direct;
  #L4b7216.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4b721a.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4b7220.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$a.c` @type ^`io.reactivex.rxjava3.core.ObservableSource` @kind object;
  #L4b7224.  call `subscribe`(v0, v2) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4b722a.  return @kind void;
}
