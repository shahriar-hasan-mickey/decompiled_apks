record `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c.n` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c.o` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `int` v3 , `boolean` v4 , `io.reactivex.rxjava3.core.Scheduler$Worker` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$c;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;IZLio/reactivex/rxjava3/core/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L48c45c.  call `<init>`(v0, v2, v3, v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$b;.<init>:(Lio/reactivex/rxjava3/functions/Function;ILio/reactivex/rxjava3/core/Scheduler$Worker;)V` @kind direct;
  #L48c462.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c.n` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L48c466.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c.o` @type ^`boolean` := v4 @kind boolean;
  #L48c46a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$c;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48c4c4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48c4c8.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L48c4ce.  v2:= temp;
  #L48c4d0.  if v2 == 0 then goto L48c4f8;
  #L48c4d4.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c.o` @type ^`boolean` @kind boolean;
  #L48c4d8.  if v2 != 0 then goto L48c4ec;
  #L48c4dc.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48c4e0.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L48c4e6.  v2:= 1I;
  #L48c4e8.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.i` @type ^`boolean` := v2 @kind boolean;
  #L48c4ec.  v2:= 0I;
  #L48c4ee.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.l` @type ^`boolean` := v2 @kind boolean;
  #L48c4f2.  call `d`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$c;.d:()V` @kind virtual;
  #L48c4f8.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$c;.c:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48c50c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48c510.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L48c516.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48c47c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.j` @type ^`boolean` @kind boolean;
  #L48c480.  if v0 != 0 then goto L48c4b2;
  #L48c484.  v0:= 1I;
  #L48c486.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.j` @type ^`boolean` := v0 @kind boolean;
  #L48c48a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L48c48e.  call `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.cancel:()V` @kind virtual;
  #L48c494.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48c498.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L48c49e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L48c4a2.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L48c4a8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48c4ac.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L48c4b2.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$c;.d:()V` @AccessFlag  {
    temp;
    v0;

  #L48c7a8.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L48c7ae.  v0:= temp;
  #L48c7b0.  if v0 != 0 then goto L48c7be;
  #L48c7b4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L48c7b8.  call temp:= `schedule`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L48c7be.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$c;.e:()V` @AccessFlag  {
    temp;
    v0;

  #L48c7d0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48c7d4.  call `onSubscribe`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L48c7da.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48c528.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48c52c.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L48c532.  v2:= temp;
  #L48c534.  if v2 == 0 then goto L48c544;
  #L48c538.  v2:= 1I;
  #L48c53a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.i` @type ^`boolean` := v2 @kind boolean;
  #L48c53e.  call `d`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$c;.d:()V` @kind virtual;
  #L48c544.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48c558.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L48c55c.  call `request`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.request:(J)V` @kind virtual;
  #L48c562.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c` v6 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapScheduler$c;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L48c574.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.j` @type ^`boolean` @kind boolean;
  #L48c578.  if v0 == 0 then goto L48c57e;
  #L48c57c.  return @kind void;
  #L48c57e.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.l` @type ^`boolean` @kind boolean;
  #L48c582.  if v0 != 0 then goto L48c764;
  #L48c586.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.i` @type ^`boolean` @kind boolean;
  #L48c58a.  if v0 == 0 then goto L48c5c4;
  #L48c58e.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c.o` @type ^`boolean` @kind boolean;
  #L48c592.  if v1 != 0 then goto L48c5c4;
  #L48c596.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48c59a.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L48c5a0.  v1:= temp @kind object;
  #L48c5a2.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L48c5a6.  if v1 == 0 then goto L48c5c4;
  #L48c5aa.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48c5ae.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48c5b2.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L48c5b8.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L48c5bc.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L48c5c2.  return @kind void;
  #L48c5c4.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L48c5c8.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L48c5ce.  v1:= temp @kind object;
  #L48c5d0.  v2:= 0I;
  #L48c5d2.  v3:= 1I;
  #L48c5d4.  if v1 != 0 then goto L48c5dc;
  #L48c5d8.  v4:= 1I;
  #L48c5da.  goto L48c5de;
  #L48c5dc.  v4:= 0I;
  #L48c5de.  if v0 == 0 then goto L48c600;
  #L48c5e2.  if v4 == 0 then goto L48c600;
  #L48c5e6.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48c5ea.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48c5ee.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L48c5f4.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L48c5f8.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L48c5fe.  return @kind void;
  #L48c600.  if v4 != 0 then goto L48c764;
  #L48c604.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L48c608.  call temp:= `apply`(v0, v1) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L48c60e.  v0:= temp @kind object;
  #L48c610.  v1:= "The mapper returned a null Publisher" @kind object;
  #L48c614.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48c61a.  v0:= (`org.reactivestreams.Publisher`) v0 @kind object;
  #L48c61e.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.m` @type ^`int`;
  #L48c622.  if v1 == v3 then goto L48c64a;
  #L48c626.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.g` @type ^`int`;
  #L48c62a.  v1:= v1 + v3 @kind int;
  #L48c62c.  v4:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.d` @type ^`int`;
  #L48c630.  if v1 != v4 then goto L48c646;
  #L48c634.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.g` @type ^`int` := v2;
  #L48c638.  v2:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48c63c.  v4:= (`long`) v1 @kind i2l;
  #L48c63e.  call `request`(v2, v4) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L48c644.  goto L48c64a;
  #L48c646.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.g` @type ^`int` := v1;
  #L48c64a.  v1:= instanceof @variable v0 @type ^`io.reactivex.rxjava3.functions.Supplier` @kind boolean;
  #L48c64e.  if v1 == 0 then goto L48c6e8;
  #L48c652.  v0:= (`io.reactivex.rxjava3.functions.Supplier`) v0 @kind object;
  #L48c656.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L48c65c.  v0:= temp @kind object;
  #L48c65e.  goto L48c6a0;
  #L48c660.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48c662.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L48c668.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48c66c.  call temp:= `tryAddThrowableOrReport`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L48c672.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c.o` @type ^`boolean` @kind boolean;
  #L48c676.  if v0 != 0 then goto L48c69e;
  #L48c67a.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48c67e.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L48c684.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48c688.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48c68c.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L48c692.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L48c696.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L48c69c.  return @kind void;
  #L48c69e.  v0:= 0I;
  #L48c6a0.  if v0 == 0 then goto L48c574;
  #L48c6a4.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.j` @type ^`boolean` @kind boolean;
  #L48c6a8.  if v1 == 0 then goto L48c6b0;
  #L48c6ac.  goto L48c574;
  #L48c6b0.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L48c6b4.  call temp:= `isUnbounded`(v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.isUnbounded:()Z` @kind virtual;
  #L48c6ba.  v1:= temp;
  #L48c6bc.  if v1 == 0 then goto L48c6ce;
  #L48c6c0.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48c6c4.  call `onNext`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L48c6ca.  goto L48c574;
  #L48c6ce.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.l` @type ^`boolean` := v3 @kind boolean;
  #L48c6d2.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L48c6d6.  v2:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$g`;
  #L48c6da.  call `<init>`(v2, v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$g;.<init>:(Ljava/lang/Object;Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L48c6e0.  call `setSubscription`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L48c6e6.  goto L48c764;
  #L48c6e8.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.l` @type ^`boolean` := v3 @kind boolean;
  #L48c6ec.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L48c6f0.  call `subscribe`(v0, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L48c6f6.  goto L48c764;
  #L48c6f8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48c6fa.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L48c700.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48c704.  call `cancel`(v1) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L48c70a.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48c70e.  call temp:= `tryAddThrowableOrReport`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L48c714.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48c718.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48c71c.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L48c722.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L48c726.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L48c72c.  return @kind void;
  #L48c72e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48c730.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L48c736.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48c73a.  call `cancel`(v1) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L48c740.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48c744.  call temp:= `tryAddThrowableOrReport`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L48c74a.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L48c74e.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48c752.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L48c758.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L48c75c.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L48c762.  return @kind void;
  #L48c764.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L48c76a.  v0:= temp;
  #L48c76c.  if v0 != 0 then goto L48c574;
  #L48c770.  return @kind void;
  catch `java.lang.Throwable` @[L48c5c4..L48c5d0] goto L48c72e;
  catch `java.lang.Throwable` @[L48c604..L48c61e] goto L48c6f8;
  catch `java.lang.Throwable` @[L48c656..L48c65e] goto L48c660;
}
