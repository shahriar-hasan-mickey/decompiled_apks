record `io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.observers.BasicIntQueueDisposable` @kind class, `io.reactivex.rxjava3.core.SingleObserver` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.c` @AccessFlag ;
  `java.util.Iterator` `io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.d` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.e` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.f` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableObservable$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d6200.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/observers/BasicIntQueueDisposable;.<init>:()V` @kind direct;
  #L4d6206.  v0.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4d620a.  v0.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4d620e.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableObservable$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d6220.  v0:= 0I;
  #L4d6222.  v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.d` @type ^`java.util.Iterator` := v0 @kind object;
  #L4d6226.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableObservable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d6238.  v0:= 1I;
  #L4d623a.  v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4d623e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4d6242.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4d6248.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4d624c.  v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v0 @kind object;
  #L4d6250.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableObservable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d6164.  v0:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.e` @type ^`boolean` @kind boolean;
  #L4d6168.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableObservable$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d617c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.d` @type ^`java.util.Iterator` @kind object;
  #L4d6180.  if v0 != 0 then goto L4d6188;
  #L4d6184.  v0:= 1I;
  #L4d6186.  goto L4d618a;
  #L4d6188.  v0:= 0I;
  #L4d618a.  return v0;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableObservable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d6264.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4d6268.  v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v0 @kind object;
  #L4d626c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4d6270.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d6276.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableObservable$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d6288.  v0:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4d628c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4d6292.  v0:= temp;
  #L4d6294.  if v0 == 0 then goto L4d62a6;
  #L4d6298.  v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4d629c.  v2:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4d62a0.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4d62a6.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableObservable$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d62b8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4d62bc.  v1:= v2.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4d62c0.  call temp:= `apply`(v1, v3) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4d62c6.  v3:= temp @kind object;
  #L4d62c8.  v3:= (`java.lang.Iterable`) v3 @kind object;
  #L4d62cc.  call temp:= `iterator`(v3) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4d62d2.  v3:= temp @kind object;
  #L4d62d4.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4d62da.  v1:= temp;
  #L4d62dc.  if v1 != 0 then goto L4d62e8;
  #L4d62e0.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4d62e6.  return @kind void;
  #L4d62e8.  v1:= v2.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.f` @type ^`boolean` @kind boolean;
  #L4d62ec.  if v1 == 0 then goto L4d6304;
  #L4d62f0.  v2.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.d` @type ^`java.util.Iterator` := v3 @kind object;
  #L4d62f4.  v3:= 0I;
  #L4d62f6.  call `onNext`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d62fc.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4d6302.  return @kind void;
  #L4d6304.  v1:= v2.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.e` @type ^`boolean` @kind boolean;
  #L4d6308.  if v1 == 0 then goto L4d630e;
  #L4d630c.  return @kind void;
  #L4d630e.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4d6314.  v1:= temp @kind object;
  #L4d6316.  call `onNext`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d631c.  v1:= v2.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.e` @type ^`boolean` @kind boolean;
  #L4d6320.  if v1 == 0 then goto L4d6326;
  #L4d6324.  return @kind void;
  #L4d6326.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4d632c.  v1:= temp;
  #L4d632e.  if v1 != 0 then goto L4d6304;
  #L4d6332.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4d6338.  return @kind void;
  #L4d633a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d633c.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d6342.  call `onError`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d6348.  return @kind void;
  #L4d634a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d634c.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d6352.  call `onError`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d6358.  return @kind void;
  #L4d635a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d635c.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d6362.  v0:= v2.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4d6366.  call `onError`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d636c.  return @kind void;
  catch `java.lang.Throwable` @[L4d62bc..L4d62dc] goto L4d635a;
  catch `java.lang.Throwable` @[L4d630e..L4d6316] goto L4d634a;
  catch `java.lang.Throwable` @[L4d6326..L4d632e] goto L4d633a;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableObservable$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4d61c0.  v0:= v4.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.d` @type ^`java.util.Iterator` @kind object;
  #L4d61c4.  v1:= 0I;
  #L4d61c6.  if v0 == 0 then goto L4d61ee;
  #L4d61ca.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4d61d0.  v2:= temp @kind object;
  #L4d61d2.  v3:= "The iterator returned a null value" @kind object;
  #L4d61d6.  call temp:= `requireNonNull`(v2, v3) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4d61dc.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4d61e2.  v0:= temp;
  #L4d61e4.  if v0 != 0 then goto L4d61ec;
  #L4d61e8.  v4.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.d` @type ^`java.util.Iterator` := v1 @kind object;
  #L4d61ec.  return v2 @kind object;
  #L4d61ee.  return v1 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableObservable$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d619c.  v0:= 2I;
  #L4d619e.  v2:= v2 ^& v0 @kind int;
  #L4d61a0.  if v2 == 0 then goto L4d61ac;
  #L4d61a4.  v2:= 1I;
  #L4d61a6.  v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$a.f` @type ^`boolean` := v2 @kind boolean;
  #L4d61aa.  return v0;
  #L4d61ac.  v2:= 0I;
  #L4d61ae.  return v2;
}
