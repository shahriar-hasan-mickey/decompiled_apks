record `io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Flowable` @kind class {
  `org.reactivestreams.Publisher` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.b` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher` v0 @kind this, `org.reactivestreams.Publisher` v1 @kind object, `org.reactivestreams.Publisher` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher;.<init>:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L49f868.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/core/Flowable;.<init>:()V` @kind direct;
  #L49f86e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.b` @type ^`org.reactivestreams.Publisher` := v1 @kind object;
  #L49f872.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.c` @type ^`org.reactivestreams.Publisher` := v2 @kind object;
  #L49f876.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.d` @type ^`boolean` := v3 @kind boolean;
  #L49f87a.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L49f88c.  v0:= new `io.reactivex.rxjava3.subscribers.SerializedSubscriber`;
  #L49f890.  call `<init>`(v0, v4) @signature `Lio/reactivex/rxjava3/subscribers/SerializedSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L49f896.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.d` @type ^`boolean` @kind boolean;
  #L49f89a.  if v4 == 0 then goto L49f8b8;
  #L49f89e.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.b` @type ^`org.reactivestreams.Publisher` @kind object;
  #L49f8a2.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$a`;
  #L49f8a6.  v2:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.c` @type ^`org.reactivestreams.Publisher` @kind object;
  #L49f8aa.  call `<init>`(v1, v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher$a;.<init>:(Lorg/reactivestreams/Subscriber;Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L49f8b0.  call `subscribe`(v4, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L49f8b6.  goto L49f8d0;
  #L49f8b8.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.b` @type ^`org.reactivestreams.Publisher` @kind object;
  #L49f8bc.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$b`;
  #L49f8c0.  v2:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher.c` @type ^`org.reactivestreams.Publisher` @kind object;
  #L49f8c4.  call `<init>`(v1, v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSamplePublisher$b;.<init>:(Lorg/reactivestreams/Subscriber;Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L49f8ca.  call `subscribe`(v4, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L49f8d0.  return @kind void;
}
