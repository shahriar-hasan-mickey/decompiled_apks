record `io.reactivex.rxjava3.internal.operators.maybe.MaybeMaterialize` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Single` @kind class {
  `io.reactivex.rxjava3.core.Maybe` `io.reactivex.rxjava3.internal.operators.maybe.MaybeMaterialize.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMaterialize` v0 @kind this, `io.reactivex.rxjava3.core.Maybe` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMaterialize;.<init>:(Lio/reactivex/rxjava3/core/Maybe;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4adf60.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/core/Single;.<init>:()V` @kind direct;
  #L4adf66.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMaterialize.a` @type ^`io.reactivex.rxjava3.core.Maybe` := v1 @kind object;
  #L4adf6a.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeMaterialize` v2 @kind this, `io.reactivex.rxjava3.core.SingleObserver` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMaterialize;.subscribeActual:(Lio/reactivex/rxjava3/core/SingleObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L4adf7c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeMaterialize.a` @type ^`io.reactivex.rxjava3.core.Maybe` @kind object;
  #L4adf80.  v1:= new `io.reactivex.rxjava3.internal.operators.mixed.MaterializeSingleObserver`;
  #L4adf84.  call `<init>`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/MaterializeSingleObserver;.<init>:(Lio/reactivex/rxjava3/core/SingleObserver;)V` @kind direct;
  #L4adf8a.  call `subscribe`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Maybe;.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind virtual;
  #L4adf90.  return @kind void;
}
