record `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.observers.QueueDrainObserver` @kind class, `java.lang.Runnable` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.functions.Supplier` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.b` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.c` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.f` @AccessFlag ;
  `java.util.Collection` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.g` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.h` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b` v1 @kind this, `io.reactivex.rxjava3.core.Observer` v2 @kind object, `io.reactivex.rxjava3.functions.Supplier` v3 @kind object, `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object, `io.reactivex.rxjava3.core.Scheduler` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$b;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Supplier;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4b7c68.  v0:= new `io.reactivex.rxjava3.internal.queue.MpscLinkedQueue`;
  #L4b7c6c.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L4b7c72.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L4b7c78.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4b7c7c.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4b7c82.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4b7c86.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.b` @type ^`io.reactivex.rxjava3.functions.Supplier` := v3 @kind object;
  #L4b7c8a.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.c` @type ^`long` := v4 @kind wide;
  #L4b7c8e.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.d` @type ^`java.util.concurrent.TimeUnit` := v6 @kind object;
  #L4b7c92.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler` := v7 @kind object;
  #L4b7c96.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$b;.a:(Lio/reactivex/rxjava3/core/Observer;Ljava/util/Collection;)V` @AccessFlag PUBLIC {
    temp;

  #L4b7cc4.  v1:= v0.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b7cc8.  call `onNext`(v1, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4b7cce.  return @kind void;
}
procedure `void` `accept`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$b;.accept:(Lio/reactivex/rxjava3/core/Observer;Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4b7ca8.  v2:= (`java.util.Collection`) v2 @kind object;
  #L4b7cac.  call `a`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$b;.a:(Lio/reactivex/rxjava3/core/Observer;Ljava/util/Collection;)V` @kind virtual;
  #L4b7cb2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b7ce0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b7ce4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4b7cea.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b7cee.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4b7cf4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b7c3c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b7c40.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b7c46.  v0:= temp @kind object;
  #L4b7c48.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4b7c4c.  if v0 != v1 then goto L4b7c54;
  #L4b7c50.  v0:= 1I;
  #L4b7c52.  goto L4b7c56;
  #L4b7c54.  v0:= 0I;
  #L4b7c56.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4b7d08.  @monitorenter v4
  #L4b7d0a.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.g` @type ^`java.util.Collection` @kind object;
  #L4b7d0e.  v1:= 0I;
  #L4b7d10.  v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.g` @type ^`java.util.Collection` := v1 @kind object;
  #L4b7d14.  @monitorexit v4
  #L4b7d16.  if v0 == 0 then goto L4b7d46;
  #L4b7d1a.  v2:= v4.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4b7d1e.  call temp:= `offer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4b7d24.  v0:= 1I;
  #L4b7d26.  v4.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L4b7d2a.  call temp:= `enter`(v4) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L4b7d30.  v0:= temp;
  #L4b7d32.  if v0 == 0 then goto L4b7d46;
  #L4b7d36.  v0:= v4.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4b7d3a.  v2:= v4.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b7d3e.  v3:= 0I;
  #L4b7d40.  call `drainLoop`(v0, v2, v3, v1, v4) @signature `Lio/reactivex/rxjava3/internal/util/QueueDrainHelper;.drainLoop:(Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;Lio/reactivex/rxjava3/core/Observer;ZLio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/internal/util/ObservableQueueDrain;)V` @kind static;
  #L4b7d46.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b7d4a.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4b7d50.  return @kind void;
  #L4b7d52.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b7d54.  @monitorexit v4
  #L4b7d56.  throw v0;
  catch `java.lang.Throwable` @[L4b7d0a..L4b7d16] goto L4b7d52;
  catch `java.lang.Throwable` @[L4b7d54..L4b7d56] goto L4b7d52;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b7d7c.  @monitorenter v1
  #L4b7d7e.  v0:= 0I;
  #L4b7d80.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.g` @type ^`java.util.Collection` := v0 @kind object;
  #L4b7d84.  @monitorexit v1
  #L4b7d86.  v0:= v1.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b7d8a.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4b7d90.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b7d94.  call temp:= `dispose`(v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4b7d9a.  return @kind void;
  #L4b7d9c.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b7d9e.  @monitorexit v1
  #L4b7da0.  throw v2;
  catch `java.lang.Throwable` @[L4b7d80..L4b7d86] goto L4b7d9c;
  catch `java.lang.Throwable` @[L4b7d9e..L4b7da0] goto L4b7d9c;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b7dc8.  @monitorenter v1
  #L4b7dca.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.g` @type ^`java.util.Collection` @kind object;
  #L4b7dce.  if v0 != 0 then goto L4b7dd6;
  #L4b7dd2.  @monitorexit v1
  #L4b7dd4.  return @kind void;
  #L4b7dd6.  call temp:= `add`(v0, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4b7ddc.  @monitorexit v1
  #L4b7dde.  return @kind void;
  #L4b7de0.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b7de2.  @monitorexit v1
  #L4b7de4.  throw v2;
  catch `java.lang.Throwable` @[L4b7dca..L4b7de4] goto L4b7de0;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b` v7 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$b;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4b7e04.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b7e08.  call temp:= `validate`(v0, v8) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4b7e0e.  v0:= temp;
  #L4b7e10.  if v0 == 0 then goto L4b7e98;
  #L4b7e14.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.f` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v8 @kind object;
  #L4b7e18.  v8:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.b` @type ^`io.reactivex.rxjava3.functions.Supplier` @kind object;
  #L4b7e1c.  call temp:= `get`(v8) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L4b7e22.  v8:= temp @kind object;
  #L4b7e24.  v0:= "The buffer supplied is null" @kind object;
  #L4b7e28.  call temp:= `requireNonNull`(v8, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b7e2e.  v8:= (`java.util.Collection`) v8 @kind object;
  #L4b7e32.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.g` @type ^`java.util.Collection` := v8 @kind object;
  #L4b7e36.  v8:= v7.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b7e3a.  call `onSubscribe`(v8, v7) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4b7e40.  v8:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b7e44.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b7e4a.  v8:= temp @kind object;
  #L4b7e4c.  v8:= (`io.reactivex.rxjava3.disposables.Disposable`) v8 @kind object;
  #L4b7e50.  call temp:= `isDisposed`(v8) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4b7e56.  v8:= temp;
  #L4b7e58.  if v8 != 0 then goto L4b7e98;
  #L4b7e5c.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.e` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4b7e60.  v4:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.c` @type ^`long` @kind wide;
  #L4b7e64.  v6:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4b7e68.  v1:= v7 @kind object;
  #L4b7e6a.  v2:= v4 @kind wide;
  #L4b7e6c.  call temp:= `schedulePeriodicallyDirect`(v0, v1, v2, v4, v6) @signature `Lio/reactivex/rxjava3/core/Scheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4b7e72.  v8:= temp @kind object;
  #L4b7e74.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b7e78.  call temp:= `set`(v0, v8) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.set:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4b7e7e.  goto L4b7e98;
  #L4b7e80.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b7e82.  call `throwIfFatal`(v8) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b7e88.  call `dispose`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$b;.dispose:()V` @kind virtual;
  #L4b7e8e.  v0:= v7.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b7e92.  call `error`(v8, v0) @signature `Lio/reactivex/rxjava3/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/rxjava3/core/Observer;)V` @kind static;
  #L4b7e98.  return @kind void;
  catch `java.lang.Throwable` @[L4b7e18..L4b7e32] goto L4b7e80;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$b;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b7eb8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.b` @type ^`io.reactivex.rxjava3.functions.Supplier` @kind object;
  #L4b7ebc.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L4b7ec2.  v0:= temp @kind object;
  #L4b7ec4.  v1:= "The bufferSupplier returned a null buffer" @kind object;
  #L4b7ec8.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b7ece.  v0:= (`java.util.Collection`) v0 @kind object;
  #L4b7ed2.  @monitorenter v2
  #L4b7ed4.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.g` @type ^`java.util.Collection` @kind object;
  #L4b7ed8.  if v1 == 0 then goto L4b7ee0;
  #L4b7edc.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.g` @type ^`java.util.Collection` := v0 @kind object;
  #L4b7ee0.  @monitorexit v2
  #L4b7ee2.  if v1 != 0 then goto L4b7ef2;
  #L4b7ee6.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b7eea.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4b7ef0.  return @kind void;
  #L4b7ef2.  v0:= 0I;
  #L4b7ef4.  call `fastPathEmit`(v2, v1, v0, v2) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.fastPathEmit:(Ljava/lang/Object;ZLio/reactivex/rxjava3/disposables/Disposable;)V` @kind virtual;
  #L4b7efa.  return @kind void;
  #L4b7efc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b7efe.  @monitorexit v2
  #L4b7f00.  throw v0;
  #L4b7f02.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b7f04.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b7f0a.  v1:= v2.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b7f0e.  call `onError`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4b7f14.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$b;.dispose:()V` @kind virtual;
  #L4b7f1a.  return @kind void;
  catch `java.lang.Throwable` @[L4b7eb8..L4b7ed2] goto L4b7f02;
  catch `java.lang.Throwable` @[L4b7ed4..L4b7ee2] goto L4b7efc;
  catch `java.lang.Throwable` @[L4b7efe..L4b7f00] goto L4b7efc;
}
