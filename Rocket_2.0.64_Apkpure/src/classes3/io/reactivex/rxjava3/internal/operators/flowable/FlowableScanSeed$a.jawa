record `io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiFunction` `io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.d` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.e` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.g` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.h` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.i` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.j` @AccessFlag ;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.k` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.l` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v2 @kind object, `java.lang.Object` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableScanSeed$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/BiFunction;Ljava/lang/Object;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49ff88.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L49ff8e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L49ff92.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.b` @type ^`io.reactivex.rxjava3.functions.BiFunction` := v2 @kind object;
  #L49ff96.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.k` @type ^`java.lang.Object` := v3 @kind object;
  #L49ff9a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.e` @type ^`int` := v4;
  #L49ff9e.  v1:= v4 ^> 2;
  #L49ffa2.  v1:= v4 - v1 @kind int;
  #L49ffa6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.f` @type ^`int` := v1;
  #L49ffaa.  v1:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L49ffae.  call `<init>`(v1, v4) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L49ffb4.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.c` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v1 @kind object;
  #L49ffb8.  call temp:= `offer`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L49ffbe.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L49ffc2.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L49ffc8.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L49ffcc.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a` v18 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableScanSeed$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L4a0018.  v0:= v18 @kind object;
  #L4a001c.  call temp:= `getAndIncrement`(v18) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4a0022.  v1:= temp;
  #L4a0024.  if v1 == 0 then goto L4a002a;
  #L4a0028.  return @kind void;
  #L4a002a.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a002e.  v2:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.c` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4a0032.  v3:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.f` @type ^`int`;
  #L4a0036.  v4:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.l` @type ^`int`;
  #L4a003a.  v5:= 1I;
  #L4a003c.  v6:= 1I;
  #L4a003e.  v7:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a0042.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4a0048.  v7:= temp @kind wide;
  #L4a004a.  v9:= 0L;
  #L4a004e.  v11:= v9 @kind wide;
  #L4a0050.  v13:= lcmp(v11, v7);
  #L4a0054.  if v13 == 0 then goto L4a00da;
  #L4a0058.  v14:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.g` @type ^`boolean` @kind boolean;
  #L4a005c.  if v14 == 0 then goto L4a0068;
  #L4a0060.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4a0066.  return @kind void;
  #L4a0068.  v14:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.h` @type ^`boolean` @kind boolean;
  #L4a006c.  if v14 == 0 then goto L4a0086;
  #L4a0070.  v15:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.i` @type ^`java.lang.Throwable` @kind object;
  #L4a0074.  if v15 == 0 then goto L4a0086;
  #L4a0078.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4a007e.  call `onError`(v1, v15) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a0084.  return @kind void;
  #L4a0086.  call temp:= `poll`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4a008c.  v15:= temp @kind object;
  #L4a008e.  v16:= 0I;
  #L4a0092.  if v15 != 0 then goto L4a009c;
  #L4a0096.  v17:= 1I;
  #L4a009a.  goto L4a00a0;
  #L4a009c.  v17:= 0I;
  #L4a00a0.  if v14 == 0 then goto L4a00b0;
  #L4a00a4.  if v17 == 0 then goto L4a00b0;
  #L4a00a8.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4a00ae.  return @kind void;
  #L4a00b0.  if v17 == 0 then goto L4a00b6;
  #L4a00b4.  goto L4a00da;
  #L4a00b6.  call `onNext`(v1, v15) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4a00bc.  v13:= 1L;
  #L4a00c0.  v11:= v11 + v13 @kind long;
  #L4a00c2.  v4:= v4 + 1;
  #L4a00c6.  if v4 != v3 then goto L4a0050;
  #L4a00ca.  v4:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a00ce.  v13:= (`long`) v3 @kind i2l;
  #L4a00d0.  call `request`(v4, v13) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4a00d6.  v4:= 0I;
  #L4a00d8.  goto L4a0050;
  #L4a00da.  if v13 != 0 then goto L4a0110;
  #L4a00de.  v7:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.h` @type ^`boolean` @kind boolean;
  #L4a00e2.  if v7 == 0 then goto L4a0110;
  #L4a00e6.  v7:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.i` @type ^`java.lang.Throwable` @kind object;
  #L4a00ea.  if v7 == 0 then goto L4a00fc;
  #L4a00ee.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4a00f4.  call `onError`(v1, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a00fa.  return @kind void;
  #L4a00fc.  call temp:= `isEmpty`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4a0102.  v7:= temp;
  #L4a0104.  if v7 == 0 then goto L4a0110;
  #L4a0108.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4a010e.  return @kind void;
  #L4a0110.  v7:= lcmp(v11, v9);
  #L4a0114.  if v7 == 0 then goto L4a0122;
  #L4a0118.  v7:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a011c.  call temp:= `produced`(v7, v11) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4a0122.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.l` @type ^`int` := v4;
  #L4a0126.  v6:= -v6 @kind int;
  #L4a0128.  call temp:= `addAndGet`(v0, v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4a012e.  v6:= temp;
  #L4a0130.  if v6 != 0 then goto L4a003e;
  #L4a0134.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableScanSeed$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49ffe0.  v0:= 1I;
  #L49ffe2.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.g` @type ^`boolean` := v0 @kind boolean;
  #L49ffe6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L49ffea.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L49fff0.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L49fff6.  v0:= temp;
  #L49fff8.  if v0 != 0 then goto L4a0006;
  #L49fffc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.c` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4a0000.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4a0006.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableScanSeed$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a0148.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.h` @type ^`boolean` @kind boolean;
  #L4a014c.  if v0 == 0 then goto L4a0152;
  #L4a0150.  return @kind void;
  #L4a0152.  v0:= 1I;
  #L4a0154.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4a0158.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableScanSeed$a;.a:()V` @kind virtual;
  #L4a015e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableScanSeed$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a0170.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.h` @type ^`boolean` @kind boolean;
  #L4a0174.  if v0 == 0 then goto L4a0180;
  #L4a0178.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4a017e.  return @kind void;
  #L4a0180.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.i` @type ^`java.lang.Throwable` := v2 @kind object;
  #L4a0184.  v2:= 1I;
  #L4a0186.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.h` @type ^`boolean` := v2 @kind boolean;
  #L4a018a.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableScanSeed$a;.a:()V` @kind virtual;
  #L4a0190.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableScanSeed$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a01a4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.h` @type ^`boolean` @kind boolean;
  #L4a01a8.  if v0 == 0 then goto L4a01ae;
  #L4a01ac.  return @kind void;
  #L4a01ae.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.k` @type ^`java.lang.Object` @kind object;
  #L4a01b2.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.b` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L4a01b6.  call temp:= `apply`(v1, v0, v3) @signature `Lio/reactivex/rxjava3/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4a01bc.  v3:= temp @kind object;
  #L4a01be.  v0:= "The accumulator returned a null value" @kind object;
  #L4a01c2.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4a01c8.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.k` @type ^`java.lang.Object` := v3 @kind object;
  #L4a01cc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.c` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4a01d0.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4a01d6.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableScanSeed$a;.a:()V` @kind virtual;
  #L4a01dc.  return @kind void;
  #L4a01de.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a01e0.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4a01e6.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a01ea.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a01f0.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableScanSeed$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a01f6.  return @kind void;
  catch `java.lang.Throwable` @[L4a01b2..L4a01c8] goto L4a01de;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableScanSeed$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a0214.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a0218.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4a021e.  v0:= temp;
  #L4a0220.  if v0 == 0 then goto L4a0242;
  #L4a0224.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.j` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4a0228.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a022c.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4a0232.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.e` @type ^`int`;
  #L4a0236.  v0:= v0 + -1;
  #L4a023a.  v0:= (`long`) v0 @kind i2l;
  #L4a023c.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4a0242.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableScanSeed$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a0254.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4a025a.  v0:= temp;
  #L4a025c.  if v0 == 0 then goto L4a0270;
  #L4a0260.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a0264.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4a026a.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableScanSeed$a;.a:()V` @kind virtual;
  #L4a0270.  return @kind void;
}
