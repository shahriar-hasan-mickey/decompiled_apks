record `io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.ObservableEmitter` @kind interface {
  `io.reactivex.rxjava3.core.ObservableEmitter` `io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` `io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.d` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b` v1 @kind this, `io.reactivex.rxjava3.core.ObservableEmitter` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$b;.<init>:(Lio/reactivex/rxjava3/core/ObservableEmitter;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4bb3ec.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4bb3f2.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.a` @type ^`io.reactivex.rxjava3.core.ObservableEmitter` := v2 @kind object;
  #L4bb3f6.  v2:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4bb3fa.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4bb400.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.b` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v2 @kind object;
  #L4bb404.  v2:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4bb408.  v0:= 16I;
  #L4bb40c.  call `<init>`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4bb412.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.c` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` := v2 @kind object;
  #L4bb416.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$b;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L4bb428.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4bb42e.  v0:= temp;
  #L4bb430.  if v0 != 0 then goto L4bb43a;
  #L4bb434.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$b;.b:()V` @kind virtual;
  #L4bb43a.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b` v8 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4bb44c.  v0:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.a` @type ^`io.reactivex.rxjava3.core.ObservableEmitter` @kind object;
  #L4bb450.  v1:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.c` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4bb454.  v2:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.b` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bb458.  v3:= 1I;
  #L4bb45a.  v4:= 1I;
  #L4bb45c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/core/ObservableEmitter;.isDisposed:()Z` @kind interface;
  #L4bb462.  v5:= temp;
  #L4bb464.  if v5 == 0 then goto L4bb470;
  #L4bb468.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4bb46e.  return @kind void;
  #L4bb470.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4bb476.  v5:= temp @kind object;
  #L4bb478.  if v5 == 0 then goto L4bb48a;
  #L4bb47c.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4bb482.  call `tryTerminateConsumer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Emitter;)V` @kind virtual;
  #L4bb488.  return @kind void;
  #L4bb48a.  v5:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.d` @type ^`boolean` @kind boolean;
  #L4bb48e.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4bb494.  v6:= temp @kind object;
  #L4bb496.  if v6 != 0 then goto L4bb49e;
  #L4bb49a.  v7:= 1I;
  #L4bb49c.  goto L4bb4a0;
  #L4bb49e.  v7:= 0I;
  #L4bb4a0.  if v5 == 0 then goto L4bb4b0;
  #L4bb4a4.  if v7 == 0 then goto L4bb4b0;
  #L4bb4a8.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Emitter;.onComplete:()V` @kind interface;
  #L4bb4ae.  return @kind void;
  #L4bb4b0.  if v7 == 0 then goto L4bb4c4;
  #L4bb4b4.  v4:= -v4 @kind int;
  #L4bb4b6.  call temp:= `addAndGet`(v8, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4bb4bc.  v4:= temp;
  #L4bb4be.  if v4 != 0 then goto L4bb45c;
  #L4bb4c2.  return @kind void;
  #L4bb4c4.  call `onNext`(v0, v6) @signature `Lio/reactivex/rxjava3/core/Emitter;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4bb4ca.  goto L4bb45c;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bb33c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.a` @type ^`io.reactivex.rxjava3.core.ObservableEmitter` @kind object;
  #L4bb340.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/core/ObservableEmitter;.isDisposed:()Z` @kind interface;
  #L4bb346.  v0:= temp;
  #L4bb348.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bb4dc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.d` @type ^`boolean` @kind boolean;
  #L4bb4e0.  if v0 != 0 then goto L4bb502;
  #L4bb4e4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.a` @type ^`io.reactivex.rxjava3.core.ObservableEmitter` @kind object;
  #L4bb4e8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/core/ObservableEmitter;.isDisposed:()Z` @kind interface;
  #L4bb4ee.  v0:= temp;
  #L4bb4f0.  if v0 == 0 then goto L4bb4f6;
  #L4bb4f4.  goto L4bb502;
  #L4bb4f6.  v0:= 1I;
  #L4bb4f8.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.d` @type ^`boolean` := v0 @kind boolean;
  #L4bb4fc.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$b;.a:()V` @kind virtual;
  #L4bb502.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bb514.  call temp:= `tryOnError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$b;.tryOnError:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4bb51a.  v0:= temp;
  #L4bb51c.  if v0 != 0 then goto L4bb526;
  #L4bb520.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4bb526.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bb538.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.d` @type ^`boolean` @kind boolean;
  #L4bb53c.  if v0 != 0 then goto L4bb5c8;
  #L4bb540.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.a` @type ^`io.reactivex.rxjava3.core.ObservableEmitter` @kind object;
  #L4bb544.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/core/ObservableEmitter;.isDisposed:()Z` @kind interface;
  #L4bb54a.  v0:= temp;
  #L4bb54c.  if v0 == 0 then goto L4bb552;
  #L4bb550.  goto L4bb5c8;
  #L4bb552.  if v3 != 0 then goto L4bb56a;
  #L4bb556.  v3:= "onNext called with a null value." @kind object;
  #L4bb55a.  call temp:= `createNullPointerException`(v3) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.createNullPointerException:(Ljava/lang/String;)Ljava/lang/NullPointerException;` @kind static;
  #L4bb560.  v3:= temp @kind object;
  #L4bb562.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4bb568.  return @kind void;
  #L4bb56a.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4bb570.  v0:= temp;
  #L4bb572.  if v0 != 0 then goto L4bb59e;
  #L4bb576.  v0:= 0I;
  #L4bb578.  v1:= 1I;
  #L4bb57a.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4bb580.  v0:= temp;
  #L4bb582.  if v0 == 0 then goto L4bb59e;
  #L4bb586.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.a` @type ^`io.reactivex.rxjava3.core.ObservableEmitter` @kind object;
  #L4bb58a.  call `onNext`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Emitter;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4bb590.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4bb596.  v3:= temp;
  #L4bb598.  if v3 != 0 then goto L4bb5ba;
  #L4bb59c.  return @kind void;
  #L4bb59e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.c` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4bb5a2.  @monitorenter v0
  #L4bb5a4.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4bb5aa.  @monitorexit v0
  #L4bb5ac.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4bb5b2.  v3:= temp;
  #L4bb5b4.  if v3 == 0 then goto L4bb5ba;
  #L4bb5b8.  return @kind void;
  #L4bb5ba.  call `b`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$b;.b:()V` @kind virtual;
  #L4bb5c0.  return @kind void;
  #L4bb5c2.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bb5c4.  @monitorexit v0
  #L4bb5c6.  throw v3;
  #L4bb5c8.  return @kind void;
  catch `java.lang.Throwable` @[L4bb5a4..L4bb5ac] goto L4bb5c2;
  catch `java.lang.Throwable` @[L4bb5c4..L4bb5c6] goto L4bb5c2;
}
procedure `io.reactivex.rxjava3.core.ObservableEmitter` `serialize`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$b;.serialize:()Lio/reactivex/rxjava3/core/ObservableEmitter;` @AccessFlag PUBLIC {
    temp;

  #L4bb3b8.  return v0 @kind object;
}
procedure `void` `setCancellable`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b` v1 @kind this, `io.reactivex.rxjava3.functions.Cancellable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$b;.setCancellable:(Lio/reactivex/rxjava3/functions/Cancellable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bb5f0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.a` @type ^`io.reactivex.rxjava3.core.ObservableEmitter` @kind object;
  #L4bb5f4.  call `setCancellable`(v0, v2) @signature `Lio/reactivex/rxjava3/core/ObservableEmitter;.setCancellable:(Lio/reactivex/rxjava3/functions/Cancellable;)V` @kind interface;
  #L4bb5fa.  return @kind void;
}
procedure `void` `setDisposable`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$b;.setDisposable:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bb60c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.a` @type ^`io.reactivex.rxjava3.core.ObservableEmitter` @kind object;
  #L4bb610.  call `setDisposable`(v0, v2) @signature `Lio/reactivex/rxjava3/core/ObservableEmitter;.setDisposable:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4bb616.  return @kind void;
}
procedure `java.lang.String` `toString`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bb3cc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.a` @type ^`io.reactivex.rxjava3.core.ObservableEmitter` @kind object;
  #L4bb3d0.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L4bb3d6.  v0:= temp @kind object;
  #L4bb3d8.  return v0 @kind object;
}
procedure `boolean` `tryOnError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$b;.tryOnError:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bb35c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.d` @type ^`boolean` @kind boolean;
  #L4bb360.  v1:= 0I;
  #L4bb362.  if v0 != 0 then goto L4bb3a6;
  #L4bb366.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.a` @type ^`io.reactivex.rxjava3.core.ObservableEmitter` @kind object;
  #L4bb36a.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/core/ObservableEmitter;.isDisposed:()Z` @kind interface;
  #L4bb370.  v0:= temp;
  #L4bb372.  if v0 == 0 then goto L4bb378;
  #L4bb376.  goto L4bb3a6;
  #L4bb378.  if v3 != 0 then goto L4bb388;
  #L4bb37c.  v3:= "onError called with a null Throwable." @kind object;
  #L4bb380.  call temp:= `createNullPointerException`(v3) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.createNullPointerException:(Ljava/lang/String;)Ljava/lang/NullPointerException;` @kind static;
  #L4bb386.  v3:= temp @kind object;
  #L4bb388.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.b` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bb38c.  call temp:= `tryAddThrowable`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4bb392.  v3:= temp;
  #L4bb394.  if v3 == 0 then goto L4bb3a6;
  #L4bb398.  v3:= 1I;
  #L4bb39a.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b.d` @type ^`boolean` := v3 @kind boolean;
  #L4bb39e.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$b;.a:()V` @kind virtual;
  #L4bb3a4.  return v3;
  #L4bb3a6.  return v1;
}
