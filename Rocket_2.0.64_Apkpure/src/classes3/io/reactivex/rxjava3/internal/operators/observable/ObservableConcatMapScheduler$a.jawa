record `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a$a` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler$Worker` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.g` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.h` @AccessFlag ;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.i` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.j` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.k` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.l` @AccessFlag VOLATILE;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.m` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `int` v3 , `boolean` v4 , `io.reactivex.rxjava3.core.Scheduler$Worker` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;IZLio/reactivex/rxjava3/core/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4ba19c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4ba1a2.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4ba1a6.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4ba1aa.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.c` @type ^`int` := v3;
  #L4ba1ae.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.f` @type ^`boolean` := v4 @kind boolean;
  #L4ba1b2.  v2:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4ba1b6.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4ba1bc.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v2 @kind object;
  #L4ba1c0.  v2:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a$a`;
  #L4ba1c4.  call `<init>`(v2, v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$a$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$a;)V` @kind direct;
  #L4ba1ca.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.e` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a$a` := v2 @kind object;
  #L4ba1ce.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.g` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` := v5 @kind object;
  #L4ba1d2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$a;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L4ba224.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4ba22a.  v0:= temp;
  #L4ba22c.  if v0 == 0 then goto L4ba232;
  #L4ba230.  return @kind void;
  #L4ba232.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.g` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4ba236.  call temp:= `schedule`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4ba23c.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ba1e4.  v0:= 1I;
  #L4ba1e6.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.l` @type ^`boolean` := v0 @kind boolean;
  #L4ba1ea.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.i` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4ba1ee.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ba1f4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.e` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a$a` @kind object;
  #L4ba1f8.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$a$a;.a:()V` @kind virtual;
  #L4ba1fe.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.g` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4ba202.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ba208.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4ba20c.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4ba212.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ba184.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.l` @type ^`boolean` @kind boolean;
  #L4ba188.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ba250.  v0:= 1I;
  #L4ba252.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.k` @type ^`boolean` := v0 @kind boolean;
  #L4ba256.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$a;.a:()V` @kind virtual;
  #L4ba25c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ba270.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4ba274.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4ba27a.  v2:= temp;
  #L4ba27c.  if v2 == 0 then goto L4ba28c;
  #L4ba280.  v2:= 1I;
  #L4ba282.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.k` @type ^`boolean` := v2 @kind boolean;
  #L4ba286.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$a;.a:()V` @kind virtual;
  #L4ba28c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ba2a0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.m` @type ^`int`;
  #L4ba2a4.  if v0 != 0 then goto L4ba2b2;
  #L4ba2a8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4ba2ac.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4ba2b2.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$a;.a:()V` @kind virtual;
  #L4ba2b8.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a` v2 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ba2cc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.i` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4ba2d0.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4ba2d6.  v0:= temp;
  #L4ba2d8.  if v0 == 0 then goto L4ba350;
  #L4ba2dc.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.i` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v3 @kind object;
  #L4ba2e0.  v0:= instanceof @variable v3 @type ^`io.reactivex.rxjava3.internal.fuseable.QueueDisposable` @kind boolean;
  #L4ba2e4.  if v0 == 0 then goto L4ba334;
  #L4ba2e8.  v3:= (`io.reactivex.rxjava3.internal.fuseable.QueueDisposable`) v3 @kind object;
  #L4ba2ec.  v0:= 3I;
  #L4ba2ee.  call temp:= `requestFusion`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L4ba2f4.  v0:= temp;
  #L4ba2f6.  v1:= 1I;
  #L4ba2f8.  if v0 != v1 then goto L4ba31a;
  #L4ba2fc.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.m` @type ^`int` := v0;
  #L4ba300.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4ba304.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.k` @type ^`boolean` := v1 @kind boolean;
  #L4ba308.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ba30c.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4ba312.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$a;.a:()V` @kind virtual;
  #L4ba318.  return @kind void;
  #L4ba31a.  v1:= 2I;
  #L4ba31c.  if v0 != v1 then goto L4ba334;
  #L4ba320.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.m` @type ^`int` := v0;
  #L4ba324.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4ba328.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ba32c.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4ba332.  return @kind void;
  #L4ba334.  v3:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4ba338.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.c` @type ^`int`;
  #L4ba33c.  call `<init>`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4ba342.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4ba346.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ba34a.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4ba350.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a` v7 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4ba364.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4ba368.  v1:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4ba36c.  v2:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4ba370.  v3:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.j` @type ^`boolean` @kind boolean;
  #L4ba374.  if v3 != 0 then goto L4ba4ba;
  #L4ba378.  v3:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.l` @type ^`boolean` @kind boolean;
  #L4ba37c.  if v3 == 0 then goto L4ba388;
  #L4ba380.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4ba386.  return @kind void;
  #L4ba388.  v3:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.f` @type ^`boolean` @kind boolean;
  #L4ba38c.  v4:= 1I;
  #L4ba38e.  if v3 != 0 then goto L4ba3be;
  #L4ba392.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ba398.  v3:= temp @kind object;
  #L4ba39a.  v3:= (`java.lang.Throwable`) v3 @kind object;
  #L4ba39e.  if v3 == 0 then goto L4ba3be;
  #L4ba3a2.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4ba3a8.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.l` @type ^`boolean` := v4 @kind boolean;
  #L4ba3ac.  call `tryTerminateConsumer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4ba3b2.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.g` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4ba3b6.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ba3bc.  return @kind void;
  #L4ba3be.  v3:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.k` @type ^`boolean` @kind boolean;
  #L4ba3c2.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4ba3c8.  v5:= temp @kind object;
  #L4ba3ca.  if v5 != 0 then goto L4ba3d2;
  #L4ba3ce.  v6:= 1I;
  #L4ba3d0.  goto L4ba3d4;
  #L4ba3d2.  v6:= 0I;
  #L4ba3d4.  if v3 == 0 then goto L4ba3f2;
  #L4ba3d8.  if v6 == 0 then goto L4ba3f2;
  #L4ba3dc.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.l` @type ^`boolean` := v4 @kind boolean;
  #L4ba3e0.  call `tryTerminateConsumer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4ba3e6.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.g` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4ba3ea.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ba3f0.  return @kind void;
  #L4ba3f2.  if v6 != 0 then goto L4ba4ba;
  #L4ba3f6.  v3:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4ba3fa.  call temp:= `apply`(v3, v5) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4ba400.  v3:= temp @kind object;
  #L4ba402.  v5:= "The mapper returned a null ObservableSource" @kind object;
  #L4ba406.  call temp:= `requireNonNull`(v3, v5) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4ba40c.  v3:= (`io.reactivex.rxjava3.core.ObservableSource`) v3 @kind object;
  #L4ba410.  v5:= instanceof @variable v3 @type ^`io.reactivex.rxjava3.functions.Supplier` @kind boolean;
  #L4ba414.  if v5 == 0 then goto L4ba448;
  #L4ba418.  v3:= (`io.reactivex.rxjava3.functions.Supplier`) v3 @kind object;
  #L4ba41c.  call temp:= `get`(v3) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L4ba422.  v3:= temp @kind object;
  #L4ba424.  if v3 == 0 then goto L4ba370;
  #L4ba428.  v4:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.l` @type ^`boolean` @kind boolean;
  #L4ba42c.  if v4 != 0 then goto L4ba370;
  #L4ba430.  call `onNext`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ba436.  goto L4ba370;
  #L4ba438.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ba43a.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4ba440.  call temp:= `tryAddThrowableOrReport`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4ba446.  goto L4ba370;
  #L4ba448.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.j` @type ^`boolean` := v4 @kind boolean;
  #L4ba44c.  v4:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.e` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a$a` @kind object;
  #L4ba450.  call `subscribe`(v3, v4) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4ba456.  goto L4ba4ba;
  #L4ba458.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ba45a.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4ba460.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.l` @type ^`boolean` := v4 @kind boolean;
  #L4ba464.  v4:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.i` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4ba468.  call `dispose`(v4) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ba46e.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4ba474.  call temp:= `tryAddThrowableOrReport`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4ba47a.  call `tryTerminateConsumer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4ba480.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.g` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4ba484.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ba48a.  return @kind void;
  #L4ba48c.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ba48e.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4ba494.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.l` @type ^`boolean` := v4 @kind boolean;
  #L4ba498.  v3:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.i` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4ba49c.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ba4a2.  call temp:= `tryAddThrowableOrReport`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4ba4a8.  call `tryTerminateConsumer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4ba4ae.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$a.g` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4ba4b2.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ba4b8.  return @kind void;
  #L4ba4ba.  call temp:= `decrementAndGet`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4ba4c0.  v3:= temp;
  #L4ba4c2.  if v3 != 0 then goto L4ba370;
  #L4ba4c6.  return @kind void;
  catch `java.lang.Throwable` @[L4ba3c2..L4ba3ca] goto L4ba48c;
  catch `java.lang.Throwable` @[L4ba3f6..L4ba410] goto L4ba458;
  catch `java.lang.Throwable` @[L4ba418..L4ba424] goto L4ba438;
}
