record `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber` @kind class, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.functions.Supplier` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.c` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.d` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.f` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.g` @AccessFlag ;
  `java.util.Collection` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.h` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.i` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.rxjava3.functions.Supplier` v3 @kind object, `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object, `io.reactivex.rxjava3.core.Scheduler` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Supplier;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4896fc.  v0:= new `io.reactivex.rxjava3.internal.queue.MpscLinkedQueue`;
  #L489700.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L489706.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L48970c.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L489710.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L489716.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L48971a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.c` @type ^`io.reactivex.rxjava3.functions.Supplier` := v3 @kind object;
  #L48971e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.d` @type ^`long` := v4 @kind wide;
  #L489722.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.e` @type ^`java.util.concurrent.TimeUnit` := v6 @kind object;
  #L489726.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.f` @type ^`io.reactivex.rxjava3.core.Scheduler` := v7 @kind object;
  #L48972a.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$b;.a:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L4896b0.  v1:= v0.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4896b4.  call `onNext`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4896ba.  v1:= 1I;
  #L4896bc.  return v1;
}
procedure `boolean` `accept`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$b;.accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L489690.  v2:= (`java.util.Collection`) v2 @kind object;
  #L489694.  call temp:= `a`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$b;.a:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)Z` @kind virtual;
  #L48969a.  v1:= temp;
  #L48969c.  return v1;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48973c.  v0:= 1I;
  #L48973e.  v1.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L489742.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L489746.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L48974c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L489750.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L489756.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L489768.  call `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$b;.cancel:()V` @kind virtual;
  #L48976e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4896d0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4896d4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4896da.  v0:= temp @kind object;
  #L4896dc.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4896e0.  if v0 != v1 then goto L4896e8;
  #L4896e4.  v0:= 1I;
  #L4896e6.  goto L4896ea;
  #L4896e8.  v0:= 0I;
  #L4896ea.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L489780.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L489784.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L48978a.  @monitorenter v4
  #L48978c.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.h` @type ^`java.util.Collection` @kind object;
  #L489790.  if v0 != 0 then goto L489798;
  #L489794.  @monitorexit v4
  #L489796.  return @kind void;
  #L489798.  v1:= 0I;
  #L48979a.  v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.h` @type ^`java.util.Collection` := v1 @kind object;
  #L48979e.  @monitorexit v4
  #L4897a0.  v2:= v4.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4897a4.  call temp:= `offer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4897aa.  v0:= 1I;
  #L4897ac.  v4.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4897b0.  call temp:= `enter`(v4) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L4897b6.  v0:= temp;
  #L4897b8.  if v0 == 0 then goto L4897cc;
  #L4897bc.  v0:= v4.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4897c0.  v2:= v4.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4897c4.  v3:= 0I;
  #L4897c6.  call `drainMaxLoop`(v0, v2, v3, v1, v4) @signature `Lio/reactivex/rxjava3/internal/util/QueueDrainHelper;.drainMaxLoop:(Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;Lorg/reactivestreams/Subscriber;ZLio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/internal/util/QueueDrain;)V` @kind static;
  #L4897cc.  return @kind void;
  #L4897ce.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4897d0.  @monitorexit v4
  #L4897d2.  throw v0;
  catch `java.lang.Throwable` @[L48978c..L4897a0] goto L4897ce;
  catch `java.lang.Throwable` @[L4897d0..L4897d2] goto L4897ce;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4897f8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4897fc.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L489802.  @monitorenter v1
  #L489804.  v0:= 0I;
  #L489806.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.h` @type ^`java.util.Collection` := v0 @kind object;
  #L48980a.  @monitorexit v1
  #L48980c.  v0:= v1.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L489810.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L489816.  return @kind void;
  #L489818.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48981a.  @monitorexit v1
  #L48981c.  throw v2;
  catch `java.lang.Throwable` @[L489806..L48980c] goto L489818;
  catch `java.lang.Throwable` @[L48981a..L48981c] goto L489818;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L489844.  @monitorenter v1
  #L489846.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.h` @type ^`java.util.Collection` @kind object;
  #L48984a.  if v0 == 0 then goto L489854;
  #L48984e.  call temp:= `add`(v0, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L489854.  @monitorexit v1
  #L489856.  return @kind void;
  #L489858.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48985a.  @monitorexit v1
  #L48985c.  throw v2;
  catch `java.lang.Throwable` @[L489846..L48985c] goto L489858;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b` v9 @kind this, `org.reactivestreams.Subscription` v10 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L48987c.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L489880.  call temp:= `validate`(v0, v10) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L489886.  v0:= temp;
  #L489888.  if v0 == 0 then goto L48991a;
  #L48988c.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.g` @type ^`org.reactivestreams.Subscription` := v10 @kind object;
  #L489890.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.c` @type ^`io.reactivex.rxjava3.functions.Supplier` @kind object;
  #L489894.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L48989a.  v0:= temp @kind object;
  #L48989c.  v1:= "The supplied buffer is null" @kind object;
  #L4898a0.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4898a6.  v0:= (`java.util.Collection`) v0 @kind object;
  #L4898aa.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.h` @type ^`java.util.Collection` := v0 @kind object;
  #L4898ae.  v0:= v9.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4898b2.  call `onSubscribe`(v0, v9) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4898b8.  v0:= v9.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L4898bc.  if v0 != 0 then goto L48991a;
  #L4898c0.  v0:= 9223372036854775807L;
  #L4898ca.  call `request`(v10, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4898d0.  v2:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.f` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4898d4.  v6:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.d` @type ^`long` @kind wide;
  #L4898d8.  v8:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.e` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4898dc.  v3:= v9 @kind object;
  #L4898de.  v4:= v6 @kind wide;
  #L4898e0.  call temp:= `schedulePeriodicallyDirect`(v2, v3, v4, v6, v8) @signature `Lio/reactivex/rxjava3/core/Scheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4898e6.  v10:= temp @kind object;
  #L4898e8.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4898ec.  v1:= 0I;
  #L4898ee.  call temp:= `compareAndSet`(v0, v1, v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4898f4.  v0:= temp;
  #L4898f6.  if v0 != 0 then goto L48991a;
  #L4898fa.  call `dispose`(v10) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L489900.  goto L48991a;
  #L489902.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L489904.  call `throwIfFatal`(v10) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L48990a.  call `cancel`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$b;.cancel:()V` @kind virtual;
  #L489910.  v0:= v9.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L489914.  call `error`(v10, v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L48991a.  return @kind void;
  catch `java.lang.Throwable` @[L489890..L4898aa] goto L489902;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L489938.  call `requested`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.requested:(J)V` @kind virtual;
  #L48993e.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$b;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L489950.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.c` @type ^`io.reactivex.rxjava3.functions.Supplier` @kind object;
  #L489954.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L48995a.  v0:= temp @kind object;
  #L48995c.  v1:= "The supplied buffer is null" @kind object;
  #L489960.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L489966.  v0:= (`java.util.Collection`) v0 @kind object;
  #L48996a.  @monitorenter v2
  #L48996c.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.h` @type ^`java.util.Collection` @kind object;
  #L489970.  if v1 != 0 then goto L489978;
  #L489974.  @monitorexit v2
  #L489976.  return @kind void;
  #L489978.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$b.h` @type ^`java.util.Collection` := v0 @kind object;
  #L48997c.  @monitorexit v2
  #L48997e.  v0:= 0I;
  #L489980.  call `fastPathEmitMax`(v2, v1, v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscribers/QueueDrainSubscriber;.fastPathEmitMax:(Ljava/lang/Object;ZLio/reactivex/rxjava3/disposables/Disposable;)V` @kind virtual;
  #L489986.  return @kind void;
  #L489988.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48998a.  @monitorexit v2
  #L48998c.  throw v0;
  #L48998e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L489990.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L489996.  call `cancel`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTimed$b;.cancel:()V` @kind virtual;
  #L48999c.  v1:= v2.`io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4899a0.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4899a6.  return @kind void;
  catch `java.lang.Throwable` @[L489950..L48996a] goto L48998e;
  catch `java.lang.Throwable` @[L48996c..L48997e] goto L489988;
  catch `java.lang.Throwable` @[L48998a..L48998c] goto L489988;
}
