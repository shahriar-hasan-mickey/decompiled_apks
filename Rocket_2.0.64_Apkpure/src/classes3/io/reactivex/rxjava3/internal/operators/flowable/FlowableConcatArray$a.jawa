record `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.h` @AccessFlag FINAL;
  `org.reactivestreams.Publisher`[] `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.i` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.j` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.k` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.l` @AccessFlag ;
  `java.util.List` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.m` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.n` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a` v1 @kind this, `org.reactivestreams.Publisher`[] v2 @kind object, `boolean` v3 , `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatArray$a;.<init>:([Lorg/reactivestreams/Publisher;ZLorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L48b09c.  v0:= 0I;
  #L48b09e.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.<init>:(Z)V` @kind direct;
  #L48b0a4.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.h` @type ^`org.reactivestreams.Subscriber` := v4 @kind object;
  #L48b0a8.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.i` @type ^`org.reactivestreams.Publisher`[] := v2 @kind object;
  #L48b0ac.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.j` @type ^`boolean` := v3 @kind boolean;
  #L48b0b0.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L48b0b4.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L48b0ba.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.k` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L48b0be.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a` v9 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatArray$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L48b0d0.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.k` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L48b0d4.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L48b0da.  v0:= temp;
  #L48b0dc.  if v0 != 0 then goto L48b1ca;
  #L48b0e0.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.i` @type ^`org.reactivestreams.Publisher`[] @kind object;
  #L48b0e4.  v1:= length @variable v0;
  #L48b0e6.  v2:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.l` @type ^`int`;
  #L48b0ea.  v3:= 1I;
  #L48b0ec.  if v2 != v1 then goto L48b140;
  #L48b0f0.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.m` @type ^`java.util.List` @kind object;
  #L48b0f4.  if v0 == 0 then goto L48b134;
  #L48b0f8.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L48b0fe.  v1:= temp;
  #L48b100.  if v1 != v3 then goto L48b11e;
  #L48b104.  v1:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48b108.  v2:= 0I;
  #L48b10a.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L48b110.  v0:= temp @kind object;
  #L48b112.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L48b116.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L48b11c.  goto L48b13e;
  #L48b11e.  v1:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48b122.  v2:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L48b126.  call `<init>`(v2, v0) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:(Ljava/lang/Iterable;)V` @kind direct;
  #L48b12c.  call `onError`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L48b132.  goto L48b13e;
  #L48b134.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48b138.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L48b13e.  return @kind void;
  #L48b140.  v4:= v0[v2] @kind object;
  #L48b144.  if v4 != 0 then goto L48b192;
  #L48b148.  v4:= new `java.lang.NullPointerException`;
  #L48b14c.  v5:= "A Publisher entry is null" @kind object;
  #L48b150.  call `<init>`(v4, v5) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48b156.  v5:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.j` @type ^`boolean` @kind boolean;
  #L48b15a.  if v5 == 0 then goto L48b186;
  #L48b15e.  v5:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.m` @type ^`java.util.List` @kind object;
  #L48b162.  if v5 != 0 then goto L48b17a;
  #L48b166.  v5:= new `java.util.ArrayList`;
  #L48b16a.  v6:= v1 - v2 @kind int;
  #L48b16e.  v6:= v6 + v3 @kind int;
  #L48b170.  call `<init>`(v5, v6) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L48b176.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.m` @type ^`java.util.List` := v5 @kind object;
  #L48b17a.  call temp:= `add`(v5, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L48b180.  v2:= v2 + 1;
  #L48b184.  goto L48b0ea;
  #L48b186.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48b18a.  call `onError`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L48b190.  return @kind void;
  #L48b192.  v5:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.n` @type ^`long` @kind wide;
  #L48b196.  v7:= 0L;
  #L48b19a.  v3:= lcmp(v5, v7);
  #L48b19e.  if v3 == 0 then goto L48b1ac;
  #L48b1a2.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.n` @type ^`long` := v7 @kind wide;
  #L48b1a6.  call `produced`(v9, v5) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @kind virtual;
  #L48b1ac.  call `subscribe`(v4, v9) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L48b1b2.  v2:= v2 + 1;
  #L48b1b6.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.l` @type ^`int` := v2;
  #L48b1ba.  v3:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.k` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L48b1be.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L48b1c4.  v3:= temp;
  #L48b1c6.  if v3 != 0 then goto L48b0ea;
  #L48b1ca.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatArray$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L48b1dc.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.j` @type ^`boolean` @kind boolean;
  #L48b1e0.  if v0 == 0 then goto L48b218;
  #L48b1e4.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.m` @type ^`java.util.List` @kind object;
  #L48b1e8.  if v0 != 0 then goto L48b20a;
  #L48b1ec.  v0:= new `java.util.ArrayList`;
  #L48b1f0.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.i` @type ^`org.reactivestreams.Publisher`[] @kind object;
  #L48b1f4.  v1:= length @variable v1;
  #L48b1f6.  v2:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.l` @type ^`int`;
  #L48b1fa.  v1:= v1 - v2 @kind int;
  #L48b1fc.  v1:= v1 + 1;
  #L48b200.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L48b206.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.m` @type ^`java.util.List` := v0 @kind object;
  #L48b20a.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L48b210.  call `onComplete`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatArray$a;.onComplete:()V` @kind virtual;
  #L48b216.  goto L48b222;
  #L48b218.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48b21c.  call `onError`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L48b222.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatArray$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L48b234.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.n` @type ^`long` @kind wide;
  #L48b238.  v2:= 1L;
  #L48b23c.  v0:= v0 + v2 @kind long;
  #L48b23e.  v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.n` @type ^`long` := v0 @kind wide;
  #L48b242.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48b246.  call `onNext`(v0, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L48b24c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatArray$a` v0 @kind this, `org.reactivestreams.Subscription` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatArray$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;

  #L48b260.  call `setSubscription`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L48b266.  return @kind void;
}
