record `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.a` @kind class {
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow.b` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow` v0 @kind this, `io.reactivex.rxjava3.core.Flowable` v1 @kind object, `long` v2 , `long` v4 , `int` v6 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow;.<init>:(Lio/reactivex/rxjava3/core/Flowable;JJI)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4a7dac.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/a;.<init>:(Lio/reactivex/rxjava3/core/Flowable;)V` @kind direct;
  #L4a7db2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow.b` @type ^`long` := v2 @kind wide;
  #L4a7db6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow.c` @type ^`long` := v4 @kind wide;
  #L4a7dba.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow.d` @type ^`int` := v6;
  #L4a7dbe.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow` v9 @kind this, `org.reactivestreams.Subscriber` v10 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4a7dd0.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow.c` @type ^`long` @kind wide;
  #L4a7dd4.  v2:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow.b` @type ^`long` @kind wide;
  #L4a7dd8.  v4:= lcmp(v0, v2);
  #L4a7ddc.  if v4 != 0 then goto L4a7dfe;
  #L4a7de0.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.a.source` @type ^`io.reactivex.rxjava3.core.Flowable` @kind object;
  #L4a7de4.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$a`;
  #L4a7de8.  v2:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow.b` @type ^`long` @kind wide;
  #L4a7dec.  v4:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow.d` @type ^`int`;
  #L4a7df0.  call `<init>`(v1, v10, v2, v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$a;.<init>:(Lorg/reactivestreams/Subscriber;JI)V` @kind direct;
  #L4a7df6.  call `subscribe`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Flowable;.subscribe:(Lio/reactivex/rxjava3/core/FlowableSubscriber;)V` @kind virtual;
  #L4a7dfc.  goto L4a7e50;
  #L4a7dfe.  v4:= lcmp(v0, v2);
  #L4a7e02.  if v4 <= 0 then goto L4a7e2c;
  #L4a7e06.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.a.source` @type ^`io.reactivex.rxjava3.core.Flowable` @kind object;
  #L4a7e0a.  v8:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$c`;
  #L4a7e0e.  v3:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow.b` @type ^`long` @kind wide;
  #L4a7e12.  v5:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow.c` @type ^`long` @kind wide;
  #L4a7e16.  v7:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow.d` @type ^`int`;
  #L4a7e1a.  v1:= v8 @kind object;
  #L4a7e1c.  v2:= v10 @kind object;
  #L4a7e1e.  call `<init>`(v1, v2, v3, v5, v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$c;.<init>:(Lorg/reactivestreams/Subscriber;JJI)V` @kind direct;
  #L4a7e24.  call `subscribe`(v0, v8) @signature `Lio/reactivex/rxjava3/core/Flowable;.subscribe:(Lio/reactivex/rxjava3/core/FlowableSubscriber;)V` @kind virtual;
  #L4a7e2a.  goto L4a7e50;
  #L4a7e2c.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.a.source` @type ^`io.reactivex.rxjava3.core.Flowable` @kind object;
  #L4a7e30.  v8:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow$b`;
  #L4a7e34.  v3:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow.b` @type ^`long` @kind wide;
  #L4a7e38.  v5:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow.c` @type ^`long` @kind wide;
  #L4a7e3c.  v7:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindow.d` @type ^`int`;
  #L4a7e40.  v1:= v8 @kind object;
  #L4a7e42.  v2:= v10 @kind object;
  #L4a7e44.  call `<init>`(v1, v2, v3, v5, v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindow$b;.<init>:(Lorg/reactivestreams/Subscriber;JJI)V` @kind direct;
  #L4a7e4a.  call `subscribe`(v0, v8) @signature `Lio/reactivex/rxjava3/core/Flowable;.subscribe:(Lio/reactivex/rxjava3/core/FlowableSubscriber;)V` @kind virtual;
  #L4a7e50.  return @kind void;
}
