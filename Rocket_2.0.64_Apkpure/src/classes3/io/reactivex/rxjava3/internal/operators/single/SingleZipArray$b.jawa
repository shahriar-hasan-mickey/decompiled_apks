record `io.reactivex.rxjava3.internal.operators.single.SingleZipArray$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.SingleObserver` `io.reactivex.rxjava3.internal.operators.single.SingleZipArray$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.single.SingleZipArray$b.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.single.SingleZipArray$c`[] `io.reactivex.rxjava3.internal.operators.single.SingleZipArray$b.c` @AccessFlag FINAL;
  `java.lang.Object`[] `io.reactivex.rxjava3.internal.operators.single.SingleZipArray$b.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.single.SingleZipArray$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.single.SingleZipArray$b` v1 @kind this, `io.reactivex.rxjava3.core.SingleObserver` v2 @kind object, `int` v3 , `io.reactivex.rxjava3.functions.Function` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleZipArray$b;.<init>:(Lio/reactivex/rxjava3/core/SingleObserver;ILio/reactivex/rxjava3/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4d87d0.  call `<init>`(v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L4d87d6.  v1.`io.reactivex.rxjava3.internal.operators.single.SingleZipArray$b.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` := v2 @kind object;
  #L4d87da.  v1.`io.reactivex.rxjava3.internal.operators.single.SingleZipArray$b.b` @type ^`io.reactivex.rxjava3.functions.Function` := v4 @kind object;
  #L4d87de.  v2:= new `io.reactivex.rxjava3.internal.operators.single.SingleZipArray$c`[v3];
  #L4d87e2.  v4:= 0I;
  #L4d87e4.  if v4 >= v3 then goto L4d87fc;
  #L4d87e8.  v0:= new `io.reactivex.rxjava3.internal.operators.single.SingleZipArray$c`;
  #L4d87ec.  call `<init>`(v0, v1, v4) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleZipArray$c;.<init>:(Lio/reactivex/rxjava3/internal/operators/single/SingleZipArray$b;I)V` @kind direct;
  #L4d87f2.  v2[v4]:= v0 @kind object;
  #L4d87f6.  v4:= v4 + 1;
  #L4d87fa.  goto L4d87e4;
  #L4d87fc.  v1.`io.reactivex.rxjava3.internal.operators.single.SingleZipArray$b.c` @type ^`io.reactivex.rxjava3.internal.operators.single.SingleZipArray$c`[] := v2 @kind object;
  #L4d8800.  v2:= new `java.lang.Object`[v3];
  #L4d8804.  v1.`io.reactivex.rxjava3.internal.operators.single.SingleZipArray$b.d` @type ^`java.lang.Object`[] := v2 @kind object;
  #L4d8808.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.single.SingleZipArray$b` v4 @kind this, `int` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleZipArray$b;.a:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4d8858.  v0:= v4.`io.reactivex.rxjava3.internal.operators.single.SingleZipArray$b.c` @type ^`io.reactivex.rxjava3.internal.operators.single.SingleZipArray$c`[] @kind object;
  #L4d885c.  v1:= length @variable v0;
  #L4d885e.  v2:= 0I;
  #L4d8860.  if v2 >= v5 then goto L4d8874;
  #L4d8864.  v3:= v0[v2] @kind object;
  #L4d8868.  call `a`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleZipArray$c;.a:()V` @kind virtual;
  #L4d886e.  v2:= v2 + 1;
  #L4d8872.  goto L4d8860;
  #L4d8874.  v5:= v5 + 1;
  #L4d8878.  if v5 >= v1 then goto L4d8888;
  #L4d887c.  v2:= v0[v5] @kind object;
  #L4d8880.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleZipArray$c;.a:()V` @kind virtual;
  #L4d8886.  goto L4d8874;
  #L4d8888.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.single.SingleZipArray$b` v1 @kind this, `java.lang.Throwable` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleZipArray$b;.b:(Ljava/lang/Throwable;I)V` @AccessFlag  {
    temp;
    v0;

  #L4d889c.  v0:= 0I;
  #L4d889e.  call temp:= `getAndSet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L4d88a4.  v0:= temp;
  #L4d88a6.  if v0 <= 0 then goto L4d88bc;
  #L4d88aa.  call `a`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleZipArray$b;.a:(I)V` @kind virtual;
  #L4d88b0.  v3:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleZipArray$b.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4d88b4.  call `onError`(v3, v2) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d88ba.  goto L4d88c2;
  #L4d88bc.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4d88c2.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.single.SingleZipArray$b` v1 @kind this, `java.lang.Object` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleZipArray$b;.c:(Ljava/lang/Object;I)V` @AccessFlag  {
    temp;
    v0;

  #L4d88d4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleZipArray$b.d` @type ^`java.lang.Object`[] @kind object;
  #L4d88d8.  v0[v3]:= v2 @kind object;
  #L4d88dc.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4d88e2.  v2:= temp;
  #L4d88e4.  if v2 != 0 then goto L4d8920;
  #L4d88e8.  v2:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleZipArray$b.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4d88ec.  v3:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleZipArray$b.d` @type ^`java.lang.Object`[] @kind object;
  #L4d88f0.  call temp:= `apply`(v2, v3) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4d88f6.  v2:= temp @kind object;
  #L4d88f8.  v3:= "The zipper returned a null value" @kind object;
  #L4d88fc.  call temp:= `requireNonNull`(v2, v3) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4d8902.  v3:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleZipArray$b.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4d8906.  call `onSuccess`(v3, v2) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4d890c.  goto L4d8920;
  #L4d890e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d8910.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d8916.  v3:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleZipArray$b.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4d891a.  call `onError`(v3, v2) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d8920.  return @kind void;
  catch `java.lang.Throwable` @[L4d88e8..L4d8902] goto L4d890e;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.single.SingleZipArray$b` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleZipArray$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4d881c.  v0:= 0I;
  #L4d881e.  call temp:= `getAndSet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L4d8824.  v1:= temp;
  #L4d8826.  if v1 <= 0 then goto L4d8844;
  #L4d882a.  v1:= v4.`io.reactivex.rxjava3.internal.operators.single.SingleZipArray$b.c` @type ^`io.reactivex.rxjava3.internal.operators.single.SingleZipArray$c`[] @kind object;
  #L4d882e.  v2:= length @variable v1;
  #L4d8830.  if v0 >= v2 then goto L4d8844;
  #L4d8834.  v3:= v1[v0] @kind object;
  #L4d8838.  call `a`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleZipArray$c;.a:()V` @kind virtual;
  #L4d883e.  v0:= v0 + 1;
  #L4d8842.  goto L4d8830;
  #L4d8844.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.single.SingleZipArray$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleZipArray$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d87ac.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4d87b2.  v0:= temp;
  #L4d87b4.  if v0 > 0 then goto L4d87bc;
  #L4d87b8.  v0:= 1I;
  #L4d87ba.  goto L4d87be;
  #L4d87bc.  v0:= 0I;
  #L4d87be.  return v0;
}
