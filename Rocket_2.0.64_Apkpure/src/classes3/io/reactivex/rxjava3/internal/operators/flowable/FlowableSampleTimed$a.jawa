record `io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$c` @kind class {
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$a.h` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.rxjava3.core.Scheduler` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSampleTimed$a;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49f8e4.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSampleTimed$c;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)V` @kind direct;
  #L49f8ea.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L49f8ee.  v2:= 1I;
  #L49f8f0.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L49f8f6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$a.h` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L49f8fa.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSampleTimed$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L49f90c.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSampleTimed$c;.c:()V` @kind virtual;
  #L49f912.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$a.h` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L49f916.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L49f91c.  v0:= temp;
  #L49f91e.  if v0 != 0 then goto L49f92c;
  #L49f922.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49f926.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L49f92c.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSampleTimed$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49f940.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$a.h` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L49f944.  call temp:= `incrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.incrementAndGet:()I` @kind virtual;
  #L49f94a.  v0:= temp;
  #L49f94c.  v1:= 2I;
  #L49f94e.  if v0 != v1 then goto L49f972;
  #L49f952.  call `c`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableSampleTimed$c;.c:()V` @kind virtual;
  #L49f958.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$a.h` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L49f95c.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L49f962.  v0:= temp;
  #L49f964.  if v0 != 0 then goto L49f972;
  #L49f968.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49f96c.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L49f972.  return @kind void;
}
