record `io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$d` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.a` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler$Worker` `io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.disposables.SequentialDisposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.f` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.rxjava3.core.Scheduler$Worker` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTimeoutTimed$c;.<init>:(Lio/reactivex/rxjava3/core/Observer;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4cba0c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4cba12.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4cba16.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.b` @type ^`long` := v2 @kind wide;
  #L4cba1a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.c` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L4cba1e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` := v5 @kind object;
  #L4cba22.  v1:= new `io.reactivex.rxjava3.internal.disposables.SequentialDisposable`;
  #L4cba26.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L4cba2c.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.e` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L4cba30.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4cba34.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4cba3a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4cba3e.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTimeoutTimed$c;.b:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4cbb9c.  v0:= 9223372036854775807L;
  #L4cbba6.  call temp:= `compareAndSet`(v3, v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4cbbac.  v4:= temp;
  #L4cbbae.  if v4 == 0 then goto L4cbbea;
  #L4cbbb2.  v4:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cbbb6.  call temp:= `dispose`(v4) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4cbbbc.  v4:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4cbbc0.  v5:= new `java.util.concurrent.TimeoutException`;
  #L4cbbc4.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.b` @type ^`long` @kind wide;
  #L4cbbc8.  v2:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4cbbcc.  call temp:= `timeoutMessage`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.timeoutMessage:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/String;` @kind static;
  #L4cbbd2.  v0:= temp @kind object;
  #L4cbbd4.  call `<init>`(v5, v0) @signature `Ljava/util/concurrent/TimeoutException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4cbbda.  call `onError`(v4, v5) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4cbbe0.  v4:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4cbbe4.  call `dispose`(v4) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4cbbea.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c` v4 @kind this, `long` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTimeoutTimed$c;.c:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4cbbfc.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.e` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4cbc00.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4cbc04.  v2:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$e`;
  #L4cbc08.  call `<init>`(v2, v5, v4) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTimeoutTimed$e;.<init>:(JLio/reactivex/rxjava3/internal/operators/observable/ObservableTimeoutTimed$d;)V` @kind direct;
  #L4cbc0e.  v5:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.b` @type ^`long` @kind wide;
  #L4cbc12.  v3:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4cbc16.  call temp:= `schedule`(v1, v2, v5, v3) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4cbc1c.  v5:= temp @kind object;
  #L4cbc1e.  call temp:= `replace`(v0, v5) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4cbc24.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTimeoutTimed$c;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cba50.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cba54.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4cba5a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4cba5e.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4cba64.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTimeoutTimed$c;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cb9e0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cb9e4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cb9ea.  v0:= temp @kind object;
  #L4cb9ec.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4cb9f0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4cb9f6.  v0:= temp;
  #L4cb9f8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTimeoutTimed$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4cba78.  v0:= 9223372036854775807L;
  #L4cba82.  call temp:= `getAndSet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L4cba88.  v2:= temp @kind wide;
  #L4cba8a.  v4:= lcmp(v2, v0);
  #L4cba8e.  if v4 == 0 then goto L4cbab0;
  #L4cba92.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.e` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4cba96.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4cba9c.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4cbaa0.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4cbaa6.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4cbaaa.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4cbab0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTimeoutTimed$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4cbac4.  v0:= 9223372036854775807L;
  #L4cbace.  call temp:= `getAndSet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L4cbad4.  v2:= temp @kind wide;
  #L4cbad6.  v4:= lcmp(v2, v0);
  #L4cbada.  if v4 == 0 then goto L4cbafe;
  #L4cbade.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.e` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4cbae2.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4cbae8.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4cbaec.  call `onError`(v0, v6) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4cbaf2.  v6:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4cbaf6.  call `dispose`(v6) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4cbafc.  goto L4cbb04;
  #L4cbafe.  call `onError`(v6) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4cbb04.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTimeoutTimed$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4cbb18.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4cbb1e.  v0:= temp @kind wide;
  #L4cbb20.  v2:= 9223372036854775807L;
  #L4cbb2a.  v4:= lcmp(v0, v2);
  #L4cbb2e.  if v4 == 0 then goto L4cbb6c;
  #L4cbb32.  v2:= 1L;
  #L4cbb36.  v2:= v2 + v0 @kind long;
  #L4cbb38.  call temp:= `compareAndSet`(v5, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4cbb3e.  v0:= temp;
  #L4cbb40.  if v0 != 0 then goto L4cbb46;
  #L4cbb44.  goto L4cbb6c;
  #L4cbb46.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.e` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4cbb4a.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4cbb50.  v0:= temp @kind object;
  #L4cbb52.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4cbb56.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4cbb5c.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4cbb60.  call `onNext`(v0, v6) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4cbb66.  call `c`(v5, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTimeoutTimed$c;.c:(J)V` @kind virtual;
  #L4cbb6c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableTimeoutTimed$c;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4cbb80.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$c.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4cbb84.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4cbb8a.  return @kind void;
}
