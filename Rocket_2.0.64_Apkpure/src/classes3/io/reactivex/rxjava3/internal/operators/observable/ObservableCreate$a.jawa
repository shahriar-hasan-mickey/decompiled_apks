record `io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.ObservableEmitter` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$a.a` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4bb220.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4bb226.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4bb22a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4bb23c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4bb242.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bb13c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4bb142.  v0:= temp @kind object;
  #L4bb144.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4bb148.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4bb14e.  v0:= temp;
  #L4bb150.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bb254.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$a;.isDisposed:()Z` @kind virtual;
  #L4bb25a.  v0:= temp;
  #L4bb25c.  if v0 != 0 then goto L4bb27c;
  #L4bb260.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4bb264.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4bb26a.  call `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$a;.dispose:()V` @kind virtual;
  #L4bb270.  goto L4bb27c;
  #L4bb272.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bb274.  call `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$a;.dispose:()V` @kind virtual;
  #L4bb27a.  throw v0;
  #L4bb27c.  return @kind void;
  catch `java.lang.Throwable` @[L4bb260..L4bb26a] goto L4bb272;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bb29c.  call temp:= `tryOnError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$a;.tryOnError:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4bb2a2.  v0:= temp;
  #L4bb2a4.  if v0 != 0 then goto L4bb2ae;
  #L4bb2a8.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4bb2ae.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bb2c0.  if v2 != 0 then goto L4bb2d8;
  #L4bb2c4.  v2:= "onNext called with a null value." @kind object;
  #L4bb2c8.  call temp:= `createNullPointerException`(v2) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.createNullPointerException:(Ljava/lang/String;)Ljava/lang/NullPointerException;` @kind static;
  #L4bb2ce.  v2:= temp @kind object;
  #L4bb2d0.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4bb2d6.  return @kind void;
  #L4bb2d8.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$a;.isDisposed:()Z` @kind virtual;
  #L4bb2de.  v0:= temp;
  #L4bb2e0.  if v0 != 0 then goto L4bb2ee;
  #L4bb2e4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4bb2e8.  call `onNext`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4bb2ee.  return @kind void;
}
procedure `io.reactivex.rxjava3.core.ObservableEmitter` `serialize`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$a;.serialize:()Lio/reactivex/rxjava3/core/ObservableEmitter;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bb1c0.  v0:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$b`;
  #L4bb1c4.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$b;.<init>:(Lio/reactivex/rxjava3/core/ObservableEmitter;)V` @kind direct;
  #L4bb1ca.  return v0 @kind object;
}
procedure `void` `setCancellable`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$a` v1 @kind this, `io.reactivex.rxjava3.functions.Cancellable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$a;.setCancellable:(Lio/reactivex/rxjava3/functions/Cancellable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bb300.  v0:= new `io.reactivex.rxjava3.internal.disposables.CancellableDisposable`;
  #L4bb304.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/CancellableDisposable;.<init>:(Lio/reactivex/rxjava3/functions/Cancellable;)V` @kind direct;
  #L4bb30a.  call `setDisposable`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$a;.setDisposable:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind virtual;
  #L4bb310.  return @kind void;
}
procedure `void` `setDisposable`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$a` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$a;.setDisposable:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4bb324.  call temp:= `set`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.set:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4bb32a.  return @kind void;
}
procedure `java.lang.String` `toString`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$a;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4bb1dc.  v0:= 2I;
  #L4bb1de.  v0:= new `java.lang.Object`[v0];
  #L4bb1e2.  v1:= constclass @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$a` @kind object;
  #L4bb1e6.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L4bb1ec.  v1:= temp @kind object;
  #L4bb1ee.  v2:= 0I;
  #L4bb1f0.  v0[v2]:= v1 @kind object;
  #L4bb1f4.  call temp:= `toString`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.toString:()Ljava/lang/String;` @kind super;
  #L4bb1fa.  v1:= temp @kind object;
  #L4bb1fc.  v2:= 1I;
  #L4bb1fe.  v0[v2]:= v1 @kind object;
  #L4bb202.  v1:= "%s{%s}" @kind object;
  #L4bb206.  call temp:= `format`(v1, v0) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L4bb20c.  v0:= temp @kind object;
  #L4bb20e.  return v0 @kind object;
}
procedure `boolean` `tryOnError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$a;.tryOnError:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bb164.  if v2 != 0 then goto L4bb174;
  #L4bb168.  v2:= "onError called with a null Throwable." @kind object;
  #L4bb16c.  call temp:= `createNullPointerException`(v2) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.createNullPointerException:(Ljava/lang/String;)Ljava/lang/NullPointerException;` @kind static;
  #L4bb172.  v2:= temp @kind object;
  #L4bb174.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$a;.isDisposed:()Z` @kind virtual;
  #L4bb17a.  v0:= temp;
  #L4bb17c.  if v0 != 0 then goto L4bb19e;
  #L4bb180.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4bb184.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4bb18a.  call `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$a;.dispose:()V` @kind virtual;
  #L4bb190.  v2:= 1I;
  #L4bb192.  return v2;
  #L4bb194.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bb196.  call `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCreate$a;.dispose:()V` @kind virtual;
  #L4bb19c.  throw v2;
  #L4bb19e.  v2:= 0I;
  #L4bb1a0.  return v2;
  catch `java.lang.Throwable` @[L4bb180..L4bb18a] goto L4bb194;
}
