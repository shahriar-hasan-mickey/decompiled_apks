record `io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.MaybeObserver` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.MaybeObserver` `io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a$a` `io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a` v0 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTakeUntilPublisher$a;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4af944.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4af94a.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` := v1 @kind object;
  #L4af94e.  v1:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a$a`;
  #L4af952.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTakeUntilPublisher$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTakeUntilPublisher$a;)V` @kind direct;
  #L4af958.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a.b` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a$a` := v1 @kind object;
  #L4af95c.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTakeUntilPublisher$a;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L4afa5c.  call temp:= `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4afa62.  v0:= temp;
  #L4afa64.  if v0 == 0 then goto L4afa72;
  #L4afa68.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4afa6c.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L4afa72.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTakeUntilPublisher$a;.b:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4afa84.  call temp:= `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4afa8a.  v0:= temp;
  #L4afa8c.  if v0 == 0 then goto L4afa9c;
  #L4afa90.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4afa94.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4afa9a.  goto L4afaa2;
  #L4afa9c.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4afaa2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTakeUntilPublisher$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4af970.  call temp:= `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4af976.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a.b` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a$a` @kind object;
  #L4af97a.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4af980.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTakeUntilPublisher$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4af91c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4af922.  v0:= temp @kind object;
  #L4af924.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4af928.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4af92e.  v0:= temp;
  #L4af930.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTakeUntilPublisher$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4af994.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a.b` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a$a` @kind object;
  #L4af998.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4af99e.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4af9a2.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4af9a8.  v1:= temp @kind object;
  #L4af9aa.  if v1 == v0 then goto L4af9b8;
  #L4af9ae.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4af9b2.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L4af9b8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTakeUntilPublisher$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4af9cc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a.b` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a$a` @kind object;
  #L4af9d0.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4af9d6.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4af9da.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4af9e0.  v1:= temp @kind object;
  #L4af9e2.  if v1 == v0 then goto L4af9f2;
  #L4af9e6.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4af9ea.  call `onError`(v0, v3) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4af9f0.  goto L4af9f8;
  #L4af9f2.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4af9f8.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTakeUntilPublisher$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4afa0c.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4afa12.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTakeUntilPublisher$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4afa24.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a.b` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a$a` @kind object;
  #L4afa28.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4afa2e.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4afa32.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4afa38.  v1:= temp @kind object;
  #L4afa3a.  if v1 == v0 then goto L4afa48;
  #L4afa3e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4afa42.  call `onSuccess`(v0, v3) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4afa48.  return @kind void;
}
