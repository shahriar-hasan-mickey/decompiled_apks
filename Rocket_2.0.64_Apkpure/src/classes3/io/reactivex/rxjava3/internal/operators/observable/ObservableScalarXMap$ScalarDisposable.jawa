record `io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.internal.fuseable.QueueDisposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.a` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.<init>:(Lio/reactivex/rxjava3/core/Observer;Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4c78b8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4c78be.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4c78c2.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.b` @type ^`java.lang.Object` := v2 @kind object;
  #L4c78c6.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c78d8.  v0:= 3I;
  #L4c78da.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4c78e0.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c78f4.  v0:= 3I;
  #L4c78f6.  call `set`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L4c78fc.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c77d8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4c77de.  v0:= temp;
  #L4c77e0.  v1:= 3I;
  #L4c77e2.  if v0 != v1 then goto L4c77ea;
  #L4c77e6.  v0:= 1I;
  #L4c77e8.  goto L4c77ec;
  #L4c77ea.  v0:= 0I;
  #L4c77ec.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c7800.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4c7806.  v0:= temp;
  #L4c7808.  v1:= 1I;
  #L4c780a.  if v0 == v1 then goto L4c7810;
  #L4c780e.  goto L4c7812;
  #L4c7810.  v1:= 0I;
  #L4c7812.  return v1;
}
procedure `boolean` `offer`(`io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c7824.  v2:= new `java.lang.UnsupportedOperationException`;
  #L4c7828.  v0:= "Should not be called!" @kind object;
  #L4c782c.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c7832.  throw v2;
}
procedure `boolean` `offer`(`io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L4c7844.  v1:= new `java.lang.UnsupportedOperationException`;
  #L4c7848.  v2:= "Should not be called!" @kind object;
  #L4c784c.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c7852.  throw v1;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c7888.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4c788e.  v0:= temp;
  #L4c7890.  v1:= 1I;
  #L4c7892.  if v0 != v1 then goto L4c78a4;
  #L4c7896.  v0:= 3I;
  #L4c7898.  call `lazySet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4c789e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.b` @type ^`java.lang.Object` @kind object;
  #L4c78a2.  return v0 @kind object;
  #L4c78a4.  v0:= 0I;
  #L4c78a6.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c7864.  v0:= 1I;
  #L4c7866.  v2:= v2 ^& v0 @kind int;
  #L4c7868.  if v2 == 0 then goto L4c7874;
  #L4c786c.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4c7872.  return v0;
  #L4c7874.  v2:= 0I;
  #L4c7876.  return v2;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c7910.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4c7916.  v0:= temp;
  #L4c7918.  if v0 != 0 then goto L4c7958;
  #L4c791c.  v0:= 0I;
  #L4c791e.  v1:= 2I;
  #L4c7920.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4c7926.  v0:= temp;
  #L4c7928.  if v0 == 0 then goto L4c7958;
  #L4c792c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c7930.  v2:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.b` @type ^`java.lang.Object` @kind object;
  #L4c7934.  call `onNext`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c793a.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4c7940.  v0:= temp;
  #L4c7942.  if v0 != v1 then goto L4c7958;
  #L4c7946.  v0:= 3I;
  #L4c7948.  call `lazySet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4c794e.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c7952.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4c7958.  return @kind void;
}
