record `io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a.c` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDematerialize$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L48ee10.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L48ee16.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L48ee1a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L48ee1e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDematerialize$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48ee30.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48ee34.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L48ee3a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDematerialize$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48ee4c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a.c` @type ^`boolean` @kind boolean;
  #L48ee50.  if v0 == 0 then goto L48ee56;
  #L48ee54.  return @kind void;
  #L48ee56.  v0:= 1I;
  #L48ee58.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a.c` @type ^`boolean` := v0 @kind boolean;
  #L48ee5c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48ee60.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L48ee66.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDematerialize$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48ee78.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a.c` @type ^`boolean` @kind boolean;
  #L48ee7c.  if v0 == 0 then goto L48ee88;
  #L48ee80.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L48ee86.  return @kind void;
  #L48ee88.  v0:= 1I;
  #L48ee8a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a.c` @type ^`boolean` := v0 @kind boolean;
  #L48ee8e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48ee92.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L48ee98.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDematerialize$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48eeac.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a.c` @type ^`boolean` @kind boolean;
  #L48eeb0.  if v0 == 0 then goto L48eedc;
  #L48eeb4.  v0:= instanceof @variable v2 @type ^`io.reactivex.rxjava3.core.Notification` @kind boolean;
  #L48eeb8.  if v0 == 0 then goto L48eeda;
  #L48eebc.  v2:= (`io.reactivex.rxjava3.core.Notification`) v2 @kind object;
  #L48eec0.  call temp:= `isOnError`(v2) @signature `Lio/reactivex/rxjava3/core/Notification;.isOnError:()Z` @kind virtual;
  #L48eec6.  v0:= temp;
  #L48eec8.  if v0 == 0 then goto L48eeda;
  #L48eecc.  call temp:= `getError`(v2) @signature `Lio/reactivex/rxjava3/core/Notification;.getError:()Ljava/lang/Throwable;` @kind virtual;
  #L48eed2.  v2:= temp @kind object;
  #L48eed4.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L48eeda.  return @kind void;
  #L48eedc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L48eee0.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L48eee6.  v2:= temp @kind object;
  #L48eee8.  v0:= "The selector returned a null Notification" @kind object;
  #L48eeec.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48eef2.  v2:= (`io.reactivex.rxjava3.core.Notification`) v2 @kind object;
  #L48eef6.  call temp:= `isOnError`(v2) @signature `Lio/reactivex/rxjava3/core/Notification;.isOnError:()Z` @kind virtual;
  #L48eefc.  v0:= temp;
  #L48eefe.  if v0 == 0 then goto L48ef1c;
  #L48ef02.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48ef06.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L48ef0c.  call temp:= `getError`(v2) @signature `Lio/reactivex/rxjava3/core/Notification;.getError:()Ljava/lang/Throwable;` @kind virtual;
  #L48ef12.  v2:= temp @kind object;
  #L48ef14.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDematerialize$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L48ef1a.  goto L48ef4c;
  #L48ef1c.  call temp:= `isOnComplete`(v2) @signature `Lio/reactivex/rxjava3/core/Notification;.isOnComplete:()Z` @kind virtual;
  #L48ef22.  v0:= temp;
  #L48ef24.  if v0 == 0 then goto L48ef3a;
  #L48ef28.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48ef2c.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L48ef32.  call `onComplete`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDematerialize$a;.onComplete:()V` @kind virtual;
  #L48ef38.  goto L48ef4c;
  #L48ef3a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48ef3e.  call temp:= `getValue`(v2) @signature `Lio/reactivex/rxjava3/core/Notification;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L48ef44.  v2:= temp @kind object;
  #L48ef46.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L48ef4c.  return @kind void;
  #L48ef4e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48ef50.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L48ef56.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48ef5a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L48ef60.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDematerialize$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L48ef66.  return @kind void;
  catch `java.lang.Throwable` @[L48eedc..L48eef6] goto L48ef4e;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDematerialize$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48ef84.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48ef88.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L48ef8e.  v0:= temp;
  #L48ef90.  if v0 == 0 then goto L48efa2;
  #L48ef94.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a.d` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L48ef98.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48ef9c.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L48efa2.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDematerialize$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48efb4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48efb8.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L48efbe.  return @kind void;
}
