record `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a$a` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.e` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.f` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.g` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.h` @AccessFlag VOLATILE;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.i` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.j` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.k` @AccessFlag VOLATILE;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.l` @AccessFlag VOLATILE;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.m` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.n` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithSingle$a;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L498f6c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L498f72.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L498f76.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L498f7a.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L498f80.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L498f84.  v2:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a$a`;
  #L498f88.  call `<init>`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithSingle$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithSingle$a;)V` @kind direct;
  #L498f8e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a$a` := v2 @kind object;
  #L498f92.  v2:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L498f96.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L498f9c.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v2 @kind object;
  #L498fa0.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L498fa4.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L498faa.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L498fae.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Flowable;.bufferSize:()I` @kind static;
  #L498fb4.  v2:= temp;
  #L498fb6.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.f` @type ^`int` := v2;
  #L498fba.  v0:= v2 ^> 2;
  #L498fbe.  v2:= v2 - v0 @kind int;
  #L498fc0.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.g` @type ^`int` := v2;
  #L498fc4.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithSingle$a;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L499024.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L49902a.  v0:= temp;
  #L49902c.  if v0 != 0 then goto L499036;
  #L499030.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithSingle$a;.b:()V` @kind virtual;
  #L499036.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a` v18 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithSingle$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L499048.  v0:= v18 @kind object;
  #L49904c.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L499050.  v2:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.m` @type ^`long` @kind wide;
  #L499054.  v4:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.n` @type ^`int`;
  #L499058.  v5:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.g` @type ^`int`;
  #L49905c.  v6:= 1I;
  #L49905e.  v7:= 1I;
  #L499060.  v8:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L499064.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L49906a.  v8:= temp @kind wide;
  #L49906c.  v11:= 2I;
  #L49906e.  v12:= 0I;
  #L499070.  v13:= lcmp(v2, v8);
  #L499074.  if v13 == 0 then goto L499146;
  #L499078.  v14:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.j` @type ^`boolean` @kind boolean;
  #L49907c.  if v14 == 0 then goto L49908a;
  #L499080.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.i` @type ^`java.lang.Object` := v12 @kind object;
  #L499084.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L499088.  return @kind void;
  #L49908a.  v14:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L49908e.  call temp:= `get`(v14) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L499094.  v14:= temp @kind object;
  #L499096.  if v14 == 0 then goto L4990b2;
  #L49909a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.i` @type ^`java.lang.Object` := v12 @kind object;
  #L49909e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L4990a2.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4990a6.  v2:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4990aa.  call `tryTerminateConsumer`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4990b0.  return @kind void;
  #L4990b2.  v14:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.l` @type ^`int`;
  #L4990b6.  v15:= 1L;
  #L4990ba.  if v14 != v6 then goto L4990d4;
  #L4990be.  v10:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.i` @type ^`java.lang.Object` @kind object;
  #L4990c2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.i` @type ^`java.lang.Object` := v12 @kind object;
  #L4990c6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.l` @type ^`int` := v11;
  #L4990ca.  call `onNext`(v1, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4990d0.  v2:= v2 + v15 @kind long;
  #L4990d2.  goto L49906c;
  #L4990d4.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.k` @type ^`boolean` @kind boolean;
  #L4990d8.  v10:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4990dc.  if v10 == 0 then goto L4990ea;
  #L4990e0.  call temp:= `poll`(v10) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4990e6.  v10:= temp @kind object;
  #L4990e8.  goto L4990ec;
  #L4990ea.  v10:= v12 @kind object;
  #L4990ec.  if v10 != 0 then goto L4990f6;
  #L4990f0.  v17:= 1I;
  #L4990f4.  goto L4990fa;
  #L4990f6.  v17:= 0I;
  #L4990fa.  if v6 == 0 then goto L499112;
  #L4990fe.  if v17 == 0 then goto L499112;
  #L499102.  if v14 != v11 then goto L499112;
  #L499106.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L49910a.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L499110.  return @kind void;
  #L499112.  if v17 == 0 then goto L499118;
  #L499116.  goto L499146;
  #L499118.  call `onNext`(v1, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L49911e.  v2:= v2 + v15 @kind long;
  #L499120.  v4:= v4 + 1;
  #L499124.  if v4 != v5 then goto L499142;
  #L499128.  v4:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49912c.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L499132.  v4:= temp @kind object;
  #L499134.  v4:= (`org.reactivestreams.Subscription`) v4 @kind object;
  #L499138.  v10:= (`long`) v5 @kind i2l;
  #L49913a.  call `request`(v4, v10) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L499140.  v4:= 0I;
  #L499142.  v6:= 1I;
  #L499144.  goto L49906c;
  #L499146.  if v13 != 0 then goto L4991c0;
  #L49914a.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.j` @type ^`boolean` @kind boolean;
  #L49914e.  if v6 == 0 then goto L49915c;
  #L499152.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.i` @type ^`java.lang.Object` := v12 @kind object;
  #L499156.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L49915a.  return @kind void;
  #L49915c.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L499160.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L499166.  v6:= temp @kind object;
  #L499168.  if v6 == 0 then goto L499184;
  #L49916c.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.i` @type ^`java.lang.Object` := v12 @kind object;
  #L499170.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L499174.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L499178.  v2:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49917c.  call `tryTerminateConsumer`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L499182.  return @kind void;
  #L499184.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.k` @type ^`boolean` @kind boolean;
  #L499188.  v8:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L49918c.  if v8 == 0 then goto L4991a2;
  #L499190.  call temp:= `isEmpty`(v8) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L499196.  v8:= temp;
  #L499198.  if v8 == 0 then goto L49919e;
  #L49919c.  goto L4991a2;
  #L49919e.  v10:= 0I;
  #L4991a0.  goto L4991a4;
  #L4991a2.  v10:= 1I;
  #L4991a4.  if v6 == 0 then goto L4991c0;
  #L4991a8.  if v10 == 0 then goto L4991c0;
  #L4991ac.  v6:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.l` @type ^`int`;
  #L4991b0.  if v6 != v11 then goto L4991c0;
  #L4991b4.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L4991b8.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4991be.  return @kind void;
  #L4991c0.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.m` @type ^`long` := v2 @kind wide;
  #L4991c4.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.n` @type ^`int` := v4;
  #L4991c8.  v6:= -v7 @kind int;
  #L4991ca.  call temp:= `addAndGet`(v0, v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4991d0.  v7:= temp;
  #L4991d2.  if v7 != 0 then goto L4991d8;
  #L4991d6.  return @kind void;
  #L4991d8.  v6:= 1I;
  #L4991da.  goto L499060;
}
procedure `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithSingle$a;.c:()Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L498f3c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L498f40.  if v0 != 0 then goto L498f5a;
  #L498f44.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L498f48.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Flowable;.bufferSize:()I` @kind static;
  #L498f4e.  v1:= temp;
  #L498f50.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L498f56.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v0 @kind object;
  #L498f5a.  return v0 @kind object;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithSingle$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L498fd8.  v0:= 1I;
  #L498fda.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.j` @type ^`boolean` := v0 @kind boolean;
  #L498fde.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L498fe2.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L498fe8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a$a` @kind object;
  #L498fec.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L498ff2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L498ff6.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L498ffc.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L499002.  v0:= temp;
  #L499004.  if v0 != 0 then goto L499012;
  #L499008.  v0:= 0I;
  #L49900a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v0 @kind object;
  #L49900e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.i` @type ^`java.lang.Object` := v0 @kind object;
  #L499012.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithSingle$a;.d:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L499344.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L499348.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L49934e.  v2:= temp;
  #L499350.  if v2 == 0 then goto L499364;
  #L499354.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L499358.  call temp:= `cancel`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L49935e.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithSingle$a;.a:()V` @kind virtual;
  #L499364.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithSingle$a;.e:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L499378.  v0:= 0I;
  #L49937a.  v1:= 1I;
  #L49937c.  call temp:= `compareAndSet`(v6, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L499382.  v0:= temp;
  #L499384.  if v0 == 0 then goto L4993d2;
  #L499388.  v2:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.m` @type ^`long` @kind wide;
  #L49938c.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L499390.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L499396.  v4:= temp @kind wide;
  #L499398.  v0:= lcmp(v4, v2);
  #L49939c.  if v0 == 0 then goto L4993bc;
  #L4993a0.  v0:= 1L;
  #L4993a4.  v2:= v2 + v0 @kind long;
  #L4993a6.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.m` @type ^`long` := v2 @kind wide;
  #L4993aa.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4993ae.  call `onNext`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4993b4.  v7:= 2I;
  #L4993b6.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.l` @type ^`int` := v7;
  #L4993ba.  goto L4993e8;
  #L4993bc.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.i` @type ^`java.lang.Object` := v7 @kind object;
  #L4993c0.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.l` @type ^`int` := v1;
  #L4993c4.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4993ca.  v7:= temp;
  #L4993cc.  if v7 != 0 then goto L4993e8;
  #L4993d0.  return @kind void;
  #L4993d2.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.i` @type ^`java.lang.Object` := v7 @kind object;
  #L4993d6.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.l` @type ^`int` := v1;
  #L4993da.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4993e0.  v7:= temp;
  #L4993e2.  if v7 == 0 then goto L4993e8;
  #L4993e6.  return @kind void;
  #L4993e8.  call `b`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithSingle$a;.b:()V` @kind virtual;
  #L4993ee.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4991f0.  v0:= 1I;
  #L4991f2.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.k` @type ^`boolean` := v0 @kind boolean;
  #L4991f6.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithSingle$a;.a:()V` @kind virtual;
  #L4991fc.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L499210.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L499214.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L49921a.  v2:= temp;
  #L49921c.  if v2 == 0 then goto L499230;
  #L499220.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.c` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a$a` @kind object;
  #L499224.  call temp:= `dispose`(v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L49922a.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithSingle$a;.a:()V` @kind virtual;
  #L499230.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L499244.  v0:= 0I;
  #L499246.  v1:= 1I;
  #L499248.  call temp:= `compareAndSet`(v7, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L49924e.  v2:= temp;
  #L499250.  if v2 == 0 then goto L4992ec;
  #L499254.  v2:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.m` @type ^`long` @kind wide;
  #L499258.  v4:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L49925c.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L499262.  v4:= temp @kind wide;
  #L499264.  v6:= lcmp(v4, v2);
  #L499268.  if v6 == 0 then goto L4992d0;
  #L49926c.  v4:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L499270.  if v4 == 0 then goto L49928a;
  #L499274.  call temp:= `isEmpty`(v4) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L49927a.  v5:= temp;
  #L49927c.  if v5 == 0 then goto L499282;
  #L499280.  goto L49928a;
  #L499282.  call temp:= `offer`(v4, v8) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L499288.  goto L4992de;
  #L49928a.  v4:= 1L;
  #L49928e.  v2:= v2 + v4 @kind long;
  #L499290.  v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.m` @type ^`long` := v2 @kind wide;
  #L499294.  v2:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L499298.  call `onNext`(v2, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L49929e.  v8:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.n` @type ^`int`;
  #L4992a2.  v8:= v8 + v1 @kind int;
  #L4992a4.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.g` @type ^`int`;
  #L4992a8.  if v8 != v1 then goto L4992ca;
  #L4992ac.  v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.n` @type ^`int` := v0;
  #L4992b0.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4992b4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4992ba.  v0:= temp @kind object;
  #L4992bc.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L4992c0.  v1:= (`long`) v8 @kind i2l;
  #L4992c2.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4992c8.  goto L4992de;
  #L4992ca.  v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.n` @type ^`int` := v8;
  #L4992ce.  goto L4992de;
  #L4992d0.  call temp:= `c`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithSingle$a;.c:()Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;` @kind virtual;
  #L4992d6.  v0:= temp @kind object;
  #L4992d8.  call temp:= `offer`(v0, v8) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4992de.  call temp:= `decrementAndGet`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4992e4.  v8:= temp;
  #L4992e6.  if v8 != 0 then goto L499308;
  #L4992ea.  return @kind void;
  #L4992ec.  call temp:= `c`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithSingle$a;.c:()Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;` @kind virtual;
  #L4992f2.  v0:= temp @kind object;
  #L4992f4.  call temp:= `offer`(v0, v8) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4992fa.  call temp:= `getAndIncrement`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L499300.  v8:= temp;
  #L499302.  if v8 == 0 then goto L499308;
  #L499306.  return @kind void;
  #L499308.  call `b`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithSingle$a;.b:()V` @kind virtual;
  #L49930e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithSingle$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L499320.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L499324.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.f` @type ^`int`;
  #L499328.  v1:= (`long`) v1 @kind i2l;
  #L49932a.  call temp:= `setOnce`(v0, v4, v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L499330.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithSingle$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L499400.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L499404.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L49940a.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableMergeWithSingle$a;.a:()V` @kind virtual;
  #L499410.  return @kind void;
}
