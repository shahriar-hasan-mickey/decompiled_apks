record `io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay$a.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler$Worker` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay$a.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay$a.e` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay$a.f` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.rxjava3.core.Scheduler$Worker` v5 @kind object, `boolean` v6 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDelay$a;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler$Worker;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L48e9f4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L48e9fa.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L48e9fe.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay$a.b` @type ^`long` := v2 @kind wide;
  #L48ea02.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay$a.c` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L48ea06.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay$a.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` := v5 @kind object;
  #L48ea0a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay$a.e` @type ^`boolean` := v6 @kind boolean;
  #L48ea0e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDelay$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48ea20.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48ea24.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L48ea2a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay$a.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L48ea2e.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L48ea34.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay$a` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDelay$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L48ea48.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay$a.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L48ea4c.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay$a$a`;
  #L48ea50.  call `<init>`(v1, v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDelay$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDelay$a;)V` @kind direct;
  #L48ea56.  v2:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay$a.b` @type ^`long` @kind wide;
  #L48ea5a.  v4:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay$a.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L48ea5e.  call temp:= `schedule`(v0, v1, v2, v4) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L48ea64.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay$a` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDelay$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L48ea78.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay$a.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L48ea7c.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay$a$b`;
  #L48ea80.  call `<init>`(v1, v4, v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDelay$a$b;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDelay$a;Ljava/lang/Throwable;)V` @kind direct;
  #L48ea86.  v5:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay$a.e` @type ^`boolean` @kind boolean;
  #L48ea8a.  if v5 == 0 then goto L48ea94;
  #L48ea8e.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay$a.b` @type ^`long` @kind wide;
  #L48ea92.  goto L48ea98;
  #L48ea94.  v2:= 0L;
  #L48ea98.  v5:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay$a.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L48ea9c.  call temp:= `schedule`(v0, v1, v2, v5) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L48eaa2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay$a` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDelay$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L48eab4.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay$a.d` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L48eab8.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay$a$c`;
  #L48eabc.  call `<init>`(v1, v4, v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDelay$a$c;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDelay$a;Ljava/lang/Object;)V` @kind direct;
  #L48eac2.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay$a.b` @type ^`long` @kind wide;
  #L48eac6.  v5:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay$a.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L48eaca.  call temp:= `schedule`(v0, v1, v2, v5) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L48ead0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDelay$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48eae4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48eae8.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L48eaee.  v0:= temp;
  #L48eaf0.  if v0 == 0 then goto L48eb02;
  #L48eaf4.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay$a.f` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L48eaf8.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48eafc.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L48eb02.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDelay$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48eb14.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48eb18.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L48eb1e.  return @kind void;
}
