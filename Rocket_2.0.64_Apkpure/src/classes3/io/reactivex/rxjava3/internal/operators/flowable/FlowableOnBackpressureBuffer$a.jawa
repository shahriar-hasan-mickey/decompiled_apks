record `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Action` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.d` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.e` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.f` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.g` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.h` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.i` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.j` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `int` v3 , `boolean` v4 , `boolean` v5 , `io.reactivex.rxjava3.functions.Action` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.<init>:(Lorg/reactivestreams/Subscriber;IZZLio/reactivex/rxjava3/functions/Action;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L49a038.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L49a03e.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L49a042.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L49a048.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L49a04c.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L49a050.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.d` @type ^`io.reactivex.rxjava3.functions.Action` := v6 @kind object;
  #L49a054.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.c` @type ^`boolean` := v5 @kind boolean;
  #L49a058.  if v4 == 0 then goto L49a068;
  #L49a05c.  v2:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L49a060.  call `<init>`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L49a066.  goto L49a072;
  #L49a068.  v2:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L49a06c.  call `<init>`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L49a072.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.b` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v2 @kind object;
  #L49a076.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49a088.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.f` @type ^`boolean` @kind boolean;
  #L49a08c.  if v0 != 0 then goto L49a0be;
  #L49a090.  v0:= 1I;
  #L49a092.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.f` @type ^`boolean` := v0 @kind boolean;
  #L49a096.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L49a09a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L49a0a0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.j` @type ^`boolean` @kind boolean;
  #L49a0a4.  if v0 != 0 then goto L49a0be;
  #L49a0a8.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L49a0ae.  v0:= temp;
  #L49a0b0.  if v0 != 0 then goto L49a0be;
  #L49a0b4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.b` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L49a0b8.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L49a0be.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49a0d0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.b` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L49a0d4.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L49a0da.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v14 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L49a0ec.  call temp:= `getAndIncrement`(v14) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L49a0f2.  v0:= temp;
  #L49a0f4.  if v0 != 0 then goto L49a1c2;
  #L49a0f8.  v0:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.b` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L49a0fc.  v1:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49a100.  v2:= 1I;
  #L49a102.  v3:= 1I;
  #L49a104.  v4:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.g` @type ^`boolean` @kind boolean;
  #L49a108.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L49a10e.  v5:= temp;
  #L49a110.  call temp:= `e`(v14, v4, v5, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.e:(ZZLorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L49a116.  v4:= temp;
  #L49a118.  if v4 == 0 then goto L49a11e;
  #L49a11c.  return @kind void;
  #L49a11e.  v4:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L49a122.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L49a128.  v4:= temp @kind wide;
  #L49a12a.  v6:= 0L;
  #L49a12e.  v8:= v6 @kind wide;
  #L49a130.  v10:= lcmp(v8, v4);
  #L49a134.  if v10 == 0 then goto L49a170;
  #L49a138.  v11:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.g` @type ^`boolean` @kind boolean;
  #L49a13c.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L49a142.  v12:= temp @kind object;
  #L49a144.  if v12 != 0 then goto L49a14c;
  #L49a148.  v13:= 1I;
  #L49a14a.  goto L49a14e;
  #L49a14c.  v13:= 0I;
  #L49a14e.  call temp:= `e`(v14, v11, v13, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.e:(ZZLorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L49a154.  v11:= temp;
  #L49a156.  if v11 == 0 then goto L49a15c;
  #L49a15a.  return @kind void;
  #L49a15c.  if v13 == 0 then goto L49a162;
  #L49a160.  goto L49a170;
  #L49a162.  call `onNext`(v1, v12) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L49a168.  v10:= 1L;
  #L49a16c.  v8:= v8 + v10 @kind long;
  #L49a16e.  goto L49a130;
  #L49a170.  if v10 != 0 then goto L49a18e;
  #L49a174.  v10:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.g` @type ^`boolean` @kind boolean;
  #L49a178.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L49a17e.  v11:= temp;
  #L49a180.  call temp:= `e`(v14, v10, v11, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.e:(ZZLorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L49a186.  v10:= temp;
  #L49a188.  if v10 == 0 then goto L49a18e;
  #L49a18c.  return @kind void;
  #L49a18e.  v10:= lcmp(v8, v6);
  #L49a192.  if v10 == 0 then goto L49a1b4;
  #L49a196.  v6:= 9223372036854775807L;
  #L49a1a0.  v10:= lcmp(v4, v6);
  #L49a1a4.  if v10 == 0 then goto L49a1b4;
  #L49a1a8.  v4:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L49a1ac.  v5:= -v8 @kind long;
  #L49a1ae.  call temp:= `addAndGet`(v4, v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L49a1b4.  v3:= -v3 @kind int;
  #L49a1b6.  call temp:= `addAndGet`(v14, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L49a1bc.  v3:= temp;
  #L49a1be.  if v3 != 0 then goto L49a104;
  #L49a1c2.  return @kind void;
}
procedure `boolean` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v2 @kind this, `boolean` v3 , `boolean` v4 , `org.reactivestreams.Subscriber` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.e:(ZZLorg/reactivestreams/Subscriber;)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L499f5c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.f` @type ^`boolean` @kind boolean;
  #L499f60.  v1:= 1I;
  #L499f62.  if v0 == 0 then goto L499f72;
  #L499f66.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.b` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L499f6a.  call `clear`(v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L499f70.  return v1;
  #L499f72.  if v3 == 0 then goto L499fc0;
  #L499f76.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.c` @type ^`boolean` @kind boolean;
  #L499f7a.  if v3 == 0 then goto L499f9a;
  #L499f7e.  if v4 == 0 then goto L499fc0;
  #L499f82.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.h` @type ^`java.lang.Throwable` @kind object;
  #L499f86.  if v3 == 0 then goto L499f92;
  #L499f8a.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L499f90.  goto L499f98;
  #L499f92.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L499f98.  return v1;
  #L499f9a.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.h` @type ^`java.lang.Throwable` @kind object;
  #L499f9e.  if v3 == 0 then goto L499fb4;
  #L499fa2.  v4:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.b` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L499fa6.  call `clear`(v4) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L499fac.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L499fb2.  return v1;
  #L499fb4.  if v4 == 0 then goto L499fc0;
  #L499fb8.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L499fbe.  return v1;
  #L499fc0.  v3:= 0I;
  #L499fc2.  return v3;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L499fd4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.b` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L499fd8.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L499fde.  v0:= temp;
  #L499fe0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49a1d4.  v0:= 1I;
  #L49a1d6.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.g` @type ^`boolean` := v0 @kind boolean;
  #L49a1da.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.j` @type ^`boolean` @kind boolean;
  #L49a1de.  if v0 == 0 then goto L49a1ee;
  #L49a1e2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49a1e6.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L49a1ec.  goto L49a1f4;
  #L49a1ee.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.drain:()V` @kind virtual;
  #L49a1f4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49a208.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.h` @type ^`java.lang.Throwable` := v2 @kind object;
  #L49a20c.  v0:= 1I;
  #L49a20e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.g` @type ^`boolean` := v0 @kind boolean;
  #L49a212.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.j` @type ^`boolean` @kind boolean;
  #L49a216.  if v0 == 0 then goto L49a226;
  #L49a21a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49a21e.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L49a224.  goto L49a22c;
  #L49a226.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.drain:()V` @kind virtual;
  #L49a22c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49a240.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.b` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L49a244.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L49a24a.  v2:= temp;
  #L49a24c.  if v2 != 0 then goto L49a28a;
  #L49a250.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L49a254.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L49a25a.  v2:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L49a25e.  v0:= "Buffer is full" @kind object;
  #L49a262.  call `<init>`(v2, v0) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49a268.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.d` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L49a26c.  call `run`(v0) @signature `Lio/reactivex/rxjava3/functions/Action;.run:()V` @kind interface;
  #L49a272.  goto L49a282;
  #L49a274.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49a276.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L49a27c.  call temp:= `initCause`(v2, v0) @signature `Ljava/lang/RuntimeException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L49a282.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49a288.  return @kind void;
  #L49a28a.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.j` @type ^`boolean` @kind boolean;
  #L49a28e.  if v2 == 0 then goto L49a2a0;
  #L49a292.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49a296.  v0:= 0I;
  #L49a298.  call `onNext`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L49a29e.  goto L49a2a6;
  #L49a2a0.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.drain:()V` @kind virtual;
  #L49a2a6.  return @kind void;
  catch `java.lang.Throwable` @[L49a268..L49a272] goto L49a274;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49a2c4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L49a2c8.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L49a2ce.  v0:= temp;
  #L49a2d0.  if v0 == 0 then goto L49a2f2;
  #L49a2d4.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.e` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L49a2d8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49a2dc.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L49a2e2.  v0:= 9223372036854775807L;
  #L49a2ec.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L49a2f2.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49a018.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.b` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L49a01c.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L49a022.  v0:= temp @kind object;
  #L49a024.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49a304.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.j` @type ^`boolean` @kind boolean;
  #L49a308.  if v0 != 0 then goto L49a328;
  #L49a30c.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L49a312.  v0:= temp;
  #L49a314.  if v0 == 0 then goto L49a328;
  #L49a318.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L49a31c.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L49a322.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.drain:()V` @kind virtual;
  #L49a328.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L499ff4.  v0:= 2I;
  #L499ff6.  v2:= v2 ^& v0 @kind int;
  #L499ff8.  if v2 == 0 then goto L49a004;
  #L499ffc.  v2:= 1I;
  #L499ffe.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$a.j` @type ^`boolean` := v2 @kind boolean;
  #L49a002.  return v0;
  #L49a004.  v2:= 0I;
  #L49a006.  return v2;
}
