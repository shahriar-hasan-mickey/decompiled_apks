record `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a` @kind class, `java.lang.Runnable` @kind interface {
  `io.reactivex.rxjava3.core.Scheduler` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.n` @AccessFlag FINAL;
  `io.reactivex.rxjava3.processors.UnicastProcessor` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.o` @AccessFlag ;
  `io.reactivex.rxjava3.internal.disposables.SequentialDisposable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.p` @AccessFlag FINAL;
  `java.lang.Runnable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.q` @AccessFlag FINAL;
}
global `java.lang.Object` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.r` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4a74e8.  v0:= new `java.lang.Object`;
  #L4a74ec.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4a74f2.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.r` @type ^`java.lang.Object` := v0 @kind object;
  #L4a74f6.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c` v6 @kind this, `org.reactivestreams.Subscriber` v7 @kind object, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.rxjava3.core.Scheduler` v11 @kind object, `int` v12 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$c;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4a7508.  v0:= v6 @kind object;
  #L4a750a.  v1:= v7 @kind object;
  #L4a750c.  v2:= v8 @kind wide;
  #L4a750e.  v4:= v10 @kind object;
  #L4a7510.  v5:= v12;
  #L4a7512.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$a;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;I)V` @kind direct;
  #L4a7518.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.n` @type ^`io.reactivex.rxjava3.core.Scheduler` := v11 @kind object;
  #L4a751c.  v7:= new `io.reactivex.rxjava3.internal.disposables.SequentialDisposable`;
  #L4a7520.  call `<init>`(v7) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L4a7526.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.p` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` := v7 @kind object;
  #L4a752a.  v7:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c$a`;
  #L4a752e.  call `<init>`(v7, v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$c$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$c;)V` @kind direct;
  #L4a7534.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.q` @type ^`java.lang.Runnable` := v7 @kind object;
  #L4a7538.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$c;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L4a754c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.p` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4a7550.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4a7556.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c` v9 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$c;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4a7568.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.k` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4a756c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4a7572.  v0:= temp;
  #L4a7574.  if v0 != 0 then goto L4a7652;
  #L4a7578.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a757c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4a7582.  v0:= temp @kind wide;
  #L4a7584.  v2:= 0L;
  #L4a7588.  v4:= lcmp(v0, v2);
  #L4a758c.  if v4 == 0 then goto L4a761c;
  #L4a7590.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.m` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4a7594.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4a759a.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.e` @type ^`int`;
  #L4a759e.  v1:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.q` @type ^`java.lang.Runnable` @kind object;
  #L4a75a2.  call temp:= `create`(v0, v1) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.create:(ILjava/lang/Runnable;)Lio/reactivex/rxjava3/processors/UnicastProcessor;` @kind static;
  #L4a75a8.  v0:= temp @kind object;
  #L4a75aa.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.o` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` := v0 @kind object;
  #L4a75ae.  v0:= 1L;
  #L4a75b2.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.g` @type ^`long` := v0 @kind wide;
  #L4a75b6.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.b`;
  #L4a75ba.  v1:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.o` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` @kind object;
  #L4a75be.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/b;.<init>:(Lio/reactivex/rxjava3/processors/FlowableProcessor;)V` @kind direct;
  #L4a75c4.  v1:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a75c8.  call `onNext`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4a75ce.  v1:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.p` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4a75d2.  v2:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.n` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4a75d6.  v6:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.c` @type ^`long` @kind wide;
  #L4a75da.  v8:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4a75de.  v3:= v9 @kind object;
  #L4a75e0.  v4:= v6 @kind wide;
  #L4a75e2.  call temp:= `schedulePeriodicallyDirect`(v2, v3, v4, v6, v8) @signature `Lio/reactivex/rxjava3/core/Scheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4a75e8.  v2:= temp @kind object;
  #L4a75ea.  call temp:= `replace`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4a75f0.  call temp:= `e`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/b;.e:()Z` @kind virtual;
  #L4a75f6.  v0:= temp;
  #L4a75f8.  if v0 == 0 then goto L4a7606;
  #L4a75fc.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.o` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` @kind object;
  #L4a7600.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4a7606.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a760a.  v1:= 9223372036854775807L;
  #L4a7614.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4a761a.  goto L4a7652;
  #L4a761c.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a7620.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a7626.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a762a.  v1:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4a762e.  v2:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.g` @type ^`long` @kind wide;
  #L4a7632.  call temp:= `e`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed;.e:(J)Ljava/lang/String;` @kind static;
  #L4a7638.  v2:= temp @kind object;
  #L4a763a.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a7640.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a7646.  call `a`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$c;.a:()V` @kind virtual;
  #L4a764c.  v0:= 1I;
  #L4a764e.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.l` @type ^`boolean` := v0 @kind boolean;
  #L4a7652.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c` v10 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$c;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4a7664.  call temp:= `getAndIncrement`(v10) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4a766a.  v0:= temp;
  #L4a766c.  if v0 == 0 then goto L4a7672;
  #L4a7670.  return @kind void;
  #L4a7672.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.b` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4a7676.  v1:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a767a.  v2:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.o` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` @kind object;
  #L4a767e.  v3:= 1I;
  #L4a7680.  v4:= 1I;
  #L4a7682.  v5:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.l` @type ^`boolean` @kind boolean;
  #L4a7686.  v6:= 0I;
  #L4a7688.  if v5 == 0 then goto L4a769c;
  #L4a768c.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4a7692.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.o` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` := v6 @kind object;
  #L4a7696.  v2:= v6 @kind object;
  #L4a7698.  goto L4a77ce;
  #L4a769c.  v5:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.h` @type ^`boolean` @kind boolean;
  #L4a76a0.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4a76a6.  v7:= temp @kind object;
  #L4a76a8.  if v7 != 0 then goto L4a76b0;
  #L4a76ac.  v8:= 1I;
  #L4a76ae.  goto L4a76b2;
  #L4a76b0.  v8:= 0I;
  #L4a76b2.  if v5 == 0 then goto L4a76f0;
  #L4a76b6.  if v8 == 0 then goto L4a76f0;
  #L4a76ba.  v5:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.i` @type ^`java.lang.Throwable` @kind object;
  #L4a76be.  if v5 == 0 then goto L4a76d4;
  #L4a76c2.  if v2 == 0 then goto L4a76cc;
  #L4a76c6.  call `onError`(v2, v5) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a76cc.  call `onError`(v1, v5) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a76d2.  goto L4a76e4;
  #L4a76d4.  if v2 == 0 then goto L4a76de;
  #L4a76d8.  call `onComplete`(v2) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4a76de.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4a76e4.  call `a`(v10) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$c;.a:()V` @kind virtual;
  #L4a76ea.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.l` @type ^`boolean` := v3 @kind boolean;
  #L4a76ee.  goto L4a7682;
  #L4a76f0.  if v8 != 0 then goto L4a77ce;
  #L4a76f4.  v5:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.r` @type ^`java.lang.Object` @kind object;
  #L4a76f8.  if v7 != v5 then goto L4a77c0;
  #L4a76fc.  if v2 == 0 then goto L4a770c;
  #L4a7700.  call `onComplete`(v2) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4a7706.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.o` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` := v6 @kind object;
  #L4a770a.  v2:= v6 @kind object;
  #L4a770c.  v5:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.k` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4a7710.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4a7716.  v5:= temp;
  #L4a7718.  if v5 == 0 then goto L4a7728;
  #L4a771c.  v5:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.p` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4a7720.  call `dispose`(v5) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4a7726.  goto L4a7682;
  #L4a7728.  v5:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a772c.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4a7732.  v5:= temp @kind wide;
  #L4a7734.  v7:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.g` @type ^`long` @kind wide;
  #L4a7738.  v9:= lcmp(v5, v7);
  #L4a773c.  if v9 != 0 then goto L4a7772;
  #L4a7740.  v5:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a7744.  call `cancel`(v5) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a774a.  call `a`(v10) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$c;.a:()V` @kind virtual;
  #L4a7750.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.l` @type ^`boolean` := v3 @kind boolean;
  #L4a7754.  v5:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4a7758.  v6:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.g` @type ^`long` @kind wide;
  #L4a775c.  call temp:= `e`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed;.e:(J)Ljava/lang/String;` @kind static;
  #L4a7762.  v6:= temp @kind object;
  #L4a7764.  call `<init>`(v5, v6) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a776a.  call `onError`(v1, v5) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a7770.  goto L4a7682;
  #L4a7772.  v5:= 1L;
  #L4a7776.  v7:= v7 + v5 @kind long;
  #L4a7778.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.g` @type ^`long` := v7 @kind wide;
  #L4a777c.  v2:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.m` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4a7780.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4a7786.  v2:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.e` @type ^`int`;
  #L4a778a.  v5:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.q` @type ^`java.lang.Runnable` @kind object;
  #L4a778e.  call temp:= `create`(v2, v5) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.create:(ILjava/lang/Runnable;)Lio/reactivex/rxjava3/processors/UnicastProcessor;` @kind static;
  #L4a7794.  v2:= temp @kind object;
  #L4a7796.  v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.o` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` := v2 @kind object;
  #L4a779a.  v5:= new `io.reactivex.rxjava3.internal.operators.flowable.b`;
  #L4a779e.  call `<init>`(v5, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/b;.<init>:(Lio/reactivex/rxjava3/processors/FlowableProcessor;)V` @kind direct;
  #L4a77a4.  call `onNext`(v1, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4a77aa.  call temp:= `e`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/b;.e:()Z` @kind virtual;
  #L4a77b0.  v5:= temp;
  #L4a77b2.  if v5 == 0 then goto L4a7682;
  #L4a77b6.  call `onComplete`(v2) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4a77bc.  goto L4a7682;
  #L4a77c0.  if v2 == 0 then goto L4a7682;
  #L4a77c4.  call `onNext`(v2, v7) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4a77ca.  goto L4a7682;
  #L4a77ce.  v4:= -v4 @kind int;
  #L4a77d0.  call temp:= `addAndGet`(v10, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4a77d6.  v4:= temp;
  #L4a77d8.  if v4 != 0 then goto L4a7682;
  #L4a77dc.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$c;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a77f0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$a.b` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4a77f4.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$c.r` @type ^`java.lang.Object` @kind object;
  #L4a77f8.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4a77fe.  call `c`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed$c;.c:()V` @kind virtual;
  #L4a7804.  return @kind void;
}
