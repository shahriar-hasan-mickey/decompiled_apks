record `io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.subjects.Subject` `io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a$a` `io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.ObservableSource` `io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.g` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.h` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.subjects.Subject` v2 @kind object, `io.reactivex.rxjava3.core.ObservableSource` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRetryWhen$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/subjects/Subject;Lio/reactivex/rxjava3/core/ObservableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c6e98.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4c6e9e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4c6ea2.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.d` @type ^`io.reactivex.rxjava3.subjects.Subject` := v2 @kind object;
  #L4c6ea6.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.g` @type ^`io.reactivex.rxjava3.core.ObservableSource` := v3 @kind object;
  #L4c6eaa.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4c6eae.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4c6eb4.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.b` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L4c6eb8.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4c6ebc.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4c6ec2.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4c6ec6.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a$a`;
  #L4c6eca.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRetryWhen$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableRetryWhen$a;)V` @kind direct;
  #L4c6ed0.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.e` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a$a` := v1 @kind object;
  #L4c6ed4.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4c6ed8.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4c6ede.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4c6ee2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRetryWhen$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4c6f1c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c6f20.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4c6f26.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c6f2a.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c6f2e.  call `onComplete`(v0, v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onComplete:(Lio/reactivex/rxjava3/core/Observer;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @kind static;
  #L4c6f34.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRetryWhen$a;.b:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4c6f48.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c6f4c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4c6f52.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c6f56.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c6f5a.  call `onError`(v0, v3, v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onError:(Lio/reactivex/rxjava3/core/Observer;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @kind static;
  #L4c6f60.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRetryWhen$a;.c:()V` @AccessFlag  {
    temp;

  #L4c6f74.  call `d`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRetryWhen$a;.d:()V` @kind virtual;
  #L4c6f7a.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRetryWhen$a;.d:()V` @AccessFlag  {
    temp;
    v0;

  #L4c7024.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c7028.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c702e.  v0:= temp;
  #L4c7030.  if v0 != 0 then goto L4c706a;
  #L4c7034.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRetryWhen$a;.isDisposed:()Z` @kind virtual;
  #L4c703a.  v0:= temp;
  #L4c703c.  if v0 == 0 then goto L4c7042;
  #L4c7040.  return @kind void;
  #L4c7042.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.h` @type ^`boolean` @kind boolean;
  #L4c7046.  if v0 != 0 then goto L4c705a;
  #L4c704a.  v0:= 1I;
  #L4c704c.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4c7050.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.g` @type ^`io.reactivex.rxjava3.core.ObservableSource` @kind object;
  #L4c7054.  call `subscribe`(v0, v1) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4c705a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c705e.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4c7064.  v0:= temp;
  #L4c7066.  if v0 != 0 then goto L4c7034;
  #L4c706a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRetryWhen$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c6ef4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c6ef8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4c6efe.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.e` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a$a` @kind object;
  #L4c6f02.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4c6f08.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRetryWhen$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c6e6c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c6e70.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c6e76.  v0:= temp @kind object;
  #L4c6e78.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4c6e7c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4c6e82.  v0:= temp;
  #L4c6e84.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRetryWhen$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c6f8c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.e` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a$a` @kind object;
  #L4c6f90.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4c6f96.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c6f9a.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c6f9e.  call `onComplete`(v0, v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onComplete:(Lio/reactivex/rxjava3/core/Observer;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @kind static;
  #L4c6fa4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRetryWhen$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c6fb8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c6fbc.  v1:= 0I;
  #L4c6fbe.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4c6fc4.  v0:= 0I;
  #L4c6fc6.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4c6fca.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.d` @type ^`io.reactivex.rxjava3.subjects.Subject` @kind object;
  #L4c6fce.  call `onNext`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c6fd4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRetryWhen$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c6fe8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c6fec.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c6ff0.  call `onNext`(v0, v3, v2, v1) @signature `Lio/reactivex/rxjava3/internal/util/HalfSerializer;.onNext:(Lio/reactivex/rxjava3/core/Observer;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/rxjava3/internal/util/AtomicThrowable;)V` @kind static;
  #L4c6ff6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRetryWhen$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c7008.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c700c.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4c7012.  return @kind void;
}
