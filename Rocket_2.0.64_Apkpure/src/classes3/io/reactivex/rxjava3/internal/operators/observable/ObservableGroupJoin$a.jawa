record `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$b` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.CompositeDisposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.c` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.d` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.g` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.h` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiFunction` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.i` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.j` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.k` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.l` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.m` @AccessFlag VOLATILE;
}
global `java.lang.Integer` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.n` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.o` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.p` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.q` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4c08f8.  v0:= 1I;
  #L4c08fa.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4c0900.  v0:= temp @kind object;
  #L4c0902.  `@@io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.n` @type ^`java.lang.Integer` := v0 @kind object;
  #L4c0906.  v0:= 2I;
  #L4c0908.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4c090e.  v0:= temp @kind object;
  #L4c0910.  `@@io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.o` @type ^`java.lang.Integer` := v0 @kind object;
  #L4c0914.  v0:= 3I;
  #L4c0916.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4c091c.  v0:= temp @kind object;
  #L4c091e.  `@@io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.p` @type ^`java.lang.Integer` := v0 @kind object;
  #L4c0922.  v0:= 4I;
  #L4c0924.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4c092a.  v0:= temp @kind object;
  #L4c092c.  `@@io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.q` @type ^`java.lang.Integer` := v0 @kind object;
  #L4c0930.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a` v1 @kind this, `io.reactivex.rxjava3.core.Observer` v2 @kind object, `io.reactivex.rxjava3.functions.Function` v3 @kind object, `io.reactivex.rxjava3.functions.Function` v4 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4c0944.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4c094a.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v2 @kind object;
  #L4c094e.  v2:= new `io.reactivex.rxjava3.disposables.CompositeDisposable`;
  #L4c0952.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L4c0958.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` := v2 @kind object;
  #L4c095c.  v2:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4c0960.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Observable;.bufferSize:()I` @kind static;
  #L4c0966.  v0:= temp;
  #L4c0968.  call `<init>`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4c096e.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` := v2 @kind object;
  #L4c0972.  v2:= new `java.util.LinkedHashMap`;
  #L4c0976.  call `<init>`(v2) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L4c097c.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.d` @type ^`java.util.Map` := v2 @kind object;
  #L4c0980.  v2:= new `java.util.LinkedHashMap`;
  #L4c0984.  call `<init>`(v2) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L4c098a.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.e` @type ^`java.util.Map` := v2 @kind object;
  #L4c098e.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4c0992.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4c0998.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4c099c.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.g` @type ^`io.reactivex.rxjava3.functions.Function` := v3 @kind object;
  #L4c09a0.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.h` @type ^`io.reactivex.rxjava3.functions.Function` := v4 @kind object;
  #L4c09a4.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.i` @type ^`io.reactivex.rxjava3.functions.BiFunction` := v5 @kind object;
  #L4c09a8.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4c09ac.  v3:= 2I;
  #L4c09ae.  call `<init>`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L4c09b4.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.j` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L4c09b8.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c0eb8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c0ebc.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L4c0ec2.  v0:= temp;
  #L4c0ec4.  if v0 == 0 then goto L4c0eda;
  #L4c0ec8.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.j` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c0ecc.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4c0ed2.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.g:()V` @kind virtual;
  #L4c0ed8.  goto L4c0ee0;
  #L4c0eda.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4c0ee0.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a` v1 @kind this, `boolean` v2 , `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.b:(ZLjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c0ef4.  @monitorenter v1
  #L4c0ef6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4c0efa.  if v2 == 0 then goto L4c0f04;
  #L4c0efe.  v2:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.n` @type ^`java.lang.Integer` @kind object;
  #L4c0f02.  goto L4c0f08;
  #L4c0f04.  v2:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.o` @type ^`java.lang.Integer` @kind object;
  #L4c0f08.  call temp:= `offer`(v0, v2, v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c0f0e.  @monitorexit v1
  #L4c0f10.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.g:()V` @kind virtual;
  #L4c0f16.  return @kind void;
  #L4c0f18.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c0f1a.  @monitorexit v1
  #L4c0f1c.  throw v2;
  catch `java.lang.Throwable` @[L4c0ef6..L4c0f10] goto L4c0f18;
  catch `java.lang.Throwable` @[L4c0f1a..L4c0f1c] goto L4c0f18;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.c:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c0e5c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c0e60.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L4c0e66.  v0:= temp;
  #L4c0e68.  if v0 == 0 then goto L4c0e74;
  #L4c0e6c.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.g:()V` @kind virtual;
  #L4c0e72.  goto L4c0e7a;
  #L4c0e74.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4c0e7a.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a` v1 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$d` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.d:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c0e8c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4c0e90.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4c0e96.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.j` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c0e9a.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4c0ea0.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.g:()V` @kind virtual;
  #L4c0ea6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c09e8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.m` @type ^`boolean` @kind boolean;
  #L4c09ec.  if v0 == 0 then goto L4c09f2;
  #L4c09f0.  return @kind void;
  #L4c09f2.  v0:= 1I;
  #L4c09f4.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.m` @type ^`boolean` := v0 @kind boolean;
  #L4c09f8.  call `f`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.f:()V` @kind virtual;
  #L4c09fe.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c0a04.  v0:= temp;
  #L4c0a06.  if v0 != 0 then goto L4c0a14;
  #L4c0a0a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4c0a0e.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4c0a14.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a` v1 @kind this, `boolean` v2 , `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$c` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.e:(ZLio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c0e0c.  @monitorenter v1
  #L4c0e0e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4c0e12.  if v2 == 0 then goto L4c0e1c;
  #L4c0e16.  v2:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.p` @type ^`java.lang.Integer` @kind object;
  #L4c0e1a.  goto L4c0e20;
  #L4c0e1c.  v2:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.q` @type ^`java.lang.Integer` @kind object;
  #L4c0e20.  call temp:= `offer`(v0, v2, v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c0e26.  @monitorexit v1
  #L4c0e28.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.g:()V` @kind virtual;
  #L4c0e2e.  return @kind void;
  #L4c0e30.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c0e32.  @monitorexit v1
  #L4c0e34.  throw v2;
  catch `java.lang.Throwable` @[L4c0e0e..L4c0e28] goto L4c0e30;
  catch `java.lang.Throwable` @[L4c0e32..L4c0e34] goto L4c0e30;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.f:()V` @AccessFlag  {
    temp;
    v0;

  #L4c09cc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4c09d0.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4c09d6.  return @kind void;
}
procedure `void` `g`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a` v9 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4c0a28.  call temp:= `getAndIncrement`(v9) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c0a2e.  v0:= temp;
  #L4c0a30.  if v0 == 0 then goto L4c0a36;
  #L4c0a34.  return @kind void;
  #L4c0a36.  v0:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4c0a3a.  v1:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c0a3e.  v2:= 1I;
  #L4c0a40.  v3:= 1I;
  #L4c0a42.  v4:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.m` @type ^`boolean` @kind boolean;
  #L4c0a46.  if v4 == 0 then goto L4c0a52;
  #L4c0a4a.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4c0a50.  return @kind void;
  #L4c0a52.  v4:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c0a56.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c0a5c.  v4:= temp @kind object;
  #L4c0a5e.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L4c0a62.  if v4 == 0 then goto L4c0a7a;
  #L4c0a66.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4c0a6c.  call `f`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.f:()V` @kind virtual;
  #L4c0a72.  call `h`(v9, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.h:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4c0a78.  return @kind void;
  #L4c0a7a.  v4:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.j` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c0a7e.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4c0a84.  v4:= temp;
  #L4c0a86.  v5:= 0I;
  #L4c0a88.  if v4 != 0 then goto L4c0a90;
  #L4c0a8c.  v4:= 1I;
  #L4c0a8e.  goto L4c0a92;
  #L4c0a90.  v4:= 0I;
  #L4c0a92.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4c0a98.  v6:= temp @kind object;
  #L4c0a9a.  v6:= (`java.lang.Integer`) v6 @kind object;
  #L4c0a9e.  if v6 != 0 then goto L4c0aa6;
  #L4c0aa2.  v7:= 1I;
  #L4c0aa4.  goto L4c0aa8;
  #L4c0aa6.  v7:= 0I;
  #L4c0aa8.  if v4 == 0 then goto L4c0b0a;
  #L4c0aac.  if v7 == 0 then goto L4c0b0a;
  #L4c0ab0.  v0:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.d` @type ^`java.util.Map` @kind object;
  #L4c0ab4.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L4c0aba.  v0:= temp @kind object;
  #L4c0abc.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4c0ac2.  v0:= temp @kind object;
  #L4c0ac4.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4c0aca.  v2:= temp;
  #L4c0acc.  if v2 == 0 then goto L4c0ae4;
  #L4c0ad0.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4c0ad6.  v2:= temp @kind object;
  #L4c0ad8.  v2:= (`io.reactivex.rxjava3.subjects.UnicastSubject`) v2 @kind object;
  #L4c0adc.  call `onComplete`(v2) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4c0ae2.  goto L4c0ac4;
  #L4c0ae4.  v0:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.d` @type ^`java.util.Map` @kind object;
  #L4c0ae8.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L4c0aee.  v0:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L4c0af2.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L4c0af8.  v0:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4c0afc.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4c0b02.  call `onComplete`(v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4c0b08.  return @kind void;
  #L4c0b0a.  if v7 == 0 then goto L4c0b1e;
  #L4c0b0e.  v3:= -v3 @kind int;
  #L4c0b10.  call temp:= `addAndGet`(v9, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4c0b16.  v3:= temp;
  #L4c0b18.  if v3 != 0 then goto L4c0a42;
  #L4c0b1c.  return @kind void;
  #L4c0b1e.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4c0b24.  v4:= temp @kind object;
  #L4c0b26.  v7:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.n` @type ^`java.lang.Integer` @kind object;
  #L4c0b2a.  if v6 != v7 then goto L4c0c10;
  #L4c0b2e.  call temp:= `create`() @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.create:()Lio/reactivex/rxjava3/subjects/UnicastSubject;` @kind static;
  #L4c0b34.  v5:= temp @kind object;
  #L4c0b36.  v6:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.k` @type ^`int`;
  #L4c0b3a.  v7:= v6 + 1;
  #L4c0b3e.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.k` @type ^`int` := v7;
  #L4c0b42.  v7:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.d` @type ^`java.util.Map` @kind object;
  #L4c0b46.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4c0b4c.  v8:= temp @kind object;
  #L4c0b4e.  call temp:= `put`(v7, v8, v5) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c0b54.  v7:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.g` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4c0b58.  call temp:= `apply`(v7, v4) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c0b5e.  v7:= temp @kind object;
  #L4c0b60.  v8:= "The leftEnd returned a null ObservableSource" @kind object;
  #L4c0b64.  call temp:= `requireNonNull`(v7, v8) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4c0b6a.  v7:= (`io.reactivex.rxjava3.core.ObservableSource`) v7 @kind object;
  #L4c0b6e.  v8:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$c`;
  #L4c0b72.  call `<init>`(v8, v9, v2, v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$c;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$b;ZI)V` @kind direct;
  #L4c0b78.  v6:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4c0b7c.  call temp:= `add`(v6, v8) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4c0b82.  call `subscribe`(v7, v8) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4c0b88.  v6:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c0b8c.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c0b92.  v6:= temp @kind object;
  #L4c0b94.  v6:= (`java.lang.Throwable`) v6 @kind object;
  #L4c0b98.  if v6 == 0 then goto L4c0bb0;
  #L4c0b9c.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4c0ba2.  call `f`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.f:()V` @kind virtual;
  #L4c0ba8.  call `h`(v9, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.h:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4c0bae.  return @kind void;
  #L4c0bb0.  v6:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.i` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L4c0bb4.  call temp:= `apply`(v6, v4, v5) @signature `Lio/reactivex/rxjava3/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c0bba.  v4:= temp @kind object;
  #L4c0bbc.  v6:= "The resultSelector returned a null value" @kind object;
  #L4c0bc0.  call temp:= `requireNonNull`(v4, v6) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4c0bc6.  call `onNext`(v1, v4) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c0bcc.  v4:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L4c0bd0.  call temp:= `values`(v4) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L4c0bd6.  v4:= temp @kind object;
  #L4c0bd8.  call temp:= `iterator`(v4) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4c0bde.  v4:= temp @kind object;
  #L4c0be0.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4c0be6.  v6:= temp;
  #L4c0be8.  if v6 == 0 then goto L4c0a42;
  #L4c0bec.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4c0bf2.  v6:= temp @kind object;
  #L4c0bf4.  call `onNext`(v5, v6) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4c0bfa.  goto L4c0be0;
  #L4c0bfc.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c0bfe.  call `i`(v9, v2, v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.i:(Ljava/lang/Throwable;Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4c0c04.  return @kind void;
  #L4c0c06.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c0c08.  call `i`(v9, v2, v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.i:(Ljava/lang/Throwable;Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4c0c0e.  return @kind void;
  #L4c0c10.  v7:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.o` @type ^`java.lang.Integer` @kind object;
  #L4c0c14.  if v6 != v7 then goto L4c0cd0;
  #L4c0c18.  v6:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.l` @type ^`int`;
  #L4c0c1c.  v7:= v6 + 1;
  #L4c0c20.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.l` @type ^`int` := v7;
  #L4c0c24.  v7:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L4c0c28.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4c0c2e.  v8:= temp @kind object;
  #L4c0c30.  call temp:= `put`(v7, v8, v4) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c0c36.  v7:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.h` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4c0c3a.  call temp:= `apply`(v7, v4) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c0c40.  v7:= temp @kind object;
  #L4c0c42.  v8:= "The rightEnd returned a null ObservableSource" @kind object;
  #L4c0c46.  call temp:= `requireNonNull`(v7, v8) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4c0c4c.  v7:= (`io.reactivex.rxjava3.core.ObservableSource`) v7 @kind object;
  #L4c0c50.  v8:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$c`;
  #L4c0c54.  call `<init>`(v8, v9, v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$c;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$b;ZI)V` @kind direct;
  #L4c0c5a.  v5:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4c0c5e.  call temp:= `add`(v5, v8) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4c0c64.  call `subscribe`(v7, v8) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4c0c6a.  v5:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c0c6e.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c0c74.  v5:= temp @kind object;
  #L4c0c76.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L4c0c7a.  if v5 == 0 then goto L4c0c92;
  #L4c0c7e.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4c0c84.  call `f`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.f:()V` @kind virtual;
  #L4c0c8a.  call `h`(v9, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.h:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4c0c90.  return @kind void;
  #L4c0c92.  v5:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.d` @type ^`java.util.Map` @kind object;
  #L4c0c96.  call temp:= `values`(v5) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L4c0c9c.  v5:= temp @kind object;
  #L4c0c9e.  call temp:= `iterator`(v5) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4c0ca4.  v5:= temp @kind object;
  #L4c0ca6.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4c0cac.  v6:= temp;
  #L4c0cae.  if v6 == 0 then goto L4c0a42;
  #L4c0cb2.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4c0cb8.  v6:= temp @kind object;
  #L4c0cba.  v6:= (`io.reactivex.rxjava3.subjects.UnicastSubject`) v6 @kind object;
  #L4c0cbe.  call `onNext`(v6, v4) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4c0cc4.  goto L4c0ca6;
  #L4c0cc6.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c0cc8.  call `i`(v9, v2, v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.i:(Ljava/lang/Throwable;Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4c0cce.  return @kind void;
  #L4c0cd0.  v5:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.p` @type ^`java.lang.Integer` @kind object;
  #L4c0cd4.  if v6 != v5 then goto L4c0d10;
  #L4c0cd8.  v4:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$c`) v4 @kind object;
  #L4c0cdc.  v5:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.d` @type ^`java.util.Map` @kind object;
  #L4c0ce0.  v6:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$c.c` @type ^`int`;
  #L4c0ce4.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4c0cea.  v6:= temp @kind object;
  #L4c0cec.  call temp:= `remove`(v5, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c0cf2.  v5:= temp @kind object;
  #L4c0cf4.  v5:= (`io.reactivex.rxjava3.subjects.UnicastSubject`) v5 @kind object;
  #L4c0cf8.  v6:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4c0cfc.  call temp:= `remove`(v6, v4) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.remove:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4c0d02.  if v5 == 0 then goto L4c0a42;
  #L4c0d06.  call `onComplete`(v5) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4c0d0c.  goto L4c0a42;
  #L4c0d10.  v4:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$c`) v4 @kind object;
  #L4c0d14.  v5:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L4c0d18.  v6:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$c.c` @type ^`int`;
  #L4c0d1c.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4c0d22.  v6:= temp @kind object;
  #L4c0d24.  call temp:= `remove`(v5, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c0d2a.  v5:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.c` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4c0d2e.  call temp:= `remove`(v5, v4) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.remove:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4c0d34.  goto L4c0a42;
  catch `java.lang.Throwable` @[L4c0b54..L4c0b6e] goto L4c0c06;
  catch `java.lang.Throwable` @[L4c0bb0..L4c0bc6] goto L4c0bfc;
  catch `java.lang.Throwable` @[L4c0c36..L4c0c50] goto L4c0cc6;
}
procedure `void` `h`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a` v3 @kind this, `io.reactivex.rxjava3.core.Observer` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.h:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4c0d6c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c0d70.  call temp:= `terminate`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L4c0d76.  v0:= temp @kind object;
  #L4c0d78.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.d` @type ^`java.util.Map` @kind object;
  #L4c0d7c.  call temp:= `values`(v1) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L4c0d82.  v1:= temp @kind object;
  #L4c0d84.  call temp:= `iterator`(v1) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4c0d8a.  v1:= temp @kind object;
  #L4c0d8c.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4c0d92.  v2:= temp;
  #L4c0d94.  if v2 == 0 then goto L4c0dac;
  #L4c0d98.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4c0d9e.  v2:= temp @kind object;
  #L4c0da0.  v2:= (`io.reactivex.rxjava3.subjects.UnicastSubject`) v2 @kind object;
  #L4c0da4.  call `onError`(v2, v0) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4c0daa.  goto L4c0d8c;
  #L4c0dac.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.d` @type ^`java.util.Map` @kind object;
  #L4c0db0.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L4c0db6.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L4c0dba.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L4c0dc0.  call `onError`(v4, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c0dc6.  return @kind void;
}
procedure `void` `i`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object, `io.reactivex.rxjava3.core.Observer` v3 @kind object, `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.i:(Ljava/lang/Throwable;Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @AccessFlag  {
    temp;
    v0;

  #L4c0dd8.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c0dde.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c0de2.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L4c0de8.  call `clear`(v4) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4c0dee.  call `f`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.f:()V` @kind virtual;
  #L4c0df4.  call `h`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.h:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4c0dfa.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableGroupJoin$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c08e0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$a.m` @type ^`boolean` @kind boolean;
  #L4c08e4.  return v0;
}
