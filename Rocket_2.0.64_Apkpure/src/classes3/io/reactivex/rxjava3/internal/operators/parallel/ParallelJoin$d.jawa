record `io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$d` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c` @kind class {
}
global `long` `@@io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$d.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$d` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$d;.<init>:(Lorg/reactivestreams/Subscriber;II)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d122c.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;.<init>:(Lorg/reactivestreams/Subscriber;II)V` @kind direct;
  #L4d1232.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$d` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$d;.c:()V` @AccessFlag  {
    temp;
    v0;

  #L4d1244.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4d124a.  v0:= temp;
  #L4d124c.  if v0 == 0 then goto L4d1252;
  #L4d1250.  return @kind void;
  #L4d1252.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$d;.g:()V` @kind virtual;
  #L4d1258.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$d` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$d;.d:()V` @AccessFlag  {
    temp;
    v0;

  #L4d13b8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4d13bc.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4d13c2.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$d;.c:()V` @kind virtual;
  #L4d13c8.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$d` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$d;.e:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4d13dc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d13e0.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4d13e6.  v2:= temp;
  #L4d13e8.  if v2 == 0 then goto L4d13fc;
  #L4d13ec.  v2:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4d13f0.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4d13f6.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$d;.c:()V` @kind virtual;
  #L4d13fc.  return @kind void;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$d` v6 @kind this, `io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$a` v7 @kind object, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$d;.f:(Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$a;Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4d1410.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4d1416.  v0:= temp;
  #L4d1418.  v1:= "Queue full?!" @kind object;
  #L4d141c.  if v0 != 0 then goto L4d14d4;
  #L4d1420.  v0:= 0I;
  #L4d1422.  v2:= 1I;
  #L4d1424.  call temp:= `compareAndSet`(v6, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4d142a.  v0:= temp;
  #L4d142c.  if v0 == 0 then goto L4d14d4;
  #L4d1430.  v0:= v6.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d1434.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4d143a.  v2:= temp @kind wide;
  #L4d143c.  v4:= 0L;
  #L4d1440.  v0:= lcmp(v2, v4);
  #L4d1444.  if v0 == 0 then goto L4d1486;
  #L4d1448.  v0:= v6.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d144c.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d1452.  v8:= v6.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d1456.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4d145c.  v0:= temp @kind wide;
  #L4d145e.  v2:= 9223372036854775807L;
  #L4d1468.  v8:= lcmp(v0, v2);
  #L4d146c.  if v8 == 0 then goto L4d147a;
  #L4d1470.  v8:= v6.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d1474.  call temp:= `decrementAndGet`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L4d147a.  v0:= 1L;
  #L4d147e.  call `c`(v7, v0) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$a;.c:(J)V` @kind virtual;
  #L4d1484.  goto L4d14c6;
  #L4d1486.  call temp:= `b`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$a;.b:()Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;` @kind virtual;
  #L4d148c.  v0:= temp @kind object;
  #L4d148e.  call temp:= `offer`(v0, v8) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4d1494.  v8:= temp;
  #L4d1496.  if v8 != 0 then goto L4d14c6;
  #L4d149a.  call temp:= `a`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$a;.a:()Z` @kind virtual;
  #L4d14a0.  v7:= v6.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d14a4.  v8:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4d14a8.  call `<init>`(v8, v1) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4d14ae.  call temp:= `tryAddThrowableOrReport`(v7, v8) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4d14b4.  v7:= v6.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4d14b8.  call temp:= `decrementAndGet`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4d14be.  call `g`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$d;.g:()V` @kind virtual;
  #L4d14c4.  return @kind void;
  #L4d14c6.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4d14cc.  v7:= temp;
  #L4d14ce.  if v7 != 0 then goto L4d151a;
  #L4d14d2.  return @kind void;
  #L4d14d4.  call temp:= `b`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$a;.b:()Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;` @kind virtual;
  #L4d14da.  v0:= temp @kind object;
  #L4d14dc.  call temp:= `offer`(v0, v8) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4d14e2.  v8:= temp;
  #L4d14e4.  if v8 != 0 then goto L4d150c;
  #L4d14e8.  call temp:= `a`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$a;.a:()Z` @kind virtual;
  #L4d14ee.  v7:= v6.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d14f2.  v8:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4d14f6.  call `<init>`(v8, v1) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4d14fc.  call temp:= `tryAddThrowableOrReport`(v7, v8) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4d1502.  v7:= v6.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4d1506.  call temp:= `decrementAndGet`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4d150c.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4d1512.  v7:= temp;
  #L4d1514.  if v7 == 0 then goto L4d151a;
  #L4d1518.  return @kind void;
  #L4d151a.  call `g`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$d;.g:()V` @kind virtual;
  #L4d1520.  return @kind void;
}
procedure `void` `g`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$d` v18 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$d;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L4d126c.  v0:= v18 @kind object;
  #L4d1270.  v1:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.b` @type ^`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$a`[] @kind object;
  #L4d1274.  v2:= length @variable v1;
  #L4d1276.  v3:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d127a.  v5:= 1I;
  #L4d127c.  v6:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d1280.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4d1286.  v6:= temp @kind wide;
  #L4d1288.  v8:= 0L;
  #L4d128c.  v10:= v8 @kind wide;
  #L4d128e.  v13:= lcmp(v10, v6);
  #L4d1292.  if v13 == 0 then goto L4d131a;
  #L4d1296.  v13:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.e` @type ^`boolean` @kind boolean;
  #L4d129a.  if v13 == 0 then goto L4d12a6;
  #L4d129e.  call `b`(v18) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;.b:()V` @kind virtual;
  #L4d12a4.  return @kind void;
  #L4d12a6.  v13:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4d12aa.  call temp:= `get`(v13) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4d12b0.  v13:= temp;
  #L4d12b2.  if v13 != 0 then goto L4d12ba;
  #L4d12b6.  v13:= 1I;
  #L4d12b8.  goto L4d12bc;
  #L4d12ba.  v13:= 0I;
  #L4d12bc.  v14:= 0I;
  #L4d12be.  v15:= 1I;
  #L4d12c0.  if v14 >= v2 then goto L4d1302;
  #L4d12c4.  v4:= v1[v14] @kind object;
  #L4d12c8.  v12:= v4.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4d12cc.  if v12 == 0 then goto L4d12fc;
  #L4d12d0.  call temp:= `poll`(v12) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4d12d6.  v12:= temp @kind object;
  #L4d12d8.  if v12 == 0 then goto L4d12fc;
  #L4d12dc.  call `onNext`(v3, v12) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d12e2.  call `d`(v4) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$a;.d:()V` @kind virtual;
  #L4d12e8.  v16:= 1L;
  #L4d12ec.  v10:= v10 + v16 @kind long;
  #L4d12f0.  v4:= lcmp(v10, v6);
  #L4d12f4.  if v4 != 0 then goto L4d12fa;
  #L4d12f8.  goto L4d131a;
  #L4d12fa.  v15:= 0I;
  #L4d12fc.  v14:= v14 + 1;
  #L4d1300.  goto L4d12c0;
  #L4d1302.  if v13 == 0 then goto L4d1316;
  #L4d1306.  if v15 == 0 then goto L4d1316;
  #L4d130a.  v1:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d130e.  call `tryTerminateConsumer`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4d1314.  return @kind void;
  #L4d1316.  if v15 == 0 then goto L4d128e;
  #L4d131a.  v4:= lcmp(v10, v6);
  #L4d131e.  if v4 != 0 then goto L4d1386;
  #L4d1322.  v4:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.e` @type ^`boolean` @kind boolean;
  #L4d1326.  if v4 == 0 then goto L4d1332;
  #L4d132a.  call `b`(v18) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;.b:()V` @kind virtual;
  #L4d1330.  return @kind void;
  #L4d1332.  v4:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4d1336.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4d133c.  v4:= temp;
  #L4d133e.  if v4 != 0 then goto L4d1346;
  #L4d1342.  v4:= 1I;
  #L4d1344.  goto L4d1348;
  #L4d1346.  v4:= 0I;
  #L4d1348.  v6:= 0I;
  #L4d134a.  if v6 >= v2 then goto L4d1370;
  #L4d134e.  v7:= v1[v6] @kind object;
  #L4d1352.  v7:= v7.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4d1356.  if v7 == 0 then goto L4d136a;
  #L4d135a.  call temp:= `isEmpty`(v7) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4d1360.  v7:= temp;
  #L4d1362.  if v7 != 0 then goto L4d136a;
  #L4d1366.  v12:= 0I;
  #L4d1368.  goto L4d1372;
  #L4d136a.  v6:= v6 + 1;
  #L4d136e.  goto L4d134a;
  #L4d1370.  v12:= 1I;
  #L4d1372.  if v4 == 0 then goto L4d1386;
  #L4d1376.  if v12 == 0 then goto L4d1386;
  #L4d137a.  v1:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d137e.  call `tryTerminateConsumer`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4d1384.  return @kind void;
  #L4d1386.  v4:= lcmp(v10, v8);
  #L4d138a.  if v4 == 0 then goto L4d1398;
  #L4d138e.  v4:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d1392.  call temp:= `produced`(v4, v10) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4d1398.  v4:= -v5 @kind int;
  #L4d139a.  call temp:= `addAndGet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4d13a0.  v5:= temp;
  #L4d13a2.  if v5 != 0 then goto L4d127c;
  #L4d13a6.  return @kind void;
}
