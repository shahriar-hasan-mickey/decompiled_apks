record `io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.MaybeObserver` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.MaybeObserver` `io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$c` `io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$b.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.MaybeSource` `io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$b.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$a` `io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$b.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$b` v1 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v2 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTimeoutMaybe$b;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;Lio/reactivex/rxjava3/core/MaybeSource;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4afd38.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4afd3e.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$b.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` := v2 @kind object;
  #L4afd42.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$c`;
  #L4afd46.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTimeoutMaybe$c;.<init>:(Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTimeoutMaybe$b;)V` @kind direct;
  #L4afd4c.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$b.b` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$c` := v0 @kind object;
  #L4afd50.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$b.c` @type ^`io.reactivex.rxjava3.core.MaybeSource` := v3 @kind object;
  #L4afd54.  if v3 == 0 then goto L4afd64;
  #L4afd58.  v3:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$a`;
  #L4afd5c.  call `<init>`(v3, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTimeoutMaybe$a;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind direct;
  #L4afd62.  goto L4afd66;
  #L4afd64.  v3:= 0I;
  #L4afd66.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$b.d` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$a` := v3 @kind object;
  #L4afd6a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTimeoutMaybe$b;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4afe74.  call temp:= `dispose`(v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4afe7a.  v0:= temp;
  #L4afe7c.  if v0 == 0 then goto L4afea8;
  #L4afe80.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$b.c` @type ^`io.reactivex.rxjava3.core.MaybeSource` @kind object;
  #L4afe84.  if v0 != 0 then goto L4afe9e;
  #L4afe88.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$b.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4afe8c.  v1:= new `java.util.concurrent.TimeoutException`;
  #L4afe90.  call `<init>`(v1) @signature `Ljava/util/concurrent/TimeoutException;.<init>:()V` @kind direct;
  #L4afe96.  call `onError`(v0, v1) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4afe9c.  goto L4afea8;
  #L4afe9e.  v1:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$b.d` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$a` @kind object;
  #L4afea2.  call `subscribe`(v0, v1) @signature `Lio/reactivex/rxjava3/core/MaybeSource;.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind interface;
  #L4afea8.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTimeoutMaybe$b;.b:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4afebc.  call temp:= `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4afec2.  v0:= temp;
  #L4afec4.  if v0 == 0 then goto L4afed4;
  #L4afec8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$b.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4afecc.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4afed2.  goto L4afeda;
  #L4afed4.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4afeda.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTimeoutMaybe$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4afd7c.  call temp:= `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4afd82.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$b.b` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$c` @kind object;
  #L4afd86.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4afd8c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$b.d` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$a` @kind object;
  #L4afd90.  if v0 == 0 then goto L4afd9a;
  #L4afd94.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4afd9a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTimeoutMaybe$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4afd10.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4afd16.  v0:= temp @kind object;
  #L4afd18.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4afd1c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4afd22.  v0:= temp;
  #L4afd24.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTimeoutMaybe$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4afdac.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$b.b` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$c` @kind object;
  #L4afdb0.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4afdb6.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4afdba.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4afdc0.  v1:= temp @kind object;
  #L4afdc2.  if v1 == v0 then goto L4afdd0;
  #L4afdc6.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$b.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4afdca.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L4afdd0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTimeoutMaybe$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4afde4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$b.b` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$c` @kind object;
  #L4afde8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4afdee.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4afdf2.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4afdf8.  v1:= temp @kind object;
  #L4afdfa.  if v1 == v0 then goto L4afe0a;
  #L4afdfe.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$b.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4afe02.  call `onError`(v0, v3) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4afe08.  goto L4afe10;
  #L4afe0a.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4afe10.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$b` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTimeoutMaybe$b;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4afe24.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4afe2a.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeTimeoutMaybe$b;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4afe3c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$b.b` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$c` @kind object;
  #L4afe40.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4afe46.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4afe4a.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4afe50.  v1:= temp @kind object;
  #L4afe52.  if v1 == v0 then goto L4afe60;
  #L4afe56.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$b.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4afe5a.  call `onSuccess`(v0, v3) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4afe60.  return @kind void;
}
