record `io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c` @kind class {
}
global `long` `@@io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$b;.<init>:(Lorg/reactivestreams/Subscriber;II)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d1534.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;.<init>:(Lorg/reactivestreams/Subscriber;II)V` @kind direct;
  #L4d153a.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$b;.c:()V` @AccessFlag  {
    temp;
    v0;

  #L4d154c.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4d1552.  v0:= temp;
  #L4d1554.  if v0 == 0 then goto L4d155a;
  #L4d1558.  return @kind void;
  #L4d155a.  call `g`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$b;.g:()V` @kind virtual;
  #L4d1560.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$b;.d:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d1700.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4d1704.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4d170a.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$b;.c:()V` @kind virtual;
  #L4d1710.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$b;.e:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d1724.  v0:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d1728.  v1:= 0I;
  #L4d172a.  call temp:= `compareAndSet`(v0, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4d1730.  v0:= temp;
  #L4d1732.  if v0 == 0 then goto L4d1744;
  #L4d1736.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;.a:()V` @kind virtual;
  #L4d173c.  call `c`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$b;.c:()V` @kind virtual;
  #L4d1742.  goto L4d175a;
  #L4d1744.  v0:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d1748.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d174e.  v0:= temp @kind object;
  #L4d1750.  if v3 == v0 then goto L4d175a;
  #L4d1754.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4d175a.  return @kind void;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$b` v6 @kind this, `io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$a` v7 @kind object, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$b;.f:(Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$a;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4d176c.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4d1772.  v0:= temp;
  #L4d1774.  v1:= "Queue full?!" @kind object;
  #L4d1778.  if v0 != 0 then goto L4d183a;
  #L4d177c.  v0:= 0I;
  #L4d177e.  v2:= 1I;
  #L4d1780.  call temp:= `compareAndSet`(v6, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4d1786.  v0:= temp;
  #L4d1788.  if v0 == 0 then goto L4d183a;
  #L4d178c.  v0:= v6.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d1790.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4d1796.  v2:= temp @kind wide;
  #L4d1798.  v4:= 0L;
  #L4d179c.  v0:= lcmp(v2, v4);
  #L4d17a0.  if v0 == 0 then goto L4d17e2;
  #L4d17a4.  v0:= v6.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d17a8.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d17ae.  v8:= v6.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d17b2.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4d17b8.  v0:= temp @kind wide;
  #L4d17ba.  v2:= 9223372036854775807L;
  #L4d17c4.  v8:= lcmp(v0, v2);
  #L4d17c8.  if v8 == 0 then goto L4d17d6;
  #L4d17cc.  v8:= v6.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d17d0.  call temp:= `decrementAndGet`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L4d17d6.  v0:= 1L;
  #L4d17da.  call `c`(v7, v0) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$a;.c:(J)V` @kind virtual;
  #L4d17e0.  goto L4d182c;
  #L4d17e2.  call temp:= `b`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$a;.b:()Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;` @kind virtual;
  #L4d17e8.  v7:= temp @kind object;
  #L4d17ea.  call temp:= `offer`(v7, v8) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4d17f0.  v7:= temp;
  #L4d17f2.  if v7 != 0 then goto L4d182c;
  #L4d17f6.  call `a`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;.a:()V` @kind virtual;
  #L4d17fc.  v7:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4d1800.  call `<init>`(v7, v1) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4d1806.  v8:= v6.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d180a.  v0:= 0I;
  #L4d180c.  call temp:= `compareAndSet`(v8, v0, v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4d1812.  v8:= temp;
  #L4d1814.  if v8 == 0 then goto L4d1824;
  #L4d1818.  v8:= v6.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d181c.  call `onError`(v8, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d1822.  goto L4d182a;
  #L4d1824.  call `onError`(v7) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4d182a.  return @kind void;
  #L4d182c.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4d1832.  v7:= temp;
  #L4d1834.  if v7 != 0 then goto L4d1874;
  #L4d1838.  return @kind void;
  #L4d183a.  call temp:= `b`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$a;.b:()Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;` @kind virtual;
  #L4d1840.  v7:= temp @kind object;
  #L4d1842.  call temp:= `offer`(v7, v8) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4d1848.  v7:= temp;
  #L4d184a.  if v7 != 0 then goto L4d1866;
  #L4d184e.  call `a`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;.a:()V` @kind virtual;
  #L4d1854.  v7:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4d1858.  call `<init>`(v7, v1) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4d185e.  call `e`(v6, v7) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$b;.e:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4d1864.  return @kind void;
  #L4d1866.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4d186c.  v7:= temp;
  #L4d186e.  if v7 == 0 then goto L4d1874;
  #L4d1872.  return @kind void;
  #L4d1874.  call `g`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$b;.g:()V` @kind virtual;
  #L4d187a.  return @kind void;
}
procedure `void` `g`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$b` v18 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$b;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L4d1574.  v0:= v18 @kind object;
  #L4d1578.  v1:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.b` @type ^`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$a`[] @kind object;
  #L4d157c.  v2:= length @variable v1;
  #L4d157e.  v3:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d1582.  v5:= 1I;
  #L4d1584.  v6:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d1588.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4d158e.  v6:= temp @kind wide;
  #L4d1590.  v8:= 0L;
  #L4d1594.  v10:= v8 @kind wide;
  #L4d1596.  v13:= lcmp(v10, v6);
  #L4d159a.  if v13 == 0 then goto L4d1642;
  #L4d159e.  v13:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.e` @type ^`boolean` @kind boolean;
  #L4d15a2.  if v13 == 0 then goto L4d15ae;
  #L4d15a6.  call `b`(v18) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;.b:()V` @kind virtual;
  #L4d15ac.  return @kind void;
  #L4d15ae.  v13:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d15b2.  call temp:= `get`(v13) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d15b8.  v13:= temp @kind object;
  #L4d15ba.  v13:= (`java.lang.Throwable`) v13 @kind object;
  #L4d15be.  if v13 == 0 then goto L4d15d0;
  #L4d15c2.  call `b`(v18) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;.b:()V` @kind virtual;
  #L4d15c8.  call `onError`(v3, v13) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d15ce.  return @kind void;
  #L4d15d0.  v13:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4d15d4.  call temp:= `get`(v13) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4d15da.  v13:= temp;
  #L4d15dc.  if v13 != 0 then goto L4d15e4;
  #L4d15e0.  v13:= 1I;
  #L4d15e2.  goto L4d15e6;
  #L4d15e4.  v13:= 0I;
  #L4d15e6.  v14:= 0I;
  #L4d15e8.  v15:= 1I;
  #L4d15ea.  v4:= length @variable v1;
  #L4d15ec.  if v14 >= v4 then goto L4d162e;
  #L4d15f0.  v4:= v1[v14] @kind object;
  #L4d15f4.  v12:= v4.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4d15f8.  if v12 == 0 then goto L4d1628;
  #L4d15fc.  call temp:= `poll`(v12) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4d1602.  v12:= temp @kind object;
  #L4d1604.  if v12 == 0 then goto L4d1628;
  #L4d1608.  call `onNext`(v3, v12) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d160e.  call `d`(v4) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$a;.d:()V` @kind virtual;
  #L4d1614.  v16:= 1L;
  #L4d1618.  v10:= v10 + v16 @kind long;
  #L4d161c.  v4:= lcmp(v10, v6);
  #L4d1620.  if v4 != 0 then goto L4d1626;
  #L4d1624.  goto L4d1642;
  #L4d1626.  v15:= 0I;
  #L4d1628.  v14:= v14 + 1;
  #L4d162c.  goto L4d15ea;
  #L4d162e.  if v13 == 0 then goto L4d163e;
  #L4d1632.  if v15 == 0 then goto L4d163e;
  #L4d1636.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d163c.  return @kind void;
  #L4d163e.  if v15 == 0 then goto L4d1596;
  #L4d1642.  v4:= lcmp(v10, v6);
  #L4d1646.  if v4 != 0 then goto L4d16cc;
  #L4d164a.  v4:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.e` @type ^`boolean` @kind boolean;
  #L4d164e.  if v4 == 0 then goto L4d165a;
  #L4d1652.  call `b`(v18) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;.b:()V` @kind virtual;
  #L4d1658.  return @kind void;
  #L4d165a.  v4:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4d165e.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d1664.  v4:= temp @kind object;
  #L4d1666.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L4d166a.  if v4 == 0 then goto L4d167c;
  #L4d166e.  call `b`(v18) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin$c;.b:()V` @kind virtual;
  #L4d1674.  call `onError`(v3, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d167a.  return @kind void;
  #L4d167c.  v4:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4d1680.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4d1686.  v4:= temp;
  #L4d1688.  if v4 != 0 then goto L4d1690;
  #L4d168c.  v4:= 1I;
  #L4d168e.  goto L4d1692;
  #L4d1690.  v4:= 0I;
  #L4d1692.  v6:= 0I;
  #L4d1694.  if v6 >= v2 then goto L4d16ba;
  #L4d1698.  v7:= v1[v6] @kind object;
  #L4d169c.  v7:= v7.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4d16a0.  if v7 == 0 then goto L4d16b4;
  #L4d16a4.  call temp:= `isEmpty`(v7) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4d16aa.  v7:= temp;
  #L4d16ac.  if v7 != 0 then goto L4d16b4;
  #L4d16b0.  v12:= 0I;
  #L4d16b2.  goto L4d16bc;
  #L4d16b4.  v6:= v6 + 1;
  #L4d16b8.  goto L4d1694;
  #L4d16ba.  v12:= 1I;
  #L4d16bc.  if v4 == 0 then goto L4d16cc;
  #L4d16c0.  if v12 == 0 then goto L4d16cc;
  #L4d16c4.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d16ca.  return @kind void;
  #L4d16cc.  v4:= lcmp(v10, v8);
  #L4d16d0.  if v4 == 0 then goto L4d16de;
  #L4d16d4.  v4:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d16d8.  call temp:= `produced`(v4, v10) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4d16de.  v4:= -v5 @kind int;
  #L4d16e0.  call temp:= `addAndGet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4d16e6.  v5:= temp;
  #L4d16e8.  if v5 != 0 then goto L4d1584;
  #L4d16ec.  return @kind void;
}
