record `io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.MaybeObserver` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.MaybeObserver` `io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Consumer` `io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.d` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a` v0 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v1 @kind object, `java.lang.Object` v2 @kind object, `io.reactivex.rxjava3.functions.Consumer` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeUsing$a;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;Ljava/lang/Object;Lio/reactivex/rxjava3/functions/Consumer;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b0a9c.  call `<init>`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4b0aa2.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` := v1 @kind object;
  #L4b0aa6.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.b` @type ^`io.reactivex.rxjava3.functions.Consumer` := v3 @kind object;
  #L4b0aaa.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.c` @type ^`boolean` := v4 @kind boolean;
  #L4b0aae.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeUsing$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4b0b0c.  call temp:= `getAndSet`(v2, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4b0b12.  v0:= temp @kind object;
  #L4b0b14.  if v0 == v2 then goto L4b0b32;
  #L4b0b18.  v1:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.b` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4b0b1c.  call `accept`(v1, v0) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4b0b22.  goto L4b0b32;
  #L4b0b24.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b0b26.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b0b2c.  call `onError`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4b0b32.  return @kind void;
  catch `java.lang.Throwable` @[L4b0b18..L4b0b22] goto L4b0b24;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeUsing$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b0ac0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.c` @type ^`boolean` @kind boolean;
  #L4b0ac4.  if v0 == 0 then goto L4b0ae2;
  #L4b0ac8.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeUsing$a;.a:()V` @kind virtual;
  #L4b0ace.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b0ad2.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4b0ad8.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4b0adc.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v0 @kind object;
  #L4b0ae0.  goto L4b0afa;
  #L4b0ae2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b0ae6.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4b0aec.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4b0af0.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v0 @kind object;
  #L4b0af4.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeUsing$a;.a:()V` @kind virtual;
  #L4b0afa.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeUsing$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b0a7c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b0a80.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4b0a86.  v0:= temp;
  #L4b0a88.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeUsing$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b0b50.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4b0b54.  v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v0 @kind object;
  #L4b0b58.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.c` @type ^`boolean` @kind boolean;
  #L4b0b5c.  if v0 == 0 then goto L4b0b8c;
  #L4b0b60.  call temp:= `getAndSet`(v2, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4b0b66.  v0:= temp @kind object;
  #L4b0b68.  if v0 == v2 then goto L4b0b8a;
  #L4b0b6c.  v1:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.b` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4b0b70.  call `accept`(v1, v0) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4b0b76.  goto L4b0b8c;
  #L4b0b78.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b0b7a.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b0b80.  v1:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4b0b84.  call `onError`(v1, v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4b0b8a.  return @kind void;
  #L4b0b8c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4b0b90.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L4b0b96.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.c` @type ^`boolean` @kind boolean;
  #L4b0b9a.  if v0 != 0 then goto L4b0ba4;
  #L4b0b9e.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeUsing$a;.a:()V` @kind virtual;
  #L4b0ba4.  return @kind void;
  catch `java.lang.Throwable` @[L4b0b6c..L4b0b76] goto L4b0b78;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeUsing$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4b0bc4.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4b0bc8.  v4.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v0 @kind object;
  #L4b0bcc.  v0:= v4.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.c` @type ^`boolean` @kind boolean;
  #L4b0bd0.  if v0 == 0 then goto L4b0c16;
  #L4b0bd4.  call temp:= `getAndSet`(v4, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4b0bda.  v0:= temp @kind object;
  #L4b0bdc.  if v0 == v4 then goto L4b0c14;
  #L4b0be0.  v1:= v4.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.b` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4b0be4.  call `accept`(v1, v0) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4b0bea.  goto L4b0c16;
  #L4b0bec.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b0bee.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b0bf4.  v1:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L4b0bf8.  v2:= 2I;
  #L4b0bfa.  v2:= new `java.lang.Throwable`[v2];
  #L4b0bfe.  v3:= 0I;
  #L4b0c00.  v2[v3]:= v5 @kind object;
  #L4b0c04.  v5:= 1I;
  #L4b0c06.  v2[v5]:= v0 @kind object;
  #L4b0c0a.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L4b0c10.  v5:= v1 @kind object;
  #L4b0c12.  goto L4b0c16;
  #L4b0c14.  return @kind void;
  #L4b0c16.  v0:= v4.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4b0c1a.  call `onError`(v0, v5) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4b0c20.  v5:= v4.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.c` @type ^`boolean` @kind boolean;
  #L4b0c24.  if v5 != 0 then goto L4b0c2e;
  #L4b0c28.  call `a`(v4) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeUsing$a;.a:()V` @kind virtual;
  #L4b0c2e.  return @kind void;
  catch `java.lang.Throwable` @[L4b0be0..L4b0bea] goto L4b0bec;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeUsing$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b0c4c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b0c50.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4b0c56.  v0:= temp;
  #L4b0c58.  if v0 == 0 then goto L4b0c6a;
  #L4b0c5c.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4b0c60.  v2:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4b0c64.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4b0c6a.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeUsing$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b0c7c.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4b0c80.  v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v0 @kind object;
  #L4b0c84.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.c` @type ^`boolean` @kind boolean;
  #L4b0c88.  if v0 == 0 then goto L4b0cb8;
  #L4b0c8c.  call temp:= `getAndSet`(v2, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4b0c92.  v0:= temp @kind object;
  #L4b0c94.  if v0 == v2 then goto L4b0cb6;
  #L4b0c98.  v1:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.b` @type ^`io.reactivex.rxjava3.functions.Consumer` @kind object;
  #L4b0c9c.  call `accept`(v1, v0) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4b0ca2.  goto L4b0cb8;
  #L4b0ca4.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b0ca6.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b0cac.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4b0cb0.  call `onError`(v0, v3) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4b0cb6.  return @kind void;
  #L4b0cb8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4b0cbc.  call `onSuccess`(v0, v3) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4b0cc2.  v3:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$a.c` @type ^`boolean` @kind boolean;
  #L4b0cc6.  if v3 != 0 then goto L4b0cd0;
  #L4b0cca.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeUsing$a;.a:()V` @kind virtual;
  #L4b0cd0.  return @kind void;
  catch `java.lang.Throwable` @[L4b0c98..L4b0ca2] goto L4b0ca4;
}
