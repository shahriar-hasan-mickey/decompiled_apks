record `io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Flowable` @kind class {
  `io.reactivex.rxjava3.core.Scheduler` `io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.b` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.c` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.d` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.e` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.f` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.g` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange` v0 @kind this, `long` v1 , `long` v3 , `long` v5 , `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `io.reactivex.rxjava3.core.Scheduler` v10 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableIntervalRange;.<init>:(JJJJLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L497428.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/core/Flowable;.<init>:()V` @kind direct;
  #L49742e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.e` @type ^`long` := v5 @kind wide;
  #L497432.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.f` @type ^`long` := v7 @kind wide;
  #L497436.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.g` @type ^`java.util.concurrent.TimeUnit` := v9 @kind object;
  #L49743a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.b` @type ^`io.reactivex.rxjava3.core.Scheduler` := v10 @kind object;
  #L49743e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.c` @type ^`long` := v1 @kind wide;
  #L497442.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.d` @type ^`long` := v3 @kind wide;
  #L497446.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange` v8 @kind this, `org.reactivestreams.Subscriber` v9 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableIntervalRange;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L497458.  v7:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange$a`;
  #L49745c.  v2:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.c` @type ^`long` @kind wide;
  #L497460.  v4:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.d` @type ^`long` @kind wide;
  #L497464.  v0:= v7 @kind object;
  #L497466.  v1:= v9 @kind object;
  #L497468.  call `<init>`(v0, v1, v2, v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableIntervalRange$a;.<init>:(Lorg/reactivestreams/Subscriber;JJ)V` @kind direct;
  #L49746e.  call `onSubscribe`(v9, v7) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L497474.  v0:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.b` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L497478.  v9:= instanceof @variable v0 @type ^`io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler` @kind boolean;
  #L49747c.  if v9 == 0 then goto L4974a4;
  #L497480.  call temp:= `createWorker`(v0) @signature `Lio/reactivex/rxjava3/core/Scheduler;.createWorker:()Lio/reactivex/rxjava3/core/Scheduler$Worker;` @kind virtual;
  #L497486.  v0:= temp @kind object;
  #L497488.  call `a`(v7, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableIntervalRange$a;.a:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind virtual;
  #L49748e.  v2:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.e` @type ^`long` @kind wide;
  #L497492.  v4:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.f` @type ^`long` @kind wide;
  #L497496.  v6:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.g` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L49749a.  v1:= v7 @kind object;
  #L49749c.  call temp:= `schedulePeriodically`(v0, v1, v2, v4, v6) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4974a2.  goto L4974c0;
  #L4974a4.  v2:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.e` @type ^`long` @kind wide;
  #L4974a8.  v4:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.f` @type ^`long` @kind wide;
  #L4974ac.  v6:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.g` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4974b0.  v1:= v7 @kind object;
  #L4974b2.  call temp:= `schedulePeriodicallyDirect`(v0, v1, v2, v4, v6) @signature `Lio/reactivex/rxjava3/core/Scheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4974b8.  v9:= temp @kind object;
  #L4974ba.  call `a`(v7, v9) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableIntervalRange$a;.a:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind virtual;
  #L4974c0.  return @kind void;
}
