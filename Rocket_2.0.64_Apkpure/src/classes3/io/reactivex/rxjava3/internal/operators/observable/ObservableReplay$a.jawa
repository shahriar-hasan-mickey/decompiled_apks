record `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$g` @kind interface {
  `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f` `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a.a` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a.b` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a.c` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a` v1 @kind this, `boolean` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.<init>:(Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4c5b7c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4c5b82.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a.c` @type ^`boolean` := v2 @kind boolean;
  #L4c5b86.  v2:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f`;
  #L4c5b8a.  v0:= 0I;
  #L4c5b8c.  call `<init>`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$f;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4c5b92.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f` := v2 @kind object;
  #L4c5b96.  call `set`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4c5b9c.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4c5c14.  call temp:= `error`(v2) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L4c5c1a.  v2:= temp @kind object;
  #L4c5c1c.  call temp:= `e`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4c5c22.  v2:= temp @kind object;
  #L4c5c24.  v0:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f`;
  #L4c5c28.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$f;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4c5c2e.  call `d`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.d:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$f;)V` @kind virtual;
  #L4c5c34.  call `l`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.l:()V` @kind virtual;
  #L4c5c3a.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.b:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4c5c4c.  call temp:= `next`(v2) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4c5c52.  v2:= temp @kind object;
  #L4c5c54.  call temp:= `e`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4c5c5a.  v2:= temp @kind object;
  #L4c5c5c.  v0:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f`;
  #L4c5c60.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$f;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4c5c66.  call `d`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.d:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$f;)V` @kind virtual;
  #L4c5c6c.  call `k`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.k:()V` @kind virtual;
  #L4c5c72.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a` v5 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.c:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$d;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4c5cc0.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c5cc6.  v0:= temp;
  #L4c5cc8.  if v0 == 0 then goto L4c5cce;
  #L4c5ccc.  return @kind void;
  #L4c5cce.  v0:= 1I;
  #L4c5cd0.  call temp:= `a`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$d;.a:()Ljava/lang/Object;` @kind virtual;
  #L4c5cd6.  v1:= temp @kind object;
  #L4c5cd8.  v1:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f`) v1 @kind object;
  #L4c5cdc.  if v1 != 0 then goto L4c5cec;
  #L4c5ce0.  call temp:= `f`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.f:()Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$f;` @kind virtual;
  #L4c5ce6.  v1:= temp @kind object;
  #L4c5ce8.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d.c` @type ^`java.lang.Object` := v1 @kind object;
  #L4c5cec.  call temp:= `isDisposed`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$d;.isDisposed:()Z` @kind virtual;
  #L4c5cf2.  v2:= temp;
  #L4c5cf4.  v3:= 0I;
  #L4c5cf6.  if v2 == 0 then goto L4c5d00;
  #L4c5cfa.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d.c` @type ^`java.lang.Object` := v3 @kind object;
  #L4c5cfe.  return @kind void;
  #L4c5d00.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c5d06.  v2:= temp @kind object;
  #L4c5d08.  v2:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f`) v2 @kind object;
  #L4c5d0c.  if v2 == 0 then goto L4c5d36;
  #L4c5d10.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f.a` @type ^`java.lang.Object` @kind object;
  #L4c5d14.  call temp:= `g`(v5, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.g:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4c5d1a.  v1:= temp @kind object;
  #L4c5d1c.  v4:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d.b` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c5d20.  call temp:= `accept`(v1, v4) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.accept:(Ljava/lang/Object;Lio/reactivex/rxjava3/core/Observer;)Z` @kind static;
  #L4c5d26.  v1:= temp;
  #L4c5d28.  if v1 == 0 then goto L4c5d32;
  #L4c5d2c.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d.c` @type ^`java.lang.Object` := v3 @kind object;
  #L4c5d30.  return @kind void;
  #L4c5d32.  v1:= v2 @kind object;
  #L4c5d34.  goto L4c5cec;
  #L4c5d36.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d.c` @type ^`java.lang.Object` := v1 @kind object;
  #L4c5d3a.  v0:= -v0 @kind int;
  #L4c5d3c.  call temp:= `addAndGet`(v6, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4c5d42.  v0:= temp;
  #L4c5d44.  if v0 != 0 then goto L4c5cd0;
  #L4c5d48.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.complete:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4c5bdc.  call temp:= `complete`() @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L4c5be2.  v0:= temp @kind object;
  #L4c5be4.  call temp:= `e`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4c5bea.  v0:= temp @kind object;
  #L4c5bec.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f`;
  #L4c5bf0.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$f;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4c5bf6.  call `d`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.d:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$f;)V` @kind virtual;
  #L4c5bfc.  call `l`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.l:()V` @kind virtual;
  #L4c5c02.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a` v1 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.d:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$f;)V` @AccessFlag FINAL {
    temp;
    v0;

  #L4c5bb0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f` @kind object;
  #L4c5bb4.  call `set`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4c5bba.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f` := v2 @kind object;
  #L4c5bbe.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a.b` @type ^`int`;
  #L4c5bc2.  v2:= v2 + 1;
  #L4c5bc6.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a.b` @type ^`int` := v2;
  #L4c5bca.  return @kind void;
}
procedure `java.lang.Object` `e`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;

  #L4c5b54.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f` `f`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.f:()Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$f;` @AccessFlag  {
    temp;
    v0;

  #L4c5b34.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c5b3a.  v0:= temp @kind object;
  #L4c5b3c.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f`) v0 @kind object;
  #L4c5b40.  return v0 @kind object;
}
procedure `java.lang.Object` `g`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.g:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;

  #L4c5b68.  return v1 @kind object;
}
procedure `void` `h`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.h:()V` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L4c5c84.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c5c8a.  v0:= temp @kind object;
  #L4c5c8c.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f`) v0 @kind object;
  #L4c5c90.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c5c96.  v0:= temp @kind object;
  #L4c5c98.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f`) v0 @kind object;
  #L4c5c9c.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a.b` @type ^`int`;
  #L4c5ca0.  v1:= v1 + -1;
  #L4c5ca4.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a.b` @type ^`int` := v1;
  #L4c5ca8.  call `i`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.i:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$f;)V` @kind virtual;
  #L4c5cae.  return @kind void;
}
procedure `void` `i`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a` v2 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.i:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$f;)V` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L4c5d5c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a.c` @type ^`boolean` @kind boolean;
  #L4c5d60.  if v0 == 0 then goto L4c5d80;
  #L4c5d64.  v0:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f`;
  #L4c5d68.  v1:= 0I;
  #L4c5d6a.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$f;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4c5d70.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c5d76.  v3:= temp @kind object;
  #L4c5d78.  call `lazySet`(v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4c5d7e.  v3:= v0 @kind object;
  #L4c5d80.  call `set`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4c5d86.  return @kind void;
}
procedure `void` `j`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.j:()V` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4c5d98.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c5d9e.  v0:= temp @kind object;
  #L4c5da0.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f`) v0 @kind object;
  #L4c5da4.  v1:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f.a` @type ^`java.lang.Object` @kind object;
  #L4c5da8.  if v1 == 0 then goto L4c5dcc;
  #L4c5dac.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f`;
  #L4c5db0.  v2:= 0I;
  #L4c5db2.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$f;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4c5db8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c5dbe.  v0:= temp @kind object;
  #L4c5dc0.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4c5dc6.  call `set`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4c5dcc.  return @kind void;
}
procedure `void` `k`() @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.k:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `l`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.l:()V` @AccessFlag  {
    temp;

  #L4c5de0.  call `j`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.j:()V` @kind virtual;
  #L4c5de6.  return @kind void;
}
