record `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a$a` `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.e` @AccessFlag VOLATILE;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.f` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.g` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.h` @AccessFlag VOLATILE;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.i` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithMaybe$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c30a0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4c30a6.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4c30aa.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4c30ae.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4c30b4.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4c30b8.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a$a`;
  #L4c30bc.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithMaybe$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithMaybe$a;)V` @kind direct;
  #L4c30c2.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a$a` := v1 @kind object;
  #L4c30c6.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4c30ca.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4c30d0.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4c30d4.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithMaybe$a;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L4c3134.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c313a.  v0:= temp;
  #L4c313c.  if v0 != 0 then goto L4c3146;
  #L4c3140.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithMaybe$a;.b:()V` @kind virtual;
  #L4c3146.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a` v9 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithMaybe$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4c3158.  v0:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c315c.  v1:= 1I;
  #L4c315e.  v2:= 1I;
  #L4c3160.  v3:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.g` @type ^`boolean` @kind boolean;
  #L4c3164.  v4:= 0I;
  #L4c3166.  if v3 == 0 then goto L4c3174;
  #L4c316a.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.f` @type ^`java.lang.Object` := v4 @kind object;
  #L4c316e.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v4 @kind object;
  #L4c3172.  return @kind void;
  #L4c3174.  v3:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c3178.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c317e.  v3:= temp @kind object;
  #L4c3180.  if v3 == 0 then goto L4c3198;
  #L4c3184.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.f` @type ^`java.lang.Object` := v4 @kind object;
  #L4c3188.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v4 @kind object;
  #L4c318c.  v1:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c3190.  call `tryTerminateConsumer`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4c3196.  return @kind void;
  #L4c3198.  v3:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.i` @type ^`int`;
  #L4c319c.  v5:= 2I;
  #L4c319e.  if v3 != v1 then goto L4c31b6;
  #L4c31a2.  v3:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.f` @type ^`java.lang.Object` @kind object;
  #L4c31a6.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.f` @type ^`java.lang.Object` := v4 @kind object;
  #L4c31aa.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.i` @type ^`int` := v5;
  #L4c31ae.  call `onNext`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c31b4.  v3:= 2I;
  #L4c31b6.  v6:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.h` @type ^`boolean` @kind boolean;
  #L4c31ba.  v7:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4c31be.  if v7 == 0 then goto L4c31cc;
  #L4c31c2.  call temp:= `poll`(v7) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4c31c8.  v7:= temp @kind object;
  #L4c31ca.  goto L4c31ce;
  #L4c31cc.  v7:= v4 @kind object;
  #L4c31ce.  if v7 != 0 then goto L4c31d6;
  #L4c31d2.  v8:= 1I;
  #L4c31d4.  goto L4c31d8;
  #L4c31d6.  v8:= 0I;
  #L4c31d8.  if v6 == 0 then goto L4c31f0;
  #L4c31dc.  if v8 == 0 then goto L4c31f0;
  #L4c31e0.  if v3 != v5 then goto L4c31f0;
  #L4c31e4.  v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v4 @kind object;
  #L4c31e8.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4c31ee.  return @kind void;
  #L4c31f0.  if v8 == 0 then goto L4c3204;
  #L4c31f4.  v2:= -v2 @kind int;
  #L4c31f6.  call temp:= `addAndGet`(v9, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4c31fc.  v2:= temp;
  #L4c31fe.  if v2 != 0 then goto L4c3160;
  #L4c3202.  return @kind void;
  #L4c3204.  call `onNext`(v0, v7) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c320a.  goto L4c3160;
}
procedure `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithMaybe$a;.c:()Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4c3070.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4c3074.  if v0 != 0 then goto L4c308e;
  #L4c3078.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4c307c.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Observable;.bufferSize:()I` @kind static;
  #L4c3082.  v1:= temp;
  #L4c3084.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4c308a.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v0 @kind object;
  #L4c308e.  return v0 @kind object;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithMaybe$a;.d:()V` @AccessFlag  {
    temp;
    v0;

  #L4c32e8.  v0:= 2I;
  #L4c32ea.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.i` @type ^`int` := v0;
  #L4c32ee.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithMaybe$a;.a:()V` @kind virtual;
  #L4c32f4.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithMaybe$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c30e8.  v0:= 1I;
  #L4c30ea.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.g` @type ^`boolean` := v0 @kind boolean;
  #L4c30ee.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c30f2.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4c30f8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a$a` @kind object;
  #L4c30fc.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4c3102.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c3106.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4c310c.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c3112.  v0:= temp;
  #L4c3114.  if v0 != 0 then goto L4c3122;
  #L4c3118.  v0:= 0I;
  #L4c311a.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v0 @kind object;
  #L4c311e.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.f` @type ^`java.lang.Object` := v0 @kind object;
  #L4c3122.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithMaybe$a;.e:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4c3308.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c330c.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4c3312.  v2:= temp;
  #L4c3314.  if v2 == 0 then goto L4c3328;
  #L4c3318.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c331c.  call temp:= `dispose`(v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4c3322.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithMaybe$a;.a:()V` @kind virtual;
  #L4c3328.  return @kind void;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithMaybe$a;.f:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4c333c.  v0:= 0I;
  #L4c333e.  v1:= 1I;
  #L4c3340.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4c3346.  v0:= temp;
  #L4c3348.  if v0 == 0 then goto L4c335e;
  #L4c334c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c3350.  call `onNext`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c3356.  v3:= 2I;
  #L4c3358.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.i` @type ^`int` := v3;
  #L4c335c.  goto L4c3374;
  #L4c335e.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.f` @type ^`java.lang.Object` := v3 @kind object;
  #L4c3362.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.i` @type ^`int` := v1;
  #L4c3366.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c336c.  v3:= temp;
  #L4c336e.  if v3 == 0 then goto L4c3374;
  #L4c3372.  return @kind void;
  #L4c3374.  call `b`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithMaybe$a;.b:()V` @kind virtual;
  #L4c337a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithMaybe$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c3044.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c3048.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c304e.  v0:= temp @kind object;
  #L4c3050.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4c3054.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4c305a.  v0:= temp;
  #L4c305c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c321c.  v0:= 1I;
  #L4c321e.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4c3222.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithMaybe$a;.a:()V` @kind virtual;
  #L4c3228.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c323c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4c3240.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4c3246.  v2:= temp;
  #L4c3248.  if v2 == 0 then goto L4c325c;
  #L4c324c.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a$a` @kind object;
  #L4c3250.  call temp:= `dispose`(v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4c3256.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithMaybe$a;.a:()V` @kind virtual;
  #L4c325c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c3270.  v0:= 0I;
  #L4c3272.  v1:= 1I;
  #L4c3274.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4c327a.  v0:= temp;
  #L4c327c.  if v0 == 0 then goto L4c3298;
  #L4c3280.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c3284.  call `onNext`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c328a.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4c3290.  v3:= temp;
  #L4c3292.  if v3 != 0 then goto L4c32b4;
  #L4c3296.  return @kind void;
  #L4c3298.  call temp:= `c`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithMaybe$a;.c:()Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;` @kind virtual;
  #L4c329e.  v0:= temp @kind object;
  #L4c32a0.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4c32a6.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c32ac.  v3:= temp;
  #L4c32ae.  if v3 == 0 then goto L4c32b4;
  #L4c32b2.  return @kind void;
  #L4c32b4.  call `b`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithMaybe$a;.b:()V` @kind virtual;
  #L4c32ba.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableMergeWithMaybe$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c32cc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c32d0.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4c32d6.  return @kind void;
}
