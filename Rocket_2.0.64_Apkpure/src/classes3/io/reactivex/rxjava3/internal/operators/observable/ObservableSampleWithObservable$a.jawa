record `io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c` @kind class {
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$a.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$a.f` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.core.ObservableSource` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSampleWithObservable$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/core/ObservableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c7408.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSampleWithObservable$c;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/core/ObservableSource;)V` @kind direct;
  #L4c740e.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4c7412.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4c7418.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$a.e` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L4c741c.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSampleWithObservable$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L4c7430.  v0:= 1I;
  #L4c7432.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$a.f` @type ^`boolean` := v0 @kind boolean;
  #L4c7436.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$a.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c743a.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c7440.  v0:= temp;
  #L4c7442.  if v0 != 0 then goto L4c7456;
  #L4c7446.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSampleWithObservable$c;.c:()V` @kind virtual;
  #L4c744c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c7450.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4c7456.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSampleWithObservable$a;.e:()V` @AccessFlag  {
    temp;
    v0;

  #L4c7468.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$a.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c746c.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c7472.  v0:= temp;
  #L4c7474.  if v0 != 0 then goto L4c74a2;
  #L4c7478.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$a.f` @type ^`boolean` @kind boolean;
  #L4c747c.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSampleWithObservable$c;.c:()V` @kind virtual;
  #L4c7482.  if v0 == 0 then goto L4c7492;
  #L4c7486.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c748a.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4c7490.  return @kind void;
  #L4c7492.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$a.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4c7496.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4c749c.  v0:= temp;
  #L4c749e.  if v0 != 0 then goto L4c7478;
  #L4c74a2.  return @kind void;
}
