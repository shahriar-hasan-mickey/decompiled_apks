record `io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOn$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.SingleObserver` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.rxjava3.core.SingleObserver` `io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOn$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler` `io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOn$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOn$a.c` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOn$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOn$a` v0 @kind this, `io.reactivex.rxjava3.core.SingleObserver` v1 @kind object, `io.reactivex.rxjava3.core.Scheduler` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleUnsubscribeOn$a;.<init>:(Lio/reactivex/rxjava3/core/SingleObserver;Lio/reactivex/rxjava3/core/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d831c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4d8322.  v0.`io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOn$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` := v1 @kind object;
  #L4d8326.  v0.`io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOn$a.b` @type ^`io.reactivex.rxjava3.core.Scheduler` := v2 @kind object;
  #L4d832a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOn$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleUnsubscribeOn$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d833c.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4d8340.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4d8346.  v1:= temp @kind object;
  #L4d8348.  v1:= (`io.reactivex.rxjava3.disposables.Disposable`) v1 @kind object;
  #L4d834c.  if v1 == v0 then goto L4d835e;
  #L4d8350.  v2.`io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOn$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v1 @kind object;
  #L4d8354.  v0:= v2.`io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOn$a.b` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4d8358.  call temp:= `scheduleDirect`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Scheduler;.scheduleDirect:(Ljava/lang/Runnable;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4d835e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleUnsubscribeOn$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d82f4.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d82fa.  v0:= temp @kind object;
  #L4d82fc.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4d8300.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4d8306.  v0:= temp;
  #L4d8308.  return v0;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOn$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleUnsubscribeOn$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d8370.  v0:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOn$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4d8374.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d837a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOn$a` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleUnsubscribeOn$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4d838c.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4d8392.  v1:= temp;
  #L4d8394.  if v1 == 0 then goto L4d83a2;
  #L4d8398.  v1:= v0.`io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOn$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4d839c.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4d83a2.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOn$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleUnsubscribeOn$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d83b4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOn$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4d83b8.  call `onSuccess`(v0, v2) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4d83be.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOn$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleUnsubscribeOn$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d83d0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOn$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4d83d4.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4d83da.  return @kind void;
}
