record `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface {
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$f` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e.h` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e.i` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` v1 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$f` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$e;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$f;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L48bad0.  v0:= 0I;
  #L48bad2.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.<init>:(Z)V` @kind direct;
  #L48bad8.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e.h` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$f` := v2 @kind object;
  #L48badc.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$e;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L48baf0.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e.i` @type ^`long` @kind wide;
  #L48baf4.  v2:= 0L;
  #L48baf8.  v4:= lcmp(v0, v2);
  #L48bafc.  if v4 == 0 then goto L48bb0a;
  #L48bb00.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e.i` @type ^`long` := v2 @kind wide;
  #L48bb04.  call `produced`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @kind virtual;
  #L48bb0a.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e.h` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$f` @kind object;
  #L48bb0e.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$f;.b:()V` @kind interface;
  #L48bb14.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$e;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L48bb28.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e.i` @type ^`long` @kind wide;
  #L48bb2c.  v2:= 0L;
  #L48bb30.  v4:= lcmp(v0, v2);
  #L48bb34.  if v4 == 0 then goto L48bb42;
  #L48bb38.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e.i` @type ^`long` := v2 @kind wide;
  #L48bb3c.  call `produced`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @kind virtual;
  #L48bb42.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e.h` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$f` @kind object;
  #L48bb46.  call `a`(v0, v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$f;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L48bb4c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$e;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L48bb60.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e.i` @type ^`long` @kind wide;
  #L48bb64.  v2:= 1L;
  #L48bb68.  v0:= v0 + v2 @kind long;
  #L48bb6a.  v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e.i` @type ^`long` := v0 @kind wide;
  #L48bb6e.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e.h` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$f` @kind object;
  #L48bb72.  call `c`(v0, v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$f;.c:(Ljava/lang/Object;)V` @kind interface;
  #L48bb78.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` v0 @kind this, `org.reactivestreams.Subscription` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$e;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;

  #L48bb8c.  call `setSubscription`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L48bb92.  return @kind void;
}
