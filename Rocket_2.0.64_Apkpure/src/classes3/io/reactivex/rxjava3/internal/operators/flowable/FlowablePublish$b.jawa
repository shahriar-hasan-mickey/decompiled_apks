record `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.d` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.f` @AccessFlag VOLATILE;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.g` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.h` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.i` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.j` @AccessFlag ;
}
global `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a`[] `@@io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.k` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a`[] `@@io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.l` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L49b42c.  v0:= 0I;
  #L49b42e.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a`[v0];
  #L49b432.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.k` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a`[] := v1 @kind object;
  #L49b436.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a`[v0];
  #L49b43a.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.l` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a`[] := v0 @kind object;
  #L49b43e.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b` v0 @kind this, `java.util.concurrent.atomic.AtomicReference` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49b450.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L49b456.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L49b45a.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L49b45e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L49b464.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L49b468.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L49b46c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L49b472.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L49b476.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.e` @type ^`int` := v2;
  #L49b47a.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L49b47e.  v2:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.k` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a`[] @kind object;
  #L49b482.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L49b488.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L49b48c.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b` v4 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.a:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L49b340.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49b344.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49b34a.  v0:= temp @kind object;
  #L49b34c.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a`[]) v0 @kind object;
  #L49b350.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.l` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a`[] @kind object;
  #L49b354.  v2:= 0I;
  #L49b356.  if v0 != v1 then goto L49b35c;
  #L49b35a.  return v2;
  #L49b35c.  v1:= length @variable v0;
  #L49b35e.  v3:= v1 + 1;
  #L49b362.  v3:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a`[v3];
  #L49b366.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L49b36c.  v3[v1]:= v5 @kind object;
  #L49b370.  v1:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49b374.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L49b37a.  v0:= temp;
  #L49b37c.  if v0 == 0 then goto L49b340;
  #L49b380.  v5:= 1I;
  #L49b382.  return v5;
}
procedure `boolean` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b` v3 @kind this, `boolean` v4 , `boolean` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.b:(ZZ)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L49b394.  v0:= 0I;
  #L49b396.  if v4 == 0 then goto L49b3ec;
  #L49b39a.  if v5 == 0 then goto L49b3ec;
  #L49b39e.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.i` @type ^`java.lang.Throwable` @kind object;
  #L49b3a2.  if v4 == 0 then goto L49b3ae;
  #L49b3a6.  call `e`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.e:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49b3ac.  goto L49b3e8;
  #L49b3ae.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49b3b2.  v5:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.l` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a`[] @kind object;
  #L49b3b6.  call temp:= `getAndSet`(v4, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L49b3bc.  v4:= temp @kind object;
  #L49b3be.  v4:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a`[]) v4 @kind object;
  #L49b3c2.  v5:= length @variable v4;
  #L49b3c4.  if v0 >= v5 then goto L49b3e8;
  #L49b3c8.  v1:= v4[v0] @kind object;
  #L49b3cc.  call temp:= `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$a;.a:()Z` @kind virtual;
  #L49b3d2.  v2:= temp;
  #L49b3d4.  if v2 != 0 then goto L49b3e2;
  #L49b3d8.  v1:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49b3dc.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L49b3e2.  v0:= v0 + 1;
  #L49b3e6.  goto L49b3c4;
  #L49b3e8.  v4:= 1I;
  #L49b3ea.  return v4;
  #L49b3ec.  return v0;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b` v21 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;

  #L49b4d8.  v1:= v21 @kind object;
  #L49b4dc.  call temp:= `getAndIncrement`(v21) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L49b4e2.  v0:= temp;
  #L49b4e4.  if v0 == 0 then goto L49b4ea;
  #L49b4e8.  return @kind void;
  #L49b4ea.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L49b4ee.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.j` @type ^`int`;
  #L49b4f2.  v3:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.e` @type ^`int`;
  #L49b4f6.  v4:= v3 ^> 2;
  #L49b4fa.  v3:= v3 - v4 @kind int;
  #L49b4fc.  v4:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.g` @type ^`int`;
  #L49b500.  v6:= 1I;
  #L49b502.  if v4 == v6 then goto L49b50a;
  #L49b506.  v4:= 1I;
  #L49b508.  goto L49b50c;
  #L49b50a.  v4:= 0I;
  #L49b50c.  v7:= 1I;
  #L49b50e.  v20:= v2;
  #L49b512.  v2:= v0 @kind object;
  #L49b514.  v0:= v20;
  #L49b518.  if v2 == 0 then goto L49b678;
  #L49b51c.  v8:= 9223372036854775807L;
  #L49b526.  v10:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49b52a.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49b530.  v10:= temp @kind object;
  #L49b532.  v10:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a`[]) v10 @kind object;
  #L49b536.  v11:= length @variable v10;
  #L49b538.  v12:= 0I;
  #L49b53a.  v13:= 0I;
  #L49b53c.  if v12 >= v11 then goto L49b570;
  #L49b540.  v14:= v10[v12] @kind object;
  #L49b544.  call temp:= `get`(v14) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L49b54a.  v15:= temp @kind wide;
  #L49b54c.  v17:= -9223372036854775808L;
  #L49b550.  v19:= lcmp(v15, v17);
  #L49b554.  if v19 == 0 then goto L49b56a;
  #L49b558.  v13:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a.c` @type ^`long` @kind wide;
  #L49b55c.  v13:= v15 - v13 @kind long;
  #L49b560.  call temp:= `min`(v13, v8) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L49b566.  v8:= temp @kind wide;
  #L49b568.  v13:= 1I;
  #L49b56a.  v12:= v12 + 1;
  #L49b56e.  goto L49b53c;
  #L49b570.  v11:= 0L;
  #L49b574.  if v13 != 0 then goto L49b57a;
  #L49b578.  v8:= v11 @kind wide;
  #L49b57a.  v13:= lcmp(v8, v11);
  #L49b57e.  if v13 == 0 then goto L49b65e;
  #L49b582.  v13:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.h` @type ^`boolean` @kind boolean;
  #L49b586.  call temp:= `poll`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L49b58c.  v14:= temp @kind object;
  #L49b58e.  if v14 != 0 then goto L49b596;
  #L49b592.  v15:= 1I;
  #L49b594.  goto L49b598;
  #L49b596.  v15:= 0I;
  #L49b598.  call temp:= `b`(v1, v13, v15) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.b:(ZZ)Z` @kind virtual;
  #L49b59e.  v13:= temp;
  #L49b5a0.  if v13 == 0 then goto L49b5a6;
  #L49b5a4.  return @kind void;
  #L49b5a6.  if v15 == 0 then goto L49b5ac;
  #L49b5aa.  goto L49b65e;
  #L49b5ac.  v13:= length @variable v10;
  #L49b5ae.  v15:= 0I;
  #L49b5b0.  v16:= 1L;
  #L49b5b4.  if v15 >= v13 then goto L49b5e8;
  #L49b5b8.  v5:= v10[v15] @kind object;
  #L49b5bc.  call temp:= `a`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$a;.a:()Z` @kind virtual;
  #L49b5c2.  v19:= temp;
  #L49b5c4.  if v19 != 0 then goto L49b5de;
  #L49b5c8.  v11:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49b5cc.  call `onNext`(v11, v14) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L49b5d2.  v11:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a.c` @type ^`long` @kind wide;
  #L49b5d6.  v11:= v11 + v16 @kind long;
  #L49b5da.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a.c` @type ^`long` := v11 @kind wide;
  #L49b5de.  v15:= v15 + 1;
  #L49b5e2.  v11:= 0L;
  #L49b5e6.  goto L49b5b0;
  #L49b5e8.  if v4 == 0 then goto L49b60e;
  #L49b5ec.  v0:= v0 + 1;
  #L49b5f0.  if v0 != v3 then goto L49b60e;
  #L49b5f4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49b5f8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49b5fe.  v0:= temp @kind object;
  #L49b600.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L49b604.  v11:= (`long`) v3 @kind i2l;
  #L49b606.  call `request`(v0, v11) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L49b60c.  v0:= 0I;
  #L49b60e.  v8:= v8 - v16 @kind long;
  #L49b612.  v5:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49b616.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49b61c.  v5:= temp @kind object;
  #L49b61e.  if v10 == v5 then goto L49b626;
  #L49b622.  goto L49b518;
  #L49b626.  v11:= 0L;
  #L49b62a.  goto L49b57a;
  #L49b62c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49b62e.  v3:= v0 @kind object;
  #L49b630.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L49b636.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49b63a.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49b640.  v0:= temp @kind object;
  #L49b642.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L49b646.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L49b64c.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L49b652.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.h` @type ^`boolean` := v6 @kind boolean;
  #L49b656.  call `e`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.e:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49b65c.  return @kind void;
  #L49b65e.  v5:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.h` @type ^`boolean` @kind boolean;
  #L49b662.  call temp:= `isEmpty`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L49b668.  v8:= temp;
  #L49b66a.  call temp:= `b`(v1, v5, v8) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.b:(ZZ)Z` @kind virtual;
  #L49b670.  v5:= temp;
  #L49b672.  if v5 == 0 then goto L49b678;
  #L49b676.  return @kind void;
  #L49b678.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.j` @type ^`int` := v0;
  #L49b67c.  v5:= -v7 @kind int;
  #L49b67e.  call temp:= `addAndGet`(v1, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L49b684.  v7:= temp;
  #L49b686.  if v7 != 0 then goto L49b68c;
  #L49b68a.  return @kind void;
  #L49b68c.  if v2 != 0 then goto L49b518;
  #L49b690.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L49b694.  goto L49b518;
  catch `java.lang.Throwable` @[L49b586..L49b58e] goto L49b62c;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b` v6 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.d:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L49b7e0.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49b7e4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49b7ea.  v0:= temp @kind object;
  #L49b7ec.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a`[]) v0 @kind object;
  #L49b7f0.  v1:= length @variable v0;
  #L49b7f2.  if v1 != 0 then goto L49b7f8;
  #L49b7f6.  goto L49b854;
  #L49b7f8.  v2:= -1I;
  #L49b7fa.  v3:= 0I;
  #L49b7fc.  v4:= 0I;
  #L49b7fe.  if v4 >= v1 then goto L49b814;
  #L49b802.  v5:= v0[v4] @kind object;
  #L49b806.  if v5 != v7 then goto L49b80e;
  #L49b80a.  v2:= v4;
  #L49b80c.  goto L49b814;
  #L49b80e.  v4:= v4 + 1;
  #L49b812.  goto L49b7fe;
  #L49b814.  if v2 >= 0 then goto L49b81a;
  #L49b818.  return @kind void;
  #L49b81a.  v4:= 1I;
  #L49b81c.  if v1 != v4 then goto L49b826;
  #L49b820.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.k` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a`[] @kind object;
  #L49b824.  goto L49b844;
  #L49b826.  v5:= v1 + -1;
  #L49b82a.  v5:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a`[v5];
  #L49b82e.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L49b834.  v3:= v2 + 1;
  #L49b838.  v1:= v1 - v2 @kind int;
  #L49b83a.  v1:= v1 - v4 @kind int;
  #L49b83c.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L49b842.  v1:= v5 @kind object;
  #L49b844.  v2:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49b848.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L49b84e.  v0:= temp;
  #L49b850.  if v0 == 0 then goto L49b7e0;
  #L49b854.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49b4a0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49b4a4.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.l` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a`[] @kind object;
  #L49b4a8.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L49b4ae.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49b4b2.  v1:= 0I;
  #L49b4b4.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L49b4ba.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49b4be.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L49b4c4.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.e:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L49b868.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49b86c.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.l` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a`[] @kind object;
  #L49b870.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L49b876.  v0:= temp @kind object;
  #L49b878.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a`[]) v0 @kind object;
  #L49b87c.  v1:= length @variable v0;
  #L49b87e.  v2:= 0I;
  #L49b880.  if v2 >= v1 then goto L49b8a4;
  #L49b884.  v3:= v0[v2] @kind object;
  #L49b888.  call temp:= `a`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$a;.a:()Z` @kind virtual;
  #L49b88e.  v4:= temp;
  #L49b890.  if v4 != 0 then goto L49b89e;
  #L49b894.  v3:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49b898.  call `onError`(v3, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L49b89e.  v2:= v2 + 1;
  #L49b8a2.  goto L49b880;
  #L49b8a4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49b400.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49b404.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49b40a.  v0:= temp @kind object;
  #L49b40c.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.l` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a`[] @kind object;
  #L49b410.  if v0 != v1 then goto L49b418;
  #L49b414.  v0:= 1I;
  #L49b416.  goto L49b41a;
  #L49b418.  v0:= 0I;
  #L49b41a.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49b6b4.  v0:= 1I;
  #L49b6b6.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.h` @type ^`boolean` := v0 @kind boolean;
  #L49b6ba.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.c:()V` @kind virtual;
  #L49b6c0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49b6d4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.h` @type ^`boolean` @kind boolean;
  #L49b6d8.  if v0 == 0 then goto L49b6e4;
  #L49b6dc.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L49b6e2.  goto L49b6f4;
  #L49b6e4.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.i` @type ^`java.lang.Throwable` := v2 @kind object;
  #L49b6e8.  v2:= 1I;
  #L49b6ea.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.h` @type ^`boolean` := v2 @kind boolean;
  #L49b6ee.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.c:()V` @kind virtual;
  #L49b6f4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49b708.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.g` @type ^`int`;
  #L49b70c.  if v0 != 0 then goto L49b736;
  #L49b710.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L49b714.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L49b71a.  v2:= temp;
  #L49b71c.  if v2 != 0 then goto L49b736;
  #L49b720.  v2:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L49b724.  v0:= "Prefetch queue is full?!" @kind object;
  #L49b728.  call `<init>`(v2, v0) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49b72e.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49b734.  return @kind void;
  #L49b736.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.c:()V` @kind virtual;
  #L49b73c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L49b750.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49b754.  call temp:= `setOnce`(v0, v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L49b75a.  v0:= temp;
  #L49b75c.  if v0 == 0 then goto L49b7cc;
  #L49b760.  v0:= instanceof @variable v4 @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind boolean;
  #L49b764.  if v0 == 0 then goto L49b7ae;
  #L49b768.  v0:= v4 @kind object;
  #L49b76a.  v0:= (`io.reactivex.rxjava3.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L49b76e.  v1:= 7I;
  #L49b770.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L49b776.  v1:= temp;
  #L49b778.  v2:= 1I;
  #L49b77a.  if v1 != v2 then goto L49b792;
  #L49b77e.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.g` @type ^`int` := v1;
  #L49b782.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L49b786.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.h` @type ^`boolean` := v2 @kind boolean;
  #L49b78a.  call `c`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.c:()V` @kind virtual;
  #L49b790.  return @kind void;
  #L49b792.  v2:= 2I;
  #L49b794.  if v1 != v2 then goto L49b7ae;
  #L49b798.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.g` @type ^`int` := v1;
  #L49b79c.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L49b7a0.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.e` @type ^`int`;
  #L49b7a4.  v0:= (`long`) v0 @kind i2l;
  #L49b7a6.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L49b7ac.  return @kind void;
  #L49b7ae.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L49b7b2.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.e` @type ^`int`;
  #L49b7b6.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L49b7bc.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L49b7c0.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b.e` @type ^`int`;
  #L49b7c4.  v0:= (`long`) v0 @kind i2l;
  #L49b7c6.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L49b7cc.  return @kind void;
}
