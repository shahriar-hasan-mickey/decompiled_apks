record `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a$a` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.ErrorMode` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.g` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.h` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.i` @AccessFlag VOLATILE;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.j` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.k` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `int` v3 , `io.reactivex.rxjava3.internal.util.ErrorMode` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapMaybe$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;ILio/reactivex/rxjava3/internal/util/ErrorMode;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b3ba8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4b3bae.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4b3bb2.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4b3bb6.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.f` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` := v4 @kind object;
  #L4b3bba.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4b3bbe.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4b3bc4.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4b3bc8.  v1:= new `io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a$a`;
  #L4b3bcc.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapMaybe$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapMaybe$a;)V` @kind direct;
  #L4b3bd2.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a$a` := v1 @kind object;
  #L4b3bd6.  v1:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4b3bda.  call `<init>`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4b3be0.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v1 @kind object;
  #L4b3be4.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a` v10 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapMaybe$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4b3c4c.  call temp:= `getAndIncrement`(v10) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4b3c52.  v0:= temp;
  #L4b3c54.  if v0 == 0 then goto L4b3c5a;
  #L4b3c58.  return @kind void;
  #L4b3c5a.  v0:= v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b3c5e.  v1:= v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.f` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4b3c62.  v2:= v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4b3c66.  v3:= v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b3c6a.  v4:= 1I;
  #L4b3c6c.  v5:= 1I;
  #L4b3c6e.  v6:= v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.i` @type ^`boolean` @kind boolean;
  #L4b3c72.  v7:= 0I;
  #L4b3c74.  if v6 == 0 then goto L4b3c84;
  #L4b3c78.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4b3c7e.  v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.j` @type ^`java.lang.Object` := v7 @kind object;
  #L4b3c82.  goto L4b3d52;
  #L4b3c84.  v6:= v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.k` @type ^`int`;
  #L4b3c88.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b3c8e.  v8:= temp @kind object;
  #L4b3c90.  if v8 == 0 then goto L4b3cba;
  #L4b3c94.  v8:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4b3c98.  if v1 == v8 then goto L4b3ca8;
  #L4b3c9c.  v8:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4b3ca0.  if v1 != v8 then goto L4b3cba;
  #L4b3ca4.  if v6 != 0 then goto L4b3cba;
  #L4b3ca8.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4b3cae.  v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.j` @type ^`java.lang.Object` := v7 @kind object;
  #L4b3cb2.  call `tryTerminateConsumer`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4b3cb8.  return @kind void;
  #L4b3cba.  v8:= 0I;
  #L4b3cbc.  if v6 != 0 then goto L4b3d38;
  #L4b3cc0.  v6:= v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.h` @type ^`boolean` @kind boolean;
  #L4b3cc4.  call temp:= `poll`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4b3cca.  v7:= temp @kind object;
  #L4b3ccc.  if v7 != 0 then goto L4b3cd2;
  #L4b3cd0.  v8:= 1I;
  #L4b3cd2.  if v6 == 0 then goto L4b3ce2;
  #L4b3cd6.  if v8 == 0 then goto L4b3ce2;
  #L4b3cda.  call `tryTerminateConsumer`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4b3ce0.  return @kind void;
  #L4b3ce2.  if v8 == 0 then goto L4b3ce8;
  #L4b3ce6.  goto L4b3d52;
  #L4b3ce8.  v6:= v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4b3cec.  call temp:= `apply`(v6, v7) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4b3cf2.  v6:= temp @kind object;
  #L4b3cf4.  v7:= "The mapper returned a null MaybeSource" @kind object;
  #L4b3cf8.  call temp:= `requireNonNull`(v6, v7) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b3cfe.  v6:= (`io.reactivex.rxjava3.core.MaybeSource`) v6 @kind object;
  #L4b3d02.  v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.k` @type ^`int` := v4;
  #L4b3d06.  v7:= v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a$a` @kind object;
  #L4b3d0a.  call `subscribe`(v6, v7) @signature `Lio/reactivex/rxjava3/core/MaybeSource;.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind interface;
  #L4b3d10.  goto L4b3d52;
  #L4b3d12.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b3d14.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b3d1a.  v4:= v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b3d1e.  call `dispose`(v4) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4b3d24.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4b3d2a.  call temp:= `tryAddThrowableOrReport`(v3, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4b3d30.  call `tryTerminateConsumer`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4b3d36.  return @kind void;
  #L4b3d38.  v9:= 2I;
  #L4b3d3a.  if v6 != v9 then goto L4b3d52;
  #L4b3d3e.  v6:= v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.j` @type ^`java.lang.Object` @kind object;
  #L4b3d42.  v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.j` @type ^`java.lang.Object` := v7 @kind object;
  #L4b3d46.  call `onNext`(v0, v6) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4b3d4c.  v10.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.k` @type ^`int` := v8;
  #L4b3d50.  goto L4b3c6e;
  #L4b3d52.  v5:= -v5 @kind int;
  #L4b3d54.  call temp:= `addAndGet`(v10, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4b3d5a.  v5:= temp;
  #L4b3d5c.  if v5 != 0 then goto L4b3c6e;
  #L4b3d60.  return @kind void;
  catch `java.lang.Throwable` @[L4b3ce8..L4b3d02] goto L4b3d12;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapMaybe$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L4b3d80.  v0:= 0I;
  #L4b3d82.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.k` @type ^`int` := v0;
  #L4b3d86.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapMaybe$a;.a:()V` @kind virtual;
  #L4b3d8c.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapMaybe$a;.c:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4b3da0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b3da4.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4b3daa.  v2:= temp;
  #L4b3dac.  if v2 == 0 then goto L4b3dd2;
  #L4b3db0.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.f` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4b3db4.  v0:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.END` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4b3db8.  if v2 == v0 then goto L4b3dc6;
  #L4b3dbc.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b3dc0.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4b3dc6.  v2:= 0I;
  #L4b3dc8.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.k` @type ^`int` := v2;
  #L4b3dcc.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapMaybe$a;.a:()V` @kind virtual;
  #L4b3dd2.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapMaybe$a;.d:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;

  #L4b3de4.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.j` @type ^`java.lang.Object` := v1 @kind object;
  #L4b3de8.  v1:= 2I;
  #L4b3dea.  v0.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.k` @type ^`int` := v1;
  #L4b3dee.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapMaybe$a;.a:()V` @kind virtual;
  #L4b3df4.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapMaybe$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b3bf8.  v0:= 1I;
  #L4b3bfa.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.i` @type ^`boolean` := v0 @kind boolean;
  #L4b3bfe.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b3c02.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4b3c08.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a$a` @kind object;
  #L4b3c0c.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapMaybe$a$a;.a:()V` @kind virtual;
  #L4b3c12.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b3c16.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4b3c1c.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4b3c22.  v0:= temp;
  #L4b3c24.  if v0 != 0 then goto L4b3c38;
  #L4b3c28.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4b3c2c.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4b3c32.  v0:= 0I;
  #L4b3c34.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.j` @type ^`java.lang.Object` := v0 @kind object;
  #L4b3c38.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapMaybe$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b3b90.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.i` @type ^`boolean` @kind boolean;
  #L4b3b94.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b3e08.  v0:= 1I;
  #L4b3e0a.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4b3e0e.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapMaybe$a;.a:()V` @kind virtual;
  #L4b3e14.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b3e28.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.c` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b3e2c.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4b3e32.  v2:= temp;
  #L4b3e34.  if v2 == 0 then goto L4b3e5a;
  #L4b3e38.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.f` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4b3e3c.  v0:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4b3e40.  if v2 != v0 then goto L4b3e4e;
  #L4b3e44.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.d` @type ^`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a$a` @kind object;
  #L4b3e48.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapMaybe$a$a;.a:()V` @kind virtual;
  #L4b3e4e.  v2:= 1I;
  #L4b3e50.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.h` @type ^`boolean` := v2 @kind boolean;
  #L4b3e54.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapMaybe$a;.a:()V` @kind virtual;
  #L4b3e5a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b3e6c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4b3e70.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4b3e76.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapMaybe$a;.a:()V` @kind virtual;
  #L4b3e7c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/ObservableConcatMapMaybe$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b3e90.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b3e94.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4b3e9a.  v0:= temp;
  #L4b3e9c.  if v0 == 0 then goto L4b3eae;
  #L4b3ea0.  v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.g` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4b3ea4.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b3ea8.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4b3eae.  return @kind void;
}
