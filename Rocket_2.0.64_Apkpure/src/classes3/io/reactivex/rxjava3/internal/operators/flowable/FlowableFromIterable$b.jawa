record `io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a` @kind class {
  `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$b.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$b` v0 @kind this, `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` v1 @kind object, `java.util.Iterator` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromIterable$b;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;Ljava/util/Iterator;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L494554.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromIterable$a;.<init>:(Ljava/util/Iterator;)V` @kind direct;
  #L49455a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$b.d` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L49455e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$b` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromIterable$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L494570.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.a` @type ^`java.util.Iterator` @kind object;
  #L494574.  v1:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$b.d` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L494578.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L49457c.  if v2 == 0 then goto L494582;
  #L494580.  return @kind void;
  #L494582.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L494588.  v2:= temp @kind object;
  #L49458a.  v3:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L49458e.  if v3 == 0 then goto L494594;
  #L494592.  return @kind void;
  #L494594.  if v2 != 0 then goto L4945ae;
  #L494598.  v0:= new `java.lang.NullPointerException`;
  #L49459c.  v2:= "Iterator.next() returned a null value" @kind object;
  #L4945a0.  call `<init>`(v0, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4945a6.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4945ac.  return @kind void;
  #L4945ae.  call temp:= `tryOnNext`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L4945b4.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L4945b8.  if v2 == 0 then goto L4945be;
  #L4945bc.  return @kind void;
  #L4945be.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4945c4.  v2:= temp;
  #L4945c6.  if v2 != 0 then goto L494578;
  #L4945ca.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L4945ce.  if v0 != 0 then goto L4945d8;
  #L4945d2.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4945d8.  return @kind void;
  #L4945da.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4945dc.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4945e2.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4945e8.  return @kind void;
  #L4945ea.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4945ec.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4945f2.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4945f8.  return @kind void;
  catch `java.lang.Throwable` @[L494582..L49458a] goto L4945ea;
  catch `java.lang.Throwable` @[L4945be..L4945c6] goto L4945da;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$b` v8 @kind this, `long` v9 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromIterable$b;.e:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L494624.  v0:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.a` @type ^`java.util.Iterator` @kind object;
  #L494628.  v1:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$b.d` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L49462c.  v2:= 0L;
  #L494630.  v4:= v2 @kind wide;
  #L494632.  v6:= lcmp(v4, v9);
  #L494636.  if v6 == 0 then goto L4946ca;
  #L49463a.  v6:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L49463e.  if v6 == 0 then goto L494644;
  #L494642.  return @kind void;
  #L494644.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L49464a.  v6:= temp @kind object;
  #L49464c.  v7:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L494650.  if v7 == 0 then goto L494656;
  #L494654.  return @kind void;
  #L494656.  if v6 != 0 then goto L494670;
  #L49465a.  v9:= new `java.lang.NullPointerException`;
  #L49465e.  v10:= "Iterator.next() returned a null value" @kind object;
  #L494662.  call `<init>`(v9, v10) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L494668.  call `onError`(v1, v9) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L49466e.  return @kind void;
  #L494670.  call temp:= `tryOnNext`(v1, v6) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L494676.  v6:= temp;
  #L494678.  v7:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L49467c.  if v7 == 0 then goto L494682;
  #L494680.  return @kind void;
  #L494682.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L494688.  v7:= temp;
  #L49468a.  if v7 != 0 then goto L49469e;
  #L49468e.  v9:= v8.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L494692.  if v9 != 0 then goto L49469c;
  #L494696.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L49469c.  return @kind void;
  #L49469e.  if v6 == 0 then goto L494632;
  #L4946a2.  v6:= 1L;
  #L4946a6.  v4:= v4 + v6 @kind long;
  #L4946a8.  goto L494632;
  #L4946aa.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4946ac.  call `throwIfFatal`(v9) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4946b2.  call `onError`(v1, v9) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4946b8.  return @kind void;
  #L4946ba.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4946bc.  call `throwIfFatal`(v9) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4946c2.  call `onError`(v1, v9) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4946c8.  return @kind void;
  #L4946ca.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4946d0.  v9:= temp @kind wide;
  #L4946d2.  v6:= lcmp(v4, v9);
  #L4946d6.  if v6 != 0 then goto L494632;
  #L4946da.  v9:= -v4 @kind long;
  #L4946dc.  call temp:= `addAndGet`(v8, v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L4946e2.  v9:= temp @kind wide;
  #L4946e4.  v4:= lcmp(v9, v2);
  #L4946e8.  if v4 != 0 then goto L494630;
  #L4946ec.  return @kind void;
  catch `java.lang.Throwable` @[L494644..L49464c] goto L4946ba;
  catch `java.lang.Throwable` @[L494682..L49468a] goto L4946aa;
}
