record `io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$c` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$c.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRange$c;.<init>:(Lorg/reactivestreams/Subscriber;II)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49c5e4.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRange$a;.<init>:(II)V` @kind direct;
  #L49c5ea.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$c.d` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L49c5ee.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$c` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRange$c;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L49c600.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.a` @type ^`int`;
  #L49c604.  v1:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$c.d` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49c608.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.b` @type ^`int`;
  #L49c60c.  if v2 == v0 then goto L49c62e;
  #L49c610.  v3:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.c` @type ^`boolean` @kind boolean;
  #L49c614.  if v3 == 0 then goto L49c61a;
  #L49c618.  return @kind void;
  #L49c61a.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L49c620.  v3:= temp @kind object;
  #L49c622.  call `onNext`(v1, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L49c628.  v2:= v2 + 1;
  #L49c62c.  goto L49c60c;
  #L49c62e.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.c` @type ^`boolean` @kind boolean;
  #L49c632.  if v0 == 0 then goto L49c638;
  #L49c636.  return @kind void;
  #L49c638.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L49c63e.  return @kind void;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$c` v9 @kind this, `long` v10 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRange$c;.f:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L49c650.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.a` @type ^`int`;
  #L49c654.  v1:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.b` @type ^`int`;
  #L49c658.  v2:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$c.d` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49c65c.  v3:= 0L;
  #L49c660.  v5:= v3 @kind wide;
  #L49c662.  v7:= lcmp(v5, v10);
  #L49c666.  if v7 == 0 then goto L49c692;
  #L49c66a.  if v1 == v0 then goto L49c692;
  #L49c66e.  v7:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.c` @type ^`boolean` @kind boolean;
  #L49c672.  if v7 == 0 then goto L49c678;
  #L49c676.  return @kind void;
  #L49c678.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L49c67e.  v7:= temp @kind object;
  #L49c680.  call `onNext`(v2, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L49c686.  v7:= 1L;
  #L49c68a.  v5:= v5 + v7 @kind long;
  #L49c68c.  v1:= v1 + 1;
  #L49c690.  goto L49c662;
  #L49c692.  if v1 != v0 then goto L49c6a6;
  #L49c696.  v10:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.c` @type ^`boolean` @kind boolean;
  #L49c69a.  if v10 != 0 then goto L49c6a4;
  #L49c69e.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L49c6a4.  return @kind void;
  #L49c6a6.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L49c6ac.  v10:= temp @kind wide;
  #L49c6ae.  v7:= lcmp(v5, v10);
  #L49c6b2.  if v7 != 0 then goto L49c662;
  #L49c6b6.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$a.b` @type ^`int` := v1;
  #L49c6ba.  v10:= -v5 @kind long;
  #L49c6bc.  call temp:= `addAndGet`(v9, v10) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L49c6c2.  v10:= temp @kind wide;
  #L49c6c4.  v5:= lcmp(v10, v3);
  #L49c6c8.  if v5 != 0 then goto L49c660;
  #L49c6cc.  return @kind void;
}
