record `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.MaybeObserver` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.MaybeObserver` `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$a.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$a` v0 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapSingle$a;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;Lio/reactivex/rxjava3/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4acca4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4accaa.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` := v1 @kind object;
  #L4accae.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4accb2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4accc4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4accca.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4acc7c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4acc82.  v0:= temp @kind object;
  #L4acc84.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4acc88.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4acc8e.  v0:= temp;
  #L4acc90.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4accdc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4acce0.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L4acce6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4accf8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4accfc.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4acd02.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$a` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapSingle$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4acd14.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4acd1a.  v1:= temp;
  #L4acd1c.  if v1 == 0 then goto L4acd2a;
  #L4acd20.  v1:= v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4acd24.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4acd2a.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapSingle$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4acd3c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4acd40.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4acd46.  v3:= temp @kind object;
  #L4acd48.  v0:= "The mapper returned a null SingleSource" @kind object;
  #L4acd4c.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4acd52.  v3:= (`io.reactivex.rxjava3.core.SingleSource`) v3 @kind object;
  #L4acd56.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapSingle$a;.isDisposed:()Z` @kind virtual;
  #L4acd5c.  v0:= temp;
  #L4acd5e.  if v0 != 0 then goto L4acd76;
  #L4acd62.  v0:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$b`;
  #L4acd66.  v1:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4acd6a.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapSingle$b;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind direct;
  #L4acd70.  call `subscribe`(v3, v0) @signature `Lio/reactivex/rxjava3/core/SingleSource;.subscribe:(Lio/reactivex/rxjava3/core/SingleObserver;)V` @kind interface;
  #L4acd76.  return @kind void;
  #L4acd78.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4acd7a.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4acd80.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapSingle$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4acd86.  return @kind void;
  catch `java.lang.Throwable` @[L4acd3c..L4acd56] goto L4acd78;
}
