record `io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b` @kind class {
  `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c.c` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c.d` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c.e` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c.f` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$c;.<init>:(Lorg/reactivestreams/Subscriber;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L48d7f0.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L48d7f6.  v1:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L48d7fa.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L48d800.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c.c` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` := v1 @kind object;
  #L48d804.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L48d808.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L48d80e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L48d812.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$c;.c:()V` @AccessFlag  {
    temp;

  #L48d99c.  call `f`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$c;.f:()V` @kind virtual;
  #L48d9a2.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$c;.d:()V` @AccessFlag  {
    temp;
    v0;

  #L48d9b4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L48d9b8.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L48d9be.  v0:= temp;
  #L48d9c0.  if v0 != 0 then goto L48d9ce;
  #L48d9c4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c.c` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L48d9c8.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L48d9ce.  return @kind void;
}
procedure `boolean` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$c;.e:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48d7b4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c.e` @type ^`boolean` @kind boolean;
  #L48d7b8.  if v0 != 0 then goto L48d7dc;
  #L48d7bc.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L48d7c2.  v0:= temp;
  #L48d7c4.  if v0 == 0 then goto L48d7ca;
  #L48d7c8.  goto L48d7dc;
  #L48d7ca.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c.d` @type ^`java.lang.Throwable` := v2 @kind object;
  #L48d7ce.  v2:= 1I;
  #L48d7d0.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c.e` @type ^`boolean` := v2 @kind boolean;
  #L48d7d4.  call `f`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$c;.f:()V` @kind virtual;
  #L48d7da.  return v2;
  #L48d7dc.  v2:= 0I;
  #L48d7de.  return v2;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c` v14 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$c;.f:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L48d824.  v0:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L48d828.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L48d82e.  v0:= temp;
  #L48d830.  if v0 == 0 then goto L48d836;
  #L48d834.  return @kind void;
  #L48d836.  v0:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48d83a.  v1:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c.c` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L48d83e.  v2:= 1I;
  #L48d840.  v3:= 1I;
  #L48d842.  call temp:= `get`(v14) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L48d848.  v4:= temp @kind wide;
  #L48d84a.  v6:= 0L;
  #L48d84e.  v8:= v6 @kind wide;
  #L48d850.  v10:= lcmp(v8, v4);
  #L48d854.  if v10 == 0 then goto L48d8b6;
  #L48d858.  call temp:= `isCancelled`(v14) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L48d85e.  v11:= temp;
  #L48d860.  if v11 == 0 then goto L48d86c;
  #L48d864.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L48d86a.  return @kind void;
  #L48d86c.  v11:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c.e` @type ^`boolean` @kind boolean;
  #L48d870.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L48d876.  v12:= temp @kind object;
  #L48d878.  if v12 != 0 then goto L48d880;
  #L48d87c.  v13:= 1I;
  #L48d87e.  goto L48d882;
  #L48d880.  v13:= 0I;
  #L48d882.  if v11 == 0 then goto L48d8a2;
  #L48d886.  if v13 == 0 then goto L48d8a2;
  #L48d88a.  v0:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c.d` @type ^`java.lang.Throwable` @kind object;
  #L48d88e.  if v0 == 0 then goto L48d89a;
  #L48d892.  call temp:= `b`(v14, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.b:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L48d898.  goto L48d8a0;
  #L48d89a.  call `a`(v14) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.a:()V` @kind virtual;
  #L48d8a0.  return @kind void;
  #L48d8a2.  if v13 == 0 then goto L48d8a8;
  #L48d8a6.  goto L48d8b6;
  #L48d8a8.  call `onNext`(v0, v12) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L48d8ae.  v10:= 1L;
  #L48d8b2.  v8:= v8 + v10 @kind long;
  #L48d8b4.  goto L48d850;
  #L48d8b6.  if v10 != 0 then goto L48d8fa;
  #L48d8ba.  call temp:= `isCancelled`(v14) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L48d8c0.  v4:= temp;
  #L48d8c2.  if v4 == 0 then goto L48d8ce;
  #L48d8c6.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L48d8cc.  return @kind void;
  #L48d8ce.  v4:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c.e` @type ^`boolean` @kind boolean;
  #L48d8d2.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L48d8d8.  v5:= temp;
  #L48d8da.  if v4 == 0 then goto L48d8fa;
  #L48d8de.  if v5 == 0 then goto L48d8fa;
  #L48d8e2.  v0:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c.d` @type ^`java.lang.Throwable` @kind object;
  #L48d8e6.  if v0 == 0 then goto L48d8f2;
  #L48d8ea.  call temp:= `b`(v14, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.b:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L48d8f0.  goto L48d8f8;
  #L48d8f2.  call `a`(v14) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.a:()V` @kind virtual;
  #L48d8f8.  return @kind void;
  #L48d8fa.  v4:= lcmp(v8, v6);
  #L48d8fe.  if v4 == 0 then goto L48d908;
  #L48d902.  call temp:= `produced`(v14, v8) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L48d908.  v4:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L48d90c.  v3:= -v3 @kind int;
  #L48d90e.  call temp:= `addAndGet`(v4, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L48d914.  v3:= temp;
  #L48d916.  if v3 != 0 then goto L48d842;
  #L48d91a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48d92c.  v0:= 1I;
  #L48d92e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c.e` @type ^`boolean` := v0 @kind boolean;
  #L48d932.  call `f`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$c;.f:()V` @kind virtual;
  #L48d938.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48d94c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c.e` @type ^`boolean` @kind boolean;
  #L48d950.  if v0 != 0 then goto L48d98a;
  #L48d954.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L48d95a.  v0:= temp;
  #L48d95c.  if v0 == 0 then goto L48d962;
  #L48d960.  goto L48d98a;
  #L48d962.  if v2 != 0 then goto L48d97a;
  #L48d966.  v2:= "onNext called with a null value." @kind object;
  #L48d96a.  call temp:= `createNullPointerException`(v2) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.createNullPointerException:(Ljava/lang/String;)Ljava/lang/NullPointerException;` @kind static;
  #L48d970.  v2:= temp @kind object;
  #L48d972.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L48d978.  return @kind void;
  #L48d97a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$c.c` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L48d97e.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L48d984.  call `f`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableCreate$c;.f:()V` @kind virtual;
  #L48d98a.  return @kind void;
}
