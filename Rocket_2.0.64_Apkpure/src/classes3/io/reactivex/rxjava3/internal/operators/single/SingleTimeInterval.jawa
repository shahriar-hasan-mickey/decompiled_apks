record `io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Single` @kind class {
  `io.reactivex.rxjava3.core.SingleSource` `io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval.a` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler` `io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval` v0 @kind this, `io.reactivex.rxjava3.core.SingleSource` v1 @kind object, `java.util.concurrent.TimeUnit` v2 @kind object, `io.reactivex.rxjava3.core.Scheduler` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleTimeInterval;.<init>:(Lio/reactivex/rxjava3/core/SingleSource;Ljava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4d7cf8.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/core/Single;.<init>:()V` @kind direct;
  #L4d7cfe.  v0.`io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval.a` @type ^`io.reactivex.rxjava3.core.SingleSource` := v1 @kind object;
  #L4d7d02.  v0.`io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval.b` @type ^`java.util.concurrent.TimeUnit` := v2 @kind object;
  #L4d7d06.  v0.`io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval.c` @type ^`io.reactivex.rxjava3.core.Scheduler` := v3 @kind object;
  #L4d7d0a.  v0.`io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval.d` @type ^`boolean` := v4 @kind boolean;
  #L4d7d0e.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval` v5 @kind this, `io.reactivex.rxjava3.core.SingleObserver` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleTimeInterval;.subscribeActual:(Lio/reactivex/rxjava3/core/SingleObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4d7d20.  v0:= v5.`io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval.a` @type ^`io.reactivex.rxjava3.core.SingleSource` @kind object;
  #L4d7d24.  v1:= new `io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval$a`;
  #L4d7d28.  v2:= v5.`io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval.b` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4d7d2c.  v3:= v5.`io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval.c` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4d7d30.  v4:= v5.`io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval.d` @type ^`boolean` @kind boolean;
  #L4d7d34.  call `<init>`(v1, v6, v2, v3, v4) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleTimeInterval$a;.<init>:(Lio/reactivex/rxjava3/core/SingleObserver;Ljava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;Z)V` @kind direct;
  #L4d7d3a.  call `subscribe`(v0, v1) @signature `Lio/reactivex/rxjava3/core/SingleSource;.subscribe:(Lio/reactivex/rxjava3/core/SingleObserver;)V` @kind interface;
  #L4d7d40.  return @kind void;
}
