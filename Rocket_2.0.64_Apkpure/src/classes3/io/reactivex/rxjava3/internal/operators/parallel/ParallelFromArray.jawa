record `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromArray` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.parallel.ParallelFlowable` @kind class {
  `org.reactivestreams.Publisher`[] `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromArray.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromArray` v0 @kind this, `org.reactivestreams.Publisher`[] v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromArray;.<init>:([Lorg/reactivestreams/Publisher;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4d0894.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.<init>:()V` @kind direct;
  #L4d089a.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromArray.a` @type ^`org.reactivestreams.Publisher`[] := v1 @kind object;
  #L4d089e.  return @kind void;
}
procedure `int` `parallelism`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromArray` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromArray;.parallelism:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d087c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromArray.a` @type ^`org.reactivestreams.Publisher`[] @kind object;
  #L4d0880.  v0:= length @variable v0;
  #L4d0882.  return v0;
}
procedure `void` `subscribe`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromArray` v4 @kind this, `org.reactivestreams.Subscriber`[] v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromArray;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4d08b0.  call temp:= `validate`(v4, v5) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.validate:([Lorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L4d08b6.  v0:= temp;
  #L4d08b8.  if v0 != 0 then goto L4d08be;
  #L4d08bc.  return @kind void;
  #L4d08be.  v0:= length @variable v5;
  #L4d08c0.  v1:= 0I;
  #L4d08c2.  if v1 >= v0 then goto L4d08de;
  #L4d08c6.  v2:= v4.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromArray.a` @type ^`org.reactivestreams.Publisher`[] @kind object;
  #L4d08ca.  v2:= v2[v1] @kind object;
  #L4d08ce.  v3:= v5[v1] @kind object;
  #L4d08d2.  call `subscribe`(v2, v3) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4d08d8.  v1:= v1 + 1;
  #L4d08dc.  goto L4d08c2;
  #L4d08de.  return @kind void;
}
