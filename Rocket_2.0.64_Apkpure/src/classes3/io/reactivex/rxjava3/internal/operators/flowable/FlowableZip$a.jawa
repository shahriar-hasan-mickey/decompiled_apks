record `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b`[] `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.g` @AccessFlag VOLATILE;
  `java.lang.Object`[] `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.h` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `int` v3 , `int` v4 , `boolean` v5 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;IIZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a86fc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4a8702.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4a8706.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.c` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4a870a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.f` @type ^`boolean` := v5 @kind boolean;
  #L4a870e.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b`[v3];
  #L4a8712.  v2:= 0I;
  #L4a8714.  if v2 >= v3 then goto L4a872c;
  #L4a8718.  v5:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b`;
  #L4a871c.  call `<init>`(v5, v0, v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$b;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;I)V` @kind direct;
  #L4a8722.  v1[v2]:= v5 @kind object;
  #L4a8726.  v2:= v2 + 1;
  #L4a872a.  goto L4a8714;
  #L4a872c.  v2:= new `java.lang.Object`[v3];
  #L4a8730.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.h` @type ^`java.lang.Object`[] := v2 @kind object;
  #L4a8734.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b`[] := v1 @kind object;
  #L4a8738.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4a873c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4a8742.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4a8746.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4a874a.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4a8750.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4a8754.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4a8790.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b`[] @kind object;
  #L4a8794.  v1:= length @variable v0;
  #L4a8796.  v2:= 0I;
  #L4a8798.  if v2 >= v1 then goto L4a87ac;
  #L4a879c.  v3:= v0[v2] @kind object;
  #L4a87a0.  call `cancel`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$b;.cancel:()V` @kind virtual;
  #L4a87a6.  v2:= v2 + 1;
  #L4a87aa.  goto L4a8798;
  #L4a87ac.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a` v20 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;

  #L4a87c0.  v1:= v20 @kind object;
  #L4a87c4.  call temp:= `getAndIncrement`(v20) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4a87ca.  v0:= temp;
  #L4a87cc.  if v0 == 0 then goto L4a87d2;
  #L4a87d0.  return @kind void;
  #L4a87d2.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a87d6.  v3:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b`[] @kind object;
  #L4a87da.  v4:= length @variable v3;
  #L4a87dc.  v5:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.h` @type ^`java.lang.Object`[] @kind object;
  #L4a87e0.  v7:= 1I;
  #L4a87e2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a87e6.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4a87ec.  v8:= temp @kind wide;
  #L4a87ee.  v10:= 0L;
  #L4a87f2.  v12:= v10 @kind wide;
  #L4a87f4.  v14:= 0I;
  #L4a87f6.  v16:= lcmp(v8, v12);
  #L4a87fa.  if v16 == 0 then goto L4a892e;
  #L4a87fe.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.g` @type ^`boolean` @kind boolean;
  #L4a8802.  if v0 == 0 then goto L4a8808;
  #L4a8806.  return @kind void;
  #L4a8808.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.f` @type ^`boolean` @kind boolean;
  #L4a880c.  if v0 != 0 then goto L4a8832;
  #L4a8810.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a8814.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a881a.  v0:= temp @kind object;
  #L4a881c.  if v0 == 0 then goto L4a8832;
  #L4a8820.  call `a`(v20) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;.a:()V` @kind virtual;
  #L4a8826.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a882a.  call `tryTerminateConsumer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4a8830.  return @kind void;
  #L4a8832.  v6:= 0I;
  #L4a8834.  v17:= 0I;
  #L4a8838.  if v6 >= v4 then goto L4a88d0;
  #L4a883c.  v0:= v3[v6] @kind object;
  #L4a8840.  v18:= v5[v6] @kind object;
  #L4a8844.  if v18 != 0 then goto L4a88ca;
  #L4a8848.  v15:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.f` @type ^`boolean` @kind boolean;
  #L4a884c.  v0:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.d` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4a8850.  if v0 == 0 then goto L4a8892;
  #L4a8854.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4a885a.  v0:= temp @kind object;
  #L4a885c.  goto L4a8894;
  #L4a885e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a8860.  v15:= v0 @kind object;
  #L4a8862.  call `throwIfFatal`(v15) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4a8868.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a886c.  call temp:= `tryAddThrowableOrReport`(v0, v15) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4a8872.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.f` @type ^`boolean` @kind boolean;
  #L4a8876.  if v0 != 0 then goto L4a888c;
  #L4a887a.  call `a`(v20) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;.a:()V` @kind virtual;
  #L4a8880.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a8884.  call `tryTerminateConsumer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4a888a.  return @kind void;
  #L4a888c.  v0:= v14 @kind object;
  #L4a888e.  v15:= 1I;
  #L4a8890.  goto L4a8894;
  #L4a8892.  v0:= v14 @kind object;
  #L4a8894.  if v0 != 0 then goto L4a889e;
  #L4a8898.  v19:= 1I;
  #L4a889c.  goto L4a88a2;
  #L4a889e.  v19:= 0I;
  #L4a88a2.  if v15 == 0 then goto L4a88bc;
  #L4a88a6.  if v19 == 0 then goto L4a88bc;
  #L4a88aa.  call `a`(v20) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;.a:()V` @kind virtual;
  #L4a88b0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a88b4.  call `tryTerminateConsumer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4a88ba.  return @kind void;
  #L4a88bc.  if v19 != 0 then goto L4a88c6;
  #L4a88c0.  v5[v6]:= v0 @kind object;
  #L4a88c4.  goto L4a88ca;
  #L4a88c6.  v17:= 1I;
  #L4a88ca.  v6:= v6 + 1;
  #L4a88ce.  goto L4a8838;
  #L4a88d0.  if v17 == 0 then goto L4a88d6;
  #L4a88d4.  goto L4a892e;
  #L4a88d6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.c` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4a88da.  call temp:= `clone`(v5) @signature `[Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L4a88e0.  v6:= temp @kind object;
  #L4a88e2.  call temp:= `apply`(v0, v6) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4a88e8.  v0:= temp @kind object;
  #L4a88ea.  v6:= "The zipper returned a null value" @kind object;
  #L4a88ee.  call temp:= `requireNonNull`(v0, v6) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4a88f4.  call `onNext`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4a88fa.  v15:= 1L;
  #L4a88fe.  v12:= v12 + v15 @kind long;
  #L4a8900.  call `fill`(v5, v14) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L4a8906.  goto L4a87f4;
  #L4a890a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a890c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4a8912.  call `a`(v20) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;.a:()V` @kind virtual;
  #L4a8918.  v3:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a891c.  call temp:= `tryAddThrowableOrReport`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4a8922.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a8926.  call `tryTerminateConsumer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4a892c.  return @kind void;
  #L4a892e.  if v16 != 0 then goto L4a89fa;
  #L4a8932.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.g` @type ^`boolean` @kind boolean;
  #L4a8936.  if v0 == 0 then goto L4a893c;
  #L4a893a.  return @kind void;
  #L4a893c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.f` @type ^`boolean` @kind boolean;
  #L4a8940.  if v0 != 0 then goto L4a8966;
  #L4a8944.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a8948.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a894e.  v0:= temp @kind object;
  #L4a8950.  if v0 == 0 then goto L4a8966;
  #L4a8954.  call `a`(v20) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;.a:()V` @kind virtual;
  #L4a895a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a895e.  call `tryTerminateConsumer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4a8964.  return @kind void;
  #L4a8966.  v6:= 0I;
  #L4a8968.  if v6 >= v4 then goto L4a89fa;
  #L4a896c.  v0:= v3[v6] @kind object;
  #L4a8970.  v15:= v5[v6] @kind object;
  #L4a8974.  if v15 != 0 then goto L4a89f4;
  #L4a8978.  v15:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.f` @type ^`boolean` @kind boolean;
  #L4a897c.  v0:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.d` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4a8980.  if v0 == 0 then goto L4a89c2;
  #L4a8984.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4a898a.  v0:= temp @kind object;
  #L4a898c.  goto L4a89c4;
  #L4a898e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a8990.  v15:= v0 @kind object;
  #L4a8992.  call `throwIfFatal`(v15) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4a8998.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a899c.  call temp:= `tryAddThrowableOrReport`(v0, v15) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4a89a2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.f` @type ^`boolean` @kind boolean;
  #L4a89a6.  if v0 != 0 then goto L4a89bc;
  #L4a89aa.  call `a`(v20) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;.a:()V` @kind virtual;
  #L4a89b0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a89b4.  call `tryTerminateConsumer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4a89ba.  return @kind void;
  #L4a89bc.  v0:= v14 @kind object;
  #L4a89be.  v15:= 1I;
  #L4a89c0.  goto L4a89c4;
  #L4a89c2.  v0:= v14 @kind object;
  #L4a89c4.  if v0 != 0 then goto L4a89ce;
  #L4a89c8.  v16:= 1I;
  #L4a89cc.  goto L4a89d2;
  #L4a89ce.  v16:= 0I;
  #L4a89d2.  if v15 == 0 then goto L4a89ec;
  #L4a89d6.  if v16 == 0 then goto L4a89ec;
  #L4a89da.  call `a`(v20) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;.a:()V` @kind virtual;
  #L4a89e0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a89e4.  call `tryTerminateConsumer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4a89ea.  return @kind void;
  #L4a89ec.  if v16 != 0 then goto L4a89f4;
  #L4a89f0.  v5[v6]:= v0 @kind object;
  #L4a89f4.  v6:= v6 + 1;
  #L4a89f8.  goto L4a8968;
  #L4a89fa.  v0:= lcmp(v12, v10);
  #L4a89fe.  if v0 == 0 then goto L4a8a38;
  #L4a8a02.  v0:= length @variable v3;
  #L4a8a04.  v15:= 0I;
  #L4a8a06.  if v15 >= v0 then goto L4a8a1a;
  #L4a8a0a.  v6:= v3[v15] @kind object;
  #L4a8a0e.  call `request`(v6, v12) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$b;.request:(J)V` @kind virtual;
  #L4a8a14.  v15:= v15 + 1;
  #L4a8a18.  goto L4a8a06;
  #L4a8a1a.  v10:= 9223372036854775807L;
  #L4a8a24.  v0:= lcmp(v8, v10);
  #L4a8a28.  if v0 == 0 then goto L4a8a38;
  #L4a8a2c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a8a30.  v8:= -v12 @kind long;
  #L4a8a32.  call temp:= `addAndGet`(v0, v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L4a8a38.  v0:= -v7 @kind int;
  #L4a8a3a.  call temp:= `addAndGet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4a8a40.  v7:= temp;
  #L4a8a42.  if v7 != 0 then goto L4a87e2;
  #L4a8a46.  return @kind void;
  catch `java.lang.Throwable` @[L4a8854..L4a885c] goto L4a885e;
  catch `java.lang.Throwable` @[L4a88d6..L4a88f4] goto L4a890a;
  catch `java.lang.Throwable` @[L4a8984..L4a898c] goto L4a898e;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a` v1 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;.c:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$b;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4a8a7c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a8a80.  call temp:= `tryAddThrowableOrReport`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4a8a86.  v3:= temp;
  #L4a8a88.  if v3 == 0 then goto L4a8a98;
  #L4a8a8c.  v3:= 1I;
  #L4a8a8e.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b.f` @type ^`boolean` := v3 @kind boolean;
  #L4a8a92.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;.b:()V` @kind virtual;
  #L4a8a98.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a8768.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.g` @type ^`boolean` @kind boolean;
  #L4a876c.  if v0 != 0 then goto L4a877c;
  #L4a8770.  v0:= 1I;
  #L4a8772.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.g` @type ^`boolean` := v0 @kind boolean;
  #L4a8776.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;.a:()V` @kind virtual;
  #L4a877c.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a` v4 @kind this, `org.reactivestreams.Publisher`[] v5 @kind object, `int` v6 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;.d:([Lorg/reactivestreams/Publisher;I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4a8adc.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$b`[] @kind object;
  #L4a8ae0.  v1:= 0I;
  #L4a8ae2.  if v1 >= v6 then goto L4a8b1c;
  #L4a8ae6.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.g` @type ^`boolean` @kind boolean;
  #L4a8aea.  if v2 != 0 then goto L4a8b1c;
  #L4a8aee.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.f` @type ^`boolean` @kind boolean;
  #L4a8af2.  if v2 != 0 then goto L4a8b08;
  #L4a8af6.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.e` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a8afa.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a8b00.  v2:= temp @kind object;
  #L4a8b02.  if v2 == 0 then goto L4a8b08;
  #L4a8b06.  goto L4a8b1c;
  #L4a8b08.  v2:= v5[v1] @kind object;
  #L4a8b0c.  v3:= v0[v1] @kind object;
  #L4a8b10.  call `subscribe`(v2, v3) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4a8b16.  v1:= v1 + 1;
  #L4a8b1a.  goto L4a8ae2;
  #L4a8b1c.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a8aac.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4a8ab2.  v0:= temp;
  #L4a8ab4.  if v0 == 0 then goto L4a8ac8;
  #L4a8ab8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a8abc.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4a8ac2.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableZip$a;.b:()V` @kind virtual;
  #L4a8ac8.  return @kind void;
}
