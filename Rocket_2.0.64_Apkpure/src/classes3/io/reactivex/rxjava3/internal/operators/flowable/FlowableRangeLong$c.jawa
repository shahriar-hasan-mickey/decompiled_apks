record `io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$c` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$c.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `long` v2 , `long` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRangeLong$c;.<init>:(Lorg/reactivestreams/Subscriber;JJ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49c92c.  call `<init>`(v0, v2, v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRangeLong$a;.<init>:(JJ)V` @kind direct;
  #L49c932.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$c.d` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L49c936.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$c` v7 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRangeLong$c;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L49c948.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a.a` @type ^`long` @kind wide;
  #L49c94c.  v2:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$c.d` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49c950.  v3:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a.b` @type ^`long` @kind wide;
  #L49c954.  v5:= lcmp(v3, v0);
  #L49c958.  if v5 == 0 then goto L49c97c;
  #L49c95c.  v5:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a.c` @type ^`boolean` @kind boolean;
  #L49c960.  if v5 == 0 then goto L49c966;
  #L49c964.  return @kind void;
  #L49c966.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L49c96c.  v5:= temp @kind object;
  #L49c96e.  call `onNext`(v2, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L49c974.  v5:= 1L;
  #L49c978.  v3:= v3 + v5 @kind long;
  #L49c97a.  goto L49c954;
  #L49c97c.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a.c` @type ^`boolean` @kind boolean;
  #L49c980.  if v0 == 0 then goto L49c986;
  #L49c984.  return @kind void;
  #L49c986.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L49c98c.  return @kind void;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$c` v11 @kind this, `long` v12 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRangeLong$c;.f:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L49c9a0.  v0:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a.a` @type ^`long` @kind wide;
  #L49c9a4.  v2:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a.b` @type ^`long` @kind wide;
  #L49c9a8.  v4:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$c.d` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49c9ac.  v5:= 0L;
  #L49c9b0.  v7:= v5 @kind wide;
  #L49c9b2.  v9:= lcmp(v7, v12);
  #L49c9b6.  if v9 == 0 then goto L49c9e4;
  #L49c9ba.  v9:= lcmp(v2, v0);
  #L49c9be.  if v9 == 0 then goto L49c9e4;
  #L49c9c2.  v9:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a.c` @type ^`boolean` @kind boolean;
  #L49c9c6.  if v9 == 0 then goto L49c9cc;
  #L49c9ca.  return @kind void;
  #L49c9cc.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L49c9d2.  v9:= temp @kind object;
  #L49c9d4.  call `onNext`(v4, v9) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L49c9da.  v9:= 1L;
  #L49c9de.  v7:= v7 + v9 @kind long;
  #L49c9e0.  v2:= v2 + v9 @kind long;
  #L49c9e2.  goto L49c9b2;
  #L49c9e4.  v12:= lcmp(v2, v0);
  #L49c9e8.  if v12 != 0 then goto L49c9fc;
  #L49c9ec.  v12:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a.c` @type ^`boolean` @kind boolean;
  #L49c9f0.  if v12 != 0 then goto L49c9fa;
  #L49c9f4.  call `onComplete`(v4) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L49c9fa.  return @kind void;
  #L49c9fc.  call temp:= `get`(v11) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L49ca02.  v12:= temp @kind wide;
  #L49ca04.  v9:= lcmp(v7, v12);
  #L49ca08.  if v9 != 0 then goto L49c9b2;
  #L49ca0c.  v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$a.b` @type ^`long` := v2 @kind wide;
  #L49ca10.  v12:= -v7 @kind long;
  #L49ca12.  call temp:= `addAndGet`(v11, v12) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L49ca18.  v12:= temp @kind wide;
  #L49ca1a.  v7:= lcmp(v12, v5);
  #L49ca1e.  if v7 != 0 then goto L49c9b0;
  #L49ca22.  return @kind void;
}
