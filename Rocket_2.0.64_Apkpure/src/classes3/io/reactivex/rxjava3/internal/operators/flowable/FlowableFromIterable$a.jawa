record `io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a` @kind class @AccessFlag ABSTRACT extends `io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription` @kind class {
  `java.util.Iterator` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.a` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.b` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.c` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a` v0 @kind this, `java.util.Iterator` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromIterable$a;.<init>:(Ljava/util/Iterator;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4944b4.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/BasicQueueSubscription;.<init>:()V` @kind direct;
  #L4944ba.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.a` @type ^`java.util.Iterator` := v1 @kind object;
  #L4944be.  return @kind void;
}
procedure `void` `a`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromIterable$a;.a:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromIterable$a;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4944d0.  v0:= 1I;
  #L4944d2.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` := v0 @kind boolean;
  #L4944d6.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromIterable$a;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4944e8.  v0:= 0I;
  #L4944ea.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.a` @type ^`java.util.Iterator` := v0 @kind object;
  #L4944ee.  return @kind void;
}
procedure `void` `e`(`long` v0 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromIterable$a;.e:(J)V` @AccessFlag ABSTRACT {

  # return;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromIterable$a;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L494408.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.a` @type ^`java.util.Iterator` @kind object;
  #L49440c.  if v0 == 0 then goto L494432;
  #L494410.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.c` @type ^`boolean` @kind boolean;
  #L494414.  if v1 == 0 then goto L49442e;
  #L494418.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L49441e.  v0:= temp;
  #L494420.  if v0 == 0 then goto L494426;
  #L494424.  goto L49442e;
  #L494426.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromIterable$a;.clear:()V` @kind virtual;
  #L49442c.  goto L494432;
  #L49442e.  v0:= 0I;
  #L494430.  return v0;
  #L494432.  v0:= 1I;
  #L494434.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromIterable$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L494460.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.a` @type ^`java.util.Iterator` @kind object;
  #L494464.  v1:= 0I;
  #L494466.  if v0 != 0 then goto L49446c;
  #L49446a.  return v1 @kind object;
  #L49446c.  v2:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.c` @type ^`boolean` @kind boolean;
  #L494470.  if v2 != 0 then goto L49447c;
  #L494474.  v0:= 1I;
  #L494476.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.c` @type ^`boolean` := v0 @kind boolean;
  #L49447a.  goto L49448a;
  #L49447c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L494482.  v0:= temp;
  #L494484.  if v0 != 0 then goto L49448a;
  #L494488.  return v1 @kind object;
  #L49448a.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a.a` @type ^`java.util.Iterator` @kind object;
  #L49448e.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L494494.  v0:= temp @kind object;
  #L494496.  v1:= "Iterator.next() returned a null value" @kind object;
  #L49449a.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4944a0.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a` v5 @kind this, `long` v6 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromIterable$a;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L494500.  call temp:= `validate`(v6) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L494506.  v0:= temp;
  #L494508.  if v0 == 0 then goto L494540;
  #L49450c.  call temp:= `add`(v5, v6) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L494512.  v0:= temp @kind wide;
  #L494514.  v2:= 0L;
  #L494518.  v4:= lcmp(v0, v2);
  #L49451c.  if v4 != 0 then goto L494540;
  #L494520.  v0:= 9223372036854775807L;
  #L49452a.  v2:= lcmp(v6, v0);
  #L49452e.  if v2 != 0 then goto L49453a;
  #L494532.  call `a`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromIterable$a;.a:()V` @kind virtual;
  #L494538.  goto L494540;
  #L49453a.  call `e`(v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromIterable$a;.e:(J)V` @kind virtual;
  #L494540.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFromIterable$a;.requestFusion:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;

  #L494448.  v1:= v1 ^& 1;
  #L49444c.  return v1;
}
