record `io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiFunction` `io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.c` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.d` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$c;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d1fa0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4d1fa6.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4d1faa.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4d1fae.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.c` @type ^`io.reactivex.rxjava3.functions.BiFunction` := v3 @kind object;
  #L4d1fb2.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d1fc4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d1fc8.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d1fce.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d1fe0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.e` @type ^`boolean` @kind boolean;
  #L4d1fe4.  if v0 == 0 then goto L4d1fea;
  #L4d1fe8.  return @kind void;
  #L4d1fea.  v0:= 1I;
  #L4d1fec.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.e` @type ^`boolean` := v0 @kind boolean;
  #L4d1ff0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d1ff4.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d1ffa.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d200c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.e` @type ^`boolean` @kind boolean;
  #L4d2010.  if v0 == 0 then goto L4d201c;
  #L4d2014.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4d201a.  return @kind void;
  #L4d201c.  v0:= 1I;
  #L4d201e.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.e` @type ^`boolean` := v0 @kind boolean;
  #L4d2022.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d2026.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d202c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d2040.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$c;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L4d2046.  v3:= temp;
  #L4d2048.  if v3 != 0 then goto L4d2062;
  #L4d204c.  v3:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.e` @type ^`boolean` @kind boolean;
  #L4d2050.  if v3 != 0 then goto L4d2062;
  #L4d2054.  v3:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d2058.  v0:= 1L;
  #L4d205c.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d2062.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d2074.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d2078.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4d207e.  v0:= temp;
  #L4d2080.  if v0 == 0 then goto L4d2092;
  #L4d2084.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.d` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4d2088.  v2:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d208c.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4d2092.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d20a4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d20a8.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d20ae.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$c;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4d1eac.  v0:= v9.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.e` @type ^`boolean` @kind boolean;
  #L4d1eb0.  v1:= 0I;
  #L4d1eb2.  if v0 == 0 then goto L4d1eb8;
  #L4d1eb6.  return v1;
  #L4d1eb8.  v2:= 0L;
  #L4d1ebc.  v0:= 1I;
  #L4d1ebe.  v4:= v9.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4d1ec2.  call temp:= `apply`(v4, v10) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4d1ec8.  v4:= temp @kind object;
  #L4d1eca.  v5:= "The mapper returned a null value" @kind object;
  #L4d1ece.  call temp:= `requireNonNull`(v4, v5) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4d1ed4.  v10:= v9.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d1ed8.  call `onNext`(v10, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d1ede.  return v0;
  #L4d1ee0.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d1ee2.  call `throwIfFatal`(v4) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d1ee8.  v5:= 2I;
  #L4d1eea.  v6:= v9.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$c.c` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L4d1eee.  v7:= 1L;
  #L4d1ef2.  v2:= v2 + v7 @kind long;
  #L4d1ef4.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4d1efa.  v7:= temp @kind object;
  #L4d1efc.  call temp:= `apply`(v6, v7, v4) @signature `Lio/reactivex/rxjava3/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4d1f02.  v6:= temp @kind object;
  #L4d1f04.  v7:= "The errorHandler returned a null ParallelFailureHandling" @kind object;
  #L4d1f08.  call temp:= `requireNonNull`(v6, v7) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4d1f0e.  v6:= (`io.reactivex.rxjava3.parallel.ParallelFailureHandling`) v6 @kind object;
  #L4d1f12.  v7:= `@@io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$a.a` @type ^`int`[] @kind object;
  #L4d1f16.  call temp:= `ordinal`(v6) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L4d1f1c.  v6:= temp;
  #L4d1f1e.  v6:= v7[v6];
  #L4d1f22.  if v6 == v0 then goto L4d1ebc;
  #L4d1f26.  if v6 == v5 then goto L4d1f4a;
  #L4d1f2a.  v10:= 3I;
  #L4d1f2c.  if v6 == v10 then goto L4d1f3e;
  #L4d1f30.  call `cancel`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$c;.cancel:()V` @kind virtual;
  #L4d1f36.  call `onError`(v9, v4) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$c;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4d1f3c.  return v1;
  #L4d1f3e.  call `cancel`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$c;.cancel:()V` @kind virtual;
  #L4d1f44.  call `onComplete`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$c;.onComplete:()V` @kind virtual;
  #L4d1f4a.  return v1;
  #L4d1f4c.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d1f4e.  call `throwIfFatal`(v10) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d1f54.  call `cancel`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$c;.cancel:()V` @kind virtual;
  #L4d1f5a.  v2:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L4d1f5e.  v3:= new `java.lang.Throwable`[v5];
  #L4d1f62.  v3[v1]:= v4 @kind object;
  #L4d1f66.  v3[v0]:= v10 @kind object;
  #L4d1f6a.  call `<init>`(v2, v3) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L4d1f70.  call `onError`(v9, v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry$c;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4d1f76.  return v1;
  catch `java.lang.Throwable` @[L4d1ebe..L4d1ed4] goto L4d1ee0;
  catch `java.lang.Throwable` @[L4d1eea..L4d1f12] goto L4d1f4c;
}
