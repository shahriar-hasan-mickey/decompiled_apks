record `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.a` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.CompositeDisposable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$c` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.f` @AccessFlag FINAL;
  `java.util.List` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.g` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.h` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.i` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.j` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.k` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.l` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.m` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.n` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.o` @AccessFlag VOLATILE;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.p` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.q` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.rxjava3.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.<init>:(Lorg/reactivestreams/Subscriber;Lorg/reactivestreams/Publisher;Lio/reactivex/rxjava3/functions/Function;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a670c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4a6712.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4a6716.  v1:= new `io.reactivex.rxjava3.internal.queue.MpscLinkedQueue`;
  #L4a671a.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L4a6720.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v1 @kind object;
  #L4a6724.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.b` @type ^`org.reactivestreams.Publisher` := v2 @kind object;
  #L4a6728.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.c` @type ^`io.reactivex.rxjava3.functions.Function` := v3 @kind object;
  #L4a672c.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.d` @type ^`int` := v4;
  #L4a6730.  v1:= new `io.reactivex.rxjava3.disposables.CompositeDisposable`;
  #L4a6734.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L4a673a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` := v1 @kind object;
  #L4a673e.  v1:= new `java.util.ArrayList`;
  #L4a6742.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4a6748.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.g` @type ^`java.util.List` := v1 @kind object;
  #L4a674c.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4a6750.  v2:= 1L;
  #L4a6754.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:(J)V` @kind direct;
  #L4a675a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4a675e.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4a6762.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4a6768.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L4a676c.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4a6770.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4a6776.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.p` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4a677a.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$c`;
  #L4a677e.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a$c;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;)V` @kind direct;
  #L4a6784.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.f` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$c` := v1 @kind object;
  #L4a6788.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4a678c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4a6792.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.k` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4a6796.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a` v1 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$a` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.a:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a$a;)V` @AccessFlag  {
    temp;
    v0;

  #L4a6824.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4a6828.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4a682e.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.c:()V` @kind virtual;
  #L4a6834.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.b:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4a6848.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.q` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a684c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a6852.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.f` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$c` @kind object;
  #L4a6856.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a$c;.a:()V` @kind virtual;
  #L4a685c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4a6860.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4a6866.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.p` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a686a.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4a6870.  v2:= temp;
  #L4a6872.  if v2 == 0 then goto L4a6882;
  #L4a6876.  v2:= 1I;
  #L4a6878.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.n` @type ^`boolean` := v2 @kind boolean;
  #L4a687c.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.c:()V` @kind virtual;
  #L4a6882.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a` v11 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L4a6894.  call temp:= `getAndIncrement`(v11) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4a689a.  v0:= temp;
  #L4a689c.  if v0 == 0 then goto L4a68a2;
  #L4a68a0.  return @kind void;
  #L4a68a2.  v0:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a68a6.  v1:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4a68aa.  v2:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.g` @type ^`java.util.List` @kind object;
  #L4a68ae.  v3:= 1I;
  #L4a68b0.  v4:= 1I;
  #L4a68b2.  v5:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.m` @type ^`boolean` @kind boolean;
  #L4a68b6.  if v5 == 0 then goto L4a68ca;
  #L4a68ba.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4a68c0.  call `clear`(v2) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L4a68c6.  goto L4a6ad0;
  #L4a68ca.  v5:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.n` @type ^`boolean` @kind boolean;
  #L4a68ce.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4a68d4.  v6:= temp @kind object;
  #L4a68d6.  if v6 != 0 then goto L4a68de;
  #L4a68da.  v7:= 1I;
  #L4a68dc.  goto L4a68e0;
  #L4a68de.  v7:= 0I;
  #L4a68e0.  if v5 == 0 then goto L4a6904;
  #L4a68e4.  if v7 != 0 then goto L4a68f8;
  #L4a68e8.  v5:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.p` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a68ec.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a68f2.  v5:= temp @kind object;
  #L4a68f4.  if v5 == 0 then goto L4a6904;
  #L4a68f8.  call `g`(v11, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.g:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4a68fe.  v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.m` @type ^`boolean` := v3 @kind boolean;
  #L4a6902.  goto L4a68b2;
  #L4a6904.  if v7 != 0 then goto L4a6a90;
  #L4a6908.  v5:= instanceof @variable v6 @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$b` @kind boolean;
  #L4a690c.  if v5 == 0 then goto L4a6a38;
  #L4a6910.  v5:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4a6914.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4a691a.  v5:= temp;
  #L4a691c.  if v5 != 0 then goto L4a68b2;
  #L4a6920.  v7:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.l` @type ^`long` @kind wide;
  #L4a6924.  v5:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a6928.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4a692e.  v9:= temp @kind wide;
  #L4a6930.  v5:= lcmp(v9, v7);
  #L4a6934.  if v5 == 0 then goto L4a69f6;
  #L4a6938.  v9:= 1L;
  #L4a693c.  v7:= v7 + v9 @kind long;
  #L4a693e.  v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.l` @type ^`long` := v7 @kind wide;
  #L4a6942.  v6:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$b`) v6 @kind object;
  #L4a6946.  v5:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$b.a` @type ^`java.lang.Object` @kind object;
  #L4a694a.  v6:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.c` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4a694e.  call temp:= `apply`(v6, v5) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4a6954.  v5:= temp @kind object;
  #L4a6956.  v6:= "The closingIndicator returned a null Publisher" @kind object;
  #L4a695a.  call temp:= `requireNonNull`(v5, v6) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4a6960.  v5:= (`org.reactivestreams.Publisher`) v5 @kind object;
  #L4a6964.  v6:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a6968.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndIncrement:()J` @kind virtual;
  #L4a696e.  v6:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.d` @type ^`int`;
  #L4a6972.  call temp:= `create`(v6, v11) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.create:(ILjava/lang/Runnable;)Lio/reactivex/rxjava3/processors/UnicastProcessor;` @kind static;
  #L4a6978.  v6:= temp @kind object;
  #L4a697a.  v7:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$a`;
  #L4a697e.  call `<init>`(v7, v11, v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;Lio/reactivex/rxjava3/processors/UnicastProcessor;)V` @kind direct;
  #L4a6984.  call `onNext`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4a698a.  call temp:= `e`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a$a;.e:()Z` @kind virtual;
  #L4a6990.  v8:= temp;
  #L4a6992.  if v8 == 0 then goto L4a699e;
  #L4a6996.  call `onComplete`(v6) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4a699c.  goto L4a68b2;
  #L4a699e.  call temp:= `add`(v2, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4a69a4.  v6:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4a69a8.  call temp:= `add`(v6, v7) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.add:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4a69ae.  call `subscribe`(v5, v7) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4a69b4.  goto L4a68b2;
  #L4a69b8.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a69ba.  call `throwIfFatal`(v5) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4a69c0.  v6:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.q` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a69c4.  call `cancel`(v6) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a69ca.  v6:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.f` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$c` @kind object;
  #L4a69ce.  call `a`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a$c;.a:()V` @kind virtual;
  #L4a69d4.  v6:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4a69d8.  call `dispose`(v6) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4a69de.  call `throwIfFatal`(v5) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4a69e4.  v6:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.p` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a69e8.  call temp:= `tryAddThrowableOrReport`(v6, v5) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4a69ee.  v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.n` @type ^`boolean` := v3 @kind boolean;
  #L4a69f2.  goto L4a68b2;
  #L4a69f6.  v5:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.q` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a69fa.  call `cancel`(v5) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a6a00.  v5:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.f` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$c` @kind object;
  #L4a6a04.  call `a`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a$c;.a:()V` @kind virtual;
  #L4a6a0a.  v5:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4a6a0e.  call `dispose`(v5) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4a6a14.  v5:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.p` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a6a18.  v6:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4a6a1c.  call temp:= `e`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowTimed;.e:(J)Ljava/lang/String;` @kind static;
  #L4a6a22.  v7:= temp @kind object;
  #L4a6a24.  call `<init>`(v6, v7) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4a6a2a.  call temp:= `tryAddThrowableOrReport`(v5, v6) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4a6a30.  v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.n` @type ^`boolean` := v3 @kind boolean;
  #L4a6a34.  goto L4a68b2;
  #L4a6a38.  v5:= instanceof @variable v6 @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$a` @kind boolean;
  #L4a6a3c.  if v5 == 0 then goto L4a6a68;
  #L4a6a40.  v5:= v6 @kind object;
  #L4a6a42.  v5:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$a`) v5 @kind object;
  #L4a6a46.  v5:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$a.c` @type ^`io.reactivex.rxjava3.processors.UnicastProcessor` @kind object;
  #L4a6a4a.  call temp:= `remove`(v2, v5) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L4a6a50.  v7:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4a6a54.  v6:= (`io.reactivex.rxjava3.disposables.Disposable`) v6 @kind object;
  #L4a6a58.  call temp:= `delete`(v7, v6) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.delete:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4a6a5e.  call `onComplete`(v5) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4a6a64.  goto L4a68b2;
  #L4a6a68.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4a6a6e.  v5:= temp @kind object;
  #L4a6a70.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4a6a76.  v7:= temp;
  #L4a6a78.  if v7 == 0 then goto L4a68b2;
  #L4a6a7c.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4a6a82.  v7:= temp @kind object;
  #L4a6a84.  v7:= (`io.reactivex.rxjava3.processors.UnicastProcessor`) v7 @kind object;
  #L4a6a88.  call `onNext`(v7, v6) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4a6a8e.  goto L4a6a70;
  #L4a6a90.  v5:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.o` @type ^`boolean` @kind boolean;
  #L4a6a94.  if v5 == 0 then goto L4a6ad0;
  #L4a6a98.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4a6a9e.  v5:= temp;
  #L4a6aa0.  if v5 != 0 then goto L4a6ad0;
  #L4a6aa4.  v5:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.q` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a6aa8.  call `cancel`(v5) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a6aae.  v5:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.f` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$c` @kind object;
  #L4a6ab2.  call `a`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a$c;.a:()V` @kind virtual;
  #L4a6ab8.  v5:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4a6abc.  call `dispose`(v5) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4a6ac2.  call `g`(v11, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.g:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4a6ac8.  v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.m` @type ^`boolean` := v3 @kind boolean;
  #L4a6acc.  goto L4a68b2;
  #L4a6ad0.  v4:= -v4 @kind int;
  #L4a6ad2.  call temp:= `addAndGet`(v11, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4a6ad8.  v4:= temp;
  #L4a6ada.  if v4 != 0 then goto L4a68b2;
  #L4a6ade.  return @kind void;
  catch `java.lang.Throwable` @[L4a694a..L4a6964] goto L4a69b8;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a` v6 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4a67a8.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4a67ac.  v1:= 0I;
  #L4a67ae.  v2:= 1I;
  #L4a67b0.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4a67b6.  v0:= temp;
  #L4a67b8.  if v0 == 0 then goto L4a6812;
  #L4a67bc.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a67c0.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L4a67c6.  v0:= temp @kind wide;
  #L4a67c8.  v3:= 0L;
  #L4a67cc.  v5:= lcmp(v0, v3);
  #L4a67d0.  if v5 != 0 then goto L4a6808;
  #L4a67d4.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.q` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a67d8.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a67de.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.f` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$c` @kind object;
  #L4a67e2.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a$c;.a:()V` @kind virtual;
  #L4a67e8.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4a67ec.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4a67f2.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.p` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a67f6.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4a67fc.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.m` @type ^`boolean` := v2 @kind boolean;
  #L4a6800.  call `c`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.c:()V` @kind virtual;
  #L4a6806.  goto L4a6812;
  #L4a6808.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.f` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$c` @kind object;
  #L4a680c.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a$c;.a:()V` @kind virtual;
  #L4a6812.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.d:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4a6be8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4a6bec.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$b`;
  #L4a6bf0.  call `<init>`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a$b;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4a6bf6.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4a6bfc.  call `c`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.c:()V` @kind virtual;
  #L4a6c02.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.e:()V` @AccessFlag  {
    temp;
    v0;

  #L4a6c14.  v0:= 1I;
  #L4a6c16.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.o` @type ^`boolean` := v0 @kind boolean;
  #L4a6c1a.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.c:()V` @kind virtual;
  #L4a6c20.  return @kind void;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.f:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4a6c34.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.q` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a6c38.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a6c3e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4a6c42.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4a6c48.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.p` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a6c4c.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4a6c52.  v2:= temp;
  #L4a6c54.  if v2 == 0 then goto L4a6c64;
  #L4a6c58.  v2:= 1I;
  #L4a6c5a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.n` @type ^`boolean` := v2 @kind boolean;
  #L4a6c5e.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.c:()V` @kind virtual;
  #L4a6c64.  return @kind void;
}
procedure `void` `g`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.g:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4a6d00.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.p` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a6d04.  call temp:= `terminate`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4a6d0a.  v0:= temp @kind object;
  #L4a6d0c.  if v0 != 0 then goto L4a6d44;
  #L4a6d10.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.g` @type ^`java.util.List` @kind object;
  #L4a6d14.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4a6d1a.  v0:= temp @kind object;
  #L4a6d1c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4a6d22.  v1:= temp;
  #L4a6d24.  if v1 == 0 then goto L4a6d3c;
  #L4a6d28.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4a6d2e.  v1:= temp @kind object;
  #L4a6d30.  v1:= (`io.reactivex.rxjava3.processors.UnicastProcessor`) v1 @kind object;
  #L4a6d34.  call `onComplete`(v1) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4a6d3a.  goto L4a6d1c;
  #L4a6d3c.  call `onComplete`(v4) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4a6d42.  goto L4a6d7e;
  #L4a6d44.  v1:= `@@io.reactivex.rxjava3.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L4a6d48.  if v0 == v1 then goto L4a6d7e;
  #L4a6d4c.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.g` @type ^`java.util.List` @kind object;
  #L4a6d50.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4a6d56.  v1:= temp @kind object;
  #L4a6d58.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4a6d5e.  v2:= temp;
  #L4a6d60.  if v2 == 0 then goto L4a6d78;
  #L4a6d64.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4a6d6a.  v2:= temp @kind object;
  #L4a6d6c.  v2:= (`io.reactivex.rxjava3.processors.UnicastProcessor`) v2 @kind object;
  #L4a6d70.  call `onError`(v2, v0) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4a6d76.  goto L4a6d58;
  #L4a6d78.  call `onError`(v4, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a6d7e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a6afc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.f` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$c` @kind object;
  #L4a6b00.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a$c;.a:()V` @kind virtual;
  #L4a6b06.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4a6b0a.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4a6b10.  v0:= 1I;
  #L4a6b12.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.n` @type ^`boolean` := v0 @kind boolean;
  #L4a6b16.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.c:()V` @kind virtual;
  #L4a6b1c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a6b30.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.f` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$c` @kind object;
  #L4a6b34.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a$c;.a:()V` @kind virtual;
  #L4a6b3a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4a6b3e.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4a6b44.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.p` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a6b48.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4a6b4e.  v2:= temp;
  #L4a6b50.  if v2 == 0 then goto L4a6b60;
  #L4a6b54.  v2:= 1I;
  #L4a6b56.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.n` @type ^`boolean` := v2 @kind boolean;
  #L4a6b5a.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.c:()V` @kind virtual;
  #L4a6b60.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a6b74.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4a6b78.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4a6b7e.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.c:()V` @kind virtual;
  #L4a6b84.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a6b98.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.q` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a6b9c.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4a6ba2.  v0:= temp;
  #L4a6ba4.  if v0 == 0 then goto L4a6bd4;
  #L4a6ba8.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.q` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4a6bac.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a6bb0.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4a6bb6.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.b` @type ^`org.reactivestreams.Publisher` @kind object;
  #L4a6bba.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.f` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$c` @kind object;
  #L4a6bbe.  call `subscribe`(v0, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4a6bc4.  v0:= 9223372036854775807L;
  #L4a6bce.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4a6bd4.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a6c78.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4a6c7e.  v0:= temp;
  #L4a6c80.  if v0 == 0 then goto L4a6c8e;
  #L4a6c84.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a6c88.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4a6c8e.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4a6ca0.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a6ca4.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L4a6caa.  v0:= temp @kind wide;
  #L4a6cac.  v2:= 0L;
  #L4a6cb0.  v4:= lcmp(v0, v2);
  #L4a6cb4.  if v4 != 0 then goto L4a6cec;
  #L4a6cb8.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.q` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4a6cbc.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4a6cc2.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.f` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a$c` @kind object;
  #L4a6cc6.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a$c;.a:()V` @kind virtual;
  #L4a6ccc.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.e` @type ^`io.reactivex.rxjava3.disposables.CompositeDisposable` @kind object;
  #L4a6cd0.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4a6cd6.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.p` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4a6cda.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4a6ce0.  v0:= 1I;
  #L4a6ce2.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$a.m` @type ^`boolean` := v0 @kind boolean;
  #L4a6ce6.  call `c`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableWindowBoundarySelector$a;.c:()V` @kind virtual;
  #L4a6cec.  return @kind void;
}
