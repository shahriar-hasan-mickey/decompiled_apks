record `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$f` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.d` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.e` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.f` @AccessFlag ;
  `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.g` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.h` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.i` @AccessFlag VOLATILE;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.j` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.k` @AccessFlag VOLATILE;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.l` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b` v0 @kind this, `io.reactivex.rxjava3.functions.Function` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$b;.<init>:(Lio/reactivex/rxjava3/functions/Function;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L48b330.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L48b336.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.b` @type ^`io.reactivex.rxjava3.functions.Function` := v1 @kind object;
  #L48b33a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.c` @type ^`int` := v2;
  #L48b33e.  v1:= v2 ^> 2;
  #L48b342.  v2:= v2 - v1 @kind int;
  #L48b344.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.d` @type ^`int` := v2;
  #L48b348.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e`;
  #L48b34c.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$e;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$f;)V` @kind direct;
  #L48b352.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.a` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$e` := v1 @kind object;
  #L48b356.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L48b35a.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L48b360.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L48b364.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$b;.b:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48b378.  v0:= 0I;
  #L48b37a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.k` @type ^`boolean` := v0 @kind boolean;
  #L48b37e.  call `d`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$b;.d:()V` @kind virtual;
  #L48b384.  return @kind void;
}
procedure `void` `d`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$b;.d:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `e`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$b;.e:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$b;.onComplete:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48b398.  v0:= 1I;
  #L48b39a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.h` @type ^`boolean` := v0 @kind boolean;
  #L48b39e.  call `d`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$b;.d:()V` @kind virtual;
  #L48b3a4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L48b3b8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.l` @type ^`int`;
  #L48b3bc.  v1:= 2I;
  #L48b3be.  if v0 == v1 then goto L48b3f2;
  #L48b3c2.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L48b3c6.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L48b3cc.  v3:= temp;
  #L48b3ce.  if v3 != 0 then goto L48b3f2;
  #L48b3d2.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48b3d6.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L48b3dc.  v3:= new `java.lang.IllegalStateException`;
  #L48b3e0.  v0:= "Queue full?!" @kind object;
  #L48b3e4.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48b3ea.  call `onError`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L48b3f0.  return @kind void;
  #L48b3f2.  call `d`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$b;.d:()V` @kind virtual;
  #L48b3f8.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L48b40c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48b410.  call temp:= `validate`(v0, v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L48b416.  v0:= temp;
  #L48b418.  if v0 == 0 then goto L48b49e;
  #L48b41c.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.e` @type ^`org.reactivestreams.Subscription` := v4 @kind object;
  #L48b420.  v0:= instanceof @variable v4 @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind boolean;
  #L48b424.  if v0 == 0 then goto L48b47a;
  #L48b428.  v0:= v4 @kind object;
  #L48b42a.  v0:= (`io.reactivex.rxjava3.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L48b42e.  v1:= 7I;
  #L48b430.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L48b436.  v1:= temp;
  #L48b438.  v2:= 1I;
  #L48b43a.  if v1 != v2 then goto L48b458;
  #L48b43e.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.l` @type ^`int` := v1;
  #L48b442.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L48b446.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.h` @type ^`boolean` := v2 @kind boolean;
  #L48b44a.  call `e`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$b;.e:()V` @kind virtual;
  #L48b450.  call `d`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$b;.d:()V` @kind virtual;
  #L48b456.  return @kind void;
  #L48b458.  v2:= 2I;
  #L48b45a.  if v1 != v2 then goto L48b47a;
  #L48b45e.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.l` @type ^`int` := v1;
  #L48b462.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L48b466.  call `e`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$b;.e:()V` @kind virtual;
  #L48b46c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.c` @type ^`int`;
  #L48b470.  v0:= (`long`) v0 @kind i2l;
  #L48b472.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L48b478.  return @kind void;
  #L48b47a.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L48b47e.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.c` @type ^`int`;
  #L48b482.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L48b488.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L48b48c.  call `e`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMap$b;.e:()V` @kind virtual;
  #L48b492.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$b.c` @type ^`int`;
  #L48b496.  v0:= (`long`) v0 @kind i2l;
  #L48b498.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L48b49e.  return @kind void;
}
