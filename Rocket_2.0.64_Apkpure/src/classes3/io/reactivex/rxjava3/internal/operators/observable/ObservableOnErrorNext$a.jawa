record `io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.Observer` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.disposables.SequentialDisposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext$a.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext$a.d` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableOnErrorNext$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c3e9c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4c3ea2.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4c3ea6.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4c3eaa.  v1:= new `io.reactivex.rxjava3.internal.disposables.SequentialDisposable`;
  #L4c3eae.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L4c3eb4.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext$a.c` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L4c3eb8.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableOnErrorNext$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c3ecc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext$a.e` @type ^`boolean` @kind boolean;
  #L4c3ed0.  if v0 == 0 then goto L4c3ed6;
  #L4c3ed4.  return @kind void;
  #L4c3ed6.  v0:= 1I;
  #L4c3ed8.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4c3edc.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4c3ee0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c3ee4.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4c3eea.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext$a` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableOnErrorNext$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4c3efc.  v0:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext$a.d` @type ^`boolean` @kind boolean;
  #L4c3f00.  if v0 == 0 then goto L4c3f20;
  #L4c3f04.  v0:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext$a.e` @type ^`boolean` @kind boolean;
  #L4c3f08.  if v0 == 0 then goto L4c3f14;
  #L4c3f0c.  call `onError`(v7) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4c3f12.  return @kind void;
  #L4c3f14.  v0:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c3f18.  call `onError`(v0, v7) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c3f1e.  return @kind void;
  #L4c3f20.  v0:= 1I;
  #L4c3f22.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4c3f26.  v1:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4c3f2a.  call temp:= `apply`(v1, v7) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4c3f30.  v1:= temp @kind object;
  #L4c3f32.  v1:= (`io.reactivex.rxjava3.core.ObservableSource`) v1 @kind object;
  #L4c3f36.  if v1 != 0 then goto L4c3f5a;
  #L4c3f3a.  v0:= new `java.lang.NullPointerException`;
  #L4c3f3e.  v1:= "Observable is null" @kind object;
  #L4c3f42.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c3f48.  call temp:= `initCause`(v0, v7) @signature `Ljava/lang/NullPointerException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L4c3f4e.  v7:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c3f52.  call `onError`(v7, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c3f58.  return @kind void;
  #L4c3f5a.  call `subscribe`(v1, v6) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4c3f60.  return @kind void;
  #L4c3f62.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c3f64.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c3f6a.  v2:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c3f6e.  v3:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L4c3f72.  v4:= 2I;
  #L4c3f74.  v4:= new `java.lang.Throwable`[v4];
  #L4c3f78.  v5:= 0I;
  #L4c3f7a.  v4[v5]:= v7 @kind object;
  #L4c3f7e.  v4[v0]:= v1 @kind object;
  #L4c3f82.  call `<init>`(v3, v4) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L4c3f88.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c3f8e.  return @kind void;
  catch `java.lang.Throwable` @[L4c3f26..L4c3f36] goto L4c3f62;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableOnErrorNext$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c3fac.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext$a.e` @type ^`boolean` @kind boolean;
  #L4c3fb0.  if v0 == 0 then goto L4c3fb6;
  #L4c3fb4.  return @kind void;
  #L4c3fb6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c3fba.  call `onNext`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c3fc0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableOnErrorNext$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c3fd4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext$a.c` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4c3fd8.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4c3fde.  return @kind void;
}
