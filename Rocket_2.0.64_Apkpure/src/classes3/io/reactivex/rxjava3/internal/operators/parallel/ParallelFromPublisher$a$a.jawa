record `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a$a` @kind class @AccessFlag FINAL extends `org.reactivestreams.Subscription` @kind interface {
  `int` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a$a.a` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a` `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a$a.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a$a` v0 @kind this, `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a;II)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d08f0.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a$a.c` @type ^`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a` := v1 @kind object;
  #L4d08f4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4d08fa.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a$a.a` @type ^`int` := v2;
  #L4d08fe.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a$a.b` @type ^`int` := v3;
  #L4d0902.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a$a` v7 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4d0914.  v0:= v7.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a$a.c` @type ^`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a` @kind object;
  #L4d0918.  v1:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.b` @type ^`java.util.concurrent.atomic.AtomicLongArray` @kind object;
  #L4d091c.  v0:= v7.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a$a.b` @type ^`int`;
  #L4d0920.  v2:= v7.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a$a.a` @type ^`int`;
  #L4d0924.  v2:= v2 + v0 @kind int;
  #L4d0926.  v3:= 0L;
  #L4d092a.  v5:= 1L;
  #L4d092e.  call temp:= `compareAndSet`(v1, v2, v3, v5) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.compareAndSet:(IJJ)Z` @kind virtual;
  #L4d0934.  v0:= temp;
  #L4d0936.  if v0 == 0 then goto L4d094a;
  #L4d093a.  v0:= v7.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a$a.c` @type ^`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a` @kind object;
  #L4d093e.  v1:= v7.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a$a.b` @type ^`int`;
  #L4d0942.  v1:= v1 + v1 @kind int;
  #L4d0944.  call `a`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a;.a:(I)V` @kind virtual;
  #L4d094a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a$a` v7 @kind this, `long` v8 ) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4d095c.  call temp:= `validate`(v8) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4d0962.  v0:= temp;
  #L4d0964.  if v0 == 0 then goto L4d09cc;
  #L4d0968.  v0:= v7.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a$a.c` @type ^`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a` @kind object;
  #L4d096c.  v0:= v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.b` @type ^`java.util.concurrent.atomic.AtomicLongArray` @kind object;
  #L4d0970.  v1:= v7.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a$a.a` @type ^`int`;
  #L4d0974.  call temp:= `get`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.get:(I)J` @kind virtual;
  #L4d097a.  v3:= temp @kind wide;
  #L4d097c.  v1:= 9223372036854775807L;
  #L4d0986.  v5:= lcmp(v3, v1);
  #L4d098a.  if v5 != 0 then goto L4d0990;
  #L4d098e.  return @kind void;
  #L4d0990.  call temp:= `addCap`(v3, v8) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L4d0996.  v5:= temp @kind wide;
  #L4d0998.  v2:= v7.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a$a.a` @type ^`int`;
  #L4d099c.  v1:= v0 @kind object;
  #L4d099e.  call temp:= `compareAndSet`(v1, v2, v3, v5) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.compareAndSet:(IJJ)Z` @kind virtual;
  #L4d09a4.  v1:= temp;
  #L4d09a6.  if v1 == 0 then goto L4d0970;
  #L4d09aa.  v8:= v7.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a$a.c` @type ^`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a` @kind object;
  #L4d09ae.  v8:= v8.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4d09b2.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4d09b8.  v8:= temp;
  #L4d09ba.  v9:= v7.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a$a.b` @type ^`int`;
  #L4d09be.  if v8 != v9 then goto L4d09cc;
  #L4d09c2.  v8:= v7.`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a$a.c` @type ^`io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$a` @kind object;
  #L4d09c6.  call `b`(v8) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher$a;.b:()V` @kind virtual;
  #L4d09cc.  return @kind void;
}
