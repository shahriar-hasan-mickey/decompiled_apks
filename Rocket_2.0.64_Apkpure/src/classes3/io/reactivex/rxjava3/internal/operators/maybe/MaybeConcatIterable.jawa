record `io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Flowable` @kind class {
  `java.lang.Iterable` `io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable` v0 @kind this, `java.lang.Iterable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatIterable;.<init>:(Ljava/lang/Iterable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4a9e98.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/core/Flowable;.<init>:()V` @kind direct;
  #L4a9e9e.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable.b` @type ^`java.lang.Iterable` := v1 @kind object;
  #L4a9ea2.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatIterable;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L4a9eb4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable.b` @type ^`java.lang.Iterable` @kind object;
  #L4a9eb8.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4a9ebe.  v0:= temp @kind object;
  #L4a9ec0.  v1:= "The sources Iterable returned a null Iterator" @kind object;
  #L4a9ec4.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4a9eca.  v0:= (`java.util.Iterator`) v0 @kind object;
  #L4a9ece.  v1:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterable$a`;
  #L4a9ed2.  call `<init>`(v1, v3, v0) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatIterable$a;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/util/Iterator;)V` @kind direct;
  #L4a9ed8.  call `onSubscribe`(v3, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4a9ede.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatIterable$a;.a:()V` @kind virtual;
  #L4a9ee4.  return @kind void;
  #L4a9ee6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4a9ee8.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4a9eee.  call `error`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L4a9ef4.  return @kind void;
  catch `java.lang.Throwable` @[L4a9eb4..L4a9ece] goto L4a9ee6;
}
