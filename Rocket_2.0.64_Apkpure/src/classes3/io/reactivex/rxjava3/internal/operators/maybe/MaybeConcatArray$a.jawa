record `io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.MaybeObserver` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.disposables.SequentialDisposable` `io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.MaybeSource`[] `io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.e` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.f` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.g` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.core.MaybeSource`[] v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatArray$a;.<init>:(Lorg/reactivestreams/Subscriber;[Lio/reactivex/rxjava3/core/MaybeSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4a9798.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4a979e.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4a97a2.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.e` @type ^`io.reactivex.rxjava3.core.MaybeSource`[] := v2 @kind object;
  #L4a97a6.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4a97aa.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4a97b0.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4a97b4.  v1:= new `io.reactivex.rxjava3.internal.disposables.SequentialDisposable`;
  #L4a97b8.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L4a97be.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.d` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L4a97c2.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4a97c6.  v2:= `@@io.reactivex.rxjava3.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.rxjava3.internal.util.NotificationLite` @kind object;
  #L4a97ca.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4a97d0.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4a97d4.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a` v11 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatArray$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L4a9804.  call temp:= `getAndIncrement`(v11) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4a980a.  v0:= temp;
  #L4a980c.  if v0 == 0 then goto L4a9812;
  #L4a9810.  return @kind void;
  #L4a9812.  v0:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a9816.  v1:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a981a.  v2:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.d` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4a981e.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4a9824.  v3:= temp;
  #L4a9826.  v4:= 0I;
  #L4a9828.  if v3 == 0 then goto L4a9834;
  #L4a982c.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4a9832.  return @kind void;
  #L4a9834.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4a983a.  v3:= temp @kind object;
  #L4a983c.  if v3 == 0 then goto L4a98be;
  #L4a9840.  v5:= `@@io.reactivex.rxjava3.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.rxjava3.internal.util.NotificationLite` @kind object;
  #L4a9844.  v6:= 1I;
  #L4a9846.  if v3 == v5 then goto L4a9880;
  #L4a984a.  v7:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.g` @type ^`long` @kind wide;
  #L4a984e.  v5:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a9852.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4a9858.  v9:= temp @kind wide;
  #L4a985a.  v5:= lcmp(v7, v9);
  #L4a985e.  if v5 == 0 then goto L4a987a;
  #L4a9862.  v9:= 1L;
  #L4a9866.  v7:= v7 + v9 @kind long;
  #L4a9868.  v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.g` @type ^`long` := v7 @kind wide;
  #L4a986c.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4a9872.  call `onNext`(v1, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4a9878.  goto L4a9886;
  #L4a987a.  v3:= 0I;
  #L4a987c.  v6:= 0I;
  #L4a987e.  goto L4a9886;
  #L4a9880.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4a9886.  if v6 == 0 then goto L4a98be;
  #L4a988a.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4a9890.  v3:= temp;
  #L4a9892.  if v3 != 0 then goto L4a98be;
  #L4a9896.  v3:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.f` @type ^`int`;
  #L4a989a.  v4:= v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.e` @type ^`io.reactivex.rxjava3.core.MaybeSource`[] @kind object;
  #L4a989e.  v5:= length @variable v4;
  #L4a98a0.  if v3 != v5 then goto L4a98ac;
  #L4a98a4.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4a98aa.  return @kind void;
  #L4a98ac.  v5:= v3 + 1;
  #L4a98b0.  v11.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.f` @type ^`int` := v5;
  #L4a98b4.  v3:= v4[v3] @kind object;
  #L4a98b8.  call `subscribe`(v3, v11) @signature `Lio/reactivex/rxjava3/core/MaybeSource;.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind interface;
  #L4a98be.  call temp:= `decrementAndGet`(v11) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4a98c4.  v3:= temp;
  #L4a98c6.  if v3 != 0 then goto L4a981e;
  #L4a98ca.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatArray$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a97e8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.d` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4a97ec.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4a97f2.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatArray$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4a98dc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a98e0.  v1:= `@@io.reactivex.rxjava3.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.rxjava3.internal.util.NotificationLite` @kind object;
  #L4a98e4.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4a98ea.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatArray$a;.a:()V` @kind virtual;
  #L4a98f0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatArray$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a9904.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4a9908.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4a990e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatArray$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a9920.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.d` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4a9924.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4a992a.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatArray$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a993c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4a9940.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4a9946.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatArray$a;.a:()V` @kind virtual;
  #L4a994c.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatArray$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4a9960.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4a9966.  v0:= temp;
  #L4a9968.  if v0 == 0 then goto L4a997c;
  #L4a996c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4a9970.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4a9976.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeConcatArray$a;.a:()V` @kind virtual;
  #L4a997c.  return @kind void;
}
