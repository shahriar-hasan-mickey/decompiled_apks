record `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.observers.QueueDrainObserver` @kind class, `java.lang.Runnable` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.functions.Supplier` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.b` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.c` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.d` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler$Worker` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.g` @AccessFlag FINAL;
  `java.util.Collection` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.h` @AccessFlag ;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.i` @AccessFlag ;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.j` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.k` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.l` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a` v1 @kind this, `io.reactivex.rxjava3.core.Observer` v2 @kind object, `io.reactivex.rxjava3.functions.Supplier` v3 @kind object, `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object, `int` v7 , `boolean` v8 , `io.reactivex.rxjava3.core.Scheduler$Worker` v9 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Supplier;JLjava/util/concurrent/TimeUnit;IZLio/reactivex/rxjava3/core/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4b7870.  v0:= new `io.reactivex.rxjava3.internal.queue.MpscLinkedQueue`;
  #L4b7874.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L4b787a.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L4b7880.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.b` @type ^`io.reactivex.rxjava3.functions.Supplier` := v3 @kind object;
  #L4b7884.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.c` @type ^`long` := v4 @kind wide;
  #L4b7888.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.d` @type ^`java.util.concurrent.TimeUnit` := v6 @kind object;
  #L4b788c.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.e` @type ^`int` := v7;
  #L4b7890.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.f` @type ^`boolean` := v8 @kind boolean;
  #L4b7894.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.g` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` := v9 @kind object;
  #L4b7898.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$a;.a:(Lio/reactivex/rxjava3/core/Observer;Ljava/util/Collection;)V` @AccessFlag PUBLIC {
    temp;

  #L4b78c8.  call `onNext`(v1, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4b78ce.  return @kind void;
}
procedure `void` `accept`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$a;.accept:(Lio/reactivex/rxjava3/core/Observer;Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4b78ac.  v2:= (`java.util.Collection`) v2 @kind object;
  #L4b78b0.  call `a`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$a;.a:(Lio/reactivex/rxjava3/core/Observer;Ljava/util/Collection;)V` @kind virtual;
  #L4b78b6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b78e0.  v0:= v1.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L4b78e4.  if v0 != 0 then goto L4b7914;
  #L4b78e8.  v0:= 1I;
  #L4b78ea.  v1.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L4b78ee.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.j` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b78f2.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4b78f8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.g` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4b78fc.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4b7902.  @monitorenter v1
  #L4b7904.  v0:= 0I;
  #L4b7906.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.h` @type ^`java.util.Collection` := v0 @kind object;
  #L4b790a.  @monitorexit v1
  #L4b790c.  goto L4b7914;
  #L4b790e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b7910.  @monitorexit v1
  #L4b7912.  throw v0;
  #L4b7914.  return @kind void;
  catch `java.lang.Throwable` @[L4b7906..L4b7912] goto L4b790e;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b7858.  v0:= v1.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L4b785c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4b7934.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.g` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4b7938.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4b793e.  @monitorenter v3
  #L4b7940.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.h` @type ^`java.util.Collection` @kind object;
  #L4b7944.  v1:= 0I;
  #L4b7946.  v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.h` @type ^`java.util.Collection` := v1 @kind object;
  #L4b794a.  @monitorexit v3
  #L4b794c.  if v0 == 0 then goto L4b797c;
  #L4b7950.  v1:= v3.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4b7954.  call temp:= `offer`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4b795a.  v0:= 1I;
  #L4b795c.  v3.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L4b7960.  call temp:= `enter`(v3) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L4b7966.  v0:= temp;
  #L4b7968.  if v0 == 0 then goto L4b797c;
  #L4b796c.  v0:= v3.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4b7970.  v1:= v3.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b7974.  v2:= 0I;
  #L4b7976.  call `drainLoop`(v0, v1, v2, v3, v3) @signature `Lio/reactivex/rxjava3/internal/util/QueueDrainHelper;.drainLoop:(Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;Lio/reactivex/rxjava3/core/Observer;ZLio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/internal/util/ObservableQueueDrain;)V` @kind static;
  #L4b797c.  return @kind void;
  #L4b797e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b7980.  @monitorexit v3
  #L4b7982.  throw v0;
  catch `java.lang.Throwable` @[L4b7940..L4b794c] goto L4b797e;
  catch `java.lang.Throwable` @[L4b7980..L4b7982] goto L4b797e;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b79a8.  @monitorenter v1
  #L4b79aa.  v0:= 0I;
  #L4b79ac.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.h` @type ^`java.util.Collection` := v0 @kind object;
  #L4b79b0.  @monitorexit v1
  #L4b79b2.  v0:= v1.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b79b6.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4b79bc.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.g` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4b79c0.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4b79c6.  return @kind void;
  #L4b79c8.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b79ca.  @monitorexit v1
  #L4b79cc.  throw v2;
  catch `java.lang.Throwable` @[L4b79ac..L4b79b2] goto L4b79c8;
  catch `java.lang.Throwable` @[L4b79ca..L4b79cc] goto L4b79c8;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4b79f4.  @monitorenter v7
  #L4b79f6.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.h` @type ^`java.util.Collection` @kind object;
  #L4b79fa.  if v0 != 0 then goto L4b7a02;
  #L4b79fe.  @monitorexit v7
  #L4b7a00.  return @kind void;
  #L4b7a02.  call temp:= `add`(v0, v8) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4b7a08.  call temp:= `size`(v0) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L4b7a0e.  v8:= temp;
  #L4b7a10.  v1:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.e` @type ^`int`;
  #L4b7a14.  if v8 >= v1 then goto L4b7a1c;
  #L4b7a18.  @monitorexit v7
  #L4b7a1a.  return @kind void;
  #L4b7a1c.  v8:= 0I;
  #L4b7a1e.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.h` @type ^`java.util.Collection` := v8 @kind object;
  #L4b7a22.  v1:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.k` @type ^`long` @kind wide;
  #L4b7a26.  v3:= 1L;
  #L4b7a2a.  v1:= v1 + v3 @kind long;
  #L4b7a2c.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.k` @type ^`long` := v1 @kind wide;
  #L4b7a30.  @monitorexit v7
  #L4b7a32.  v8:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.f` @type ^`boolean` @kind boolean;
  #L4b7a36.  if v8 == 0 then goto L4b7a44;
  #L4b7a3a.  v8:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.i` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b7a3e.  call `dispose`(v8) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4b7a44.  v8:= 0I;
  #L4b7a46.  call `fastPathOrderedEmit`(v7, v0, v8, v7) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.fastPathOrderedEmit:(Ljava/lang/Object;ZLio/reactivex/rxjava3/disposables/Disposable;)V` @kind virtual;
  #L4b7a4c.  v8:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.b` @type ^`io.reactivex.rxjava3.functions.Supplier` @kind object;
  #L4b7a50.  call temp:= `get`(v8) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L4b7a56.  v8:= temp @kind object;
  #L4b7a58.  v0:= "The buffer supplied is null" @kind object;
  #L4b7a5c.  call temp:= `requireNonNull`(v8, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b7a62.  v8:= (`java.util.Collection`) v8 @kind object;
  #L4b7a66.  @monitorenter v7
  #L4b7a68.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.h` @type ^`java.util.Collection` := v8 @kind object;
  #L4b7a6c.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.l` @type ^`long` @kind wide;
  #L4b7a70.  v0:= v0 + v3 @kind long;
  #L4b7a72.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.l` @type ^`long` := v0 @kind wide;
  #L4b7a76.  @monitorexit v7
  #L4b7a78.  v8:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.f` @type ^`boolean` @kind boolean;
  #L4b7a7c.  if v8 == 0 then goto L4b7a9c;
  #L4b7a80.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.g` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4b7a84.  v4:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.c` @type ^`long` @kind wide;
  #L4b7a88.  v6:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4b7a8c.  v1:= v7 @kind object;
  #L4b7a8e.  v2:= v4 @kind wide;
  #L4b7a90.  call temp:= `schedulePeriodically`(v0, v1, v2, v4, v6) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4b7a96.  v8:= temp @kind object;
  #L4b7a98.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.i` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v8 @kind object;
  #L4b7a9c.  return @kind void;
  #L4b7a9e.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b7aa0.  @monitorexit v7
  #L4b7aa2.  throw v8;
  #L4b7aa4.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b7aa6.  call `throwIfFatal`(v8) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b7aac.  v0:= v7.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b7ab0.  call `onError`(v0, v8) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4b7ab6.  call `dispose`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$a;.dispose:()V` @kind virtual;
  #L4b7abc.  return @kind void;
  #L4b7abe.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b7ac0.  @monitorexit v7
  #L4b7ac2.  throw v8;
  catch `java.lang.Throwable` @[L4b79f6..L4b7a32] goto L4b7abe;
  catch `java.lang.Throwable` @[L4b7a4c..L4b7a66] goto L4b7aa4;
  catch `java.lang.Throwable` @[L4b7a68..L4b7a78] goto L4b7a9e;
  catch `java.lang.Throwable` @[L4b7aa0..L4b7aa2] goto L4b7a9e;
  catch `java.lang.Throwable` @[L4b7ac0..L4b7ac2] goto L4b7abe;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a` v7 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4b7b04.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.j` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b7b08.  call temp:= `validate`(v0, v8) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4b7b0e.  v0:= temp;
  #L4b7b10.  if v0 == 0 then goto L4b7b80;
  #L4b7b14.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.j` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v8 @kind object;
  #L4b7b18.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.b` @type ^`io.reactivex.rxjava3.functions.Supplier` @kind object;
  #L4b7b1c.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L4b7b22.  v0:= temp @kind object;
  #L4b7b24.  v1:= "The buffer supplied is null" @kind object;
  #L4b7b28.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b7b2e.  v0:= (`java.util.Collection`) v0 @kind object;
  #L4b7b32.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.h` @type ^`java.util.Collection` := v0 @kind object;
  #L4b7b36.  v8:= v7.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b7b3a.  call `onSubscribe`(v8, v7) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4b7b40.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.g` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4b7b44.  v4:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.c` @type ^`long` @kind wide;
  #L4b7b48.  v6:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4b7b4c.  v1:= v7 @kind object;
  #L4b7b4e.  v2:= v4 @kind wide;
  #L4b7b50.  call temp:= `schedulePeriodically`(v0, v1, v2, v4, v6) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4b7b56.  v8:= temp @kind object;
  #L4b7b58.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.i` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v8 @kind object;
  #L4b7b5c.  goto L4b7b80;
  #L4b7b5e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b7b60.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b7b66.  call `dispose`(v8) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4b7b6c.  v8:= v7.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b7b70.  call `error`(v0, v8) @signature `Lio/reactivex/rxjava3/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/rxjava3/core/Observer;)V` @kind static;
  #L4b7b76.  v8:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.g` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4b7b7a.  call `dispose`(v8) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4b7b80.  return @kind void;
  catch `java.lang.Throwable` @[L4b7b18..L4b7b32] goto L4b7b5e;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a` v7 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4b7ba0.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.b` @type ^`io.reactivex.rxjava3.functions.Supplier` @kind object;
  #L4b7ba4.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L4b7baa.  v0:= temp @kind object;
  #L4b7bac.  v1:= "The bufferSupplier returned a null buffer" @kind object;
  #L4b7bb0.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b7bb6.  v0:= (`java.util.Collection`) v0 @kind object;
  #L4b7bba.  @monitorenter v7
  #L4b7bbc.  v1:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.h` @type ^`java.util.Collection` @kind object;
  #L4b7bc0.  if v1 == 0 then goto L4b7be6;
  #L4b7bc4.  v2:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.k` @type ^`long` @kind wide;
  #L4b7bc8.  v4:= v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.l` @type ^`long` @kind wide;
  #L4b7bcc.  v6:= lcmp(v2, v4);
  #L4b7bd0.  if v6 == 0 then goto L4b7bd6;
  #L4b7bd4.  goto L4b7be6;
  #L4b7bd6.  v7.`io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$a.h` @type ^`java.util.Collection` := v0 @kind object;
  #L4b7bda.  @monitorexit v7
  #L4b7bdc.  v0:= 0I;
  #L4b7bde.  call `fastPathOrderedEmit`(v7, v1, v0, v7) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.fastPathOrderedEmit:(Ljava/lang/Object;ZLio/reactivex/rxjava3/disposables/Disposable;)V` @kind virtual;
  #L4b7be4.  return @kind void;
  #L4b7be6.  @monitorexit v7
  #L4b7be8.  return @kind void;
  #L4b7bea.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b7bec.  @monitorexit v7
  #L4b7bee.  throw v0;
  #L4b7bf0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b7bf2.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b7bf8.  call `dispose`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableBufferTimed$a;.dispose:()V` @kind virtual;
  #L4b7bfe.  v1:= v7.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b7c02.  call `onError`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4b7c08.  return @kind void;
  catch `java.lang.Throwable` @[L4b7ba0..L4b7bba] goto L4b7bf0;
  catch `java.lang.Throwable` @[L4b7bbc..L4b7bdc] goto L4b7bea;
  catch `java.lang.Throwable` @[L4b7be6..L4b7bee] goto L4b7bea;
}
