record `io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiFunction` `io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.c` @AccessFlag ;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.d` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableScan$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49fe24.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L49fe2a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L49fe2e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.b` @type ^`io.reactivex.rxjava3.functions.BiFunction` := v2 @kind object;
  #L49fe32.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableScan$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49fe44.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L49fe48.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L49fe4e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableScan$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49fe60.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.e` @type ^`boolean` @kind boolean;
  #L49fe64.  if v0 == 0 then goto L49fe6a;
  #L49fe68.  return @kind void;
  #L49fe6a.  v0:= 1I;
  #L49fe6c.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.e` @type ^`boolean` := v0 @kind boolean;
  #L49fe70.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49fe74.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L49fe7a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableScan$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49fe8c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.e` @type ^`boolean` @kind boolean;
  #L49fe90.  if v0 == 0 then goto L49fe9c;
  #L49fe94.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L49fe9a.  return @kind void;
  #L49fe9c.  v0:= 1I;
  #L49fe9e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.e` @type ^`boolean` := v0 @kind boolean;
  #L49fea2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49fea6.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L49feac.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableScan$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L49fec0.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.e` @type ^`boolean` @kind boolean;
  #L49fec4.  if v0 == 0 then goto L49feca;
  #L49fec8.  return @kind void;
  #L49feca.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49fece.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.d` @type ^`java.lang.Object` @kind object;
  #L49fed2.  if v1 != 0 then goto L49fee2;
  #L49fed6.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.d` @type ^`java.lang.Object` := v4 @kind object;
  #L49feda.  call `onNext`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L49fee0.  goto L49ff02;
  #L49fee2.  v2:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.b` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L49fee6.  call temp:= `apply`(v2, v1, v4) @signature `Lio/reactivex/rxjava3/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L49feec.  v4:= temp @kind object;
  #L49feee.  v1:= "The value returned by the accumulator is null" @kind object;
  #L49fef2.  call temp:= `requireNonNull`(v4, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49fef8.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.d` @type ^`java.lang.Object` := v4 @kind object;
  #L49fefc.  call `onNext`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L49ff02.  return @kind void;
  #L49ff04.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49ff06.  call `throwIfFatal`(v4) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L49ff0c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L49ff10.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L49ff16.  call `onError`(v3, v4) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableScan$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L49ff1c.  return @kind void;
  catch `java.lang.Throwable` @[L49fee2..L49fef8] goto L49ff04;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableScan$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49ff3c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L49ff40.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L49ff46.  v0:= temp;
  #L49ff48.  if v0 == 0 then goto L49ff5a;
  #L49ff4c.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.c` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L49ff50.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49ff54.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L49ff5a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableScan$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49ff6c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableScan$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L49ff70.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L49ff76.  return @kind void;
}
