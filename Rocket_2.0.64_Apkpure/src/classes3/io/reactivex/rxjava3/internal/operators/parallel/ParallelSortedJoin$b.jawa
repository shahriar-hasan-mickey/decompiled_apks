record `io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$a`[] `io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.b` @AccessFlag FINAL;
  `java.util.List`[] `io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.c` @AccessFlag FINAL;
  `int`[] `io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.d` @AccessFlag FINAL;
  `java.util.Comparator` `io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.g` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.h` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.i` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `int` v3 , `java.util.Comparator` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelSortedJoin$b;.<init>:(Lorg/reactivestreams/Subscriber;ILjava/util/Comparator;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4d33b0.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4d33b6.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4d33ba.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4d33c0.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.f` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L4d33c4.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4d33c8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4d33ce.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.h` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L4d33d2.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4d33d6.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4d33dc.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4d33e0.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L4d33e4.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.e` @type ^`java.util.Comparator` := v4 @kind object;
  #L4d33e8.  v2:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$a`[v3];
  #L4d33ec.  v4:= 0I;
  #L4d33ee.  if v4 >= v3 then goto L4d3406;
  #L4d33f2.  v0:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$a`;
  #L4d33f6.  call `<init>`(v0, v1, v4) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelSortedJoin$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/parallel/ParallelSortedJoin$b;I)V` @kind direct;
  #L4d33fc.  v2[v4]:= v0 @kind object;
  #L4d3400.  v4:= v4 + 1;
  #L4d3404.  goto L4d33ee;
  #L4d3406.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.b` @type ^`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$a`[] := v2 @kind object;
  #L4d340a.  v2:= new `java.util.List`[v3];
  #L4d340e.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.c` @type ^`java.util.List`[] := v2 @kind object;
  #L4d3412.  v2:= new `int`[v3];
  #L4d3416.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.d` @type ^`int`[] := v2 @kind object;
  #L4d341a.  v2:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.h` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4d341e.  call `lazySet`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4d3424.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelSortedJoin$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4d3478.  v0:= v4.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.b` @type ^`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$a`[] @kind object;
  #L4d347c.  v1:= length @variable v0;
  #L4d347e.  v2:= 0I;
  #L4d3480.  if v2 >= v1 then goto L4d3494;
  #L4d3484.  v3:= v0[v2] @kind object;
  #L4d3488.  call `a`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelSortedJoin$a;.a:()V` @kind virtual;
  #L4d348e.  v2:= v2 + 1;
  #L4d3492.  goto L4d3480;
  #L4d3494.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b` v16 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelSortedJoin$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L4d34a8.  v1:= v16 @kind object;
  #L4d34ac.  call temp:= `getAndIncrement`(v16) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4d34b2.  v0:= temp;
  #L4d34b4.  if v0 == 0 then goto L4d34ba;
  #L4d34b8.  return @kind void;
  #L4d34ba.  v2:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d34be.  v3:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.c` @type ^`java.util.List`[] @kind object;
  #L4d34c2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.d` @type ^`int`[] @kind object;
  #L4d34c6.  v4:= length @variable v0;
  #L4d34c8.  v6:= 1I;
  #L4d34ca.  v7:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d34ce.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4d34d4.  v7:= temp @kind wide;
  #L4d34d6.  v11:= 0L;
  #L4d34da.  v14:= 0I;
  #L4d34dc.  v15:= lcmp(v11, v7);
  #L4d34e0.  if v15 == 0 then goto L4d35ec;
  #L4d34e4.  v15:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.g` @type ^`boolean` @kind boolean;
  #L4d34e8.  if v15 == 0 then goto L4d34f4;
  #L4d34ec.  call `fill`(v3, v14) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L4d34f2.  return @kind void;
  #L4d34f4.  v15:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d34f8.  call temp:= `get`(v15) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d34fe.  v15:= temp @kind object;
  #L4d3500.  v15:= (`java.lang.Throwable`) v15 @kind object;
  #L4d3504.  if v15 == 0 then goto L4d351c;
  #L4d3508.  call `a`(v16) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelSortedJoin$b;.a:()V` @kind virtual;
  #L4d350e.  call `fill`(v3, v14) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L4d3514.  call `onError`(v2, v15) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d351a.  return @kind void;
  #L4d351c.  v15:= -1I;
  #L4d351e.  v9:= v14 @kind object;
  #L4d3520.  v13:= 0I;
  #L4d3522.  if v13 >= v4 then goto L4d35bc;
  #L4d3526.  v10:= v3[v13] @kind object;
  #L4d352a.  v5:= v0[v13];
  #L4d352e.  call temp:= `size`(v10) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4d3534.  v14:= temp;
  #L4d3536.  if v14 == v5 then goto L4d35b4;
  #L4d353a.  if v9 != 0 then goto L4d354a;
  #L4d353e.  call temp:= `get`(v10, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L4d3544.  v9:= temp @kind object;
  #L4d3546.  v15:= v13;
  #L4d3548.  goto L4d35b4;
  #L4d354a.  call temp:= `get`(v10, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L4d3550.  v5:= temp @kind object;
  #L4d3552.  v10:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.e` @type ^`java.util.Comparator` @kind object;
  #L4d3556.  call temp:= `compare`(v10, v9, v5) @signature `Ljava/util/Comparator;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind interface;
  #L4d355c.  v10:= temp;
  #L4d355e.  if v10 <= 0 then goto L4d3566;
  #L4d3562.  v10:= 1I;
  #L4d3564.  goto L4d3568;
  #L4d3566.  v10:= 0I;
  #L4d3568.  if v10 == 0 then goto L4d35b4;
  #L4d356c.  v9:= v5 @kind object;
  #L4d356e.  goto L4d3546;
  #L4d3570.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d3572.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d3578.  call `a`(v16) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelSortedJoin$b;.a:()V` @kind virtual;
  #L4d357e.  v4:= 0I;
  #L4d3580.  call `fill`(v3, v4) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L4d3586.  v3:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d358a.  call temp:= `compareAndSet`(v3, v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4d3590.  v3:= temp;
  #L4d3592.  if v3 != 0 then goto L4d359c;
  #L4d3596.  call `onError`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4d359c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d35a0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d35a6.  v0:= temp @kind object;
  #L4d35a8.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L4d35ac.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d35b2.  return @kind void;
  #L4d35b4.  v13:= v13 + 1;
  #L4d35b8.  v14:= 0I;
  #L4d35ba.  goto L4d3522;
  #L4d35bc.  if v9 != 0 then goto L4d35d0;
  #L4d35c0.  v5:= 0I;
  #L4d35c2.  call `fill`(v3, v5) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L4d35c8.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d35ce.  return @kind void;
  #L4d35d0.  call `onNext`(v2, v9) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d35d6.  v5:= v0[v15];
  #L4d35da.  v9:= 1I;
  #L4d35dc.  v5:= v5 + v9 @kind int;
  #L4d35de.  v0[v15]:= v5;
  #L4d35e2.  v13:= 1L;
  #L4d35e6.  v11:= v11 + v13 @kind long;
  #L4d35e8.  goto L4d34da;
  #L4d35ec.  v9:= 1I;
  #L4d35ee.  v5:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.g` @type ^`boolean` @kind boolean;
  #L4d35f2.  if v5 == 0 then goto L4d3600;
  #L4d35f6.  v5:= 0I;
  #L4d35f8.  call `fill`(v3, v5) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L4d35fe.  return @kind void;
  #L4d3600.  v5:= 0I;
  #L4d3602.  v7:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d3606.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d360c.  v7:= temp @kind object;
  #L4d360e.  v7:= (`java.lang.Throwable`) v7 @kind object;
  #L4d3612.  if v7 == 0 then goto L4d362a;
  #L4d3616.  call `a`(v16) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelSortedJoin$b;.a:()V` @kind virtual;
  #L4d361c.  call `fill`(v3, v5) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L4d3622.  call `onError`(v2, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d3628.  return @kind void;
  #L4d362a.  v5:= 0I;
  #L4d362c.  if v5 >= v4 then goto L4d364e;
  #L4d3630.  v7:= v0[v5];
  #L4d3634.  v8:= v3[v5] @kind object;
  #L4d3638.  call temp:= `size`(v8) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4d363e.  v8:= temp;
  #L4d3640.  if v7 == v8 then goto L4d3648;
  #L4d3644.  v13:= 0I;
  #L4d3646.  goto L4d3650;
  #L4d3648.  v5:= v5 + 1;
  #L4d364c.  goto L4d362c;
  #L4d364e.  v13:= 1I;
  #L4d3650.  if v13 == 0 then goto L4d3664;
  #L4d3654.  v5:= 0I;
  #L4d3656.  call `fill`(v3, v5) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L4d365c.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d3662.  return @kind void;
  #L4d3664.  v7:= 0L;
  #L4d3668.  v5:= lcmp(v11, v7);
  #L4d366c.  if v5 == 0 then goto L4d367a;
  #L4d3670.  v5:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d3674.  call temp:= `produced`(v5, v11) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4d367a.  v5:= -v6 @kind int;
  #L4d367c.  call temp:= `addAndGet`(v1, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4d3682.  v6:= temp;
  #L4d3684.  if v6 != 0 then goto L4d34ca;
  #L4d3688.  return @kind void;
  catch `java.lang.Throwable` @[L4d3552..L4d355e] goto L4d3570;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelSortedJoin$b;.c:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4d36a8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d36ac.  v1:= 0I;
  #L4d36ae.  call temp:= `compareAndSet`(v0, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4d36b4.  v0:= temp;
  #L4d36b6.  if v0 == 0 then goto L4d36c2;
  #L4d36ba.  call `b`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelSortedJoin$b;.b:()V` @kind virtual;
  #L4d36c0.  goto L4d36d8;
  #L4d36c2.  v0:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d36c6.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d36cc.  v0:= temp @kind object;
  #L4d36ce.  if v3 == v0 then goto L4d36d8;
  #L4d36d2.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4d36d8.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelSortedJoin$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d3438.  v0:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.g` @type ^`boolean` @kind boolean;
  #L4d343c.  if v0 != 0 then goto L4d3464;
  #L4d3440.  v0:= 1I;
  #L4d3442.  v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.g` @type ^`boolean` := v0 @kind boolean;
  #L4d3446.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelSortedJoin$b;.a:()V` @kind virtual;
  #L4d344c.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4d3452.  v0:= temp;
  #L4d3454.  if v0 != 0 then goto L4d3464;
  #L4d3458.  v0:= v2.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.c` @type ^`java.util.List`[] @kind object;
  #L4d345c.  v1:= 0I;
  #L4d345e.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L4d3464.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b` v1 @kind this, `java.util.List` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelSortedJoin$b;.d:(Ljava/util/List;I)V` @AccessFlag  {
    temp;
    v0;

  #L4d36ec.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.c` @type ^`java.util.List`[] @kind object;
  #L4d36f0.  v0[v3]:= v2 @kind object;
  #L4d36f4.  v2:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.h` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4d36f8.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4d36fe.  v2:= temp;
  #L4d3700.  if v2 != 0 then goto L4d370a;
  #L4d3704.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelSortedJoin$b;.b:()V` @kind virtual;
  #L4d370a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelSortedJoin$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d371c.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4d3722.  v0:= temp;
  #L4d3724.  if v0 == 0 then goto L4d3748;
  #L4d3728.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4d372c.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4d3732.  v2:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin$b.h` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4d3736.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4d373c.  v2:= temp;
  #L4d373e.  if v2 != 0 then goto L4d3748;
  #L4d3742.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelSortedJoin$b;.b:()V` @kind virtual;
  #L4d3748.  return @kind void;
}
