record `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$m` @kind class @AccessFlag FINAL extends `java.util.ArrayList` @kind class, `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$f` @kind interface {
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$m.a` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$m.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$m` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$m;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49eb0c.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L49eb12.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$m` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$m;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L49eb50.  call temp:= `error`(v1) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L49eb56.  v1:= temp @kind object;
  #L49eb58.  call temp:= `add`(v0, v1) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L49eb5e.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$m.a` @type ^`int`;
  #L49eb62.  v1:= v1 + 1;
  #L49eb66.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$m.a` @type ^`int` := v1;
  #L49eb6a.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$m` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$m;.b:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L49eb7c.  call temp:= `next`(v1) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L49eb82.  v1:= temp @kind object;
  #L49eb84.  call temp:= `add`(v0, v1) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L49eb8a.  v1:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$m.a` @type ^`int`;
  #L49eb8e.  v1:= v1 + 1;
  #L49eb92.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$m.a` @type ^`int` := v1;
  #L49eb96.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$m` v14 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c` v15 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$m;.c:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L49eba8.  @monitorenter v15
  #L49ebaa.  v0:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.e` @type ^`boolean` @kind boolean;
  #L49ebae.  v1:= 1I;
  #L49ebb0.  if v0 == 0 then goto L49ebbc;
  #L49ebb4.  v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.f` @type ^`boolean` := v1 @kind boolean;
  #L49ebb8.  @monitorexit v15
  #L49ebba.  return @kind void;
  #L49ebbc.  v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.e` @type ^`boolean` := v1 @kind boolean;
  #L49ebc0.  @monitorexit v15
  #L49ebc2.  v0:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.b` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49ebc6.  call temp:= `isDisposed`(v15) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;.isDisposed:()Z` @kind virtual;
  #L49ebcc.  v1:= temp;
  #L49ebce.  if v1 == 0 then goto L49ebd4;
  #L49ebd2.  return @kind void;
  #L49ebd4.  v1:= v14.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$m.a` @type ^`int`;
  #L49ebd8.  call temp:= `a`(v15) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;.a:()Ljava/lang/Object;` @kind virtual;
  #L49ebde.  v2:= temp @kind object;
  #L49ebe0.  v2:= (`java.lang.Integer`) v2 @kind object;
  #L49ebe4.  v3:= 0I;
  #L49ebe6.  if v2 == 0 then goto L49ebf4;
  #L49ebea.  call temp:= `intValue`(v2) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L49ebf0.  v2:= temp;
  #L49ebf2.  goto L49ebf6;
  #L49ebf4.  v2:= 0I;
  #L49ebf6.  call temp:= `get`(v15) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L49ebfc.  v4:= temp @kind wide;
  #L49ebfe.  v6:= 0L;
  #L49ec02.  v8:= v4 @kind wide;
  #L49ec04.  v10:= v6 @kind wide;
  #L49ec06.  v12:= lcmp(v8, v6);
  #L49ec0a.  if v12 == 0 then goto L49ec7a;
  #L49ec0e.  if v2 >= v1 then goto L49ec7a;
  #L49ec12.  call temp:= `get`(v14, v2) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L49ec18.  v12:= temp @kind object;
  #L49ec1a.  call temp:= `accept`(v12, v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.accept:(Ljava/lang/Object;Lorg/reactivestreams/Subscriber;)Z` @kind static;
  #L49ec20.  v12:= temp;
  #L49ec22.  if v12 == 0 then goto L49ec28;
  #L49ec26.  return @kind void;
  #L49ec28.  call temp:= `isDisposed`(v15) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;.isDisposed:()Z` @kind virtual;
  #L49ec2e.  v12:= temp;
  #L49ec30.  if v12 == 0 then goto L49ec36;
  #L49ec34.  return @kind void;
  #L49ec36.  v2:= v2 + 1;
  #L49ec3a.  v12:= 1L;
  #L49ec3e.  v8:= v8 - v12 @kind long;
  #L49ec40.  v10:= v10 + v12 @kind long;
  #L49ec42.  goto L49ec06;
  #L49ec44.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49ec46.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L49ec4c.  call `dispose`(v15) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;.dispose:()V` @kind virtual;
  #L49ec52.  call temp:= `isError`(v12) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L49ec58.  v15:= temp;
  #L49ec5a.  if v15 != 0 then goto L49ec72;
  #L49ec5e.  call temp:= `isComplete`(v12) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L49ec64.  v15:= temp;
  #L49ec66.  if v15 != 0 then goto L49ec72;
  #L49ec6a.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L49ec70.  goto L49ec78;
  #L49ec72.  call `onError`(v1) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L49ec78.  return @kind void;
  #L49ec7a.  v1:= lcmp(v10, v6);
  #L49ec7e.  if v1 == 0 then goto L49eca6;
  #L49ec82.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L49ec88.  v1:= temp @kind object;
  #L49ec8a.  v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.c` @type ^`java.lang.Object` := v1 @kind object;
  #L49ec8e.  v1:= 9223372036854775807L;
  #L49ec98.  v6:= lcmp(v4, v1);
  #L49ec9c.  if v6 == 0 then goto L49eca6;
  #L49eca0.  call temp:= `b`(v15, v10) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$c;.b:(J)J` @kind virtual;
  #L49eca6.  @monitorenter v15
  #L49eca8.  v1:= v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.f` @type ^`boolean` @kind boolean;
  #L49ecac.  if v1 != 0 then goto L49ecb8;
  #L49ecb0.  v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.e` @type ^`boolean` := v3 @kind boolean;
  #L49ecb4.  @monitorexit v15
  #L49ecb6.  return @kind void;
  #L49ecb8.  v15.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$c.f` @type ^`boolean` := v3 @kind boolean;
  #L49ecbc.  @monitorexit v15
  #L49ecbe.  goto L49ebc6;
  #L49ecc0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49ecc2.  @monitorexit v15
  #L49ecc4.  throw v0;
  #L49ecc6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49ecc8.  @monitorexit v15
  #L49ecca.  throw v0;
  catch `java.lang.Throwable` @[L49ebaa..L49ebc2] goto L49ecc6;
  catch `java.lang.Throwable` @[L49ec1a..L49ec22] goto L49ec44;
  catch `java.lang.Throwable` @[L49eca8..L49ecc4] goto L49ecc0;
  catch `java.lang.Throwable` @[L49ecc8..L49ecca] goto L49ecc6;
}
procedure `void` `complete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$m` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableReplay$m;.complete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49eb24.  call temp:= `complete`() @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L49eb2a.  v0:= temp @kind object;
  #L49eb2c.  call temp:= `add`(v1, v0) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L49eb32.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$m.a` @type ^`int`;
  #L49eb36.  v0:= v0 + 1;
  #L49eb3a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$m.a` @type ^`int` := v0;
  #L49eb3e.  return @kind void;
}
