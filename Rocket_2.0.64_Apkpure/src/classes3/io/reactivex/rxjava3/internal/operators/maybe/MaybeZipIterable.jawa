record `io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterable` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Maybe` @kind class {
  `java.lang.Iterable` `io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterable.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterable.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterable` v0 @kind this, `java.lang.Iterable` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeZipIterable;.<init>:(Ljava/lang/Iterable;Lio/reactivex/rxjava3/functions/Function;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4b11ec.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.<init>:()V` @kind direct;
  #L4b11f2.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterable.a` @type ^`java.lang.Iterable` := v1 @kind object;
  #L4b11f6.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterable.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4b11fa.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterable` v6 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeZipIterable;.subscribeActual:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4b120c.  v0:= 8I;
  #L4b1210.  v0:= new `io.reactivex.rxjava3.core.MaybeSource`[v0];
  #L4b1214.  v1:= v6.`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterable.a` @type ^`java.lang.Iterable` @kind object;
  #L4b1218.  call temp:= `iterator`(v1) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4b121e.  v1:= temp @kind object;
  #L4b1220.  v2:= 0I;
  #L4b1222.  v3:= 0I;
  #L4b1224.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4b122a.  v4:= temp;
  #L4b122c.  if v4 == 0 then goto L4b127a;
  #L4b1230.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4b1236.  v4:= temp @kind object;
  #L4b1238.  v4:= (`io.reactivex.rxjava3.core.MaybeSource`) v4 @kind object;
  #L4b123c.  if v4 != 0 then goto L4b1256;
  #L4b1240.  v0:= new `java.lang.NullPointerException`;
  #L4b1244.  v1:= "One of the sources is null" @kind object;
  #L4b1248.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4b124e.  call `error`(v0, v7) @signature `Lio/reactivex/rxjava3/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind static;
  #L4b1254.  return @kind void;
  #L4b1256.  v5:= length @variable v0;
  #L4b1258.  if v3 != v5 then goto L4b126e;
  #L4b125c.  v5:= v3 ^> 2;
  #L4b1260.  v5:= v5 + v3 @kind int;
  #L4b1262.  call temp:= `copyOf`(v0, v5) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L4b1268.  v0:= temp @kind object;
  #L4b126a.  v0:= (`io.reactivex.rxjava3.core.MaybeSource`[]) v0 @kind object;
  #L4b126e.  v5:= v3 + 1;
  #L4b1272.  v0[v3]:= v4 @kind object;
  #L4b1276.  v3:= v5;
  #L4b1278.  goto L4b1224;
  #L4b127a.  if v3 != 0 then goto L4b1286;
  #L4b127e.  call `complete`(v7) @signature `Lio/reactivex/rxjava3/internal/disposables/EmptyDisposable;.complete:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind static;
  #L4b1284.  return @kind void;
  #L4b1286.  v1:= 1I;
  #L4b1288.  if v3 != v1 then goto L4b12ac;
  #L4b128c.  v0:= v0[v2] @kind object;
  #L4b1290.  v1:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeMap$a`;
  #L4b1294.  v2:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterable$a`;
  #L4b1298.  call `<init>`(v2, v6) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeZipIterable$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/maybe/MaybeZipIterable;)V` @kind direct;
  #L4b129e.  call `<init>`(v1, v7, v2) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeMap$a;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;Lio/reactivex/rxjava3/functions/Function;)V` @kind direct;
  #L4b12a4.  call `subscribe`(v0, v1) @signature `Lio/reactivex/rxjava3/core/MaybeSource;.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind interface;
  #L4b12aa.  return @kind void;
  #L4b12ac.  v1:= new `io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b`;
  #L4b12b0.  v4:= v6.`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterable.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4b12b4.  call `<init>`(v1, v7, v3, v4) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeZipArray$b;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;ILio/reactivex/rxjava3/functions/Function;)V` @kind direct;
  #L4b12ba.  call `onSubscribe`(v7, v1) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4b12c0.  if v2 >= v3 then goto L4b12ea;
  #L4b12c4.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeZipArray$b;.isDisposed:()Z` @kind virtual;
  #L4b12ca.  v7:= temp;
  #L4b12cc.  if v7 == 0 then goto L4b12d2;
  #L4b12d0.  return @kind void;
  #L4b12d2.  v7:= v0[v2] @kind object;
  #L4b12d6.  v4:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$b.c` @type ^`io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$c`[] @kind object;
  #L4b12da.  v4:= v4[v2] @kind object;
  #L4b12de.  call `subscribe`(v7, v4) @signature `Lio/reactivex/rxjava3/core/MaybeSource;.subscribe:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind interface;
  #L4b12e4.  v2:= v2 + 1;
  #L4b12e8.  goto L4b12c0;
  #L4b12ea.  return @kind void;
  #L4b12ec.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b12ee.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b12f4.  call `error`(v0, v7) @signature `Lio/reactivex/rxjava3/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/rxjava3/core/MaybeObserver;)V` @kind static;
  #L4b12fa.  return @kind void;
  catch `java.lang.Throwable` @[L4b1214..L4b1276] goto L4b12ec;
}
