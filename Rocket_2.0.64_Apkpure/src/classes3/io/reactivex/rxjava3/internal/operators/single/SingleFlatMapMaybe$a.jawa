record `io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.MaybeObserver` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.MaybeObserver` `io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$a.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$a` v0 @kind this, `java.util.concurrent.atomic.AtomicReference` v1 @kind object, `io.reactivex.rxjava3.core.MaybeObserver` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapMaybe$a;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/core/MaybeObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d63ec.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4d63f2.  v0.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$a.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4d63f6.  v0.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$a.b` @type ^`io.reactivex.rxjava3.core.MaybeObserver` := v2 @kind object;
  #L4d63fa.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d640c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$a.b` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4d6410.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L4d6416.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d6428.  v0:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$a.b` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4d642c.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d6432.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapMaybe$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d6444.  v0:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$a.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4d6448.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4d644e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleFlatMapMaybe$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d6460.  v0:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$a.b` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4d6464.  call `onSuccess`(v0, v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4d646a.  return @kind void;
}
