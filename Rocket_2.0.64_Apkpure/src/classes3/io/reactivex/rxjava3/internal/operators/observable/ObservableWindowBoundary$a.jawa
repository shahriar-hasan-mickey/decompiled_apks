record `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.observers.DisposableObserver` @kind class {
  `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$a.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$a` v0 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4ccb6c.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/observers/DisposableObserver;.<init>:()V` @kind direct;
  #L4ccb72.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$a.d` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b` := v1 @kind object;
  #L4ccb76.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ccb88.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$a.e` @type ^`boolean` @kind boolean;
  #L4ccb8c.  if v0 == 0 then goto L4ccb92;
  #L4ccb90.  return @kind void;
  #L4ccb92.  v0:= 1I;
  #L4ccb94.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4ccb98.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$a.d` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b` @kind object;
  #L4ccb9c.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$b;.b:()V` @kind virtual;
  #L4ccba2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ccbb4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$a.e` @type ^`boolean` @kind boolean;
  #L4ccbb8.  if v0 == 0 then goto L4ccbc4;
  #L4ccbbc.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4ccbc2.  return @kind void;
  #L4ccbc4.  v0:= 1I;
  #L4ccbc6.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4ccbca.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$a.d` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b` @kind object;
  #L4ccbce.  call `c`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$b;.c:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4ccbd4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L4ccbe8.  v1:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$a.e` @type ^`boolean` @kind boolean;
  #L4ccbec.  if v1 == 0 then goto L4ccbf2;
  #L4ccbf0.  return @kind void;
  #L4ccbf2.  v1:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$a.d` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$b` @kind object;
  #L4ccbf6.  call `d`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableWindowBoundary$b;.d:()V` @kind virtual;
  #L4ccbfc.  return @kind void;
}
