record `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.e` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.f` @AccessFlag ;
  `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.g` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.h` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.i` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.j` @AccessFlag FINAL;
  `java.util.Iterator` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.k` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.l` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.m` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L493650.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L493656.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L49365a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L49365e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.c` @type ^`int` := v3;
  #L493662.  v1:= v3 ^> 2;
  #L493666.  v3:= v3 - v1 @kind int;
  #L493668.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.d` @type ^`int` := v3;
  #L49366c.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L493670.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L493676.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L49367a.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L49367e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L493684.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L493688.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49369c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.i` @type ^`boolean` @kind boolean;
  #L4936a0.  if v0 != 0 then goto L4936ca;
  #L4936a4.  v0:= 1I;
  #L4936a6.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.i` @type ^`boolean` := v0 @kind boolean;
  #L4936aa.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4936ae.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4936b4.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4936ba.  v0:= temp;
  #L4936bc.  if v0 != 0 then goto L4936ca;
  #L4936c0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4936c4.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4936ca.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4936dc.  v0:= 0I;
  #L4936de.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` := v0 @kind object;
  #L4936e2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4936e6.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4936ec.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a` v18 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L493740.  v1:= v18 @kind object;
  #L493744.  call temp:= `getAndIncrement`(v18) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L49374a.  v0:= temp;
  #L49374c.  if v0 == 0 then goto L493752;
  #L493750.  return @kind void;
  #L493752.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L493756.  v3:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L49375a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.m` @type ^`int`;
  #L49375e.  v4:= 0I;
  #L493760.  v5:= 1I;
  #L493762.  if v0 == v5 then goto L49376a;
  #L493766.  v0:= 1I;
  #L493768.  goto L49376c;
  #L49376a.  v0:= 0I;
  #L49376c.  v6:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` @kind object;
  #L493770.  v7:= 0I;
  #L493772.  v8:= 1I;
  #L493774.  if v6 != 0 then goto L493840;
  #L493778.  v9:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.h` @type ^`boolean` @kind boolean;
  #L49377c.  call temp:= `poll`(v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L493782.  v10:= temp @kind object;
  #L493784.  if v10 != 0 then goto L49378c;
  #L493788.  v11:= 1I;
  #L49378a.  goto L49378e;
  #L49378c.  v11:= 0I;
  #L49378e.  call temp:= `e`(v1, v9, v11, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.e:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;)Z` @kind virtual;
  #L493794.  v9:= temp;
  #L493796.  if v9 == 0 then goto L49379c;
  #L49379a.  return @kind void;
  #L49379c.  if v10 == 0 then goto L493840;
  #L4937a0.  v6:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4937a4.  call temp:= `apply`(v6, v10) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4937aa.  v6:= temp @kind object;
  #L4937ac.  v6:= (`java.lang.Iterable`) v6 @kind object;
  #L4937b0.  call temp:= `iterator`(v6) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4937b6.  v6:= temp @kind object;
  #L4937b8.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4937be.  v9:= temp;
  #L4937c0.  if v9 != 0 then goto L4937ce;
  #L4937c4.  call `f`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.f:(Z)V` @kind virtual;
  #L4937ca.  v6:= v7 @kind object;
  #L4937cc.  goto L493774;
  #L4937ce.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` := v6 @kind object;
  #L4937d2.  goto L493840;
  #L4937d4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4937d6.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4937dc.  v3:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4937e0.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4937e6.  v3:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4937ea.  call temp:= `addThrowable`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L4937f0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4937f4.  call temp:= `terminate`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L4937fa.  v0:= temp @kind object;
  #L4937fc.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L493802.  return @kind void;
  #L493804.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L493806.  v4:= v0 @kind object;
  #L493808.  call `throwIfFatal`(v4) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L49380e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L493812.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L493818.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49381c.  call temp:= `addThrowable`(v0, v4) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L493822.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L493826.  call temp:= `terminate`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L49382c.  v0:= temp @kind object;
  #L49382e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` := v7 @kind object;
  #L493832.  call `clear`(v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L493838.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L49383e.  return @kind void;
  #L493840.  if v6 == 0 then goto L493986;
  #L493844.  v9:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L493848.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L49384e.  v9:= temp @kind wide;
  #L493850.  v11:= 0L;
  #L493854.  v13:= v11 @kind wide;
  #L493856.  v15:= lcmp(v13, v9);
  #L49385a.  if v15 == 0 then goto L49392a;
  #L49385e.  v15:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.h` @type ^`boolean` @kind boolean;
  #L493862.  call temp:= `e`(v1, v15, v4, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.e:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;)Z` @kind virtual;
  #L493868.  v15:= temp;
  #L49386a.  if v15 == 0 then goto L493870;
  #L49386e.  return @kind void;
  #L493870.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L493876.  v15:= temp @kind object;
  #L493878.  v5:= "The iterator returned a null value" @kind object;
  #L49387c.  call temp:= `requireNonNull`(v15, v5) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L493882.  call `onNext`(v2, v15) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L493888.  v5:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.h` @type ^`boolean` @kind boolean;
  #L49388c.  call temp:= `e`(v1, v5, v4, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.e:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;)Z` @kind virtual;
  #L493892.  v5:= temp;
  #L493894.  if v5 == 0 then goto L49389a;
  #L493898.  return @kind void;
  #L49389a.  v16:= 1L;
  #L49389e.  v13:= v13 + v16 @kind long;
  #L4938a2.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4938a8.  v5:= temp;
  #L4938aa.  if v5 != 0 then goto L4938bc;
  #L4938ae.  call `f`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.f:(Z)V` @kind virtual;
  #L4938b4.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` := v7 @kind object;
  #L4938b8.  v6:= v7 @kind object;
  #L4938ba.  goto L49392a;
  #L4938bc.  v5:= 1I;
  #L4938be.  goto L493856;
  #L4938c0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4938c2.  v3:= v0 @kind object;
  #L4938c4.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4938ca.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` := v7 @kind object;
  #L4938ce.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4938d2.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4938d8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4938dc.  call temp:= `addThrowable`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L4938e2.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4938e6.  call temp:= `terminate`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L4938ec.  v0:= temp @kind object;
  #L4938ee.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4938f4.  return @kind void;
  #L4938f6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4938f8.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4938fe.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` := v7 @kind object;
  #L493902.  v3:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L493906.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L49390c.  v3:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L493910.  call temp:= `addThrowable`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L493916.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49391a.  call temp:= `terminate`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L493920.  v0:= temp @kind object;
  #L493922.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L493928.  return @kind void;
  #L49392a.  v5:= lcmp(v13, v9);
  #L49392e.  if v5 != 0 then goto L49395a;
  #L493932.  v5:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.h` @type ^`boolean` @kind boolean;
  #L493936.  call temp:= `isEmpty`(v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L49393c.  v15:= temp;
  #L49393e.  if v15 == 0 then goto L49394a;
  #L493942.  if v6 != 0 then goto L49394a;
  #L493946.  v15:= 1I;
  #L493948.  goto L49394c;
  #L49394a.  v15:= 0I;
  #L49394c.  call temp:= `e`(v1, v5, v15, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.e:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;)Z` @kind virtual;
  #L493952.  v5:= temp;
  #L493954.  if v5 == 0 then goto L49395a;
  #L493958.  return @kind void;
  #L49395a.  v5:= lcmp(v13, v11);
  #L49395e.  if v5 == 0 then goto L493980;
  #L493962.  v11:= 9223372036854775807L;
  #L49396c.  v5:= lcmp(v9, v11);
  #L493970.  if v5 == 0 then goto L493980;
  #L493974.  v5:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L493978.  v9:= -v13 @kind long;
  #L49397a.  call temp:= `addAndGet`(v5, v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L493980.  if v6 != 0 then goto L493986;
  #L493984.  goto L493996;
  #L493986.  v5:= -v8 @kind int;
  #L493988.  call temp:= `addAndGet`(v1, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L49398e.  v8:= temp;
  #L493990.  if v8 != 0 then goto L493996;
  #L493994.  return @kind void;
  #L493996.  v5:= 1I;
  #L493998.  goto L493774;
  catch `java.lang.Throwable` @[L49377c..L493784] goto L493804;
  catch `java.lang.Throwable` @[L4937a0..L4937c0] goto L4937d4;
  catch `java.lang.Throwable` @[L493870..L493882] goto L4938f6;
  catch `java.lang.Throwable` @[L4938a2..L4938aa] goto L4938c0;
}
procedure `boolean` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a` v3 @kind this, `boolean` v4 , `boolean` v5 , `org.reactivestreams.Subscriber` v6 @kind object, `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.e:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L49350c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.i` @type ^`boolean` @kind boolean;
  #L493510.  v1:= 0I;
  #L493512.  v2:= 1I;
  #L493514.  if v0 == 0 then goto L493524;
  #L493518.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` := v1 @kind object;
  #L49351c.  call `clear`(v7) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L493522.  return v2;
  #L493524.  if v4 == 0 then goto L493566;
  #L493528.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49352c.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L493532.  v4:= temp @kind object;
  #L493534.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L493538.  if v4 == 0 then goto L49355a;
  #L49353c.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L493540.  call temp:= `terminate`(v4) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L493546.  v4:= temp @kind object;
  #L493548.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` := v1 @kind object;
  #L49354c.  call `clear`(v7) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L493552.  call `onError`(v6, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L493558.  return v2;
  #L49355a.  if v5 == 0 then goto L493566;
  #L49355e.  call `onComplete`(v6) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L493564.  return v2;
  #L493566.  v4:= 0I;
  #L493568.  return v4;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a` v3 @kind this, `boolean` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.f:(Z)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L493700.  if v4 == 0 then goto L49372c;
  #L493704.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.l` @type ^`int`;
  #L493708.  v4:= v4 + 1;
  #L49370c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.d` @type ^`int`;
  #L493710.  if v4 != v0 then goto L493728;
  #L493714.  v0:= 0I;
  #L493716.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.l` @type ^`int` := v0;
  #L49371a.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L49371e.  v1:= (`long`) v4 @kind i2l;
  #L493720.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L493726.  goto L49372c;
  #L493728.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.l` @type ^`int` := v4;
  #L49372c.  return @kind void;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49357c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` @kind object;
  #L493580.  if v0 != 0 then goto L493598;
  #L493584.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L493588.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L49358e.  v0:= temp;
  #L493590.  if v0 == 0 then goto L493598;
  #L493594.  v0:= 1I;
  #L493596.  goto L49359a;
  #L493598.  v0:= 0I;
  #L49359a.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4939d8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.h` @type ^`boolean` @kind boolean;
  #L4939dc.  if v0 == 0 then goto L4939e2;
  #L4939e0.  return @kind void;
  #L4939e2.  v0:= 1I;
  #L4939e4.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4939e8.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.drain:()V` @kind virtual;
  #L4939ee.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L493a00.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.h` @type ^`boolean` @kind boolean;
  #L493a04.  if v0 != 0 then goto L493a26;
  #L493a08.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L493a0c.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L493a12.  v0:= temp;
  #L493a14.  if v0 == 0 then goto L493a26;
  #L493a18.  v2:= 1I;
  #L493a1a.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.h` @type ^`boolean` := v2 @kind boolean;
  #L493a1e.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.drain:()V` @kind virtual;
  #L493a24.  goto L493a2c;
  #L493a26.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L493a2c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L493a40.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.h` @type ^`boolean` @kind boolean;
  #L493a44.  if v0 == 0 then goto L493a4a;
  #L493a48.  return @kind void;
  #L493a4a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.m` @type ^`int`;
  #L493a4e.  if v0 != 0 then goto L493a78;
  #L493a52.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L493a56.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L493a5c.  v2:= temp;
  #L493a5e.  if v2 != 0 then goto L493a78;
  #L493a62.  v2:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L493a66.  v0:= "Queue is full?!" @kind object;
  #L493a6a.  call `<init>`(v2, v0) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L493a70.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L493a76.  return @kind void;
  #L493a78.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.drain:()V` @kind virtual;
  #L493a7e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L493a90.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L493a94.  call temp:= `validate`(v0, v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L493a9a.  v0:= temp;
  #L493a9c.  if v0 == 0 then goto L493b28;
  #L493aa0.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.f` @type ^`org.reactivestreams.Subscription` := v4 @kind object;
  #L493aa4.  v0:= instanceof @variable v4 @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind boolean;
  #L493aa8.  if v0 == 0 then goto L493b00;
  #L493aac.  v0:= v4 @kind object;
  #L493aae.  v0:= (`io.reactivex.rxjava3.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L493ab2.  v1:= 3I;
  #L493ab4.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L493aba.  v1:= temp;
  #L493abc.  v2:= 1I;
  #L493abe.  if v1 != v2 then goto L493ada;
  #L493ac2.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.m` @type ^`int` := v1;
  #L493ac6.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L493aca.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.h` @type ^`boolean` := v2 @kind boolean;
  #L493ace.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L493ad2.  call `onSubscribe`(v4, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L493ad8.  return @kind void;
  #L493ada.  v2:= 2I;
  #L493adc.  if v1 != v2 then goto L493b00;
  #L493ae0.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.m` @type ^`int` := v1;
  #L493ae4.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L493ae8.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L493aec.  call `onSubscribe`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L493af2.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.c` @type ^`int`;
  #L493af6.  v0:= (`long`) v0 @kind i2l;
  #L493af8.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L493afe.  return @kind void;
  #L493b00.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L493b04.  v1:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.c` @type ^`int`;
  #L493b08.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L493b0e.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L493b12.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L493b16.  call `onSubscribe`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L493b1c.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.c` @type ^`int`;
  #L493b20.  v0:= (`long`) v0 @kind i2l;
  #L493b22.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L493b28.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4935d4.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` @kind object;
  #L4935d8.  v1:= 0I;
  #L4935da.  if v0 != 0 then goto L49361c;
  #L4935de.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4935e2.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4935e8.  v0:= temp @kind object;
  #L4935ea.  if v0 != 0 then goto L4935f0;
  #L4935ee.  return v1 @kind object;
  #L4935f0.  v2:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4935f4.  call temp:= `apply`(v2, v0) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4935fa.  v0:= temp @kind object;
  #L4935fc.  v0:= (`java.lang.Iterable`) v0 @kind object;
  #L493600.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L493606.  v0:= temp @kind object;
  #L493608.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L49360e.  v2:= temp;
  #L493610.  if v2 != 0 then goto L493618;
  #L493614.  v0:= v1 @kind object;
  #L493616.  goto L4935da;
  #L493618.  v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` := v0 @kind object;
  #L49361c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L493622.  v2:= temp @kind object;
  #L493624.  v3:= "The iterator returned a null value" @kind object;
  #L493628.  call temp:= `requireNonNull`(v2, v3) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49362e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L493634.  v0:= temp;
  #L493636.  if v0 != 0 then goto L49363e;
  #L49363a.  v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` := v1 @kind object;
  #L49363e.  return v2 @kind object;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L493b3c.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L493b42.  v0:= temp;
  #L493b44.  if v0 == 0 then goto L493b58;
  #L493b48.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L493b4c.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L493b52.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.drain:()V` @kind virtual;
  #L493b58.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlattenIterable$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4935ac.  v0:= 1I;
  #L4935ae.  v2:= v2 ^& v0 @kind int;
  #L4935b0.  if v2 == 0 then goto L4935be;
  #L4935b4.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$a.m` @type ^`int`;
  #L4935b8.  if v2 != v0 then goto L4935be;
  #L4935bc.  return v0;
  #L4935be.  v2:= 0I;
  #L4935c0.  return v2;
}
