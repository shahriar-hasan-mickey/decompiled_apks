record `io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.disposables.SequentialDisposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.ObservableSource` `io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Predicate` `io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a.d` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a.e` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `long` v2 , `io.reactivex.rxjava3.functions.Predicate` v4 @kind object, `io.reactivex.rxjava3.internal.disposables.SequentialDisposable` v5 @kind object, `io.reactivex.rxjava3.core.ObservableSource` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRetryPredicate$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;JLio/reactivex/rxjava3/functions/Predicate;Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;Lio/reactivex/rxjava3/core/ObservableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c6c08.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4c6c0e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4c6c12.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a.b` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` := v5 @kind object;
  #L4c6c16.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a.c` @type ^`io.reactivex.rxjava3.core.ObservableSource` := v6 @kind object;
  #L4c6c1a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a.d` @type ^`io.reactivex.rxjava3.functions.Predicate` := v4 @kind object;
  #L4c6c1e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a.e` @type ^`long` := v2 @kind wide;
  #L4c6c22.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRetryPredicate$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4c6d34.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c6d3a.  v0:= temp;
  #L4c6d3c.  if v0 != 0 then goto L4c6d6c;
  #L4c6d40.  v0:= 1I;
  #L4c6d42.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a.b` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4c6d46.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.isDisposed:()Z` @kind virtual;
  #L4c6d4c.  v1:= temp;
  #L4c6d4e.  if v1 == 0 then goto L4c6d54;
  #L4c6d52.  return @kind void;
  #L4c6d54.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a.c` @type ^`io.reactivex.rxjava3.core.ObservableSource` @kind object;
  #L4c6d58.  call `subscribe`(v1, v2) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4c6d5e.  v0:= -v0 @kind int;
  #L4c6d60.  call temp:= `addAndGet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4c6d66.  v0:= temp;
  #L4c6d68.  if v0 != 0 then goto L4c6d42;
  #L4c6d6c.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRetryPredicate$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c6c34.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c6c38.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4c6c3e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRetryPredicate$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4c6c50.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a.e` @type ^`long` @kind wide;
  #L4c6c54.  v2:= 9223372036854775807L;
  #L4c6c5e.  v4:= lcmp(v0, v2);
  #L4c6c62.  if v4 == 0 then goto L4c6c72;
  #L4c6c66.  v2:= 1L;
  #L4c6c6a.  v2:= v0 - v2 @kind long;
  #L4c6c6e.  v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a.e` @type ^`long` := v2 @kind wide;
  #L4c6c72.  v2:= 0L;
  #L4c6c76.  v4:= lcmp(v0, v2);
  #L4c6c7a.  if v4 != 0 then goto L4c6c8a;
  #L4c6c7e.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c6c82.  call `onError`(v0, v6) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c6c88.  goto L4c6cac;
  #L4c6c8a.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a.d` @type ^`io.reactivex.rxjava3.functions.Predicate` @kind object;
  #L4c6c8e.  call temp:= `test`(v0, v6) @signature `Lio/reactivex/rxjava3/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L4c6c94.  v0:= temp;
  #L4c6c96.  if v0 != 0 then goto L4c6ca6;
  #L4c6c9a.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c6c9e.  call `onError`(v0, v6) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c6ca4.  return @kind void;
  #L4c6ca6.  call `a`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRetryPredicate$a;.a:()V` @kind virtual;
  #L4c6cac.  return @kind void;
  #L4c6cae.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c6cb0.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c6cb6.  v1:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c6cba.  v2:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L4c6cbe.  v3:= 2I;
  #L4c6cc0.  v3:= new `java.lang.Throwable`[v3];
  #L4c6cc4.  v4:= 0I;
  #L4c6cc6.  v3[v4]:= v6 @kind object;
  #L4c6cca.  v6:= 1I;
  #L4c6ccc.  v3[v6]:= v0 @kind object;
  #L4c6cd0.  call `<init>`(v2, v3) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L4c6cd6.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c6cdc.  return @kind void;
  catch `java.lang.Throwable` @[L4c6c8a..L4c6c96] goto L4c6cae;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRetryPredicate$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c6cfc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c6d00.  call `onNext`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c6d06.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRetryPredicate$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c6d18.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$a.b` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4c6d1c.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4c6d22.  return @kind void;
}
