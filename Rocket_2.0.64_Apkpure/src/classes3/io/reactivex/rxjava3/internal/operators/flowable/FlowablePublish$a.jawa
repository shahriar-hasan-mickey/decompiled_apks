record `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a.b` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a.c` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49b2b4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L49b2ba.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L49b2be.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b` := v2 @kind object;
  #L49b2c2.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$a;.a:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L49b288.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L49b28e.  v0:= temp @kind wide;
  #L49b290.  v2:= -9223372036854775808L;
  #L49b294.  v4:= lcmp(v0, v2);
  #L49b298.  if v4 != 0 then goto L49b2a0;
  #L49b29c.  v0:= 1I;
  #L49b29e.  goto L49b2a2;
  #L49b2a0.  v0:= 0I;
  #L49b2a2.  return v0;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L49b2d4.  v0:= -9223372036854775808L;
  #L49b2d8.  call temp:= `getAndSet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L49b2de.  v2:= temp @kind wide;
  #L49b2e0.  v4:= lcmp(v2, v0);
  #L49b2e4.  if v4 == 0 then goto L49b2fc;
  #L49b2e8.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b` @kind object;
  #L49b2ec.  call `d`(v0, v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.d:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$a;)V` @kind virtual;
  #L49b2f2.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b` @kind object;
  #L49b2f6.  call `c`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.c:()V` @kind virtual;
  #L49b2fc.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49b310.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L49b316.  v0:= temp;
  #L49b318.  if v0 == 0 then goto L49b32c;
  #L49b31c.  call temp:= `addCancel`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.addCancel:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L49b322.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$a.b` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$b` @kind object;
  #L49b326.  call `c`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowablePublish$b;.c:()V` @kind virtual;
  #L49b32c.  return @kind void;
}
