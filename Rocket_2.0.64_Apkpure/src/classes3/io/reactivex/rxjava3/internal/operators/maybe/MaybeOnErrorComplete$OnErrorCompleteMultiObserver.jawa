record `io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete$OnErrorCompleteMultiObserver` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.MaybeObserver` @kind interface, `io.reactivex.rxjava3.core.SingleObserver` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.MaybeObserver` `io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete$OnErrorCompleteMultiObserver.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Predicate` `io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete$OnErrorCompleteMultiObserver.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete$OnErrorCompleteMultiObserver.c` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete$OnErrorCompleteMultiObserver` v0 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v1 @kind object, `io.reactivex.rxjava3.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeOnErrorComplete$OnErrorCompleteMultiObserver;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;Lio/reactivex/rxjava3/functions/Predicate;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4ae8d8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4ae8de.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete$OnErrorCompleteMultiObserver.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` := v1 @kind object;
  #L4ae8e2.  v0.`io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete$OnErrorCompleteMultiObserver.b` @type ^`io.reactivex.rxjava3.functions.Predicate` := v2 @kind object;
  #L4ae8e6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete$OnErrorCompleteMultiObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeOnErrorComplete$OnErrorCompleteMultiObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ae8f8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete$OnErrorCompleteMultiObserver.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4ae8fc.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4ae902.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete$OnErrorCompleteMultiObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeOnErrorComplete$OnErrorCompleteMultiObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ae8b8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete$OnErrorCompleteMultiObserver.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4ae8bc.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4ae8c2.  v0:= temp;
  #L4ae8c4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete$OnErrorCompleteMultiObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeOnErrorComplete$OnErrorCompleteMultiObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ae914.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete$OnErrorCompleteMultiObserver.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4ae918.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L4ae91e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete$OnErrorCompleteMultiObserver` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeOnErrorComplete$OnErrorCompleteMultiObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4ae930.  v0:= v5.`io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete$OnErrorCompleteMultiObserver.b` @type ^`io.reactivex.rxjava3.functions.Predicate` @kind object;
  #L4ae934.  call temp:= `test`(v0, v6) @signature `Lio/reactivex/rxjava3/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L4ae93a.  v0:= temp;
  #L4ae93c.  if v0 == 0 then goto L4ae94c;
  #L4ae940.  v6:= v5.`io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete$OnErrorCompleteMultiObserver.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4ae944.  call `onComplete`(v6) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L4ae94a.  goto L4ae956;
  #L4ae94c.  v0:= v5.`io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete$OnErrorCompleteMultiObserver.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4ae950.  call `onError`(v0, v6) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ae956.  return @kind void;
  #L4ae958.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ae95a.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4ae960.  v1:= v5.`io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete$OnErrorCompleteMultiObserver.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4ae964.  v2:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L4ae968.  v3:= 2I;
  #L4ae96a.  v3:= new `java.lang.Throwable`[v3];
  #L4ae96e.  v4:= 0I;
  #L4ae970.  v3[v4]:= v6 @kind object;
  #L4ae974.  v6:= 1I;
  #L4ae976.  v3[v6]:= v0 @kind object;
  #L4ae97a.  call `<init>`(v2, v3) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L4ae980.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ae986.  return @kind void;
  catch `java.lang.Throwable` @[L4ae930..L4ae93c] goto L4ae958;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete$OnErrorCompleteMultiObserver` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeOnErrorComplete$OnErrorCompleteMultiObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ae9a4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete$OnErrorCompleteMultiObserver.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4ae9a8.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4ae9ae.  v0:= temp;
  #L4ae9b0.  if v0 == 0 then goto L4ae9c2;
  #L4ae9b4.  v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete$OnErrorCompleteMultiObserver.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4ae9b8.  v2:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete$OnErrorCompleteMultiObserver.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4ae9bc.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4ae9c2.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete$OnErrorCompleteMultiObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/maybe/MaybeOnErrorComplete$OnErrorCompleteMultiObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ae9d4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete$OnErrorCompleteMultiObserver.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4ae9d8.  call `onSuccess`(v0, v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4ae9de.  return @kind void;
}
