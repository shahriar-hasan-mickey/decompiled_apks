record `io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `io.reactivex.rxjava3.core.MaybeObserver` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a.c` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/MaybeFlatMapPublisher$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b349c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4b34a2.  v0.`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4b34a6.  v0.`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4b34aa.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4b34ae.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4b34b4.  v0.`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4b34b8.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/MaybeFlatMapPublisher$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b34cc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b34d0.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4b34d6.  call temp:= `cancel`(v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4b34dc.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/MaybeFlatMapPublisher$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b34f0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4b34f4.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4b34fa.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/MaybeFlatMapPublisher$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b350c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4b3510.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4b3516.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/MaybeFlatMapPublisher$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b3528.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4b352c.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4b3532.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/MaybeFlatMapPublisher$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b3544.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4b3548.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4b354e.  v0:= temp;
  #L4b3550.  if v0 == 0 then goto L4b3562;
  #L4b3554.  v1.`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4b3558.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4b355c.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4b3562.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/MaybeFlatMapPublisher$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b3574.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4b3578.  call temp:= `deferredSetOnce`(v1, v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4b357e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/MaybeFlatMapPublisher$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b3590.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4b3594.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4b359a.  v3:= temp @kind object;
  #L4b359c.  v0:= "The mapper returned a null Publisher" @kind object;
  #L4b35a0.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b35a6.  v3:= (`org.reactivestreams.Publisher`) v3 @kind object;
  #L4b35aa.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b35b0.  v0:= temp @kind object;
  #L4b35b2.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4b35b6.  if v0 == v1 then goto L4b35c0;
  #L4b35ba.  call `subscribe`(v3, v2) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4b35c0.  return @kind void;
  #L4b35c2.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b35c4.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b35ca.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4b35ce.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4b35d4.  return @kind void;
  catch `java.lang.Throwable` @[L4b3590..L4b35aa] goto L4b35c2;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/MaybeFlatMapPublisher$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b35f4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4b35f8.  call `deferredRequest`(v1, v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L4b35fe.  return @kind void;
}
