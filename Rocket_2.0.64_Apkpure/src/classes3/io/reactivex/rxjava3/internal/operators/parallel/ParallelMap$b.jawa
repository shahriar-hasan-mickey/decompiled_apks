record `io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$b.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$b.c` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$b.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMap$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d1ac0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4d1ac6.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$b.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4d1aca.  v0.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$b.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4d1ace.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMap$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d1ae0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$b.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d1ae4.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4d1aea.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMap$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d1afc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$b.d` @type ^`boolean` @kind boolean;
  #L4d1b00.  if v0 == 0 then goto L4d1b06;
  #L4d1b04.  return @kind void;
  #L4d1b06.  v0:= 1I;
  #L4d1b08.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$b.d` @type ^`boolean` := v0 @kind boolean;
  #L4d1b0c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d1b10.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4d1b16.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMap$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d1b28.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$b.d` @type ^`boolean` @kind boolean;
  #L4d1b2c.  if v0 == 0 then goto L4d1b38;
  #L4d1b30.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4d1b36.  return @kind void;
  #L4d1b38.  v0:= 1I;
  #L4d1b3a.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$b.d` @type ^`boolean` := v0 @kind boolean;
  #L4d1b3e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d1b42.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d1b48.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMap$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d1b5c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$b.d` @type ^`boolean` @kind boolean;
  #L4d1b60.  if v0 == 0 then goto L4d1b66;
  #L4d1b64.  return @kind void;
  #L4d1b66.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$b.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4d1b6a.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4d1b70.  v2:= temp @kind object;
  #L4d1b72.  v0:= "The mapper returned a null value" @kind object;
  #L4d1b76.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4d1b7c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d1b80.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4d1b86.  return @kind void;
  #L4d1b88.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4d1b8a.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4d1b90.  call `cancel`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMap$b;.cancel:()V` @kind virtual;
  #L4d1b96.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMap$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4d1b9c.  return @kind void;
  catch `java.lang.Throwable` @[L4d1b66..L4d1b7c] goto L4d1b88;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$b` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMap$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d1bbc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$b.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d1bc0.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4d1bc6.  v0:= temp;
  #L4d1bc8.  if v0 == 0 then goto L4d1bda;
  #L4d1bcc.  v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$b.c` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4d1bd0.  v2:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4d1bd4.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4d1bda.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMap$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d1bec.  v0:= v1.`io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$b.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4d1bf0.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4d1bf6.  return @kind void;
}
