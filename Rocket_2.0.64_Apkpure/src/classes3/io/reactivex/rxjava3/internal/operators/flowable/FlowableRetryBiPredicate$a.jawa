record `io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryBiPredicate$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryBiPredicate$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryBiPredicate$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryBiPredicate$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiPredicate` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryBiPredicate$a.d` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryBiPredicate$a.e` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryBiPredicate$a.f` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryBiPredicate$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryBiPredicate$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.BiPredicate` v2 @kind object, `io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRetryBiPredicate$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/BiPredicate;Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;Lorg/reactivestreams/Publisher;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L49efc0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L49efc6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryBiPredicate$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L49efca.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryBiPredicate$a.b` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` := v3 @kind object;
  #L49efce.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryBiPredicate$a.c` @type ^`org.reactivestreams.Publisher` := v4 @kind object;
  #L49efd2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryBiPredicate$a.d` @type ^`io.reactivex.rxjava3.functions.BiPredicate` := v2 @kind object;
  #L49efd6.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryBiPredicate$a` v6 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRetryBiPredicate$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L49f0d0.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L49f0d6.  v0:= temp;
  #L49f0d8.  if v0 != 0 then goto L49f126;
  #L49f0dc.  v0:= 1I;
  #L49f0de.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryBiPredicate$a.b` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L49f0e2.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.isCancelled:()Z` @kind virtual;
  #L49f0e8.  v1:= temp;
  #L49f0ea.  if v1 == 0 then goto L49f0f0;
  #L49f0ee.  return @kind void;
  #L49f0f0.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryBiPredicate$a.f` @type ^`long` @kind wide;
  #L49f0f4.  v3:= 0L;
  #L49f0f8.  v5:= lcmp(v1, v3);
  #L49f0fc.  if v5 == 0 then goto L49f10e;
  #L49f100.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryBiPredicate$a.f` @type ^`long` := v3 @kind wide;
  #L49f104.  v3:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryBiPredicate$a.b` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L49f108.  call `produced`(v3, v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @kind virtual;
  #L49f10e.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryBiPredicate$a.c` @type ^`org.reactivestreams.Publisher` @kind object;
  #L49f112.  call `subscribe`(v1, v6) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L49f118.  v0:= -v0 @kind int;
  #L49f11a.  call temp:= `addAndGet`(v6, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L49f120.  v0:= temp;
  #L49f122.  if v0 != 0 then goto L49f0de;
  #L49f126.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryBiPredicate$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRetryBiPredicate$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49efe8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryBiPredicate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49efec.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L49eff2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryBiPredicate$a` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRetryBiPredicate$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L49f004.  v0:= 1I;
  #L49f006.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryBiPredicate$a.d` @type ^`io.reactivex.rxjava3.functions.BiPredicate` @kind object;
  #L49f00a.  v2:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryBiPredicate$a.e` @type ^`int`;
  #L49f00e.  v2:= v2 + v0 @kind int;
  #L49f010.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryBiPredicate$a.e` @type ^`int` := v2;
  #L49f014.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L49f01a.  v2:= temp @kind object;
  #L49f01c.  call temp:= `test`(v1, v2, v7) @signature `Lio/reactivex/rxjava3/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L49f022.  v0:= temp;
  #L49f024.  if v0 != 0 then goto L49f034;
  #L49f028.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryBiPredicate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49f02c.  call `onError`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L49f032.  return @kind void;
  #L49f034.  call `a`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRetryBiPredicate$a;.a:()V` @kind virtual;
  #L49f03a.  return @kind void;
  #L49f03c.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49f03e.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L49f044.  v2:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryBiPredicate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49f048.  v3:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L49f04c.  v4:= 2I;
  #L49f04e.  v4:= new `java.lang.Throwable`[v4];
  #L49f052.  v5:= 0I;
  #L49f054.  v4[v5]:= v7 @kind object;
  #L49f058.  v4[v0]:= v1 @kind object;
  #L49f05c.  call `<init>`(v3, v4) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L49f062.  call `onError`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L49f068.  return @kind void;
  catch `java.lang.Throwable` @[L49f006..L49f024] goto L49f03c;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryBiPredicate$a` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRetryBiPredicate$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L49f088.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryBiPredicate$a.f` @type ^`long` @kind wide;
  #L49f08c.  v2:= 1L;
  #L49f090.  v0:= v0 + v2 @kind long;
  #L49f092.  v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryBiPredicate$a.f` @type ^`long` := v0 @kind wide;
  #L49f096.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryBiPredicate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49f09a.  call `onNext`(v0, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L49f0a0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryBiPredicate$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableRetryBiPredicate$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49f0b4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryBiPredicate$a.b` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L49f0b8.  call `setSubscription`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L49f0be.  return @kind void;
}
