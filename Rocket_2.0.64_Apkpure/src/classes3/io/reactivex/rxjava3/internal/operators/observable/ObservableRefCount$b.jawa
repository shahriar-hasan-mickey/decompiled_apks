record `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount` `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a` `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b.d` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount` v2 @kind object, `io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount$b;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount;Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount$a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c5158.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4c515e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4c5162.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b.b` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount` := v2 @kind object;
  #L4c5166.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a` := v3 @kind object;
  #L4c516a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c517c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4c5180.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4c5186.  v0:= 0I;
  #L4c5188.  v1:= 1I;
  #L4c518a.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4c5190.  v0:= temp;
  #L4c5192.  if v0 == 0 then goto L4c51a4;
  #L4c5196.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b.b` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount` @kind object;
  #L4c519a.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a` @kind object;
  #L4c519e.  call `d`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount;.d:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount$a;)V` @kind virtual;
  #L4c51a4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c5138.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4c513c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4c5142.  v0:= temp;
  #L4c5144.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c51b8.  v0:= 0I;
  #L4c51ba.  v1:= 1I;
  #L4c51bc.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4c51c2.  v0:= temp;
  #L4c51c4.  if v0 == 0 then goto L4c51e0;
  #L4c51c8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b.b` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount` @kind object;
  #L4c51cc.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a` @kind object;
  #L4c51d0.  call `e`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount;.e:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount$a;)V` @kind virtual;
  #L4c51d6.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c51da.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4c51e0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c51f4.  v0:= 0I;
  #L4c51f6.  v1:= 1I;
  #L4c51f8.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4c51fe.  v0:= temp;
  #L4c5200.  if v0 == 0 then goto L4c521e;
  #L4c5204.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b.b` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount` @kind object;
  #L4c5208.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$a` @kind object;
  #L4c520c.  call `e`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount;.e:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount$a;)V` @kind virtual;
  #L4c5212.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c5216.  call `onError`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c521c.  goto L4c5224;
  #L4c521e.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4c5224.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c5238.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c523c.  call `onNext`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c5242.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableRefCount$b;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c5254.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4c5258.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4c525e.  v0:= temp;
  #L4c5260.  if v0 == 0 then goto L4c5272;
  #L4c5264.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4c5268.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c526c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4c5272.  return @kind void;
}
