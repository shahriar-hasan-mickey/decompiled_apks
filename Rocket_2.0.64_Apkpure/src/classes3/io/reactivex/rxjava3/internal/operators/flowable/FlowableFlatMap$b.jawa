record `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.d` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.f` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.g` @AccessFlag VOLATILE;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.h` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.i` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.j` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.k` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.l` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.m` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.n` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.o` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.p` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.q` @AccessFlag FINAL;
}
global `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a`[] `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.r` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a`[] `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.s` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L491238.  v0:= 0I;
  #L49123a.  v1:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a`[v0];
  #L49123e.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.r` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a`[] := v1 @kind object;
  #L491242.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a`[v0];
  #L491246.  `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.s` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a`[] := v0 @kind object;
  #L49124a.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object, `io.reactivex.rxjava3.functions.Function` v4 @kind object, `boolean` v5 , `int` v6 , `int` v7 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;ZII)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L49125c.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L491262.  v0:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L491266.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L49126c.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v0 @kind object;
  #L491270.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L491274.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L49127a.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L49127e.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L491282.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L491288.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.k` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L49128c.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.a` @type ^`org.reactivestreams.Subscriber` := v3 @kind object;
  #L491290.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.b` @type ^`io.reactivex.rxjava3.functions.Function` := v4 @kind object;
  #L491294.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.c` @type ^`boolean` := v5 @kind boolean;
  #L491298.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.d` @type ^`int` := v6;
  #L49129c.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.e` @type ^`int` := v7;
  #L4912a0.  v3:= 1I;
  #L4912a2.  v4:= v6 ^> 1;
  #L4912a6.  call temp:= `max`(v3, v4) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L4912ac.  v3:= temp;
  #L4912ae.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.q` @type ^`int` := v3;
  #L4912b2.  v3:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.r` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a`[] @kind object;
  #L4912b6.  call `lazySet`(v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4912bc.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` v4 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.a:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L49113c.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L491140.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L491146.  v0:= temp @kind object;
  #L491148.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a`[]) v0 @kind object;
  #L49114c.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.s` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a`[] @kind object;
  #L491150.  v2:= 0I;
  #L491152.  if v0 != v1 then goto L49115e;
  #L491156.  call `dispose`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;.dispose:()V` @kind virtual;
  #L49115c.  return v2;
  #L49115e.  v1:= length @variable v0;
  #L491160.  v3:= v1 + 1;
  #L491164.  v3:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a`[v3];
  #L491168.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L49116e.  v3[v1]:= v5 @kind object;
  #L491172.  v1:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L491176.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L49117c.  v0:= temp;
  #L49117e.  if v0 == 0 then goto L49113c;
  #L491182.  v5:= 1I;
  #L491184.  return v5;
}
procedure `boolean` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.b:()Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L491198.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.i` @type ^`boolean` @kind boolean;
  #L49119c.  v1:= 1I;
  #L49119e.  if v0 == 0 then goto L4911aa;
  #L4911a2.  call `c`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.c:()V` @kind virtual;
  #L4911a8.  return v1;
  #L4911aa.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.c` @type ^`boolean` @kind boolean;
  #L4911ae.  if v0 != 0 then goto L4911d8;
  #L4911b2.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4911b6.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4911bc.  v0:= temp @kind object;
  #L4911be.  if v0 == 0 then goto L4911d8;
  #L4911c2.  call `c`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.c:()V` @kind virtual;
  #L4911c8.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4911cc.  v2:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4911d0.  call `tryTerminateConsumer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4911d6.  return v1;
  #L4911d8.  v0:= 0I;
  #L4911da.  return v0;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.c:()V` @AccessFlag  {
    temp;
    v0;

  #L49131c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L491320.  if v0 == 0 then goto L49132a;
  #L491324.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L49132a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4912d0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.i` @type ^`boolean` @kind boolean;
  #L4912d4.  if v0 != 0 then goto L491308;
  #L4912d8.  v0:= 1I;
  #L4912da.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.i` @type ^`boolean` := v0 @kind boolean;
  #L4912de.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.l` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4912e2.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4912e8.  call `d`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.d:()V` @kind virtual;
  #L4912ee.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4912f4.  v0:= temp;
  #L4912f6.  if v0 != 0 then goto L491308;
  #L4912fa.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4912fe.  if v0 == 0 then goto L491308;
  #L491302.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L491308.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L49133c.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L491340.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.s` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a`[] @kind object;
  #L491344.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L49134a.  v0:= temp @kind object;
  #L49134c.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a`[]) v0 @kind object;
  #L491350.  if v0 == v1 then goto L491376;
  #L491354.  v1:= length @variable v0;
  #L491356.  v2:= 0I;
  #L491358.  if v2 >= v1 then goto L49136c;
  #L49135c.  v3:= v0[v2] @kind object;
  #L491360.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;.dispose:()V` @kind virtual;
  #L491366.  v2:= v2 + 1;
  #L49136a.  goto L491358;
  #L49136c.  v0:= v4.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L491370.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L491376.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.e:()V` @AccessFlag  {
    temp;
    v0;

  #L491388.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L49138e.  v0:= temp;
  #L491390.  if v0 != 0 then goto L49139a;
  #L491394.  call `f`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.f:()V` @kind virtual;
  #L49139a.  return @kind void;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` v24 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.f:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;
    v22;
    v23;

  #L4913ac.  v1:= v24 @kind object;
  #L4913b0.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4913b4.  v4:= 1I;
  #L4913b6.  call temp:= `b`(v24) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.b:()Z` @kind virtual;
  #L4913bc.  v0:= temp;
  #L4913be.  if v0 == 0 then goto L4913c4;
  #L4913c2.  return @kind void;
  #L4913c4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4913c8.  v5:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4913cc.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4913d2.  v5:= temp @kind wide;
  #L4913d4.  v7:= 9223372036854775807L;
  #L4913de.  v10:= lcmp(v5, v7);
  #L4913e2.  if v10 != 0 then goto L4913ea;
  #L4913e6.  v10:= 1I;
  #L4913e8.  goto L4913ec;
  #L4913ea.  v10:= 0I;
  #L4913ec.  v11:= 1L;
  #L4913f0.  v13:= 0L;
  #L4913f4.  if v0 == 0 then goto L491456;
  #L4913f8.  v7:= v13 @kind wide;
  #L4913fa.  v15:= v7 @kind wide;
  #L4913fc.  v17:= lcmp(v5, v13);
  #L491400.  if v17 == 0 then goto L49142e;
  #L491404.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L49140a.  v9:= temp @kind object;
  #L49140c.  call temp:= `b`(v24) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.b:()Z` @kind virtual;
  #L491412.  v18:= temp;
  #L491414.  if v18 == 0 then goto L49141a;
  #L491418.  return @kind void;
  #L49141a.  if v9 != 0 then goto L491420;
  #L49141e.  goto L49142e;
  #L491420.  call `onNext`(v2, v9) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L491426.  v15:= v15 + v11 @kind long;
  #L491428.  v7:= v7 + v11 @kind long;
  #L49142a.  v5:= v5 - v11 @kind long;
  #L49142c.  goto L4913fc;
  #L49142e.  v0:= lcmp(v7, v13);
  #L491432.  if v0 == 0 then goto L491458;
  #L491436.  if v10 == 0 then goto L491446;
  #L49143a.  v5:= 9223372036854775807L;
  #L491444.  goto L491458;
  #L491446.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L49144a.  v5:= -v7 @kind long;
  #L49144c.  call temp:= `addAndGet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L491452.  v5:= temp @kind wide;
  #L491454.  goto L491458;
  #L491456.  v15:= v13 @kind wide;
  #L491458.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.g` @type ^`boolean` @kind boolean;
  #L49145c.  v7:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L491460.  v8:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L491464.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49146a.  v8:= temp @kind object;
  #L49146c.  v8:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a`[]) v8 @kind object;
  #L491470.  v9:= length @variable v8;
  #L491472.  if v0 == 0 then goto L49149a;
  #L491476.  if v7 == 0 then goto L491486;
  #L49147a.  call temp:= `isEmpty`(v7) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L491480.  v0:= temp;
  #L491482.  if v0 == 0 then goto L49149a;
  #L491486.  if v9 != 0 then goto L49149a;
  #L49148a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L49148e.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L491492.  call `tryTerminateConsumer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L491498.  return @kind void;
  #L49149a.  v18:= v4;
  #L49149e.  if v9 == 0 then goto L49169e;
  #L4914a2.  v3:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.n` @type ^`long` @kind wide;
  #L4914a6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.o` @type ^`int`;
  #L4914aa.  if v9 <= v0 then goto L4914be;
  #L4914ae.  v7:= v8[v0] @kind object;
  #L4914b2.  v11:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.a` @type ^`long` @kind wide;
  #L4914b6.  v7:= lcmp(v11, v3);
  #L4914ba.  if v7 == 0 then goto L4914fc;
  #L4914be.  if v9 > v0 then goto L4914c4;
  #L4914c2.  v0:= 0I;
  #L4914c4.  v7:= 0I;
  #L4914c6.  if v7 >= v9 then goto L4914ec;
  #L4914ca.  v11:= v8[v0] @kind object;
  #L4914ce.  v11:= v11.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.a` @type ^`long` @kind wide;
  #L4914d2.  v21:= lcmp(v11, v3);
  #L4914d6.  if v21 != 0 then goto L4914dc;
  #L4914da.  goto L4914ec;
  #L4914dc.  v0:= v0 + 1;
  #L4914e0.  if v0 != v9 then goto L4914e6;
  #L4914e4.  v0:= 0I;
  #L4914e6.  v7:= v7 + 1;
  #L4914ea.  goto L4914c6;
  #L4914ec.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.o` @type ^`int` := v0;
  #L4914f0.  v3:= v8[v0] @kind object;
  #L4914f4.  v3:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.a` @type ^`long` @kind wide;
  #L4914f8.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.n` @type ^`long` := v3 @kind wide;
  #L4914fc.  v3:= v0;
  #L4914fe.  v0:= 0I;
  #L491500.  v4:= 0I;
  #L491502.  if v4 >= v9 then goto L49167e;
  #L491506.  call temp:= `b`(v24) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.b:()Z` @kind virtual;
  #L49150c.  v7:= temp;
  #L49150e.  if v7 == 0 then goto L491514;
  #L491512.  return @kind void;
  #L491514.  v7:= v8[v3] @kind object;
  #L491518.  v11:= 0I;
  #L49151a.  v12:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L49151e.  if v12 != 0 then goto L49152e;
  #L491522.  v21:= v8 @kind object;
  #L491526.  v22:= v9;
  #L49152a.  goto L491610;
  #L49152e.  v21:= v8 @kind object;
  #L491532.  v22:= v9;
  #L491536.  v8:= v13 @kind wide;
  #L491538.  v23:= lcmp(v5, v13);
  #L49153c.  if v23 == 0 then goto L4915c0;
  #L491540.  call temp:= `b`(v24) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.b:()Z` @kind virtual;
  #L491546.  v11:= temp;
  #L491548.  if v11 == 0 then goto L49154e;
  #L49154c.  return @kind void;
  #L49154e.  call temp:= `poll`(v12) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L491554.  v11:= temp @kind object;
  #L491556.  if v11 != 0 then goto L49155c;
  #L49155a.  goto L4915c0;
  #L49155c.  call `onNext`(v2, v11) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L491562.  v19:= 1L;
  #L491566.  v5:= v5 - v19 @kind long;
  #L49156a.  v8:= v8 + v19 @kind long;
  #L49156e.  goto L491538;
  #L491570.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L491572.  v8:= v0 @kind object;
  #L491574.  call `throwIfFatal`(v8) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L49157a.  call `dispose`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;.dispose:()V` @kind virtual;
  #L491580.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L491584.  call temp:= `tryAddThrowableOrReport`(v0, v8) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L49158a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.c` @type ^`boolean` @kind boolean;
  #L49158e.  if v0 != 0 then goto L49159c;
  #L491592.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.l` @type ^`org.reactivestreams.Subscription` @kind object;
  #L491596.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L49159c.  call temp:= `b`(v24) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.b:()Z` @kind virtual;
  #L4915a2.  v0:= temp;
  #L4915a4.  if v0 == 0 then goto L4915aa;
  #L4915a8.  return @kind void;
  #L4915aa.  call `i`(v1, v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.i:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;)V` @kind virtual;
  #L4915b0.  v4:= v4 + 1;
  #L4915b4.  v9:= v22;
  #L4915b8.  v0:= 1I;
  #L4915ba.  v7:= 1L;
  #L4915be.  goto L49166e;
  #L4915c0.  v12:= lcmp(v8, v13);
  #L4915c4.  if v12 == 0 then goto L4915f2;
  #L4915c8.  if v10 != 0 then goto L4915dc;
  #L4915cc.  v5:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4915d0.  v13:= -v8 @kind long;
  #L4915d2.  call temp:= `addAndGet`(v5, v13) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L4915d8.  v5:= temp @kind wide;
  #L4915da.  goto L4915e6;
  #L4915dc.  v5:= 9223372036854775807L;
  #L4915e6.  call `a`(v7, v8) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;.a:(J)V` @kind virtual;
  #L4915ec.  v8:= 0L;
  #L4915f0.  goto L4915f4;
  #L4915f2.  v8:= v13 @kind wide;
  #L4915f4.  v12:= lcmp(v5, v8);
  #L4915f8.  if v12 == 0 then goto L491610;
  #L4915fc.  if v11 != 0 then goto L491602;
  #L491600.  goto L491610;
  #L491602.  v8:= v21 @kind object;
  #L491606.  v9:= v22;
  #L49160a.  v13:= 0L;
  #L49160e.  goto L49151a;
  #L491610.  v8:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.e` @type ^`boolean` @kind boolean;
  #L491614.  v9:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L491618.  if v8 == 0 then goto L49164a;
  #L49161c.  if v9 == 0 then goto L49162c;
  #L491620.  call temp:= `isEmpty`(v9) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L491626.  v8:= temp;
  #L491628.  if v8 == 0 then goto L49164a;
  #L49162c.  call `i`(v1, v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.i:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;)V` @kind virtual;
  #L491632.  call temp:= `b`(v24) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.b:()Z` @kind virtual;
  #L491638.  v0:= temp;
  #L49163a.  if v0 == 0 then goto L491640;
  #L49163e.  return @kind void;
  #L491640.  v7:= 1L;
  #L491644.  v15:= v15 + v7 @kind long;
  #L491646.  v0:= 1I;
  #L491648.  goto L49164e;
  #L49164a.  v7:= 1L;
  #L49164e.  v11:= 0L;
  #L491652.  v9:= lcmp(v5, v11);
  #L491656.  if v9 != 0 then goto L491660;
  #L49165a.  v9:= v0;
  #L49165c.  v11:= 1I;
  #L49165e.  goto L491686;
  #L491660.  v3:= v3 + 1;
  #L491664.  v9:= v22;
  #L491668.  if v3 != v9 then goto L49166e;
  #L49166c.  v3:= 0I;
  #L49166e.  v11:= 1I;
  #L491670.  v4:= v4 + v11 @kind int;
  #L491672.  v8:= v21 @kind object;
  #L491676.  v13:= 0L;
  #L49167a.  goto L491502;
  #L49167e.  v21:= v8 @kind object;
  #L491682.  v11:= 1I;
  #L491684.  v9:= v0;
  #L491686.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.o` @type ^`int` := v3;
  #L49168a.  v0:= v21[v3] @kind object;
  #L49168e.  v3:= v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.a` @type ^`long` @kind wide;
  #L491692.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.n` @type ^`long` := v3 @kind wide;
  #L491696.  v3:= v15 @kind wide;
  #L491698.  v5:= 0L;
  #L49169c.  goto L4916a6;
  #L49169e.  v11:= 1I;
  #L4916a0.  v5:= v13 @kind wide;
  #L4916a2.  v3:= v15 @kind wide;
  #L4916a4.  v9:= 0I;
  #L4916a6.  v0:= lcmp(v3, v5);
  #L4916aa.  if v0 == 0 then goto L4916c0;
  #L4916ae.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.i` @type ^`boolean` @kind boolean;
  #L4916b2.  if v0 != 0 then goto L4916c0;
  #L4916b6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.l` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4916ba.  call `request`(v0, v3) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4916c0.  if v9 == 0 then goto L4916cc;
  #L4916c4.  v4:= v18;
  #L4916c8.  goto L4913b6;
  #L4916cc.  v3:= v18;
  #L4916d0.  v0:= -v3 @kind int;
  #L4916d2.  call temp:= `addAndGet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4916d8.  v4:= temp;
  #L4916da.  if v4 != 0 then goto L4913b6;
  #L4916de.  return @kind void;
  catch `java.lang.Throwable` @[L49154e..L491556] goto L491570;
}
procedure `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` `g`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.g:()Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4911ec.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4911f0.  if v0 != 0 then goto L491224;
  #L4911f4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.d` @type ^`int`;
  #L4911f8.  v1:= 2147483647I;
  #L4911fe.  if v0 != v1 then goto L491212;
  #L491202.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L491206.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.e` @type ^`int`;
  #L49120a.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L491210.  goto L491220;
  #L491212.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L491216.  v1:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.d` @type ^`int`;
  #L49121a.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L491220.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v0 @kind object;
  #L491224.  return v0 @kind object;
}
procedure `void` `h`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` v2 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.h:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4916fc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L491700.  call temp:= `tryAddThrowableOrReport`(v0, v4) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L491706.  v4:= temp;
  #L491708.  if v4 == 0 then goto L491756;
  #L49170c.  v4:= 1I;
  #L49170e.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.e` @type ^`boolean` := v4 @kind boolean;
  #L491712.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.c` @type ^`boolean` @kind boolean;
  #L491716.  if v3 != 0 then goto L491750;
  #L49171a.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.l` @type ^`org.reactivestreams.Subscription` @kind object;
  #L49171e.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L491724.  v3:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L491728.  v4:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.s` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a`[] @kind object;
  #L49172c.  call temp:= `getAndSet`(v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L491732.  v3:= temp @kind object;
  #L491734.  v3:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a`[]) v3 @kind object;
  #L491738.  v4:= length @variable v3;
  #L49173a.  v0:= 0I;
  #L49173c.  if v0 >= v4 then goto L491750;
  #L491740.  v1:= v3[v0] @kind object;
  #L491744.  call `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;.dispose:()V` @kind virtual;
  #L49174a.  v0:= v0 + 1;
  #L49174e.  goto L49173c;
  #L491750.  call `e`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.e:()V` @kind virtual;
  #L491756.  return @kind void;
}
procedure `void` `i`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` v6 @kind this, `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.i:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L491974.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L491978.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49197e.  v0:= temp @kind object;
  #L491980.  v0:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a`[]) v0 @kind object;
  #L491984.  v1:= length @variable v0;
  #L491986.  if v1 != 0 then goto L49198c;
  #L49198a.  return @kind void;
  #L49198c.  v2:= -1I;
  #L49198e.  v3:= 0I;
  #L491990.  v4:= 0I;
  #L491992.  if v4 >= v1 then goto L4919a8;
  #L491996.  v5:= v0[v4] @kind object;
  #L49199a.  if v5 != v7 then goto L4919a2;
  #L49199e.  v2:= v4;
  #L4919a0.  goto L4919a8;
  #L4919a2.  v4:= v4 + 1;
  #L4919a6.  goto L491992;
  #L4919a8.  if v2 >= 0 then goto L4919ae;
  #L4919ac.  return @kind void;
  #L4919ae.  v4:= 1I;
  #L4919b0.  if v1 != v4 then goto L4919ba;
  #L4919b4.  v1:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.r` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a`[] @kind object;
  #L4919b8.  goto L4919d8;
  #L4919ba.  v5:= v1 + -1;
  #L4919be.  v5:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a`[v5];
  #L4919c2.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4919c8.  v3:= v2 + 1;
  #L4919cc.  v1:= v1 - v2 @kind int;
  #L4919ce.  v1:= v1 - v4 @kind int;
  #L4919d0.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4919d6.  v1:= v5 @kind object;
  #L4919d8.  v2:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4919dc.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4919e2.  v0:= temp;
  #L4919e4.  if v0 == 0 then goto L491974;
  #L4919e8.  return @kind void;
}
procedure `void` `j`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` v7 @kind this, `java.lang.Object` v8 @kind object, `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a` v9 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.j:(Ljava/lang/Object;Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L491a2c.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L491a32.  v0:= temp;
  #L491a34.  v1:= "Inner queue full?!" @kind object;
  #L491a38.  if v0 != 0 then goto L491aea;
  #L491a3c.  v0:= 0I;
  #L491a3e.  v2:= 1I;
  #L491a40.  call temp:= `compareAndSet`(v7, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L491a46.  v0:= temp;
  #L491a48.  if v0 == 0 then goto L491aea;
  #L491a4c.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L491a50.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L491a56.  v2:= temp @kind wide;
  #L491a58.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L491a5c.  v4:= 0L;
  #L491a60.  v6:= lcmp(v2, v4);
  #L491a64.  if v6 == 0 then goto L491aaa;
  #L491a68.  if v0 == 0 then goto L491a78;
  #L491a6c.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L491a72.  v4:= temp;
  #L491a74.  if v4 == 0 then goto L491aaa;
  #L491a78.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L491a7c.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L491a82.  v0:= 9223372036854775807L;
  #L491a8c.  v8:= lcmp(v2, v0);
  #L491a90.  if v8 == 0 then goto L491a9e;
  #L491a94.  v8:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L491a98.  call temp:= `decrementAndGet`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L491a9e.  v0:= 1L;
  #L491aa2.  call `a`(v9, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;.a:(J)V` @kind virtual;
  #L491aa8.  goto L491adc;
  #L491aaa.  if v0 != 0 then goto L491ac0;
  #L491aae.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L491ab2.  v2:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.e` @type ^`int`;
  #L491ab6.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L491abc.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L491ac0.  call temp:= `offer`(v0, v8) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L491ac6.  v8:= temp;
  #L491ac8.  if v8 != 0 then goto L491adc;
  #L491acc.  v8:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L491ad0.  call `<init>`(v8, v1) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L491ad6.  call `onError`(v7, v8) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L491adc.  call temp:= `decrementAndGet`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L491ae2.  v8:= temp;
  #L491ae4.  if v8 != 0 then goto L491b30;
  #L491ae8.  return @kind void;
  #L491aea.  v0:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L491aee.  if v0 != 0 then goto L491b04;
  #L491af2.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L491af6.  v2:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.e` @type ^`int`;
  #L491afa.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L491b00.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L491b04.  call temp:= `offer`(v0, v8) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L491b0a.  v8:= temp;
  #L491b0c.  if v8 != 0 then goto L491b22;
  #L491b10.  v8:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L491b14.  call `<init>`(v8, v1) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L491b1a.  call `onError`(v7, v8) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L491b20.  return @kind void;
  #L491b22.  call temp:= `getAndIncrement`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L491b28.  v8:= temp;
  #L491b2a.  if v8 == 0 then goto L491b30;
  #L491b2e.  return @kind void;
  #L491b30.  call `f`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.f:()V` @kind virtual;
  #L491b36.  return @kind void;
}
procedure `void` `k`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.k:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L491b48.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L491b4e.  v0:= temp;
  #L491b50.  v1:= "Scalar queue full?!" @kind object;
  #L491b54.  if v0 != 0 then goto L491c2a;
  #L491b58.  v0:= 0I;
  #L491b5a.  v2:= 1I;
  #L491b5c.  call temp:= `compareAndSet`(v9, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L491b62.  v3:= temp;
  #L491b64.  if v3 == 0 then goto L491c2a;
  #L491b68.  v3:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L491b6c.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L491b72.  v3:= temp @kind wide;
  #L491b74.  v5:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L491b78.  v6:= 0L;
  #L491b7c.  v8:= lcmp(v3, v6);
  #L491b80.  if v8 == 0 then goto L491bf4;
  #L491b84.  if v5 == 0 then goto L491b94;
  #L491b88.  call temp:= `isEmpty`(v5) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L491b8e.  v6:= temp;
  #L491b90.  if v6 == 0 then goto L491bf4;
  #L491b94.  v1:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L491b98.  call `onNext`(v1, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L491b9e.  v5:= 9223372036854775807L;
  #L491ba8.  v10:= lcmp(v3, v5);
  #L491bac.  if v10 == 0 then goto L491bba;
  #L491bb0.  v10:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L491bb4.  call temp:= `decrementAndGet`(v10) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L491bba.  v10:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.d` @type ^`int`;
  #L491bbe.  v1:= 2147483647I;
  #L491bc4.  if v10 == v1 then goto L491c1c;
  #L491bc8.  v10:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.i` @type ^`boolean` @kind boolean;
  #L491bcc.  if v10 != 0 then goto L491c1c;
  #L491bd0.  v10:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.p` @type ^`int`;
  #L491bd4.  v10:= v10 + v2 @kind int;
  #L491bd6.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.p` @type ^`int` := v10;
  #L491bda.  v1:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.q` @type ^`int`;
  #L491bde.  if v10 != v1 then goto L491c1c;
  #L491be2.  v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.p` @type ^`int` := v0;
  #L491be6.  v10:= v9.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.l` @type ^`org.reactivestreams.Subscription` @kind object;
  #L491bea.  v0:= (`long`) v1 @kind i2l;
  #L491bec.  call `request`(v10, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L491bf2.  goto L491c1c;
  #L491bf4.  if v5 != 0 then goto L491c00;
  #L491bf8.  call temp:= `g`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.g:()Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;` @kind virtual;
  #L491bfe.  v5:= temp @kind object;
  #L491c00.  call temp:= `offer`(v5, v10) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L491c06.  v10:= temp;
  #L491c08.  if v10 != 0 then goto L491c1c;
  #L491c0c.  v10:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L491c10.  call `<init>`(v10, v1) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L491c16.  call `onError`(v9, v10) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L491c1c.  call temp:= `decrementAndGet`(v9) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L491c22.  v10:= temp;
  #L491c24.  if v10 != 0 then goto L491c5e;
  #L491c28.  return @kind void;
  #L491c2a.  call temp:= `g`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.g:()Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;` @kind virtual;
  #L491c30.  v0:= temp @kind object;
  #L491c32.  call temp:= `offer`(v0, v10) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L491c38.  v10:= temp;
  #L491c3a.  if v10 != 0 then goto L491c50;
  #L491c3e.  v10:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L491c42.  call `<init>`(v10, v1) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L491c48.  call `onError`(v9, v10) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L491c4e.  return @kind void;
  #L491c50.  call temp:= `getAndIncrement`(v9) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L491c56.  v10:= temp;
  #L491c58.  if v10 == 0 then goto L491c5e;
  #L491c5c.  return @kind void;
  #L491c5e.  call `f`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.f:()V` @kind virtual;
  #L491c64.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L491768.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.g` @type ^`boolean` @kind boolean;
  #L49176c.  if v0 == 0 then goto L491772;
  #L491770.  return @kind void;
  #L491772.  v0:= 1I;
  #L491774.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.g` @type ^`boolean` := v0 @kind boolean;
  #L491778.  call `e`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.e:()V` @kind virtual;
  #L49177e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L491790.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.g` @type ^`boolean` @kind boolean;
  #L491794.  if v0 == 0 then goto L4917a0;
  #L491798.  call `onError`(v4) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L49179e.  return @kind void;
  #L4917a0.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4917a4.  call temp:= `tryAddThrowableOrReport`(v0, v4) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4917aa.  v4:= temp;
  #L4917ac.  if v4 == 0 then goto L4917f0;
  #L4917b0.  v4:= 1I;
  #L4917b2.  v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.g` @type ^`boolean` := v4 @kind boolean;
  #L4917b6.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.c` @type ^`boolean` @kind boolean;
  #L4917ba.  if v4 != 0 then goto L4917ea;
  #L4917be.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4917c2.  v0:= `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.s` @type ^`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a`[] @kind object;
  #L4917c6.  call temp:= `getAndSet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4917cc.  v4:= temp @kind object;
  #L4917ce.  v4:= (`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a`[]) v4 @kind object;
  #L4917d2.  v0:= length @variable v4;
  #L4917d4.  v1:= 0I;
  #L4917d6.  if v1 >= v0 then goto L4917ea;
  #L4917da.  v2:= v4[v1] @kind object;
  #L4917de.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;.dispose:()V` @kind virtual;
  #L4917e4.  v1:= v1 + 1;
  #L4917e8.  goto L4917d6;
  #L4917ea.  call `e`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.e:()V` @kind virtual;
  #L4917f0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L491804.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.g` @type ^`boolean` @kind boolean;
  #L491808.  if v0 == 0 then goto L49180e;
  #L49180c.  return @kind void;
  #L49180e.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L491812.  call temp:= `apply`(v0, v7) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L491818.  v7:= temp @kind object;
  #L49181a.  v0:= "The mapper returned a null Publisher" @kind object;
  #L49181e.  call temp:= `requireNonNull`(v7, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L491824.  v7:= (`org.reactivestreams.Publisher`) v7 @kind object;
  #L491828.  v0:= instanceof @variable v7 @type ^`io.reactivex.rxjava3.functions.Supplier` @kind boolean;
  #L49182c.  if v0 == 0 then goto L4918a0;
  #L491830.  v7:= (`io.reactivex.rxjava3.functions.Supplier`) v7 @kind object;
  #L491834.  call temp:= `get`(v7) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L49183a.  v7:= temp @kind object;
  #L49183c.  if v7 == 0 then goto L491848;
  #L491840.  call `k`(v6, v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.k:(Ljava/lang/Object;)V` @kind virtual;
  #L491846.  goto L4918ce;
  #L491848.  v7:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.d` @type ^`int`;
  #L49184c.  v0:= 2147483647I;
  #L491852.  if v7 == v0 then goto L4918ce;
  #L491856.  v7:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.i` @type ^`boolean` @kind boolean;
  #L49185a.  if v7 != 0 then goto L4918ce;
  #L49185e.  v7:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.p` @type ^`int`;
  #L491862.  v7:= v7 + 1;
  #L491866.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.p` @type ^`int` := v7;
  #L49186a.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.q` @type ^`int`;
  #L49186e.  if v7 != v0 then goto L4918ce;
  #L491872.  v7:= 0I;
  #L491874.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.p` @type ^`int` := v7;
  #L491878.  v7:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.l` @type ^`org.reactivestreams.Subscription` @kind object;
  #L49187c.  v0:= (`long`) v0 @kind i2l;
  #L49187e.  call `request`(v7, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L491884.  goto L4918ce;
  #L491886.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L491888.  call `throwIfFatal`(v7) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L49188e.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L491892.  call temp:= `tryAddThrowableOrReport`(v0, v7) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L491898.  call `e`(v6) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.e:()V` @kind virtual;
  #L49189e.  return @kind void;
  #L4918a0.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$a`;
  #L4918a4.  v1:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.e` @type ^`int`;
  #L4918a8.  v2:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.m` @type ^`long` @kind wide;
  #L4918ac.  v4:= 1L;
  #L4918b0.  v4:= v4 + v2 @kind long;
  #L4918b2.  v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.m` @type ^`long` := v4 @kind wide;
  #L4918b6.  call `<init>`(v0, v6, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;IJ)V` @kind direct;
  #L4918bc.  call temp:= `a`(v6, v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.a:(Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$a;)Z` @kind virtual;
  #L4918c2.  v1:= temp;
  #L4918c4.  if v1 == 0 then goto L4918ce;
  #L4918c8.  call `subscribe`(v7, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4918ce.  return @kind void;
  #L4918d0.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4918d2.  call `throwIfFatal`(v7) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4918d8.  v0:= v6.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.l` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4918dc.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4918e2.  call `onError`(v6, v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4918e8.  return @kind void;
  catch `java.lang.Throwable` @[L49180e..L491828] goto L4918d0;
  catch `java.lang.Throwable` @[L491830..L49183c] goto L491886;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L491914.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.l` @type ^`org.reactivestreams.Subscription` @kind object;
  #L491918.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L49191e.  v0:= temp;
  #L491920.  if v0 == 0 then goto L491962;
  #L491924.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.l` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L491928.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49192c.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L491932.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.i` @type ^`boolean` @kind boolean;
  #L491936.  if v0 != 0 then goto L491962;
  #L49193a.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.d` @type ^`int`;
  #L49193e.  v1:= 2147483647I;
  #L491944.  if v0 != v1 then goto L49195a;
  #L491948.  v0:= 9223372036854775807L;
  #L491952.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L491958.  goto L491962;
  #L49195a.  v0:= (`long`) v0 @kind i2l;
  #L49195c.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L491962.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4919fc.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L491a02.  v0:= temp;
  #L491a04.  if v0 == 0 then goto L491a18;
  #L491a08.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$b.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L491a0c.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L491a12.  call `e`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap$b;.e:()V` @kind virtual;
  #L491a18.  return @kind void;
}
