record `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiPredicate` `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.disposables.ArrayCompositeDisposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.ObservableSource` `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.ObservableSource` `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b`[] `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.g` @AccessFlag VOLATILE;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.h` @AccessFlag ;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.i` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `int` v2 , `io.reactivex.rxjava3.core.ObservableSource` v3 @kind object, `io.reactivex.rxjava3.core.ObservableSource` v4 @kind object, `io.reactivex.rxjava3.functions.BiPredicate` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqual$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;ILio/reactivex/rxjava3/core/ObservableSource;Lio/reactivex/rxjava3/core/ObservableSource;Lio/reactivex/rxjava3/functions/BiPredicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c7f2c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4c7f32.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L4c7f36.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.d` @type ^`io.reactivex.rxjava3.core.ObservableSource` := v3 @kind object;
  #L4c7f3a.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.e` @type ^`io.reactivex.rxjava3.core.ObservableSource` := v4 @kind object;
  #L4c7f3e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.b` @type ^`io.reactivex.rxjava3.functions.BiPredicate` := v5 @kind object;
  #L4c7f42.  v1:= 2I;
  #L4c7f44.  v3:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b`[v1];
  #L4c7f48.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b`[] := v3 @kind object;
  #L4c7f4c.  v4:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b`;
  #L4c7f50.  v5:= 0I;
  #L4c7f52.  call `<init>`(v4, v0, v5, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqual$b;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqual$a;II)V` @kind direct;
  #L4c7f58.  v3[v5]:= v4 @kind object;
  #L4c7f5c.  v4:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b`;
  #L4c7f60.  v5:= 1I;
  #L4c7f62.  call `<init>`(v4, v0, v5, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqual$b;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqual$a;II)V` @kind direct;
  #L4c7f68.  v3[v5]:= v4 @kind object;
  #L4c7f6c.  v2:= new `io.reactivex.rxjava3.internal.disposables.ArrayCompositeDisposable`;
  #L4c7f70.  call `<init>`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/ArrayCompositeDisposable;.<init>:(I)V` @kind direct;
  #L4c7f76.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.c` @type ^`io.reactivex.rxjava3.internal.disposables.ArrayCompositeDisposable` := v2 @kind object;
  #L4c7f7a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a` v1 @kind this, `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` v2 @kind object, `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqual$a;.a:(Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @AccessFlag  {
    temp;
    v0;

  #L4c7f8c.  v0:= 1I;
  #L4c7f8e.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.g` @type ^`boolean` := v0 @kind boolean;
  #L4c7f92.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4c7f98.  call `clear`(v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4c7f9e.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a` v12 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqual$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L4c8008.  call temp:= `getAndIncrement`(v12) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c800e.  v0:= temp;
  #L4c8010.  if v0 == 0 then goto L4c8016;
  #L4c8014.  return @kind void;
  #L4c8016.  v0:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b`[] @kind object;
  #L4c801a.  v1:= 0I;
  #L4c801c.  v2:= v0[v1] @kind object;
  #L4c8020.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4c8024.  v4:= 1I;
  #L4c8026.  v0:= v0[v4] @kind object;
  #L4c802a.  v5:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4c802e.  v6:= 1I;
  #L4c8030.  v7:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.g` @type ^`boolean` @kind boolean;
  #L4c8034.  if v7 == 0 then goto L4c8046;
  #L4c8038.  call `clear`(v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4c803e.  call `clear`(v5) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4c8044.  return @kind void;
  #L4c8046.  v7:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b.d` @type ^`boolean` @kind boolean;
  #L4c804a.  if v7 == 0 then goto L4c8068;
  #L4c804e.  v8:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b.e` @type ^`java.lang.Throwable` @kind object;
  #L4c8052.  if v8 == 0 then goto L4c8068;
  #L4c8056.  call `a`(v12, v3, v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqual$a;.a:(Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4c805c.  v0:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c8060.  call `onError`(v0, v8) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c8066.  return @kind void;
  #L4c8068.  v8:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b.d` @type ^`boolean` @kind boolean;
  #L4c806c.  if v8 == 0 then goto L4c808a;
  #L4c8070.  v9:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b.e` @type ^`java.lang.Throwable` @kind object;
  #L4c8074.  if v9 == 0 then goto L4c808a;
  #L4c8078.  call `a`(v12, v3, v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqual$a;.a:(Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4c807e.  v0:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c8082.  call `onError`(v0, v9) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c8088.  return @kind void;
  #L4c808a.  v9:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.h` @type ^`java.lang.Object` @kind object;
  #L4c808e.  if v9 != 0 then goto L4c809e;
  #L4c8092.  call temp:= `poll`(v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4c8098.  v9:= temp @kind object;
  #L4c809a.  v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.h` @type ^`java.lang.Object` := v9 @kind object;
  #L4c809e.  v9:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.h` @type ^`java.lang.Object` @kind object;
  #L4c80a2.  if v9 != 0 then goto L4c80aa;
  #L4c80a6.  v9:= 1I;
  #L4c80a8.  goto L4c80ac;
  #L4c80aa.  v9:= 0I;
  #L4c80ac.  v10:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.i` @type ^`java.lang.Object` @kind object;
  #L4c80b0.  if v10 != 0 then goto L4c80c0;
  #L4c80b4.  call temp:= `poll`(v5) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4c80ba.  v10:= temp @kind object;
  #L4c80bc.  v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.i` @type ^`java.lang.Object` := v10 @kind object;
  #L4c80c0.  v10:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.i` @type ^`java.lang.Object` @kind object;
  #L4c80c4.  if v10 != 0 then goto L4c80cc;
  #L4c80c8.  v11:= 1I;
  #L4c80ca.  goto L4c80ce;
  #L4c80cc.  v11:= 0I;
  #L4c80ce.  if v7 == 0 then goto L4c80f8;
  #L4c80d2.  if v8 == 0 then goto L4c80f8;
  #L4c80d6.  if v9 == 0 then goto L4c80f8;
  #L4c80da.  if v11 == 0 then goto L4c80f8;
  #L4c80de.  v0:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c80e2.  v1:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L4c80e6.  call `onNext`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c80ec.  v0:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c80f0.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4c80f6.  return @kind void;
  #L4c80f8.  if v7 == 0 then goto L4c8124;
  #L4c80fc.  if v8 == 0 then goto L4c8124;
  #L4c8100.  if v9 == v11 then goto L4c8124;
  #L4c8104.  call `a`(v12, v3, v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqual$a;.a:(Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4c810a.  v0:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c810e.  v1:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L4c8112.  call `onNext`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c8118.  v0:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c811c.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4c8122.  return @kind void;
  #L4c8124.  if v9 != 0 then goto L4c8186;
  #L4c8128.  if v11 != 0 then goto L4c8186;
  #L4c812c.  v7:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.b` @type ^`io.reactivex.rxjava3.functions.BiPredicate` @kind object;
  #L4c8130.  v8:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.h` @type ^`java.lang.Object` @kind object;
  #L4c8134.  call temp:= `test`(v7, v8, v10) @signature `Lio/reactivex/rxjava3/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L4c813a.  v7:= temp;
  #L4c813c.  if v7 != 0 then goto L4c8160;
  #L4c8140.  call `a`(v12, v3, v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqual$a;.a:(Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4c8146.  v0:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c814a.  v1:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L4c814e.  call `onNext`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c8154.  v0:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c8158.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4c815e.  return @kind void;
  #L4c8160.  v7:= 0I;
  #L4c8162.  v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.h` @type ^`java.lang.Object` := v7 @kind object;
  #L4c8166.  v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.i` @type ^`java.lang.Object` := v7 @kind object;
  #L4c816a.  goto L4c8186;
  #L4c816c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4c816e.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4c8174.  call `a`(v12, v3, v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqual$a;.a:(Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4c817a.  v1:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c817e.  call `onError`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c8184.  return @kind void;
  #L4c8186.  if v9 != 0 then goto L4c818e;
  #L4c818a.  if v11 == 0 then goto L4c8030;
  #L4c818e.  v6:= -v6 @kind int;
  #L4c8190.  call temp:= `addAndGet`(v12, v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4c8196.  v6:= temp;
  #L4c8198.  if v6 != 0 then goto L4c8030;
  #L4c819c.  return @kind void;
  catch `java.lang.Throwable` @[L4c812c..L4c813c] goto L4c816c;
}
procedure `boolean` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqual$a;.c:(Lio/reactivex/rxjava3/disposables/Disposable;I)Z` @AccessFlag  {
    temp;
    v0;

  #L4c7f0c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.c` @type ^`io.reactivex.rxjava3.internal.disposables.ArrayCompositeDisposable` @kind object;
  #L4c7f10.  call temp:= `setResource`(v0, v3, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/ArrayCompositeDisposable;.setResource:(ILio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4c7f16.  v2:= temp;
  #L4c7f18.  return v2;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqual$a;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4c81bc.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b`[] @kind object;
  #L4c81c0.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.d` @type ^`io.reactivex.rxjava3.core.ObservableSource` @kind object;
  #L4c81c4.  v2:= 0I;
  #L4c81c6.  v2:= v0[v2] @kind object;
  #L4c81ca.  call `subscribe`(v1, v2) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4c81d0.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.e` @type ^`io.reactivex.rxjava3.core.ObservableSource` @kind object;
  #L4c81d4.  v2:= 1I;
  #L4c81d6.  v0:= v0[v2] @kind object;
  #L4c81da.  call `subscribe`(v1, v0) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4c81e0.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqual$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c7fb0.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.g` @type ^`boolean` @kind boolean;
  #L4c7fb4.  if v0 != 0 then goto L4c7ff6;
  #L4c7fb8.  v0:= 1I;
  #L4c7fba.  v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.g` @type ^`boolean` := v0 @kind boolean;
  #L4c7fbe.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.c` @type ^`io.reactivex.rxjava3.internal.disposables.ArrayCompositeDisposable` @kind object;
  #L4c7fc2.  call `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/ArrayCompositeDisposable;.dispose:()V` @kind virtual;
  #L4c7fc8.  call temp:= `getAndIncrement`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4c7fce.  v1:= temp;
  #L4c7fd0.  if v1 != 0 then goto L4c7ff6;
  #L4c7fd4.  v1:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b`[] @kind object;
  #L4c7fd8.  v2:= 0I;
  #L4c7fda.  v2:= v1[v2] @kind object;
  #L4c7fde.  v2:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4c7fe2.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4c7fe8.  v0:= v1[v0] @kind object;
  #L4c7fec.  v0:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$b.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4c7ff0.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4c7ff6.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSequenceEqual$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c7ef4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$a.g` @type ^`boolean` @kind boolean;
  #L4c7ef8.  return v0;
}
