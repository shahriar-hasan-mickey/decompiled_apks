record `io.reactivex.rxjava3.internal.operators.observable.ObservableCache` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.internal.operators.observable.a` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface {
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableCache.a` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableCache.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableCache.c` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableCache.d` @AccessFlag VOLATILE;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableCache$b` `io.reactivex.rxjava3.internal.operators.observable.ObservableCache.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableCache$b` `io.reactivex.rxjava3.internal.operators.observable.ObservableCache.f` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableCache.g` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.observable.ObservableCache.h` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableCache.i` @AccessFlag VOLATILE;
}
global `io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a`[] `@@io.reactivex.rxjava3.internal.operators.observable.ObservableCache.j` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a`[] `@@io.reactivex.rxjava3.internal.operators.observable.ObservableCache.k` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4b8628.  v0:= 0I;
  #L4b862a.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a`[v0];
  #L4b862e.  `@@io.reactivex.rxjava3.internal.operators.observable.ObservableCache.j` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a`[] := v1 @kind object;
  #L4b8632.  v0:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a`[v0];
  #L4b8636.  `@@io.reactivex.rxjava3.internal.operators.observable.ObservableCache.k` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a`[] := v0 @kind object;
  #L4b863a.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCache` v0 @kind this, `io.reactivex.rxjava3.core.Observable` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache;.<init>:(Lio/reactivex/rxjava3/core/Observable;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4b864c.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/a;.<init>:(Lio/reactivex/rxjava3/core/ObservableSource;)V` @kind direct;
  #L4b8652.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.b` @type ^`int` := v2;
  #L4b8656.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4b865a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4b8660.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.a` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L4b8664.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableCache$b`;
  #L4b8668.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache$b;.<init>:(I)V` @kind direct;
  #L4b866e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.e` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$b` := v1 @kind object;
  #L4b8672.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$b` := v1 @kind object;
  #L4b8676.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4b867a.  v2:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableCache.j` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a`[] @kind object;
  #L4b867e.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4b8684.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4b8688.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCache` v4 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache;.d:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4b869c.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b86a0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b86a6.  v0:= temp @kind object;
  #L4b86a8.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a`[]) v0 @kind object;
  #L4b86ac.  v1:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableCache.k` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a`[] @kind object;
  #L4b86b0.  if v0 != v1 then goto L4b86b6;
  #L4b86b4.  return @kind void;
  #L4b86b6.  v1:= length @variable v0;
  #L4b86b8.  v2:= v1 + 1;
  #L4b86bc.  v2:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a`[v2];
  #L4b86c0.  v3:= 0I;
  #L4b86c2.  call `arraycopy`(v0, v3, v2, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4b86c8.  v2[v1]:= v5 @kind object;
  #L4b86cc.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b86d0.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4b86d6.  v0:= temp;
  #L4b86d8.  if v0 == 0 then goto L4b869c;
  #L4b86dc.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCache` v6 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache;.e:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4b881c.  v0:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b8820.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b8826.  v0:= temp @kind object;
  #L4b8828.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a`[]) v0 @kind object;
  #L4b882c.  v1:= length @variable v0;
  #L4b882e.  if v1 != 0 then goto L4b8834;
  #L4b8832.  return @kind void;
  #L4b8834.  v2:= -1I;
  #L4b8836.  v3:= 0I;
  #L4b8838.  v4:= 0I;
  #L4b883a.  if v4 >= v1 then goto L4b8850;
  #L4b883e.  v5:= v0[v4] @kind object;
  #L4b8842.  if v5 != v7 then goto L4b884a;
  #L4b8846.  v2:= v4;
  #L4b8848.  goto L4b8850;
  #L4b884a.  v4:= v4 + 1;
  #L4b884e.  goto L4b883a;
  #L4b8850.  if v2 >= 0 then goto L4b8856;
  #L4b8854.  return @kind void;
  #L4b8856.  v4:= 1I;
  #L4b8858.  if v1 != v4 then goto L4b8862;
  #L4b885c.  v1:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableCache.j` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a`[] @kind object;
  #L4b8860.  goto L4b8880;
  #L4b8862.  v5:= v1 + -1;
  #L4b8866.  v5:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a`[v5];
  #L4b886a.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4b8870.  v3:= v2 + 1;
  #L4b8874.  v1:= v1 - v2 @kind int;
  #L4b8876.  v1:= v1 - v4 @kind int;
  #L4b8878.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4b887e.  v1:= v5 @kind object;
  #L4b8880.  v2:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b8884.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4b888a.  v0:= temp;
  #L4b888c.  if v0 == 0 then goto L4b881c;
  #L4b8890.  return @kind void;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCache` v14 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a` v15 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache;.f:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L4b88a4.  call temp:= `getAndIncrement`(v15) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4b88aa.  v0:= temp;
  #L4b88ac.  if v0 == 0 then goto L4b88b2;
  #L4b88b0.  return @kind void;
  #L4b88b2.  v0:= v15.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a.e` @type ^`long` @kind wide;
  #L4b88b6.  v2:= v15.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a.d` @type ^`int`;
  #L4b88ba.  v3:= v15.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$b` @kind object;
  #L4b88be.  v4:= v15.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4b88c2.  v5:= v14.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.b` @type ^`int`;
  #L4b88c6.  v6:= 1I;
  #L4b88c8.  v7:= 1I;
  #L4b88ca.  v8:= v15.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a.f` @type ^`boolean` @kind boolean;
  #L4b88ce.  v9:= 0I;
  #L4b88d0.  if v8 == 0 then goto L4b88da;
  #L4b88d4.  v15.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$b` := v9 @kind object;
  #L4b88d8.  return @kind void;
  #L4b88da.  v8:= v14.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.i` @type ^`boolean` @kind boolean;
  #L4b88de.  v10:= v14.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.d` @type ^`long` @kind wide;
  #L4b88e2.  v12:= 0I;
  #L4b88e4.  v13:= lcmp(v10, v0);
  #L4b88e8.  if v13 != 0 then goto L4b88f0;
  #L4b88ec.  v10:= 1I;
  #L4b88ee.  goto L4b88f2;
  #L4b88f0.  v10:= 0I;
  #L4b88f2.  if v8 == 0 then goto L4b8916;
  #L4b88f6.  if v10 == 0 then goto L4b8916;
  #L4b88fa.  v15.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$b` := v9 @kind object;
  #L4b88fe.  v15:= v14.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.h` @type ^`java.lang.Throwable` @kind object;
  #L4b8902.  if v15 == 0 then goto L4b890e;
  #L4b8906.  call `onError`(v4, v15) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4b890c.  goto L4b8914;
  #L4b890e.  call `onComplete`(v4) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4b8914.  return @kind void;
  #L4b8916.  if v10 != 0 then goto L4b893e;
  #L4b891a.  if v2 != v5 then goto L4b8926;
  #L4b891e.  v2:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$b.b` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$b` @kind object;
  #L4b8922.  v3:= v2 @kind object;
  #L4b8924.  v2:= 0I;
  #L4b8926.  v8:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$b.a` @type ^`java.lang.Object`[] @kind object;
  #L4b892a.  v8:= v8[v2] @kind object;
  #L4b892e.  call `onNext`(v4, v8) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4b8934.  v2:= v2 + v6 @kind int;
  #L4b8936.  v8:= 1L;
  #L4b893a.  v0:= v0 + v8 @kind long;
  #L4b893c.  goto L4b88ca;
  #L4b893e.  v15.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a.e` @type ^`long` := v0 @kind wide;
  #L4b8942.  v15.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a.d` @type ^`int` := v2;
  #L4b8946.  v15.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a.c` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$b` := v3 @kind object;
  #L4b894a.  v7:= -v7 @kind int;
  #L4b894c.  call temp:= `addAndGet`(v15, v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4b8952.  v7:= temp;
  #L4b8954.  if v7 != 0 then goto L4b88ca;
  #L4b8958.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCache` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4b86f0.  v0:= 1I;
  #L4b86f2.  v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.i` @type ^`boolean` := v0 @kind boolean;
  #L4b86f6.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b86fa.  v1:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableCache.k` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a`[] @kind object;
  #L4b86fe.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4b8704.  v0:= temp @kind object;
  #L4b8706.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a`[]) v0 @kind object;
  #L4b870a.  v1:= length @variable v0;
  #L4b870c.  v2:= 0I;
  #L4b870e.  if v2 >= v1 then goto L4b8722;
  #L4b8712.  v3:= v0[v2] @kind object;
  #L4b8716.  call `f`(v4, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache;.f:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache$a;)V` @kind virtual;
  #L4b871c.  v2:= v2 + 1;
  #L4b8720.  goto L4b870e;
  #L4b8722.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCache` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4b8734.  v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.h` @type ^`java.lang.Throwable` := v4 @kind object;
  #L4b8738.  v4:= 1I;
  #L4b873a.  v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.i` @type ^`boolean` := v4 @kind boolean;
  #L4b873e.  v4:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b8742.  v0:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableCache.k` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a`[] @kind object;
  #L4b8746.  call temp:= `getAndSet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4b874c.  v4:= temp @kind object;
  #L4b874e.  v4:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a`[]) v4 @kind object;
  #L4b8752.  v0:= length @variable v4;
  #L4b8754.  v1:= 0I;
  #L4b8756.  if v1 >= v0 then goto L4b876a;
  #L4b875a.  v2:= v4[v1] @kind object;
  #L4b875e.  call `f`(v3, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache;.f:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache$a;)V` @kind virtual;
  #L4b8764.  v1:= v1 + 1;
  #L4b8768.  goto L4b8756;
  #L4b876a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCache` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4b877c.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.g` @type ^`int`;
  #L4b8780.  v1:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.b` @type ^`int`;
  #L4b8784.  v2:= 0I;
  #L4b8786.  v3:= 1I;
  #L4b8788.  if v0 != v1 then goto L4b87b0;
  #L4b878c.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableCache$b`;
  #L4b8790.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache$b;.<init>:(I)V` @kind direct;
  #L4b8796.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$b.a` @type ^`java.lang.Object`[] @kind object;
  #L4b879a.  v0[v2]:= v6 @kind object;
  #L4b879e.  v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.g` @type ^`int` := v3;
  #L4b87a2.  v6:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$b` @kind object;
  #L4b87a6.  v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$b.b` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$b` := v1 @kind object;
  #L4b87aa.  v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$b` := v1 @kind object;
  #L4b87ae.  goto L4b87c2;
  #L4b87b0.  v1:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.f` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$b` @kind object;
  #L4b87b4.  v1:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$b.a` @type ^`java.lang.Object`[] @kind object;
  #L4b87b8.  v1[v0]:= v6 @kind object;
  #L4b87bc.  v0:= v0 + v3 @kind int;
  #L4b87be.  v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.g` @type ^`int` := v0;
  #L4b87c2.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.d` @type ^`long` @kind wide;
  #L4b87c6.  v3:= 1L;
  #L4b87ca.  v0:= v0 + v3 @kind long;
  #L4b87cc.  v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.d` @type ^`long` := v0 @kind wide;
  #L4b87d0.  v6:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4b87d4.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b87da.  v6:= temp @kind object;
  #L4b87dc.  v6:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a`[]) v6 @kind object;
  #L4b87e0.  v0:= length @variable v6;
  #L4b87e2.  if v2 >= v0 then goto L4b87f6;
  #L4b87e6.  v1:= v6[v2] @kind object;
  #L4b87ea.  call `f`(v5, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache;.f:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache$a;)V` @kind virtual;
  #L4b87f0.  v2:= v2 + 1;
  #L4b87f4.  goto L4b87e2;
  #L4b87f6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCache` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4b8808.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.observable.ObservableCache` v3 @kind this, `io.reactivex.rxjava3.core.Observer` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache;.subscribeActual:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L4b896c.  v0:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableCache$a`;
  #L4b8970.  call `<init>`(v0, v4, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache;)V` @kind direct;
  #L4b8976.  call `onSubscribe`(v4, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4b897c.  call `d`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache;.d:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache$a;)V` @kind virtual;
  #L4b8982.  v4:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.a` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4b8986.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4b898c.  v4:= temp;
  #L4b898e.  if v4 != 0 then goto L4b89b2;
  #L4b8992.  v4:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableCache.a` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4b8996.  v1:= 0I;
  #L4b8998.  v2:= 1I;
  #L4b899a.  call temp:= `compareAndSet`(v4, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4b89a0.  v4:= temp;
  #L4b89a2.  if v4 == 0 then goto L4b89b2;
  #L4b89a6.  v4:= v3.`io.reactivex.rxjava3.internal.operators.observable.a.source` @type ^`io.reactivex.rxjava3.core.ObservableSource` @kind object;
  #L4b89aa.  call `subscribe`(v4, v3) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4b89b0.  goto L4b89b8;
  #L4b89b2.  call `f`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache;.f:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableCache$a;)V` @kind virtual;
  #L4b89b8.  return @kind void;
}
