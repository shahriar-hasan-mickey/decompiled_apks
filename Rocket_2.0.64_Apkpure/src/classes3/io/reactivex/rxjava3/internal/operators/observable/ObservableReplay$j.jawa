record `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$j` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.ObservableSource` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$j.a` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$b` `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$j.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$j` v0 @kind this, `java.util.concurrent.atomic.AtomicReference` v1 @kind object, `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$b` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$j;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c62b4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4c62ba.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$j.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4c62be.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$j.b` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$b` := v2 @kind object;
  #L4c62c2.  return @kind void;
}
procedure `void` `subscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$j` v3 @kind this, `io.reactivex.rxjava3.core.Observer` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$j;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4c62d4.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$j.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c62d8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c62de.  v0:= temp @kind object;
  #L4c62e0.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i`) v0 @kind object;
  #L4c62e4.  if v0 != 0 then goto L4c6318;
  #L4c62e8.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$j.b` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$b` @kind object;
  #L4c62ec.  call temp:= `call`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$b;.call:()Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$g;` @kind interface;
  #L4c62f2.  v0:= temp @kind object;
  #L4c62f4.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i`;
  #L4c62f8.  v2:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$j.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c62fc.  call `<init>`(v1, v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$i;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$g;Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L4c6302.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$j.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c6306.  v2:= 0I;
  #L4c6308.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4c630e.  v0:= temp;
  #L4c6310.  if v0 != 0 then goto L4c6316;
  #L4c6314.  goto L4c62d4;
  #L4c6316.  v0:= v1 @kind object;
  #L4c6318.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$d`;
  #L4c631c.  call `<init>`(v1, v0, v4) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$d;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$i;Lio/reactivex/rxjava3/core/Observer;)V` @kind direct;
  #L4c6322.  call `onSubscribe`(v4, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4c6328.  call temp:= `a`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$i;.a:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$d;)Z` @kind virtual;
  #L4c632e.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$d;.isDisposed:()Z` @kind virtual;
  #L4c6334.  v4:= temp;
  #L4c6336.  if v4 == 0 then goto L4c6342;
  #L4c633a.  call `b`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$i;.b:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$d;)V` @kind virtual;
  #L4c6340.  return @kind void;
  #L4c6342.  v4:= v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$i.a` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$g` @kind object;
  #L4c6346.  call `c`(v4, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$g;.c:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$d;)V` @kind interface;
  #L4c634c.  return @kind void;
}
