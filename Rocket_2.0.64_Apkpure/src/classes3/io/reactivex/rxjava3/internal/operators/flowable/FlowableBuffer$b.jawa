record `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.rxjava3.functions.BooleanSupplier` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Supplier` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.d` @AccessFlag FINAL;
  `java.util.ArrayDeque` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.f` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.g` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.h` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.i` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.j` @AccessFlag VOLATILE;
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.k` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 , `int` v3 , `io.reactivex.rxjava3.functions.Supplier` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$b;.<init>:(Lorg/reactivestreams/Subscriber;IILio/reactivex/rxjava3/functions/Supplier;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L488194.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L48819a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L48819e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.c` @type ^`int` := v2;
  #L4881a2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.d` @type ^`int` := v3;
  #L4881a6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.b` @type ^`io.reactivex.rxjava3.functions.Supplier` := v4 @kind object;
  #L4881aa.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4881ae.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4881b4.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.f` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L4881b8.  v1:= new `java.util.ArrayDeque`;
  #L4881bc.  call `<init>`(v1) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L4881c2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.e` @type ^`java.util.ArrayDeque` := v1 @kind object;
  #L4881c6.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4881d8.  v0:= 1I;
  #L4881da.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.j` @type ^`boolean` := v0 @kind boolean;
  #L4881de.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4881e2.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4881e8.  return @kind void;
}
procedure `boolean` `getAsBoolean`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$b;.getAsBoolean:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48817c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.j` @type ^`boolean` @kind boolean;
  #L488180.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4881fc.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.h` @type ^`boolean` @kind boolean;
  #L488200.  if v0 == 0 then goto L488206;
  #L488204.  return @kind void;
  #L488206.  v0:= 1I;
  #L488208.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.h` @type ^`boolean` := v0 @kind boolean;
  #L48820c.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.k` @type ^`long` @kind wide;
  #L488210.  v2:= 0L;
  #L488214.  v4:= lcmp(v0, v2);
  #L488218.  if v4 == 0 then goto L488222;
  #L48821c.  call temp:= `produced`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L488222.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L488226.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L48822a.  call `postComplete`(v0, v1, v5, v5) @signature `Lio/reactivex/rxjava3/internal/util/QueueDrainHelper;.postComplete:(Lorg/reactivestreams/Subscriber;Ljava/util/Queue;Ljava/util/concurrent/atomic/AtomicLong;Lio/reactivex/rxjava3/functions/BooleanSupplier;)V` @kind static;
  #L488230.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L488244.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.h` @type ^`boolean` @kind boolean;
  #L488248.  if v0 == 0 then goto L488254;
  #L48824c.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L488252.  return @kind void;
  #L488254.  v0:= 1I;
  #L488256.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.h` @type ^`boolean` := v0 @kind boolean;
  #L48825a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L48825e.  call `clear`(v0) @signature `Ljava/util/ArrayDeque;.clear:()V` @kind virtual;
  #L488264.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L488268.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L48826e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L488280.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.h` @type ^`boolean` @kind boolean;
  #L488284.  if v0 == 0 then goto L48828a;
  #L488288.  return @kind void;
  #L48828a.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L48828e.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.i` @type ^`int`;
  #L488292.  v2:= v1 + 1;
  #L488296.  if v1 != 0 then goto L4882d2;
  #L48829a.  v1:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.b` @type ^`io.reactivex.rxjava3.functions.Supplier` @kind object;
  #L48829e.  call temp:= `get`(v1) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L4882a4.  v1:= temp @kind object;
  #L4882a6.  v3:= "The bufferSupplier returned a null buffer" @kind object;
  #L4882aa.  call temp:= `requireNonNull`(v1, v3) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4882b0.  v1:= (`java.util.Collection`) v1 @kind object;
  #L4882b4.  call temp:= `offer`(v0, v1) @signature `Ljava/util/ArrayDeque;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4882ba.  goto L4882d2;
  #L4882bc.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4882be.  call `throwIfFatal`(v8) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4882c4.  call `cancel`(v7) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$b;.cancel:()V` @kind virtual;
  #L4882ca.  call `onError`(v7, v8) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4882d0.  return @kind void;
  #L4882d2.  call temp:= `peek`(v0) @signature `Ljava/util/ArrayDeque;.peek:()Ljava/lang/Object;` @kind virtual;
  #L4882d8.  v1:= temp @kind object;
  #L4882da.  v1:= (`java.util.Collection`) v1 @kind object;
  #L4882de.  call temp:= `size`(v1) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L4882e4.  v3:= temp;
  #L4882e6.  v3:= v3 + 1;
  #L4882ea.  v4:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.c` @type ^`int`;
  #L4882ee.  if v3 != v4 then goto L488316;
  #L4882f2.  call temp:= `poll`(v0) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4882f8.  call temp:= `add`(v1, v8) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4882fe.  v3:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.k` @type ^`long` @kind wide;
  #L488302.  v5:= 1L;
  #L488306.  v3:= v3 + v5 @kind long;
  #L488308.  v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.k` @type ^`long` := v3 @kind wide;
  #L48830c.  v3:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L488310.  call `onNext`(v3, v1) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L488316.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L48831c.  v0:= temp @kind object;
  #L48831e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L488324.  v1:= temp;
  #L488326.  if v1 == 0 then goto L48833e;
  #L48832a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L488330.  v1:= temp @kind object;
  #L488332.  v1:= (`java.util.Collection`) v1 @kind object;
  #L488336.  call temp:= `add`(v1, v8) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L48833c.  goto L48831e;
  #L48833e.  v8:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.d` @type ^`int`;
  #L488342.  if v2 != v8 then goto L488348;
  #L488346.  v2:= 0I;
  #L488348.  v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.i` @type ^`int` := v2;
  #L48834c.  return @kind void;
  catch `java.lang.Throwable` @[L48829a..L4882b4] goto L4882bc;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48836c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L488370.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L488376.  v0:= temp;
  #L488378.  if v0 == 0 then goto L48838a;
  #L48837c.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.g` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L488380.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L488384.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L48838a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b` v7 @kind this, `long` v8 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableBuffer$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L48839c.  call temp:= `validate`(v8) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4883a2.  v0:= temp;
  #L4883a4.  if v0 == 0 then goto L48842e;
  #L4883a8.  v3:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4883ac.  v4:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L4883b0.  v1:= v8 @kind wide;
  #L4883b2.  v5:= v7 @kind object;
  #L4883b4.  v6:= v7 @kind object;
  #L4883b6.  call temp:= `postCompleteRequest`(v1, v3, v4, v5, v6) @signature `Lio/reactivex/rxjava3/internal/util/QueueDrainHelper;.postCompleteRequest:(JLorg/reactivestreams/Subscriber;Ljava/util/Queue;Ljava/util/concurrent/atomic/AtomicLong;Lio/reactivex/rxjava3/functions/BooleanSupplier;)Z` @kind static;
  #L4883bc.  v0:= temp;
  #L4883be.  if v0 == 0 then goto L4883c4;
  #L4883c2.  return @kind void;
  #L4883c4.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.f` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4883c8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4883ce.  v0:= temp;
  #L4883d0.  if v0 != 0 then goto L488416;
  #L4883d4.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.f` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4883d8.  v1:= 0I;
  #L4883da.  v2:= 1I;
  #L4883dc.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4883e2.  v0:= temp;
  #L4883e4.  if v0 == 0 then goto L488416;
  #L4883e8.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.d` @type ^`int`;
  #L4883ec.  v0:= (`long`) v0 @kind i2l;
  #L4883ee.  v2:= 1L;
  #L4883f2.  v8:= v8 - v2 @kind long;
  #L4883f4.  call temp:= `multiplyCap`(v0, v8) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L4883fa.  v8:= temp @kind wide;
  #L4883fc.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.c` @type ^`int`;
  #L488400.  v0:= (`long`) v0 @kind i2l;
  #L488402.  call temp:= `addCap`(v0, v8) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L488408.  v8:= temp @kind wide;
  #L48840a.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48840e.  call `request`(v0, v8) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L488414.  goto L48842e;
  #L488416.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.d` @type ^`int`;
  #L48841a.  v0:= (`long`) v0 @kind i2l;
  #L48841c.  call temp:= `multiplyCap`(v0, v8) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L488422.  v8:= temp @kind wide;
  #L488424.  v0:= v7.`io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$b.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L488428.  call `request`(v0, v8) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L48842e.  return @kind void;
}
