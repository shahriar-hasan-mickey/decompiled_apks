record `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.a` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.b` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.c` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.d` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.e` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.g` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureLatest$a;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L49abf0.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L49abf6.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L49abfa.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L49ac00.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L49ac04.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L49ac08.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L49ac0e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L49ac12.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L49ac16.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a` v3 @kind this, `boolean` v4 , `boolean` v5 , `org.reactivestreams.Subscriber` v6 @kind object, `java.util.concurrent.atomic.AtomicReference` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureLatest$a;.a:(ZZLorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicReference;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L49aba0.  v0:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.e` @type ^`boolean` @kind boolean;
  #L49aba4.  v1:= 0I;
  #L49aba6.  v2:= 1I;
  #L49aba8.  if v0 == 0 then goto L49abb4;
  #L49abac.  call `lazySet`(v7, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L49abb2.  return v2;
  #L49abb4.  if v4 == 0 then goto L49abda;
  #L49abb8.  v4:= v3.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.d` @type ^`java.lang.Throwable` @kind object;
  #L49abbc.  if v4 == 0 then goto L49abce;
  #L49abc0.  call `lazySet`(v7, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L49abc6.  call `onError`(v6, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L49abcc.  return v2;
  #L49abce.  if v5 == 0 then goto L49abda;
  #L49abd2.  call `onComplete`(v6) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L49abd8.  return v2;
  #L49abda.  v4:= 0I;
  #L49abdc.  return v4;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a` v13 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureLatest$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L49ac6c.  call temp:= `getAndIncrement`(v13) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L49ac72.  v0:= temp;
  #L49ac74.  if v0 == 0 then goto L49ac7a;
  #L49ac78.  return @kind void;
  #L49ac7a.  v0:= v13.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49ac7e.  v1:= v13.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L49ac82.  v2:= v13.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49ac86.  v3:= 1I;
  #L49ac88.  v4:= 1I;
  #L49ac8a.  v5:= 0L;
  #L49ac8e.  v7:= v5 @kind wide;
  #L49ac90.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L49ac96.  v9:= temp @kind wide;
  #L49ac98.  v11:= 0I;
  #L49ac9a.  v12:= lcmp(v7, v9);
  #L49ac9e.  if v12 == 0 then goto L49acdc;
  #L49aca2.  v9:= v13.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.c` @type ^`boolean` @kind boolean;
  #L49aca6.  v10:= 0I;
  #L49aca8.  call temp:= `getAndSet`(v2, v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L49acae.  v10:= temp @kind object;
  #L49acb0.  if v10 != 0 then goto L49acb8;
  #L49acb4.  v12:= 1I;
  #L49acb6.  goto L49acba;
  #L49acb8.  v12:= 0I;
  #L49acba.  call temp:= `a`(v13, v9, v12, v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureLatest$a;.a:(ZZLorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind virtual;
  #L49acc0.  v9:= temp;
  #L49acc2.  if v9 == 0 then goto L49acc8;
  #L49acc6.  return @kind void;
  #L49acc8.  if v12 == 0 then goto L49acce;
  #L49accc.  goto L49acdc;
  #L49acce.  call `onNext`(v0, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L49acd4.  v9:= 1L;
  #L49acd8.  v7:= v7 + v9 @kind long;
  #L49acda.  goto L49ac90;
  #L49acdc.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L49ace2.  v9:= temp @kind wide;
  #L49ace4.  v12:= lcmp(v7, v9);
  #L49ace8.  if v12 != 0 then goto L49ad0c;
  #L49acec.  v9:= v13.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.c` @type ^`boolean` @kind boolean;
  #L49acf0.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49acf6.  v10:= temp @kind object;
  #L49acf8.  if v10 != 0 then goto L49acfe;
  #L49acfc.  v11:= 1I;
  #L49acfe.  call temp:= `a`(v13, v9, v11, v0, v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureLatest$a;.a:(ZZLorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind virtual;
  #L49ad04.  v9:= temp;
  #L49ad06.  if v9 == 0 then goto L49ad0c;
  #L49ad0a.  return @kind void;
  #L49ad0c.  v9:= lcmp(v7, v5);
  #L49ad10.  if v9 == 0 then goto L49ad1a;
  #L49ad14.  call temp:= `produced`(v1, v7) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L49ad1a.  v4:= -v4 @kind int;
  #L49ad1c.  call temp:= `addAndGet`(v13, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L49ad22.  v4:= temp;
  #L49ad24.  if v4 != 0 then goto L49ac8a;
  #L49ad28.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureLatest$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49ac28.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.e` @type ^`boolean` @kind boolean;
  #L49ac2c.  if v0 != 0 then goto L49ac58;
  #L49ac30.  v0:= 1I;
  #L49ac32.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.e` @type ^`boolean` := v0 @kind boolean;
  #L49ac36.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L49ac3a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L49ac40.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L49ac46.  v0:= temp;
  #L49ac48.  if v0 != 0 then goto L49ac58;
  #L49ac4c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49ac50.  v1:= 0I;
  #L49ac52.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L49ac58.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureLatest$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49ad3c.  v0:= 1I;
  #L49ad3e.  v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.c` @type ^`boolean` := v0 @kind boolean;
  #L49ad42.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureLatest$a;.b:()V` @kind virtual;
  #L49ad48.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureLatest$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L49ad5c.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.d` @type ^`java.lang.Throwable` := v1 @kind object;
  #L49ad60.  v1:= 1I;
  #L49ad62.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.c` @type ^`boolean` := v1 @kind boolean;
  #L49ad66.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureLatest$a;.b:()V` @kind virtual;
  #L49ad6c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureLatest$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49ad80.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49ad84.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L49ad8a.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureLatest$a;.b:()V` @kind virtual;
  #L49ad90.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureLatest$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49ada4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L49ada8.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L49adae.  v0:= temp;
  #L49adb0.  if v0 == 0 then goto L49add2;
  #L49adb4.  v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.b` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L49adb8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49adbc.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L49adc2.  v0:= 9223372036854775807L;
  #L49adcc.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L49add2.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureLatest$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49ade4.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L49adea.  v0:= temp;
  #L49adec.  if v0 == 0 then goto L49ae00;
  #L49adf0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatest$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L49adf4.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L49adfa.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableOnBackpressureLatest$a;.b:()V` @kind virtual;
  #L49ae00.  return @kind void;
}
