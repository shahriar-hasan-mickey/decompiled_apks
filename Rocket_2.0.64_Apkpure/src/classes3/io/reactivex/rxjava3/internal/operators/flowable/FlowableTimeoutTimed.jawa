record `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.internal.operators.flowable.a` @kind class {
  `long` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.d` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.e` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed` v0 @kind this, `io.reactivex.rxjava3.core.Flowable` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.rxjava3.core.Scheduler` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed;.<init>:(Lio/reactivex/rxjava3/core/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;Lorg/reactivestreams/Publisher;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4a4c28.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/a;.<init>:(Lio/reactivex/rxjava3/core/Flowable;)V` @kind direct;
  #L4a4c2e.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.b` @type ^`long` := v2 @kind wide;
  #L4a4c32.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.c` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L4a4c36.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.d` @type ^`io.reactivex.rxjava3.core.Scheduler` := v5 @kind object;
  #L4a4c3a.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.e` @type ^`org.reactivestreams.Publisher` := v6 @kind object;
  #L4a4c3e.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed` v10 @kind this, `org.reactivestreams.Subscriber` v11 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4a4c50.  v0:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.e` @type ^`org.reactivestreams.Publisher` @kind object;
  #L4a4c54.  v1:= 0L;
  #L4a4c58.  if v0 != 0 then goto L4a4c96;
  #L4a4c5c.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$c`;
  #L4a4c60.  v5:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.b` @type ^`long` @kind wide;
  #L4a4c64.  v7:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4a4c68.  v3:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.d` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4a4c6c.  call temp:= `createWorker`(v3) @signature `Lio/reactivex/rxjava3/core/Scheduler;.createWorker:()Lio/reactivex/rxjava3/core/Scheduler$Worker;` @kind virtual;
  #L4a4c72.  v8:= temp @kind object;
  #L4a4c74.  v3:= v0 @kind object;
  #L4a4c76.  v4:= v11 @kind object;
  #L4a4c78.  call `<init>`(v3, v4, v5, v7, v8) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed$c;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler$Worker;)V` @kind direct;
  #L4a4c7e.  call `onSubscribe`(v11, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4a4c84.  call `c`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed$c;.c:(J)V` @kind virtual;
  #L4a4c8a.  v11:= v10.`io.reactivex.rxjava3.internal.operators.flowable.a.source` @type ^`io.reactivex.rxjava3.core.Flowable` @kind object;
  #L4a4c8e.  call `subscribe`(v11, v0) @signature `Lio/reactivex/rxjava3/core/Flowable;.subscribe:(Lio/reactivex/rxjava3/core/FlowableSubscriber;)V` @kind virtual;
  #L4a4c94.  goto L4a4cd2;
  #L4a4c96.  v0:= new `io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$b`;
  #L4a4c9a.  v5:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.b` @type ^`long` @kind wide;
  #L4a4c9e.  v7:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4a4ca2.  v3:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.d` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4a4ca6.  call temp:= `createWorker`(v3) @signature `Lio/reactivex/rxjava3/core/Scheduler;.createWorker:()Lio/reactivex/rxjava3/core/Scheduler$Worker;` @kind virtual;
  #L4a4cac.  v8:= temp @kind object;
  #L4a4cae.  v9:= v10.`io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.e` @type ^`org.reactivestreams.Publisher` @kind object;
  #L4a4cb2.  v3:= v0 @kind object;
  #L4a4cb4.  v4:= v11 @kind object;
  #L4a4cb6.  call `<init>`(v3, v4, v5, v7, v8, v9) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed$b;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler$Worker;Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L4a4cbc.  call `onSubscribe`(v11, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4a4cc2.  call `e`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableTimeoutTimed$b;.e:(J)V` @kind virtual;
  #L4a4cc8.  v11:= v10.`io.reactivex.rxjava3.internal.operators.flowable.a.source` @type ^`io.reactivex.rxjava3.core.Flowable` @kind object;
  #L4a4ccc.  call `subscribe`(v11, v0) @signature `Lio/reactivex/rxjava3/core/Flowable;.subscribe:(Lio/reactivex/rxjava3/core/FlowableSubscriber;)V` @kind virtual;
  #L4a4cd2.  return @kind void;
}
