record `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a` @kind class {
  `io.reactivex.rxjava3.core.Scheduler` `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l.d` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l.e` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l.f` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l.g` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l` v0 @kind this, `int` v1 , `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.rxjava3.core.Scheduler` v5 @kind object, `boolean` v6 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$l;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c64ac.  call `<init>`(v0, v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.<init>:(Z)V` @kind direct;
  #L4c64b2.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l.d` @type ^`io.reactivex.rxjava3.core.Scheduler` := v5 @kind object;
  #L4c64b6.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l.g` @type ^`int` := v1;
  #L4c64ba.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l.e` @type ^`long` := v2 @kind wide;
  #L4c64be.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l.f` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L4c64c2.  return @kind void;
}
procedure `java.lang.Object` `e`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$l;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4c645c.  v0:= new `io.reactivex.rxjava3.schedulers.Timed`;
  #L4c6460.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l.d` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4c6464.  v2:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l.f` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4c6468.  call temp:= `now`(v1, v2) @signature `Lio/reactivex/rxjava3/core/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4c646e.  v1:= temp @kind wide;
  #L4c6470.  v3:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l.f` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4c6474.  call `<init>`(v0, v5, v1, v3) @signature `Lio/reactivex/rxjava3/schedulers/Timed;.<init>:(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L4c647a.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f` `f`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l` v8 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$l;.f:()Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$f;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4c63c0.  v0:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l.d` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4c63c4.  v1:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l.f` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4c63c8.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4c63ce.  v0:= temp @kind wide;
  #L4c63d0.  v2:= v8.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l.e` @type ^`long` @kind wide;
  #L4c63d4.  v0:= v0 - v2 @kind long;
  #L4c63d6.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c63dc.  v2:= temp @kind object;
  #L4c63de.  v2:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f`) v2 @kind object;
  #L4c63e2.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c63e8.  v3:= temp @kind object;
  #L4c63ea.  v3:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f`) v3 @kind object;
  #L4c63ee.  v7:= v3 @kind object;
  #L4c63f0.  v3:= v2 @kind object;
  #L4c63f2.  v2:= v7 @kind object;
  #L4c63f4.  if v2 != 0 then goto L4c63fa;
  #L4c63f8.  goto L4c644a;
  #L4c63fa.  v4:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f.a` @type ^`java.lang.Object` @kind object;
  #L4c63fe.  v4:= (`io.reactivex.rxjava3.schedulers.Timed`) v4 @kind object;
  #L4c6402.  call temp:= `value`(v4) @signature `Lio/reactivex/rxjava3/schedulers/Timed;.value:()Ljava/lang/Object;` @kind virtual;
  #L4c6408.  v5:= temp @kind object;
  #L4c640a.  call temp:= `isComplete`(v5) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4c6410.  v5:= temp;
  #L4c6412.  if v5 != 0 then goto L4c644a;
  #L4c6416.  call temp:= `value`(v4) @signature `Lio/reactivex/rxjava3/schedulers/Timed;.value:()Ljava/lang/Object;` @kind virtual;
  #L4c641c.  v5:= temp @kind object;
  #L4c641e.  call temp:= `isError`(v5) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4c6424.  v5:= temp;
  #L4c6426.  if v5 == 0 then goto L4c642c;
  #L4c642a.  goto L4c644a;
  #L4c642c.  call temp:= `time`(v4) @signature `Lio/reactivex/rxjava3/schedulers/Timed;.time:()J` @kind virtual;
  #L4c6432.  v4:= temp @kind wide;
  #L4c6434.  v6:= lcmp(v4, v0);
  #L4c6438.  if v6 > 0 then goto L4c644a;
  #L4c643c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c6442.  v3:= temp @kind object;
  #L4c6444.  v3:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f`) v3 @kind object;
  #L4c6448.  goto L4c63ee;
  #L4c644a.  return v3 @kind object;
}
procedure `java.lang.Object` `g`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$l;.g:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;

  #L4c648c.  v1:= (`io.reactivex.rxjava3.schedulers.Timed`) v1 @kind object;
  #L4c6490.  call temp:= `value`(v1) @signature `Lio/reactivex/rxjava3/schedulers/Timed;.value:()Ljava/lang/Object;` @kind virtual;
  #L4c6496.  v1:= temp @kind object;
  #L4c6498.  return v1 @kind object;
}
procedure `void` `k`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l` v10 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$l;.k:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4c64d4.  v0:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l.d` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4c64d8.  v1:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l.f` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4c64dc.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4c64e2.  v0:= temp @kind wide;
  #L4c64e4.  v2:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l.e` @type ^`long` @kind wide;
  #L4c64e8.  v0:= v0 - v2 @kind long;
  #L4c64ea.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c64f0.  v2:= temp @kind object;
  #L4c64f2.  v2:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f`) v2 @kind object;
  #L4c64f6.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c64fc.  v3:= temp @kind object;
  #L4c64fe.  v3:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f`) v3 @kind object;
  #L4c6502.  v4:= 0I;
  #L4c6504.  v9:= v3 @kind object;
  #L4c6506.  v3:= v2 @kind object;
  #L4c6508.  v2:= v9 @kind object;
  #L4c650a.  v5:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a.b` @type ^`int`;
  #L4c650e.  v6:= 1I;
  #L4c6510.  if v5 <= v6 then goto L4c656a;
  #L4c6514.  v7:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l.g` @type ^`int`;
  #L4c6518.  if v5 <= v7 then goto L4c6536;
  #L4c651c.  v4:= v4 + 1;
  #L4c6520.  v5:= v5 + -1;
  #L4c6524.  v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a.b` @type ^`int` := v5;
  #L4c6528.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c652e.  v3:= temp @kind object;
  #L4c6530.  v3:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f`) v3 @kind object;
  #L4c6534.  goto L4c6504;
  #L4c6536.  v5:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f.a` @type ^`java.lang.Object` @kind object;
  #L4c653a.  v5:= (`io.reactivex.rxjava3.schedulers.Timed`) v5 @kind object;
  #L4c653e.  call temp:= `time`(v5) @signature `Lio/reactivex/rxjava3/schedulers/Timed;.time:()J` @kind virtual;
  #L4c6544.  v7:= temp @kind wide;
  #L4c6546.  v5:= lcmp(v7, v0);
  #L4c654a.  if v5 > 0 then goto L4c656a;
  #L4c654e.  v4:= v4 + 1;
  #L4c6552.  v3:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a.b` @type ^`int`;
  #L4c6556.  v3:= v3 - v6 @kind int;
  #L4c6558.  v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a.b` @type ^`int` := v3;
  #L4c655c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c6562.  v3:= temp @kind object;
  #L4c6564.  v3:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f`) v3 @kind object;
  #L4c6568.  goto L4c6504;
  #L4c656a.  if v4 == 0 then goto L4c6574;
  #L4c656e.  call `i`(v10, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.i:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$f;)V` @kind virtual;
  #L4c6574.  return @kind void;
}
procedure `void` `l`(`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l` v10 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$l;.l:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4c6588.  v0:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l.d` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4c658c.  v1:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l.f` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4c6590.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4c6596.  v0:= temp @kind wide;
  #L4c6598.  v2:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$l.e` @type ^`long` @kind wide;
  #L4c659c.  v0:= v0 - v2 @kind long;
  #L4c659e.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c65a4.  v2:= temp @kind object;
  #L4c65a6.  v2:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f`) v2 @kind object;
  #L4c65aa.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c65b0.  v3:= temp @kind object;
  #L4c65b2.  v3:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f`) v3 @kind object;
  #L4c65b6.  v4:= 0I;
  #L4c65b8.  v9:= v3 @kind object;
  #L4c65ba.  v3:= v2 @kind object;
  #L4c65bc.  v2:= v9 @kind object;
  #L4c65be.  v5:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a.b` @type ^`int`;
  #L4c65c2.  v6:= 1I;
  #L4c65c4.  if v5 <= v6 then goto L4c65fc;
  #L4c65c8.  v5:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f.a` @type ^`java.lang.Object` @kind object;
  #L4c65cc.  v5:= (`io.reactivex.rxjava3.schedulers.Timed`) v5 @kind object;
  #L4c65d0.  call temp:= `time`(v5) @signature `Lio/reactivex/rxjava3/schedulers/Timed;.time:()J` @kind virtual;
  #L4c65d6.  v7:= temp @kind wide;
  #L4c65d8.  v5:= lcmp(v7, v0);
  #L4c65dc.  if v5 > 0 then goto L4c65fc;
  #L4c65e0.  v4:= v4 + 1;
  #L4c65e4.  v3:= v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a.b` @type ^`int`;
  #L4c65e8.  v3:= v3 - v6 @kind int;
  #L4c65ea.  v10.`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$a.b` @type ^`int` := v3;
  #L4c65ee.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c65f4.  v3:= temp @kind object;
  #L4c65f6.  v3:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$f`) v3 @kind object;
  #L4c65fa.  goto L4c65b8;
  #L4c65fc.  if v4 == 0 then goto L4c6606;
  #L4c6600.  call `i`(v10, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$a;.i:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableReplay$f;)V` @kind virtual;
  #L4c6606.  return @kind void;
}
