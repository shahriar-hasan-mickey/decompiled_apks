record `io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.observers.BasicFuseableObserver` @kind class {
  `java.util.Collection` `io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct$a.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `java.util.Collection` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableDistinct$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;Ljava/util/Collection;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4bc598.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/observers/BasicFuseableObserver;.<init>:(Lio/reactivex/rxjava3/core/Observer;)V` @kind direct;
  #L4bc59e.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4bc5a2.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct$a.a` @type ^`java.util.Collection` := v3 @kind object;
  #L4bc5a6.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableDistinct$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bc5b8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct$a.a` @type ^`java.util.Collection` @kind object;
  #L4bc5bc.  call `clear`(v0) @signature `Ljava/util/Collection;.clear:()V` @kind interface;
  #L4bc5c2.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/observers/BasicFuseableObserver;.clear:()V` @kind super;
  #L4bc5c8.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableDistinct$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bc5dc.  v0:= v1.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.done` @type ^`boolean` @kind boolean;
  #L4bc5e0.  if v0 != 0 then goto L4bc5fe;
  #L4bc5e4.  v0:= 1I;
  #L4bc5e6.  v1.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L4bc5ea.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct$a.a` @type ^`java.util.Collection` @kind object;
  #L4bc5ee.  call `clear`(v0) @signature `Ljava/util/Collection;.clear:()V` @kind interface;
  #L4bc5f4.  v0:= v1.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4bc5f8.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4bc5fe.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableDistinct$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bc610.  v0:= v1.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.done` @type ^`boolean` @kind boolean;
  #L4bc614.  if v0 == 0 then goto L4bc620;
  #L4bc618.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4bc61e.  goto L4bc63a;
  #L4bc620.  v0:= 1I;
  #L4bc622.  v1.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L4bc626.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct$a.a` @type ^`java.util.Collection` @kind object;
  #L4bc62a.  call `clear`(v0) @signature `Ljava/util/Collection;.clear:()V` @kind interface;
  #L4bc630.  v0:= v1.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4bc634.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4bc63a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableDistinct$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bc64c.  v0:= v2.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.done` @type ^`boolean` @kind boolean;
  #L4bc650.  if v0 == 0 then goto L4bc656;
  #L4bc654.  return @kind void;
  #L4bc656.  v0:= v2.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.sourceMode` @type ^`int`;
  #L4bc65a.  if v0 != 0 then goto L4bc69a;
  #L4bc65e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4bc662.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4bc668.  v0:= temp @kind object;
  #L4bc66a.  v1:= "The keySelector returned a null key" @kind object;
  #L4bc66e.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4bc674.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct$a.a` @type ^`java.util.Collection` @kind object;
  #L4bc678.  call temp:= `add`(v1, v0) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4bc67e.  v0:= temp;
  #L4bc680.  if v0 == 0 then goto L4bc6a6;
  #L4bc684.  v0:= v2.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4bc688.  call `onNext`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4bc68e.  goto L4bc6a6;
  #L4bc690.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bc692.  call `fail`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/observers/BasicFuseableObserver;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4bc698.  return @kind void;
  #L4bc69a.  v3:= v2.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4bc69e.  v0:= 0I;
  #L4bc6a0.  call `onNext`(v3, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4bc6a6.  return @kind void;
  catch `java.lang.Throwable` @[L4bc65e..L4bc680] goto L4bc690;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct$a` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableDistinct$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4bc550.  v0:= v4.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.qd` @type ^`io.reactivex.rxjava3.internal.fuseable.QueueDisposable` @kind object;
  #L4bc554.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4bc55a.  v0:= temp @kind object;
  #L4bc55c.  if v0 == 0 then goto L4bc586;
  #L4bc560.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct$a.a` @type ^`java.util.Collection` @kind object;
  #L4bc564.  v2:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4bc568.  call temp:= `apply`(v2, v0) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4bc56e.  v2:= temp @kind object;
  #L4bc570.  v3:= "The keySelector returned a null key" @kind object;
  #L4bc574.  call temp:= `requireNonNull`(v2, v3) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4bc57a.  call temp:= `add`(v1, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4bc580.  v1:= temp;
  #L4bc582.  if v1 == 0 then goto L4bc550;
  #L4bc586.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct$a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableDistinct$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L4bc534.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/observers/BasicFuseableObserver;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L4bc53a.  v1:= temp;
  #L4bc53c.  return v1;
}
