record `io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber` @kind class, `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind interface {
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiPredicate` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b.c` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `io.reactivex.rxjava3.functions.BiPredicate` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDistinctUntilChanged$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/BiPredicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L48f5bc.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L48f5c2.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b.a` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L48f5c6.  v0.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b.b` @type ^`io.reactivex.rxjava3.functions.BiPredicate` := v3 @kind object;
  #L48f5ca.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDistinctUntilChanged$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48f5dc.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDistinctUntilChanged$b;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L48f5e2.  v3:= temp;
  #L48f5e4.  if v3 != 0 then goto L48f5f6;
  #L48f5e8.  v3:= v2.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48f5ec.  v0:= 1L;
  #L48f5f0.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L48f5f6.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDistinctUntilChanged$b;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L48f540.  v0:= v5.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.qs` @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind object;
  #L48f544.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L48f54a.  v0:= temp @kind object;
  #L48f54c.  if v0 != 0 then goto L48f554;
  #L48f550.  v0:= 0I;
  #L48f552.  return v0 @kind object;
  #L48f554.  v1:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b.a` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L48f558.  call temp:= `apply`(v1, v0) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L48f55e.  v1:= temp @kind object;
  #L48f560.  v2:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b.d` @type ^`boolean` @kind boolean;
  #L48f564.  v3:= 1I;
  #L48f566.  if v2 != 0 then goto L48f574;
  #L48f56a.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b.d` @type ^`boolean` := v3 @kind boolean;
  #L48f56e.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b.c` @type ^`java.lang.Object` := v1 @kind object;
  #L48f572.  return v0 @kind object;
  #L48f574.  v2:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b.b` @type ^`io.reactivex.rxjava3.functions.BiPredicate` @kind object;
  #L48f578.  v4:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b.c` @type ^`java.lang.Object` @kind object;
  #L48f57c.  call temp:= `test`(v2, v4, v1) @signature `Lio/reactivex/rxjava3/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L48f582.  v2:= temp;
  #L48f584.  if v2 != 0 then goto L48f58e;
  #L48f588.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b.c` @type ^`java.lang.Object` := v1 @kind object;
  #L48f58c.  return v0 @kind object;
  #L48f58e.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b.c` @type ^`java.lang.Object` := v1 @kind object;
  #L48f592.  v0:= v5.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.sourceMode` @type ^`int`;
  #L48f596.  if v0 == v3 then goto L48f540;
  #L48f59a.  v0:= v5.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48f59e.  v1:= 1L;
  #L48f5a2.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L48f5a8.  goto L48f540;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDistinctUntilChanged$b;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L48f524.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableSubscriber;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L48f52a.  v1:= temp;
  #L48f52c.  return v1;
}
procedure `boolean` `tryOnNext`(`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/FlowableDistinctUntilChanged$b;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L48f498.  v0:= v5.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.done` @type ^`boolean` @kind boolean;
  #L48f49c.  v1:= 0I;
  #L48f49e.  if v0 == 0 then goto L48f4a4;
  #L48f4a2.  return v1;
  #L48f4a4.  v0:= v5.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.sourceMode` @type ^`int`;
  #L48f4a8.  v2:= 1I;
  #L48f4aa.  if v0 == 0 then goto L48f4ba;
  #L48f4ae.  v0:= v5.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48f4b2.  call `onNext`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L48f4b8.  return v2;
  #L48f4ba.  v0:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b.a` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L48f4be.  call temp:= `apply`(v0, v6) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L48f4c4.  v0:= temp @kind object;
  #L48f4c6.  v3:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b.d` @type ^`boolean` @kind boolean;
  #L48f4ca.  if v3 == 0 then goto L48f4e8;
  #L48f4ce.  v3:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b.b` @type ^`io.reactivex.rxjava3.functions.BiPredicate` @kind object;
  #L48f4d2.  v4:= v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b.c` @type ^`java.lang.Object` @kind object;
  #L48f4d6.  call temp:= `test`(v3, v4, v0) @signature `Lio/reactivex/rxjava3/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L48f4dc.  v3:= temp;
  #L48f4de.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b.c` @type ^`java.lang.Object` := v0 @kind object;
  #L48f4e2.  if v3 == 0 then goto L48f4f0;
  #L48f4e6.  return v1;
  #L48f4e8.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b.d` @type ^`boolean` := v2 @kind boolean;
  #L48f4ec.  v5.`io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$b.c` @type ^`java.lang.Object` := v0 @kind object;
  #L48f4f0.  v0:= v5.`io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48f4f4.  call `onNext`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L48f4fa.  return v2;
  #L48f4fc.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48f4fe.  call `fail`(v5, v6) @signature `Lio/reactivex/rxjava3/internal/subscribers/BasicFuseableSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L48f504.  return v2;
  catch `java.lang.Throwable` @[L48f4ba..L48f4f0] goto L48f4fc;
}
