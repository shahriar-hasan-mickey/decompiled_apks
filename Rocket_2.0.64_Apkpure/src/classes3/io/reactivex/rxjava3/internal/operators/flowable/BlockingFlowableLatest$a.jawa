record `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.subscribers.DisposableSubscriber` @kind class, `java.util.Iterator` @kind interface {
  `java.util.concurrent.Semaphore` `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Notification` `io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableLatest$a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L486bac.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/subscribers/DisposableSubscriber;.<init>:()V` @kind direct;
  #L486bb2.  v0:= new `java.util.concurrent.Semaphore`;
  #L486bb6.  v1:= 0I;
  #L486bb8.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/Semaphore;.<init>:(I)V` @kind direct;
  #L486bbe.  v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a.b` @type ^`java.util.concurrent.Semaphore` := v0 @kind object;
  #L486bc2.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L486bc6.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L486bcc.  v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L486bd0.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a` v1 @kind this, `io.reactivex.rxjava3.core.Notification` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableLatest$a;.a:(Lio/reactivex/rxjava3/core/Notification;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L486c10.  v0:= v1.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L486c14.  call temp:= `getAndSet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L486c1a.  v2:= temp @kind object;
  #L486c1c.  if v2 != 0 then goto L486c24;
  #L486c20.  v2:= 1I;
  #L486c22.  goto L486c26;
  #L486c24.  v2:= 0I;
  #L486c26.  if v2 == 0 then goto L486c34;
  #L486c2a.  v2:= v1.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a.b` @type ^`java.util.concurrent.Semaphore` @kind object;
  #L486c2e.  call `release`(v2) @signature `Ljava/util/concurrent/Semaphore;.release:()V` @kind virtual;
  #L486c34.  return @kind void;
}
procedure `boolean` `hasNext`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableLatest$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L486a84.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a.d` @type ^`io.reactivex.rxjava3.core.Notification` @kind object;
  #L486a88.  if v0 == 0 then goto L486ab0;
  #L486a8c.  call temp:= `isOnError`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.isOnError:()Z` @kind virtual;
  #L486a92.  v0:= temp;
  #L486a94.  if v0 != 0 then goto L486a9a;
  #L486a98.  goto L486ab0;
  #L486a9a.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a.d` @type ^`io.reactivex.rxjava3.core.Notification` @kind object;
  #L486a9e.  call temp:= `getError`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.getError:()Ljava/lang/Throwable;` @kind virtual;
  #L486aa4.  v0:= temp @kind object;
  #L486aa6.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L486aac.  v0:= temp @kind object;
  #L486aae.  throw v0;
  #L486ab0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a.d` @type ^`io.reactivex.rxjava3.core.Notification` @kind object;
  #L486ab4.  if v0 == 0 then goto L486ac4;
  #L486ab8.  call temp:= `isOnNext`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.isOnNext:()Z` @kind virtual;
  #L486abe.  v0:= temp;
  #L486ac0.  if v0 == 0 then goto L486b30;
  #L486ac4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a.d` @type ^`io.reactivex.rxjava3.core.Notification` @kind object;
  #L486ac8.  if v0 != 0 then goto L486b30;
  #L486acc.  call `verifyNonBlocking`() @signature `Lio/reactivex/rxjava3/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L486ad2.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a.b` @type ^`java.util.concurrent.Semaphore` @kind object;
  #L486ad6.  call `acquire`(v0) @signature `Ljava/util/concurrent/Semaphore;.acquire:()V` @kind virtual;
  #L486adc.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L486ae0.  v1:= 0I;
  #L486ae2.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L486ae8.  v0:= temp @kind object;
  #L486aea.  v0:= (`io.reactivex.rxjava3.core.Notification`) v0 @kind object;
  #L486aee.  v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a.d` @type ^`io.reactivex.rxjava3.core.Notification` := v0 @kind object;
  #L486af2.  call temp:= `isOnError`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.isOnError:()Z` @kind virtual;
  #L486af8.  v1:= temp;
  #L486afa.  if v1 != 0 then goto L486b00;
  #L486afe.  goto L486b30;
  #L486b00.  call temp:= `getError`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.getError:()Ljava/lang/Throwable;` @kind virtual;
  #L486b06.  v0:= temp @kind object;
  #L486b08.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L486b0e.  v0:= temp @kind object;
  #L486b10.  throw v0;
  #L486b12.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L486b14.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/subscribers/DisposableSubscriber;.dispose:()V` @kind virtual;
  #L486b1a.  call temp:= `createOnError`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.createOnError:(Ljava/lang/Throwable;)Lio/reactivex/rxjava3/core/Notification;` @kind static;
  #L486b20.  v1:= temp @kind object;
  #L486b22.  v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a.d` @type ^`io.reactivex.rxjava3.core.Notification` := v1 @kind object;
  #L486b26.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L486b2c.  v0:= temp @kind object;
  #L486b2e.  throw v0;
  #L486b30.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a.d` @type ^`io.reactivex.rxjava3.core.Notification` @kind object;
  #L486b34.  call temp:= `isOnNext`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.isOnNext:()Z` @kind virtual;
  #L486b3a.  v0:= temp;
  #L486b3c.  return v0;
  catch `java.lang.InterruptedException` @[L486acc..L486adc] goto L486b12;
}
procedure `java.lang.Object` `next`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableLatest$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L486b60.  call temp:= `hasNext`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableLatest$a;.hasNext:()Z` @kind virtual;
  #L486b66.  v0:= temp;
  #L486b68.  if v0 == 0 then goto L486b90;
  #L486b6c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a.d` @type ^`io.reactivex.rxjava3.core.Notification` @kind object;
  #L486b70.  call temp:= `isOnNext`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.isOnNext:()Z` @kind virtual;
  #L486b76.  v0:= temp;
  #L486b78.  if v0 == 0 then goto L486b90;
  #L486b7c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a.d` @type ^`io.reactivex.rxjava3.core.Notification` @kind object;
  #L486b80.  call temp:= `getValue`(v0) @signature `Lio/reactivex/rxjava3/core/Notification;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L486b86.  v0:= temp @kind object;
  #L486b88.  v1:= 0I;
  #L486b8a.  v2.`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a.d` @type ^`io.reactivex.rxjava3.core.Notification` := v1 @kind object;
  #L486b8e.  return v0 @kind object;
  #L486b90.  v0:= new `java.util.NoSuchElementException`;
  #L486b94.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L486b9a.  throw v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableLatest$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L486be4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableLatest$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L486bf8.  call `onError`(v1) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L486bfe.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableLatest$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L486c48.  v1:= (`io.reactivex.rxjava3.core.Notification`) v1 @kind object;
  #L486c4c.  call `a`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableLatest$a;.a:(Lio/reactivex/rxjava3/core/Notification;)V` @kind virtual;
  #L486c52.  return @kind void;
}
procedure `void` `remove`(`io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatest$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableLatest$a;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L486c64.  v0:= new `java.lang.UnsupportedOperationException`;
  #L486c68.  v1:= "Read-only iterator." @kind object;
  #L486c6c.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L486c72.  throw v0;
}
