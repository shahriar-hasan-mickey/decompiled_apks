record `io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.ObservableSource` `io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.d` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c` v1 @kind this, `io.reactivex.rxjava3.core.Observer` v2 @kind object, `io.reactivex.rxjava3.core.ObservableSource` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSampleWithObservable$c;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/core/ObservableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4c754c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4c7552.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4c7556.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4c755c.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4c7560.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.a` @type ^`io.reactivex.rxjava3.core.Observer` := v2 @kind object;
  #L4c7564.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.b` @type ^`io.reactivex.rxjava3.core.ObservableSource` := v3 @kind object;
  #L4c7568.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSampleWithObservable$c;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c757c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4c7580.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4c7586.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSampleWithObservable$c;.b:()V` @kind virtual;
  #L4c758c.  return @kind void;
}
procedure `void` `b`() @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSampleWithObservable$c;.b:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSampleWithObservable$c;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4c75c8.  v0:= 0I;
  #L4c75ca.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4c75d0.  v0:= temp @kind object;
  #L4c75d2.  if v0 == 0 then goto L4c75e0;
  #L4c75d6.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c75da.  call `onNext`(v1, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4c75e0.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSampleWithObservable$c;.d:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c75f4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4c75f8.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4c75fe.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c7602.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c7608.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSampleWithObservable$c;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c75a0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c75a4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4c75aa.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4c75ae.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4c75b4.  return @kind void;
}
procedure `void` `e`() @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSampleWithObservable$c;.e:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `boolean` `f`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSampleWithObservable$c;.f:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @AccessFlag  {
    temp;
    v0;

  #L4c752c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c7530.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4c7536.  v2:= temp;
  #L4c7538.  return v2;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSampleWithObservable$c;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c7500.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c7504.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c750a.  v0:= temp @kind object;
  #L4c750c.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4c7510.  if v0 != v1 then goto L4c7518;
  #L4c7514.  v0:= 1I;
  #L4c7516.  goto L4c751a;
  #L4c7518.  v0:= 0I;
  #L4c751a.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSampleWithObservable$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c761c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c7620.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4c7626.  call `b`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSampleWithObservable$c;.b:()V` @kind virtual;
  #L4c762c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSampleWithObservable$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c7640.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c7644.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4c764a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c764e.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c7654.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSampleWithObservable$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L4c7668.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4c766e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSampleWithObservable$c;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c7680.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4c7684.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4c768a.  v0:= temp;
  #L4c768c.  if v0 == 0 then goto L4c76c2;
  #L4c7690.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4c7694.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4c7698.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4c769e.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4c76a2.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4c76a8.  v2:= temp @kind object;
  #L4c76aa.  if v2 != 0 then goto L4c76c2;
  #L4c76ae.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$c.b` @type ^`io.reactivex.rxjava3.core.ObservableSource` @kind object;
  #L4c76b2.  v0:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$d`;
  #L4c76b6.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSampleWithObservable$d;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableSampleWithObservable$c;)V` @kind direct;
  #L4c76bc.  call `subscribe`(v2, v0) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4c76c2.  return @kind void;
}
