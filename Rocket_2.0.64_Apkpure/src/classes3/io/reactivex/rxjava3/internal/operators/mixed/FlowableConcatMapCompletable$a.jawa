record `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.CompletableObserver` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.ErrorMode` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a$a` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.e` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.f` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.g` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.h` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.i` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.j` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.k` @AccessFlag VOLATILE;
  `int` `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.l` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a` v0 @kind this, `io.reactivex.rxjava3.core.CompletableObserver` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `io.reactivex.rxjava3.internal.util.ErrorMode` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapCompletable$a;.<init>:(Lio/reactivex/rxjava3/core/CompletableObserver;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/internal/util/ErrorMode;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4b165c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4b1662.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` := v1 @kind object;
  #L4b1666.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L4b166a.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.c` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` := v3 @kind object;
  #L4b166e.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.f` @type ^`int` := v4;
  #L4b1672.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4b1676.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4b167c.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L4b1680.  v1:= new `io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a$a`;
  #L4b1684.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapCompletable$a$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapCompletable$a;)V` @kind direct;
  #L4b168a.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.e` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a$a` := v1 @kind object;
  #L4b168e.  v1:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L4b1692.  call `<init>`(v1, v4) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L4b1698.  v0.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v1 @kind object;
  #L4b169c.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a` v6 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapCompletable$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4b16fc.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4b1702.  v0:= temp;
  #L4b1704.  if v0 == 0 then goto L4b170a;
  #L4b1708.  return @kind void;
  #L4b170a.  v0:= v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.k` @type ^`boolean` @kind boolean;
  #L4b170e.  if v0 == 0 then goto L4b171e;
  #L4b1712.  v0:= v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4b1716.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4b171c.  return @kind void;
  #L4b171e.  v0:= v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.i` @type ^`boolean` @kind boolean;
  #L4b1722.  if v0 != 0 then goto L4b1820;
  #L4b1726.  v0:= v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.c` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4b172a.  v1:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4b172e.  if v0 != v1 then goto L4b175c;
  #L4b1732.  v0:= v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b1736.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4b173c.  v0:= temp @kind object;
  #L4b173e.  if v0 == 0 then goto L4b175c;
  #L4b1742.  v0:= v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4b1746.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4b174c.  v0:= v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b1750.  v1:= v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4b1754.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind virtual;
  #L4b175a.  return @kind void;
  #L4b175c.  v0:= v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.j` @type ^`boolean` @kind boolean;
  #L4b1760.  v1:= v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4b1764.  call temp:= `poll`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4b176a.  v1:= temp @kind object;
  #L4b176c.  v2:= 0I;
  #L4b176e.  v3:= 1I;
  #L4b1770.  if v1 != 0 then goto L4b1778;
  #L4b1774.  v4:= 1I;
  #L4b1776.  goto L4b177a;
  #L4b1778.  v4:= 0I;
  #L4b177a.  if v0 == 0 then goto L4b1792;
  #L4b177e.  if v4 == 0 then goto L4b1792;
  #L4b1782.  v0:= v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b1786.  v1:= v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4b178a.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind virtual;
  #L4b1790.  return @kind void;
  #L4b1792.  if v4 != 0 then goto L4b1820;
  #L4b1796.  v0:= v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.f` @type ^`int`;
  #L4b179a.  v4:= v0 ^> 1;
  #L4b179e.  v0:= v0 - v4 @kind int;
  #L4b17a0.  v4:= v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.l` @type ^`int`;
  #L4b17a4.  v4:= v4 + v3 @kind int;
  #L4b17a6.  if v4 != v0 then goto L4b17bc;
  #L4b17aa.  v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.l` @type ^`int` := v2;
  #L4b17ae.  v2:= v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b17b2.  v4:= (`long`) v0 @kind i2l;
  #L4b17b4.  call `request`(v2, v4) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4b17ba.  goto L4b17c0;
  #L4b17bc.  v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.l` @type ^`int` := v4;
  #L4b17c0.  v0:= v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4b17c4.  call temp:= `apply`(v0, v1) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4b17ca.  v0:= temp @kind object;
  #L4b17cc.  v1:= "The mapper returned a null CompletableSource" @kind object;
  #L4b17d0.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4b17d6.  v0:= (`io.reactivex.rxjava3.core.CompletableSource`) v0 @kind object;
  #L4b17da.  v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.i` @type ^`boolean` := v3 @kind boolean;
  #L4b17de.  v1:= v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.e` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a$a` @kind object;
  #L4b17e2.  call `subscribe`(v0, v1) @signature `Lio/reactivex/rxjava3/core/CompletableSource;.subscribe:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind interface;
  #L4b17e8.  goto L4b1820;
  #L4b17ea.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4b17ec.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4b17f2.  v1:= v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4b17f6.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4b17fc.  v1:= v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b1800.  call `cancel`(v1) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4b1806.  v1:= v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b180a.  call temp:= `tryAddThrowableOrReport`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4b1810.  v0:= v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b1814.  v1:= v6.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4b1818.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind virtual;
  #L4b181e.  return @kind void;
  #L4b1820.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4b1826.  v0:= temp;
  #L4b1828.  if v0 != 0 then goto L4b170a;
  #L4b182c.  return @kind void;
  catch `java.lang.Throwable` @[L4b17c0..L4b17da] goto L4b17ea;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapCompletable$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L4b184c.  v0:= 0I;
  #L4b184e.  v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.i` @type ^`boolean` := v0 @kind boolean;
  #L4b1852.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapCompletable$a;.a:()V` @kind virtual;
  #L4b1858.  return @kind void;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapCompletable$a;.c:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4b186c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b1870.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4b1876.  v2:= temp;
  #L4b1878.  if v2 == 0 then goto L4b18c4;
  #L4b187c.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.c` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4b1880.  v0:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4b1884.  if v2 != v0 then goto L4b18b8;
  #L4b1888.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b188c.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4b1892.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b1896.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4b189a.  call `tryTerminateConsumer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind virtual;
  #L4b18a0.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4b18a6.  v2:= temp;
  #L4b18a8.  if v2 != 0 then goto L4b18c4;
  #L4b18ac.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4b18b0.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4b18b6.  goto L4b18c4;
  #L4b18b8.  v2:= 0I;
  #L4b18ba.  v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.i` @type ^`boolean` := v2 @kind boolean;
  #L4b18be.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapCompletable$a;.a:()V` @kind virtual;
  #L4b18c4.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapCompletable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b16b0.  v0:= 1I;
  #L4b16b2.  v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.k` @type ^`boolean` := v0 @kind boolean;
  #L4b16b6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b16ba.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4b16c0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.e` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a$a` @kind object;
  #L4b16c4.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapCompletable$a$a;.a:()V` @kind virtual;
  #L4b16ca.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b16ce.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4b16d4.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4b16da.  v0:= temp;
  #L4b16dc.  if v0 != 0 then goto L4b16ea;
  #L4b16e0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4b16e4.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4b16ea.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapCompletable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b1644.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.k` @type ^`boolean` @kind boolean;
  #L4b1648.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapCompletable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b18d8.  v0:= 1I;
  #L4b18da.  v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.j` @type ^`boolean` := v0 @kind boolean;
  #L4b18de.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapCompletable$a;.a:()V` @kind virtual;
  #L4b18e4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapCompletable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b18f8.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b18fc.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4b1902.  v2:= temp;
  #L4b1904.  if v2 == 0 then goto L4b1950;
  #L4b1908.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.c` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4b190c.  v0:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4b1910.  if v2 != v0 then goto L4b1944;
  #L4b1914.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.e` @type ^`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a$a` @kind object;
  #L4b1918.  call `a`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapCompletable$a$a;.a:()V` @kind virtual;
  #L4b191e.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4b1922.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4b1926.  call `tryTerminateConsumer`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @kind virtual;
  #L4b192c.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4b1932.  v2:= temp;
  #L4b1934.  if v2 != 0 then goto L4b1950;
  #L4b1938.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4b193c.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4b1942.  goto L4b1950;
  #L4b1944.  v2:= 1I;
  #L4b1946.  v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.j` @type ^`boolean` := v2 @kind boolean;
  #L4b194a.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapCompletable$a;.a:()V` @kind virtual;
  #L4b1950.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapCompletable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4b1964.  v0:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.g` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4b1968.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4b196e.  v2:= temp;
  #L4b1970.  if v2 == 0 then goto L4b197c;
  #L4b1974.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapCompletable$a;.a:()V` @kind virtual;
  #L4b197a.  goto L4b199a;
  #L4b197c.  v2:= v1.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b1980.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4b1986.  v2:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4b198a.  v0:= "Queue full?!" @kind object;
  #L4b198e.  call `<init>`(v2, v0) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4b1994.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapCompletable$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4b199a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/mixed/FlowableConcatMapCompletable$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4b19ac.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4b19b0.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4b19b6.  v0:= temp;
  #L4b19b8.  if v0 == 0 then goto L4b19d6;
  #L4b19bc.  v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.h` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4b19c0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4b19c4.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/rxjava3/core/CompletableObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4b19ca.  v0:= v2.`io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$a.f` @type ^`int`;
  #L4b19ce.  v0:= (`long`) v0 @kind i2l;
  #L4b19d0.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4b19d6.  return @kind void;
}
