record `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `io.reactivex.rxjava3.core.Observer` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.c` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.d` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.e` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.f` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.g` @AccessFlag VOLATILE;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.h` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.i` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.j` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.k` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.l` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.m` @AccessFlag ;
  `java.util.Queue` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.n` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.o` @AccessFlag ;
}
global `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a`[] `@@io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.p` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a`[] `@@io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.q` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4bd91c.  v0:= 0I;
  #L4bd91e.  v1:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a`[v0];
  #L4bd922.  `@@io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.p` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a`[] := v1 @kind object;
  #L4bd926.  v0:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a`[v0];
  #L4bd92a.  `@@io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.q` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a`[] := v0 @kind object;
  #L4bd92e.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b` v1 @kind this, `io.reactivex.rxjava3.core.Observer` v2 @kind object, `io.reactivex.rxjava3.functions.Function` v3 @kind object, `boolean` v4 , `int` v5 , `int` v6 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;ZII)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4bd940.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4bd946.  v0:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L4bd94a.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4bd950.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v0 @kind object;
  #L4bd954.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.a` @type ^`io.reactivex.rxjava3.core.Observer` := v2 @kind object;
  #L4bd958.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.b` @type ^`io.reactivex.rxjava3.functions.Function` := v3 @kind object;
  #L4bd95c.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.c` @type ^`boolean` := v4 @kind boolean;
  #L4bd960.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.d` @type ^`int` := v5;
  #L4bd964.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.e` @type ^`int` := v6;
  #L4bd968.  v2:= 2147483647I;
  #L4bd96e.  if v5 == v2 then goto L4bd980;
  #L4bd972.  v2:= new `java.util.ArrayDeque`;
  #L4bd976.  call `<init>`(v2, v5) @signature `Ljava/util/ArrayDeque;.<init>:(I)V` @kind direct;
  #L4bd97c.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.n` @type ^`java.util.Queue` := v2 @kind object;
  #L4bd980.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4bd984.  v3:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.p` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a`[] @kind object;
  #L4bd988.  call `<init>`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4bd98e.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4bd992.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b` v4 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.a:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4bd738.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4bd73c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4bd742.  v0:= temp @kind object;
  #L4bd744.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a`[]) v0 @kind object;
  #L4bd748.  v1:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.q` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a`[] @kind object;
  #L4bd74c.  v2:= 0I;
  #L4bd74e.  if v0 != v1 then goto L4bd75a;
  #L4bd752.  call `a`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$a;.a:()V` @kind virtual;
  #L4bd758.  return v2;
  #L4bd75a.  v1:= length @variable v0;
  #L4bd75c.  v3:= v1 + 1;
  #L4bd760.  v3:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a`[v3];
  #L4bd764.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4bd76a.  v3[v1]:= v5 @kind object;
  #L4bd76e.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4bd772.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4bd778.  v0:= temp;
  #L4bd77a.  if v0 == 0 then goto L4bd738;
  #L4bd77e.  v5:= 1I;
  #L4bd780.  return v5;
}
procedure `boolean` `b`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.b:()Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4bd794.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.i` @type ^`boolean` @kind boolean;
  #L4bd798.  v1:= 1I;
  #L4bd79a.  if v0 == 0 then goto L4bd7a0;
  #L4bd79e.  return v1;
  #L4bd7a0.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bd7a4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4bd7aa.  v0:= temp @kind object;
  #L4bd7ac.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L4bd7b0.  v2:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.c` @type ^`boolean` @kind boolean;
  #L4bd7b4.  if v2 != 0 then goto L4bd7d2;
  #L4bd7b8.  if v0 == 0 then goto L4bd7d2;
  #L4bd7bc.  call temp:= `c`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.c:()Z` @kind virtual;
  #L4bd7c2.  v0:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bd7c6.  v2:= v3.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4bd7ca.  call `tryTerminateConsumer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4bd7d0.  return v1;
  #L4bd7d2.  v0:= 0I;
  #L4bd7d4.  return v0;
}
procedure `boolean` `c`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.c:()Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4bd7e8.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.k` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4bd7ec.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4bd7f2.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4bd7f6.  v1:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.q` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a`[] @kind object;
  #L4bd7fa.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4bd800.  v0:= temp @kind object;
  #L4bd802.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a`[]) v0 @kind object;
  #L4bd806.  v2:= 0I;
  #L4bd808.  if v0 == v1 then goto L4bd826;
  #L4bd80c.  v1:= length @variable v0;
  #L4bd80e.  if v2 >= v1 then goto L4bd822;
  #L4bd812.  v3:= v0[v2] @kind object;
  #L4bd816.  call `a`(v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$a;.a:()V` @kind virtual;
  #L4bd81c.  v2:= v2 + 1;
  #L4bd820.  goto L4bd80e;
  #L4bd822.  v0:= 1I;
  #L4bd824.  return v0;
  #L4bd826.  return v2;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.d:()V` @AccessFlag  {
    temp;
    v0;

  #L4bd9d4.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4bd9da.  v0:= temp;
  #L4bd9dc.  if v0 != 0 then goto L4bd9e6;
  #L4bd9e0.  call `e`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.e:()V` @kind virtual;
  #L4bd9e6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bd9a4.  v0:= 1I;
  #L4bd9a6.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.i` @type ^`boolean` := v0 @kind boolean;
  #L4bd9aa.  call temp:= `c`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.c:()Z` @kind virtual;
  #L4bd9b0.  v0:= temp;
  #L4bd9b2.  if v0 == 0 then goto L4bd9c0;
  #L4bd9b6.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bd9ba.  call `tryTerminateAndReport`(v0) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateAndReport:()V` @kind virtual;
  #L4bd9c0.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b` v12 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L4bd9f8.  v0:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4bd9fc.  v1:= 1I;
  #L4bd9fe.  call temp:= `b`(v12) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.b:()Z` @kind virtual;
  #L4bda04.  v2:= temp;
  #L4bda06.  if v2 == 0 then goto L4bda0c;
  #L4bda0a.  return @kind void;
  #L4bda0c.  v2:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4bda10.  v3:= 0I;
  #L4bda12.  v4:= 0I;
  #L4bda14.  if v2 == 0 then goto L4bda40;
  #L4bda18.  call temp:= `b`(v12) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.b:()Z` @kind virtual;
  #L4bda1e.  v5:= temp;
  #L4bda20.  if v5 == 0 then goto L4bda26;
  #L4bda24.  return @kind void;
  #L4bda26.  call temp:= `poll`(v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4bda2c.  v5:= temp @kind object;
  #L4bda2e.  if v5 != 0 then goto L4bda34;
  #L4bda32.  goto L4bda40;
  #L4bda34.  call `onNext`(v0, v5) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4bda3a.  v4:= v4 + 1;
  #L4bda3e.  goto L4bda18;
  #L4bda40.  v2:= 2147483647I;
  #L4bda46.  if v4 == 0 then goto L4bda5a;
  #L4bda4a.  v3:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.d` @type ^`int`;
  #L4bda4e.  if v3 == v2 then goto L4bd9fe;
  #L4bda52.  call `h`(v12, v4) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.h:(I)V` @kind virtual;
  #L4bda58.  goto L4bd9fe;
  #L4bda5a.  v5:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.g` @type ^`boolean` @kind boolean;
  #L4bda5e.  v6:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4bda62.  v7:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4bda66.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4bda6c.  v7:= temp @kind object;
  #L4bda6e.  v7:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a`[]) v7 @kind object;
  #L4bda72.  v8:= length @variable v7;
  #L4bda74.  v9:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.d` @type ^`int`;
  #L4bda78.  if v9 == v2 then goto L4bda94;
  #L4bda7c.  @monitorenter v12
  #L4bda7e.  v9:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.n` @type ^`java.util.Queue` @kind object;
  #L4bda82.  call temp:= `size`(v9) @signature `Ljava/util/Queue;.size:()I` @kind interface;
  #L4bda88.  v9:= temp;
  #L4bda8a.  @monitorexit v12
  #L4bda8c.  goto L4bda96;
  #L4bda8e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bda90.  @monitorexit v12
  #L4bda92.  throw v0;
  #L4bda94.  v9:= 0I;
  #L4bda96.  if v5 == 0 then goto L4bdac2;
  #L4bda9a.  if v6 == 0 then goto L4bdaaa;
  #L4bda9e.  call temp:= `isEmpty`(v6) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4bdaa4.  v5:= temp;
  #L4bdaa6.  if v5 == 0 then goto L4bdac2;
  #L4bdaaa.  if v8 != 0 then goto L4bdac2;
  #L4bdaae.  if v9 != 0 then goto L4bdac2;
  #L4bdab2.  v0:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bdab6.  v1:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4bdaba.  call `tryTerminateConsumer`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryTerminateConsumer:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4bdac0.  return @kind void;
  #L4bdac2.  if v8 == 0 then goto L4bdb8c;
  #L4bdac6.  v5:= v8 + -1;
  #L4bdaca.  v6:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.m` @type ^`int`;
  #L4bdace.  call temp:= `min`(v5, v6) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L4bdad4.  v5:= temp;
  #L4bdad6.  v6:= 0I;
  #L4bdad8.  if v6 >= v8 then goto L4bdb88;
  #L4bdadc.  call temp:= `b`(v12) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.b:()Z` @kind virtual;
  #L4bdae2.  v9:= temp;
  #L4bdae4.  if v9 == 0 then goto L4bdaea;
  #L4bdae8.  return @kind void;
  #L4bdaea.  v9:= v7[v5] @kind object;
  #L4bdaee.  v10:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a.d` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4bdaf2.  if v10 == 0 then goto L4bdb52;
  #L4bdaf6.  call temp:= `poll`(v10) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4bdafc.  v11:= temp @kind object;
  #L4bdafe.  if v11 != 0 then goto L4bdb04;
  #L4bdb02.  goto L4bdb52;
  #L4bdb04.  call `onNext`(v0, v11) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4bdb0a.  call temp:= `b`(v12) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.b:()Z` @kind virtual;
  #L4bdb10.  v11:= temp;
  #L4bdb12.  if v11 == 0 then goto L4bdaf6;
  #L4bdb16.  return @kind void;
  #L4bdb18.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bdb1a.  call `throwIfFatal`(v10) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4bdb20.  call `a`(v9) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$a;.a:()V` @kind virtual;
  #L4bdb26.  v11:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bdb2a.  call temp:= `tryAddThrowableOrReport`(v11, v10) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4bdb30.  call temp:= `b`(v12) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.b:()Z` @kind virtual;
  #L4bdb36.  v10:= temp;
  #L4bdb38.  if v10 == 0 then goto L4bdb3e;
  #L4bdb3c.  return @kind void;
  #L4bdb3e.  call `f`(v12, v9) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.f:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$a;)V` @kind virtual;
  #L4bdb44.  v4:= v4 + 1;
  #L4bdb48.  v5:= v5 + 1;
  #L4bdb4c.  if v5 != v8 then goto L4bdb82;
  #L4bdb50.  goto L4bdb80;
  #L4bdb52.  v10:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a.c` @type ^`boolean` @kind boolean;
  #L4bdb56.  v11:= v9.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a.d` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4bdb5a.  if v10 == 0 then goto L4bdb78;
  #L4bdb5e.  if v11 == 0 then goto L4bdb6e;
  #L4bdb62.  call temp:= `isEmpty`(v11) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4bdb68.  v10:= temp;
  #L4bdb6a.  if v10 == 0 then goto L4bdb78;
  #L4bdb6e.  call `f`(v12, v9) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.f:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$a;)V` @kind virtual;
  #L4bdb74.  v4:= v4 + 1;
  #L4bdb78.  v5:= v5 + 1;
  #L4bdb7c.  if v5 != v8 then goto L4bdb82;
  #L4bdb80.  v5:= 0I;
  #L4bdb82.  v6:= v6 + 1;
  #L4bdb86.  goto L4bdad8;
  #L4bdb88.  v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.m` @type ^`int` := v5;
  #L4bdb8c.  if v4 == 0 then goto L4bdba2;
  #L4bdb90.  v3:= v12.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.d` @type ^`int`;
  #L4bdb94.  if v3 == v2 then goto L4bd9fe;
  #L4bdb98.  call `h`(v12, v4) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.h:(I)V` @kind virtual;
  #L4bdb9e.  goto L4bd9fe;
  #L4bdba2.  v1:= -v1 @kind int;
  #L4bdba4.  call temp:= `addAndGet`(v12, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4bdbaa.  v1:= temp;
  #L4bdbac.  if v1 != 0 then goto L4bd9fe;
  #L4bdbb0.  return @kind void;
  catch `java.lang.Throwable` @[L4bda7e..L4bda92] goto L4bda8e;
  catch `java.lang.Throwable` @[L4bdaf6..L4bdafe] goto L4bdb18;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b` v6 @kind this, `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a` v7 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.f:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4bdd20.  v0:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4bdd24.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4bdd2a.  v0:= temp @kind object;
  #L4bdd2c.  v0:= (`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a`[]) v0 @kind object;
  #L4bdd30.  v1:= length @variable v0;
  #L4bdd32.  v2:= -1I;
  #L4bdd34.  v3:= 0I;
  #L4bdd36.  v4:= 0I;
  #L4bdd38.  if v4 >= v1 then goto L4bdd4e;
  #L4bdd3c.  v5:= v0[v4] @kind object;
  #L4bdd40.  if v5 != v7 then goto L4bdd48;
  #L4bdd44.  v2:= v4;
  #L4bdd46.  goto L4bdd4e;
  #L4bdd48.  v4:= v4 + 1;
  #L4bdd4c.  goto L4bdd38;
  #L4bdd4e.  if v2 >= 0 then goto L4bdd54;
  #L4bdd52.  return @kind void;
  #L4bdd54.  v4:= 1I;
  #L4bdd56.  if v1 != v4 then goto L4bdd60;
  #L4bdd5a.  v1:= `@@io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.p` @type ^`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a`[] @kind object;
  #L4bdd5e.  goto L4bdd7e;
  #L4bdd60.  v5:= v1 + -1;
  #L4bdd64.  v5:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a`[v5];
  #L4bdd68.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4bdd6e.  v3:= v2 + 1;
  #L4bdd72.  v1:= v1 - v2 @kind int;
  #L4bdd74.  v1:= v1 - v4 @kind int;
  #L4bdd76.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4bdd7c.  v1:= v5 @kind object;
  #L4bdd7e.  v2:= v6.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4bdd82.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4bdd88.  v0:= temp;
  #L4bdd8a.  if v0 == 0 then goto L4bdd20;
  #L4bdd8e.  return @kind void;
}
procedure `void` `g`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b` v5 @kind this, `io.reactivex.rxjava3.core.ObservableSource` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.g:(Lio/reactivex/rxjava3/core/ObservableSource;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4bdda0.  v0:= instanceof @variable v6 @type ^`io.reactivex.rxjava3.functions.Supplier` @kind boolean;
  #L4bdda4.  if v0 == 0 then goto L4bde04;
  #L4bdda8.  v6:= (`io.reactivex.rxjava3.functions.Supplier`) v6 @kind object;
  #L4bddac.  call temp:= `j`(v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.j:(Lio/reactivex/rxjava3/functions/Supplier;)Z` @kind virtual;
  #L4bddb2.  v6:= temp;
  #L4bddb4.  if v6 == 0 then goto L4bde2e;
  #L4bddb8.  v6:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.d` @type ^`int`;
  #L4bddbc.  v0:= 2147483647I;
  #L4bddc2.  if v6 == v0 then goto L4bde2e;
  #L4bddc6.  v6:= 0I;
  #L4bddc8.  @monitorenter v5
  #L4bddca.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.n` @type ^`java.util.Queue` @kind object;
  #L4bddce.  call temp:= `poll`(v0) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4bddd4.  v0:= temp @kind object;
  #L4bddd6.  v0:= (`io.reactivex.rxjava3.core.ObservableSource`) v0 @kind object;
  #L4bddda.  v1:= 1I;
  #L4bdddc.  if v0 != 0 then goto L4bddec;
  #L4bdde0.  v6:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.o` @type ^`int`;
  #L4bdde4.  v6:= v6 - v1 @kind int;
  #L4bdde6.  v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.o` @type ^`int` := v6;
  #L4bddea.  v6:= 1I;
  #L4bddec.  @monitorexit v5
  #L4bddee.  if v6 == 0 then goto L4bddfa;
  #L4bddf2.  call `d`(v5) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.d:()V` @kind virtual;
  #L4bddf8.  goto L4bde2e;
  #L4bddfa.  v6:= v0 @kind object;
  #L4bddfc.  goto L4bdda0;
  #L4bddfe.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bde00.  @monitorexit v5
  #L4bde02.  throw v6;
  #L4bde04.  v0:= new `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a`;
  #L4bde08.  v1:= v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.l` @type ^`long` @kind wide;
  #L4bde0c.  v3:= 1L;
  #L4bde10.  v3:= v3 + v1 @kind long;
  #L4bde12.  v5.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.l` @type ^`long` := v3 @kind wide;
  #L4bde16.  call `<init>`(v0, v5, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$a;.<init>:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;J)V` @kind direct;
  #L4bde1c.  call temp:= `a`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.a:(Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$a;)Z` @kind virtual;
  #L4bde22.  v1:= temp;
  #L4bde24.  if v1 == 0 then goto L4bde2e;
  #L4bde28.  call `subscribe`(v6, v0) @signature `Lio/reactivex/rxjava3/core/ObservableSource;.subscribe:(Lio/reactivex/rxjava3/core/Observer;)V` @kind interface;
  #L4bde2e.  return @kind void;
  catch `java.lang.Throwable` @[L4bddca..L4bddee] goto L4bddfe;
  catch `java.lang.Throwable` @[L4bde00..L4bde02] goto L4bddfe;
}
procedure `void` `h`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.h:(I)V` @AccessFlag  {
    temp;
    v0;

  #L4bde54.  v0:= v2 + -1;
  #L4bde58.  if v2 == 0 then goto L4bde94;
  #L4bde5c.  @monitorenter v1
  #L4bde5e.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.n` @type ^`java.util.Queue` @kind object;
  #L4bde62.  call temp:= `poll`(v2) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4bde68.  v2:= temp @kind object;
  #L4bde6a.  v2:= (`io.reactivex.rxjava3.core.ObservableSource`) v2 @kind object;
  #L4bde6e.  if v2 != 0 then goto L4bde82;
  #L4bde72.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.o` @type ^`int`;
  #L4bde76.  v2:= v2 + -1;
  #L4bde7a.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.o` @type ^`int` := v2;
  #L4bde7e.  @monitorexit v1
  #L4bde80.  goto L4bde8a;
  #L4bde82.  @monitorexit v1
  #L4bde84.  call `g`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.g:(Lio/reactivex/rxjava3/core/ObservableSource;)V` @kind virtual;
  #L4bde8a.  v2:= v0;
  #L4bde8c.  goto L4bde54;
  #L4bde8e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bde90.  @monitorexit v1
  #L4bde92.  throw v2;
  #L4bde94.  return @kind void;
  catch `java.lang.Throwable` @[L4bde5e..L4bde84] goto L4bde8e;
  catch `java.lang.Throwable` @[L4bde90..L4bde92] goto L4bde8e;
}
procedure `void` `i`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b` v2 @kind this, `java.lang.Object` v3 @kind object, `io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.i:(Ljava/lang/Object;Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4bdebc.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4bdec2.  v0:= temp;
  #L4bdec4.  if v0 != 0 then goto L4bdef0;
  #L4bdec8.  v0:= 0I;
  #L4bdeca.  v1:= 1I;
  #L4bdecc.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4bded2.  v0:= temp;
  #L4bded4.  if v0 == 0 then goto L4bdef0;
  #L4bded8.  v4:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4bdedc.  call `onNext`(v4, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4bdee2.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4bdee8.  v3:= temp;
  #L4bdeea.  if v3 != 0 then goto L4bdf1e;
  #L4bdeee.  return @kind void;
  #L4bdef0.  v0:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a.d` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4bdef4.  if v0 != 0 then goto L4bdf0a;
  #L4bdef8.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4bdefc.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.e` @type ^`int`;
  #L4bdf00.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4bdf06.  v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$a.d` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4bdf0a.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4bdf10.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4bdf16.  v3:= temp;
  #L4bdf18.  if v3 == 0 then goto L4bdf1e;
  #L4bdf1c.  return @kind void;
  #L4bdf1e.  call `e`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.e:()V` @kind virtual;
  #L4bdf24.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bd838.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.i` @type ^`boolean` @kind boolean;
  #L4bd83c.  return v0;
}
procedure `boolean` `j`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b` v4 @kind this, `io.reactivex.rxjava3.functions.Supplier` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.j:(Lio/reactivex/rxjava3/functions/Supplier;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4bd850.  v0:= 1I;
  #L4bd852.  call temp:= `get`(v5) @signature `Lio/reactivex/rxjava3/functions/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L4bd858.  v5:= temp @kind object;
  #L4bd85a.  if v5 != 0 then goto L4bd860;
  #L4bd85e.  return v0;
  #L4bd860.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4bd866.  v1:= temp;
  #L4bd868.  v2:= 0I;
  #L4bd86a.  if v1 != 0 then goto L4bd892;
  #L4bd86e.  call temp:= `compareAndSet`(v4, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4bd874.  v1:= temp;
  #L4bd876.  if v1 == 0 then goto L4bd892;
  #L4bd87a.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4bd87e.  call `onNext`(v1, v5) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4bd884.  call temp:= `decrementAndGet`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4bd88a.  v5:= temp;
  #L4bd88c.  if v5 != 0 then goto L4bd8de;
  #L4bd890.  return v0;
  #L4bd892.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4bd896.  if v1 != 0 then goto L4bd8ca;
  #L4bd89a.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.d` @type ^`int`;
  #L4bd89e.  v3:= 2147483647I;
  #L4bd8a4.  if v1 != v3 then goto L4bd8b8;
  #L4bd8a8.  v1:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4bd8ac.  v3:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.e` @type ^`int`;
  #L4bd8b0.  call `<init>`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4bd8b6.  goto L4bd8c6;
  #L4bd8b8.  v1:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L4bd8bc.  v3:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.d` @type ^`int`;
  #L4bd8c0.  call `<init>`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L4bd8c6.  v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.f` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v1 @kind object;
  #L4bd8ca.  call temp:= `offer`(v1, v5) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4bd8d0.  call temp:= `getAndIncrement`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4bd8d6.  v5:= temp;
  #L4bd8d8.  if v5 == 0 then goto L4bd8de;
  #L4bd8dc.  return v2;
  #L4bd8de.  call `e`(v4) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.e:()V` @kind virtual;
  #L4bd8e4.  return v0;
  #L4bd8e6.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bd8e8.  call `throwIfFatal`(v5) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4bd8ee.  v1:= v4.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bd8f2.  call temp:= `tryAddThrowableOrReport`(v1, v5) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4bd8f8.  call `d`(v4) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.d:()V` @kind virtual;
  #L4bd8fe.  return v0;
  catch `java.lang.Throwable` @[L4bd852..L4bd85a] goto L4bd8e6;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bdbdc.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.g` @type ^`boolean` @kind boolean;
  #L4bdbe0.  if v0 == 0 then goto L4bdbe6;
  #L4bdbe4.  return @kind void;
  #L4bdbe6.  v0:= 1I;
  #L4bdbe8.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.g` @type ^`boolean` := v0 @kind boolean;
  #L4bdbec.  call `d`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.d:()V` @kind virtual;
  #L4bdbf2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bdc04.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.g` @type ^`boolean` @kind boolean;
  #L4bdc08.  if v0 == 0 then goto L4bdc14;
  #L4bdc0c.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4bdc12.  return @kind void;
  #L4bdc14.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.h` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L4bdc18.  call temp:= `tryAddThrowableOrReport`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.tryAddThrowableOrReport:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4bdc1e.  v2:= temp;
  #L4bdc20.  if v2 == 0 then goto L4bdc30;
  #L4bdc24.  v2:= 1I;
  #L4bdc26.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.g` @type ^`boolean` := v2 @kind boolean;
  #L4bdc2a.  call `d`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.d:()V` @kind virtual;
  #L4bdc30.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4bdc44.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.g` @type ^`boolean` @kind boolean;
  #L4bdc48.  if v0 == 0 then goto L4bdc4e;
  #L4bdc4c.  return @kind void;
  #L4bdc4e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4bdc52.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4bdc58.  v3:= temp @kind object;
  #L4bdc5a.  v0:= "The mapper returned a null ObservableSource" @kind object;
  #L4bdc5e.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4bdc64.  v3:= (`io.reactivex.rxjava3.core.ObservableSource`) v3 @kind object;
  #L4bdc68.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.d` @type ^`int`;
  #L4bdc6c.  v1:= 2147483647I;
  #L4bdc72.  if v0 == v1 then goto L4bdca4;
  #L4bdc76.  @monitorenter v2
  #L4bdc78.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.o` @type ^`int`;
  #L4bdc7c.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.d` @type ^`int`;
  #L4bdc80.  if v0 != v1 then goto L4bdc92;
  #L4bdc84.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.n` @type ^`java.util.Queue` @kind object;
  #L4bdc88.  call temp:= `offer`(v0, v3) @signature `Ljava/util/Queue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4bdc8e.  @monitorexit v2
  #L4bdc90.  return @kind void;
  #L4bdc92.  v0:= v0 + 1;
  #L4bdc96.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.o` @type ^`int` := v0;
  #L4bdc9a.  @monitorexit v2
  #L4bdc9c.  goto L4bdca4;
  #L4bdc9e.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bdca0.  @monitorexit v2
  #L4bdca2.  throw v3;
  #L4bdca4.  call `g`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.g:(Lio/reactivex/rxjava3/core/ObservableSource;)V` @kind virtual;
  #L4bdcaa.  return @kind void;
  #L4bdcac.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4bdcae.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4bdcb4.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.k` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4bdcb8.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4bdcbe.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4bdcc4.  return @kind void;
  catch `java.lang.Throwable` @[L4bdc4e..L4bdc68] goto L4bdcac;
  catch `java.lang.Throwable` @[L4bdc78..L4bdca2] goto L4bdc9e;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap$b;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4bdcf0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.k` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4bdcf4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4bdcfa.  v0:= temp;
  #L4bdcfc.  if v0 == 0 then goto L4bdd0e;
  #L4bdd00.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.k` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4bdd04.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$b.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4bdd08.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4bdd0e.  return @kind void;
}
