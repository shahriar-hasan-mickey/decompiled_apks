record `io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.MaybeObserver` `io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.b` @AccessFlag ;
  `java.lang.Object` `io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.c` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a` v0 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSingleMaybe$a;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4c87b8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4c87be.  v0.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` := v1 @kind object;
  #L4c87c2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSingleMaybe$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c87d4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.b` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4c87d8.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4c87de.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSingleMaybe$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c8798.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.b` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4c879c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4c87a2.  v0:= temp;
  #L4c87a4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSingleMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c87f0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.d` @type ^`boolean` @kind boolean;
  #L4c87f4.  if v0 == 0 then goto L4c87fa;
  #L4c87f8.  return @kind void;
  #L4c87fa.  v0:= 1I;
  #L4c87fc.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4c8800.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.c` @type ^`java.lang.Object` @kind object;
  #L4c8804.  v1:= 0I;
  #L4c8806.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.c` @type ^`java.lang.Object` := v1 @kind object;
  #L4c880a.  if v0 != 0 then goto L4c881a;
  #L4c880e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4c8812.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L4c8818.  goto L4c8824;
  #L4c881a.  v1:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4c881e.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4c8824.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSingleMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c8838.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.d` @type ^`boolean` @kind boolean;
  #L4c883c.  if v0 == 0 then goto L4c8848;
  #L4c8840.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4c8846.  return @kind void;
  #L4c8848.  v0:= 1I;
  #L4c884a.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4c884e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4c8852.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c8858.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSingleMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4c886c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.d` @type ^`boolean` @kind boolean;
  #L4c8870.  if v0 == 0 then goto L4c8876;
  #L4c8874.  return @kind void;
  #L4c8876.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.c` @type ^`java.lang.Object` @kind object;
  #L4c887a.  if v0 == 0 then goto L4c88a8;
  #L4c887e.  v3:= 1I;
  #L4c8880.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.d` @type ^`boolean` := v3 @kind boolean;
  #L4c8884.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.b` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4c8888.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4c888e.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4c8892.  v0:= new `java.lang.IllegalArgumentException`;
  #L4c8896.  v1:= "Sequence contains more than one element!" @kind object;
  #L4c889a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4c88a0.  call `onError`(v3, v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4c88a6.  return @kind void;
  #L4c88a8.  v2.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.c` @type ^`java.lang.Object` := v3 @kind object;
  #L4c88ac.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/ObservableSingleMaybe$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4c88c0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.b` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L4c88c4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4c88ca.  v0:= temp;
  #L4c88cc.  if v0 == 0 then goto L4c88de;
  #L4c88d0.  v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.b` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L4c88d4.  v2:= v1.`io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4c88d8.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4c88de.  return @kind void;
}
