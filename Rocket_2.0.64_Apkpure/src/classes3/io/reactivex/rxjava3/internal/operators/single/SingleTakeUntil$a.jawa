record `io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.core.SingleObserver` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.SingleObserver` `io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$b` `io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$a.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$a` v0 @kind this, `io.reactivex.rxjava3.core.SingleObserver` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleTakeUntil$a;.<init>:(Lio/reactivex/rxjava3/core/SingleObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4d7968.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4d796e.  v0.`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` := v1 @kind object;
  #L4d7972.  v1:= new `io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$b`;
  #L4d7976.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleTakeUntil$b;.<init>:(Lio/reactivex/rxjava3/internal/operators/single/SingleTakeUntil$a;)V` @kind direct;
  #L4d797c.  v0.`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$a.b` @type ^`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$b` := v1 @kind object;
  #L4d7980.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleTakeUntil$a;.a:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4d7a60.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d7a66.  v0:= temp @kind object;
  #L4d7a68.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4d7a6c.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4d7a70.  if v0 == v1 then goto L4d7a9a;
  #L4d7a74.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4d7a7a.  v0:= temp @kind object;
  #L4d7a7c.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4d7a80.  if v0 == v1 then goto L4d7a9a;
  #L4d7a84.  if v0 == 0 then goto L4d7a8e;
  #L4d7a88.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4d7a8e.  v0:= v2.`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4d7a92.  call `onError`(v0, v3) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d7a98.  return @kind void;
  #L4d7a9a.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4d7aa0.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleTakeUntil$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d7994.  call temp:= `dispose`(v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4d799a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$a.b` @type ^`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$b` @kind object;
  #L4d799e.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleTakeUntil$b;.a:()V` @kind virtual;
  #L4d79a4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleTakeUntil$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4d7940.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d7946.  v0:= temp @kind object;
  #L4d7948.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4d794c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4d7952.  v0:= temp;
  #L4d7954.  return v0;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleTakeUntil$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d79b8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$a.b` @type ^`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$b` @kind object;
  #L4d79bc.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleTakeUntil$b;.a:()V` @kind virtual;
  #L4d79c2.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4d79c8.  v0:= temp @kind object;
  #L4d79ca.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4d79ce.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4d79d2.  if v0 == v1 then goto L4d79f2;
  #L4d79d6.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4d79dc.  v0:= temp @kind object;
  #L4d79de.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4d79e2.  if v0 == v1 then goto L4d79f2;
  #L4d79e6.  v0:= v2.`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4d79ea.  call `onError`(v0, v3) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4d79f0.  return @kind void;
  #L4d79f2.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4d79f8.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$a` v0 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleTakeUntil$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4d7a0c.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4d7a12.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleTakeUntil$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4d7a24.  v0:= v2.`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$a.b` @type ^`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$b` @kind object;
  #L4d7a28.  call `a`(v0) @signature `Lio/reactivex/rxjava3/internal/operators/single/SingleTakeUntil$b;.a:()V` @kind virtual;
  #L4d7a2e.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4d7a32.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4d7a38.  v1:= temp @kind object;
  #L4d7a3a.  v1:= (`io.reactivex.rxjava3.disposables.Disposable`) v1 @kind object;
  #L4d7a3e.  if v1 == v0 then goto L4d7a4c;
  #L4d7a42.  v0:= v2.`io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4d7a46.  call `onSuccess`(v0, v3) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4d7a4c.  return @kind void;
}
