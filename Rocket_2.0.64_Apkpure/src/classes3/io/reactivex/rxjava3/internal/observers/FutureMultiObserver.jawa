record `io.reactivex.rxjava3.internal.observers.FutureMultiObserver` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.CountDownLatch` @kind class, `io.reactivex.rxjava3.core.MaybeObserver` @kind interface, `io.reactivex.rxjava3.core.SingleObserver` @kind interface, `io.reactivex.rxjava3.core.CompletableObserver` @kind interface, `java.util.concurrent.Future` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `java.lang.Object` `io.reactivex.rxjava3.internal.observers.FutureMultiObserver.a` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.observers.FutureMultiObserver.b` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.observers.FutureMultiObserver.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.observers.FutureMultiObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/FutureMultiObserver;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L481b5c.  v0:= 1I;
  #L481b5e.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/CountDownLatch;.<init>:(I)V` @kind direct;
  #L481b64.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L481b68.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L481b6e.  v1.`io.reactivex.rxjava3.internal.observers.FutureMultiObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L481b72.  return @kind void;
}
procedure `boolean` `cancel`(`io.reactivex.rxjava3.internal.observers.FutureMultiObserver` v2 @kind this, `boolean` v3 ) @signature `Lio/reactivex/rxjava3/internal/observers/FutureMultiObserver;.cancel:(Z)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4819ac.  v3:= v2.`io.reactivex.rxjava3.internal.observers.FutureMultiObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4819b0.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4819b6.  v3:= temp @kind object;
  #L4819b8.  v3:= (`io.reactivex.rxjava3.disposables.Disposable`) v3 @kind object;
  #L4819bc.  if v3 == v2 then goto L4819ee;
  #L4819c0.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4819c4.  if v3 != v0 then goto L4819ca;
  #L4819c8.  goto L4819ee;
  #L4819ca.  v1:= v2.`io.reactivex.rxjava3.internal.observers.FutureMultiObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4819ce.  call temp:= `compareAndSet`(v1, v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4819d4.  v0:= temp;
  #L4819d6.  if v0 == 0 then goto L4819ac;
  #L4819da.  if v3 == 0 then goto L4819e4;
  #L4819de.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4819e4.  call `countDown`(v2) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L4819ea.  v3:= 1I;
  #L4819ec.  return v3;
  #L4819ee.  v3:= 0I;
  #L4819f0.  return v3;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.observers.FutureMultiObserver` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/FutureMultiObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L481b84.  return @kind void;
}
procedure `java.lang.Object` `get`(`io.reactivex.rxjava3.internal.observers.FutureMultiObserver` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/FutureMultiObserver;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L481a78.  call temp:= `getCount`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L481a7e.  v0:= temp @kind wide;
  #L481a80.  v2:= 0L;
  #L481a84.  v4:= lcmp(v0, v2);
  #L481a88.  if v4 == 0 then goto L481a98;
  #L481a8c.  call `verifyNonBlocking`() @signature `Lio/reactivex/rxjava3/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L481a92.  call `await`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.await:()V` @kind virtual;
  #L481a98.  call temp:= `isCancelled`(v5) @signature `Lio/reactivex/rxjava3/internal/observers/FutureMultiObserver;.isCancelled:()Z` @kind virtual;
  #L481a9e.  v0:= temp;
  #L481aa0.  if v0 != 0 then goto L481abe;
  #L481aa4.  v0:= v5.`io.reactivex.rxjava3.internal.observers.FutureMultiObserver.b` @type ^`java.lang.Throwable` @kind object;
  #L481aa8.  if v0 != 0 then goto L481ab2;
  #L481aac.  v0:= v5.`io.reactivex.rxjava3.internal.observers.FutureMultiObserver.a` @type ^`java.lang.Object` @kind object;
  #L481ab0.  return v0 @kind object;
  #L481ab2.  v1:= new `java.util.concurrent.ExecutionException`;
  #L481ab6.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/ExecutionException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L481abc.  throw v1;
  #L481abe.  v0:= new `java.util.concurrent.CancellationException`;
  #L481ac2.  call `<init>`(v0) @signature `Ljava/util/concurrent/CancellationException;.<init>:()V` @kind direct;
  #L481ac8.  throw v0;
}
procedure `java.lang.Object` `get`(`io.reactivex.rxjava3.internal.observers.FutureMultiObserver` v5 @kind this, `long` v6 , `java.util.concurrent.TimeUnit` v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/observers/FutureMultiObserver;.get:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L481adc.  call temp:= `getCount`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L481ae2.  v0:= temp @kind wide;
  #L481ae4.  v2:= 0L;
  #L481ae8.  v4:= lcmp(v0, v2);
  #L481aec.  if v4 == 0 then goto L481b18;
  #L481af0.  call `verifyNonBlocking`() @signature `Lio/reactivex/rxjava3/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L481af6.  call temp:= `await`(v5, v6, v8) @signature `Ljava/util/concurrent/CountDownLatch;.await:(JLjava/util/concurrent/TimeUnit;)Z` @kind virtual;
  #L481afc.  v0:= temp;
  #L481afe.  if v0 == 0 then goto L481b04;
  #L481b02.  goto L481b18;
  #L481b04.  v0:= new `java.util.concurrent.TimeoutException`;
  #L481b08.  call temp:= `timeoutMessage`(v6, v8) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.timeoutMessage:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/String;` @kind static;
  #L481b0e.  v6:= temp @kind object;
  #L481b10.  call `<init>`(v0, v6) @signature `Ljava/util/concurrent/TimeoutException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L481b16.  throw v0;
  #L481b18.  call temp:= `isCancelled`(v5) @signature `Lio/reactivex/rxjava3/internal/observers/FutureMultiObserver;.isCancelled:()Z` @kind virtual;
  #L481b1e.  v6:= temp;
  #L481b20.  if v6 != 0 then goto L481b3e;
  #L481b24.  v6:= v5.`io.reactivex.rxjava3.internal.observers.FutureMultiObserver.b` @type ^`java.lang.Throwable` @kind object;
  #L481b28.  if v6 != 0 then goto L481b32;
  #L481b2c.  v6:= v5.`io.reactivex.rxjava3.internal.observers.FutureMultiObserver.a` @type ^`java.lang.Object` @kind object;
  #L481b30.  return v6 @kind object;
  #L481b32.  v7:= new `java.util.concurrent.ExecutionException`;
  #L481b36.  call `<init>`(v7, v6) @signature `Ljava/util/concurrent/ExecutionException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L481b3c.  throw v7;
  #L481b3e.  v6:= new `java.util.concurrent.CancellationException`;
  #L481b42.  call `<init>`(v6) @signature `Ljava/util/concurrent/CancellationException;.<init>:()V` @kind direct;
  #L481b48.  throw v6;
}
procedure `boolean` `isCancelled`(`io.reactivex.rxjava3.internal.observers.FutureMultiObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/FutureMultiObserver;.isCancelled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L481a04.  v0:= v1.`io.reactivex.rxjava3.internal.observers.FutureMultiObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L481a08.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L481a0e.  v0:= temp @kind object;
  #L481a10.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L481a14.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L481a1a.  v0:= temp;
  #L481a1c.  return v0;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.observers.FutureMultiObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/FutureMultiObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L481a30.  call temp:= `isDone`(v1) @signature `Lio/reactivex/rxjava3/internal/observers/FutureMultiObserver;.isDone:()Z` @kind virtual;
  #L481a36.  v0:= temp;
  #L481a38.  return v0;
}
procedure `boolean` `isDone`(`io.reactivex.rxjava3.internal.observers.FutureMultiObserver` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/FutureMultiObserver;.isDone:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L481a4c.  call temp:= `getCount`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L481a52.  v0:= temp @kind wide;
  #L481a54.  v2:= 0L;
  #L481a58.  v4:= lcmp(v0, v2);
  #L481a5c.  if v4 != 0 then goto L481a64;
  #L481a60.  v0:= 1I;
  #L481a62.  goto L481a66;
  #L481a64.  v0:= 0I;
  #L481a66.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.observers.FutureMultiObserver` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/FutureMultiObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L481b98.  v0:= v2.`io.reactivex.rxjava3.internal.observers.FutureMultiObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L481b9c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L481ba2.  v0:= temp @kind object;
  #L481ba4.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L481ba8.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L481bac.  if v0 != v1 then goto L481bb2;
  #L481bb0.  return @kind void;
  #L481bb2.  v1:= v2.`io.reactivex.rxjava3.internal.observers.FutureMultiObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L481bb6.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L481bbc.  call `countDown`(v2) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L481bc2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.observers.FutureMultiObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/observers/FutureMultiObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L481bd4.  v0:= v2.`io.reactivex.rxjava3.internal.observers.FutureMultiObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L481bd8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L481bde.  v0:= temp @kind object;
  #L481be0.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L481be4.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L481be8.  if v0 != v1 then goto L481bf4;
  #L481bec.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L481bf2.  return @kind void;
  #L481bf4.  v2.`io.reactivex.rxjava3.internal.observers.FutureMultiObserver.b` @type ^`java.lang.Throwable` := v3 @kind object;
  #L481bf8.  v1:= v2.`io.reactivex.rxjava3.internal.observers.FutureMultiObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L481bfc.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L481c02.  v0:= temp;
  #L481c04.  if v0 == 0 then goto L481bd4;
  #L481c08.  call `countDown`(v2) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L481c0e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.observers.FutureMultiObserver` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/observers/FutureMultiObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L481c20.  v0:= v1.`io.reactivex.rxjava3.internal.observers.FutureMultiObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L481c24.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L481c2a.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.observers.FutureMultiObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/observers/FutureMultiObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L481c3c.  v0:= v2.`io.reactivex.rxjava3.internal.observers.FutureMultiObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L481c40.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L481c46.  v0:= temp @kind object;
  #L481c48.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L481c4c.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L481c50.  if v0 != v1 then goto L481c56;
  #L481c54.  return @kind void;
  #L481c56.  v2.`io.reactivex.rxjava3.internal.observers.FutureMultiObserver.a` @type ^`java.lang.Object` := v3 @kind object;
  #L481c5a.  v3:= v2.`io.reactivex.rxjava3.internal.observers.FutureMultiObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L481c5e.  call temp:= `compareAndSet`(v3, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L481c64.  call `countDown`(v2) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L481c6a.  return @kind void;
}
