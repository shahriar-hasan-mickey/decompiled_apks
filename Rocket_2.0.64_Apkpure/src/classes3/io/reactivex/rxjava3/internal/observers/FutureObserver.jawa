record `io.reactivex.rxjava3.internal.observers.FutureObserver` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.CountDownLatch` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `java.util.concurrent.Future` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `java.lang.Object` `io.reactivex.rxjava3.internal.observers.FutureObserver.a` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.observers.FutureObserver.b` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.observers.FutureObserver.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.observers.FutureObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/FutureObserver;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L481e2c.  v0:= 1I;
  #L481e2e.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/CountDownLatch;.<init>:(I)V` @kind direct;
  #L481e34.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L481e38.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L481e3e.  v1.`io.reactivex.rxjava3.internal.observers.FutureObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L481e42.  return @kind void;
}
procedure `boolean` `cancel`(`io.reactivex.rxjava3.internal.observers.FutureObserver` v2 @kind this, `boolean` v3 ) @signature `Lio/reactivex/rxjava3/internal/observers/FutureObserver;.cancel:(Z)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L481c7c.  v3:= v2.`io.reactivex.rxjava3.internal.observers.FutureObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L481c80.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L481c86.  v3:= temp @kind object;
  #L481c88.  v3:= (`io.reactivex.rxjava3.disposables.Disposable`) v3 @kind object;
  #L481c8c.  if v3 == v2 then goto L481cbe;
  #L481c90.  v0:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L481c94.  if v3 != v0 then goto L481c9a;
  #L481c98.  goto L481cbe;
  #L481c9a.  v1:= v2.`io.reactivex.rxjava3.internal.observers.FutureObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L481c9e.  call temp:= `compareAndSet`(v1, v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L481ca4.  v0:= temp;
  #L481ca6.  if v0 == 0 then goto L481c7c;
  #L481caa.  if v3 == 0 then goto L481cb4;
  #L481cae.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L481cb4.  call `countDown`(v2) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L481cba.  v3:= 1I;
  #L481cbc.  return v3;
  #L481cbe.  v3:= 0I;
  #L481cc0.  return v3;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.observers.FutureObserver` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/FutureObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L481e54.  return @kind void;
}
procedure `java.lang.Object` `get`(`io.reactivex.rxjava3.internal.observers.FutureObserver` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/FutureObserver;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L481d48.  call temp:= `getCount`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L481d4e.  v0:= temp @kind wide;
  #L481d50.  v2:= 0L;
  #L481d54.  v4:= lcmp(v0, v2);
  #L481d58.  if v4 == 0 then goto L481d68;
  #L481d5c.  call `verifyNonBlocking`() @signature `Lio/reactivex/rxjava3/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L481d62.  call `await`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.await:()V` @kind virtual;
  #L481d68.  call temp:= `isCancelled`(v5) @signature `Lio/reactivex/rxjava3/internal/observers/FutureObserver;.isCancelled:()Z` @kind virtual;
  #L481d6e.  v0:= temp;
  #L481d70.  if v0 != 0 then goto L481d8e;
  #L481d74.  v0:= v5.`io.reactivex.rxjava3.internal.observers.FutureObserver.b` @type ^`java.lang.Throwable` @kind object;
  #L481d78.  if v0 != 0 then goto L481d82;
  #L481d7c.  v0:= v5.`io.reactivex.rxjava3.internal.observers.FutureObserver.a` @type ^`java.lang.Object` @kind object;
  #L481d80.  return v0 @kind object;
  #L481d82.  v1:= new `java.util.concurrent.ExecutionException`;
  #L481d86.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/ExecutionException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L481d8c.  throw v1;
  #L481d8e.  v0:= new `java.util.concurrent.CancellationException`;
  #L481d92.  call `<init>`(v0) @signature `Ljava/util/concurrent/CancellationException;.<init>:()V` @kind direct;
  #L481d98.  throw v0;
}
procedure `java.lang.Object` `get`(`io.reactivex.rxjava3.internal.observers.FutureObserver` v5 @kind this, `long` v6 , `java.util.concurrent.TimeUnit` v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/observers/FutureObserver;.get:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L481dac.  call temp:= `getCount`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L481db2.  v0:= temp @kind wide;
  #L481db4.  v2:= 0L;
  #L481db8.  v4:= lcmp(v0, v2);
  #L481dbc.  if v4 == 0 then goto L481de8;
  #L481dc0.  call `verifyNonBlocking`() @signature `Lio/reactivex/rxjava3/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L481dc6.  call temp:= `await`(v5, v6, v8) @signature `Ljava/util/concurrent/CountDownLatch;.await:(JLjava/util/concurrent/TimeUnit;)Z` @kind virtual;
  #L481dcc.  v0:= temp;
  #L481dce.  if v0 == 0 then goto L481dd4;
  #L481dd2.  goto L481de8;
  #L481dd4.  v0:= new `java.util.concurrent.TimeoutException`;
  #L481dd8.  call temp:= `timeoutMessage`(v6, v8) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.timeoutMessage:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/String;` @kind static;
  #L481dde.  v6:= temp @kind object;
  #L481de0.  call `<init>`(v0, v6) @signature `Ljava/util/concurrent/TimeoutException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L481de6.  throw v0;
  #L481de8.  call temp:= `isCancelled`(v5) @signature `Lio/reactivex/rxjava3/internal/observers/FutureObserver;.isCancelled:()Z` @kind virtual;
  #L481dee.  v6:= temp;
  #L481df0.  if v6 != 0 then goto L481e0e;
  #L481df4.  v6:= v5.`io.reactivex.rxjava3.internal.observers.FutureObserver.b` @type ^`java.lang.Throwable` @kind object;
  #L481df8.  if v6 != 0 then goto L481e02;
  #L481dfc.  v6:= v5.`io.reactivex.rxjava3.internal.observers.FutureObserver.a` @type ^`java.lang.Object` @kind object;
  #L481e00.  return v6 @kind object;
  #L481e02.  v7:= new `java.util.concurrent.ExecutionException`;
  #L481e06.  call `<init>`(v7, v6) @signature `Ljava/util/concurrent/ExecutionException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L481e0c.  throw v7;
  #L481e0e.  v6:= new `java.util.concurrent.CancellationException`;
  #L481e12.  call `<init>`(v6) @signature `Ljava/util/concurrent/CancellationException;.<init>:()V` @kind direct;
  #L481e18.  throw v6;
}
procedure `boolean` `isCancelled`(`io.reactivex.rxjava3.internal.observers.FutureObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/FutureObserver;.isCancelled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L481cd4.  v0:= v1.`io.reactivex.rxjava3.internal.observers.FutureObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L481cd8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L481cde.  v0:= temp @kind object;
  #L481ce0.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L481ce4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L481cea.  v0:= temp;
  #L481cec.  return v0;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.observers.FutureObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/FutureObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L481d00.  call temp:= `isDone`(v1) @signature `Lio/reactivex/rxjava3/internal/observers/FutureObserver;.isDone:()Z` @kind virtual;
  #L481d06.  v0:= temp;
  #L481d08.  return v0;
}
procedure `boolean` `isDone`(`io.reactivex.rxjava3.internal.observers.FutureObserver` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/FutureObserver;.isDone:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L481d1c.  call temp:= `getCount`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L481d22.  v0:= temp @kind wide;
  #L481d24.  v2:= 0L;
  #L481d28.  v4:= lcmp(v0, v2);
  #L481d2c.  if v4 != 0 then goto L481d34;
  #L481d30.  v0:= 1I;
  #L481d32.  goto L481d36;
  #L481d34.  v0:= 0I;
  #L481d36.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.observers.FutureObserver` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/FutureObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L481e68.  v0:= v2.`io.reactivex.rxjava3.internal.observers.FutureObserver.a` @type ^`java.lang.Object` @kind object;
  #L481e6c.  if v0 != 0 then goto L481e86;
  #L481e70.  v0:= new `java.util.NoSuchElementException`;
  #L481e74.  v1:= "The source is empty" @kind object;
  #L481e78.  call `<init>`(v0, v1) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L481e7e.  call `onError`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/observers/FutureObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L481e84.  return @kind void;
  #L481e86.  v0:= v2.`io.reactivex.rxjava3.internal.observers.FutureObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L481e8a.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L481e90.  v0:= temp @kind object;
  #L481e92.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L481e96.  if v0 == v2 then goto L481eba;
  #L481e9a.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L481e9e.  if v0 != v1 then goto L481ea4;
  #L481ea2.  goto L481eba;
  #L481ea4.  v1:= v2.`io.reactivex.rxjava3.internal.observers.FutureObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L481ea8.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L481eae.  v0:= temp;
  #L481eb0.  if v0 == 0 then goto L481eba;
  #L481eb4.  call `countDown`(v2) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L481eba.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.observers.FutureObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/observers/FutureObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L481ecc.  v0:= v2.`io.reactivex.rxjava3.internal.observers.FutureObserver.b` @type ^`java.lang.Throwable` @kind object;
  #L481ed0.  if v0 != 0 then goto L481f0c;
  #L481ed4.  v0:= v2.`io.reactivex.rxjava3.internal.observers.FutureObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L481ed8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L481ede.  v0:= temp @kind object;
  #L481ee0.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L481ee4.  if v0 == v2 then goto L481f0c;
  #L481ee8.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L481eec.  if v0 == v1 then goto L481f0c;
  #L481ef0.  v1:= v2.`io.reactivex.rxjava3.internal.observers.FutureObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L481ef4.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L481efa.  v0:= temp;
  #L481efc.  if v0 == 0 then goto L481f0c;
  #L481f00.  v2.`io.reactivex.rxjava3.internal.observers.FutureObserver.b` @type ^`java.lang.Throwable` := v3 @kind object;
  #L481f04.  call `countDown`(v2) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L481f0a.  return @kind void;
  #L481f0c.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L481f12.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.observers.FutureObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/observers/FutureObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L481f24.  v0:= v1.`io.reactivex.rxjava3.internal.observers.FutureObserver.a` @type ^`java.lang.Object` @kind object;
  #L481f28.  if v0 == 0 then goto L481f58;
  #L481f2c.  v2:= v1.`io.reactivex.rxjava3.internal.observers.FutureObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L481f30.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L481f36.  v2:= temp @kind object;
  #L481f38.  v2:= (`io.reactivex.rxjava3.disposables.Disposable`) v2 @kind object;
  #L481f3c.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L481f42.  v2:= new `java.lang.IndexOutOfBoundsException`;
  #L481f46.  v0:= "More than one element received" @kind object;
  #L481f4a.  call `<init>`(v2, v0) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L481f50.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/observers/FutureObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L481f56.  return @kind void;
  #L481f58.  v1.`io.reactivex.rxjava3.internal.observers.FutureObserver.a` @type ^`java.lang.Object` := v2 @kind object;
  #L481f5c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.observers.FutureObserver` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/observers/FutureObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L481f70.  v0:= v1.`io.reactivex.rxjava3.internal.observers.FutureObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L481f74.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L481f7a.  return @kind void;
}
