record `io.reactivex.rxjava3.internal.observers.BlockingMultiObserver` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.CountDownLatch` @kind class, `io.reactivex.rxjava3.core.SingleObserver` @kind interface, `io.reactivex.rxjava3.core.CompletableObserver` @kind interface, `io.reactivex.rxjava3.core.MaybeObserver` @kind interface {
  `java.lang.Object` `io.reactivex.rxjava3.internal.observers.BlockingMultiObserver.a` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.observers.BlockingMultiObserver.b` @AccessFlag ;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.observers.BlockingMultiObserver.c` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.observers.BlockingMultiObserver.d` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.observers.BlockingMultiObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/BlockingMultiObserver;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L480de4.  v0:= 1I;
  #L480de6.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/CountDownLatch;.<init>:(I)V` @kind direct;
  #L480dec.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.observers.BlockingMultiObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/BlockingMultiObserver;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L480e9c.  v0:= 1I;
  #L480e9e.  v1.`io.reactivex.rxjava3.internal.observers.BlockingMultiObserver.d` @type ^`boolean` := v0 @kind boolean;
  #L480ea2.  v0:= v1.`io.reactivex.rxjava3.internal.observers.BlockingMultiObserver.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L480ea6.  if v0 == 0 then goto L480eb0;
  #L480eaa.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L480eb0.  return @kind void;
}
procedure `boolean` `blockingAwait`(`io.reactivex.rxjava3.internal.observers.BlockingMultiObserver` v5 @kind this, `long` v6 , `java.util.concurrent.TimeUnit` v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/observers/BlockingMultiObserver;.blockingAwait:(JLjava/util/concurrent/TimeUnit;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L480c8c.  call temp:= `getCount`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L480c92.  v0:= temp @kind wide;
  #L480c94.  v2:= 0L;
  #L480c98.  v4:= lcmp(v0, v2);
  #L480c9c.  if v4 == 0 then goto L480cce;
  #L480ca0.  call `verifyNonBlocking`() @signature `Lio/reactivex/rxjava3/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L480ca6.  call temp:= `await`(v5, v6, v8) @signature `Ljava/util/concurrent/CountDownLatch;.await:(JLjava/util/concurrent/TimeUnit;)Z` @kind virtual;
  #L480cac.  v6:= temp;
  #L480cae.  if v6 != 0 then goto L480cce;
  #L480cb2.  call `a`(v5) @signature `Lio/reactivex/rxjava3/internal/observers/BlockingMultiObserver;.a:()V` @kind virtual;
  #L480cb8.  v6:= 0I;
  #L480cba.  return v6;
  #L480cbc.  v6:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L480cbe.  call `a`(v5) @signature `Lio/reactivex/rxjava3/internal/observers/BlockingMultiObserver;.a:()V` @kind virtual;
  #L480cc4.  call temp:= `wrapOrThrow`(v6) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L480cca.  v6:= temp @kind object;
  #L480ccc.  throw v6;
  #L480cce.  v6:= v5.`io.reactivex.rxjava3.internal.observers.BlockingMultiObserver.b` @type ^`java.lang.Throwable` @kind object;
  #L480cd2.  if v6 != 0 then goto L480cda;
  #L480cd6.  v6:= 1I;
  #L480cd8.  return v6;
  #L480cda.  call temp:= `wrapOrThrow`(v6) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L480ce0.  v6:= temp @kind object;
  #L480ce2.  throw v6;
  catch `java.lang.InterruptedException` @[L480ca0..L480cb8] goto L480cbc;
}
procedure `void` `blockingConsume`(`io.reactivex.rxjava3.internal.observers.BlockingMultiObserver` v5 @kind this, `io.reactivex.rxjava3.functions.Consumer` v6 @kind object, `io.reactivex.rxjava3.functions.Consumer` v7 @kind object, `io.reactivex.rxjava3.functions.Action` v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/observers/BlockingMultiObserver;.blockingConsume:(Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L480e00.  call temp:= `getCount`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L480e06.  v0:= temp @kind wide;
  #L480e08.  v2:= 0L;
  #L480e0c.  v4:= lcmp(v0, v2);
  #L480e10.  if v4 == 0 then goto L480e32;
  #L480e14.  call `verifyNonBlocking`() @signature `Lio/reactivex/rxjava3/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L480e1a.  call `await`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.await:()V` @kind virtual;
  #L480e20.  goto L480e32;
  #L480e22.  v6:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L480e24.  call `a`(v5) @signature `Lio/reactivex/rxjava3/internal/observers/BlockingMultiObserver;.a:()V` @kind virtual;
  #L480e2a.  call `accept`(v7, v6) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L480e30.  return @kind void;
  #L480e32.  v0:= v5.`io.reactivex.rxjava3.internal.observers.BlockingMultiObserver.b` @type ^`java.lang.Throwable` @kind object;
  #L480e36.  if v0 == 0 then goto L480e42;
  #L480e3a.  call `accept`(v7, v0) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L480e40.  return @kind void;
  #L480e42.  v7:= v5.`io.reactivex.rxjava3.internal.observers.BlockingMultiObserver.a` @type ^`java.lang.Object` @kind object;
  #L480e46.  if v7 == 0 then goto L480e52;
  #L480e4a.  call `accept`(v6, v7) @signature `Lio/reactivex/rxjava3/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L480e50.  goto L480e68;
  #L480e52.  call `run`(v8) @signature `Lio/reactivex/rxjava3/functions/Action;.run:()V` @kind interface;
  #L480e58.  goto L480e68;
  #L480e5a.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L480e5c.  call `throwIfFatal`(v6) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L480e62.  call `onError`(v6) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L480e68.  return @kind void;
  catch `java.lang.Throwable` @[L480e00..L480e08] goto L480e5a;
  catch `java.lang.InterruptedException` @[L480e14..L480e20] goto L480e22;
  catch `java.lang.Throwable` @[L480e14..L480e20] goto L480e5a;
  catch `java.lang.Throwable` @[L480e24..L480e58] goto L480e5a;
}
procedure `java.lang.Object` `blockingGet`(`io.reactivex.rxjava3.internal.observers.BlockingMultiObserver` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/BlockingMultiObserver;.blockingGet:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L480d04.  call temp:= `getCount`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L480d0a.  v0:= temp @kind wide;
  #L480d0c.  v2:= 0L;
  #L480d10.  v4:= lcmp(v0, v2);
  #L480d14.  if v4 == 0 then goto L480d38;
  #L480d18.  call `verifyNonBlocking`() @signature `Lio/reactivex/rxjava3/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L480d1e.  call `await`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.await:()V` @kind virtual;
  #L480d24.  goto L480d38;
  #L480d26.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L480d28.  call `a`(v5) @signature `Lio/reactivex/rxjava3/internal/observers/BlockingMultiObserver;.a:()V` @kind virtual;
  #L480d2e.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L480d34.  v0:= temp @kind object;
  #L480d36.  throw v0;
  #L480d38.  v0:= v5.`io.reactivex.rxjava3.internal.observers.BlockingMultiObserver.b` @type ^`java.lang.Throwable` @kind object;
  #L480d3c.  if v0 != 0 then goto L480d46;
  #L480d40.  v0:= v5.`io.reactivex.rxjava3.internal.observers.BlockingMultiObserver.a` @type ^`java.lang.Object` @kind object;
  #L480d44.  return v0 @kind object;
  #L480d46.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L480d4c.  v0:= temp @kind object;
  #L480d4e.  throw v0;
  catch `java.lang.InterruptedException` @[L480d18..L480d24] goto L480d26;
}
procedure `java.lang.Object` `blockingGet`(`io.reactivex.rxjava3.internal.observers.BlockingMultiObserver` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/rxjava3/internal/observers/BlockingMultiObserver;.blockingGet:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L480d70.  call temp:= `getCount`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L480d76.  v0:= temp @kind wide;
  #L480d78.  v2:= 0L;
  #L480d7c.  v4:= lcmp(v0, v2);
  #L480d80.  if v4 == 0 then goto L480da4;
  #L480d84.  call `verifyNonBlocking`() @signature `Lio/reactivex/rxjava3/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L480d8a.  call `await`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.await:()V` @kind virtual;
  #L480d90.  goto L480da4;
  #L480d92.  v6:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L480d94.  call `a`(v5) @signature `Lio/reactivex/rxjava3/internal/observers/BlockingMultiObserver;.a:()V` @kind virtual;
  #L480d9a.  call temp:= `wrapOrThrow`(v6) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L480da0.  v6:= temp @kind object;
  #L480da2.  throw v6;
  #L480da4.  v0:= v5.`io.reactivex.rxjava3.internal.observers.BlockingMultiObserver.b` @type ^`java.lang.Throwable` @kind object;
  #L480da8.  if v0 != 0 then goto L480db8;
  #L480dac.  v0:= v5.`io.reactivex.rxjava3.internal.observers.BlockingMultiObserver.a` @type ^`java.lang.Object` @kind object;
  #L480db0.  if v0 == 0 then goto L480db6;
  #L480db4.  v6:= v0 @kind object;
  #L480db6.  return v6 @kind object;
  #L480db8.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L480dbe.  v6:= temp @kind object;
  #L480dc0.  throw v6;
  catch `java.lang.InterruptedException` @[L480d84..L480d90] goto L480d92;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.observers.BlockingMultiObserver` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/BlockingMultiObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L480ec4.  call `countDown`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L480eca.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.observers.BlockingMultiObserver` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/observers/BlockingMultiObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L480edc.  v0.`io.reactivex.rxjava3.internal.observers.BlockingMultiObserver.b` @type ^`java.lang.Throwable` := v1 @kind object;
  #L480ee0.  call `countDown`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L480ee6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.observers.BlockingMultiObserver` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/observers/BlockingMultiObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L480ef8.  v1.`io.reactivex.rxjava3.internal.observers.BlockingMultiObserver.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L480efc.  v0:= v1.`io.reactivex.rxjava3.internal.observers.BlockingMultiObserver.d` @type ^`boolean` @kind boolean;
  #L480f00.  if v0 == 0 then goto L480f0a;
  #L480f04.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L480f0a.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.observers.BlockingMultiObserver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/observers/BlockingMultiObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L480f1c.  v0.`io.reactivex.rxjava3.internal.observers.BlockingMultiObserver.a` @type ^`java.lang.Object` := v1 @kind object;
  #L480f20.  call `countDown`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L480f26.  return @kind void;
}
