record `io.reactivex.rxjava3.internal.observers.QueueDrainObserver` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.reactivex.rxjava3.internal.observers.b` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.internal.util.ObservableQueueDrain` @kind interface {
  `boolean` `io.reactivex.rxjava3.internal.observers.QueueDrainObserver.cancelled` @AccessFlag PROTECTED_VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.observers.QueueDrainObserver.done` @AccessFlag PROTECTED_VOLATILE;
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.observers.QueueDrainObserver.downstream` @AccessFlag PROTECTED_FINAL;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.observers.QueueDrainObserver.error` @AccessFlag PROTECTED;
  `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` `io.reactivex.rxjava3.internal.observers.QueueDrainObserver.queue` @AccessFlag PROTECTED_FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.observers.QueueDrainObserver` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L482394.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/observers/b;.<init>:()V` @kind direct;
  #L48239a.  v0.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L48239e.  v0.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` := v2 @kind object;
  #L4823a2.  return @kind void;
}
procedure `void` `accept`(`io.reactivex.rxjava3.internal.observers.QueueDrainObserver` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.accept:(Lio/reactivex/rxjava3/core/Observer;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L4823b4.  return @kind void;
}
procedure `boolean` `cancelled`(`io.reactivex.rxjava3.internal.observers.QueueDrainObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.cancelled:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L482304.  v0:= v1.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L482308.  return v0;
}
procedure `boolean` `done`(`io.reactivex.rxjava3.internal.observers.QueueDrainObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.done:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48231c.  v0:= v1.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.done` @type ^`boolean` @kind boolean;
  #L482320.  return v0;
}
procedure `boolean` `enter`(`io.reactivex.rxjava3.internal.observers.QueueDrainObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.enter:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L482334.  v0:= v1.`io.reactivex.rxjava3.internal.observers.c.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L482338.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L48233e.  v0:= temp;
  #L482340.  if v0 != 0 then goto L482348;
  #L482344.  v0:= 1I;
  #L482346.  goto L48234a;
  #L482348.  v0:= 0I;
  #L48234a.  return v0;
}
procedure `java.lang.Throwable` `error`(`io.reactivex.rxjava3.internal.observers.QueueDrainObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.error:()Ljava/lang/Throwable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48237c.  v0:= v1.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L482380.  return v0 @kind object;
}
procedure `void` `fastPathEmit`(`io.reactivex.rxjava3.internal.observers.QueueDrainObserver` v5 @kind this, `java.lang.Object` v6 @kind object, `boolean` v7 , `io.reactivex.rxjava3.disposables.Disposable` v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.fastPathEmit:(Ljava/lang/Object;ZLio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4823c8.  v0:= v5.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4823cc.  v1:= v5.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L4823d0.  v2:= v5.`io.reactivex.rxjava3.internal.observers.c.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4823d4.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4823da.  v2:= temp;
  #L4823dc.  if v2 != 0 then goto L48240a;
  #L4823e0.  v2:= v5.`io.reactivex.rxjava3.internal.observers.c.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4823e4.  v3:= 0I;
  #L4823e6.  v4:= 1I;
  #L4823e8.  call temp:= `compareAndSet`(v2, v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4823ee.  v2:= temp;
  #L4823f0.  if v2 == 0 then goto L48240a;
  #L4823f4.  call `accept`(v5, v0, v6) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.accept:(Lio/reactivex/rxjava3/core/Observer;Ljava/lang/Object;)V` @kind virtual;
  #L4823fa.  v6:= -1I;
  #L4823fc.  call temp:= `leave`(v5, v6) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.leave:(I)I` @kind virtual;
  #L482402.  v6:= temp;
  #L482404.  if v6 != 0 then goto L48241e;
  #L482408.  return @kind void;
  #L48240a.  call temp:= `offer`(v1, v6) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L482410.  call temp:= `enter`(v5) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L482416.  v6:= temp;
  #L482418.  if v6 != 0 then goto L48241e;
  #L48241c.  return @kind void;
  #L48241e.  call `drainLoop`(v1, v0, v7, v8, v5) @signature `Lio/reactivex/rxjava3/internal/util/QueueDrainHelper;.drainLoop:(Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;Lio/reactivex/rxjava3/core/Observer;ZLio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/internal/util/ObservableQueueDrain;)V` @kind static;
  #L482424.  return @kind void;
}
procedure `void` `fastPathOrderedEmit`(`io.reactivex.rxjava3.internal.observers.QueueDrainObserver` v5 @kind this, `java.lang.Object` v6 @kind object, `boolean` v7 , `io.reactivex.rxjava3.disposables.Disposable` v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.fastPathOrderedEmit:(Ljava/lang/Object;ZLio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L482438.  v0:= v5.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L48243c.  v1:= v5.`io.reactivex.rxjava3.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue` @kind object;
  #L482440.  v2:= v5.`io.reactivex.rxjava3.internal.observers.c.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L482444.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L48244a.  v2:= temp;
  #L48244c.  if v2 != 0 then goto L48248e;
  #L482450.  v2:= v5.`io.reactivex.rxjava3.internal.observers.c.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L482454.  v3:= 0I;
  #L482456.  v4:= 1I;
  #L482458.  call temp:= `compareAndSet`(v2, v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L48245e.  v2:= temp;
  #L482460.  if v2 == 0 then goto L48248e;
  #L482464.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L48246a.  v2:= temp;
  #L48246c.  if v2 == 0 then goto L482486;
  #L482470.  call `accept`(v5, v0, v6) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.accept:(Lio/reactivex/rxjava3/core/Observer;Ljava/lang/Object;)V` @kind virtual;
  #L482476.  v6:= -1I;
  #L482478.  call temp:= `leave`(v5, v6) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.leave:(I)I` @kind virtual;
  #L48247e.  v6:= temp;
  #L482480.  if v6 != 0 then goto L4824a2;
  #L482484.  return @kind void;
  #L482486.  call temp:= `offer`(v1, v6) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L48248c.  goto L4824a2;
  #L48248e.  call temp:= `offer`(v1, v6) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L482494.  call temp:= `enter`(v5) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L48249a.  v6:= temp;
  #L48249c.  if v6 != 0 then goto L4824a2;
  #L4824a0.  return @kind void;
  #L4824a2.  call `drainLoop`(v1, v0, v7, v8, v5) @signature `Lio/reactivex/rxjava3/internal/util/QueueDrainHelper;.drainLoop:(Lio/reactivex/rxjava3/internal/fuseable/SimplePlainQueue;Lio/reactivex/rxjava3/core/Observer;ZLio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/internal/util/ObservableQueueDrain;)V` @kind static;
  #L4824a8.  return @kind void;
}
procedure `int` `leave`(`io.reactivex.rxjava3.internal.observers.QueueDrainObserver` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/observers/QueueDrainObserver;.leave:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48235c.  v0:= v1.`io.reactivex.rxjava3.internal.observers.c.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L482360.  call temp:= `addAndGet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L482366.  v2:= temp;
  #L482368.  return v2;
}
