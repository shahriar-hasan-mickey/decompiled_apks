record `io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription` @kind class {
  `io.reactivex.rxjava3.internal.jdk8.ParallelCollector$a`[] `io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b.d` @AccessFlag FINAL;
  `java.util.function.Function` `io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b.e` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b` v5 @kind this, `org.reactivestreams.Subscriber` v6 @kind object, `int` v7 , `java.util.stream.Collector` v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelCollector$b;.<init>:(Lorg/reactivestreams/Subscriber;ILjava/util/stream/Collector;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L47f43c.  call `<init>`(v5, v6) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L47f442.  v6:= new `java.util.concurrent.atomic.AtomicReference`;
  #L47f446.  call `<init>`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L47f44c.  v5.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v6 @kind object;
  #L47f450.  v6:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L47f454.  call `<init>`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L47f45a.  v5.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b.c` @type ^`java.util.concurrent.atomic.AtomicInteger` := v6 @kind object;
  #L47f45e.  v6:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L47f462.  call `<init>`(v6) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L47f468.  v5.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v6 @kind object;
  #L47f46c.  call temp:= `finisher`(v8) @signature `Ljava/util/stream/Collector;.finisher:()Ljava/util/function/Function;` @kind interface;
  #L47f472.  v6:= temp @kind object;
  #L47f474.  v5.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b.e` @type ^`java.util.function.Function` := v6 @kind object;
  #L47f478.  v6:= new `io.reactivex.rxjava3.internal.jdk8.ParallelCollector$a`[v7];
  #L47f47c.  v0:= 0I;
  #L47f47e.  if v0 >= v7 then goto L47f4b6;
  #L47f482.  v1:= new `io.reactivex.rxjava3.internal.jdk8.ParallelCollector$a`;
  #L47f486.  call temp:= `supplier`(v8) @signature `Ljava/util/stream/Collector;.supplier:()Ljava/util/function/Supplier;` @kind interface;
  #L47f48c.  v2:= temp @kind object;
  #L47f48e.  call temp:= `get`(v2) @signature `Ljava/util/function/Supplier;.get:()Ljava/lang/Object;` @kind interface;
  #L47f494.  v2:= temp @kind object;
  #L47f496.  call temp:= `accumulator`(v8) @signature `Ljava/util/stream/Collector;.accumulator:()Ljava/util/function/BiConsumer;` @kind interface;
  #L47f49c.  v3:= temp @kind object;
  #L47f49e.  call temp:= `combiner`(v8) @signature `Ljava/util/stream/Collector;.combiner:()Ljava/util/function/BinaryOperator;` @kind interface;
  #L47f4a4.  v4:= temp @kind object;
  #L47f4a6.  call `<init>`(v1, v5, v2, v3, v4) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelCollector$a;.<init>:(Lio/reactivex/rxjava3/internal/jdk8/ParallelCollector$b;Ljava/lang/Object;Ljava/util/function/BiConsumer;Ljava/util/function/BinaryOperator;)V` @kind direct;
  #L47f4ac.  v6[v0]:= v1 @kind object;
  #L47f4b0.  v0:= v0 + 1;
  #L47f4b4.  goto L47f47e;
  #L47f4b6.  v5.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b.a` @type ^`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$a`[] := v6 @kind object;
  #L47f4ba.  v6:= v5.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L47f4be.  call `lazySet`(v6, v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L47f4c4.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelCollector$b;.a:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L47f5bc.  v0:= v2.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L47f5c0.  v1:= 0I;
  #L47f5c2.  call temp:= `compareAndSet`(v0, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L47f5c8.  v0:= temp;
  #L47f5ca.  if v0 == 0 then goto L47f5e0;
  #L47f5ce.  call `cancel`(v2) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelCollector$b;.cancel:()V` @kind virtual;
  #L47f5d4.  v0:= v2.`io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L47f5d8.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47f5de.  goto L47f5f6;
  #L47f5e0.  v0:= v2.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b.d` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L47f5e4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L47f5ea.  v0:= temp @kind object;
  #L47f5ec.  if v3 == v0 then goto L47f5f6;
  #L47f5f0.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L47f5f6.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelCollector$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L47f4d8.  v0:= v4.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b.a` @type ^`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$a`[] @kind object;
  #L47f4dc.  v1:= length @variable v0;
  #L47f4de.  v2:= 0I;
  #L47f4e0.  if v2 >= v1 then goto L47f4f4;
  #L47f4e4.  v3:= v0[v2] @kind object;
  #L47f4e8.  call `a`(v3) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelCollector$a;.a:()V` @kind virtual;
  #L47f4ee.  v2:= v2 + 1;
  #L47f4f2.  goto L47f4e0;
  #L47f4f4.  return @kind void;
}
procedure `io.reactivex.rxjava3.internal.jdk8.ParallelCollector$c` `e`(`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelCollector$b;.e:(Ljava/lang/Object;)Lio/reactivex/rxjava3/internal/jdk8/ParallelCollector$c;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L47f3b8.  v0:= v3.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L47f3bc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L47f3c2.  v0:= temp @kind object;
  #L47f3c4.  v0:= (`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$c`) v0 @kind object;
  #L47f3c8.  v1:= 0I;
  #L47f3ca.  if v0 != 0 then goto L47f3ea;
  #L47f3ce.  v0:= new `io.reactivex.rxjava3.internal.jdk8.ParallelCollector$c`;
  #L47f3d2.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelCollector$c;.<init>:()V` @kind direct;
  #L47f3d8.  v2:= v3.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L47f3dc.  call temp:= `compareAndSet`(v2, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L47f3e2.  v2:= temp;
  #L47f3e4.  if v2 != 0 then goto L47f3ea;
  #L47f3e8.  goto L47f3b8;
  #L47f3ea.  call temp:= `b`(v0) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelCollector$c;.b:()I` @kind virtual;
  #L47f3f0.  v2:= temp;
  #L47f3f2.  if v2 >= 0 then goto L47f402;
  #L47f3f6.  v2:= v3.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L47f3fa.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L47f400.  goto L47f3b8;
  #L47f402.  if v2 != 0 then goto L47f40c;
  #L47f406.  v0.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$c.a` @type ^`java.lang.Object` := v4 @kind object;
  #L47f40a.  goto L47f410;
  #L47f40c.  v0.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$c.b` @type ^`java.lang.Object` := v4 @kind object;
  #L47f410.  call temp:= `a`(v0) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelCollector$c;.a:()Z` @kind virtual;
  #L47f416.  v4:= temp;
  #L47f418.  if v4 == 0 then goto L47f428;
  #L47f41c.  v4:= v3.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L47f420.  call temp:= `compareAndSet`(v4, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L47f426.  return v0 @kind object;
  #L47f428.  return v1 @kind object;
}
procedure `void` `f`(`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b` v1 @kind this, `java.lang.Object` v2 @kind object, `java.util.function.BinaryOperator` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelCollector$b;.f:(Ljava/lang/Object;Ljava/util/function/BinaryOperator;)V` @AccessFlag  {
    temp;
    v0;

  #L47f508.  call temp:= `e`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelCollector$b;.e:(Ljava/lang/Object;)Lio/reactivex/rxjava3/internal/jdk8/ParallelCollector$c;` @kind virtual;
  #L47f50e.  v2:= temp @kind object;
  #L47f510.  if v2 == 0 then goto L47f536;
  #L47f514.  v0:= v2.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$c.a` @type ^`java.lang.Object` @kind object;
  #L47f518.  v2:= v2.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$c.b` @type ^`java.lang.Object` @kind object;
  #L47f51c.  call temp:= `apply`(v3, v0, v2) @signature `Ljava/util/function/BinaryOperator;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L47f522.  v2:= temp @kind object;
  #L47f524.  goto L47f508;
  #L47f526.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47f528.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47f52e.  call `a`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelCollector$b;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L47f534.  return @kind void;
  #L47f536.  v2:= v1.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L47f53a.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L47f540.  v2:= temp;
  #L47f542.  if v2 != 0 then goto L47f592;
  #L47f546.  v2:= v1.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L47f54a.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L47f550.  v2:= temp @kind object;
  #L47f552.  v2:= (`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$c`) v2 @kind object;
  #L47f556.  v3:= v1.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L47f55a.  v0:= 0I;
  #L47f55c.  call `lazySet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L47f562.  v3:= v1.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$b.e` @type ^`java.util.function.Function` @kind object;
  #L47f566.  v2:= v2.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$c.a` @type ^`java.lang.Object` @kind object;
  #L47f56a.  call temp:= `apply`(v3, v2) @signature `Ljava/util/function/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L47f570.  v2:= temp @kind object;
  #L47f572.  v3:= "The finisher returned a null value" @kind object;
  #L47f576.  call temp:= `requireNonNull`(v2, v3) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L47f57c.  call `complete`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L47f582.  goto L47f592;
  #L47f584.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47f586.  call `throwIfFatal`(v2) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47f58c.  call `a`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelCollector$b;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L47f592.  return @kind void;
  catch `java.lang.Throwable` @[L47f514..L47f524] goto L47f526;
  catch `java.lang.Throwable` @[L47f562..L47f57c] goto L47f584;
}
