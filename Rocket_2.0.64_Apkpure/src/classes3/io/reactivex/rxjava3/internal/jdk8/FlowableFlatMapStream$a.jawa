record `io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.d` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` `io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.e` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.f` @AccessFlag ;
  `java.util.Iterator` `io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.g` @AccessFlag ;
  `java.lang.AutoCloseable` `io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.h` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.i` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.j` @AccessFlag VOLATILE;
  `io.reactivex.rxjava3.internal.util.AtomicThrowable` `io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.k` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.l` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.m` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.n` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L47c774.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L47c77a.  v0.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L47c77e.  v0.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L47c782.  v0.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.c` @type ^`int` := v3;
  #L47c786.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L47c78a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L47c790.  v0.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L47c794.  v1:= new `io.reactivex.rxjava3.internal.util.AtomicThrowable`;
  #L47c798.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L47c79e.  v0.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` := v1 @kind object;
  #L47c7a2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L47c7dc.  v0:= 0I;
  #L47c7de.  v2.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.g` @type ^`java.util.Iterator` := v0 @kind object;
  #L47c7e2.  v1:= v2.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.h` @type ^`java.lang.AutoCloseable` @kind object;
  #L47c7e6.  v2.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.h` @type ^`java.lang.AutoCloseable` := v0 @kind object;
  #L47c7ea.  if v1 == 0 then goto L47c7f4;
  #L47c7ee.  call `close`(v1) @signature `Ljava/lang/AutoCloseable;.close:()V` @kind interface;
  #L47c7f4.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L47c808.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.a:()V` @kind virtual;
  #L47c80e.  goto L47c81e;
  #L47c810.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47c812.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47c818.  call `onError`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L47c81e.  return @kind void;
  catch `java.lang.Throwable` @[L47c808..L47c80e] goto L47c810;
}
procedure `void` `c`(`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a` v17 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L47c83c.  v1:= v17 @kind object;
  #L47c840.  call temp:= `getAndIncrement`(v17) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L47c846.  v0:= temp;
  #L47c848.  if v0 == 0 then goto L47c84e;
  #L47c84c.  return @kind void;
  #L47c84e.  v2:= v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L47c852.  v3:= v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L47c856.  v4:= v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L47c85a.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.g` @type ^`java.util.Iterator` @kind object;
  #L47c85e.  v5:= v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L47c862.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L47c868.  v5:= temp @kind wide;
  #L47c86a.  v7:= v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.l` @type ^`long` @kind wide;
  #L47c86e.  v9:= v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.c` @type ^`int`;
  #L47c872.  v10:= v9 ^> 2;
  #L47c876.  v9:= v9 - v10 @kind int;
  #L47c878.  v10:= v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.n` @type ^`int`;
  #L47c87c.  v11:= 0I;
  #L47c87e.  v12:= 1I;
  #L47c880.  if v10 == v12 then goto L47c888;
  #L47c884.  v10:= 1I;
  #L47c886.  goto L47c88a;
  #L47c888.  v10:= 0I;
  #L47c88a.  v13:= v7 @kind wide;
  #L47c88c.  v8:= 1I;
  #L47c88e.  v6:= v5 @kind wide;
  #L47c890.  v5:= v0 @kind object;
  #L47c892.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.i` @type ^`boolean` @kind boolean;
  #L47c896.  if v0 == 0 then goto L47c8aa;
  #L47c89a.  call `clear`(v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L47c8a0.  call `b`(v17) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.b:()V` @kind virtual;
  #L47c8a6.  goto L47ca00;
  #L47c8aa.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.j` @type ^`boolean` @kind boolean;
  #L47c8ae.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L47c8b4.  v15:= temp @kind object;
  #L47c8b6.  if v15 == 0 then goto L47c8d4;
  #L47c8ba.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L47c8c0.  v0:= temp @kind object;
  #L47c8c2.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L47c8c6.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47c8cc.  v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.i` @type ^`boolean` := v12 @kind boolean;
  #L47c8d0.  goto L47c9f8;
  #L47c8d4.  if v5 != 0 then goto L47c986;
  #L47c8d8.  call temp:= `poll`(v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L47c8de.  v15:= temp @kind object;
  #L47c8e0.  if v15 != 0 then goto L47c8ea;
  #L47c8e4.  v16:= 1I;
  #L47c8e8.  goto L47c8ee;
  #L47c8ea.  v16:= 0I;
  #L47c8ee.  if v0 == 0 then goto L47c902;
  #L47c8f2.  if v16 == 0 then goto L47c902;
  #L47c8f6.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L47c8fc.  v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.i` @type ^`boolean` := v12 @kind boolean;
  #L47c900.  goto L47c986;
  #L47c902.  if v16 != 0 then goto L47c986;
  #L47c906.  if v10 == 0 then goto L47c928;
  #L47c90a.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.m` @type ^`int`;
  #L47c90e.  v0:= v0 + v12 @kind int;
  #L47c910.  v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.m` @type ^`int` := v0;
  #L47c914.  if v0 != v9 then goto L47c928;
  #L47c918.  v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.m` @type ^`int` := v11;
  #L47c91c.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47c920.  v11:= (`long`) v9 @kind i2l;
  #L47c922.  call `request`(v0, v11) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L47c928.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L47c92c.  call temp:= `apply`(v0, v15) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L47c932.  v0:= temp @kind object;
  #L47c934.  v11:= "The mapper returned a null Stream" @kind object;
  #L47c938.  call temp:= `requireNonNull`(v0, v11) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L47c93e.  v0:= (`java.util.stream.Stream`) v0 @kind object;
  #L47c942.  call temp:= `iterator`(v0) @signature `Ljava/util/stream/Stream;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L47c948.  v5:= temp @kind object;
  #L47c94a.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L47c950.  v11:= temp;
  #L47c952.  if v11 == 0 then goto L47c960;
  #L47c956.  v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.g` @type ^`java.util.Iterator` := v5 @kind object;
  #L47c95a.  v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.h` @type ^`java.lang.AutoCloseable` := v0 @kind object;
  #L47c95e.  goto L47c9f8;
  #L47c960.  v5:= 0I;
  #L47c962.  goto L47c9f8;
  #L47c964.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47c966.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47c96c.  call `d`(v1, v2, v0) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.d:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V` @kind virtual;
  #L47c972.  goto L47c9f8;
  #L47c974.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47c976.  v11:= v0 @kind object;
  #L47c978.  call `throwIfFatal`(v11) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47c97e.  call `d`(v1, v2, v11) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.d:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V` @kind virtual;
  #L47c984.  goto L47c9f8;
  #L47c986.  if v5 == 0 then goto L47ca00;
  #L47c98a.  v0:= lcmp(v13, v6);
  #L47c98e.  if v0 == 0 then goto L47ca00;
  #L47c992.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L47c998.  v0:= temp @kind object;
  #L47c99a.  v11:= "The Stream.Iterator returned a null value" @kind object;
  #L47c99e.  call temp:= `requireNonNull`(v0, v11) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L47c9a4.  v11:= v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.i` @type ^`boolean` @kind boolean;
  #L47c9a8.  if v11 != 0 then goto L47c9f8;
  #L47c9ac.  call `onNext`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L47c9b2.  v11:= 1L;
  #L47c9b6.  v13:= v13 + v11 @kind long;
  #L47c9b8.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.i` @type ^`boolean` @kind boolean;
  #L47c9bc.  if v0 != 0 then goto L47c9f8;
  #L47c9c0.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L47c9c6.  v0:= temp;
  #L47c9c8.  if v0 != 0 then goto L47c9f8;
  #L47c9cc.  call `a`(v17) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.a:()V` @kind virtual;
  #L47c9d2.  goto L47c960;
  #L47c9d4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47c9d6.  v5:= 0I;
  #L47c9d8.  goto L47c9dc;
  #L47c9da.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47c9dc.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47c9e2.  call `d`(v1, v2, v0) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.d:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V` @kind virtual;
  #L47c9e8.  goto L47c9f8;
  #L47c9ea.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47c9ec.  call `throwIfFatal`(v0) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47c9f2.  call `d`(v1, v2, v0) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.d:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V` @kind virtual;
  #L47c9f8.  v11:= 0I;
  #L47c9fa.  v12:= 1I;
  #L47c9fc.  goto L47c892;
  #L47ca00.  v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.l` @type ^`long` := v13 @kind wide;
  #L47ca04.  v0:= -v8 @kind int;
  #L47ca06.  call temp:= `addAndGet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L47ca0c.  v8:= temp;
  #L47ca0e.  if v8 != 0 then goto L47ca14;
  #L47ca12.  return @kind void;
  #L47ca14.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L47ca18.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L47ca1e.  v6:= temp @kind wide;
  #L47ca20.  goto L47c9f8;
  catch `java.lang.Throwable` @[L47c8d8..L47c8e0] goto L47c974;
  catch `java.lang.Throwable` @[L47c928..L47c95e] goto L47c964;
  catch `java.lang.Throwable` @[L47c992..L47c9a4] goto L47c9ea;
  catch `java.lang.Throwable` @[L47c9c0..L47c9c8] goto L47c9da;
  catch `java.lang.Throwable` @[L47c9cc..L47c9d2] goto L47c9d4;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47c7b4.  v0:= 1I;
  #L47c7b6.  v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.i` @type ^`boolean` := v0 @kind boolean;
  #L47c7ba.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47c7be.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L47c7c4.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.c:()V` @kind virtual;
  #L47c7ca.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.d:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L47cbf4.  v0:= v2.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L47cbf8.  v1:= 0I;
  #L47cbfa.  call temp:= `compareAndSet`(v0, v1, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L47cc00.  v0:= temp;
  #L47cc02.  if v0 == 0 then goto L47cc1e;
  #L47cc06.  v0:= v2.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47cc0a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L47cc10.  v0:= 1I;
  #L47cc12.  v2.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.i` @type ^`boolean` := v0 @kind boolean;
  #L47cc16.  call `onError`(v3, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47cc1c.  goto L47cc24;
  #L47cc1e.  call `onError`(v4) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L47cc24.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47ca6c.  v0:= 1I;
  #L47ca6e.  v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.j` @type ^`boolean` := v0 @kind boolean;
  #L47ca72.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.c:()V` @kind virtual;
  #L47ca78.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L47ca8c.  v0:= v2.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.k` @type ^`io.reactivex.rxjava3.internal.util.AtomicThrowable` @kind object;
  #L47ca90.  v1:= 0I;
  #L47ca92.  call temp:= `compareAndSet`(v0, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L47ca98.  v0:= temp;
  #L47ca9a.  if v0 == 0 then goto L47caac;
  #L47ca9e.  v3:= 1I;
  #L47caa0.  v2.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.j` @type ^`boolean` := v3 @kind boolean;
  #L47caa4.  call `c`(v2) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.c:()V` @kind virtual;
  #L47caaa.  goto L47cab2;
  #L47caac.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L47cab2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L47cac4.  v0:= v2.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.n` @type ^`int`;
  #L47cac8.  v1:= 2I;
  #L47caca.  if v0 == v1 then goto L47cafe;
  #L47cace.  v0:= v2.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L47cad2.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L47cad8.  v3:= temp;
  #L47cada.  if v3 != 0 then goto L47cafe;
  #L47cade.  v3:= v2.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47cae2.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L47cae8.  v3:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L47caec.  v0:= "Queue full?!" @kind object;
  #L47caf0.  call `<init>`(v3, v0) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47caf6.  call `onError`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L47cafc.  return @kind void;
  #L47cafe.  call `c`(v2) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.c:()V` @kind virtual;
  #L47cb04.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L47cb18.  v0:= v3.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47cb1c.  call temp:= `validate`(v0, v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L47cb22.  v0:= temp;
  #L47cb24.  if v0 == 0 then goto L47cbb0;
  #L47cb28.  v3.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.f` @type ^`org.reactivestreams.Subscription` := v4 @kind object;
  #L47cb2c.  v0:= instanceof @variable v4 @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind boolean;
  #L47cb30.  if v0 == 0 then goto L47cb88;
  #L47cb34.  v0:= v4 @kind object;
  #L47cb36.  v0:= (`io.reactivex.rxjava3.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L47cb3a.  v1:= 7I;
  #L47cb3c.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L47cb42.  v1:= temp;
  #L47cb44.  v2:= 1I;
  #L47cb46.  if v1 != v2 then goto L47cb62;
  #L47cb4a.  v3.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.n` @type ^`int` := v1;
  #L47cb4e.  v3.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L47cb52.  v3.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.j` @type ^`boolean` := v2 @kind boolean;
  #L47cb56.  v4:= v3.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L47cb5a.  call `onSubscribe`(v4, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L47cb60.  return @kind void;
  #L47cb62.  v2:= 2I;
  #L47cb64.  if v1 != v2 then goto L47cb88;
  #L47cb68.  v3.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.n` @type ^`int` := v1;
  #L47cb6c.  v3.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L47cb70.  v0:= v3.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L47cb74.  call `onSubscribe`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L47cb7a.  v0:= v3.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.c` @type ^`int`;
  #L47cb7e.  v0:= (`long`) v0 @kind i2l;
  #L47cb80.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L47cb86.  return @kind void;
  #L47cb88.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L47cb8c.  v1:= v3.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.c` @type ^`int`;
  #L47cb90.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L47cb96.  v3.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.e` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L47cb9a.  v0:= v3.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L47cb9e.  call `onSubscribe`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L47cba4.  v0:= v3.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.c` @type ^`int`;
  #L47cba8.  v0:= (`long`) v0 @kind i2l;
  #L47cbaa.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L47cbb0.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47cbc4.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L47cbca.  v0:= temp;
  #L47cbcc.  if v0 == 0 then goto L47cbe0;
  #L47cbd0.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStream$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L47cbd4.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L47cbda.  call `c`(v1) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFlatMapStream$a;.c:()V` @kind virtual;
  #L47cbe0.  return @kind void;
}
