record `io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.rxjava3.core.MaybeObserver` @kind interface, `io.reactivex.rxjava3.core.SingleObserver` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.d` @AccessFlag ;
  `java.util.Iterator` `io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.e` @AccessFlag VOLATILE;
  `java.lang.AutoCloseable` `io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.f` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.g` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.h` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.i` @AccessFlag ;
  `long` `io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.j` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsFlowable$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L47d978.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L47d97e.  v0.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L47d982.  v0.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L47d986.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L47d98a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L47d990.  v0.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L47d994.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsFlowable$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47d9a8.  v0:= 1I;
  #L47d9aa.  v1.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.h` @type ^`boolean` := v0 @kind boolean;
  #L47d9ae.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L47d9b2.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L47d9b8.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.i` @type ^`boolean` @kind boolean;
  #L47d9bc.  if v0 != 0 then goto L47d9c6;
  #L47d9c0.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsFlowable$a;.drain:()V` @kind virtual;
  #L47d9c6.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsFlowable$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L47d9d8.  v0:= 0I;
  #L47d9da.  v2.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.e` @type ^`java.util.Iterator` := v0 @kind object;
  #L47d9de.  v1:= v2.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.f` @type ^`java.lang.AutoCloseable` @kind object;
  #L47d9e2.  v2.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.f` @type ^`java.lang.AutoCloseable` := v0 @kind object;
  #L47d9e6.  call `e`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsFlowable$a;.e:(Ljava/lang/AutoCloseable;)V` @kind virtual;
  #L47d9ec.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a` v10 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsFlowable$a;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L47da38.  call temp:= `getAndIncrement`(v10) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L47da3e.  v0:= temp;
  #L47da40.  if v0 == 0 then goto L47da46;
  #L47da44.  return @kind void;
  #L47da46.  v0:= v10.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L47da4a.  v1:= v10.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.j` @type ^`long` @kind wide;
  #L47da4e.  v3:= v10.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L47da52.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L47da58.  v3:= temp @kind wide;
  #L47da5a.  v5:= v10.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.e` @type ^`java.util.Iterator` @kind object;
  #L47da5e.  v6:= 1I;
  #L47da60.  v7:= 1I;
  #L47da62.  v8:= v10.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.h` @type ^`boolean` @kind boolean;
  #L47da66.  if v8 == 0 then goto L47da72;
  #L47da6a.  call `clear`(v10) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsFlowable$a;.clear:()V` @kind virtual;
  #L47da70.  goto L47db0c;
  #L47da72.  v8:= v10.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.i` @type ^`boolean` @kind boolean;
  #L47da76.  if v8 == 0 then goto L47da8e;
  #L47da7a.  if v5 == 0 then goto L47db0c;
  #L47da7e.  v3:= 0I;
  #L47da80.  call `onNext`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L47da86.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L47da8c.  goto L47db0c;
  #L47da8e.  if v5 == 0 then goto L47db0c;
  #L47da92.  v8:= lcmp(v1, v3);
  #L47da96.  if v8 == 0 then goto L47db0c;
  #L47da9a.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L47daa0.  v8:= temp @kind object;
  #L47daa2.  v9:= v10.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.h` @type ^`boolean` @kind boolean;
  #L47daa6.  if v9 == 0 then goto L47daac;
  #L47daaa.  goto L47da62;
  #L47daac.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L47dab2.  v8:= 1L;
  #L47dab6.  v1:= v1 + v8 @kind long;
  #L47dab8.  v8:= v10.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.h` @type ^`boolean` @kind boolean;
  #L47dabc.  if v8 == 0 then goto L47dac2;
  #L47dac0.  goto L47da62;
  #L47dac2.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L47dac8.  v8:= temp;
  #L47daca.  v9:= v10.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.h` @type ^`boolean` @kind boolean;
  #L47dace.  if v9 == 0 then goto L47dad4;
  #L47dad2.  goto L47da62;
  #L47dad4.  if v8 != 0 then goto L47da62;
  #L47dad8.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L47dade.  v10.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.h` @type ^`boolean` := v6 @kind boolean;
  #L47dae2.  goto L47da62;
  #L47dae4.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47dae6.  call `throwIfFatal`(v8) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47daec.  call `onError`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47daf2.  v10.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.h` @type ^`boolean` := v6 @kind boolean;
  #L47daf6.  goto L47da62;
  #L47daf8.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47dafa.  call `throwIfFatal`(v8) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47db00.  call `onError`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47db06.  v10.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.h` @type ^`boolean` := v6 @kind boolean;
  #L47db0a.  goto L47da62;
  #L47db0c.  v10.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.j` @type ^`long` := v1 @kind wide;
  #L47db10.  v3:= -v7 @kind int;
  #L47db12.  call temp:= `addAndGet`(v10, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L47db18.  v7:= temp;
  #L47db1a.  if v7 != 0 then goto L47db20;
  #L47db1e.  return @kind void;
  #L47db20.  v3:= v10.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L47db24.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L47db2a.  v3:= temp @kind wide;
  #L47db2c.  if v5 != 0 then goto L47da62;
  #L47db30.  v5:= v10.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.e` @type ^`java.util.Iterator` @kind object;
  #L47db34.  goto L47da62;
  catch `java.lang.Throwable` @[L47da9a..L47daa2] goto L47daf8;
  catch `java.lang.Throwable` @[L47dac2..L47daca] goto L47dae4;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a` v0 @kind this, `java.lang.AutoCloseable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsFlowable$a;.e:(Ljava/lang/AutoCloseable;)V` @AccessFlag  {
    temp;

  #L47da00.  if v1 == 0 then goto L47da1a;
  #L47da04.  call `close`(v1) @signature `Ljava/lang/AutoCloseable;.close:()V` @kind interface;
  #L47da0a.  goto L47da1a;
  #L47da0c.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47da0e.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47da14.  call `onError`(v1) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L47da1a.  return @kind void;
  catch `java.lang.Throwable` @[L47da04..L47da0a] goto L47da0c;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsFlowable$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L47d8d0.  v0:= v3.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.e` @type ^`java.util.Iterator` @kind object;
  #L47d8d4.  if v0 == 0 then goto L47d8f8;
  #L47d8d8.  v1:= v3.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.g` @type ^`boolean` @kind boolean;
  #L47d8dc.  v2:= 0I;
  #L47d8de.  if v1 != 0 then goto L47d8e4;
  #L47d8e2.  return v2;
  #L47d8e4.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L47d8ea.  v0:= temp;
  #L47d8ec.  if v0 == 0 then goto L47d8f2;
  #L47d8f0.  return v2;
  #L47d8f2.  call `clear`(v3) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsFlowable$a;.clear:()V` @kind virtual;
  #L47d8f8.  v0:= 1I;
  #L47d8fa.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsFlowable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47db60.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L47db64.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L47db6a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsFlowable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47db7c.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L47db80.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47db86.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsFlowable$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47db98.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L47db9c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L47dba2.  v0:= temp;
  #L47dba4.  if v0 == 0 then goto L47dbb6;
  #L47dba8.  v1.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.d` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L47dbac.  v2:= v1.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L47dbb0.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L47dbb6.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsFlowable$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L47dbc8.  v0:= v2.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L47dbcc.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L47dbd2.  v3:= temp @kind object;
  #L47dbd4.  v0:= "The mapper returned a null Stream" @kind object;
  #L47dbd8.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L47dbde.  v3:= (`java.util.stream.Stream`) v3 @kind object;
  #L47dbe2.  call temp:= `iterator`(v3) @signature `Ljava/util/stream/Stream;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L47dbe8.  v0:= temp @kind object;
  #L47dbea.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L47dbf0.  v1:= temp;
  #L47dbf2.  if v1 != 0 then goto L47dc08;
  #L47dbf6.  v0:= v2.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L47dbfa.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L47dc00.  call `e`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsFlowable$a;.e:(Ljava/lang/AutoCloseable;)V` @kind virtual;
  #L47dc06.  return @kind void;
  #L47dc08.  v2.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.e` @type ^`java.util.Iterator` := v0 @kind object;
  #L47dc0c.  v2.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.f` @type ^`java.lang.AutoCloseable` := v3 @kind object;
  #L47dc10.  call `drain`(v2) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsFlowable$a;.drain:()V` @kind virtual;
  #L47dc16.  return @kind void;
  #L47dc18.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47dc1a.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47dc20.  v0:= v2.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L47dc24.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47dc2a.  return @kind void;
  catch `java.lang.Throwable` @[L47dbc8..L47dc10] goto L47dc18;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsFlowable$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L47d930.  v0:= v3.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.e` @type ^`java.util.Iterator` @kind object;
  #L47d934.  v1:= 0I;
  #L47d936.  if v0 == 0 then goto L47d966;
  #L47d93a.  v2:= v3.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.g` @type ^`boolean` @kind boolean;
  #L47d93e.  if v2 == 0 then goto L47d956;
  #L47d942.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L47d948.  v2:= temp;
  #L47d94a.  if v2 != 0 then goto L47d95c;
  #L47d94e.  call `clear`(v3) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsFlowable$a;.clear:()V` @kind virtual;
  #L47d954.  return v1 @kind object;
  #L47d956.  v1:= 1I;
  #L47d958.  v3.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.g` @type ^`boolean` := v1 @kind boolean;
  #L47d95c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L47d962.  v0:= temp @kind object;
  #L47d964.  return v0 @kind object;
  #L47d966.  return v1 @kind object;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsFlowable$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47dc48.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L47dc4e.  v0:= temp;
  #L47dc50.  if v0 == 0 then goto L47dc64;
  #L47dc54.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L47dc58.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L47dc5e.  call `drain`(v1) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsFlowable$a;.drain:()V` @kind virtual;
  #L47dc64.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsFlowable$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47d90c.  v0:= 2I;
  #L47d90e.  v2:= v2 ^& v0 @kind int;
  #L47d910.  if v2 == 0 then goto L47d91c;
  #L47d914.  v2:= 1I;
  #L47d916.  v1.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowable$a.i` @type ^`boolean` := v2 @kind boolean;
  #L47d91a.  return v0;
  #L47d91c.  v2:= 0I;
  #L47d91e.  return v2;
}
