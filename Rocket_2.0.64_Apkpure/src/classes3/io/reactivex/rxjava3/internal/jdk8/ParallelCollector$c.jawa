record `io.reactivex.rxjava3.internal.jdk8.ParallelCollector$c` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class {
  `java.lang.Object` `io.reactivex.rxjava3.internal.jdk8.ParallelCollector$c.a` @AccessFlag ;
  `java.lang.Object` `io.reactivex.rxjava3.internal.jdk8.ParallelCollector$c.b` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.internal.jdk8.ParallelCollector$c.c` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.jdk8.ParallelCollector$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelCollector$c;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L47f668.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L47f66e.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L47f672.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L47f678.  v1.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$c.c` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L47f67c.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$c` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelCollector$c;.a:()Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L47f608.  v0:= v2.`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$c.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L47f60c.  call temp:= `incrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.incrementAndGet:()I` @kind virtual;
  #L47f612.  v0:= temp;
  #L47f614.  v1:= 2I;
  #L47f616.  if v0 != v1 then goto L47f61e;
  #L47f61a.  v0:= 1I;
  #L47f61c.  goto L47f620;
  #L47f61e.  v0:= 0I;
  #L47f620.  return v0;
}
procedure `int` `b`(`io.reactivex.rxjava3.internal.jdk8.ParallelCollector$c` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelCollector$c;.b:()I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L47f634.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L47f63a.  v0:= temp;
  #L47f63c.  v1:= 2I;
  #L47f63e.  if v0 < v1 then goto L47f646;
  #L47f642.  v0:= -1I;
  #L47f644.  return v0;
  #L47f646.  v1:= v0 + 1;
  #L47f64a.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L47f650.  v1:= temp;
  #L47f652.  if v1 == 0 then goto L47f634;
  #L47f656.  return v0;
}
