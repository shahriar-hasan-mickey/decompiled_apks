record `io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` `io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiFunction` `io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.c` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.d` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b` v0 @kind this, `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$b;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L47fd1c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L47fd22.  v0.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L47fd26.  v0.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L47fd2a.  v0.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.c` @type ^`io.reactivex.rxjava3.functions.BiFunction` := v3 @kind object;
  #L47fd2e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47fd40.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47fd44.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L47fd4a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47fd5c.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.e` @type ^`boolean` @kind boolean;
  #L47fd60.  if v0 == 0 then goto L47fd66;
  #L47fd64.  return @kind void;
  #L47fd66.  v0:= 1I;
  #L47fd68.  v1.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.e` @type ^`boolean` := v0 @kind boolean;
  #L47fd6c.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L47fd70.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L47fd76.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47fd88.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.e` @type ^`boolean` @kind boolean;
  #L47fd8c.  if v0 == 0 then goto L47fd98;
  #L47fd90.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L47fd96.  return @kind void;
  #L47fd98.  v0:= 1I;
  #L47fd9a.  v1.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.e` @type ^`boolean` := v0 @kind boolean;
  #L47fd9e.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L47fda2.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47fda8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L47fdbc.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$b;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L47fdc2.  v3:= temp;
  #L47fdc4.  if v3 != 0 then goto L47fdde;
  #L47fdc8.  v3:= v2.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.e` @type ^`boolean` @kind boolean;
  #L47fdcc.  if v3 != 0 then goto L47fdde;
  #L47fdd0.  v3:= v2.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47fdd4.  v0:= 1L;
  #L47fdd8.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L47fdde.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47fdf0.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47fdf4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L47fdfa.  v0:= temp;
  #L47fdfc.  if v0 == 0 then goto L47fe0e;
  #L47fe00.  v1.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.d` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L47fe04.  v2:= v1.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L47fe08.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/FlowableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L47fe0e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47fe20.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47fe24.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L47fe2a.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$b;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L47fc08.  v0:= v9.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.e` @type ^`boolean` @kind boolean;
  #L47fc0c.  v1:= 0I;
  #L47fc0e.  if v0 == 0 then goto L47fc14;
  #L47fc12.  return v1;
  #L47fc14.  v2:= 0L;
  #L47fc18.  v0:= 1I;
  #L47fc1a.  v4:= v9.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L47fc1e.  call temp:= `apply`(v4, v10) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L47fc24.  v4:= temp @kind object;
  #L47fc26.  v5:= "The mapper returned a null Optional" @kind object;
  #L47fc2a.  call temp:= `requireNonNull`(v4, v5) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L47fc30.  v4:= (`java.util.Optional`) v4 @kind object;
  #L47fc34.  call temp:= `isPresent`(v4) @signature `Ljava/util/Optional;.isPresent:()Z` @kind virtual;
  #L47fc3a.  v10:= temp;
  #L47fc3c.  if v10 == 0 then goto L47fc5a;
  #L47fc40.  v10:= v9.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.a` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L47fc44.  call temp:= `get`(v4) @signature `Ljava/util/Optional;.get:()Ljava/lang/Object;` @kind virtual;
  #L47fc4a.  v2:= temp @kind object;
  #L47fc4c.  call temp:= `tryOnNext`(v10, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L47fc52.  v10:= temp;
  #L47fc54.  if v10 == 0 then goto L47fc5a;
  #L47fc58.  v1:= 1I;
  #L47fc5a.  return v1;
  #L47fc5c.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47fc5e.  call `throwIfFatal`(v4) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47fc64.  v5:= 2I;
  #L47fc66.  v6:= v9.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b.c` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L47fc6a.  v7:= 1L;
  #L47fc6e.  v2:= v2 + v7 @kind long;
  #L47fc70.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L47fc76.  v7:= temp @kind object;
  #L47fc78.  call temp:= `apply`(v6, v7, v4) @signature `Lio/reactivex/rxjava3/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L47fc7e.  v6:= temp @kind object;
  #L47fc80.  v7:= "The errorHandler returned a null ParallelFailureHandling" @kind object;
  #L47fc84.  call temp:= `requireNonNull`(v6, v7) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L47fc8a.  v6:= (`io.reactivex.rxjava3.parallel.ParallelFailureHandling`) v6 @kind object;
  #L47fc8e.  v7:= `@@io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$a.a` @type ^`int`[] @kind object;
  #L47fc92.  call temp:= `ordinal`(v6) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L47fc98.  v6:= temp;
  #L47fc9a.  v6:= v7[v6];
  #L47fc9e.  if v6 == v0 then goto L47fc18;
  #L47fca2.  if v6 == v5 then goto L47fcc6;
  #L47fca6.  v10:= 3I;
  #L47fca8.  if v6 == v10 then goto L47fcba;
  #L47fcac.  call `cancel`(v9) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$b;.cancel:()V` @kind virtual;
  #L47fcb2.  call `onError`(v9, v4) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L47fcb8.  return v1;
  #L47fcba.  call `cancel`(v9) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$b;.cancel:()V` @kind virtual;
  #L47fcc0.  call `onComplete`(v9) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$b;.onComplete:()V` @kind virtual;
  #L47fcc6.  return v1;
  #L47fcc8.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47fcca.  call `throwIfFatal`(v10) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47fcd0.  call `cancel`(v9) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$b;.cancel:()V` @kind virtual;
  #L47fcd6.  v2:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L47fcda.  v3:= new `java.lang.Throwable`[v5];
  #L47fcde.  v3[v1]:= v4 @kind object;
  #L47fce2.  v3[v0]:= v10 @kind object;
  #L47fce6.  call `<init>`(v2, v3) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L47fcec.  call `onError`(v9, v2) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L47fcf2.  return v1;
  catch `java.lang.Throwable` @[L47fc1a..L47fc34] goto L47fc5c;
  catch `java.lang.Throwable` @[L47fc66..L47fc8e] goto L47fcc8;
}
