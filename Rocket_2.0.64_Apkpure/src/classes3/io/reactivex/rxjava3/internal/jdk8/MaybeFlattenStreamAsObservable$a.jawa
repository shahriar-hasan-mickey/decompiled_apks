record `io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.observers.BasicIntQueueDisposable` @kind class, `io.reactivex.rxjava3.core.MaybeObserver` @kind interface, `io.reactivex.rxjava3.core.SingleObserver` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.disposables.Disposable` `io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.c` @AccessFlag ;
  `java.util.Iterator` `io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.d` @AccessFlag VOLATILE;
  `java.lang.AutoCloseable` `io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.e` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.f` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.g` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.h` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsObservable$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L47dd84.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/observers/BasicIntQueueDisposable;.<init>:()V` @kind direct;
  #L47dd8a.  v0.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L47dd8e.  v0.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L47dd92.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a` v0 @kind this, `java.lang.AutoCloseable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsObservable$a;.a:(Ljava/lang/AutoCloseable;)V` @AccessFlag  {
    temp;

  #L47ddcc.  if v1 == 0 then goto L47dde6;
  #L47ddd0.  call `close`(v1) @signature `Ljava/lang/AutoCloseable;.close:()V` @kind interface;
  #L47ddd6.  goto L47dde6;
  #L47ddd8.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47ddda.  call `throwIfFatal`(v1) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47dde0.  call `onError`(v1) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L47dde6.  return @kind void;
  catch `java.lang.Throwable` @[L47ddd0..L47ddd6] goto L47ddd8;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsObservable$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L47dda4.  v0:= 0I;
  #L47dda6.  v2.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.d` @type ^`java.util.Iterator` := v0 @kind object;
  #L47ddaa.  v1:= v2.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.e` @type ^`java.lang.AutoCloseable` @kind object;
  #L47ddae.  v2.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.e` @type ^`java.lang.AutoCloseable` := v0 @kind object;
  #L47ddb2.  call `a`(v2, v1) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsObservable$a;.a:(Ljava/lang/AutoCloseable;)V` @kind virtual;
  #L47ddb8.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsObservable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47de04.  v0:= 1I;
  #L47de06.  v1.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.g` @type ^`boolean` := v0 @kind boolean;
  #L47de0a.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L47de0e.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L47de14.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.h` @type ^`boolean` @kind boolean;
  #L47de18.  if v0 != 0 then goto L47de22;
  #L47de1c.  call `e`(v1) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsObservable$a;.e:()V` @kind virtual;
  #L47de22.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a` v6 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsObservable$a;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L47de34.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L47de3a.  v0:= temp;
  #L47de3c.  if v0 == 0 then goto L47de42;
  #L47de40.  return @kind void;
  #L47de42.  v0:= v6.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L47de46.  v1:= v6.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.d` @type ^`java.util.Iterator` @kind object;
  #L47de4a.  v2:= 1I;
  #L47de4c.  v3:= 1I;
  #L47de4e.  v4:= v6.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.g` @type ^`boolean` @kind boolean;
  #L47de52.  if v4 == 0 then goto L47de5e;
  #L47de56.  call `clear`(v6) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsObservable$a;.clear:()V` @kind virtual;
  #L47de5c.  goto L47de74;
  #L47de5e.  v4:= v6.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.h` @type ^`boolean` @kind boolean;
  #L47de62.  if v4 == 0 then goto L47de84;
  #L47de66.  v4:= 0I;
  #L47de68.  call `onNext`(v0, v4) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L47de6e.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L47de74.  v3:= -v3 @kind int;
  #L47de76.  call temp:= `addAndGet`(v6, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L47de7c.  v3:= temp;
  #L47de7e.  if v3 != 0 then goto L47de4e;
  #L47de82.  return @kind void;
  #L47de84.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L47de8a.  v4:= temp @kind object;
  #L47de8c.  v5:= v6.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.g` @type ^`boolean` @kind boolean;
  #L47de90.  if v5 == 0 then goto L47de96;
  #L47de94.  goto L47de4e;
  #L47de96.  call `onNext`(v0, v4) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L47de9c.  v4:= v6.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.g` @type ^`boolean` @kind boolean;
  #L47dea0.  if v4 == 0 then goto L47dea6;
  #L47dea4.  goto L47de4e;
  #L47dea6.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L47deac.  v4:= temp;
  #L47deae.  v5:= v6.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.g` @type ^`boolean` @kind boolean;
  #L47deb2.  if v5 == 0 then goto L47deb8;
  #L47deb6.  goto L47de4e;
  #L47deb8.  if v4 != 0 then goto L47de4e;
  #L47debc.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L47dec2.  v6.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.g` @type ^`boolean` := v2 @kind boolean;
  #L47dec6.  goto L47de4e;
  #L47dec8.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47deca.  call `throwIfFatal`(v4) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47ded0.  call `onError`(v0, v4) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47ded6.  v6.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.g` @type ^`boolean` := v2 @kind boolean;
  #L47deda.  goto L47de4e;
  #L47dedc.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47dede.  call `throwIfFatal`(v4) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47dee4.  call `onError`(v0, v4) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47deea.  v6.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.g` @type ^`boolean` := v2 @kind boolean;
  #L47deee.  goto L47de4e;
  catch `java.lang.Throwable` @[L47de84..L47de8c] goto L47dedc;
  catch `java.lang.Throwable` @[L47dea6..L47deae] goto L47dec8;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsObservable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47dcc4.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.g` @type ^`boolean` @kind boolean;
  #L47dcc8.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsObservable$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L47dcdc.  v0:= v3.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.d` @type ^`java.util.Iterator` @kind object;
  #L47dce0.  if v0 == 0 then goto L47dd04;
  #L47dce4.  v1:= v3.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.f` @type ^`boolean` @kind boolean;
  #L47dce8.  v2:= 0I;
  #L47dcea.  if v1 != 0 then goto L47dcf0;
  #L47dcee.  return v2;
  #L47dcf0.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L47dcf6.  v0:= temp;
  #L47dcf8.  if v0 == 0 then goto L47dcfe;
  #L47dcfc.  return v2;
  #L47dcfe.  call `clear`(v3) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsObservable$a;.clear:()V` @kind virtual;
  #L47dd04.  v0:= 1I;
  #L47dd06.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsObservable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47df18.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L47df1c.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L47df22.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsObservable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47df34.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L47df38.  call `onError`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47df3e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsObservable$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47df50.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` @kind object;
  #L47df54.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/rxjava3/disposables/Disposable;Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L47df5a.  v0:= temp;
  #L47df5c.  if v0 == 0 then goto L47df6e;
  #L47df60.  v1.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.c` @type ^`io.reactivex.rxjava3.disposables.Disposable` := v2 @kind object;
  #L47df64.  v2:= v1.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L47df68.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L47df6e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsObservable$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L47df80.  v0:= v2.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L47df84.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L47df8a.  v3:= temp @kind object;
  #L47df8c.  v0:= "The mapper returned a null Stream" @kind object;
  #L47df90.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L47df96.  v3:= (`java.util.stream.Stream`) v3 @kind object;
  #L47df9a.  call temp:= `iterator`(v3) @signature `Ljava/util/stream/Stream;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L47dfa0.  v0:= temp @kind object;
  #L47dfa2.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L47dfa8.  v1:= temp;
  #L47dfaa.  if v1 != 0 then goto L47dfc0;
  #L47dfae.  v0:= v2.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L47dfb2.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L47dfb8.  call `a`(v2, v3) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsObservable$a;.a:(Ljava/lang/AutoCloseable;)V` @kind virtual;
  #L47dfbe.  return @kind void;
  #L47dfc0.  v2.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.d` @type ^`java.util.Iterator` := v0 @kind object;
  #L47dfc4.  v2.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.e` @type ^`java.lang.AutoCloseable` := v3 @kind object;
  #L47dfc8.  call `e`(v2) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsObservable$a;.e:()V` @kind virtual;
  #L47dfce.  return @kind void;
  #L47dfd0.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47dfd2.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47dfd8.  v0:= v2.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L47dfdc.  call `onError`(v0, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47dfe2.  return @kind void;
  catch `java.lang.Throwable` @[L47df80..L47dfc8] goto L47dfd0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsObservable$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L47dd3c.  v0:= v3.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.d` @type ^`java.util.Iterator` @kind object;
  #L47dd40.  v1:= 0I;
  #L47dd42.  if v0 == 0 then goto L47dd72;
  #L47dd46.  v2:= v3.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.f` @type ^`boolean` @kind boolean;
  #L47dd4a.  if v2 == 0 then goto L47dd62;
  #L47dd4e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L47dd54.  v2:= temp;
  #L47dd56.  if v2 != 0 then goto L47dd68;
  #L47dd5a.  call `clear`(v3) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsObservable$a;.clear:()V` @kind virtual;
  #L47dd60.  return v1 @kind object;
  #L47dd62.  v1:= 1I;
  #L47dd64.  v3.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.f` @type ^`boolean` := v1 @kind boolean;
  #L47dd68.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L47dd6e.  v0:= temp @kind object;
  #L47dd70.  return v0 @kind object;
  #L47dd72.  return v1 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/jdk8/MaybeFlattenStreamAsObservable$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47dd18.  v0:= 2I;
  #L47dd1a.  v2:= v2 ^& v0 @kind int;
  #L47dd1c.  if v2 == 0 then goto L47dd28;
  #L47dd20.  v2:= 1I;
  #L47dd22.  v1.`io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable$a.h` @type ^`boolean` := v2 @kind boolean;
  #L47dd26.  return v0;
  #L47dd28.  v2:= 0I;
  #L47dd2a.  return v2;
}
