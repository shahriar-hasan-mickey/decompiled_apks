record `io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.parallel.ParallelFlowable` @kind class {
  `io.reactivex.rxjava3.parallel.ParallelFlowable` `io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.b` @AccessFlag FINAL;
  `io.reactivex.rxjava3.functions.BiFunction` `io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional` v0 @kind this, `io.reactivex.rxjava3.parallel.ParallelFlowable` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional;.<init>:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/BiFunction;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L48008c.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.<init>:()V` @kind direct;
  #L480092.  v0.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.a` @type ^`io.reactivex.rxjava3.parallel.ParallelFlowable` := v1 @kind object;
  #L480096.  v0.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.b` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L48009a.  v0.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.c` @type ^`io.reactivex.rxjava3.functions.BiFunction` := v3 @kind object;
  #L48009e.  return @kind void;
}
procedure `int` `parallelism`(`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional;.parallelism:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48006c.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.a` @type ^`io.reactivex.rxjava3.parallel.ParallelFlowable` @kind object;
  #L480070.  call temp:= `parallelism`(v0) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.parallelism:()I` @kind virtual;
  #L480076.  v0:= temp;
  #L480078.  return v0;
}
procedure `void` `subscribe`(`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional` v7 @kind this, `org.reactivestreams.Subscriber`[] v8 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4800b0.  call temp:= `validate`(v7, v8) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.validate:([Lorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L4800b6.  v0:= temp;
  #L4800b8.  if v0 != 0 then goto L4800be;
  #L4800bc.  return @kind void;
  #L4800be.  v0:= length @variable v8;
  #L4800c0.  v1:= new `org.reactivestreams.Subscriber`[v0];
  #L4800c4.  v2:= 0I;
  #L4800c6.  if v2 >= v0 then goto L48010e;
  #L4800ca.  v3:= v8[v2] @kind object;
  #L4800ce.  v4:= instanceof @variable v3 @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind boolean;
  #L4800d2.  if v4 == 0 then goto L4800f2;
  #L4800d6.  v4:= new `io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$b`;
  #L4800da.  v3:= (`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber`) v3 @kind object;
  #L4800de.  v5:= v7.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4800e2.  v6:= v7.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.c` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L4800e6.  call `<init>`(v4, v3, v5, v6) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$b;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/BiFunction;)V` @kind direct;
  #L4800ec.  v1[v2]:= v4 @kind object;
  #L4800f0.  goto L480108;
  #L4800f2.  v4:= new `io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional$c`;
  #L4800f6.  v5:= v7.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.b` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L4800fa.  v6:= v7.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.c` @type ^`io.reactivex.rxjava3.functions.BiFunction` @kind object;
  #L4800fe.  call `<init>`(v4, v3, v5, v6) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional$c;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/BiFunction;)V` @kind direct;
  #L480104.  v1[v2]:= v4 @kind object;
  #L480108.  v2:= v2 + 1;
  #L48010c.  goto L4800c6;
  #L48010e.  v8:= v7.`io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional.a` @type ^`io.reactivex.rxjava3.parallel.ParallelFlowable` @kind object;
  #L480112.  call `subscribe`(v8, v1) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L480118.  return @kind void;
}
