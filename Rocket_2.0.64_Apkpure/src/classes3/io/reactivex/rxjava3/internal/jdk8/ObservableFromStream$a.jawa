record `io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.fuseable.QueueDisposable` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.a` @AccessFlag FINAL;
  `java.util.Iterator` `io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.b` @AccessFlag ;
  `java.lang.AutoCloseable` `io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.c` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.d` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.e` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.f` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `java.util.Iterator` v2 @kind object, `java.lang.AutoCloseable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/ObservableFromStream$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Ljava/util/Iterator;Ljava/lang/AutoCloseable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L47ecd8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L47ecde.  v0.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.a` @type ^`io.reactivex.rxjava3.core.Observer` := v1 @kind object;
  #L47ece2.  v0.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.b` @type ^`java.util.Iterator` := v2 @kind object;
  #L47ece6.  v0.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.c` @type ^`java.lang.AutoCloseable` := v3 @kind object;
  #L47ecea.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/ObservableFromStream$a;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L47ed48.  v0:= v5.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.f` @type ^`boolean` @kind boolean;
  #L47ed4c.  if v0 == 0 then goto L47ed52;
  #L47ed50.  return @kind void;
  #L47ed52.  v0:= v5.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.b` @type ^`java.util.Iterator` @kind object;
  #L47ed56.  v1:= v5.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L47ed5a.  v2:= v5.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.d` @type ^`boolean` @kind boolean;
  #L47ed5e.  if v2 == 0 then goto L47ed6a;
  #L47ed62.  call `clear`(v5) @signature `Lio/reactivex/rxjava3/internal/jdk8/ObservableFromStream$a;.clear:()V` @kind virtual;
  #L47ed68.  return @kind void;
  #L47ed6a.  v2:= 1I;
  #L47ed6c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L47ed72.  v3:= temp @kind object;
  #L47ed74.  v4:= "The Stream's Iterator.next returned a null value" @kind object;
  #L47ed78.  call temp:= `requireNonNull`(v3, v4) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L47ed7e.  v4:= v5.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.d` @type ^`boolean` @kind boolean;
  #L47ed82.  if v4 == 0 then goto L47ed88;
  #L47ed86.  goto L47ed5a;
  #L47ed88.  call `onNext`(v1, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L47ed8e.  v3:= v5.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.d` @type ^`boolean` @kind boolean;
  #L47ed92.  if v3 == 0 then goto L47ed98;
  #L47ed96.  goto L47ed5a;
  #L47ed98.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L47ed9e.  v3:= temp;
  #L47eda0.  if v3 == 0 then goto L47eda6;
  #L47eda4.  goto L47ed5a;
  #L47eda6.  call `onComplete`(v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L47edac.  v5.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.d` @type ^`boolean` := v2 @kind boolean;
  #L47edb0.  goto L47ed5a;
  #L47edb2.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47edb4.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47edba.  call `onError`(v1, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47edc0.  v5.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.d` @type ^`boolean` := v2 @kind boolean;
  #L47edc4.  goto L47ed5a;
  #L47edc6.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47edc8.  call `throwIfFatal`(v3) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47edce.  call `onError`(v1, v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47edd4.  v5.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.d` @type ^`boolean` := v2 @kind boolean;
  #L47edd8.  goto L47ed5a;
  catch `java.lang.Throwable` @[L47ed6c..L47ed7e] goto L47edc6;
  catch `java.lang.Throwable` @[L47ed98..L47eda0] goto L47edb2;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/ObservableFromStream$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L47ecfc.  v0:= 0I;
  #L47ecfe.  v2.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.b` @type ^`java.util.Iterator` := v0 @kind object;
  #L47ed02.  v1:= v2.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.c` @type ^`java.lang.AutoCloseable` @kind object;
  #L47ed06.  v2.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.c` @type ^`java.lang.AutoCloseable` := v0 @kind object;
  #L47ed0a.  if v1 == 0 then goto L47ed14;
  #L47ed0e.  call `d`(v1) @signature `Lio/reactivex/rxjava3/internal/jdk8/ObservableFromStream;.d:(Ljava/lang/AutoCloseable;)V` @kind static;
  #L47ed14.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/ObservableFromStream$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47ed28.  v0:= 1I;
  #L47ed2a.  v1.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.d` @type ^`boolean` := v0 @kind boolean;
  #L47ed2e.  call `a`(v1) @signature `Lio/reactivex/rxjava3/internal/jdk8/ObservableFromStream$a;.a:()V` @kind virtual;
  #L47ed34.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/ObservableFromStream$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47ebcc.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.d` @type ^`boolean` @kind boolean;
  #L47ebd0.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/ObservableFromStream$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L47ebe4.  v0:= v2.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.b` @type ^`java.util.Iterator` @kind object;
  #L47ebe8.  if v0 == 0 then goto L47ec0e;
  #L47ebec.  v1:= v2.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.e` @type ^`boolean` @kind boolean;
  #L47ebf0.  if v1 == 0 then goto L47ec0a;
  #L47ebf4.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L47ebfa.  v0:= temp;
  #L47ebfc.  if v0 == 0 then goto L47ec02;
  #L47ec00.  goto L47ec0a;
  #L47ec02.  call `clear`(v2) @signature `Lio/reactivex/rxjava3/internal/jdk8/ObservableFromStream$a;.clear:()V` @kind virtual;
  #L47ec08.  goto L47ec0e;
  #L47ec0a.  v0:= 0I;
  #L47ec0c.  return v0;
  #L47ec0e.  v0:= 1I;
  #L47ec10.  return v0;
}
procedure `boolean` `offer`(`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/ObservableFromStream$a;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L47ec24.  v1:= new `java.lang.UnsupportedOperationException`;
  #L47ec28.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L47ec2e.  throw v1;
}
procedure `boolean` `offer`(`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/ObservableFromStream$a;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L47ec40.  v1:= new `java.lang.UnsupportedOperationException`;
  #L47ec44.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L47ec4a.  throw v1;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/ObservableFromStream$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L47ec80.  v0:= v3.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.b` @type ^`java.util.Iterator` @kind object;
  #L47ec84.  v1:= 0I;
  #L47ec86.  if v0 != 0 then goto L47ec8c;
  #L47ec8a.  return v1 @kind object;
  #L47ec8c.  v2:= v3.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.e` @type ^`boolean` @kind boolean;
  #L47ec90.  if v2 != 0 then goto L47ec9c;
  #L47ec94.  v0:= 1I;
  #L47ec96.  v3.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.e` @type ^`boolean` := v0 @kind boolean;
  #L47ec9a.  goto L47ecb0;
  #L47ec9c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L47eca2.  v0:= temp;
  #L47eca4.  if v0 != 0 then goto L47ecb0;
  #L47eca8.  call `clear`(v3) @signature `Lio/reactivex/rxjava3/internal/jdk8/ObservableFromStream$a;.clear:()V` @kind virtual;
  #L47ecae.  return v1 @kind object;
  #L47ecb0.  v0:= v3.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.b` @type ^`java.util.Iterator` @kind object;
  #L47ecb4.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L47ecba.  v0:= temp @kind object;
  #L47ecbc.  v1:= "The Stream's Iterator.next() returned a null value" @kind object;
  #L47ecc0.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L47ecc6.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/jdk8/ObservableFromStream$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47ec5c.  v0:= 1I;
  #L47ec5e.  v2:= v2 ^& v0 @kind int;
  #L47ec60.  if v2 == 0 then goto L47ec6a;
  #L47ec64.  v1.`io.reactivex.rxjava3.internal.jdk8.ObservableFromStream$a.f` @type ^`boolean` := v0 @kind boolean;
  #L47ec68.  return v0;
  #L47ec6a.  v2:= 0I;
  #L47ec6c.  return v2;
}
