record `io.reactivex.rxjava3.internal.jdk8.a` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.CompletableFuture` @kind class, `io.reactivex.rxjava3.core.FlowableSubscriber` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.jdk8.a.a` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.internal.jdk8.a.b` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.jdk8.a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L47d810.  call `<init>`(v1) @signature `Ljava/util/concurrent/CompletableFuture;.<init>:()V` @kind direct;
  #L47d816.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L47d81a.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L47d820.  v1.`io.reactivex.rxjava3.internal.jdk8.a.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L47d824.  return @kind void;
}
procedure `void` `afterSubscribe`(`org.reactivestreams.Subscription` v0 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/a;.afterSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `boolean` `cancel`(`io.reactivex.rxjava3.internal.jdk8.a` v0 @kind this, `boolean` v1 ) @signature `Lio/reactivex/rxjava3/internal/jdk8/a;.cancel:(Z)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L47d7b0.  call `cancelUpstream`(v0) @signature `Lio/reactivex/rxjava3/internal/jdk8/a;.cancelUpstream:()V` @kind virtual;
  #L47d7b6.  call temp:= `cancel`(v0, v1) @signature `Ljava/util/concurrent/CompletableFuture;.cancel:(Z)Z` @kind super;
  #L47d7bc.  v1:= temp;
  #L47d7be.  return v1;
}
procedure `void` `cancelUpstream`(`io.reactivex.rxjava3.internal.jdk8.a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/a;.cancelUpstream:()V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L47d838.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.a.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L47d83c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L47d842.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.jdk8.a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/a;.clear:()V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;

  #L47d854.  v0:= 0I;
  #L47d856.  v2.`io.reactivex.rxjava3.internal.jdk8.a.b` @type ^`java.lang.Object` := v0 @kind object;
  #L47d85a.  v0:= v2.`io.reactivex.rxjava3.internal.jdk8.a.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L47d85e.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper` @kind object;
  #L47d862.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L47d868.  return @kind void;
}
procedure `boolean` `complete`(`io.reactivex.rxjava3.internal.jdk8.a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/a;.complete:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L47d7d0.  call `cancelUpstream`(v0) @signature `Lio/reactivex/rxjava3/internal/jdk8/a;.cancelUpstream:()V` @kind virtual;
  #L47d7d6.  call temp:= `complete`(v0, v1) @signature `Ljava/util/concurrent/CompletableFuture;.complete:(Ljava/lang/Object;)Z` @kind super;
  #L47d7dc.  v1:= temp;
  #L47d7de.  return v1;
}
procedure `boolean` `completeExceptionally`(`io.reactivex.rxjava3.internal.jdk8.a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/a;.completeExceptionally:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L47d7f0.  call `cancelUpstream`(v0) @signature `Lio/reactivex/rxjava3/internal/jdk8/a;.cancelUpstream:()V` @kind virtual;
  #L47d7f6.  call temp:= `completeExceptionally`(v0, v1) @signature `Ljava/util/concurrent/CompletableFuture;.completeExceptionally:(Ljava/lang/Throwable;)Z` @kind super;
  #L47d7fc.  v1:= temp;
  #L47d7fe.  return v1;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.jdk8.a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L47d87c.  call `clear`(v1) @signature `Lio/reactivex/rxjava3/internal/jdk8/a;.clear:()V` @kind virtual;
  #L47d882.  call temp:= `completeExceptionally`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/jdk8/a;.completeExceptionally:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L47d888.  v0:= temp;
  #L47d88a.  if v0 != 0 then goto L47d894;
  #L47d88e.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L47d894.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.jdk8.a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L47d8a8.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.a.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L47d8ac.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L47d8b2.  v0:= temp;
  #L47d8b4.  if v0 == 0 then goto L47d8be;
  #L47d8b8.  call `afterSubscribe`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/jdk8/a;.afterSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L47d8be.  return @kind void;
}
