record `io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$b` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$a` @kind class {
  `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` `io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$b.e` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$b` v0 @kind this, `io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` v1 @kind object, `java.util.Iterator` v2 @kind object, `java.lang.AutoCloseable` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFromStream$b;.<init>:(Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;Ljava/util/Iterator;Ljava/lang/AutoCloseable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L47d00c.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFromStream$a;.<init>:(Ljava/util/Iterator;Ljava/lang/AutoCloseable;)V` @kind direct;
  #L47d012.  v0.`io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$b.e` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L47d016.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$b` v9 @kind this, `long` v10 ) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFromStream$b;.a:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L47d028.  v0:= v9.`io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$a.a` @type ^`java.util.Iterator` @kind object;
  #L47d02c.  v1:= v9.`io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$b.e` @type ^`io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber` @kind object;
  #L47d030.  v2:= 0L;
  #L47d034.  v4:= v2 @kind wide;
  #L47d036.  v6:= v9.`io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$a.c` @type ^`boolean` @kind boolean;
  #L47d03a.  if v6 == 0 then goto L47d046;
  #L47d03e.  call `clear`(v9) @signature `Lio/reactivex/rxjava3/internal/jdk8/FlowableFromStream$a;.clear:()V` @kind virtual;
  #L47d044.  goto L47d0b4;
  #L47d046.  v6:= 1I;
  #L47d048.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L47d04e.  v7:= temp @kind object;
  #L47d050.  v8:= "The Stream's Iterator returned a null value" @kind object;
  #L47d054.  call temp:= `requireNonNull`(v7, v8) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L47d05a.  call temp:= `tryOnNext`(v1, v7) @signature `Lio/reactivex/rxjava3/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L47d060.  v7:= temp;
  #L47d062.  if v7 == 0 then goto L47d06c;
  #L47d066.  v7:= 1L;
  #L47d06a.  v4:= v4 + v7 @kind long;
  #L47d06c.  v7:= v9.`io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$a.c` @type ^`boolean` @kind boolean;
  #L47d070.  if v7 == 0 then goto L47d076;
  #L47d074.  goto L47d036;
  #L47d076.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L47d07c.  v7:= temp;
  #L47d07e.  if v7 != 0 then goto L47d08e;
  #L47d082.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L47d088.  v9.`io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$a.c` @type ^`boolean` := v6 @kind boolean;
  #L47d08c.  goto L47d036;
  #L47d08e.  v6:= lcmp(v4, v10);
  #L47d092.  if v6 == 0 then goto L47d098;
  #L47d096.  goto L47d036;
  #L47d098.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L47d09e.  v10:= temp @kind wide;
  #L47d0a0.  v6:= lcmp(v4, v10);
  #L47d0a4.  if v6 != 0 then goto L47d036;
  #L47d0a8.  call temp:= `compareAndSet`(v9, v10, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L47d0ae.  v10:= temp;
  #L47d0b0.  if v10 == 0 then goto L47d0b6;
  #L47d0b4.  return @kind void;
  #L47d0b6.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L47d0bc.  v10:= temp @kind wide;
  #L47d0be.  goto L47d036;
  #L47d0c0.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47d0c2.  call `throwIfFatal`(v7) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47d0c8.  call `onError`(v1, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47d0ce.  v9.`io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$a.c` @type ^`boolean` := v6 @kind boolean;
  #L47d0d2.  goto L47d036;
  #L47d0d4.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47d0d6.  call `throwIfFatal`(v7) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47d0dc.  call `onError`(v1, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47d0e2.  v9.`io.reactivex.rxjava3.internal.jdk8.FlowableFromStream$a.c` @type ^`boolean` := v6 @kind boolean;
  #L47d0e6.  goto L47d036;
  catch `java.lang.Throwable` @[L47d048..L47d05a] goto L47d0d4;
  catch `java.lang.Throwable` @[L47d076..L47d08c] goto L47d0c0;
}
