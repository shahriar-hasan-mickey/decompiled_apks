record `io.reactivex.rxjava3.internal.jdk8.ObservableMapOptional$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.observers.BasicFuseableObserver` @kind class {
  `io.reactivex.rxjava3.functions.Function` `io.reactivex.rxjava3.internal.jdk8.ObservableMapOptional$a.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.jdk8.ObservableMapOptional$a` v0 @kind this, `io.reactivex.rxjava3.core.Observer` v1 @kind object, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/ObservableMapOptional$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L47efdc.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/observers/BasicFuseableObserver;.<init>:(Lio/reactivex/rxjava3/core/Observer;)V` @kind direct;
  #L47efe2.  v0.`io.reactivex.rxjava3.internal.jdk8.ObservableMapOptional$a.a` @type ^`io.reactivex.rxjava3.functions.Function` := v2 @kind object;
  #L47efe6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.jdk8.ObservableMapOptional$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/jdk8/ObservableMapOptional$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47eff8.  v0:= v1.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.done` @type ^`boolean` @kind boolean;
  #L47effc.  if v0 == 0 then goto L47f002;
  #L47f000.  return @kind void;
  #L47f002.  v0:= v1.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.sourceMode` @type ^`int`;
  #L47f006.  if v0 == 0 then goto L47f018;
  #L47f00a.  v2:= v1.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L47f00e.  v0:= 0I;
  #L47f010.  call `onNext`(v2, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L47f016.  return @kind void;
  #L47f018.  v0:= v1.`io.reactivex.rxjava3.internal.jdk8.ObservableMapOptional$a.a` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L47f01c.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L47f022.  v2:= temp @kind object;
  #L47f024.  v0:= "The mapper returned a null Optional" @kind object;
  #L47f028.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L47f02e.  v2:= (`java.util.Optional`) v2 @kind object;
  #L47f032.  call temp:= `isPresent`(v2) @signature `Ljava/util/Optional;.isPresent:()Z` @kind virtual;
  #L47f038.  v0:= temp;
  #L47f03a.  if v0 == 0 then goto L47f050;
  #L47f03e.  v0:= v1.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.downstream` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L47f042.  call temp:= `get`(v2) @signature `Ljava/util/Optional;.get:()Ljava/lang/Object;` @kind virtual;
  #L47f048.  v2:= temp @kind object;
  #L47f04a.  call `onNext`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L47f050.  return @kind void;
  #L47f052.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47f054.  call `fail`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/observers/BasicFuseableObserver;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L47f05a.  return @kind void;
  catch `java.lang.Throwable` @[L47f018..L47f032] goto L47f052;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.jdk8.ObservableMapOptional$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/jdk8/ObservableMapOptional$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L47ef88.  v0:= v2.`io.reactivex.rxjava3.internal.observers.BasicFuseableObserver.qd` @type ^`io.reactivex.rxjava3.internal.fuseable.QueueDisposable` @kind object;
  #L47ef8c.  call temp:= `poll`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L47ef92.  v0:= temp @kind object;
  #L47ef94.  if v0 != 0 then goto L47ef9c;
  #L47ef98.  v0:= 0I;
  #L47ef9a.  return v0 @kind object;
  #L47ef9c.  v1:= v2.`io.reactivex.rxjava3.internal.jdk8.ObservableMapOptional$a.a` @type ^`io.reactivex.rxjava3.functions.Function` @kind object;
  #L47efa0.  call temp:= `apply`(v1, v0) @signature `Lio/reactivex/rxjava3/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L47efa6.  v0:= temp @kind object;
  #L47efa8.  v1:= "The mapper returned a null Optional" @kind object;
  #L47efac.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L47efb2.  v0:= (`java.util.Optional`) v0 @kind object;
  #L47efb6.  call temp:= `isPresent`(v0) @signature `Ljava/util/Optional;.isPresent:()Z` @kind virtual;
  #L47efbc.  v1:= temp;
  #L47efbe.  if v1 == 0 then goto L47ef88;
  #L47efc2.  call temp:= `get`(v0) @signature `Ljava/util/Optional;.get:()Ljava/lang/Object;` @kind virtual;
  #L47efc8.  v0:= temp @kind object;
  #L47efca.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.jdk8.ObservableMapOptional$a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/rxjava3/internal/jdk8/ObservableMapOptional$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L47ef6c.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/observers/BasicFuseableObserver;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L47ef72.  v1:= temp;
  #L47ef74.  return v1;
}
