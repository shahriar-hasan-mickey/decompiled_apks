record `io.reactivex.rxjava3.parallel.ParallelFlowable` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `void` `<init>`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v0 @kind this) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4eb9d4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4eb9da.  return @kind void;
}
procedure `io.reactivex.rxjava3.parallel.ParallelFlowable` `from`(`org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.from:(Lorg/reactivestreams/Publisher;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4eb6f8.  call temp:= `getRuntime`() @signature `Ljava/lang/Runtime;.getRuntime:()Ljava/lang/Runtime;` @kind static;
  #L4eb6fe.  v0:= temp @kind object;
  #L4eb700.  call temp:= `availableProcessors`(v0) @signature `Ljava/lang/Runtime;.availableProcessors:()I` @kind virtual;
  #L4eb706.  v0:= temp;
  #L4eb708.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Flowable;.bufferSize:()I` @kind static;
  #L4eb70e.  v1:= temp;
  #L4eb710.  call temp:= `from`(v2, v0, v1) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.from:(Lorg/reactivestreams/Publisher;II)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @kind static;
  #L4eb716.  v2:= temp @kind object;
  #L4eb718.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.parallel.ParallelFlowable` `from`(`org.reactivestreams.Publisher` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.from:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4eb72c.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Flowable;.bufferSize:()I` @kind static;
  #L4eb732.  v0:= temp;
  #L4eb734.  call temp:= `from`(v1, v2, v0) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.from:(Lorg/reactivestreams/Publisher;II)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @kind static;
  #L4eb73a.  v1:= temp @kind object;
  #L4eb73c.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.parallel.ParallelFlowable` `from`(`org.reactivestreams.Publisher` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.from:(Lorg/reactivestreams/Publisher;II)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4eb750.  v0:= "source is null" @kind object;
  #L4eb754.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eb75a.  v0:= "parallelism" @kind object;
  #L4eb75e.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4eb764.  v0:= "prefetch" @kind object;
  #L4eb768.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4eb76e.  v0:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher`;
  #L4eb772.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromPublisher;.<init>:(Lorg/reactivestreams/Publisher;II)V` @kind direct;
  #L4eb778.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @kind static;
  #L4eb77e.  v1:= temp @kind object;
  #L4eb780.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.parallel.ParallelFlowable` `fromArray`(`org.reactivestreams.Publisher`[] v1 @kind object) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.fromArray:([Lorg/reactivestreams/Publisher;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4eb794.  v0:= "publishers is null" @kind object;
  #L4eb798.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eb79e.  v0:= length @variable v1;
  #L4eb7a0.  if v0 == 0 then goto L4eb7b8;
  #L4eb7a4.  v0:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelFromArray`;
  #L4eb7a8.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFromArray;.<init>:([Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L4eb7ae.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @kind static;
  #L4eb7b4.  v1:= temp @kind object;
  #L4eb7b6.  return v1 @kind object;
  #L4eb7b8.  v1:= new `java.lang.IllegalArgumentException`;
  #L4eb7bc.  v0:= "Zero publishers not supported" @kind object;
  #L4eb7c0.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4eb7c6.  throw v1;
}
procedure `io.reactivex.rxjava3.core.Flowable` `collect`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v1 @kind this, `java.util.stream.Collector` v2 @kind object) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.collect:(Ljava/util/stream/Collector;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4eae34.  v0:= "collector is null" @kind object;
  #L4eae38.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eae3e.  v0:= new `io.reactivex.rxjava3.internal.jdk8.ParallelCollector`;
  #L4eae42.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelCollector;.<init>:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;Ljava/util/stream/Collector;)V` @kind direct;
  #L4eae48.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Flowable;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L4eae4e.  v2:= temp @kind object;
  #L4eae50.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.parallel.ParallelFlowable` `collect`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.rxjava3.functions.Supplier` v2 @kind object, `io.reactivex.rxjava3.functions.BiConsumer` v3 @kind object) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.collect:(Lio/reactivex/rxjava3/functions/Supplier;Lio/reactivex/rxjava3/functions/BiConsumer;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4eb064.  v0:= "collectionSupplier is null" @kind object;
  #L4eb068.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eb06e.  v0:= "collector is null" @kind object;
  #L4eb072.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eb078.  v0:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelCollect`;
  #L4eb07c.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelCollect;.<init>:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;Lio/reactivex/rxjava3/functions/Supplier;Lio/reactivex/rxjava3/functions/BiConsumer;)V` @kind direct;
  #L4eb082.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @kind static;
  #L4eb088.  v2:= temp @kind object;
  #L4eb08a.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.parallel.ParallelFlowable` `compose`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.rxjava3.parallel.ParallelTransformer` v2 @kind object) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.compose:(Lio/reactivex/rxjava3/parallel/ParallelTransformer;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4eb09c.  v0:= "composer is null" @kind object;
  #L4eb0a0.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eb0a6.  v2:= (`io.reactivex.rxjava3.parallel.ParallelTransformer`) v2 @kind object;
  #L4eb0aa.  call temp:= `apply`(v2, v1) @signature `Lio/reactivex/rxjava3/parallel/ParallelTransformer;.apply:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @kind interface;
  #L4eb0b0.  v2:= temp @kind object;
  #L4eb0b2.  call temp:= `onAssembly`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @kind static;
  #L4eb0b8.  v2:= temp @kind object;
  #L4eb0ba.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.parallel.ParallelFlowable` `concatMap`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.concatMap:(Lio/reactivex/rxjava3/functions/Function;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4eb0cc.  v0:= 2I;
  #L4eb0ce.  call temp:= `concatMap`(v1, v2, v0) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.concatMap:(Lio/reactivex/rxjava3/functions/Function;I)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @kind virtual;
  #L4eb0d4.  v2:= temp @kind object;
  #L4eb0d6.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.parallel.ParallelFlowable` `concatMap`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v2 @kind this, `io.reactivex.rxjava3.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.concatMap:(Lio/reactivex/rxjava3/functions/Function;I)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4eb0e8.  v0:= "mapper is null" @kind object;
  #L4eb0ec.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eb0f2.  v0:= "prefetch" @kind object;
  #L4eb0f6.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4eb0fc.  v0:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelConcatMap`;
  #L4eb100.  v1:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4eb104.  call `<init>`(v0, v2, v3, v4, v1) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelConcatMap;.<init>:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;Lio/reactivex/rxjava3/functions/Function;ILio/reactivex/rxjava3/internal/util/ErrorMode;)V` @kind direct;
  #L4eb10a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @kind static;
  #L4eb110.  v3:= temp @kind object;
  #L4eb112.  return v3 @kind object;
}
procedure `io.reactivex.rxjava3.parallel.ParallelFlowable` `concatMapDelayError`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `int` v3 , `boolean` v4 ) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.concatMapDelayError:(Lio/reactivex/rxjava3/functions/Function;IZ)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4eb140.  v0:= "mapper is null" @kind object;
  #L4eb144.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eb14a.  v0:= "prefetch" @kind object;
  #L4eb14e.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4eb154.  v0:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelConcatMap`;
  #L4eb158.  if v4 == 0 then goto L4eb162;
  #L4eb15c.  v4:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.END` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4eb160.  goto L4eb166;
  #L4eb162.  v4:= `@@io.reactivex.rxjava3.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.rxjava3.internal.util.ErrorMode` @kind object;
  #L4eb166.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelConcatMap;.<init>:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;Lio/reactivex/rxjava3/functions/Function;ILio/reactivex/rxjava3/internal/util/ErrorMode;)V` @kind direct;
  #L4eb16c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @kind static;
  #L4eb172.  v2:= temp @kind object;
  #L4eb174.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.parallel.ParallelFlowable` `concatMapDelayError`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.concatMapDelayError:(Lio/reactivex/rxjava3/functions/Function;Z)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4eb124.  v0:= 2I;
  #L4eb126.  call temp:= `concatMapDelayError`(v1, v2, v0, v3) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.concatMapDelayError:(Lio/reactivex/rxjava3/functions/Function;IZ)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @kind virtual;
  #L4eb12c.  v2:= temp @kind object;
  #L4eb12e.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.parallel.ParallelFlowable` `doAfterNext`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v11 @kind this, `io.reactivex.rxjava3.functions.Consumer` v12 @kind object) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.doAfterNext:(Lio/reactivex/rxjava3/functions/Consumer;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L4eb188.  v0:= "onAfterNext is null" @kind object;
  #L4eb18c.  call temp:= `requireNonNull`(v12, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eb192.  v0:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek`;
  #L4eb196.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L4eb19c.  v3:= temp @kind object;
  #L4eb19e.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L4eb1a4.  v5:= temp @kind object;
  #L4eb1a6.  v10:= `@@io.reactivex.rxjava3.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L4eb1aa.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L4eb1b0.  v8:= temp @kind object;
  #L4eb1b2.  v9:= `@@io.reactivex.rxjava3.internal.functions.Functions.EMPTY_LONG_CONSUMER` @type ^`io.reactivex.rxjava3.functions.LongConsumer` @kind object;
  #L4eb1b6.  v1:= v0 @kind object;
  #L4eb1b8.  v2:= v11 @kind object;
  #L4eb1ba.  v4:= v12 @kind object;
  #L4eb1bc.  v6:= v10 @kind object;
  #L4eb1be.  v7:= v10 @kind object;
  #L4eb1c0.  call `<init>`(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelPeek;.<init>:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;Lio/reactivex/rxjava3/functions/Action;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/LongConsumer;Lio/reactivex/rxjava3/functions/Action;)V` @kind direct;
  #L4eb1c6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @kind static;
  #L4eb1cc.  v12:= temp @kind object;
  #L4eb1ce.  return v12 @kind object;
}
procedure `io.reactivex.rxjava3.parallel.ParallelFlowable` `doAfterTerminated`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v11 @kind this, `io.reactivex.rxjava3.functions.Action` v12 @kind object) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.doAfterTerminated:(Lio/reactivex/rxjava3/functions/Action;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L4eb1e0.  v0:= "onAfterTerminate is null" @kind object;
  #L4eb1e4.  call temp:= `requireNonNull`(v12, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eb1ea.  v0:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek`;
  #L4eb1ee.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L4eb1f4.  v3:= temp @kind object;
  #L4eb1f6.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L4eb1fc.  v4:= temp @kind object;
  #L4eb1fe.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L4eb204.  v5:= temp @kind object;
  #L4eb206.  v10:= `@@io.reactivex.rxjava3.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L4eb20a.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L4eb210.  v8:= temp @kind object;
  #L4eb212.  v9:= `@@io.reactivex.rxjava3.internal.functions.Functions.EMPTY_LONG_CONSUMER` @type ^`io.reactivex.rxjava3.functions.LongConsumer` @kind object;
  #L4eb216.  v1:= v0 @kind object;
  #L4eb218.  v2:= v11 @kind object;
  #L4eb21a.  v6:= v10 @kind object;
  #L4eb21c.  v7:= v12 @kind object;
  #L4eb21e.  call `<init>`(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelPeek;.<init>:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;Lio/reactivex/rxjava3/functions/Action;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/LongConsumer;Lio/reactivex/rxjava3/functions/Action;)V` @kind direct;
  #L4eb224.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @kind static;
  #L4eb22a.  v12:= temp @kind object;
  #L4eb22c.  return v12 @kind object;
}
procedure `io.reactivex.rxjava3.parallel.ParallelFlowable` `doOnCancel`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v11 @kind this, `io.reactivex.rxjava3.functions.Action` v12 @kind object) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.doOnCancel:(Lio/reactivex/rxjava3/functions/Action;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L4eb240.  v0:= "onCancel is null" @kind object;
  #L4eb244.  call temp:= `requireNonNull`(v12, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eb24a.  v0:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek`;
  #L4eb24e.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L4eb254.  v3:= temp @kind object;
  #L4eb256.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L4eb25c.  v4:= temp @kind object;
  #L4eb25e.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L4eb264.  v5:= temp @kind object;
  #L4eb266.  v7:= `@@io.reactivex.rxjava3.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L4eb26a.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L4eb270.  v8:= temp @kind object;
  #L4eb272.  v9:= `@@io.reactivex.rxjava3.internal.functions.Functions.EMPTY_LONG_CONSUMER` @type ^`io.reactivex.rxjava3.functions.LongConsumer` @kind object;
  #L4eb276.  v1:= v0 @kind object;
  #L4eb278.  v2:= v11 @kind object;
  #L4eb27a.  v6:= v7 @kind object;
  #L4eb27c.  v10:= v12 @kind object;
  #L4eb27e.  call `<init>`(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelPeek;.<init>:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;Lio/reactivex/rxjava3/functions/Action;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/LongConsumer;Lio/reactivex/rxjava3/functions/Action;)V` @kind direct;
  #L4eb284.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @kind static;
  #L4eb28a.  v12:= temp @kind object;
  #L4eb28c.  return v12 @kind object;
}
procedure `io.reactivex.rxjava3.parallel.ParallelFlowable` `doOnComplete`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v11 @kind this, `io.reactivex.rxjava3.functions.Action` v12 @kind object) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.doOnComplete:(Lio/reactivex/rxjava3/functions/Action;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L4eb2a0.  v0:= "onComplete is null" @kind object;
  #L4eb2a4.  call temp:= `requireNonNull`(v12, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eb2aa.  v0:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek`;
  #L4eb2ae.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L4eb2b4.  v3:= temp @kind object;
  #L4eb2b6.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L4eb2bc.  v4:= temp @kind object;
  #L4eb2be.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L4eb2c4.  v5:= temp @kind object;
  #L4eb2c6.  v10:= `@@io.reactivex.rxjava3.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L4eb2ca.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L4eb2d0.  v8:= temp @kind object;
  #L4eb2d2.  v9:= `@@io.reactivex.rxjava3.internal.functions.Functions.EMPTY_LONG_CONSUMER` @type ^`io.reactivex.rxjava3.functions.LongConsumer` @kind object;
  #L4eb2d6.  v1:= v0 @kind object;
  #L4eb2d8.  v2:= v11 @kind object;
  #L4eb2da.  v6:= v12 @kind object;
  #L4eb2dc.  v7:= v10 @kind object;
  #L4eb2de.  call `<init>`(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelPeek;.<init>:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;Lio/reactivex/rxjava3/functions/Action;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/LongConsumer;Lio/reactivex/rxjava3/functions/Action;)V` @kind direct;
  #L4eb2e4.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @kind static;
  #L4eb2ea.  v12:= temp @kind object;
  #L4eb2ec.  return v12 @kind object;
}
procedure `io.reactivex.rxjava3.parallel.ParallelFlowable` `doOnError`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v11 @kind this, `io.reactivex.rxjava3.functions.Consumer` v12 @kind object) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.doOnError:(Lio/reactivex/rxjava3/functions/Consumer;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L4eb300.  v0:= "onError is null" @kind object;
  #L4eb304.  call temp:= `requireNonNull`(v12, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eb30a.  v0:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek`;
  #L4eb30e.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L4eb314.  v3:= temp @kind object;
  #L4eb316.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L4eb31c.  v4:= temp @kind object;
  #L4eb31e.  v10:= `@@io.reactivex.rxjava3.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L4eb322.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L4eb328.  v8:= temp @kind object;
  #L4eb32a.  v9:= `@@io.reactivex.rxjava3.internal.functions.Functions.EMPTY_LONG_CONSUMER` @type ^`io.reactivex.rxjava3.functions.LongConsumer` @kind object;
  #L4eb32e.  v1:= v0 @kind object;
  #L4eb330.  v2:= v11 @kind object;
  #L4eb332.  v5:= v12 @kind object;
  #L4eb334.  v6:= v10 @kind object;
  #L4eb336.  v7:= v10 @kind object;
  #L4eb338.  call `<init>`(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelPeek;.<init>:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;Lio/reactivex/rxjava3/functions/Action;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/LongConsumer;Lio/reactivex/rxjava3/functions/Action;)V` @kind direct;
  #L4eb33e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @kind static;
  #L4eb344.  v12:= temp @kind object;
  #L4eb346.  return v12 @kind object;
}
procedure `io.reactivex.rxjava3.parallel.ParallelFlowable` `doOnNext`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v11 @kind this, `io.reactivex.rxjava3.functions.Consumer` v12 @kind object) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.doOnNext:(Lio/reactivex/rxjava3/functions/Consumer;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L4eb358.  v0:= "onNext is null" @kind object;
  #L4eb35c.  call temp:= `requireNonNull`(v12, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eb362.  v0:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek`;
  #L4eb366.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L4eb36c.  v4:= temp @kind object;
  #L4eb36e.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L4eb374.  v5:= temp @kind object;
  #L4eb376.  v10:= `@@io.reactivex.rxjava3.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L4eb37a.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L4eb380.  v8:= temp @kind object;
  #L4eb382.  v9:= `@@io.reactivex.rxjava3.internal.functions.Functions.EMPTY_LONG_CONSUMER` @type ^`io.reactivex.rxjava3.functions.LongConsumer` @kind object;
  #L4eb386.  v1:= v0 @kind object;
  #L4eb388.  v2:= v11 @kind object;
  #L4eb38a.  v3:= v12 @kind object;
  #L4eb38c.  v6:= v10 @kind object;
  #L4eb38e.  v7:= v10 @kind object;
  #L4eb390.  call `<init>`(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelPeek;.<init>:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;Lio/reactivex/rxjava3/functions/Action;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/LongConsumer;Lio/reactivex/rxjava3/functions/Action;)V` @kind direct;
  #L4eb396.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @kind static;
  #L4eb39c.  v12:= temp @kind object;
  #L4eb39e.  return v12 @kind object;
}
procedure `io.reactivex.rxjava3.parallel.ParallelFlowable` `doOnNext`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.rxjava3.functions.Consumer` v2 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.doOnNext:(Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/BiFunction;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4eb3b0.  v0:= "onNext is null" @kind object;
  #L4eb3b4.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eb3ba.  v0:= "errorHandler is null" @kind object;
  #L4eb3be.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eb3c4.  v0:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry`;
  #L4eb3c8.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry;.<init>:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/BiFunction;)V` @kind direct;
  #L4eb3ce.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @kind static;
  #L4eb3d4.  v2:= temp @kind object;
  #L4eb3d6.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.parallel.ParallelFlowable` `doOnNext`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.rxjava3.functions.Consumer` v2 @kind object, `io.reactivex.rxjava3.parallel.ParallelFailureHandling` v3 @kind object) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.doOnNext:(Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/parallel/ParallelFailureHandling;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4eb3e8.  v0:= "onNext is null" @kind object;
  #L4eb3ec.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eb3f2.  v0:= "errorHandler is null" @kind object;
  #L4eb3f6.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eb3fc.  v0:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry`;
  #L4eb400.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelDoOnNextTry;.<init>:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/BiFunction;)V` @kind direct;
  #L4eb406.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @kind static;
  #L4eb40c.  v2:= temp @kind object;
  #L4eb40e.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.parallel.ParallelFlowable` `doOnRequest`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v11 @kind this, `io.reactivex.rxjava3.functions.LongConsumer` v12 @kind object) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.doOnRequest:(Lio/reactivex/rxjava3/functions/LongConsumer;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L4eb420.  v0:= "onRequest is null" @kind object;
  #L4eb424.  call temp:= `requireNonNull`(v12, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eb42a.  v0:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek`;
  #L4eb42e.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L4eb434.  v3:= temp @kind object;
  #L4eb436.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L4eb43c.  v4:= temp @kind object;
  #L4eb43e.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L4eb444.  v5:= temp @kind object;
  #L4eb446.  v10:= `@@io.reactivex.rxjava3.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L4eb44a.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L4eb450.  v8:= temp @kind object;
  #L4eb452.  v1:= v0 @kind object;
  #L4eb454.  v2:= v11 @kind object;
  #L4eb456.  v6:= v10 @kind object;
  #L4eb458.  v7:= v10 @kind object;
  #L4eb45a.  v9:= v12 @kind object;
  #L4eb45c.  call `<init>`(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelPeek;.<init>:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;Lio/reactivex/rxjava3/functions/Action;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/LongConsumer;Lio/reactivex/rxjava3/functions/Action;)V` @kind direct;
  #L4eb462.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @kind static;
  #L4eb468.  v12:= temp @kind object;
  #L4eb46a.  return v12 @kind object;
}
procedure `io.reactivex.rxjava3.parallel.ParallelFlowable` `doOnSubscribe`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v11 @kind this, `io.reactivex.rxjava3.functions.Consumer` v12 @kind object) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.doOnSubscribe:(Lio/reactivex/rxjava3/functions/Consumer;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L4eb47c.  v0:= "onSubscribe is null" @kind object;
  #L4eb480.  call temp:= `requireNonNull`(v12, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eb486.  v0:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek`;
  #L4eb48a.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L4eb490.  v3:= temp @kind object;
  #L4eb492.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L4eb498.  v4:= temp @kind object;
  #L4eb49a.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/rxjava3/functions/Consumer;` @kind static;
  #L4eb4a0.  v5:= temp @kind object;
  #L4eb4a2.  v10:= `@@io.reactivex.rxjava3.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.rxjava3.functions.Action` @kind object;
  #L4eb4a6.  v9:= `@@io.reactivex.rxjava3.internal.functions.Functions.EMPTY_LONG_CONSUMER` @type ^`io.reactivex.rxjava3.functions.LongConsumer` @kind object;
  #L4eb4aa.  v1:= v0 @kind object;
  #L4eb4ac.  v2:= v11 @kind object;
  #L4eb4ae.  v6:= v10 @kind object;
  #L4eb4b0.  v7:= v10 @kind object;
  #L4eb4b2.  v8:= v12 @kind object;
  #L4eb4b4.  call `<init>`(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelPeek;.<init>:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/Action;Lio/reactivex/rxjava3/functions/Action;Lio/reactivex/rxjava3/functions/Consumer;Lio/reactivex/rxjava3/functions/LongConsumer;Lio/reactivex/rxjava3/functions/Action;)V` @kind direct;
  #L4eb4ba.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @kind static;
  #L4eb4c0.  v12:= temp @kind object;
  #L4eb4c2.  return v12 @kind object;
}
procedure `io.reactivex.rxjava3.parallel.ParallelFlowable` `filter`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.rxjava3.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.filter:(Lio/reactivex/rxjava3/functions/Predicate;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4eb4d4.  v0:= "predicate is null" @kind object;
  #L4eb4d8.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eb4de.  v0:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter`;
  #L4eb4e2.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilter;.<init>:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;Lio/reactivex/rxjava3/functions/Predicate;)V` @kind direct;
  #L4eb4e8.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @kind static;
  #L4eb4ee.  v2:= temp @kind object;
  #L4eb4f0.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.parallel.ParallelFlowable` `filter`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.rxjava3.functions.Predicate` v2 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.filter:(Lio/reactivex/rxjava3/functions/Predicate;Lio/reactivex/rxjava3/functions/BiFunction;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4eb504.  v0:= "predicate is null" @kind object;
  #L4eb508.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eb50e.  v0:= "errorHandler is null" @kind object;
  #L4eb512.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eb518.  v0:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry`;
  #L4eb51c.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilterTry;.<init>:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;Lio/reactivex/rxjava3/functions/Predicate;Lio/reactivex/rxjava3/functions/BiFunction;)V` @kind direct;
  #L4eb522.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @kind static;
  #L4eb528.  v2:= temp @kind object;
  #L4eb52a.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.parallel.ParallelFlowable` `filter`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.rxjava3.functions.Predicate` v2 @kind object, `io.reactivex.rxjava3.parallel.ParallelFailureHandling` v3 @kind object) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.filter:(Lio/reactivex/rxjava3/functions/Predicate;Lio/reactivex/rxjava3/parallel/ParallelFailureHandling;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4eb53c.  v0:= "predicate is null" @kind object;
  #L4eb540.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eb546.  v0:= "errorHandler is null" @kind object;
  #L4eb54a.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eb550.  v0:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry`;
  #L4eb554.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFilterTry;.<init>:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;Lio/reactivex/rxjava3/functions/Predicate;Lio/reactivex/rxjava3/functions/BiFunction;)V` @kind direct;
  #L4eb55a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @kind static;
  #L4eb560.  v2:= temp @kind object;
  #L4eb562.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.parallel.ParallelFlowable` `flatMap`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v3 @kind this, `io.reactivex.rxjava3.functions.Function` v4 @kind object) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.flatMap:(Lio/reactivex/rxjava3/functions/Function;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4eb574.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Flowable;.bufferSize:()I` @kind static;
  #L4eb57a.  v0:= temp;
  #L4eb57c.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Flowable;.bufferSize:()I` @kind static;
  #L4eb582.  v1:= temp;
  #L4eb584.  v2:= 0I;
  #L4eb586.  call temp:= `flatMap`(v3, v4, v2, v0, v1) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.flatMap:(Lio/reactivex/rxjava3/functions/Function;ZII)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @kind virtual;
  #L4eb58c.  v4:= temp @kind object;
  #L4eb58e.  return v4 @kind object;
}
procedure `io.reactivex.rxjava3.parallel.ParallelFlowable` `flatMap`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v2 @kind this, `io.reactivex.rxjava3.functions.Function` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.flatMap:(Lio/reactivex/rxjava3/functions/Function;Z)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4eb5a0.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Flowable;.bufferSize:()I` @kind static;
  #L4eb5a6.  v0:= temp;
  #L4eb5a8.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Flowable;.bufferSize:()I` @kind static;
  #L4eb5ae.  v1:= temp;
  #L4eb5b0.  call temp:= `flatMap`(v2, v3, v4, v0, v1) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.flatMap:(Lio/reactivex/rxjava3/functions/Function;ZII)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @kind virtual;
  #L4eb5b6.  v3:= temp @kind object;
  #L4eb5b8.  return v3 @kind object;
}
procedure `io.reactivex.rxjava3.parallel.ParallelFlowable` `flatMap`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.flatMap:(Lio/reactivex/rxjava3/functions/Function;ZI)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4eb5cc.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Flowable;.bufferSize:()I` @kind static;
  #L4eb5d2.  v0:= temp;
  #L4eb5d4.  call temp:= `flatMap`(v1, v2, v3, v4, v0) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.flatMap:(Lio/reactivex/rxjava3/functions/Function;ZII)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @kind virtual;
  #L4eb5da.  v2:= temp @kind object;
  #L4eb5dc.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.parallel.ParallelFlowable` `flatMap`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v7 @kind this, `io.reactivex.rxjava3.functions.Function` v8 @kind object, `boolean` v9 , `int` v10 , `int` v11 ) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.flatMap:(Lio/reactivex/rxjava3/functions/Function;ZII)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4eb5f0.  v0:= "mapper is null" @kind object;
  #L4eb5f4.  call temp:= `requireNonNull`(v8, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eb5fa.  v0:= "maxConcurrency" @kind object;
  #L4eb5fe.  call temp:= `verifyPositive`(v10, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4eb604.  v0:= "prefetch" @kind object;
  #L4eb608.  call temp:= `verifyPositive`(v11, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4eb60e.  v0:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMap`;
  #L4eb612.  v1:= v0 @kind object;
  #L4eb614.  v2:= v7 @kind object;
  #L4eb616.  v3:= v8 @kind object;
  #L4eb618.  v4:= v9;
  #L4eb61a.  v5:= v10;
  #L4eb61c.  v6:= v11;
  #L4eb61e.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFlatMap;.<init>:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;Lio/reactivex/rxjava3/functions/Function;ZII)V` @kind direct;
  #L4eb624.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @kind static;
  #L4eb62a.  v8:= temp @kind object;
  #L4eb62c.  return v8 @kind object;
}
procedure `io.reactivex.rxjava3.parallel.ParallelFlowable` `flatMapIterable`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.flatMapIterable:(Lio/reactivex/rxjava3/functions/Function;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4eb640.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Flowable;.bufferSize:()I` @kind static;
  #L4eb646.  v0:= temp;
  #L4eb648.  call temp:= `flatMapIterable`(v1, v2, v0) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.flatMapIterable:(Lio/reactivex/rxjava3/functions/Function;I)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @kind virtual;
  #L4eb64e.  v2:= temp @kind object;
  #L4eb650.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.parallel.ParallelFlowable` `flatMapIterable`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.flatMapIterable:(Lio/reactivex/rxjava3/functions/Function;I)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4eb664.  v0:= "mapper is null" @kind object;
  #L4eb668.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eb66e.  v0:= "bufferSize" @kind object;
  #L4eb672.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4eb678.  v0:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMapIterable`;
  #L4eb67c.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelFlatMapIterable;.<init>:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;Lio/reactivex/rxjava3/functions/Function;I)V` @kind direct;
  #L4eb682.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @kind static;
  #L4eb688.  v2:= temp @kind object;
  #L4eb68a.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.parallel.ParallelFlowable` `flatMapStream`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.flatMapStream:(Lio/reactivex/rxjava3/functions/Function;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4eb69c.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Flowable;.bufferSize:()I` @kind static;
  #L4eb6a2.  v0:= temp;
  #L4eb6a4.  call temp:= `flatMapStream`(v1, v2, v0) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.flatMapStream:(Lio/reactivex/rxjava3/functions/Function;I)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @kind virtual;
  #L4eb6aa.  v2:= temp @kind object;
  #L4eb6ac.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.parallel.ParallelFlowable` `flatMapStream`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.flatMapStream:(Lio/reactivex/rxjava3/functions/Function;I)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4eb6c0.  v0:= "mapper is null" @kind object;
  #L4eb6c4.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eb6ca.  v0:= "prefetch" @kind object;
  #L4eb6ce.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4eb6d4.  v0:= new `io.reactivex.rxjava3.internal.jdk8.ParallelFlatMapStream`;
  #L4eb6d8.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelFlatMapStream;.<init>:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;Lio/reactivex/rxjava3/functions/Function;I)V` @kind direct;
  #L4eb6de.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @kind static;
  #L4eb6e4.  v2:= temp @kind object;
  #L4eb6e6.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.parallel.ParallelFlowable` `map`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.map:(Lio/reactivex/rxjava3/functions/Function;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4eb7d8.  v0:= "mapper is null" @kind object;
  #L4eb7dc.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eb7e2.  v0:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelMap`;
  #L4eb7e6.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMap;.<init>:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;Lio/reactivex/rxjava3/functions/Function;)V` @kind direct;
  #L4eb7ec.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @kind static;
  #L4eb7f2.  v2:= temp @kind object;
  #L4eb7f4.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.parallel.ParallelFlowable` `map`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.map:(Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/BiFunction;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4eb808.  v0:= "mapper is null" @kind object;
  #L4eb80c.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eb812.  v0:= "errorHandler is null" @kind object;
  #L4eb816.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eb81c.  v0:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry`;
  #L4eb820.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry;.<init>:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/BiFunction;)V` @kind direct;
  #L4eb826.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @kind static;
  #L4eb82c.  v2:= temp @kind object;
  #L4eb82e.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.parallel.ParallelFlowable` `map`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `io.reactivex.rxjava3.parallel.ParallelFailureHandling` v3 @kind object) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.map:(Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/parallel/ParallelFailureHandling;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4eb840.  v0:= "mapper is null" @kind object;
  #L4eb844.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eb84a.  v0:= "errorHandler is null" @kind object;
  #L4eb84e.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eb854.  v0:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry`;
  #L4eb858.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelMapTry;.<init>:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/BiFunction;)V` @kind direct;
  #L4eb85e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @kind static;
  #L4eb864.  v2:= temp @kind object;
  #L4eb866.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.parallel.ParallelFlowable` `mapOptional`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.rxjava3.functions.Function` v2 @kind object) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.mapOptional:(Lio/reactivex/rxjava3/functions/Function;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4eb878.  v0:= "mapper is null" @kind object;
  #L4eb87c.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eb882.  v0:= new `io.reactivex.rxjava3.internal.jdk8.ParallelMapOptional`;
  #L4eb886.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapOptional;.<init>:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;Lio/reactivex/rxjava3/functions/Function;)V` @kind direct;
  #L4eb88c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @kind static;
  #L4eb892.  v2:= temp @kind object;
  #L4eb894.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.parallel.ParallelFlowable` `mapOptional`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.mapOptional:(Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/BiFunction;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4eb8a8.  v0:= "mapper is null" @kind object;
  #L4eb8ac.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eb8b2.  v0:= "errorHandler is null" @kind object;
  #L4eb8b6.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eb8bc.  v0:= new `io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional`;
  #L4eb8c0.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional;.<init>:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/BiFunction;)V` @kind direct;
  #L4eb8c6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @kind static;
  #L4eb8cc.  v2:= temp @kind object;
  #L4eb8ce.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.parallel.ParallelFlowable` `mapOptional`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.rxjava3.functions.Function` v2 @kind object, `io.reactivex.rxjava3.parallel.ParallelFailureHandling` v3 @kind object) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.mapOptional:(Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/parallel/ParallelFailureHandling;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4eb8e0.  v0:= "mapper is null" @kind object;
  #L4eb8e4.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eb8ea.  v0:= "errorHandler is null" @kind object;
  #L4eb8ee.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eb8f4.  v0:= new `io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptional`;
  #L4eb8f8.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/rxjava3/internal/jdk8/ParallelMapTryOptional;.<init>:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;Lio/reactivex/rxjava3/functions/Function;Lio/reactivex/rxjava3/functions/BiFunction;)V` @kind direct;
  #L4eb8fe.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @kind static;
  #L4eb904.  v2:= temp @kind object;
  #L4eb906.  return v2 @kind object;
}
procedure `int` `parallelism`() @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.parallelism:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `io.reactivex.rxjava3.core.Flowable` `reduce`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.rxjava3.functions.BiFunction` v2 @kind object) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.reduce:(Lio/reactivex/rxjava3/functions/BiFunction;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4eae64.  v0:= "reducer is null" @kind object;
  #L4eae68.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eae6e.  v0:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull`;
  #L4eae72.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelReduceFull;.<init>:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;Lio/reactivex/rxjava3/functions/BiFunction;)V` @kind direct;
  #L4eae78.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Flowable;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L4eae7e.  v2:= temp @kind object;
  #L4eae80.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.parallel.ParallelFlowable` `reduce`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.rxjava3.functions.Supplier` v2 @kind object, `io.reactivex.rxjava3.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.reduce:(Lio/reactivex/rxjava3/functions/Supplier;Lio/reactivex/rxjava3/functions/BiFunction;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4eb918.  v0:= "initialSupplier is null" @kind object;
  #L4eb91c.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eb922.  v0:= "reducer is null" @kind object;
  #L4eb926.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eb92c.  v0:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelReduce`;
  #L4eb930.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelReduce;.<init>:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;Lio/reactivex/rxjava3/functions/Supplier;Lio/reactivex/rxjava3/functions/BiFunction;)V` @kind direct;
  #L4eb936.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @kind static;
  #L4eb93c.  v2:= temp @kind object;
  #L4eb93e.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.parallel.ParallelFlowable` `runOn`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.rxjava3.core.Scheduler` v2 @kind object) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.runOn:(Lio/reactivex/rxjava3/core/Scheduler;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4eb950.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Flowable;.bufferSize:()I` @kind static;
  #L4eb956.  v0:= temp;
  #L4eb958.  call temp:= `runOn`(v1, v2, v0) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.runOn:(Lio/reactivex/rxjava3/core/Scheduler;I)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @kind virtual;
  #L4eb95e.  v2:= temp @kind object;
  #L4eb960.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.parallel.ParallelFlowable` `runOn`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.rxjava3.core.Scheduler` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.runOn:(Lio/reactivex/rxjava3/core/Scheduler;I)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4eb974.  v0:= "scheduler is null" @kind object;
  #L4eb978.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eb97e.  v0:= "prefetch" @kind object;
  #L4eb982.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4eb988.  v0:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn`;
  #L4eb98c.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelRunOn;.<init>:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;Lio/reactivex/rxjava3/core/Scheduler;I)V` @kind direct;
  #L4eb992.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @kind static;
  #L4eb998.  v2:= temp @kind object;
  #L4eb99a.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `sequential`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v1 @kind this) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.sequential:()Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4eae94.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Flowable;.bufferSize:()I` @kind static;
  #L4eae9a.  v0:= temp;
  #L4eae9c.  call temp:= `sequential`(v1, v0) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.sequential:(I)Lio/reactivex/rxjava3/core/Flowable;` @kind virtual;
  #L4eaea2.  v0:= temp @kind object;
  #L4eaea4.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `sequential`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.sequential:(I)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4eaeb8.  v0:= "prefetch" @kind object;
  #L4eaebc.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4eaec2.  v0:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin`;
  #L4eaec6.  v1:= 0I;
  #L4eaec8.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin;.<init>:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;IZ)V` @kind direct;
  #L4eaece.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Flowable;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L4eaed4.  v3:= temp @kind object;
  #L4eaed6.  return v3 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `sequentialDelayError`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v1 @kind this) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.sequentialDelayError:()Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4eaee8.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Flowable;.bufferSize:()I` @kind static;
  #L4eaeee.  v0:= temp;
  #L4eaef0.  call temp:= `sequentialDelayError`(v1, v0) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.sequentialDelayError:(I)Lio/reactivex/rxjava3/core/Flowable;` @kind virtual;
  #L4eaef6.  v0:= temp @kind object;
  #L4eaef8.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `sequentialDelayError`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.sequentialDelayError:(I)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4eaf0c.  v0:= "prefetch" @kind object;
  #L4eaf10.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4eaf16.  v0:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin`;
  #L4eaf1a.  v1:= 1I;
  #L4eaf1c.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelJoin;.<init>:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;IZ)V` @kind direct;
  #L4eaf22.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Flowable;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L4eaf28.  v3:= temp @kind object;
  #L4eaf2a.  return v3 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `sorted`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v1 @kind this, `java.util.Comparator` v2 @kind object) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.sorted:(Ljava/util/Comparator;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4eaf3c.  v0:= 16I;
  #L4eaf40.  call temp:= `sorted`(v1, v2, v0) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.sorted:(Ljava/util/Comparator;I)Lio/reactivex/rxjava3/core/Flowable;` @kind virtual;
  #L4eaf46.  v2:= temp @kind object;
  #L4eaf48.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `sorted`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v1 @kind this, `java.util.Comparator` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.sorted:(Ljava/util/Comparator;I)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4eaf5c.  v0:= "comparator is null" @kind object;
  #L4eaf60.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eaf66.  v0:= "capacityHint" @kind object;
  #L4eaf6a.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4eaf70.  call temp:= `parallelism`(v1) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.parallelism:()I` @kind virtual;
  #L4eaf76.  v0:= temp;
  #L4eaf78.  v3:= v3 / v0 @kind int;
  #L4eaf7a.  v3:= v3 + 1;
  #L4eaf7e.  call temp:= `createArrayList`(v3) @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.createArrayList:(I)Lio/reactivex/rxjava3/functions/Supplier;` @kind static;
  #L4eaf84.  v3:= temp @kind object;
  #L4eaf86.  call temp:= `instance`() @signature `Lio/reactivex/rxjava3/internal/util/ListAddBiConsumer;.instance:()Lio/reactivex/rxjava3/functions/BiFunction;` @kind static;
  #L4eaf8c.  v0:= temp @kind object;
  #L4eaf8e.  call temp:= `reduce`(v1, v3, v0) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.reduce:(Lio/reactivex/rxjava3/functions/Supplier;Lio/reactivex/rxjava3/functions/BiFunction;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @kind virtual;
  #L4eaf94.  v3:= temp @kind object;
  #L4eaf96.  v0:= new `io.reactivex.rxjava3.internal.util.SorterFunction`;
  #L4eaf9a.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/SorterFunction;.<init>:(Ljava/util/Comparator;)V` @kind direct;
  #L4eafa0.  call temp:= `map`(v3, v0) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.map:(Lio/reactivex/rxjava3/functions/Function;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @kind virtual;
  #L4eafa6.  v3:= temp @kind object;
  #L4eafa8.  v0:= new `io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin`;
  #L4eafac.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/rxjava3/internal/operators/parallel/ParallelSortedJoin;.<init>:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;Ljava/util/Comparator;)V` @kind direct;
  #L4eafb2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Flowable;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L4eafb8.  v2:= temp @kind object;
  #L4eafba.  return v2 @kind object;
}
procedure `void` `subscribe`(`org.reactivestreams.Subscriber`[] v0 @kind object) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `to`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.rxjava3.parallel.ParallelFlowableConverter` v2 @kind object) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.to:(Lio/reactivex/rxjava3/parallel/ParallelFlowableConverter;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4eb9ac.  v0:= "converter is null" @kind object;
  #L4eb9b0.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eb9b6.  v2:= (`io.reactivex.rxjava3.parallel.ParallelFlowableConverter`) v2 @kind object;
  #L4eb9ba.  call temp:= `apply`(v2, v1) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowableConverter;.apply:(Lio/reactivex/rxjava3/parallel/ParallelFlowable;)Ljava/lang/Object;` @kind interface;
  #L4eb9c0.  v2:= temp @kind object;
  #L4eb9c2.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `toSortedList`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v1 @kind this, `java.util.Comparator` v2 @kind object) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.toSortedList:(Ljava/util/Comparator;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4eafcc.  v0:= 16I;
  #L4eafd0.  call temp:= `toSortedList`(v1, v2, v0) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.toSortedList:(Ljava/util/Comparator;I)Lio/reactivex/rxjava3/core/Flowable;` @kind virtual;
  #L4eafd6.  v2:= temp @kind object;
  #L4eafd8.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.core.Flowable` `toSortedList`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v1 @kind this, `java.util.Comparator` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.toSortedList:(Ljava/util/Comparator;I)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4eafec.  v0:= "comparator is null" @kind object;
  #L4eaff0.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eaff6.  v0:= "capacityHint" @kind object;
  #L4eaffa.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4eb000.  call temp:= `parallelism`(v1) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.parallelism:()I` @kind virtual;
  #L4eb006.  v0:= temp;
  #L4eb008.  v3:= v3 / v0 @kind int;
  #L4eb00a.  v3:= v3 + 1;
  #L4eb00e.  call temp:= `createArrayList`(v3) @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.createArrayList:(I)Lio/reactivex/rxjava3/functions/Supplier;` @kind static;
  #L4eb014.  v3:= temp @kind object;
  #L4eb016.  call temp:= `instance`() @signature `Lio/reactivex/rxjava3/internal/util/ListAddBiConsumer;.instance:()Lio/reactivex/rxjava3/functions/BiFunction;` @kind static;
  #L4eb01c.  v0:= temp @kind object;
  #L4eb01e.  call temp:= `reduce`(v1, v3, v0) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.reduce:(Lio/reactivex/rxjava3/functions/Supplier;Lio/reactivex/rxjava3/functions/BiFunction;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @kind virtual;
  #L4eb024.  v3:= temp @kind object;
  #L4eb026.  v0:= new `io.reactivex.rxjava3.internal.util.SorterFunction`;
  #L4eb02a.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/SorterFunction;.<init>:(Ljava/util/Comparator;)V` @kind direct;
  #L4eb030.  call temp:= `map`(v3, v0) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.map:(Lio/reactivex/rxjava3/functions/Function;)Lio/reactivex/rxjava3/parallel/ParallelFlowable;` @kind virtual;
  #L4eb036.  v3:= temp @kind object;
  #L4eb038.  v0:= new `io.reactivex.rxjava3.internal.util.MergerBiFunction`;
  #L4eb03c.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/MergerBiFunction;.<init>:(Ljava/util/Comparator;)V` @kind direct;
  #L4eb042.  call temp:= `reduce`(v3, v0) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.reduce:(Lio/reactivex/rxjava3/functions/BiFunction;)Lio/reactivex/rxjava3/core/Flowable;` @kind virtual;
  #L4eb048.  v2:= temp @kind object;
  #L4eb04a.  call temp:= `onAssembly`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/rxjava3/core/Flowable;)Lio/reactivex/rxjava3/core/Flowable;` @kind static;
  #L4eb050.  v2:= temp @kind object;
  #L4eb052.  return v2 @kind object;
}
procedure `boolean` `validate`(`io.reactivex.rxjava3.parallel.ParallelFlowable` v5 @kind this, `org.reactivestreams.Subscriber`[] v6 @kind object) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.validate:([Lorg/reactivestreams/Subscriber;)Z` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4eadac.  v0:= "subscribers is null" @kind object;
  #L4eadb0.  call temp:= `requireNonNull`(v6, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4eadb6.  call temp:= `parallelism`(v5) @signature `Lio/reactivex/rxjava3/parallel/ParallelFlowable;.parallelism:()I` @kind virtual;
  #L4eadbc.  v0:= temp;
  #L4eadbe.  v1:= length @variable v6;
  #L4eadc0.  if v1 == v0 then goto L4eae1e;
  #L4eadc4.  v1:= new `java.lang.IllegalArgumentException`;
  #L4eadc8.  v2:= new `java.lang.StringBuilder`;
  #L4eadcc.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4eadd2.  v3:= "parallelism = " @kind object;
  #L4eadd6.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4eaddc.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4eade2.  v0:= ", subscribers = " @kind object;
  #L4eade6.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4eadec.  v0:= length @variable v6;
  #L4eadee.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4eadf4.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4eadfa.  v0:= temp @kind object;
  #L4eadfc.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4eae02.  v0:= length @variable v6;
  #L4eae04.  v2:= 0I;
  #L4eae06.  v3:= 0I;
  #L4eae08.  if v3 >= v0 then goto L4eae1c;
  #L4eae0c.  v4:= v6[v3] @kind object;
  #L4eae10.  call `error`(v1, v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L4eae16.  v3:= v3 + 1;
  #L4eae1a.  goto L4eae08;
  #L4eae1c.  return v2;
  #L4eae1e.  v6:= 1I;
  #L4eae20.  return v6;
}
