record `io.reactivex.rxjava3.observers.BaseTestConsumer` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `boolean` `io.reactivex.rxjava3.observers.BaseTestConsumer.checkSubscriptionOnce` @AccessFlag PROTECTED;
  `long` `io.reactivex.rxjava3.observers.BaseTestConsumer.completions` @AccessFlag PROTECTED;
  `java.util.concurrent.CountDownLatch` `io.reactivex.rxjava3.observers.BaseTestConsumer.done` @AccessFlag PROTECTED_FINAL;
  `java.util.List` `io.reactivex.rxjava3.observers.BaseTestConsumer.errors` @AccessFlag PROTECTED_FINAL;
  `java.lang.Thread` `io.reactivex.rxjava3.observers.BaseTestConsumer.lastThread` @AccessFlag PROTECTED;
  `java.lang.CharSequence` `io.reactivex.rxjava3.observers.BaseTestConsumer.tag` @AccessFlag PROTECTED;
  `boolean` `io.reactivex.rxjava3.observers.BaseTestConsumer.timeout` @AccessFlag PROTECTED;
  `java.util.List` `io.reactivex.rxjava3.observers.BaseTestConsumer.values` @AccessFlag PROTECTED_FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.observers.BaseTestConsumer` v2 @kind this) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4e98e4.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4e98ea.  v0:= new `io.reactivex.rxjava3.internal.util.VolatileSizeArrayList`;
  #L4e98ee.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/util/VolatileSizeArrayList;.<init>:()V` @kind direct;
  #L4e98f4.  v2.`io.reactivex.rxjava3.observers.BaseTestConsumer.values` @type ^`java.util.List` := v0 @kind object;
  #L4e98f8.  v0:= new `io.reactivex.rxjava3.internal.util.VolatileSizeArrayList`;
  #L4e98fc.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/util/VolatileSizeArrayList;.<init>:()V` @kind direct;
  #L4e9902.  v2.`io.reactivex.rxjava3.observers.BaseTestConsumer.errors` @type ^`java.util.List` := v0 @kind object;
  #L4e9906.  v0:= new `java.util.concurrent.CountDownLatch`;
  #L4e990a.  v1:= 1I;
  #L4e990c.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/CountDownLatch;.<init>:(I)V` @kind direct;
  #L4e9912.  v2.`io.reactivex.rxjava3.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` := v0 @kind object;
  #L4e9916.  return @kind void;
}
procedure `java.lang.String` `valueAndClass`(`java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.valueAndClass:(Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4e986c.  if v2 == 0 then goto L4e98b4;
  #L4e9870.  v0:= new `java.lang.StringBuilder`;
  #L4e9874.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4e987a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e9880.  v1:= " (class: " @kind object;
  #L4e9884.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e988a.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4e9890.  v2:= temp @kind object;
  #L4e9892.  call temp:= `getSimpleName`(v2) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L4e9898.  v2:= temp @kind object;
  #L4e989a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e98a0.  v2:= ")" @kind object;
  #L4e98a4.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e98aa.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4e98b0.  v2:= temp @kind object;
  #L4e98b2.  return v2 @kind object;
  #L4e98b4.  v2:= "null" @kind object;
  #L4e98b8.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.observers.BaseTestConsumer` `assertComplete`(`io.reactivex.rxjava3.observers.BaseTestConsumer` v5 @kind this) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.assertComplete:()Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4e8dd4.  v0:= v5.`io.reactivex.rxjava3.observers.BaseTestConsumer.completions` @type ^`long` @kind wide;
  #L4e8dd8.  v2:= 0L;
  #L4e8ddc.  v4:= lcmp(v0, v2);
  #L4e8de0.  if v4 == 0 then goto L4e8e1e;
  #L4e8de4.  v2:= 1L;
  #L4e8de8.  v4:= lcmp(v0, v2);
  #L4e8dec.  if v4 > 0 then goto L4e8df2;
  #L4e8df0.  return v5 @kind object;
  #L4e8df2.  v2:= new `java.lang.StringBuilder`;
  #L4e8df6.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4e8dfc.  v3:= "Multiple completions: " @kind object;
  #L4e8e00.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e8e06.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e8e0c.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4e8e12.  v0:= temp @kind object;
  #L4e8e14.  call temp:= `fail`(v5, v0) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L4e8e1a.  v0:= temp @kind object;
  #L4e8e1c.  throw v0;
  #L4e8e1e.  v0:= "Not completed" @kind object;
  #L4e8e22.  call temp:= `fail`(v5, v0) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L4e8e28.  v0:= temp @kind object;
  #L4e8e2a.  throw v0;
}
procedure `io.reactivex.rxjava3.observers.BaseTestConsumer` `assertEmpty`(`io.reactivex.rxjava3.observers.BaseTestConsumer` v1 @kind this) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.assertEmpty:()Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4e8e3c.  call temp:= `assertSubscribed`(v1) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.assertSubscribed:()Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @kind virtual;
  #L4e8e42.  v0:= temp @kind object;
  #L4e8e44.  call temp:= `assertNoValues`(v0) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.assertNoValues:()Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @kind virtual;
  #L4e8e4a.  v0:= temp @kind object;
  #L4e8e4c.  call temp:= `assertNoErrors`(v0) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.assertNoErrors:()Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @kind virtual;
  #L4e8e52.  v0:= temp @kind object;
  #L4e8e54.  call temp:= `assertNotComplete`(v0) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.assertNotComplete:()Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @kind virtual;
  #L4e8e5a.  v0:= temp @kind object;
  #L4e8e5c.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.observers.BaseTestConsumer` `assertError`(`io.reactivex.rxjava3.observers.BaseTestConsumer` v5 @kind this, `io.reactivex.rxjava3.functions.Predicate` v6 @kind object) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.assertError:(Lio/reactivex/rxjava3/functions/Predicate;)Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4e8e70.  v0:= v5.`io.reactivex.rxjava3.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L4e8e74.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4e8e7a.  v0:= temp;
  #L4e8e7c.  if v0 == 0 then goto L4e8eea;
  #L4e8e80.  v1:= 0I;
  #L4e8e82.  v2:= v5.`io.reactivex.rxjava3.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L4e8e86.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4e8e8c.  v2:= temp @kind object;
  #L4e8e8e.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4e8e94.  v3:= temp;
  #L4e8e96.  v4:= 1I;
  #L4e8e98.  if v3 == 0 then goto L4e8ec4;
  #L4e8e9c.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4e8ea2.  v3:= temp @kind object;
  #L4e8ea4.  v3:= (`java.lang.Throwable`) v3 @kind object;
  #L4e8ea8.  call temp:= `test`(v6, v3) @signature `Lio/reactivex/rxjava3/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L4e8eae.  v3:= temp;
  #L4e8eb0.  if v3 == 0 then goto L4e8e8e;
  #L4e8eb4.  v1:= 1I;
  #L4e8eb6.  goto L4e8ec4;
  #L4e8eb8.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e8eba.  call temp:= `wrapOrThrow`(v6) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4e8ec0.  v6:= temp @kind object;
  #L4e8ec2.  throw v6;
  #L4e8ec4.  if v1 == 0 then goto L4e8edc;
  #L4e8ec8.  if v0 != v4 then goto L4e8ece;
  #L4e8ecc.  return v5 @kind object;
  #L4e8ece.  v6:= "Error present but other errors as well" @kind object;
  #L4e8ed2.  call temp:= `fail`(v5, v6) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L4e8ed8.  v6:= temp @kind object;
  #L4e8eda.  throw v6;
  #L4e8edc.  v6:= "Error not present" @kind object;
  #L4e8ee0.  call temp:= `fail`(v5, v6) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L4e8ee6.  v6:= temp @kind object;
  #L4e8ee8.  throw v6;
  #L4e8eea.  v6:= "No errors" @kind object;
  #L4e8eee.  call temp:= `fail`(v5, v6) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L4e8ef4.  v6:= temp @kind object;
  #L4e8ef6.  throw v6;
  catch `java.lang.Throwable` @[L4e8ea8..L4e8eb0] goto L4e8eb8;
}
procedure `io.reactivex.rxjava3.observers.BaseTestConsumer` `assertError`(`io.reactivex.rxjava3.observers.BaseTestConsumer` v0 @kind this, `java.lang.Class` v1 @kind object) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.assertError:(Ljava/lang/Class;)Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L4e8f14.  call temp:= `isInstanceOf`(v1) @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.isInstanceOf:(Ljava/lang/Class;)Lio/reactivex/rxjava3/functions/Predicate;` @kind static;
  #L4e8f1a.  v1:= temp @kind object;
  #L4e8f1c.  call temp:= `assertError`(v0, v1) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.assertError:(Lio/reactivex/rxjava3/functions/Predicate;)Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @kind virtual;
  #L4e8f22.  v1:= temp @kind object;
  #L4e8f24.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.observers.BaseTestConsumer` `assertError`(`io.reactivex.rxjava3.observers.BaseTestConsumer` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.assertError:(Ljava/lang/Throwable;)Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L4e8f38.  call temp:= `equalsWith`(v1) @signature `Lio/reactivex/rxjava3/internal/functions/Functions;.equalsWith:(Ljava/lang/Object;)Lio/reactivex/rxjava3/functions/Predicate;` @kind static;
  #L4e8f3e.  v1:= temp @kind object;
  #L4e8f40.  call temp:= `assertError`(v0, v1) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.assertError:(Lio/reactivex/rxjava3/functions/Predicate;)Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @kind virtual;
  #L4e8f46.  v1:= temp @kind object;
  #L4e8f48.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.observers.BaseTestConsumer` `assertFailure`(`io.reactivex.rxjava3.observers.BaseTestConsumer` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.Object`[] v3 @kind object) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.assertFailure:(Ljava/lang/Class;[Ljava/lang/Object;)Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4e8f5c.  call temp:= `assertSubscribed`(v1) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.assertSubscribed:()Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @kind virtual;
  #L4e8f62.  v0:= temp @kind object;
  #L4e8f64.  call temp:= `assertValues`(v0, v3) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.assertValues:([Ljava/lang/Object;)Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @kind virtual;
  #L4e8f6a.  v3:= temp @kind object;
  #L4e8f6c.  call temp:= `assertError`(v3, v2) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.assertError:(Ljava/lang/Class;)Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @kind virtual;
  #L4e8f72.  v2:= temp @kind object;
  #L4e8f74.  call temp:= `assertNotComplete`(v2) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.assertNotComplete:()Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @kind virtual;
  #L4e8f7a.  v2:= temp @kind object;
  #L4e8f7c.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.observers.BaseTestConsumer` `assertNoErrors`(`io.reactivex.rxjava3.observers.BaseTestConsumer` v2 @kind this) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.assertNoErrors:()Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4e8f90.  v0:= v2.`io.reactivex.rxjava3.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L4e8f94.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4e8f9a.  v0:= temp;
  #L4e8f9c.  if v0 != 0 then goto L4e8fa2;
  #L4e8fa0.  return v2 @kind object;
  #L4e8fa2.  v0:= new `java.lang.StringBuilder`;
  #L4e8fa6.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4e8fac.  v1:= "Error(s) present: " @kind object;
  #L4e8fb0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e8fb6.  v1:= v2.`io.reactivex.rxjava3.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L4e8fba.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e8fc0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4e8fc6.  v0:= temp @kind object;
  #L4e8fc8.  call temp:= `fail`(v2, v0) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L4e8fce.  v0:= temp @kind object;
  #L4e8fd0.  throw v0;
}
procedure `io.reactivex.rxjava3.observers.BaseTestConsumer` `assertNoValues`(`io.reactivex.rxjava3.observers.BaseTestConsumer` v1 @kind this) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.assertNoValues:()Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4e8fe4.  v0:= 0I;
  #L4e8fe6.  call temp:= `assertValueCount`(v1, v0) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.assertValueCount:(I)Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @kind virtual;
  #L4e8fec.  v0:= temp @kind object;
  #L4e8fee.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.observers.BaseTestConsumer` `assertNotComplete`(`io.reactivex.rxjava3.observers.BaseTestConsumer` v5 @kind this) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.assertNotComplete:()Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4e9000.  v0:= v5.`io.reactivex.rxjava3.observers.BaseTestConsumer.completions` @type ^`long` @kind wide;
  #L4e9004.  v2:= 1L;
  #L4e9008.  v4:= lcmp(v0, v2);
  #L4e900c.  if v4 == 0 then goto L4e9042;
  #L4e9010.  if v4 > 0 then goto L4e9016;
  #L4e9014.  return v5 @kind object;
  #L4e9016.  v2:= new `java.lang.StringBuilder`;
  #L4e901a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4e9020.  v3:= "Multiple completions: " @kind object;
  #L4e9024.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e902a.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e9030.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4e9036.  v0:= temp @kind object;
  #L4e9038.  call temp:= `fail`(v5, v0) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L4e903e.  v0:= temp @kind object;
  #L4e9040.  throw v0;
  #L4e9042.  v0:= "Completed!" @kind object;
  #L4e9046.  call temp:= `fail`(v5, v0) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L4e904c.  v0:= temp @kind object;
  #L4e904e.  throw v0;
}
procedure `io.reactivex.rxjava3.observers.BaseTestConsumer` `assertResult`(`io.reactivex.rxjava3.observers.BaseTestConsumer` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.assertResult:([Ljava/lang/Object;)Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4e9060.  call temp:= `assertSubscribed`(v1) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.assertSubscribed:()Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @kind virtual;
  #L4e9066.  v0:= temp @kind object;
  #L4e9068.  call temp:= `assertValues`(v0, v2) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.assertValues:([Ljava/lang/Object;)Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @kind virtual;
  #L4e906e.  v2:= temp @kind object;
  #L4e9070.  call temp:= `assertNoErrors`(v2) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.assertNoErrors:()Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @kind virtual;
  #L4e9076.  v2:= temp @kind object;
  #L4e9078.  call temp:= `assertComplete`(v2) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.assertComplete:()Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @kind virtual;
  #L4e907e.  v2:= temp @kind object;
  #L4e9080.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.observers.BaseTestConsumer` `assertSubscribed`() @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.assertSubscribed:()Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `io.reactivex.rxjava3.observers.BaseTestConsumer` `assertValue`(`io.reactivex.rxjava3.observers.BaseTestConsumer` v1 @kind this, `io.reactivex.rxjava3.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.assertValue:(Lio/reactivex/rxjava3/functions/Predicate;)Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4e9094.  v0:= 0I;
  #L4e9096.  call temp:= `assertValueAt`(v1, v0, v2) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.assertValueAt:(ILio/reactivex/rxjava3/functions/Predicate;)Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @kind virtual;
  #L4e909c.  v2:= v1.`io.reactivex.rxjava3.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L4e90a0.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4e90a6.  v2:= temp;
  #L4e90a8.  v0:= 1I;
  #L4e90aa.  if v2 > v0 then goto L4e90b0;
  #L4e90ae.  return v1 @kind object;
  #L4e90b0.  v2:= "Value present but other values as well" @kind object;
  #L4e90b4.  call temp:= `fail`(v1, v2) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L4e90ba.  v2:= temp @kind object;
  #L4e90bc.  throw v2;
}
procedure `io.reactivex.rxjava3.observers.BaseTestConsumer` `assertValue`(`io.reactivex.rxjava3.observers.BaseTestConsumer` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.assertValue:(Ljava/lang/Object;)Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4e90d0.  v0:= v4.`io.reactivex.rxjava3.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L4e90d4.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4e90da.  v0:= temp;
  #L4e90dc.  v1:= " but was: " @kind object;
  #L4e90e0.  v2:= "expected: " @kind object;
  #L4e90e4.  v3:= 1I;
  #L4e90e6.  if v0 != v3 then goto L4e914a;
  #L4e90ea.  v0:= v4.`io.reactivex.rxjava3.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L4e90ee.  v3:= 0I;
  #L4e90f0.  call temp:= `get`(v0, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L4e90f6.  v0:= temp @kind object;
  #L4e90f8.  call temp:= `equals`(v5, v0) @signature `Ljava/util/Objects;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L4e90fe.  v3:= temp;
  #L4e9100.  if v3 == 0 then goto L4e9106;
  #L4e9104.  return v4 @kind object;
  #L4e9106.  v3:= new `java.lang.StringBuilder`;
  #L4e910a.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4e9110.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e9116.  call temp:= `valueAndClass`(v5) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.valueAndClass:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L4e911c.  v5:= temp @kind object;
  #L4e911e.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e9124.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e912a.  call temp:= `valueAndClass`(v0) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.valueAndClass:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L4e9130.  v5:= temp @kind object;
  #L4e9132.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e9138.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4e913e.  v5:= temp @kind object;
  #L4e9140.  call temp:= `fail`(v4, v5) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L4e9146.  v5:= temp @kind object;
  #L4e9148.  throw v5;
  #L4e914a.  v0:= new `java.lang.StringBuilder`;
  #L4e914e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4e9154.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e915a.  call temp:= `valueAndClass`(v5) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.valueAndClass:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L4e9160.  v5:= temp @kind object;
  #L4e9162.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e9168.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e916e.  v5:= v4.`io.reactivex.rxjava3.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L4e9172.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e9178.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4e917e.  v5:= temp @kind object;
  #L4e9180.  call temp:= `fail`(v4, v5) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L4e9186.  v5:= temp @kind object;
  #L4e9188.  throw v5;
}
procedure `io.reactivex.rxjava3.observers.BaseTestConsumer` `assertValueAt`(`io.reactivex.rxjava3.observers.BaseTestConsumer` v1 @kind this, `int` v2 , `io.reactivex.rxjava3.functions.Predicate` v3 @kind object) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.assertValueAt:(ILio/reactivex/rxjava3/functions/Predicate;)Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4e919c.  v0:= v1.`io.reactivex.rxjava3.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L4e91a0.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4e91a6.  v0:= temp;
  #L4e91a8.  if v0 == 0 then goto L4e921c;
  #L4e91ac.  v0:= v1.`io.reactivex.rxjava3.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L4e91b0.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4e91b6.  v0:= temp;
  #L4e91b8.  if v2 >= v0 then goto L4e91f0;
  #L4e91bc.  v0:= v1.`io.reactivex.rxjava3.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L4e91c0.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L4e91c6.  v2:= temp @kind object;
  #L4e91c8.  call temp:= `test`(v3, v2) @signature `Lio/reactivex/rxjava3/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L4e91ce.  v2:= temp;
  #L4e91d0.  if v2 == 0 then goto L4e91d6;
  #L4e91d4.  return v1 @kind object;
  #L4e91d6.  v2:= "Value not present" @kind object;
  #L4e91da.  call temp:= `fail`(v1, v2) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L4e91e0.  v2:= temp @kind object;
  #L4e91e2.  throw v2;
  #L4e91e4.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4e91e6.  call temp:= `wrapOrThrow`(v2) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4e91ec.  v2:= temp @kind object;
  #L4e91ee.  throw v2;
  #L4e91f0.  v3:= new `java.lang.StringBuilder`;
  #L4e91f4.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4e91fa.  v0:= "Invalid index: " @kind object;
  #L4e91fe.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e9204.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e920a.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4e9210.  v2:= temp @kind object;
  #L4e9212.  call temp:= `fail`(v1, v2) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L4e9218.  v2:= temp @kind object;
  #L4e921a.  throw v2;
  #L4e921c.  v2:= "No values" @kind object;
  #L4e9220.  call temp:= `fail`(v1, v2) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L4e9226.  v2:= temp @kind object;
  #L4e9228.  throw v2;
  catch `java.lang.Throwable` @[L4e91bc..L4e91d0] goto L4e91e4;
}
procedure `io.reactivex.rxjava3.observers.BaseTestConsumer` `assertValueAt`(`io.reactivex.rxjava3.observers.BaseTestConsumer` v2 @kind this, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.assertValueAt:(ILjava/lang/Object;)Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4e9248.  v0:= v2.`io.reactivex.rxjava3.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L4e924c.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4e9252.  v0:= temp;
  #L4e9254.  if v0 == 0 then goto L4e92ee;
  #L4e9258.  if v3 >= v0 then goto L4e92c2;
  #L4e925c.  v0:= v2.`io.reactivex.rxjava3.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L4e9260.  call temp:= `get`(v0, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L4e9266.  v3:= temp @kind object;
  #L4e9268.  call temp:= `equals`(v4, v3) @signature `Ljava/util/Objects;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L4e926e.  v0:= temp;
  #L4e9270.  if v0 == 0 then goto L4e9276;
  #L4e9274.  return v2 @kind object;
  #L4e9276.  v0:= new `java.lang.StringBuilder`;
  #L4e927a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4e9280.  v1:= "expected: " @kind object;
  #L4e9284.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e928a.  call temp:= `valueAndClass`(v4) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.valueAndClass:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L4e9290.  v4:= temp @kind object;
  #L4e9292.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e9298.  v4:= " but was: " @kind object;
  #L4e929c.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e92a2.  call temp:= `valueAndClass`(v3) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.valueAndClass:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L4e92a8.  v3:= temp @kind object;
  #L4e92aa.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e92b0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4e92b6.  v3:= temp @kind object;
  #L4e92b8.  call temp:= `fail`(v2, v3) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L4e92be.  v3:= temp @kind object;
  #L4e92c0.  throw v3;
  #L4e92c2.  v4:= new `java.lang.StringBuilder`;
  #L4e92c6.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4e92cc.  v0:= "Invalid index: " @kind object;
  #L4e92d0.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e92d6.  call temp:= `append`(v4, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e92dc.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4e92e2.  v3:= temp @kind object;
  #L4e92e4.  call temp:= `fail`(v2, v3) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L4e92ea.  v3:= temp @kind object;
  #L4e92ec.  throw v3;
  #L4e92ee.  v3:= "No values" @kind object;
  #L4e92f2.  call temp:= `fail`(v2, v3) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L4e92f8.  v3:= temp @kind object;
  #L4e92fa.  throw v3;
}
procedure `io.reactivex.rxjava3.observers.BaseTestConsumer` `assertValueCount`(`io.reactivex.rxjava3.observers.BaseTestConsumer` v3 @kind this, `int` v4 ) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.assertValueCount:(I)Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4e930c.  v0:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L4e9310.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4e9316.  v0:= temp;
  #L4e9318.  if v0 != v4 then goto L4e931e;
  #L4e931c.  return v3 @kind object;
  #L4e931e.  v1:= new `java.lang.StringBuilder`;
  #L4e9322.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4e9328.  v2:= "Value counts differ; expected: " @kind object;
  #L4e932c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e9332.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e9338.  v4:= " but was: " @kind object;
  #L4e933c.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e9342.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e9348.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4e934e.  v4:= temp @kind object;
  #L4e9350.  call temp:= `fail`(v3, v4) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L4e9356.  v4:= temp @kind object;
  #L4e9358.  throw v4;
}
procedure `io.reactivex.rxjava3.observers.BaseTestConsumer` `assertValueSequence`(`io.reactivex.rxjava3.observers.BaseTestConsumer` v5 @kind this, `java.lang.Iterable` v6 @kind object) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.assertValueSequence:(Ljava/lang/Iterable;)Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4e936c.  v0:= v5.`io.reactivex.rxjava3.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L4e9370.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4e9376.  v0:= temp @kind object;
  #L4e9378.  call temp:= `iterator`(v6) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4e937e.  v6:= temp @kind object;
  #L4e9380.  v1:= 0I;
  #L4e9382.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4e9388.  v2:= temp;
  #L4e938a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4e9390.  v3:= temp;
  #L4e9392.  if v3 == 0 then goto L4e941a;
  #L4e9396.  if v2 != 0 then goto L4e939c;
  #L4e939a.  goto L4e941a;
  #L4e939c.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4e93a2.  v2:= temp @kind object;
  #L4e93a4.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4e93aa.  v3:= temp @kind object;
  #L4e93ac.  call temp:= `equals`(v2, v3) @signature `Ljava/util/Objects;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L4e93b2.  v4:= temp;
  #L4e93b4.  if v4 == 0 then goto L4e93be;
  #L4e93b8.  v1:= v1 + 1;
  #L4e93bc.  goto L4e9382;
  #L4e93be.  v6:= new `java.lang.StringBuilder`;
  #L4e93c2.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4e93c8.  v0:= "Values at position " @kind object;
  #L4e93cc.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e93d2.  call temp:= `append`(v6, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e93d8.  v0:= " differ; expected: " @kind object;
  #L4e93dc.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e93e2.  call temp:= `valueAndClass`(v2) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.valueAndClass:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L4e93e8.  v0:= temp @kind object;
  #L4e93ea.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e93f0.  v0:= " but was: " @kind object;
  #L4e93f4.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e93fa.  call temp:= `valueAndClass`(v3) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.valueAndClass:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L4e9400.  v0:= temp @kind object;
  #L4e9402.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e9408.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4e940e.  v6:= temp @kind object;
  #L4e9410.  call temp:= `fail`(v5, v6) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L4e9416.  v6:= temp @kind object;
  #L4e9418.  throw v6;
  #L4e941a.  v6:= ")" @kind object;
  #L4e941e.  if v3 != 0 then goto L4e945a;
  #L4e9422.  if v2 != 0 then goto L4e9428;
  #L4e9426.  return v5 @kind object;
  #L4e9428.  v0:= new `java.lang.StringBuilder`;
  #L4e942c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4e9432.  v2:= "Fewer values received than expected (" @kind object;
  #L4e9436.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e943c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e9442.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e9448.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4e944e.  v6:= temp @kind object;
  #L4e9450.  call temp:= `fail`(v5, v6) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L4e9456.  v6:= temp @kind object;
  #L4e9458.  throw v6;
  #L4e945a.  v0:= new `java.lang.StringBuilder`;
  #L4e945e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4e9464.  v2:= "More values received than expected (" @kind object;
  #L4e9468.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e946e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e9474.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e947a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4e9480.  v6:= temp @kind object;
  #L4e9482.  call temp:= `fail`(v5, v6) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L4e9488.  v6:= temp @kind object;
  #L4e948a.  throw v6;
}
procedure `io.reactivex.rxjava3.observers.BaseTestConsumer` `assertValues`(`io.reactivex.rxjava3.observers.BaseTestConsumer` v6 @kind this, `java.lang.Object`[] v7 @kind object) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.assertValues:([Ljava/lang/Object;)Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4e949c.  v0:= v6.`io.reactivex.rxjava3.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L4e94a0.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4e94a6.  v0:= temp;
  #L4e94a8.  v1:= length @variable v7;
  #L4e94aa.  v2:= " but was: " @kind object;
  #L4e94ae.  if v0 != v1 then goto L4e9534;
  #L4e94b2.  v1:= 0I;
  #L4e94b4.  if v1 >= v0 then goto L4e9532;
  #L4e94b8.  v3:= v6.`io.reactivex.rxjava3.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L4e94bc.  call temp:= `get`(v3, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L4e94c2.  v3:= temp @kind object;
  #L4e94c4.  v4:= v7[v1] @kind object;
  #L4e94c8.  call temp:= `equals`(v4, v3) @signature `Ljava/util/Objects;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L4e94ce.  v5:= temp;
  #L4e94d0.  if v5 == 0 then goto L4e94da;
  #L4e94d4.  v1:= v1 + 1;
  #L4e94d8.  goto L4e94b4;
  #L4e94da.  v7:= new `java.lang.StringBuilder`;
  #L4e94de.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4e94e4.  v0:= "Values at position " @kind object;
  #L4e94e8.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e94ee.  call temp:= `append`(v7, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e94f4.  v0:= " differ; expected: " @kind object;
  #L4e94f8.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e94fe.  call temp:= `valueAndClass`(v4) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.valueAndClass:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L4e9504.  v0:= temp @kind object;
  #L4e9506.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e950c.  call temp:= `append`(v7, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e9512.  call temp:= `valueAndClass`(v3) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.valueAndClass:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L4e9518.  v0:= temp @kind object;
  #L4e951a.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e9520.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4e9526.  v7:= temp @kind object;
  #L4e9528.  call temp:= `fail`(v6, v7) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L4e952e.  v7:= temp @kind object;
  #L4e9530.  throw v7;
  #L4e9532.  return v6 @kind object;
  #L4e9534.  v1:= new `java.lang.StringBuilder`;
  #L4e9538.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4e953e.  v3:= "Value count differs; expected: " @kind object;
  #L4e9542.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e9548.  v3:= length @variable v7;
  #L4e954a.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e9550.  v3:= " " @kind object;
  #L4e9554.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e955a.  call temp:= `toString`(v7) @signature `Ljava/util/Arrays;.toString:([Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L4e9560.  v7:= temp @kind object;
  #L4e9562.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e9568.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e956e.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e9574.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e957a.  v7:= v6.`io.reactivex.rxjava3.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L4e957e.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e9584.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4e958a.  v7:= temp @kind object;
  #L4e958c.  call temp:= `fail`(v6, v7) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L4e9592.  v7:= temp @kind object;
  #L4e9594.  throw v7;
}
procedure `io.reactivex.rxjava3.observers.BaseTestConsumer` `assertValuesOnly`(`io.reactivex.rxjava3.observers.BaseTestConsumer` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.assertValuesOnly:([Ljava/lang/Object;)Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4e95a8.  call temp:= `assertSubscribed`(v1) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.assertSubscribed:()Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @kind virtual;
  #L4e95ae.  v0:= temp @kind object;
  #L4e95b0.  call temp:= `assertValues`(v0, v2) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.assertValues:([Ljava/lang/Object;)Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @kind virtual;
  #L4e95b6.  v2:= temp @kind object;
  #L4e95b8.  call temp:= `assertNoErrors`(v2) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.assertNoErrors:()Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @kind virtual;
  #L4e95be.  v2:= temp @kind object;
  #L4e95c0.  call temp:= `assertNotComplete`(v2) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.assertNotComplete:()Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @kind virtual;
  #L4e95c6.  v2:= temp @kind object;
  #L4e95c8.  return v2 @kind object;
}
procedure `io.reactivex.rxjava3.observers.BaseTestConsumer` `await`(`io.reactivex.rxjava3.observers.BaseTestConsumer` v5 @kind this) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.await:()Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4e95dc.  v0:= v5.`io.reactivex.rxjava3.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L4e95e0.  call temp:= `getCount`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L4e95e6.  v0:= temp @kind wide;
  #L4e95e8.  v2:= 0L;
  #L4e95ec.  v4:= lcmp(v0, v2);
  #L4e95f0.  if v4 != 0 then goto L4e95f6;
  #L4e95f4.  return v5 @kind object;
  #L4e95f6.  v0:= v5.`io.reactivex.rxjava3.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L4e95fa.  call `await`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.await:()V` @kind virtual;
  #L4e9600.  return v5 @kind object;
}
procedure `boolean` `await`(`io.reactivex.rxjava3.observers.BaseTestConsumer` v5 @kind this, `long` v6 , `java.util.concurrent.TimeUnit` v8 @kind object) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.await:(JLjava/util/concurrent/TimeUnit;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4e8d88.  v0:= v5.`io.reactivex.rxjava3.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L4e8d8c.  call temp:= `getCount`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L4e8d92.  v0:= temp @kind wide;
  #L4e8d94.  v2:= 0L;
  #L4e8d98.  v4:= lcmp(v0, v2);
  #L4e8d9c.  if v4 == 0 then goto L4e8db6;
  #L4e8da0.  v0:= v5.`io.reactivex.rxjava3.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L4e8da4.  call temp:= `await`(v0, v6, v8) @signature `Ljava/util/concurrent/CountDownLatch;.await:(JLjava/util/concurrent/TimeUnit;)Z` @kind virtual;
  #L4e8daa.  v6:= temp;
  #L4e8dac.  if v6 == 0 then goto L4e8db2;
  #L4e8db0.  goto L4e8db6;
  #L4e8db2.  v6:= 0I;
  #L4e8db4.  goto L4e8db8;
  #L4e8db6.  v6:= 1I;
  #L4e8db8.  v7:= v6 ^~ 1;
  #L4e8dbc.  v5.`io.reactivex.rxjava3.observers.BaseTestConsumer.timeout` @type ^`boolean` := v7 @kind boolean;
  #L4e8dc0.  return v6;
}
procedure `io.reactivex.rxjava3.observers.BaseTestConsumer` `awaitCount`(`io.reactivex.rxjava3.observers.BaseTestConsumer` v7 @kind this, `int` v8 ) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.awaitCount:(I)Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4e9614.  call temp:= `currentTimeMillis`() @signature `Ljava/lang/System;.currentTimeMillis:()J` @kind static;
  #L4e961a.  v0:= temp @kind wide;
  #L4e961c.  call temp:= `currentTimeMillis`() @signature `Ljava/lang/System;.currentTimeMillis:()J` @kind static;
  #L4e9622.  v2:= temp @kind wide;
  #L4e9624.  v2:= v2 - v0 @kind long;
  #L4e9626.  v4:= 5000L;
  #L4e962a.  v6:= lcmp(v2, v4);
  #L4e962e.  if v6 < 0 then goto L4e963a;
  #L4e9632.  v8:= 1I;
  #L4e9634.  v7.`io.reactivex.rxjava3.observers.BaseTestConsumer.timeout` @type ^`boolean` := v8 @kind boolean;
  #L4e9638.  goto L4e9664;
  #L4e963a.  v2:= v7.`io.reactivex.rxjava3.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L4e963e.  call temp:= `getCount`(v2) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L4e9644.  v2:= temp @kind wide;
  #L4e9646.  v4:= 0L;
  #L4e964a.  v6:= lcmp(v2, v4);
  #L4e964e.  if v6 != 0 then goto L4e9654;
  #L4e9652.  goto L4e9664;
  #L4e9654.  v2:= v7.`io.reactivex.rxjava3.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L4e9658.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4e965e.  v2:= temp;
  #L4e9660.  if v2 < v8 then goto L4e9666;
  #L4e9664.  return v7 @kind object;
  #L4e9666.  v2:= 10L;
  #L4e966a.  call `sleep`(v2) @signature `Ljava/lang/Thread;.sleep:(J)V` @kind static;
  #L4e9670.  goto L4e961c;
  #L4e9672.  v8:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L4e9674.  v0:= new `java.lang.RuntimeException`;
  #L4e9678.  call `<init>`(v0, v8) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L4e967e.  throw v0;
  catch `java.lang.InterruptedException` @[L4e966a..L4e9670] goto L4e9672;
}
procedure `io.reactivex.rxjava3.observers.BaseTestConsumer` `awaitDone`(`io.reactivex.rxjava3.observers.BaseTestConsumer` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.awaitDone:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4e96a0.  v0:= v1.`io.reactivex.rxjava3.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L4e96a4.  call temp:= `await`(v0, v2, v4) @signature `Ljava/util/concurrent/CountDownLatch;.await:(JLjava/util/concurrent/TimeUnit;)Z` @kind virtual;
  #L4e96aa.  v2:= temp;
  #L4e96ac.  if v2 != 0 then goto L4e96bc;
  #L4e96b0.  v2:= 1I;
  #L4e96b2.  v1.`io.reactivex.rxjava3.observers.BaseTestConsumer.timeout` @type ^`boolean` := v2 @kind boolean;
  #L4e96b6.  call `dispose`(v1) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.dispose:()V` @kind virtual;
  #L4e96bc.  return v1 @kind object;
  #L4e96be.  v2:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L4e96c0.  call `dispose`(v1) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.dispose:()V` @kind virtual;
  #L4e96c6.  call temp:= `wrapOrThrow`(v2) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4e96cc.  v2:= temp @kind object;
  #L4e96ce.  throw v2;
  catch `java.lang.InterruptedException` @[L4e96a0..L4e96bc] goto L4e96be;
}
procedure `void` `dispose`() @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.dispose:()V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `java.lang.AssertionError` `fail`(`io.reactivex.rxjava3.observers.BaseTestConsumer` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4e9708.  v0:= new `java.lang.StringBuilder`;
  #L4e970c.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4e9712.  v1:= temp;
  #L4e9714.  v1:= v1 + 64;
  #L4e9718.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L4e971e.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e9724.  v4:= " (" @kind object;
  #L4e9728.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e972e.  v4:= "latch = " @kind object;
  #L4e9732.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e9738.  v4:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L4e973c.  call temp:= `getCount`(v4) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L4e9742.  v1:= temp @kind wide;
  #L4e9744.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e974a.  v4:= ", " @kind object;
  #L4e974e.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e9754.  v1:= "values = " @kind object;
  #L4e9758.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e975e.  v1:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L4e9762.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4e9768.  v1:= temp;
  #L4e976a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e9770.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e9776.  v1:= "errors = " @kind object;
  #L4e977a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e9780.  v1:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L4e9784.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4e978a.  v1:= temp;
  #L4e978c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e9792.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e9798.  v4:= "completions = " @kind object;
  #L4e979c.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e97a2.  v1:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.completions` @type ^`long` @kind wide;
  #L4e97a6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e97ac.  v4:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.timeout` @type ^`boolean` @kind boolean;
  #L4e97b0.  if v4 == 0 then goto L4e97be;
  #L4e97b4.  v4:= ", timeout!" @kind object;
  #L4e97b8.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e97be.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.isDisposed:()Z` @kind virtual;
  #L4e97c4.  v4:= temp;
  #L4e97c6.  if v4 == 0 then goto L4e97d4;
  #L4e97ca.  v4:= ", disposed!" @kind object;
  #L4e97ce.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e97d4.  v4:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.tag` @type ^`java.lang.CharSequence` @kind object;
  #L4e97d8.  if v4 == 0 then goto L4e97ec;
  #L4e97dc.  v1:= ", tag = " @kind object;
  #L4e97e0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e97e6.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e97ec.  v4:= 41I;
  #L4e97f0.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4e97f6.  v4:= new `java.lang.AssertionError`;
  #L4e97fa.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4e9800.  v0:= temp @kind object;
  #L4e9802.  call `<init>`(v4, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4e9808.  v0:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L4e980c.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L4e9812.  v0:= temp;
  #L4e9814.  if v0 != 0 then goto L4e9858;
  #L4e9818.  v0:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L4e981c.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4e9822.  v0:= temp;
  #L4e9824.  v1:= 1I;
  #L4e9826.  if v0 != v1 then goto L4e9844;
  #L4e982a.  v0:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L4e982e.  v1:= 0I;
  #L4e9830.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L4e9836.  v0:= temp @kind object;
  #L4e9838.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L4e983c.  call temp:= `initCause`(v4, v0) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L4e9842.  goto L4e9858;
  #L4e9844.  v0:= new `io.reactivex.rxjava3.exceptions.CompositeException`;
  #L4e9848.  v1:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L4e984c.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:(Ljava/lang/Iterable;)V` @kind direct;
  #L4e9852.  call temp:= `initCause`(v4, v0) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L4e9858.  return v4 @kind object;
}
procedure `boolean` `isDisposed`() @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.isDisposed:()Z` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `java.util.List` `values`(`io.reactivex.rxjava3.observers.BaseTestConsumer` v1 @kind this) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.values:()Ljava/util/List;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4e98cc.  v0:= v1.`io.reactivex.rxjava3.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L4e98d0.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.observers.BaseTestConsumer` `withTag`(`io.reactivex.rxjava3.observers.BaseTestConsumer` v0 @kind this, `java.lang.CharSequence` v1 @kind object) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.withTag:(Ljava/lang/CharSequence;)Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L4e96f0.  v0.`io.reactivex.rxjava3.observers.BaseTestConsumer.tag` @type ^`java.lang.CharSequence` := v1 @kind object;
  #L4e96f4.  return v0 @kind object;
}
