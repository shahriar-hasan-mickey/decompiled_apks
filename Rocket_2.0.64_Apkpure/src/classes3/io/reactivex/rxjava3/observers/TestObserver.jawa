record `io.reactivex.rxjava3.observers.TestObserver` @kind class @AccessFlag PUBLIC extends `io.reactivex.rxjava3.observers.BaseTestConsumer` @kind class, `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface, `io.reactivex.rxjava3.core.MaybeObserver` @kind interface, `io.reactivex.rxjava3.core.SingleObserver` @kind interface, `io.reactivex.rxjava3.core.CompletableObserver` @kind interface {
  `io.reactivex.rxjava3.core.Observer` `io.reactivex.rxjava3.observers.TestObserver.a` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.observers.TestObserver.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.observers.TestObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/observers/TestObserver;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4ea9a8.  v0:= `@@io.reactivex.rxjava3.observers.TestObserver$a.a` @type ^`io.reactivex.rxjava3.observers.TestObserver$a` @kind object;
  #L4ea9ac.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/observers/TestObserver;.<init>:(Lio/reactivex/rxjava3/core/Observer;)V` @kind direct;
  #L4ea9b2.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.observers.TestObserver` v1 @kind this, `io.reactivex.rxjava3.core.Observer` v2 @kind object) @signature `Lio/reactivex/rxjava3/observers/TestObserver;.<init>:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4ea9c4.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.<init>:()V` @kind direct;
  #L4ea9ca.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4ea9ce.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4ea9d4.  v1.`io.reactivex.rxjava3.observers.TestObserver.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4ea9d8.  v1.`io.reactivex.rxjava3.observers.TestObserver.a` @type ^`io.reactivex.rxjava3.core.Observer` := v2 @kind object;
  #L4ea9dc.  return @kind void;
}
procedure `io.reactivex.rxjava3.observers.TestObserver` `create`() @signature `Lio/reactivex/rxjava3/observers/TestObserver;.create:()Lio/reactivex/rxjava3/observers/TestObserver;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4ea970.  v0:= new `io.reactivex.rxjava3.observers.TestObserver`;
  #L4ea974.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/observers/TestObserver;.<init>:()V` @kind direct;
  #L4ea97a.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.observers.TestObserver` `create`(`io.reactivex.rxjava3.core.Observer` v1 @kind object) @signature `Lio/reactivex/rxjava3/observers/TestObserver;.create:(Lio/reactivex/rxjava3/core/Observer;)Lio/reactivex/rxjava3/observers/TestObserver;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4ea98c.  v0:= new `io.reactivex.rxjava3.observers.TestObserver`;
  #L4ea990.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/observers/TestObserver;.<init>:(Lio/reactivex/rxjava3/core/Observer;)V` @kind direct;
  #L4ea996.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.observers.BaseTestConsumer` `assertSubscribed`(`io.reactivex.rxjava3.observers.TestObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/observers/TestObserver;.assertSubscribed:()Lio/reactivex/rxjava3/observers/BaseTestConsumer;` @AccessFlag PROTECTED_SYNTHETIC {
    temp;
    v0;

  #L4ea924.  call temp:= `assertSubscribed`(v1) @signature `Lio/reactivex/rxjava3/observers/TestObserver;.assertSubscribed:()Lio/reactivex/rxjava3/observers/TestObserver;` @kind virtual;
  #L4ea92a.  v0:= temp @kind object;
  #L4ea92c.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.observers.TestObserver` `assertSubscribed`(`io.reactivex.rxjava3.observers.TestObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/observers/TestObserver;.assertSubscribed:()Lio/reactivex/rxjava3/observers/TestObserver;` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L4ea940.  v0:= v1.`io.reactivex.rxjava3.observers.TestObserver.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ea944.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ea94a.  v0:= temp @kind object;
  #L4ea94c.  if v0 == 0 then goto L4ea952;
  #L4ea950.  return v1 @kind object;
  #L4ea952.  v0:= "Not subscribed!" @kind object;
  #L4ea956.  call temp:= `fail`(v1, v0) @signature `Lio/reactivex/rxjava3/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L4ea95c.  v0:= temp @kind object;
  #L4ea95e.  throw v0;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.observers.TestObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/observers/TestObserver;.dispose:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4ea9f0.  v0:= v1.`io.reactivex.rxjava3.observers.TestObserver.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ea9f4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4ea9fa.  return @kind void;
}
procedure `boolean` `hasSubscription`(`io.reactivex.rxjava3.observers.TestObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/observers/TestObserver;.hasSubscription:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4ea8d0.  v0:= v1.`io.reactivex.rxjava3.observers.TestObserver.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ea8d4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ea8da.  v0:= temp @kind object;
  #L4ea8dc.  if v0 == 0 then goto L4ea8e4;
  #L4ea8e0.  v0:= 1I;
  #L4ea8e2.  goto L4ea8e6;
  #L4ea8e4.  v0:= 0I;
  #L4ea8e6.  return v0;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.observers.TestObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/observers/TestObserver;.isDisposed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4ea8f8.  v0:= v1.`io.reactivex.rxjava3.observers.TestObserver.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ea8fc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ea902.  v0:= temp @kind object;
  #L4ea904.  v0:= (`io.reactivex.rxjava3.disposables.Disposable`) v0 @kind object;
  #L4ea908.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind static;
  #L4ea90e.  v0:= temp;
  #L4ea910.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.observers.TestObserver` v4 @kind this) @signature `Lio/reactivex/rxjava3/observers/TestObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4eaa0c.  v0:= v4.`io.reactivex.rxjava3.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` @kind boolean;
  #L4eaa10.  if v0 != 0 then goto L4eaa42;
  #L4eaa14.  v0:= 1I;
  #L4eaa16.  v4.`io.reactivex.rxjava3.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` := v0 @kind boolean;
  #L4eaa1a.  v0:= v4.`io.reactivex.rxjava3.observers.TestObserver.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4eaa1e.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4eaa24.  v0:= temp @kind object;
  #L4eaa26.  if v0 != 0 then goto L4eaa42;
  #L4eaa2a.  v0:= v4.`io.reactivex.rxjava3.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L4eaa2e.  v1:= new `java.lang.IllegalStateException`;
  #L4eaa32.  v2:= "onSubscribe not called in proper order" @kind object;
  #L4eaa36.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4eaa3c.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4eaa42.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L4eaa48.  v0:= temp @kind object;
  #L4eaa4a.  v4.`io.reactivex.rxjava3.observers.BaseTestConsumer.lastThread` @type ^`java.lang.Thread` := v0 @kind object;
  #L4eaa4e.  v0:= v4.`io.reactivex.rxjava3.observers.BaseTestConsumer.completions` @type ^`long` @kind wide;
  #L4eaa52.  v2:= 1L;
  #L4eaa56.  v0:= v0 + v2 @kind long;
  #L4eaa58.  v4.`io.reactivex.rxjava3.observers.BaseTestConsumer.completions` @type ^`long` := v0 @kind wide;
  #L4eaa5c.  v0:= v4.`io.reactivex.rxjava3.observers.TestObserver.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4eaa60.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4eaa66.  v0:= v4.`io.reactivex.rxjava3.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L4eaa6a.  call `countDown`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L4eaa70.  return @kind void;
  #L4eaa72.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4eaa74.  v1:= v4.`io.reactivex.rxjava3.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L4eaa78.  call `countDown`(v1) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L4eaa7e.  throw v0;
  catch `java.lang.Throwable` @[L4eaa42..L4eaa66] goto L4eaa72;
}
procedure `void` `onError`(`io.reactivex.rxjava3.observers.TestObserver` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/rxjava3/observers/TestObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4eaa9c.  v0:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` @kind boolean;
  #L4eaaa0.  if v0 != 0 then goto L4eaad2;
  #L4eaaa4.  v0:= 1I;
  #L4eaaa6.  v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` := v0 @kind boolean;
  #L4eaaaa.  v0:= v3.`io.reactivex.rxjava3.observers.TestObserver.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4eaaae.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4eaab4.  v0:= temp @kind object;
  #L4eaab6.  if v0 != 0 then goto L4eaad2;
  #L4eaaba.  v0:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L4eaabe.  v1:= new `java.lang.IllegalStateException`;
  #L4eaac2.  v2:= "onSubscribe not called in proper order" @kind object;
  #L4eaac6.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4eaacc.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4eaad2.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L4eaad8.  v0:= temp @kind object;
  #L4eaada.  v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.lastThread` @type ^`java.lang.Thread` := v0 @kind object;
  #L4eaade.  if v4 != 0 then goto L4eaafc;
  #L4eaae2.  v0:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L4eaae6.  v1:= new `java.lang.NullPointerException`;
  #L4eaaea.  v2:= "onError received a null Throwable" @kind object;
  #L4eaaee.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4eaaf4.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4eaafa.  goto L4eab06;
  #L4eaafc.  v0:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L4eab00.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4eab06.  v0:= v3.`io.reactivex.rxjava3.observers.TestObserver.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4eab0a.  call `onError`(v0, v4) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4eab10.  v4:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L4eab14.  call `countDown`(v4) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L4eab1a.  return @kind void;
  #L4eab1c.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4eab1e.  v0:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L4eab22.  call `countDown`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L4eab28.  throw v4;
  catch `java.lang.Throwable` @[L4eaad2..L4eab10] goto L4eab1c;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.observers.TestObserver` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/observers/TestObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4eab48.  v0:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` @kind boolean;
  #L4eab4c.  if v0 != 0 then goto L4eab7e;
  #L4eab50.  v0:= 1I;
  #L4eab52.  v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` := v0 @kind boolean;
  #L4eab56.  v0:= v3.`io.reactivex.rxjava3.observers.TestObserver.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4eab5a.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4eab60.  v0:= temp @kind object;
  #L4eab62.  if v0 != 0 then goto L4eab7e;
  #L4eab66.  v0:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L4eab6a.  v1:= new `java.lang.IllegalStateException`;
  #L4eab6e.  v2:= "onSubscribe not called in proper order" @kind object;
  #L4eab72.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4eab78.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4eab7e.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L4eab84.  v0:= temp @kind object;
  #L4eab86.  v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.lastThread` @type ^`java.lang.Thread` := v0 @kind object;
  #L4eab8a.  v0:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L4eab8e.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4eab94.  if v4 != 0 then goto L4eabb0;
  #L4eab98.  v0:= v3.`io.reactivex.rxjava3.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L4eab9c.  v1:= new `java.lang.NullPointerException`;
  #L4eaba0.  v2:= "onNext received a null value" @kind object;
  #L4eaba4.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4eabaa.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4eabb0.  v0:= v3.`io.reactivex.rxjava3.observers.TestObserver.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4eabb4.  call `onNext`(v0, v4) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4eabba.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.observers.TestObserver` v4 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v5 @kind object) @signature `Lio/reactivex/rxjava3/observers/TestObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4eabcc.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L4eabd2.  v0:= temp @kind object;
  #L4eabd4.  v4.`io.reactivex.rxjava3.observers.BaseTestConsumer.lastThread` @type ^`java.lang.Thread` := v0 @kind object;
  #L4eabd8.  if v5 != 0 then goto L4eabf6;
  #L4eabdc.  v5:= v4.`io.reactivex.rxjava3.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L4eabe0.  v0:= new `java.lang.NullPointerException`;
  #L4eabe4.  v1:= "onSubscribe received a null Subscription" @kind object;
  #L4eabe8.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4eabee.  call temp:= `add`(v5, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4eabf4.  return @kind void;
  #L4eabf6.  v0:= v4.`io.reactivex.rxjava3.observers.TestObserver.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4eabfa.  v1:= 0I;
  #L4eabfc.  call temp:= `compareAndSet`(v0, v1, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4eac02.  v0:= temp;
  #L4eac04.  if v0 != 0 then goto L4eac5a;
  #L4eac08.  call `dispose`(v5) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4eac0e.  v0:= v4.`io.reactivex.rxjava3.observers.TestObserver.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4eac12.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4eac18.  v0:= temp @kind object;
  #L4eac1a.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4eac1e.  if v0 == v1 then goto L4eac58;
  #L4eac22.  v0:= v4.`io.reactivex.rxjava3.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L4eac26.  v1:= new `java.lang.IllegalStateException`;
  #L4eac2a.  v2:= new `java.lang.StringBuilder`;
  #L4eac2e.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4eac34.  v3:= "onSubscribe received multiple subscriptions: " @kind object;
  #L4eac38.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4eac3e.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4eac44.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4eac4a.  v5:= temp @kind object;
  #L4eac4c.  call `<init>`(v1, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4eac52.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4eac58.  return @kind void;
  #L4eac5a.  v0:= v4.`io.reactivex.rxjava3.observers.TestObserver.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4eac5e.  call `onSubscribe`(v0, v5) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4eac64.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.observers.TestObserver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/observers/TestObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L4eac78.  call `onNext`(v0, v1) @signature `Lio/reactivex/rxjava3/observers/TestObserver;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4eac7e.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/observers/TestObserver;.onComplete:()V` @kind virtual;
  #L4eac84.  return @kind void;
}
