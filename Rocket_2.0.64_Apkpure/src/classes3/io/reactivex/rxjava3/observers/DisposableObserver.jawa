record `io.reactivex.rxjava3.observers.DisposableObserver` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.reactivex.rxjava3.core.Observer` @kind interface, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.observers.DisposableObserver.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.observers.DisposableObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/observers/DisposableObserver;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4e9b40.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4e9b46.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4e9b4a.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4e9b50.  v1.`io.reactivex.rxjava3.observers.DisposableObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4e9b54.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.observers.DisposableObserver` v1 @kind this) @signature `Lio/reactivex/rxjava3/observers/DisposableObserver;.dispose:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4e9b68.  v0:= v1.`io.reactivex.rxjava3.observers.DisposableObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e9b6c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4e9b72.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.observers.DisposableObserver` v2 @kind this) @signature `Lio/reactivex/rxjava3/observers/DisposableObserver;.isDisposed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4e9b14.  v0:= v2.`io.reactivex.rxjava3.observers.DisposableObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e9b18.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4e9b1e.  v0:= temp @kind object;
  #L4e9b20.  v1:= `@@io.reactivex.rxjava3.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.rxjava3.internal.disposables.DisposableHelper` @kind object;
  #L4e9b24.  if v0 != v1 then goto L4e9b2c;
  #L4e9b28.  v0:= 1I;
  #L4e9b2a.  goto L4e9b2e;
  #L4e9b2c.  v0:= 0I;
  #L4e9b2e.  return v0;
}
procedure `void` `onStart`(`io.reactivex.rxjava3.observers.DisposableObserver` v0 @kind this) @signature `Lio/reactivex/rxjava3/observers/DisposableObserver;.onStart:()V` @AccessFlag PROTECTED {
    temp;

  #L4e9b84.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.observers.DisposableObserver` v2 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/rxjava3/observers/DisposableObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4e9b98.  v0:= v2.`io.reactivex.rxjava3.observers.DisposableObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4e9b9c.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4e9ba2.  v1:= temp @kind object;
  #L4e9ba4.  call temp:= `setOnce`(v0, v3, v1) @signature `Lio/reactivex/rxjava3/internal/util/EndConsumerHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/Disposable;Ljava/lang/Class;)Z` @kind static;
  #L4e9baa.  v3:= temp;
  #L4e9bac.  if v3 == 0 then goto L4e9bb6;
  #L4e9bb0.  call `onStart`(v2) @signature `Lio/reactivex/rxjava3/observers/DisposableObserver;.onStart:()V` @kind virtual;
  #L4e9bb6.  return @kind void;
}
