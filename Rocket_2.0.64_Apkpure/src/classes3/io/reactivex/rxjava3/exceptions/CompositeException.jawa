record `io.reactivex.rxjava3.exceptions.CompositeException` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.RuntimeException` @kind class {
  `java.util.List` `io.reactivex.rxjava3.exceptions.CompositeException.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `io.reactivex.rxjava3.exceptions.CompositeException.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.Throwable` `io.reactivex.rxjava3.exceptions.CompositeException.c` @AccessFlag PRIVATE;
}
global `long` `@@io.reactivex.rxjava3.exceptions.CompositeException.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.exceptions.CompositeException` v3 @kind this, `java.lang.Iterable` v4 @kind object) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:(Ljava/lang/Iterable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L4797c8.  call `<init>`(v3) @signature `Ljava/lang/RuntimeException;.<init>:()V` @kind direct;
  #L4797ce.  v0:= new `java.util.LinkedHashSet`;
  #L4797d2.  call `<init>`(v0) @signature `Ljava/util/LinkedHashSet;.<init>:()V` @kind direct;
  #L4797d8.  if v4 == 0 then goto L47983a;
  #L4797dc.  call temp:= `iterator`(v4) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4797e2.  v4:= temp @kind object;
  #L4797e4.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4797ea.  v1:= temp;
  #L4797ec.  if v1 == 0 then goto L47984e;
  #L4797f0.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4797f6.  v1:= temp @kind object;
  #L4797f8.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L4797fc.  v2:= instanceof @variable v1 @type ^`io.reactivex.rxjava3.exceptions.CompositeException` @kind boolean;
  #L479800.  if v2 == 0 then goto L479818;
  #L479804.  v1:= (`io.reactivex.rxjava3.exceptions.CompositeException`) v1 @kind object;
  #L479808.  call temp:= `getExceptions`(v1) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.getExceptions:()Ljava/util/List;` @kind virtual;
  #L47980e.  v1:= temp @kind object;
  #L479810.  call temp:= `addAll`(v0, v1) @signature `Ljava/util/Set;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L479816.  goto L4797e4;
  #L479818.  if v1 == 0 then goto L479824;
  #L47981c.  call temp:= `add`(v0, v1) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L479822.  goto L4797e4;
  #L479824.  v1:= new `java.lang.NullPointerException`;
  #L479828.  v2:= "Throwable was null!" @kind object;
  #L47982c.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L479832.  call temp:= `add`(v0, v1) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L479838.  goto L4797e4;
  #L47983a.  v4:= new `java.lang.NullPointerException`;
  #L47983e.  v1:= "errors was null" @kind object;
  #L479842.  call `<init>`(v4, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L479848.  call temp:= `add`(v0, v4) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L47984e.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Set;.isEmpty:()Z` @kind interface;
  #L479854.  v4:= temp;
  #L479856.  if v4 != 0 then goto L4798a0;
  #L47985a.  v4:= new `java.util.ArrayList`;
  #L47985e.  call `<init>`(v4, v0) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L479864.  call temp:= `unmodifiableList`(v4) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L47986a.  v4:= temp @kind object;
  #L47986c.  v3.`io.reactivex.rxjava3.exceptions.CompositeException.a` @type ^`java.util.List` := v4 @kind object;
  #L479870.  v0:= new `java.lang.StringBuilder`;
  #L479874.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L47987a.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L479880.  v4:= temp;
  #L479882.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L479888.  v4:= " exceptions occurred. " @kind object;
  #L47988c.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L479892.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L479898.  v4:= temp @kind object;
  #L47989a.  v3.`io.reactivex.rxjava3.exceptions.CompositeException.b` @type ^`java.lang.String` := v4 @kind object;
  #L47989e.  return @kind void;
  #L4798a0.  v4:= new `java.lang.IllegalArgumentException`;
  #L4798a4.  v0:= "errors is empty" @kind object;
  #L4798a8.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4798ae.  throw v4;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.exceptions.CompositeException` v1 @kind this, `java.lang.Throwable`[] v2 @kind object) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4798c0.  if v2 != 0 then goto L4798dc;
  #L4798c4.  v2:= new `java.lang.NullPointerException`;
  #L4798c8.  v0:= "exceptions was null" @kind object;
  #L4798cc.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4798d2.  call temp:= `singletonList`(v2) @signature `Ljava/util/Collections;.singletonList:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L4798d8.  v2:= temp @kind object;
  #L4798da.  goto L4798e4;
  #L4798dc.  call temp:= `asList`(v2) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L4798e2.  v2:= temp @kind object;
  #L4798e4.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.<init>:(Ljava/lang/Iterable;)V` @kind direct;
  #L4798ea.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.exceptions.CompositeException` v5 @kind this, `java.lang.StringBuilder` v6 @kind object, `java.lang.Throwable` v7 @kind object, `java.lang.String` v8 @kind object) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.a:(Ljava/lang/StringBuilder;Ljava/lang/Throwable;Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4798fc.  call temp:= `append`(v6, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L479902.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L479908.  v8:= 10I;
  #L47990c.  call temp:= `append`(v6, v8) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L479912.  call temp:= `getStackTrace`(v7) @signature `Ljava/lang/Throwable;.getStackTrace:()[Ljava/lang/StackTraceElement;` @kind virtual;
  #L479918.  v0:= temp @kind object;
  #L47991a.  v1:= length @variable v0;
  #L47991c.  v2:= 0I;
  #L47991e.  if v2 >= v1 then goto L479942;
  #L479922.  v3:= v0[v2] @kind object;
  #L479926.  v4:= "\t\tat " @kind object;
  #L47992a.  call temp:= `append`(v6, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L479930.  call temp:= `append`(v6, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L479936.  call temp:= `append`(v6, v8) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L47993c.  v2:= v2 + 1;
  #L479940.  goto L47991e;
  #L479942.  call temp:= `getCause`(v7) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L479948.  v8:= temp @kind object;
  #L47994a.  if v8 == 0 then goto L47996a;
  #L47994e.  v8:= "\tCaused by: " @kind object;
  #L479952.  call temp:= `append`(v6, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L479958.  call temp:= `getCause`(v7) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L47995e.  v7:= temp @kind object;
  #L479960.  v8:= "" @kind object;
  #L479964.  call `a`(v5, v6, v7, v8) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.a:(Ljava/lang/StringBuilder;Ljava/lang/Throwable;Ljava/lang/String;)V` @kind direct;
  #L47996a.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.exceptions.CompositeException` v7 @kind this, `io.reactivex.rxjava3.exceptions.CompositeException$b` v8 @kind object) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.b:(Lio/reactivex/rxjava3/exceptions/CompositeException$b;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L479998.  v0:= new `java.lang.StringBuilder`;
  #L47999c.  v1:= 128I;
  #L4799a0.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L4799a6.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4799ac.  v1:= 10I;
  #L4799b0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4799b6.  call temp:= `getStackTrace`(v7) @signature `Ljava/lang/RuntimeException;.getStackTrace:()[Ljava/lang/StackTraceElement;` @kind virtual;
  #L4799bc.  v2:= temp @kind object;
  #L4799be.  v3:= length @variable v2;
  #L4799c0.  v4:= 0I;
  #L4799c2.  if v4 >= v3 then goto L4799e6;
  #L4799c6.  v5:= v2[v4] @kind object;
  #L4799ca.  v6:= "\tat " @kind object;
  #L4799ce.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4799d4.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4799da.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4799e0.  v4:= v4 + 1;
  #L4799e4.  goto L4799c2;
  #L4799e6.  v1:= v7.`io.reactivex.rxjava3.exceptions.CompositeException.a` @type ^`java.util.List` @kind object;
  #L4799ea.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4799f0.  v1:= temp @kind object;
  #L4799f2.  v2:= 1I;
  #L4799f4.  v3:= 1I;
  #L4799f6.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4799fc.  v4:= temp;
  #L4799fe.  if v4 == 0 then goto L479a36;
  #L479a02.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L479a08.  v4:= temp @kind object;
  #L479a0a.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L479a0e.  v5:= "  ComposedException " @kind object;
  #L479a12.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L479a18.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L479a1e.  v5:= " :\n" @kind object;
  #L479a22.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L479a28.  v5:= "\t" @kind object;
  #L479a2c.  call `a`(v7, v0, v4, v5) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.a:(Ljava/lang/StringBuilder;Ljava/lang/Throwable;Ljava/lang/String;)V` @kind direct;
  #L479a32.  v3:= v3 + v2 @kind int;
  #L479a34.  goto L4799f6;
  #L479a36.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L479a3c.  v0:= temp @kind object;
  #L479a3e.  call `a`(v8, v0) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException$b;.a:(Ljava/lang/Object;)V` @kind virtual;
  #L479a44.  return @kind void;
}
procedure `java.lang.Throwable` `getCause`(`io.reactivex.rxjava3.exceptions.CompositeException` v13 @kind this) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.getCause:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L47953c.  @monitorenter v13
  #L47953e.  v0:= v13.`io.reactivex.rxjava3.exceptions.CompositeException.c` @type ^`java.lang.Throwable` @kind object;
  #L479542.  if v0 != 0 then goto L479784;
  #L479546.  v0:= "line.separator" @kind object;
  #L47954a.  call temp:= `getProperty`(v0) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L479550.  v0:= temp @kind object;
  #L479552.  v1:= v13.`io.reactivex.rxjava3.exceptions.CompositeException.a` @type ^`java.util.List` @kind object;
  #L479556.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L47955c.  v1:= temp;
  #L47955e.  v2:= 1I;
  #L479560.  v3:= 0I;
  #L479562.  if v1 <= v2 then goto L479770;
  #L479566.  v1:= new `java.util.IdentityHashMap`;
  #L47956a.  call `<init>`(v1) @signature `Ljava/util/IdentityHashMap;.<init>:()V` @kind direct;
  #L479570.  v2:= new `java.lang.StringBuilder`;
  #L479574.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L47957a.  v4:= "Multiple exceptions (" @kind object;
  #L47957e.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L479584.  v4:= v13.`io.reactivex.rxjava3.exceptions.CompositeException.a` @type ^`java.util.List` @kind object;
  #L479588.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L47958e.  v4:= temp;
  #L479590.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L479596.  v4:= ")" @kind object;
  #L47959a.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4795a0.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4795a6.  v4:= v13.`io.reactivex.rxjava3.exceptions.CompositeException.a` @type ^`java.util.List` @kind object;
  #L4795aa.  call temp:= `iterator`(v4) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4795b0.  v4:= temp @kind object;
  #L4795b2.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4795b8.  v5:= temp;
  #L4795ba.  if v5 == 0 then goto L479750;
  #L4795be.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4795c4.  v5:= temp @kind object;
  #L4795c6.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L4795ca.  v6:= 0I;
  #L4795cc.  if v5 == 0 then goto L4795b2;
  #L4795d0.  v7:= 0I;
  #L4795d2.  if v7 >= v6 then goto L4795e6;
  #L4795d6.  v8:= "  " @kind object;
  #L4795da.  call temp:= `append`(v2, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4795e0.  v7:= v7 + 1;
  #L4795e4.  goto L4795d2;
  #L4795e6.  v7:= "|-- " @kind object;
  #L4795ea.  call temp:= `append`(v2, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4795f0.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4795f6.  v7:= temp @kind object;
  #L4795f8.  call temp:= `getCanonicalName`(v7) @signature `Ljava/lang/Class;.getCanonicalName:()Ljava/lang/String;` @kind virtual;
  #L4795fe.  v7:= temp @kind object;
  #L479600.  call temp:= `append`(v2, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L479606.  v7:= ": " @kind object;
  #L47960a.  call temp:= `append`(v2, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L479610.  call temp:= `getMessage`(v5) @signature `Ljava/lang/Throwable;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L479616.  v7:= temp @kind object;
  #L479618.  if v7 == 0 then goto L47966e;
  #L47961c.  call temp:= `contains`(v7, v0) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L479622.  v8:= temp;
  #L479624.  if v8 == 0 then goto L47966e;
  #L479628.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L47962e.  call temp:= `split`(v7, v0) @signature `Ljava/lang/String;.split:(Ljava/lang/String;)[Ljava/lang/String;` @kind virtual;
  #L479634.  v7:= temp @kind object;
  #L479636.  v8:= length @variable v7;
  #L479638.  v9:= 0I;
  #L47963a.  if v9 >= v8 then goto L47967a;
  #L47963e.  v10:= v7[v9] @kind object;
  #L479642.  v11:= 0I;
  #L479644.  v12:= v6 + 2;
  #L479648.  if v11 >= v12 then goto L47965c;
  #L47964c.  v12:= "  " @kind object;
  #L479650.  call temp:= `append`(v2, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L479656.  v11:= v11 + 1;
  #L47965a.  goto L479644;
  #L47965c.  call temp:= `append`(v2, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L479662.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L479668.  v9:= v9 + 1;
  #L47966c.  goto L47963a;
  #L47966e.  call temp:= `append`(v2, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L479674.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L47967a.  v7:= 0I;
  #L47967c.  v8:= v6 + 2;
  #L479680.  if v7 >= v8 then goto L479694;
  #L479684.  v8:= "  " @kind object;
  #L479688.  call temp:= `append`(v2, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L47968e.  v7:= v7 + 1;
  #L479692.  goto L47967c;
  #L479694.  call temp:= `getStackTrace`(v5) @signature `Ljava/lang/Throwable;.getStackTrace:()[Ljava/lang/StackTraceElement;` @kind virtual;
  #L47969a.  v7:= temp @kind object;
  #L47969c.  v9:= length @variable v7;
  #L47969e.  if v9 <= 0 then goto L4796bc;
  #L4796a2.  v9:= "at " @kind object;
  #L4796a6.  call temp:= `append`(v2, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4796ac.  v7:= v7[v3] @kind object;
  #L4796b0.  call temp:= `append`(v2, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4796b6.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4796bc.  call temp:= `containsKey`(v1, v5) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L4796c2.  v7:= temp;
  #L4796c4.  if v7 != 0 then goto L4796e2;
  #L4796c8.  v7:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L4796cc.  call temp:= `put`(v1, v5, v7) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4796d2.  call temp:= `getCause`(v5) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L4796d8.  v5:= temp @kind object;
  #L4796da.  v6:= v6 + 1;
  #L4796de.  goto L4795cc;
  #L4796e2.  call temp:= `getCause`(v5) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L4796e8.  v5:= temp @kind object;
  #L4796ea.  if v5 == 0 then goto L4795b2;
  #L4796ee.  v6:= 0I;
  #L4796f0.  if v6 >= v8 then goto L479704;
  #L4796f4.  v7:= "  " @kind object;
  #L4796f8.  call temp:= `append`(v2, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4796fe.  v6:= v6 + 1;
  #L479702.  goto L4796f0;
  #L479704.  v6:= "|-- " @kind object;
  #L479708.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L47970e.  v6:= "(cause not expanded again) " @kind object;
  #L479712.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L479718.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L47971e.  v6:= temp @kind object;
  #L479720.  call temp:= `getCanonicalName`(v6) @signature `Ljava/lang/Class;.getCanonicalName:()Ljava/lang/String;` @kind virtual;
  #L479726.  v6:= temp @kind object;
  #L479728.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L47972e.  v6:= ": " @kind object;
  #L479732.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L479738.  call temp:= `getMessage`(v5) @signature `Ljava/lang/Throwable;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L47973e.  v5:= temp @kind object;
  #L479740.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L479746.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L47974c.  goto L4795b2;
  #L479750.  v0:= new `io.reactivex.rxjava3.exceptions.CompositeException$a`;
  #L479754.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L47975a.  v1:= temp @kind object;
  #L47975c.  call temp:= `trim`(v1) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L479762.  v1:= temp @kind object;
  #L479764.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException$a;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47976a.  v13.`io.reactivex.rxjava3.exceptions.CompositeException.c` @type ^`java.lang.Throwable` := v0 @kind object;
  #L47976e.  goto L479784;
  #L479770.  v0:= v13.`io.reactivex.rxjava3.exceptions.CompositeException.a` @type ^`java.util.List` @kind object;
  #L479774.  call temp:= `get`(v0, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L47977a.  v0:= temp @kind object;
  #L47977c.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L479780.  v13.`io.reactivex.rxjava3.exceptions.CompositeException.c` @type ^`java.lang.Throwable` := v0 @kind object;
  #L479784.  v0:= v13.`io.reactivex.rxjava3.exceptions.CompositeException.c` @type ^`java.lang.Throwable` @kind object;
  #L479788.  @monitorexit v13
  #L47978a.  return v0 @kind object;
  #L47978c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47978e.  @monitorexit v13
  #L479790.  throw v0;
  catch `java.lang.Throwable` @[L47953e..L479788] goto L47978c;
}
procedure `java.util.List` `getExceptions`(`io.reactivex.rxjava3.exceptions.CompositeException` v1 @kind this) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.getExceptions:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4797b0.  v0:= v1.`io.reactivex.rxjava3.exceptions.CompositeException.a` @type ^`java.util.List` @kind object;
  #L4797b4.  return v0 @kind object;
}
procedure `java.lang.String` `getMessage`(`io.reactivex.rxjava3.exceptions.CompositeException` v1 @kind this) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.getMessage:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L479524.  v0:= v1.`io.reactivex.rxjava3.exceptions.CompositeException.b` @type ^`java.lang.String` @kind object;
  #L479528.  return v0 @kind object;
}
procedure `void` `printStackTrace`(`io.reactivex.rxjava3.exceptions.CompositeException` v1 @kind this) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.printStackTrace:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47997c.  v0:= `@@java.lang.System.err` @type ^`java.io.PrintStream` @kind object;
  #L479980.  call `printStackTrace`(v1, v0) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.printStackTrace:(Ljava/io/PrintStream;)V` @kind virtual;
  #L479986.  return @kind void;
}
procedure `void` `printStackTrace`(`io.reactivex.rxjava3.exceptions.CompositeException` v1 @kind this, `java.io.PrintStream` v2 @kind object) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.printStackTrace:(Ljava/io/PrintStream;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L479a58.  v0:= new `io.reactivex.rxjava3.exceptions.CompositeException$c`;
  #L479a5c.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException$c;.<init>:(Ljava/io/PrintStream;)V` @kind direct;
  #L479a62.  call `b`(v1, v0) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.b:(Lio/reactivex/rxjava3/exceptions/CompositeException$b;)V` @kind direct;
  #L479a68.  return @kind void;
}
procedure `void` `printStackTrace`(`io.reactivex.rxjava3.exceptions.CompositeException` v1 @kind this, `java.io.PrintWriter` v2 @kind object) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.printStackTrace:(Ljava/io/PrintWriter;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L479a7c.  v0:= new `io.reactivex.rxjava3.exceptions.CompositeException$d`;
  #L479a80.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException$d;.<init>:(Ljava/io/PrintWriter;)V` @kind direct;
  #L479a86.  call `b`(v1, v0) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.b:(Lio/reactivex/rxjava3/exceptions/CompositeException$b;)V` @kind direct;
  #L479a8c.  return @kind void;
}
procedure `int` `size`(`io.reactivex.rxjava3.exceptions.CompositeException` v1 @kind this) @signature `Lio/reactivex/rxjava3/exceptions/CompositeException;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L479504.  v0:= v1.`io.reactivex.rxjava3.exceptions.CompositeException.a` @type ^`java.util.List` @kind object;
  #L479508.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L47950e.  v0:= temp;
  #L479510.  return v0;
}
