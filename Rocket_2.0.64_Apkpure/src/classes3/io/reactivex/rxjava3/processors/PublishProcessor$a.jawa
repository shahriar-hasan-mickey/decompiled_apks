record `io.reactivex.rxjava3.processors.PublishProcessor$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.processors.PublishProcessor$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.processors.PublishProcessor` `io.reactivex.rxjava3.processors.PublishProcessor$a.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.processors.PublishProcessor$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.processors.PublishProcessor$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.processors.PublishProcessor` v2 @kind object) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/processors/PublishProcessor;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4edf88.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4edf8e.  v0.`io.reactivex.rxjava3.processors.PublishProcessor$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4edf92.  v0.`io.reactivex.rxjava3.processors.PublishProcessor$a.b` @type ^`io.reactivex.rxjava3.processors.PublishProcessor` := v2 @kind object;
  #L4edf96.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.processors.PublishProcessor$a` v5 @kind this) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor$a;.a:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4edf30.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4edf36.  v0:= temp @kind wide;
  #L4edf38.  v2:= -9223372036854775808L;
  #L4edf3c.  v4:= lcmp(v0, v2);
  #L4edf40.  if v4 != 0 then goto L4edf48;
  #L4edf44.  v0:= 1I;
  #L4edf46.  goto L4edf4a;
  #L4edf48.  v0:= 0I;
  #L4edf4a.  return v0;
}
procedure `boolean` `b`(`io.reactivex.rxjava3.processors.PublishProcessor$a` v5 @kind this) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor$a;.b:()Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4edf5c.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4edf62.  v0:= temp @kind wide;
  #L4edf64.  v2:= 0L;
  #L4edf68.  v4:= lcmp(v0, v2);
  #L4edf6c.  if v4 != 0 then goto L4edf74;
  #L4edf70.  v0:= 1I;
  #L4edf72.  goto L4edf76;
  #L4edf74.  v0:= 0I;
  #L4edf76.  return v0;
}
procedure `void` `c`(`io.reactivex.rxjava3.processors.PublishProcessor$a` v5 @kind this) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor$a;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4edfd8.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4edfde.  v0:= temp @kind wide;
  #L4edfe0.  v2:= -9223372036854775808L;
  #L4edfe4.  v4:= lcmp(v0, v2);
  #L4edfe8.  if v4 == 0 then goto L4edff6;
  #L4edfec.  v0:= v5.`io.reactivex.rxjava3.processors.PublishProcessor$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4edff0.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4edff6.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.processors.PublishProcessor$a` v5 @kind this) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4edfa8.  v0:= -9223372036854775808L;
  #L4edfac.  call temp:= `getAndSet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L4edfb2.  v2:= temp @kind wide;
  #L4edfb4.  v4:= lcmp(v2, v0);
  #L4edfb8.  if v4 == 0 then goto L4edfc6;
  #L4edfbc.  v0:= v5.`io.reactivex.rxjava3.processors.PublishProcessor$a.b` @type ^`io.reactivex.rxjava3.processors.PublishProcessor` @kind object;
  #L4edfc0.  call `f`(v0, v5) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor;.f:(Lio/reactivex/rxjava3/processors/PublishProcessor$a;)V` @kind virtual;
  #L4edfc6.  return @kind void;
}
procedure `void` `d`(`io.reactivex.rxjava3.processors.PublishProcessor$a` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor$a;.d:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4ee008.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4ee00e.  v0:= temp @kind wide;
  #L4ee010.  v2:= -9223372036854775808L;
  #L4ee014.  v4:= lcmp(v0, v2);
  #L4ee018.  if v4 == 0 then goto L4ee028;
  #L4ee01c.  v0:= v5.`io.reactivex.rxjava3.processors.PublishProcessor$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ee020.  call `onError`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ee026.  goto L4ee02e;
  #L4ee028.  call `onError`(v6) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4ee02e.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.processors.PublishProcessor$a` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor$a;.e:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4ee040.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4ee046.  v0:= temp @kind wide;
  #L4ee048.  v2:= -9223372036854775808L;
  #L4ee04c.  v4:= lcmp(v0, v2);
  #L4ee050.  if v4 != 0 then goto L4ee056;
  #L4ee054.  return @kind void;
  #L4ee056.  v2:= 0L;
  #L4ee05a.  v4:= lcmp(v0, v2);
  #L4ee05e.  if v4 == 0 then goto L4ee078;
  #L4ee062.  v0:= v5.`io.reactivex.rxjava3.processors.PublishProcessor$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ee066.  call `onNext`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ee06c.  v0:= 1L;
  #L4ee070.  call temp:= `producedCancel`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.producedCancel:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4ee076.  goto L4ee096;
  #L4ee078.  call `cancel`(v5) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor$a;.cancel:()V` @kind virtual;
  #L4ee07e.  v6:= v5.`io.reactivex.rxjava3.processors.PublishProcessor$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ee082.  v0:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4ee086.  v1:= "Could not emit value due to lack of requests" @kind object;
  #L4ee08a.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ee090.  call `onError`(v6, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ee096.  return @kind void;
}
procedure `void` `request`(`io.reactivex.rxjava3.processors.PublishProcessor$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ee0a8.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4ee0ae.  v0:= temp;
  #L4ee0b0.  if v0 == 0 then goto L4ee0ba;
  #L4ee0b4.  call temp:= `addCancel`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.addCancel:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4ee0ba.  return @kind void;
}
