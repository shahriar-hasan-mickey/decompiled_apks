record `io.reactivex.rxjava3.processors.UnicastProcessor` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.processors.FlowableProcessor` @kind class {
  `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` `io.reactivex.rxjava3.processors.UnicastProcessor.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.processors.UnicastProcessor.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.processors.UnicastProcessor.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.processors.UnicastProcessor.e` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.rxjava3.processors.UnicastProcessor.f` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.processors.UnicastProcessor.g` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.processors.UnicastProcessor.h` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.processors.UnicastProcessor.i` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription` `io.reactivex.rxjava3.processors.UnicastProcessor.j` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.rxjava3.processors.UnicastProcessor.k` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.processors.UnicastProcessor.l` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.processors.UnicastProcessor` v1 @kind this, `int` v2 , `java.lang.Runnable` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.<init>:(ILjava/lang/Runnable;Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4efcfc.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/processors/FlowableProcessor;.<init>:()V` @kind direct;
  #L4efd02.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4efd06.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4efd0c.  v1.`io.reactivex.rxjava3.processors.UnicastProcessor.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` := v0 @kind object;
  #L4efd10.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4efd14.  call `<init>`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4efd1a.  v1.`io.reactivex.rxjava3.processors.UnicastProcessor.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4efd1e.  v1.`io.reactivex.rxjava3.processors.UnicastProcessor.d` @type ^`boolean` := v4 @kind boolean;
  #L4efd22.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4efd26.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4efd2c.  v1.`io.reactivex.rxjava3.processors.UnicastProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4efd30.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4efd34.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4efd3a.  v1.`io.reactivex.rxjava3.processors.UnicastProcessor.i` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L4efd3e.  v2:= new `io.reactivex.rxjava3.processors.UnicastProcessor$a`;
  #L4efd42.  call `<init>`(v2, v1) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor$a;.<init>:(Lio/reactivex/rxjava3/processors/UnicastProcessor;)V` @kind direct;
  #L4efd48.  v1.`io.reactivex.rxjava3.processors.UnicastProcessor.j` @type ^`io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription` := v2 @kind object;
  #L4efd4c.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4efd50.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4efd56.  v1.`io.reactivex.rxjava3.processors.UnicastProcessor.k` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L4efd5a.  return @kind void;
}
procedure `io.reactivex.rxjava3.processors.UnicastProcessor` `create`() @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.create:()Lio/reactivex/rxjava3/processors/UnicastProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4efc10.  v0:= new `io.reactivex.rxjava3.processors.UnicastProcessor`;
  #L4efc14.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Flowable;.bufferSize:()I` @kind static;
  #L4efc1a.  v1:= temp;
  #L4efc1c.  v2:= 0I;
  #L4efc1e.  v3:= 1I;
  #L4efc20.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.<init>:(ILjava/lang/Runnable;Z)V` @kind direct;
  #L4efc26.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.processors.UnicastProcessor` `create`(`int` v3 ) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.create:(I)Lio/reactivex/rxjava3/processors/UnicastProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4efc60.  v0:= "capacityHint" @kind object;
  #L4efc64.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4efc6a.  v0:= new `io.reactivex.rxjava3.processors.UnicastProcessor`;
  #L4efc6e.  v1:= 0I;
  #L4efc70.  v2:= 1I;
  #L4efc72.  call `<init>`(v0, v3, v1, v2) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.<init>:(ILjava/lang/Runnable;Z)V` @kind direct;
  #L4efc78.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.processors.UnicastProcessor` `create`(`int` v1 , `java.lang.Runnable` v2 @kind object) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.create:(ILjava/lang/Runnable;)Lio/reactivex/rxjava3/processors/UnicastProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4efc8c.  v0:= 1I;
  #L4efc8e.  call temp:= `create`(v1, v2, v0) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.create:(ILjava/lang/Runnable;Z)Lio/reactivex/rxjava3/processors/UnicastProcessor;` @kind static;
  #L4efc94.  v1:= temp @kind object;
  #L4efc96.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.processors.UnicastProcessor` `create`(`int` v1 , `java.lang.Runnable` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.create:(ILjava/lang/Runnable;Z)Lio/reactivex/rxjava3/processors/UnicastProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4efca8.  v0:= "onTerminate" @kind object;
  #L4efcac.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4efcb2.  v0:= "capacityHint" @kind object;
  #L4efcb6.  call temp:= `verifyPositive`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4efcbc.  v0:= new `io.reactivex.rxjava3.processors.UnicastProcessor`;
  #L4efcc0.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.<init>:(ILjava/lang/Runnable;Z)V` @kind direct;
  #L4efcc6.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.processors.UnicastProcessor` `create`(`boolean` v3 ) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.create:(Z)Lio/reactivex/rxjava3/processors/UnicastProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4efc38.  v0:= new `io.reactivex.rxjava3.processors.UnicastProcessor`;
  #L4efc3c.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Flowable;.bufferSize:()I` @kind static;
  #L4efc42.  v1:= temp;
  #L4efc44.  v2:= 0I;
  #L4efc46.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.<init>:(ILjava/lang/Runnable;Z)V` @kind direct;
  #L4efc4c.  return v0 @kind object;
}
procedure `boolean` `e`(`io.reactivex.rxjava3.processors.UnicastProcessor` v3 @kind this, `boolean` v4 , `boolean` v5 , `boolean` v6 , `org.reactivestreams.Subscriber` v7 @kind object, `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` v8 @kind object) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.e:(ZZZLorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4efb14.  v0:= v3.`io.reactivex.rxjava3.processors.UnicastProcessor.h` @type ^`boolean` @kind boolean;
  #L4efb18.  v1:= 1I;
  #L4efb1a.  v2:= 0I;
  #L4efb1c.  if v0 == 0 then goto L4efb32;
  #L4efb20.  call `clear`(v8) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4efb26.  v4:= v3.`io.reactivex.rxjava3.processors.UnicastProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4efb2a.  call `lazySet`(v4, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4efb30.  return v1;
  #L4efb32.  if v5 == 0 then goto L4efb84;
  #L4efb36.  if v4 == 0 then goto L4efb5e;
  #L4efb3a.  v4:= v3.`io.reactivex.rxjava3.processors.UnicastProcessor.f` @type ^`java.lang.Throwable` @kind object;
  #L4efb3e.  if v4 == 0 then goto L4efb5e;
  #L4efb42.  call `clear`(v8) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4efb48.  v4:= v3.`io.reactivex.rxjava3.processors.UnicastProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4efb4c.  call `lazySet`(v4, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4efb52.  v4:= v3.`io.reactivex.rxjava3.processors.UnicastProcessor.f` @type ^`java.lang.Throwable` @kind object;
  #L4efb56.  call `onError`(v7, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4efb5c.  return v1;
  #L4efb5e.  if v6 == 0 then goto L4efb84;
  #L4efb62.  v4:= v3.`io.reactivex.rxjava3.processors.UnicastProcessor.f` @type ^`java.lang.Throwable` @kind object;
  #L4efb66.  v5:= v3.`io.reactivex.rxjava3.processors.UnicastProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4efb6a.  call `lazySet`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4efb70.  if v4 == 0 then goto L4efb7c;
  #L4efb74.  call `onError`(v7, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4efb7a.  goto L4efb82;
  #L4efb7c.  call `onComplete`(v7) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4efb82.  return v1;
  #L4efb84.  v4:= 0I;
  #L4efb86.  return v4;
}
procedure `void` `f`(`io.reactivex.rxjava3.processors.UnicastProcessor` v2 @kind this) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.f:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4efd6c.  v0:= v2.`io.reactivex.rxjava3.processors.UnicastProcessor.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4efd70.  v1:= 0I;
  #L4efd72.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4efd78.  v0:= temp @kind object;
  #L4efd7a.  v0:= (`java.lang.Runnable`) v0 @kind object;
  #L4efd7e.  if v0 == 0 then goto L4efd88;
  #L4efd82.  call `run`(v0) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L4efd88.  return @kind void;
}
procedure `void` `g`(`io.reactivex.rxjava3.processors.UnicastProcessor` v2 @kind this) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4efd9c.  v0:= v2.`io.reactivex.rxjava3.processors.UnicastProcessor.j` @type ^`io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription` @kind object;
  #L4efda0.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4efda6.  v0:= temp;
  #L4efda8.  if v0 == 0 then goto L4efdae;
  #L4efdac.  return @kind void;
  #L4efdae.  v0:= 1I;
  #L4efdb0.  v1:= v2.`io.reactivex.rxjava3.processors.UnicastProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4efdb4.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4efdba.  v1:= temp @kind object;
  #L4efdbc.  v1:= (`org.reactivestreams.Subscriber`) v1 @kind object;
  #L4efdc0.  if v1 == 0 then goto L4efddc;
  #L4efdc4.  v0:= v2.`io.reactivex.rxjava3.processors.UnicastProcessor.l` @type ^`boolean` @kind boolean;
  #L4efdc8.  if v0 == 0 then goto L4efdd4;
  #L4efdcc.  call `h`(v2, v1) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.h:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4efdd2.  goto L4efdda;
  #L4efdd4.  call `i`(v2, v1) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.i:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4efdda.  return @kind void;
  #L4efddc.  v1:= v2.`io.reactivex.rxjava3.processors.UnicastProcessor.j` @type ^`io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription` @kind object;
  #L4efde0.  v0:= -v0 @kind int;
  #L4efde2.  call temp:= `addAndGet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4efde8.  v0:= temp;
  #L4efdea.  if v0 != 0 then goto L4efdf0;
  #L4efdee.  return @kind void;
  #L4efdf0.  v1:= v2.`io.reactivex.rxjava3.processors.UnicastProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4efdf4.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4efdfa.  v1:= temp @kind object;
  #L4efdfc.  v1:= (`org.reactivestreams.Subscriber`) v1 @kind object;
  #L4efe00.  goto L4efdc0;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.rxjava3.processors.UnicastProcessor` v1 @kind this) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4efcd8.  v0:= v1.`io.reactivex.rxjava3.processors.UnicastProcessor.e` @type ^`boolean` @kind boolean;
  #L4efcdc.  if v0 == 0 then goto L4efce6;
  #L4efce0.  v0:= v1.`io.reactivex.rxjava3.processors.UnicastProcessor.f` @type ^`java.lang.Throwable` @kind object;
  #L4efce4.  return v0 @kind object;
  #L4efce6.  v0:= 0I;
  #L4efce8.  return v0 @kind object;
}
procedure `void` `h`(`io.reactivex.rxjava3.processors.UnicastProcessor` v6 @kind this, `org.reactivestreams.Subscriber` v7 @kind object) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.h:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4efe14.  v0:= v6.`io.reactivex.rxjava3.processors.UnicastProcessor.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4efe18.  v1:= v6.`io.reactivex.rxjava3.processors.UnicastProcessor.d` @type ^`boolean` @kind boolean;
  #L4efe1c.  v2:= 1I;
  #L4efe1e.  v1:= v1 ^~ v2 @kind int;
  #L4efe20.  v3:= v6.`io.reactivex.rxjava3.processors.UnicastProcessor.h` @type ^`boolean` @kind boolean;
  #L4efe24.  v4:= 0I;
  #L4efe26.  if v3 == 0 then goto L4efe36;
  #L4efe2a.  v7:= v6.`io.reactivex.rxjava3.processors.UnicastProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4efe2e.  call `lazySet`(v7, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4efe34.  return @kind void;
  #L4efe36.  v3:= v6.`io.reactivex.rxjava3.processors.UnicastProcessor.e` @type ^`boolean` @kind boolean;
  #L4efe3a.  if v1 == 0 then goto L4efe66;
  #L4efe3e.  if v3 == 0 then goto L4efe66;
  #L4efe42.  v5:= v6.`io.reactivex.rxjava3.processors.UnicastProcessor.f` @type ^`java.lang.Throwable` @kind object;
  #L4efe46.  if v5 == 0 then goto L4efe66;
  #L4efe4a.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4efe50.  v0:= v6.`io.reactivex.rxjava3.processors.UnicastProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4efe54.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4efe5a.  v0:= v6.`io.reactivex.rxjava3.processors.UnicastProcessor.f` @type ^`java.lang.Throwable` @kind object;
  #L4efe5e.  call `onError`(v7, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4efe64.  return @kind void;
  #L4efe66.  call `onNext`(v7, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4efe6c.  if v3 == 0 then goto L4efe92;
  #L4efe70.  v0:= v6.`io.reactivex.rxjava3.processors.UnicastProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4efe74.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4efe7a.  v0:= v6.`io.reactivex.rxjava3.processors.UnicastProcessor.f` @type ^`java.lang.Throwable` @kind object;
  #L4efe7e.  if v0 == 0 then goto L4efe8a;
  #L4efe82.  call `onError`(v7, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4efe88.  goto L4efe90;
  #L4efe8a.  call `onComplete`(v7) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4efe90.  return @kind void;
  #L4efe92.  v3:= v6.`io.reactivex.rxjava3.processors.UnicastProcessor.j` @type ^`io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription` @kind object;
  #L4efe96.  v2:= -v2 @kind int;
  #L4efe98.  call temp:= `addAndGet`(v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4efe9e.  v2:= temp;
  #L4efea0.  if v2 != 0 then goto L4efe20;
  #L4efea4.  return @kind void;
}
procedure `boolean` `hasComplete`(`io.reactivex.rxjava3.processors.UnicastProcessor` v1 @kind this) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4efb98.  v0:= v1.`io.reactivex.rxjava3.processors.UnicastProcessor.e` @type ^`boolean` @kind boolean;
  #L4efb9c.  if v0 == 0 then goto L4efbac;
  #L4efba0.  v0:= v1.`io.reactivex.rxjava3.processors.UnicastProcessor.f` @type ^`java.lang.Throwable` @kind object;
  #L4efba4.  if v0 != 0 then goto L4efbac;
  #L4efba8.  v0:= 1I;
  #L4efbaa.  goto L4efbae;
  #L4efbac.  v0:= 0I;
  #L4efbae.  return v0;
}
procedure `boolean` `hasSubscribers`(`io.reactivex.rxjava3.processors.UnicastProcessor` v1 @kind this) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.hasSubscribers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4efbc0.  v0:= v1.`io.reactivex.rxjava3.processors.UnicastProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4efbc4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4efbca.  v0:= temp @kind object;
  #L4efbcc.  if v0 == 0 then goto L4efbd4;
  #L4efbd0.  v0:= 1I;
  #L4efbd2.  goto L4efbd6;
  #L4efbd4.  v0:= 0I;
  #L4efbd6.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.rxjava3.processors.UnicastProcessor` v1 @kind this) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4efbe8.  v0:= v1.`io.reactivex.rxjava3.processors.UnicastProcessor.e` @type ^`boolean` @kind boolean;
  #L4efbec.  if v0 == 0 then goto L4efbfc;
  #L4efbf0.  v0:= v1.`io.reactivex.rxjava3.processors.UnicastProcessor.f` @type ^`java.lang.Throwable` @kind object;
  #L4efbf4.  if v0 == 0 then goto L4efbfc;
  #L4efbf8.  v0:= 1I;
  #L4efbfa.  goto L4efbfe;
  #L4efbfc.  v0:= 0I;
  #L4efbfe.  return v0;
}
procedure `void` `i`(`io.reactivex.rxjava3.processors.UnicastProcessor` v17 @kind this, `org.reactivestreams.Subscriber` v18 @kind object) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.i:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L4efeb8.  v6:= v17 @kind object;
  #L4efebc.  v7:= v6.`io.reactivex.rxjava3.processors.UnicastProcessor.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4efec0.  v0:= v6.`io.reactivex.rxjava3.processors.UnicastProcessor.d` @type ^`boolean` @kind boolean;
  #L4efec4.  v8:= 1I;
  #L4efec6.  v9:= v0 ^~ 1;
  #L4efeca.  v10:= 1I;
  #L4efecc.  v0:= v6.`io.reactivex.rxjava3.processors.UnicastProcessor.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4efed0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4efed6.  v11:= temp @kind wide;
  #L4efed8.  v4:= 0L;
  #L4efedc.  v15:= lcmp(v11, v4);
  #L4efee0.  if v15 == 0 then goto L4eff3e;
  #L4efee4.  v2:= v6.`io.reactivex.rxjava3.processors.UnicastProcessor.e` @type ^`boolean` @kind boolean;
  #L4efee8.  call temp:= `poll`(v7) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4efeee.  v3:= temp @kind object;
  #L4efef0.  if v3 != 0 then goto L4efefa;
  #L4efef4.  v16:= 1I;
  #L4efef8.  goto L4eff00;
  #L4efefa.  v0:= 0I;
  #L4efefc.  v16:= 0I;
  #L4eff00.  v0:= v17 @kind object;
  #L4eff04.  v1:= v9;
  #L4eff06.  v8:= v3 @kind object;
  #L4eff08.  v3:= v16;
  #L4eff0c.  v13:= v4 @kind wide;
  #L4eff0e.  v4:= v18 @kind object;
  #L4eff12.  v5:= v7 @kind object;
  #L4eff14.  call temp:= `e`(v0, v1, v2, v3, v4, v5) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.e:(ZZZLorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)Z` @kind virtual;
  #L4eff1a.  v0:= temp;
  #L4eff1c.  if v0 == 0 then goto L4eff22;
  #L4eff20.  return @kind void;
  #L4eff22.  if v16 == 0 then goto L4eff28;
  #L4eff26.  goto L4eff40;
  #L4eff28.  v5:= v18 @kind object;
  #L4eff2c.  call `onNext`(v5, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4eff32.  v0:= 1L;
  #L4eff36.  v0:= v0 + v13 @kind long;
  #L4eff38.  v4:= v0 @kind wide;
  #L4eff3a.  v8:= 1I;
  #L4eff3c.  goto L4efedc;
  #L4eff3e.  v13:= v4 @kind wide;
  #L4eff40.  v5:= v18 @kind object;
  #L4eff44.  if v15 != 0 then goto L4eff6e;
  #L4eff48.  v2:= v6.`io.reactivex.rxjava3.processors.UnicastProcessor.e` @type ^`boolean` @kind boolean;
  #L4eff4c.  call temp:= `isEmpty`(v7) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L4eff52.  v3:= temp;
  #L4eff54.  v0:= v17 @kind object;
  #L4eff58.  v1:= v9;
  #L4eff5a.  v4:= v18 @kind object;
  #L4eff5e.  v5:= v7 @kind object;
  #L4eff60.  call temp:= `e`(v0, v1, v2, v3, v4, v5) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.e:(ZZZLorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;)Z` @kind virtual;
  #L4eff66.  v0:= temp;
  #L4eff68.  if v0 == 0 then goto L4eff6e;
  #L4eff6c.  return @kind void;
  #L4eff6e.  v0:= 0L;
  #L4eff72.  v2:= lcmp(v13, v0);
  #L4eff76.  if v2 == 0 then goto L4eff98;
  #L4eff7a.  v0:= 9223372036854775807L;
  #L4eff84.  v2:= lcmp(v11, v0);
  #L4eff88.  if v2 == 0 then goto L4eff98;
  #L4eff8c.  v0:= v6.`io.reactivex.rxjava3.processors.UnicastProcessor.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4eff90.  v1:= -v13 @kind long;
  #L4eff92.  call temp:= `addAndGet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L4eff98.  v0:= v6.`io.reactivex.rxjava3.processors.UnicastProcessor.j` @type ^`io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription` @kind object;
  #L4eff9c.  v1:= -v10 @kind int;
  #L4eff9e.  call temp:= `addAndGet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4effa4.  v10:= temp;
  #L4effa6.  if v10 != 0 then goto L4effac;
  #L4effaa.  return @kind void;
  #L4effac.  v8:= 1I;
  #L4effae.  goto L4efecc;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.processors.UnicastProcessor` v1 @kind this) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4effc0.  v0:= v1.`io.reactivex.rxjava3.processors.UnicastProcessor.e` @type ^`boolean` @kind boolean;
  #L4effc4.  if v0 != 0 then goto L4effe4;
  #L4effc8.  v0:= v1.`io.reactivex.rxjava3.processors.UnicastProcessor.h` @type ^`boolean` @kind boolean;
  #L4effcc.  if v0 == 0 then goto L4effd2;
  #L4effd0.  goto L4effe4;
  #L4effd2.  v0:= 1I;
  #L4effd4.  v1.`io.reactivex.rxjava3.processors.UnicastProcessor.e` @type ^`boolean` := v0 @kind boolean;
  #L4effd8.  call `f`(v1) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.f:()V` @kind virtual;
  #L4effde.  call `g`(v1) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.g:()V` @kind virtual;
  #L4effe4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.processors.UnicastProcessor` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4efff8.  v0:= "onError called with a null Throwable." @kind object;
  #L4efffc.  call temp:= `nullCheck`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4f0002.  v0:= v1.`io.reactivex.rxjava3.processors.UnicastProcessor.e` @type ^`boolean` @kind boolean;
  #L4f0006.  if v0 != 0 then goto L4f002c;
  #L4f000a.  v0:= v1.`io.reactivex.rxjava3.processors.UnicastProcessor.h` @type ^`boolean` @kind boolean;
  #L4f000e.  if v0 == 0 then goto L4f0014;
  #L4f0012.  goto L4f002c;
  #L4f0014.  v1.`io.reactivex.rxjava3.processors.UnicastProcessor.f` @type ^`java.lang.Throwable` := v2 @kind object;
  #L4f0018.  v2:= 1I;
  #L4f001a.  v1.`io.reactivex.rxjava3.processors.UnicastProcessor.e` @type ^`boolean` := v2 @kind boolean;
  #L4f001e.  call `f`(v1) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.f:()V` @kind virtual;
  #L4f0024.  call `g`(v1) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.g:()V` @kind virtual;
  #L4f002a.  return @kind void;
  #L4f002c.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4f0032.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.processors.UnicastProcessor` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f0044.  v0:= "onNext called with a null value." @kind object;
  #L4f0048.  call temp:= `nullCheck`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4f004e.  v0:= v1.`io.reactivex.rxjava3.processors.UnicastProcessor.e` @type ^`boolean` @kind boolean;
  #L4f0052.  if v0 != 0 then goto L4f0070;
  #L4f0056.  v0:= v1.`io.reactivex.rxjava3.processors.UnicastProcessor.h` @type ^`boolean` @kind boolean;
  #L4f005a.  if v0 == 0 then goto L4f0060;
  #L4f005e.  goto L4f0070;
  #L4f0060.  v0:= v1.`io.reactivex.rxjava3.processors.UnicastProcessor.b` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4f0064.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4f006a.  call `g`(v1) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.g:()V` @kind virtual;
  #L4f0070.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.processors.UnicastProcessor` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f0084.  v0:= v2.`io.reactivex.rxjava3.processors.UnicastProcessor.e` @type ^`boolean` @kind boolean;
  #L4f0088.  if v0 != 0 then goto L4f00a8;
  #L4f008c.  v0:= v2.`io.reactivex.rxjava3.processors.UnicastProcessor.h` @type ^`boolean` @kind boolean;
  #L4f0090.  if v0 == 0 then goto L4f0096;
  #L4f0094.  goto L4f00a8;
  #L4f0096.  v0:= 9223372036854775807L;
  #L4f00a0.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4f00a6.  goto L4f00ae;
  #L4f00a8.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4f00ae.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.processors.UnicastProcessor` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L4f00c0.  v0:= v3.`io.reactivex.rxjava3.processors.UnicastProcessor.i` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4f00c4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4f00ca.  v0:= temp;
  #L4f00cc.  if v0 != 0 then goto L4f0116;
  #L4f00d0.  v0:= v3.`io.reactivex.rxjava3.processors.UnicastProcessor.i` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4f00d4.  v1:= 0I;
  #L4f00d6.  v2:= 1I;
  #L4f00d8.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4f00de.  v0:= temp;
  #L4f00e0.  if v0 == 0 then goto L4f0116;
  #L4f00e4.  v0:= v3.`io.reactivex.rxjava3.processors.UnicastProcessor.j` @type ^`io.reactivex.rxjava3.internal.subscriptions.BasicIntQueueSubscription` @kind object;
  #L4f00e8.  call `onSubscribe`(v4, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4f00ee.  v0:= v3.`io.reactivex.rxjava3.processors.UnicastProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f00f2.  call `set`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4f00f8.  v4:= v3.`io.reactivex.rxjava3.processors.UnicastProcessor.h` @type ^`boolean` @kind boolean;
  #L4f00fc.  if v4 == 0 then goto L4f010e;
  #L4f0100.  v4:= v3.`io.reactivex.rxjava3.processors.UnicastProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f0104.  v0:= 0I;
  #L4f0106.  call `lazySet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4f010c.  goto L4f012a;
  #L4f010e.  call `g`(v3) @signature `Lio/reactivex/rxjava3/processors/UnicastProcessor;.g:()V` @kind virtual;
  #L4f0114.  goto L4f012a;
  #L4f0116.  v0:= new `java.lang.IllegalStateException`;
  #L4f011a.  v1:= "This processor allows only a single Subscriber" @kind object;
  #L4f011e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f0124.  call `error`(v0, v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L4f012a.  return @kind void;
}
