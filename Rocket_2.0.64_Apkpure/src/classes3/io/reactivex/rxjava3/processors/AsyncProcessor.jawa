record `io.reactivex.rxjava3.processors.AsyncProcessor` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.processors.FlowableProcessor` @kind class {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.processors.AsyncProcessor.b` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.rxjava3.processors.AsyncProcessor.c` @AccessFlag ;
  `java.lang.Object` `io.reactivex.rxjava3.processors.AsyncProcessor.d` @AccessFlag ;
}
global `io.reactivex.rxjava3.processors.AsyncProcessor$a`[] `@@io.reactivex.rxjava3.processors.AsyncProcessor.e` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.processors.AsyncProcessor$a`[] `@@io.reactivex.rxjava3.processors.AsyncProcessor.f` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/processors/AsyncProcessor;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4eca9c.  v0:= 0I;
  #L4eca9e.  v1:= new `io.reactivex.rxjava3.processors.AsyncProcessor$a`[v0];
  #L4ecaa2.  `@@io.reactivex.rxjava3.processors.AsyncProcessor.e` @type ^`io.reactivex.rxjava3.processors.AsyncProcessor$a`[] := v1 @kind object;
  #L4ecaa6.  v0:= new `io.reactivex.rxjava3.processors.AsyncProcessor$a`[v0];
  #L4ecaaa.  `@@io.reactivex.rxjava3.processors.AsyncProcessor.f` @type ^`io.reactivex.rxjava3.processors.AsyncProcessor$a`[] := v0 @kind object;
  #L4ecaae.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.processors.AsyncProcessor` v2 @kind this) @signature `Lio/reactivex/rxjava3/processors/AsyncProcessor;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4ecac0.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/processors/FlowableProcessor;.<init>:()V` @kind direct;
  #L4ecac6.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4ecaca.  v1:= `@@io.reactivex.rxjava3.processors.AsyncProcessor.e` @type ^`io.reactivex.rxjava3.processors.AsyncProcessor$a`[] @kind object;
  #L4ecace.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4ecad4.  v2.`io.reactivex.rxjava3.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4ecad8.  return @kind void;
}
procedure `io.reactivex.rxjava3.processors.AsyncProcessor` `create`() @signature `Lio/reactivex/rxjava3/processors/AsyncProcessor;.create:()Lio/reactivex/rxjava3/processors/AsyncProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4eca20.  v0:= new `io.reactivex.rxjava3.processors.AsyncProcessor`;
  #L4eca24.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/processors/AsyncProcessor;.<init>:()V` @kind direct;
  #L4eca2a.  return v0 @kind object;
}
procedure `boolean` `e`(`io.reactivex.rxjava3.processors.AsyncProcessor` v4 @kind this, `io.reactivex.rxjava3.processors.AsyncProcessor$a` v5 @kind object) @signature `Lio/reactivex/rxjava3/processors/AsyncProcessor;.e:(Lio/reactivex/rxjava3/processors/AsyncProcessor$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4ec900.  v0:= v4.`io.reactivex.rxjava3.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ec904.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ec90a.  v0:= temp @kind object;
  #L4ec90c.  v0:= (`io.reactivex.rxjava3.processors.AsyncProcessor$a`[]) v0 @kind object;
  #L4ec910.  v1:= `@@io.reactivex.rxjava3.processors.AsyncProcessor.f` @type ^`io.reactivex.rxjava3.processors.AsyncProcessor$a`[] @kind object;
  #L4ec914.  v2:= 0I;
  #L4ec916.  if v0 != v1 then goto L4ec91c;
  #L4ec91a.  return v2;
  #L4ec91c.  v1:= length @variable v0;
  #L4ec91e.  v3:= v1 + 1;
  #L4ec922.  v3:= new `io.reactivex.rxjava3.processors.AsyncProcessor$a`[v3];
  #L4ec926.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4ec92c.  v3[v1]:= v5 @kind object;
  #L4ec930.  v1:= v4.`io.reactivex.rxjava3.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ec934.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4ec93a.  v0:= temp;
  #L4ec93c.  if v0 == 0 then goto L4ec900;
  #L4ec940.  v5:= 1I;
  #L4ec942.  return v5;
}
procedure `void` `f`(`io.reactivex.rxjava3.processors.AsyncProcessor` v6 @kind this, `io.reactivex.rxjava3.processors.AsyncProcessor$a` v7 @kind object) @signature `Lio/reactivex/rxjava3/processors/AsyncProcessor;.f:(Lio/reactivex/rxjava3/processors/AsyncProcessor$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4ecc40.  v0:= v6.`io.reactivex.rxjava3.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ecc44.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ecc4a.  v0:= temp @kind object;
  #L4ecc4c.  v0:= (`io.reactivex.rxjava3.processors.AsyncProcessor$a`[]) v0 @kind object;
  #L4ecc50.  v1:= length @variable v0;
  #L4ecc52.  if v1 != 0 then goto L4ecc58;
  #L4ecc56.  return @kind void;
  #L4ecc58.  v2:= -1I;
  #L4ecc5a.  v3:= 0I;
  #L4ecc5c.  v4:= 0I;
  #L4ecc5e.  if v4 >= v1 then goto L4ecc74;
  #L4ecc62.  v5:= v0[v4] @kind object;
  #L4ecc66.  if v5 != v7 then goto L4ecc6e;
  #L4ecc6a.  v2:= v4;
  #L4ecc6c.  goto L4ecc74;
  #L4ecc6e.  v4:= v4 + 1;
  #L4ecc72.  goto L4ecc5e;
  #L4ecc74.  if v2 >= 0 then goto L4ecc7a;
  #L4ecc78.  return @kind void;
  #L4ecc7a.  v4:= 1I;
  #L4ecc7c.  if v1 != v4 then goto L4ecc86;
  #L4ecc80.  v1:= `@@io.reactivex.rxjava3.processors.AsyncProcessor.e` @type ^`io.reactivex.rxjava3.processors.AsyncProcessor$a`[] @kind object;
  #L4ecc84.  goto L4ecca4;
  #L4ecc86.  v5:= v1 + -1;
  #L4ecc8a.  v5:= new `io.reactivex.rxjava3.processors.AsyncProcessor$a`[v5];
  #L4ecc8e.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4ecc94.  v3:= v2 + 1;
  #L4ecc98.  v1:= v1 - v2 @kind int;
  #L4ecc9a.  v1:= v1 - v4 @kind int;
  #L4ecc9c.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4ecca2.  v1:= v5 @kind object;
  #L4ecca4.  v2:= v6.`io.reactivex.rxjava3.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ecca8.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4eccae.  v0:= temp;
  #L4eccb0.  if v0 == 0 then goto L4ecc40;
  #L4eccb4.  return @kind void;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.rxjava3.processors.AsyncProcessor` v2 @kind this) @signature `Lio/reactivex/rxjava3/processors/AsyncProcessor;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4eca6c.  v0:= v2.`io.reactivex.rxjava3.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4eca70.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4eca76.  v0:= temp @kind object;
  #L4eca78.  v1:= `@@io.reactivex.rxjava3.processors.AsyncProcessor.f` @type ^`io.reactivex.rxjava3.processors.AsyncProcessor$a`[] @kind object;
  #L4eca7c.  if v0 != v1 then goto L4eca86;
  #L4eca80.  v0:= v2.`io.reactivex.rxjava3.processors.AsyncProcessor.c` @type ^`java.lang.Throwable` @kind object;
  #L4eca84.  goto L4eca88;
  #L4eca86.  v0:= 0I;
  #L4eca88.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.rxjava3.processors.AsyncProcessor` v2 @kind this) @signature `Lio/reactivex/rxjava3/processors/AsyncProcessor;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4eca3c.  v0:= v2.`io.reactivex.rxjava3.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4eca40.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4eca46.  v0:= temp @kind object;
  #L4eca48.  v1:= `@@io.reactivex.rxjava3.processors.AsyncProcessor.f` @type ^`io.reactivex.rxjava3.processors.AsyncProcessor$a`[] @kind object;
  #L4eca4c.  if v0 != v1 then goto L4eca56;
  #L4eca50.  v0:= v2.`io.reactivex.rxjava3.processors.AsyncProcessor.d` @type ^`java.lang.Object` @kind object;
  #L4eca54.  goto L4eca58;
  #L4eca56.  v0:= 0I;
  #L4eca58.  return v0 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.rxjava3.processors.AsyncProcessor` v2 @kind this) @signature `Lio/reactivex/rxjava3/processors/AsyncProcessor;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ec954.  v0:= v2.`io.reactivex.rxjava3.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ec958.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ec95e.  v0:= temp @kind object;
  #L4ec960.  v1:= `@@io.reactivex.rxjava3.processors.AsyncProcessor.f` @type ^`io.reactivex.rxjava3.processors.AsyncProcessor$a`[] @kind object;
  #L4ec964.  if v0 != v1 then goto L4ec974;
  #L4ec968.  v0:= v2.`io.reactivex.rxjava3.processors.AsyncProcessor.c` @type ^`java.lang.Throwable` @kind object;
  #L4ec96c.  if v0 != 0 then goto L4ec974;
  #L4ec970.  v0:= 1I;
  #L4ec972.  goto L4ec976;
  #L4ec974.  v0:= 0I;
  #L4ec976.  return v0;
}
procedure `boolean` `hasSubscribers`(`io.reactivex.rxjava3.processors.AsyncProcessor` v1 @kind this) @signature `Lio/reactivex/rxjava3/processors/AsyncProcessor;.hasSubscribers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ec988.  v0:= v1.`io.reactivex.rxjava3.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ec98c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ec992.  v0:= temp @kind object;
  #L4ec994.  v0:= (`io.reactivex.rxjava3.processors.AsyncProcessor$a`[]) v0 @kind object;
  #L4ec998.  v0:= length @variable v0;
  #L4ec99a.  if v0 == 0 then goto L4ec9a2;
  #L4ec99e.  v0:= 1I;
  #L4ec9a0.  goto L4ec9a4;
  #L4ec9a2.  v0:= 0I;
  #L4ec9a4.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.rxjava3.processors.AsyncProcessor` v2 @kind this) @signature `Lio/reactivex/rxjava3/processors/AsyncProcessor;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ec9b8.  v0:= v2.`io.reactivex.rxjava3.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ec9bc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ec9c2.  v0:= temp @kind object;
  #L4ec9c4.  v1:= `@@io.reactivex.rxjava3.processors.AsyncProcessor.f` @type ^`io.reactivex.rxjava3.processors.AsyncProcessor$a`[] @kind object;
  #L4ec9c8.  if v0 != v1 then goto L4ec9d8;
  #L4ec9cc.  v0:= v2.`io.reactivex.rxjava3.processors.AsyncProcessor.c` @type ^`java.lang.Throwable` @kind object;
  #L4ec9d0.  if v0 == 0 then goto L4ec9d8;
  #L4ec9d4.  v0:= 1I;
  #L4ec9d6.  goto L4ec9da;
  #L4ec9d8.  v0:= 0I;
  #L4ec9da.  return v0;
}
procedure `boolean` `hasValue`(`io.reactivex.rxjava3.processors.AsyncProcessor` v2 @kind this) @signature `Lio/reactivex/rxjava3/processors/AsyncProcessor;.hasValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ec9ec.  v0:= v2.`io.reactivex.rxjava3.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ec9f0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ec9f6.  v0:= temp @kind object;
  #L4ec9f8.  v1:= `@@io.reactivex.rxjava3.processors.AsyncProcessor.f` @type ^`io.reactivex.rxjava3.processors.AsyncProcessor$a`[] @kind object;
  #L4ec9fc.  if v0 != v1 then goto L4eca0c;
  #L4eca00.  v0:= v2.`io.reactivex.rxjava3.processors.AsyncProcessor.d` @type ^`java.lang.Object` @kind object;
  #L4eca04.  if v0 == 0 then goto L4eca0c;
  #L4eca08.  v0:= 1I;
  #L4eca0a.  goto L4eca0e;
  #L4eca0c.  v0:= 0I;
  #L4eca0e.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.processors.AsyncProcessor` v5 @kind this) @signature `Lio/reactivex/rxjava3/processors/AsyncProcessor;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4ecaec.  v0:= v5.`io.reactivex.rxjava3.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ecaf0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ecaf6.  v0:= temp @kind object;
  #L4ecaf8.  v1:= `@@io.reactivex.rxjava3.processors.AsyncProcessor.f` @type ^`io.reactivex.rxjava3.processors.AsyncProcessor$a`[] @kind object;
  #L4ecafc.  if v0 != v1 then goto L4ecb02;
  #L4ecb00.  return @kind void;
  #L4ecb02.  v0:= v5.`io.reactivex.rxjava3.processors.AsyncProcessor.d` @type ^`java.lang.Object` @kind object;
  #L4ecb06.  v2:= v5.`io.reactivex.rxjava3.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ecb0a.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4ecb10.  v1:= temp @kind object;
  #L4ecb12.  v1:= (`io.reactivex.rxjava3.processors.AsyncProcessor$a`[]) v1 @kind object;
  #L4ecb16.  v2:= 0I;
  #L4ecb18.  if v0 != 0 then goto L4ecb32;
  #L4ecb1c.  v0:= length @variable v1;
  #L4ecb1e.  if v2 >= v0 then goto L4ecb48;
  #L4ecb22.  v3:= v1[v2] @kind object;
  #L4ecb26.  call `onComplete`(v3) @signature `Lio/reactivex/rxjava3/processors/AsyncProcessor$a;.onComplete:()V` @kind virtual;
  #L4ecb2c.  v2:= v2 + 1;
  #L4ecb30.  goto L4ecb1e;
  #L4ecb32.  v3:= length @variable v1;
  #L4ecb34.  if v2 >= v3 then goto L4ecb48;
  #L4ecb38.  v4:= v1[v2] @kind object;
  #L4ecb3c.  call `complete`(v4, v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L4ecb42.  v2:= v2 + 1;
  #L4ecb46.  goto L4ecb34;
  #L4ecb48.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.processors.AsyncProcessor` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/rxjava3/processors/AsyncProcessor;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4ecb5c.  v0:= "onError called with a null Throwable." @kind object;
  #L4ecb60.  call temp:= `nullCheck`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4ecb66.  v0:= v4.`io.reactivex.rxjava3.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ecb6a.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ecb70.  v0:= temp @kind object;
  #L4ecb72.  v1:= `@@io.reactivex.rxjava3.processors.AsyncProcessor.f` @type ^`io.reactivex.rxjava3.processors.AsyncProcessor$a`[] @kind object;
  #L4ecb76.  if v0 != v1 then goto L4ecb82;
  #L4ecb7a.  call `onError`(v5) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4ecb80.  return @kind void;
  #L4ecb82.  v0:= 0I;
  #L4ecb84.  v4.`io.reactivex.rxjava3.processors.AsyncProcessor.d` @type ^`java.lang.Object` := v0 @kind object;
  #L4ecb88.  v4.`io.reactivex.rxjava3.processors.AsyncProcessor.c` @type ^`java.lang.Throwable` := v5 @kind object;
  #L4ecb8c.  v0:= v4.`io.reactivex.rxjava3.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ecb90.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4ecb96.  v0:= temp @kind object;
  #L4ecb98.  v0:= (`io.reactivex.rxjava3.processors.AsyncProcessor$a`[]) v0 @kind object;
  #L4ecb9c.  v1:= length @variable v0;
  #L4ecb9e.  v2:= 0I;
  #L4ecba0.  if v2 >= v1 then goto L4ecbb4;
  #L4ecba4.  v3:= v0[v2] @kind object;
  #L4ecba8.  call `onError`(v3, v5) @signature `Lio/reactivex/rxjava3/processors/AsyncProcessor$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4ecbae.  v2:= v2 + 1;
  #L4ecbb2.  goto L4ecba0;
  #L4ecbb4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.processors.AsyncProcessor` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/processors/AsyncProcessor;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ecbc8.  v0:= "onNext called with a null value." @kind object;
  #L4ecbcc.  call temp:= `nullCheck`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4ecbd2.  v0:= v2.`io.reactivex.rxjava3.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ecbd6.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ecbdc.  v0:= temp @kind object;
  #L4ecbde.  v1:= `@@io.reactivex.rxjava3.processors.AsyncProcessor.f` @type ^`io.reactivex.rxjava3.processors.AsyncProcessor$a`[] @kind object;
  #L4ecbe2.  if v0 != v1 then goto L4ecbe8;
  #L4ecbe6.  return @kind void;
  #L4ecbe8.  v2.`io.reactivex.rxjava3.processors.AsyncProcessor.d` @type ^`java.lang.Object` := v3 @kind object;
  #L4ecbec.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.processors.AsyncProcessor` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/processors/AsyncProcessor;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ecc00.  v0:= v2.`io.reactivex.rxjava3.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ecc04.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ecc0a.  v0:= temp @kind object;
  #L4ecc0c.  v1:= `@@io.reactivex.rxjava3.processors.AsyncProcessor.f` @type ^`io.reactivex.rxjava3.processors.AsyncProcessor$a`[] @kind object;
  #L4ecc10.  if v0 != v1 then goto L4ecc1c;
  #L4ecc14.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4ecc1a.  return @kind void;
  #L4ecc1c.  v0:= 9223372036854775807L;
  #L4ecc26.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4ecc2c.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.processors.AsyncProcessor` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lio/reactivex/rxjava3/processors/AsyncProcessor;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L4eccc8.  v0:= new `io.reactivex.rxjava3.processors.AsyncProcessor$a`;
  #L4ecccc.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/rxjava3/processors/AsyncProcessor$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/processors/AsyncProcessor;)V` @kind direct;
  #L4eccd2.  call `onSubscribe`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4eccd8.  call temp:= `e`(v2, v0) @signature `Lio/reactivex/rxjava3/processors/AsyncProcessor;.e:(Lio/reactivex/rxjava3/processors/AsyncProcessor$a;)Z` @kind virtual;
  #L4eccde.  v1:= temp;
  #L4ecce0.  if v1 == 0 then goto L4eccf8;
  #L4ecce4.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.isCancelled:()Z` @kind virtual;
  #L4eccea.  v3:= temp;
  #L4eccec.  if v3 == 0 then goto L4ecd1e;
  #L4eccf0.  call `f`(v2, v0) @signature `Lio/reactivex/rxjava3/processors/AsyncProcessor;.f:(Lio/reactivex/rxjava3/processors/AsyncProcessor$a;)V` @kind virtual;
  #L4eccf6.  goto L4ecd1e;
  #L4eccf8.  v1:= v2.`io.reactivex.rxjava3.processors.AsyncProcessor.c` @type ^`java.lang.Throwable` @kind object;
  #L4eccfc.  if v1 == 0 then goto L4ecd08;
  #L4ecd00.  call `onError`(v3, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ecd06.  goto L4ecd1e;
  #L4ecd08.  v3:= v2.`io.reactivex.rxjava3.processors.AsyncProcessor.d` @type ^`java.lang.Object` @kind object;
  #L4ecd0c.  if v3 == 0 then goto L4ecd18;
  #L4ecd10.  call `complete`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L4ecd16.  goto L4ecd1e;
  #L4ecd18.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/processors/AsyncProcessor$a;.onComplete:()V` @kind virtual;
  #L4ecd1e.  return @kind void;
}
