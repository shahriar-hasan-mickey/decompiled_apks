record `io.reactivex.rxjava3.processors.ReplayProcessor` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.processors.FlowableProcessor` @kind class {
  `io.reactivex.rxjava3.processors.ReplayProcessor$b` `io.reactivex.rxjava3.processors.ReplayProcessor.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.processors.ReplayProcessor.c` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.processors.ReplayProcessor.d` @AccessFlag FINAL;
}
global `java.lang.Object`[] `@@io.reactivex.rxjava3.processors.ReplayProcessor.e` @AccessFlag PRIVATE_STATIC_FINAL;
global `io.reactivex.rxjava3.processors.ReplayProcessor$c`[] `@@io.reactivex.rxjava3.processors.ReplayProcessor.f` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.processors.ReplayProcessor$c`[] `@@io.reactivex.rxjava3.processors.ReplayProcessor.g` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4ef3b8.  v0:= 0I;
  #L4ef3ba.  v1:= new `java.lang.Object`[v0];
  #L4ef3be.  `@@io.reactivex.rxjava3.processors.ReplayProcessor.e` @type ^`java.lang.Object`[] := v1 @kind object;
  #L4ef3c2.  v1:= new `io.reactivex.rxjava3.processors.ReplayProcessor$c`[v0];
  #L4ef3c6.  `@@io.reactivex.rxjava3.processors.ReplayProcessor.f` @type ^`io.reactivex.rxjava3.processors.ReplayProcessor$c`[] := v1 @kind object;
  #L4ef3ca.  v0:= new `io.reactivex.rxjava3.processors.ReplayProcessor$c`[v0];
  #L4ef3ce.  `@@io.reactivex.rxjava3.processors.ReplayProcessor.g` @type ^`io.reactivex.rxjava3.processors.ReplayProcessor$c`[] := v0 @kind object;
  #L4ef3d2.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.processors.ReplayProcessor` v1 @kind this, `io.reactivex.rxjava3.processors.ReplayProcessor$b` v2 @kind object) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor;.<init>:(Lio/reactivex/rxjava3/processors/ReplayProcessor$b;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4ef3e4.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/processors/FlowableProcessor;.<init>:()V` @kind direct;
  #L4ef3ea.  v1.`io.reactivex.rxjava3.processors.ReplayProcessor.b` @type ^`io.reactivex.rxjava3.processors.ReplayProcessor$b` := v2 @kind object;
  #L4ef3ee.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4ef3f2.  v0:= `@@io.reactivex.rxjava3.processors.ReplayProcessor.f` @type ^`io.reactivex.rxjava3.processors.ReplayProcessor$c`[] @kind object;
  #L4ef3f6.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4ef3fc.  v1.`io.reactivex.rxjava3.processors.ReplayProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4ef400.  return @kind void;
}
procedure `io.reactivex.rxjava3.processors.ReplayProcessor` `create`() @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor;.create:()Lio/reactivex/rxjava3/processors/ReplayProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4ef1e4.  v0:= new `io.reactivex.rxjava3.processors.ReplayProcessor`;
  #L4ef1e8.  v1:= new `io.reactivex.rxjava3.processors.ReplayProcessor$g`;
  #L4ef1ec.  v2:= 16I;
  #L4ef1f0.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor$g;.<init>:(I)V` @kind direct;
  #L4ef1f6.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor;.<init>:(Lio/reactivex/rxjava3/processors/ReplayProcessor$b;)V` @kind direct;
  #L4ef1fc.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.processors.ReplayProcessor` `create`(`int` v2 ) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor;.create:(I)Lio/reactivex/rxjava3/processors/ReplayProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4ef210.  v0:= "capacityHint" @kind object;
  #L4ef214.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4ef21a.  v0:= new `io.reactivex.rxjava3.processors.ReplayProcessor`;
  #L4ef21e.  v1:= new `io.reactivex.rxjava3.processors.ReplayProcessor$g`;
  #L4ef222.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor$g;.<init>:(I)V` @kind direct;
  #L4ef228.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor;.<init>:(Lio/reactivex/rxjava3/processors/ReplayProcessor$b;)V` @kind direct;
  #L4ef22e.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.processors.ReplayProcessor` `createWithSize`(`int` v2 ) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor;.createWithSize:(I)Lio/reactivex/rxjava3/processors/ReplayProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4ef240.  v0:= "maxSize" @kind object;
  #L4ef244.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4ef24a.  v0:= new `io.reactivex.rxjava3.processors.ReplayProcessor`;
  #L4ef24e.  v1:= new `io.reactivex.rxjava3.processors.ReplayProcessor$e`;
  #L4ef252.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor$e;.<init>:(I)V` @kind direct;
  #L4ef258.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor;.<init>:(Lio/reactivex/rxjava3/processors/ReplayProcessor$b;)V` @kind direct;
  #L4ef25e.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.processors.ReplayProcessor` `createWithTime`(`long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.rxjava3.core.Scheduler` v11 @kind object) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor;.createWithTime:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)Lio/reactivex/rxjava3/processors/ReplayProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4ef270.  v0:= "maxAge" @kind object;
  #L4ef274.  call temp:= `verifyPositive`(v8, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(JLjava/lang/String;)J` @kind static;
  #L4ef27a.  v0:= "unit is null" @kind object;
  #L4ef27e.  call temp:= `requireNonNull`(v10, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4ef284.  v0:= "scheduler is null" @kind object;
  #L4ef288.  call temp:= `requireNonNull`(v11, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4ef28e.  v0:= new `io.reactivex.rxjava3.processors.ReplayProcessor`;
  #L4ef292.  v7:= new `io.reactivex.rxjava3.processors.ReplayProcessor$d`;
  #L4ef296.  v2:= 2147483647I;
  #L4ef29c.  v1:= v7 @kind object;
  #L4ef29e.  v3:= v8 @kind wide;
  #L4ef2a0.  v5:= v10 @kind object;
  #L4ef2a2.  v6:= v11 @kind object;
  #L4ef2a4.  call `<init>`(v1, v2, v3, v5, v6) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor$d;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)V` @kind direct;
  #L4ef2aa.  call `<init>`(v0, v7) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor;.<init>:(Lio/reactivex/rxjava3/processors/ReplayProcessor$b;)V` @kind direct;
  #L4ef2b0.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.processors.ReplayProcessor` `createWithTimeAndSize`(`long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.rxjava3.core.Scheduler` v11 @kind object, `int` v12 ) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor;.createWithTimeAndSize:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;I)Lio/reactivex/rxjava3/processors/ReplayProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4ef2c4.  v0:= "maxSize" @kind object;
  #L4ef2c8.  call temp:= `verifyPositive`(v12, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4ef2ce.  v0:= "maxAge" @kind object;
  #L4ef2d2.  call temp:= `verifyPositive`(v8, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(JLjava/lang/String;)J` @kind static;
  #L4ef2d8.  v0:= "unit is null" @kind object;
  #L4ef2dc.  call temp:= `requireNonNull`(v10, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4ef2e2.  v0:= "scheduler is null" @kind object;
  #L4ef2e6.  call temp:= `requireNonNull`(v11, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4ef2ec.  v0:= new `io.reactivex.rxjava3.processors.ReplayProcessor`;
  #L4ef2f0.  v7:= new `io.reactivex.rxjava3.processors.ReplayProcessor$d`;
  #L4ef2f4.  v1:= v7 @kind object;
  #L4ef2f6.  v2:= v12;
  #L4ef2f8.  v3:= v8 @kind wide;
  #L4ef2fa.  v5:= v10 @kind object;
  #L4ef2fc.  v6:= v11 @kind object;
  #L4ef2fe.  call `<init>`(v1, v2, v3, v5, v6) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor$d;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)V` @kind direct;
  #L4ef304.  call `<init>`(v0, v7) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor;.<init>:(Lio/reactivex/rxjava3/processors/ReplayProcessor$b;)V` @kind direct;
  #L4ef30a.  return v0 @kind object;
}
procedure `void` `cleanupBuffer`(`io.reactivex.rxjava3.processors.ReplayProcessor` v1 @kind this) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor;.cleanupBuffer:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ef414.  v0:= v1.`io.reactivex.rxjava3.processors.ReplayProcessor.b` @type ^`io.reactivex.rxjava3.processors.ReplayProcessor$b` @kind object;
  #L4ef418.  call `e`(v0) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor$b;.e:()V` @kind interface;
  #L4ef41e.  return @kind void;
}
procedure `boolean` `e`(`io.reactivex.rxjava3.processors.ReplayProcessor` v4 @kind this, `io.reactivex.rxjava3.processors.ReplayProcessor$c` v5 @kind object) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor;.e:(Lio/reactivex/rxjava3/processors/ReplayProcessor$c;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4ef0d0.  v0:= v4.`io.reactivex.rxjava3.processors.ReplayProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ef0d4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ef0da.  v0:= temp @kind object;
  #L4ef0dc.  v0:= (`io.reactivex.rxjava3.processors.ReplayProcessor$c`[]) v0 @kind object;
  #L4ef0e0.  v1:= `@@io.reactivex.rxjava3.processors.ReplayProcessor.g` @type ^`io.reactivex.rxjava3.processors.ReplayProcessor$c`[] @kind object;
  #L4ef0e4.  v2:= 0I;
  #L4ef0e6.  if v0 != v1 then goto L4ef0ec;
  #L4ef0ea.  return v2;
  #L4ef0ec.  v1:= length @variable v0;
  #L4ef0ee.  v3:= v1 + 1;
  #L4ef0f2.  v3:= new `io.reactivex.rxjava3.processors.ReplayProcessor$c`[v3];
  #L4ef0f6.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4ef0fc.  v3[v1]:= v5 @kind object;
  #L4ef100.  v1:= v4.`io.reactivex.rxjava3.processors.ReplayProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ef104.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4ef10a.  v0:= temp;
  #L4ef10c.  if v0 == 0 then goto L4ef0d0;
  #L4ef110.  v5:= 1I;
  #L4ef112.  return v5;
}
procedure `void` `f`(`io.reactivex.rxjava3.processors.ReplayProcessor` v6 @kind this, `io.reactivex.rxjava3.processors.ReplayProcessor$c` v7 @kind object) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor;.f:(Lio/reactivex/rxjava3/processors/ReplayProcessor$c;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4ef57c.  v0:= v6.`io.reactivex.rxjava3.processors.ReplayProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ef580.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ef586.  v0:= temp @kind object;
  #L4ef588.  v0:= (`io.reactivex.rxjava3.processors.ReplayProcessor$c`[]) v0 @kind object;
  #L4ef58c.  v1:= `@@io.reactivex.rxjava3.processors.ReplayProcessor.g` @type ^`io.reactivex.rxjava3.processors.ReplayProcessor$c`[] @kind object;
  #L4ef590.  if v0 == v1 then goto L4ef5fc;
  #L4ef594.  v1:= `@@io.reactivex.rxjava3.processors.ReplayProcessor.f` @type ^`io.reactivex.rxjava3.processors.ReplayProcessor$c`[] @kind object;
  #L4ef598.  if v0 != v1 then goto L4ef59e;
  #L4ef59c.  goto L4ef5fc;
  #L4ef59e.  v1:= length @variable v0;
  #L4ef5a0.  v2:= -1I;
  #L4ef5a2.  v3:= 0I;
  #L4ef5a4.  v4:= 0I;
  #L4ef5a6.  if v4 >= v1 then goto L4ef5bc;
  #L4ef5aa.  v5:= v0[v4] @kind object;
  #L4ef5ae.  if v5 != v7 then goto L4ef5b6;
  #L4ef5b2.  v2:= v4;
  #L4ef5b4.  goto L4ef5bc;
  #L4ef5b6.  v4:= v4 + 1;
  #L4ef5ba.  goto L4ef5a6;
  #L4ef5bc.  if v2 >= 0 then goto L4ef5c2;
  #L4ef5c0.  return @kind void;
  #L4ef5c2.  v4:= 1I;
  #L4ef5c4.  if v1 != v4 then goto L4ef5ce;
  #L4ef5c8.  v1:= `@@io.reactivex.rxjava3.processors.ReplayProcessor.f` @type ^`io.reactivex.rxjava3.processors.ReplayProcessor$c`[] @kind object;
  #L4ef5cc.  goto L4ef5ec;
  #L4ef5ce.  v5:= v1 + -1;
  #L4ef5d2.  v5:= new `io.reactivex.rxjava3.processors.ReplayProcessor$c`[v5];
  #L4ef5d6.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4ef5dc.  v3:= v2 + 1;
  #L4ef5e0.  v1:= v1 - v2 @kind int;
  #L4ef5e2.  v1:= v1 - v4 @kind int;
  #L4ef5e4.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4ef5ea.  v1:= v5 @kind object;
  #L4ef5ec.  v2:= v6.`io.reactivex.rxjava3.processors.ReplayProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ef5f0.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4ef5f6.  v0:= temp;
  #L4ef5f8.  if v0 == 0 then goto L4ef57c;
  #L4ef5fc.  return @kind void;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.rxjava3.processors.ReplayProcessor` v2 @kind this) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ef388.  v0:= v2.`io.reactivex.rxjava3.processors.ReplayProcessor.b` @type ^`io.reactivex.rxjava3.processors.ReplayProcessor$b` @kind object;
  #L4ef38c.  call temp:= `isDone`(v0) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor$b;.isDone:()Z` @kind interface;
  #L4ef392.  v1:= temp;
  #L4ef394.  if v1 == 0 then goto L4ef3a2;
  #L4ef398.  call temp:= `getError`(v0) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor$b;.getError:()Ljava/lang/Throwable;` @kind interface;
  #L4ef39e.  v0:= temp @kind object;
  #L4ef3a0.  return v0 @kind object;
  #L4ef3a2.  v0:= 0I;
  #L4ef3a4.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.rxjava3.processors.ReplayProcessor` v1 @kind this) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ef31c.  v0:= v1.`io.reactivex.rxjava3.processors.ReplayProcessor.b` @type ^`io.reactivex.rxjava3.processors.ReplayProcessor$b` @kind object;
  #L4ef320.  call temp:= `getValue`(v0) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor$b;.getValue:()Ljava/lang/Object;` @kind interface;
  #L4ef326.  v0:= temp @kind object;
  #L4ef328.  return v0 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.rxjava3.processors.ReplayProcessor` v2 @kind this) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor;.getValues:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ef33c.  v0:= `@@io.reactivex.rxjava3.processors.ReplayProcessor.e` @type ^`java.lang.Object`[] @kind object;
  #L4ef340.  call temp:= `getValues`(v2, v0) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L4ef346.  v1:= temp @kind object;
  #L4ef348.  if v1 != v0 then goto L4ef354;
  #L4ef34c.  v0:= 0I;
  #L4ef34e.  v0:= new `java.lang.Object`[v0];
  #L4ef352.  return v0 @kind object;
  #L4ef354.  return v1 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.rxjava3.processors.ReplayProcessor` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ef368.  v0:= v1.`io.reactivex.rxjava3.processors.ReplayProcessor.b` @type ^`io.reactivex.rxjava3.processors.ReplayProcessor$b` @kind object;
  #L4ef36c.  call temp:= `c`(v0, v2) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor$b;.c:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L4ef372.  v2:= temp @kind object;
  #L4ef374.  return v2 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.rxjava3.processors.ReplayProcessor` v2 @kind this) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ef124.  v0:= v2.`io.reactivex.rxjava3.processors.ReplayProcessor.b` @type ^`io.reactivex.rxjava3.processors.ReplayProcessor$b` @kind object;
  #L4ef128.  call temp:= `isDone`(v0) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor$b;.isDone:()Z` @kind interface;
  #L4ef12e.  v1:= temp;
  #L4ef130.  if v1 == 0 then goto L4ef144;
  #L4ef134.  call temp:= `getError`(v0) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor$b;.getError:()Ljava/lang/Throwable;` @kind interface;
  #L4ef13a.  v0:= temp @kind object;
  #L4ef13c.  if v0 != 0 then goto L4ef144;
  #L4ef140.  v0:= 1I;
  #L4ef142.  goto L4ef146;
  #L4ef144.  v0:= 0I;
  #L4ef146.  return v0;
}
procedure `boolean` `hasSubscribers`(`io.reactivex.rxjava3.processors.ReplayProcessor` v1 @kind this) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor;.hasSubscribers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ef158.  v0:= v1.`io.reactivex.rxjava3.processors.ReplayProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ef15c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ef162.  v0:= temp @kind object;
  #L4ef164.  v0:= (`io.reactivex.rxjava3.processors.ReplayProcessor$c`[]) v0 @kind object;
  #L4ef168.  v0:= length @variable v0;
  #L4ef16a.  if v0 == 0 then goto L4ef172;
  #L4ef16e.  v0:= 1I;
  #L4ef170.  goto L4ef174;
  #L4ef172.  v0:= 0I;
  #L4ef174.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.rxjava3.processors.ReplayProcessor` v2 @kind this) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ef188.  v0:= v2.`io.reactivex.rxjava3.processors.ReplayProcessor.b` @type ^`io.reactivex.rxjava3.processors.ReplayProcessor$b` @kind object;
  #L4ef18c.  call temp:= `isDone`(v0) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor$b;.isDone:()Z` @kind interface;
  #L4ef192.  v1:= temp;
  #L4ef194.  if v1 == 0 then goto L4ef1a8;
  #L4ef198.  call temp:= `getError`(v0) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor$b;.getError:()Ljava/lang/Throwable;` @kind interface;
  #L4ef19e.  v0:= temp @kind object;
  #L4ef1a0.  if v0 == 0 then goto L4ef1a8;
  #L4ef1a4.  v0:= 1I;
  #L4ef1a6.  goto L4ef1aa;
  #L4ef1a8.  v0:= 0I;
  #L4ef1aa.  return v0;
}
procedure `boolean` `hasValue`(`io.reactivex.rxjava3.processors.ReplayProcessor` v1 @kind this) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor;.hasValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ef1bc.  v0:= v1.`io.reactivex.rxjava3.processors.ReplayProcessor.b` @type ^`io.reactivex.rxjava3.processors.ReplayProcessor$b` @kind object;
  #L4ef1c0.  call temp:= `size`(v0) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor$b;.size:()I` @kind interface;
  #L4ef1c6.  v0:= temp;
  #L4ef1c8.  if v0 == 0 then goto L4ef1d0;
  #L4ef1cc.  v0:= 1I;
  #L4ef1ce.  goto L4ef1d2;
  #L4ef1d0.  v0:= 0I;
  #L4ef1d2.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.processors.ReplayProcessor` v5 @kind this) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4ef430.  v0:= v5.`io.reactivex.rxjava3.processors.ReplayProcessor.c` @type ^`boolean` @kind boolean;
  #L4ef434.  if v0 == 0 then goto L4ef43a;
  #L4ef438.  return @kind void;
  #L4ef43a.  v0:= 1I;
  #L4ef43c.  v5.`io.reactivex.rxjava3.processors.ReplayProcessor.c` @type ^`boolean` := v0 @kind boolean;
  #L4ef440.  v0:= v5.`io.reactivex.rxjava3.processors.ReplayProcessor.b` @type ^`io.reactivex.rxjava3.processors.ReplayProcessor$b` @kind object;
  #L4ef444.  call `complete`(v0) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor$b;.complete:()V` @kind interface;
  #L4ef44a.  v1:= v5.`io.reactivex.rxjava3.processors.ReplayProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ef44e.  v2:= `@@io.reactivex.rxjava3.processors.ReplayProcessor.g` @type ^`io.reactivex.rxjava3.processors.ReplayProcessor$c`[] @kind object;
  #L4ef452.  call temp:= `getAndSet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4ef458.  v1:= temp @kind object;
  #L4ef45a.  v1:= (`io.reactivex.rxjava3.processors.ReplayProcessor$c`[]) v1 @kind object;
  #L4ef45e.  v2:= length @variable v1;
  #L4ef460.  v3:= 0I;
  #L4ef462.  if v3 >= v2 then goto L4ef476;
  #L4ef466.  v4:= v1[v3] @kind object;
  #L4ef46a.  call `f`(v0, v4) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor$b;.f:(Lio/reactivex/rxjava3/processors/ReplayProcessor$c;)V` @kind interface;
  #L4ef470.  v3:= v3 + 1;
  #L4ef474.  goto L4ef462;
  #L4ef476.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.processors.ReplayProcessor` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4ef488.  v0:= "onError called with a null Throwable." @kind object;
  #L4ef48c.  call temp:= `nullCheck`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4ef492.  v0:= v4.`io.reactivex.rxjava3.processors.ReplayProcessor.c` @type ^`boolean` @kind boolean;
  #L4ef496.  if v0 == 0 then goto L4ef4a2;
  #L4ef49a.  call `onError`(v5) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4ef4a0.  return @kind void;
  #L4ef4a2.  v0:= 1I;
  #L4ef4a4.  v4.`io.reactivex.rxjava3.processors.ReplayProcessor.c` @type ^`boolean` := v0 @kind boolean;
  #L4ef4a8.  v0:= v4.`io.reactivex.rxjava3.processors.ReplayProcessor.b` @type ^`io.reactivex.rxjava3.processors.ReplayProcessor$b` @kind object;
  #L4ef4ac.  call `a`(v0, v5) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor$b;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ef4b2.  v5:= v4.`io.reactivex.rxjava3.processors.ReplayProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ef4b6.  v1:= `@@io.reactivex.rxjava3.processors.ReplayProcessor.g` @type ^`io.reactivex.rxjava3.processors.ReplayProcessor$c`[] @kind object;
  #L4ef4ba.  call temp:= `getAndSet`(v5, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4ef4c0.  v5:= temp @kind object;
  #L4ef4c2.  v5:= (`io.reactivex.rxjava3.processors.ReplayProcessor$c`[]) v5 @kind object;
  #L4ef4c6.  v1:= length @variable v5;
  #L4ef4c8.  v2:= 0I;
  #L4ef4ca.  if v2 >= v1 then goto L4ef4de;
  #L4ef4ce.  v3:= v5[v2] @kind object;
  #L4ef4d2.  call `f`(v0, v3) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor$b;.f:(Lio/reactivex/rxjava3/processors/ReplayProcessor$c;)V` @kind interface;
  #L4ef4d8.  v2:= v2 + 1;
  #L4ef4dc.  goto L4ef4ca;
  #L4ef4de.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.processors.ReplayProcessor` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4ef4f0.  v0:= "onNext called with a null value." @kind object;
  #L4ef4f4.  call temp:= `nullCheck`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4ef4fa.  v0:= v4.`io.reactivex.rxjava3.processors.ReplayProcessor.c` @type ^`boolean` @kind boolean;
  #L4ef4fe.  if v0 == 0 then goto L4ef504;
  #L4ef502.  return @kind void;
  #L4ef504.  v0:= v4.`io.reactivex.rxjava3.processors.ReplayProcessor.b` @type ^`io.reactivex.rxjava3.processors.ReplayProcessor$b` @kind object;
  #L4ef508.  call `b`(v0, v5) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor$b;.b:(Ljava/lang/Object;)V` @kind interface;
  #L4ef50e.  v5:= v4.`io.reactivex.rxjava3.processors.ReplayProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ef512.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ef518.  v5:= temp @kind object;
  #L4ef51a.  v5:= (`io.reactivex.rxjava3.processors.ReplayProcessor$c`[]) v5 @kind object;
  #L4ef51e.  v1:= length @variable v5;
  #L4ef520.  v2:= 0I;
  #L4ef522.  if v2 >= v1 then goto L4ef536;
  #L4ef526.  v3:= v5[v2] @kind object;
  #L4ef52a.  call `f`(v0, v3) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor$b;.f:(Lio/reactivex/rxjava3/processors/ReplayProcessor$c;)V` @kind interface;
  #L4ef530.  v2:= v2 + 1;
  #L4ef534.  goto L4ef522;
  #L4ef536.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.processors.ReplayProcessor` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ef548.  v0:= v2.`io.reactivex.rxjava3.processors.ReplayProcessor.c` @type ^`boolean` @kind boolean;
  #L4ef54c.  if v0 == 0 then goto L4ef558;
  #L4ef550.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4ef556.  return @kind void;
  #L4ef558.  v0:= 9223372036854775807L;
  #L4ef562.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4ef568.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.processors.ReplayProcessor` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L4ef610.  v0:= new `io.reactivex.rxjava3.processors.ReplayProcessor$c`;
  #L4ef614.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor$c;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/processors/ReplayProcessor;)V` @kind direct;
  #L4ef61a.  call `onSubscribe`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4ef620.  call temp:= `e`(v1, v0) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor;.e:(Lio/reactivex/rxjava3/processors/ReplayProcessor$c;)Z` @kind virtual;
  #L4ef626.  v2:= temp;
  #L4ef628.  if v2 == 0 then goto L4ef63c;
  #L4ef62c.  v2:= v0.`io.reactivex.rxjava3.processors.ReplayProcessor$c.e` @type ^`boolean` @kind boolean;
  #L4ef630.  if v2 == 0 then goto L4ef63c;
  #L4ef634.  call `f`(v1, v0) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor;.f:(Lio/reactivex/rxjava3/processors/ReplayProcessor$c;)V` @kind virtual;
  #L4ef63a.  return @kind void;
  #L4ef63c.  v2:= v1.`io.reactivex.rxjava3.processors.ReplayProcessor.b` @type ^`io.reactivex.rxjava3.processors.ReplayProcessor$b` @kind object;
  #L4ef640.  call `f`(v2, v0) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor$b;.f:(Lio/reactivex/rxjava3/processors/ReplayProcessor$c;)V` @kind interface;
  #L4ef646.  return @kind void;
}
