record `io.reactivex.rxjava3.processors.PublishProcessor` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.processors.FlowableProcessor` @kind class {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.processors.PublishProcessor.b` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.rxjava3.processors.PublishProcessor.c` @AccessFlag ;
}
global `io.reactivex.rxjava3.processors.PublishProcessor$a`[] `@@io.reactivex.rxjava3.processors.PublishProcessor.d` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.processors.PublishProcessor$a`[] `@@io.reactivex.rxjava3.processors.PublishProcessor.e` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/processors/PublishProcessor;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4ee26c.  v0:= 0I;
  #L4ee26e.  v1:= new `io.reactivex.rxjava3.processors.PublishProcessor$a`[v0];
  #L4ee272.  `@@io.reactivex.rxjava3.processors.PublishProcessor.d` @type ^`io.reactivex.rxjava3.processors.PublishProcessor$a`[] := v1 @kind object;
  #L4ee276.  v0:= new `io.reactivex.rxjava3.processors.PublishProcessor$a`[v0];
  #L4ee27a.  `@@io.reactivex.rxjava3.processors.PublishProcessor.e` @type ^`io.reactivex.rxjava3.processors.PublishProcessor$a`[] := v0 @kind object;
  #L4ee27e.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.processors.PublishProcessor` v2 @kind this) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4ee290.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/processors/FlowableProcessor;.<init>:()V` @kind direct;
  #L4ee296.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4ee29a.  v1:= `@@io.reactivex.rxjava3.processors.PublishProcessor.e` @type ^`io.reactivex.rxjava3.processors.PublishProcessor$a`[] @kind object;
  #L4ee29e.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4ee2a4.  v2.`io.reactivex.rxjava3.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4ee2a8.  return @kind void;
}
procedure `io.reactivex.rxjava3.processors.PublishProcessor` `create`() @signature `Lio/reactivex/rxjava3/processors/PublishProcessor;.create:()Lio/reactivex/rxjava3/processors/PublishProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4ee220.  v0:= new `io.reactivex.rxjava3.processors.PublishProcessor`;
  #L4ee224.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor;.<init>:()V` @kind direct;
  #L4ee22a.  return v0 @kind object;
}
procedure `boolean` `e`(`io.reactivex.rxjava3.processors.PublishProcessor` v4 @kind this, `io.reactivex.rxjava3.processors.PublishProcessor$a` v5 @kind object) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor;.e:(Lio/reactivex/rxjava3/processors/PublishProcessor$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4ee0cc.  v0:= v4.`io.reactivex.rxjava3.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ee0d0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ee0d6.  v0:= temp @kind object;
  #L4ee0d8.  v0:= (`io.reactivex.rxjava3.processors.PublishProcessor$a`[]) v0 @kind object;
  #L4ee0dc.  v1:= `@@io.reactivex.rxjava3.processors.PublishProcessor.d` @type ^`io.reactivex.rxjava3.processors.PublishProcessor$a`[] @kind object;
  #L4ee0e0.  v2:= 0I;
  #L4ee0e2.  if v0 != v1 then goto L4ee0e8;
  #L4ee0e6.  return v2;
  #L4ee0e8.  v1:= length @variable v0;
  #L4ee0ea.  v3:= v1 + 1;
  #L4ee0ee.  v3:= new `io.reactivex.rxjava3.processors.PublishProcessor$a`[v3];
  #L4ee0f2.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4ee0f8.  v3[v1]:= v5 @kind object;
  #L4ee0fc.  v1:= v4.`io.reactivex.rxjava3.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ee100.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4ee106.  v0:= temp;
  #L4ee108.  if v0 == 0 then goto L4ee0cc;
  #L4ee10c.  v5:= 1I;
  #L4ee10e.  return v5;
}
procedure `void` `f`(`io.reactivex.rxjava3.processors.PublishProcessor` v6 @kind this, `io.reactivex.rxjava3.processors.PublishProcessor$a` v7 @kind object) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor;.f:(Lio/reactivex/rxjava3/processors/PublishProcessor$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4ee3f4.  v0:= v6.`io.reactivex.rxjava3.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ee3f8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ee3fe.  v0:= temp @kind object;
  #L4ee400.  v0:= (`io.reactivex.rxjava3.processors.PublishProcessor$a`[]) v0 @kind object;
  #L4ee404.  v1:= `@@io.reactivex.rxjava3.processors.PublishProcessor.d` @type ^`io.reactivex.rxjava3.processors.PublishProcessor$a`[] @kind object;
  #L4ee408.  if v0 == v1 then goto L4ee474;
  #L4ee40c.  v1:= `@@io.reactivex.rxjava3.processors.PublishProcessor.e` @type ^`io.reactivex.rxjava3.processors.PublishProcessor$a`[] @kind object;
  #L4ee410.  if v0 != v1 then goto L4ee416;
  #L4ee414.  goto L4ee474;
  #L4ee416.  v1:= length @variable v0;
  #L4ee418.  v2:= -1I;
  #L4ee41a.  v3:= 0I;
  #L4ee41c.  v4:= 0I;
  #L4ee41e.  if v4 >= v1 then goto L4ee434;
  #L4ee422.  v5:= v0[v4] @kind object;
  #L4ee426.  if v5 != v7 then goto L4ee42e;
  #L4ee42a.  v2:= v4;
  #L4ee42c.  goto L4ee434;
  #L4ee42e.  v4:= v4 + 1;
  #L4ee432.  goto L4ee41e;
  #L4ee434.  if v2 >= 0 then goto L4ee43a;
  #L4ee438.  return @kind void;
  #L4ee43a.  v4:= 1I;
  #L4ee43c.  if v1 != v4 then goto L4ee446;
  #L4ee440.  v1:= `@@io.reactivex.rxjava3.processors.PublishProcessor.e` @type ^`io.reactivex.rxjava3.processors.PublishProcessor$a`[] @kind object;
  #L4ee444.  goto L4ee464;
  #L4ee446.  v5:= v1 + -1;
  #L4ee44a.  v5:= new `io.reactivex.rxjava3.processors.PublishProcessor$a`[v5];
  #L4ee44e.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4ee454.  v3:= v2 + 1;
  #L4ee458.  v1:= v1 - v2 @kind int;
  #L4ee45a.  v1:= v1 - v4 @kind int;
  #L4ee45c.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4ee462.  v1:= v5 @kind object;
  #L4ee464.  v2:= v6.`io.reactivex.rxjava3.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ee468.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4ee46e.  v0:= temp;
  #L4ee470.  if v0 == 0 then goto L4ee3f4;
  #L4ee474.  return @kind void;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.rxjava3.processors.PublishProcessor` v2 @kind this) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ee23c.  v0:= v2.`io.reactivex.rxjava3.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ee240.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ee246.  v0:= temp @kind object;
  #L4ee248.  v1:= `@@io.reactivex.rxjava3.processors.PublishProcessor.d` @type ^`io.reactivex.rxjava3.processors.PublishProcessor$a`[] @kind object;
  #L4ee24c.  if v0 != v1 then goto L4ee256;
  #L4ee250.  v0:= v2.`io.reactivex.rxjava3.processors.PublishProcessor.c` @type ^`java.lang.Throwable` @kind object;
  #L4ee254.  return v0 @kind object;
  #L4ee256.  v0:= 0I;
  #L4ee258.  return v0 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.rxjava3.processors.PublishProcessor` v2 @kind this) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ee120.  v0:= v2.`io.reactivex.rxjava3.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ee124.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ee12a.  v0:= temp @kind object;
  #L4ee12c.  v1:= `@@io.reactivex.rxjava3.processors.PublishProcessor.d` @type ^`io.reactivex.rxjava3.processors.PublishProcessor$a`[] @kind object;
  #L4ee130.  if v0 != v1 then goto L4ee140;
  #L4ee134.  v0:= v2.`io.reactivex.rxjava3.processors.PublishProcessor.c` @type ^`java.lang.Throwable` @kind object;
  #L4ee138.  if v0 != 0 then goto L4ee140;
  #L4ee13c.  v0:= 1I;
  #L4ee13e.  goto L4ee142;
  #L4ee140.  v0:= 0I;
  #L4ee142.  return v0;
}
procedure `boolean` `hasSubscribers`(`io.reactivex.rxjava3.processors.PublishProcessor` v1 @kind this) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor;.hasSubscribers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ee154.  v0:= v1.`io.reactivex.rxjava3.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ee158.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ee15e.  v0:= temp @kind object;
  #L4ee160.  v0:= (`io.reactivex.rxjava3.processors.PublishProcessor$a`[]) v0 @kind object;
  #L4ee164.  v0:= length @variable v0;
  #L4ee166.  if v0 == 0 then goto L4ee16e;
  #L4ee16a.  v0:= 1I;
  #L4ee16c.  goto L4ee170;
  #L4ee16e.  v0:= 0I;
  #L4ee170.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.rxjava3.processors.PublishProcessor` v2 @kind this) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ee184.  v0:= v2.`io.reactivex.rxjava3.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ee188.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ee18e.  v0:= temp @kind object;
  #L4ee190.  v1:= `@@io.reactivex.rxjava3.processors.PublishProcessor.d` @type ^`io.reactivex.rxjava3.processors.PublishProcessor$a`[] @kind object;
  #L4ee194.  if v0 != v1 then goto L4ee1a4;
  #L4ee198.  v0:= v2.`io.reactivex.rxjava3.processors.PublishProcessor.c` @type ^`java.lang.Throwable` @kind object;
  #L4ee19c.  if v0 == 0 then goto L4ee1a4;
  #L4ee1a0.  v0:= 1I;
  #L4ee1a2.  goto L4ee1a6;
  #L4ee1a4.  v0:= 0I;
  #L4ee1a6.  return v0;
}
procedure `boolean` `offer`(`io.reactivex.rxjava3.processors.PublishProcessor` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4ee1b8.  v0:= "offer called with a null value." @kind object;
  #L4ee1bc.  call temp:= `nullCheck`(v6, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4ee1c2.  v0:= v5.`io.reactivex.rxjava3.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ee1c6.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ee1cc.  v0:= temp @kind object;
  #L4ee1ce.  v0:= (`io.reactivex.rxjava3.processors.PublishProcessor$a`[]) v0 @kind object;
  #L4ee1d2.  v1:= length @variable v0;
  #L4ee1d4.  v2:= 0I;
  #L4ee1d6.  v3:= 0I;
  #L4ee1d8.  if v3 >= v1 then goto L4ee1f4;
  #L4ee1dc.  v4:= v0[v3] @kind object;
  #L4ee1e0.  call temp:= `b`(v4) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor$a;.b:()Z` @kind virtual;
  #L4ee1e6.  v4:= temp;
  #L4ee1e8.  if v4 == 0 then goto L4ee1ee;
  #L4ee1ec.  return v2;
  #L4ee1ee.  v3:= v3 + 1;
  #L4ee1f2.  goto L4ee1d8;
  #L4ee1f4.  v1:= length @variable v0;
  #L4ee1f6.  if v2 >= v1 then goto L4ee20a;
  #L4ee1fa.  v3:= v0[v2] @kind object;
  #L4ee1fe.  call `e`(v3, v6) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor$a;.e:(Ljava/lang/Object;)V` @kind virtual;
  #L4ee204.  v2:= v2 + 1;
  #L4ee208.  goto L4ee1f6;
  #L4ee20a.  v6:= 1I;
  #L4ee20c.  return v6;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.processors.PublishProcessor` v4 @kind this) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4ee2bc.  v0:= v4.`io.reactivex.rxjava3.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ee2c0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ee2c6.  v0:= temp @kind object;
  #L4ee2c8.  v1:= `@@io.reactivex.rxjava3.processors.PublishProcessor.d` @type ^`io.reactivex.rxjava3.processors.PublishProcessor$a`[] @kind object;
  #L4ee2cc.  if v0 != v1 then goto L4ee2d2;
  #L4ee2d0.  return @kind void;
  #L4ee2d2.  v0:= v4.`io.reactivex.rxjava3.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ee2d6.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4ee2dc.  v0:= temp @kind object;
  #L4ee2de.  v0:= (`io.reactivex.rxjava3.processors.PublishProcessor$a`[]) v0 @kind object;
  #L4ee2e2.  v1:= length @variable v0;
  #L4ee2e4.  v2:= 0I;
  #L4ee2e6.  if v2 >= v1 then goto L4ee2fa;
  #L4ee2ea.  v3:= v0[v2] @kind object;
  #L4ee2ee.  call `c`(v3) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor$a;.c:()V` @kind virtual;
  #L4ee2f4.  v2:= v2 + 1;
  #L4ee2f8.  goto L4ee2e6;
  #L4ee2fa.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.processors.PublishProcessor` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4ee30c.  v0:= "onError called with a null Throwable." @kind object;
  #L4ee310.  call temp:= `nullCheck`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4ee316.  v0:= v4.`io.reactivex.rxjava3.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ee31a.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ee320.  v0:= temp @kind object;
  #L4ee322.  v1:= `@@io.reactivex.rxjava3.processors.PublishProcessor.d` @type ^`io.reactivex.rxjava3.processors.PublishProcessor$a`[] @kind object;
  #L4ee326.  if v0 != v1 then goto L4ee332;
  #L4ee32a.  call `onError`(v5) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4ee330.  return @kind void;
  #L4ee332.  v4.`io.reactivex.rxjava3.processors.PublishProcessor.c` @type ^`java.lang.Throwable` := v5 @kind object;
  #L4ee336.  v0:= v4.`io.reactivex.rxjava3.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ee33a.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4ee340.  v0:= temp @kind object;
  #L4ee342.  v0:= (`io.reactivex.rxjava3.processors.PublishProcessor$a`[]) v0 @kind object;
  #L4ee346.  v1:= length @variable v0;
  #L4ee348.  v2:= 0I;
  #L4ee34a.  if v2 >= v1 then goto L4ee35e;
  #L4ee34e.  v3:= v0[v2] @kind object;
  #L4ee352.  call `d`(v3, v5) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor$a;.d:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4ee358.  v2:= v2 + 1;
  #L4ee35c.  goto L4ee34a;
  #L4ee35e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.processors.PublishProcessor` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4ee370.  v0:= "onNext called with a null value." @kind object;
  #L4ee374.  call temp:= `nullCheck`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4ee37a.  v0:= v4.`io.reactivex.rxjava3.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ee37e.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ee384.  v0:= temp @kind object;
  #L4ee386.  v0:= (`io.reactivex.rxjava3.processors.PublishProcessor$a`[]) v0 @kind object;
  #L4ee38a.  v1:= length @variable v0;
  #L4ee38c.  v2:= 0I;
  #L4ee38e.  if v2 >= v1 then goto L4ee3a2;
  #L4ee392.  v3:= v0[v2] @kind object;
  #L4ee396.  call `e`(v3, v5) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor$a;.e:(Ljava/lang/Object;)V` @kind virtual;
  #L4ee39c.  v2:= v2 + 1;
  #L4ee3a0.  goto L4ee38e;
  #L4ee3a2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.processors.PublishProcessor` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ee3b4.  v0:= v2.`io.reactivex.rxjava3.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ee3b8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ee3be.  v0:= temp @kind object;
  #L4ee3c0.  v1:= `@@io.reactivex.rxjava3.processors.PublishProcessor.d` @type ^`io.reactivex.rxjava3.processors.PublishProcessor$a`[] @kind object;
  #L4ee3c4.  if v0 != v1 then goto L4ee3d0;
  #L4ee3c8.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4ee3ce.  return @kind void;
  #L4ee3d0.  v0:= 9223372036854775807L;
  #L4ee3da.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4ee3e0.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.processors.PublishProcessor` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L4ee488.  v0:= new `io.reactivex.rxjava3.processors.PublishProcessor$a`;
  #L4ee48c.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/processors/PublishProcessor;)V` @kind direct;
  #L4ee492.  call `onSubscribe`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4ee498.  call temp:= `e`(v2, v0) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor;.e:(Lio/reactivex/rxjava3/processors/PublishProcessor$a;)Z` @kind virtual;
  #L4ee49e.  v1:= temp;
  #L4ee4a0.  if v1 == 0 then goto L4ee4b8;
  #L4ee4a4.  call temp:= `a`(v0) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor$a;.a:()Z` @kind virtual;
  #L4ee4aa.  v3:= temp;
  #L4ee4ac.  if v3 == 0 then goto L4ee4ce;
  #L4ee4b0.  call `f`(v2, v0) @signature `Lio/reactivex/rxjava3/processors/PublishProcessor;.f:(Lio/reactivex/rxjava3/processors/PublishProcessor$a;)V` @kind virtual;
  #L4ee4b6.  goto L4ee4ce;
  #L4ee4b8.  v0:= v2.`io.reactivex.rxjava3.processors.PublishProcessor.c` @type ^`java.lang.Throwable` @kind object;
  #L4ee4bc.  if v0 == 0 then goto L4ee4c8;
  #L4ee4c0.  call `onError`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ee4c6.  goto L4ee4ce;
  #L4ee4c8.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4ee4ce.  return @kind void;
}
