record `io.reactivex.rxjava3.processors.ReplayProcessor$g` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.processors.ReplayProcessor$b` @kind interface {
  `java.util.List` `io.reactivex.rxjava3.processors.ReplayProcessor$g.a` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.rxjava3.processors.ReplayProcessor$g.b` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.processors.ReplayProcessor$g.c` @AccessFlag VOLATILE;
  `int` `io.reactivex.rxjava3.processors.ReplayProcessor$g.d` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.processors.ReplayProcessor$g` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor$g;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4eef10.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4eef16.  v0:= new `java.util.ArrayList`;
  #L4eef1a.  call `<init>`(v0, v2) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L4eef20.  v1.`io.reactivex.rxjava3.processors.ReplayProcessor$g.a` @type ^`java.util.List` := v0 @kind object;
  #L4eef24.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.processors.ReplayProcessor$g` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor$g;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L4eef50.  v0.`io.reactivex.rxjava3.processors.ReplayProcessor$g.b` @type ^`java.lang.Throwable` := v1 @kind object;
  #L4eef54.  v1:= 1I;
  #L4eef56.  v0.`io.reactivex.rxjava3.processors.ReplayProcessor$g.c` @type ^`boolean` := v1 @kind boolean;
  #L4eef5a.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.processors.ReplayProcessor$g` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor$g;.b:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4eef6c.  v0:= v1.`io.reactivex.rxjava3.processors.ReplayProcessor$g.a` @type ^`java.util.List` @kind object;
  #L4eef70.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4eef76.  v2:= v1.`io.reactivex.rxjava3.processors.ReplayProcessor$g.d` @type ^`int`;
  #L4eef7a.  v2:= v2 + 1;
  #L4eef7e.  v1.`io.reactivex.rxjava3.processors.ReplayProcessor$g.d` @type ^`int` := v2;
  #L4eef82.  return @kind void;
}
procedure `java.lang.Object`[] `c`(`io.reactivex.rxjava3.processors.ReplayProcessor$g` v5 @kind this, `java.lang.Object`[] v6 @kind object) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor$g;.c:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4eee88.  v0:= v5.`io.reactivex.rxjava3.processors.ReplayProcessor$g.d` @type ^`int`;
  #L4eee8c.  v1:= 0I;
  #L4eee8e.  v2:= 0I;
  #L4eee90.  if v0 != 0 then goto L4eeea0;
  #L4eee94.  v0:= length @variable v6;
  #L4eee96.  if v0 == 0 then goto L4eee9e;
  #L4eee9a.  v6[v2]:= v1 @kind object;
  #L4eee9e.  return v6 @kind object;
  #L4eeea0.  v3:= v5.`io.reactivex.rxjava3.processors.ReplayProcessor$g.a` @type ^`java.util.List` @kind object;
  #L4eeea4.  v4:= length @variable v6;
  #L4eeea6.  if v4 >= v0 then goto L4eeec6;
  #L4eeeaa.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4eeeb0.  v6:= temp @kind object;
  #L4eeeb2.  call temp:= `getComponentType`(v6) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L4eeeb8.  v6:= temp @kind object;
  #L4eeeba.  call temp:= `newInstance`(v6, v0) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L4eeec0.  v6:= temp @kind object;
  #L4eeec2.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L4eeec6.  if v2 >= v0 then goto L4eeedc;
  #L4eeeca.  call temp:= `get`(v3, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L4eeed0.  v4:= temp @kind object;
  #L4eeed2.  v6[v2]:= v4 @kind object;
  #L4eeed6.  v2:= v2 + 1;
  #L4eeeda.  goto L4eeec6;
  #L4eeedc.  v2:= length @variable v6;
  #L4eeede.  if v2 <= v0 then goto L4eeee6;
  #L4eeee2.  v6[v0]:= v1 @kind object;
  #L4eeee6.  return v6 @kind object;
}
procedure `void` `complete`(`io.reactivex.rxjava3.processors.ReplayProcessor$g` v1 @kind this) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor$g;.complete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4eef38.  v0:= 1I;
  #L4eef3a.  v1.`io.reactivex.rxjava3.processors.ReplayProcessor$g.c` @type ^`boolean` := v0 @kind boolean;
  #L4eef3e.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.processors.ReplayProcessor$g` v0 @kind this) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor$g;.e:()V` @AccessFlag PUBLIC {
    temp;

  #L4ef0bc.  return @kind void;
}
procedure `void` `f`(`io.reactivex.rxjava3.processors.ReplayProcessor$g` v13 @kind this, `io.reactivex.rxjava3.processors.ReplayProcessor$c` v14 @kind object) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor$g;.f:(Lio/reactivex/rxjava3/processors/ReplayProcessor$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L4eef94.  call temp:= `getAndIncrement`(v14) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4eef9a.  v0:= temp;
  #L4eef9c.  if v0 == 0 then goto L4eefa2;
  #L4eefa0.  return @kind void;
  #L4eefa2.  v0:= v13.`io.reactivex.rxjava3.processors.ReplayProcessor$g.a` @type ^`java.util.List` @kind object;
  #L4eefa6.  v1:= v14.`io.reactivex.rxjava3.processors.ReplayProcessor$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4eefaa.  v2:= v14.`io.reactivex.rxjava3.processors.ReplayProcessor$c.c` @type ^`java.lang.Object` @kind object;
  #L4eefae.  v2:= (`java.lang.Integer`) v2 @kind object;
  #L4eefb2.  v3:= 0I;
  #L4eefb4.  if v2 == 0 then goto L4eefc2;
  #L4eefb8.  call temp:= `intValue`(v2) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4eefbe.  v3:= temp;
  #L4eefc0.  goto L4eefce;
  #L4eefc2.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4eefc8.  v2:= temp @kind object;
  #L4eefca.  v14.`io.reactivex.rxjava3.processors.ReplayProcessor$c.c` @type ^`java.lang.Object` := v2 @kind object;
  #L4eefce.  v4:= v14.`io.reactivex.rxjava3.processors.ReplayProcessor$c.f` @type ^`long` @kind wide;
  #L4eefd2.  v2:= 1I;
  #L4eefd4.  v6:= 1I;
  #L4eefd6.  v7:= v14.`io.reactivex.rxjava3.processors.ReplayProcessor$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4eefda.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4eefe0.  v7:= temp @kind wide;
  #L4eefe2.  v9:= 0I;
  #L4eefe4.  v10:= lcmp(v4, v7);
  #L4eefe8.  if v10 == 0 then goto L4ef04a;
  #L4eefec.  v11:= v14.`io.reactivex.rxjava3.processors.ReplayProcessor$c.e` @type ^`boolean` @kind boolean;
  #L4eeff0.  if v11 == 0 then goto L4eeffa;
  #L4eeff4.  v14.`io.reactivex.rxjava3.processors.ReplayProcessor$c.c` @type ^`java.lang.Object` := v9 @kind object;
  #L4eeff8.  return @kind void;
  #L4eeffa.  v11:= v13.`io.reactivex.rxjava3.processors.ReplayProcessor$g.c` @type ^`boolean` @kind boolean;
  #L4eeffe.  v12:= v13.`io.reactivex.rxjava3.processors.ReplayProcessor$g.d` @type ^`int`;
  #L4ef002.  if v11 == 0 then goto L4ef02a;
  #L4ef006.  if v3 != v12 then goto L4ef02a;
  #L4ef00a.  v14.`io.reactivex.rxjava3.processors.ReplayProcessor$c.c` @type ^`java.lang.Object` := v9 @kind object;
  #L4ef00e.  v14.`io.reactivex.rxjava3.processors.ReplayProcessor$c.e` @type ^`boolean` := v2 @kind boolean;
  #L4ef012.  v14:= v13.`io.reactivex.rxjava3.processors.ReplayProcessor$g.b` @type ^`java.lang.Throwable` @kind object;
  #L4ef016.  if v14 != 0 then goto L4ef022;
  #L4ef01a.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4ef020.  goto L4ef028;
  #L4ef022.  call `onError`(v1, v14) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ef028.  return @kind void;
  #L4ef02a.  if v3 != v12 then goto L4ef030;
  #L4ef02e.  goto L4ef04a;
  #L4ef030.  call temp:= `get`(v0, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L4ef036.  v9:= temp @kind object;
  #L4ef038.  call `onNext`(v1, v9) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ef03e.  v3:= v3 + 1;
  #L4ef042.  v9:= 1L;
  #L4ef046.  v4:= v4 + v9 @kind long;
  #L4ef048.  goto L4eefe2;
  #L4ef04a.  if v10 != 0 then goto L4ef08c;
  #L4ef04e.  v7:= v14.`io.reactivex.rxjava3.processors.ReplayProcessor$c.e` @type ^`boolean` @kind boolean;
  #L4ef052.  if v7 == 0 then goto L4ef05c;
  #L4ef056.  v14.`io.reactivex.rxjava3.processors.ReplayProcessor$c.c` @type ^`java.lang.Object` := v9 @kind object;
  #L4ef05a.  return @kind void;
  #L4ef05c.  v7:= v13.`io.reactivex.rxjava3.processors.ReplayProcessor$g.c` @type ^`boolean` @kind boolean;
  #L4ef060.  v8:= v13.`io.reactivex.rxjava3.processors.ReplayProcessor$g.d` @type ^`int`;
  #L4ef064.  if v7 == 0 then goto L4ef08c;
  #L4ef068.  if v3 != v8 then goto L4ef08c;
  #L4ef06c.  v14.`io.reactivex.rxjava3.processors.ReplayProcessor$c.c` @type ^`java.lang.Object` := v9 @kind object;
  #L4ef070.  v14.`io.reactivex.rxjava3.processors.ReplayProcessor$c.e` @type ^`boolean` := v2 @kind boolean;
  #L4ef074.  v14:= v13.`io.reactivex.rxjava3.processors.ReplayProcessor$g.b` @type ^`java.lang.Throwable` @kind object;
  #L4ef078.  if v14 != 0 then goto L4ef084;
  #L4ef07c.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4ef082.  goto L4ef08a;
  #L4ef084.  call `onError`(v1, v14) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ef08a.  return @kind void;
  #L4ef08c.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4ef092.  v7:= temp @kind object;
  #L4ef094.  v14.`io.reactivex.rxjava3.processors.ReplayProcessor$c.c` @type ^`java.lang.Object` := v7 @kind object;
  #L4ef098.  v14.`io.reactivex.rxjava3.processors.ReplayProcessor$c.f` @type ^`long` := v4 @kind wide;
  #L4ef09c.  v6:= -v6 @kind int;
  #L4ef09e.  call temp:= `addAndGet`(v14, v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4ef0a4.  v6:= temp;
  #L4ef0a6.  if v6 != 0 then goto L4eefd6;
  #L4ef0aa.  return @kind void;
}
procedure `java.lang.Throwable` `getError`(`io.reactivex.rxjava3.processors.ReplayProcessor$g` v1 @kind this) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor$g;.getError:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4eeef8.  v0:= v1.`io.reactivex.rxjava3.processors.ReplayProcessor$g.b` @type ^`java.lang.Throwable` @kind object;
  #L4eeefc.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.rxjava3.processors.ReplayProcessor$g` v2 @kind this) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor$g;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4eee58.  v0:= v2.`io.reactivex.rxjava3.processors.ReplayProcessor$g.d` @type ^`int`;
  #L4eee5c.  if v0 != 0 then goto L4eee64;
  #L4eee60.  v0:= 0I;
  #L4eee62.  return v0 @kind object;
  #L4eee64.  v1:= v2.`io.reactivex.rxjava3.processors.ReplayProcessor$g.a` @type ^`java.util.List` @kind object;
  #L4eee68.  v0:= v0 + -1;
  #L4eee6c.  call temp:= `get`(v1, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L4eee72.  v0:= temp @kind object;
  #L4eee74.  return v0 @kind object;
}
procedure `boolean` `isDone`(`io.reactivex.rxjava3.processors.ReplayProcessor$g` v1 @kind this) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor$g;.isDone:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4eee28.  v0:= v1.`io.reactivex.rxjava3.processors.ReplayProcessor$g.c` @type ^`boolean` @kind boolean;
  #L4eee2c.  return v0;
}
procedure `int` `size`(`io.reactivex.rxjava3.processors.ReplayProcessor$g` v1 @kind this) @signature `Lio/reactivex/rxjava3/processors/ReplayProcessor$g;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4eee40.  v0:= v1.`io.reactivex.rxjava3.processors.ReplayProcessor$g.d` @type ^`int`;
  #L4eee44.  return v0;
}
