record `io.reactivex.rxjava3.processors.a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.processors.FlowableProcessor` @kind class {
  `io.reactivex.rxjava3.processors.FlowableProcessor` `io.reactivex.rxjava3.processors.a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.processors.a.c` @AccessFlag ;
  `io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList` `io.reactivex.rxjava3.processors.a.d` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.processors.a.e` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.processors.a` v0 @kind this, `io.reactivex.rxjava3.processors.FlowableProcessor` v1 @kind object) @signature `Lio/reactivex/rxjava3/processors/a;.<init>:(Lio/reactivex/rxjava3/processors/FlowableProcessor;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4ef6d8.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/processors/FlowableProcessor;.<init>:()V` @kind direct;
  #L4ef6de.  v0.`io.reactivex.rxjava3.processors.a.b` @type ^`io.reactivex.rxjava3.processors.FlowableProcessor` := v1 @kind object;
  #L4ef6e2.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.processors.a` v2 @kind this) @signature `Lio/reactivex/rxjava3/processors/a;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4ef6f4.  @monitorenter v2
  #L4ef6f6.  v0:= v2.`io.reactivex.rxjava3.processors.a.d` @type ^`io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L4ef6fa.  if v0 != 0 then goto L4ef708;
  #L4ef6fe.  v0:= 0I;
  #L4ef700.  v2.`io.reactivex.rxjava3.processors.a.c` @type ^`boolean` := v0 @kind boolean;
  #L4ef704.  @monitorexit v2
  #L4ef706.  return @kind void;
  #L4ef708.  v1:= 0I;
  #L4ef70a.  v2.`io.reactivex.rxjava3.processors.a.d` @type ^`io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList` := v1 @kind object;
  #L4ef70e.  @monitorexit v2
  #L4ef710.  v1:= v2.`io.reactivex.rxjava3.processors.a.b` @type ^`io.reactivex.rxjava3.processors.FlowableProcessor` @kind object;
  #L4ef714.  call temp:= `accept`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AppendOnlyLinkedArrayList;.accept:(Lorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L4ef71a.  goto L4ef6f4;
  #L4ef71c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ef71e.  @monitorexit v2
  #L4ef720.  throw v0;
  catch `java.lang.Throwable` @[L4ef6f6..L4ef710] goto L4ef71c;
  catch `java.lang.Throwable` @[L4ef71e..L4ef720] goto L4ef71c;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.rxjava3.processors.a` v1 @kind this) @signature `Lio/reactivex/rxjava3/processors/a;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ef6b8.  v0:= v1.`io.reactivex.rxjava3.processors.a.b` @type ^`io.reactivex.rxjava3.processors.FlowableProcessor` @kind object;
  #L4ef6bc.  call temp:= `getThrowable`(v0) @signature `Lio/reactivex/rxjava3/processors/FlowableProcessor;.getThrowable:()Ljava/lang/Throwable;` @kind virtual;
  #L4ef6c2.  v0:= temp @kind object;
  #L4ef6c4.  return v0 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.rxjava3.processors.a` v1 @kind this) @signature `Lio/reactivex/rxjava3/processors/a;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ef658.  v0:= v1.`io.reactivex.rxjava3.processors.a.b` @type ^`io.reactivex.rxjava3.processors.FlowableProcessor` @kind object;
  #L4ef65c.  call temp:= `hasComplete`(v0) @signature `Lio/reactivex/rxjava3/processors/FlowableProcessor;.hasComplete:()Z` @kind virtual;
  #L4ef662.  v0:= temp;
  #L4ef664.  return v0;
}
procedure `boolean` `hasSubscribers`(`io.reactivex.rxjava3.processors.a` v1 @kind this) @signature `Lio/reactivex/rxjava3/processors/a;.hasSubscribers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ef678.  v0:= v1.`io.reactivex.rxjava3.processors.a.b` @type ^`io.reactivex.rxjava3.processors.FlowableProcessor` @kind object;
  #L4ef67c.  call temp:= `hasSubscribers`(v0) @signature `Lio/reactivex/rxjava3/processors/FlowableProcessor;.hasSubscribers:()Z` @kind virtual;
  #L4ef682.  v0:= temp;
  #L4ef684.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.rxjava3.processors.a` v1 @kind this) @signature `Lio/reactivex/rxjava3/processors/a;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ef698.  v0:= v1.`io.reactivex.rxjava3.processors.a.b` @type ^`io.reactivex.rxjava3.processors.FlowableProcessor` @kind object;
  #L4ef69c.  call temp:= `hasThrowable`(v0) @signature `Lio/reactivex/rxjava3/processors/FlowableProcessor;.hasThrowable:()Z` @kind virtual;
  #L4ef6a2.  v0:= temp;
  #L4ef6a4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.processors.a` v2 @kind this) @signature `Lio/reactivex/rxjava3/processors/a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ef748.  v0:= v2.`io.reactivex.rxjava3.processors.a.e` @type ^`boolean` @kind boolean;
  #L4ef74c.  if v0 == 0 then goto L4ef752;
  #L4ef750.  return @kind void;
  #L4ef752.  @monitorenter v2
  #L4ef754.  v0:= v2.`io.reactivex.rxjava3.processors.a.e` @type ^`boolean` @kind boolean;
  #L4ef758.  if v0 == 0 then goto L4ef760;
  #L4ef75c.  @monitorexit v2
  #L4ef75e.  return @kind void;
  #L4ef760.  v0:= 1I;
  #L4ef762.  v2.`io.reactivex.rxjava3.processors.a.e` @type ^`boolean` := v0 @kind boolean;
  #L4ef766.  v1:= v2.`io.reactivex.rxjava3.processors.a.c` @type ^`boolean` @kind boolean;
  #L4ef76a.  if v1 == 0 then goto L4ef798;
  #L4ef76e.  v0:= v2.`io.reactivex.rxjava3.processors.a.d` @type ^`io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L4ef772.  if v0 != 0 then goto L4ef786;
  #L4ef776.  v0:= new `io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList`;
  #L4ef77a.  v1:= 4I;
  #L4ef77c.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L4ef782.  v2.`io.reactivex.rxjava3.processors.a.d` @type ^`io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList` := v0 @kind object;
  #L4ef786.  call temp:= `complete`() @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L4ef78c.  v1:= temp @kind object;
  #L4ef78e.  call `add`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AppendOnlyLinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L4ef794.  @monitorexit v2
  #L4ef796.  return @kind void;
  #L4ef798.  v2.`io.reactivex.rxjava3.processors.a.c` @type ^`boolean` := v0 @kind boolean;
  #L4ef79c.  @monitorexit v2
  #L4ef79e.  v0:= v2.`io.reactivex.rxjava3.processors.a.b` @type ^`io.reactivex.rxjava3.processors.FlowableProcessor` @kind object;
  #L4ef7a2.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4ef7a8.  return @kind void;
  #L4ef7aa.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ef7ac.  @monitorexit v2
  #L4ef7ae.  throw v0;
  catch `java.lang.Throwable` @[L4ef754..L4ef79e] goto L4ef7aa;
  catch `java.lang.Throwable` @[L4ef7ac..L4ef7ae] goto L4ef7aa;
}
procedure `void` `onError`(`io.reactivex.rxjava3.processors.a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/rxjava3/processors/a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ef7d4.  v0:= v2.`io.reactivex.rxjava3.processors.a.e` @type ^`boolean` @kind boolean;
  #L4ef7d8.  if v0 == 0 then goto L4ef7e4;
  #L4ef7dc.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4ef7e2.  return @kind void;
  #L4ef7e4.  @monitorenter v2
  #L4ef7e6.  v0:= v2.`io.reactivex.rxjava3.processors.a.e` @type ^`boolean` @kind boolean;
  #L4ef7ea.  v1:= 1I;
  #L4ef7ec.  if v0 == 0 then goto L4ef7f2;
  #L4ef7f0.  goto L4ef830;
  #L4ef7f2.  v2.`io.reactivex.rxjava3.processors.a.e` @type ^`boolean` := v1 @kind boolean;
  #L4ef7f6.  v0:= v2.`io.reactivex.rxjava3.processors.a.c` @type ^`boolean` @kind boolean;
  #L4ef7fa.  if v0 == 0 then goto L4ef828;
  #L4ef7fe.  v0:= v2.`io.reactivex.rxjava3.processors.a.d` @type ^`io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L4ef802.  if v0 != 0 then goto L4ef816;
  #L4ef806.  v0:= new `io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList`;
  #L4ef80a.  v1:= 4I;
  #L4ef80c.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L4ef812.  v2.`io.reactivex.rxjava3.processors.a.d` @type ^`io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList` := v0 @kind object;
  #L4ef816.  call temp:= `error`(v3) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L4ef81c.  v3:= temp @kind object;
  #L4ef81e.  call `setFirst`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/util/AppendOnlyLinkedArrayList;.setFirst:(Ljava/lang/Object;)V` @kind virtual;
  #L4ef824.  @monitorexit v2
  #L4ef826.  return @kind void;
  #L4ef828.  v0:= 0I;
  #L4ef82a.  v2.`io.reactivex.rxjava3.processors.a.c` @type ^`boolean` := v1 @kind boolean;
  #L4ef82e.  v1:= 0I;
  #L4ef830.  @monitorexit v2
  #L4ef832.  if v1 == 0 then goto L4ef83e;
  #L4ef836.  call `onError`(v3) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4ef83c.  return @kind void;
  #L4ef83e.  v0:= v2.`io.reactivex.rxjava3.processors.a.b` @type ^`io.reactivex.rxjava3.processors.FlowableProcessor` @kind object;
  #L4ef842.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ef848.  return @kind void;
  #L4ef84a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ef84c.  @monitorexit v2
  #L4ef84e.  throw v3;
  catch `java.lang.Throwable` @[L4ef7e6..L4ef832] goto L4ef84a;
  catch `java.lang.Throwable` @[L4ef84c..L4ef84e] goto L4ef84a;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.processors.a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/processors/a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ef874.  v0:= v2.`io.reactivex.rxjava3.processors.a.e` @type ^`boolean` @kind boolean;
  #L4ef878.  if v0 == 0 then goto L4ef87e;
  #L4ef87c.  return @kind void;
  #L4ef87e.  @monitorenter v2
  #L4ef880.  v0:= v2.`io.reactivex.rxjava3.processors.a.e` @type ^`boolean` @kind boolean;
  #L4ef884.  if v0 == 0 then goto L4ef88c;
  #L4ef888.  @monitorexit v2
  #L4ef88a.  return @kind void;
  #L4ef88c.  v0:= v2.`io.reactivex.rxjava3.processors.a.c` @type ^`boolean` @kind boolean;
  #L4ef890.  if v0 == 0 then goto L4ef8be;
  #L4ef894.  v0:= v2.`io.reactivex.rxjava3.processors.a.d` @type ^`io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L4ef898.  if v0 != 0 then goto L4ef8ac;
  #L4ef89c.  v0:= new `io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList`;
  #L4ef8a0.  v1:= 4I;
  #L4ef8a2.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L4ef8a8.  v2.`io.reactivex.rxjava3.processors.a.d` @type ^`io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList` := v0 @kind object;
  #L4ef8ac.  call temp:= `next`(v3) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4ef8b2.  v3:= temp @kind object;
  #L4ef8b4.  call `add`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/util/AppendOnlyLinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L4ef8ba.  @monitorexit v2
  #L4ef8bc.  return @kind void;
  #L4ef8be.  v0:= 1I;
  #L4ef8c0.  v2.`io.reactivex.rxjava3.processors.a.c` @type ^`boolean` := v0 @kind boolean;
  #L4ef8c4.  @monitorexit v2
  #L4ef8c6.  v0:= v2.`io.reactivex.rxjava3.processors.a.b` @type ^`io.reactivex.rxjava3.processors.FlowableProcessor` @kind object;
  #L4ef8ca.  call `onNext`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ef8d0.  call `e`(v2) @signature `Lio/reactivex/rxjava3/processors/a;.e:()V` @kind virtual;
  #L4ef8d6.  return @kind void;
  #L4ef8d8.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ef8da.  @monitorexit v2
  #L4ef8dc.  throw v3;
  catch `java.lang.Throwable` @[L4ef880..L4ef8c6] goto L4ef8d8;
  catch `java.lang.Throwable` @[L4ef8da..L4ef8dc] goto L4ef8d8;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.processors.a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/processors/a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ef904.  v0:= v2.`io.reactivex.rxjava3.processors.a.e` @type ^`boolean` @kind boolean;
  #L4ef908.  v1:= 1I;
  #L4ef90a.  if v0 != 0 then goto L4ef95e;
  #L4ef90e.  @monitorenter v2
  #L4ef910.  v0:= v2.`io.reactivex.rxjava3.processors.a.e` @type ^`boolean` @kind boolean;
  #L4ef914.  if v0 == 0 then goto L4ef91a;
  #L4ef918.  goto L4ef954;
  #L4ef91a.  v0:= v2.`io.reactivex.rxjava3.processors.a.c` @type ^`boolean` @kind boolean;
  #L4ef91e.  if v0 == 0 then goto L4ef94c;
  #L4ef922.  v0:= v2.`io.reactivex.rxjava3.processors.a.d` @type ^`io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L4ef926.  if v0 != 0 then goto L4ef93a;
  #L4ef92a.  v0:= new `io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList`;
  #L4ef92e.  v1:= 4I;
  #L4ef930.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L4ef936.  v2.`io.reactivex.rxjava3.processors.a.d` @type ^`io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList` := v0 @kind object;
  #L4ef93a.  call temp:= `subscription`(v3) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.subscription:(Lorg/reactivestreams/Subscription;)Ljava/lang/Object;` @kind static;
  #L4ef940.  v3:= temp @kind object;
  #L4ef942.  call `add`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/util/AppendOnlyLinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L4ef948.  @monitorexit v2
  #L4ef94a.  return @kind void;
  #L4ef94c.  v2.`io.reactivex.rxjava3.processors.a.c` @type ^`boolean` := v1 @kind boolean;
  #L4ef950.  v0:= 0I;
  #L4ef952.  v1:= 0I;
  #L4ef954.  @monitorexit v2
  #L4ef956.  goto L4ef95e;
  #L4ef958.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ef95a.  @monitorexit v2
  #L4ef95c.  throw v3;
  #L4ef95e.  if v1 == 0 then goto L4ef96a;
  #L4ef962.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4ef968.  goto L4ef97a;
  #L4ef96a.  v0:= v2.`io.reactivex.rxjava3.processors.a.b` @type ^`io.reactivex.rxjava3.processors.FlowableProcessor` @kind object;
  #L4ef96e.  call `onSubscribe`(v0, v3) @signature `Lio/reactivex/rxjava3/core/FlowableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4ef974.  call `e`(v2) @signature `Lio/reactivex/rxjava3/processors/a;.e:()V` @kind virtual;
  #L4ef97a.  return @kind void;
  catch `java.lang.Throwable` @[L4ef910..L4ef95c] goto L4ef958;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.processors.a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/rxjava3/processors/a;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L4ef998.  v0:= v1.`io.reactivex.rxjava3.processors.a.b` @type ^`io.reactivex.rxjava3.processors.FlowableProcessor` @kind object;
  #L4ef99c.  call `subscribe`(v0, v2) @signature `Lio/reactivex/rxjava3/core/Flowable;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4ef9a2.  return @kind void;
}
