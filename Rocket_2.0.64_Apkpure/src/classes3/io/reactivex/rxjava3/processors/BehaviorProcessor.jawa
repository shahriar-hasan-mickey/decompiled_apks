record `io.reactivex.rxjava3.processors.BehaviorProcessor` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.processors.FlowableProcessor` @kind class {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.processors.BehaviorProcessor.b` @AccessFlag FINAL;
  `java.util.concurrent.locks.ReadWriteLock` `io.reactivex.rxjava3.processors.BehaviorProcessor.c` @AccessFlag FINAL;
  `java.util.concurrent.locks.Lock` `io.reactivex.rxjava3.processors.BehaviorProcessor.d` @AccessFlag FINAL;
  `java.util.concurrent.locks.Lock` `io.reactivex.rxjava3.processors.BehaviorProcessor.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.processors.BehaviorProcessor.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.processors.BehaviorProcessor.g` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.processors.BehaviorProcessor.h` @AccessFlag ;
}
global `java.lang.Object`[] `@@io.reactivex.rxjava3.processors.BehaviorProcessor.i` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.processors.BehaviorProcessor$a`[] `@@io.reactivex.rxjava3.processors.BehaviorProcessor.j` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.processors.BehaviorProcessor$a`[] `@@io.reactivex.rxjava3.processors.BehaviorProcessor.k` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4ed298.  v0:= 0I;
  #L4ed29a.  v1:= new `java.lang.Object`[v0];
  #L4ed29e.  `@@io.reactivex.rxjava3.processors.BehaviorProcessor.i` @type ^`java.lang.Object`[] := v1 @kind object;
  #L4ed2a2.  v1:= new `io.reactivex.rxjava3.processors.BehaviorProcessor$a`[v0];
  #L4ed2a6.  `@@io.reactivex.rxjava3.processors.BehaviorProcessor.j` @type ^`io.reactivex.rxjava3.processors.BehaviorProcessor$a`[] := v1 @kind object;
  #L4ed2aa.  v0:= new `io.reactivex.rxjava3.processors.BehaviorProcessor$a`[v0];
  #L4ed2ae.  `@@io.reactivex.rxjava3.processors.BehaviorProcessor.k` @type ^`io.reactivex.rxjava3.processors.BehaviorProcessor$a`[] := v0 @kind object;
  #L4ed2b2.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.processors.BehaviorProcessor` v2 @kind this) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4ed2c4.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/processors/FlowableProcessor;.<init>:()V` @kind direct;
  #L4ed2ca.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4ed2ce.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4ed2d4.  v2.`io.reactivex.rxjava3.processors.BehaviorProcessor.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4ed2d8.  v0:= new `java.util.concurrent.locks.ReentrantReadWriteLock`;
  #L4ed2dc.  call `<init>`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.<init>:()V` @kind direct;
  #L4ed2e2.  v2.`io.reactivex.rxjava3.processors.BehaviorProcessor.c` @type ^`java.util.concurrent.locks.ReadWriteLock` := v0 @kind object;
  #L4ed2e6.  call temp:= `readLock`(v0) @signature `Ljava/util/concurrent/locks/ReadWriteLock;.readLock:()Ljava/util/concurrent/locks/Lock;` @kind interface;
  #L4ed2ec.  v1:= temp @kind object;
  #L4ed2ee.  v2.`io.reactivex.rxjava3.processors.BehaviorProcessor.d` @type ^`java.util.concurrent.locks.Lock` := v1 @kind object;
  #L4ed2f2.  call temp:= `writeLock`(v0) @signature `Ljava/util/concurrent/locks/ReadWriteLock;.writeLock:()Ljava/util/concurrent/locks/Lock;` @kind interface;
  #L4ed2f8.  v0:= temp @kind object;
  #L4ed2fa.  v2.`io.reactivex.rxjava3.processors.BehaviorProcessor.e` @type ^`java.util.concurrent.locks.Lock` := v0 @kind object;
  #L4ed2fe.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4ed302.  v1:= `@@io.reactivex.rxjava3.processors.BehaviorProcessor.j` @type ^`io.reactivex.rxjava3.processors.BehaviorProcessor$a`[] @kind object;
  #L4ed306.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4ed30c.  v2.`io.reactivex.rxjava3.processors.BehaviorProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4ed310.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4ed314.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4ed31a.  v2.`io.reactivex.rxjava3.processors.BehaviorProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4ed31e.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.processors.BehaviorProcessor` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.<init>:(Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4ed330.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.<init>:()V` @kind direct;
  #L4ed336.  v0:= v1.`io.reactivex.rxjava3.processors.BehaviorProcessor.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ed33a.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4ed340.  return @kind void;
}
procedure `io.reactivex.rxjava3.processors.BehaviorProcessor` `create`() @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.create:()Lio/reactivex/rxjava3/processors/BehaviorProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4ed1ac.  v0:= new `io.reactivex.rxjava3.processors.BehaviorProcessor`;
  #L4ed1b0.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.<init>:()V` @kind direct;
  #L4ed1b6.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.processors.BehaviorProcessor` `createDefault`(`java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.createDefault:(Ljava/lang/Object;)Lio/reactivex/rxjava3/processors/BehaviorProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4ed1c8.  v0:= "defaultValue is null" @kind object;
  #L4ed1cc.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4ed1d2.  v0:= new `io.reactivex.rxjava3.processors.BehaviorProcessor`;
  #L4ed1d6.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4ed1dc.  return v0 @kind object;
}
procedure `boolean` `e`(`io.reactivex.rxjava3.processors.BehaviorProcessor` v4 @kind this, `io.reactivex.rxjava3.processors.BehaviorProcessor$a` v5 @kind object) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.e:(Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4ed020.  v0:= v4.`io.reactivex.rxjava3.processors.BehaviorProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ed024.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ed02a.  v0:= temp @kind object;
  #L4ed02c.  v0:= (`io.reactivex.rxjava3.processors.BehaviorProcessor$a`[]) v0 @kind object;
  #L4ed030.  v1:= `@@io.reactivex.rxjava3.processors.BehaviorProcessor.k` @type ^`io.reactivex.rxjava3.processors.BehaviorProcessor$a`[] @kind object;
  #L4ed034.  v2:= 0I;
  #L4ed036.  if v0 != v1 then goto L4ed03c;
  #L4ed03a.  return v2;
  #L4ed03c.  v1:= length @variable v0;
  #L4ed03e.  v3:= v1 + 1;
  #L4ed042.  v3:= new `io.reactivex.rxjava3.processors.BehaviorProcessor$a`[v3];
  #L4ed046.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4ed04c.  v3[v1]:= v5 @kind object;
  #L4ed050.  v1:= v4.`io.reactivex.rxjava3.processors.BehaviorProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ed054.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4ed05a.  v0:= temp;
  #L4ed05c.  if v0 == 0 then goto L4ed020;
  #L4ed060.  v5:= 1I;
  #L4ed062.  return v5;
}
procedure `void` `f`(`io.reactivex.rxjava3.processors.BehaviorProcessor` v6 @kind this, `io.reactivex.rxjava3.processors.BehaviorProcessor$a` v7 @kind object) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.f:(Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4ed4b4.  v0:= v6.`io.reactivex.rxjava3.processors.BehaviorProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ed4b8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ed4be.  v0:= temp @kind object;
  #L4ed4c0.  v0:= (`io.reactivex.rxjava3.processors.BehaviorProcessor$a`[]) v0 @kind object;
  #L4ed4c4.  v1:= length @variable v0;
  #L4ed4c6.  if v1 != 0 then goto L4ed4cc;
  #L4ed4ca.  return @kind void;
  #L4ed4cc.  v2:= -1I;
  #L4ed4ce.  v3:= 0I;
  #L4ed4d0.  v4:= 0I;
  #L4ed4d2.  if v4 >= v1 then goto L4ed4e8;
  #L4ed4d6.  v5:= v0[v4] @kind object;
  #L4ed4da.  if v5 != v7 then goto L4ed4e2;
  #L4ed4de.  v2:= v4;
  #L4ed4e0.  goto L4ed4e8;
  #L4ed4e2.  v4:= v4 + 1;
  #L4ed4e6.  goto L4ed4d2;
  #L4ed4e8.  if v2 >= 0 then goto L4ed4ee;
  #L4ed4ec.  return @kind void;
  #L4ed4ee.  v4:= 1I;
  #L4ed4f0.  if v1 != v4 then goto L4ed4fa;
  #L4ed4f4.  v1:= `@@io.reactivex.rxjava3.processors.BehaviorProcessor.j` @type ^`io.reactivex.rxjava3.processors.BehaviorProcessor$a`[] @kind object;
  #L4ed4f8.  goto L4ed518;
  #L4ed4fa.  v5:= v1 + -1;
  #L4ed4fe.  v5:= new `io.reactivex.rxjava3.processors.BehaviorProcessor$a`[v5];
  #L4ed502.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4ed508.  v3:= v2 + 1;
  #L4ed50c.  v1:= v1 - v2 @kind int;
  #L4ed50e.  v1:= v1 - v4 @kind int;
  #L4ed510.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4ed516.  v1:= v5 @kind object;
  #L4ed518.  v2:= v6.`io.reactivex.rxjava3.processors.BehaviorProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ed51c.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4ed522.  v0:= temp;
  #L4ed524.  if v0 == 0 then goto L4ed4b4;
  #L4ed528.  return @kind void;
}
procedure `void` `g`(`io.reactivex.rxjava3.processors.BehaviorProcessor` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.g:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4ed53c.  v0:= v5.`io.reactivex.rxjava3.processors.BehaviorProcessor.e` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L4ed540.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L4ed546.  v1:= v5.`io.reactivex.rxjava3.processors.BehaviorProcessor.h` @type ^`long` @kind wide;
  #L4ed54a.  v3:= 1L;
  #L4ed54e.  v1:= v1 + v3 @kind long;
  #L4ed550.  v5.`io.reactivex.rxjava3.processors.BehaviorProcessor.h` @type ^`long` := v1 @kind wide;
  #L4ed554.  v1:= v5.`io.reactivex.rxjava3.processors.BehaviorProcessor.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ed558.  call `lazySet`(v1, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4ed55e.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L4ed564.  return @kind void;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.rxjava3.processors.BehaviorProcessor` v2 @kind this) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ed260.  v0:= v2.`io.reactivex.rxjava3.processors.BehaviorProcessor.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ed264.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ed26a.  v0:= temp @kind object;
  #L4ed26c.  call temp:= `isError`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4ed272.  v1:= temp;
  #L4ed274.  if v1 == 0 then goto L4ed282;
  #L4ed278.  call temp:= `getError`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L4ed27e.  v0:= temp @kind object;
  #L4ed280.  return v0 @kind object;
  #L4ed282.  v0:= 0I;
  #L4ed284.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.rxjava3.processors.BehaviorProcessor` v2 @kind this) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ed21c.  v0:= v2.`io.reactivex.rxjava3.processors.BehaviorProcessor.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ed220.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ed226.  v0:= temp @kind object;
  #L4ed228.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4ed22e.  v1:= temp;
  #L4ed230.  if v1 != 0 then goto L4ed24c;
  #L4ed234.  call temp:= `isError`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4ed23a.  v1:= temp;
  #L4ed23c.  if v1 == 0 then goto L4ed242;
  #L4ed240.  goto L4ed24c;
  #L4ed242.  call temp:= `getValue`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4ed248.  v0:= temp @kind object;
  #L4ed24a.  return v0 @kind object;
  #L4ed24c.  v0:= 0I;
  #L4ed24e.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.processors.BehaviorProcessor$a`[] `h`(`io.reactivex.rxjava3.processors.BehaviorProcessor` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.h:(Ljava/lang/Object;)[Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;` @AccessFlag  {
    temp;
    v0;

  #L4ed1f0.  call `g`(v1, v2) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.g:(Ljava/lang/Object;)V` @kind virtual;
  #L4ed1f6.  v2:= v1.`io.reactivex.rxjava3.processors.BehaviorProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ed1fa.  v0:= `@@io.reactivex.rxjava3.processors.BehaviorProcessor.k` @type ^`io.reactivex.rxjava3.processors.BehaviorProcessor$a`[] @kind object;
  #L4ed1fe.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4ed204.  v2:= temp @kind object;
  #L4ed206.  v2:= (`io.reactivex.rxjava3.processors.BehaviorProcessor$a`[]) v2 @kind object;
  #L4ed20a.  return v2 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.rxjava3.processors.BehaviorProcessor` v1 @kind this) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ed074.  v0:= v1.`io.reactivex.rxjava3.processors.BehaviorProcessor.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ed078.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ed07e.  v0:= temp @kind object;
  #L4ed080.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4ed086.  v0:= temp;
  #L4ed088.  return v0;
}
procedure `boolean` `hasSubscribers`(`io.reactivex.rxjava3.processors.BehaviorProcessor` v1 @kind this) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.hasSubscribers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ed09c.  v0:= v1.`io.reactivex.rxjava3.processors.BehaviorProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ed0a0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ed0a6.  v0:= temp @kind object;
  #L4ed0a8.  v0:= (`io.reactivex.rxjava3.processors.BehaviorProcessor$a`[]) v0 @kind object;
  #L4ed0ac.  v0:= length @variable v0;
  #L4ed0ae.  if v0 == 0 then goto L4ed0b6;
  #L4ed0b2.  v0:= 1I;
  #L4ed0b4.  goto L4ed0b8;
  #L4ed0b6.  v0:= 0I;
  #L4ed0b8.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.rxjava3.processors.BehaviorProcessor` v1 @kind this) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ed0cc.  v0:= v1.`io.reactivex.rxjava3.processors.BehaviorProcessor.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ed0d0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ed0d6.  v0:= temp @kind object;
  #L4ed0d8.  call temp:= `isError`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4ed0de.  v0:= temp;
  #L4ed0e0.  return v0;
}
procedure `boolean` `hasValue`(`io.reactivex.rxjava3.processors.BehaviorProcessor` v2 @kind this) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.hasValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ed0f4.  v0:= v2.`io.reactivex.rxjava3.processors.BehaviorProcessor.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ed0f8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ed0fe.  v0:= temp @kind object;
  #L4ed100.  if v0 == 0 then goto L4ed120;
  #L4ed104.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4ed10a.  v1:= temp;
  #L4ed10c.  if v1 != 0 then goto L4ed120;
  #L4ed110.  call temp:= `isError`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4ed116.  v0:= temp;
  #L4ed118.  if v0 != 0 then goto L4ed120;
  #L4ed11c.  v0:= 1I;
  #L4ed11e.  goto L4ed122;
  #L4ed120.  v0:= 0I;
  #L4ed122.  return v0;
}
procedure `boolean` `offer`(`io.reactivex.rxjava3.processors.BehaviorProcessor` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4ed134.  v0:= "offer called with a null value." @kind object;
  #L4ed138.  call temp:= `nullCheck`(v7, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4ed13e.  v0:= v6.`io.reactivex.rxjava3.processors.BehaviorProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ed142.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ed148.  v0:= temp @kind object;
  #L4ed14a.  v0:= (`io.reactivex.rxjava3.processors.BehaviorProcessor$a`[]) v0 @kind object;
  #L4ed14e.  v1:= length @variable v0;
  #L4ed150.  v2:= 0I;
  #L4ed152.  v3:= 0I;
  #L4ed154.  if v3 >= v1 then goto L4ed170;
  #L4ed158.  v4:= v0[v3] @kind object;
  #L4ed15c.  call temp:= `d`(v4) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;.d:()Z` @kind virtual;
  #L4ed162.  v4:= temp;
  #L4ed164.  if v4 == 0 then goto L4ed16a;
  #L4ed168.  return v2;
  #L4ed16a.  v3:= v3 + 1;
  #L4ed16e.  goto L4ed154;
  #L4ed170.  call temp:= `next`(v7) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4ed176.  v7:= temp @kind object;
  #L4ed178.  call `g`(v6, v7) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.g:(Ljava/lang/Object;)V` @kind virtual;
  #L4ed17e.  v1:= length @variable v0;
  #L4ed180.  if v2 >= v1 then goto L4ed198;
  #L4ed184.  v3:= v0[v2] @kind object;
  #L4ed188.  v4:= v6.`io.reactivex.rxjava3.processors.BehaviorProcessor.h` @type ^`long` @kind wide;
  #L4ed18c.  call `c`(v3, v7, v4) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;.c:(Ljava/lang/Object;J)V` @kind virtual;
  #L4ed192.  v2:= v2 + 1;
  #L4ed196.  goto L4ed180;
  #L4ed198.  v7:= 1I;
  #L4ed19a.  return v7;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.processors.BehaviorProcessor` v7 @kind this) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4ed354.  v0:= v7.`io.reactivex.rxjava3.processors.BehaviorProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ed358.  v1:= `@@io.reactivex.rxjava3.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L4ed35c.  v2:= 0I;
  #L4ed35e.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4ed364.  v0:= temp;
  #L4ed366.  if v0 != 0 then goto L4ed36c;
  #L4ed36a.  return @kind void;
  #L4ed36c.  call temp:= `complete`() @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L4ed372.  v0:= temp @kind object;
  #L4ed374.  call temp:= `h`(v7, v0) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.h:(Ljava/lang/Object;)[Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;` @kind virtual;
  #L4ed37a.  v1:= temp @kind object;
  #L4ed37c.  v2:= length @variable v1;
  #L4ed37e.  v3:= 0I;
  #L4ed380.  if v3 >= v2 then goto L4ed398;
  #L4ed384.  v4:= v1[v3] @kind object;
  #L4ed388.  v5:= v7.`io.reactivex.rxjava3.processors.BehaviorProcessor.h` @type ^`long` @kind wide;
  #L4ed38c.  call `c`(v4, v0, v5) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;.c:(Ljava/lang/Object;J)V` @kind virtual;
  #L4ed392.  v3:= v3 + 1;
  #L4ed396.  goto L4ed380;
  #L4ed398.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.processors.BehaviorProcessor` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4ed3ac.  v0:= "onError called with a null Throwable." @kind object;
  #L4ed3b0.  call temp:= `nullCheck`(v7, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4ed3b6.  v0:= v6.`io.reactivex.rxjava3.processors.BehaviorProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ed3ba.  v1:= 0I;
  #L4ed3bc.  call temp:= `compareAndSet`(v0, v1, v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4ed3c2.  v0:= temp;
  #L4ed3c4.  if v0 != 0 then goto L4ed3d0;
  #L4ed3c8.  call `onError`(v7) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4ed3ce.  return @kind void;
  #L4ed3d0.  call temp:= `error`(v7) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L4ed3d6.  v7:= temp @kind object;
  #L4ed3d8.  call temp:= `h`(v6, v7) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.h:(Ljava/lang/Object;)[Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;` @kind virtual;
  #L4ed3de.  v0:= temp @kind object;
  #L4ed3e0.  v1:= length @variable v0;
  #L4ed3e2.  v2:= 0I;
  #L4ed3e4.  if v2 >= v1 then goto L4ed3fc;
  #L4ed3e8.  v3:= v0[v2] @kind object;
  #L4ed3ec.  v4:= v6.`io.reactivex.rxjava3.processors.BehaviorProcessor.h` @type ^`long` @kind wide;
  #L4ed3f0.  call `c`(v3, v7, v4) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;.c:(Ljava/lang/Object;J)V` @kind virtual;
  #L4ed3f6.  v2:= v2 + 1;
  #L4ed3fa.  goto L4ed3e4;
  #L4ed3fc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.processors.BehaviorProcessor` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4ed410.  v0:= "onNext called with a null value." @kind object;
  #L4ed414.  call temp:= `nullCheck`(v7, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4ed41a.  v0:= v6.`io.reactivex.rxjava3.processors.BehaviorProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ed41e.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ed424.  v0:= temp @kind object;
  #L4ed426.  if v0 == 0 then goto L4ed42c;
  #L4ed42a.  return @kind void;
  #L4ed42c.  call temp:= `next`(v7) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4ed432.  v7:= temp @kind object;
  #L4ed434.  call `g`(v6, v7) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.g:(Ljava/lang/Object;)V` @kind virtual;
  #L4ed43a.  v0:= v6.`io.reactivex.rxjava3.processors.BehaviorProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ed43e.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ed444.  v0:= temp @kind object;
  #L4ed446.  v0:= (`io.reactivex.rxjava3.processors.BehaviorProcessor$a`[]) v0 @kind object;
  #L4ed44a.  v1:= length @variable v0;
  #L4ed44c.  v2:= 0I;
  #L4ed44e.  if v2 >= v1 then goto L4ed466;
  #L4ed452.  v3:= v0[v2] @kind object;
  #L4ed456.  v4:= v6.`io.reactivex.rxjava3.processors.BehaviorProcessor.h` @type ^`long` @kind wide;
  #L4ed45a.  call `c`(v3, v7, v4) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;.c:(Ljava/lang/Object;J)V` @kind virtual;
  #L4ed460.  v2:= v2 + 1;
  #L4ed464.  goto L4ed44e;
  #L4ed466.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.processors.BehaviorProcessor` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ed478.  v0:= v2.`io.reactivex.rxjava3.processors.BehaviorProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ed47c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ed482.  v0:= temp @kind object;
  #L4ed484.  if v0 == 0 then goto L4ed490;
  #L4ed488.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4ed48e.  return @kind void;
  #L4ed490.  v0:= 9223372036854775807L;
  #L4ed49a.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4ed4a0.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.processors.BehaviorProcessor` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L4ed578.  v0:= new `io.reactivex.rxjava3.processors.BehaviorProcessor$a`;
  #L4ed57c.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/processors/BehaviorProcessor;)V` @kind direct;
  #L4ed582.  call `onSubscribe`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4ed588.  call temp:= `e`(v2, v0) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.e:(Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;)Z` @kind virtual;
  #L4ed58e.  v1:= temp;
  #L4ed590.  if v1 == 0 then goto L4ed5ac;
  #L4ed594.  v3:= v0.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.g` @type ^`boolean` @kind boolean;
  #L4ed598.  if v3 == 0 then goto L4ed5a4;
  #L4ed59c.  call `f`(v2, v0) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.f:(Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;)V` @kind virtual;
  #L4ed5a2.  goto L4ed5d2;
  #L4ed5a4.  call `a`(v0) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;.a:()V` @kind virtual;
  #L4ed5aa.  goto L4ed5d2;
  #L4ed5ac.  v0:= v2.`io.reactivex.rxjava3.processors.BehaviorProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ed5b0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ed5b6.  v0:= temp @kind object;
  #L4ed5b8.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L4ed5bc.  v1:= `@@io.reactivex.rxjava3.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L4ed5c0.  if v0 != v1 then goto L4ed5cc;
  #L4ed5c4.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4ed5ca.  goto L4ed5d2;
  #L4ed5cc.  call `onError`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ed5d2.  return @kind void;
}
