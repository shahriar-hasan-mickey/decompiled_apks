record `io.reactivex.rxjava3.processors.MulticastProcessor` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.processors.FlowableProcessor` @kind class {
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.rxjava3.processors.MulticastProcessor.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.processors.MulticastProcessor.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.processors.MulticastProcessor.d` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.processors.MulticastProcessor.e` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.processors.MulticastProcessor.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.processors.MulticastProcessor.g` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` `io.reactivex.rxjava3.processors.MulticastProcessor.h` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.processors.MulticastProcessor.i` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.rxjava3.processors.MulticastProcessor.j` @AccessFlag VOLATILE;
  `int` `io.reactivex.rxjava3.processors.MulticastProcessor.k` @AccessFlag ;
  `int` `io.reactivex.rxjava3.processors.MulticastProcessor.l` @AccessFlag ;
}
global `io.reactivex.rxjava3.processors.MulticastProcessor$a`[] `@@io.reactivex.rxjava3.processors.MulticastProcessor.m` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.processors.MulticastProcessor$a`[] `@@io.reactivex.rxjava3.processors.MulticastProcessor.n` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4ed954.  v0:= 0I;
  #L4ed956.  v1:= new `io.reactivex.rxjava3.processors.MulticastProcessor$a`[v0];
  #L4ed95a.  `@@io.reactivex.rxjava3.processors.MulticastProcessor.m` @type ^`io.reactivex.rxjava3.processors.MulticastProcessor$a`[] := v1 @kind object;
  #L4ed95e.  v0:= new `io.reactivex.rxjava3.processors.MulticastProcessor$a`[v0];
  #L4ed962.  `@@io.reactivex.rxjava3.processors.MulticastProcessor.n` @type ^`io.reactivex.rxjava3.processors.MulticastProcessor$a`[] := v0 @kind object;
  #L4ed966.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.processors.MulticastProcessor` v1 @kind this, `int` v2 , `boolean` v3 ) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.<init>:(IZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4ed978.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/processors/FlowableProcessor;.<init>:()V` @kind direct;
  #L4ed97e.  v1.`io.reactivex.rxjava3.processors.MulticastProcessor.e` @type ^`int` := v2;
  #L4ed982.  v0:= v2 ^> 2;
  #L4ed986.  v2:= v2 - v0 @kind int;
  #L4ed988.  v1.`io.reactivex.rxjava3.processors.MulticastProcessor.f` @type ^`int` := v2;
  #L4ed98c.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4ed990.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4ed996.  v1.`io.reactivex.rxjava3.processors.MulticastProcessor.b` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L4ed99a.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4ed99e.  v0:= `@@io.reactivex.rxjava3.processors.MulticastProcessor.m` @type ^`io.reactivex.rxjava3.processors.MulticastProcessor$a`[] @kind object;
  #L4ed9a2.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4ed9a8.  v1.`io.reactivex.rxjava3.processors.MulticastProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4ed9ac.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4ed9b0.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4ed9b6.  v1.`io.reactivex.rxjava3.processors.MulticastProcessor.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4ed9ba.  v1.`io.reactivex.rxjava3.processors.MulticastProcessor.g` @type ^`boolean` := v3 @kind boolean;
  #L4ed9be.  return @kind void;
}
procedure `io.reactivex.rxjava3.processors.MulticastProcessor` `create`() @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.create:()Lio/reactivex/rxjava3/processors/MulticastProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4ed894.  v0:= new `io.reactivex.rxjava3.processors.MulticastProcessor`;
  #L4ed898.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Flowable;.bufferSize:()I` @kind static;
  #L4ed89e.  v1:= temp;
  #L4ed8a0.  v2:= 0I;
  #L4ed8a2.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.<init>:(IZ)V` @kind direct;
  #L4ed8a8.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.processors.MulticastProcessor` `create`(`int` v2 ) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.create:(I)Lio/reactivex/rxjava3/processors/MulticastProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4ed8e0.  v0:= "bufferSize" @kind object;
  #L4ed8e4.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4ed8ea.  v0:= new `io.reactivex.rxjava3.processors.MulticastProcessor`;
  #L4ed8ee.  v1:= 0I;
  #L4ed8f0.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.<init>:(IZ)V` @kind direct;
  #L4ed8f6.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.processors.MulticastProcessor` `create`(`int` v1 , `boolean` v2 ) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.create:(IZ)Lio/reactivex/rxjava3/processors/MulticastProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4ed908.  v0:= "bufferSize" @kind object;
  #L4ed90c.  call temp:= `verifyPositive`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4ed912.  v0:= new `io.reactivex.rxjava3.processors.MulticastProcessor`;
  #L4ed916.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.<init>:(IZ)V` @kind direct;
  #L4ed91c.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.processors.MulticastProcessor` `create`(`boolean` v2 ) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.create:(Z)Lio/reactivex/rxjava3/processors/MulticastProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4ed8bc.  v0:= new `io.reactivex.rxjava3.processors.MulticastProcessor`;
  #L4ed8c0.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Flowable;.bufferSize:()I` @kind static;
  #L4ed8c6.  v1:= temp;
  #L4ed8c8.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.<init>:(IZ)V` @kind direct;
  #L4ed8ce.  return v0 @kind object;
}
procedure `boolean` `e`(`io.reactivex.rxjava3.processors.MulticastProcessor` v4 @kind this, `io.reactivex.rxjava3.processors.MulticastProcessor$a` v5 @kind object) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.e:(Lio/reactivex/rxjava3/processors/MulticastProcessor$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4ed764.  v0:= v4.`io.reactivex.rxjava3.processors.MulticastProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ed768.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ed76e.  v0:= temp @kind object;
  #L4ed770.  v0:= (`io.reactivex.rxjava3.processors.MulticastProcessor$a`[]) v0 @kind object;
  #L4ed774.  v1:= `@@io.reactivex.rxjava3.processors.MulticastProcessor.n` @type ^`io.reactivex.rxjava3.processors.MulticastProcessor$a`[] @kind object;
  #L4ed778.  v2:= 0I;
  #L4ed77a.  if v0 != v1 then goto L4ed780;
  #L4ed77e.  return v2;
  #L4ed780.  v1:= length @variable v0;
  #L4ed782.  v3:= v1 + 1;
  #L4ed786.  v3:= new `io.reactivex.rxjava3.processors.MulticastProcessor$a`[v3];
  #L4ed78a.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4ed790.  v3[v1]:= v5 @kind object;
  #L4ed794.  v1:= v4.`io.reactivex.rxjava3.processors.MulticastProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ed798.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4ed79e.  v0:= temp;
  #L4ed7a0.  if v0 == 0 then goto L4ed764;
  #L4ed7a4.  v5:= 1I;
  #L4ed7a6.  return v5;
}
procedure `void` `f`(`io.reactivex.rxjava3.processors.MulticastProcessor` v21 @kind this) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.f:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;

  #L4ed9d0.  v1:= v21 @kind object;
  #L4ed9d4.  v0:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4ed9d8.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4ed9de.  v0:= temp;
  #L4ed9e0.  if v0 == 0 then goto L4ed9e6;
  #L4ed9e4.  return @kind void;
  #L4ed9e6.  v2:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ed9ea.  v0:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.k` @type ^`int`;
  #L4ed9ee.  v3:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.f` @type ^`int`;
  #L4ed9f2.  v4:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.l` @type ^`int`;
  #L4ed9f6.  v5:= 1I;
  #L4ed9f8.  v6:= 1I;
  #L4ed9fa.  v7:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4ed9fe.  if v7 == 0 then goto L4edc10;
  #L4eda02.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4eda08.  v8:= temp @kind object;
  #L4eda0a.  v8:= (`io.reactivex.rxjava3.processors.MulticastProcessor$a`[]) v8 @kind object;
  #L4eda0e.  v9:= length @variable v8;
  #L4eda10.  if v9 == 0 then goto L4edc10;
  #L4eda14.  v9:= length @variable v8;
  #L4eda16.  v10:= -1L;
  #L4eda1a.  v14:= v10 @kind wide;
  #L4eda1c.  v13:= 0I;
  #L4eda1e.  v16:= 0L;
  #L4eda22.  if v13 >= v9 then goto L4eda66;
  #L4eda26.  v12:= v8[v13] @kind object;
  #L4eda2a.  call temp:= `get`(v12) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4eda30.  v18:= temp @kind wide;
  #L4eda32.  v20:= lcmp(v18, v16);
  #L4eda36.  if v20 < 0 then goto L4eda5c;
  #L4eda3a.  v16:= lcmp(v14, v10);
  #L4eda3e.  if v16 != 0 then goto L4eda4c;
  #L4eda42.  v14:= v12.`io.reactivex.rxjava3.processors.MulticastProcessor$a.c` @type ^`long` @kind wide;
  #L4eda46.  v14:= v18 - v14 @kind long;
  #L4eda4a.  goto L4eda5c;
  #L4eda4c.  v10:= v12.`io.reactivex.rxjava3.processors.MulticastProcessor$a.c` @type ^`long` @kind wide;
  #L4eda50.  v10:= v18 - v10 @kind long;
  #L4eda54.  call temp:= `min`(v14, v10) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L4eda5a.  v14:= temp @kind wide;
  #L4eda5c.  v13:= v13 + 1;
  #L4eda60.  v10:= -1L;
  #L4eda64.  goto L4eda1e;
  #L4eda66.  v9:= v0;
  #L4eda68.  v10:= lcmp(v14, v16);
  #L4eda6c.  if v10 <= 0 then goto L4edb7e;
  #L4eda70.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4eda76.  v0:= temp @kind object;
  #L4eda78.  v0:= (`io.reactivex.rxjava3.processors.MulticastProcessor$a`[]) v0 @kind object;
  #L4eda7c.  v11:= `@@io.reactivex.rxjava3.processors.MulticastProcessor.n` @type ^`io.reactivex.rxjava3.processors.MulticastProcessor$a`[] @kind object;
  #L4eda80.  if v0 != v11 then goto L4eda8c;
  #L4eda84.  call `clear`(v7) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4eda8a.  return @kind void;
  #L4eda8c.  if v8 == v0 then goto L4eda94;
  #L4eda90.  goto L4edba2;
  #L4eda94.  v0:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.i` @type ^`boolean` @kind boolean;
  #L4eda98.  call temp:= `poll`(v7) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4eda9e.  v11:= temp @kind object;
  #L4edaa0.  goto L4edac4;
  #L4edaa2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4edaa4.  v11:= v0 @kind object;
  #L4edaa6.  call `throwIfFatal`(v11) @signature `Lio/reactivex/rxjava3/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4edaac.  v0:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4edab0.  call temp:= `cancel`(v0) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4edab6.  v0:= 0I;
  #L4edab8.  v1.`io.reactivex.rxjava3.processors.MulticastProcessor.j` @type ^`java.lang.Throwable` := v11 @kind object;
  #L4edabc.  v1.`io.reactivex.rxjava3.processors.MulticastProcessor.i` @type ^`boolean` := v5 @kind boolean;
  #L4edac0.  v11:= v0 @kind object;
  #L4edac2.  v0:= 1I;
  #L4edac4.  if v11 != 0 then goto L4edacc;
  #L4edac8.  v12:= 1I;
  #L4edaca.  goto L4edace;
  #L4edacc.  v12:= 0I;
  #L4edace.  if v0 == 0 then goto L4edb30;
  #L4edad2.  if v12 == 0 then goto L4edb30;
  #L4edad6.  v0:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.j` @type ^`java.lang.Throwable` @kind object;
  #L4edada.  if v0 == 0 then goto L4edb06;
  #L4edade.  v3:= `@@io.reactivex.rxjava3.processors.MulticastProcessor.n` @type ^`io.reactivex.rxjava3.processors.MulticastProcessor$a`[] @kind object;
  #L4edae2.  call temp:= `getAndSet`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4edae8.  v2:= temp @kind object;
  #L4edaea.  v2:= (`io.reactivex.rxjava3.processors.MulticastProcessor$a`[]) v2 @kind object;
  #L4edaee.  v3:= length @variable v2;
  #L4edaf0.  v12:= 0I;
  #L4edaf2.  if v12 >= v3 then goto L4edb2e;
  #L4edaf6.  v4:= v2[v12] @kind object;
  #L4edafa.  call `b`(v4, v0) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor$a;.b:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4edb00.  v12:= v12 + 1;
  #L4edb04.  goto L4edaf2;
  #L4edb06.  v0:= `@@io.reactivex.rxjava3.processors.MulticastProcessor.n` @type ^`io.reactivex.rxjava3.processors.MulticastProcessor$a`[] @kind object;
  #L4edb0a.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4edb10.  v0:= temp @kind object;
  #L4edb12.  v0:= (`io.reactivex.rxjava3.processors.MulticastProcessor$a`[]) v0 @kind object;
  #L4edb16.  v2:= length @variable v0;
  #L4edb18.  v12:= 0I;
  #L4edb1a.  if v12 >= v2 then goto L4edb2e;
  #L4edb1e.  v3:= v0[v12] @kind object;
  #L4edb22.  call `a`(v3) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor$a;.a:()V` @kind virtual;
  #L4edb28.  v12:= v12 + 1;
  #L4edb2c.  goto L4edb1a;
  #L4edb2e.  return @kind void;
  #L4edb30.  if v12 == 0 then goto L4edb36;
  #L4edb34.  goto L4edb7e;
  #L4edb36.  v0:= length @variable v8;
  #L4edb38.  v10:= 0I;
  #L4edb3a.  if v10 >= v0 then goto L4edb4e;
  #L4edb3e.  v12:= v8[v10] @kind object;
  #L4edb42.  call `c`(v12, v11) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor$a;.c:(Ljava/lang/Object;)V` @kind virtual;
  #L4edb48.  v10:= v10 + 1;
  #L4edb4c.  goto L4edb3a;
  #L4edb4e.  v10:= 1L;
  #L4edb52.  v14:= v14 - v10 @kind long;
  #L4edb54.  if v4 == v5 then goto L4eda68;
  #L4edb58.  v9:= v9 + 1;
  #L4edb5c.  if v9 != v3 then goto L4eda68;
  #L4edb60.  v0:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4edb64.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4edb6a.  v0:= temp @kind object;
  #L4edb6c.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L4edb70.  v9:= (`long`) v3 @kind i2l;
  #L4edb72.  call `request`(v0, v9) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4edb78.  v9:= 0I;
  #L4edb7a.  goto L4eda68;
  #L4edb7e.  if v10 != 0 then goto L4edc0e;
  #L4edb82.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4edb88.  v0:= temp @kind object;
  #L4edb8a.  v0:= (`io.reactivex.rxjava3.processors.MulticastProcessor$a`[]) v0 @kind object;
  #L4edb8e.  v10:= `@@io.reactivex.rxjava3.processors.MulticastProcessor.n` @type ^`io.reactivex.rxjava3.processors.MulticastProcessor$a`[] @kind object;
  #L4edb92.  if v0 != v10 then goto L4edb9e;
  #L4edb96.  call `clear`(v7) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4edb9c.  return @kind void;
  #L4edb9e.  if v8 == v0 then goto L4edba8;
  #L4edba2.  v0:= v9;
  #L4edba4.  goto L4ed9fa;
  #L4edba8.  v0:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.i` @type ^`boolean` @kind boolean;
  #L4edbac.  if v0 == 0 then goto L4edc0e;
  #L4edbb0.  call temp:= `isEmpty`(v7) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4edbb6.  v0:= temp;
  #L4edbb8.  if v0 == 0 then goto L4edc0e;
  #L4edbbc.  v0:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.j` @type ^`java.lang.Throwable` @kind object;
  #L4edbc0.  if v0 == 0 then goto L4edbe8;
  #L4edbc4.  call temp:= `getAndSet`(v2, v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4edbca.  v2:= temp @kind object;
  #L4edbcc.  v2:= (`io.reactivex.rxjava3.processors.MulticastProcessor$a`[]) v2 @kind object;
  #L4edbd0.  v3:= length @variable v2;
  #L4edbd2.  v12:= 0I;
  #L4edbd4.  if v12 >= v3 then goto L4edc0c;
  #L4edbd8.  v4:= v2[v12] @kind object;
  #L4edbdc.  call `b`(v4, v0) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor$a;.b:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4edbe2.  v12:= v12 + 1;
  #L4edbe6.  goto L4edbd4;
  #L4edbe8.  call temp:= `getAndSet`(v2, v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4edbee.  v0:= temp @kind object;
  #L4edbf0.  v0:= (`io.reactivex.rxjava3.processors.MulticastProcessor$a`[]) v0 @kind object;
  #L4edbf4.  v2:= length @variable v0;
  #L4edbf6.  v12:= 0I;
  #L4edbf8.  if v12 >= v2 then goto L4edc0c;
  #L4edbfc.  v3:= v0[v12] @kind object;
  #L4edc00.  call `a`(v3) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor$a;.a:()V` @kind virtual;
  #L4edc06.  v12:= v12 + 1;
  #L4edc0a.  goto L4edbf8;
  #L4edc0c.  return @kind void;
  #L4edc0e.  v0:= v9;
  #L4edc10.  v1.`io.reactivex.rxjava3.processors.MulticastProcessor.k` @type ^`int` := v0;
  #L4edc14.  v7:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4edc18.  v6:= -v6 @kind int;
  #L4edc1a.  call temp:= `addAndGet`(v7, v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4edc20.  v6:= temp;
  #L4edc22.  if v6 != 0 then goto L4ed9fa;
  #L4edc26.  return @kind void;
  catch `java.lang.Throwable` @[L4eda98..L4edaa0] goto L4edaa2;
}
procedure `void` `g`(`io.reactivex.rxjava3.processors.MulticastProcessor` v6 @kind this, `io.reactivex.rxjava3.processors.MulticastProcessor$a` v7 @kind object) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.g:(Lio/reactivex/rxjava3/processors/MulticastProcessor$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4edd90.  v0:= v6.`io.reactivex.rxjava3.processors.MulticastProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4edd94.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4edd9a.  v0:= temp @kind object;
  #L4edd9c.  v0:= (`io.reactivex.rxjava3.processors.MulticastProcessor$a`[]) v0 @kind object;
  #L4edda0.  v1:= length @variable v0;
  #L4edda2.  if v1 != 0 then goto L4edda8;
  #L4edda6.  return @kind void;
  #L4edda8.  v2:= -1I;
  #L4eddaa.  v3:= 0I;
  #L4eddac.  v4:= 0I;
  #L4eddae.  if v4 >= v1 then goto L4eddc4;
  #L4eddb2.  v5:= v0[v4] @kind object;
  #L4eddb6.  if v5 != v7 then goto L4eddbe;
  #L4eddba.  v2:= v4;
  #L4eddbc.  goto L4eddc4;
  #L4eddbe.  v4:= v4 + 1;
  #L4eddc2.  goto L4eddae;
  #L4eddc4.  if v2 >= 0 then goto L4eddca;
  #L4eddc8.  goto L4ede3e;
  #L4eddca.  v4:= 1I;
  #L4eddcc.  if v1 != v4 then goto L4ede12;
  #L4eddd0.  v1:= v6.`io.reactivex.rxjava3.processors.MulticastProcessor.g` @type ^`boolean` @kind boolean;
  #L4eddd4.  if v1 == 0 then goto L4eddfc;
  #L4eddd8.  v1:= v6.`io.reactivex.rxjava3.processors.MulticastProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4edddc.  v2:= `@@io.reactivex.rxjava3.processors.MulticastProcessor.n` @type ^`io.reactivex.rxjava3.processors.MulticastProcessor$a`[] @kind object;
  #L4edde0.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4edde6.  v0:= temp;
  #L4edde8.  if v0 == 0 then goto L4edd90;
  #L4eddec.  v7:= v6.`io.reactivex.rxjava3.processors.MulticastProcessor.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4eddf0.  call temp:= `cancel`(v7) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4eddf6.  v6.`io.reactivex.rxjava3.processors.MulticastProcessor.i` @type ^`boolean` := v4 @kind boolean;
  #L4eddfa.  goto L4ede3e;
  #L4eddfc.  v1:= v6.`io.reactivex.rxjava3.processors.MulticastProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ede00.  v2:= `@@io.reactivex.rxjava3.processors.MulticastProcessor.m` @type ^`io.reactivex.rxjava3.processors.MulticastProcessor$a`[] @kind object;
  #L4ede04.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4ede0a.  v0:= temp;
  #L4ede0c.  if v0 == 0 then goto L4edd90;
  #L4ede10.  goto L4ede3e;
  #L4ede12.  v5:= v1 + -1;
  #L4ede16.  v5:= new `io.reactivex.rxjava3.processors.MulticastProcessor$a`[v5];
  #L4ede1a.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4ede20.  v3:= v2 + 1;
  #L4ede24.  v1:= v1 - v2 @kind int;
  #L4ede26.  v1:= v1 - v4 @kind int;
  #L4ede28.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4ede2e.  v1:= v6.`io.reactivex.rxjava3.processors.MulticastProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ede32.  call temp:= `compareAndSet`(v1, v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4ede38.  v0:= temp;
  #L4ede3a.  if v0 == 0 then goto L4edd90;
  #L4ede3e.  return @kind void;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.rxjava3.processors.MulticastProcessor` v1 @kind this) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ed930.  v0:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.i` @type ^`boolean` @kind boolean;
  #L4ed934.  if v0 == 0 then goto L4ed93e;
  #L4ed938.  v0:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.j` @type ^`java.lang.Throwable` @kind object;
  #L4ed93c.  goto L4ed940;
  #L4ed93e.  v0:= 0I;
  #L4ed940.  return v0 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.rxjava3.processors.MulticastProcessor` v1 @kind this) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ed7b8.  v0:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.i` @type ^`boolean` @kind boolean;
  #L4ed7bc.  if v0 == 0 then goto L4ed7cc;
  #L4ed7c0.  v0:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.j` @type ^`java.lang.Throwable` @kind object;
  #L4ed7c4.  if v0 != 0 then goto L4ed7cc;
  #L4ed7c8.  v0:= 1I;
  #L4ed7ca.  goto L4ed7ce;
  #L4ed7cc.  v0:= 0I;
  #L4ed7ce.  return v0;
}
procedure `boolean` `hasSubscribers`(`io.reactivex.rxjava3.processors.MulticastProcessor` v1 @kind this) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.hasSubscribers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ed7e0.  v0:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ed7e4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ed7ea.  v0:= temp @kind object;
  #L4ed7ec.  v0:= (`io.reactivex.rxjava3.processors.MulticastProcessor$a`[]) v0 @kind object;
  #L4ed7f0.  v0:= length @variable v0;
  #L4ed7f2.  if v0 == 0 then goto L4ed7fa;
  #L4ed7f6.  v0:= 1I;
  #L4ed7f8.  goto L4ed7fc;
  #L4ed7fa.  v0:= 0I;
  #L4ed7fc.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.rxjava3.processors.MulticastProcessor` v1 @kind this) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ed810.  v0:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.i` @type ^`boolean` @kind boolean;
  #L4ed814.  if v0 == 0 then goto L4ed824;
  #L4ed818.  v0:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.j` @type ^`java.lang.Throwable` @kind object;
  #L4ed81c.  if v0 == 0 then goto L4ed824;
  #L4ed820.  v0:= 1I;
  #L4ed822.  goto L4ed826;
  #L4ed824.  v0:= 0I;
  #L4ed826.  return v0;
}
procedure `boolean` `offer`(`io.reactivex.rxjava3.processors.MulticastProcessor` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ed838.  v0:= "offer called with a null value." @kind object;
  #L4ed83c.  call temp:= `nullCheck`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4ed842.  v0:= v2.`io.reactivex.rxjava3.processors.MulticastProcessor.i` @type ^`boolean` @kind boolean;
  #L4ed846.  v1:= 0I;
  #L4ed848.  if v0 == 0 then goto L4ed84e;
  #L4ed84c.  return v1;
  #L4ed84e.  v0:= v2.`io.reactivex.rxjava3.processors.MulticastProcessor.l` @type ^`int`;
  #L4ed852.  if v0 != 0 then goto L4ed872;
  #L4ed856.  v0:= v2.`io.reactivex.rxjava3.processors.MulticastProcessor.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4ed85a.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4ed860.  v3:= temp;
  #L4ed862.  if v3 == 0 then goto L4ed870;
  #L4ed866.  call `f`(v2) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.f:()V` @kind virtual;
  #L4ed86c.  v3:= 1I;
  #L4ed86e.  return v3;
  #L4ed870.  return v1;
  #L4ed872.  v3:= new `java.lang.IllegalStateException`;
  #L4ed876.  v0:= "offer() should not be called in fusion mode!" @kind object;
  #L4ed87a.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ed880.  throw v3;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.processors.MulticastProcessor` v1 @kind this) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4edc44.  v0:= 1I;
  #L4edc46.  v1.`io.reactivex.rxjava3.processors.MulticastProcessor.i` @type ^`boolean` := v0 @kind boolean;
  #L4edc4a.  call `f`(v1) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.f:()V` @kind virtual;
  #L4edc50.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.processors.MulticastProcessor` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4edc64.  v0:= "onError called with a null Throwable." @kind object;
  #L4edc68.  call temp:= `nullCheck`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4edc6e.  v0:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.i` @type ^`boolean` @kind boolean;
  #L4edc72.  if v0 != 0 then goto L4edc88;
  #L4edc76.  v1.`io.reactivex.rxjava3.processors.MulticastProcessor.j` @type ^`java.lang.Throwable` := v2 @kind object;
  #L4edc7a.  v2:= 1I;
  #L4edc7c.  v1.`io.reactivex.rxjava3.processors.MulticastProcessor.i` @type ^`boolean` := v2 @kind boolean;
  #L4edc80.  call `f`(v1) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.f:()V` @kind virtual;
  #L4edc86.  return @kind void;
  #L4edc88.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4edc8e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.processors.MulticastProcessor` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4edca0.  v0:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.i` @type ^`boolean` @kind boolean;
  #L4edca4.  if v0 == 0 then goto L4edcaa;
  #L4edca8.  return @kind void;
  #L4edcaa.  v0:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.l` @type ^`int`;
  #L4edcae.  if v0 != 0 then goto L4edce8;
  #L4edcb2.  v0:= "onNext called with a null value." @kind object;
  #L4edcb6.  call temp:= `nullCheck`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4edcbc.  v0:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` @kind object;
  #L4edcc0.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4edcc6.  v2:= temp;
  #L4edcc8.  if v2 != 0 then goto L4edce8;
  #L4edccc.  v2:= v1.`io.reactivex.rxjava3.processors.MulticastProcessor.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4edcd0.  call temp:= `cancel`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4edcd6.  v2:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4edcda.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:()V` @kind direct;
  #L4edce0.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4edce6.  return @kind void;
  #L4edce8.  call `f`(v1) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.f:()V` @kind virtual;
  #L4edcee.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.processors.MulticastProcessor` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4edd00.  v0:= v3.`io.reactivex.rxjava3.processors.MulticastProcessor.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4edd04.  call temp:= `setOnce`(v0, v4) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4edd0a.  v0:= temp;
  #L4edd0c.  if v0 == 0 then goto L4edd7c;
  #L4edd10.  v0:= instanceof @variable v4 @type ^`io.reactivex.rxjava3.internal.fuseable.QueueSubscription` @kind boolean;
  #L4edd14.  if v0 == 0 then goto L4edd5e;
  #L4edd18.  v0:= v4 @kind object;
  #L4edd1a.  v0:= (`io.reactivex.rxjava3.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L4edd1e.  v1:= 3I;
  #L4edd20.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L4edd26.  v1:= temp;
  #L4edd28.  v2:= 1I;
  #L4edd2a.  if v1 != v2 then goto L4edd42;
  #L4edd2e.  v3.`io.reactivex.rxjava3.processors.MulticastProcessor.l` @type ^`int` := v1;
  #L4edd32.  v3.`io.reactivex.rxjava3.processors.MulticastProcessor.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4edd36.  v3.`io.reactivex.rxjava3.processors.MulticastProcessor.i` @type ^`boolean` := v2 @kind boolean;
  #L4edd3a.  call `f`(v3) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.f:()V` @kind virtual;
  #L4edd40.  return @kind void;
  #L4edd42.  v2:= 2I;
  #L4edd44.  if v1 != v2 then goto L4edd5e;
  #L4edd48.  v3.`io.reactivex.rxjava3.processors.MulticastProcessor.l` @type ^`int` := v1;
  #L4edd4c.  v3.`io.reactivex.rxjava3.processors.MulticastProcessor.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4edd50.  v0:= v3.`io.reactivex.rxjava3.processors.MulticastProcessor.e` @type ^`int`;
  #L4edd54.  v0:= (`long`) v0 @kind i2l;
  #L4edd56.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4edd5c.  return @kind void;
  #L4edd5e.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L4edd62.  v1:= v3.`io.reactivex.rxjava3.processors.MulticastProcessor.e` @type ^`int`;
  #L4edd66.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L4edd6c.  v3.`io.reactivex.rxjava3.processors.MulticastProcessor.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4edd70.  v0:= v3.`io.reactivex.rxjava3.processors.MulticastProcessor.e` @type ^`int`;
  #L4edd74.  v0:= (`long`) v0 @kind i2l;
  #L4edd76.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4edd7c.  return @kind void;
}
procedure `void` `start`(`io.reactivex.rxjava3.processors.MulticastProcessor` v2 @kind this) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.start:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ede50.  v0:= v2.`io.reactivex.rxjava3.processors.MulticastProcessor.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ede54.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.EmptySubscription.INSTANCE` @type ^`io.reactivex.rxjava3.internal.subscriptions.EmptySubscription` @kind object;
  #L4ede58.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4ede5e.  v0:= temp;
  #L4ede60.  if v0 == 0 then goto L4ede76;
  #L4ede64.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscArrayQueue`;
  #L4ede68.  v1:= v2.`io.reactivex.rxjava3.processors.MulticastProcessor.e` @type ^`int`;
  #L4ede6c.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L4ede72.  v2.`io.reactivex.rxjava3.processors.MulticastProcessor.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4ede76.  return @kind void;
}
procedure `void` `startUnbounded`(`io.reactivex.rxjava3.processors.MulticastProcessor` v2 @kind this) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.startUnbounded:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4ede88.  v0:= v2.`io.reactivex.rxjava3.processors.MulticastProcessor.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ede8c.  v1:= `@@io.reactivex.rxjava3.internal.subscriptions.EmptySubscription.INSTANCE` @type ^`io.reactivex.rxjava3.internal.subscriptions.EmptySubscription` @kind object;
  #L4ede90.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4ede96.  v0:= temp;
  #L4ede98.  if v0 == 0 then goto L4edeae;
  #L4ede9c.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4edea0.  v1:= v2.`io.reactivex.rxjava3.processors.MulticastProcessor.e` @type ^`int`;
  #L4edea4.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4edeaa.  v2.`io.reactivex.rxjava3.processors.MulticastProcessor.h` @type ^`io.reactivex.rxjava3.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4edeae.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.processors.MulticastProcessor` v5 @kind this, `org.reactivestreams.Subscriber` v6 @kind object) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4edec0.  v0:= new `io.reactivex.rxjava3.processors.MulticastProcessor$a`;
  #L4edec4.  call `<init>`(v0, v6, v5) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/processors/MulticastProcessor;)V` @kind direct;
  #L4edeca.  call `onSubscribe`(v6, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4eded0.  call temp:= `e`(v5, v0) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.e:(Lio/reactivex/rxjava3/processors/MulticastProcessor$a;)Z` @kind virtual;
  #L4eded6.  v1:= temp;
  #L4eded8.  if v1 == 0 then goto L4edf00;
  #L4ededc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4edee2.  v1:= temp @kind wide;
  #L4edee4.  v3:= -9223372036854775808L;
  #L4edee8.  v6:= lcmp(v1, v3);
  #L4edeec.  if v6 != 0 then goto L4edef8;
  #L4edef0.  call `g`(v5, v0) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.g:(Lio/reactivex/rxjava3/processors/MulticastProcessor$a;)V` @kind virtual;
  #L4edef6.  goto L4edf1e;
  #L4edef8.  call `f`(v5) @signature `Lio/reactivex/rxjava3/processors/MulticastProcessor;.f:()V` @kind virtual;
  #L4edefe.  goto L4edf1e;
  #L4edf00.  v0:= v5.`io.reactivex.rxjava3.processors.MulticastProcessor.i` @type ^`boolean` @kind boolean;
  #L4edf04.  if v0 == 0 then goto L4edf18;
  #L4edf08.  v0:= v5.`io.reactivex.rxjava3.processors.MulticastProcessor.j` @type ^`java.lang.Throwable` @kind object;
  #L4edf0c.  if v0 == 0 then goto L4edf18;
  #L4edf10.  call `onError`(v6, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4edf16.  return @kind void;
  #L4edf18.  call `onComplete`(v6) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4edf1e.  return @kind void;
}
