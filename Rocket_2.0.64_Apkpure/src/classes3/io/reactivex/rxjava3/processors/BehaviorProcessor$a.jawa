record `io.reactivex.rxjava3.processors.BehaviorProcessor$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList$NonThrowingPredicate` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.rxjava3.processors.BehaviorProcessor$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.processors.BehaviorProcessor` `io.reactivex.rxjava3.processors.BehaviorProcessor$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.processors.BehaviorProcessor$a.c` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.processors.BehaviorProcessor$a.d` @AccessFlag ;
  `io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList` `io.reactivex.rxjava3.processors.BehaviorProcessor$a.e` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.processors.BehaviorProcessor$a.f` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.processors.BehaviorProcessor$a.g` @AccessFlag VOLATILE;
  `long` `io.reactivex.rxjava3.processors.BehaviorProcessor$a.h` @AccessFlag ;
}
global `long` `@@io.reactivex.rxjava3.processors.BehaviorProcessor$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.processors.BehaviorProcessor$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.rxjava3.processors.BehaviorProcessor` v2 @kind object) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/rxjava3/processors/BehaviorProcessor;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4ece14.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4ece1a.  v0.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4ece1e.  v0.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.b` @type ^`io.reactivex.rxjava3.processors.BehaviorProcessor` := v2 @kind object;
  #L4ece22.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.processors.BehaviorProcessor$a` v4 @kind this) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4ece60.  v0:= v4.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.g` @type ^`boolean` @kind boolean;
  #L4ece64.  if v0 == 0 then goto L4ece6a;
  #L4ece68.  return @kind void;
  #L4ece6a.  @monitorenter v4
  #L4ece6c.  v0:= v4.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.g` @type ^`boolean` @kind boolean;
  #L4ece70.  if v0 == 0 then goto L4ece78;
  #L4ece74.  @monitorexit v4
  #L4ece76.  return @kind void;
  #L4ece78.  v0:= v4.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.c` @type ^`boolean` @kind boolean;
  #L4ece7c.  if v0 == 0 then goto L4ece84;
  #L4ece80.  @monitorexit v4
  #L4ece82.  return @kind void;
  #L4ece84.  v0:= v4.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.b` @type ^`io.reactivex.rxjava3.processors.BehaviorProcessor` @kind object;
  #L4ece88.  v1:= v0.`io.reactivex.rxjava3.processors.BehaviorProcessor.d` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L4ece8c.  call `lock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L4ece92.  v2:= v0.`io.reactivex.rxjava3.processors.BehaviorProcessor.h` @type ^`long` @kind wide;
  #L4ece96.  v4.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.h` @type ^`long` := v2 @kind wide;
  #L4ece9a.  v0:= v0.`io.reactivex.rxjava3.processors.BehaviorProcessor.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4ece9e.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4ecea4.  v0:= temp @kind object;
  #L4ecea6.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L4eceac.  v1:= 1I;
  #L4eceae.  if v0 == 0 then goto L4eceb6;
  #L4eceb2.  v2:= 1I;
  #L4eceb4.  goto L4eceb8;
  #L4eceb6.  v2:= 0I;
  #L4eceb8.  v4.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.d` @type ^`boolean` := v2 @kind boolean;
  #L4ecebc.  v4.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.c` @type ^`boolean` := v1 @kind boolean;
  #L4ecec0.  @monitorexit v4
  #L4ecec2.  if v0 == 0 then goto L4eceda;
  #L4ecec6.  call temp:= `test`(v4, v0) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;.test:(Ljava/lang/Object;)Z` @kind virtual;
  #L4ececc.  v0:= temp;
  #L4ecece.  if v0 == 0 then goto L4eced4;
  #L4eced2.  return @kind void;
  #L4eced4.  call `b`(v4) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;.b:()V` @kind virtual;
  #L4eceda.  return @kind void;
  #L4ecedc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ecede.  @monitorexit v4
  #L4ecee0.  throw v0;
  catch `java.lang.Throwable` @[L4ece6c..L4ecec2] goto L4ecedc;
  catch `java.lang.Throwable` @[L4ecede..L4ecee0] goto L4ecedc;
}
procedure `void` `b`(`io.reactivex.rxjava3.processors.BehaviorProcessor$a` v2 @kind this) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4ecf08.  v0:= v2.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.g` @type ^`boolean` @kind boolean;
  #L4ecf0c.  if v0 == 0 then goto L4ecf12;
  #L4ecf10.  return @kind void;
  #L4ecf12.  @monitorenter v2
  #L4ecf14.  v0:= v2.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.e` @type ^`io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L4ecf18.  if v0 != 0 then goto L4ecf26;
  #L4ecf1c.  v0:= 0I;
  #L4ecf1e.  v2.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4ecf22.  @monitorexit v2
  #L4ecf24.  return @kind void;
  #L4ecf26.  v1:= 0I;
  #L4ecf28.  v2.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.e` @type ^`io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList` := v1 @kind object;
  #L4ecf2c.  @monitorexit v2
  #L4ecf2e.  call `forEachWhile`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/util/AppendOnlyLinkedArrayList;.forEachWhile:(Lio/reactivex/rxjava3/internal/util/AppendOnlyLinkedArrayList$NonThrowingPredicate;)V` @kind virtual;
  #L4ecf34.  goto L4ecf08;
  #L4ecf36.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ecf38.  @monitorexit v2
  #L4ecf3a.  throw v0;
  catch `java.lang.Throwable` @[L4ecf14..L4ecf2e] goto L4ecf36;
  catch `java.lang.Throwable` @[L4ecf38..L4ecf3a] goto L4ecf36;
}
procedure `void` `c`(`io.reactivex.rxjava3.processors.BehaviorProcessor$a` v3 @kind this, `java.lang.Object` v4 @kind object, `long` v5 ) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;.c:(Ljava/lang/Object;J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4ecf60.  v0:= v3.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.g` @type ^`boolean` @kind boolean;
  #L4ecf64.  if v0 == 0 then goto L4ecf6a;
  #L4ecf68.  return @kind void;
  #L4ecf6a.  v0:= v3.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.f` @type ^`boolean` @kind boolean;
  #L4ecf6e.  if v0 != 0 then goto L4ecfce;
  #L4ecf72.  @monitorenter v3
  #L4ecf74.  v0:= v3.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.g` @type ^`boolean` @kind boolean;
  #L4ecf78.  if v0 == 0 then goto L4ecf80;
  #L4ecf7c.  @monitorexit v3
  #L4ecf7e.  return @kind void;
  #L4ecf80.  v0:= v3.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.h` @type ^`long` @kind wide;
  #L4ecf84.  v2:= lcmp(v0, v5);
  #L4ecf88.  if v2 != 0 then goto L4ecf90;
  #L4ecf8c.  @monitorexit v3
  #L4ecf8e.  return @kind void;
  #L4ecf90.  v5:= v3.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.d` @type ^`boolean` @kind boolean;
  #L4ecf94.  if v5 == 0 then goto L4ecfba;
  #L4ecf98.  v5:= v3.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.e` @type ^`io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L4ecf9c.  if v5 != 0 then goto L4ecfb0;
  #L4ecfa0.  v5:= new `io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList`;
  #L4ecfa4.  v6:= 4I;
  #L4ecfa6.  call `<init>`(v5, v6) @signature `Lio/reactivex/rxjava3/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L4ecfac.  v3.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.e` @type ^`io.reactivex.rxjava3.internal.util.AppendOnlyLinkedArrayList` := v5 @kind object;
  #L4ecfb0.  call `add`(v5, v4) @signature `Lio/reactivex/rxjava3/internal/util/AppendOnlyLinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L4ecfb6.  @monitorexit v3
  #L4ecfb8.  return @kind void;
  #L4ecfba.  v5:= 1I;
  #L4ecfbc.  v3.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.c` @type ^`boolean` := v5 @kind boolean;
  #L4ecfc0.  @monitorexit v3
  #L4ecfc2.  v3.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.f` @type ^`boolean` := v5 @kind boolean;
  #L4ecfc6.  goto L4ecfce;
  #L4ecfc8.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ecfca.  @monitorexit v3
  #L4ecfcc.  throw v4;
  #L4ecfce.  call temp:= `test`(v3, v4) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;.test:(Ljava/lang/Object;)Z` @kind virtual;
  #L4ecfd4.  return @kind void;
  catch `java.lang.Throwable` @[L4ecf74..L4ecfc2] goto L4ecfc8;
  catch `java.lang.Throwable` @[L4ecfca..L4ecfcc] goto L4ecfc8;
}
procedure `void` `cancel`(`io.reactivex.rxjava3.processors.BehaviorProcessor$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ece34.  v0:= v1.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.g` @type ^`boolean` @kind boolean;
  #L4ece38.  if v0 != 0 then goto L4ece4c;
  #L4ece3c.  v0:= 1I;
  #L4ece3e.  v1.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.g` @type ^`boolean` := v0 @kind boolean;
  #L4ece42.  v0:= v1.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.b` @type ^`io.reactivex.rxjava3.processors.BehaviorProcessor` @kind object;
  #L4ece46.  call `f`(v0, v1) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor;.f:(Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;)V` @kind virtual;
  #L4ece4c.  return @kind void;
}
procedure `boolean` `d`(`io.reactivex.rxjava3.processors.BehaviorProcessor$a` v5 @kind this) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;.d:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4ecd30.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4ecd36.  v0:= temp @kind wide;
  #L4ecd38.  v2:= 0L;
  #L4ecd3c.  v4:= lcmp(v0, v2);
  #L4ecd40.  if v4 != 0 then goto L4ecd48;
  #L4ecd44.  v0:= 1I;
  #L4ecd46.  goto L4ecd4a;
  #L4ecd48.  v0:= 0I;
  #L4ecd4a.  return v0;
}
procedure `void` `request`(`io.reactivex.rxjava3.processors.BehaviorProcessor$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ecffc.  call temp:= `validate`(v2) @signature `Lio/reactivex/rxjava3/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4ed002.  v0:= temp;
  #L4ed004.  if v0 == 0 then goto L4ed00e;
  #L4ed008.  call temp:= `add`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4ed00e.  return @kind void;
}
procedure `boolean` `test`(`io.reactivex.rxjava3.processors.BehaviorProcessor$a` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;.test:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4ecd5c.  v0:= v6.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.g` @type ^`boolean` @kind boolean;
  #L4ecd60.  v1:= 1I;
  #L4ecd62.  if v0 == 0 then goto L4ecd68;
  #L4ecd66.  return v1;
  #L4ecd68.  call temp:= `isComplete`(v7) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4ecd6e.  v0:= temp;
  #L4ecd70.  if v0 == 0 then goto L4ecd80;
  #L4ecd74.  v7:= v6.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ecd78.  call `onComplete`(v7) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4ecd7e.  return v1;
  #L4ecd80.  call temp:= `isError`(v7) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4ecd86.  v0:= temp;
  #L4ecd88.  if v0 == 0 then goto L4ecda0;
  #L4ecd8c.  v0:= v6.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ecd90.  call temp:= `getError`(v7) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L4ecd96.  v7:= temp @kind object;
  #L4ecd98.  call `onError`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ecd9e.  return v1;
  #L4ecda0.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4ecda6.  v2:= temp @kind wide;
  #L4ecda8.  v4:= 0L;
  #L4ecdac.  v0:= lcmp(v2, v4);
  #L4ecdb0.  if v0 == 0 then goto L4ecde2;
  #L4ecdb4.  v0:= v6.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ecdb8.  call temp:= `getValue`(v7) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4ecdbe.  v7:= temp @kind object;
  #L4ecdc0.  call `onNext`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4ecdc6.  v0:= 9223372036854775807L;
  #L4ecdd0.  v7:= lcmp(v2, v0);
  #L4ecdd4.  if v7 == 0 then goto L4ecdde;
  #L4ecdd8.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L4ecdde.  v7:= 0I;
  #L4ecde0.  return v7;
  #L4ecde2.  call `cancel`(v6) @signature `Lio/reactivex/rxjava3/processors/BehaviorProcessor$a;.cancel:()V` @kind virtual;
  #L4ecde8.  v7:= v6.`io.reactivex.rxjava3.processors.BehaviorProcessor$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4ecdec.  v0:= new `io.reactivex.rxjava3.exceptions.MissingBackpressureException`;
  #L4ecdf0.  v2:= "Could not deliver value due to lack of requests" @kind object;
  #L4ecdf4.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ecdfa.  call `onError`(v7, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4ece00.  return v1;
}
