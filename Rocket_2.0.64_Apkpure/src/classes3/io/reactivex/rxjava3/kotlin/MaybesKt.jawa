record `io.reactivex.rxjava3.kotlin.MaybesKt` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `io.reactivex.rxjava3.core.Maybe` `zipWith`(`io.reactivex.rxjava3.core.Maybe` v1 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v2 @kind object) @signature `Lio/reactivex/rxjava3/kotlin/MaybesKt;.zipWith:(Lio/reactivex/rxjava3/core/Maybe;Lio/reactivex/rxjava3/core/MaybeSource;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L4e4c3c.  v0:= "$this$zipWith" @kind object;
  #L4e4c40.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L4e4c46.  v0:= "other" @kind object;
  #L4e4c4a.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L4e4c50.  v0:= `@@io.reactivex.rxjava3.kotlin.MaybesKt$a.a` @type ^`io.reactivex.rxjava3.kotlin.MaybesKt$a` @kind object;
  #L4e4c54.  call temp:= `zipWith`(v1, v2, v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.zipWith:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/functions/BiFunction;)Lio/reactivex/rxjava3/core/Maybe;` @kind virtual;
  #L4e4c5a.  v1:= temp @kind object;
  #L4e4c5c.  v2:= "zipWith(other, BiFunction { t, u -> Pair(t, u) })" @kind object;
  #L4e4c60.  call `checkNotNullExpressionValue`(v1, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L4e4c66.  return v1 @kind object;
}
procedure `io.reactivex.rxjava3.core.Maybe` `zipWith`(`io.reactivex.rxjava3.core.Maybe` v1 @kind object, `io.reactivex.rxjava3.core.MaybeSource` v2 @kind object, `kotlin.jvm.functions.Function2` v3 @kind object) @signature `Lio/reactivex/rxjava3/kotlin/MaybesKt;.zipWith:(Lio/reactivex/rxjava3/core/Maybe;Lio/reactivex/rxjava3/core/MaybeSource;Lkotlin/jvm/functions/Function2;)Lio/reactivex/rxjava3/core/Maybe;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L4e4c78.  v0:= "$this$zipWith" @kind object;
  #L4e4c7c.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L4e4c82.  v0:= "other" @kind object;
  #L4e4c86.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L4e4c8c.  v0:= "zipper" @kind object;
  #L4e4c90.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L4e4c96.  v0:= new `io.reactivex.rxjava3.kotlin.MaybesKt$zipWith$1`;
  #L4e4c9a.  call `<init>`(v0, v3) @signature `Lio/reactivex/rxjava3/kotlin/MaybesKt$zipWith$1;.<init>:(Lkotlin/jvm/functions/Function2;)V` @kind direct;
  #L4e4ca0.  call temp:= `zipWith`(v1, v2, v0) @signature `Lio/reactivex/rxjava3/core/Maybe;.zipWith:(Lio/reactivex/rxjava3/core/MaybeSource;Lio/reactivex/rxjava3/functions/BiFunction;)Lio/reactivex/rxjava3/core/Maybe;` @kind virtual;
  #L4e4ca6.  v1:= temp @kind object;
  #L4e4ca8.  v2:= "zipWith(other, BiFunctioâ€¦-> zipper.invoke(t, u) })" @kind object;
  #L4e4cac.  call `checkNotNullExpressionValue`(v1, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L4e4cb2.  return v1 @kind object;
}
