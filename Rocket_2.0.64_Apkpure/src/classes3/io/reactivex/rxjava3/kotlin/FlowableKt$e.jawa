record `io.reactivex.rxjava3.kotlin.FlowableKt$e` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.functions.Function` @kind interface {
}
global `io.reactivex.rxjava3.kotlin.FlowableKt$e` `@@io.reactivex.rxjava3.kotlin.FlowableKt$e.a` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/kotlin/FlowableKt$e;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4e220c.  v0:= new `io.reactivex.rxjava3.kotlin.FlowableKt$e`;
  #L4e2210.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/kotlin/FlowableKt$e;.<init>:()V` @kind direct;
  #L4e2216.  `@@io.reactivex.rxjava3.kotlin.FlowableKt$e.a` @type ^`io.reactivex.rxjava3.kotlin.FlowableKt$e` := v0 @kind object;
  #L4e221a.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.kotlin.FlowableKt$e` v0 @kind this) @signature `Lio/reactivex/rxjava3/kotlin/FlowableKt$e;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4e222c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4e2232.  return @kind void;
}
procedure `org.reactivestreams.Publisher` `a`(`io.reactivex.rxjava3.kotlin.FlowableKt$e` v0 @kind this, `io.reactivex.rxjava3.core.Flowable` v1 @kind object) @signature `Lio/reactivex/rxjava3/kotlin/FlowableKt$e;.a:(Lio/reactivex/rxjava3/core/Flowable;)Lorg/reactivestreams/Publisher;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L4e21f8.  return v1 @kind object;
}
procedure `java.lang.Object` `apply`(`io.reactivex.rxjava3.kotlin.FlowableKt$e` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/kotlin/FlowableKt$e;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4e21d8.  v1:= (`io.reactivex.rxjava3.core.Flowable`) v1 @kind object;
  #L4e21dc.  call temp:= `a`(v0, v1) @signature `Lio/reactivex/rxjava3/kotlin/FlowableKt$e;.a:(Lio/reactivex/rxjava3/core/Flowable;)Lorg/reactivestreams/Publisher;` @kind virtual;
  #L4e21e2.  v1:= temp @kind object;
  #L4e21e4.  return v1 @kind object;
}
