record `io.reactivex.rxjava3.subjects.ReplaySubject` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.subjects.Subject` @kind class {
  `io.reactivex.rxjava3.subjects.ReplaySubject$b` `io.reactivex.rxjava3.subjects.ReplaySubject.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.subjects.ReplaySubject.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.subjects.ReplaySubject.c` @AccessFlag ;
}
global `io.reactivex.rxjava3.subjects.ReplaySubject$c`[] `@@io.reactivex.rxjava3.subjects.ReplaySubject.d` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.subjects.ReplaySubject$c`[] `@@io.reactivex.rxjava3.subjects.ReplaySubject.e` @AccessFlag STATIC_FINAL;
global `java.lang.Object`[] `@@io.reactivex.rxjava3.subjects.ReplaySubject.f` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4f3270.  v0:= 0I;
  #L4f3272.  v1:= new `io.reactivex.rxjava3.subjects.ReplaySubject$c`[v0];
  #L4f3276.  `@@io.reactivex.rxjava3.subjects.ReplaySubject.d` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$c`[] := v1 @kind object;
  #L4f327a.  v1:= new `io.reactivex.rxjava3.subjects.ReplaySubject$c`[v0];
  #L4f327e.  `@@io.reactivex.rxjava3.subjects.ReplaySubject.e` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$c`[] := v1 @kind object;
  #L4f3282.  v0:= new `java.lang.Object`[v0];
  #L4f3286.  `@@io.reactivex.rxjava3.subjects.ReplaySubject.f` @type ^`java.lang.Object`[] := v0 @kind object;
  #L4f328a.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.subjects.ReplaySubject` v1 @kind this, `io.reactivex.rxjava3.subjects.ReplaySubject$b` v2 @kind object) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.<init>:(Lio/reactivex/rxjava3/subjects/ReplaySubject$b;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4f329c.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/subjects/Subject;.<init>:()V` @kind direct;
  #L4f32a2.  v1.`io.reactivex.rxjava3.subjects.ReplaySubject.a` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$b` := v2 @kind object;
  #L4f32a6.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4f32aa.  v0:= `@@io.reactivex.rxjava3.subjects.ReplaySubject.d` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$c`[] @kind object;
  #L4f32ae.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4f32b4.  v1.`io.reactivex.rxjava3.subjects.ReplaySubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4f32b8.  return @kind void;
}
procedure `io.reactivex.rxjava3.subjects.ReplaySubject` `create`() @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.create:()Lio/reactivex/rxjava3/subjects/ReplaySubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4f3060.  v0:= new `io.reactivex.rxjava3.subjects.ReplaySubject`;
  #L4f3064.  v1:= new `io.reactivex.rxjava3.subjects.ReplaySubject$g`;
  #L4f3068.  v2:= 16I;
  #L4f306c.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$g;.<init>:(I)V` @kind direct;
  #L4f3072.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.<init>:(Lio/reactivex/rxjava3/subjects/ReplaySubject$b;)V` @kind direct;
  #L4f3078.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.subjects.ReplaySubject` `create`(`int` v2 ) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.create:(I)Lio/reactivex/rxjava3/subjects/ReplaySubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4f308c.  v0:= "capacityHint" @kind object;
  #L4f3090.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4f3096.  v0:= new `io.reactivex.rxjava3.subjects.ReplaySubject`;
  #L4f309a.  v1:= new `io.reactivex.rxjava3.subjects.ReplaySubject$g`;
  #L4f309e.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$g;.<init>:(I)V` @kind direct;
  #L4f30a4.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.<init>:(Lio/reactivex/rxjava3/subjects/ReplaySubject$b;)V` @kind direct;
  #L4f30aa.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.subjects.ReplaySubject` `createWithSize`(`int` v2 ) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.createWithSize:(I)Lio/reactivex/rxjava3/subjects/ReplaySubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4f30bc.  v0:= "maxSize" @kind object;
  #L4f30c0.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4f30c6.  v0:= new `io.reactivex.rxjava3.subjects.ReplaySubject`;
  #L4f30ca.  v1:= new `io.reactivex.rxjava3.subjects.ReplaySubject$e`;
  #L4f30ce.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$e;.<init>:(I)V` @kind direct;
  #L4f30d4.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.<init>:(Lio/reactivex/rxjava3/subjects/ReplaySubject$b;)V` @kind direct;
  #L4f30da.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.subjects.ReplaySubject` `createWithTime`(`long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.rxjava3.core.Scheduler` v11 @kind object) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.createWithTime:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)Lio/reactivex/rxjava3/subjects/ReplaySubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4f30ec.  v0:= "maxAge" @kind object;
  #L4f30f0.  call temp:= `verifyPositive`(v8, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(JLjava/lang/String;)J` @kind static;
  #L4f30f6.  v0:= "unit is null" @kind object;
  #L4f30fa.  call temp:= `requireNonNull`(v10, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4f3100.  v0:= "scheduler is null" @kind object;
  #L4f3104.  call temp:= `requireNonNull`(v11, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4f310a.  v0:= new `io.reactivex.rxjava3.subjects.ReplaySubject`;
  #L4f310e.  v7:= new `io.reactivex.rxjava3.subjects.ReplaySubject$d`;
  #L4f3112.  v2:= 2147483647I;
  #L4f3118.  v1:= v7 @kind object;
  #L4f311a.  v3:= v8 @kind wide;
  #L4f311c.  v5:= v10 @kind object;
  #L4f311e.  v6:= v11 @kind object;
  #L4f3120.  call `<init>`(v1, v2, v3, v5, v6) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$d;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)V` @kind direct;
  #L4f3126.  call `<init>`(v0, v7) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.<init>:(Lio/reactivex/rxjava3/subjects/ReplaySubject$b;)V` @kind direct;
  #L4f312c.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.subjects.ReplaySubject` `createWithTimeAndSize`(`long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.rxjava3.core.Scheduler` v11 @kind object, `int` v12 ) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.createWithTimeAndSize:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;I)Lio/reactivex/rxjava3/subjects/ReplaySubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4f3140.  v0:= "maxSize" @kind object;
  #L4f3144.  call temp:= `verifyPositive`(v12, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4f314a.  v0:= "maxAge" @kind object;
  #L4f314e.  call temp:= `verifyPositive`(v8, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(JLjava/lang/String;)J` @kind static;
  #L4f3154.  v0:= "unit is null" @kind object;
  #L4f3158.  call temp:= `requireNonNull`(v10, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4f315e.  v0:= "scheduler is null" @kind object;
  #L4f3162.  call temp:= `requireNonNull`(v11, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4f3168.  v0:= new `io.reactivex.rxjava3.subjects.ReplaySubject`;
  #L4f316c.  v7:= new `io.reactivex.rxjava3.subjects.ReplaySubject$d`;
  #L4f3170.  v1:= v7 @kind object;
  #L4f3172.  v2:= v12;
  #L4f3174.  v3:= v8 @kind wide;
  #L4f3176.  v5:= v10 @kind object;
  #L4f3178.  v6:= v11 @kind object;
  #L4f317a.  call `<init>`(v1, v2, v3, v5, v6) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$d;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)V` @kind direct;
  #L4f3180.  call `<init>`(v0, v7) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.<init>:(Lio/reactivex/rxjava3/subjects/ReplaySubject$b;)V` @kind direct;
  #L4f3186.  return v0 @kind object;
}
procedure `void` `cleanupBuffer`(`io.reactivex.rxjava3.subjects.ReplaySubject` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.cleanupBuffer:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f32cc.  v0:= v1.`io.reactivex.rxjava3.subjects.ReplaySubject.a` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$b` @kind object;
  #L4f32d0.  call `e`(v0) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$b;.e:()V` @kind interface;
  #L4f32d6.  return @kind void;
}
procedure `boolean` `d`(`io.reactivex.rxjava3.subjects.ReplaySubject` v4 @kind this, `io.reactivex.rxjava3.subjects.ReplaySubject$c` v5 @kind object) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.d:(Lio/reactivex/rxjava3/subjects/ReplaySubject$c;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f2f64.  v0:= v4.`io.reactivex.rxjava3.subjects.ReplaySubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f2f68.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f2f6e.  v0:= temp @kind object;
  #L4f2f70.  v0:= (`io.reactivex.rxjava3.subjects.ReplaySubject$c`[]) v0 @kind object;
  #L4f2f74.  v1:= `@@io.reactivex.rxjava3.subjects.ReplaySubject.e` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$c`[] @kind object;
  #L4f2f78.  v2:= 0I;
  #L4f2f7a.  if v0 != v1 then goto L4f2f80;
  #L4f2f7e.  return v2;
  #L4f2f80.  v1:= length @variable v0;
  #L4f2f82.  v3:= v1 + 1;
  #L4f2f86.  v3:= new `io.reactivex.rxjava3.subjects.ReplaySubject$c`[v3];
  #L4f2f8a.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f2f90.  v3[v1]:= v5 @kind object;
  #L4f2f94.  v1:= v4.`io.reactivex.rxjava3.subjects.ReplaySubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f2f98.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f2f9e.  v0:= temp;
  #L4f2fa0.  if v0 == 0 then goto L4f2f64;
  #L4f2fa4.  v5:= 1I;
  #L4f2fa6.  return v5;
}
procedure `void` `e`(`io.reactivex.rxjava3.subjects.ReplaySubject` v6 @kind this, `io.reactivex.rxjava3.subjects.ReplaySubject$c` v7 @kind object) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.e:(Lio/reactivex/rxjava3/subjects/ReplaySubject$c;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4f3418.  v0:= v6.`io.reactivex.rxjava3.subjects.ReplaySubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f341c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f3422.  v0:= temp @kind object;
  #L4f3424.  v0:= (`io.reactivex.rxjava3.subjects.ReplaySubject$c`[]) v0 @kind object;
  #L4f3428.  v1:= `@@io.reactivex.rxjava3.subjects.ReplaySubject.e` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$c`[] @kind object;
  #L4f342c.  if v0 == v1 then goto L4f3498;
  #L4f3430.  v1:= `@@io.reactivex.rxjava3.subjects.ReplaySubject.d` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$c`[] @kind object;
  #L4f3434.  if v0 != v1 then goto L4f343a;
  #L4f3438.  goto L4f3498;
  #L4f343a.  v1:= length @variable v0;
  #L4f343c.  v2:= -1I;
  #L4f343e.  v3:= 0I;
  #L4f3440.  v4:= 0I;
  #L4f3442.  if v4 >= v1 then goto L4f3458;
  #L4f3446.  v5:= v0[v4] @kind object;
  #L4f344a.  if v5 != v7 then goto L4f3452;
  #L4f344e.  v2:= v4;
  #L4f3450.  goto L4f3458;
  #L4f3452.  v4:= v4 + 1;
  #L4f3456.  goto L4f3442;
  #L4f3458.  if v2 >= 0 then goto L4f345e;
  #L4f345c.  return @kind void;
  #L4f345e.  v4:= 1I;
  #L4f3460.  if v1 != v4 then goto L4f346a;
  #L4f3464.  v1:= `@@io.reactivex.rxjava3.subjects.ReplaySubject.d` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$c`[] @kind object;
  #L4f3468.  goto L4f3488;
  #L4f346a.  v5:= v1 + -1;
  #L4f346e.  v5:= new `io.reactivex.rxjava3.subjects.ReplaySubject$c`[v5];
  #L4f3472.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f3478.  v3:= v2 + 1;
  #L4f347c.  v1:= v1 - v2 @kind int;
  #L4f347e.  v1:= v1 - v4 @kind int;
  #L4f3480.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f3486.  v1:= v5 @kind object;
  #L4f3488.  v2:= v6.`io.reactivex.rxjava3.subjects.ReplaySubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f348c.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f3492.  v0:= temp;
  #L4f3494.  if v0 == 0 then goto L4f3418;
  #L4f3498.  return @kind void;
}
procedure `io.reactivex.rxjava3.subjects.ReplaySubject$c`[] `f`(`io.reactivex.rxjava3.subjects.ReplaySubject` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.f:(Ljava/lang/Object;)[Lio/reactivex/rxjava3/subjects/ReplaySubject$c;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4f3198.  v0:= v2.`io.reactivex.rxjava3.subjects.ReplaySubject.a` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$b` @kind object;
  #L4f319c.  v1:= 0I;
  #L4f319e.  call temp:= `compareAndSet`(v0, v1, v3) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$b;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L4f31a4.  v3:= v2.`io.reactivex.rxjava3.subjects.ReplaySubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f31a8.  v0:= `@@io.reactivex.rxjava3.subjects.ReplaySubject.e` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$c`[] @kind object;
  #L4f31ac.  call temp:= `getAndSet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4f31b2.  v3:= temp @kind object;
  #L4f31b4.  v3:= (`io.reactivex.rxjava3.subjects.ReplaySubject$c`[]) v3 @kind object;
  #L4f31b8.  return v3 @kind object;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.rxjava3.subjects.ReplaySubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f3238.  v0:= v2.`io.reactivex.rxjava3.subjects.ReplaySubject.a` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$b` @kind object;
  #L4f323c.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$b;.get:()Ljava/lang/Object;` @kind interface;
  #L4f3242.  v0:= temp @kind object;
  #L4f3244.  call temp:= `isError`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4f324a.  v1:= temp;
  #L4f324c.  if v1 == 0 then goto L4f325a;
  #L4f3250.  call temp:= `getError`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L4f3256.  v0:= temp @kind object;
  #L4f3258.  return v0 @kind object;
  #L4f325a.  v0:= 0I;
  #L4f325c.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.rxjava3.subjects.ReplaySubject` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f31cc.  v0:= v1.`io.reactivex.rxjava3.subjects.ReplaySubject.a` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$b` @kind object;
  #L4f31d0.  call temp:= `getValue`(v0) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$b;.getValue:()Ljava/lang/Object;` @kind interface;
  #L4f31d6.  v0:= temp @kind object;
  #L4f31d8.  return v0 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.rxjava3.subjects.ReplaySubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.getValues:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f31ec.  v0:= `@@io.reactivex.rxjava3.subjects.ReplaySubject.f` @type ^`java.lang.Object`[] @kind object;
  #L4f31f0.  call temp:= `getValues`(v2, v0) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L4f31f6.  v1:= temp @kind object;
  #L4f31f8.  if v1 != v0 then goto L4f3204;
  #L4f31fc.  v0:= 0I;
  #L4f31fe.  v0:= new `java.lang.Object`[v0];
  #L4f3202.  return v0 @kind object;
  #L4f3204.  return v1 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.rxjava3.subjects.ReplaySubject` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f3218.  v0:= v1.`io.reactivex.rxjava3.subjects.ReplaySubject.a` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$b` @kind object;
  #L4f321c.  call temp:= `c`(v0, v2) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$b;.c:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L4f3222.  v2:= temp @kind object;
  #L4f3224.  return v2 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.rxjava3.subjects.ReplaySubject` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f2fb8.  v0:= v1.`io.reactivex.rxjava3.subjects.ReplaySubject.a` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$b` @kind object;
  #L4f2fbc.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$b;.get:()Ljava/lang/Object;` @kind interface;
  #L4f2fc2.  v0:= temp @kind object;
  #L4f2fc4.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4f2fca.  v0:= temp;
  #L4f2fcc.  return v0;
}
procedure `boolean` `hasObservers`(`io.reactivex.rxjava3.subjects.ReplaySubject` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f2fe0.  v0:= v1.`io.reactivex.rxjava3.subjects.ReplaySubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f2fe4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f2fea.  v0:= temp @kind object;
  #L4f2fec.  v0:= (`io.reactivex.rxjava3.subjects.ReplaySubject$c`[]) v0 @kind object;
  #L4f2ff0.  v0:= length @variable v0;
  #L4f2ff2.  if v0 == 0 then goto L4f2ffa;
  #L4f2ff6.  v0:= 1I;
  #L4f2ff8.  goto L4f2ffc;
  #L4f2ffa.  v0:= 0I;
  #L4f2ffc.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.rxjava3.subjects.ReplaySubject` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f3010.  v0:= v1.`io.reactivex.rxjava3.subjects.ReplaySubject.a` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$b` @kind object;
  #L4f3014.  call temp:= `get`(v0) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$b;.get:()Ljava/lang/Object;` @kind interface;
  #L4f301a.  v0:= temp @kind object;
  #L4f301c.  call temp:= `isError`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4f3022.  v0:= temp;
  #L4f3024.  return v0;
}
procedure `boolean` `hasValue`(`io.reactivex.rxjava3.subjects.ReplaySubject` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.hasValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f3038.  v0:= v1.`io.reactivex.rxjava3.subjects.ReplaySubject.a` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$b` @kind object;
  #L4f303c.  call temp:= `size`(v0) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$b;.size:()I` @kind interface;
  #L4f3042.  v0:= temp;
  #L4f3044.  if v0 == 0 then goto L4f304c;
  #L4f3048.  v0:= 1I;
  #L4f304a.  goto L4f304e;
  #L4f304c.  v0:= 0I;
  #L4f304e.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.subjects.ReplaySubject` v5 @kind this) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4f32e8.  v0:= v5.`io.reactivex.rxjava3.subjects.ReplaySubject.c` @type ^`boolean` @kind boolean;
  #L4f32ec.  if v0 == 0 then goto L4f32f2;
  #L4f32f0.  return @kind void;
  #L4f32f2.  v0:= 1I;
  #L4f32f4.  v5.`io.reactivex.rxjava3.subjects.ReplaySubject.c` @type ^`boolean` := v0 @kind boolean;
  #L4f32f8.  call temp:= `complete`() @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L4f32fe.  v0:= temp @kind object;
  #L4f3300.  v1:= v5.`io.reactivex.rxjava3.subjects.ReplaySubject.a` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$b` @kind object;
  #L4f3304.  call `d`(v1, v0) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$b;.d:(Ljava/lang/Object;)V` @kind interface;
  #L4f330a.  call temp:= `f`(v5, v0) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.f:(Ljava/lang/Object;)[Lio/reactivex/rxjava3/subjects/ReplaySubject$c;` @kind virtual;
  #L4f3310.  v0:= temp @kind object;
  #L4f3312.  v2:= length @variable v0;
  #L4f3314.  v3:= 0I;
  #L4f3316.  if v3 >= v2 then goto L4f332a;
  #L4f331a.  v4:= v0[v3] @kind object;
  #L4f331e.  call `a`(v1, v4) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$b;.a:(Lio/reactivex/rxjava3/subjects/ReplaySubject$c;)V` @kind interface;
  #L4f3324.  v3:= v3 + 1;
  #L4f3328.  goto L4f3316;
  #L4f332a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.subjects.ReplaySubject` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f333c.  v0:= "onError called with a null Throwable." @kind object;
  #L4f3340.  call temp:= `nullCheck`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4f3346.  v0:= v4.`io.reactivex.rxjava3.subjects.ReplaySubject.c` @type ^`boolean` @kind boolean;
  #L4f334a.  if v0 == 0 then goto L4f3356;
  #L4f334e.  call `onError`(v5) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4f3354.  return @kind void;
  #L4f3356.  v0:= 1I;
  #L4f3358.  v4.`io.reactivex.rxjava3.subjects.ReplaySubject.c` @type ^`boolean` := v0 @kind boolean;
  #L4f335c.  call temp:= `error`(v5) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L4f3362.  v5:= temp @kind object;
  #L4f3364.  v0:= v4.`io.reactivex.rxjava3.subjects.ReplaySubject.a` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$b` @kind object;
  #L4f3368.  call `d`(v0, v5) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$b;.d:(Ljava/lang/Object;)V` @kind interface;
  #L4f336e.  call temp:= `f`(v4, v5) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.f:(Ljava/lang/Object;)[Lio/reactivex/rxjava3/subjects/ReplaySubject$c;` @kind virtual;
  #L4f3374.  v5:= temp @kind object;
  #L4f3376.  v1:= length @variable v5;
  #L4f3378.  v2:= 0I;
  #L4f337a.  if v2 >= v1 then goto L4f338e;
  #L4f337e.  v3:= v5[v2] @kind object;
  #L4f3382.  call `a`(v0, v3) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$b;.a:(Lio/reactivex/rxjava3/subjects/ReplaySubject$c;)V` @kind interface;
  #L4f3388.  v2:= v2 + 1;
  #L4f338c.  goto L4f337a;
  #L4f338e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.subjects.ReplaySubject` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f33a0.  v0:= "onNext called with a null value." @kind object;
  #L4f33a4.  call temp:= `nullCheck`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4f33aa.  v0:= v4.`io.reactivex.rxjava3.subjects.ReplaySubject.c` @type ^`boolean` @kind boolean;
  #L4f33ae.  if v0 == 0 then goto L4f33b4;
  #L4f33b2.  return @kind void;
  #L4f33b4.  v0:= v4.`io.reactivex.rxjava3.subjects.ReplaySubject.a` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$b` @kind object;
  #L4f33b8.  call `add`(v0, v5) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$b;.add:(Ljava/lang/Object;)V` @kind interface;
  #L4f33be.  v5:= v4.`io.reactivex.rxjava3.subjects.ReplaySubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f33c2.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f33c8.  v5:= temp @kind object;
  #L4f33ca.  v5:= (`io.reactivex.rxjava3.subjects.ReplaySubject$c`[]) v5 @kind object;
  #L4f33ce.  v1:= length @variable v5;
  #L4f33d0.  v2:= 0I;
  #L4f33d2.  if v2 >= v1 then goto L4f33e6;
  #L4f33d6.  v3:= v5[v2] @kind object;
  #L4f33da.  call `a`(v0, v3) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$b;.a:(Lio/reactivex/rxjava3/subjects/ReplaySubject$c;)V` @kind interface;
  #L4f33e0.  v2:= v2 + 1;
  #L4f33e4.  goto L4f33d2;
  #L4f33e6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.subjects.ReplaySubject` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f33f8.  v0:= v1.`io.reactivex.rxjava3.subjects.ReplaySubject.c` @type ^`boolean` @kind boolean;
  #L4f33fc.  if v0 == 0 then goto L4f3406;
  #L4f3400.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f3406.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.subjects.ReplaySubject` v1 @kind this, `io.reactivex.rxjava3.core.Observer` v2 @kind object) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.subscribeActual:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L4f34ac.  v0:= new `io.reactivex.rxjava3.subjects.ReplaySubject$c`;
  #L4f34b0.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$c;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/subjects/ReplaySubject;)V` @kind direct;
  #L4f34b6.  call `onSubscribe`(v2, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4f34bc.  call temp:= `d`(v1, v0) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.d:(Lio/reactivex/rxjava3/subjects/ReplaySubject$c;)Z` @kind virtual;
  #L4f34c2.  v2:= temp;
  #L4f34c4.  if v2 == 0 then goto L4f34d8;
  #L4f34c8.  v2:= v0.`io.reactivex.rxjava3.subjects.ReplaySubject$c.d` @type ^`boolean` @kind boolean;
  #L4f34cc.  if v2 == 0 then goto L4f34d8;
  #L4f34d0.  call `e`(v1, v0) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject;.e:(Lio/reactivex/rxjava3/subjects/ReplaySubject$c;)V` @kind virtual;
  #L4f34d6.  return @kind void;
  #L4f34d8.  v2:= v1.`io.reactivex.rxjava3.subjects.ReplaySubject.a` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$b` @kind object;
  #L4f34dc.  call `a`(v2, v0) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$b;.a:(Lio/reactivex/rxjava3/subjects/ReplaySubject$c;)V` @kind interface;
  #L4f34e2.  return @kind void;
}
