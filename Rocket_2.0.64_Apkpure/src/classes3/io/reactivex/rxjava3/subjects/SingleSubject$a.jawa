record `io.reactivex.rxjava3.subjects.SingleSubject$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.SingleObserver` `io.reactivex.rxjava3.subjects.SingleSubject$a.a` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.subjects.SingleSubject$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.subjects.SingleSubject$a` v0 @kind this, `io.reactivex.rxjava3.core.SingleObserver` v1 @kind object, `io.reactivex.rxjava3.subjects.SingleSubject` v2 @kind object) @signature `Lio/reactivex/rxjava3/subjects/SingleSubject$a;.<init>:(Lio/reactivex/rxjava3/core/SingleObserver;Lio/reactivex/rxjava3/subjects/SingleSubject;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f3890.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4f3896.  v0.`io.reactivex.rxjava3.subjects.SingleSubject$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` := v1 @kind object;
  #L4f389a.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4f38a0.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.subjects.SingleSubject$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/SingleSubject$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f38b4.  v0:= 0I;
  #L4f38b6.  call temp:= `getAndSet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4f38bc.  v0:= temp @kind object;
  #L4f38be.  v0:= (`io.reactivex.rxjava3.subjects.SingleSubject`) v0 @kind object;
  #L4f38c2.  if v0 == 0 then goto L4f38cc;
  #L4f38c6.  call `d`(v0, v1) @signature `Lio/reactivex/rxjava3/subjects/SingleSubject;.d:(Lio/reactivex/rxjava3/subjects/SingleSubject$a;)V` @kind virtual;
  #L4f38cc.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.subjects.SingleSubject$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/SingleSubject$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f386c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f3872.  v0:= temp @kind object;
  #L4f3874.  if v0 != 0 then goto L4f387c;
  #L4f3878.  v0:= 1I;
  #L4f387a.  goto L4f387e;
  #L4f387c.  v0:= 0I;
  #L4f387e.  return v0;
}
