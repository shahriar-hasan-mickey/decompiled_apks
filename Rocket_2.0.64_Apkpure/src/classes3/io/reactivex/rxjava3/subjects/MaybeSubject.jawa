record `io.reactivex.rxjava3.subjects.MaybeSubject` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Maybe` @kind class, `io.reactivex.rxjava3.core.MaybeObserver` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.subjects.MaybeSubject.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.subjects.MaybeSubject.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.subjects.MaybeSubject.c` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.rxjava3.subjects.MaybeSubject.d` @AccessFlag ;
}
global `io.reactivex.rxjava3.subjects.MaybeSubject$a`[] `@@io.reactivex.rxjava3.subjects.MaybeSubject.e` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.subjects.MaybeSubject$a`[] `@@io.reactivex.rxjava3.subjects.MaybeSubject.f` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/subjects/MaybeSubject;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4f1cc0.  v0:= 0I;
  #L4f1cc2.  v1:= new `io.reactivex.rxjava3.subjects.MaybeSubject$a`[v0];
  #L4f1cc6.  `@@io.reactivex.rxjava3.subjects.MaybeSubject.e` @type ^`io.reactivex.rxjava3.subjects.MaybeSubject$a`[] := v1 @kind object;
  #L4f1cca.  v0:= new `io.reactivex.rxjava3.subjects.MaybeSubject$a`[v0];
  #L4f1cce.  `@@io.reactivex.rxjava3.subjects.MaybeSubject.f` @type ^`io.reactivex.rxjava3.subjects.MaybeSubject$a`[] := v0 @kind object;
  #L4f1cd2.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.subjects.MaybeSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/MaybeSubject;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4f1ce4.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/core/Maybe;.<init>:()V` @kind direct;
  #L4f1cea.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4f1cee.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4f1cf4.  v2.`io.reactivex.rxjava3.subjects.MaybeSubject.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L4f1cf8.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4f1cfc.  v1:= `@@io.reactivex.rxjava3.subjects.MaybeSubject.e` @type ^`io.reactivex.rxjava3.subjects.MaybeSubject$a`[] @kind object;
  #L4f1d00.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4f1d06.  v2.`io.reactivex.rxjava3.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4f1d0a.  return @kind void;
}
procedure `io.reactivex.rxjava3.subjects.MaybeSubject` `create`() @signature `Lio/reactivex/rxjava3/subjects/MaybeSubject;.create:()Lio/reactivex/rxjava3/subjects/MaybeSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4f1c44.  v0:= new `io.reactivex.rxjava3.subjects.MaybeSubject`;
  #L4f1c48.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/subjects/MaybeSubject;.<init>:()V` @kind direct;
  #L4f1c4e.  return v0 @kind object;
}
procedure `boolean` `a`(`io.reactivex.rxjava3.subjects.MaybeSubject` v4 @kind this, `io.reactivex.rxjava3.subjects.MaybeSubject$a` v5 @kind object) @signature `Lio/reactivex/rxjava3/subjects/MaybeSubject;.a:(Lio/reactivex/rxjava3/subjects/MaybeSubject$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f1b1c.  v0:= v4.`io.reactivex.rxjava3.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f1b20.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f1b26.  v0:= temp @kind object;
  #L4f1b28.  v0:= (`io.reactivex.rxjava3.subjects.MaybeSubject$a`[]) v0 @kind object;
  #L4f1b2c.  v1:= `@@io.reactivex.rxjava3.subjects.MaybeSubject.f` @type ^`io.reactivex.rxjava3.subjects.MaybeSubject$a`[] @kind object;
  #L4f1b30.  v2:= 0I;
  #L4f1b32.  if v0 != v1 then goto L4f1b38;
  #L4f1b36.  return v2;
  #L4f1b38.  v1:= length @variable v0;
  #L4f1b3a.  v3:= v1 + 1;
  #L4f1b3e.  v3:= new `io.reactivex.rxjava3.subjects.MaybeSubject$a`[v3];
  #L4f1b42.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f1b48.  v3[v1]:= v5 @kind object;
  #L4f1b4c.  v1:= v4.`io.reactivex.rxjava3.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f1b50.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f1b56.  v0:= temp;
  #L4f1b58.  if v0 == 0 then goto L4f1b1c;
  #L4f1b5c.  v5:= 1I;
  #L4f1b5e.  return v5;
}
procedure `void` `b`(`io.reactivex.rxjava3.subjects.MaybeSubject` v6 @kind this, `io.reactivex.rxjava3.subjects.MaybeSubject$a` v7 @kind object) @signature `Lio/reactivex/rxjava3/subjects/MaybeSubject;.b:(Lio/reactivex/rxjava3/subjects/MaybeSubject$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4f1e68.  v0:= v6.`io.reactivex.rxjava3.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f1e6c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f1e72.  v0:= temp @kind object;
  #L4f1e74.  v0:= (`io.reactivex.rxjava3.subjects.MaybeSubject$a`[]) v0 @kind object;
  #L4f1e78.  v1:= length @variable v0;
  #L4f1e7a.  if v1 != 0 then goto L4f1e80;
  #L4f1e7e.  return @kind void;
  #L4f1e80.  v2:= -1I;
  #L4f1e82.  v3:= 0I;
  #L4f1e84.  v4:= 0I;
  #L4f1e86.  if v4 >= v1 then goto L4f1e9c;
  #L4f1e8a.  v5:= v0[v4] @kind object;
  #L4f1e8e.  if v5 != v7 then goto L4f1e96;
  #L4f1e92.  v2:= v4;
  #L4f1e94.  goto L4f1e9c;
  #L4f1e96.  v4:= v4 + 1;
  #L4f1e9a.  goto L4f1e86;
  #L4f1e9c.  if v2 >= 0 then goto L4f1ea2;
  #L4f1ea0.  return @kind void;
  #L4f1ea2.  v4:= 1I;
  #L4f1ea4.  if v1 != v4 then goto L4f1eae;
  #L4f1ea8.  v1:= `@@io.reactivex.rxjava3.subjects.MaybeSubject.e` @type ^`io.reactivex.rxjava3.subjects.MaybeSubject$a`[] @kind object;
  #L4f1eac.  goto L4f1ecc;
  #L4f1eae.  v5:= v1 + -1;
  #L4f1eb2.  v5:= new `io.reactivex.rxjava3.subjects.MaybeSubject$a`[v5];
  #L4f1eb6.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f1ebc.  v3:= v2 + 1;
  #L4f1ec0.  v1:= v1 - v2 @kind int;
  #L4f1ec2.  v1:= v1 - v4 @kind int;
  #L4f1ec4.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f1eca.  v1:= v5 @kind object;
  #L4f1ecc.  v2:= v6.`io.reactivex.rxjava3.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f1ed0.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f1ed6.  v0:= temp;
  #L4f1ed8.  if v0 == 0 then goto L4f1e68;
  #L4f1edc.  return @kind void;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.rxjava3.subjects.MaybeSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/MaybeSubject;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f1c90.  v0:= v2.`io.reactivex.rxjava3.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f1c94.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f1c9a.  v0:= temp @kind object;
  #L4f1c9c.  v1:= `@@io.reactivex.rxjava3.subjects.MaybeSubject.f` @type ^`io.reactivex.rxjava3.subjects.MaybeSubject$a`[] @kind object;
  #L4f1ca0.  if v0 != v1 then goto L4f1caa;
  #L4f1ca4.  v0:= v2.`io.reactivex.rxjava3.subjects.MaybeSubject.d` @type ^`java.lang.Throwable` @kind object;
  #L4f1ca8.  return v0 @kind object;
  #L4f1caa.  v0:= 0I;
  #L4f1cac.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.rxjava3.subjects.MaybeSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/MaybeSubject;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f1c60.  v0:= v2.`io.reactivex.rxjava3.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f1c64.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f1c6a.  v0:= temp @kind object;
  #L4f1c6c.  v1:= `@@io.reactivex.rxjava3.subjects.MaybeSubject.f` @type ^`io.reactivex.rxjava3.subjects.MaybeSubject$a`[] @kind object;
  #L4f1c70.  if v0 != v1 then goto L4f1c7a;
  #L4f1c74.  v0:= v2.`io.reactivex.rxjava3.subjects.MaybeSubject.c` @type ^`java.lang.Object` @kind object;
  #L4f1c78.  return v0 @kind object;
  #L4f1c7a.  v0:= 0I;
  #L4f1c7c.  return v0 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.rxjava3.subjects.MaybeSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/MaybeSubject;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f1b70.  v0:= v2.`io.reactivex.rxjava3.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f1b74.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f1b7a.  v0:= temp @kind object;
  #L4f1b7c.  v1:= `@@io.reactivex.rxjava3.subjects.MaybeSubject.f` @type ^`io.reactivex.rxjava3.subjects.MaybeSubject$a`[] @kind object;
  #L4f1b80.  if v0 != v1 then goto L4f1b98;
  #L4f1b84.  v0:= v2.`io.reactivex.rxjava3.subjects.MaybeSubject.c` @type ^`java.lang.Object` @kind object;
  #L4f1b88.  if v0 != 0 then goto L4f1b98;
  #L4f1b8c.  v0:= v2.`io.reactivex.rxjava3.subjects.MaybeSubject.d` @type ^`java.lang.Throwable` @kind object;
  #L4f1b90.  if v0 != 0 then goto L4f1b98;
  #L4f1b94.  v0:= 1I;
  #L4f1b96.  goto L4f1b9a;
  #L4f1b98.  v0:= 0I;
  #L4f1b9a.  return v0;
}
procedure `boolean` `hasObservers`(`io.reactivex.rxjava3.subjects.MaybeSubject` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/MaybeSubject;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f1bac.  v0:= v1.`io.reactivex.rxjava3.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f1bb0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f1bb6.  v0:= temp @kind object;
  #L4f1bb8.  v0:= (`io.reactivex.rxjava3.subjects.MaybeSubject$a`[]) v0 @kind object;
  #L4f1bbc.  v0:= length @variable v0;
  #L4f1bbe.  if v0 == 0 then goto L4f1bc6;
  #L4f1bc2.  v0:= 1I;
  #L4f1bc4.  goto L4f1bc8;
  #L4f1bc6.  v0:= 0I;
  #L4f1bc8.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.rxjava3.subjects.MaybeSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/MaybeSubject;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f1bdc.  v0:= v2.`io.reactivex.rxjava3.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f1be0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f1be6.  v0:= temp @kind object;
  #L4f1be8.  v1:= `@@io.reactivex.rxjava3.subjects.MaybeSubject.f` @type ^`io.reactivex.rxjava3.subjects.MaybeSubject$a`[] @kind object;
  #L4f1bec.  if v0 != v1 then goto L4f1bfc;
  #L4f1bf0.  v0:= v2.`io.reactivex.rxjava3.subjects.MaybeSubject.d` @type ^`java.lang.Throwable` @kind object;
  #L4f1bf4.  if v0 == 0 then goto L4f1bfc;
  #L4f1bf8.  v0:= 1I;
  #L4f1bfa.  goto L4f1bfe;
  #L4f1bfc.  v0:= 0I;
  #L4f1bfe.  return v0;
}
procedure `boolean` `hasValue`(`io.reactivex.rxjava3.subjects.MaybeSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/MaybeSubject;.hasValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f1c10.  v0:= v2.`io.reactivex.rxjava3.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f1c14.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f1c1a.  v0:= temp @kind object;
  #L4f1c1c.  v1:= `@@io.reactivex.rxjava3.subjects.MaybeSubject.f` @type ^`io.reactivex.rxjava3.subjects.MaybeSubject$a`[] @kind object;
  #L4f1c20.  if v0 != v1 then goto L4f1c30;
  #L4f1c24.  v0:= v2.`io.reactivex.rxjava3.subjects.MaybeSubject.c` @type ^`java.lang.Object` @kind object;
  #L4f1c28.  if v0 == 0 then goto L4f1c30;
  #L4f1c2c.  v0:= 1I;
  #L4f1c2e.  goto L4f1c32;
  #L4f1c30.  v0:= 0I;
  #L4f1c32.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.subjects.MaybeSubject` v4 @kind this) @signature `Lio/reactivex/rxjava3/subjects/MaybeSubject;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f1d1c.  v0:= v4.`io.reactivex.rxjava3.subjects.MaybeSubject.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4f1d20.  v1:= 0I;
  #L4f1d22.  v2:= 1I;
  #L4f1d24.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4f1d2a.  v0:= temp;
  #L4f1d2c.  if v0 == 0 then goto L4f1d5e;
  #L4f1d30.  v0:= v4.`io.reactivex.rxjava3.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f1d34.  v2:= `@@io.reactivex.rxjava3.subjects.MaybeSubject.f` @type ^`io.reactivex.rxjava3.subjects.MaybeSubject$a`[] @kind object;
  #L4f1d38.  call temp:= `getAndSet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4f1d3e.  v0:= temp @kind object;
  #L4f1d40.  v0:= (`io.reactivex.rxjava3.subjects.MaybeSubject$a`[]) v0 @kind object;
  #L4f1d44.  v2:= length @variable v0;
  #L4f1d46.  if v1 >= v2 then goto L4f1d5e;
  #L4f1d4a.  v3:= v0[v1] @kind object;
  #L4f1d4e.  v3:= v3.`io.reactivex.rxjava3.subjects.MaybeSubject$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4f1d52.  call `onComplete`(v3) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L4f1d58.  v1:= v1 + 1;
  #L4f1d5c.  goto L4f1d46;
  #L4f1d5e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.subjects.MaybeSubject` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/rxjava3/subjects/MaybeSubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f1d70.  v0:= "onError called with a null Throwable." @kind object;
  #L4f1d74.  call temp:= `nullCheck`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4f1d7a.  v0:= v4.`io.reactivex.rxjava3.subjects.MaybeSubject.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4f1d7e.  v1:= 0I;
  #L4f1d80.  v2:= 1I;
  #L4f1d82.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4f1d88.  v0:= temp;
  #L4f1d8a.  if v0 == 0 then goto L4f1dc0;
  #L4f1d8e.  v4.`io.reactivex.rxjava3.subjects.MaybeSubject.d` @type ^`java.lang.Throwable` := v5 @kind object;
  #L4f1d92.  v0:= v4.`io.reactivex.rxjava3.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f1d96.  v2:= `@@io.reactivex.rxjava3.subjects.MaybeSubject.f` @type ^`io.reactivex.rxjava3.subjects.MaybeSubject$a`[] @kind object;
  #L4f1d9a.  call temp:= `getAndSet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4f1da0.  v0:= temp @kind object;
  #L4f1da2.  v0:= (`io.reactivex.rxjava3.subjects.MaybeSubject$a`[]) v0 @kind object;
  #L4f1da6.  v2:= length @variable v0;
  #L4f1da8.  if v1 >= v2 then goto L4f1dc6;
  #L4f1dac.  v3:= v0[v1] @kind object;
  #L4f1db0.  v3:= v3.`io.reactivex.rxjava3.subjects.MaybeSubject$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4f1db4.  call `onError`(v3, v5) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f1dba.  v1:= v1 + 1;
  #L4f1dbe.  goto L4f1da8;
  #L4f1dc0.  call `onError`(v5) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4f1dc6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.subjects.MaybeSubject` v2 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/rxjava3/subjects/MaybeSubject;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f1dd8.  v0:= v2.`io.reactivex.rxjava3.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f1ddc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f1de2.  v0:= temp @kind object;
  #L4f1de4.  v1:= `@@io.reactivex.rxjava3.subjects.MaybeSubject.f` @type ^`io.reactivex.rxjava3.subjects.MaybeSubject$a`[] @kind object;
  #L4f1de8.  if v0 != v1 then goto L4f1df2;
  #L4f1dec.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f1df2.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.subjects.MaybeSubject` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/subjects/MaybeSubject;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f1e04.  v0:= "onSuccess called with a null value." @kind object;
  #L4f1e08.  call temp:= `nullCheck`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4f1e0e.  v0:= v4.`io.reactivex.rxjava3.subjects.MaybeSubject.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4f1e12.  v1:= 0I;
  #L4f1e14.  v2:= 1I;
  #L4f1e16.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4f1e1c.  v0:= temp;
  #L4f1e1e.  if v0 == 0 then goto L4f1e54;
  #L4f1e22.  v4.`io.reactivex.rxjava3.subjects.MaybeSubject.c` @type ^`java.lang.Object` := v5 @kind object;
  #L4f1e26.  v0:= v4.`io.reactivex.rxjava3.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f1e2a.  v2:= `@@io.reactivex.rxjava3.subjects.MaybeSubject.f` @type ^`io.reactivex.rxjava3.subjects.MaybeSubject$a`[] @kind object;
  #L4f1e2e.  call temp:= `getAndSet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4f1e34.  v0:= temp @kind object;
  #L4f1e36.  v0:= (`io.reactivex.rxjava3.subjects.MaybeSubject$a`[]) v0 @kind object;
  #L4f1e3a.  v2:= length @variable v0;
  #L4f1e3c.  if v1 >= v2 then goto L4f1e54;
  #L4f1e40.  v3:= v0[v1] @kind object;
  #L4f1e44.  v3:= v3.`io.reactivex.rxjava3.subjects.MaybeSubject$a.a` @type ^`io.reactivex.rxjava3.core.MaybeObserver` @kind object;
  #L4f1e48.  call `onSuccess`(v3, v5) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4f1e4e.  v1:= v1 + 1;
  #L4f1e52.  goto L4f1e3c;
  #L4f1e54.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.subjects.MaybeSubject` v2 @kind this, `io.reactivex.rxjava3.core.MaybeObserver` v3 @kind object) @signature `Lio/reactivex/rxjava3/subjects/MaybeSubject;.subscribeActual:(Lio/reactivex/rxjava3/core/MaybeObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L4f1ef0.  v0:= new `io.reactivex.rxjava3.subjects.MaybeSubject$a`;
  #L4f1ef4.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/rxjava3/subjects/MaybeSubject$a;.<init>:(Lio/reactivex/rxjava3/core/MaybeObserver;Lio/reactivex/rxjava3/subjects/MaybeSubject;)V` @kind direct;
  #L4f1efa.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4f1f00.  call temp:= `a`(v2, v0) @signature `Lio/reactivex/rxjava3/subjects/MaybeSubject;.a:(Lio/reactivex/rxjava3/subjects/MaybeSubject$a;)Z` @kind virtual;
  #L4f1f06.  v1:= temp;
  #L4f1f08.  if v1 == 0 then goto L4f1f20;
  #L4f1f0c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/subjects/MaybeSubject$a;.isDisposed:()Z` @kind virtual;
  #L4f1f12.  v3:= temp;
  #L4f1f14.  if v3 == 0 then goto L4f1f46;
  #L4f1f18.  call `b`(v2, v0) @signature `Lio/reactivex/rxjava3/subjects/MaybeSubject;.b:(Lio/reactivex/rxjava3/subjects/MaybeSubject$a;)V` @kind virtual;
  #L4f1f1e.  goto L4f1f46;
  #L4f1f20.  v0:= v2.`io.reactivex.rxjava3.subjects.MaybeSubject.d` @type ^`java.lang.Throwable` @kind object;
  #L4f1f24.  if v0 == 0 then goto L4f1f30;
  #L4f1f28.  call `onError`(v3, v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f1f2e.  goto L4f1f46;
  #L4f1f30.  v0:= v2.`io.reactivex.rxjava3.subjects.MaybeSubject.c` @type ^`java.lang.Object` @kind object;
  #L4f1f34.  if v0 != 0 then goto L4f1f40;
  #L4f1f38.  call `onComplete`(v3) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onComplete:()V` @kind interface;
  #L4f1f3e.  goto L4f1f46;
  #L4f1f40.  call `onSuccess`(v3, v0) @signature `Lio/reactivex/rxjava3/core/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4f1f46.  return @kind void;
}
