record `io.reactivex.rxjava3.subjects.ReplaySubject$e` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.subjects.ReplaySubject$b` @kind interface {
  `int` `io.reactivex.rxjava3.subjects.ReplaySubject$e.a` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.subjects.ReplaySubject$e.b` @AccessFlag ;
  `io.reactivex.rxjava3.subjects.ReplaySubject$a` `io.reactivex.rxjava3.subjects.ReplaySubject$e.c` @AccessFlag VOLATILE;
  `io.reactivex.rxjava3.subjects.ReplaySubject$a` `io.reactivex.rxjava3.subjects.ReplaySubject$e.d` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.subjects.ReplaySubject$e.e` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.subjects.ReplaySubject$e.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.subjects.ReplaySubject$e` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$e;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4f2a78.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4f2a7e.  v1.`io.reactivex.rxjava3.subjects.ReplaySubject$e.a` @type ^`int` := v2;
  #L4f2a82.  v2:= new `io.reactivex.rxjava3.subjects.ReplaySubject$a`;
  #L4f2a86.  v0:= 0I;
  #L4f2a88.  call `<init>`(v2, v0) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$a;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4f2a8e.  v1.`io.reactivex.rxjava3.subjects.ReplaySubject$e.d` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$a` := v2 @kind object;
  #L4f2a92.  v1.`io.reactivex.rxjava3.subjects.ReplaySubject$e.c` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$a` := v2 @kind object;
  #L4f2a96.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.subjects.ReplaySubject$e` v7 @kind this, `io.reactivex.rxjava3.subjects.ReplaySubject$c` v8 @kind object) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$e;.a:(Lio/reactivex/rxjava3/subjects/ReplaySubject$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4f2b24.  call temp:= `getAndIncrement`(v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4f2b2a.  v0:= temp;
  #L4f2b2c.  if v0 == 0 then goto L4f2b32;
  #L4f2b30.  return @kind void;
  #L4f2b32.  v0:= v8.`io.reactivex.rxjava3.subjects.ReplaySubject$c.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f2b36.  v1:= v8.`io.reactivex.rxjava3.subjects.ReplaySubject$c.c` @type ^`java.lang.Object` @kind object;
  #L4f2b3a.  v1:= (`io.reactivex.rxjava3.subjects.ReplaySubject$a`) v1 @kind object;
  #L4f2b3e.  v2:= 1I;
  #L4f2b40.  if v1 != 0 then goto L4f2b48;
  #L4f2b44.  v1:= v7.`io.reactivex.rxjava3.subjects.ReplaySubject$e.c` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$a` @kind object;
  #L4f2b48.  v3:= 1I;
  #L4f2b4a.  v4:= v8.`io.reactivex.rxjava3.subjects.ReplaySubject$c.d` @type ^`boolean` @kind boolean;
  #L4f2b4e.  v5:= 0I;
  #L4f2b50.  if v4 == 0 then goto L4f2b5a;
  #L4f2b54.  v8.`io.reactivex.rxjava3.subjects.ReplaySubject$c.c` @type ^`java.lang.Object` := v5 @kind object;
  #L4f2b58.  return @kind void;
  #L4f2b5a.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f2b60.  v4:= temp @kind object;
  #L4f2b62.  v4:= (`io.reactivex.rxjava3.subjects.ReplaySubject$a`) v4 @kind object;
  #L4f2b66.  if v4 != 0 then goto L4f2b8c;
  #L4f2b6a.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f2b70.  v4:= temp @kind object;
  #L4f2b72.  if v4 == 0 then goto L4f2b78;
  #L4f2b76.  goto L4f2b4a;
  #L4f2b78.  v8.`io.reactivex.rxjava3.subjects.ReplaySubject$c.c` @type ^`java.lang.Object` := v1 @kind object;
  #L4f2b7c.  v3:= -v3 @kind int;
  #L4f2b7e.  call temp:= `addAndGet`(v8, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4f2b84.  v3:= temp;
  #L4f2b86.  if v3 != 0 then goto L4f2b4a;
  #L4f2b8a.  return @kind void;
  #L4f2b8c.  v1:= v4.`io.reactivex.rxjava3.subjects.ReplaySubject$a.a` @type ^`java.lang.Object` @kind object;
  #L4f2b90.  v6:= v7.`io.reactivex.rxjava3.subjects.ReplaySubject$e.e` @type ^`boolean` @kind boolean;
  #L4f2b94.  if v6 == 0 then goto L4f2bd0;
  #L4f2b98.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f2b9e.  v6:= temp @kind object;
  #L4f2ba0.  if v6 != 0 then goto L4f2bd0;
  #L4f2ba4.  call temp:= `isComplete`(v1) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4f2baa.  v3:= temp;
  #L4f2bac.  if v3 == 0 then goto L4f2bb8;
  #L4f2bb0.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4f2bb6.  goto L4f2bc6;
  #L4f2bb8.  call temp:= `getError`(v1) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L4f2bbe.  v1:= temp @kind object;
  #L4f2bc0.  call `onError`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f2bc6.  v8.`io.reactivex.rxjava3.subjects.ReplaySubject$c.c` @type ^`java.lang.Object` := v5 @kind object;
  #L4f2bca.  v8.`io.reactivex.rxjava3.subjects.ReplaySubject$c.d` @type ^`boolean` := v2 @kind boolean;
  #L4f2bce.  return @kind void;
  #L4f2bd0.  call `onNext`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f2bd6.  v1:= v4 @kind object;
  #L4f2bd8.  goto L4f2b4a;
}
procedure `void` `add`(`io.reactivex.rxjava3.subjects.ReplaySubject$e` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$e;.add:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f2aa8.  v0:= new `io.reactivex.rxjava3.subjects.ReplaySubject$a`;
  #L4f2aac.  call `<init>`(v0, v3) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$a;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4f2ab2.  v3:= v2.`io.reactivex.rxjava3.subjects.ReplaySubject$e.d` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$a` @kind object;
  #L4f2ab6.  v2.`io.reactivex.rxjava3.subjects.ReplaySubject$e.d` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$a` := v0 @kind object;
  #L4f2aba.  v1:= v2.`io.reactivex.rxjava3.subjects.ReplaySubject$e.b` @type ^`int`;
  #L4f2abe.  v1:= v1 + 1;
  #L4f2ac2.  v2.`io.reactivex.rxjava3.subjects.ReplaySubject$e.b` @type ^`int` := v1;
  #L4f2ac6.  call `set`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4f2acc.  call `b`(v2) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$e;.b:()V` @kind virtual;
  #L4f2ad2.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.subjects.ReplaySubject$e` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$e;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4f2bec.  v0:= v2.`io.reactivex.rxjava3.subjects.ReplaySubject$e.b` @type ^`int`;
  #L4f2bf0.  v1:= v2.`io.reactivex.rxjava3.subjects.ReplaySubject$e.a` @type ^`int`;
  #L4f2bf4.  if v0 <= v1 then goto L4f2c14;
  #L4f2bf8.  v0:= v0 + -1;
  #L4f2bfc.  v2.`io.reactivex.rxjava3.subjects.ReplaySubject$e.b` @type ^`int` := v0;
  #L4f2c00.  v0:= v2.`io.reactivex.rxjava3.subjects.ReplaySubject$e.c` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$a` @kind object;
  #L4f2c04.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f2c0a.  v0:= temp @kind object;
  #L4f2c0c.  v0:= (`io.reactivex.rxjava3.subjects.ReplaySubject$a`) v0 @kind object;
  #L4f2c10.  v2.`io.reactivex.rxjava3.subjects.ReplaySubject$e.c` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$a` := v0 @kind object;
  #L4f2c14.  return @kind void;
}
procedure `java.lang.Object`[] `c`(`io.reactivex.rxjava3.subjects.ReplaySubject$e` v5 @kind this, `java.lang.Object`[] v6 @kind object) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$e;.c:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4f29fc.  v0:= v5.`io.reactivex.rxjava3.subjects.ReplaySubject$e.c` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$a` @kind object;
  #L4f2a00.  call temp:= `size`(v5) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$e;.size:()I` @kind virtual;
  #L4f2a06.  v1:= temp;
  #L4f2a08.  v2:= 0I;
  #L4f2a0a.  v3:= 0I;
  #L4f2a0c.  if v1 != 0 then goto L4f2a1c;
  #L4f2a10.  v0:= length @variable v6;
  #L4f2a12.  if v0 == 0 then goto L4f2a66;
  #L4f2a16.  v6[v3]:= v2 @kind object;
  #L4f2a1a.  goto L4f2a66;
  #L4f2a1c.  v4:= length @variable v6;
  #L4f2a1e.  if v4 >= v1 then goto L4f2a3e;
  #L4f2a22.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4f2a28.  v6:= temp @kind object;
  #L4f2a2a.  call temp:= `getComponentType`(v6) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L4f2a30.  v6:= temp @kind object;
  #L4f2a32.  call temp:= `newInstance`(v6, v1) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L4f2a38.  v6:= temp @kind object;
  #L4f2a3a.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L4f2a3e.  if v3 == v1 then goto L4f2a5c;
  #L4f2a42.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f2a48.  v0:= temp @kind object;
  #L4f2a4a.  v0:= (`io.reactivex.rxjava3.subjects.ReplaySubject$a`) v0 @kind object;
  #L4f2a4e.  v4:= v0.`io.reactivex.rxjava3.subjects.ReplaySubject$a.a` @type ^`java.lang.Object` @kind object;
  #L4f2a52.  v6[v3]:= v4 @kind object;
  #L4f2a56.  v3:= v3 + 1;
  #L4f2a5a.  goto L4f2a3e;
  #L4f2a5c.  v0:= length @variable v6;
  #L4f2a5e.  if v0 <= v1 then goto L4f2a66;
  #L4f2a62.  v6[v1]:= v2 @kind object;
  #L4f2a66.  return v6 @kind object;
}
procedure `void` `d`(`io.reactivex.rxjava3.subjects.ReplaySubject$e` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$e;.d:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4f2ae4.  v0:= new `io.reactivex.rxjava3.subjects.ReplaySubject$a`;
  #L4f2ae8.  call `<init>`(v0, v4) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$a;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4f2aee.  v4:= v3.`io.reactivex.rxjava3.subjects.ReplaySubject$e.d` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$a` @kind object;
  #L4f2af2.  v3.`io.reactivex.rxjava3.subjects.ReplaySubject$e.d` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$a` := v0 @kind object;
  #L4f2af6.  v1:= v3.`io.reactivex.rxjava3.subjects.ReplaySubject$e.b` @type ^`int`;
  #L4f2afa.  v2:= 1I;
  #L4f2afc.  v1:= v1 + v2 @kind int;
  #L4f2afe.  v3.`io.reactivex.rxjava3.subjects.ReplaySubject$e.b` @type ^`int` := v1;
  #L4f2b02.  call `lazySet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4f2b08.  call `e`(v3) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$e;.e:()V` @kind virtual;
  #L4f2b0e.  v3.`io.reactivex.rxjava3.subjects.ReplaySubject$e.e` @type ^`boolean` := v2 @kind boolean;
  #L4f2b12.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.subjects.ReplaySubject$e` v3 @kind this) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$e;.e:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4f2c28.  v0:= v3.`io.reactivex.rxjava3.subjects.ReplaySubject$e.c` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$a` @kind object;
  #L4f2c2c.  v1:= v0.`io.reactivex.rxjava3.subjects.ReplaySubject$a.a` @type ^`java.lang.Object` @kind object;
  #L4f2c30.  if v1 == 0 then goto L4f2c52;
  #L4f2c34.  v1:= new `io.reactivex.rxjava3.subjects.ReplaySubject$a`;
  #L4f2c38.  v2:= 0I;
  #L4f2c3a.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$a;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4f2c40.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f2c46.  v0:= temp @kind object;
  #L4f2c48.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4f2c4e.  v3.`io.reactivex.rxjava3.subjects.ReplaySubject$e.c` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$a` := v1 @kind object;
  #L4f2c52.  return @kind void;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.rxjava3.subjects.ReplaySubject$e` v4 @kind this) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$e;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f29a0.  v0:= v4.`io.reactivex.rxjava3.subjects.ReplaySubject$e.c` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$a` @kind object;
  #L4f29a4.  v1:= 0I;
  #L4f29a6.  v2:= v1 @kind object;
  #L4f29a8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f29ae.  v3:= temp @kind object;
  #L4f29b0.  v3:= (`io.reactivex.rxjava3.subjects.ReplaySubject$a`) v3 @kind object;
  #L4f29b4.  if v3 != 0 then goto L4f29e4;
  #L4f29b8.  v0:= v0.`io.reactivex.rxjava3.subjects.ReplaySubject$a.a` @type ^`java.lang.Object` @kind object;
  #L4f29bc.  if v0 != 0 then goto L4f29c2;
  #L4f29c0.  return v1 @kind object;
  #L4f29c2.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4f29c8.  v1:= temp;
  #L4f29ca.  if v1 != 0 then goto L4f29de;
  #L4f29ce.  call temp:= `isError`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4f29d4.  v1:= temp;
  #L4f29d6.  if v1 == 0 then goto L4f29dc;
  #L4f29da.  goto L4f29de;
  #L4f29dc.  return v0 @kind object;
  #L4f29de.  v0:= v2.`io.reactivex.rxjava3.subjects.ReplaySubject$a.a` @type ^`java.lang.Object` @kind object;
  #L4f29e2.  return v0 @kind object;
  #L4f29e4.  v2:= v0 @kind object;
  #L4f29e6.  v0:= v3 @kind object;
  #L4f29e8.  goto L4f29a8;
}
procedure `int` `size`(`io.reactivex.rxjava3.subjects.ReplaySubject$e` v3 @kind this) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$e;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4f2944.  v0:= v3.`io.reactivex.rxjava3.subjects.ReplaySubject$e.c` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$a` @kind object;
  #L4f2948.  v1:= 0I;
  #L4f294a.  v2:= 2147483647I;
  #L4f2950.  if v1 == v2 then goto L4f298e;
  #L4f2954.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f295a.  v2:= temp @kind object;
  #L4f295c.  v2:= (`io.reactivex.rxjava3.subjects.ReplaySubject$a`) v2 @kind object;
  #L4f2960.  if v2 != 0 then goto L4f2986;
  #L4f2964.  v0:= v0.`io.reactivex.rxjava3.subjects.ReplaySubject$a.a` @type ^`java.lang.Object` @kind object;
  #L4f2968.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4f296e.  v2:= temp;
  #L4f2970.  if v2 != 0 then goto L4f2980;
  #L4f2974.  call temp:= `isError`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4f297a.  v0:= temp;
  #L4f297c.  if v0 == 0 then goto L4f298e;
  #L4f2980.  v1:= v1 + -1;
  #L4f2984.  goto L4f298e;
  #L4f2986.  v1:= v1 + 1;
  #L4f298a.  v0:= v2 @kind object;
  #L4f298c.  goto L4f294a;
  #L4f298e.  return v1;
}
