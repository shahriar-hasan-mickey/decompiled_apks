record `io.reactivex.rxjava3.subjects.ReplaySubject$d` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.subjects.ReplaySubject$b` @kind interface {
  `int` `io.reactivex.rxjava3.subjects.ReplaySubject$d.a` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.subjects.ReplaySubject$d.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.rxjava3.subjects.ReplaySubject$d.c` @AccessFlag FINAL;
  `io.reactivex.rxjava3.core.Scheduler` `io.reactivex.rxjava3.subjects.ReplaySubject$d.d` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.subjects.ReplaySubject$d.e` @AccessFlag ;
  `io.reactivex.rxjava3.subjects.ReplaySubject$f` `io.reactivex.rxjava3.subjects.ReplaySubject$d.f` @AccessFlag VOLATILE;
  `io.reactivex.rxjava3.subjects.ReplaySubject$f` `io.reactivex.rxjava3.subjects.ReplaySubject$d.g` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.subjects.ReplaySubject$d.h` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.rxjava3.subjects.ReplaySubject$d.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.subjects.ReplaySubject$d` v0 @kind this, `int` v1 , `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.rxjava3.core.Scheduler` v5 @kind object) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$d;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/rxjava3/core/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f2634.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4f263a.  v0.`io.reactivex.rxjava3.subjects.ReplaySubject$d.a` @type ^`int` := v1;
  #L4f263e.  v0.`io.reactivex.rxjava3.subjects.ReplaySubject$d.b` @type ^`long` := v2 @kind wide;
  #L4f2642.  v0.`io.reactivex.rxjava3.subjects.ReplaySubject$d.c` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L4f2646.  v0.`io.reactivex.rxjava3.subjects.ReplaySubject$d.d` @type ^`io.reactivex.rxjava3.core.Scheduler` := v5 @kind object;
  #L4f264a.  v1:= new `io.reactivex.rxjava3.subjects.ReplaySubject$f`;
  #L4f264e.  v2:= 0I;
  #L4f2650.  v3:= 0L;
  #L4f2654.  call `<init>`(v1, v2, v3) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$f;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L4f265a.  v0.`io.reactivex.rxjava3.subjects.ReplaySubject$d.g` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$f` := v1 @kind object;
  #L4f265e.  v0.`io.reactivex.rxjava3.subjects.ReplaySubject$d.f` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$f` := v1 @kind object;
  #L4f2662.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.subjects.ReplaySubject$d` v7 @kind this, `io.reactivex.rxjava3.subjects.ReplaySubject$c` v8 @kind object) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$d;.a:(Lio/reactivex/rxjava3/subjects/ReplaySubject$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4f270c.  call temp:= `getAndIncrement`(v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4f2712.  v0:= temp;
  #L4f2714.  if v0 == 0 then goto L4f271a;
  #L4f2718.  return @kind void;
  #L4f271a.  v0:= v8.`io.reactivex.rxjava3.subjects.ReplaySubject$c.a` @type ^`io.reactivex.rxjava3.core.Observer` @kind object;
  #L4f271e.  v1:= v8.`io.reactivex.rxjava3.subjects.ReplaySubject$c.c` @type ^`java.lang.Object` @kind object;
  #L4f2722.  v1:= (`io.reactivex.rxjava3.subjects.ReplaySubject$f`) v1 @kind object;
  #L4f2726.  v2:= 1I;
  #L4f2728.  if v1 != 0 then goto L4f2734;
  #L4f272c.  call temp:= `b`(v7) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$d;.b:()Lio/reactivex/rxjava3/subjects/ReplaySubject$f;` @kind virtual;
  #L4f2732.  v1:= temp @kind object;
  #L4f2734.  v3:= 1I;
  #L4f2736.  v4:= v8.`io.reactivex.rxjava3.subjects.ReplaySubject$c.d` @type ^`boolean` @kind boolean;
  #L4f273a.  v5:= 0I;
  #L4f273c.  if v4 == 0 then goto L4f2746;
  #L4f2740.  v8.`io.reactivex.rxjava3.subjects.ReplaySubject$c.c` @type ^`java.lang.Object` := v5 @kind object;
  #L4f2744.  return @kind void;
  #L4f2746.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f274c.  v4:= temp @kind object;
  #L4f274e.  v4:= (`io.reactivex.rxjava3.subjects.ReplaySubject$f`) v4 @kind object;
  #L4f2752.  if v4 != 0 then goto L4f276a;
  #L4f2756.  v8.`io.reactivex.rxjava3.subjects.ReplaySubject$c.c` @type ^`java.lang.Object` := v1 @kind object;
  #L4f275a.  v3:= -v3 @kind int;
  #L4f275c.  call temp:= `addAndGet`(v8, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4f2762.  v3:= temp;
  #L4f2764.  if v3 != 0 then goto L4f2736;
  #L4f2768.  return @kind void;
  #L4f276a.  v1:= v4.`io.reactivex.rxjava3.subjects.ReplaySubject$f.a` @type ^`java.lang.Object` @kind object;
  #L4f276e.  v6:= v7.`io.reactivex.rxjava3.subjects.ReplaySubject$d.h` @type ^`boolean` @kind boolean;
  #L4f2772.  if v6 == 0 then goto L4f27ae;
  #L4f2776.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f277c.  v6:= temp @kind object;
  #L4f277e.  if v6 != 0 then goto L4f27ae;
  #L4f2782.  call temp:= `isComplete`(v1) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4f2788.  v3:= temp;
  #L4f278a.  if v3 == 0 then goto L4f2796;
  #L4f278e.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4f2794.  goto L4f27a4;
  #L4f2796.  call temp:= `getError`(v1) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L4f279c.  v1:= temp @kind object;
  #L4f279e.  call `onError`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f27a4.  v8.`io.reactivex.rxjava3.subjects.ReplaySubject$c.c` @type ^`java.lang.Object` := v5 @kind object;
  #L4f27a8.  v8.`io.reactivex.rxjava3.subjects.ReplaySubject$c.d` @type ^`boolean` := v2 @kind boolean;
  #L4f27ac.  return @kind void;
  #L4f27ae.  call `onNext`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f27b4.  v1:= v4 @kind object;
  #L4f27b6.  goto L4f2736;
}
procedure `void` `add`(`io.reactivex.rxjava3.subjects.ReplaySubject$d` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$d;.add:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4f2674.  v0:= new `io.reactivex.rxjava3.subjects.ReplaySubject$f`;
  #L4f2678.  v1:= v3.`io.reactivex.rxjava3.subjects.ReplaySubject$d.d` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4f267c.  v2:= v3.`io.reactivex.rxjava3.subjects.ReplaySubject$d.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4f2680.  call temp:= `now`(v1, v2) @signature `Lio/reactivex/rxjava3/core/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4f2686.  v1:= temp @kind wide;
  #L4f2688.  call `<init>`(v0, v4, v1) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$f;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L4f268e.  v4:= v3.`io.reactivex.rxjava3.subjects.ReplaySubject$d.g` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$f` @kind object;
  #L4f2692.  v3.`io.reactivex.rxjava3.subjects.ReplaySubject$d.g` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$f` := v0 @kind object;
  #L4f2696.  v1:= v3.`io.reactivex.rxjava3.subjects.ReplaySubject$d.e` @type ^`int`;
  #L4f269a.  v1:= v1 + 1;
  #L4f269e.  v3.`io.reactivex.rxjava3.subjects.ReplaySubject$d.e` @type ^`int` := v1;
  #L4f26a2.  call `set`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4f26a8.  call `g`(v3) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$d;.g:()V` @kind virtual;
  #L4f26ae.  return @kind void;
}
procedure `io.reactivex.rxjava3.subjects.ReplaySubject$f` `b`(`io.reactivex.rxjava3.subjects.ReplaySubject$d` v8 @kind this) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$d;.b:()Lio/reactivex/rxjava3/subjects/ReplaySubject$f;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4f24d4.  v0:= v8.`io.reactivex.rxjava3.subjects.ReplaySubject$d.f` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$f` @kind object;
  #L4f24d8.  v1:= v8.`io.reactivex.rxjava3.subjects.ReplaySubject$d.d` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4f24dc.  v2:= v8.`io.reactivex.rxjava3.subjects.ReplaySubject$d.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4f24e0.  call temp:= `now`(v1, v2) @signature `Lio/reactivex/rxjava3/core/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4f24e6.  v1:= temp @kind wide;
  #L4f24e8.  v3:= v8.`io.reactivex.rxjava3.subjects.ReplaySubject$d.b` @type ^`long` @kind wide;
  #L4f24ec.  v1:= v1 - v3 @kind long;
  #L4f24ee.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f24f4.  v3:= temp @kind object;
  #L4f24f6.  v3:= (`io.reactivex.rxjava3.subjects.ReplaySubject$f`) v3 @kind object;
  #L4f24fa.  v7:= v3 @kind object;
  #L4f24fc.  v3:= v0 @kind object;
  #L4f24fe.  v0:= v7 @kind object;
  #L4f2500.  if v0 == 0 then goto L4f2520;
  #L4f2504.  v4:= v0.`io.reactivex.rxjava3.subjects.ReplaySubject$f.b` @type ^`long` @kind wide;
  #L4f2508.  v6:= lcmp(v4, v1);
  #L4f250c.  if v6 <= 0 then goto L4f2512;
  #L4f2510.  goto L4f2520;
  #L4f2512.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f2518.  v3:= temp @kind object;
  #L4f251a.  v3:= (`io.reactivex.rxjava3.subjects.ReplaySubject$f`) v3 @kind object;
  #L4f251e.  goto L4f24fa;
  #L4f2520.  return v3 @kind object;
}
procedure `java.lang.Object`[] `c`(`io.reactivex.rxjava3.subjects.ReplaySubject$d` v5 @kind this, `java.lang.Object`[] v6 @kind object) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$d;.c:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4f25b4.  call temp:= `b`(v5) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$d;.b:()Lio/reactivex/rxjava3/subjects/ReplaySubject$f;` @kind virtual;
  #L4f25ba.  v0:= temp @kind object;
  #L4f25bc.  call temp:= `f`(v5, v0) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$d;.f:(Lio/reactivex/rxjava3/subjects/ReplaySubject$f;)I` @kind virtual;
  #L4f25c2.  v1:= temp;
  #L4f25c4.  v2:= 0I;
  #L4f25c6.  v3:= 0I;
  #L4f25c8.  if v1 != 0 then goto L4f25d8;
  #L4f25cc.  v0:= length @variable v6;
  #L4f25ce.  if v0 == 0 then goto L4f2622;
  #L4f25d2.  v6[v3]:= v2 @kind object;
  #L4f25d6.  goto L4f2622;
  #L4f25d8.  v4:= length @variable v6;
  #L4f25da.  if v4 >= v1 then goto L4f25fa;
  #L4f25de.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4f25e4.  v6:= temp @kind object;
  #L4f25e6.  call temp:= `getComponentType`(v6) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L4f25ec.  v6:= temp @kind object;
  #L4f25ee.  call temp:= `newInstance`(v6, v1) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L4f25f4.  v6:= temp @kind object;
  #L4f25f6.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L4f25fa.  if v3 == v1 then goto L4f2618;
  #L4f25fe.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f2604.  v0:= temp @kind object;
  #L4f2606.  v0:= (`io.reactivex.rxjava3.subjects.ReplaySubject$f`) v0 @kind object;
  #L4f260a.  v4:= v0.`io.reactivex.rxjava3.subjects.ReplaySubject$f.a` @type ^`java.lang.Object` @kind object;
  #L4f260e.  v6[v3]:= v4 @kind object;
  #L4f2612.  v3:= v3 + 1;
  #L4f2616.  goto L4f25fa;
  #L4f2618.  v0:= length @variable v6;
  #L4f261a.  if v0 <= v1 then goto L4f2622;
  #L4f261e.  v6[v1]:= v2 @kind object;
  #L4f2622.  return v6 @kind object;
}
procedure `void` `d`(`io.reactivex.rxjava3.subjects.ReplaySubject$d` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$d;.d:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4f26c0.  v0:= new `io.reactivex.rxjava3.subjects.ReplaySubject$f`;
  #L4f26c4.  v1:= 9223372036854775807L;
  #L4f26ce.  call `<init>`(v0, v4, v1) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$f;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L4f26d4.  v4:= v3.`io.reactivex.rxjava3.subjects.ReplaySubject$d.g` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$f` @kind object;
  #L4f26d8.  v3.`io.reactivex.rxjava3.subjects.ReplaySubject$d.g` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$f` := v0 @kind object;
  #L4f26dc.  v1:= v3.`io.reactivex.rxjava3.subjects.ReplaySubject$d.e` @type ^`int`;
  #L4f26e0.  v2:= 1I;
  #L4f26e2.  v1:= v1 + v2 @kind int;
  #L4f26e4.  v3.`io.reactivex.rxjava3.subjects.ReplaySubject$d.e` @type ^`int` := v1;
  #L4f26e8.  call `lazySet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4f26ee.  call `h`(v3) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$d;.h:()V` @kind virtual;
  #L4f26f4.  v3.`io.reactivex.rxjava3.subjects.ReplaySubject$d.h` @type ^`boolean` := v2 @kind boolean;
  #L4f26f8.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.subjects.ReplaySubject$d` v5 @kind this) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$d;.e:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4f2904.  v0:= v5.`io.reactivex.rxjava3.subjects.ReplaySubject$d.f` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$f` @kind object;
  #L4f2908.  v1:= v0.`io.reactivex.rxjava3.subjects.ReplaySubject$f.a` @type ^`java.lang.Object` @kind object;
  #L4f290c.  if v1 == 0 then goto L4f2932;
  #L4f2910.  v1:= new `io.reactivex.rxjava3.subjects.ReplaySubject$f`;
  #L4f2914.  v2:= 0I;
  #L4f2916.  v3:= 0L;
  #L4f291a.  call `<init>`(v1, v2, v3) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$f;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L4f2920.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f2926.  v0:= temp @kind object;
  #L4f2928.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4f292e.  v5.`io.reactivex.rxjava3.subjects.ReplaySubject$d.f` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$f` := v1 @kind object;
  #L4f2932.  return @kind void;
}
procedure `int` `f`(`io.reactivex.rxjava3.subjects.ReplaySubject$d` v2 @kind this, `io.reactivex.rxjava3.subjects.ReplaySubject$f` v3 @kind object) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$d;.f:(Lio/reactivex/rxjava3/subjects/ReplaySubject$f;)I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4f247c.  v0:= 0I;
  #L4f247e.  v1:= 2147483647I;
  #L4f2484.  if v0 == v1 then goto L4f24c2;
  #L4f2488.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f248e.  v1:= temp @kind object;
  #L4f2490.  v1:= (`io.reactivex.rxjava3.subjects.ReplaySubject$f`) v1 @kind object;
  #L4f2494.  if v1 != 0 then goto L4f24ba;
  #L4f2498.  v3:= v3.`io.reactivex.rxjava3.subjects.ReplaySubject$f.a` @type ^`java.lang.Object` @kind object;
  #L4f249c.  call temp:= `isComplete`(v3) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4f24a2.  v1:= temp;
  #L4f24a4.  if v1 != 0 then goto L4f24b4;
  #L4f24a8.  call temp:= `isError`(v3) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4f24ae.  v3:= temp;
  #L4f24b0.  if v3 == 0 then goto L4f24c2;
  #L4f24b4.  v0:= v0 + -1;
  #L4f24b8.  goto L4f24c2;
  #L4f24ba.  v0:= v0 + 1;
  #L4f24be.  v3:= v1 @kind object;
  #L4f24c0.  goto L4f247e;
  #L4f24c2.  return v0;
}
procedure `void` `g`(`io.reactivex.rxjava3.subjects.ReplaySubject$d` v8 @kind this) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$d;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4f27c8.  v0:= v8.`io.reactivex.rxjava3.subjects.ReplaySubject$d.e` @type ^`int`;
  #L4f27cc.  v1:= v8.`io.reactivex.rxjava3.subjects.ReplaySubject$d.a` @type ^`int`;
  #L4f27d0.  v2:= 1I;
  #L4f27d2.  if v0 <= v1 then goto L4f27f0;
  #L4f27d6.  v0:= v0 - v2 @kind int;
  #L4f27d8.  v8.`io.reactivex.rxjava3.subjects.ReplaySubject$d.e` @type ^`int` := v0;
  #L4f27dc.  v0:= v8.`io.reactivex.rxjava3.subjects.ReplaySubject$d.f` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$f` @kind object;
  #L4f27e0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f27e6.  v0:= temp @kind object;
  #L4f27e8.  v0:= (`io.reactivex.rxjava3.subjects.ReplaySubject$f`) v0 @kind object;
  #L4f27ec.  v8.`io.reactivex.rxjava3.subjects.ReplaySubject$d.f` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$f` := v0 @kind object;
  #L4f27f0.  v0:= v8.`io.reactivex.rxjava3.subjects.ReplaySubject$d.d` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4f27f4.  v1:= v8.`io.reactivex.rxjava3.subjects.ReplaySubject$d.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4f27f8.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4f27fe.  v0:= temp @kind wide;
  #L4f2800.  v3:= v8.`io.reactivex.rxjava3.subjects.ReplaySubject$d.b` @type ^`long` @kind wide;
  #L4f2804.  v0:= v0 - v3 @kind long;
  #L4f2806.  v3:= v8.`io.reactivex.rxjava3.subjects.ReplaySubject$d.f` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$f` @kind object;
  #L4f280a.  v4:= v8.`io.reactivex.rxjava3.subjects.ReplaySubject$d.e` @type ^`int`;
  #L4f280e.  if v4 > v2 then goto L4f2818;
  #L4f2812.  v8.`io.reactivex.rxjava3.subjects.ReplaySubject$d.f` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$f` := v3 @kind object;
  #L4f2816.  goto L4f2834;
  #L4f2818.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f281e.  v4:= temp @kind object;
  #L4f2820.  v4:= (`io.reactivex.rxjava3.subjects.ReplaySubject$f`) v4 @kind object;
  #L4f2824.  v5:= v4.`io.reactivex.rxjava3.subjects.ReplaySubject$f.b` @type ^`long` @kind wide;
  #L4f2828.  v7:= lcmp(v5, v0);
  #L4f282c.  if v7 <= 0 then goto L4f2836;
  #L4f2830.  v8.`io.reactivex.rxjava3.subjects.ReplaySubject$d.f` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$f` := v3 @kind object;
  #L4f2834.  return @kind void;
  #L4f2836.  v3:= v8.`io.reactivex.rxjava3.subjects.ReplaySubject$d.e` @type ^`int`;
  #L4f283a.  v3:= v3 - v2 @kind int;
  #L4f283c.  v8.`io.reactivex.rxjava3.subjects.ReplaySubject$d.e` @type ^`int` := v3;
  #L4f2840.  v3:= v4 @kind object;
  #L4f2842.  goto L4f280a;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.rxjava3.subjects.ReplaySubject$d` v8 @kind this) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$d;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4f2534.  v0:= v8.`io.reactivex.rxjava3.subjects.ReplaySubject$d.f` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$f` @kind object;
  #L4f2538.  v1:= 0I;
  #L4f253a.  v2:= v1 @kind object;
  #L4f253c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f2542.  v3:= temp @kind object;
  #L4f2544.  v3:= (`io.reactivex.rxjava3.subjects.ReplaySubject$f`) v3 @kind object;
  #L4f2548.  if v3 != 0 then goto L4f259c;
  #L4f254c.  v3:= v8.`io.reactivex.rxjava3.subjects.ReplaySubject$d.d` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4f2550.  v4:= v8.`io.reactivex.rxjava3.subjects.ReplaySubject$d.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4f2554.  call temp:= `now`(v3, v4) @signature `Lio/reactivex/rxjava3/core/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4f255a.  v3:= temp @kind wide;
  #L4f255c.  v5:= v8.`io.reactivex.rxjava3.subjects.ReplaySubject$d.b` @type ^`long` @kind wide;
  #L4f2560.  v3:= v3 - v5 @kind long;
  #L4f2562.  v5:= v0.`io.reactivex.rxjava3.subjects.ReplaySubject$f.b` @type ^`long` @kind wide;
  #L4f2566.  v7:= lcmp(v5, v3);
  #L4f256a.  if v7 >= 0 then goto L4f2570;
  #L4f256e.  return v1 @kind object;
  #L4f2570.  v0:= v0.`io.reactivex.rxjava3.subjects.ReplaySubject$f.a` @type ^`java.lang.Object` @kind object;
  #L4f2574.  if v0 != 0 then goto L4f257a;
  #L4f2578.  return v1 @kind object;
  #L4f257a.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4f2580.  v1:= temp;
  #L4f2582.  if v1 != 0 then goto L4f2596;
  #L4f2586.  call temp:= `isError`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4f258c.  v1:= temp;
  #L4f258e.  if v1 == 0 then goto L4f2594;
  #L4f2592.  goto L4f2596;
  #L4f2594.  return v0 @kind object;
  #L4f2596.  v0:= v2.`io.reactivex.rxjava3.subjects.ReplaySubject$f.a` @type ^`java.lang.Object` @kind object;
  #L4f259a.  return v0 @kind object;
  #L4f259c.  v2:= v0 @kind object;
  #L4f259e.  v0:= v3 @kind object;
  #L4f25a0.  goto L4f253c;
}
procedure `void` `h`(`io.reactivex.rxjava3.subjects.ReplaySubject$d` v10 @kind this) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$d;.h:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4f2854.  v0:= v10.`io.reactivex.rxjava3.subjects.ReplaySubject$d.d` @type ^`io.reactivex.rxjava3.core.Scheduler` @kind object;
  #L4f2858.  v1:= v10.`io.reactivex.rxjava3.subjects.ReplaySubject$d.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4f285c.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4f2862.  v0:= temp @kind wide;
  #L4f2864.  v2:= v10.`io.reactivex.rxjava3.subjects.ReplaySubject$d.b` @type ^`long` @kind wide;
  #L4f2868.  v0:= v0 - v2 @kind long;
  #L4f286a.  v2:= v10.`io.reactivex.rxjava3.subjects.ReplaySubject$d.f` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$f` @kind object;
  #L4f286e.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f2874.  v3:= temp @kind object;
  #L4f2876.  v3:= (`io.reactivex.rxjava3.subjects.ReplaySubject$f`) v3 @kind object;
  #L4f287a.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f2880.  v4:= temp @kind object;
  #L4f2882.  v5:= 0L;
  #L4f2886.  v7:= 0I;
  #L4f2888.  if v4 != 0 then goto L4f28b8;
  #L4f288c.  v0:= v2.`io.reactivex.rxjava3.subjects.ReplaySubject$f.a` @type ^`java.lang.Object` @kind object;
  #L4f2890.  if v0 == 0 then goto L4f28b2;
  #L4f2894.  v0:= new `io.reactivex.rxjava3.subjects.ReplaySubject$f`;
  #L4f2898.  call `<init>`(v0, v7, v5) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$f;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L4f289e.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f28a4.  v1:= temp @kind object;
  #L4f28a6.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4f28ac.  v10.`io.reactivex.rxjava3.subjects.ReplaySubject$d.f` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$f` := v0 @kind object;
  #L4f28b0.  goto L4f28ee;
  #L4f28b2.  v10.`io.reactivex.rxjava3.subjects.ReplaySubject$d.f` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$f` := v2 @kind object;
  #L4f28b6.  goto L4f28ee;
  #L4f28b8.  v8:= v3.`io.reactivex.rxjava3.subjects.ReplaySubject$f.b` @type ^`long` @kind wide;
  #L4f28bc.  v4:= lcmp(v8, v0);
  #L4f28c0.  if v4 <= 0 then goto L4f28f0;
  #L4f28c4.  v0:= v2.`io.reactivex.rxjava3.subjects.ReplaySubject$f.a` @type ^`java.lang.Object` @kind object;
  #L4f28c8.  if v0 == 0 then goto L4f28ea;
  #L4f28cc.  v0:= new `io.reactivex.rxjava3.subjects.ReplaySubject$f`;
  #L4f28d0.  call `<init>`(v0, v7, v5) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$f;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L4f28d6.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f28dc.  v1:= temp @kind object;
  #L4f28de.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4f28e4.  v10.`io.reactivex.rxjava3.subjects.ReplaySubject$d.f` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$f` := v0 @kind object;
  #L4f28e8.  goto L4f28ee;
  #L4f28ea.  v10.`io.reactivex.rxjava3.subjects.ReplaySubject$d.f` @type ^`io.reactivex.rxjava3.subjects.ReplaySubject$f` := v2 @kind object;
  #L4f28ee.  return @kind void;
  #L4f28f0.  v2:= v3 @kind object;
  #L4f28f2.  goto L4f286e;
}
procedure `int` `size`(`io.reactivex.rxjava3.subjects.ReplaySubject$d` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$d;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f2458.  call temp:= `b`(v1) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$d;.b:()Lio/reactivex/rxjava3/subjects/ReplaySubject$f;` @kind virtual;
  #L4f245e.  v0:= temp @kind object;
  #L4f2460.  call temp:= `f`(v1, v0) @signature `Lio/reactivex/rxjava3/subjects/ReplaySubject$d;.f:(Lio/reactivex/rxjava3/subjects/ReplaySubject$f;)I` @kind virtual;
  #L4f2466.  v0:= temp;
  #L4f2468.  return v0;
}
