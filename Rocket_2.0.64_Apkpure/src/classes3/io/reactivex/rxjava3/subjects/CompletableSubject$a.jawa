record `io.reactivex.rxjava3.subjects.CompletableSubject$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.disposables.Disposable` @kind interface {
  `io.reactivex.rxjava3.core.CompletableObserver` `io.reactivex.rxjava3.subjects.CompletableSubject$a.a` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.subjects.CompletableSubject$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.subjects.CompletableSubject$a` v0 @kind this, `io.reactivex.rxjava3.core.CompletableObserver` v1 @kind object, `io.reactivex.rxjava3.subjects.CompletableSubject` v2 @kind object) @signature `Lio/reactivex/rxjava3/subjects/CompletableSubject$a;.<init>:(Lio/reactivex/rxjava3/core/CompletableObserver;Lio/reactivex/rxjava3/subjects/CompletableSubject;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f16fc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4f1702.  v0.`io.reactivex.rxjava3.subjects.CompletableSubject$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` := v1 @kind object;
  #L4f1706.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4f170c.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.subjects.CompletableSubject$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/CompletableSubject$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f1720.  v0:= 0I;
  #L4f1722.  call temp:= `getAndSet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4f1728.  v0:= temp @kind object;
  #L4f172a.  v0:= (`io.reactivex.rxjava3.subjects.CompletableSubject`) v0 @kind object;
  #L4f172e.  if v0 == 0 then goto L4f1738;
  #L4f1732.  call `f`(v0, v1) @signature `Lio/reactivex/rxjava3/subjects/CompletableSubject;.f:(Lio/reactivex/rxjava3/subjects/CompletableSubject$a;)V` @kind virtual;
  #L4f1738.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.subjects.CompletableSubject$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/CompletableSubject$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f16d8.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f16de.  v0:= temp @kind object;
  #L4f16e0.  if v0 != 0 then goto L4f16e8;
  #L4f16e4.  v0:= 1I;
  #L4f16e6.  goto L4f16ea;
  #L4f16e8.  v0:= 0I;
  #L4f16ea.  return v0;
}
