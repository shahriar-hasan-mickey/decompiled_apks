record `io.reactivex.rxjava3.subjects.AsyncSubject` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.subjects.Subject` @kind class {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.subjects.AsyncSubject.a` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.rxjava3.subjects.AsyncSubject.b` @AccessFlag ;
  `java.lang.Object` `io.reactivex.rxjava3.subjects.AsyncSubject.c` @AccessFlag ;
}
global `io.reactivex.rxjava3.subjects.AsyncSubject$a`[] `@@io.reactivex.rxjava3.subjects.AsyncSubject.d` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.subjects.AsyncSubject$a`[] `@@io.reactivex.rxjava3.subjects.AsyncSubject.e` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/subjects/AsyncSubject;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4f0d10.  v0:= 0I;
  #L4f0d12.  v1:= new `io.reactivex.rxjava3.subjects.AsyncSubject$a`[v0];
  #L4f0d16.  `@@io.reactivex.rxjava3.subjects.AsyncSubject.d` @type ^`io.reactivex.rxjava3.subjects.AsyncSubject$a`[] := v1 @kind object;
  #L4f0d1a.  v0:= new `io.reactivex.rxjava3.subjects.AsyncSubject$a`[v0];
  #L4f0d1e.  `@@io.reactivex.rxjava3.subjects.AsyncSubject.e` @type ^`io.reactivex.rxjava3.subjects.AsyncSubject$a`[] := v0 @kind object;
  #L4f0d22.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.subjects.AsyncSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/AsyncSubject;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4f0d34.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/subjects/Subject;.<init>:()V` @kind direct;
  #L4f0d3a.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4f0d3e.  v1:= `@@io.reactivex.rxjava3.subjects.AsyncSubject.d` @type ^`io.reactivex.rxjava3.subjects.AsyncSubject$a`[] @kind object;
  #L4f0d42.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4f0d48.  v2.`io.reactivex.rxjava3.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4f0d4c.  return @kind void;
}
procedure `io.reactivex.rxjava3.subjects.AsyncSubject` `create`() @signature `Lio/reactivex/rxjava3/subjects/AsyncSubject;.create:()Lio/reactivex/rxjava3/subjects/AsyncSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4f0c94.  v0:= new `io.reactivex.rxjava3.subjects.AsyncSubject`;
  #L4f0c98.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/subjects/AsyncSubject;.<init>:()V` @kind direct;
  #L4f0c9e.  return v0 @kind object;
}
procedure `boolean` `d`(`io.reactivex.rxjava3.subjects.AsyncSubject` v4 @kind this, `io.reactivex.rxjava3.subjects.AsyncSubject$a` v5 @kind object) @signature `Lio/reactivex/rxjava3/subjects/AsyncSubject;.d:(Lio/reactivex/rxjava3/subjects/AsyncSubject$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f0b74.  v0:= v4.`io.reactivex.rxjava3.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f0b78.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f0b7e.  v0:= temp @kind object;
  #L4f0b80.  v0:= (`io.reactivex.rxjava3.subjects.AsyncSubject$a`[]) v0 @kind object;
  #L4f0b84.  v1:= `@@io.reactivex.rxjava3.subjects.AsyncSubject.e` @type ^`io.reactivex.rxjava3.subjects.AsyncSubject$a`[] @kind object;
  #L4f0b88.  v2:= 0I;
  #L4f0b8a.  if v0 != v1 then goto L4f0b90;
  #L4f0b8e.  return v2;
  #L4f0b90.  v1:= length @variable v0;
  #L4f0b92.  v3:= v1 + 1;
  #L4f0b96.  v3:= new `io.reactivex.rxjava3.subjects.AsyncSubject$a`[v3];
  #L4f0b9a.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f0ba0.  v3[v1]:= v5 @kind object;
  #L4f0ba4.  v1:= v4.`io.reactivex.rxjava3.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f0ba8.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f0bae.  v0:= temp;
  #L4f0bb0.  if v0 == 0 then goto L4f0b74;
  #L4f0bb4.  v5:= 1I;
  #L4f0bb6.  return v5;
}
procedure `void` `e`(`io.reactivex.rxjava3.subjects.AsyncSubject` v6 @kind this, `io.reactivex.rxjava3.subjects.AsyncSubject$a` v7 @kind object) @signature `Lio/reactivex/rxjava3/subjects/AsyncSubject;.e:(Lio/reactivex/rxjava3/subjects/AsyncSubject$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4f0ea0.  v0:= v6.`io.reactivex.rxjava3.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f0ea4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f0eaa.  v0:= temp @kind object;
  #L4f0eac.  v0:= (`io.reactivex.rxjava3.subjects.AsyncSubject$a`[]) v0 @kind object;
  #L4f0eb0.  v1:= length @variable v0;
  #L4f0eb2.  if v1 != 0 then goto L4f0eb8;
  #L4f0eb6.  return @kind void;
  #L4f0eb8.  v2:= -1I;
  #L4f0eba.  v3:= 0I;
  #L4f0ebc.  v4:= 0I;
  #L4f0ebe.  if v4 >= v1 then goto L4f0ed4;
  #L4f0ec2.  v5:= v0[v4] @kind object;
  #L4f0ec6.  if v5 != v7 then goto L4f0ece;
  #L4f0eca.  v2:= v4;
  #L4f0ecc.  goto L4f0ed4;
  #L4f0ece.  v4:= v4 + 1;
  #L4f0ed2.  goto L4f0ebe;
  #L4f0ed4.  if v2 >= 0 then goto L4f0eda;
  #L4f0ed8.  return @kind void;
  #L4f0eda.  v4:= 1I;
  #L4f0edc.  if v1 != v4 then goto L4f0ee6;
  #L4f0ee0.  v1:= `@@io.reactivex.rxjava3.subjects.AsyncSubject.d` @type ^`io.reactivex.rxjava3.subjects.AsyncSubject$a`[] @kind object;
  #L4f0ee4.  goto L4f0f04;
  #L4f0ee6.  v5:= v1 + -1;
  #L4f0eea.  v5:= new `io.reactivex.rxjava3.subjects.AsyncSubject$a`[v5];
  #L4f0eee.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f0ef4.  v3:= v2 + 1;
  #L4f0ef8.  v1:= v1 - v2 @kind int;
  #L4f0efa.  v1:= v1 - v4 @kind int;
  #L4f0efc.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f0f02.  v1:= v5 @kind object;
  #L4f0f04.  v2:= v6.`io.reactivex.rxjava3.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f0f08.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f0f0e.  v0:= temp;
  #L4f0f10.  if v0 == 0 then goto L4f0ea0;
  #L4f0f14.  return @kind void;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.rxjava3.subjects.AsyncSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/AsyncSubject;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f0ce0.  v0:= v2.`io.reactivex.rxjava3.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f0ce4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f0cea.  v0:= temp @kind object;
  #L4f0cec.  v1:= `@@io.reactivex.rxjava3.subjects.AsyncSubject.e` @type ^`io.reactivex.rxjava3.subjects.AsyncSubject$a`[] @kind object;
  #L4f0cf0.  if v0 != v1 then goto L4f0cfa;
  #L4f0cf4.  v0:= v2.`io.reactivex.rxjava3.subjects.AsyncSubject.b` @type ^`java.lang.Throwable` @kind object;
  #L4f0cf8.  goto L4f0cfc;
  #L4f0cfa.  v0:= 0I;
  #L4f0cfc.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.rxjava3.subjects.AsyncSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/AsyncSubject;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f0cb0.  v0:= v2.`io.reactivex.rxjava3.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f0cb4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f0cba.  v0:= temp @kind object;
  #L4f0cbc.  v1:= `@@io.reactivex.rxjava3.subjects.AsyncSubject.e` @type ^`io.reactivex.rxjava3.subjects.AsyncSubject$a`[] @kind object;
  #L4f0cc0.  if v0 != v1 then goto L4f0cca;
  #L4f0cc4.  v0:= v2.`io.reactivex.rxjava3.subjects.AsyncSubject.c` @type ^`java.lang.Object` @kind object;
  #L4f0cc8.  goto L4f0ccc;
  #L4f0cca.  v0:= 0I;
  #L4f0ccc.  return v0 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.rxjava3.subjects.AsyncSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/AsyncSubject;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f0bc8.  v0:= v2.`io.reactivex.rxjava3.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f0bcc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f0bd2.  v0:= temp @kind object;
  #L4f0bd4.  v1:= `@@io.reactivex.rxjava3.subjects.AsyncSubject.e` @type ^`io.reactivex.rxjava3.subjects.AsyncSubject$a`[] @kind object;
  #L4f0bd8.  if v0 != v1 then goto L4f0be8;
  #L4f0bdc.  v0:= v2.`io.reactivex.rxjava3.subjects.AsyncSubject.b` @type ^`java.lang.Throwable` @kind object;
  #L4f0be0.  if v0 != 0 then goto L4f0be8;
  #L4f0be4.  v0:= 1I;
  #L4f0be6.  goto L4f0bea;
  #L4f0be8.  v0:= 0I;
  #L4f0bea.  return v0;
}
procedure `boolean` `hasObservers`(`io.reactivex.rxjava3.subjects.AsyncSubject` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/AsyncSubject;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f0bfc.  v0:= v1.`io.reactivex.rxjava3.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f0c00.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f0c06.  v0:= temp @kind object;
  #L4f0c08.  v0:= (`io.reactivex.rxjava3.subjects.AsyncSubject$a`[]) v0 @kind object;
  #L4f0c0c.  v0:= length @variable v0;
  #L4f0c0e.  if v0 == 0 then goto L4f0c16;
  #L4f0c12.  v0:= 1I;
  #L4f0c14.  goto L4f0c18;
  #L4f0c16.  v0:= 0I;
  #L4f0c18.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.rxjava3.subjects.AsyncSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/AsyncSubject;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f0c2c.  v0:= v2.`io.reactivex.rxjava3.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f0c30.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f0c36.  v0:= temp @kind object;
  #L4f0c38.  v1:= `@@io.reactivex.rxjava3.subjects.AsyncSubject.e` @type ^`io.reactivex.rxjava3.subjects.AsyncSubject$a`[] @kind object;
  #L4f0c3c.  if v0 != v1 then goto L4f0c4c;
  #L4f0c40.  v0:= v2.`io.reactivex.rxjava3.subjects.AsyncSubject.b` @type ^`java.lang.Throwable` @kind object;
  #L4f0c44.  if v0 == 0 then goto L4f0c4c;
  #L4f0c48.  v0:= 1I;
  #L4f0c4a.  goto L4f0c4e;
  #L4f0c4c.  v0:= 0I;
  #L4f0c4e.  return v0;
}
procedure `boolean` `hasValue`(`io.reactivex.rxjava3.subjects.AsyncSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/AsyncSubject;.hasValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f0c60.  v0:= v2.`io.reactivex.rxjava3.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f0c64.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f0c6a.  v0:= temp @kind object;
  #L4f0c6c.  v1:= `@@io.reactivex.rxjava3.subjects.AsyncSubject.e` @type ^`io.reactivex.rxjava3.subjects.AsyncSubject$a`[] @kind object;
  #L4f0c70.  if v0 != v1 then goto L4f0c80;
  #L4f0c74.  v0:= v2.`io.reactivex.rxjava3.subjects.AsyncSubject.c` @type ^`java.lang.Object` @kind object;
  #L4f0c78.  if v0 == 0 then goto L4f0c80;
  #L4f0c7c.  v0:= 1I;
  #L4f0c7e.  goto L4f0c82;
  #L4f0c80.  v0:= 0I;
  #L4f0c82.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.subjects.AsyncSubject` v5 @kind this) @signature `Lio/reactivex/rxjava3/subjects/AsyncSubject;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4f0d60.  v0:= v5.`io.reactivex.rxjava3.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f0d64.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f0d6a.  v0:= temp @kind object;
  #L4f0d6c.  v1:= `@@io.reactivex.rxjava3.subjects.AsyncSubject.e` @type ^`io.reactivex.rxjava3.subjects.AsyncSubject$a`[] @kind object;
  #L4f0d70.  if v0 != v1 then goto L4f0d76;
  #L4f0d74.  return @kind void;
  #L4f0d76.  v0:= v5.`io.reactivex.rxjava3.subjects.AsyncSubject.c` @type ^`java.lang.Object` @kind object;
  #L4f0d7a.  v2:= v5.`io.reactivex.rxjava3.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f0d7e.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4f0d84.  v1:= temp @kind object;
  #L4f0d86.  v1:= (`io.reactivex.rxjava3.subjects.AsyncSubject$a`[]) v1 @kind object;
  #L4f0d8a.  v2:= 0I;
  #L4f0d8c.  if v0 != 0 then goto L4f0da6;
  #L4f0d90.  v0:= length @variable v1;
  #L4f0d92.  if v2 >= v0 then goto L4f0dbc;
  #L4f0d96.  v3:= v1[v2] @kind object;
  #L4f0d9a.  call `onComplete`(v3) @signature `Lio/reactivex/rxjava3/subjects/AsyncSubject$a;.onComplete:()V` @kind virtual;
  #L4f0da0.  v2:= v2 + 1;
  #L4f0da4.  goto L4f0d92;
  #L4f0da6.  v3:= length @variable v1;
  #L4f0da8.  if v2 >= v3 then goto L4f0dbc;
  #L4f0dac.  v4:= v1[v2] @kind object;
  #L4f0db0.  call `complete`(v4, v0) @signature `Lio/reactivex/rxjava3/internal/observers/DeferredScalarDisposable;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L4f0db6.  v2:= v2 + 1;
  #L4f0dba.  goto L4f0da8;
  #L4f0dbc.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.subjects.AsyncSubject` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/rxjava3/subjects/AsyncSubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f0dd0.  v0:= "onError called with a null Throwable." @kind object;
  #L4f0dd4.  call temp:= `nullCheck`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4f0dda.  v0:= v4.`io.reactivex.rxjava3.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f0dde.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f0de4.  v0:= temp @kind object;
  #L4f0de6.  v1:= `@@io.reactivex.rxjava3.subjects.AsyncSubject.e` @type ^`io.reactivex.rxjava3.subjects.AsyncSubject$a`[] @kind object;
  #L4f0dea.  if v0 != v1 then goto L4f0df6;
  #L4f0dee.  call `onError`(v5) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4f0df4.  return @kind void;
  #L4f0df6.  v0:= 0I;
  #L4f0df8.  v4.`io.reactivex.rxjava3.subjects.AsyncSubject.c` @type ^`java.lang.Object` := v0 @kind object;
  #L4f0dfc.  v4.`io.reactivex.rxjava3.subjects.AsyncSubject.b` @type ^`java.lang.Throwable` := v5 @kind object;
  #L4f0e00.  v0:= v4.`io.reactivex.rxjava3.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f0e04.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4f0e0a.  v0:= temp @kind object;
  #L4f0e0c.  v0:= (`io.reactivex.rxjava3.subjects.AsyncSubject$a`[]) v0 @kind object;
  #L4f0e10.  v1:= length @variable v0;
  #L4f0e12.  v2:= 0I;
  #L4f0e14.  if v2 >= v1 then goto L4f0e28;
  #L4f0e18.  v3:= v0[v2] @kind object;
  #L4f0e1c.  call `onError`(v3, v5) @signature `Lio/reactivex/rxjava3/subjects/AsyncSubject$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4f0e22.  v2:= v2 + 1;
  #L4f0e26.  goto L4f0e14;
  #L4f0e28.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.subjects.AsyncSubject` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/subjects/AsyncSubject;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f0e3c.  v0:= "onNext called with a null value." @kind object;
  #L4f0e40.  call temp:= `nullCheck`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4f0e46.  v0:= v2.`io.reactivex.rxjava3.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f0e4a.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f0e50.  v0:= temp @kind object;
  #L4f0e52.  v1:= `@@io.reactivex.rxjava3.subjects.AsyncSubject.e` @type ^`io.reactivex.rxjava3.subjects.AsyncSubject$a`[] @kind object;
  #L4f0e56.  if v0 != v1 then goto L4f0e5c;
  #L4f0e5a.  return @kind void;
  #L4f0e5c.  v2.`io.reactivex.rxjava3.subjects.AsyncSubject.c` @type ^`java.lang.Object` := v3 @kind object;
  #L4f0e60.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.subjects.AsyncSubject` v2 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/rxjava3/subjects/AsyncSubject;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f0e74.  v0:= v2.`io.reactivex.rxjava3.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f0e78.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f0e7e.  v0:= temp @kind object;
  #L4f0e80.  v1:= `@@io.reactivex.rxjava3.subjects.AsyncSubject.e` @type ^`io.reactivex.rxjava3.subjects.AsyncSubject$a`[] @kind object;
  #L4f0e84.  if v0 != v1 then goto L4f0e8e;
  #L4f0e88.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f0e8e.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.subjects.AsyncSubject` v2 @kind this, `io.reactivex.rxjava3.core.Observer` v3 @kind object) @signature `Lio/reactivex/rxjava3/subjects/AsyncSubject;.subscribeActual:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L4f0f28.  v0:= new `io.reactivex.rxjava3.subjects.AsyncSubject$a`;
  #L4f0f2c.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/rxjava3/subjects/AsyncSubject$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/subjects/AsyncSubject;)V` @kind direct;
  #L4f0f32.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4f0f38.  call temp:= `d`(v2, v0) @signature `Lio/reactivex/rxjava3/subjects/AsyncSubject;.d:(Lio/reactivex/rxjava3/subjects/AsyncSubject$a;)Z` @kind virtual;
  #L4f0f3e.  v1:= temp;
  #L4f0f40.  if v1 == 0 then goto L4f0f58;
  #L4f0f44.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/observers/DeferredScalarDisposable;.isDisposed:()Z` @kind virtual;
  #L4f0f4a.  v3:= temp;
  #L4f0f4c.  if v3 == 0 then goto L4f0f7e;
  #L4f0f50.  call `e`(v2, v0) @signature `Lio/reactivex/rxjava3/subjects/AsyncSubject;.e:(Lio/reactivex/rxjava3/subjects/AsyncSubject$a;)V` @kind virtual;
  #L4f0f56.  goto L4f0f7e;
  #L4f0f58.  v1:= v2.`io.reactivex.rxjava3.subjects.AsyncSubject.b` @type ^`java.lang.Throwable` @kind object;
  #L4f0f5c.  if v1 == 0 then goto L4f0f68;
  #L4f0f60.  call `onError`(v3, v1) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f0f66.  goto L4f0f7e;
  #L4f0f68.  v3:= v2.`io.reactivex.rxjava3.subjects.AsyncSubject.c` @type ^`java.lang.Object` @kind object;
  #L4f0f6c.  if v3 == 0 then goto L4f0f78;
  #L4f0f70.  call `complete`(v0, v3) @signature `Lio/reactivex/rxjava3/internal/observers/DeferredScalarDisposable;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L4f0f76.  goto L4f0f7e;
  #L4f0f78.  call `onComplete`(v0) @signature `Lio/reactivex/rxjava3/subjects/AsyncSubject$a;.onComplete:()V` @kind virtual;
  #L4f0f7e.  return @kind void;
}
