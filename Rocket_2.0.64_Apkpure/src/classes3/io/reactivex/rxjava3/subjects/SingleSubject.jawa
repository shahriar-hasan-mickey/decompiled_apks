record `io.reactivex.rxjava3.subjects.SingleSubject` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Single` @kind class, `io.reactivex.rxjava3.core.SingleObserver` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.subjects.SingleSubject.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.subjects.SingleSubject.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.subjects.SingleSubject.c` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.rxjava3.subjects.SingleSubject.d` @AccessFlag ;
}
global `io.reactivex.rxjava3.subjects.SingleSubject$a`[] `@@io.reactivex.rxjava3.subjects.SingleSubject.e` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.subjects.SingleSubject$a`[] `@@io.reactivex.rxjava3.subjects.SingleSubject.f` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/subjects/SingleSubject;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4f3a48.  v0:= 0I;
  #L4f3a4a.  v1:= new `io.reactivex.rxjava3.subjects.SingleSubject$a`[v0];
  #L4f3a4e.  `@@io.reactivex.rxjava3.subjects.SingleSubject.e` @type ^`io.reactivex.rxjava3.subjects.SingleSubject$a`[] := v1 @kind object;
  #L4f3a52.  v0:= new `io.reactivex.rxjava3.subjects.SingleSubject$a`[v0];
  #L4f3a56.  `@@io.reactivex.rxjava3.subjects.SingleSubject.f` @type ^`io.reactivex.rxjava3.subjects.SingleSubject$a`[] := v0 @kind object;
  #L4f3a5a.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.subjects.SingleSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/SingleSubject;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4f3a6c.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/core/Single;.<init>:()V` @kind direct;
  #L4f3a72.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4f3a76.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4f3a7c.  v2.`io.reactivex.rxjava3.subjects.SingleSubject.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L4f3a80.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4f3a84.  v1:= `@@io.reactivex.rxjava3.subjects.SingleSubject.e` @type ^`io.reactivex.rxjava3.subjects.SingleSubject$a`[] @kind object;
  #L4f3a88.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4f3a8e.  v2.`io.reactivex.rxjava3.subjects.SingleSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4f3a92.  return @kind void;
}
procedure `io.reactivex.rxjava3.subjects.SingleSubject` `create`() @signature `Lio/reactivex/rxjava3/subjects/SingleSubject;.create:()Lio/reactivex/rxjava3/subjects/SingleSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4f39cc.  v0:= new `io.reactivex.rxjava3.subjects.SingleSubject`;
  #L4f39d0.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/subjects/SingleSubject;.<init>:()V` @kind direct;
  #L4f39d6.  return v0 @kind object;
}
procedure `boolean` `c`(`io.reactivex.rxjava3.subjects.SingleSubject` v4 @kind this, `io.reactivex.rxjava3.subjects.SingleSubject$a` v5 @kind object) @signature `Lio/reactivex/rxjava3/subjects/SingleSubject;.c:(Lio/reactivex/rxjava3/subjects/SingleSubject$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f38e0.  v0:= v4.`io.reactivex.rxjava3.subjects.SingleSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f38e4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f38ea.  v0:= temp @kind object;
  #L4f38ec.  v0:= (`io.reactivex.rxjava3.subjects.SingleSubject$a`[]) v0 @kind object;
  #L4f38f0.  v1:= `@@io.reactivex.rxjava3.subjects.SingleSubject.f` @type ^`io.reactivex.rxjava3.subjects.SingleSubject$a`[] @kind object;
  #L4f38f4.  v2:= 0I;
  #L4f38f6.  if v0 != v1 then goto L4f38fc;
  #L4f38fa.  return v2;
  #L4f38fc.  v1:= length @variable v0;
  #L4f38fe.  v3:= v1 + 1;
  #L4f3902.  v3:= new `io.reactivex.rxjava3.subjects.SingleSubject$a`[v3];
  #L4f3906.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f390c.  v3[v1]:= v5 @kind object;
  #L4f3910.  v1:= v4.`io.reactivex.rxjava3.subjects.SingleSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f3914.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f391a.  v0:= temp;
  #L4f391c.  if v0 == 0 then goto L4f38e0;
  #L4f3920.  v5:= 1I;
  #L4f3922.  return v5;
}
procedure `void` `d`(`io.reactivex.rxjava3.subjects.SingleSubject` v6 @kind this, `io.reactivex.rxjava3.subjects.SingleSubject$a` v7 @kind object) @signature `Lio/reactivex/rxjava3/subjects/SingleSubject;.d:(Lio/reactivex/rxjava3/subjects/SingleSubject$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4f3b9c.  v0:= v6.`io.reactivex.rxjava3.subjects.SingleSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f3ba0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f3ba6.  v0:= temp @kind object;
  #L4f3ba8.  v0:= (`io.reactivex.rxjava3.subjects.SingleSubject$a`[]) v0 @kind object;
  #L4f3bac.  v1:= length @variable v0;
  #L4f3bae.  if v1 != 0 then goto L4f3bb4;
  #L4f3bb2.  return @kind void;
  #L4f3bb4.  v2:= -1I;
  #L4f3bb6.  v3:= 0I;
  #L4f3bb8.  v4:= 0I;
  #L4f3bba.  if v4 >= v1 then goto L4f3bd0;
  #L4f3bbe.  v5:= v0[v4] @kind object;
  #L4f3bc2.  if v5 != v7 then goto L4f3bca;
  #L4f3bc6.  v2:= v4;
  #L4f3bc8.  goto L4f3bd0;
  #L4f3bca.  v4:= v4 + 1;
  #L4f3bce.  goto L4f3bba;
  #L4f3bd0.  if v2 >= 0 then goto L4f3bd6;
  #L4f3bd4.  return @kind void;
  #L4f3bd6.  v4:= 1I;
  #L4f3bd8.  if v1 != v4 then goto L4f3be2;
  #L4f3bdc.  v1:= `@@io.reactivex.rxjava3.subjects.SingleSubject.e` @type ^`io.reactivex.rxjava3.subjects.SingleSubject$a`[] @kind object;
  #L4f3be0.  goto L4f3c00;
  #L4f3be2.  v5:= v1 + -1;
  #L4f3be6.  v5:= new `io.reactivex.rxjava3.subjects.SingleSubject$a`[v5];
  #L4f3bea.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f3bf0.  v3:= v2 + 1;
  #L4f3bf4.  v1:= v1 - v2 @kind int;
  #L4f3bf6.  v1:= v1 - v4 @kind int;
  #L4f3bf8.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f3bfe.  v1:= v5 @kind object;
  #L4f3c00.  v2:= v6.`io.reactivex.rxjava3.subjects.SingleSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f3c04.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f3c0a.  v0:= temp;
  #L4f3c0c.  if v0 == 0 then goto L4f3b9c;
  #L4f3c10.  return @kind void;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.rxjava3.subjects.SingleSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/SingleSubject;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f3a18.  v0:= v2.`io.reactivex.rxjava3.subjects.SingleSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f3a1c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f3a22.  v0:= temp @kind object;
  #L4f3a24.  v1:= `@@io.reactivex.rxjava3.subjects.SingleSubject.f` @type ^`io.reactivex.rxjava3.subjects.SingleSubject$a`[] @kind object;
  #L4f3a28.  if v0 != v1 then goto L4f3a32;
  #L4f3a2c.  v0:= v2.`io.reactivex.rxjava3.subjects.SingleSubject.d` @type ^`java.lang.Throwable` @kind object;
  #L4f3a30.  return v0 @kind object;
  #L4f3a32.  v0:= 0I;
  #L4f3a34.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.rxjava3.subjects.SingleSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/SingleSubject;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f39e8.  v0:= v2.`io.reactivex.rxjava3.subjects.SingleSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f39ec.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f39f2.  v0:= temp @kind object;
  #L4f39f4.  v1:= `@@io.reactivex.rxjava3.subjects.SingleSubject.f` @type ^`io.reactivex.rxjava3.subjects.SingleSubject$a`[] @kind object;
  #L4f39f8.  if v0 != v1 then goto L4f3a02;
  #L4f39fc.  v0:= v2.`io.reactivex.rxjava3.subjects.SingleSubject.c` @type ^`java.lang.Object` @kind object;
  #L4f3a00.  return v0 @kind object;
  #L4f3a02.  v0:= 0I;
  #L4f3a04.  return v0 @kind object;
}
procedure `boolean` `hasObservers`(`io.reactivex.rxjava3.subjects.SingleSubject` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/SingleSubject;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f3934.  v0:= v1.`io.reactivex.rxjava3.subjects.SingleSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f3938.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f393e.  v0:= temp @kind object;
  #L4f3940.  v0:= (`io.reactivex.rxjava3.subjects.SingleSubject$a`[]) v0 @kind object;
  #L4f3944.  v0:= length @variable v0;
  #L4f3946.  if v0 == 0 then goto L4f394e;
  #L4f394a.  v0:= 1I;
  #L4f394c.  goto L4f3950;
  #L4f394e.  v0:= 0I;
  #L4f3950.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.rxjava3.subjects.SingleSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/SingleSubject;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f3964.  v0:= v2.`io.reactivex.rxjava3.subjects.SingleSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f3968.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f396e.  v0:= temp @kind object;
  #L4f3970.  v1:= `@@io.reactivex.rxjava3.subjects.SingleSubject.f` @type ^`io.reactivex.rxjava3.subjects.SingleSubject$a`[] @kind object;
  #L4f3974.  if v0 != v1 then goto L4f3984;
  #L4f3978.  v0:= v2.`io.reactivex.rxjava3.subjects.SingleSubject.d` @type ^`java.lang.Throwable` @kind object;
  #L4f397c.  if v0 == 0 then goto L4f3984;
  #L4f3980.  v0:= 1I;
  #L4f3982.  goto L4f3986;
  #L4f3984.  v0:= 0I;
  #L4f3986.  return v0;
}
procedure `boolean` `hasValue`(`io.reactivex.rxjava3.subjects.SingleSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/SingleSubject;.hasValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f3998.  v0:= v2.`io.reactivex.rxjava3.subjects.SingleSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f399c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f39a2.  v0:= temp @kind object;
  #L4f39a4.  v1:= `@@io.reactivex.rxjava3.subjects.SingleSubject.f` @type ^`io.reactivex.rxjava3.subjects.SingleSubject$a`[] @kind object;
  #L4f39a8.  if v0 != v1 then goto L4f39b8;
  #L4f39ac.  v0:= v2.`io.reactivex.rxjava3.subjects.SingleSubject.c` @type ^`java.lang.Object` @kind object;
  #L4f39b0.  if v0 == 0 then goto L4f39b8;
  #L4f39b4.  v0:= 1I;
  #L4f39b6.  goto L4f39ba;
  #L4f39b8.  v0:= 0I;
  #L4f39ba.  return v0;
}
procedure `void` `onError`(`io.reactivex.rxjava3.subjects.SingleSubject` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/rxjava3/subjects/SingleSubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f3aa4.  v0:= "onError called with a null Throwable." @kind object;
  #L4f3aa8.  call temp:= `nullCheck`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4f3aae.  v0:= v4.`io.reactivex.rxjava3.subjects.SingleSubject.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4f3ab2.  v1:= 0I;
  #L4f3ab4.  v2:= 1I;
  #L4f3ab6.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4f3abc.  v0:= temp;
  #L4f3abe.  if v0 == 0 then goto L4f3af4;
  #L4f3ac2.  v4.`io.reactivex.rxjava3.subjects.SingleSubject.d` @type ^`java.lang.Throwable` := v5 @kind object;
  #L4f3ac6.  v0:= v4.`io.reactivex.rxjava3.subjects.SingleSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f3aca.  v2:= `@@io.reactivex.rxjava3.subjects.SingleSubject.f` @type ^`io.reactivex.rxjava3.subjects.SingleSubject$a`[] @kind object;
  #L4f3ace.  call temp:= `getAndSet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4f3ad4.  v0:= temp @kind object;
  #L4f3ad6.  v0:= (`io.reactivex.rxjava3.subjects.SingleSubject$a`[]) v0 @kind object;
  #L4f3ada.  v2:= length @variable v0;
  #L4f3adc.  if v1 >= v2 then goto L4f3afa;
  #L4f3ae0.  v3:= v0[v1] @kind object;
  #L4f3ae4.  v3:= v3.`io.reactivex.rxjava3.subjects.SingleSubject$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4f3ae8.  call `onError`(v3, v5) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f3aee.  v1:= v1 + 1;
  #L4f3af2.  goto L4f3adc;
  #L4f3af4.  call `onError`(v5) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4f3afa.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.subjects.SingleSubject` v2 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/rxjava3/subjects/SingleSubject;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f3b0c.  v0:= v2.`io.reactivex.rxjava3.subjects.SingleSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f3b10.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f3b16.  v0:= temp @kind object;
  #L4f3b18.  v1:= `@@io.reactivex.rxjava3.subjects.SingleSubject.f` @type ^`io.reactivex.rxjava3.subjects.SingleSubject$a`[] @kind object;
  #L4f3b1c.  if v0 != v1 then goto L4f3b26;
  #L4f3b20.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f3b26.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.rxjava3.subjects.SingleSubject` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/subjects/SingleSubject;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f3b38.  v0:= "onSuccess called with a null value." @kind object;
  #L4f3b3c.  call temp:= `nullCheck`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4f3b42.  v0:= v4.`io.reactivex.rxjava3.subjects.SingleSubject.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4f3b46.  v1:= 0I;
  #L4f3b48.  v2:= 1I;
  #L4f3b4a.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4f3b50.  v0:= temp;
  #L4f3b52.  if v0 == 0 then goto L4f3b88;
  #L4f3b56.  v4.`io.reactivex.rxjava3.subjects.SingleSubject.c` @type ^`java.lang.Object` := v5 @kind object;
  #L4f3b5a.  v0:= v4.`io.reactivex.rxjava3.subjects.SingleSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f3b5e.  v2:= `@@io.reactivex.rxjava3.subjects.SingleSubject.f` @type ^`io.reactivex.rxjava3.subjects.SingleSubject$a`[] @kind object;
  #L4f3b62.  call temp:= `getAndSet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4f3b68.  v0:= temp @kind object;
  #L4f3b6a.  v0:= (`io.reactivex.rxjava3.subjects.SingleSubject$a`[]) v0 @kind object;
  #L4f3b6e.  v2:= length @variable v0;
  #L4f3b70.  if v1 >= v2 then goto L4f3b88;
  #L4f3b74.  v3:= v0[v1] @kind object;
  #L4f3b78.  v3:= v3.`io.reactivex.rxjava3.subjects.SingleSubject$a.a` @type ^`io.reactivex.rxjava3.core.SingleObserver` @kind object;
  #L4f3b7c.  call `onSuccess`(v3, v5) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4f3b82.  v1:= v1 + 1;
  #L4f3b86.  goto L4f3b70;
  #L4f3b88.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.subjects.SingleSubject` v2 @kind this, `io.reactivex.rxjava3.core.SingleObserver` v3 @kind object) @signature `Lio/reactivex/rxjava3/subjects/SingleSubject;.subscribeActual:(Lio/reactivex/rxjava3/core/SingleObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L4f3c24.  v0:= new `io.reactivex.rxjava3.subjects.SingleSubject$a`;
  #L4f3c28.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/rxjava3/subjects/SingleSubject$a;.<init>:(Lio/reactivex/rxjava3/core/SingleObserver;Lio/reactivex/rxjava3/subjects/SingleSubject;)V` @kind direct;
  #L4f3c2e.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4f3c34.  call temp:= `c`(v2, v0) @signature `Lio/reactivex/rxjava3/subjects/SingleSubject;.c:(Lio/reactivex/rxjava3/subjects/SingleSubject$a;)Z` @kind virtual;
  #L4f3c3a.  v1:= temp;
  #L4f3c3c.  if v1 == 0 then goto L4f3c54;
  #L4f3c40.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/subjects/SingleSubject$a;.isDisposed:()Z` @kind virtual;
  #L4f3c46.  v3:= temp;
  #L4f3c48.  if v3 == 0 then goto L4f3c6e;
  #L4f3c4c.  call `d`(v2, v0) @signature `Lio/reactivex/rxjava3/subjects/SingleSubject;.d:(Lio/reactivex/rxjava3/subjects/SingleSubject$a;)V` @kind virtual;
  #L4f3c52.  goto L4f3c6e;
  #L4f3c54.  v0:= v2.`io.reactivex.rxjava3.subjects.SingleSubject.d` @type ^`java.lang.Throwable` @kind object;
  #L4f3c58.  if v0 == 0 then goto L4f3c64;
  #L4f3c5c.  call `onError`(v3, v0) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f3c62.  goto L4f3c6e;
  #L4f3c64.  v0:= v2.`io.reactivex.rxjava3.subjects.SingleSubject.c` @type ^`java.lang.Object` @kind object;
  #L4f3c68.  call `onSuccess`(v3, v0) @signature `Lio/reactivex/rxjava3/core/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4f3c6e.  return @kind void;
}
