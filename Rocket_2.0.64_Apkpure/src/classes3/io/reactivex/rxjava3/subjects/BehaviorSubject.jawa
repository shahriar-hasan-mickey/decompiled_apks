record `io.reactivex.rxjava3.subjects.BehaviorSubject` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.subjects.Subject` @kind class {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.subjects.BehaviorSubject.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.subjects.BehaviorSubject.b` @AccessFlag FINAL;
  `java.util.concurrent.locks.ReadWriteLock` `io.reactivex.rxjava3.subjects.BehaviorSubject.c` @AccessFlag FINAL;
  `java.util.concurrent.locks.Lock` `io.reactivex.rxjava3.subjects.BehaviorSubject.d` @AccessFlag FINAL;
  `java.util.concurrent.locks.Lock` `io.reactivex.rxjava3.subjects.BehaviorSubject.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.subjects.BehaviorSubject.f` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.subjects.BehaviorSubject.g` @AccessFlag ;
}
global `io.reactivex.rxjava3.subjects.BehaviorSubject$a`[] `@@io.reactivex.rxjava3.subjects.BehaviorSubject.h` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.subjects.BehaviorSubject$a`[] `@@io.reactivex.rxjava3.subjects.BehaviorSubject.i` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4f13c8.  v0:= 0I;
  #L4f13ca.  v1:= new `io.reactivex.rxjava3.subjects.BehaviorSubject$a`[v0];
  #L4f13ce.  `@@io.reactivex.rxjava3.subjects.BehaviorSubject.h` @type ^`io.reactivex.rxjava3.subjects.BehaviorSubject$a`[] := v1 @kind object;
  #L4f13d2.  v0:= new `io.reactivex.rxjava3.subjects.BehaviorSubject$a`[v0];
  #L4f13d6.  `@@io.reactivex.rxjava3.subjects.BehaviorSubject.i` @type ^`io.reactivex.rxjava3.subjects.BehaviorSubject$a`[] := v0 @kind object;
  #L4f13da.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.subjects.BehaviorSubject` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.<init>:(Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4f13ec.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/subjects/Subject;.<init>:()V` @kind direct;
  #L4f13f2.  v0:= new `java.util.concurrent.locks.ReentrantReadWriteLock`;
  #L4f13f6.  call `<init>`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.<init>:()V` @kind direct;
  #L4f13fc.  v2.`io.reactivex.rxjava3.subjects.BehaviorSubject.c` @type ^`java.util.concurrent.locks.ReadWriteLock` := v0 @kind object;
  #L4f1400.  call temp:= `readLock`(v0) @signature `Ljava/util/concurrent/locks/ReadWriteLock;.readLock:()Ljava/util/concurrent/locks/Lock;` @kind interface;
  #L4f1406.  v1:= temp @kind object;
  #L4f1408.  v2.`io.reactivex.rxjava3.subjects.BehaviorSubject.d` @type ^`java.util.concurrent.locks.Lock` := v1 @kind object;
  #L4f140c.  call temp:= `writeLock`(v0) @signature `Ljava/util/concurrent/locks/ReadWriteLock;.writeLock:()Ljava/util/concurrent/locks/Lock;` @kind interface;
  #L4f1412.  v0:= temp @kind object;
  #L4f1414.  v2.`io.reactivex.rxjava3.subjects.BehaviorSubject.e` @type ^`java.util.concurrent.locks.Lock` := v0 @kind object;
  #L4f1418.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4f141c.  v1:= `@@io.reactivex.rxjava3.subjects.BehaviorSubject.h` @type ^`io.reactivex.rxjava3.subjects.BehaviorSubject$a`[] @kind object;
  #L4f1420.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4f1426.  v2.`io.reactivex.rxjava3.subjects.BehaviorSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4f142a.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4f142e.  call `<init>`(v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4f1434.  v2.`io.reactivex.rxjava3.subjects.BehaviorSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4f1438.  v3:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4f143c.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4f1442.  v2.`io.reactivex.rxjava3.subjects.BehaviorSubject.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L4f1446.  return @kind void;
}
procedure `io.reactivex.rxjava3.subjects.BehaviorSubject` `create`() @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.create:()Lio/reactivex/rxjava3/subjects/BehaviorSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4f12d8.  v0:= new `io.reactivex.rxjava3.subjects.BehaviorSubject`;
  #L4f12dc.  v1:= 0I;
  #L4f12de.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4f12e4.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.subjects.BehaviorSubject` `createDefault`(`java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.createDefault:(Ljava/lang/Object;)Lio/reactivex/rxjava3/subjects/BehaviorSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4f12f8.  v0:= "defaultValue is null" @kind object;
  #L4f12fc.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4f1302.  v0:= new `io.reactivex.rxjava3.subjects.BehaviorSubject`;
  #L4f1306.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4f130c.  return v0 @kind object;
}
procedure `boolean` `d`(`io.reactivex.rxjava3.subjects.BehaviorSubject` v4 @kind this, `io.reactivex.rxjava3.subjects.BehaviorSubject$a` v5 @kind object) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.d:(Lio/reactivex/rxjava3/subjects/BehaviorSubject$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f11c4.  v0:= v4.`io.reactivex.rxjava3.subjects.BehaviorSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f11c8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f11ce.  v0:= temp @kind object;
  #L4f11d0.  v0:= (`io.reactivex.rxjava3.subjects.BehaviorSubject$a`[]) v0 @kind object;
  #L4f11d4.  v1:= `@@io.reactivex.rxjava3.subjects.BehaviorSubject.i` @type ^`io.reactivex.rxjava3.subjects.BehaviorSubject$a`[] @kind object;
  #L4f11d8.  v2:= 0I;
  #L4f11da.  if v0 != v1 then goto L4f11e0;
  #L4f11de.  return v2;
  #L4f11e0.  v1:= length @variable v0;
  #L4f11e2.  v3:= v1 + 1;
  #L4f11e6.  v3:= new `io.reactivex.rxjava3.subjects.BehaviorSubject$a`[v3];
  #L4f11ea.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f11f0.  v3[v1]:= v5 @kind object;
  #L4f11f4.  v1:= v4.`io.reactivex.rxjava3.subjects.BehaviorSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f11f8.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f11fe.  v0:= temp;
  #L4f1200.  if v0 == 0 then goto L4f11c4;
  #L4f1204.  v5:= 1I;
  #L4f1206.  return v5;
}
procedure `void` `e`(`io.reactivex.rxjava3.subjects.BehaviorSubject` v6 @kind this, `io.reactivex.rxjava3.subjects.BehaviorSubject$a` v7 @kind object) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.e:(Lio/reactivex/rxjava3/subjects/BehaviorSubject$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4f15a4.  v0:= v6.`io.reactivex.rxjava3.subjects.BehaviorSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f15a8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f15ae.  v0:= temp @kind object;
  #L4f15b0.  v0:= (`io.reactivex.rxjava3.subjects.BehaviorSubject$a`[]) v0 @kind object;
  #L4f15b4.  v1:= length @variable v0;
  #L4f15b6.  if v1 != 0 then goto L4f15bc;
  #L4f15ba.  return @kind void;
  #L4f15bc.  v2:= -1I;
  #L4f15be.  v3:= 0I;
  #L4f15c0.  v4:= 0I;
  #L4f15c2.  if v4 >= v1 then goto L4f15d8;
  #L4f15c6.  v5:= v0[v4] @kind object;
  #L4f15ca.  if v5 != v7 then goto L4f15d2;
  #L4f15ce.  v2:= v4;
  #L4f15d0.  goto L4f15d8;
  #L4f15d2.  v4:= v4 + 1;
  #L4f15d6.  goto L4f15c2;
  #L4f15d8.  if v2 >= 0 then goto L4f15de;
  #L4f15dc.  return @kind void;
  #L4f15de.  v4:= 1I;
  #L4f15e0.  if v1 != v4 then goto L4f15ea;
  #L4f15e4.  v1:= `@@io.reactivex.rxjava3.subjects.BehaviorSubject.h` @type ^`io.reactivex.rxjava3.subjects.BehaviorSubject$a`[] @kind object;
  #L4f15e8.  goto L4f1608;
  #L4f15ea.  v5:= v1 + -1;
  #L4f15ee.  v5:= new `io.reactivex.rxjava3.subjects.BehaviorSubject$a`[v5];
  #L4f15f2.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f15f8.  v3:= v2 + 1;
  #L4f15fc.  v1:= v1 - v2 @kind int;
  #L4f15fe.  v1:= v1 - v4 @kind int;
  #L4f1600.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f1606.  v1:= v5 @kind object;
  #L4f1608.  v2:= v6.`io.reactivex.rxjava3.subjects.BehaviorSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f160c.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f1612.  v0:= temp;
  #L4f1614.  if v0 == 0 then goto L4f15a4;
  #L4f1618.  return @kind void;
}
procedure `void` `f`(`io.reactivex.rxjava3.subjects.BehaviorSubject` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.f:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f162c.  v0:= v4.`io.reactivex.rxjava3.subjects.BehaviorSubject.e` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L4f1630.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L4f1636.  v0:= v4.`io.reactivex.rxjava3.subjects.BehaviorSubject.g` @type ^`long` @kind wide;
  #L4f163a.  v2:= 1L;
  #L4f163e.  v0:= v0 + v2 @kind long;
  #L4f1640.  v4.`io.reactivex.rxjava3.subjects.BehaviorSubject.g` @type ^`long` := v0 @kind wide;
  #L4f1644.  v0:= v4.`io.reactivex.rxjava3.subjects.BehaviorSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f1648.  call `lazySet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4f164e.  v5:= v4.`io.reactivex.rxjava3.subjects.BehaviorSubject.e` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L4f1652.  call `unlock`(v5) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L4f1658.  return @kind void;
}
procedure `io.reactivex.rxjava3.subjects.BehaviorSubject$a`[] `g`(`io.reactivex.rxjava3.subjects.BehaviorSubject` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.g:(Ljava/lang/Object;)[Lio/reactivex/rxjava3/subjects/BehaviorSubject$a;` @AccessFlag  {
    temp;
    v0;

  #L4f1320.  call `f`(v1, v2) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.f:(Ljava/lang/Object;)V` @kind virtual;
  #L4f1326.  v2:= v1.`io.reactivex.rxjava3.subjects.BehaviorSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f132a.  v0:= `@@io.reactivex.rxjava3.subjects.BehaviorSubject.i` @type ^`io.reactivex.rxjava3.subjects.BehaviorSubject$a`[] @kind object;
  #L4f132e.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4f1334.  v2:= temp @kind object;
  #L4f1336.  v2:= (`io.reactivex.rxjava3.subjects.BehaviorSubject$a`[]) v2 @kind object;
  #L4f133a.  return v2 @kind object;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.rxjava3.subjects.BehaviorSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f1390.  v0:= v2.`io.reactivex.rxjava3.subjects.BehaviorSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f1394.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f139a.  v0:= temp @kind object;
  #L4f139c.  call temp:= `isError`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4f13a2.  v1:= temp;
  #L4f13a4.  if v1 == 0 then goto L4f13b2;
  #L4f13a8.  call temp:= `getError`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L4f13ae.  v0:= temp @kind object;
  #L4f13b0.  return v0 @kind object;
  #L4f13b2.  v0:= 0I;
  #L4f13b4.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.rxjava3.subjects.BehaviorSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f134c.  v0:= v2.`io.reactivex.rxjava3.subjects.BehaviorSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f1350.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f1356.  v0:= temp @kind object;
  #L4f1358.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4f135e.  v1:= temp;
  #L4f1360.  if v1 != 0 then goto L4f137c;
  #L4f1364.  call temp:= `isError`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4f136a.  v1:= temp;
  #L4f136c.  if v1 == 0 then goto L4f1372;
  #L4f1370.  goto L4f137c;
  #L4f1372.  call temp:= `getValue`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4f1378.  v0:= temp @kind object;
  #L4f137a.  return v0 @kind object;
  #L4f137c.  v0:= 0I;
  #L4f137e.  return v0 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.rxjava3.subjects.BehaviorSubject` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f1218.  v0:= v1.`io.reactivex.rxjava3.subjects.BehaviorSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f121c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f1222.  v0:= temp @kind object;
  #L4f1224.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4f122a.  v0:= temp;
  #L4f122c.  return v0;
}
procedure `boolean` `hasObservers`(`io.reactivex.rxjava3.subjects.BehaviorSubject` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f1240.  v0:= v1.`io.reactivex.rxjava3.subjects.BehaviorSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f1244.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f124a.  v0:= temp @kind object;
  #L4f124c.  v0:= (`io.reactivex.rxjava3.subjects.BehaviorSubject$a`[]) v0 @kind object;
  #L4f1250.  v0:= length @variable v0;
  #L4f1252.  if v0 == 0 then goto L4f125a;
  #L4f1256.  v0:= 1I;
  #L4f1258.  goto L4f125c;
  #L4f125a.  v0:= 0I;
  #L4f125c.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.rxjava3.subjects.BehaviorSubject` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f1270.  v0:= v1.`io.reactivex.rxjava3.subjects.BehaviorSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f1274.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f127a.  v0:= temp @kind object;
  #L4f127c.  call temp:= `isError`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4f1282.  v0:= temp;
  #L4f1284.  return v0;
}
procedure `boolean` `hasValue`(`io.reactivex.rxjava3.subjects.BehaviorSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.hasValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f1298.  v0:= v2.`io.reactivex.rxjava3.subjects.BehaviorSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f129c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f12a2.  v0:= temp @kind object;
  #L4f12a4.  if v0 == 0 then goto L4f12c4;
  #L4f12a8.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4f12ae.  v1:= temp;
  #L4f12b0.  if v1 != 0 then goto L4f12c4;
  #L4f12b4.  call temp:= `isError`(v0) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4f12ba.  v0:= temp;
  #L4f12bc.  if v0 != 0 then goto L4f12c4;
  #L4f12c0.  v0:= 1I;
  #L4f12c2.  goto L4f12c6;
  #L4f12c4.  v0:= 0I;
  #L4f12c6.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.subjects.BehaviorSubject` v7 @kind this) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4f1458.  v0:= v7.`io.reactivex.rxjava3.subjects.BehaviorSubject.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f145c.  v1:= `@@io.reactivex.rxjava3.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L4f1460.  v2:= 0I;
  #L4f1462.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f1468.  v0:= temp;
  #L4f146a.  if v0 != 0 then goto L4f1470;
  #L4f146e.  return @kind void;
  #L4f1470.  call temp:= `complete`() @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L4f1476.  v0:= temp @kind object;
  #L4f1478.  call temp:= `g`(v7, v0) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.g:(Ljava/lang/Object;)[Lio/reactivex/rxjava3/subjects/BehaviorSubject$a;` @kind virtual;
  #L4f147e.  v1:= temp @kind object;
  #L4f1480.  v2:= length @variable v1;
  #L4f1482.  v3:= 0I;
  #L4f1484.  if v3 >= v2 then goto L4f149c;
  #L4f1488.  v4:= v1[v3] @kind object;
  #L4f148c.  v5:= v7.`io.reactivex.rxjava3.subjects.BehaviorSubject.g` @type ^`long` @kind wide;
  #L4f1490.  call `c`(v4, v0, v5) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject$a;.c:(Ljava/lang/Object;J)V` @kind virtual;
  #L4f1496.  v3:= v3 + 1;
  #L4f149a.  goto L4f1484;
  #L4f149c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.subjects.BehaviorSubject` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4f14b0.  v0:= "onError called with a null Throwable." @kind object;
  #L4f14b4.  call temp:= `nullCheck`(v7, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4f14ba.  v0:= v6.`io.reactivex.rxjava3.subjects.BehaviorSubject.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f14be.  v1:= 0I;
  #L4f14c0.  call temp:= `compareAndSet`(v0, v1, v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f14c6.  v0:= temp;
  #L4f14c8.  if v0 != 0 then goto L4f14d4;
  #L4f14cc.  call `onError`(v7) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4f14d2.  return @kind void;
  #L4f14d4.  call temp:= `error`(v7) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L4f14da.  v7:= temp @kind object;
  #L4f14dc.  call temp:= `g`(v6, v7) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.g:(Ljava/lang/Object;)[Lio/reactivex/rxjava3/subjects/BehaviorSubject$a;` @kind virtual;
  #L4f14e2.  v0:= temp @kind object;
  #L4f14e4.  v1:= length @variable v0;
  #L4f14e6.  v2:= 0I;
  #L4f14e8.  if v2 >= v1 then goto L4f1500;
  #L4f14ec.  v3:= v0[v2] @kind object;
  #L4f14f0.  v4:= v6.`io.reactivex.rxjava3.subjects.BehaviorSubject.g` @type ^`long` @kind wide;
  #L4f14f4.  call `c`(v3, v7, v4) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject$a;.c:(Ljava/lang/Object;J)V` @kind virtual;
  #L4f14fa.  v2:= v2 + 1;
  #L4f14fe.  goto L4f14e8;
  #L4f1500.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.subjects.BehaviorSubject` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4f1514.  v0:= "onNext called with a null value." @kind object;
  #L4f1518.  call temp:= `nullCheck`(v7, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4f151e.  v0:= v6.`io.reactivex.rxjava3.subjects.BehaviorSubject.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f1522.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f1528.  v0:= temp @kind object;
  #L4f152a.  if v0 == 0 then goto L4f1530;
  #L4f152e.  return @kind void;
  #L4f1530.  call temp:= `next`(v7) @signature `Lio/reactivex/rxjava3/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4f1536.  v7:= temp @kind object;
  #L4f1538.  call `f`(v6, v7) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.f:(Ljava/lang/Object;)V` @kind virtual;
  #L4f153e.  v0:= v6.`io.reactivex.rxjava3.subjects.BehaviorSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f1542.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f1548.  v0:= temp @kind object;
  #L4f154a.  v0:= (`io.reactivex.rxjava3.subjects.BehaviorSubject$a`[]) v0 @kind object;
  #L4f154e.  v1:= length @variable v0;
  #L4f1550.  v2:= 0I;
  #L4f1552.  if v2 >= v1 then goto L4f156a;
  #L4f1556.  v3:= v0[v2] @kind object;
  #L4f155a.  v4:= v6.`io.reactivex.rxjava3.subjects.BehaviorSubject.g` @type ^`long` @kind wide;
  #L4f155e.  call `c`(v3, v7, v4) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject$a;.c:(Ljava/lang/Object;J)V` @kind virtual;
  #L4f1564.  v2:= v2 + 1;
  #L4f1568.  goto L4f1552;
  #L4f156a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.subjects.BehaviorSubject` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f157c.  v0:= v1.`io.reactivex.rxjava3.subjects.BehaviorSubject.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f1580.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f1586.  v0:= temp @kind object;
  #L4f1588.  if v0 == 0 then goto L4f1592;
  #L4f158c.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f1592.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.subjects.BehaviorSubject` v2 @kind this, `io.reactivex.rxjava3.core.Observer` v3 @kind object) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.subscribeActual:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L4f166c.  v0:= new `io.reactivex.rxjava3.subjects.BehaviorSubject$a`;
  #L4f1670.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/subjects/BehaviorSubject;)V` @kind direct;
  #L4f1676.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4f167c.  call temp:= `d`(v2, v0) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.d:(Lio/reactivex/rxjava3/subjects/BehaviorSubject$a;)Z` @kind virtual;
  #L4f1682.  v1:= temp;
  #L4f1684.  if v1 == 0 then goto L4f16a0;
  #L4f1688.  v3:= v0.`io.reactivex.rxjava3.subjects.BehaviorSubject$a.g` @type ^`boolean` @kind boolean;
  #L4f168c.  if v3 == 0 then goto L4f1698;
  #L4f1690.  call `e`(v2, v0) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject;.e:(Lio/reactivex/rxjava3/subjects/BehaviorSubject$a;)V` @kind virtual;
  #L4f1696.  goto L4f16c6;
  #L4f1698.  call `a`(v0) @signature `Lio/reactivex/rxjava3/subjects/BehaviorSubject$a;.a:()V` @kind virtual;
  #L4f169e.  goto L4f16c6;
  #L4f16a0.  v0:= v2.`io.reactivex.rxjava3.subjects.BehaviorSubject.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f16a4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f16aa.  v0:= temp @kind object;
  #L4f16ac.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L4f16b0.  v1:= `@@io.reactivex.rxjava3.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L4f16b4.  if v0 != v1 then goto L4f16c0;
  #L4f16b8.  call `onComplete`(v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4f16be.  goto L4f16c6;
  #L4f16c0.  call `onError`(v3, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f16c6.  return @kind void;
}
