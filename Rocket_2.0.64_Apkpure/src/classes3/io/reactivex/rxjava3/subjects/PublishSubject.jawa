record `io.reactivex.rxjava3.subjects.PublishSubject` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.subjects.Subject` @kind class {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.subjects.PublishSubject.a` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.rxjava3.subjects.PublishSubject.b` @AccessFlag ;
}
global `io.reactivex.rxjava3.subjects.PublishSubject$a`[] `@@io.reactivex.rxjava3.subjects.PublishSubject.c` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.subjects.PublishSubject$a`[] `@@io.reactivex.rxjava3.subjects.PublishSubject.d` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/subjects/PublishSubject;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4f2178.  v0:= 0I;
  #L4f217a.  v1:= new `io.reactivex.rxjava3.subjects.PublishSubject$a`[v0];
  #L4f217e.  `@@io.reactivex.rxjava3.subjects.PublishSubject.c` @type ^`io.reactivex.rxjava3.subjects.PublishSubject$a`[] := v1 @kind object;
  #L4f2182.  v0:= new `io.reactivex.rxjava3.subjects.PublishSubject$a`[v0];
  #L4f2186.  `@@io.reactivex.rxjava3.subjects.PublishSubject.d` @type ^`io.reactivex.rxjava3.subjects.PublishSubject$a`[] := v0 @kind object;
  #L4f218a.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.subjects.PublishSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/PublishSubject;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4f219c.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/subjects/Subject;.<init>:()V` @kind direct;
  #L4f21a2.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4f21a6.  v1:= `@@io.reactivex.rxjava3.subjects.PublishSubject.d` @type ^`io.reactivex.rxjava3.subjects.PublishSubject$a`[] @kind object;
  #L4f21aa.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4f21b0.  v2.`io.reactivex.rxjava3.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4f21b4.  return @kind void;
}
procedure `io.reactivex.rxjava3.subjects.PublishSubject` `create`() @signature `Lio/reactivex/rxjava3/subjects/PublishSubject;.create:()Lio/reactivex/rxjava3/subjects/PublishSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4f212c.  v0:= new `io.reactivex.rxjava3.subjects.PublishSubject`;
  #L4f2130.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/subjects/PublishSubject;.<init>:()V` @kind direct;
  #L4f2136.  return v0 @kind object;
}
procedure `boolean` `d`(`io.reactivex.rxjava3.subjects.PublishSubject` v4 @kind this, `io.reactivex.rxjava3.subjects.PublishSubject$a` v5 @kind object) @signature `Lio/reactivex/rxjava3/subjects/PublishSubject;.d:(Lio/reactivex/rxjava3/subjects/PublishSubject$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f2040.  v0:= v4.`io.reactivex.rxjava3.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f2044.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f204a.  v0:= temp @kind object;
  #L4f204c.  v0:= (`io.reactivex.rxjava3.subjects.PublishSubject$a`[]) v0 @kind object;
  #L4f2050.  v1:= `@@io.reactivex.rxjava3.subjects.PublishSubject.c` @type ^`io.reactivex.rxjava3.subjects.PublishSubject$a`[] @kind object;
  #L4f2054.  v2:= 0I;
  #L4f2056.  if v0 != v1 then goto L4f205c;
  #L4f205a.  return v2;
  #L4f205c.  v1:= length @variable v0;
  #L4f205e.  v3:= v1 + 1;
  #L4f2062.  v3:= new `io.reactivex.rxjava3.subjects.PublishSubject$a`[v3];
  #L4f2066.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f206c.  v3[v1]:= v5 @kind object;
  #L4f2070.  v1:= v4.`io.reactivex.rxjava3.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f2074.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f207a.  v0:= temp;
  #L4f207c.  if v0 == 0 then goto L4f2040;
  #L4f2080.  v5:= 1I;
  #L4f2082.  return v5;
}
procedure `void` `e`(`io.reactivex.rxjava3.subjects.PublishSubject` v6 @kind this, `io.reactivex.rxjava3.subjects.PublishSubject$a` v7 @kind object) @signature `Lio/reactivex/rxjava3/subjects/PublishSubject;.e:(Lio/reactivex/rxjava3/subjects/PublishSubject$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4f22ec.  v0:= v6.`io.reactivex.rxjava3.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f22f0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f22f6.  v0:= temp @kind object;
  #L4f22f8.  v0:= (`io.reactivex.rxjava3.subjects.PublishSubject$a`[]) v0 @kind object;
  #L4f22fc.  v1:= `@@io.reactivex.rxjava3.subjects.PublishSubject.c` @type ^`io.reactivex.rxjava3.subjects.PublishSubject$a`[] @kind object;
  #L4f2300.  if v0 == v1 then goto L4f236c;
  #L4f2304.  v1:= `@@io.reactivex.rxjava3.subjects.PublishSubject.d` @type ^`io.reactivex.rxjava3.subjects.PublishSubject$a`[] @kind object;
  #L4f2308.  if v0 != v1 then goto L4f230e;
  #L4f230c.  goto L4f236c;
  #L4f230e.  v1:= length @variable v0;
  #L4f2310.  v2:= -1I;
  #L4f2312.  v3:= 0I;
  #L4f2314.  v4:= 0I;
  #L4f2316.  if v4 >= v1 then goto L4f232c;
  #L4f231a.  v5:= v0[v4] @kind object;
  #L4f231e.  if v5 != v7 then goto L4f2326;
  #L4f2322.  v2:= v4;
  #L4f2324.  goto L4f232c;
  #L4f2326.  v4:= v4 + 1;
  #L4f232a.  goto L4f2316;
  #L4f232c.  if v2 >= 0 then goto L4f2332;
  #L4f2330.  return @kind void;
  #L4f2332.  v4:= 1I;
  #L4f2334.  if v1 != v4 then goto L4f233e;
  #L4f2338.  v1:= `@@io.reactivex.rxjava3.subjects.PublishSubject.d` @type ^`io.reactivex.rxjava3.subjects.PublishSubject$a`[] @kind object;
  #L4f233c.  goto L4f235c;
  #L4f233e.  v5:= v1 + -1;
  #L4f2342.  v5:= new `io.reactivex.rxjava3.subjects.PublishSubject$a`[v5];
  #L4f2346.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f234c.  v3:= v2 + 1;
  #L4f2350.  v1:= v1 - v2 @kind int;
  #L4f2352.  v1:= v1 - v4 @kind int;
  #L4f2354.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f235a.  v1:= v5 @kind object;
  #L4f235c.  v2:= v6.`io.reactivex.rxjava3.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f2360.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f2366.  v0:= temp;
  #L4f2368.  if v0 == 0 then goto L4f22ec;
  #L4f236c.  return @kind void;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.rxjava3.subjects.PublishSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/PublishSubject;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f2148.  v0:= v2.`io.reactivex.rxjava3.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f214c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f2152.  v0:= temp @kind object;
  #L4f2154.  v1:= `@@io.reactivex.rxjava3.subjects.PublishSubject.c` @type ^`io.reactivex.rxjava3.subjects.PublishSubject$a`[] @kind object;
  #L4f2158.  if v0 != v1 then goto L4f2162;
  #L4f215c.  v0:= v2.`io.reactivex.rxjava3.subjects.PublishSubject.b` @type ^`java.lang.Throwable` @kind object;
  #L4f2160.  return v0 @kind object;
  #L4f2162.  v0:= 0I;
  #L4f2164.  return v0 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.rxjava3.subjects.PublishSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/PublishSubject;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f2094.  v0:= v2.`io.reactivex.rxjava3.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f2098.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f209e.  v0:= temp @kind object;
  #L4f20a0.  v1:= `@@io.reactivex.rxjava3.subjects.PublishSubject.c` @type ^`io.reactivex.rxjava3.subjects.PublishSubject$a`[] @kind object;
  #L4f20a4.  if v0 != v1 then goto L4f20b4;
  #L4f20a8.  v0:= v2.`io.reactivex.rxjava3.subjects.PublishSubject.b` @type ^`java.lang.Throwable` @kind object;
  #L4f20ac.  if v0 != 0 then goto L4f20b4;
  #L4f20b0.  v0:= 1I;
  #L4f20b2.  goto L4f20b6;
  #L4f20b4.  v0:= 0I;
  #L4f20b6.  return v0;
}
procedure `boolean` `hasObservers`(`io.reactivex.rxjava3.subjects.PublishSubject` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/PublishSubject;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f20c8.  v0:= v1.`io.reactivex.rxjava3.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f20cc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f20d2.  v0:= temp @kind object;
  #L4f20d4.  v0:= (`io.reactivex.rxjava3.subjects.PublishSubject$a`[]) v0 @kind object;
  #L4f20d8.  v0:= length @variable v0;
  #L4f20da.  if v0 == 0 then goto L4f20e2;
  #L4f20de.  v0:= 1I;
  #L4f20e0.  goto L4f20e4;
  #L4f20e2.  v0:= 0I;
  #L4f20e4.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.rxjava3.subjects.PublishSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/PublishSubject;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f20f8.  v0:= v2.`io.reactivex.rxjava3.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f20fc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f2102.  v0:= temp @kind object;
  #L4f2104.  v1:= `@@io.reactivex.rxjava3.subjects.PublishSubject.c` @type ^`io.reactivex.rxjava3.subjects.PublishSubject$a`[] @kind object;
  #L4f2108.  if v0 != v1 then goto L4f2118;
  #L4f210c.  v0:= v2.`io.reactivex.rxjava3.subjects.PublishSubject.b` @type ^`java.lang.Throwable` @kind object;
  #L4f2110.  if v0 == 0 then goto L4f2118;
  #L4f2114.  v0:= 1I;
  #L4f2116.  goto L4f211a;
  #L4f2118.  v0:= 0I;
  #L4f211a.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.subjects.PublishSubject` v4 @kind this) @signature `Lio/reactivex/rxjava3/subjects/PublishSubject;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f21c8.  v0:= v4.`io.reactivex.rxjava3.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f21cc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f21d2.  v0:= temp @kind object;
  #L4f21d4.  v1:= `@@io.reactivex.rxjava3.subjects.PublishSubject.c` @type ^`io.reactivex.rxjava3.subjects.PublishSubject$a`[] @kind object;
  #L4f21d8.  if v0 != v1 then goto L4f21de;
  #L4f21dc.  return @kind void;
  #L4f21de.  v0:= v4.`io.reactivex.rxjava3.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f21e2.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4f21e8.  v0:= temp @kind object;
  #L4f21ea.  v0:= (`io.reactivex.rxjava3.subjects.PublishSubject$a`[]) v0 @kind object;
  #L4f21ee.  v1:= length @variable v0;
  #L4f21f0.  v2:= 0I;
  #L4f21f2.  if v2 >= v1 then goto L4f2206;
  #L4f21f6.  v3:= v0[v2] @kind object;
  #L4f21fa.  call `a`(v3) @signature `Lio/reactivex/rxjava3/subjects/PublishSubject$a;.a:()V` @kind virtual;
  #L4f2200.  v2:= v2 + 1;
  #L4f2204.  goto L4f21f2;
  #L4f2206.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.subjects.PublishSubject` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/rxjava3/subjects/PublishSubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f2218.  v0:= "onError called with a null Throwable." @kind object;
  #L4f221c.  call temp:= `nullCheck`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4f2222.  v0:= v4.`io.reactivex.rxjava3.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f2226.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f222c.  v0:= temp @kind object;
  #L4f222e.  v1:= `@@io.reactivex.rxjava3.subjects.PublishSubject.c` @type ^`io.reactivex.rxjava3.subjects.PublishSubject$a`[] @kind object;
  #L4f2232.  if v0 != v1 then goto L4f223e;
  #L4f2236.  call `onError`(v5) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4f223c.  return @kind void;
  #L4f223e.  v4.`io.reactivex.rxjava3.subjects.PublishSubject.b` @type ^`java.lang.Throwable` := v5 @kind object;
  #L4f2242.  v0:= v4.`io.reactivex.rxjava3.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f2246.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4f224c.  v0:= temp @kind object;
  #L4f224e.  v0:= (`io.reactivex.rxjava3.subjects.PublishSubject$a`[]) v0 @kind object;
  #L4f2252.  v1:= length @variable v0;
  #L4f2254.  v2:= 0I;
  #L4f2256.  if v2 >= v1 then goto L4f226a;
  #L4f225a.  v3:= v0[v2] @kind object;
  #L4f225e.  call `b`(v3, v5) @signature `Lio/reactivex/rxjava3/subjects/PublishSubject$a;.b:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4f2264.  v2:= v2 + 1;
  #L4f2268.  goto L4f2256;
  #L4f226a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.subjects.PublishSubject` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/rxjava3/subjects/PublishSubject;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f227c.  v0:= "onNext called with a null value." @kind object;
  #L4f2280.  call temp:= `nullCheck`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4f2286.  v0:= v4.`io.reactivex.rxjava3.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f228a.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f2290.  v0:= temp @kind object;
  #L4f2292.  v0:= (`io.reactivex.rxjava3.subjects.PublishSubject$a`[]) v0 @kind object;
  #L4f2296.  v1:= length @variable v0;
  #L4f2298.  v2:= 0I;
  #L4f229a.  if v2 >= v1 then goto L4f22ae;
  #L4f229e.  v3:= v0[v2] @kind object;
  #L4f22a2.  call `c`(v3, v5) @signature `Lio/reactivex/rxjava3/subjects/PublishSubject$a;.c:(Ljava/lang/Object;)V` @kind virtual;
  #L4f22a8.  v2:= v2 + 1;
  #L4f22ac.  goto L4f229a;
  #L4f22ae.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.subjects.PublishSubject` v2 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/rxjava3/subjects/PublishSubject;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f22c0.  v0:= v2.`io.reactivex.rxjava3.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f22c4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f22ca.  v0:= temp @kind object;
  #L4f22cc.  v1:= `@@io.reactivex.rxjava3.subjects.PublishSubject.c` @type ^`io.reactivex.rxjava3.subjects.PublishSubject$a`[] @kind object;
  #L4f22d0.  if v0 != v1 then goto L4f22da;
  #L4f22d4.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f22da.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.subjects.PublishSubject` v2 @kind this, `io.reactivex.rxjava3.core.Observer` v3 @kind object) @signature `Lio/reactivex/rxjava3/subjects/PublishSubject;.subscribeActual:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L4f2380.  v0:= new `io.reactivex.rxjava3.subjects.PublishSubject$a`;
  #L4f2384.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/rxjava3/subjects/PublishSubject$a;.<init>:(Lio/reactivex/rxjava3/core/Observer;Lio/reactivex/rxjava3/subjects/PublishSubject;)V` @kind direct;
  #L4f238a.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4f2390.  call temp:= `d`(v2, v0) @signature `Lio/reactivex/rxjava3/subjects/PublishSubject;.d:(Lio/reactivex/rxjava3/subjects/PublishSubject$a;)Z` @kind virtual;
  #L4f2396.  v1:= temp;
  #L4f2398.  if v1 == 0 then goto L4f23b0;
  #L4f239c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/subjects/PublishSubject$a;.isDisposed:()Z` @kind virtual;
  #L4f23a2.  v3:= temp;
  #L4f23a4.  if v3 == 0 then goto L4f23c6;
  #L4f23a8.  call `e`(v2, v0) @signature `Lio/reactivex/rxjava3/subjects/PublishSubject;.e:(Lio/reactivex/rxjava3/subjects/PublishSubject$a;)V` @kind virtual;
  #L4f23ae.  goto L4f23c6;
  #L4f23b0.  v0:= v2.`io.reactivex.rxjava3.subjects.PublishSubject.b` @type ^`java.lang.Throwable` @kind object;
  #L4f23b4.  if v0 == 0 then goto L4f23c0;
  #L4f23b8.  call `onError`(v3, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f23be.  goto L4f23c6;
  #L4f23c0.  call `onComplete`(v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4f23c6.  return @kind void;
}
