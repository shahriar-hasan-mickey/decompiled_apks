record `io.reactivex.rxjava3.subjects.UnicastSubject` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.subjects.Subject` @kind class {
  `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` `io.reactivex.rxjava3.subjects.UnicastSubject.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.subjects.UnicastSubject.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.subjects.UnicastSubject.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.subjects.UnicastSubject.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.subjects.UnicastSubject.e` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.subjects.UnicastSubject.f` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.rxjava3.subjects.UnicastSubject.g` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.subjects.UnicastSubject.h` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.observers.BasicIntQueueDisposable` `io.reactivex.rxjava3.subjects.UnicastSubject.i` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.subjects.UnicastSubject.j` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.subjects.UnicastSubject` v1 @kind this, `int` v2 , `java.lang.Runnable` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.<init>:(ILjava/lang/Runnable;Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4f3fb8.  call `<init>`(v1) @signature `Lio/reactivex/rxjava3/subjects/Subject;.<init>:()V` @kind direct;
  #L4f3fbe.  v0:= new `io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue`;
  #L4f3fc2.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4f3fc8.  v1.`io.reactivex.rxjava3.subjects.UnicastSubject.a` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` := v0 @kind object;
  #L4f3fcc.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4f3fd0.  call `<init>`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4f3fd6.  v1.`io.reactivex.rxjava3.subjects.UnicastSubject.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4f3fda.  v1.`io.reactivex.rxjava3.subjects.UnicastSubject.d` @type ^`boolean` := v4 @kind boolean;
  #L4f3fde.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4f3fe2.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4f3fe8.  v1.`io.reactivex.rxjava3.subjects.UnicastSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4f3fec.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4f3ff0.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4f3ff6.  v1.`io.reactivex.rxjava3.subjects.UnicastSubject.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L4f3ffa.  v2:= new `io.reactivex.rxjava3.subjects.UnicastSubject$a`;
  #L4f3ffe.  call `<init>`(v2, v1) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject$a;.<init>:(Lio/reactivex/rxjava3/subjects/UnicastSubject;)V` @kind direct;
  #L4f4004.  v1.`io.reactivex.rxjava3.subjects.UnicastSubject.i` @type ^`io.reactivex.rxjava3.internal.observers.BasicIntQueueDisposable` := v2 @kind object;
  #L4f4008.  return @kind void;
}
procedure `io.reactivex.rxjava3.subjects.UnicastSubject` `create`() @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.create:()Lio/reactivex/rxjava3/subjects/UnicastSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f3eb4.  v0:= new `io.reactivex.rxjava3.subjects.UnicastSubject`;
  #L4f3eb8.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Observable;.bufferSize:()I` @kind static;
  #L4f3ebe.  v1:= temp;
  #L4f3ec0.  v2:= 0I;
  #L4f3ec2.  v3:= 1I;
  #L4f3ec4.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.<init>:(ILjava/lang/Runnable;Z)V` @kind direct;
  #L4f3eca.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.subjects.UnicastSubject` `create`(`int` v3 ) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.create:(I)Lio/reactivex/rxjava3/subjects/UnicastSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4f3f04.  v0:= "capacityHint" @kind object;
  #L4f3f08.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4f3f0e.  v0:= new `io.reactivex.rxjava3.subjects.UnicastSubject`;
  #L4f3f12.  v1:= 0I;
  #L4f3f14.  v2:= 1I;
  #L4f3f16.  call `<init>`(v0, v3, v1, v2) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.<init>:(ILjava/lang/Runnable;Z)V` @kind direct;
  #L4f3f1c.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.subjects.UnicastSubject` `create`(`int` v2 , `java.lang.Runnable` v3 @kind object) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.create:(ILjava/lang/Runnable;)Lio/reactivex/rxjava3/subjects/UnicastSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4f3f30.  v0:= "capacityHint" @kind object;
  #L4f3f34.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4f3f3a.  v0:= "onTerminate" @kind object;
  #L4f3f3e.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4f3f44.  v0:= new `io.reactivex.rxjava3.subjects.UnicastSubject`;
  #L4f3f48.  v1:= 1I;
  #L4f3f4a.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.<init>:(ILjava/lang/Runnable;Z)V` @kind direct;
  #L4f3f50.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.subjects.UnicastSubject` `create`(`int` v1 , `java.lang.Runnable` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.create:(ILjava/lang/Runnable;Z)Lio/reactivex/rxjava3/subjects/UnicastSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4f3f64.  v0:= "capacityHint" @kind object;
  #L4f3f68.  call temp:= `verifyPositive`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4f3f6e.  v0:= "onTerminate" @kind object;
  #L4f3f72.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4f3f78.  v0:= new `io.reactivex.rxjava3.subjects.UnicastSubject`;
  #L4f3f7c.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.<init>:(ILjava/lang/Runnable;Z)V` @kind direct;
  #L4f3f82.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.subjects.UnicastSubject` `create`(`boolean` v3 ) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.create:(Z)Lio/reactivex/rxjava3/subjects/UnicastSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4f3edc.  v0:= new `io.reactivex.rxjava3.subjects.UnicastSubject`;
  #L4f3ee0.  call temp:= `bufferSize`() @signature `Lio/reactivex/rxjava3/core/Observable;.bufferSize:()I` @kind static;
  #L4f3ee6.  v1:= temp;
  #L4f3ee8.  v2:= 0I;
  #L4f3eea.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.<init>:(ILjava/lang/Runnable;Z)V` @kind direct;
  #L4f3ef0.  return v0 @kind object;
}
procedure `void` `d`(`io.reactivex.rxjava3.subjects.UnicastSubject` v3 @kind this) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4f401c.  v0:= v3.`io.reactivex.rxjava3.subjects.UnicastSubject.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f4020.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f4026.  v0:= temp @kind object;
  #L4f4028.  v0:= (`java.lang.Runnable`) v0 @kind object;
  #L4f402c.  if v0 == 0 then goto L4f4048;
  #L4f4030.  v1:= v3.`io.reactivex.rxjava3.subjects.UnicastSubject.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f4034.  v2:= 0I;
  #L4f4036.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f403c.  v1:= temp;
  #L4f403e.  if v1 == 0 then goto L4f4048;
  #L4f4042.  call `run`(v0) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L4f4048.  return @kind void;
}
procedure `void` `e`(`io.reactivex.rxjava3.subjects.UnicastSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4f405c.  v0:= v2.`io.reactivex.rxjava3.subjects.UnicastSubject.i` @type ^`io.reactivex.rxjava3.internal.observers.BasicIntQueueDisposable` @kind object;
  #L4f4060.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4f4066.  v0:= temp;
  #L4f4068.  if v0 == 0 then goto L4f406e;
  #L4f406c.  return @kind void;
  #L4f406e.  v0:= v2.`io.reactivex.rxjava3.subjects.UnicastSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f4072.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f4078.  v0:= temp @kind object;
  #L4f407a.  v0:= (`io.reactivex.rxjava3.core.Observer`) v0 @kind object;
  #L4f407e.  v1:= 1I;
  #L4f4080.  if v0 == 0 then goto L4f409c;
  #L4f4084.  v1:= v2.`io.reactivex.rxjava3.subjects.UnicastSubject.j` @type ^`boolean` @kind boolean;
  #L4f4088.  if v1 == 0 then goto L4f4094;
  #L4f408c.  call `f`(v2, v0) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.f:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4f4092.  goto L4f409a;
  #L4f4094.  call `g`(v2, v0) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.g:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4f409a.  return @kind void;
  #L4f409c.  v0:= v2.`io.reactivex.rxjava3.subjects.UnicastSubject.i` @type ^`io.reactivex.rxjava3.internal.observers.BasicIntQueueDisposable` @kind object;
  #L4f40a0.  v1:= -v1 @kind int;
  #L4f40a2.  call temp:= `addAndGet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4f40a8.  v1:= temp;
  #L4f40aa.  if v1 != 0 then goto L4f40b0;
  #L4f40ae.  return @kind void;
  #L4f40b0.  v0:= v2.`io.reactivex.rxjava3.subjects.UnicastSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f40b4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f40ba.  v0:= temp @kind object;
  #L4f40bc.  v0:= (`io.reactivex.rxjava3.core.Observer`) v0 @kind object;
  #L4f40c0.  goto L4f4080;
}
procedure `void` `f`(`io.reactivex.rxjava3.subjects.UnicastSubject` v6 @kind this, `io.reactivex.rxjava3.core.Observer` v7 @kind object) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.f:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4f40d4.  v0:= v6.`io.reactivex.rxjava3.subjects.UnicastSubject.a` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4f40d8.  v1:= v6.`io.reactivex.rxjava3.subjects.UnicastSubject.d` @type ^`boolean` @kind boolean;
  #L4f40dc.  v2:= 1I;
  #L4f40de.  v1:= v1 ^~ v2 @kind int;
  #L4f40e0.  v3:= v6.`io.reactivex.rxjava3.subjects.UnicastSubject.e` @type ^`boolean` @kind boolean;
  #L4f40e4.  v4:= 0I;
  #L4f40e6.  if v3 == 0 then goto L4f40f6;
  #L4f40ea.  v7:= v6.`io.reactivex.rxjava3.subjects.UnicastSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f40ee.  call `lazySet`(v7, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4f40f4.  return @kind void;
  #L4f40f6.  v3:= v6.`io.reactivex.rxjava3.subjects.UnicastSubject.f` @type ^`boolean` @kind boolean;
  #L4f40fa.  if v1 == 0 then goto L4f4110;
  #L4f40fe.  if v3 == 0 then goto L4f4110;
  #L4f4102.  call temp:= `i`(v6, v0, v7) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.i:(Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;Lio/reactivex/rxjava3/core/Observer;)Z` @kind virtual;
  #L4f4108.  v5:= temp;
  #L4f410a.  if v5 == 0 then goto L4f4110;
  #L4f410e.  return @kind void;
  #L4f4110.  call `onNext`(v7, v4) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f4116.  if v3 == 0 then goto L4f4122;
  #L4f411a.  call `h`(v6, v7) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.h:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4f4120.  return @kind void;
  #L4f4122.  v3:= v6.`io.reactivex.rxjava3.subjects.UnicastSubject.i` @type ^`io.reactivex.rxjava3.internal.observers.BasicIntQueueDisposable` @kind object;
  #L4f4126.  v2:= -v2 @kind int;
  #L4f4128.  call temp:= `addAndGet`(v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4f412e.  v2:= temp;
  #L4f4130.  if v2 != 0 then goto L4f40e0;
  #L4f4134.  return @kind void;
}
procedure `void` `g`(`io.reactivex.rxjava3.subjects.UnicastSubject` v9 @kind this, `io.reactivex.rxjava3.core.Observer` v10 @kind object) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.g:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4f4148.  v0:= v9.`io.reactivex.rxjava3.subjects.UnicastSubject.a` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4f414c.  v1:= v9.`io.reactivex.rxjava3.subjects.UnicastSubject.d` @type ^`boolean` @kind boolean;
  #L4f4150.  v2:= 1I;
  #L4f4152.  v1:= v1 ^~ v2 @kind int;
  #L4f4154.  v3:= 1I;
  #L4f4156.  v4:= 1I;
  #L4f4158.  v5:= v9.`io.reactivex.rxjava3.subjects.UnicastSubject.e` @type ^`boolean` @kind boolean;
  #L4f415c.  if v5 == 0 then goto L4f4174;
  #L4f4160.  v10:= v9.`io.reactivex.rxjava3.subjects.UnicastSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f4164.  v1:= 0I;
  #L4f4166.  call `lazySet`(v10, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4f416c.  call `clear`(v0) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4f4172.  return @kind void;
  #L4f4174.  v5:= v9.`io.reactivex.rxjava3.subjects.UnicastSubject.f` @type ^`boolean` @kind boolean;
  #L4f4178.  v6:= v9.`io.reactivex.rxjava3.subjects.UnicastSubject.a` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4f417c.  call temp:= `poll`(v6) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4f4182.  v6:= temp @kind object;
  #L4f4184.  v7:= 0I;
  #L4f4186.  if v6 != 0 then goto L4f418e;
  #L4f418a.  v8:= 1I;
  #L4f418c.  goto L4f4190;
  #L4f418e.  v8:= 0I;
  #L4f4190.  if v5 == 0 then goto L4f41b8;
  #L4f4194.  if v1 == 0 then goto L4f41ac;
  #L4f4198.  if v3 == 0 then goto L4f41ac;
  #L4f419c.  call temp:= `i`(v9, v0, v10) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.i:(Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;Lio/reactivex/rxjava3/core/Observer;)Z` @kind virtual;
  #L4f41a2.  v3:= temp;
  #L4f41a4.  if v3 == 0 then goto L4f41aa;
  #L4f41a8.  return @kind void;
  #L4f41aa.  v3:= 0I;
  #L4f41ac.  if v8 == 0 then goto L4f41b8;
  #L4f41b0.  call `h`(v9, v10) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.h:(Lio/reactivex/rxjava3/core/Observer;)V` @kind virtual;
  #L4f41b6.  return @kind void;
  #L4f41b8.  if v8 == 0 then goto L4f41d0;
  #L4f41bc.  v5:= v9.`io.reactivex.rxjava3.subjects.UnicastSubject.i` @type ^`io.reactivex.rxjava3.internal.observers.BasicIntQueueDisposable` @kind object;
  #L4f41c0.  v4:= -v4 @kind int;
  #L4f41c2.  call temp:= `addAndGet`(v5, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4f41c8.  v4:= temp;
  #L4f41ca.  if v4 != 0 then goto L4f4158;
  #L4f41ce.  return @kind void;
  #L4f41d0.  call `onNext`(v10, v6) @signature `Lio/reactivex/rxjava3/core/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4f41d6.  goto L4f4158;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.rxjava3.subjects.UnicastSubject` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f3f94.  v0:= v1.`io.reactivex.rxjava3.subjects.UnicastSubject.f` @type ^`boolean` @kind boolean;
  #L4f3f98.  if v0 == 0 then goto L4f3fa2;
  #L4f3f9c.  v0:= v1.`io.reactivex.rxjava3.subjects.UnicastSubject.g` @type ^`java.lang.Throwable` @kind object;
  #L4f3fa0.  return v0 @kind object;
  #L4f3fa2.  v0:= 0I;
  #L4f3fa4.  return v0 @kind object;
}
procedure `void` `h`(`io.reactivex.rxjava3.subjects.UnicastSubject` v2 @kind this, `io.reactivex.rxjava3.core.Observer` v3 @kind object) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.h:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4f41e8.  v0:= v2.`io.reactivex.rxjava3.subjects.UnicastSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f41ec.  v1:= 0I;
  #L4f41ee.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4f41f4.  v0:= v2.`io.reactivex.rxjava3.subjects.UnicastSubject.g` @type ^`java.lang.Throwable` @kind object;
  #L4f41f8.  if v0 == 0 then goto L4f4204;
  #L4f41fc.  call `onError`(v3, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f4202.  goto L4f420a;
  #L4f4204.  call `onComplete`(v3) @signature `Lio/reactivex/rxjava3/core/Observer;.onComplete:()V` @kind interface;
  #L4f420a.  return @kind void;
}
procedure `boolean` `hasComplete`(`io.reactivex.rxjava3.subjects.UnicastSubject` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f3e3c.  v0:= v1.`io.reactivex.rxjava3.subjects.UnicastSubject.f` @type ^`boolean` @kind boolean;
  #L4f3e40.  if v0 == 0 then goto L4f3e50;
  #L4f3e44.  v0:= v1.`io.reactivex.rxjava3.subjects.UnicastSubject.g` @type ^`java.lang.Throwable` @kind object;
  #L4f3e48.  if v0 != 0 then goto L4f3e50;
  #L4f3e4c.  v0:= 1I;
  #L4f3e4e.  goto L4f3e52;
  #L4f3e50.  v0:= 0I;
  #L4f3e52.  return v0;
}
procedure `boolean` `hasObservers`(`io.reactivex.rxjava3.subjects.UnicastSubject` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f3e64.  v0:= v1.`io.reactivex.rxjava3.subjects.UnicastSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f3e68.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f3e6e.  v0:= temp @kind object;
  #L4f3e70.  if v0 == 0 then goto L4f3e78;
  #L4f3e74.  v0:= 1I;
  #L4f3e76.  goto L4f3e7a;
  #L4f3e78.  v0:= 0I;
  #L4f3e7a.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.rxjava3.subjects.UnicastSubject` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f3e8c.  v0:= v1.`io.reactivex.rxjava3.subjects.UnicastSubject.f` @type ^`boolean` @kind boolean;
  #L4f3e90.  if v0 == 0 then goto L4f3ea0;
  #L4f3e94.  v0:= v1.`io.reactivex.rxjava3.subjects.UnicastSubject.g` @type ^`java.lang.Throwable` @kind object;
  #L4f3e98.  if v0 == 0 then goto L4f3ea0;
  #L4f3e9c.  v0:= 1I;
  #L4f3e9e.  goto L4f3ea2;
  #L4f3ea0.  v0:= 0I;
  #L4f3ea2.  return v0;
}
procedure `boolean` `i`(`io.reactivex.rxjava3.subjects.UnicastSubject` v3 @kind this, `io.reactivex.rxjava3.internal.fuseable.SimpleQueue` v4 @kind object, `io.reactivex.rxjava3.core.Observer` v5 @kind object) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.i:(Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;Lio/reactivex/rxjava3/core/Observer;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4f3e04.  v0:= v3.`io.reactivex.rxjava3.subjects.UnicastSubject.g` @type ^`java.lang.Throwable` @kind object;
  #L4f3e08.  if v0 == 0 then goto L4f3e28;
  #L4f3e0c.  v1:= v3.`io.reactivex.rxjava3.subjects.UnicastSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f3e10.  v2:= 0I;
  #L4f3e12.  call `lazySet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4f3e18.  call `clear`(v4) @signature `Lio/reactivex/rxjava3/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4f3e1e.  call `onError`(v5, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f3e24.  v4:= 1I;
  #L4f3e26.  return v4;
  #L4f3e28.  v4:= 0I;
  #L4f3e2a.  return v4;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.subjects.UnicastSubject` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f421c.  v0:= v1.`io.reactivex.rxjava3.subjects.UnicastSubject.f` @type ^`boolean` @kind boolean;
  #L4f4220.  if v0 != 0 then goto L4f4240;
  #L4f4224.  v0:= v1.`io.reactivex.rxjava3.subjects.UnicastSubject.e` @type ^`boolean` @kind boolean;
  #L4f4228.  if v0 == 0 then goto L4f422e;
  #L4f422c.  goto L4f4240;
  #L4f422e.  v0:= 1I;
  #L4f4230.  v1.`io.reactivex.rxjava3.subjects.UnicastSubject.f` @type ^`boolean` := v0 @kind boolean;
  #L4f4234.  call `d`(v1) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.d:()V` @kind virtual;
  #L4f423a.  call `e`(v1) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.e:()V` @kind virtual;
  #L4f4240.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.subjects.UnicastSubject` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f4254.  v0:= "onError called with a null Throwable." @kind object;
  #L4f4258.  call temp:= `nullCheck`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4f425e.  v0:= v1.`io.reactivex.rxjava3.subjects.UnicastSubject.f` @type ^`boolean` @kind boolean;
  #L4f4262.  if v0 != 0 then goto L4f4288;
  #L4f4266.  v0:= v1.`io.reactivex.rxjava3.subjects.UnicastSubject.e` @type ^`boolean` @kind boolean;
  #L4f426a.  if v0 == 0 then goto L4f4270;
  #L4f426e.  goto L4f4288;
  #L4f4270.  v1.`io.reactivex.rxjava3.subjects.UnicastSubject.g` @type ^`java.lang.Throwable` := v2 @kind object;
  #L4f4274.  v2:= 1I;
  #L4f4276.  v1.`io.reactivex.rxjava3.subjects.UnicastSubject.f` @type ^`boolean` := v2 @kind boolean;
  #L4f427a.  call `d`(v1) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.d:()V` @kind virtual;
  #L4f4280.  call `e`(v1) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.e:()V` @kind virtual;
  #L4f4286.  return @kind void;
  #L4f4288.  call `onError`(v2) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4f428e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.subjects.UnicastSubject` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f42a0.  v0:= "onNext called with a null value." @kind object;
  #L4f42a4.  call temp:= `nullCheck`(v2, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4f42aa.  v0:= v1.`io.reactivex.rxjava3.subjects.UnicastSubject.f` @type ^`boolean` @kind boolean;
  #L4f42ae.  if v0 != 0 then goto L4f42cc;
  #L4f42b2.  v0:= v1.`io.reactivex.rxjava3.subjects.UnicastSubject.e` @type ^`boolean` @kind boolean;
  #L4f42b6.  if v0 == 0 then goto L4f42bc;
  #L4f42ba.  goto L4f42cc;
  #L4f42bc.  v0:= v1.`io.reactivex.rxjava3.subjects.UnicastSubject.a` @type ^`io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4f42c0.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/rxjava3/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4f42c6.  call `e`(v1) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.e:()V` @kind virtual;
  #L4f42cc.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.subjects.UnicastSubject` v1 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f42e0.  v0:= v1.`io.reactivex.rxjava3.subjects.UnicastSubject.f` @type ^`boolean` @kind boolean;
  #L4f42e4.  if v0 != 0 then goto L4f42f0;
  #L4f42e8.  v0:= v1.`io.reactivex.rxjava3.subjects.UnicastSubject.e` @type ^`boolean` @kind boolean;
  #L4f42ec.  if v0 == 0 then goto L4f42f6;
  #L4f42f0.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f42f6.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.subjects.UnicastSubject` v3 @kind this, `io.reactivex.rxjava3.core.Observer` v4 @kind object) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.subscribeActual:(Lio/reactivex/rxjava3/core/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L4f4308.  v0:= v3.`io.reactivex.rxjava3.subjects.UnicastSubject.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4f430c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4f4312.  v0:= temp;
  #L4f4314.  if v0 != 0 then goto L4f435e;
  #L4f4318.  v0:= v3.`io.reactivex.rxjava3.subjects.UnicastSubject.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4f431c.  v1:= 0I;
  #L4f431e.  v2:= 1I;
  #L4f4320.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4f4326.  v0:= temp;
  #L4f4328.  if v0 == 0 then goto L4f435e;
  #L4f432c.  v0:= v3.`io.reactivex.rxjava3.subjects.UnicastSubject.i` @type ^`io.reactivex.rxjava3.internal.observers.BasicIntQueueDisposable` @kind object;
  #L4f4330.  call `onSubscribe`(v4, v0) @signature `Lio/reactivex/rxjava3/core/Observer;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4f4336.  v0:= v3.`io.reactivex.rxjava3.subjects.UnicastSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f433a.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4f4340.  v4:= v3.`io.reactivex.rxjava3.subjects.UnicastSubject.e` @type ^`boolean` @kind boolean;
  #L4f4344.  if v4 == 0 then goto L4f4356;
  #L4f4348.  v4:= v3.`io.reactivex.rxjava3.subjects.UnicastSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f434c.  v0:= 0I;
  #L4f434e.  call `lazySet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4f4354.  return @kind void;
  #L4f4356.  call `e`(v3) @signature `Lio/reactivex/rxjava3/subjects/UnicastSubject;.e:()V` @kind virtual;
  #L4f435c.  goto L4f4372;
  #L4f435e.  v0:= new `java.lang.IllegalStateException`;
  #L4f4362.  v1:= "Only a single observer allowed." @kind object;
  #L4f4366.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f436c.  call `error`(v0, v4) @signature `Lio/reactivex/rxjava3/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/rxjava3/core/Observer;)V` @kind static;
  #L4f4372.  return @kind void;
}
