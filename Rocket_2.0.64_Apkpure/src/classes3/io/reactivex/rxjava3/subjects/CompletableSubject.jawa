record `io.reactivex.rxjava3.subjects.CompletableSubject` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.core.Completable` @kind class, `io.reactivex.rxjava3.core.CompletableObserver` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.subjects.CompletableSubject.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.rxjava3.subjects.CompletableSubject.b` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.rxjava3.subjects.CompletableSubject.c` @AccessFlag ;
}
global `io.reactivex.rxjava3.subjects.CompletableSubject$a`[] `@@io.reactivex.rxjava3.subjects.CompletableSubject.d` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.subjects.CompletableSubject$a`[] `@@io.reactivex.rxjava3.subjects.CompletableSubject.e` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/subjects/CompletableSubject;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4f1884.  v0:= 0I;
  #L4f1886.  v1:= new `io.reactivex.rxjava3.subjects.CompletableSubject$a`[v0];
  #L4f188a.  `@@io.reactivex.rxjava3.subjects.CompletableSubject.d` @type ^`io.reactivex.rxjava3.subjects.CompletableSubject$a`[] := v1 @kind object;
  #L4f188e.  v0:= new `io.reactivex.rxjava3.subjects.CompletableSubject$a`[v0];
  #L4f1892.  `@@io.reactivex.rxjava3.subjects.CompletableSubject.e` @type ^`io.reactivex.rxjava3.subjects.CompletableSubject$a`[] := v0 @kind object;
  #L4f1896.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.subjects.CompletableSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/CompletableSubject;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4f18a8.  call `<init>`(v2) @signature `Lio/reactivex/rxjava3/core/Completable;.<init>:()V` @kind direct;
  #L4f18ae.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4f18b2.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4f18b8.  v2.`io.reactivex.rxjava3.subjects.CompletableSubject.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L4f18bc.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4f18c0.  v1:= `@@io.reactivex.rxjava3.subjects.CompletableSubject.d` @type ^`io.reactivex.rxjava3.subjects.CompletableSubject$a`[] @kind object;
  #L4f18c4.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4f18ca.  v2.`io.reactivex.rxjava3.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4f18ce.  return @kind void;
}
procedure `io.reactivex.rxjava3.subjects.CompletableSubject` `create`() @signature `Lio/reactivex/rxjava3/subjects/CompletableSubject;.create:()Lio/reactivex/rxjava3/subjects/CompletableSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4f1838.  v0:= new `io.reactivex.rxjava3.subjects.CompletableSubject`;
  #L4f183c.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/subjects/CompletableSubject;.<init>:()V` @kind direct;
  #L4f1842.  return v0 @kind object;
}
procedure `boolean` `e`(`io.reactivex.rxjava3.subjects.CompletableSubject` v4 @kind this, `io.reactivex.rxjava3.subjects.CompletableSubject$a` v5 @kind object) @signature `Lio/reactivex/rxjava3/subjects/CompletableSubject;.e:(Lio/reactivex/rxjava3/subjects/CompletableSubject$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f174c.  v0:= v4.`io.reactivex.rxjava3.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f1750.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f1756.  v0:= temp @kind object;
  #L4f1758.  v0:= (`io.reactivex.rxjava3.subjects.CompletableSubject$a`[]) v0 @kind object;
  #L4f175c.  v1:= `@@io.reactivex.rxjava3.subjects.CompletableSubject.e` @type ^`io.reactivex.rxjava3.subjects.CompletableSubject$a`[] @kind object;
  #L4f1760.  v2:= 0I;
  #L4f1762.  if v0 != v1 then goto L4f1768;
  #L4f1766.  return v2;
  #L4f1768.  v1:= length @variable v0;
  #L4f176a.  v3:= v1 + 1;
  #L4f176e.  v3:= new `io.reactivex.rxjava3.subjects.CompletableSubject$a`[v3];
  #L4f1772.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f1778.  v3[v1]:= v5 @kind object;
  #L4f177c.  v1:= v4.`io.reactivex.rxjava3.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f1780.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f1786.  v0:= temp;
  #L4f1788.  if v0 == 0 then goto L4f174c;
  #L4f178c.  v5:= 1I;
  #L4f178e.  return v5;
}
procedure `void` `f`(`io.reactivex.rxjava3.subjects.CompletableSubject` v6 @kind this, `io.reactivex.rxjava3.subjects.CompletableSubject$a` v7 @kind object) @signature `Lio/reactivex/rxjava3/subjects/CompletableSubject;.f:(Lio/reactivex/rxjava3/subjects/CompletableSubject$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4f19c8.  v0:= v6.`io.reactivex.rxjava3.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f19cc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f19d2.  v0:= temp @kind object;
  #L4f19d4.  v0:= (`io.reactivex.rxjava3.subjects.CompletableSubject$a`[]) v0 @kind object;
  #L4f19d8.  v1:= length @variable v0;
  #L4f19da.  if v1 != 0 then goto L4f19e0;
  #L4f19de.  return @kind void;
  #L4f19e0.  v2:= -1I;
  #L4f19e2.  v3:= 0I;
  #L4f19e4.  v4:= 0I;
  #L4f19e6.  if v4 >= v1 then goto L4f19fc;
  #L4f19ea.  v5:= v0[v4] @kind object;
  #L4f19ee.  if v5 != v7 then goto L4f19f6;
  #L4f19f2.  v2:= v4;
  #L4f19f4.  goto L4f19fc;
  #L4f19f6.  v4:= v4 + 1;
  #L4f19fa.  goto L4f19e6;
  #L4f19fc.  if v2 >= 0 then goto L4f1a02;
  #L4f1a00.  return @kind void;
  #L4f1a02.  v4:= 1I;
  #L4f1a04.  if v1 != v4 then goto L4f1a0e;
  #L4f1a08.  v1:= `@@io.reactivex.rxjava3.subjects.CompletableSubject.d` @type ^`io.reactivex.rxjava3.subjects.CompletableSubject$a`[] @kind object;
  #L4f1a0c.  goto L4f1a2c;
  #L4f1a0e.  v5:= v1 + -1;
  #L4f1a12.  v5:= new `io.reactivex.rxjava3.subjects.CompletableSubject$a`[v5];
  #L4f1a16.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f1a1c.  v3:= v2 + 1;
  #L4f1a20.  v1:= v1 - v2 @kind int;
  #L4f1a22.  v1:= v1 - v4 @kind int;
  #L4f1a24.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4f1a2a.  v1:= v5 @kind object;
  #L4f1a2c.  v2:= v6.`io.reactivex.rxjava3.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f1a30.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4f1a36.  v0:= temp;
  #L4f1a38.  if v0 == 0 then goto L4f19c8;
  #L4f1a3c.  return @kind void;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.rxjava3.subjects.CompletableSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/CompletableSubject;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f1854.  v0:= v2.`io.reactivex.rxjava3.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f1858.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f185e.  v0:= temp @kind object;
  #L4f1860.  v1:= `@@io.reactivex.rxjava3.subjects.CompletableSubject.e` @type ^`io.reactivex.rxjava3.subjects.CompletableSubject$a`[] @kind object;
  #L4f1864.  if v0 != v1 then goto L4f186e;
  #L4f1868.  v0:= v2.`io.reactivex.rxjava3.subjects.CompletableSubject.c` @type ^`java.lang.Throwable` @kind object;
  #L4f186c.  return v0 @kind object;
  #L4f186e.  v0:= 0I;
  #L4f1870.  return v0 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.rxjava3.subjects.CompletableSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/CompletableSubject;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f17a0.  v0:= v2.`io.reactivex.rxjava3.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f17a4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f17aa.  v0:= temp @kind object;
  #L4f17ac.  v1:= `@@io.reactivex.rxjava3.subjects.CompletableSubject.e` @type ^`io.reactivex.rxjava3.subjects.CompletableSubject$a`[] @kind object;
  #L4f17b0.  if v0 != v1 then goto L4f17c0;
  #L4f17b4.  v0:= v2.`io.reactivex.rxjava3.subjects.CompletableSubject.c` @type ^`java.lang.Throwable` @kind object;
  #L4f17b8.  if v0 != 0 then goto L4f17c0;
  #L4f17bc.  v0:= 1I;
  #L4f17be.  goto L4f17c2;
  #L4f17c0.  v0:= 0I;
  #L4f17c2.  return v0;
}
procedure `boolean` `hasObservers`(`io.reactivex.rxjava3.subjects.CompletableSubject` v1 @kind this) @signature `Lio/reactivex/rxjava3/subjects/CompletableSubject;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f17d4.  v0:= v1.`io.reactivex.rxjava3.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f17d8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f17de.  v0:= temp @kind object;
  #L4f17e0.  v0:= (`io.reactivex.rxjava3.subjects.CompletableSubject$a`[]) v0 @kind object;
  #L4f17e4.  v0:= length @variable v0;
  #L4f17e6.  if v0 == 0 then goto L4f17ee;
  #L4f17ea.  v0:= 1I;
  #L4f17ec.  goto L4f17f0;
  #L4f17ee.  v0:= 0I;
  #L4f17f0.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.rxjava3.subjects.CompletableSubject` v2 @kind this) @signature `Lio/reactivex/rxjava3/subjects/CompletableSubject;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f1804.  v0:= v2.`io.reactivex.rxjava3.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f1808.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f180e.  v0:= temp @kind object;
  #L4f1810.  v1:= `@@io.reactivex.rxjava3.subjects.CompletableSubject.e` @type ^`io.reactivex.rxjava3.subjects.CompletableSubject$a`[] @kind object;
  #L4f1814.  if v0 != v1 then goto L4f1824;
  #L4f1818.  v0:= v2.`io.reactivex.rxjava3.subjects.CompletableSubject.c` @type ^`java.lang.Throwable` @kind object;
  #L4f181c.  if v0 == 0 then goto L4f1824;
  #L4f1820.  v0:= 1I;
  #L4f1822.  goto L4f1826;
  #L4f1824.  v0:= 0I;
  #L4f1826.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.subjects.CompletableSubject` v4 @kind this) @signature `Lio/reactivex/rxjava3/subjects/CompletableSubject;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f18e0.  v0:= v4.`io.reactivex.rxjava3.subjects.CompletableSubject.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4f18e4.  v1:= 0I;
  #L4f18e6.  v2:= 1I;
  #L4f18e8.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4f18ee.  v0:= temp;
  #L4f18f0.  if v0 == 0 then goto L4f1922;
  #L4f18f4.  v0:= v4.`io.reactivex.rxjava3.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f18f8.  v2:= `@@io.reactivex.rxjava3.subjects.CompletableSubject.e` @type ^`io.reactivex.rxjava3.subjects.CompletableSubject$a`[] @kind object;
  #L4f18fc.  call temp:= `getAndSet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4f1902.  v0:= temp @kind object;
  #L4f1904.  v0:= (`io.reactivex.rxjava3.subjects.CompletableSubject$a`[]) v0 @kind object;
  #L4f1908.  v2:= length @variable v0;
  #L4f190a.  if v1 >= v2 then goto L4f1922;
  #L4f190e.  v3:= v0[v1] @kind object;
  #L4f1912.  v3:= v3.`io.reactivex.rxjava3.subjects.CompletableSubject$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4f1916.  call `onComplete`(v3) @signature `Lio/reactivex/rxjava3/core/CompletableObserver;.onComplete:()V` @kind interface;
  #L4f191c.  v1:= v1 + 1;
  #L4f1920.  goto L4f190a;
  #L4f1922.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.subjects.CompletableSubject` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/rxjava3/subjects/CompletableSubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4f1934.  v0:= "onError called with a null Throwable." @kind object;
  #L4f1938.  call temp:= `nullCheck`(v5, v0) @signature `Lio/reactivex/rxjava3/internal/util/ExceptionHelper;.nullCheck:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4f193e.  v0:= v4.`io.reactivex.rxjava3.subjects.CompletableSubject.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4f1942.  v1:= 0I;
  #L4f1944.  v2:= 1I;
  #L4f1946.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4f194c.  v0:= temp;
  #L4f194e.  if v0 == 0 then goto L4f1984;
  #L4f1952.  v4.`io.reactivex.rxjava3.subjects.CompletableSubject.c` @type ^`java.lang.Throwable` := v5 @kind object;
  #L4f1956.  v0:= v4.`io.reactivex.rxjava3.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f195a.  v2:= `@@io.reactivex.rxjava3.subjects.CompletableSubject.e` @type ^`io.reactivex.rxjava3.subjects.CompletableSubject$a`[] @kind object;
  #L4f195e.  call temp:= `getAndSet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4f1964.  v0:= temp @kind object;
  #L4f1966.  v0:= (`io.reactivex.rxjava3.subjects.CompletableSubject$a`[]) v0 @kind object;
  #L4f196a.  v2:= length @variable v0;
  #L4f196c.  if v1 >= v2 then goto L4f198a;
  #L4f1970.  v3:= v0[v1] @kind object;
  #L4f1974.  v3:= v3.`io.reactivex.rxjava3.subjects.CompletableSubject$a.a` @type ^`io.reactivex.rxjava3.core.CompletableObserver` @kind object;
  #L4f1978.  call `onError`(v3, v5) @signature `Lio/reactivex/rxjava3/core/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f197e.  v1:= v1 + 1;
  #L4f1982.  goto L4f196c;
  #L4f1984.  call `onError`(v5) @signature `Lio/reactivex/rxjava3/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4f198a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.subjects.CompletableSubject` v2 @kind this, `io.reactivex.rxjava3.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/rxjava3/subjects/CompletableSubject;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f199c.  v0:= v2.`io.reactivex.rxjava3.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4f19a0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4f19a6.  v0:= temp @kind object;
  #L4f19a8.  v1:= `@@io.reactivex.rxjava3.subjects.CompletableSubject.e` @type ^`io.reactivex.rxjava3.subjects.CompletableSubject$a`[] @kind object;
  #L4f19ac.  if v0 != v1 then goto L4f19b6;
  #L4f19b0.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/Disposable;.dispose:()V` @kind interface;
  #L4f19b6.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.rxjava3.subjects.CompletableSubject` v2 @kind this, `io.reactivex.rxjava3.core.CompletableObserver` v3 @kind object) @signature `Lio/reactivex/rxjava3/subjects/CompletableSubject;.subscribeActual:(Lio/reactivex/rxjava3/core/CompletableObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L4f1a50.  v0:= new `io.reactivex.rxjava3.subjects.CompletableSubject$a`;
  #L4f1a54.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/rxjava3/subjects/CompletableSubject$a;.<init>:(Lio/reactivex/rxjava3/core/CompletableObserver;Lio/reactivex/rxjava3/subjects/CompletableSubject;)V` @kind direct;
  #L4f1a5a.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/rxjava3/core/CompletableObserver;.onSubscribe:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @kind interface;
  #L4f1a60.  call temp:= `e`(v2, v0) @signature `Lio/reactivex/rxjava3/subjects/CompletableSubject;.e:(Lio/reactivex/rxjava3/subjects/CompletableSubject$a;)Z` @kind virtual;
  #L4f1a66.  v1:= temp;
  #L4f1a68.  if v1 == 0 then goto L4f1a80;
  #L4f1a6c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/subjects/CompletableSubject$a;.isDisposed:()Z` @kind virtual;
  #L4f1a72.  v3:= temp;
  #L4f1a74.  if v3 == 0 then goto L4f1a96;
  #L4f1a78.  call `f`(v2, v0) @signature `Lio/reactivex/rxjava3/subjects/CompletableSubject;.f:(Lio/reactivex/rxjava3/subjects/CompletableSubject$a;)V` @kind virtual;
  #L4f1a7e.  goto L4f1a96;
  #L4f1a80.  v0:= v2.`io.reactivex.rxjava3.subjects.CompletableSubject.c` @type ^`java.lang.Throwable` @kind object;
  #L4f1a84.  if v0 == 0 then goto L4f1a90;
  #L4f1a88.  call `onError`(v3, v0) @signature `Lio/reactivex/rxjava3/core/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4f1a8e.  goto L4f1a96;
  #L4f1a90.  call `onComplete`(v3) @signature `Lio/reactivex/rxjava3/core/CompletableObserver;.onComplete:()V` @kind interface;
  #L4f1a96.  return @kind void;
}
