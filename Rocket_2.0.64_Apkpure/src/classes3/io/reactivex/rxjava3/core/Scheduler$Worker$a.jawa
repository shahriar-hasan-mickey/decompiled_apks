record `io.reactivex.rxjava3.core.Scheduler$Worker$a` @kind class @AccessFlag FINAL extends `java.lang.Runnable` @kind interface, `io.reactivex.rxjava3.schedulers.SchedulerRunnableIntrospection` @kind interface {
  `java.lang.Runnable` `io.reactivex.rxjava3.core.Scheduler$Worker$a.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.disposables.SequentialDisposable` `io.reactivex.rxjava3.core.Scheduler$Worker$a.b` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.core.Scheduler$Worker$a.c` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.core.Scheduler$Worker$a.d` @AccessFlag ;
  `long` `io.reactivex.rxjava3.core.Scheduler$Worker$a.e` @AccessFlag ;
  `long` `io.reactivex.rxjava3.core.Scheduler$Worker$a.f` @AccessFlag ;
  `io.reactivex.rxjava3.core.Scheduler$Worker` `io.reactivex.rxjava3.core.Scheduler$Worker$a.g` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.core.Scheduler$Worker$a` v0 @kind this, `io.reactivex.rxjava3.core.Scheduler$Worker` v1 @kind object, `long` v2 , `java.lang.Runnable` v4 @kind object, `long` v5 , `io.reactivex.rxjava3.internal.disposables.SequentialDisposable` v7 @kind object, `long` v8 ) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker$a;.<init>:(Lio/reactivex/rxjava3/core/Scheduler$Worker;JLjava/lang/Runnable;JLio/reactivex/rxjava3/internal/disposables/SequentialDisposable;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4763fc.  v0.`io.reactivex.rxjava3.core.Scheduler$Worker$a.g` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` := v1 @kind object;
  #L476400.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L476406.  v0.`io.reactivex.rxjava3.core.Scheduler$Worker$a.a` @type ^`java.lang.Runnable` := v4 @kind object;
  #L47640a.  v0.`io.reactivex.rxjava3.core.Scheduler$Worker$a.b` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` := v7 @kind object;
  #L47640e.  v0.`io.reactivex.rxjava3.core.Scheduler$Worker$a.c` @type ^`long` := v8 @kind wide;
  #L476412.  v0.`io.reactivex.rxjava3.core.Scheduler$Worker$a.e` @type ^`long` := v5 @kind wide;
  #L476416.  v0.`io.reactivex.rxjava3.core.Scheduler$Worker$a.f` @type ^`long` := v2 @kind wide;
  #L47641a.  return @kind void;
}
procedure `java.lang.Runnable` `getWrappedRunnable`(`io.reactivex.rxjava3.core.Scheduler$Worker$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker$a;.getWrappedRunnable:()Ljava/lang/Runnable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4763e4.  v0:= v1.`io.reactivex.rxjava3.core.Scheduler$Worker$a.a` @type ^`java.lang.Runnable` @kind object;
  #L4763e8.  return v0 @kind object;
}
procedure `void` `run`(`io.reactivex.rxjava3.core.Scheduler$Worker$a` v12 @kind this) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L47642c.  v0:= v12.`io.reactivex.rxjava3.core.Scheduler$Worker$a.a` @type ^`java.lang.Runnable` @kind object;
  #L476430.  call `run`(v0) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L476436.  v0:= v12.`io.reactivex.rxjava3.core.Scheduler$Worker$a.b` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L47643a.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.isDisposed:()Z` @kind virtual;
  #L476440.  v0:= temp;
  #L476442.  if v0 != 0 then goto L4764d2;
  #L476446.  v0:= v12.`io.reactivex.rxjava3.core.Scheduler$Worker$a.g` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L47644a.  v1:= `@@java.util.concurrent.TimeUnit.NANOSECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L47644e.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L476454.  v2:= temp @kind wide;
  #L476456.  v4:= `@@io.reactivex.rxjava3.core.Scheduler.a` @type ^`long` @kind wide;
  #L47645a.  v6:= v2 + v4 @kind long;
  #L47645e.  v8:= v12.`io.reactivex.rxjava3.core.Scheduler$Worker$a.e` @type ^`long` @kind wide;
  #L476462.  v10:= 1L;
  #L476466.  v0:= lcmp(v6, v8);
  #L47646a.  if v0 < 0 then goto L476496;
  #L47646e.  v6:= v12.`io.reactivex.rxjava3.core.Scheduler$Worker$a.c` @type ^`long` @kind wide;
  #L476472.  v8:= v8 + v6 @kind long;
  #L476474.  v8:= v8 + v4 @kind long;
  #L476476.  v0:= lcmp(v2, v8);
  #L47647a.  if v0 < 0 then goto L476480;
  #L47647e.  goto L476496;
  #L476480.  v4:= v12.`io.reactivex.rxjava3.core.Scheduler$Worker$a.f` @type ^`long` @kind wide;
  #L476484.  v8:= v12.`io.reactivex.rxjava3.core.Scheduler$Worker$a.d` @type ^`long` @kind wide;
  #L476488.  v8:= v8 + v10 @kind long;
  #L47648a.  v12.`io.reactivex.rxjava3.core.Scheduler$Worker$a.d` @type ^`long` := v8 @kind wide;
  #L47648e.  v8:= v8 * v6 @kind long;
  #L476492.  v4:= v4 + v8 @kind long;
  #L476494.  goto L4764b6;
  #L476496.  v4:= v12.`io.reactivex.rxjava3.core.Scheduler$Worker$a.c` @type ^`long` @kind wide;
  #L47649a.  v6:= v2 + v4 @kind long;
  #L47649e.  v8:= v12.`io.reactivex.rxjava3.core.Scheduler$Worker$a.d` @type ^`long` @kind wide;
  #L4764a2.  v8:= v8 + v10 @kind long;
  #L4764a4.  v12.`io.reactivex.rxjava3.core.Scheduler$Worker$a.d` @type ^`long` := v8 @kind wide;
  #L4764a8.  v4:= v4 * v8 @kind long;
  #L4764ac.  v4:= v6 - v4 @kind long;
  #L4764b0.  v12.`io.reactivex.rxjava3.core.Scheduler$Worker$a.f` @type ^`long` := v4 @kind wide;
  #L4764b4.  v4:= v6 @kind wide;
  #L4764b6.  v12.`io.reactivex.rxjava3.core.Scheduler$Worker$a.e` @type ^`long` := v2 @kind wide;
  #L4764ba.  v4:= v4 - v2 @kind long;
  #L4764bc.  v0:= v12.`io.reactivex.rxjava3.core.Scheduler$Worker$a.b` @type ^`io.reactivex.rxjava3.internal.disposables.SequentialDisposable` @kind object;
  #L4764c0.  v2:= v12.`io.reactivex.rxjava3.core.Scheduler$Worker$a.g` @type ^`io.reactivex.rxjava3.core.Scheduler$Worker` @kind object;
  #L4764c4.  call temp:= `schedule`(v2, v12, v4, v1) @signature `Lio/reactivex/rxjava3/core/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/Disposable;` @kind virtual;
  #L4764ca.  v1:= temp @kind object;
  #L4764cc.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/rxjava3/disposables/Disposable;)Z` @kind virtual;
  #L4764d2.  return @kind void;
}
