record `io.reactivex.rxjava3.core.FlowableEmitter` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE extends `io.reactivex.rxjava3.core.Emitter` @kind interface {
}
procedure `boolean` `isCancelled`() @signature `Lio/reactivex/rxjava3/core/FlowableEmitter;.isCancelled:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `long` `requested`() @signature `Lio/reactivex/rxjava3/core/FlowableEmitter;.requested:()J` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `io.reactivex.rxjava3.core.FlowableEmitter` `serialize`() @signature `Lio/reactivex/rxjava3/core/FlowableEmitter;.serialize:()Lio/reactivex/rxjava3/core/FlowableEmitter;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `setCancellable`(`io.reactivex.rxjava3.functions.Cancellable` v0 @kind object) @signature `Lio/reactivex/rxjava3/core/FlowableEmitter;.setCancellable:(Lio/reactivex/rxjava3/functions/Cancellable;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `setDisposable`(`io.reactivex.rxjava3.disposables.Disposable` v0 @kind object) @signature `Lio/reactivex/rxjava3/core/FlowableEmitter;.setDisposable:(Lio/reactivex/rxjava3/disposables/Disposable;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `tryOnError`(`java.lang.Throwable` v0 @kind object) @signature `Lio/reactivex/rxjava3/core/FlowableEmitter;.tryOnError:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
