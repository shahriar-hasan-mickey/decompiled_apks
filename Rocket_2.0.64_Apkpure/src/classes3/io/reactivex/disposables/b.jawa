record `io.reactivex.disposables.b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.disposables.b.a` @AccessFlag PRIVATE_FINAL;
}
global `long` `@@io.reactivex.disposables.b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.disposables.b` v0 @kind this, `java.util.concurrent.Future` v1 @kind object, `boolean` v2 ) @signature `Lio/reactivex/disposables/b;.<init>:(Ljava/util/concurrent/Future;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L400e9c.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L400ea2.  v0.`io.reactivex.disposables.b.a` @type ^`boolean` := v2 @kind boolean;
  #L400ea6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.disposables.b` v2 @kind this) @signature `Lio/reactivex/disposables/b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L400eb8.  v0:= 0I;
  #L400eba.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L400ec0.  v0:= temp @kind object;
  #L400ec2.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L400ec6.  if v0 == 0 then goto L400ed4;
  #L400eca.  v1:= v2.`io.reactivex.disposables.b.a` @type ^`boolean` @kind boolean;
  #L400ece.  call temp:= `cancel`(v0, v1) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L400ed4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.disposables.b` v1 @kind this) @signature `Lio/reactivex/disposables/b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L400e64.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L400e6a.  v0:= temp @kind object;
  #L400e6c.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L400e70.  if v0 == 0 then goto L400e86;
  #L400e74.  call temp:= `isDone`(v0) @signature `Ljava/util/concurrent/Future;.isDone:()Z` @kind interface;
  #L400e7a.  v0:= temp;
  #L400e7c.  if v0 == 0 then goto L400e82;
  #L400e80.  goto L400e86;
  #L400e82.  v0:= 0I;
  #L400e84.  goto L400e88;
  #L400e86.  v0:= 1I;
  #L400e88.  return v0;
}
