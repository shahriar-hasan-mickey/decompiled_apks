record `io.reactivex.disposables.c` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
}
global `long` `@@io.reactivex.disposables.c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.disposables.c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/disposables/c;.<init>:(Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L400f0c.  v0:= "value is null" @kind object;
  #L400f10.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L400f16.  v2:= temp @kind object;
  #L400f18.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L400f1e.  return @kind void;
}
procedure `void` `a`(`java.lang.Object` v0 @kind object) @signature `Lio/reactivex/disposables/c;.a:(Ljava/lang/Object;)V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `dispose`(`io.reactivex.disposables.c` v1 @kind this) @signature `Lio/reactivex/disposables/c;.dispose:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L400f30.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L400f36.  v0:= temp @kind object;
  #L400f38.  if v0 == 0 then goto L400f50;
  #L400f3c.  v0:= 0I;
  #L400f3e.  call temp:= `getAndSet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L400f44.  v0:= temp @kind object;
  #L400f46.  if v0 == 0 then goto L400f50;
  #L400f4a.  call `a`(v1, v0) @signature `Lio/reactivex/disposables/c;.a:(Ljava/lang/Object;)V` @kind virtual;
  #L400f50.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.disposables.c` v1 @kind this) @signature `Lio/reactivex/disposables/c;.isDisposed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L400ee8.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L400eee.  v0:= temp @kind object;
  #L400ef0.  if v0 != 0 then goto L400ef8;
  #L400ef4.  v0:= 1I;
  #L400ef6.  goto L400efa;
  #L400ef8.  v0:= 0I;
  #L400efa.  return v0;
}
