record `io.reactivex.Scheduler$a` @kind class @AccessFlag FINAL extends `java.lang.Runnable` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.lang.Runnable` `io.reactivex.Scheduler$a.a` @AccessFlag FINAL;
  `io.reactivex.Scheduler$Worker` `io.reactivex.Scheduler$a.b` @AccessFlag FINAL;
  `java.lang.Thread` `io.reactivex.Scheduler$a.c` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.Scheduler$a` v0 @kind this, `java.lang.Runnable` v1 @kind object, `io.reactivex.Scheduler$Worker` v2 @kind object) @signature `Lio/reactivex/Scheduler$a;.<init>:(Ljava/lang/Runnable;Lio/reactivex/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3fe8a8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3fe8ae.  v0.`io.reactivex.Scheduler$a.a` @type ^`java.lang.Runnable` := v1 @kind object;
  #L3fe8b2.  v0.`io.reactivex.Scheduler$a.b` @type ^`io.reactivex.Scheduler$Worker` := v2 @kind object;
  #L3fe8b6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.Scheduler$a` v2 @kind this) @signature `Lio/reactivex/Scheduler$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fe8c8.  v0:= v2.`io.reactivex.Scheduler$a.c` @type ^`java.lang.Thread` @kind object;
  #L3fe8cc.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L3fe8d2.  v1:= temp @kind object;
  #L3fe8d4.  if v0 != v1 then goto L3fe8f0;
  #L3fe8d8.  v0:= v2.`io.reactivex.Scheduler$a.b` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L3fe8dc.  v1:= instanceof @variable v0 @type ^`io.reactivex.internal.schedulers.NewThreadWorker` @kind boolean;
  #L3fe8e0.  if v1 == 0 then goto L3fe8f0;
  #L3fe8e4.  v0:= (`io.reactivex.internal.schedulers.NewThreadWorker`) v0 @kind object;
  #L3fe8e8.  call `shutdown`(v0) @signature `Lio/reactivex/internal/schedulers/NewThreadWorker;.shutdown:()V` @kind virtual;
  #L3fe8ee.  goto L3fe8fa;
  #L3fe8f0.  v0:= v2.`io.reactivex.Scheduler$a.b` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L3fe8f4.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L3fe8fa.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.Scheduler$a` v1 @kind this) @signature `Lio/reactivex/Scheduler$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fe888.  v0:= v1.`io.reactivex.Scheduler$a.b` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L3fe88c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L3fe892.  v0:= temp;
  #L3fe894.  return v0;
}
procedure `void` `run`(`io.reactivex.Scheduler$a` v2 @kind this) @signature `Lio/reactivex/Scheduler$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fe90c.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L3fe912.  v0:= temp @kind object;
  #L3fe914.  v2.`io.reactivex.Scheduler$a.c` @type ^`java.lang.Thread` := v0 @kind object;
  #L3fe918.  v0:= 0I;
  #L3fe91a.  v1:= v2.`io.reactivex.Scheduler$a.a` @type ^`java.lang.Runnable` @kind object;
  #L3fe91e.  call `run`(v1) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L3fe924.  call `dispose`(v2) @signature `Lio/reactivex/Scheduler$a;.dispose:()V` @kind virtual;
  #L3fe92a.  v2.`io.reactivex.Scheduler$a.c` @type ^`java.lang.Thread` := v0 @kind object;
  #L3fe92e.  return @kind void;
  #L3fe930.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3fe932.  call `dispose`(v2) @signature `Lio/reactivex/Scheduler$a;.dispose:()V` @kind virtual;
  #L3fe938.  v2.`io.reactivex.Scheduler$a.c` @type ^`java.lang.Thread` := v0 @kind object;
  #L3fe93c.  throw v1;
  catch `java.lang.Throwable` @[L3fe91a..L3fe924] goto L3fe930;
}
