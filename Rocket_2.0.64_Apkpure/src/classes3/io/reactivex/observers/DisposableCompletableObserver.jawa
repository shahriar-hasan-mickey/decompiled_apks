record `io.reactivex.observers.DisposableCompletableObserver` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.reactivex.CompletableObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.observers.DisposableCompletableObserver.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.observers.DisposableCompletableObserver` v1 @kind this) @signature `Lio/reactivex/observers/DisposableCompletableObserver;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L45ca74.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L45ca7a.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L45ca7e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L45ca84.  v1.`io.reactivex.observers.DisposableCompletableObserver.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L45ca88.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.observers.DisposableCompletableObserver` v1 @kind this) @signature `Lio/reactivex/observers/DisposableCompletableObserver;.dispose:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45ca9c.  v0:= v1.`io.reactivex.observers.DisposableCompletableObserver.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45caa0.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L45caa6.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.observers.DisposableCompletableObserver` v2 @kind this) @signature `Lio/reactivex/observers/DisposableCompletableObserver;.isDisposed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L45ca48.  v0:= v2.`io.reactivex.observers.DisposableCompletableObserver.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45ca4c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45ca52.  v0:= temp @kind object;
  #L45ca54.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L45ca58.  if v0 != v1 then goto L45ca60;
  #L45ca5c.  v0:= 1I;
  #L45ca5e.  goto L45ca62;
  #L45ca60.  v0:= 0I;
  #L45ca62.  return v0;
}
procedure `void` `onStart`(`io.reactivex.observers.DisposableCompletableObserver` v0 @kind this) @signature `Lio/reactivex/observers/DisposableCompletableObserver;.onStart:()V` @AccessFlag PROTECTED {
    temp;

  #L45cab8.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.observers.DisposableCompletableObserver` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/observers/DisposableCompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L45cacc.  v0:= v2.`io.reactivex.observers.DisposableCompletableObserver.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45cad0.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L45cad6.  v1:= temp @kind object;
  #L45cad8.  call temp:= `setOnce`(v0, v3, v1) @signature `Lio/reactivex/internal/util/EndConsumerHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;Ljava/lang/Class;)Z` @kind static;
  #L45cade.  v3:= temp;
  #L45cae0.  if v3 == 0 then goto L45caea;
  #L45cae4.  call `onStart`(v2) @signature `Lio/reactivex/observers/DisposableCompletableObserver;.onStart:()V` @kind virtual;
  #L45caea.  return @kind void;
}
