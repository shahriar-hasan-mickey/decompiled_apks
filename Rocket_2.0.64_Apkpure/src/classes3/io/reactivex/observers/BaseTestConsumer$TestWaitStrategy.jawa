record `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` @kind class @AccessFlag PUBLIC_ABSTRACT_ENUM extends `java.lang.Enum` @kind class, `java.lang.Runnable` @kind interface {
}
global `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SLEEP_1000MS` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SLEEP_100MS` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SLEEP_10MS` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SLEEP_1MS` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SPIN` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.YIELD` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy`[] `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.a` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L45b7b8.  v0:= new `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy$a`;
  #L45b7bc.  v1:= "SPIN" @kind object;
  #L45b7c0.  v2:= 0I;
  #L45b7c2.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy$a;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L45b7c8.  `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SPIN` @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` := v0 @kind object;
  #L45b7cc.  v1:= new `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy$b`;
  #L45b7d0.  v3:= "YIELD" @kind object;
  #L45b7d4.  v4:= 1I;
  #L45b7d6.  call `<init>`(v1, v3, v4) @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy$b;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L45b7dc.  `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.YIELD` @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` := v1 @kind object;
  #L45b7e0.  v3:= new `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy$c`;
  #L45b7e4.  v5:= "SLEEP_1MS" @kind object;
  #L45b7e8.  v6:= 2I;
  #L45b7ea.  call `<init>`(v3, v5, v6) @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy$c;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L45b7f0.  `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SLEEP_1MS` @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` := v3 @kind object;
  #L45b7f4.  v5:= new `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy$d`;
  #L45b7f8.  v7:= "SLEEP_10MS" @kind object;
  #L45b7fc.  v8:= 3I;
  #L45b7fe.  call `<init>`(v5, v7, v8) @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy$d;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L45b804.  `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SLEEP_10MS` @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` := v5 @kind object;
  #L45b808.  v7:= new `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy$e`;
  #L45b80c.  v9:= "SLEEP_100MS" @kind object;
  #L45b810.  v10:= 4I;
  #L45b812.  call `<init>`(v7, v9, v10) @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy$e;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L45b818.  `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SLEEP_100MS` @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` := v7 @kind object;
  #L45b81c.  v9:= new `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy$f`;
  #L45b820.  v11:= "SLEEP_1000MS" @kind object;
  #L45b824.  v12:= 5I;
  #L45b826.  call `<init>`(v9, v11, v12) @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy$f;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L45b82c.  `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SLEEP_1000MS` @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` := v9 @kind object;
  #L45b830.  v11:= 6I;
  #L45b832.  v11:= new `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy`[v11];
  #L45b836.  v11[v2]:= v0 @kind object;
  #L45b83a.  v11[v4]:= v1 @kind object;
  #L45b83e.  v11[v6]:= v3 @kind object;
  #L45b842.  v11[v8]:= v5 @kind object;
  #L45b846.  v11[v10]:= v7 @kind object;
  #L45b84a.  v11[v12]:= v9 @kind object;
  #L45b84e.  `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.a` @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy`[] := v11 @kind object;
  #L45b852.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy;.<init>:(Ljava/lang/String;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L45b864.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L45b86a.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `io.reactivex.observers.BaseTestConsumer$a` v3 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy;.<init>:(Ljava/lang/String;ILio/reactivex/observers/BaseTestConsumer$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L45b87c.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L45b882.  return @kind void;
}
procedure `void` `a`(`int` v2 ) @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy;.a:(I)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L45b894.  v0:= (`long`) v2 @kind i2l;
  #L45b896.  call `sleep`(v0) @signature `Ljava/lang/Thread;.sleep:(J)V` @kind static;
  #L45b89c.  return @kind void;
  #L45b89e.  v2:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L45b8a0.  v0:= new `java.lang.RuntimeException`;
  #L45b8a4.  call `<init>`(v0, v2) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L45b8aa.  throw v0;
  catch `java.lang.InterruptedException` @[L45b896..L45b89c] goto L45b89e;
}
procedure `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy;.valueOf:(Ljava/lang/String;)Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L45b770.  v0:= constclass @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` @kind object;
  #L45b774.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L45b77a.  v1:= temp @kind object;
  #L45b77c.  v1:= (`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy`) v1 @kind object;
  #L45b780.  return v1 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy`[] `values`() @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy;.values:()[Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L45b794.  v0:= `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.a` @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy`[] @kind object;
  #L45b798.  call temp:= `clone`(v0) @signature `[Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy;.clone:()Ljava/lang/Object;` @kind virtual;
  #L45b79e.  v0:= temp @kind object;
  #L45b7a0.  v0:= (`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy`[]) v0 @kind object;
  #L45b7a4.  return v0 @kind object;
}
procedure `void` `run`() @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy;.run:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
