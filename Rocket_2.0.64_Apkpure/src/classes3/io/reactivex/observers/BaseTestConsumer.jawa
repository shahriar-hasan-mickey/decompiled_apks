record `io.reactivex.observers.BaseTestConsumer` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.observers.BaseTestConsumer.checkSubscriptionOnce` @AccessFlag PROTECTED;
  `long` `io.reactivex.observers.BaseTestConsumer.completions` @AccessFlag PROTECTED;
  `java.util.concurrent.CountDownLatch` `io.reactivex.observers.BaseTestConsumer.done` @AccessFlag PROTECTED_FINAL;
  `java.util.List` `io.reactivex.observers.BaseTestConsumer.errors` @AccessFlag PROTECTED_FINAL;
  `int` `io.reactivex.observers.BaseTestConsumer.establishedFusionMode` @AccessFlag PROTECTED;
  `int` `io.reactivex.observers.BaseTestConsumer.initialFusionMode` @AccessFlag PROTECTED;
  `java.lang.Thread` `io.reactivex.observers.BaseTestConsumer.lastThread` @AccessFlag PROTECTED;
  `java.lang.CharSequence` `io.reactivex.observers.BaseTestConsumer.tag` @AccessFlag PROTECTED;
  `boolean` `io.reactivex.observers.BaseTestConsumer.timeout` @AccessFlag PROTECTED;
  `java.util.List` `io.reactivex.observers.BaseTestConsumer.values` @AccessFlag PROTECTED_FINAL;
}
procedure `void` `<init>`(`io.reactivex.observers.BaseTestConsumer` v2 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L45c980.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L45c986.  v0:= new `io.reactivex.internal.util.VolatileSizeArrayList`;
  #L45c98a.  call `<init>`(v0) @signature `Lio/reactivex/internal/util/VolatileSizeArrayList;.<init>:()V` @kind direct;
  #L45c990.  v2.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` := v0 @kind object;
  #L45c994.  v0:= new `io.reactivex.internal.util.VolatileSizeArrayList`;
  #L45c998.  call `<init>`(v0) @signature `Lio/reactivex/internal/util/VolatileSizeArrayList;.<init>:()V` @kind direct;
  #L45c99e.  v2.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` := v0 @kind object;
  #L45c9a2.  v0:= new `java.util.concurrent.CountDownLatch`;
  #L45c9a6.  v1:= 1I;
  #L45c9a8.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/CountDownLatch;.<init>:(I)V` @kind direct;
  #L45c9ae.  v2.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` := v0 @kind object;
  #L45c9b2.  return @kind void;
}
procedure `java.lang.String` `valueAndClass`(`java.lang.Object` v2 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.valueAndClass:(Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L45c850.  if v2 == 0 then goto L45c898;
  #L45c854.  v0:= new `java.lang.StringBuilder`;
  #L45c858.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L45c85e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c864.  v1:= " (class: " @kind object;
  #L45c868.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c86e.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L45c874.  v2:= temp @kind object;
  #L45c876.  call temp:= `getSimpleName`(v2) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L45c87c.  v2:= temp @kind object;
  #L45c87e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c884.  v2:= ")" @kind object;
  #L45c888.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c88e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L45c894.  v2:= temp @kind object;
  #L45c896.  return v2 @kind object;
  #L45c898.  v2:= "null" @kind object;
  #L45c89c.  return v2 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertComplete`(`io.reactivex.observers.BaseTestConsumer` v5 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertComplete:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L45ba18.  v0:= v5.`io.reactivex.observers.BaseTestConsumer.completions` @type ^`long` @kind wide;
  #L45ba1c.  v2:= 0L;
  #L45ba20.  v4:= lcmp(v0, v2);
  #L45ba24.  if v4 == 0 then goto L45ba62;
  #L45ba28.  v2:= 1L;
  #L45ba2c.  v4:= lcmp(v0, v2);
  #L45ba30.  if v4 > 0 then goto L45ba36;
  #L45ba34.  return v5 @kind object;
  #L45ba36.  v2:= new `java.lang.StringBuilder`;
  #L45ba3a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L45ba40.  v3:= "Multiple completions: " @kind object;
  #L45ba44.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45ba4a.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L45ba50.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L45ba56.  v0:= temp @kind object;
  #L45ba58.  call temp:= `fail`(v5, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L45ba5e.  v0:= temp @kind object;
  #L45ba60.  throw v0;
  #L45ba62.  v0:= "Not completed" @kind object;
  #L45ba66.  call temp:= `fail`(v5, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L45ba6c.  v0:= temp @kind object;
  #L45ba6e.  throw v0;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertEmpty`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertEmpty:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45ba80.  call temp:= `assertSubscribed`(v1) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertSubscribed:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L45ba86.  v0:= temp @kind object;
  #L45ba88.  call temp:= `assertNoValues`(v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNoValues:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L45ba8e.  v0:= temp @kind object;
  #L45ba90.  call temp:= `assertNoErrors`(v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNoErrors:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L45ba96.  v0:= temp @kind object;
  #L45ba98.  call temp:= `assertNotComplete`(v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNotComplete:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L45ba9e.  v0:= temp @kind object;
  #L45baa0.  return v0 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertError`(`io.reactivex.observers.BaseTestConsumer` v5 @kind this, `io.reactivex.functions.Predicate` v6 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertError:(Lio/reactivex/functions/Predicate;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L45bab4.  v0:= v5.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L45bab8.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L45babe.  v0:= temp;
  #L45bac0.  if v0 == 0 then goto L45bb2e;
  #L45bac4.  v1:= 0I;
  #L45bac6.  v2:= v5.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L45baca.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L45bad0.  v2:= temp @kind object;
  #L45bad2.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L45bad8.  v3:= temp;
  #L45bada.  v4:= 1I;
  #L45badc.  if v3 == 0 then goto L45bb08;
  #L45bae0.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L45bae6.  v3:= temp @kind object;
  #L45bae8.  v3:= (`java.lang.Throwable`) v3 @kind object;
  #L45baec.  call temp:= `test`(v6, v3) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L45baf2.  v3:= temp;
  #L45baf4.  if v3 == 0 then goto L45bad2;
  #L45baf8.  v1:= 1I;
  #L45bafa.  goto L45bb08;
  #L45bafc.  v6:= Exception @type ^`java.lang.Exception` @kind object;
  #L45bafe.  call temp:= `wrapOrThrow`(v6) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L45bb04.  v6:= temp @kind object;
  #L45bb06.  throw v6;
  #L45bb08.  if v1 == 0 then goto L45bb20;
  #L45bb0c.  if v0 != v4 then goto L45bb12;
  #L45bb10.  return v5 @kind object;
  #L45bb12.  v6:= "Error present but other errors as well" @kind object;
  #L45bb16.  call temp:= `fail`(v5, v6) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L45bb1c.  v6:= temp @kind object;
  #L45bb1e.  throw v6;
  #L45bb20.  v6:= "Error not present" @kind object;
  #L45bb24.  call temp:= `fail`(v5, v6) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L45bb2a.  v6:= temp @kind object;
  #L45bb2c.  throw v6;
  #L45bb2e.  v6:= "No errors" @kind object;
  #L45bb32.  call temp:= `fail`(v5, v6) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L45bb38.  v6:= temp @kind object;
  #L45bb3a.  throw v6;
  catch `java.lang.Exception` @[L45baec..L45baf4] goto L45bafc;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertError`(`io.reactivex.observers.BaseTestConsumer` v0 @kind this, `java.lang.Class` v1 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertError:(Ljava/lang/Class;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L45bb5c.  call temp:= `isInstanceOf`(v1) @signature `Lio/reactivex/internal/functions/Functions;.isInstanceOf:(Ljava/lang/Class;)Lio/reactivex/functions/Predicate;` @kind static;
  #L45bb62.  v1:= temp @kind object;
  #L45bb64.  call temp:= `assertError`(v0, v1) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertError:(Lio/reactivex/functions/Predicate;)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L45bb6a.  v1:= temp @kind object;
  #L45bb6c.  return v1 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertError`(`io.reactivex.observers.BaseTestConsumer` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertError:(Ljava/lang/Throwable;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L45bb80.  call temp:= `equalsWith`(v1) @signature `Lio/reactivex/internal/functions/Functions;.equalsWith:(Ljava/lang/Object;)Lio/reactivex/functions/Predicate;` @kind static;
  #L45bb86.  v1:= temp @kind object;
  #L45bb88.  call temp:= `assertError`(v0, v1) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertError:(Lio/reactivex/functions/Predicate;)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L45bb8e.  v1:= temp @kind object;
  #L45bb90.  return v1 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertErrorMessage`(`io.reactivex.observers.BaseTestConsumer` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertErrorMessage:(Ljava/lang/String;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L45bba4.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L45bba8.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L45bbae.  v0:= temp;
  #L45bbb0.  if v0 == 0 then goto L45bc2c;
  #L45bbb4.  v1:= 1I;
  #L45bbb6.  if v0 != v1 then goto L45bc1e;
  #L45bbba.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L45bbbe.  v1:= 0I;
  #L45bbc0.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L45bbc6.  v0:= temp @kind object;
  #L45bbc8.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L45bbcc.  call temp:= `getMessage`(v0) @signature `Ljava/lang/Throwable;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L45bbd2.  v0:= temp @kind object;
  #L45bbd4.  call temp:= `equals`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L45bbda.  v1:= temp;
  #L45bbdc.  if v1 == 0 then goto L45bbe2;
  #L45bbe0.  return v3 @kind object;
  #L45bbe2.  v1:= new `java.lang.StringBuilder`;
  #L45bbe6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L45bbec.  v2:= "Error message differs; Expected: " @kind object;
  #L45bbf0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45bbf6.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45bbfc.  v4:= ", Actual: " @kind object;
  #L45bc00.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45bc06.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45bc0c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L45bc12.  v4:= temp @kind object;
  #L45bc14.  call temp:= `fail`(v3, v4) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L45bc1a.  v4:= temp @kind object;
  #L45bc1c.  throw v4;
  #L45bc1e.  v4:= "Multiple errors" @kind object;
  #L45bc22.  call temp:= `fail`(v3, v4) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L45bc28.  v4:= temp @kind object;
  #L45bc2a.  throw v4;
  #L45bc2c.  v4:= "No errors" @kind object;
  #L45bc30.  call temp:= `fail`(v3, v4) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L45bc36.  v4:= temp @kind object;
  #L45bc38.  throw v4;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertFailure`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this, `io.reactivex.functions.Predicate` v2 @kind object, `java.lang.Object`[] v3 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertFailure:(Lio/reactivex/functions/Predicate;[Ljava/lang/Object;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45bc4c.  call temp:= `assertSubscribed`(v1) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertSubscribed:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L45bc52.  v0:= temp @kind object;
  #L45bc54.  call temp:= `assertValues`(v0, v3) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValues:([Ljava/lang/Object;)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L45bc5a.  v3:= temp @kind object;
  #L45bc5c.  call temp:= `assertError`(v3, v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertError:(Lio/reactivex/functions/Predicate;)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L45bc62.  v2:= temp @kind object;
  #L45bc64.  call temp:= `assertNotComplete`(v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNotComplete:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L45bc6a.  v2:= temp @kind object;
  #L45bc6c.  return v2 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertFailure`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.Object`[] v3 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertFailure:(Ljava/lang/Class;[Ljava/lang/Object;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45bc80.  call temp:= `assertSubscribed`(v1) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertSubscribed:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L45bc86.  v0:= temp @kind object;
  #L45bc88.  call temp:= `assertValues`(v0, v3) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValues:([Ljava/lang/Object;)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L45bc8e.  v3:= temp @kind object;
  #L45bc90.  call temp:= `assertError`(v3, v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertError:(Ljava/lang/Class;)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L45bc96.  v2:= temp @kind object;
  #L45bc98.  call temp:= `assertNotComplete`(v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNotComplete:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L45bc9e.  v2:= temp @kind object;
  #L45bca0.  return v2 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertFailureAndMessage`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.String` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertFailureAndMessage:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Object;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45bcb4.  call temp:= `assertSubscribed`(v1) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertSubscribed:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L45bcba.  v0:= temp @kind object;
  #L45bcbc.  call temp:= `assertValues`(v0, v4) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValues:([Ljava/lang/Object;)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L45bcc2.  v4:= temp @kind object;
  #L45bcc4.  call temp:= `assertError`(v4, v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertError:(Ljava/lang/Class;)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L45bcca.  v2:= temp @kind object;
  #L45bccc.  call temp:= `assertErrorMessage`(v2, v3) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertErrorMessage:(Ljava/lang/String;)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L45bcd2.  v2:= temp @kind object;
  #L45bcd4.  call temp:= `assertNotComplete`(v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNotComplete:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L45bcda.  v2:= temp @kind object;
  #L45bcdc.  return v2 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertNever`(`io.reactivex.observers.BaseTestConsumer` v3 @kind this, `io.reactivex.functions.Predicate` v4 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNever:(Lio/reactivex/functions/Predicate;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L45bcf0.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L45bcf4.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L45bcfa.  v0:= temp;
  #L45bcfc.  v1:= 0I;
  #L45bcfe.  if v1 >= v0 then goto L45bd7a;
  #L45bd02.  v2:= v3.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L45bd06.  call temp:= `get`(v2, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L45bd0c.  v2:= temp @kind object;
  #L45bd0e.  call temp:= `test`(v4, v2) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L45bd14.  v2:= temp;
  #L45bd16.  if v2 != 0 then goto L45bd20;
  #L45bd1a.  v1:= v1 + 1;
  #L45bd1e.  goto L45bcfe;
  #L45bd20.  v0:= new `java.lang.StringBuilder`;
  #L45bd24.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L45bd2a.  v2:= "Value at position " @kind object;
  #L45bd2e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45bd34.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L45bd3a.  v1:= " matches predicate " @kind object;
  #L45bd3e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45bd44.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L45bd4a.  v4:= temp @kind object;
  #L45bd4c.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45bd52.  v4:= ", which was not expected." @kind object;
  #L45bd56.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45bd5c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L45bd62.  v4:= temp @kind object;
  #L45bd64.  call temp:= `fail`(v3, v4) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L45bd6a.  v4:= temp @kind object;
  #L45bd6c.  throw v4;
  #L45bd6e.  v4:= Exception @type ^`java.lang.Exception` @kind object;
  #L45bd70.  call temp:= `wrapOrThrow`(v4) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L45bd76.  v4:= temp @kind object;
  #L45bd78.  throw v4;
  #L45bd7a.  return v3 @kind object;
  catch `java.lang.Exception` @[L45bd0e..L45bd6e] goto L45bd6e;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertNever`(`io.reactivex.observers.BaseTestConsumer` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNever:(Ljava/lang/Object;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L45bd9c.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L45bda0.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L45bda6.  v0:= temp;
  #L45bda8.  v1:= 0I;
  #L45bdaa.  if v1 >= v0 then goto L45be1a;
  #L45bdae.  v2:= v3.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L45bdb2.  call temp:= `get`(v2, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L45bdb8.  v2:= temp @kind object;
  #L45bdba.  call temp:= `equals`(v2, v4) @signature `Lio/reactivex/internal/functions/ObjectHelper;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L45bdc0.  v2:= temp;
  #L45bdc2.  if v2 != 0 then goto L45bdcc;
  #L45bdc6.  v1:= v1 + 1;
  #L45bdca.  goto L45bdaa;
  #L45bdcc.  v0:= new `java.lang.StringBuilder`;
  #L45bdd0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L45bdd6.  v2:= "Value at position " @kind object;
  #L45bdda.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45bde0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L45bde6.  v1:= " is equal to " @kind object;
  #L45bdea.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45bdf0.  call temp:= `valueAndClass`(v4) @signature `Lio/reactivex/observers/BaseTestConsumer;.valueAndClass:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L45bdf6.  v4:= temp @kind object;
  #L45bdf8.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45bdfe.  v4:= "; Expected them to be different" @kind object;
  #L45be02.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45be08.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L45be0e.  v4:= temp @kind object;
  #L45be10.  call temp:= `fail`(v3, v4) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L45be16.  v4:= temp @kind object;
  #L45be18.  throw v4;
  #L45be1a.  return v3 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertNoErrors`(`io.reactivex.observers.BaseTestConsumer` v2 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNoErrors:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L45be2c.  v0:= v2.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L45be30.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L45be36.  v0:= temp;
  #L45be38.  if v0 != 0 then goto L45be3e;
  #L45be3c.  return v2 @kind object;
  #L45be3e.  v0:= new `java.lang.StringBuilder`;
  #L45be42.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L45be48.  v1:= "Error(s) present: " @kind object;
  #L45be4c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45be52.  v1:= v2.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L45be56.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45be5c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L45be62.  v0:= temp @kind object;
  #L45be64.  call temp:= `fail`(v2, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L45be6a.  v0:= temp @kind object;
  #L45be6c.  throw v0;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertNoTimeout`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNoTimeout:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45be80.  v0:= v1.`io.reactivex.observers.BaseTestConsumer.timeout` @type ^`boolean` @kind boolean;
  #L45be84.  if v0 != 0 then goto L45be8a;
  #L45be88.  return v1 @kind object;
  #L45be8a.  v0:= "Timeout?!" @kind object;
  #L45be8e.  call temp:= `fail`(v1, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L45be94.  v0:= temp @kind object;
  #L45be96.  throw v0;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertNoValues`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNoValues:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45bea8.  v0:= 0I;
  #L45beaa.  call temp:= `assertValueCount`(v1, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValueCount:(I)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L45beb0.  v0:= temp @kind object;
  #L45beb2.  return v0 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertNotComplete`(`io.reactivex.observers.BaseTestConsumer` v5 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNotComplete:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L45bec4.  v0:= v5.`io.reactivex.observers.BaseTestConsumer.completions` @type ^`long` @kind wide;
  #L45bec8.  v2:= 1L;
  #L45becc.  v4:= lcmp(v0, v2);
  #L45bed0.  if v4 == 0 then goto L45bf06;
  #L45bed4.  if v4 > 0 then goto L45beda;
  #L45bed8.  return v5 @kind object;
  #L45beda.  v2:= new `java.lang.StringBuilder`;
  #L45bede.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L45bee4.  v3:= "Multiple completions: " @kind object;
  #L45bee8.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45beee.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L45bef4.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L45befa.  v0:= temp @kind object;
  #L45befc.  call temp:= `fail`(v5, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L45bf02.  v0:= temp @kind object;
  #L45bf04.  throw v0;
  #L45bf06.  v0:= "Completed!" @kind object;
  #L45bf0a.  call temp:= `fail`(v5, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L45bf10.  v0:= temp @kind object;
  #L45bf12.  throw v0;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertNotSubscribed`() @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNotSubscribed:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertNotTerminated`(`io.reactivex.observers.BaseTestConsumer` v5 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNotTerminated:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L45bf24.  v0:= v5.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L45bf28.  call temp:= `getCount`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L45bf2e.  v0:= temp @kind wide;
  #L45bf30.  v2:= 0L;
  #L45bf34.  v4:= lcmp(v0, v2);
  #L45bf38.  if v4 == 0 then goto L45bf3e;
  #L45bf3c.  return v5 @kind object;
  #L45bf3e.  v0:= "Subscriber terminated!" @kind object;
  #L45bf42.  call temp:= `fail`(v5, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L45bf48.  v0:= temp @kind object;
  #L45bf4a.  throw v0;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertResult`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertResult:([Ljava/lang/Object;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45bf5c.  call temp:= `assertSubscribed`(v1) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertSubscribed:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L45bf62.  v0:= temp @kind object;
  #L45bf64.  call temp:= `assertValues`(v0, v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValues:([Ljava/lang/Object;)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L45bf6a.  v2:= temp @kind object;
  #L45bf6c.  call temp:= `assertNoErrors`(v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNoErrors:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L45bf72.  v2:= temp @kind object;
  #L45bf74.  call temp:= `assertComplete`(v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertComplete:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L45bf7a.  v2:= temp @kind object;
  #L45bf7c.  return v2 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertSubscribed`() @signature `Lio/reactivex/observers/BaseTestConsumer;.assertSubscribed:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertTerminated`(`io.reactivex.observers.BaseTestConsumer` v7 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertTerminated:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L45bf90.  v0:= v7.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L45bf94.  call temp:= `getCount`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L45bf9a.  v0:= temp @kind wide;
  #L45bf9c.  v2:= 0L;
  #L45bfa0.  v4:= lcmp(v0, v2);
  #L45bfa4.  if v4 != 0 then goto L45c05e;
  #L45bfa8.  v0:= v7.`io.reactivex.observers.BaseTestConsumer.completions` @type ^`long` @kind wide;
  #L45bfac.  v4:= 1L;
  #L45bfb0.  v6:= lcmp(v0, v4);
  #L45bfb4.  if v6 > 0 then goto L45c032;
  #L45bfb8.  v4:= v7.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L45bfbc.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L45bfc2.  v4:= temp;
  #L45bfc4.  v5:= 1I;
  #L45bfc6.  if v4 > v5 then goto L45c006;
  #L45bfca.  v5:= lcmp(v0, v2);
  #L45bfce.  if v5 == 0 then goto L45c004;
  #L45bfd2.  if v4 != 0 then goto L45bfd8;
  #L45bfd6.  goto L45c004;
  #L45bfd8.  v2:= new `java.lang.StringBuilder`;
  #L45bfdc.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L45bfe2.  v3:= "Terminated with multiple completions and errors: " @kind object;
  #L45bfe6.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45bfec.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L45bff2.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L45bff8.  v0:= temp @kind object;
  #L45bffa.  call temp:= `fail`(v7, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L45c000.  v0:= temp @kind object;
  #L45c002.  throw v0;
  #L45c004.  return v7 @kind object;
  #L45c006.  v0:= new `java.lang.StringBuilder`;
  #L45c00a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L45c010.  v1:= "Terminated with multiple errors: " @kind object;
  #L45c014.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c01a.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c020.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L45c026.  v0:= temp @kind object;
  #L45c028.  call temp:= `fail`(v7, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L45c02e.  v0:= temp @kind object;
  #L45c030.  throw v0;
  #L45c032.  v2:= new `java.lang.StringBuilder`;
  #L45c036.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L45c03c.  v3:= "Terminated with multiple completions: " @kind object;
  #L45c040.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c046.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c04c.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L45c052.  v0:= temp @kind object;
  #L45c054.  call temp:= `fail`(v7, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L45c05a.  v0:= temp @kind object;
  #L45c05c.  throw v0;
  #L45c05e.  v0:= "Subscriber still running!" @kind object;
  #L45c062.  call temp:= `fail`(v7, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L45c068.  v0:= temp @kind object;
  #L45c06a.  throw v0;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertTimeout`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertTimeout:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45c07c.  v0:= v1.`io.reactivex.observers.BaseTestConsumer.timeout` @type ^`boolean` @kind boolean;
  #L45c080.  if v0 == 0 then goto L45c086;
  #L45c084.  return v1 @kind object;
  #L45c086.  v0:= "No timeout?!" @kind object;
  #L45c08a.  call temp:= `fail`(v1, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L45c090.  v0:= temp @kind object;
  #L45c092.  throw v0;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertValue`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValue:(Lio/reactivex/functions/Predicate;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45c0a4.  v0:= 0I;
  #L45c0a6.  call temp:= `assertValueAt`(v1, v0, v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValueAt:(ILio/reactivex/functions/Predicate;)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L45c0ac.  v2:= v1.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L45c0b0.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L45c0b6.  v2:= temp;
  #L45c0b8.  v0:= 1I;
  #L45c0ba.  if v2 > v0 then goto L45c0c0;
  #L45c0be.  return v1 @kind object;
  #L45c0c0.  v2:= "Value present but other values as well" @kind object;
  #L45c0c4.  call temp:= `fail`(v1, v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L45c0ca.  v2:= temp @kind object;
  #L45c0cc.  throw v2;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertValue`(`io.reactivex.observers.BaseTestConsumer` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValue:(Ljava/lang/Object;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45c0e0.  v0:= v4.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L45c0e4.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L45c0ea.  v0:= temp;
  #L45c0ec.  v1:= ", Actual: " @kind object;
  #L45c0f0.  v2:= "Expected: " @kind object;
  #L45c0f4.  v3:= 1I;
  #L45c0f6.  if v0 != v3 then goto L45c15a;
  #L45c0fa.  v0:= v4.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L45c0fe.  v3:= 0I;
  #L45c100.  call temp:= `get`(v0, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L45c106.  v0:= temp @kind object;
  #L45c108.  call temp:= `equals`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L45c10e.  v3:= temp;
  #L45c110.  if v3 == 0 then goto L45c116;
  #L45c114.  return v4 @kind object;
  #L45c116.  v3:= new `java.lang.StringBuilder`;
  #L45c11a.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L45c120.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c126.  call temp:= `valueAndClass`(v5) @signature `Lio/reactivex/observers/BaseTestConsumer;.valueAndClass:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L45c12c.  v5:= temp @kind object;
  #L45c12e.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c134.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c13a.  call temp:= `valueAndClass`(v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.valueAndClass:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L45c140.  v5:= temp @kind object;
  #L45c142.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c148.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L45c14e.  v5:= temp @kind object;
  #L45c150.  call temp:= `fail`(v4, v5) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L45c156.  v5:= temp @kind object;
  #L45c158.  throw v5;
  #L45c15a.  v0:= new `java.lang.StringBuilder`;
  #L45c15e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L45c164.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c16a.  call temp:= `valueAndClass`(v5) @signature `Lio/reactivex/observers/BaseTestConsumer;.valueAndClass:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L45c170.  v5:= temp @kind object;
  #L45c172.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c178.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c17e.  v5:= v4.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L45c182.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c188.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L45c18e.  v5:= temp @kind object;
  #L45c190.  call temp:= `fail`(v4, v5) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L45c196.  v5:= temp @kind object;
  #L45c198.  throw v5;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertValueAt`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this, `int` v2 , `io.reactivex.functions.Predicate` v3 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValueAt:(ILio/reactivex/functions/Predicate;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45c1ac.  v0:= v1.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L45c1b0.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L45c1b6.  v0:= temp;
  #L45c1b8.  if v0 == 0 then goto L45c22c;
  #L45c1bc.  v0:= v1.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L45c1c0.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L45c1c6.  v0:= temp;
  #L45c1c8.  if v2 >= v0 then goto L45c200;
  #L45c1cc.  v0:= v1.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L45c1d0.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L45c1d6.  v2:= temp @kind object;
  #L45c1d8.  call temp:= `test`(v3, v2) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L45c1de.  v2:= temp;
  #L45c1e0.  if v2 == 0 then goto L45c1e6;
  #L45c1e4.  return v1 @kind object;
  #L45c1e6.  v2:= "Value not present" @kind object;
  #L45c1ea.  call temp:= `fail`(v1, v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L45c1f0.  v2:= temp @kind object;
  #L45c1f2.  throw v2;
  #L45c1f4.  v2:= Exception @type ^`java.lang.Exception` @kind object;
  #L45c1f6.  call temp:= `wrapOrThrow`(v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L45c1fc.  v2:= temp @kind object;
  #L45c1fe.  throw v2;
  #L45c200.  v3:= new `java.lang.StringBuilder`;
  #L45c204.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L45c20a.  v0:= "Invalid index: " @kind object;
  #L45c20e.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c214.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c21a.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L45c220.  v2:= temp @kind object;
  #L45c222.  call temp:= `fail`(v1, v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L45c228.  v2:= temp @kind object;
  #L45c22a.  throw v2;
  #L45c22c.  v2:= "No values" @kind object;
  #L45c230.  call temp:= `fail`(v1, v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L45c236.  v2:= temp @kind object;
  #L45c238.  throw v2;
  catch `java.lang.Exception` @[L45c1cc..L45c1e0] goto L45c1f4;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertValueCount`(`io.reactivex.observers.BaseTestConsumer` v3 @kind this, `int` v4 ) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValueCount:(I)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L45c25c.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L45c260.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L45c266.  v0:= temp;
  #L45c268.  if v0 != v4 then goto L45c26e;
  #L45c26c.  return v3 @kind object;
  #L45c26e.  v1:= new `java.lang.StringBuilder`;
  #L45c272.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L45c278.  v2:= "Value counts differ; Expected: " @kind object;
  #L45c27c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c282.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c288.  v4:= ", Actual: " @kind object;
  #L45c28c.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c292.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c298.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L45c29e.  v4:= temp @kind object;
  #L45c2a0.  call temp:= `fail`(v3, v4) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L45c2a6.  v4:= temp @kind object;
  #L45c2a8.  throw v4;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertValueSequence`(`io.reactivex.observers.BaseTestConsumer` v5 @kind this, `java.lang.Iterable` v6 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValueSequence:(Ljava/lang/Iterable;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L45c2bc.  v0:= v5.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L45c2c0.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L45c2c6.  v0:= temp @kind object;
  #L45c2c8.  call temp:= `iterator`(v6) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L45c2ce.  v6:= temp @kind object;
  #L45c2d0.  v1:= 0I;
  #L45c2d2.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L45c2d8.  v2:= temp;
  #L45c2da.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L45c2e0.  v3:= temp;
  #L45c2e2.  if v2 == 0 then goto L45c36a;
  #L45c2e6.  if v3 != 0 then goto L45c2ec;
  #L45c2ea.  goto L45c36a;
  #L45c2ec.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L45c2f2.  v2:= temp @kind object;
  #L45c2f4.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L45c2fa.  v3:= temp @kind object;
  #L45c2fc.  call temp:= `equals`(v3, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L45c302.  v4:= temp;
  #L45c304.  if v4 == 0 then goto L45c30e;
  #L45c308.  v1:= v1 + 1;
  #L45c30c.  goto L45c2d2;
  #L45c30e.  v6:= new `java.lang.StringBuilder`;
  #L45c312.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L45c318.  v0:= "Values at position " @kind object;
  #L45c31c.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c322.  call temp:= `append`(v6, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c328.  v0:= " differ; Expected: " @kind object;
  #L45c32c.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c332.  call temp:= `valueAndClass`(v3) @signature `Lio/reactivex/observers/BaseTestConsumer;.valueAndClass:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L45c338.  v0:= temp @kind object;
  #L45c33a.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c340.  v0:= ", Actual: " @kind object;
  #L45c344.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c34a.  call temp:= `valueAndClass`(v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.valueAndClass:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L45c350.  v0:= temp @kind object;
  #L45c352.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c358.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L45c35e.  v6:= temp @kind object;
  #L45c360.  call temp:= `fail`(v5, v6) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L45c366.  v6:= temp @kind object;
  #L45c368.  throw v6;
  #L45c36a.  v6:= ")" @kind object;
  #L45c36e.  if v2 != 0 then goto L45c3aa;
  #L45c372.  if v3 != 0 then goto L45c378;
  #L45c376.  return v5 @kind object;
  #L45c378.  v0:= new `java.lang.StringBuilder`;
  #L45c37c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L45c382.  v2:= "Fever values received than expected (" @kind object;
  #L45c386.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c38c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c392.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c398.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L45c39e.  v6:= temp @kind object;
  #L45c3a0.  call temp:= `fail`(v5, v6) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L45c3a6.  v6:= temp @kind object;
  #L45c3a8.  throw v6;
  #L45c3aa.  v0:= new `java.lang.StringBuilder`;
  #L45c3ae.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L45c3b4.  v2:= "More values received than expected (" @kind object;
  #L45c3b8.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c3be.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c3c4.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c3ca.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L45c3d0.  v6:= temp @kind object;
  #L45c3d2.  call temp:= `fail`(v5, v6) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L45c3d8.  v6:= temp @kind object;
  #L45c3da.  throw v6;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertValueSet`(`io.reactivex.observers.BaseTestConsumer` v3 @kind this, `java.util.Collection` v4 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValueSet:(Ljava/util/Collection;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L45c3ec.  call temp:= `isEmpty`(v4) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L45c3f2.  v0:= temp;
  #L45c3f4.  if v0 == 0 then goto L45c400;
  #L45c3f8.  call temp:= `assertNoValues`(v3) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNoValues:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L45c3fe.  return v3 @kind object;
  #L45c400.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L45c404.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L45c40a.  v0:= temp @kind object;
  #L45c40c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L45c412.  v1:= temp;
  #L45c414.  if v1 == 0 then goto L45c462;
  #L45c418.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L45c41e.  v1:= temp @kind object;
  #L45c420.  call temp:= `contains`(v4, v1) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L45c426.  v2:= temp;
  #L45c428.  if v2 == 0 then goto L45c42e;
  #L45c42c.  goto L45c40c;
  #L45c42e.  v4:= new `java.lang.StringBuilder`;
  #L45c432.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L45c438.  v0:= "Value not in the expected collection: " @kind object;
  #L45c43c.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c442.  call temp:= `valueAndClass`(v1) @signature `Lio/reactivex/observers/BaseTestConsumer;.valueAndClass:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L45c448.  v0:= temp @kind object;
  #L45c44a.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c450.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L45c456.  v4:= temp @kind object;
  #L45c458.  call temp:= `fail`(v3, v4) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L45c45e.  v4:= temp @kind object;
  #L45c460.  throw v4;
  #L45c462.  return v3 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertValues`(`io.reactivex.observers.BaseTestConsumer` v6 @kind this, `java.lang.Object`[] v7 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValues:([Ljava/lang/Object;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L45c474.  v0:= v6.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L45c478.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L45c47e.  v0:= temp;
  #L45c480.  v1:= length @variable v7;
  #L45c482.  v2:= ", Actual: " @kind object;
  #L45c486.  if v0 != v1 then goto L45c50c;
  #L45c48a.  v1:= 0I;
  #L45c48c.  if v1 >= v0 then goto L45c50a;
  #L45c490.  v3:= v6.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L45c494.  call temp:= `get`(v3, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L45c49a.  v3:= temp @kind object;
  #L45c49c.  v4:= v7[v1] @kind object;
  #L45c4a0.  call temp:= `equals`(v4, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L45c4a6.  v5:= temp;
  #L45c4a8.  if v5 == 0 then goto L45c4b2;
  #L45c4ac.  v1:= v1 + 1;
  #L45c4b0.  goto L45c48c;
  #L45c4b2.  v7:= new `java.lang.StringBuilder`;
  #L45c4b6.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L45c4bc.  v0:= "Values at position " @kind object;
  #L45c4c0.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c4c6.  call temp:= `append`(v7, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c4cc.  v0:= " differ; Expected: " @kind object;
  #L45c4d0.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c4d6.  call temp:= `valueAndClass`(v4) @signature `Lio/reactivex/observers/BaseTestConsumer;.valueAndClass:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L45c4dc.  v0:= temp @kind object;
  #L45c4de.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c4e4.  call temp:= `append`(v7, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c4ea.  call temp:= `valueAndClass`(v3) @signature `Lio/reactivex/observers/BaseTestConsumer;.valueAndClass:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L45c4f0.  v0:= temp @kind object;
  #L45c4f2.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c4f8.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L45c4fe.  v7:= temp @kind object;
  #L45c500.  call temp:= `fail`(v6, v7) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L45c506.  v7:= temp @kind object;
  #L45c508.  throw v7;
  #L45c50a.  return v6 @kind object;
  #L45c50c.  v1:= new `java.lang.StringBuilder`;
  #L45c510.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L45c516.  v3:= "Value count differs; Expected: " @kind object;
  #L45c51a.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c520.  v3:= length @variable v7;
  #L45c522.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c528.  v3:= " " @kind object;
  #L45c52c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c532.  call temp:= `toString`(v7) @signature `Ljava/util/Arrays;.toString:([Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L45c538.  v7:= temp @kind object;
  #L45c53a.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c540.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c546.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c54c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c552.  v7:= v6.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L45c556.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c55c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L45c562.  v7:= temp @kind object;
  #L45c564.  call temp:= `fail`(v6, v7) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L45c56a.  v7:= temp @kind object;
  #L45c56c.  throw v7;
}
procedure `io.reactivex.observers.BaseTestConsumer` `await`(`io.reactivex.observers.BaseTestConsumer` v5 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.await:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L45c580.  v0:= v5.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L45c584.  call temp:= `getCount`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L45c58a.  v0:= temp @kind wide;
  #L45c58c.  v2:= 0L;
  #L45c590.  v4:= lcmp(v0, v2);
  #L45c594.  if v4 != 0 then goto L45c59a;
  #L45c598.  return v5 @kind object;
  #L45c59a.  v0:= v5.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L45c59e.  call `await`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.await:()V` @kind virtual;
  #L45c5a4.  return v5 @kind object;
}
procedure `boolean` `await`(`io.reactivex.observers.BaseTestConsumer` v5 @kind this, `long` v6 , `java.util.concurrent.TimeUnit` v8 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.await:(JLjava/util/concurrent/TimeUnit;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L45b8cc.  v0:= v5.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L45b8d0.  call temp:= `getCount`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L45b8d6.  v0:= temp @kind wide;
  #L45b8d8.  v2:= 0L;
  #L45b8dc.  v4:= lcmp(v0, v2);
  #L45b8e0.  if v4 == 0 then goto L45b8fa;
  #L45b8e4.  v0:= v5.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L45b8e8.  call temp:= `await`(v0, v6, v8) @signature `Ljava/util/concurrent/CountDownLatch;.await:(JLjava/util/concurrent/TimeUnit;)Z` @kind virtual;
  #L45b8ee.  v6:= temp;
  #L45b8f0.  if v6 == 0 then goto L45b8f6;
  #L45b8f4.  goto L45b8fa;
  #L45b8f6.  v6:= 0I;
  #L45b8f8.  goto L45b8fc;
  #L45b8fa.  v6:= 1I;
  #L45b8fc.  v7:= v6 ^~ 1;
  #L45b900.  v5.`io.reactivex.observers.BaseTestConsumer.timeout` @type ^`boolean` := v7 @kind boolean;
  #L45b904.  return v6;
}
procedure `io.reactivex.observers.BaseTestConsumer` `awaitCount`(`io.reactivex.observers.BaseTestConsumer` v3 @kind this, `int` v4 ) @signature `Lio/reactivex/observers/BaseTestConsumer;.awaitCount:(I)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L45c5b8.  v0:= `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SLEEP_10MS` @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` @kind object;
  #L45c5bc.  v1:= 5000L;
  #L45c5c0.  call temp:= `awaitCount`(v3, v4, v0, v1) @signature `Lio/reactivex/observers/BaseTestConsumer;.awaitCount:(ILjava/lang/Runnable;J)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L45c5c6.  v4:= temp @kind object;
  #L45c5c8.  return v4 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `awaitCount`(`io.reactivex.observers.BaseTestConsumer` v2 @kind this, `int` v3 , `java.lang.Runnable` v4 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.awaitCount:(ILjava/lang/Runnable;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L45c5dc.  v0:= 5000L;
  #L45c5e0.  call temp:= `awaitCount`(v2, v3, v4, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.awaitCount:(ILjava/lang/Runnable;J)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L45c5e6.  v3:= temp @kind object;
  #L45c5e8.  return v3 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `awaitCount`(`io.reactivex.observers.BaseTestConsumer` v7 @kind this, `int` v8 , `java.lang.Runnable` v9 @kind object, `long` v10 ) @signature `Lio/reactivex/observers/BaseTestConsumer;.awaitCount:(ILjava/lang/Runnable;J)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L45c5fc.  call temp:= `currentTimeMillis`() @signature `Ljava/lang/System;.currentTimeMillis:()J` @kind static;
  #L45c602.  v0:= temp @kind wide;
  #L45c604.  v2:= 0L;
  #L45c608.  v4:= lcmp(v10, v2);
  #L45c60c.  if v4 <= 0 then goto L45c62a;
  #L45c610.  call temp:= `currentTimeMillis`() @signature `Ljava/lang/System;.currentTimeMillis:()J` @kind static;
  #L45c616.  v4:= temp @kind wide;
  #L45c618.  v4:= v4 - v0 @kind long;
  #L45c61a.  v6:= lcmp(v4, v10);
  #L45c61e.  if v6 < 0 then goto L45c62a;
  #L45c622.  v8:= 1I;
  #L45c624.  v7.`io.reactivex.observers.BaseTestConsumer.timeout` @type ^`boolean` := v8 @kind boolean;
  #L45c628.  goto L45c650;
  #L45c62a.  v4:= v7.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L45c62e.  call temp:= `getCount`(v4) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L45c634.  v4:= temp @kind wide;
  #L45c636.  v6:= lcmp(v4, v2);
  #L45c63a.  if v6 != 0 then goto L45c640;
  #L45c63e.  goto L45c650;
  #L45c640.  v2:= v7.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L45c644.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L45c64a.  v2:= temp;
  #L45c64c.  if v2 < v8 then goto L45c652;
  #L45c650.  return v7 @kind object;
  #L45c652.  call `run`(v9) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L45c658.  goto L45c604;
}
procedure `io.reactivex.observers.BaseTestConsumer` `awaitDone`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.awaitDone:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45c66c.  v0:= v1.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L45c670.  call temp:= `await`(v0, v2, v4) @signature `Ljava/util/concurrent/CountDownLatch;.await:(JLjava/util/concurrent/TimeUnit;)Z` @kind virtual;
  #L45c676.  v2:= temp;
  #L45c678.  if v2 != 0 then goto L45c688;
  #L45c67c.  v2:= 1I;
  #L45c67e.  v1.`io.reactivex.observers.BaseTestConsumer.timeout` @type ^`boolean` := v2 @kind boolean;
  #L45c682.  call `dispose`(v1) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L45c688.  return v1 @kind object;
  #L45c68a.  v2:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L45c68c.  call `dispose`(v1) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L45c692.  call temp:= `wrapOrThrow`(v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L45c698.  v2:= temp @kind object;
  #L45c69a.  throw v2;
  catch `java.lang.InterruptedException` @[L45c66c..L45c688] goto L45c68a;
}
procedure `boolean` `awaitTerminalEvent`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.awaitTerminalEvent:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45b918.  call temp:= `await`(v1) @signature `Lio/reactivex/observers/BaseTestConsumer;.await:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L45b91e.  v0:= 1I;
  #L45b920.  return v0;
  #L45b922.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L45b928.  v0:= temp @kind object;
  #L45b92a.  call `interrupt`(v0) @signature `Ljava/lang/Thread;.interrupt:()V` @kind virtual;
  #L45b930.  v0:= 0I;
  #L45b932.  return v0;
  catch `java.lang.InterruptedException` @[L45b918..L45b91e] goto L45b922;
}
procedure `boolean` `awaitTerminalEvent`(`io.reactivex.observers.BaseTestConsumer` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.awaitTerminalEvent:(JLjava/util/concurrent/TimeUnit;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L45b954.  call temp:= `await`(v0, v1, v3) @signature `Lio/reactivex/observers/BaseTestConsumer;.await:(JLjava/util/concurrent/TimeUnit;)Z` @kind virtual;
  #L45b95a.  v1:= temp;
  #L45b95c.  return v1;
  #L45b95e.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L45b964.  v1:= temp @kind object;
  #L45b966.  call `interrupt`(v1) @signature `Ljava/lang/Thread;.interrupt:()V` @kind virtual;
  #L45b96c.  v1:= 0I;
  #L45b96e.  return v1;
  catch `java.lang.InterruptedException` @[L45b954..L45b95c] goto L45b95e;
}
procedure `io.reactivex.observers.BaseTestConsumer` `clearTimeout`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.clearTimeout:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45c6bc.  v0:= 0I;
  #L45c6be.  v1.`io.reactivex.observers.BaseTestConsumer.timeout` @type ^`boolean` := v0 @kind boolean;
  #L45c6c2.  return v1 @kind object;
}
procedure `long` `completions`(`io.reactivex.observers.BaseTestConsumer` v2 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.completions:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L45c968.  v0:= v2.`io.reactivex.observers.BaseTestConsumer.completions` @type ^`long` @kind wide;
  #L45c96c.  return v0 @kind wide;
}
procedure `int` `errorCount`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.errorCount:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45b9d8.  v0:= v1.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L45b9dc.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L45b9e2.  v0:= temp;
  #L45b9e4.  return v0;
}
procedure `java.util.List` `errors`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.errors:()Ljava/util/List;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45c8c8.  v0:= v1.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L45c8cc.  return v0 @kind object;
}
procedure `java.lang.AssertionError` `fail`(`io.reactivex.observers.BaseTestConsumer` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L45c6ec.  v0:= new `java.lang.StringBuilder`;
  #L45c6f0.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L45c6f6.  v1:= temp;
  #L45c6f8.  v1:= v1 + 64;
  #L45c6fc.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L45c702.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c708.  v4:= " (" @kind object;
  #L45c70c.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c712.  v4:= "latch = " @kind object;
  #L45c716.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c71c.  v4:= v3.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L45c720.  call temp:= `getCount`(v4) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L45c726.  v1:= temp @kind wide;
  #L45c728.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c72e.  v4:= ", " @kind object;
  #L45c732.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c738.  v1:= "values = " @kind object;
  #L45c73c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c742.  v1:= v3.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L45c746.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L45c74c.  v1:= temp;
  #L45c74e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c754.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c75a.  v1:= "errors = " @kind object;
  #L45c75e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c764.  v1:= v3.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L45c768.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L45c76e.  v1:= temp;
  #L45c770.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c776.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c77c.  v4:= "completions = " @kind object;
  #L45c780.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c786.  v1:= v3.`io.reactivex.observers.BaseTestConsumer.completions` @type ^`long` @kind wide;
  #L45c78a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c790.  v4:= v3.`io.reactivex.observers.BaseTestConsumer.timeout` @type ^`boolean` @kind boolean;
  #L45c794.  if v4 == 0 then goto L45c7a2;
  #L45c798.  v4:= ", timeout!" @kind object;
  #L45c79c.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c7a2.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L45c7a8.  v4:= temp;
  #L45c7aa.  if v4 == 0 then goto L45c7b8;
  #L45c7ae.  v4:= ", disposed!" @kind object;
  #L45c7b2.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c7b8.  v4:= v3.`io.reactivex.observers.BaseTestConsumer.tag` @type ^`java.lang.CharSequence` @kind object;
  #L45c7bc.  if v4 == 0 then goto L45c7d0;
  #L45c7c0.  v1:= ", tag = " @kind object;
  #L45c7c4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c7ca.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c7d0.  v4:= 41I;
  #L45c7d4.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L45c7da.  v4:= new `java.lang.AssertionError`;
  #L45c7de.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L45c7e4.  v0:= temp @kind object;
  #L45c7e6.  call `<init>`(v4, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L45c7ec.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L45c7f0.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L45c7f6.  v0:= temp;
  #L45c7f8.  if v0 != 0 then goto L45c83c;
  #L45c7fc.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L45c800.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L45c806.  v0:= temp;
  #L45c808.  v1:= 1I;
  #L45c80a.  if v0 != v1 then goto L45c828;
  #L45c80e.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L45c812.  v1:= 0I;
  #L45c814.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L45c81a.  v0:= temp @kind object;
  #L45c81c.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L45c820.  call temp:= `initCause`(v4, v0) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L45c826.  goto L45c83c;
  #L45c828.  v0:= new `io.reactivex.exceptions.CompositeException`;
  #L45c82c.  v1:= v3.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L45c830.  call `<init>`(v0, v1) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:(Ljava/lang/Iterable;)V` @kind direct;
  #L45c836.  call temp:= `initCause`(v4, v0) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L45c83c.  return v4 @kind object;
}
procedure `java.util.List` `getEvents`(`io.reactivex.observers.BaseTestConsumer` v7 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.getEvents:()Ljava/util/List;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L45c8e0.  v0:= new `java.util.ArrayList`;
  #L45c8e4.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L45c8ea.  call temp:= `values`(v7) @signature `Lio/reactivex/observers/BaseTestConsumer;.values:()Ljava/util/List;` @kind virtual;
  #L45c8f0.  v1:= temp @kind object;
  #L45c8f2.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L45c8f8.  call temp:= `errors`(v7) @signature `Lio/reactivex/observers/BaseTestConsumer;.errors:()Ljava/util/List;` @kind virtual;
  #L45c8fe.  v1:= temp @kind object;
  #L45c900.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L45c906.  v1:= new `java.util.ArrayList`;
  #L45c90a.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L45c910.  v2:= 0L;
  #L45c914.  v4:= v7.`io.reactivex.observers.BaseTestConsumer.completions` @type ^`long` @kind wide;
  #L45c918.  v6:= lcmp(v2, v4);
  #L45c91c.  if v6 >= 0 then goto L45c936;
  #L45c920.  call temp:= `createOnComplete`() @signature `Lio/reactivex/Notification;.createOnComplete:()Lio/reactivex/Notification;` @kind static;
  #L45c926.  v4:= temp @kind object;
  #L45c928.  call temp:= `add`(v1, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L45c92e.  v4:= 1L;
  #L45c932.  v2:= v2 + v4 @kind long;
  #L45c934.  goto L45c914;
  #L45c936.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L45c93c.  return v0 @kind object;
}
procedure `boolean` `isTerminated`(`io.reactivex.observers.BaseTestConsumer` v5 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.isTerminated:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L45b990.  v0:= v5.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L45b994.  call temp:= `getCount`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L45b99a.  v0:= temp @kind wide;
  #L45b99c.  v2:= 0L;
  #L45b9a0.  v4:= lcmp(v0, v2);
  #L45b9a4.  if v4 != 0 then goto L45b9ac;
  #L45b9a8.  v0:= 1I;
  #L45b9aa.  goto L45b9ae;
  #L45b9ac.  v0:= 0I;
  #L45b9ae.  return v0;
}
procedure `boolean` `isTimeout`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.isTimeout:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45b9c0.  v0:= v1.`io.reactivex.observers.BaseTestConsumer.timeout` @type ^`boolean` @kind boolean;
  #L45b9c4.  return v0;
}
procedure `java.lang.Thread` `lastThread`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.lastThread:()Ljava/lang/Thread;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45c8b0.  v0:= v1.`io.reactivex.observers.BaseTestConsumer.lastThread` @type ^`java.lang.Thread` @kind object;
  #L45c8b4.  return v0 @kind object;
}
procedure `int` `valueCount`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.valueCount:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45b9f8.  v0:= v1.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L45b9fc.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L45ba02.  v0:= temp;
  #L45ba04.  return v0;
}
procedure `java.util.List` `values`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.values:()Ljava/util/List;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45c950.  v0:= v1.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L45c954.  return v0 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `withTag`(`io.reactivex.observers.BaseTestConsumer` v0 @kind this, `java.lang.CharSequence` v1 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.withTag:(Ljava/lang/CharSequence;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L45c6d4.  v0.`io.reactivex.observers.BaseTestConsumer.tag` @type ^`java.lang.CharSequence` := v1 @kind object;
  #L45c6d8.  return v0 @kind object;
}
