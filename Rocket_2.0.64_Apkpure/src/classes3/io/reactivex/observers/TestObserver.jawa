record `io.reactivex.observers.TestObserver` @kind class @AccessFlag PUBLIC extends `io.reactivex.observers.BaseTestConsumer` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.SingleObserver` @kind interface, `io.reactivex.CompletableObserver` @kind interface {
  `io.reactivex.Observer` `io.reactivex.observers.TestObserver.a` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.observers.TestObserver.b` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.internal.fuseable.QueueDisposable` `io.reactivex.observers.TestObserver.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`io.reactivex.observers.TestObserver` v1 @kind this) @signature `Lio/reactivex/observers/TestObserver;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L45db00.  v0:= `@@io.reactivex.observers.TestObserver$a.a` @type ^`io.reactivex.observers.TestObserver$a` @kind object;
  #L45db04.  call `<init>`(v1, v0) @signature `Lio/reactivex/observers/TestObserver;.<init>:(Lio/reactivex/Observer;)V` @kind direct;
  #L45db0a.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.observers.TestObserver` v1 @kind this, `io.reactivex.Observer` v2 @kind object) @signature `Lio/reactivex/observers/TestObserver;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L45db1c.  call `<init>`(v1) @signature `Lio/reactivex/observers/BaseTestConsumer;.<init>:()V` @kind direct;
  #L45db22.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L45db26.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L45db2c.  v1.`io.reactivex.observers.TestObserver.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L45db30.  v1.`io.reactivex.observers.TestObserver.a` @type ^`io.reactivex.Observer` := v2 @kind object;
  #L45db34.  return @kind void;
}
procedure `io.reactivex.observers.TestObserver` `create`() @signature `Lio/reactivex/observers/TestObserver;.create:()Lio/reactivex/observers/TestObserver;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L45dac8.  v0:= new `io.reactivex.observers.TestObserver`;
  #L45dacc.  call `<init>`(v0) @signature `Lio/reactivex/observers/TestObserver;.<init>:()V` @kind direct;
  #L45dad2.  return v0 @kind object;
}
procedure `io.reactivex.observers.TestObserver` `create`(`io.reactivex.Observer` v1 @kind object) @signature `Lio/reactivex/observers/TestObserver;.create:(Lio/reactivex/Observer;)Lio/reactivex/observers/TestObserver;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L45dae4.  v0:= new `io.reactivex.observers.TestObserver`;
  #L45dae8.  call `<init>`(v0, v1) @signature `Lio/reactivex/observers/TestObserver;.<init>:(Lio/reactivex/Observer;)V` @kind direct;
  #L45daee.  return v0 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertNotSubscribed`(`io.reactivex.observers.TestObserver` v1 @kind this) @signature `Lio/reactivex/observers/TestObserver;.assertNotSubscribed:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L45d9e0.  call temp:= `assertNotSubscribed`(v1) @signature `Lio/reactivex/observers/TestObserver;.assertNotSubscribed:()Lio/reactivex/observers/TestObserver;` @kind virtual;
  #L45d9e6.  v0:= temp @kind object;
  #L45d9e8.  return v0 @kind object;
}
procedure `io.reactivex.observers.TestObserver` `assertNotSubscribed`(`io.reactivex.observers.TestObserver` v1 @kind this) @signature `Lio/reactivex/observers/TestObserver;.assertNotSubscribed:()Lio/reactivex/observers/TestObserver;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45da18.  v0:= v1.`io.reactivex.observers.TestObserver.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45da1c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45da22.  v0:= temp @kind object;
  #L45da24.  if v0 != 0 then goto L45da48;
  #L45da28.  v0:= v1.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L45da2c.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L45da32.  v0:= temp;
  #L45da34.  if v0 == 0 then goto L45da3a;
  #L45da38.  return v1 @kind object;
  #L45da3a.  v0:= "Not subscribed but errors found" @kind object;
  #L45da3e.  call temp:= `fail`(v1, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L45da44.  v0:= temp @kind object;
  #L45da46.  throw v0;
  #L45da48.  v0:= "Subscribed!" @kind object;
  #L45da4c.  call temp:= `fail`(v1, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L45da52.  v0:= temp @kind object;
  #L45da54.  throw v0;
}
procedure `io.reactivex.observers.TestObserver` `assertOf`(`io.reactivex.observers.TestObserver` v0 @kind this, `io.reactivex.functions.Consumer` v1 @kind object) @signature `Lio/reactivex/observers/TestObserver;.assertOf:(Lio/reactivex/functions/Consumer;)Lio/reactivex/observers/TestObserver;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L45da68.  call `accept`(v1, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L45da6e.  return v0 @kind object;
  #L45da70.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45da72.  call temp:= `wrapOrThrow`(v1) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L45da78.  v1:= temp @kind object;
  #L45da7a.  throw v1;
  catch `java.lang.Throwable` @[L45da68..L45da6e] goto L45da70;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertSubscribed`(`io.reactivex.observers.TestObserver` v1 @kind this) @signature `Lio/reactivex/observers/TestObserver;.assertSubscribed:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L45d9fc.  call temp:= `assertSubscribed`(v1) @signature `Lio/reactivex/observers/TestObserver;.assertSubscribed:()Lio/reactivex/observers/TestObserver;` @kind virtual;
  #L45da02.  v0:= temp @kind object;
  #L45da04.  return v0 @kind object;
}
procedure `io.reactivex.observers.TestObserver` `assertSubscribed`(`io.reactivex.observers.TestObserver` v1 @kind this) @signature `Lio/reactivex/observers/TestObserver;.assertSubscribed:()Lio/reactivex/observers/TestObserver;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45da98.  v0:= v1.`io.reactivex.observers.TestObserver.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45da9c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45daa2.  v0:= temp @kind object;
  #L45daa4.  if v0 == 0 then goto L45daaa;
  #L45daa8.  return v1 @kind object;
  #L45daaa.  v0:= "Not subscribed!" @kind object;
  #L45daae.  call temp:= `fail`(v1, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L45dab4.  v0:= temp @kind object;
  #L45dab6.  throw v0;
}
procedure `void` `cancel`(`io.reactivex.observers.TestObserver` v0 @kind this) @signature `Lio/reactivex/observers/TestObserver;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L45db48.  call `dispose`(v0) @signature `Lio/reactivex/observers/TestObserver;.dispose:()V` @kind virtual;
  #L45db4e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.observers.TestObserver` v1 @kind this) @signature `Lio/reactivex/observers/TestObserver;.dispose:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45db60.  v0:= v1.`io.reactivex.observers.TestObserver.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45db64.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L45db6a.  return @kind void;
}
procedure `boolean` `hasSubscription`(`io.reactivex.observers.TestObserver` v1 @kind this) @signature `Lio/reactivex/observers/TestObserver;.hasSubscription:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45d970.  v0:= v1.`io.reactivex.observers.TestObserver.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45d974.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45d97a.  v0:= temp @kind object;
  #L45d97c.  if v0 == 0 then goto L45d984;
  #L45d980.  v0:= 1I;
  #L45d982.  goto L45d986;
  #L45d984.  v0:= 0I;
  #L45d986.  return v0;
}
procedure `boolean` `isCancelled`(`io.reactivex.observers.TestObserver` v1 @kind this) @signature `Lio/reactivex/observers/TestObserver;.isCancelled:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45d998.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/observers/TestObserver;.isDisposed:()Z` @kind virtual;
  #L45d99e.  v0:= temp;
  #L45d9a0.  return v0;
}
procedure `boolean` `isDisposed`(`io.reactivex.observers.TestObserver` v1 @kind this) @signature `Lio/reactivex/observers/TestObserver;.isDisposed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45d9b4.  v0:= v1.`io.reactivex.observers.TestObserver.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45d9b8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45d9be.  v0:= temp @kind object;
  #L45d9c0.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L45d9c4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L45d9ca.  v0:= temp;
  #L45d9cc.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.observers.TestObserver` v4 @kind this) @signature `Lio/reactivex/observers/TestObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45db7c.  v0:= v4.`io.reactivex.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` @kind boolean;
  #L45db80.  if v0 != 0 then goto L45dbb2;
  #L45db84.  v0:= 1I;
  #L45db86.  v4.`io.reactivex.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` := v0 @kind boolean;
  #L45db8a.  v0:= v4.`io.reactivex.observers.TestObserver.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45db8e.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45db94.  v0:= temp @kind object;
  #L45db96.  if v0 != 0 then goto L45dbb2;
  #L45db9a.  v0:= v4.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L45db9e.  v1:= new `java.lang.IllegalStateException`;
  #L45dba2.  v2:= "onSubscribe not called in proper order" @kind object;
  #L45dba6.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45dbac.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L45dbb2.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L45dbb8.  v0:= temp @kind object;
  #L45dbba.  v4.`io.reactivex.observers.BaseTestConsumer.lastThread` @type ^`java.lang.Thread` := v0 @kind object;
  #L45dbbe.  v0:= v4.`io.reactivex.observers.BaseTestConsumer.completions` @type ^`long` @kind wide;
  #L45dbc2.  v2:= 1L;
  #L45dbc6.  v0:= v0 + v2 @kind long;
  #L45dbc8.  v4.`io.reactivex.observers.BaseTestConsumer.completions` @type ^`long` := v0 @kind wide;
  #L45dbcc.  v0:= v4.`io.reactivex.observers.TestObserver.a` @type ^`io.reactivex.Observer` @kind object;
  #L45dbd0.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L45dbd6.  v0:= v4.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L45dbda.  call `countDown`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L45dbe0.  return @kind void;
  #L45dbe2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45dbe4.  v1:= v4.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L45dbe8.  call `countDown`(v1) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L45dbee.  throw v0;
  catch `java.lang.Throwable` @[L45dbb2..L45dbd6] goto L45dbe2;
}
procedure `void` `onError`(`io.reactivex.observers.TestObserver` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/observers/TestObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L45dc0c.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` @kind boolean;
  #L45dc10.  if v0 != 0 then goto L45dc42;
  #L45dc14.  v0:= 1I;
  #L45dc16.  v3.`io.reactivex.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` := v0 @kind boolean;
  #L45dc1a.  v0:= v3.`io.reactivex.observers.TestObserver.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45dc1e.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45dc24.  v0:= temp @kind object;
  #L45dc26.  if v0 != 0 then goto L45dc42;
  #L45dc2a.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L45dc2e.  v1:= new `java.lang.IllegalStateException`;
  #L45dc32.  v2:= "onSubscribe not called in proper order" @kind object;
  #L45dc36.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45dc3c.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L45dc42.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L45dc48.  v0:= temp @kind object;
  #L45dc4a.  v3.`io.reactivex.observers.BaseTestConsumer.lastThread` @type ^`java.lang.Thread` := v0 @kind object;
  #L45dc4e.  if v4 != 0 then goto L45dc6c;
  #L45dc52.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L45dc56.  v1:= new `java.lang.NullPointerException`;
  #L45dc5a.  v2:= "onError received a null Throwable" @kind object;
  #L45dc5e.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45dc64.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L45dc6a.  goto L45dc76;
  #L45dc6c.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L45dc70.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L45dc76.  v0:= v3.`io.reactivex.observers.TestObserver.a` @type ^`io.reactivex.Observer` @kind object;
  #L45dc7a.  call `onError`(v0, v4) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45dc80.  v4:= v3.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L45dc84.  call `countDown`(v4) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L45dc8a.  return @kind void;
  #L45dc8c.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45dc8e.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L45dc92.  call `countDown`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L45dc98.  throw v4;
  catch `java.lang.Throwable` @[L45dc42..L45dc80] goto L45dc8c;
}
procedure `void` `onNext`(`io.reactivex.observers.TestObserver` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/observers/TestObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L45dcb8.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` @kind boolean;
  #L45dcbc.  if v0 != 0 then goto L45dcee;
  #L45dcc0.  v0:= 1I;
  #L45dcc2.  v3.`io.reactivex.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` := v0 @kind boolean;
  #L45dcc6.  v0:= v3.`io.reactivex.observers.TestObserver.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45dcca.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45dcd0.  v0:= temp @kind object;
  #L45dcd2.  if v0 != 0 then goto L45dcee;
  #L45dcd6.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L45dcda.  v1:= new `java.lang.IllegalStateException`;
  #L45dcde.  v2:= "onSubscribe not called in proper order" @kind object;
  #L45dce2.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45dce8.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L45dcee.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L45dcf4.  v0:= temp @kind object;
  #L45dcf6.  v3.`io.reactivex.observers.BaseTestConsumer.lastThread` @type ^`java.lang.Thread` := v0 @kind object;
  #L45dcfa.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.establishedFusionMode` @type ^`int`;
  #L45dcfe.  v1:= 2I;
  #L45dd00.  if v0 != v1 then goto L45dd2e;
  #L45dd04.  v4:= v3.`io.reactivex.observers.TestObserver.c` @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind object;
  #L45dd08.  call temp:= `poll`(v4) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L45dd0e.  v4:= temp @kind object;
  #L45dd10.  if v4 == 0 then goto L45dd2c;
  #L45dd14.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L45dd18.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L45dd1e.  goto L45dd04;
  #L45dd20.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45dd22.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L45dd26.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L45dd2c.  return @kind void;
  #L45dd2e.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L45dd32.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L45dd38.  if v4 != 0 then goto L45dd54;
  #L45dd3c.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L45dd40.  v1:= new `java.lang.NullPointerException`;
  #L45dd44.  v2:= "onNext received a null value" @kind object;
  #L45dd48.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45dd4e.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L45dd54.  v0:= v3.`io.reactivex.observers.TestObserver.a` @type ^`io.reactivex.Observer` @kind object;
  #L45dd58.  call `onNext`(v0, v4) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L45dd5e.  return @kind void;
  catch `java.lang.Throwable` @[L45dd04..L45dd1e] goto L45dd20;
}
procedure `void` `onSubscribe`(`io.reactivex.observers.TestObserver` v4 @kind this, `io.reactivex.disposables.Disposable` v5 @kind object) @signature `Lio/reactivex/observers/TestObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45dd7c.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L45dd82.  v0:= temp @kind object;
  #L45dd84.  v4.`io.reactivex.observers.BaseTestConsumer.lastThread` @type ^`java.lang.Thread` := v0 @kind object;
  #L45dd88.  if v5 != 0 then goto L45dda6;
  #L45dd8c.  v5:= v4.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L45dd90.  v0:= new `java.lang.NullPointerException`;
  #L45dd94.  v1:= "onSubscribe received a null Subscription" @kind object;
  #L45dd98.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45dd9e.  call temp:= `add`(v5, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L45dda4.  return @kind void;
  #L45dda6.  v0:= v4.`io.reactivex.observers.TestObserver.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45ddaa.  v1:= 0I;
  #L45ddac.  call temp:= `compareAndSet`(v0, v1, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L45ddb2.  v0:= temp;
  #L45ddb4.  if v0 != 0 then goto L45de0a;
  #L45ddb8.  call `dispose`(v5) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L45ddbe.  v0:= v4.`io.reactivex.observers.TestObserver.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45ddc2.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45ddc8.  v0:= temp @kind object;
  #L45ddca.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L45ddce.  if v0 == v1 then goto L45de08;
  #L45ddd2.  v0:= v4.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L45ddd6.  v1:= new `java.lang.IllegalStateException`;
  #L45ddda.  v2:= new `java.lang.StringBuilder`;
  #L45ddde.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L45dde4.  v3:= "onSubscribe received multiple subscriptions: " @kind object;
  #L45dde8.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45ddee.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L45ddf4.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L45ddfa.  v5:= temp @kind object;
  #L45ddfc.  call `<init>`(v1, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45de02.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L45de08.  return @kind void;
  #L45de0a.  v0:= v4.`io.reactivex.observers.BaseTestConsumer.initialFusionMode` @type ^`int`;
  #L45de0e.  if v0 == 0 then goto L45de8e;
  #L45de12.  v1:= instanceof @variable v5 @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind boolean;
  #L45de16.  if v1 == 0 then goto L45de8e;
  #L45de1a.  v1:= v5 @kind object;
  #L45de1c.  v1:= (`io.reactivex.internal.fuseable.QueueDisposable`) v1 @kind object;
  #L45de20.  v4.`io.reactivex.observers.TestObserver.c` @type ^`io.reactivex.internal.fuseable.QueueDisposable` := v1 @kind object;
  #L45de24.  call temp:= `requestFusion`(v1, v0) @signature `Lio/reactivex/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L45de2a.  v0:= temp;
  #L45de2c.  v4.`io.reactivex.observers.BaseTestConsumer.establishedFusionMode` @type ^`int` := v0;
  #L45de30.  v1:= 1I;
  #L45de32.  if v0 != v1 then goto L45de8e;
  #L45de36.  v4.`io.reactivex.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` := v1 @kind boolean;
  #L45de3a.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L45de40.  v5:= temp @kind object;
  #L45de42.  v4.`io.reactivex.observers.BaseTestConsumer.lastThread` @type ^`java.lang.Thread` := v5 @kind object;
  #L45de46.  v5:= v4.`io.reactivex.observers.TestObserver.c` @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind object;
  #L45de4a.  call temp:= `poll`(v5) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L45de50.  v5:= temp @kind object;
  #L45de52.  if v5 == 0 then goto L45de62;
  #L45de56.  v0:= v4.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L45de5a.  call temp:= `add`(v0, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L45de60.  goto L45de46;
  #L45de62.  v0:= v4.`io.reactivex.observers.BaseTestConsumer.completions` @type ^`long` @kind wide;
  #L45de66.  v2:= 1L;
  #L45de6a.  v0:= v0 + v2 @kind long;
  #L45de6c.  v4.`io.reactivex.observers.BaseTestConsumer.completions` @type ^`long` := v0 @kind wide;
  #L45de70.  v5:= v4.`io.reactivex.observers.TestObserver.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45de74.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L45de78.  call `lazySet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L45de7e.  goto L45de8c;
  #L45de80.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45de82.  v0:= v4.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L45de86.  call temp:= `add`(v0, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L45de8c.  return @kind void;
  #L45de8e.  v0:= v4.`io.reactivex.observers.TestObserver.a` @type ^`io.reactivex.Observer` @kind object;
  #L45de92.  call `onSubscribe`(v0, v5) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L45de98.  return @kind void;
  catch `java.lang.Throwable` @[L45de46..L45de7e] goto L45de80;
}
procedure `void` `onSuccess`(`io.reactivex.observers.TestObserver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/observers/TestObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L45deb8.  call `onNext`(v0, v1) @signature `Lio/reactivex/observers/TestObserver;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L45debe.  call `onComplete`(v0) @signature `Lio/reactivex/observers/TestObserver;.onComplete:()V` @kind virtual;
  #L45dec4.  return @kind void;
}
