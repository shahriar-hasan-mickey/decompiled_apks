record `io.reactivex.observers.ResourceObserver` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.observers.ResourceObserver.a` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.internal.disposables.ListCompositeDisposable` `io.reactivex.observers.ResourceObserver.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.observers.ResourceObserver` v1 @kind this) @signature `Lio/reactivex/observers/ResourceObserver;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L45cf34.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L45cf3a.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L45cf3e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L45cf44.  v1.`io.reactivex.observers.ResourceObserver.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L45cf48.  v0:= new `io.reactivex.internal.disposables.ListCompositeDisposable`;
  #L45cf4c.  call `<init>`(v0) @signature `Lio/reactivex/internal/disposables/ListCompositeDisposable;.<init>:()V` @kind direct;
  #L45cf52.  v1.`io.reactivex.observers.ResourceObserver.b` @type ^`io.reactivex.internal.disposables.ListCompositeDisposable` := v0 @kind object;
  #L45cf56.  return @kind void;
}
procedure `void` `add`(`io.reactivex.observers.ResourceObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/observers/ResourceObserver;.add:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45cf68.  v0:= "resource is null" @kind object;
  #L45cf6c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45cf72.  v0:= v1.`io.reactivex.observers.ResourceObserver.b` @type ^`io.reactivex.internal.disposables.ListCompositeDisposable` @kind object;
  #L45cf76.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/disposables/ListCompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L45cf7c.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.observers.ResourceObserver` v1 @kind this) @signature `Lio/reactivex/observers/ResourceObserver;.dispose:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45cf90.  v0:= v1.`io.reactivex.observers.ResourceObserver.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45cf94.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L45cf9a.  v0:= temp;
  #L45cf9c.  if v0 == 0 then goto L45cfaa;
  #L45cfa0.  v0:= v1.`io.reactivex.observers.ResourceObserver.b` @type ^`io.reactivex.internal.disposables.ListCompositeDisposable` @kind object;
  #L45cfa4.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/ListCompositeDisposable;.dispose:()V` @kind virtual;
  #L45cfaa.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.observers.ResourceObserver` v1 @kind this) @signature `Lio/reactivex/observers/ResourceObserver;.isDisposed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L45cf08.  v0:= v1.`io.reactivex.observers.ResourceObserver.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45cf0c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45cf12.  v0:= temp @kind object;
  #L45cf14.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L45cf18.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L45cf1e.  v0:= temp;
  #L45cf20.  return v0;
}
procedure `void` `onStart`(`io.reactivex.observers.ResourceObserver` v0 @kind this) @signature `Lio/reactivex/observers/ResourceObserver;.onStart:()V` @AccessFlag PROTECTED {
    temp;

  #L45cfbc.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.observers.ResourceObserver` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/observers/ResourceObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L45cfd0.  v0:= v2.`io.reactivex.observers.ResourceObserver.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45cfd4.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L45cfda.  v1:= temp @kind object;
  #L45cfdc.  call temp:= `setOnce`(v0, v3, v1) @signature `Lio/reactivex/internal/util/EndConsumerHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;Ljava/lang/Class;)Z` @kind static;
  #L45cfe2.  v3:= temp;
  #L45cfe4.  if v3 == 0 then goto L45cfee;
  #L45cfe8.  call `onStart`(v2) @signature `Lio/reactivex/observers/ResourceObserver;.onStart:()V` @kind virtual;
  #L45cfee.  return @kind void;
}
