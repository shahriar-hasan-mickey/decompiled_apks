record `io.reactivex.schedulers.TestScheduler` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Scheduler` @kind class {
  `java.util.Queue` `io.reactivex.schedulers.TestScheduler.b` @AccessFlag FINAL;
  `long` `io.reactivex.schedulers.TestScheduler.c` @AccessFlag ;
  `long` `io.reactivex.schedulers.TestScheduler.d` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`io.reactivex.schedulers.TestScheduler` v2 @kind this) @signature `Lio/reactivex/schedulers/TestScheduler;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4f5abc.  call `<init>`(v2) @signature `Lio/reactivex/Scheduler;.<init>:()V` @kind direct;
  #L4f5ac2.  v0:= new `java.util.concurrent.PriorityBlockingQueue`;
  #L4f5ac6.  v1:= 11I;
  #L4f5aca.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/PriorityBlockingQueue;.<init>:(I)V` @kind direct;
  #L4f5ad0.  v2.`io.reactivex.schedulers.TestScheduler.b` @type ^`java.util.Queue` := v0 @kind object;
  #L4f5ad4.  return @kind void;
}
procedure `void` `a`(`io.reactivex.schedulers.TestScheduler` v6 @kind this, `long` v7 ) @signature `Lio/reactivex/schedulers/TestScheduler;.a:(J)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4f5b50.  v0:= v6.`io.reactivex.schedulers.TestScheduler.b` @type ^`java.util.Queue` @kind object;
  #L4f5b54.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Queue;.isEmpty:()Z` @kind interface;
  #L4f5b5a.  v0:= temp;
  #L4f5b5c.  if v0 != 0 then goto L4f5bb4;
  #L4f5b60.  v0:= v6.`io.reactivex.schedulers.TestScheduler.b` @type ^`java.util.Queue` @kind object;
  #L4f5b64.  call temp:= `peek`(v0) @signature `Ljava/util/Queue;.peek:()Ljava/lang/Object;` @kind interface;
  #L4f5b6a.  v0:= temp @kind object;
  #L4f5b6c.  v0:= (`io.reactivex.schedulers.TestScheduler$b`) v0 @kind object;
  #L4f5b70.  v1:= v0.`io.reactivex.schedulers.TestScheduler$b.a` @type ^`long` @kind wide;
  #L4f5b74.  v3:= lcmp(v1, v7);
  #L4f5b78.  if v3 <= 0 then goto L4f5b7e;
  #L4f5b7c.  goto L4f5bb4;
  #L4f5b7e.  v3:= 0L;
  #L4f5b82.  v5:= lcmp(v1, v3);
  #L4f5b86.  if v5 != 0 then goto L4f5b8e;
  #L4f5b8a.  v1:= v6.`io.reactivex.schedulers.TestScheduler.d` @type ^`long` @kind wide;
  #L4f5b8e.  v6.`io.reactivex.schedulers.TestScheduler.d` @type ^`long` := v1 @kind wide;
  #L4f5b92.  v1:= v6.`io.reactivex.schedulers.TestScheduler.b` @type ^`java.util.Queue` @kind object;
  #L4f5b96.  call temp:= `remove`(v1) @signature `Ljava/util/Queue;.remove:()Ljava/lang/Object;` @kind interface;
  #L4f5b9c.  v1:= v0.`io.reactivex.schedulers.TestScheduler$b.c` @type ^`io.reactivex.schedulers.TestScheduler$a` @kind object;
  #L4f5ba0.  v1:= v1.`io.reactivex.schedulers.TestScheduler$a.a` @type ^`boolean` @kind boolean;
  #L4f5ba4.  if v1 != 0 then goto L4f5b50;
  #L4f5ba8.  v0:= v0.`io.reactivex.schedulers.TestScheduler$b.b` @type ^`java.lang.Runnable` @kind object;
  #L4f5bac.  call `run`(v0) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L4f5bb2.  goto L4f5b50;
  #L4f5bb4.  v6.`io.reactivex.schedulers.TestScheduler.d` @type ^`long` := v7 @kind wide;
  #L4f5bb8.  return @kind void;
}
procedure `void` `advanceTimeBy`(`io.reactivex.schedulers.TestScheduler` v2 @kind this, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object) @signature `Lio/reactivex/schedulers/TestScheduler;.advanceTimeBy:(JLjava/util/concurrent/TimeUnit;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f5ae8.  v0:= v2.`io.reactivex.schedulers.TestScheduler.d` @type ^`long` @kind wide;
  #L4f5aec.  call temp:= `toNanos`(v5, v3) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L4f5af2.  v3:= temp @kind wide;
  #L4f5af4.  v0:= v0 + v3 @kind long;
  #L4f5af6.  v3:= `@@java.util.concurrent.TimeUnit.NANOSECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4f5afa.  call `advanceTimeTo`(v2, v0, v3) @signature `Lio/reactivex/schedulers/TestScheduler;.advanceTimeTo:(JLjava/util/concurrent/TimeUnit;)V` @kind virtual;
  #L4f5b00.  return @kind void;
}
procedure `void` `advanceTimeTo`(`io.reactivex.schedulers.TestScheduler` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object) @signature `Lio/reactivex/schedulers/TestScheduler;.advanceTimeTo:(JLjava/util/concurrent/TimeUnit;)V` @AccessFlag PUBLIC {
    temp;

  #L4f5b14.  call temp:= `toNanos`(v3, v1) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L4f5b1a.  v1:= temp @kind wide;
  #L4f5b1c.  call `a`(v0, v1) @signature `Lio/reactivex/schedulers/TestScheduler;.a:(J)V` @kind direct;
  #L4f5b22.  return @kind void;
}
procedure `io.reactivex.Scheduler$Worker` `createWorker`(`io.reactivex.schedulers.TestScheduler` v1 @kind this) @signature `Lio/reactivex/schedulers/TestScheduler;.createWorker:()Lio/reactivex/Scheduler$Worker;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f5a7c.  v0:= new `io.reactivex.schedulers.TestScheduler$a`;
  #L4f5a80.  call `<init>`(v0, v1) @signature `Lio/reactivex/schedulers/TestScheduler$a;.<init>:(Lio/reactivex/schedulers/TestScheduler;)V` @kind direct;
  #L4f5a86.  return v0 @kind object;
}
procedure `long` `now`(`io.reactivex.schedulers.TestScheduler` v3 @kind this, `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/schedulers/TestScheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4f5a98.  v0:= v3.`io.reactivex.schedulers.TestScheduler.d` @type ^`long` @kind wide;
  #L4f5a9c.  v2:= `@@java.util.concurrent.TimeUnit.NANOSECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4f5aa0.  call temp:= `convert`(v4, v0, v2) @signature `Ljava/util/concurrent/TimeUnit;.convert:(JLjava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4f5aa6.  v0:= temp @kind wide;
  #L4f5aa8.  return v0 @kind wide;
}
procedure `void` `triggerActions`(`io.reactivex.schedulers.TestScheduler` v2 @kind this) @signature `Lio/reactivex/schedulers/TestScheduler;.triggerActions:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f5b34.  v0:= v2.`io.reactivex.schedulers.TestScheduler.d` @type ^`long` @kind wide;
  #L4f5b38.  call `a`(v2, v0) @signature `Lio/reactivex/schedulers/TestScheduler;.a:(J)V` @kind direct;
  #L4f5b3e.  return @kind void;
}
