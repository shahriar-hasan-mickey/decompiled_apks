record `io.reactivex.schedulers.TestScheduler$a` @kind class @AccessFlag FINAL extends `io.reactivex.Scheduler$Worker` @kind class {
  `boolean` `io.reactivex.schedulers.TestScheduler$a.a` @AccessFlag VOLATILE;
  `io.reactivex.schedulers.TestScheduler` `io.reactivex.schedulers.TestScheduler$a.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`io.reactivex.schedulers.TestScheduler$a` v0 @kind this, `io.reactivex.schedulers.TestScheduler` v1 @kind object) @signature `Lio/reactivex/schedulers/TestScheduler$a;.<init>:(Lio/reactivex/schedulers/TestScheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f597c.  v0.`io.reactivex.schedulers.TestScheduler$a.b` @type ^`io.reactivex.schedulers.TestScheduler` := v1 @kind object;
  #L4f5980.  call `<init>`(v0) @signature `Lio/reactivex/Scheduler$Worker;.<init>:()V` @kind direct;
  #L4f5986.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.schedulers.TestScheduler$a` v1 @kind this) @signature `Lio/reactivex/schedulers/TestScheduler$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f5998.  v0:= 1I;
  #L4f599a.  v1.`io.reactivex.schedulers.TestScheduler$a.a` @type ^`boolean` := v0 @kind boolean;
  #L4f599e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.schedulers.TestScheduler$a` v1 @kind this) @signature `Lio/reactivex/schedulers/TestScheduler$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f5864.  v0:= v1.`io.reactivex.schedulers.TestScheduler$a.a` @type ^`boolean` @kind boolean;
  #L4f5868.  return v0;
}
procedure `long` `now`(`io.reactivex.schedulers.TestScheduler$a` v2 @kind this, `java.util.concurrent.TimeUnit` v3 @kind object) @signature `Lio/reactivex/schedulers/TestScheduler$a;.now:(Ljava/util/concurrent/TimeUnit;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f595c.  v0:= v2.`io.reactivex.schedulers.TestScheduler$a.b` @type ^`io.reactivex.schedulers.TestScheduler` @kind object;
  #L4f5960.  call temp:= `now`(v0, v3) @signature `Lio/reactivex/schedulers/TestScheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4f5966.  v0:= temp @kind wide;
  #L4f5968.  return v0 @kind wide;
}
procedure `io.reactivex.disposables.Disposable` `schedule`(`io.reactivex.schedulers.TestScheduler$a` v10 @kind this, `java.lang.Runnable` v11 @kind object) @signature `Lio/reactivex/schedulers/TestScheduler$a;.schedule:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4f587c.  v0:= v10.`io.reactivex.schedulers.TestScheduler$a.a` @type ^`boolean` @kind boolean;
  #L4f5880.  if v0 == 0 then goto L4f588a;
  #L4f5884.  v11:= `@@io.reactivex.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.internal.disposables.EmptyDisposable` @kind object;
  #L4f5888.  return v11 @kind object;
  #L4f588a.  v7:= new `io.reactivex.schedulers.TestScheduler$b`;
  #L4f588e.  v2:= 0L;
  #L4f5892.  v0:= v10.`io.reactivex.schedulers.TestScheduler$a.b` @type ^`io.reactivex.schedulers.TestScheduler` @kind object;
  #L4f5896.  v5:= v0.`io.reactivex.schedulers.TestScheduler.c` @type ^`long` @kind wide;
  #L4f589a.  v8:= 1L;
  #L4f589e.  v8:= v8 + v5 @kind long;
  #L4f58a0.  v0.`io.reactivex.schedulers.TestScheduler.c` @type ^`long` := v8 @kind wide;
  #L4f58a4.  v0:= v7 @kind object;
  #L4f58a6.  v1:= v10 @kind object;
  #L4f58a8.  v4:= v11 @kind object;
  #L4f58aa.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/schedulers/TestScheduler$b;.<init>:(Lio/reactivex/schedulers/TestScheduler$a;JLjava/lang/Runnable;J)V` @kind direct;
  #L4f58b0.  v11:= v10.`io.reactivex.schedulers.TestScheduler$a.b` @type ^`io.reactivex.schedulers.TestScheduler` @kind object;
  #L4f58b4.  v11:= v11.`io.reactivex.schedulers.TestScheduler.b` @type ^`java.util.Queue` @kind object;
  #L4f58b8.  call temp:= `add`(v11, v7) @signature `Ljava/util/Queue;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4f58be.  v11:= new `io.reactivex.schedulers.TestScheduler$a$a`;
  #L4f58c2.  call `<init>`(v11, v10, v7) @signature `Lio/reactivex/schedulers/TestScheduler$a$a;.<init>:(Lio/reactivex/schedulers/TestScheduler$a;Lio/reactivex/schedulers/TestScheduler$b;)V` @kind direct;
  #L4f58c8.  call temp:= `fromRunnable`(v11) @signature `Lio/reactivex/disposables/Disposables;.fromRunnable:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @kind static;
  #L4f58ce.  v11:= temp @kind object;
  #L4f58d0.  return v11 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `schedule`(`io.reactivex.schedulers.TestScheduler$a` v8 @kind this, `java.lang.Runnable` v9 @kind object, `long` v10 , `java.util.concurrent.TimeUnit` v12 @kind object) @signature `Lio/reactivex/schedulers/TestScheduler$a;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4f58e4.  v0:= v8.`io.reactivex.schedulers.TestScheduler$a.a` @type ^`boolean` @kind boolean;
  #L4f58e8.  if v0 == 0 then goto L4f58f2;
  #L4f58ec.  v9:= `@@io.reactivex.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.internal.disposables.EmptyDisposable` @kind object;
  #L4f58f0.  return v9 @kind object;
  #L4f58f2.  v7:= new `io.reactivex.schedulers.TestScheduler$b`;
  #L4f58f6.  v0:= v8.`io.reactivex.schedulers.TestScheduler$a.b` @type ^`io.reactivex.schedulers.TestScheduler` @kind object;
  #L4f58fa.  v0:= v0.`io.reactivex.schedulers.TestScheduler.d` @type ^`long` @kind wide;
  #L4f58fe.  call temp:= `toNanos`(v12, v10) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L4f5904.  v10:= temp @kind wide;
  #L4f5906.  v2:= v0 + v10 @kind long;
  #L4f590a.  v10:= v8.`io.reactivex.schedulers.TestScheduler$a.b` @type ^`io.reactivex.schedulers.TestScheduler` @kind object;
  #L4f590e.  v5:= v10.`io.reactivex.schedulers.TestScheduler.c` @type ^`long` @kind wide;
  #L4f5912.  v11:= 1L;
  #L4f5916.  v11:= v11 + v5 @kind long;
  #L4f5918.  v10.`io.reactivex.schedulers.TestScheduler.c` @type ^`long` := v11 @kind wide;
  #L4f591c.  v0:= v7 @kind object;
  #L4f591e.  v1:= v8 @kind object;
  #L4f5920.  v4:= v9 @kind object;
  #L4f5922.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/schedulers/TestScheduler$b;.<init>:(Lio/reactivex/schedulers/TestScheduler$a;JLjava/lang/Runnable;J)V` @kind direct;
  #L4f5928.  v9:= v8.`io.reactivex.schedulers.TestScheduler$a.b` @type ^`io.reactivex.schedulers.TestScheduler` @kind object;
  #L4f592c.  v9:= v9.`io.reactivex.schedulers.TestScheduler.b` @type ^`java.util.Queue` @kind object;
  #L4f5930.  call temp:= `add`(v9, v7) @signature `Ljava/util/Queue;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4f5936.  v9:= new `io.reactivex.schedulers.TestScheduler$a$a`;
  #L4f593a.  call `<init>`(v9, v8, v7) @signature `Lio/reactivex/schedulers/TestScheduler$a$a;.<init>:(Lio/reactivex/schedulers/TestScheduler$a;Lio/reactivex/schedulers/TestScheduler$b;)V` @kind direct;
  #L4f5940.  call temp:= `fromRunnable`(v9) @signature `Lio/reactivex/disposables/Disposables;.fromRunnable:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @kind static;
  #L4f5946.  v9:= temp @kind object;
  #L4f5948.  return v9 @kind object;
}
