record `io.reactivex.schedulers.Timed` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.Object` `io.reactivex.schedulers.Timed.a` @AccessFlag FINAL;
  `long` `io.reactivex.schedulers.Timed.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.schedulers.Timed.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.schedulers.Timed` v0 @kind this, `java.lang.Object` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/schedulers/Timed;.<init>:(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4f5d50.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4f5d56.  v0.`io.reactivex.schedulers.Timed.a` @type ^`java.lang.Object` := v1 @kind object;
  #L4f5d5a.  v0.`io.reactivex.schedulers.Timed.b` @type ^`long` := v2 @kind wide;
  #L4f5d5e.  v1:= "unit is null" @kind object;
  #L4f5d62.  call temp:= `requireNonNull`(v4, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4f5d68.  v1:= temp @kind object;
  #L4f5d6a.  v1:= (`java.util.concurrent.TimeUnit`) v1 @kind object;
  #L4f5d6e.  v0.`io.reactivex.schedulers.Timed.c` @type ^`java.util.concurrent.TimeUnit` := v1 @kind object;
  #L4f5d72.  return @kind void;
}
procedure `boolean` `equals`(`io.reactivex.schedulers.Timed` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/schedulers/Timed;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4f5bcc.  v0:= instanceof @variable v7 @type ^`io.reactivex.schedulers.Timed` @kind boolean;
  #L4f5bd0.  v1:= 0I;
  #L4f5bd2.  if v0 == 0 then goto L4f5c14;
  #L4f5bd6.  v7:= (`io.reactivex.schedulers.Timed`) v7 @kind object;
  #L4f5bda.  v0:= v6.`io.reactivex.schedulers.Timed.a` @type ^`java.lang.Object` @kind object;
  #L4f5bde.  v2:= v7.`io.reactivex.schedulers.Timed.a` @type ^`java.lang.Object` @kind object;
  #L4f5be2.  call temp:= `equals`(v0, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L4f5be8.  v0:= temp;
  #L4f5bea.  if v0 == 0 then goto L4f5c14;
  #L4f5bee.  v2:= v6.`io.reactivex.schedulers.Timed.b` @type ^`long` @kind wide;
  #L4f5bf2.  v4:= v7.`io.reactivex.schedulers.Timed.b` @type ^`long` @kind wide;
  #L4f5bf6.  v0:= lcmp(v2, v4);
  #L4f5bfa.  if v0 != 0 then goto L4f5c14;
  #L4f5bfe.  v0:= v6.`io.reactivex.schedulers.Timed.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4f5c02.  v7:= v7.`io.reactivex.schedulers.Timed.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4f5c06.  call temp:= `equals`(v0, v7) @signature `Lio/reactivex/internal/functions/ObjectHelper;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L4f5c0c.  v7:= temp;
  #L4f5c0e.  if v7 == 0 then goto L4f5c14;
  #L4f5c12.  v1:= 1I;
  #L4f5c14.  return v1;
}
procedure `int` `hashCode`(`io.reactivex.schedulers.Timed` v6 @kind this) @signature `Lio/reactivex/schedulers/Timed;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4f5c28.  v0:= v6.`io.reactivex.schedulers.Timed.a` @type ^`java.lang.Object` @kind object;
  #L4f5c2c.  if v0 == 0 then goto L4f5c3a;
  #L4f5c30.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L4f5c36.  v0:= temp;
  #L4f5c38.  goto L4f5c3c;
  #L4f5c3a.  v0:= 0I;
  #L4f5c3c.  v1:= 31I;
  #L4f5c40.  v0:= v0 * 31;
  #L4f5c44.  v2:= v6.`io.reactivex.schedulers.Timed.b` @type ^`long` @kind wide;
  #L4f5c48.  v4:= v2 ^>> v1 @kind long;
  #L4f5c4c.  v2:= v2 ^~ v4 @kind long;
  #L4f5c4e.  v3:= (`int`) v2 @kind l2i;
  #L4f5c50.  v0:= v0 + v3 @kind int;
  #L4f5c52.  v0:= v0 * 31;
  #L4f5c56.  v1:= v6.`io.reactivex.schedulers.Timed.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4f5c5a.  call temp:= `hashCode`(v1) @signature `Ljava/util/concurrent/TimeUnit;.hashCode:()I` @kind virtual;
  #L4f5c60.  v1:= temp;
  #L4f5c62.  v0:= v0 + v1 @kind int;
  #L4f5c64.  return v0;
}
procedure `long` `time`(`io.reactivex.schedulers.Timed` v2 @kind this) @signature `Lio/reactivex/schedulers/Timed;.time:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f5d14.  v0:= v2.`io.reactivex.schedulers.Timed.b` @type ^`long` @kind wide;
  #L4f5d18.  return v0 @kind wide;
}
procedure `long` `time`(`io.reactivex.schedulers.Timed` v3 @kind this, `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/schedulers/Timed;.time:(Ljava/util/concurrent/TimeUnit;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4f5d2c.  v0:= v3.`io.reactivex.schedulers.Timed.b` @type ^`long` @kind wide;
  #L4f5d30.  v2:= v3.`io.reactivex.schedulers.Timed.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4f5d34.  call temp:= `convert`(v4, v0, v2) @signature `Ljava/util/concurrent/TimeUnit;.convert:(JLjava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4f5d3a.  v0:= temp @kind wide;
  #L4f5d3c.  return v0 @kind wide;
}
procedure `java.lang.String` `toString`(`io.reactivex.schedulers.Timed` v3 @kind this) @signature `Lio/reactivex/schedulers/Timed;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4f5c90.  v0:= new `java.lang.StringBuilder`;
  #L4f5c94.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4f5c9a.  v1:= "Timed[time=" @kind object;
  #L4f5c9e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f5ca4.  v1:= v3.`io.reactivex.schedulers.Timed.b` @type ^`long` @kind wide;
  #L4f5ca8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f5cae.  v1:= ", unit=" @kind object;
  #L4f5cb2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f5cb8.  v1:= v3.`io.reactivex.schedulers.Timed.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4f5cbc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f5cc2.  v1:= ", value=" @kind object;
  #L4f5cc6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f5ccc.  v1:= v3.`io.reactivex.schedulers.Timed.a` @type ^`java.lang.Object` @kind object;
  #L4f5cd0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f5cd6.  v1:= "]" @kind object;
  #L4f5cda.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f5ce0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4f5ce6.  v0:= temp @kind object;
  #L4f5ce8.  return v0 @kind object;
}
procedure `java.util.concurrent.TimeUnit` `unit`(`io.reactivex.schedulers.Timed` v1 @kind this) @signature `Lio/reactivex/schedulers/Timed;.unit:()Ljava/util/concurrent/TimeUnit;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f5cfc.  v0:= v1.`io.reactivex.schedulers.Timed.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4f5d00.  return v0 @kind object;
}
procedure `java.lang.Object` `value`(`io.reactivex.schedulers.Timed` v1 @kind this) @signature `Lio/reactivex/schedulers/Timed;.value:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f5c78.  v0:= v1.`io.reactivex.schedulers.Timed.a` @type ^`java.lang.Object` @kind object;
  #L4f5c7c.  return v0 @kind object;
}
