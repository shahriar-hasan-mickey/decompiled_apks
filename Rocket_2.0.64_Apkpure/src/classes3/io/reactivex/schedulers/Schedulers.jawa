record `io.reactivex.schedulers.Schedulers` @kind class @AccessFlag PUBLIC_FINAL {
}
global `io.reactivex.Scheduler` `@@io.reactivex.schedulers.Schedulers.a` @AccessFlag STATIC_FINAL;
global `io.reactivex.Scheduler` `@@io.reactivex.schedulers.Schedulers.b` @AccessFlag STATIC_FINAL;
global `io.reactivex.Scheduler` `@@io.reactivex.schedulers.Schedulers.c` @AccessFlag STATIC_FINAL;
global `io.reactivex.Scheduler` `@@io.reactivex.schedulers.Schedulers.d` @AccessFlag STATIC_FINAL;
global `io.reactivex.Scheduler` `@@io.reactivex.schedulers.Schedulers.e` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/schedulers/Schedulers;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4f56bc.  v0:= new `io.reactivex.schedulers.Schedulers$h`;
  #L4f56c0.  call `<init>`(v0) @signature `Lio/reactivex/schedulers/Schedulers$h;.<init>:()V` @kind direct;
  #L4f56c6.  call temp:= `initSingleScheduler`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.initSingleScheduler:(Ljava/util/concurrent/Callable;)Lio/reactivex/Scheduler;` @kind static;
  #L4f56cc.  v0:= temp @kind object;
  #L4f56ce.  `@@io.reactivex.schedulers.Schedulers.a` @type ^`io.reactivex.Scheduler` := v0 @kind object;
  #L4f56d2.  v0:= new `io.reactivex.schedulers.Schedulers$b`;
  #L4f56d6.  call `<init>`(v0) @signature `Lio/reactivex/schedulers/Schedulers$b;.<init>:()V` @kind direct;
  #L4f56dc.  call temp:= `initComputationScheduler`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.initComputationScheduler:(Ljava/util/concurrent/Callable;)Lio/reactivex/Scheduler;` @kind static;
  #L4f56e2.  v0:= temp @kind object;
  #L4f56e4.  `@@io.reactivex.schedulers.Schedulers.b` @type ^`io.reactivex.Scheduler` := v0 @kind object;
  #L4f56e8.  v0:= new `io.reactivex.schedulers.Schedulers$c`;
  #L4f56ec.  call `<init>`(v0) @signature `Lio/reactivex/schedulers/Schedulers$c;.<init>:()V` @kind direct;
  #L4f56f2.  call temp:= `initIoScheduler`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.initIoScheduler:(Ljava/util/concurrent/Callable;)Lio/reactivex/Scheduler;` @kind static;
  #L4f56f8.  v0:= temp @kind object;
  #L4f56fa.  `@@io.reactivex.schedulers.Schedulers.c` @type ^`io.reactivex.Scheduler` := v0 @kind object;
  #L4f56fe.  call temp:= `instance`() @signature `Lio/reactivex/internal/schedulers/TrampolineScheduler;.instance:()Lio/reactivex/internal/schedulers/TrampolineScheduler;` @kind static;
  #L4f5704.  v0:= temp @kind object;
  #L4f5706.  `@@io.reactivex.schedulers.Schedulers.d` @type ^`io.reactivex.Scheduler` := v0 @kind object;
  #L4f570a.  v0:= new `io.reactivex.schedulers.Schedulers$f`;
  #L4f570e.  call `<init>`(v0) @signature `Lio/reactivex/schedulers/Schedulers$f;.<init>:()V` @kind direct;
  #L4f5714.  call temp:= `initNewThreadScheduler`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.initNewThreadScheduler:(Ljava/util/concurrent/Callable;)Lio/reactivex/Scheduler;` @kind static;
  #L4f571a.  v0:= temp @kind object;
  #L4f571c.  `@@io.reactivex.schedulers.Schedulers.e` @type ^`io.reactivex.Scheduler` := v0 @kind object;
  #L4f5720.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.schedulers.Schedulers` v2 @kind this) @signature `Lio/reactivex/schedulers/Schedulers;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4f5734.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4f573a.  v0:= new `java.lang.IllegalStateException`;
  #L4f573e.  v1:= "No instances!" @kind object;
  #L4f5742.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f5748.  throw v0;
}
procedure `io.reactivex.Scheduler` `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4f5608.  v0:= `@@io.reactivex.schedulers.Schedulers.b` @type ^`io.reactivex.Scheduler` @kind object;
  #L4f560c.  call temp:= `onComputationScheduler`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onComputationScheduler:(Lio/reactivex/Scheduler;)Lio/reactivex/Scheduler;` @kind static;
  #L4f5612.  v0:= temp @kind object;
  #L4f5614.  return v0 @kind object;
}
procedure `io.reactivex.Scheduler` `from`(`java.util.concurrent.Executor` v1 @kind object) @signature `Lio/reactivex/schedulers/Schedulers;.from:(Ljava/util/concurrent/Executor;)Lio/reactivex/Scheduler;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4f5628.  v0:= new `io.reactivex.internal.schedulers.ExecutorScheduler`;
  #L4f562c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler;.<init>:(Ljava/util/concurrent/Executor;)V` @kind direct;
  #L4f5632.  return v0 @kind object;
}
procedure `io.reactivex.Scheduler` `io`() @signature `Lio/reactivex/schedulers/Schedulers;.io:()Lio/reactivex/Scheduler;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4f5644.  v0:= `@@io.reactivex.schedulers.Schedulers.c` @type ^`io.reactivex.Scheduler` @kind object;
  #L4f5648.  call temp:= `onIoScheduler`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onIoScheduler:(Lio/reactivex/Scheduler;)Lio/reactivex/Scheduler;` @kind static;
  #L4f564e.  v0:= temp @kind object;
  #L4f5650.  return v0 @kind object;
}
procedure `io.reactivex.Scheduler` `newThread`() @signature `Lio/reactivex/schedulers/Schedulers;.newThread:()Lio/reactivex/Scheduler;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4f5664.  v0:= `@@io.reactivex.schedulers.Schedulers.e` @type ^`io.reactivex.Scheduler` @kind object;
  #L4f5668.  call temp:= `onNewThreadScheduler`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onNewThreadScheduler:(Lio/reactivex/Scheduler;)Lio/reactivex/Scheduler;` @kind static;
  #L4f566e.  v0:= temp @kind object;
  #L4f5670.  return v0 @kind object;
}
procedure `void` `shutdown`() @signature `Lio/reactivex/schedulers/Schedulers;.shutdown:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4f575c.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L4f5762.  v0:= temp @kind object;
  #L4f5764.  call `shutdown`(v0) @signature `Lio/reactivex/Scheduler;.shutdown:()V` @kind virtual;
  #L4f576a.  call temp:= `io`() @signature `Lio/reactivex/schedulers/Schedulers;.io:()Lio/reactivex/Scheduler;` @kind static;
  #L4f5770.  v0:= temp @kind object;
  #L4f5772.  call `shutdown`(v0) @signature `Lio/reactivex/Scheduler;.shutdown:()V` @kind virtual;
  #L4f5778.  call temp:= `newThread`() @signature `Lio/reactivex/schedulers/Schedulers;.newThread:()Lio/reactivex/Scheduler;` @kind static;
  #L4f577e.  v0:= temp @kind object;
  #L4f5780.  call `shutdown`(v0) @signature `Lio/reactivex/Scheduler;.shutdown:()V` @kind virtual;
  #L4f5786.  call temp:= `single`() @signature `Lio/reactivex/schedulers/Schedulers;.single:()Lio/reactivex/Scheduler;` @kind static;
  #L4f578c.  v0:= temp @kind object;
  #L4f578e.  call `shutdown`(v0) @signature `Lio/reactivex/Scheduler;.shutdown:()V` @kind virtual;
  #L4f5794.  call temp:= `trampoline`() @signature `Lio/reactivex/schedulers/Schedulers;.trampoline:()Lio/reactivex/Scheduler;` @kind static;
  #L4f579a.  v0:= temp @kind object;
  #L4f579c.  call `shutdown`(v0) @signature `Lio/reactivex/Scheduler;.shutdown:()V` @kind virtual;
  #L4f57a2.  call `shutdown`() @signature `Lio/reactivex/internal/schedulers/SchedulerPoolFactory;.shutdown:()V` @kind static;
  #L4f57a8.  return @kind void;
}
procedure `io.reactivex.Scheduler` `single`() @signature `Lio/reactivex/schedulers/Schedulers;.single:()Lio/reactivex/Scheduler;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4f5684.  v0:= `@@io.reactivex.schedulers.Schedulers.a` @type ^`io.reactivex.Scheduler` @kind object;
  #L4f5688.  call temp:= `onSingleScheduler`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onSingleScheduler:(Lio/reactivex/Scheduler;)Lio/reactivex/Scheduler;` @kind static;
  #L4f568e.  v0:= temp @kind object;
  #L4f5690.  return v0 @kind object;
}
procedure `void` `start`() @signature `Lio/reactivex/schedulers/Schedulers;.start:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4f57bc.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L4f57c2.  v0:= temp @kind object;
  #L4f57c4.  call `start`(v0) @signature `Lio/reactivex/Scheduler;.start:()V` @kind virtual;
  #L4f57ca.  call temp:= `io`() @signature `Lio/reactivex/schedulers/Schedulers;.io:()Lio/reactivex/Scheduler;` @kind static;
  #L4f57d0.  v0:= temp @kind object;
  #L4f57d2.  call `start`(v0) @signature `Lio/reactivex/Scheduler;.start:()V` @kind virtual;
  #L4f57d8.  call temp:= `newThread`() @signature `Lio/reactivex/schedulers/Schedulers;.newThread:()Lio/reactivex/Scheduler;` @kind static;
  #L4f57de.  v0:= temp @kind object;
  #L4f57e0.  call `start`(v0) @signature `Lio/reactivex/Scheduler;.start:()V` @kind virtual;
  #L4f57e6.  call temp:= `single`() @signature `Lio/reactivex/schedulers/Schedulers;.single:()Lio/reactivex/Scheduler;` @kind static;
  #L4f57ec.  v0:= temp @kind object;
  #L4f57ee.  call `start`(v0) @signature `Lio/reactivex/Scheduler;.start:()V` @kind virtual;
  #L4f57f4.  call temp:= `trampoline`() @signature `Lio/reactivex/schedulers/Schedulers;.trampoline:()Lio/reactivex/Scheduler;` @kind static;
  #L4f57fa.  v0:= temp @kind object;
  #L4f57fc.  call `start`(v0) @signature `Lio/reactivex/Scheduler;.start:()V` @kind virtual;
  #L4f5802.  call `start`() @signature `Lio/reactivex/internal/schedulers/SchedulerPoolFactory;.start:()V` @kind static;
  #L4f5808.  return @kind void;
}
procedure `io.reactivex.Scheduler` `trampoline`() @signature `Lio/reactivex/schedulers/Schedulers;.trampoline:()Lio/reactivex/Scheduler;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4f56a4.  v0:= `@@io.reactivex.schedulers.Schedulers.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L4f56a8.  return v0 @kind object;
}
