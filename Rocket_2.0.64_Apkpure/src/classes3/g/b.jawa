record `g.b` @kind class @AccessFlag PUBLIC_FINAL_SYNTHETIC {
}
procedure `long` `a`(`long` v7 , `long` v9 ) @signature `Lg/b;.a:(JJ)J` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3dc638.  v0:= v7 - v9 @kind long;
  #L3dc63c.  v9:= v9 ^~ v7 @kind long;
  #L3dc63e.  v2:= 1I;
  #L3dc640.  v3:= 0I;
  #L3dc642.  v4:= 0L;
  #L3dc646.  v6:= lcmp(v9, v4);
  #L3dc64a.  if v6 < 0 then goto L3dc652;
  #L3dc64e.  v9:= 1I;
  #L3dc650.  goto L3dc654;
  #L3dc652.  v9:= 0I;
  #L3dc654.  v7:= v7 ^~ v0 @kind long;
  #L3dc656.  v10:= lcmp(v7, v4);
  #L3dc65a.  if v10 < 0 then goto L3dc660;
  #L3dc65e.  goto L3dc662;
  #L3dc660.  v2:= 0I;
  #L3dc662.  v7:= v9 ^| v2 @kind int;
  #L3dc666.  if v7 == 0 then goto L3dc66c;
  #L3dc66a.  return v0 @kind wide;
  #L3dc66c.  v7:= new `java.lang.ArithmeticException`;
  #L3dc670.  call `<init>`(v7) @signature `Ljava/lang/ArithmeticException;.<init>:()V` @kind direct;
  #L3dc676.  throw v7;
}
