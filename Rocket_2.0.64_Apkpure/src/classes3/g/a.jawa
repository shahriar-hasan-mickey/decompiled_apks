record `g.a` @kind class @AccessFlag PUBLIC_FINAL_SYNTHETIC {
}
procedure `long` `a`(`long` v7 , `long` v9 ) @signature `Lg/a;.a:(JJ)J` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3dc5e8.  v0:= v7 + v9 @kind long;
  #L3dc5ec.  v9:= v9 ^~ v7 @kind long;
  #L3dc5ee.  v2:= 1I;
  #L3dc5f0.  v3:= 0I;
  #L3dc5f2.  v4:= 0L;
  #L3dc5f6.  v6:= lcmp(v9, v4);
  #L3dc5fa.  if v6 >= 0 then goto L3dc602;
  #L3dc5fe.  v9:= 1I;
  #L3dc600.  goto L3dc604;
  #L3dc602.  v9:= 0I;
  #L3dc604.  v7:= v7 ^~ v0 @kind long;
  #L3dc606.  v10:= lcmp(v7, v4);
  #L3dc60a.  if v10 < 0 then goto L3dc610;
  #L3dc60e.  goto L3dc612;
  #L3dc610.  v2:= 0I;
  #L3dc612.  v7:= v9 ^| v2 @kind int;
  #L3dc616.  if v7 == 0 then goto L3dc61c;
  #L3dc61a.  return v0 @kind wide;
  #L3dc61c.  v7:= new `java.lang.ArithmeticException`;
  #L3dc620.  call `<init>`(v7) @signature `Ljava/lang/ArithmeticException;.<init>:()V` @kind direct;
  #L3dc626.  throw v7;
}
