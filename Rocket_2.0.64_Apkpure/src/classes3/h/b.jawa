record `h.b` @kind class @AccessFlag PUBLIC_FINAL_SYNTHETIC {
}
procedure `long` `a`(`long` v8 , `long` v10 ) @signature `Lh/b;.a:(JJ)J` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3dc90c.  v0:= 0L;
  #L3dc910.  v2:= -9223372036854775808L;
  #L3dc914.  v4:= lcmp(v10, v0);
  #L3dc918.  if v4 >= 0 then goto L3dc930;
  #L3dc91c.  v8:= v8 ^~ v2 @kind long;
  #L3dc91e.  v10:= v10 ^~ v2 @kind long;
  #L3dc920.  v2:= lcmp(v8, v10);
  #L3dc924.  if v2 >= 0 then goto L3dc92a;
  #L3dc928.  return v0 @kind wide;
  #L3dc92a.  v8:= 1L;
  #L3dc92e.  return v8 @kind wide;
  #L3dc930.  v4:= lcmp(v8, v0);
  #L3dc934.  if v4 < 0 then goto L3dc93c;
  #L3dc938.  v8:= v8 / v10 @kind long;
  #L3dc93a.  return v8 @kind wide;
  #L3dc93c.  v0:= 1I;
  #L3dc93e.  v4:= v8 ^>> v0 @kind long;
  #L3dc942.  v4:= v4 / v10 @kind long;
  #L3dc944.  v4:= v4 ^< v0 @kind long;
  #L3dc946.  v6:= v4 * v10 @kind long;
  #L3dc94a.  v8:= v8 - v6 @kind long;
  #L3dc94c.  v8:= v8 ^~ v2 @kind long;
  #L3dc94e.  v10:= v10 ^~ v2 @kind long;
  #L3dc950.  v1:= lcmp(v8, v10);
  #L3dc954.  if v1 < 0 then goto L3dc95a;
  #L3dc958.  goto L3dc95c;
  #L3dc95a.  v0:= 0I;
  #L3dc95c.  v8:= (`long`) v0 @kind i2l;
  #L3dc95e.  v4:= v4 + v8 @kind long;
  #L3dc960.  return v4 @kind wide;
}
