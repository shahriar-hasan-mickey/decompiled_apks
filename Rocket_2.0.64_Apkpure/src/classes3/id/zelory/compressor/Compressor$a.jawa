record `id.zelory.compressor.Compressor$a` @kind class @AccessFlag  extends `java.util.concurrent.Callable` @kind interface {
  `java.io.File` `id.zelory.compressor.Compressor$a.a` @AccessFlag FINAL_SYNTHETIC;
  `java.lang.String` `id.zelory.compressor.Compressor$a.b` @AccessFlag FINAL_SYNTHETIC;
  `id.zelory.compressor.Compressor` `id.zelory.compressor.Compressor$a.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`id.zelory.compressor.Compressor$a` v0 @kind this, `id.zelory.compressor.Compressor` v1 @kind object, `java.io.File` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lid/zelory/compressor/Compressor$a;.<init>:(Lid/zelory/compressor/Compressor;Ljava/io/File;Ljava/lang/String;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3dcdd4.  v0.`id.zelory.compressor.Compressor$a.c` @type ^`id.zelory.compressor.Compressor` := v1 @kind object;
  #L3dcdd8.  v0.`id.zelory.compressor.Compressor$a.a` @type ^`java.io.File` := v2 @kind object;
  #L3dcddc.  v0.`id.zelory.compressor.Compressor$a.b` @type ^`java.lang.String` := v3 @kind object;
  #L3dcde0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3dcde6.  return @kind void;
}
procedure `io.reactivex.Flowable` `a`(`id.zelory.compressor.Compressor$a` v3 @kind this) @signature `Lid/zelory/compressor/Compressor$a;.a:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3dcd6c.  v0:= v3.`id.zelory.compressor.Compressor$a.c` @type ^`id.zelory.compressor.Compressor` @kind object;
  #L3dcd70.  v1:= v3.`id.zelory.compressor.Compressor$a.a` @type ^`java.io.File` @kind object;
  #L3dcd74.  v2:= v3.`id.zelory.compressor.Compressor$a.b` @type ^`java.lang.String` @kind object;
  #L3dcd78.  call temp:= `compressToFile`(v0, v1, v2) @signature `Lid/zelory/compressor/Compressor;.compressToFile:(Ljava/io/File;Ljava/lang/String;)Ljava/io/File;` @kind virtual;
  #L3dcd7e.  v0:= temp @kind object;
  #L3dcd80.  call temp:= `just`(v0) @signature `Lio/reactivex/Flowable;.just:(Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L3dcd86.  v0:= temp @kind object;
  #L3dcd88.  return v0 @kind object;
  #L3dcd8a.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L3dcd8c.  call temp:= `error`(v0) @signature `Lio/reactivex/Flowable;.error:(Ljava/lang/Throwable;)Lio/reactivex/Flowable;` @kind static;
  #L3dcd92.  v0:= temp @kind object;
  #L3dcd94.  return v0 @kind object;
  catch `java.io.IOException` @[L3dcd6c..L3dcd88] goto L3dcd8a;
}
procedure `java.lang.Object` `call`(`id.zelory.compressor.Compressor$a` v1 @kind this) @signature `Lid/zelory/compressor/Compressor$a;.call:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L3dcdb8.  call temp:= `a`(v1) @signature `Lid/zelory/compressor/Compressor$a;.a:()Lio/reactivex/Flowable;` @kind virtual;
  #L3dcdbe.  v0:= temp @kind object;
  #L3dcdc0.  return v0 @kind object;
}
