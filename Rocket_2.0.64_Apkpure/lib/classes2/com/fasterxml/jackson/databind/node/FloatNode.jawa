record `com.fasterxml.jackson.databind.node.FloatNode` @kind class @AccessFlag PUBLIC extends `com.fasterxml.jackson.databind.node.NumericNode` @kind class {
  `float` `com.fasterxml.jackson.databind.node.FloatNode._value` @AccessFlag PROTECTED_FINAL;
}
procedure `void` `<init>`(`com.fasterxml.jackson.databind.node.FloatNode` v0 @kind this, `float` v1 ) @signature `Lcom/fasterxml/jackson/databind/node/FloatNode;.<init>:(F)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `com.fasterxml.jackson.databind.node.FloatNode` `valueOf`(`float` v1 ) @signature `Lcom/fasterxml/jackson/databind/node/FloatNode;.valueOf:(F)Lcom/fasterxml/jackson/databind/node/FloatNode;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.String` `asText`(`com.fasterxml.jackson.databind.node.FloatNode` v1 @kind this) @signature `Lcom/fasterxml/jackson/databind/node/FloatNode;.asText:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.fasterxml.jackson.core.JsonToken` `asToken`(`com.fasterxml.jackson.databind.node.FloatNode` v1 @kind this) @signature `Lcom/fasterxml/jackson/databind/node/FloatNode;.asToken:()Lcom/fasterxml/jackson/core/JsonToken;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.math.BigInteger` `bigIntegerValue`(`com.fasterxml.jackson.databind.node.FloatNode` v1 @kind this) @signature `Lcom/fasterxml/jackson/databind/node/FloatNode;.bigIntegerValue:()Ljava/math/BigInteger;` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `canConvertToInt`(`com.fasterxml.jackson.databind.node.FloatNode` v2 @kind this) @signature `Lcom/fasterxml/jackson/databind/node/FloatNode;.canConvertToInt:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `canConvertToLong`(`com.fasterxml.jackson.databind.node.FloatNode` v2 @kind this) @signature `Lcom/fasterxml/jackson/databind/node/FloatNode;.canConvertToLong:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.math.BigDecimal` `decimalValue`(`com.fasterxml.jackson.databind.node.FloatNode` v2 @kind this) @signature `Lcom/fasterxml/jackson/databind/node/FloatNode;.decimalValue:()Ljava/math/BigDecimal;` @AccessFlag PUBLIC {

  # return;
}
procedure `double` `doubleValue`(`com.fasterxml.jackson.databind.node.FloatNode` v2 @kind this) @signature `Lcom/fasterxml/jackson/databind/node/FloatNode;.doubleValue:()D` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `equals`(`com.fasterxml.jackson.databind.node.FloatNode` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lcom/fasterxml/jackson/databind/node/FloatNode;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `float` `floatValue`(`com.fasterxml.jackson.databind.node.FloatNode` v1 @kind this) @signature `Lcom/fasterxml/jackson/databind/node/FloatNode;.floatValue:()F` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `hashCode`(`com.fasterxml.jackson.databind.node.FloatNode` v1 @kind this) @signature `Lcom/fasterxml/jackson/databind/node/FloatNode;.hashCode:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `intValue`(`com.fasterxml.jackson.databind.node.FloatNode` v1 @kind this) @signature `Lcom/fasterxml/jackson/databind/node/FloatNode;.intValue:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isFloat`(`com.fasterxml.jackson.databind.node.FloatNode` v1 @kind this) @signature `Lcom/fasterxml/jackson/databind/node/FloatNode;.isFloat:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isFloatingPointNumber`(`com.fasterxml.jackson.databind.node.FloatNode` v1 @kind this) @signature `Lcom/fasterxml/jackson/databind/node/FloatNode;.isFloatingPointNumber:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isNaN`(`com.fasterxml.jackson.databind.node.FloatNode` v1 @kind this) @signature `Lcom/fasterxml/jackson/databind/node/FloatNode;.isNaN:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `long` `longValue`(`com.fasterxml.jackson.databind.node.FloatNode` v2 @kind this) @signature `Lcom/fasterxml/jackson/databind/node/FloatNode;.longValue:()J` @AccessFlag PUBLIC {

  # return;
}
procedure `com.fasterxml.jackson.core.JsonParser$NumberType` `numberType`(`com.fasterxml.jackson.databind.node.FloatNode` v1 @kind this) @signature `Lcom/fasterxml/jackson/databind/node/FloatNode;.numberType:()Lcom/fasterxml/jackson/core/JsonParser$NumberType;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Number` `numberValue`(`com.fasterxml.jackson.databind.node.FloatNode` v1 @kind this) @signature `Lcom/fasterxml/jackson/databind/node/FloatNode;.numberValue:()Ljava/lang/Number;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `serialize`(`com.fasterxml.jackson.databind.node.FloatNode` v0 @kind this, `com.fasterxml.jackson.core.JsonGenerator` v1 @kind object, `com.fasterxml.jackson.databind.SerializerProvider` v2 @kind object) @signature `Lcom/fasterxml/jackson/databind/node/FloatNode;.serialize:(Lcom/fasterxml/jackson/core/JsonGenerator;Lcom/fasterxml/jackson/databind/SerializerProvider;)V` @AccessFlag PUBLIC_FINAL {

  # return;
}
procedure `short` `shortValue`(`com.fasterxml.jackson.databind.node.FloatNode` v1 @kind this) @signature `Lcom/fasterxml/jackson/databind/node/FloatNode;.shortValue:()S` @AccessFlag PUBLIC {

  # return;
}
