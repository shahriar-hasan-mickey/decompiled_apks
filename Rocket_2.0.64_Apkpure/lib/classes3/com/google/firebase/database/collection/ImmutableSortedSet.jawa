record `com.google.firebase.database.collection.ImmutableSortedSet` @kind class @AccessFlag PUBLIC extends `java.lang.Iterable` @kind interface {
  `com.google.firebase.database.collection.ImmutableSortedMap` `com.google.firebase.database.collection.ImmutableSortedSet.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.firebase.database.collection.ImmutableSortedSet` v0 @kind this, `com.google.firebase.database.collection.ImmutableSortedMap` v1 @kind object) @signature `Lcom/google/firebase/database/collection/ImmutableSortedSet;.<init>:(Lcom/google/firebase/database/collection/ImmutableSortedMap;)V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.firebase.database.collection.ImmutableSortedSet` v2 @kind this, `java.util.List` v3 @kind object, `java.util.Comparator` v4 @kind object) @signature `Lcom/google/firebase/database/collection/ImmutableSortedSet;.<init>:(Ljava/util/List;Ljava/util/Comparator;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `boolean` `contains`(`com.google.firebase.database.collection.ImmutableSortedSet` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/google/firebase/database/collection/ImmutableSortedSet;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `equals`(`com.google.firebase.database.collection.ImmutableSortedSet` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/google/firebase/database/collection/ImmutableSortedSet;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `getMaxEntry`(`com.google.firebase.database.collection.ImmutableSortedSet` v1 @kind this) @signature `Lcom/google/firebase/database/collection/ImmutableSortedSet;.getMaxEntry:()Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `getMinEntry`(`com.google.firebase.database.collection.ImmutableSortedSet` v1 @kind this) @signature `Lcom/google/firebase/database/collection/ImmutableSortedSet;.getMinEntry:()Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `getPredecessorEntry`(`com.google.firebase.database.collection.ImmutableSortedSet` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/google/firebase/database/collection/ImmutableSortedSet;.getPredecessorEntry:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `hashCode`(`com.google.firebase.database.collection.ImmutableSortedSet` v1 @kind this) @signature `Lcom/google/firebase/database/collection/ImmutableSortedSet;.hashCode:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `indexOf`(`com.google.firebase.database.collection.ImmutableSortedSet` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/google/firebase/database/collection/ImmutableSortedSet;.indexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.firebase.database.collection.ImmutableSortedSet` `insert`(`com.google.firebase.database.collection.ImmutableSortedSet` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lcom/google/firebase/database/collection/ImmutableSortedSet;.insert:(Ljava/lang/Object;)Lcom/google/firebase/database/collection/ImmutableSortedSet;` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isEmpty`(`com.google.firebase.database.collection.ImmutableSortedSet` v1 @kind this) @signature `Lcom/google/firebase/database/collection/ImmutableSortedSet;.isEmpty:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.Iterator` `iterator`(`com.google.firebase.database.collection.ImmutableSortedSet` v2 @kind this) @signature `Lcom/google/firebase/database/collection/ImmutableSortedSet;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.Iterator` `iteratorFrom`(`com.google.firebase.database.collection.ImmutableSortedSet` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lcom/google/firebase/database/collection/ImmutableSortedSet;.iteratorFrom:(Ljava/lang/Object;)Ljava/util/Iterator;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.firebase.database.collection.ImmutableSortedSet` `remove`(`com.google.firebase.database.collection.ImmutableSortedSet` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/google/firebase/database/collection/ImmutableSortedSet;.remove:(Ljava/lang/Object;)Lcom/google/firebase/database/collection/ImmutableSortedSet;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.Iterator` `reverseIterator`(`com.google.firebase.database.collection.ImmutableSortedSet` v2 @kind this) @signature `Lcom/google/firebase/database/collection/ImmutableSortedSet;.reverseIterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.Iterator` `reverseIteratorFrom`(`com.google.firebase.database.collection.ImmutableSortedSet` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lcom/google/firebase/database/collection/ImmutableSortedSet;.reverseIteratorFrom:(Ljava/lang/Object;)Ljava/util/Iterator;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `size`(`com.google.firebase.database.collection.ImmutableSortedSet` v1 @kind this) @signature `Lcom/google/firebase/database/collection/ImmutableSortedSet;.size:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.firebase.database.collection.ImmutableSortedSet` `unionWith`(`com.google.firebase.database.collection.ImmutableSortedSet` v2 @kind this, `com.google.firebase.database.collection.ImmutableSortedSet` v3 @kind object) @signature `Lcom/google/firebase/database/collection/ImmutableSortedSet;.unionWith:(Lcom/google/firebase/database/collection/ImmutableSortedSet;)Lcom/google/firebase/database/collection/ImmutableSortedSet;` @AccessFlag PUBLIC {

  # return;
}
