record `com.google.firebase.database.collection.RBTreeSortedMap$b$a$a` @kind class @AccessFlag  extends `java.util.Iterator` @kind interface {
  `int` `com.google.firebase.database.collection.RBTreeSortedMap$b$a$a.a` @AccessFlag PRIVATE;
  `com.google.firebase.database.collection.RBTreeSortedMap$b$a` `com.google.firebase.database.collection.RBTreeSortedMap$b$a$a.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.google.firebase.database.collection.RBTreeSortedMap$b$a$a` v0 @kind this, `com.google.firebase.database.collection.RBTreeSortedMap$b$a` v1 @kind object) @signature `Lcom/google/firebase/database/collection/RBTreeSortedMap$b$a$a;.<init>:(Lcom/google/firebase/database/collection/RBTreeSortedMap$b$a;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `com.google.firebase.database.collection.RBTreeSortedMap$b$b` `a`(`com.google.firebase.database.collection.RBTreeSortedMap$b$a$a` v7 @kind this) @signature `Lcom/google/firebase/database/collection/RBTreeSortedMap$b$a$a;.a:()Lcom/google/firebase/database/collection/RBTreeSortedMap$b$b;` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `hasNext`(`com.google.firebase.database.collection.RBTreeSortedMap$b$a$a` v1 @kind this) @signature `Lcom/google/firebase/database/collection/RBTreeSortedMap$b$a$a;.hasNext:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `next`(`com.google.firebase.database.collection.RBTreeSortedMap$b$a$a` v1 @kind this) @signature `Lcom/google/firebase/database/collection/RBTreeSortedMap$b$a$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `void` `remove`(`com.google.firebase.database.collection.RBTreeSortedMap$b$a$a` v0 @kind this) @signature `Lcom/google/firebase/database/collection/RBTreeSortedMap$b$a$a;.remove:()V` @AccessFlag PUBLIC {

  # return;
}
