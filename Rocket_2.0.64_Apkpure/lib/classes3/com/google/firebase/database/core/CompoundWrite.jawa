record `com.google.firebase.database.core.CompoundWrite` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.Iterable` @kind interface {
  `com.google.firebase.database.core.utilities.ImmutableTree` `com.google.firebase.database.core.CompoundWrite.a` @AccessFlag PRIVATE_FINAL;
}
global `com.google.firebase.database.core.CompoundWrite` `@@com.google.firebase.database.core.CompoundWrite.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/firebase/database/core/CompoundWrite;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.firebase.database.core.CompoundWrite` v0 @kind this, `com.google.firebase.database.core.utilities.ImmutableTree` v1 @kind object) @signature `Lcom/google/firebase/database/core/CompoundWrite;.<init>:(Lcom/google/firebase/database/core/utilities/ImmutableTree;)V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `com.google.firebase.database.snapshot.Node` `a`(`com.google.firebase.database.core.CompoundWrite` v4 @kind this, `com.google.firebase.database.core.Path` v5 @kind object, `com.google.firebase.database.core.utilities.ImmutableTree` v6 @kind object, `com.google.firebase.database.snapshot.Node` v7 @kind object) @signature `Lcom/google/firebase/database/core/CompoundWrite;.a:(Lcom/google/firebase/database/core/Path;Lcom/google/firebase/database/core/utilities/ImmutableTree;Lcom/google/firebase/database/snapshot/Node;)Lcom/google/firebase/database/snapshot/Node;` @AccessFlag PRIVATE {

  # return;
}
procedure `com.google.firebase.database.core.CompoundWrite` `emptyWrite`() @signature `Lcom/google/firebase/database/core/CompoundWrite;.emptyWrite:()Lcom/google/firebase/database/core/CompoundWrite;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.firebase.database.core.CompoundWrite` `fromChildMerge`(`java.util.Map` v6 @kind object) @signature `Lcom/google/firebase/database/core/CompoundWrite;.fromChildMerge:(Ljava/util/Map;)Lcom/google/firebase/database/core/CompoundWrite;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.firebase.database.core.CompoundWrite` `fromPathMerge`(`java.util.Map` v4 @kind object) @signature `Lcom/google/firebase/database/core/CompoundWrite;.fromPathMerge:(Ljava/util/Map;)Lcom/google/firebase/database/core/CompoundWrite;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.firebase.database.core.CompoundWrite` `fromValue`(`java.util.Map` v4 @kind object) @signature `Lcom/google/firebase/database/core/CompoundWrite;.fromValue:(Ljava/util/Map;)Lcom/google/firebase/database/core/CompoundWrite;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `com.google.firebase.database.core.CompoundWrite` `addWrite`(`com.google.firebase.database.core.CompoundWrite` v3 @kind this, `com.google.firebase.database.core.Path` v4 @kind object, `com.google.firebase.database.snapshot.Node` v5 @kind object) @signature `Lcom/google/firebase/database/core/CompoundWrite;.addWrite:(Lcom/google/firebase/database/core/Path;Lcom/google/firebase/database/snapshot/Node;)Lcom/google/firebase/database/core/CompoundWrite;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.firebase.database.core.CompoundWrite` `addWrite`(`com.google.firebase.database.core.CompoundWrite` v3 @kind this, `com.google.firebase.database.snapshot.ChildKey` v4 @kind object, `com.google.firebase.database.snapshot.Node` v5 @kind object) @signature `Lcom/google/firebase/database/core/CompoundWrite;.addWrite:(Lcom/google/firebase/database/snapshot/ChildKey;Lcom/google/firebase/database/snapshot/Node;)Lcom/google/firebase/database/core/CompoundWrite;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.firebase.database.core.CompoundWrite` `addWrites`(`com.google.firebase.database.core.CompoundWrite` v1 @kind this, `com.google.firebase.database.core.Path` v2 @kind object, `com.google.firebase.database.core.CompoundWrite` v3 @kind object) @signature `Lcom/google/firebase/database/core/CompoundWrite;.addWrites:(Lcom/google/firebase/database/core/Path;Lcom/google/firebase/database/core/CompoundWrite;)Lcom/google/firebase/database/core/CompoundWrite;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.firebase.database.snapshot.Node` `apply`(`com.google.firebase.database.core.CompoundWrite` v2 @kind this, `com.google.firebase.database.snapshot.Node` v3 @kind object) @signature `Lcom/google/firebase/database/core/CompoundWrite;.apply:(Lcom/google/firebase/database/snapshot/Node;)Lcom/google/firebase/database/snapshot/Node;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.firebase.database.core.CompoundWrite` `childCompoundWrite`(`com.google.firebase.database.core.CompoundWrite` v2 @kind this, `com.google.firebase.database.core.Path` v3 @kind object) @signature `Lcom/google/firebase/database/core/CompoundWrite;.childCompoundWrite:(Lcom/google/firebase/database/core/Path;)Lcom/google/firebase/database/core/CompoundWrite;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.Map` `childCompoundWrites`(`com.google.firebase.database.core.CompoundWrite` v5 @kind this) @signature `Lcom/google/firebase/database/core/CompoundWrite;.childCompoundWrites:()Ljava/util/Map;` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `equals`(`com.google.firebase.database.core.CompoundWrite` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lcom/google/firebase/database/core/CompoundWrite;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.List` `getCompleteChildren`(`com.google.firebase.database.core.CompoundWrite` v5 @kind this) @signature `Lcom/google/firebase/database/core/CompoundWrite;.getCompleteChildren:()Ljava/util/List;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.firebase.database.snapshot.Node` `getCompleteNode`(`com.google.firebase.database.core.CompoundWrite` v2 @kind this, `com.google.firebase.database.core.Path` v3 @kind object) @signature `Lcom/google/firebase/database/core/CompoundWrite;.getCompleteNode:(Lcom/google/firebase/database/core/Path;)Lcom/google/firebase/database/snapshot/Node;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.Map` `getValue`(`com.google.firebase.database.core.CompoundWrite` v3 @kind this, `boolean` v4 ) @signature `Lcom/google/firebase/database/core/CompoundWrite;.getValue:(Z)Ljava/util/Map;` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `hasCompleteWrite`(`com.google.firebase.database.core.CompoundWrite` v0 @kind this, `com.google.firebase.database.core.Path` v1 @kind object) @signature `Lcom/google/firebase/database/core/CompoundWrite;.hasCompleteWrite:(Lcom/google/firebase/database/core/Path;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `hashCode`(`com.google.firebase.database.core.CompoundWrite` v1 @kind this) @signature `Lcom/google/firebase/database/core/CompoundWrite;.hashCode:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isEmpty`(`com.google.firebase.database.core.CompoundWrite` v1 @kind this) @signature `Lcom/google/firebase/database/core/CompoundWrite;.isEmpty:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.Iterator` `iterator`(`com.google.firebase.database.core.CompoundWrite` v1 @kind this) @signature `Lcom/google/firebase/database/core/CompoundWrite;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.firebase.database.core.CompoundWrite` `removeWrite`(`com.google.firebase.database.core.CompoundWrite` v2 @kind this, `com.google.firebase.database.core.Path` v3 @kind object) @signature `Lcom/google/firebase/database/core/CompoundWrite;.removeWrite:(Lcom/google/firebase/database/core/Path;)Lcom/google/firebase/database/core/CompoundWrite;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.firebase.database.snapshot.Node` `rootWrite`(`com.google.firebase.database.core.CompoundWrite` v1 @kind this) @signature `Lcom/google/firebase/database/core/CompoundWrite;.rootWrite:()Lcom/google/firebase/database/snapshot/Node;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `toString`(`com.google.firebase.database.core.CompoundWrite` v2 @kind this) @signature `Lcom/google/firebase/database/core/CompoundWrite;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
