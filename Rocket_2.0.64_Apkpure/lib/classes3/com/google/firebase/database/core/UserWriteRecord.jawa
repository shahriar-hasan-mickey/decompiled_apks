record `com.google.firebase.database.core.UserWriteRecord` @kind class @AccessFlag PUBLIC_FINAL {
  `long` `com.google.firebase.database.core.UserWriteRecord.a` @AccessFlag PRIVATE_FINAL;
  `com.google.firebase.database.core.Path` `com.google.firebase.database.core.UserWriteRecord.b` @AccessFlag PRIVATE_FINAL;
  `com.google.firebase.database.snapshot.Node` `com.google.firebase.database.core.UserWriteRecord.c` @AccessFlag PRIVATE_FINAL;
  `com.google.firebase.database.core.CompoundWrite` `com.google.firebase.database.core.UserWriteRecord.d` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.google.firebase.database.core.UserWriteRecord.e` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.firebase.database.core.UserWriteRecord` v0 @kind this, `long` v1 , `com.google.firebase.database.core.Path` v3 @kind object, `com.google.firebase.database.core.CompoundWrite` v4 @kind object) @signature `Lcom/google/firebase/database/core/UserWriteRecord;.<init>:(JLcom/google/firebase/database/core/Path;Lcom/google/firebase/database/core/CompoundWrite;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.firebase.database.core.UserWriteRecord` v0 @kind this, `long` v1 , `com.google.firebase.database.core.Path` v3 @kind object, `com.google.firebase.database.snapshot.Node` v4 @kind object, `boolean` v5 ) @signature `Lcom/google/firebase/database/core/UserWriteRecord;.<init>:(JLcom/google/firebase/database/core/Path;Lcom/google/firebase/database/snapshot/Node;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `boolean` `equals`(`com.google.firebase.database.core.UserWriteRecord` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lcom/google/firebase/database/core/UserWriteRecord;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.firebase.database.core.CompoundWrite` `getMerge`(`com.google.firebase.database.core.UserWriteRecord` v2 @kind this) @signature `Lcom/google/firebase/database/core/UserWriteRecord;.getMerge:()Lcom/google/firebase/database/core/CompoundWrite;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.firebase.database.snapshot.Node` `getOverwrite`(`com.google.firebase.database.core.UserWriteRecord` v2 @kind this) @signature `Lcom/google/firebase/database/core/UserWriteRecord;.getOverwrite:()Lcom/google/firebase/database/snapshot/Node;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.firebase.database.core.Path` `getPath`(`com.google.firebase.database.core.UserWriteRecord` v1 @kind this) @signature `Lcom/google/firebase/database/core/UserWriteRecord;.getPath:()Lcom/google/firebase/database/core/Path;` @AccessFlag PUBLIC {

  # return;
}
procedure `long` `getWriteId`(`com.google.firebase.database.core.UserWriteRecord` v2 @kind this) @signature `Lcom/google/firebase/database/core/UserWriteRecord;.getWriteId:()J` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `hashCode`(`com.google.firebase.database.core.UserWriteRecord` v3 @kind this) @signature `Lcom/google/firebase/database/core/UserWriteRecord;.hashCode:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isMerge`(`com.google.firebase.database.core.UserWriteRecord` v1 @kind this) @signature `Lcom/google/firebase/database/core/UserWriteRecord;.isMerge:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isOverwrite`(`com.google.firebase.database.core.UserWriteRecord` v1 @kind this) @signature `Lcom/google/firebase/database/core/UserWriteRecord;.isOverwrite:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isVisible`(`com.google.firebase.database.core.UserWriteRecord` v1 @kind this) @signature `Lcom/google/firebase/database/core/UserWriteRecord;.isVisible:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `toString`(`com.google.firebase.database.core.UserWriteRecord` v3 @kind this) @signature `Lcom/google/firebase/database/core/UserWriteRecord;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
