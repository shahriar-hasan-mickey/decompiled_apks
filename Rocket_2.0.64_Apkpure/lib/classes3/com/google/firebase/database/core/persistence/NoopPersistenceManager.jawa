record `com.google.firebase.database.core.persistence.NoopPersistenceManager` @kind class @AccessFlag PUBLIC extends `com.google.firebase.database.core.persistence.PersistenceManager` @kind interface {
  `boolean` `com.google.firebase.database.core.persistence.NoopPersistenceManager.a` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.google.firebase.database.core.persistence.NoopPersistenceManager` v1 @kind this) @signature `Lcom/google/firebase/database/core/persistence/NoopPersistenceManager;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `a`(`com.google.firebase.database.core.persistence.NoopPersistenceManager` v2 @kind this) @signature `Lcom/google/firebase/database/core/persistence/NoopPersistenceManager;.a:()V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `applyUserWriteToServerCache`(`com.google.firebase.database.core.persistence.NoopPersistenceManager` v0 @kind this, `com.google.firebase.database.core.Path` v1 @kind object, `com.google.firebase.database.core.CompoundWrite` v2 @kind object) @signature `Lcom/google/firebase/database/core/persistence/NoopPersistenceManager;.applyUserWriteToServerCache:(Lcom/google/firebase/database/core/Path;Lcom/google/firebase/database/core/CompoundWrite;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `applyUserWriteToServerCache`(`com.google.firebase.database.core.persistence.NoopPersistenceManager` v0 @kind this, `com.google.firebase.database.core.Path` v1 @kind object, `com.google.firebase.database.snapshot.Node` v2 @kind object) @signature `Lcom/google/firebase/database/core/persistence/NoopPersistenceManager;.applyUserWriteToServerCache:(Lcom/google/firebase/database/core/Path;Lcom/google/firebase/database/snapshot/Node;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.List` `loadUserWrites`(`com.google.firebase.database.core.persistence.NoopPersistenceManager` v1 @kind this) @signature `Lcom/google/firebase/database/core/persistence/NoopPersistenceManager;.loadUserWrites:()Ljava/util/List;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `removeAllUserWrites`(`com.google.firebase.database.core.persistence.NoopPersistenceManager` v0 @kind this) @signature `Lcom/google/firebase/database/core/persistence/NoopPersistenceManager;.removeAllUserWrites:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `removeUserWrite`(`com.google.firebase.database.core.persistence.NoopPersistenceManager` v0 @kind this, `long` v1 ) @signature `Lcom/google/firebase/database/core/persistence/NoopPersistenceManager;.removeUserWrite:(J)V` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `runInTransaction`(`com.google.firebase.database.core.persistence.NoopPersistenceManager` v3 @kind this, `java.util.concurrent.Callable` v4 @kind object) @signature `Lcom/google/firebase/database/core/persistence/NoopPersistenceManager;.runInTransaction:(Ljava/util/concurrent/Callable;)Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `saveUserMerge`(`com.google.firebase.database.core.persistence.NoopPersistenceManager` v0 @kind this, `com.google.firebase.database.core.Path` v1 @kind object, `com.google.firebase.database.core.CompoundWrite` v2 @kind object, `long` v3 ) @signature `Lcom/google/firebase/database/core/persistence/NoopPersistenceManager;.saveUserMerge:(Lcom/google/firebase/database/core/Path;Lcom/google/firebase/database/core/CompoundWrite;J)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `saveUserOverwrite`(`com.google.firebase.database.core.persistence.NoopPersistenceManager` v0 @kind this, `com.google.firebase.database.core.Path` v1 @kind object, `com.google.firebase.database.snapshot.Node` v2 @kind object, `long` v3 ) @signature `Lcom/google/firebase/database/core/persistence/NoopPersistenceManager;.saveUserOverwrite:(Lcom/google/firebase/database/core/Path;Lcom/google/firebase/database/snapshot/Node;J)V` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.firebase.database.core.view.CacheNode` `serverCache`(`com.google.firebase.database.core.persistence.NoopPersistenceManager` v2 @kind this, `com.google.firebase.database.core.view.QuerySpec` v3 @kind object) @signature `Lcom/google/firebase/database/core/persistence/NoopPersistenceManager;.serverCache:(Lcom/google/firebase/database/core/view/QuerySpec;)Lcom/google/firebase/database/core/view/CacheNode;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `setQueryActive`(`com.google.firebase.database.core.persistence.NoopPersistenceManager` v0 @kind this, `com.google.firebase.database.core.view.QuerySpec` v1 @kind object) @signature `Lcom/google/firebase/database/core/persistence/NoopPersistenceManager;.setQueryActive:(Lcom/google/firebase/database/core/view/QuerySpec;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `setQueryComplete`(`com.google.firebase.database.core.persistence.NoopPersistenceManager` v0 @kind this, `com.google.firebase.database.core.view.QuerySpec` v1 @kind object) @signature `Lcom/google/firebase/database/core/persistence/NoopPersistenceManager;.setQueryComplete:(Lcom/google/firebase/database/core/view/QuerySpec;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `setQueryInactive`(`com.google.firebase.database.core.persistence.NoopPersistenceManager` v0 @kind this, `com.google.firebase.database.core.view.QuerySpec` v1 @kind object) @signature `Lcom/google/firebase/database/core/persistence/NoopPersistenceManager;.setQueryInactive:(Lcom/google/firebase/database/core/view/QuerySpec;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `setTrackedQueryKeys`(`com.google.firebase.database.core.persistence.NoopPersistenceManager` v0 @kind this, `com.google.firebase.database.core.view.QuerySpec` v1 @kind object, `java.util.Set` v2 @kind object) @signature `Lcom/google/firebase/database/core/persistence/NoopPersistenceManager;.setTrackedQueryKeys:(Lcom/google/firebase/database/core/view/QuerySpec;Ljava/util/Set;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `updateServerCache`(`com.google.firebase.database.core.persistence.NoopPersistenceManager` v0 @kind this, `com.google.firebase.database.core.Path` v1 @kind object, `com.google.firebase.database.core.CompoundWrite` v2 @kind object) @signature `Lcom/google/firebase/database/core/persistence/NoopPersistenceManager;.updateServerCache:(Lcom/google/firebase/database/core/Path;Lcom/google/firebase/database/core/CompoundWrite;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `updateServerCache`(`com.google.firebase.database.core.persistence.NoopPersistenceManager` v0 @kind this, `com.google.firebase.database.core.view.QuerySpec` v1 @kind object, `com.google.firebase.database.snapshot.Node` v2 @kind object) @signature `Lcom/google/firebase/database/core/persistence/NoopPersistenceManager;.updateServerCache:(Lcom/google/firebase/database/core/view/QuerySpec;Lcom/google/firebase/database/snapshot/Node;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `updateTrackedQueryKeys`(`com.google.firebase.database.core.persistence.NoopPersistenceManager` v0 @kind this, `com.google.firebase.database.core.view.QuerySpec` v1 @kind object, `java.util.Set` v2 @kind object, `java.util.Set` v3 @kind object) @signature `Lcom/google/firebase/database/core/persistence/NoopPersistenceManager;.updateTrackedQueryKeys:(Lcom/google/firebase/database/core/view/QuerySpec;Ljava/util/Set;Ljava/util/Set;)V` @AccessFlag PUBLIC {

  # return;
}
