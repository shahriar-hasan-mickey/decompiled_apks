record `com.google.firebase.database.connection.util.RetryHelper` @kind class @AccessFlag PUBLIC {
  `java.util.concurrent.ScheduledExecutorService` `com.google.firebase.database.connection.util.RetryHelper.a` @AccessFlag PRIVATE_FINAL;
  `com.google.firebase.database.logging.LogWrapper` `com.google.firebase.database.connection.util.RetryHelper.b` @AccessFlag PRIVATE_FINAL;
  `long` `com.google.firebase.database.connection.util.RetryHelper.c` @AccessFlag PRIVATE_FINAL;
  `long` `com.google.firebase.database.connection.util.RetryHelper.d` @AccessFlag PRIVATE_FINAL;
  `double` `com.google.firebase.database.connection.util.RetryHelper.e` @AccessFlag PRIVATE_FINAL;
  `double` `com.google.firebase.database.connection.util.RetryHelper.f` @AccessFlag PRIVATE_FINAL;
  `java.util.Random` `com.google.firebase.database.connection.util.RetryHelper.g` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.ScheduledFuture` `com.google.firebase.database.connection.util.RetryHelper.h` @AccessFlag PRIVATE;
  `long` `com.google.firebase.database.connection.util.RetryHelper.i` @AccessFlag PRIVATE;
  `boolean` `com.google.firebase.database.connection.util.RetryHelper.j` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.google.firebase.database.connection.util.RetryHelper` v1 @kind this, `java.util.concurrent.ScheduledExecutorService` v2 @kind object, `com.google.firebase.database.logging.LogWrapper` v3 @kind object, `long` v4 , `long` v6 , `double` v8 , `double` v10 ) @signature `Lcom/google/firebase/database/connection/util/RetryHelper;.<init>:(Ljava/util/concurrent/ScheduledExecutorService;Lcom/google/firebase/database/logging/LogWrapper;JJDD)V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.firebase.database.connection.util.RetryHelper` v0 @kind this, `java.util.concurrent.ScheduledExecutorService` v1 @kind object, `com.google.firebase.database.logging.LogWrapper` v2 @kind object, `long` v3 , `long` v5 , `double` v7 , `double` v9 , `com.google.firebase.database.connection.util.RetryHelper$a` v11 @kind object) @signature `Lcom/google/firebase/database/connection/util/RetryHelper;.<init>:(Ljava/util/concurrent/ScheduledExecutorService;Lcom/google/firebase/database/logging/LogWrapper;JJDDLcom/google/firebase/database/connection/util/RetryHelper$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {

  # return;
}
procedure `java.util.concurrent.ScheduledFuture` `a`(`com.google.firebase.database.connection.util.RetryHelper` v0 @kind object, `java.util.concurrent.ScheduledFuture` v1 @kind object) @signature `Lcom/google/firebase/database/connection/util/RetryHelper;.a:(Lcom/google/firebase/database/connection/util/RetryHelper;Ljava/util/concurrent/ScheduledFuture;)Ljava/util/concurrent/ScheduledFuture;` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `void` `cancel`(`com.google.firebase.database.connection.util.RetryHelper` v4 @kind this) @signature `Lcom/google/firebase/database/connection/util/RetryHelper;.cancel:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `retry`(`com.google.firebase.database.connection.util.RetryHelper` v10 @kind this, `java.lang.Runnable` v11 @kind object) @signature `Lcom/google/firebase/database/connection/util/RetryHelper;.retry:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `setMaxDelay`(`com.google.firebase.database.connection.util.RetryHelper` v2 @kind this) @signature `Lcom/google/firebase/database/connection/util/RetryHelper;.setMaxDelay:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `signalSuccess`(`com.google.firebase.database.connection.util.RetryHelper` v2 @kind this) @signature `Lcom/google/firebase/database/connection/util/RetryHelper;.signalSuccess:()V` @AccessFlag PUBLIC {

  # return;
}
