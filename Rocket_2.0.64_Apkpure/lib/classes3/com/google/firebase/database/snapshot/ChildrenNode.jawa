record `com.google.firebase.database.snapshot.ChildrenNode` @kind class @AccessFlag PUBLIC extends `com.google.firebase.database.snapshot.Node` @kind interface {
  `com.google.firebase.database.collection.ImmutableSortedMap` `com.google.firebase.database.snapshot.ChildrenNode.a` @AccessFlag PRIVATE_FINAL;
  `com.google.firebase.database.snapshot.Node` `com.google.firebase.database.snapshot.ChildrenNode.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `com.google.firebase.database.snapshot.ChildrenNode.c` @AccessFlag PRIVATE;
}
global `java.util.Comparator` `@@com.google.firebase.database.snapshot.ChildrenNode.NAME_ONLY_COMPARATOR` @AccessFlag PUBLIC_STATIC;
procedure `void` `<clinit>`() @signature `Lcom/google/firebase/database/snapshot/ChildrenNode;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.firebase.database.snapshot.ChildrenNode` v1 @kind this) @signature `Lcom/google/firebase/database/snapshot/ChildrenNode;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.firebase.database.snapshot.ChildrenNode` v1 @kind this, `com.google.firebase.database.collection.ImmutableSortedMap` v2 @kind object, `com.google.firebase.database.snapshot.Node` v3 @kind object) @signature `Lcom/google/firebase/database/snapshot/ChildrenNode;.<init>:(Lcom/google/firebase/database/collection/ImmutableSortedMap;Lcom/google/firebase/database/snapshot/Node;)V` @AccessFlag PROTECTED_CONSTRUCTOR {

  # return;
}
procedure `void` `a`(`java.lang.StringBuilder` v2 @kind object, `int` v3 ) @signature `Lcom/google/firebase/database/snapshot/ChildrenNode;.a:(Ljava/lang/StringBuilder;I)V` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `void` `b`(`com.google.firebase.database.snapshot.ChildrenNode` v5 @kind this, `java.lang.StringBuilder` v6 @kind object, `int` v7 ) @signature `Lcom/google/firebase/database/snapshot/ChildrenNode;.b:(Ljava/lang/StringBuilder;I)V` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `compareTo`(`com.google.firebase.database.snapshot.ChildrenNode` v4 @kind this, `com.google.firebase.database.snapshot.Node` v5 @kind object) @signature `Lcom/google/firebase/database/snapshot/ChildrenNode;.compareTo:(Lcom/google/firebase/database/snapshot/Node;)I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `compareTo`(`com.google.firebase.database.snapshot.ChildrenNode` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/google/firebase/database/snapshot/ChildrenNode;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `boolean` `equals`(`com.google.firebase.database.snapshot.ChildrenNode` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lcom/google/firebase/database/snapshot/ChildrenNode;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `forEachChild`(`com.google.firebase.database.snapshot.ChildrenNode` v1 @kind this, `com.google.firebase.database.snapshot.ChildrenNode$ChildVisitor` v2 @kind object) @signature `Lcom/google/firebase/database/snapshot/ChildrenNode;.forEachChild:(Lcom/google/firebase/database/snapshot/ChildrenNode$ChildVisitor;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `forEachChild`(`com.google.firebase.database.snapshot.ChildrenNode` v1 @kind this, `com.google.firebase.database.snapshot.ChildrenNode$ChildVisitor` v2 @kind object, `boolean` v3 ) @signature `Lcom/google/firebase/database/snapshot/ChildrenNode;.forEachChild:(Lcom/google/firebase/database/snapshot/ChildrenNode$ChildVisitor;Z)V` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.firebase.database.snapshot.Node` `getChild`(`com.google.firebase.database.snapshot.ChildrenNode` v1 @kind this, `com.google.firebase.database.core.Path` v2 @kind object) @signature `Lcom/google/firebase/database/snapshot/ChildrenNode;.getChild:(Lcom/google/firebase/database/core/Path;)Lcom/google/firebase/database/snapshot/Node;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getChildCount`(`com.google.firebase.database.snapshot.ChildrenNode` v1 @kind this) @signature `Lcom/google/firebase/database/snapshot/ChildrenNode;.getChildCount:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.firebase.database.snapshot.ChildKey` `getFirstChildKey`(`com.google.firebase.database.snapshot.ChildrenNode` v1 @kind this) @signature `Lcom/google/firebase/database/snapshot/ChildrenNode;.getFirstChildKey:()Lcom/google/firebase/database/snapshot/ChildKey;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `getHash`(`com.google.firebase.database.snapshot.ChildrenNode` v2 @kind this) @signature `Lcom/google/firebase/database/snapshot/ChildrenNode;.getHash:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `getHashRepresentation`(`com.google.firebase.database.snapshot.ChildrenNode` v6 @kind this, `com.google.firebase.database.snapshot.Node$HashVersion` v7 @kind object) @signature `Lcom/google/firebase/database/snapshot/ChildrenNode;.getHashRepresentation:(Lcom/google/firebase/database/snapshot/Node$HashVersion;)Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.firebase.database.snapshot.Node` `getImmediateChild`(`com.google.firebase.database.snapshot.ChildrenNode` v1 @kind this, `com.google.firebase.database.snapshot.ChildKey` v2 @kind object) @signature `Lcom/google/firebase/database/snapshot/ChildrenNode;.getImmediateChild:(Lcom/google/firebase/database/snapshot/ChildKey;)Lcom/google/firebase/database/snapshot/Node;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.firebase.database.snapshot.ChildKey` `getLastChildKey`(`com.google.firebase.database.snapshot.ChildrenNode` v1 @kind this) @signature `Lcom/google/firebase/database/snapshot/ChildrenNode;.getLastChildKey:()Lcom/google/firebase/database/snapshot/ChildKey;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.firebase.database.snapshot.ChildKey` `getPredecessorChildKey`(`com.google.firebase.database.snapshot.ChildrenNode` v1 @kind this, `com.google.firebase.database.snapshot.ChildKey` v2 @kind object) @signature `Lcom/google/firebase/database/snapshot/ChildrenNode;.getPredecessorChildKey:(Lcom/google/firebase/database/snapshot/ChildKey;)Lcom/google/firebase/database/snapshot/ChildKey;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.firebase.database.snapshot.Node` `getPriority`(`com.google.firebase.database.snapshot.ChildrenNode` v1 @kind this) @signature `Lcom/google/firebase/database/snapshot/ChildrenNode;.getPriority:()Lcom/google/firebase/database/snapshot/Node;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.firebase.database.snapshot.ChildKey` `getSuccessorChildKey`(`com.google.firebase.database.snapshot.ChildrenNode` v1 @kind this, `com.google.firebase.database.snapshot.ChildKey` v2 @kind object) @signature `Lcom/google/firebase/database/snapshot/ChildrenNode;.getSuccessorChildKey:(Lcom/google/firebase/database/snapshot/ChildKey;)Lcom/google/firebase/database/snapshot/ChildKey;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `getValue`(`com.google.firebase.database.snapshot.ChildrenNode` v1 @kind this) @signature `Lcom/google/firebase/database/snapshot/ChildrenNode;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `getValue`(`com.google.firebase.database.snapshot.ChildrenNode` v10 @kind this, `boolean` v11 ) @signature `Lcom/google/firebase/database/snapshot/ChildrenNode;.getValue:(Z)Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `hasChild`(`com.google.firebase.database.snapshot.ChildrenNode` v0 @kind this, `com.google.firebase.database.snapshot.ChildKey` v1 @kind object) @signature `Lcom/google/firebase/database/snapshot/ChildrenNode;.hasChild:(Lcom/google/firebase/database/snapshot/ChildKey;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `hashCode`(`com.google.firebase.database.snapshot.ChildrenNode` v4 @kind this) @signature `Lcom/google/firebase/database/snapshot/ChildrenNode;.hashCode:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isEmpty`(`com.google.firebase.database.snapshot.ChildrenNode` v1 @kind this) @signature `Lcom/google/firebase/database/snapshot/ChildrenNode;.isEmpty:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isLeafNode`(`com.google.firebase.database.snapshot.ChildrenNode` v1 @kind this) @signature `Lcom/google/firebase/database/snapshot/ChildrenNode;.isLeafNode:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.Iterator` `iterator`(`com.google.firebase.database.snapshot.ChildrenNode` v2 @kind this) @signature `Lcom/google/firebase/database/snapshot/ChildrenNode;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.Iterator` `reverseIterator`(`com.google.firebase.database.snapshot.ChildrenNode` v2 @kind this) @signature `Lcom/google/firebase/database/snapshot/ChildrenNode;.reverseIterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `toString`(`com.google.firebase.database.snapshot.ChildrenNode` v2 @kind this) @signature `Lcom/google/firebase/database/snapshot/ChildrenNode;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.firebase.database.snapshot.Node` `updateChild`(`com.google.firebase.database.snapshot.ChildrenNode` v2 @kind this, `com.google.firebase.database.core.Path` v3 @kind object, `com.google.firebase.database.snapshot.Node` v4 @kind object) @signature `Lcom/google/firebase/database/snapshot/ChildrenNode;.updateChild:(Lcom/google/firebase/database/core/Path;Lcom/google/firebase/database/snapshot/Node;)Lcom/google/firebase/database/snapshot/Node;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.firebase.database.snapshot.Node` `updateImmediateChild`(`com.google.firebase.database.snapshot.ChildrenNode` v2 @kind this, `com.google.firebase.database.snapshot.ChildKey` v3 @kind object, `com.google.firebase.database.snapshot.Node` v4 @kind object) @signature `Lcom/google/firebase/database/snapshot/ChildrenNode;.updateImmediateChild:(Lcom/google/firebase/database/snapshot/ChildKey;Lcom/google/firebase/database/snapshot/Node;)Lcom/google/firebase/database/snapshot/Node;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.firebase.database.snapshot.Node` `updatePriority`(`com.google.firebase.database.snapshot.ChildrenNode` v2 @kind this, `com.google.firebase.database.snapshot.Node` v3 @kind object) @signature `Lcom/google/firebase/database/snapshot/ChildrenNode;.updatePriority:(Lcom/google/firebase/database/snapshot/Node;)Lcom/google/firebase/database/snapshot/Node;` @AccessFlag PUBLIC {

  # return;
}
