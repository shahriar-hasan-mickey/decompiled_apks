record `com.google.firebase.database.snapshot.LeafNode` @kind class @AccessFlag PUBLIC_ABSTRACT extends `com.google.firebase.database.snapshot.Node` @kind interface {
  `java.lang.String` `com.google.firebase.database.snapshot.LeafNode.a` @AccessFlag PRIVATE;
  `com.google.firebase.database.snapshot.Node` `com.google.firebase.database.snapshot.LeafNode.priority` @AccessFlag PROTECTED_FINAL;
}
procedure `void` `<init>`(`com.google.firebase.database.snapshot.LeafNode` v0 @kind this, `com.google.firebase.database.snapshot.Node` v1 @kind object) @signature `Lcom/google/firebase/database/snapshot/LeafNode;.<init>:(Lcom/google/firebase/database/snapshot/Node;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `int` `a`(`com.google.firebase.database.snapshot.LongNode` v2 @kind object, `com.google.firebase.database.snapshot.DoubleNode` v3 @kind object) @signature `Lcom/google/firebase/database/snapshot/LeafNode;.a:(Lcom/google/firebase/database/snapshot/LongNode;Lcom/google/firebase/database/snapshot/DoubleNode;)I` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `int` `compareLeafValues`(`com.google.firebase.database.snapshot.LeafNode` v0 @kind object) @signature `Lcom/google/firebase/database/snapshot/LeafNode;.compareLeafValues:(Lcom/google/firebase/database/snapshot/LeafNode;)I` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `int` `compareTo`(`com.google.firebase.database.snapshot.LeafNode` v3 @kind this, `com.google.firebase.database.snapshot.Node` v4 @kind object) @signature `Lcom/google/firebase/database/snapshot/LeafNode;.compareTo:(Lcom/google/firebase/database/snapshot/Node;)I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `compareTo`(`com.google.firebase.database.snapshot.LeafNode` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/google/firebase/database/snapshot/LeafNode;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `boolean` `equals`(`java.lang.Object` v0 @kind object) @signature `Lcom/google/firebase/database/snapshot/LeafNode;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `com.google.firebase.database.snapshot.Node` `getChild`(`com.google.firebase.database.snapshot.LeafNode` v1 @kind this, `com.google.firebase.database.core.Path` v2 @kind object) @signature `Lcom/google/firebase/database/snapshot/LeafNode;.getChild:(Lcom/google/firebase/database/core/Path;)Lcom/google/firebase/database/snapshot/Node;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getChildCount`(`com.google.firebase.database.snapshot.LeafNode` v1 @kind this) @signature `Lcom/google/firebase/database/snapshot/LeafNode;.getChildCount:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `getHash`(`com.google.firebase.database.snapshot.LeafNode` v1 @kind this) @signature `Lcom/google/firebase/database/snapshot/LeafNode;.getHash:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.firebase.database.snapshot.Node` `getImmediateChild`(`com.google.firebase.database.snapshot.LeafNode` v0 @kind this, `com.google.firebase.database.snapshot.ChildKey` v1 @kind object) @signature `Lcom/google/firebase/database/snapshot/LeafNode;.getImmediateChild:(Lcom/google/firebase/database/snapshot/ChildKey;)Lcom/google/firebase/database/snapshot/Node;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.firebase.database.snapshot.LeafNode$LeafType` `getLeafType`() @signature `Lcom/google/firebase/database/snapshot/LeafNode;.getLeafType:()Lcom/google/firebase/database/snapshot/LeafNode$LeafType;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `com.google.firebase.database.snapshot.ChildKey` `getPredecessorChildKey`(`com.google.firebase.database.snapshot.LeafNode` v0 @kind this, `com.google.firebase.database.snapshot.ChildKey` v1 @kind object) @signature `Lcom/google/firebase/database/snapshot/LeafNode;.getPredecessorChildKey:(Lcom/google/firebase/database/snapshot/ChildKey;)Lcom/google/firebase/database/snapshot/ChildKey;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.firebase.database.snapshot.Node` `getPriority`(`com.google.firebase.database.snapshot.LeafNode` v1 @kind this) @signature `Lcom/google/firebase/database/snapshot/LeafNode;.getPriority:()Lcom/google/firebase/database/snapshot/Node;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `getPriorityHash`(`com.google.firebase.database.snapshot.LeafNode` v3 @kind this, `com.google.firebase.database.snapshot.Node$HashVersion` v4 @kind object) @signature `Lcom/google/firebase/database/snapshot/LeafNode;.getPriorityHash:(Lcom/google/firebase/database/snapshot/Node$HashVersion;)Ljava/lang/String;` @AccessFlag PROTECTED {

  # return;
}
procedure `com.google.firebase.database.snapshot.ChildKey` `getSuccessorChildKey`(`com.google.firebase.database.snapshot.LeafNode` v0 @kind this, `com.google.firebase.database.snapshot.ChildKey` v1 @kind object) @signature `Lcom/google/firebase/database/snapshot/LeafNode;.getSuccessorChildKey:(Lcom/google/firebase/database/snapshot/ChildKey;)Lcom/google/firebase/database/snapshot/ChildKey;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `getValue`(`com.google.firebase.database.snapshot.LeafNode` v2 @kind this, `boolean` v3 ) @signature `Lcom/google/firebase/database/snapshot/LeafNode;.getValue:(Z)Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `hasChild`(`com.google.firebase.database.snapshot.LeafNode` v0 @kind this, `com.google.firebase.database.snapshot.ChildKey` v1 @kind object) @signature `Lcom/google/firebase/database/snapshot/LeafNode;.hasChild:(Lcom/google/firebase/database/snapshot/ChildKey;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `hashCode`() @signature `Lcom/google/firebase/database/snapshot/LeafNode;.hashCode:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isEmpty`(`com.google.firebase.database.snapshot.LeafNode` v1 @kind this) @signature `Lcom/google/firebase/database/snapshot/LeafNode;.isEmpty:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isLeafNode`(`com.google.firebase.database.snapshot.LeafNode` v1 @kind this) @signature `Lcom/google/firebase/database/snapshot/LeafNode;.isLeafNode:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.Iterator` `iterator`(`com.google.firebase.database.snapshot.LeafNode` v1 @kind this) @signature `Lcom/google/firebase/database/snapshot/LeafNode;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `leafCompare`(`com.google.firebase.database.snapshot.LeafNode` v3 @kind this, `com.google.firebase.database.snapshot.LeafNode` v4 @kind object) @signature `Lcom/google/firebase/database/snapshot/LeafNode;.leafCompare:(Lcom/google/firebase/database/snapshot/LeafNode;)I` @AccessFlag PROTECTED {

  # return;
}
procedure `java.util.Iterator` `reverseIterator`(`com.google.firebase.database.snapshot.LeafNode` v1 @kind this) @signature `Lcom/google/firebase/database/snapshot/LeafNode;.reverseIterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `toString`(`com.google.firebase.database.snapshot.LeafNode` v4 @kind this) @signature `Lcom/google/firebase/database/snapshot/LeafNode;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.firebase.database.snapshot.Node` `updateChild`(`com.google.firebase.database.snapshot.LeafNode` v3 @kind this, `com.google.firebase.database.core.Path` v4 @kind object, `com.google.firebase.database.snapshot.Node` v5 @kind object) @signature `Lcom/google/firebase/database/snapshot/LeafNode;.updateChild:(Lcom/google/firebase/database/core/Path;Lcom/google/firebase/database/snapshot/Node;)Lcom/google/firebase/database/snapshot/Node;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.firebase.database.snapshot.Node` `updateImmediateChild`(`com.google.firebase.database.snapshot.LeafNode` v1 @kind this, `com.google.firebase.database.snapshot.ChildKey` v2 @kind object, `com.google.firebase.database.snapshot.Node` v3 @kind object) @signature `Lcom/google/firebase/database/snapshot/LeafNode;.updateImmediateChild:(Lcom/google/firebase/database/snapshot/ChildKey;Lcom/google/firebase/database/snapshot/Node;)Lcom/google/firebase/database/snapshot/Node;` @AccessFlag PUBLIC {

  # return;
}
