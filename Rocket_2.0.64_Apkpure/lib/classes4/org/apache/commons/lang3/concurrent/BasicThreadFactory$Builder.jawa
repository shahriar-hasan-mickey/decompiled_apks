record `org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder` @kind class @AccessFlag PUBLIC extends `org.apache.commons.lang3.builder.Builder` @kind interface {
  `java.util.concurrent.ThreadFactory` `org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder.a` @AccessFlag PRIVATE;
  `java.lang.Thread$UncaughtExceptionHandler` `org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder.b` @AccessFlag PRIVATE;
  `java.lang.String` `org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder.c` @AccessFlag PRIVATE;
  `java.lang.Integer` `org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder.d` @AccessFlag PRIVATE;
  `java.lang.Boolean` `org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder` v0 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/BasicThreadFactory$Builder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `java.util.concurrent.ThreadFactory` `a`(`org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder` v0 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/BasicThreadFactory$Builder;.a:(Lorg/apache/commons/lang3/concurrent/BasicThreadFactory$Builder;)Ljava/util/concurrent/ThreadFactory;` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `java.lang.String` `b`(`org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder` v0 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/BasicThreadFactory$Builder;.b:(Lorg/apache/commons/lang3/concurrent/BasicThreadFactory$Builder;)Ljava/lang/String;` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `java.lang.Integer` `c`(`org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder` v0 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/BasicThreadFactory$Builder;.c:(Lorg/apache/commons/lang3/concurrent/BasicThreadFactory$Builder;)Ljava/lang/Integer;` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `java.lang.Boolean` `d`(`org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder` v0 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/BasicThreadFactory$Builder;.d:(Lorg/apache/commons/lang3/concurrent/BasicThreadFactory$Builder;)Ljava/lang/Boolean;` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `java.lang.Thread$UncaughtExceptionHandler` `e`(`org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder` v0 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/BasicThreadFactory$Builder;.e:(Lorg/apache/commons/lang3/concurrent/BasicThreadFactory$Builder;)Ljava/lang/Thread$UncaughtExceptionHandler;` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `java.lang.Object` `build`(`org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder` v1 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/BasicThreadFactory$Builder;.build:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `org.apache.commons.lang3.concurrent.BasicThreadFactory` `build`(`org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder` v2 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/BasicThreadFactory$Builder;.build:()Lorg/apache/commons/lang3/concurrent/BasicThreadFactory;` @AccessFlag PUBLIC {

  # return;
}
procedure `org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder` `daemon`(`org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder` v0 @kind this, `boolean` v1 ) @signature `Lorg/apache/commons/lang3/concurrent/BasicThreadFactory$Builder;.daemon:(Z)Lorg/apache/commons/lang3/concurrent/BasicThreadFactory$Builder;` @AccessFlag PUBLIC {

  # return;
}
procedure `org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder` `namingPattern`(`org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/BasicThreadFactory$Builder;.namingPattern:(Ljava/lang/String;)Lorg/apache/commons/lang3/concurrent/BasicThreadFactory$Builder;` @AccessFlag PUBLIC {

  # return;
}
procedure `org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder` `priority`(`org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder` v0 @kind this, `int` v1 ) @signature `Lorg/apache/commons/lang3/concurrent/BasicThreadFactory$Builder;.priority:(I)Lorg/apache/commons/lang3/concurrent/BasicThreadFactory$Builder;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `reset`(`org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder` v1 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/BasicThreadFactory$Builder;.reset:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder` `uncaughtExceptionHandler`(`org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder` v1 @kind this, `java.lang.Thread$UncaughtExceptionHandler` v2 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/BasicThreadFactory$Builder;.uncaughtExceptionHandler:(Ljava/lang/Thread$UncaughtExceptionHandler;)Lorg/apache/commons/lang3/concurrent/BasicThreadFactory$Builder;` @AccessFlag PUBLIC {

  # return;
}
procedure `org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder` `wrappedFactory`(`org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder` v1 @kind this, `java.util.concurrent.ThreadFactory` v2 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/BasicThreadFactory$Builder;.wrappedFactory:(Ljava/util/concurrent/ThreadFactory;)Lorg/apache/commons/lang3/concurrent/BasicThreadFactory$Builder;` @AccessFlag PUBLIC {

  # return;
}
