record `org.apache.commons.lang3.reflect.TypeUtils` @kind class @AccessFlag PUBLIC {
}
procedure `void` `<init>`(`org.apache.commons.lang3.reflect.TypeUtils` v0 @kind this) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `java.lang.reflect.Type` `a`(`java.lang.Class` v7 @kind object, `java.lang.Class` v8 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.a:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.lang.Class` `b`(`java.lang.reflect.ParameterizedType` v3 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.b:(Ljava/lang/reflect/ParameterizedType;)Ljava/lang/Class;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.util.Map` `c`(`java.lang.Class` v1 @kind object, `java.lang.Class` v2 @kind object, `java.util.Map` v3 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.c:(Ljava/lang/Class;Ljava/lang/Class;Ljava/util/Map;)Ljava/util/Map;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.util.Map` `d`(`java.lang.reflect.ParameterizedType` v6 @kind object, `java.lang.Class` v7 @kind object, `java.util.Map` v8 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.d:(Ljava/lang/reflect/ParameterizedType;Ljava/lang/Class;Ljava/util/Map;)Ljava/util/Map;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.util.Map` `determineTypeArguments`(`java.lang.Class` v3 @kind object, `java.lang.reflect.ParameterizedType` v4 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.determineTypeArguments:(Ljava/lang/Class;Ljava/lang/reflect/ParameterizedType;)Ljava/util/Map;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.util.Map` `e`(`java.lang.reflect.Type` v5 @kind object, `java.lang.Class` v6 @kind object, `java.util.Map` v7 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.e:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/util/Map;)Ljava/util/Map;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `boolean` `f`(`java.lang.reflect.Type` v5 @kind object, `java.lang.Class` v6 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.f:(Ljava/lang/reflect/Type;Ljava/lang/Class;)Z` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `boolean` `g`(`java.lang.reflect.Type` v4 @kind object, `java.lang.reflect.GenericArrayType` v5 @kind object, `java.util.Map` v6 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.g:(Ljava/lang/reflect/Type;Ljava/lang/reflect/GenericArrayType;Ljava/util/Map;)Z` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.lang.reflect.Type` `getArrayComponentType`(`java.lang.reflect.Type` v2 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.getArrayComponentType:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.reflect.Type`[] `getImplicitBounds`(`java.lang.reflect.TypeVariable` v2 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.getImplicitBounds:(Ljava/lang/reflect/TypeVariable;)[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.reflect.Type`[] `getImplicitLowerBounds`(`java.lang.reflect.WildcardType` v2 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.getImplicitLowerBounds:(Ljava/lang/reflect/WildcardType;)[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.reflect.Type`[] `getImplicitUpperBounds`(`java.lang.reflect.WildcardType` v2 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.getImplicitUpperBounds:(Ljava/lang/reflect/WildcardType;)[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.Class` `getRawType`(`java.lang.reflect.Type` v3 @kind object, `java.lang.reflect.Type` v4 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.getRawType:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Ljava/lang/Class;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.util.Map` `getTypeArguments`(`java.lang.reflect.ParameterizedType` v2 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.getTypeArguments:(Ljava/lang/reflect/ParameterizedType;)Ljava/util/Map;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.util.Map` `getTypeArguments`(`java.lang.reflect.Type` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.getTypeArguments:(Ljava/lang/reflect/Type;Ljava/lang/Class;)Ljava/util/Map;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `h`(`java.lang.reflect.Type` v5 @kind object, `java.lang.reflect.ParameterizedType` v6 @kind object, `java.util.Map` v7 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.h:(Ljava/lang/reflect/Type;Ljava/lang/reflect/ParameterizedType;Ljava/util/Map;)Z` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `boolean` `i`(`java.lang.reflect.Type` v1 @kind object, `java.lang.reflect.Type` v2 @kind object, `java.util.Map` v3 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.i:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/util/Map;)Z` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `boolean` `isArrayType`(`java.lang.reflect.Type` v1 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.isArrayType:(Ljava/lang/reflect/Type;)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `isAssignable`(`java.lang.reflect.Type` v1 @kind object, `java.lang.reflect.Type` v2 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.isAssignable:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `isInstance`(`java.lang.Object` v1 @kind object, `java.lang.reflect.Type` v2 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.isInstance:(Ljava/lang/Object;Ljava/lang/reflect/Type;)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `j`(`java.lang.reflect.Type` v6 @kind object, `java.lang.reflect.TypeVariable` v7 @kind object, `java.util.Map` v8 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.j:(Ljava/lang/reflect/Type;Ljava/lang/reflect/TypeVariable;Ljava/util/Map;)Z` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `boolean` `k`(`java.lang.reflect.Type` v10 @kind object, `java.lang.reflect.WildcardType` v11 @kind object, `java.util.Map` v12 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.k:(Ljava/lang/reflect/Type;Ljava/lang/reflect/WildcardType;Ljava/util/Map;)Z` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `void` `l`(`java.lang.Class` v5 @kind object, `java.lang.reflect.ParameterizedType` v6 @kind object, `java.util.Map` v7 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.l:(Ljava/lang/Class;Ljava/lang/reflect/ParameterizedType;Ljava/util/Map;)V` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.lang.reflect.Type` `m`(`java.lang.reflect.Type` v2 @kind object, `java.util.Map` v3 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.m:(Ljava/lang/reflect/Type;Ljava/util/Map;)Ljava/lang/reflect/Type;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.lang.reflect.Type`[] `normalizeUpperBounds`(`java.lang.reflect.Type`[] v9 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.normalizeUpperBounds:([Ljava/lang/reflect/Type;)[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `typesSatisfyVariables`(`java.util.Map` v7 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.typesSatisfyVariables:(Ljava/util/Map;)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
