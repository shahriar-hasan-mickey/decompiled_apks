record `org.apache.commons.lang3.Range` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.Serializable` @kind interface {
  `java.util.Comparator` `org.apache.commons.lang3.Range.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `org.apache.commons.lang3.Range.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `org.apache.commons.lang3.Range.c` @AccessFlag PRIVATE_FINAL;
  `int` `org.apache.commons.lang3.Range.d` @AccessFlag PRIVATE_TRANSIENT;
  `java.lang.String` `org.apache.commons.lang3.Range.e` @AccessFlag PRIVATE_TRANSIENT;
}
global `long` `@@org.apache.commons.lang3.Range.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.apache.commons.lang3.Range` v2 @kind this, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object, `java.util.Comparator` v5 @kind object) @signature `Lorg/apache/commons/lang3/Range;.<init>:(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/Comparator;)V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `org.apache.commons.lang3.Range` `between`(`java.lang.Comparable` v1 @kind object, `java.lang.Comparable` v2 @kind object) @signature `Lorg/apache/commons/lang3/Range;.between:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Lorg/apache/commons/lang3/Range;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `org.apache.commons.lang3.Range` `between`(`java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object, `java.util.Comparator` v3 @kind object) @signature `Lorg/apache/commons/lang3/Range;.between:(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/Comparator;)Lorg/apache/commons/lang3/Range;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `org.apache.commons.lang3.Range` `is`(`java.lang.Comparable` v1 @kind object) @signature `Lorg/apache/commons/lang3/Range;.is:(Ljava/lang/Comparable;)Lorg/apache/commons/lang3/Range;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `org.apache.commons.lang3.Range` `is`(`java.lang.Object` v0 @kind object, `java.util.Comparator` v1 @kind object) @signature `Lorg/apache/commons/lang3/Range;.is:(Ljava/lang/Object;Ljava/util/Comparator;)Lorg/apache/commons/lang3/Range;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `contains`(`org.apache.commons.lang3.Range` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lorg/apache/commons/lang3/Range;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `containsRange`(`org.apache.commons.lang3.Range` v2 @kind this, `org.apache.commons.lang3.Range` v3 @kind object) @signature `Lorg/apache/commons/lang3/Range;.containsRange:(Lorg/apache/commons/lang3/Range;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `elementCompareTo`(`org.apache.commons.lang3.Range` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lorg/apache/commons/lang3/Range;.elementCompareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `equals`(`org.apache.commons.lang3.Range` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lorg/apache/commons/lang3/Range;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.Comparator` `getComparator`(`org.apache.commons.lang3.Range` v1 @kind this) @signature `Lorg/apache/commons/lang3/Range;.getComparator:()Ljava/util/Comparator;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `getMaximum`(`org.apache.commons.lang3.Range` v1 @kind this) @signature `Lorg/apache/commons/lang3/Range;.getMaximum:()Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `getMinimum`(`org.apache.commons.lang3.Range` v1 @kind this) @signature `Lorg/apache/commons/lang3/Range;.getMinimum:()Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `hashCode`(`org.apache.commons.lang3.Range` v2 @kind this) @signature `Lorg/apache/commons/lang3/Range;.hashCode:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isAfter`(`org.apache.commons.lang3.Range` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lorg/apache/commons/lang3/Range;.isAfter:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isAfterRange`(`org.apache.commons.lang3.Range` v0 @kind this, `org.apache.commons.lang3.Range` v1 @kind object) @signature `Lorg/apache/commons/lang3/Range;.isAfterRange:(Lorg/apache/commons/lang3/Range;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isBefore`(`org.apache.commons.lang3.Range` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lorg/apache/commons/lang3/Range;.isBefore:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isBeforeRange`(`org.apache.commons.lang3.Range` v0 @kind this, `org.apache.commons.lang3.Range` v1 @kind object) @signature `Lorg/apache/commons/lang3/Range;.isBeforeRange:(Lorg/apache/commons/lang3/Range;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isEndedBy`(`org.apache.commons.lang3.Range` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lorg/apache/commons/lang3/Range;.isEndedBy:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isNaturalOrdering`(`org.apache.commons.lang3.Range` v2 @kind this) @signature `Lorg/apache/commons/lang3/Range;.isNaturalOrdering:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isOverlappedBy`(`org.apache.commons.lang3.Range` v2 @kind this, `org.apache.commons.lang3.Range` v3 @kind object) @signature `Lorg/apache/commons/lang3/Range;.isOverlappedBy:(Lorg/apache/commons/lang3/Range;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isStartedBy`(`org.apache.commons.lang3.Range` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lorg/apache/commons/lang3/Range;.isStartedBy:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `toString`(`org.apache.commons.lang3.Range` v2 @kind this) @signature `Lorg/apache/commons/lang3/Range;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `toString`(`org.apache.commons.lang3.Range` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lorg/apache/commons/lang3/Range;.toString:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
