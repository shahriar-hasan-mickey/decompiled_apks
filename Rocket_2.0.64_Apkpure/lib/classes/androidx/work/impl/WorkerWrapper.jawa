record `androidx.work.impl.WorkerWrapper` @kind class @AccessFlag PUBLIC extends `java.lang.Runnable` @kind interface {
  `android.content.Context` `androidx.work.impl.WorkerWrapper.mAppContext` @AccessFlag ;
  `androidx.work.Configuration` `androidx.work.impl.WorkerWrapper.mConfiguration` @AccessFlag PRIVATE;
  `androidx.work.impl.model.DependencyDao` `androidx.work.impl.WorkerWrapper.mDependencyDao` @AccessFlag PRIVATE;
  `androidx.work.impl.foreground.ForegroundProcessor` `androidx.work.impl.WorkerWrapper.mForegroundProcessor` @AccessFlag PRIVATE;
  `androidx.work.impl.utils.futures.SettableFuture` `androidx.work.impl.WorkerWrapper.mFuture` @AccessFlag ;
  `com.google.common.util.concurrent.ListenableFuture` `androidx.work.impl.WorkerWrapper.mInnerFuture` @AccessFlag ;
  `boolean` `androidx.work.impl.WorkerWrapper.mInterrupted` @AccessFlag PRIVATE_VOLATILE;
  `androidx.work.ListenableWorker$Result` `androidx.work.impl.WorkerWrapper.mResult` @AccessFlag ;
  `androidx.work.WorkerParameters$RuntimeExtras` `androidx.work.impl.WorkerWrapper.mRuntimeExtras` @AccessFlag PRIVATE;
  `java.util.List` `androidx.work.impl.WorkerWrapper.mSchedulers` @AccessFlag PRIVATE;
  `java.util.List` `androidx.work.impl.WorkerWrapper.mTags` @AccessFlag PRIVATE;
  `androidx.work.impl.WorkDatabase` `androidx.work.impl.WorkerWrapper.mWorkDatabase` @AccessFlag PRIVATE;
  `java.lang.String` `androidx.work.impl.WorkerWrapper.mWorkDescription` @AccessFlag PRIVATE;
  `androidx.work.impl.model.WorkSpec` `androidx.work.impl.WorkerWrapper.mWorkSpec` @AccessFlag ;
  `androidx.work.impl.model.WorkSpecDao` `androidx.work.impl.WorkerWrapper.mWorkSpecDao` @AccessFlag PRIVATE;
  `java.lang.String` `androidx.work.impl.WorkerWrapper.mWorkSpecId` @AccessFlag PRIVATE;
  `androidx.work.impl.model.WorkTagDao` `androidx.work.impl.WorkerWrapper.mWorkTagDao` @AccessFlag PRIVATE;
  `androidx.work.impl.utils.taskexecutor.TaskExecutor` `androidx.work.impl.WorkerWrapper.mWorkTaskExecutor` @AccessFlag ;
  `androidx.work.ListenableWorker` `androidx.work.impl.WorkerWrapper.mWorker` @AccessFlag ;
}
global `java.lang.String` `@@androidx.work.impl.WorkerWrapper.TAG` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Landroidx/work/impl/WorkerWrapper;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`androidx.work.impl.WorkerWrapper` v1 @kind this, `androidx.work.impl.WorkerWrapper$Builder` v2 @kind object) @signature `Landroidx/work/impl/WorkerWrapper;.<init>:(Landroidx/work/impl/WorkerWrapper$Builder;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `java.lang.String` `createWorkDescription`(`androidx.work.impl.WorkerWrapper` v4 @kind this, `java.util.List` v5 @kind object) @signature `Landroidx/work/impl/WorkerWrapper;.createWorkDescription:(Ljava/util/List;)Ljava/lang/String;` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `handleResult`(`androidx.work.impl.WorkerWrapper` v4 @kind this, `androidx.work.ListenableWorker$Result` v5 @kind object) @signature `Landroidx/work/impl/WorkerWrapper;.handleResult:(Landroidx/work/ListenableWorker$Result;)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `iterativelyFailWorkAndDependents`(`androidx.work.impl.WorkerWrapper` v5 @kind this, `java.lang.String` v6 @kind object) @signature `Landroidx/work/impl/WorkerWrapper;.iterativelyFailWorkAndDependents:(Ljava/lang/String;)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `rescheduleAndResolve`(`androidx.work.impl.WorkerWrapper` v6 @kind this) @signature `Landroidx/work/impl/WorkerWrapper;.rescheduleAndResolve:()V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `resetPeriodicAndResolve`(`androidx.work.impl.WorkerWrapper` v5 @kind this) @signature `Landroidx/work/impl/WorkerWrapper;.resetPeriodicAndResolve:()V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `resolve`(`androidx.work.impl.WorkerWrapper` v5 @kind this, `boolean` v6 ) @signature `Landroidx/work/impl/WorkerWrapper;.resolve:(Z)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `resolveIncorrectStatus`(`androidx.work.impl.WorkerWrapper` v7 @kind this) @signature `Landroidx/work/impl/WorkerWrapper;.resolveIncorrectStatus:()V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `runWorker`(`androidx.work.impl.WorkerWrapper` v16 @kind this) @signature `Landroidx/work/impl/WorkerWrapper;.runWorker:()V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `setSucceededAndResolve`(`androidx.work.impl.WorkerWrapper` v10 @kind this) @signature `Landroidx/work/impl/WorkerWrapper;.setSucceededAndResolve:()V` @AccessFlag PRIVATE {

  # return;
}
procedure `boolean` `tryCheckForInterruptionAndResolve`(`androidx.work.impl.WorkerWrapper` v6 @kind this) @signature `Landroidx/work/impl/WorkerWrapper;.tryCheckForInterruptionAndResolve:()Z` @AccessFlag PRIVATE {

  # return;
}
procedure `boolean` `trySetRunning`(`androidx.work.impl.WorkerWrapper` v6 @kind this) @signature `Landroidx/work/impl/WorkerWrapper;.trySetRunning:()Z` @AccessFlag PRIVATE {

  # return;
}
procedure `com.google.common.util.concurrent.ListenableFuture` `getFuture`(`androidx.work.impl.WorkerWrapper` v1 @kind this) @signature `Landroidx/work/impl/WorkerWrapper;.getFuture:()Lcom/google/common/util/concurrent/ListenableFuture;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `interrupt`(`androidx.work.impl.WorkerWrapper` v4 @kind this) @signature `Landroidx/work/impl/WorkerWrapper;.interrupt:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `onWorkFinished`(`androidx.work.impl.WorkerWrapper` v3 @kind this) @signature `Landroidx/work/impl/WorkerWrapper;.onWorkFinished:()V` @AccessFlag  {

  # return;
}
procedure `void` `run`(`androidx.work.impl.WorkerWrapper` v2 @kind this) @signature `Landroidx/work/impl/WorkerWrapper;.run:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `setFailedAndResolve`(`androidx.work.impl.WorkerWrapper` v4 @kind this) @signature `Landroidx/work/impl/WorkerWrapper;.setFailedAndResolve:()V` @AccessFlag  {

  # return;
}
