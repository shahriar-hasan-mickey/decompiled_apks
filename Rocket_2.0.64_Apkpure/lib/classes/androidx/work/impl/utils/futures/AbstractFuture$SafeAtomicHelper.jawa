record `androidx.work.impl.utils.futures.AbstractFuture$SafeAtomicHelper` @kind class @AccessFlag FINAL extends `androidx.work.impl.utils.futures.AbstractFuture$AtomicHelper` @kind class {
  `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `androidx.work.impl.utils.futures.AbstractFuture$SafeAtomicHelper.listenersUpdater` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `androidx.work.impl.utils.futures.AbstractFuture$SafeAtomicHelper.valueUpdater` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `androidx.work.impl.utils.futures.AbstractFuture$SafeAtomicHelper.waiterNextUpdater` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `androidx.work.impl.utils.futures.AbstractFuture$SafeAtomicHelper.waiterThreadUpdater` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `androidx.work.impl.utils.futures.AbstractFuture$SafeAtomicHelper.waitersUpdater` @AccessFlag FINAL;
}
procedure `void` `<init>`(`androidx.work.impl.utils.futures.AbstractFuture$SafeAtomicHelper` v1 @kind this, `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` v2 @kind object, `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` v3 @kind object, `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` v4 @kind object, `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` v5 @kind object, `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` v6 @kind object) @signature `Landroidx/work/impl/utils/futures/AbstractFuture$SafeAtomicHelper;.<init>:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `boolean` `casListeners`(`androidx.work.impl.utils.futures.AbstractFuture$SafeAtomicHelper` v1 @kind this, `androidx.work.impl.utils.futures.AbstractFuture` v2 @kind object, `androidx.work.impl.utils.futures.AbstractFuture$Listener` v3 @kind object, `androidx.work.impl.utils.futures.AbstractFuture$Listener` v4 @kind object) @signature `Landroidx/work/impl/utils/futures/AbstractFuture$SafeAtomicHelper;.casListeners:(Landroidx/work/impl/utils/futures/AbstractFuture;Landroidx/work/impl/utils/futures/AbstractFuture$Listener;Landroidx/work/impl/utils/futures/AbstractFuture$Listener;)Z` @AccessFlag  {

  # return;
}
procedure `boolean` `casValue`(`androidx.work.impl.utils.futures.AbstractFuture$SafeAtomicHelper` v1 @kind this, `androidx.work.impl.utils.futures.AbstractFuture` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Landroidx/work/impl/utils/futures/AbstractFuture$SafeAtomicHelper;.casValue:(Landroidx/work/impl/utils/futures/AbstractFuture;Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag  {

  # return;
}
procedure `boolean` `casWaiters`(`androidx.work.impl.utils.futures.AbstractFuture$SafeAtomicHelper` v1 @kind this, `androidx.work.impl.utils.futures.AbstractFuture` v2 @kind object, `androidx.work.impl.utils.futures.AbstractFuture$Waiter` v3 @kind object, `androidx.work.impl.utils.futures.AbstractFuture$Waiter` v4 @kind object) @signature `Landroidx/work/impl/utils/futures/AbstractFuture$SafeAtomicHelper;.casWaiters:(Landroidx/work/impl/utils/futures/AbstractFuture;Landroidx/work/impl/utils/futures/AbstractFuture$Waiter;Landroidx/work/impl/utils/futures/AbstractFuture$Waiter;)Z` @AccessFlag  {

  # return;
}
procedure `void` `putNext`(`androidx.work.impl.utils.futures.AbstractFuture$SafeAtomicHelper` v1 @kind this, `androidx.work.impl.utils.futures.AbstractFuture$Waiter` v2 @kind object, `androidx.work.impl.utils.futures.AbstractFuture$Waiter` v3 @kind object) @signature `Landroidx/work/impl/utils/futures/AbstractFuture$SafeAtomicHelper;.putNext:(Landroidx/work/impl/utils/futures/AbstractFuture$Waiter;Landroidx/work/impl/utils/futures/AbstractFuture$Waiter;)V` @AccessFlag  {

  # return;
}
procedure `void` `putThread`(`androidx.work.impl.utils.futures.AbstractFuture$SafeAtomicHelper` v1 @kind this, `androidx.work.impl.utils.futures.AbstractFuture$Waiter` v2 @kind object, `java.lang.Thread` v3 @kind object) @signature `Landroidx/work/impl/utils/futures/AbstractFuture$SafeAtomicHelper;.putThread:(Landroidx/work/impl/utils/futures/AbstractFuture$Waiter;Ljava/lang/Thread;)V` @AccessFlag  {

  # return;
}
