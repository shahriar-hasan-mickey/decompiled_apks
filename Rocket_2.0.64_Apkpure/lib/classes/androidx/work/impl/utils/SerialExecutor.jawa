record `androidx.work.impl.utils.SerialExecutor` @kind class @AccessFlag PUBLIC extends `java.util.concurrent.Executor` @kind interface {
  `java.lang.Runnable` `androidx.work.impl.utils.SerialExecutor.mActive` @AccessFlag PRIVATE_VOLATILE;
  `java.util.concurrent.Executor` `androidx.work.impl.utils.SerialExecutor.mExecutor` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `androidx.work.impl.utils.SerialExecutor.mLock` @AccessFlag PRIVATE_FINAL;
  `java.util.ArrayDeque` `androidx.work.impl.utils.SerialExecutor.mTasks` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`androidx.work.impl.utils.SerialExecutor` v0 @kind this, `java.util.concurrent.Executor` v1 @kind object) @signature `Landroidx/work/impl/utils/SerialExecutor;.<init>:(Ljava/util/concurrent/Executor;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `execute`(`androidx.work.impl.utils.SerialExecutor` v3 @kind this, `java.lang.Runnable` v4 @kind object) @signature `Landroidx/work/impl/utils/SerialExecutor;.execute:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.concurrent.Executor` `getDelegatedExecutor`(`androidx.work.impl.utils.SerialExecutor` v1 @kind this) @signature `Landroidx/work/impl/utils/SerialExecutor;.getDelegatedExecutor:()Ljava/util/concurrent/Executor;` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `hasPendingTasks`(`androidx.work.impl.utils.SerialExecutor` v2 @kind this) @signature `Landroidx/work/impl/utils/SerialExecutor;.hasPendingTasks:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `scheduleNext`(`androidx.work.impl.utils.SerialExecutor` v3 @kind this) @signature `Landroidx/work/impl/utils/SerialExecutor;.scheduleNext:()V` @AccessFlag  {

  # return;
}
