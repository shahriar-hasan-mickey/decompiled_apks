record `androidx.room.rxjava3.RxRoom` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.lang.Object` `@@androidx.room.rxjava3.RxRoom.NOTHING` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Landroidx/room/rxjava3/RxRoom;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`androidx.room.rxjava3.RxRoom` v0 @kind this) @signature `Landroidx/room/rxjava3/RxRoom;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `void` `a`(`androidx.room.RoomDatabase` v0 @kind object, `androidx.room.InvalidationTracker$Observer` v1 @kind object) @signature `Landroidx/room/rxjava3/RxRoom;.a:(Landroidx/room/RoomDatabase;Landroidx/room/InvalidationTracker$Observer;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {

  # return;
}
procedure `io.reactivex.rxjava3.core.MaybeSource` `b`(`io.reactivex.rxjava3.core.Maybe` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Landroidx/room/rxjava3/RxRoom;.b:(Lio/reactivex/rxjava3/core/Maybe;Ljava/lang/Object;)Lio/reactivex/rxjava3/core/MaybeSource;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {

  # return;
}
procedure `void` `c`(`androidx.room.RoomDatabase` v0 @kind object, `androidx.room.InvalidationTracker$Observer` v1 @kind object) @signature `Landroidx/room/rxjava3/RxRoom;.c:(Landroidx/room/RoomDatabase;Landroidx/room/InvalidationTracker$Observer;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {

  # return;
}
procedure `io.reactivex.rxjava3.core.Flowable` `createFlowable`(`androidx.room.RoomDatabase` v0 @kind object, `boolean` v1 , `java.lang.String`[] v2 @kind object, `java.util.concurrent.Callable` v3 @kind object) @signature `Landroidx/room/rxjava3/RxRoom;.createFlowable:(Landroidx/room/RoomDatabase;Z[Ljava/lang/String;Ljava/util/concurrent/Callable;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `io.reactivex.rxjava3.core.Flowable` `createFlowable`(`androidx.room.RoomDatabase` v1 @kind object, `java.lang.String`[] v2 @kind object) @signature `Landroidx/room/rxjava3/RxRoom;.createFlowable:(Landroidx/room/RoomDatabase;[Ljava/lang/String;)Lio/reactivex/rxjava3/core/Flowable;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `io.reactivex.rxjava3.core.Observable` `createObservable`(`androidx.room.RoomDatabase` v0 @kind object, `boolean` v1 , `java.lang.String`[] v2 @kind object, `java.util.concurrent.Callable` v3 @kind object) @signature `Landroidx/room/rxjava3/RxRoom;.createObservable:(Landroidx/room/RoomDatabase;Z[Ljava/lang/String;Ljava/util/concurrent/Callable;)Lio/reactivex/rxjava3/core/Observable;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `io.reactivex.rxjava3.core.Observable` `createObservable`(`androidx.room.RoomDatabase` v1 @kind object, `java.lang.String`[] v2 @kind object) @signature `Landroidx/room/rxjava3/RxRoom;.createObservable:(Landroidx/room/RoomDatabase;[Ljava/lang/String;)Lio/reactivex/rxjava3/core/Observable;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `io.reactivex.rxjava3.core.Single` `createSingle`(`java.util.concurrent.Callable` v1 @kind object) @signature `Landroidx/room/rxjava3/RxRoom;.createSingle:(Ljava/util/concurrent/Callable;)Lio/reactivex/rxjava3/core/Single;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `d`(`java.util.concurrent.Callable` v0 @kind object, `io.reactivex.rxjava3.core.SingleEmitter` v1 @kind object) @signature `Landroidx/room/rxjava3/RxRoom;.d:(Ljava/util/concurrent/Callable;Lio/reactivex/rxjava3/core/SingleEmitter;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {

  # return;
}
procedure `void` `e`(`java.lang.String`[] v0 @kind object, `androidx.room.RoomDatabase` v1 @kind object, `io.reactivex.rxjava3.core.ObservableEmitter` v2 @kind object) @signature `Landroidx/room/rxjava3/RxRoom;.e:([Ljava/lang/String;Landroidx/room/RoomDatabase;Lio/reactivex/rxjava3/core/ObservableEmitter;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {

  # return;
}
procedure `io.reactivex.rxjava3.core.MaybeSource` `f`(`io.reactivex.rxjava3.core.Maybe` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Landroidx/room/rxjava3/RxRoom;.f:(Lio/reactivex/rxjava3/core/Maybe;Ljava/lang/Object;)Lio/reactivex/rxjava3/core/MaybeSource;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {

  # return;
}
procedure `void` `g`(`java.lang.String`[] v0 @kind object, `androidx.room.RoomDatabase` v1 @kind object, `io.reactivex.rxjava3.core.FlowableEmitter` v2 @kind object) @signature `Landroidx/room/rxjava3/RxRoom;.g:([Ljava/lang/String;Landroidx/room/RoomDatabase;Lio/reactivex/rxjava3/core/FlowableEmitter;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {

  # return;
}
procedure `java.util.concurrent.Executor` `getExecutor`(`androidx.room.RoomDatabase` v0 @kind object, `boolean` v1 ) @signature `Landroidx/room/rxjava3/RxRoom;.getExecutor:(Landroidx/room/RoomDatabase;Z)Ljava/util/concurrent/Executor;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `void` `lambda$createFlowable$0`(`androidx.room.RoomDatabase` v0 @kind object, `androidx.room.InvalidationTracker$Observer` v1 @kind object) @signature `Landroidx/room/rxjava3/RxRoom;.lambda$createFlowable$0:(Landroidx/room/RoomDatabase;Landroidx/room/InvalidationTracker$Observer;)V` @AccessFlag PRIVATE_STATIC_SYNTHETIC {

  # return;
}
procedure `void` `lambda$createFlowable$1`(`java.lang.String`[] v1 @kind object, `androidx.room.RoomDatabase` v2 @kind object, `io.reactivex.rxjava3.core.FlowableEmitter` v3 @kind object) @signature `Landroidx/room/rxjava3/RxRoom;.lambda$createFlowable$1:([Ljava/lang/String;Landroidx/room/RoomDatabase;Lio/reactivex/rxjava3/core/FlowableEmitter;)V` @AccessFlag PRIVATE_STATIC_SYNTHETIC {

  # return;
}
procedure `io.reactivex.rxjava3.core.MaybeSource` `lambda$createFlowable$2`(`io.reactivex.rxjava3.core.Maybe` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Landroidx/room/rxjava3/RxRoom;.lambda$createFlowable$2:(Lio/reactivex/rxjava3/core/Maybe;Ljava/lang/Object;)Lio/reactivex/rxjava3/core/MaybeSource;` @AccessFlag PRIVATE_STATIC_SYNTHETIC {

  # return;
}
procedure `void` `lambda$createObservable$3`(`androidx.room.RoomDatabase` v0 @kind object, `androidx.room.InvalidationTracker$Observer` v1 @kind object) @signature `Landroidx/room/rxjava3/RxRoom;.lambda$createObservable$3:(Landroidx/room/RoomDatabase;Landroidx/room/InvalidationTracker$Observer;)V` @AccessFlag PRIVATE_STATIC_SYNTHETIC {

  # return;
}
procedure `void` `lambda$createObservable$4`(`java.lang.String`[] v1 @kind object, `androidx.room.RoomDatabase` v2 @kind object, `io.reactivex.rxjava3.core.ObservableEmitter` v3 @kind object) @signature `Landroidx/room/rxjava3/RxRoom;.lambda$createObservable$4:([Ljava/lang/String;Landroidx/room/RoomDatabase;Lio/reactivex/rxjava3/core/ObservableEmitter;)V` @AccessFlag PRIVATE_STATIC_SYNTHETIC {

  # return;
}
procedure `io.reactivex.rxjava3.core.MaybeSource` `lambda$createObservable$5`(`io.reactivex.rxjava3.core.Maybe` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Landroidx/room/rxjava3/RxRoom;.lambda$createObservable$5:(Lio/reactivex/rxjava3/core/Maybe;Ljava/lang/Object;)Lio/reactivex/rxjava3/core/MaybeSource;` @AccessFlag PRIVATE_STATIC_SYNTHETIC {

  # return;
}
procedure `void` `lambda$createSingle$6`(`java.util.concurrent.Callable` v0 @kind object, `io.reactivex.rxjava3.core.SingleEmitter` v1 @kind object) @signature `Landroidx/room/rxjava3/RxRoom;.lambda$createSingle$6:(Ljava/util/concurrent/Callable;Lio/reactivex/rxjava3/core/SingleEmitter;)V` @AccessFlag PRIVATE_STATIC_SYNTHETIC {

  # return;
}
