record `androidx.core.util.Preconditions` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`androidx.core.util.Preconditions` v0 @kind this) @signature `Landroidx/core/util/Preconditions;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `void` `checkArgument`(`boolean` v0 ) @signature `Landroidx/core/util/Preconditions;.checkArgument:(Z)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `checkArgument`(`boolean` v0 , `java.lang.Object` v1 @kind object) @signature `Landroidx/core/util/Preconditions;.checkArgument:(ZLjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `checkArgument`(`boolean` v0 , `java.lang.String` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Landroidx/core/util/Preconditions;.checkArgument:(ZLjava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `float` `checkArgumentFinite`(`float` v1 , `java.lang.String` v2 @kind object) @signature `Landroidx/core/util/Preconditions;.checkArgumentFinite:(FLjava/lang/String;)F` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `double` `checkArgumentInRange`(`double` v5 , `double` v7 , `double` v9 , `java.lang.String` v11 @kind object) @signature `Landroidx/core/util/Preconditions;.checkArgumentInRange:(DDDLjava/lang/String;)D` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `float` `checkArgumentInRange`(`float` v5 , `float` v6 , `float` v7 , `java.lang.String` v8 @kind object) @signature `Landroidx/core/util/Preconditions;.checkArgumentInRange:(FFFLjava/lang/String;)F` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `checkArgumentInRange`(`int` v5 , `int` v6 , `int` v7 , `java.lang.String` v8 @kind object) @signature `Landroidx/core/util/Preconditions;.checkArgumentInRange:(IIILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `long` `checkArgumentInRange`(`long` v5 , `long` v7 , `long` v9 , `java.lang.String` v11 @kind object) @signature `Landroidx/core/util/Preconditions;.checkArgumentInRange:(JJJLjava/lang/String;)J` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `checkArgumentNonnegative`(`int` v0 ) @signature `Landroidx/core/util/Preconditions;.checkArgumentNonnegative:(I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `checkArgumentNonnegative`(`int` v0 , `java.lang.String` v1 @kind object) @signature `Landroidx/core/util/Preconditions;.checkArgumentNonnegative:(ILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `checkFlagsArgument`(`int` v3 , `int` v4 ) @signature `Landroidx/core/util/Preconditions;.checkFlagsArgument:(II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.Object` `checkNotNull`(`java.lang.Object` v0 @kind object) @signature `Landroidx/core/util/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.Object` `checkNotNull`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Landroidx/core/util/Preconditions;.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `checkState`(`boolean` v1 ) @signature `Landroidx/core/util/Preconditions;.checkState:(Z)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `checkState`(`boolean` v0 , `java.lang.String` v1 @kind object) @signature `Landroidx/core/util/Preconditions;.checkState:(ZLjava/lang/String;)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.CharSequence` `checkStringNotEmpty`(`java.lang.CharSequence` v1 @kind object) @signature `Landroidx/core/util/Preconditions;.checkStringNotEmpty:(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.CharSequence` `checkStringNotEmpty`(`java.lang.CharSequence` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Landroidx/core/util/Preconditions;.checkStringNotEmpty:(Ljava/lang/CharSequence;Ljava/lang/Object;)Ljava/lang/CharSequence;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.CharSequence` `checkStringNotEmpty`(`java.lang.CharSequence` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.Object`[] v3 @kind object) @signature `Landroidx/core/util/Preconditions;.checkStringNotEmpty:(Ljava/lang/CharSequence;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/CharSequence;` @AccessFlag PUBLIC_STATIC {

  # return;
}
