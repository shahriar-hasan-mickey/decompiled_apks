record `lecho.lib.hellocharts.f.h` @kind class @AccessFlag PUBLIC extends `lecho.lib.hellocharts.f.a` @kind class {
  `float` `lecho.lib.hellocharts.f.h.k` @AccessFlag PRIVATE;
  `float` `lecho.lib.hellocharts.f.h.l` @AccessFlag PRIVATE;
  `java.util.List` `lecho.lib.hellocharts.f.h.m` @AccessFlag PRIVATE;
  `boolean` `lecho.lib.hellocharts.f.h.n` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`lecho.lib.hellocharts.f.h` v1 @kind this) @signature `Llecho/lib/hellocharts/f/h;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3ddb4c.  call `<init>`(v1) @signature `Llecho/lib/hellocharts/f/a;.<init>:()V` @kind direct;
  #L3ddb52.  v0:= 0.75F;
  #L3ddb56.  v1.`lecho.lib.hellocharts.f.h.k` @type ^`float` := v0;
  #L3ddb5a.  v0:= 0I;
  #L3ddb5c.  v1.`lecho.lib.hellocharts.f.h.l` @type ^`float` := v0;
  #L3ddb60.  v0:= new `java.util.ArrayList`;
  #L3ddb64.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L3ddb6a.  v1.`lecho.lib.hellocharts.f.h.m` @type ^`java.util.List` := v0 @kind object;
  #L3ddb6e.  v0:= 0I;
  #L3ddb70.  v1.`lecho.lib.hellocharts.f.h.n` @type ^`boolean` := v0 @kind boolean;
  #L3ddb74.  return @kind void;
}
procedure `lecho.lib.hellocharts.f.h` `k`() @signature `Llecho/lib/hellocharts/f/h;.k:()Llecho/lib/hellocharts/f/h;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3ddae4.  v0:= new `lecho.lib.hellocharts.f.h`;
  #L3ddae8.  call `<init>`(v0) @signature `Llecho/lib/hellocharts/f/h;.<init>:()V` @kind direct;
  #L3ddaee.  v1:= new `java.util.ArrayList`;
  #L3ddaf2.  v2:= 4I;
  #L3ddaf4.  call `<init>`(v1, v2) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L3ddafa.  v3:= 1I;
  #L3ddafc.  if v3 > v2 then goto L3ddb32;
  #L3ddb00.  v4:= new `java.util.ArrayList`;
  #L3ddb04.  call `<init>`(v4, v2) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L3ddb0a.  v5:= new `lecho.lib.hellocharts.f.p`;
  #L3ddb0e.  v6:= (`float`) v3 @kind i2f;
  #L3ddb10.  call `<init>`(v5, v6) @signature `Llecho/lib/hellocharts/f/p;.<init>:(F)V` @kind direct;
  #L3ddb16.  call temp:= `add`(v4, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3ddb1c.  v5:= new `lecho.lib.hellocharts.f.g`;
  #L3ddb20.  call `<init>`(v5, v4) @signature `Llecho/lib/hellocharts/f/g;.<init>:(Ljava/util/List;)V` @kind direct;
  #L3ddb26.  call temp:= `add`(v1, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3ddb2c.  v3:= v3 + 1;
  #L3ddb30.  goto L3ddafc;
  #L3ddb32.  call temp:= `a`(v0, v1) @signature `Llecho/lib/hellocharts/f/h;.a:(Ljava/util/List;)Llecho/lib/hellocharts/f/h;` @kind virtual;
  #L3ddb38.  return v0 @kind object;
}
procedure `lecho.lib.hellocharts.f.h` `a`(`lecho.lib.hellocharts.f.h` v0 @kind this, `java.util.List` v1 @kind object) @signature `Llecho/lib/hellocharts/f/h;.a:(Ljava/util/List;)Llecho/lib/hellocharts/f/h;` @AccessFlag PUBLIC {
    temp;

  #L3ddab8.  if v1 != 0 then goto L3ddacc;
  #L3ddabc.  v1:= new `java.util.ArrayList`;
  #L3ddac0.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L3ddac6.  v0.`lecho.lib.hellocharts.f.h.m` @type ^`java.util.List` := v1 @kind object;
  #L3ddaca.  goto L3ddad0;
  #L3ddacc.  v0.`lecho.lib.hellocharts.f.h.m` @type ^`java.util.List` := v1 @kind object;
  #L3ddad0.  return v0 @kind object;
}
procedure `void` `a`(`lecho.lib.hellocharts.f.h` v2 @kind this, `float` v3 ) @signature `Llecho/lib/hellocharts/f/h;.a:(F)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ddb88.  v0:= v2.`lecho.lib.hellocharts.f.h.m` @type ^`java.util.List` @kind object;
  #L3ddb8c.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3ddb92.  v0:= temp @kind object;
  #L3ddb94.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3ddb9a.  v1:= temp;
  #L3ddb9c.  if v1 == 0 then goto L3ddbb4;
  #L3ddba0.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3ddba6.  v1:= temp @kind object;
  #L3ddba8.  v1:= (`lecho.lib.hellocharts.f.g`) v1 @kind object;
  #L3ddbac.  call `a`(v1, v3) @signature `Llecho/lib/hellocharts/f/g;.a:(F)V` @kind virtual;
  #L3ddbb2.  goto L3ddb94;
  #L3ddbb4.  return @kind void;
}
procedure `void` `l`(`lecho.lib.hellocharts.f.h` v2 @kind this) @signature `Llecho/lib/hellocharts/f/h;.l:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ddbc8.  v0:= v2.`lecho.lib.hellocharts.f.h.m` @type ^`java.util.List` @kind object;
  #L3ddbcc.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3ddbd2.  v0:= temp @kind object;
  #L3ddbd4.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3ddbda.  v1:= temp;
  #L3ddbdc.  if v1 == 0 then goto L3ddbf4;
  #L3ddbe0.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3ddbe6.  v1:= temp @kind object;
  #L3ddbe8.  v1:= (`lecho.lib.hellocharts.f.g`) v1 @kind object;
  #L3ddbec.  call `a`(v1) @signature `Llecho/lib/hellocharts/f/g;.a:()V` @kind virtual;
  #L3ddbf2.  goto L3ddbd4;
  #L3ddbf4.  return @kind void;
}
procedure `java.util.List` `m`(`lecho.lib.hellocharts.f.h` v1 @kind this) @signature `Llecho/lib/hellocharts/f/h;.m:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ddaa0.  v0:= v1.`lecho.lib.hellocharts.f.h.m` @type ^`java.util.List` @kind object;
  #L3ddaa4.  return v0 @kind object;
}
procedure `boolean` `n`(`lecho.lib.hellocharts.f.h` v1 @kind this) @signature `Llecho/lib/hellocharts/f/h;.n:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3dda58.  v0:= v1.`lecho.lib.hellocharts.f.h.n` @type ^`boolean` @kind boolean;
  #L3dda5c.  return v0;
}
procedure `float` `o`(`lecho.lib.hellocharts.f.h` v1 @kind this) @signature `Llecho/lib/hellocharts/f/h;.o:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3dda70.  v0:= v1.`lecho.lib.hellocharts.f.h.k` @type ^`float`;
  #L3dda74.  return v0;
}
procedure `float` `p`(`lecho.lib.hellocharts.f.h` v1 @kind this) @signature `Llecho/lib/hellocharts/f/h;.p:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3dda88.  v0:= v1.`lecho.lib.hellocharts.f.h.l` @type ^`float`;
  #L3dda8c.  return v0;
}
