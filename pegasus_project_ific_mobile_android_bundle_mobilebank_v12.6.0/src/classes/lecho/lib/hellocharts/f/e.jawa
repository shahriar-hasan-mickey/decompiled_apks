record `lecho.lib.hellocharts.f.e` @kind class @AccessFlag PUBLIC {
  `float` `lecho.lib.hellocharts.f.e.a` @AccessFlag PRIVATE;
  `float` `lecho.lib.hellocharts.f.e.b` @AccessFlag PRIVATE;
  `float` `lecho.lib.hellocharts.f.e.c` @AccessFlag PRIVATE;
  `float` `lecho.lib.hellocharts.f.e.d` @AccessFlag PRIVATE;
  `float` `lecho.lib.hellocharts.f.e.e` @AccessFlag PRIVATE;
  `float` `lecho.lib.hellocharts.f.e.f` @AccessFlag PRIVATE;
  `float` `lecho.lib.hellocharts.f.e.g` @AccessFlag PRIVATE;
  `float` `lecho.lib.hellocharts.f.e.h` @AccessFlag PRIVATE;
  `float` `lecho.lib.hellocharts.f.e.i` @AccessFlag PRIVATE;
  `int` `lecho.lib.hellocharts.f.e.j` @AccessFlag PRIVATE;
  `int` `lecho.lib.hellocharts.f.e.k` @AccessFlag PRIVATE;
  `lecho.lib.hellocharts.f.q` `lecho.lib.hellocharts.f.e.l` @AccessFlag PRIVATE;
  `char`[] `lecho.lib.hellocharts.f.e.m` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`lecho.lib.hellocharts.f.e` v1 @kind this) @signature `Llecho/lib/hellocharts/f/e;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3dd7d8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3dd7de.  v0:= `@@lecho.lib.hellocharts.i.b.a` @type ^`int`;
  #L3dd7e2.  v1.`lecho.lib.hellocharts.f.e.j` @type ^`int` := v0;
  #L3dd7e6.  v0:= `@@lecho.lib.hellocharts.i.b.b` @type ^`int`;
  #L3dd7ea.  v1.`lecho.lib.hellocharts.f.e.k` @type ^`int` := v0;
  #L3dd7ee.  v0:= `@@lecho.lib.hellocharts.f.q.a` @type ^`lecho.lib.hellocharts.f.q` @kind object;
  #L3dd7f2.  v1.`lecho.lib.hellocharts.f.e.l` @type ^`lecho.lib.hellocharts.f.q` := v0 @kind object;
  #L3dd7f6.  v0:= 0I;
  #L3dd7f8.  call temp:= `a`(v1, v0, v0, v0) @signature `Llecho/lib/hellocharts/f/e;.a:(FFF)Llecho/lib/hellocharts/f/e;` @kind virtual;
  #L3dd7fe.  return @kind void;
}
procedure `void` `<init>`(`lecho.lib.hellocharts.f.e` v1 @kind this, `float` v2 , `float` v3 , `float` v4 ) @signature `Llecho/lib/hellocharts/f/e;.<init>:(FFF)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3dd810.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3dd816.  v0:= `@@lecho.lib.hellocharts.i.b.a` @type ^`int`;
  #L3dd81a.  v1.`lecho.lib.hellocharts.f.e.j` @type ^`int` := v0;
  #L3dd81e.  v0:= `@@lecho.lib.hellocharts.i.b.b` @type ^`int`;
  #L3dd822.  v1.`lecho.lib.hellocharts.f.e.k` @type ^`int` := v0;
  #L3dd826.  v0:= `@@lecho.lib.hellocharts.f.q.a` @type ^`lecho.lib.hellocharts.f.q` @kind object;
  #L3dd82a.  v1.`lecho.lib.hellocharts.f.e.l` @type ^`lecho.lib.hellocharts.f.q` := v0 @kind object;
  #L3dd82e.  call temp:= `a`(v1, v2, v3, v4) @signature `Llecho/lib/hellocharts/f/e;.a:(FFF)Llecho/lib/hellocharts/f/e;` @kind virtual;
  #L3dd834.  return @kind void;
}
procedure `lecho.lib.hellocharts.f.e` `a`(`lecho.lib.hellocharts.f.e` v0 @kind this, `float` v1 , `float` v2 , `float` v3 ) @signature `Llecho/lib/hellocharts/f/e;.a:(FFF)Llecho/lib/hellocharts/f/e;` @AccessFlag PUBLIC {
    temp;

  #L3dd788.  v0.`lecho.lib.hellocharts.f.e.a` @type ^`float` := v1;
  #L3dd78c.  v0.`lecho.lib.hellocharts.f.e.b` @type ^`float` := v2;
  #L3dd790.  v0.`lecho.lib.hellocharts.f.e.c` @type ^`float` := v3;
  #L3dd794.  v0.`lecho.lib.hellocharts.f.e.d` @type ^`float` := v1;
  #L3dd798.  v0.`lecho.lib.hellocharts.f.e.e` @type ^`float` := v2;
  #L3dd79c.  v0.`lecho.lib.hellocharts.f.e.f` @type ^`float` := v3;
  #L3dd7a0.  v1:= 0I;
  #L3dd7a2.  v0.`lecho.lib.hellocharts.f.e.g` @type ^`float` := v1;
  #L3dd7a6.  v0.`lecho.lib.hellocharts.f.e.h` @type ^`float` := v1;
  #L3dd7aa.  v0.`lecho.lib.hellocharts.f.e.i` @type ^`float` := v1;
  #L3dd7ae.  return v0 @kind object;
}
procedure `void` `a`(`lecho.lib.hellocharts.f.e` v4 @kind this) @signature `Llecho/lib/hellocharts/f/e;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3dd848.  v0:= v4.`lecho.lib.hellocharts.f.e.d` @type ^`float`;
  #L3dd84c.  v1:= v4.`lecho.lib.hellocharts.f.e.g` @type ^`float`;
  #L3dd850.  v0:= v0 + v1 @kind float;
  #L3dd852.  v1:= v4.`lecho.lib.hellocharts.f.e.e` @type ^`float`;
  #L3dd856.  v2:= v4.`lecho.lib.hellocharts.f.e.h` @type ^`float`;
  #L3dd85a.  v1:= v1 + v2 @kind float;
  #L3dd85c.  v2:= v4.`lecho.lib.hellocharts.f.e.f` @type ^`float`;
  #L3dd860.  v3:= v4.`lecho.lib.hellocharts.f.e.i` @type ^`float`;
  #L3dd864.  v2:= v2 + v3 @kind float;
  #L3dd866.  call temp:= `a`(v4, v0, v1, v2) @signature `Llecho/lib/hellocharts/f/e;.a:(FFF)Llecho/lib/hellocharts/f/e;` @kind virtual;
  #L3dd86c.  return @kind void;
}
procedure `void` `a`(`lecho.lib.hellocharts.f.e` v2 @kind this, `float` v3 ) @signature `Llecho/lib/hellocharts/f/e;.a:(F)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3dd880.  v0:= v2.`lecho.lib.hellocharts.f.e.d` @type ^`float`;
  #L3dd884.  v1:= v2.`lecho.lib.hellocharts.f.e.g` @type ^`float`;
  #L3dd888.  v1:= v1 * v3 @kind float;
  #L3dd88c.  v0:= v0 + v1 @kind float;
  #L3dd88e.  v2.`lecho.lib.hellocharts.f.e.a` @type ^`float` := v0;
  #L3dd892.  v0:= v2.`lecho.lib.hellocharts.f.e.e` @type ^`float`;
  #L3dd896.  v1:= v2.`lecho.lib.hellocharts.f.e.h` @type ^`float`;
  #L3dd89a.  v1:= v1 * v3 @kind float;
  #L3dd89e.  v0:= v0 + v1 @kind float;
  #L3dd8a0.  v2.`lecho.lib.hellocharts.f.e.b` @type ^`float` := v0;
  #L3dd8a4.  v0:= v2.`lecho.lib.hellocharts.f.e.f` @type ^`float`;
  #L3dd8a8.  v1:= v2.`lecho.lib.hellocharts.f.e.i` @type ^`float`;
  #L3dd8ac.  v1:= v1 * v3 @kind float;
  #L3dd8b0.  v0:= v0 + v1 @kind float;
  #L3dd8b2.  v2.`lecho.lib.hellocharts.f.e.c` @type ^`float` := v0;
  #L3dd8b6.  return @kind void;
}
procedure `float` `b`(`lecho.lib.hellocharts.f.e` v1 @kind this) @signature `Llecho/lib/hellocharts/f/e;.b:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3dd514.  v0:= v1.`lecho.lib.hellocharts.f.e.a` @type ^`float`;
  #L3dd518.  return v0;
}
procedure `float` `c`(`lecho.lib.hellocharts.f.e` v1 @kind this) @signature `Llecho/lib/hellocharts/f/e;.c:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3dd52c.  v0:= v1.`lecho.lib.hellocharts.f.e.b` @type ^`float`;
  #L3dd530.  return v0;
}
procedure `float` `d`(`lecho.lib.hellocharts.f.e` v1 @kind this) @signature `Llecho/lib/hellocharts/f/e;.d:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3dd544.  v0:= v1.`lecho.lib.hellocharts.f.e.c` @type ^`float`;
  #L3dd548.  return v0;
}
procedure `int` `e`(`lecho.lib.hellocharts.f.e` v1 @kind this) @signature `Llecho/lib/hellocharts/f/e;.e:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3dd55c.  v0:= v1.`lecho.lib.hellocharts.f.e.j` @type ^`int`;
  #L3dd560.  return v0;
}
procedure `boolean` `equals`(`lecho.lib.hellocharts.f.e` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Llecho/lib/hellocharts/f/e;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3dd3b8.  v0:= 1I;
  #L3dd3ba.  if v4 != v5 then goto L3dd3c0;
  #L3dd3be.  return v0;
  #L3dd3c0.  v1:= 0I;
  #L3dd3c2.  if v5 == 0 then goto L3dd4ea;
  #L3dd3c6.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3dd3cc.  v2:= temp @kind object;
  #L3dd3ce.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3dd3d4.  v3:= temp @kind object;
  #L3dd3d6.  if v2 == v3 then goto L3dd3de;
  #L3dd3da.  goto L3dd4ea;
  #L3dd3de.  v5:= (`lecho.lib.hellocharts.f.e`) v5 @kind object;
  #L3dd3e2.  v2:= v4.`lecho.lib.hellocharts.f.e.j` @type ^`int`;
  #L3dd3e6.  v3:= v5.`lecho.lib.hellocharts.f.e.j` @type ^`int`;
  #L3dd3ea.  if v2 == v3 then goto L3dd3f0;
  #L3dd3ee.  return v1;
  #L3dd3f0.  v2:= v4.`lecho.lib.hellocharts.f.e.k` @type ^`int`;
  #L3dd3f4.  v3:= v5.`lecho.lib.hellocharts.f.e.k` @type ^`int`;
  #L3dd3f8.  if v2 == v3 then goto L3dd3fe;
  #L3dd3fc.  return v1;
  #L3dd3fe.  v2:= v5.`lecho.lib.hellocharts.f.e.g` @type ^`float`;
  #L3dd402.  v3:= v4.`lecho.lib.hellocharts.f.e.g` @type ^`float`;
  #L3dd406.  call temp:= `compare`(v2, v3) @signature `Ljava/lang/Float;.compare:(FF)I` @kind static;
  #L3dd40c.  v2:= temp;
  #L3dd40e.  if v2 == 0 then goto L3dd414;
  #L3dd412.  return v1;
  #L3dd414.  v2:= v5.`lecho.lib.hellocharts.f.e.h` @type ^`float`;
  #L3dd418.  v3:= v4.`lecho.lib.hellocharts.f.e.h` @type ^`float`;
  #L3dd41c.  call temp:= `compare`(v2, v3) @signature `Ljava/lang/Float;.compare:(FF)I` @kind static;
  #L3dd422.  v2:= temp;
  #L3dd424.  if v2 == 0 then goto L3dd42a;
  #L3dd428.  return v1;
  #L3dd42a.  v2:= v5.`lecho.lib.hellocharts.f.e.i` @type ^`float`;
  #L3dd42e.  v3:= v4.`lecho.lib.hellocharts.f.e.i` @type ^`float`;
  #L3dd432.  call temp:= `compare`(v2, v3) @signature `Ljava/lang/Float;.compare:(FF)I` @kind static;
  #L3dd438.  v2:= temp;
  #L3dd43a.  if v2 == 0 then goto L3dd440;
  #L3dd43e.  return v1;
  #L3dd440.  v2:= v5.`lecho.lib.hellocharts.f.e.d` @type ^`float`;
  #L3dd444.  v3:= v4.`lecho.lib.hellocharts.f.e.d` @type ^`float`;
  #L3dd448.  call temp:= `compare`(v2, v3) @signature `Ljava/lang/Float;.compare:(FF)I` @kind static;
  #L3dd44e.  v2:= temp;
  #L3dd450.  if v2 == 0 then goto L3dd456;
  #L3dd454.  return v1;
  #L3dd456.  v2:= v5.`lecho.lib.hellocharts.f.e.e` @type ^`float`;
  #L3dd45a.  v3:= v4.`lecho.lib.hellocharts.f.e.e` @type ^`float`;
  #L3dd45e.  call temp:= `compare`(v2, v3) @signature `Ljava/lang/Float;.compare:(FF)I` @kind static;
  #L3dd464.  v2:= temp;
  #L3dd466.  if v2 == 0 then goto L3dd46c;
  #L3dd46a.  return v1;
  #L3dd46c.  v2:= v5.`lecho.lib.hellocharts.f.e.f` @type ^`float`;
  #L3dd470.  v3:= v4.`lecho.lib.hellocharts.f.e.f` @type ^`float`;
  #L3dd474.  call temp:= `compare`(v2, v3) @signature `Ljava/lang/Float;.compare:(FF)I` @kind static;
  #L3dd47a.  v2:= temp;
  #L3dd47c.  if v2 == 0 then goto L3dd482;
  #L3dd480.  return v1;
  #L3dd482.  v2:= v5.`lecho.lib.hellocharts.f.e.a` @type ^`float`;
  #L3dd486.  v3:= v4.`lecho.lib.hellocharts.f.e.a` @type ^`float`;
  #L3dd48a.  call temp:= `compare`(v2, v3) @signature `Ljava/lang/Float;.compare:(FF)I` @kind static;
  #L3dd490.  v2:= temp;
  #L3dd492.  if v2 == 0 then goto L3dd498;
  #L3dd496.  return v1;
  #L3dd498.  v2:= v5.`lecho.lib.hellocharts.f.e.b` @type ^`float`;
  #L3dd49c.  v3:= v4.`lecho.lib.hellocharts.f.e.b` @type ^`float`;
  #L3dd4a0.  call temp:= `compare`(v2, v3) @signature `Ljava/lang/Float;.compare:(FF)I` @kind static;
  #L3dd4a6.  v2:= temp;
  #L3dd4a8.  if v2 == 0 then goto L3dd4ae;
  #L3dd4ac.  return v1;
  #L3dd4ae.  v2:= v5.`lecho.lib.hellocharts.f.e.c` @type ^`float`;
  #L3dd4b2.  v3:= v4.`lecho.lib.hellocharts.f.e.c` @type ^`float`;
  #L3dd4b6.  call temp:= `compare`(v2, v3) @signature `Ljava/lang/Float;.compare:(FF)I` @kind static;
  #L3dd4bc.  v2:= temp;
  #L3dd4be.  if v2 == 0 then goto L3dd4c4;
  #L3dd4c2.  return v1;
  #L3dd4c4.  v2:= v4.`lecho.lib.hellocharts.f.e.m` @type ^`char`[] @kind object;
  #L3dd4c8.  v3:= v5.`lecho.lib.hellocharts.f.e.m` @type ^`char`[] @kind object;
  #L3dd4cc.  call temp:= `equals`(v2, v3) @signature `Ljava/util/Arrays;.equals:([C[C)Z` @kind static;
  #L3dd4d2.  v2:= temp;
  #L3dd4d4.  if v2 != 0 then goto L3dd4da;
  #L3dd4d8.  return v1;
  #L3dd4da.  v2:= v4.`lecho.lib.hellocharts.f.e.l` @type ^`lecho.lib.hellocharts.f.q` @kind object;
  #L3dd4de.  v5:= v5.`lecho.lib.hellocharts.f.e.l` @type ^`lecho.lib.hellocharts.f.q` @kind object;
  #L3dd4e2.  if v2 == v5 then goto L3dd4e8;
  #L3dd4e6.  return v1;
  #L3dd4e8.  return v0;
  #L3dd4ea.  return v1;
}
procedure `int` `f`(`lecho.lib.hellocharts.f.e` v1 @kind this) @signature `Llecho/lib/hellocharts/f/e;.f:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3dd574.  v0:= v1.`lecho.lib.hellocharts.f.e.k` @type ^`int`;
  #L3dd578.  return v0;
}
procedure `lecho.lib.hellocharts.f.q` `g`(`lecho.lib.hellocharts.f.e` v1 @kind this) @signature `Llecho/lib/hellocharts/f/e;.g:()Llecho/lib/hellocharts/f/q;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3dd7c0.  v0:= v1.`lecho.lib.hellocharts.f.e.l` @type ^`lecho.lib.hellocharts.f.q` @kind object;
  #L3dd7c4.  return v0 @kind object;
}
procedure `char`[] `h`(`lecho.lib.hellocharts.f.e` v1 @kind this) @signature `Llecho/lib/hellocharts/f/e;.h:()[C` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3dd4fc.  v0:= v1.`lecho.lib.hellocharts.f.e.m` @type ^`char`[] @kind object;
  #L3dd500.  return v0 @kind object;
}
procedure `int` `hashCode`(`lecho.lib.hellocharts.f.e` v4 @kind this) @signature `Llecho/lib/hellocharts/f/e;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3dd58c.  v0:= v4.`lecho.lib.hellocharts.f.e.a` @type ^`float`;
  #L3dd590.  v1:= 0I;
  #L3dd592.  v0:= fcmpl(v0, v1);
  #L3dd596.  v2:= 0I;
  #L3dd598.  if v0 == 0 then goto L3dd5aa;
  #L3dd59c.  v0:= v4.`lecho.lib.hellocharts.f.e.a` @type ^`float`;
  #L3dd5a0.  call temp:= `floatToIntBits`(v0) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L3dd5a6.  v0:= temp;
  #L3dd5a8.  goto L3dd5ac;
  #L3dd5aa.  v0:= 0I;
  #L3dd5ac.  v0:= v0 * 31;
  #L3dd5b0.  v3:= v4.`lecho.lib.hellocharts.f.e.b` @type ^`float`;
  #L3dd5b4.  v3:= fcmpl(v3, v1);
  #L3dd5b8.  if v3 == 0 then goto L3dd5ca;
  #L3dd5bc.  v3:= v4.`lecho.lib.hellocharts.f.e.b` @type ^`float`;
  #L3dd5c0.  call temp:= `floatToIntBits`(v3) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L3dd5c6.  v3:= temp;
  #L3dd5c8.  goto L3dd5cc;
  #L3dd5ca.  v3:= 0I;
  #L3dd5cc.  v0:= v0 + v3 @kind int;
  #L3dd5ce.  v0:= v0 * 31;
  #L3dd5d2.  v3:= v4.`lecho.lib.hellocharts.f.e.c` @type ^`float`;
  #L3dd5d6.  v3:= fcmpl(v3, v1);
  #L3dd5da.  if v3 == 0 then goto L3dd5ec;
  #L3dd5de.  v3:= v4.`lecho.lib.hellocharts.f.e.c` @type ^`float`;
  #L3dd5e2.  call temp:= `floatToIntBits`(v3) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L3dd5e8.  v3:= temp;
  #L3dd5ea.  goto L3dd5ee;
  #L3dd5ec.  v3:= 0I;
  #L3dd5ee.  v0:= v0 + v3 @kind int;
  #L3dd5f0.  v0:= v0 * 31;
  #L3dd5f4.  v3:= v4.`lecho.lib.hellocharts.f.e.d` @type ^`float`;
  #L3dd5f8.  v3:= fcmpl(v3, v1);
  #L3dd5fc.  if v3 == 0 then goto L3dd60e;
  #L3dd600.  v3:= v4.`lecho.lib.hellocharts.f.e.d` @type ^`float`;
  #L3dd604.  call temp:= `floatToIntBits`(v3) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L3dd60a.  v3:= temp;
  #L3dd60c.  goto L3dd610;
  #L3dd60e.  v3:= 0I;
  #L3dd610.  v0:= v0 + v3 @kind int;
  #L3dd612.  v0:= v0 * 31;
  #L3dd616.  v3:= v4.`lecho.lib.hellocharts.f.e.e` @type ^`float`;
  #L3dd61a.  v3:= fcmpl(v3, v1);
  #L3dd61e.  if v3 == 0 then goto L3dd630;
  #L3dd622.  v3:= v4.`lecho.lib.hellocharts.f.e.e` @type ^`float`;
  #L3dd626.  call temp:= `floatToIntBits`(v3) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L3dd62c.  v3:= temp;
  #L3dd62e.  goto L3dd632;
  #L3dd630.  v3:= 0I;
  #L3dd632.  v0:= v0 + v3 @kind int;
  #L3dd634.  v0:= v0 * 31;
  #L3dd638.  v3:= v4.`lecho.lib.hellocharts.f.e.f` @type ^`float`;
  #L3dd63c.  v3:= fcmpl(v3, v1);
  #L3dd640.  if v3 == 0 then goto L3dd652;
  #L3dd644.  v3:= v4.`lecho.lib.hellocharts.f.e.f` @type ^`float`;
  #L3dd648.  call temp:= `floatToIntBits`(v3) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L3dd64e.  v3:= temp;
  #L3dd650.  goto L3dd654;
  #L3dd652.  v3:= 0I;
  #L3dd654.  v0:= v0 + v3 @kind int;
  #L3dd656.  v0:= v0 * 31;
  #L3dd65a.  v3:= v4.`lecho.lib.hellocharts.f.e.g` @type ^`float`;
  #L3dd65e.  v3:= fcmpl(v3, v1);
  #L3dd662.  if v3 == 0 then goto L3dd674;
  #L3dd666.  v3:= v4.`lecho.lib.hellocharts.f.e.g` @type ^`float`;
  #L3dd66a.  call temp:= `floatToIntBits`(v3) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L3dd670.  v3:= temp;
  #L3dd672.  goto L3dd676;
  #L3dd674.  v3:= 0I;
  #L3dd676.  v0:= v0 + v3 @kind int;
  #L3dd678.  v0:= v0 * 31;
  #L3dd67c.  v3:= v4.`lecho.lib.hellocharts.f.e.h` @type ^`float`;
  #L3dd680.  v3:= fcmpl(v3, v1);
  #L3dd684.  if v3 == 0 then goto L3dd696;
  #L3dd688.  v3:= v4.`lecho.lib.hellocharts.f.e.h` @type ^`float`;
  #L3dd68c.  call temp:= `floatToIntBits`(v3) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L3dd692.  v3:= temp;
  #L3dd694.  goto L3dd698;
  #L3dd696.  v3:= 0I;
  #L3dd698.  v0:= v0 + v3 @kind int;
  #L3dd69a.  v0:= v0 * 31;
  #L3dd69e.  v3:= v4.`lecho.lib.hellocharts.f.e.i` @type ^`float`;
  #L3dd6a2.  v1:= fcmpl(v3, v1);
  #L3dd6a6.  if v1 == 0 then goto L3dd6b8;
  #L3dd6aa.  v1:= v4.`lecho.lib.hellocharts.f.e.i` @type ^`float`;
  #L3dd6ae.  call temp:= `floatToIntBits`(v1) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L3dd6b4.  v1:= temp;
  #L3dd6b6.  goto L3dd6ba;
  #L3dd6b8.  v1:= 0I;
  #L3dd6ba.  v0:= v0 + v1 @kind int;
  #L3dd6bc.  v0:= v0 * 31;
  #L3dd6c0.  v1:= v4.`lecho.lib.hellocharts.f.e.j` @type ^`int`;
  #L3dd6c4.  v0:= v0 + v1 @kind int;
  #L3dd6c6.  v0:= v0 * 31;
  #L3dd6ca.  v1:= v4.`lecho.lib.hellocharts.f.e.k` @type ^`int`;
  #L3dd6ce.  v0:= v0 + v1 @kind int;
  #L3dd6d0.  v0:= v0 * 31;
  #L3dd6d4.  v1:= v4.`lecho.lib.hellocharts.f.e.l` @type ^`lecho.lib.hellocharts.f.q` @kind object;
  #L3dd6d8.  if v1 == 0 then goto L3dd6ea;
  #L3dd6dc.  v1:= v4.`lecho.lib.hellocharts.f.e.l` @type ^`lecho.lib.hellocharts.f.q` @kind object;
  #L3dd6e0.  call temp:= `hashCode`(v1) @signature `Llecho/lib/hellocharts/f/q;.hashCode:()I` @kind virtual;
  #L3dd6e6.  v1:= temp;
  #L3dd6e8.  goto L3dd6ec;
  #L3dd6ea.  v1:= 0I;
  #L3dd6ec.  v0:= v0 + v1 @kind int;
  #L3dd6ee.  v0:= v0 * 31;
  #L3dd6f2.  v1:= v4.`lecho.lib.hellocharts.f.e.m` @type ^`char`[] @kind object;
  #L3dd6f6.  if v1 == 0 then goto L3dd706;
  #L3dd6fa.  v1:= v4.`lecho.lib.hellocharts.f.e.m` @type ^`char`[] @kind object;
  #L3dd6fe.  call temp:= `hashCode`(v1) @signature `Ljava/util/Arrays;.hashCode:([C)I` @kind static;
  #L3dd704.  v2:= temp;
  #L3dd706.  v0:= v0 + v2 @kind int;
  #L3dd708.  return v0;
}
procedure `java.lang.String` `toString`(`lecho.lib.hellocharts.f.e` v2 @kind this) @signature `Llecho/lib/hellocharts/f/e;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3dd71c.  v0:= new `java.lang.StringBuilder`;
  #L3dd720.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3dd726.  v1:= "BubbleValue [x=" @kind object;
  #L3dd72a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3dd730.  v1:= v2.`lecho.lib.hellocharts.f.e.a` @type ^`float`;
  #L3dd734.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(F)Ljava/lang/StringBuilder;` @kind virtual;
  #L3dd73a.  v1:= ", y=" @kind object;
  #L3dd73e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3dd744.  v1:= v2.`lecho.lib.hellocharts.f.e.b` @type ^`float`;
  #L3dd748.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(F)Ljava/lang/StringBuilder;` @kind virtual;
  #L3dd74e.  v1:= ", z=" @kind object;
  #L3dd752.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3dd758.  v1:= v2.`lecho.lib.hellocharts.f.e.c` @type ^`float`;
  #L3dd75c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(F)Ljava/lang/StringBuilder;` @kind virtual;
  #L3dd762.  v1:= "]" @kind object;
  #L3dd766.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3dd76c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3dd772.  v0:= temp @kind object;
  #L3dd774.  return v0 @kind object;
}
