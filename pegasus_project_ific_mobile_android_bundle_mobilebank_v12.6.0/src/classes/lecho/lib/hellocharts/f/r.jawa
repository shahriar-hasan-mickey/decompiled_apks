record `lecho.lib.hellocharts.f.r` @kind class @AccessFlag PUBLIC extends `android.os.Parcelable` @kind interface {
  `float` `lecho.lib.hellocharts.f.r.a` @AccessFlag PUBLIC;
  `float` `lecho.lib.hellocharts.f.r.b` @AccessFlag PUBLIC;
  `float` `lecho.lib.hellocharts.f.r.c` @AccessFlag PUBLIC;
  `float` `lecho.lib.hellocharts.f.r.d` @AccessFlag PUBLIC;
}
global `android.os.Parcelable$Creator` `@@lecho.lib.hellocharts.f.r.CREATOR` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Llecho/lib/hellocharts/f/r;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3df6d8.  v0:= new `lecho.lib.hellocharts.f.r$1`;
  #L3df6dc.  call `<init>`(v0) @signature `Llecho/lib/hellocharts/f/r$1;.<init>:()V` @kind direct;
  #L3df6e2.  `@@lecho.lib.hellocharts.f.r.CREATOR` @type ^`android.os.Parcelable$Creator` := v0 @kind object;
  #L3df6e6.  return @kind void;
}
procedure `void` `<init>`(`lecho.lib.hellocharts.f.r` v0 @kind this) @signature `Llecho/lib/hellocharts/f/r;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3df6f8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3df6fe.  return @kind void;
}
procedure `void` `<init>`(`lecho.lib.hellocharts.f.r` v1 @kind this, `lecho.lib.hellocharts.f.r` v2 @kind object) @signature `Llecho/lib/hellocharts/f/r;.<init>:(Llecho/lib/hellocharts/f/r;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3df710.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3df716.  if v2 != 0 then goto L3df72e;
  #L3df71a.  v2:= 0I;
  #L3df71c.  v1.`lecho.lib.hellocharts.f.r.d` @type ^`float` := v2;
  #L3df720.  v1.`lecho.lib.hellocharts.f.r.c` @type ^`float` := v2;
  #L3df724.  v1.`lecho.lib.hellocharts.f.r.b` @type ^`float` := v2;
  #L3df728.  v1.`lecho.lib.hellocharts.f.r.a` @type ^`float` := v2;
  #L3df72c.  goto L3df74e;
  #L3df72e.  v0:= v2.`lecho.lib.hellocharts.f.r.a` @type ^`float`;
  #L3df732.  v1.`lecho.lib.hellocharts.f.r.a` @type ^`float` := v0;
  #L3df736.  v0:= v2.`lecho.lib.hellocharts.f.r.b` @type ^`float`;
  #L3df73a.  v1.`lecho.lib.hellocharts.f.r.b` @type ^`float` := v0;
  #L3df73e.  v0:= v2.`lecho.lib.hellocharts.f.r.c` @type ^`float`;
  #L3df742.  v1.`lecho.lib.hellocharts.f.r.c` @type ^`float` := v0;
  #L3df746.  v2:= v2.`lecho.lib.hellocharts.f.r.d` @type ^`float`;
  #L3df74a.  v1.`lecho.lib.hellocharts.f.r.d` @type ^`float` := v2;
  #L3df74e.  return @kind void;
}
procedure `float` `a`(`lecho.lib.hellocharts.f.r` v2 @kind this) @signature `Llecho/lib/hellocharts/f/r;.a:()F` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3df5b0.  v0:= v2.`lecho.lib.hellocharts.f.r.c` @type ^`float`;
  #L3df5b4.  v1:= v2.`lecho.lib.hellocharts.f.r.a` @type ^`float`;
  #L3df5b8.  v0:= v0 - v1 @kind float;
  #L3df5ba.  return v0;
}
procedure `void` `a`(`lecho.lib.hellocharts.f.r` v1 @kind this, `float` v2 , `float` v3 ) @signature `Llecho/lib/hellocharts/f/r;.a:(FF)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3df7a4.  v0:= v1.`lecho.lib.hellocharts.f.r.a` @type ^`float`;
  #L3df7a8.  v0:= v0 + v2 @kind float;
  #L3df7aa.  v1.`lecho.lib.hellocharts.f.r.a` @type ^`float` := v0;
  #L3df7ae.  v0:= v1.`lecho.lib.hellocharts.f.r.b` @type ^`float`;
  #L3df7b2.  v0:= v0 - v3 @kind float;
  #L3df7b4.  v1.`lecho.lib.hellocharts.f.r.b` @type ^`float` := v0;
  #L3df7b8.  v0:= v1.`lecho.lib.hellocharts.f.r.c` @type ^`float`;
  #L3df7bc.  v0:= v0 - v2 @kind float;
  #L3df7be.  v1.`lecho.lib.hellocharts.f.r.c` @type ^`float` := v0;
  #L3df7c2.  v2:= v1.`lecho.lib.hellocharts.f.r.d` @type ^`float`;
  #L3df7c6.  v2:= v2 + v3 @kind float;
  #L3df7c8.  v1.`lecho.lib.hellocharts.f.r.d` @type ^`float` := v2;
  #L3df7cc.  return @kind void;
}
procedure `void` `a`(`lecho.lib.hellocharts.f.r` v0 @kind this, `float` v1 , `float` v2 , `float` v3 , `float` v4 ) @signature `Llecho/lib/hellocharts/f/r;.a:(FFFF)V` @AccessFlag PUBLIC {
    temp;

  #L3df7e0.  v0.`lecho.lib.hellocharts.f.r.a` @type ^`float` := v1;
  #L3df7e4.  v0.`lecho.lib.hellocharts.f.r.b` @type ^`float` := v2;
  #L3df7e8.  v0.`lecho.lib.hellocharts.f.r.c` @type ^`float` := v3;
  #L3df7ec.  v0.`lecho.lib.hellocharts.f.r.d` @type ^`float` := v4;
  #L3df7f0.  return @kind void;
}
procedure `void` `a`(`lecho.lib.hellocharts.f.r` v1 @kind this, `android.os.Parcel` v2 @kind object) @signature `Llecho/lib/hellocharts/f/r;.a:(Landroid/os/Parcel;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3df760.  call temp:= `readFloat`(v2) @signature `Landroid/os/Parcel;.readFloat:()F` @kind virtual;
  #L3df766.  v0:= temp;
  #L3df768.  v1.`lecho.lib.hellocharts.f.r.a` @type ^`float` := v0;
  #L3df76c.  call temp:= `readFloat`(v2) @signature `Landroid/os/Parcel;.readFloat:()F` @kind virtual;
  #L3df772.  v0:= temp;
  #L3df774.  v1.`lecho.lib.hellocharts.f.r.b` @type ^`float` := v0;
  #L3df778.  call temp:= `readFloat`(v2) @signature `Landroid/os/Parcel;.readFloat:()F` @kind virtual;
  #L3df77e.  v0:= temp;
  #L3df780.  v1.`lecho.lib.hellocharts.f.r.c` @type ^`float` := v0;
  #L3df784.  call temp:= `readFloat`(v2) @signature `Landroid/os/Parcel;.readFloat:()F` @kind virtual;
  #L3df78a.  v2:= temp;
  #L3df78c.  v1.`lecho.lib.hellocharts.f.r.d` @type ^`float` := v2;
  #L3df790.  return @kind void;
}
procedure `void` `a`(`lecho.lib.hellocharts.f.r` v1 @kind this, `lecho.lib.hellocharts.f.r` v2 @kind object) @signature `Llecho/lib/hellocharts/f/r;.a:(Llecho/lib/hellocharts/f/r;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3df804.  v0:= v2.`lecho.lib.hellocharts.f.r.a` @type ^`float`;
  #L3df808.  v1.`lecho.lib.hellocharts.f.r.a` @type ^`float` := v0;
  #L3df80c.  v0:= v2.`lecho.lib.hellocharts.f.r.b` @type ^`float`;
  #L3df810.  v1.`lecho.lib.hellocharts.f.r.b` @type ^`float` := v0;
  #L3df814.  v0:= v2.`lecho.lib.hellocharts.f.r.c` @type ^`float`;
  #L3df818.  v1.`lecho.lib.hellocharts.f.r.c` @type ^`float` := v0;
  #L3df81c.  v2:= v2.`lecho.lib.hellocharts.f.r.d` @type ^`float`;
  #L3df820.  v1.`lecho.lib.hellocharts.f.r.d` @type ^`float` := v2;
  #L3df824.  return @kind void;
}
procedure `float` `b`(`lecho.lib.hellocharts.f.r` v2 @kind this) @signature `Llecho/lib/hellocharts/f/r;.b:()F` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3df5cc.  v0:= v2.`lecho.lib.hellocharts.f.r.b` @type ^`float`;
  #L3df5d0.  v1:= v2.`lecho.lib.hellocharts.f.r.d` @type ^`float`;
  #L3df5d4.  v0:= v0 - v1 @kind float;
  #L3df5d6.  return v0;
}
procedure `void` `b`(`lecho.lib.hellocharts.f.r` v2 @kind this, `float` v3 , `float` v4 , `float` v5 , `float` v6 ) @signature `Llecho/lib/hellocharts/f/r;.b:(FFFF)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3df838.  v0:= fcmpg(v3, v5);
  #L3df83c.  if v0 >= 0 then goto L3df8ba;
  #L3df840.  v0:= fcmpg(v6, v4);
  #L3df844.  if v0 >= 0 then goto L3df8ba;
  #L3df848.  v0:= v2.`lecho.lib.hellocharts.f.r.a` @type ^`float`;
  #L3df84c.  v1:= v2.`lecho.lib.hellocharts.f.r.c` @type ^`float`;
  #L3df850.  v0:= fcmpg(v0, v1);
  #L3df854.  if v0 >= 0 then goto L3df8aa;
  #L3df858.  v0:= v2.`lecho.lib.hellocharts.f.r.d` @type ^`float`;
  #L3df85c.  v1:= v2.`lecho.lib.hellocharts.f.r.b` @type ^`float`;
  #L3df860.  v0:= fcmpg(v0, v1);
  #L3df864.  if v0 >= 0 then goto L3df8aa;
  #L3df868.  v0:= v2.`lecho.lib.hellocharts.f.r.a` @type ^`float`;
  #L3df86c.  v0:= fcmpl(v0, v3);
  #L3df870.  if v0 <= 0 then goto L3df878;
  #L3df874.  v2.`lecho.lib.hellocharts.f.r.a` @type ^`float` := v3;
  #L3df878.  v3:= v2.`lecho.lib.hellocharts.f.r.b` @type ^`float`;
  #L3df87c.  v3:= fcmpg(v3, v4);
  #L3df880.  if v3 >= 0 then goto L3df888;
  #L3df884.  v2.`lecho.lib.hellocharts.f.r.b` @type ^`float` := v4;
  #L3df888.  v3:= v2.`lecho.lib.hellocharts.f.r.c` @type ^`float`;
  #L3df88c.  v3:= fcmpg(v3, v5);
  #L3df890.  if v3 >= 0 then goto L3df898;
  #L3df894.  v2.`lecho.lib.hellocharts.f.r.c` @type ^`float` := v5;
  #L3df898.  v3:= v2.`lecho.lib.hellocharts.f.r.d` @type ^`float`;
  #L3df89c.  v3:= fcmpl(v3, v6);
  #L3df8a0.  if v3 <= 0 then goto L3df8ba;
  #L3df8a4.  v2.`lecho.lib.hellocharts.f.r.d` @type ^`float` := v6;
  #L3df8a8.  goto L3df8ba;
  #L3df8aa.  v2.`lecho.lib.hellocharts.f.r.a` @type ^`float` := v3;
  #L3df8ae.  v2.`lecho.lib.hellocharts.f.r.b` @type ^`float` := v4;
  #L3df8b2.  v2.`lecho.lib.hellocharts.f.r.c` @type ^`float` := v5;
  #L3df8b6.  v2.`lecho.lib.hellocharts.f.r.d` @type ^`float` := v6;
  #L3df8ba.  return @kind void;
}
procedure `void` `b`(`lecho.lib.hellocharts.f.r` v3 @kind this, `lecho.lib.hellocharts.f.r` v4 @kind object) @signature `Llecho/lib/hellocharts/f/r;.b:(Llecho/lib/hellocharts/f/r;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3df8cc.  v0:= v4.`lecho.lib.hellocharts.f.r.a` @type ^`float`;
  #L3df8d0.  v1:= v4.`lecho.lib.hellocharts.f.r.b` @type ^`float`;
  #L3df8d4.  v2:= v4.`lecho.lib.hellocharts.f.r.c` @type ^`float`;
  #L3df8d8.  v4:= v4.`lecho.lib.hellocharts.f.r.d` @type ^`float`;
  #L3df8dc.  call `b`(v3, v0, v1, v2, v4) @signature `Llecho/lib/hellocharts/f/r;.b:(FFFF)V` @kind virtual;
  #L3df8e2.  return @kind void;
}
procedure `boolean` `b`(`lecho.lib.hellocharts.f.r` v2 @kind this, `float` v3 , `float` v4 ) @signature `Llecho/lib/hellocharts/f/r;.b:(FF)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3df494.  v0:= v2.`lecho.lib.hellocharts.f.r.a` @type ^`float`;
  #L3df498.  v1:= v2.`lecho.lib.hellocharts.f.r.c` @type ^`float`;
  #L3df49c.  v0:= fcmpg(v0, v1);
  #L3df4a0.  if v0 >= 0 then goto L3df4e8;
  #L3df4a4.  v0:= v2.`lecho.lib.hellocharts.f.r.d` @type ^`float`;
  #L3df4a8.  v1:= v2.`lecho.lib.hellocharts.f.r.b` @type ^`float`;
  #L3df4ac.  v0:= fcmpg(v0, v1);
  #L3df4b0.  if v0 >= 0 then goto L3df4e8;
  #L3df4b4.  v0:= v2.`lecho.lib.hellocharts.f.r.a` @type ^`float`;
  #L3df4b8.  v0:= fcmpl(v3, v0);
  #L3df4bc.  if v0 < 0 then goto L3df4e8;
  #L3df4c0.  v0:= v2.`lecho.lib.hellocharts.f.r.c` @type ^`float`;
  #L3df4c4.  v3:= fcmpg(v3, v0);
  #L3df4c8.  if v3 >= 0 then goto L3df4e8;
  #L3df4cc.  v3:= v2.`lecho.lib.hellocharts.f.r.d` @type ^`float`;
  #L3df4d0.  v3:= fcmpl(v4, v3);
  #L3df4d4.  if v3 < 0 then goto L3df4e8;
  #L3df4d8.  v3:= v2.`lecho.lib.hellocharts.f.r.b` @type ^`float`;
  #L3df4dc.  v3:= fcmpg(v4, v3);
  #L3df4e0.  if v3 >= 0 then goto L3df4e8;
  #L3df4e4.  v3:= 1I;
  #L3df4e6.  goto L3df4ea;
  #L3df4e8.  v3:= 0I;
  #L3df4ea.  return v3;
}
procedure `int` `describeContents`(`lecho.lib.hellocharts.f.r` v1 @kind this) @signature `Llecho/lib/hellocharts/f/r;.describeContents:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3df5e8.  v0:= 0I;
  #L3df5ea.  return v0;
}
procedure `boolean` `equals`(`lecho.lib.hellocharts.f.r` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Llecho/lib/hellocharts/f/r;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3df4fc.  v0:= 1I;
  #L3df4fe.  if v4 != v5 then goto L3df504;
  #L3df502.  return v0;
  #L3df504.  v1:= 0I;
  #L3df506.  if v5 != 0 then goto L3df50c;
  #L3df50a.  return v1;
  #L3df50c.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3df512.  v2:= temp @kind object;
  #L3df514.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3df51a.  v3:= temp @kind object;
  #L3df51c.  if v2 == v3 then goto L3df522;
  #L3df520.  return v1;
  #L3df522.  v5:= (`lecho.lib.hellocharts.f.r`) v5 @kind object;
  #L3df526.  v2:= v4.`lecho.lib.hellocharts.f.r.d` @type ^`float`;
  #L3df52a.  call temp:= `floatToIntBits`(v2) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L3df530.  v2:= temp;
  #L3df532.  v3:= v5.`lecho.lib.hellocharts.f.r.d` @type ^`float`;
  #L3df536.  call temp:= `floatToIntBits`(v3) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L3df53c.  v3:= temp;
  #L3df53e.  if v2 == v3 then goto L3df544;
  #L3df542.  return v1;
  #L3df544.  v2:= v4.`lecho.lib.hellocharts.f.r.a` @type ^`float`;
  #L3df548.  call temp:= `floatToIntBits`(v2) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L3df54e.  v2:= temp;
  #L3df550.  v3:= v5.`lecho.lib.hellocharts.f.r.a` @type ^`float`;
  #L3df554.  call temp:= `floatToIntBits`(v3) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L3df55a.  v3:= temp;
  #L3df55c.  if v2 == v3 then goto L3df562;
  #L3df560.  return v1;
  #L3df562.  v2:= v4.`lecho.lib.hellocharts.f.r.c` @type ^`float`;
  #L3df566.  call temp:= `floatToIntBits`(v2) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L3df56c.  v2:= temp;
  #L3df56e.  v3:= v5.`lecho.lib.hellocharts.f.r.c` @type ^`float`;
  #L3df572.  call temp:= `floatToIntBits`(v3) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L3df578.  v3:= temp;
  #L3df57a.  if v2 == v3 then goto L3df580;
  #L3df57e.  return v1;
  #L3df580.  v2:= v4.`lecho.lib.hellocharts.f.r.b` @type ^`float`;
  #L3df584.  call temp:= `floatToIntBits`(v2) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L3df58a.  v2:= temp;
  #L3df58c.  v5:= v5.`lecho.lib.hellocharts.f.r.b` @type ^`float`;
  #L3df590.  call temp:= `floatToIntBits`(v5) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L3df596.  v5:= temp;
  #L3df598.  if v2 == v5 then goto L3df59e;
  #L3df59c.  return v1;
  #L3df59e.  return v0;
}
procedure `int` `hashCode`(`lecho.lib.hellocharts.f.r` v3 @kind this) @signature `Llecho/lib/hellocharts/f/r;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3df5fc.  v0:= v3.`lecho.lib.hellocharts.f.r.d` @type ^`float`;
  #L3df600.  call temp:= `floatToIntBits`(v0) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L3df606.  v0:= temp;
  #L3df608.  v1:= 31I;
  #L3df60c.  v0:= v0 + v1 @kind int;
  #L3df60e.  v0:= v0 * 31;
  #L3df612.  v2:= v3.`lecho.lib.hellocharts.f.r.a` @type ^`float`;
  #L3df616.  call temp:= `floatToIntBits`(v2) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L3df61c.  v2:= temp;
  #L3df61e.  v0:= v0 + v2 @kind int;
  #L3df620.  v0:= v0 * 31;
  #L3df624.  v2:= v3.`lecho.lib.hellocharts.f.r.c` @type ^`float`;
  #L3df628.  call temp:= `floatToIntBits`(v2) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L3df62e.  v2:= temp;
  #L3df630.  v0:= v0 + v2 @kind int;
  #L3df632.  v0:= v0 * 31;
  #L3df636.  v1:= v3.`lecho.lib.hellocharts.f.r.b` @type ^`float`;
  #L3df63a.  call temp:= `floatToIntBits`(v1) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L3df640.  v1:= temp;
  #L3df642.  v0:= v0 + v1 @kind int;
  #L3df644.  return v0;
}
procedure `java.lang.String` `toString`(`lecho.lib.hellocharts.f.r` v2 @kind this) @signature `Llecho/lib/hellocharts/f/r;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3df658.  v0:= new `java.lang.StringBuilder`;
  #L3df65c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3df662.  v1:= "Viewport [left=" @kind object;
  #L3df666.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3df66c.  v1:= v2.`lecho.lib.hellocharts.f.r.a` @type ^`float`;
  #L3df670.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(F)Ljava/lang/StringBuilder;` @kind virtual;
  #L3df676.  v1:= ", top=" @kind object;
  #L3df67a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3df680.  v1:= v2.`lecho.lib.hellocharts.f.r.b` @type ^`float`;
  #L3df684.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(F)Ljava/lang/StringBuilder;` @kind virtual;
  #L3df68a.  v1:= ", right=" @kind object;
  #L3df68e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3df694.  v1:= v2.`lecho.lib.hellocharts.f.r.c` @type ^`float`;
  #L3df698.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(F)Ljava/lang/StringBuilder;` @kind virtual;
  #L3df69e.  v1:= ", bottom=" @kind object;
  #L3df6a2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3df6a8.  v1:= v2.`lecho.lib.hellocharts.f.r.d` @type ^`float`;
  #L3df6ac.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(F)Ljava/lang/StringBuilder;` @kind virtual;
  #L3df6b2.  v1:= "]" @kind object;
  #L3df6b6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3df6bc.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3df6c2.  v0:= temp @kind object;
  #L3df6c4.  return v0 @kind object;
}
procedure `void` `writeToParcel`(`lecho.lib.hellocharts.f.r` v0 @kind this, `android.os.Parcel` v1 @kind object, `int` v2 ) @signature `Llecho/lib/hellocharts/f/r;.writeToParcel:(Landroid/os/Parcel;I)V` @AccessFlag PUBLIC {
    temp;

  #L3df8f4.  v2:= v0.`lecho.lib.hellocharts.f.r.a` @type ^`float`;
  #L3df8f8.  call `writeFloat`(v1, v2) @signature `Landroid/os/Parcel;.writeFloat:(F)V` @kind virtual;
  #L3df8fe.  v2:= v0.`lecho.lib.hellocharts.f.r.b` @type ^`float`;
  #L3df902.  call `writeFloat`(v1, v2) @signature `Landroid/os/Parcel;.writeFloat:(F)V` @kind virtual;
  #L3df908.  v2:= v0.`lecho.lib.hellocharts.f.r.c` @type ^`float`;
  #L3df90c.  call `writeFloat`(v1, v2) @signature `Landroid/os/Parcel;.writeFloat:(F)V` @kind virtual;
  #L3df912.  v2:= v0.`lecho.lib.hellocharts.f.r.d` @type ^`float`;
  #L3df916.  call `writeFloat`(v1, v2) @signature `Landroid/os/Parcel;.writeFloat:(F)V` @kind virtual;
  #L3df91c.  return @kind void;
}
