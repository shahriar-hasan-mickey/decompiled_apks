record `lecho.lib.hellocharts.f.n` @kind class @AccessFlag PUBLIC {
  `int` `lecho.lib.hellocharts.f.n.a` @AccessFlag PRIVATE;
  `int` `lecho.lib.hellocharts.f.n.b` @AccessFlag PRIVATE;
  `lecho.lib.hellocharts.f.n$a` `lecho.lib.hellocharts.f.n.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`lecho.lib.hellocharts.f.n` v1 @kind this) @signature `Llecho/lib/hellocharts/f/n;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3dec64.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3dec6a.  v0:= `@@lecho.lib.hellocharts.f.n$a.a` @type ^`lecho.lib.hellocharts.f.n$a` @kind object;
  #L3dec6e.  v1.`lecho.lib.hellocharts.f.n.c` @type ^`lecho.lib.hellocharts.f.n$a` := v0 @kind object;
  #L3dec72.  call `a`(v1) @signature `Llecho/lib/hellocharts/f/n;.a:()V` @kind virtual;
  #L3dec78.  return @kind void;
}
procedure `void` `a`(`lecho.lib.hellocharts.f.n` v2 @kind this) @signature `Llecho/lib/hellocharts/f/n;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3dec8c.  v0:= `@@lecho.lib.hellocharts.f.n$a.a` @type ^`lecho.lib.hellocharts.f.n$a` @kind object;
  #L3dec90.  v1:= -2147483648I;
  #L3dec94.  call `a`(v2, v1, v1, v0) @signature `Llecho/lib/hellocharts/f/n;.a:(IILlecho/lib/hellocharts/f/n$a;)V` @kind virtual;
  #L3dec9a.  return @kind void;
}
procedure `void` `a`(`lecho.lib.hellocharts.f.n` v0 @kind this, `int` v1 , `int` v2 , `lecho.lib.hellocharts.f.n$a` v3 @kind object) @signature `Llecho/lib/hellocharts/f/n;.a:(IILlecho/lib/hellocharts/f/n$a;)V` @AccessFlag PUBLIC {
    temp;

  #L3decac.  v0.`lecho.lib.hellocharts.f.n.a` @type ^`int` := v1;
  #L3decb0.  v0.`lecho.lib.hellocharts.f.n.b` @type ^`int` := v2;
  #L3decb4.  if v3 == 0 then goto L3decbe;
  #L3decb8.  v0.`lecho.lib.hellocharts.f.n.c` @type ^`lecho.lib.hellocharts.f.n$a` := v3 @kind object;
  #L3decbc.  goto L3decc6;
  #L3decbe.  v1:= `@@lecho.lib.hellocharts.f.n$a.a` @type ^`lecho.lib.hellocharts.f.n$a` @kind object;
  #L3decc2.  v0.`lecho.lib.hellocharts.f.n.c` @type ^`lecho.lib.hellocharts.f.n$a` := v1 @kind object;
  #L3decc6.  return @kind void;
}
procedure `void` `a`(`lecho.lib.hellocharts.f.n` v1 @kind this, `lecho.lib.hellocharts.f.n` v2 @kind object) @signature `Llecho/lib/hellocharts/f/n;.a:(Llecho/lib/hellocharts/f/n;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3decd8.  v0:= v2.`lecho.lib.hellocharts.f.n.a` @type ^`int`;
  #L3decdc.  v1.`lecho.lib.hellocharts.f.n.a` @type ^`int` := v0;
  #L3dece0.  v0:= v2.`lecho.lib.hellocharts.f.n.b` @type ^`int`;
  #L3dece4.  v1.`lecho.lib.hellocharts.f.n.b` @type ^`int` := v0;
  #L3dece8.  v2:= v2.`lecho.lib.hellocharts.f.n.c` @type ^`lecho.lib.hellocharts.f.n$a` @kind object;
  #L3decec.  v1.`lecho.lib.hellocharts.f.n.c` @type ^`lecho.lib.hellocharts.f.n$a` := v2 @kind object;
  #L3decf0.  return @kind void;
}
procedure `boolean` `b`(`lecho.lib.hellocharts.f.n` v1 @kind this) @signature `Llecho/lib/hellocharts/f/n;.b:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3deadc.  v0:= v1.`lecho.lib.hellocharts.f.n.a` @type ^`int`;
  #L3deae0.  if v0 < 0 then goto L3deaf0;
  #L3deae4.  v0:= v1.`lecho.lib.hellocharts.f.n.b` @type ^`int`;
  #L3deae8.  if v0 < 0 then goto L3deaf0;
  #L3deaec.  v0:= 1I;
  #L3deaee.  return v0;
  #L3deaf0.  v0:= 0I;
  #L3deaf2.  return v0;
}
procedure `int` `c`(`lecho.lib.hellocharts.f.n` v1 @kind this) @signature `Llecho/lib/hellocharts/f/n;.c:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3deb6c.  v0:= v1.`lecho.lib.hellocharts.f.n.a` @type ^`int`;
  #L3deb70.  return v0;
}
procedure `int` `d`(`lecho.lib.hellocharts.f.n` v1 @kind this) @signature `Llecho/lib/hellocharts/f/n;.d:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3deb84.  v0:= v1.`lecho.lib.hellocharts.f.n.b` @type ^`int`;
  #L3deb88.  return v0;
}
procedure `lecho.lib.hellocharts.f.n$a` `e`(`lecho.lib.hellocharts.f.n` v1 @kind this) @signature `Llecho/lib/hellocharts/f/n;.e:()Llecho/lib/hellocharts/f/n$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3dec4c.  v0:= v1.`lecho.lib.hellocharts.f.n.c` @type ^`lecho.lib.hellocharts.f.n$a` @kind object;
  #L3dec50.  return v0 @kind object;
}
procedure `boolean` `equals`(`lecho.lib.hellocharts.f.n` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Llecho/lib/hellocharts/f/n;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3deb04.  v0:= 1I;
  #L3deb06.  if v4 != v5 then goto L3deb0c;
  #L3deb0a.  return v0;
  #L3deb0c.  v1:= 0I;
  #L3deb0e.  if v5 != 0 then goto L3deb14;
  #L3deb12.  return v1;
  #L3deb14.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3deb1a.  v2:= temp @kind object;
  #L3deb1c.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3deb22.  v3:= temp @kind object;
  #L3deb24.  if v2 == v3 then goto L3deb2a;
  #L3deb28.  return v1;
  #L3deb2a.  v5:= (`lecho.lib.hellocharts.f.n`) v5 @kind object;
  #L3deb2e.  v2:= v4.`lecho.lib.hellocharts.f.n.a` @type ^`int`;
  #L3deb32.  v3:= v5.`lecho.lib.hellocharts.f.n.a` @type ^`int`;
  #L3deb36.  if v2 == v3 then goto L3deb3c;
  #L3deb3a.  return v1;
  #L3deb3c.  v2:= v4.`lecho.lib.hellocharts.f.n.b` @type ^`int`;
  #L3deb40.  v3:= v5.`lecho.lib.hellocharts.f.n.b` @type ^`int`;
  #L3deb44.  if v2 == v3 then goto L3deb4a;
  #L3deb48.  return v1;
  #L3deb4a.  v2:= v4.`lecho.lib.hellocharts.f.n.c` @type ^`lecho.lib.hellocharts.f.n$a` @kind object;
  #L3deb4e.  v5:= v5.`lecho.lib.hellocharts.f.n.c` @type ^`lecho.lib.hellocharts.f.n$a` @kind object;
  #L3deb52.  if v2 == v5 then goto L3deb58;
  #L3deb56.  return v1;
  #L3deb58.  return v0;
}
procedure `int` `hashCode`(`lecho.lib.hellocharts.f.n` v3 @kind this) @signature `Llecho/lib/hellocharts/f/n;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3deb9c.  v0:= v3.`lecho.lib.hellocharts.f.n.a` @type ^`int`;
  #L3deba0.  v1:= 31I;
  #L3deba4.  v0:= v0 + v1 @kind int;
  #L3deba6.  v0:= v0 * 31;
  #L3debaa.  v2:= v3.`lecho.lib.hellocharts.f.n.b` @type ^`int`;
  #L3debae.  v0:= v0 + v2 @kind int;
  #L3debb0.  v0:= v0 * 31;
  #L3debb4.  v1:= v3.`lecho.lib.hellocharts.f.n.c` @type ^`lecho.lib.hellocharts.f.n$a` @kind object;
  #L3debb8.  if v1 != 0 then goto L3debc0;
  #L3debbc.  v1:= 0I;
  #L3debbe.  goto L3debcc;
  #L3debc0.  v1:= v3.`lecho.lib.hellocharts.f.n.c` @type ^`lecho.lib.hellocharts.f.n$a` @kind object;
  #L3debc4.  call temp:= `hashCode`(v1) @signature `Llecho/lib/hellocharts/f/n$a;.hashCode:()I` @kind virtual;
  #L3debca.  v1:= temp;
  #L3debcc.  v0:= v0 + v1 @kind int;
  #L3debce.  return v0;
}
procedure `java.lang.String` `toString`(`lecho.lib.hellocharts.f.n` v2 @kind this) @signature `Llecho/lib/hellocharts/f/n;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3debe0.  v0:= new `java.lang.StringBuilder`;
  #L3debe4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3debea.  v1:= "SelectedValue [firstIndex=" @kind object;
  #L3debee.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3debf4.  v1:= v2.`lecho.lib.hellocharts.f.n.a` @type ^`int`;
  #L3debf8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3debfe.  v1:= ", secondIndex=" @kind object;
  #L3dec02.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3dec08.  v1:= v2.`lecho.lib.hellocharts.f.n.b` @type ^`int`;
  #L3dec0c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3dec12.  v1:= ", type=" @kind object;
  #L3dec16.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3dec1c.  v1:= v2.`lecho.lib.hellocharts.f.n.c` @type ^`lecho.lib.hellocharts.f.n$a` @kind object;
  #L3dec20.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3dec26.  v1:= "]" @kind object;
  #L3dec2a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3dec30.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3dec36.  v0:= temp @kind object;
  #L3dec38.  return v0 @kind object;
}
