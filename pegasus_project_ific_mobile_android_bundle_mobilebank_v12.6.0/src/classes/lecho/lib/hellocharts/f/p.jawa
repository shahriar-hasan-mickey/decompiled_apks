record `lecho.lib.hellocharts.f.p` @kind class @AccessFlag PUBLIC {
  `float` `lecho.lib.hellocharts.f.p.a` @AccessFlag PRIVATE;
  `float` `lecho.lib.hellocharts.f.p.b` @AccessFlag PRIVATE;
  `float` `lecho.lib.hellocharts.f.p.c` @AccessFlag PRIVATE;
  `int` `lecho.lib.hellocharts.f.p.d` @AccessFlag PRIVATE;
  `int` `lecho.lib.hellocharts.f.p.e` @AccessFlag PRIVATE;
  `char`[] `lecho.lib.hellocharts.f.p.f` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`lecho.lib.hellocharts.f.p` v1 @kind this) @signature `Llecho/lib/hellocharts/f/p;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3df290.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3df296.  v0:= `@@lecho.lib.hellocharts.i.b.a` @type ^`int`;
  #L3df29a.  v1.`lecho.lib.hellocharts.f.p.d` @type ^`int` := v0;
  #L3df29e.  v0:= `@@lecho.lib.hellocharts.i.b.b` @type ^`int`;
  #L3df2a2.  v1.`lecho.lib.hellocharts.f.p.e` @type ^`int` := v0;
  #L3df2a6.  v0:= 0I;
  #L3df2a8.  call temp:= `b`(v1, v0) @signature `Llecho/lib/hellocharts/f/p;.b:(F)Llecho/lib/hellocharts/f/p;` @kind virtual;
  #L3df2ae.  return @kind void;
}
procedure `void` `<init>`(`lecho.lib.hellocharts.f.p` v1 @kind this, `float` v2 ) @signature `Llecho/lib/hellocharts/f/p;.<init>:(F)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3df2c0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3df2c6.  v0:= `@@lecho.lib.hellocharts.i.b.a` @type ^`int`;
  #L3df2ca.  v1.`lecho.lib.hellocharts.f.p.d` @type ^`int` := v0;
  #L3df2ce.  v0:= `@@lecho.lib.hellocharts.i.b.b` @type ^`int`;
  #L3df2d2.  v1.`lecho.lib.hellocharts.f.p.e` @type ^`int` := v0;
  #L3df2d6.  call temp:= `b`(v1, v2) @signature `Llecho/lib/hellocharts/f/p;.b:(F)Llecho/lib/hellocharts/f/p;` @kind virtual;
  #L3df2dc.  return @kind void;
}
procedure `void` `a`(`lecho.lib.hellocharts.f.p` v2 @kind this) @signature `Llecho/lib/hellocharts/f/p;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3df2f0.  v0:= v2.`lecho.lib.hellocharts.f.p.b` @type ^`float`;
  #L3df2f4.  v1:= v2.`lecho.lib.hellocharts.f.p.c` @type ^`float`;
  #L3df2f8.  v0:= v0 + v1 @kind float;
  #L3df2fa.  call temp:= `b`(v2, v0) @signature `Llecho/lib/hellocharts/f/p;.b:(F)Llecho/lib/hellocharts/f/p;` @kind virtual;
  #L3df300.  return @kind void;
}
procedure `void` `a`(`lecho.lib.hellocharts.f.p` v2 @kind this, `float` v3 ) @signature `Llecho/lib/hellocharts/f/p;.a:(F)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3df314.  v0:= v2.`lecho.lib.hellocharts.f.p.b` @type ^`float`;
  #L3df318.  v1:= v2.`lecho.lib.hellocharts.f.p.c` @type ^`float`;
  #L3df31c.  v1:= v1 * v3 @kind float;
  #L3df320.  v0:= v0 + v1 @kind float;
  #L3df322.  v2.`lecho.lib.hellocharts.f.p.a` @type ^`float` := v0;
  #L3df326.  return @kind void;
}
procedure `float` `b`(`lecho.lib.hellocharts.f.p` v1 @kind this) @signature `Llecho/lib/hellocharts/f/p;.b:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3df140.  v0:= v1.`lecho.lib.hellocharts.f.p.a` @type ^`float`;
  #L3df144.  return v0;
}
procedure `lecho.lib.hellocharts.f.p` `b`(`lecho.lib.hellocharts.f.p` v0 @kind this, `float` v1 ) @signature `Llecho/lib/hellocharts/f/p;.b:(F)Llecho/lib/hellocharts/f/p;` @AccessFlag PUBLIC {
    temp;

  #L3df270.  v0.`lecho.lib.hellocharts.f.p.a` @type ^`float` := v1;
  #L3df274.  v0.`lecho.lib.hellocharts.f.p.b` @type ^`float` := v1;
  #L3df278.  v1:= 0I;
  #L3df27a.  v0.`lecho.lib.hellocharts.f.p.c` @type ^`float` := v1;
  #L3df27e.  return v0 @kind object;
}
procedure `int` `c`(`lecho.lib.hellocharts.f.p` v1 @kind this) @signature `Llecho/lib/hellocharts/f/p;.c:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3df158.  v0:= v1.`lecho.lib.hellocharts.f.p.d` @type ^`int`;
  #L3df15c.  return v0;
}
procedure `int` `d`(`lecho.lib.hellocharts.f.p` v1 @kind this) @signature `Llecho/lib/hellocharts/f/p;.d:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3df170.  v0:= v1.`lecho.lib.hellocharts.f.p.e` @type ^`int`;
  #L3df174.  return v0;
}
procedure `char`[] `e`(`lecho.lib.hellocharts.f.p` v1 @kind this) @signature `Llecho/lib/hellocharts/f/p;.e:()[C` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3df128.  v0:= v1.`lecho.lib.hellocharts.f.p.f` @type ^`char`[] @kind object;
  #L3df12c.  return v0 @kind object;
}
procedure `boolean` `equals`(`lecho.lib.hellocharts.f.p` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Llecho/lib/hellocharts/f/p;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3df078.  v0:= 1I;
  #L3df07a.  if v4 != v5 then goto L3df080;
  #L3df07e.  return v0;
  #L3df080.  v1:= 0I;
  #L3df082.  if v5 == 0 then goto L3df116;
  #L3df086.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3df08c.  v2:= temp @kind object;
  #L3df08e.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3df094.  v3:= temp @kind object;
  #L3df096.  if v2 == v3 then goto L3df09c;
  #L3df09a.  goto L3df116;
  #L3df09c.  v5:= (`lecho.lib.hellocharts.f.p`) v5 @kind object;
  #L3df0a0.  v2:= v4.`lecho.lib.hellocharts.f.p.d` @type ^`int`;
  #L3df0a4.  v3:= v5.`lecho.lib.hellocharts.f.p.d` @type ^`int`;
  #L3df0a8.  if v2 == v3 then goto L3df0ae;
  #L3df0ac.  return v1;
  #L3df0ae.  v2:= v4.`lecho.lib.hellocharts.f.p.e` @type ^`int`;
  #L3df0b2.  v3:= v5.`lecho.lib.hellocharts.f.p.e` @type ^`int`;
  #L3df0b6.  if v2 == v3 then goto L3df0bc;
  #L3df0ba.  return v1;
  #L3df0bc.  v2:= v5.`lecho.lib.hellocharts.f.p.c` @type ^`float`;
  #L3df0c0.  v3:= v4.`lecho.lib.hellocharts.f.p.c` @type ^`float`;
  #L3df0c4.  call temp:= `compare`(v2, v3) @signature `Ljava/lang/Float;.compare:(FF)I` @kind static;
  #L3df0ca.  v2:= temp;
  #L3df0cc.  if v2 == 0 then goto L3df0d2;
  #L3df0d0.  return v1;
  #L3df0d2.  v2:= v5.`lecho.lib.hellocharts.f.p.b` @type ^`float`;
  #L3df0d6.  v3:= v4.`lecho.lib.hellocharts.f.p.b` @type ^`float`;
  #L3df0da.  call temp:= `compare`(v2, v3) @signature `Ljava/lang/Float;.compare:(FF)I` @kind static;
  #L3df0e0.  v2:= temp;
  #L3df0e2.  if v2 == 0 then goto L3df0e8;
  #L3df0e6.  return v1;
  #L3df0e8.  v2:= v5.`lecho.lib.hellocharts.f.p.a` @type ^`float`;
  #L3df0ec.  v3:= v4.`lecho.lib.hellocharts.f.p.a` @type ^`float`;
  #L3df0f0.  call temp:= `compare`(v2, v3) @signature `Ljava/lang/Float;.compare:(FF)I` @kind static;
  #L3df0f6.  v2:= temp;
  #L3df0f8.  if v2 == 0 then goto L3df0fe;
  #L3df0fc.  return v1;
  #L3df0fe.  v2:= v4.`lecho.lib.hellocharts.f.p.f` @type ^`char`[] @kind object;
  #L3df102.  v5:= v5.`lecho.lib.hellocharts.f.p.f` @type ^`char`[] @kind object;
  #L3df106.  call temp:= `equals`(v2, v5) @signature `Ljava/util/Arrays;.equals:([C[C)Z` @kind static;
  #L3df10c.  v5:= temp;
  #L3df10e.  if v5 != 0 then goto L3df114;
  #L3df112.  return v1;
  #L3df114.  return v0;
  #L3df116.  return v1;
}
procedure `int` `hashCode`(`lecho.lib.hellocharts.f.p` v4 @kind this) @signature `Llecho/lib/hellocharts/f/p;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3df188.  v0:= v4.`lecho.lib.hellocharts.f.p.a` @type ^`float`;
  #L3df18c.  v1:= 0I;
  #L3df18e.  v0:= fcmpl(v0, v1);
  #L3df192.  v2:= 0I;
  #L3df194.  if v0 == 0 then goto L3df1a6;
  #L3df198.  v0:= v4.`lecho.lib.hellocharts.f.p.a` @type ^`float`;
  #L3df19c.  call temp:= `floatToIntBits`(v0) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L3df1a2.  v0:= temp;
  #L3df1a4.  goto L3df1a8;
  #L3df1a6.  v0:= 0I;
  #L3df1a8.  v0:= v0 * 31;
  #L3df1ac.  v3:= v4.`lecho.lib.hellocharts.f.p.b` @type ^`float`;
  #L3df1b0.  v3:= fcmpl(v3, v1);
  #L3df1b4.  if v3 == 0 then goto L3df1c6;
  #L3df1b8.  v3:= v4.`lecho.lib.hellocharts.f.p.b` @type ^`float`;
  #L3df1bc.  call temp:= `floatToIntBits`(v3) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L3df1c2.  v3:= temp;
  #L3df1c4.  goto L3df1c8;
  #L3df1c6.  v3:= 0I;
  #L3df1c8.  v0:= v0 + v3 @kind int;
  #L3df1ca.  v0:= v0 * 31;
  #L3df1ce.  v3:= v4.`lecho.lib.hellocharts.f.p.c` @type ^`float`;
  #L3df1d2.  v1:= fcmpl(v3, v1);
  #L3df1d6.  if v1 == 0 then goto L3df1e8;
  #L3df1da.  v1:= v4.`lecho.lib.hellocharts.f.p.c` @type ^`float`;
  #L3df1de.  call temp:= `floatToIntBits`(v1) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L3df1e4.  v1:= temp;
  #L3df1e6.  goto L3df1ea;
  #L3df1e8.  v1:= 0I;
  #L3df1ea.  v0:= v0 + v1 @kind int;
  #L3df1ec.  v0:= v0 * 31;
  #L3df1f0.  v1:= v4.`lecho.lib.hellocharts.f.p.d` @type ^`int`;
  #L3df1f4.  v0:= v0 + v1 @kind int;
  #L3df1f6.  v0:= v0 * 31;
  #L3df1fa.  v1:= v4.`lecho.lib.hellocharts.f.p.e` @type ^`int`;
  #L3df1fe.  v0:= v0 + v1 @kind int;
  #L3df200.  v0:= v0 * 31;
  #L3df204.  v1:= v4.`lecho.lib.hellocharts.f.p.f` @type ^`char`[] @kind object;
  #L3df208.  if v1 == 0 then goto L3df218;
  #L3df20c.  v1:= v4.`lecho.lib.hellocharts.f.p.f` @type ^`char`[] @kind object;
  #L3df210.  call temp:= `hashCode`(v1) @signature `Ljava/util/Arrays;.hashCode:([C)I` @kind static;
  #L3df216.  v2:= temp;
  #L3df218.  v0:= v0 + v2 @kind int;
  #L3df21a.  return v0;
}
procedure `java.lang.String` `toString`(`lecho.lib.hellocharts.f.p` v2 @kind this) @signature `Llecho/lib/hellocharts/f/p;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3df22c.  v0:= new `java.lang.StringBuilder`;
  #L3df230.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3df236.  v1:= "ColumnValue [value=" @kind object;
  #L3df23a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3df240.  v1:= v2.`lecho.lib.hellocharts.f.p.a` @type ^`float`;
  #L3df244.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(F)Ljava/lang/StringBuilder;` @kind virtual;
  #L3df24a.  v1:= "]" @kind object;
  #L3df24e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3df254.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3df25a.  v0:= temp @kind object;
  #L3df25c.  return v0 @kind object;
}
