record `lecho.lib.hellocharts.f.o` @kind class @AccessFlag PUBLIC {
  `int` `lecho.lib.hellocharts.f.o.a` @AccessFlag PRIVATE;
  `float` `lecho.lib.hellocharts.f.o.b` @AccessFlag PRIVATE;
  `float` `lecho.lib.hellocharts.f.o.c` @AccessFlag PRIVATE;
  `float` `lecho.lib.hellocharts.f.o.d` @AccessFlag PRIVATE;
  `int` `lecho.lib.hellocharts.f.o.e` @AccessFlag PRIVATE;
  `int` `lecho.lib.hellocharts.f.o.f` @AccessFlag PRIVATE;
  `char`[] `lecho.lib.hellocharts.f.o.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`lecho.lib.hellocharts.f.o` v1 @kind this) @signature `Llecho/lib/hellocharts/f/o;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3def84.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3def8a.  v0:= 2I;
  #L3def8c.  v1.`lecho.lib.hellocharts.f.o.a` @type ^`int` := v0;
  #L3def90.  v0:= `@@lecho.lib.hellocharts.i.b.a` @type ^`int`;
  #L3def94.  v1.`lecho.lib.hellocharts.f.o.e` @type ^`int` := v0;
  #L3def98.  v0:= `@@lecho.lib.hellocharts.i.b.b` @type ^`int`;
  #L3def9c.  v1.`lecho.lib.hellocharts.f.o.f` @type ^`int` := v0;
  #L3defa0.  v0:= 0I;
  #L3defa2.  call temp:= `b`(v1, v0) @signature `Llecho/lib/hellocharts/f/o;.b:(F)Llecho/lib/hellocharts/f/o;` @kind virtual;
  #L3defa8.  return @kind void;
}
procedure `void` `<init>`(`lecho.lib.hellocharts.f.o` v1 @kind this, `float` v2 ) @signature `Llecho/lib/hellocharts/f/o;.<init>:(F)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3defbc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3defc2.  v0:= 2I;
  #L3defc4.  v1.`lecho.lib.hellocharts.f.o.a` @type ^`int` := v0;
  #L3defc8.  v0:= `@@lecho.lib.hellocharts.i.b.a` @type ^`int`;
  #L3defcc.  v1.`lecho.lib.hellocharts.f.o.e` @type ^`int` := v0;
  #L3defd0.  v0:= `@@lecho.lib.hellocharts.i.b.b` @type ^`int`;
  #L3defd4.  v1.`lecho.lib.hellocharts.f.o.f` @type ^`int` := v0;
  #L3defd8.  call temp:= `b`(v1, v2) @signature `Llecho/lib/hellocharts/f/o;.b:(F)Llecho/lib/hellocharts/f/o;` @kind virtual;
  #L3defde.  return @kind void;
}
procedure `void` `<init>`(`lecho.lib.hellocharts.f.o` v1 @kind this, `float` v2 , `int` v3 , `int` v4 ) @signature `Llecho/lib/hellocharts/f/o;.<init>:(FII)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3deff0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3deff6.  v0:= 2I;
  #L3deff8.  v1.`lecho.lib.hellocharts.f.o.a` @type ^`int` := v0;
  #L3deffc.  v0:= `@@lecho.lib.hellocharts.i.b.a` @type ^`int`;
  #L3df000.  v1.`lecho.lib.hellocharts.f.o.e` @type ^`int` := v0;
  #L3df004.  v0:= `@@lecho.lib.hellocharts.i.b.b` @type ^`int`;
  #L3df008.  v1.`lecho.lib.hellocharts.f.o.f` @type ^`int` := v0;
  #L3df00c.  call temp:= `b`(v1, v2) @signature `Llecho/lib/hellocharts/f/o;.b:(F)Llecho/lib/hellocharts/f/o;` @kind virtual;
  #L3df012.  call temp:= `a`(v1, v3) @signature `Llecho/lib/hellocharts/f/o;.a:(I)Llecho/lib/hellocharts/f/o;` @kind virtual;
  #L3df018.  v1.`lecho.lib.hellocharts.f.o.a` @type ^`int` := v4;
  #L3df01c.  return @kind void;
}
procedure `lecho.lib.hellocharts.f.o` `a`(`lecho.lib.hellocharts.f.o` v0 @kind this, `int` v1 ) @signature `Llecho/lib/hellocharts/f/o;.a:(I)Llecho/lib/hellocharts/f/o;` @AccessFlag PUBLIC {
    temp;

  #L3def18.  v0.`lecho.lib.hellocharts.f.o.e` @type ^`int` := v1;
  #L3def1c.  call temp:= `a`(v1) @signature `Llecho/lib/hellocharts/i/b;.a:(I)I` @kind static;
  #L3def22.  v1:= temp;
  #L3def24.  v0.`lecho.lib.hellocharts.f.o.f` @type ^`int` := v1;
  #L3def28.  return v0 @kind object;
}
procedure `void` `a`(`lecho.lib.hellocharts.f.o` v2 @kind this) @signature `Llecho/lib/hellocharts/f/o;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3df030.  v0:= v2.`lecho.lib.hellocharts.f.o.c` @type ^`float`;
  #L3df034.  v1:= v2.`lecho.lib.hellocharts.f.o.d` @type ^`float`;
  #L3df038.  v0:= v0 + v1 @kind float;
  #L3df03a.  call temp:= `b`(v2, v0) @signature `Llecho/lib/hellocharts/f/o;.b:(F)Llecho/lib/hellocharts/f/o;` @kind virtual;
  #L3df040.  return @kind void;
}
procedure `void` `a`(`lecho.lib.hellocharts.f.o` v2 @kind this, `float` v3 ) @signature `Llecho/lib/hellocharts/f/o;.a:(F)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3df054.  v0:= v2.`lecho.lib.hellocharts.f.o.c` @type ^`float`;
  #L3df058.  v1:= v2.`lecho.lib.hellocharts.f.o.d` @type ^`float`;
  #L3df05c.  v1:= v1 * v3 @kind float;
  #L3df060.  v0:= v0 + v1 @kind float;
  #L3df062.  v2.`lecho.lib.hellocharts.f.o.b` @type ^`float` := v0;
  #L3df066.  return @kind void;
}
procedure `float` `b`(`lecho.lib.hellocharts.f.o` v1 @kind this) @signature `Llecho/lib/hellocharts/f/o;.b:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3deddc.  v0:= v1.`lecho.lib.hellocharts.f.o.b` @type ^`float`;
  #L3dede0.  return v0;
}
procedure `lecho.lib.hellocharts.f.o` `b`(`lecho.lib.hellocharts.f.o` v0 @kind this, `float` v1 ) @signature `Llecho/lib/hellocharts/f/o;.b:(F)Llecho/lib/hellocharts/f/o;` @AccessFlag PUBLIC {
    temp;

  #L3def3c.  v0.`lecho.lib.hellocharts.f.o.b` @type ^`float` := v1;
  #L3def40.  v0.`lecho.lib.hellocharts.f.o.c` @type ^`float` := v1;
  #L3def44.  v1:= 0I;
  #L3def46.  v0.`lecho.lib.hellocharts.f.o.d` @type ^`float` := v1;
  #L3def4a.  return v0 @kind object;
}
procedure `int` `c`(`lecho.lib.hellocharts.f.o` v1 @kind this) @signature `Llecho/lib/hellocharts/f/o;.c:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3dedf4.  v0:= v1.`lecho.lib.hellocharts.f.o.e` @type ^`int`;
  #L3dedf8.  return v0;
}
procedure `lecho.lib.hellocharts.f.o` `c`(`lecho.lib.hellocharts.f.o` v1 @kind this, `float` v2 ) @signature `Llecho/lib/hellocharts/f/o;.c:(F)Llecho/lib/hellocharts/f/o;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3def5c.  v0:= v1.`lecho.lib.hellocharts.f.o.b` @type ^`float`;
  #L3def60.  call temp:= `b`(v1, v0) @signature `Llecho/lib/hellocharts/f/o;.b:(F)Llecho/lib/hellocharts/f/o;` @kind virtual;
  #L3def66.  v0:= v1.`lecho.lib.hellocharts.f.o.c` @type ^`float`;
  #L3def6a.  v2:= v2 - v0 @kind float;
  #L3def6c.  v1.`lecho.lib.hellocharts.f.o.d` @type ^`float` := v2;
  #L3def70.  return v1 @kind object;
}
procedure `int` `d`(`lecho.lib.hellocharts.f.o` v1 @kind this) @signature `Llecho/lib/hellocharts/f/o;.d:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3dee0c.  v0:= v1.`lecho.lib.hellocharts.f.o.f` @type ^`int`;
  #L3dee10.  return v0;
}
procedure `char`[] `e`(`lecho.lib.hellocharts.f.o` v1 @kind this) @signature `Llecho/lib/hellocharts/f/o;.e:()[C` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3dedc4.  v0:= v1.`lecho.lib.hellocharts.f.o.g` @type ^`char`[] @kind object;
  #L3dedc8.  return v0 @kind object;
}
procedure `boolean` `equals`(`lecho.lib.hellocharts.f.o` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Llecho/lib/hellocharts/f/o;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3ded04.  v0:= 1I;
  #L3ded06.  if v4 != v5 then goto L3ded0c;
  #L3ded0a.  return v0;
  #L3ded0c.  v1:= 0I;
  #L3ded0e.  if v5 == 0 then goto L3dedb0;
  #L3ded12.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3ded18.  v2:= temp @kind object;
  #L3ded1a.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3ded20.  v3:= temp @kind object;
  #L3ded22.  if v2 == v3 then goto L3ded28;
  #L3ded26.  goto L3dedb0;
  #L3ded28.  v5:= (`lecho.lib.hellocharts.f.o`) v5 @kind object;
  #L3ded2c.  v2:= v4.`lecho.lib.hellocharts.f.o.e` @type ^`int`;
  #L3ded30.  v3:= v5.`lecho.lib.hellocharts.f.o.e` @type ^`int`;
  #L3ded34.  if v2 == v3 then goto L3ded3a;
  #L3ded38.  return v1;
  #L3ded3a.  v2:= v4.`lecho.lib.hellocharts.f.o.f` @type ^`int`;
  #L3ded3e.  v3:= v5.`lecho.lib.hellocharts.f.o.f` @type ^`int`;
  #L3ded42.  if v2 == v3 then goto L3ded48;
  #L3ded46.  return v1;
  #L3ded48.  v2:= v5.`lecho.lib.hellocharts.f.o.d` @type ^`float`;
  #L3ded4c.  v3:= v4.`lecho.lib.hellocharts.f.o.d` @type ^`float`;
  #L3ded50.  call temp:= `compare`(v2, v3) @signature `Ljava/lang/Float;.compare:(FF)I` @kind static;
  #L3ded56.  v2:= temp;
  #L3ded58.  if v2 == 0 then goto L3ded5e;
  #L3ded5c.  return v1;
  #L3ded5e.  v2:= v5.`lecho.lib.hellocharts.f.o.c` @type ^`float`;
  #L3ded62.  v3:= v4.`lecho.lib.hellocharts.f.o.c` @type ^`float`;
  #L3ded66.  call temp:= `compare`(v2, v3) @signature `Ljava/lang/Float;.compare:(FF)I` @kind static;
  #L3ded6c.  v2:= temp;
  #L3ded6e.  if v2 == 0 then goto L3ded74;
  #L3ded72.  return v1;
  #L3ded74.  v2:= v4.`lecho.lib.hellocharts.f.o.a` @type ^`int`;
  #L3ded78.  v3:= v5.`lecho.lib.hellocharts.f.o.a` @type ^`int`;
  #L3ded7c.  if v2 == v3 then goto L3ded82;
  #L3ded80.  return v1;
  #L3ded82.  v2:= v5.`lecho.lib.hellocharts.f.o.b` @type ^`float`;
  #L3ded86.  v3:= v4.`lecho.lib.hellocharts.f.o.b` @type ^`float`;
  #L3ded8a.  call temp:= `compare`(v2, v3) @signature `Ljava/lang/Float;.compare:(FF)I` @kind static;
  #L3ded90.  v2:= temp;
  #L3ded92.  if v2 == 0 then goto L3ded98;
  #L3ded96.  return v1;
  #L3ded98.  v2:= v4.`lecho.lib.hellocharts.f.o.g` @type ^`char`[] @kind object;
  #L3ded9c.  v5:= v5.`lecho.lib.hellocharts.f.o.g` @type ^`char`[] @kind object;
  #L3deda0.  call temp:= `equals`(v2, v5) @signature `Ljava/util/Arrays;.equals:([C[C)Z` @kind static;
  #L3deda6.  v5:= temp;
  #L3deda8.  if v5 != 0 then goto L3dedae;
  #L3dedac.  return v1;
  #L3dedae.  return v0;
  #L3dedb0.  return v1;
}
procedure `int` `hashCode`(`lecho.lib.hellocharts.f.o` v4 @kind this) @signature `Llecho/lib/hellocharts/f/o;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3dee24.  v0:= v4.`lecho.lib.hellocharts.f.o.b` @type ^`float`;
  #L3dee28.  v1:= 0I;
  #L3dee2a.  v0:= fcmpl(v0, v1);
  #L3dee2e.  v2:= 0I;
  #L3dee30.  if v0 == 0 then goto L3dee42;
  #L3dee34.  v0:= v4.`lecho.lib.hellocharts.f.o.b` @type ^`float`;
  #L3dee38.  call temp:= `floatToIntBits`(v0) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L3dee3e.  v0:= temp;
  #L3dee40.  goto L3dee44;
  #L3dee42.  v0:= 0I;
  #L3dee44.  v0:= v0 * 31;
  #L3dee48.  v3:= v4.`lecho.lib.hellocharts.f.o.c` @type ^`float`;
  #L3dee4c.  v3:= fcmpl(v3, v1);
  #L3dee50.  if v3 == 0 then goto L3dee62;
  #L3dee54.  v3:= v4.`lecho.lib.hellocharts.f.o.c` @type ^`float`;
  #L3dee58.  call temp:= `floatToIntBits`(v3) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L3dee5e.  v3:= temp;
  #L3dee60.  goto L3dee64;
  #L3dee62.  v3:= 0I;
  #L3dee64.  v0:= v0 + v3 @kind int;
  #L3dee66.  v0:= v0 * 31;
  #L3dee6a.  v3:= v4.`lecho.lib.hellocharts.f.o.d` @type ^`float`;
  #L3dee6e.  v1:= fcmpl(v3, v1);
  #L3dee72.  if v1 == 0 then goto L3dee84;
  #L3dee76.  v1:= v4.`lecho.lib.hellocharts.f.o.d` @type ^`float`;
  #L3dee7a.  call temp:= `floatToIntBits`(v1) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L3dee80.  v1:= temp;
  #L3dee82.  goto L3dee86;
  #L3dee84.  v1:= 0I;
  #L3dee86.  v0:= v0 + v1 @kind int;
  #L3dee88.  v0:= v0 * 31;
  #L3dee8c.  v1:= v4.`lecho.lib.hellocharts.f.o.e` @type ^`int`;
  #L3dee90.  v0:= v0 + v1 @kind int;
  #L3dee92.  v0:= v0 * 31;
  #L3dee96.  v1:= v4.`lecho.lib.hellocharts.f.o.f` @type ^`int`;
  #L3dee9a.  v0:= v0 + v1 @kind int;
  #L3dee9c.  v0:= v0 * 31;
  #L3deea0.  v1:= v4.`lecho.lib.hellocharts.f.o.a` @type ^`int`;
  #L3deea4.  v0:= v0 + v1 @kind int;
  #L3deea6.  v0:= v0 * 31;
  #L3deeaa.  v1:= v4.`lecho.lib.hellocharts.f.o.g` @type ^`char`[] @kind object;
  #L3deeae.  if v1 == 0 then goto L3deebe;
  #L3deeb2.  v1:= v4.`lecho.lib.hellocharts.f.o.g` @type ^`char`[] @kind object;
  #L3deeb6.  call temp:= `hashCode`(v1) @signature `Ljava/util/Arrays;.hashCode:([C)I` @kind static;
  #L3deebc.  v2:= temp;
  #L3deebe.  v0:= v0 + v2 @kind int;
  #L3deec0.  return v0;
}
procedure `java.lang.String` `toString`(`lecho.lib.hellocharts.f.o` v2 @kind this) @signature `Llecho/lib/hellocharts/f/o;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3deed4.  v0:= new `java.lang.StringBuilder`;
  #L3deed8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3deede.  v1:= "SliceValue [value=" @kind object;
  #L3deee2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3deee8.  v1:= v2.`lecho.lib.hellocharts.f.o.b` @type ^`float`;
  #L3deeec.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(F)Ljava/lang/StringBuilder;` @kind virtual;
  #L3deef2.  v1:= "]" @kind object;
  #L3deef6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3deefc.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3def02.  v0:= temp @kind object;
  #L3def04.  return v0 @kind object;
}
