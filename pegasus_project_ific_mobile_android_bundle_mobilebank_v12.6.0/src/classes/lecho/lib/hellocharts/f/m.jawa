record `lecho.lib.hellocharts.f.m` @kind class @AccessFlag PUBLIC {
  `float` `lecho.lib.hellocharts.f.m.a` @AccessFlag PRIVATE;
  `float` `lecho.lib.hellocharts.f.m.b` @AccessFlag PRIVATE;
  `float` `lecho.lib.hellocharts.f.m.c` @AccessFlag PRIVATE;
  `float` `lecho.lib.hellocharts.f.m.d` @AccessFlag PRIVATE;
  `float` `lecho.lib.hellocharts.f.m.e` @AccessFlag PRIVATE;
  `float` `lecho.lib.hellocharts.f.m.f` @AccessFlag PRIVATE;
  `char`[] `lecho.lib.hellocharts.f.m.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`lecho.lib.hellocharts.f.m` v1 @kind this) @signature `Llecho/lib/hellocharts/f/m;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3de968.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3de96e.  v0:= 0I;
  #L3de970.  call temp:= `a`(v1, v0, v0) @signature `Llecho/lib/hellocharts/f/m;.a:(FF)Llecho/lib/hellocharts/f/m;` @kind virtual;
  #L3de976.  return @kind void;
}
procedure `void` `<init>`(`lecho.lib.hellocharts.f.m` v0 @kind this, `float` v1 , `float` v2 ) @signature `Llecho/lib/hellocharts/f/m;.<init>:(FF)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3de988.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3de98e.  call temp:= `a`(v0, v1, v2) @signature `Llecho/lib/hellocharts/f/m;.a:(FF)Llecho/lib/hellocharts/f/m;` @kind virtual;
  #L3de994.  return @kind void;
}
procedure `lecho.lib.hellocharts.f.m` `a`(`lecho.lib.hellocharts.f.m` v0 @kind this, `float` v1 , `float` v2 ) @signature `Llecho/lib/hellocharts/f/m;.a:(FF)Llecho/lib/hellocharts/f/m;` @AccessFlag PUBLIC {
    temp;

  #L3de93c.  v0.`lecho.lib.hellocharts.f.m.a` @type ^`float` := v1;
  #L3de940.  v0.`lecho.lib.hellocharts.f.m.b` @type ^`float` := v2;
  #L3de944.  v0.`lecho.lib.hellocharts.f.m.c` @type ^`float` := v1;
  #L3de948.  v0.`lecho.lib.hellocharts.f.m.d` @type ^`float` := v2;
  #L3de94c.  v1:= 0I;
  #L3de94e.  v0.`lecho.lib.hellocharts.f.m.e` @type ^`float` := v1;
  #L3de952.  v0.`lecho.lib.hellocharts.f.m.f` @type ^`float` := v1;
  #L3de956.  return v0 @kind object;
}
procedure `void` `a`(`lecho.lib.hellocharts.f.m` v3 @kind this) @signature `Llecho/lib/hellocharts/f/m;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3de9a8.  v0:= v3.`lecho.lib.hellocharts.f.m.c` @type ^`float`;
  #L3de9ac.  v1:= v3.`lecho.lib.hellocharts.f.m.e` @type ^`float`;
  #L3de9b0.  v0:= v0 + v1 @kind float;
  #L3de9b2.  v1:= v3.`lecho.lib.hellocharts.f.m.d` @type ^`float`;
  #L3de9b6.  v2:= v3.`lecho.lib.hellocharts.f.m.f` @type ^`float`;
  #L3de9ba.  v1:= v1 + v2 @kind float;
  #L3de9bc.  call temp:= `a`(v3, v0, v1) @signature `Llecho/lib/hellocharts/f/m;.a:(FF)Llecho/lib/hellocharts/f/m;` @kind virtual;
  #L3de9c2.  return @kind void;
}
procedure `void` `a`(`lecho.lib.hellocharts.f.m` v2 @kind this, `float` v3 ) @signature `Llecho/lib/hellocharts/f/m;.a:(F)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3de9d4.  v0:= v2.`lecho.lib.hellocharts.f.m.c` @type ^`float`;
  #L3de9d8.  v1:= v2.`lecho.lib.hellocharts.f.m.e` @type ^`float`;
  #L3de9dc.  v1:= v1 * v3 @kind float;
  #L3de9e0.  v0:= v0 + v1 @kind float;
  #L3de9e2.  v2.`lecho.lib.hellocharts.f.m.a` @type ^`float` := v0;
  #L3de9e6.  v0:= v2.`lecho.lib.hellocharts.f.m.d` @type ^`float`;
  #L3de9ea.  v1:= v2.`lecho.lib.hellocharts.f.m.f` @type ^`float`;
  #L3de9ee.  v1:= v1 * v3 @kind float;
  #L3de9f2.  v0:= v0 + v1 @kind float;
  #L3de9f4.  v2.`lecho.lib.hellocharts.f.m.b` @type ^`float` := v0;
  #L3de9f8.  return @kind void;
}
procedure `float` `b`(`lecho.lib.hellocharts.f.m` v1 @kind this) @signature `Llecho/lib/hellocharts/f/m;.b:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3de7bc.  v0:= v1.`lecho.lib.hellocharts.f.m.a` @type ^`float`;
  #L3de7c0.  return v0;
}
procedure `float` `c`(`lecho.lib.hellocharts.f.m` v1 @kind this) @signature `Llecho/lib/hellocharts/f/m;.c:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3de7d4.  v0:= v1.`lecho.lib.hellocharts.f.m.b` @type ^`float`;
  #L3de7d8.  return v0;
}
procedure `char`[] `d`(`lecho.lib.hellocharts.f.m` v1 @kind this) @signature `Llecho/lib/hellocharts/f/m;.d:()[C` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3de7a4.  v0:= v1.`lecho.lib.hellocharts.f.m.g` @type ^`char`[] @kind object;
  #L3de7a8.  return v0 @kind object;
}
procedure `boolean` `equals`(`lecho.lib.hellocharts.f.m` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Llecho/lib/hellocharts/f/m;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3de6cc.  v0:= 1I;
  #L3de6ce.  if v4 != v5 then goto L3de6d4;
  #L3de6d2.  return v0;
  #L3de6d4.  v1:= 0I;
  #L3de6d6.  if v5 == 0 then goto L3de790;
  #L3de6da.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3de6e0.  v2:= temp @kind object;
  #L3de6e2.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3de6e8.  v3:= temp @kind object;
  #L3de6ea.  if v2 == v3 then goto L3de6f0;
  #L3de6ee.  goto L3de790;
  #L3de6f0.  v5:= (`lecho.lib.hellocharts.f.m`) v5 @kind object;
  #L3de6f4.  v2:= v5.`lecho.lib.hellocharts.f.m.e` @type ^`float`;
  #L3de6f8.  v3:= v4.`lecho.lib.hellocharts.f.m.e` @type ^`float`;
  #L3de6fc.  call temp:= `compare`(v2, v3) @signature `Ljava/lang/Float;.compare:(FF)I` @kind static;
  #L3de702.  v2:= temp;
  #L3de704.  if v2 == 0 then goto L3de70a;
  #L3de708.  return v1;
  #L3de70a.  v2:= v5.`lecho.lib.hellocharts.f.m.f` @type ^`float`;
  #L3de70e.  v3:= v4.`lecho.lib.hellocharts.f.m.f` @type ^`float`;
  #L3de712.  call temp:= `compare`(v2, v3) @signature `Ljava/lang/Float;.compare:(FF)I` @kind static;
  #L3de718.  v2:= temp;
  #L3de71a.  if v2 == 0 then goto L3de720;
  #L3de71e.  return v1;
  #L3de720.  v2:= v5.`lecho.lib.hellocharts.f.m.c` @type ^`float`;
  #L3de724.  v3:= v4.`lecho.lib.hellocharts.f.m.c` @type ^`float`;
  #L3de728.  call temp:= `compare`(v2, v3) @signature `Ljava/lang/Float;.compare:(FF)I` @kind static;
  #L3de72e.  v2:= temp;
  #L3de730.  if v2 == 0 then goto L3de736;
  #L3de734.  return v1;
  #L3de736.  v2:= v5.`lecho.lib.hellocharts.f.m.d` @type ^`float`;
  #L3de73a.  v3:= v4.`lecho.lib.hellocharts.f.m.d` @type ^`float`;
  #L3de73e.  call temp:= `compare`(v2, v3) @signature `Ljava/lang/Float;.compare:(FF)I` @kind static;
  #L3de744.  v2:= temp;
  #L3de746.  if v2 == 0 then goto L3de74c;
  #L3de74a.  return v1;
  #L3de74c.  v2:= v5.`lecho.lib.hellocharts.f.m.a` @type ^`float`;
  #L3de750.  v3:= v4.`lecho.lib.hellocharts.f.m.a` @type ^`float`;
  #L3de754.  call temp:= `compare`(v2, v3) @signature `Ljava/lang/Float;.compare:(FF)I` @kind static;
  #L3de75a.  v2:= temp;
  #L3de75c.  if v2 == 0 then goto L3de762;
  #L3de760.  return v1;
  #L3de762.  v2:= v5.`lecho.lib.hellocharts.f.m.b` @type ^`float`;
  #L3de766.  v3:= v4.`lecho.lib.hellocharts.f.m.b` @type ^`float`;
  #L3de76a.  call temp:= `compare`(v2, v3) @signature `Ljava/lang/Float;.compare:(FF)I` @kind static;
  #L3de770.  v2:= temp;
  #L3de772.  if v2 == 0 then goto L3de778;
  #L3de776.  return v1;
  #L3de778.  v2:= v4.`lecho.lib.hellocharts.f.m.g` @type ^`char`[] @kind object;
  #L3de77c.  v5:= v5.`lecho.lib.hellocharts.f.m.g` @type ^`char`[] @kind object;
  #L3de780.  call temp:= `equals`(v2, v5) @signature `Ljava/util/Arrays;.equals:([C[C)Z` @kind static;
  #L3de786.  v5:= temp;
  #L3de788.  if v5 != 0 then goto L3de78e;
  #L3de78c.  return v1;
  #L3de78e.  return v0;
  #L3de790.  return v1;
}
procedure `int` `hashCode`(`lecho.lib.hellocharts.f.m` v4 @kind this) @signature `Llecho/lib/hellocharts/f/m;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3de7ec.  v0:= v4.`lecho.lib.hellocharts.f.m.a` @type ^`float`;
  #L3de7f0.  v1:= 0I;
  #L3de7f2.  v0:= fcmpl(v0, v1);
  #L3de7f6.  v2:= 0I;
  #L3de7f8.  if v0 == 0 then goto L3de80a;
  #L3de7fc.  v0:= v4.`lecho.lib.hellocharts.f.m.a` @type ^`float`;
  #L3de800.  call temp:= `floatToIntBits`(v0) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L3de806.  v0:= temp;
  #L3de808.  goto L3de80c;
  #L3de80a.  v0:= 0I;
  #L3de80c.  v0:= v0 * 31;
  #L3de810.  v3:= v4.`lecho.lib.hellocharts.f.m.b` @type ^`float`;
  #L3de814.  v3:= fcmpl(v3, v1);
  #L3de818.  if v3 == 0 then goto L3de82a;
  #L3de81c.  v3:= v4.`lecho.lib.hellocharts.f.m.b` @type ^`float`;
  #L3de820.  call temp:= `floatToIntBits`(v3) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L3de826.  v3:= temp;
  #L3de828.  goto L3de82c;
  #L3de82a.  v3:= 0I;
  #L3de82c.  v0:= v0 + v3 @kind int;
  #L3de82e.  v0:= v0 * 31;
  #L3de832.  v3:= v4.`lecho.lib.hellocharts.f.m.c` @type ^`float`;
  #L3de836.  v3:= fcmpl(v3, v1);
  #L3de83a.  if v3 == 0 then goto L3de84c;
  #L3de83e.  v3:= v4.`lecho.lib.hellocharts.f.m.c` @type ^`float`;
  #L3de842.  call temp:= `floatToIntBits`(v3) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L3de848.  v3:= temp;
  #L3de84a.  goto L3de84e;
  #L3de84c.  v3:= 0I;
  #L3de84e.  v0:= v0 + v3 @kind int;
  #L3de850.  v0:= v0 * 31;
  #L3de854.  v3:= v4.`lecho.lib.hellocharts.f.m.d` @type ^`float`;
  #L3de858.  v3:= fcmpl(v3, v1);
  #L3de85c.  if v3 == 0 then goto L3de86e;
  #L3de860.  v3:= v4.`lecho.lib.hellocharts.f.m.d` @type ^`float`;
  #L3de864.  call temp:= `floatToIntBits`(v3) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L3de86a.  v3:= temp;
  #L3de86c.  goto L3de870;
  #L3de86e.  v3:= 0I;
  #L3de870.  v0:= v0 + v3 @kind int;
  #L3de872.  v0:= v0 * 31;
  #L3de876.  v3:= v4.`lecho.lib.hellocharts.f.m.e` @type ^`float`;
  #L3de87a.  v3:= fcmpl(v3, v1);
  #L3de87e.  if v3 == 0 then goto L3de890;
  #L3de882.  v3:= v4.`lecho.lib.hellocharts.f.m.e` @type ^`float`;
  #L3de886.  call temp:= `floatToIntBits`(v3) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L3de88c.  v3:= temp;
  #L3de88e.  goto L3de892;
  #L3de890.  v3:= 0I;
  #L3de892.  v0:= v0 + v3 @kind int;
  #L3de894.  v0:= v0 * 31;
  #L3de898.  v3:= v4.`lecho.lib.hellocharts.f.m.f` @type ^`float`;
  #L3de89c.  v1:= fcmpl(v3, v1);
  #L3de8a0.  if v1 == 0 then goto L3de8b2;
  #L3de8a4.  v1:= v4.`lecho.lib.hellocharts.f.m.f` @type ^`float`;
  #L3de8a8.  call temp:= `floatToIntBits`(v1) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L3de8ae.  v1:= temp;
  #L3de8b0.  goto L3de8b4;
  #L3de8b2.  v1:= 0I;
  #L3de8b4.  v0:= v0 + v1 @kind int;
  #L3de8b6.  v0:= v0 * 31;
  #L3de8ba.  v1:= v4.`lecho.lib.hellocharts.f.m.g` @type ^`char`[] @kind object;
  #L3de8be.  if v1 == 0 then goto L3de8ce;
  #L3de8c2.  v1:= v4.`lecho.lib.hellocharts.f.m.g` @type ^`char`[] @kind object;
  #L3de8c6.  call temp:= `hashCode`(v1) @signature `Ljava/util/Arrays;.hashCode:([C)I` @kind static;
  #L3de8cc.  v2:= temp;
  #L3de8ce.  v0:= v0 + v2 @kind int;
  #L3de8d0.  return v0;
}
procedure `java.lang.String` `toString`(`lecho.lib.hellocharts.f.m` v2 @kind this) @signature `Llecho/lib/hellocharts/f/m;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3de8e4.  v0:= new `java.lang.StringBuilder`;
  #L3de8e8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3de8ee.  v1:= "PointValue [x=" @kind object;
  #L3de8f2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3de8f8.  v1:= v2.`lecho.lib.hellocharts.f.m.a` @type ^`float`;
  #L3de8fc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(F)Ljava/lang/StringBuilder;` @kind virtual;
  #L3de902.  v1:= ", y=" @kind object;
  #L3de906.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3de90c.  v1:= v2.`lecho.lib.hellocharts.f.m.b` @type ^`float`;
  #L3de910.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(F)Ljava/lang/StringBuilder;` @kind virtual;
  #L3de916.  v1:= "]" @kind object;
  #L3de91a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3de920.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3de926.  v0:= temp @kind object;
  #L3de928.  return v0 @kind object;
}
