record `lecho.lib.hellocharts.c.k` @kind class @AccessFlag PUBLIC {
  `int` `lecho.lib.hellocharts.c.k.a` @AccessFlag PRIVATE;
  `char`[] `lecho.lib.hellocharts.c.k.b` @AccessFlag PRIVATE;
  `char`[] `lecho.lib.hellocharts.c.k.c` @AccessFlag PRIVATE;
  `char` `lecho.lib.hellocharts.c.k.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`lecho.lib.hellocharts.c.k` v2 @kind this) @signature `Llecho/lib/hellocharts/c/k;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3db588.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3db58e.  v0:= -2147483648I;
  #L3db592.  v2.`lecho.lib.hellocharts.c.k.a` @type ^`int` := v0;
  #L3db596.  v0:= 0I;
  #L3db598.  v1:= new `char`[v0];
  #L3db59c.  v2.`lecho.lib.hellocharts.c.k.b` @type ^`char`[] := v1 @kind object;
  #L3db5a0.  v0:= new `char`[v0];
  #L3db5a4.  v2.`lecho.lib.hellocharts.c.k.c` @type ^`char`[] := v0 @kind object;
  #L3db5a8.  v0:= 46I;
  #L3db5ac.  v2.`lecho.lib.hellocharts.c.k.d` @type ^`char` := v0 @kind char;
  #L3db5b0.  return @kind void;
}
procedure `int` `a`(`lecho.lib.hellocharts.c.k` v1 @kind this, `int` v2 ) @signature `Llecho/lib/hellocharts/c/k;.a:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3db540.  v0:= v1.`lecho.lib.hellocharts.c.k.a` @type ^`int`;
  #L3db544.  if v0 >= 0 then goto L3db54a;
  #L3db548.  goto L3db54e;
  #L3db54a.  v2:= v1.`lecho.lib.hellocharts.c.k.a` @type ^`int`;
  #L3db54e.  return v2;
}
procedure `int` `a`(`lecho.lib.hellocharts.c.k` v1 @kind this, `char`[] v2 @kind object, `float` v3 , `int` v4 ) @signature `Llecho/lib/hellocharts/c/k;.a:([CFI)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3db4b4.  v0:= 0I;
  #L3db4b6.  call temp:= `a`(v1, v2, v3, v4, v0) @signature `Llecho/lib/hellocharts/c/k;.a:([CFI[C)I` @kind virtual;
  #L3db4bc.  v2:= temp;
  #L3db4be.  return v2;
}
procedure `int` `a`(`lecho.lib.hellocharts.c.k` v1 @kind this, `char`[] v2 @kind object, `float` v3 , `int` v4 , `char`[] v5 @kind object) @signature `Llecho/lib/hellocharts/c/k;.a:([CFI[C)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3db4d0.  if v5 == 0 then goto L3db4fa;
  #L3db4d4.  v3:= length @variable v5;
  #L3db4d6.  v4:= length @variable v2;
  #L3db4d8.  if v3 <= v4 then goto L3db4ec;
  #L3db4dc.  v3:= "ValueFormatterHelper" @kind object;
  #L3db4e0.  v4:= "Label length is larger than buffer size(64chars), some chars will be skipped!" @kind object;
  #L3db4e4.  call temp:= `w`(v3, v4) @signature `Landroid/util/Log;.w:(Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L3db4ea.  v3:= length @variable v2;
  #L3db4ec.  v4:= 0I;
  #L3db4ee.  v0:= length @variable v2;
  #L3db4f0.  v0:= v0 - v3 @kind int;
  #L3db4f2.  call `arraycopy`(v5, v4, v2, v0, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3db4f8.  return v3;
  #L3db4fa.  call temp:= `a`(v1, v4) @signature `Llecho/lib/hellocharts/c/k;.a:(I)I` @kind virtual;
  #L3db500.  v4:= temp;
  #L3db502.  call temp:= `b`(v1, v2, v3, v4) @signature `Llecho/lib/hellocharts/c/k;.b:([CFI)I` @kind virtual;
  #L3db508.  v3:= temp;
  #L3db50a.  call `a`(v1, v2) @signature `Llecho/lib/hellocharts/c/k;.a:([C)V` @kind virtual;
  #L3db510.  call `a`(v1, v2, v3) @signature `Llecho/lib/hellocharts/c/k;.a:([CI)V` @kind virtual;
  #L3db516.  call temp:= `c`(v1) @signature `Llecho/lib/hellocharts/c/k;.c:()[C` @kind virtual;
  #L3db51c.  v2:= temp @kind object;
  #L3db51e.  v2:= length @variable v2;
  #L3db520.  v3:= v3 + v2 @kind int;
  #L3db522.  call temp:= `b`(v1) @signature `Llecho/lib/hellocharts/c/k;.b:()[C` @kind virtual;
  #L3db528.  v2:= temp @kind object;
  #L3db52a.  v2:= length @variable v2;
  #L3db52c.  v3:= v3 + v2 @kind int;
  #L3db52e.  return v3;
}
procedure `int` `a`(`lecho.lib.hellocharts.c.k` v1 @kind this, `char`[] v2 @kind object, `float` v3 , `char`[] v4 @kind object) @signature `Llecho/lib/hellocharts/c/k;.a:([CF[C)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3db498.  v0:= 0I;
  #L3db49a.  call temp:= `a`(v1, v2, v3, v0, v4) @signature `Llecho/lib/hellocharts/c/k;.a:([CFI[C)I` @kind virtual;
  #L3db4a0.  v2:= temp;
  #L3db4a2.  return v2;
}
procedure `void` `a`(`lecho.lib.hellocharts.c.k` v2 @kind this) @signature `Llecho/lib/hellocharts/c/k;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3db5c4.  call temp:= `getInstance`() @signature `Ljava/text/NumberFormat;.getInstance:()Ljava/text/NumberFormat;` @kind static;
  #L3db5ca.  v0:= temp @kind object;
  #L3db5cc.  v1:= instanceof @variable v0 @type ^`java.text.DecimalFormat` @kind boolean;
  #L3db5d0.  if v1 == 0 then goto L3db5ec;
  #L3db5d4.  v0:= (`java.text.DecimalFormat`) v0 @kind object;
  #L3db5d8.  call temp:= `getDecimalFormatSymbols`(v0) @signature `Ljava/text/DecimalFormat;.getDecimalFormatSymbols:()Ljava/text/DecimalFormatSymbols;` @kind virtual;
  #L3db5de.  v0:= temp @kind object;
  #L3db5e0.  call temp:= `getDecimalSeparator`(v0) @signature `Ljava/text/DecimalFormatSymbols;.getDecimalSeparator:()C` @kind virtual;
  #L3db5e6.  v0:= temp;
  #L3db5e8.  v2.`lecho.lib.hellocharts.c.k.d` @type ^`char` := v0 @kind char;
  #L3db5ec.  return @kind void;
}
procedure `void` `a`(`lecho.lib.hellocharts.c.k` v4 @kind this, `char`[] v5 @kind object) @signature `Llecho/lib/hellocharts/c/k;.a:([C)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3db600.  v0:= v4.`lecho.lib.hellocharts.c.k.b` @type ^`char`[] @kind object;
  #L3db604.  v0:= length @variable v0;
  #L3db606.  if v0 <= 0 then goto L3db626;
  #L3db60a.  v0:= v4.`lecho.lib.hellocharts.c.k.b` @type ^`char`[] @kind object;
  #L3db60e.  v1:= 0I;
  #L3db610.  v2:= length @variable v5;
  #L3db612.  v3:= v4.`lecho.lib.hellocharts.c.k.b` @type ^`char`[] @kind object;
  #L3db616.  v3:= length @variable v3;
  #L3db618.  v2:= v2 - v3 @kind int;
  #L3db61a.  v3:= v4.`lecho.lib.hellocharts.c.k.b` @type ^`char`[] @kind object;
  #L3db61e.  v3:= length @variable v3;
  #L3db620.  call `arraycopy`(v0, v1, v5, v2, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3db626.  return @kind void;
}
procedure `void` `a`(`lecho.lib.hellocharts.c.k` v3 @kind this, `char`[] v4 @kind object, `int` v5 ) @signature `Llecho/lib/hellocharts/c/k;.a:([CI)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3db638.  v0:= v3.`lecho.lib.hellocharts.c.k.c` @type ^`char`[] @kind object;
  #L3db63c.  v0:= length @variable v0;
  #L3db63e.  if v0 <= 0 then goto L3db668;
  #L3db642.  v0:= v3.`lecho.lib.hellocharts.c.k.c` @type ^`char`[] @kind object;
  #L3db646.  v1:= 0I;
  #L3db648.  v2:= length @variable v4;
  #L3db64a.  v2:= v2 - v5 @kind int;
  #L3db64c.  v5:= v3.`lecho.lib.hellocharts.c.k.b` @type ^`char`[] @kind object;
  #L3db650.  v5:= length @variable v5;
  #L3db652.  v2:= v2 - v5 @kind int;
  #L3db654.  v5:= v3.`lecho.lib.hellocharts.c.k.c` @type ^`char`[] @kind object;
  #L3db658.  v5:= length @variable v5;
  #L3db65a.  v2:= v2 - v5 @kind int;
  #L3db65c.  v5:= v3.`lecho.lib.hellocharts.c.k.c` @type ^`char`[] @kind object;
  #L3db660.  v5:= length @variable v5;
  #L3db662.  call `arraycopy`(v0, v1, v4, v2, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3db668.  return @kind void;
}
procedure `int` `b`(`lecho.lib.hellocharts.c.k` v2 @kind this, `char`[] v3 @kind object, `float` v4 , `int` v5 ) @signature `Llecho/lib/hellocharts/c/k;.b:([CFI)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3db560.  v0:= length @variable v3;
  #L3db562.  v1:= v2.`lecho.lib.hellocharts.c.k.b` @type ^`char`[] @kind object;
  #L3db566.  v1:= length @variable v1;
  #L3db568.  v0:= v0 - v1 @kind int;
  #L3db56a.  v1:= v2.`lecho.lib.hellocharts.c.k.d` @type ^`char` @kind char;
  #L3db56e.  call temp:= `a`(v3, v4, v0, v5, v1) @signature `Llecho/lib/hellocharts/i/c;.a:([CFIIC)I` @kind static;
  #L3db574.  v3:= temp;
  #L3db576.  return v3;
}
procedure `char`[] `b`(`lecho.lib.hellocharts.c.k` v1 @kind this) @signature `Llecho/lib/hellocharts/c/k;.b:()[C` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3db468.  v0:= v1.`lecho.lib.hellocharts.c.k.b` @type ^`char`[] @kind object;
  #L3db46c.  return v0 @kind object;
}
procedure `char`[] `c`(`lecho.lib.hellocharts.c.k` v1 @kind this) @signature `Llecho/lib/hellocharts/c/k;.c:()[C` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3db480.  v0:= v1.`lecho.lib.hellocharts.c.k.c` @type ^`char`[] @kind object;
  #L3db484.  return v0 @kind object;
}
