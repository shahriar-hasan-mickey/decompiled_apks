record `lecho.lib.hellocharts.i.c` @kind class @AccessFlag PUBLIC {
}
global `int`[] `@@lecho.lib.hellocharts.i.c.a` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Llecho/lib/hellocharts/i/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3e5350.  v0:= 7I;
  #L3e5352.  v0:= new `int`[v0];
  #L3e5356.  goto L3e5364;
  #L3e535c.  `@@lecho.lib.hellocharts.i.c.a` @type ^`int`[] := v0 @kind object;
  #L3e5360.  return @kind void;
  #L3e5362.  
  #L3e5364.  v0:= (1I, 10I, 100I, 1000I, 10000I, 100000I, 1000000I) @kind object;
  #L3e5387.  goto L3e535c;
}
procedure `double` `a`(`double` v5 ) @signature `Llecho/lib/hellocharts/i/c;.a:(D)D` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3e51a0.  call temp:= `isNaN`(v5) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L3e51a6.  v0:= temp;
  #L3e51a8.  if v0 != 0 then goto L3e51e6;
  #L3e51ac.  v0:= InfinityD;
  #L3e51b0.  v2:= dcmpl(v5, v0);
  #L3e51b4.  if v2 != 0 then goto L3e51ba;
  #L3e51b8.  goto L3e51e6;
  #L3e51ba.  v0:= 0L;
  #L3e51be.  v5:= v5 + v0 @kind double;
  #L3e51c0.  call temp:= `doubleToRawLongBits`(v5) @signature `Ljava/lang/Double;.doubleToRawLongBits:(D)J` @kind static;
  #L3e51c6.  v2:= temp @kind wide;
  #L3e51c8.  v4:= dcmpl(v5, v0);
  #L3e51cc.  if v4 < 0 then goto L3e51d4;
  #L3e51d0.  v5:= 1I;
  #L3e51d2.  goto L3e51d6;
  #L3e51d4.  v5:= -1I;
  #L3e51d6.  v5:= (`long`) v5 @kind i2l;
  #L3e51d8.  v0:= v2 + v5 @kind long;
  #L3e51dc.  call temp:= `longBitsToDouble`(v0) @signature `Ljava/lang/Double;.longBitsToDouble:(J)D` @kind static;
  #L3e51e2.  v5:= temp @kind wide;
  #L3e51e4.  return v5 @kind wide;
  #L3e51e6.  return v5 @kind wide;
}
procedure `int` `a`(`char`[] v10 @kind object, `float` v11 , `int` v12 , `int` v13 , `char` v14 ) @signature `Llecho/lib/hellocharts/i/c;.a:([CFIIC)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L3e525c.  v0:= `@@lecho.lib.hellocharts.i.c.a` @type ^`int`[] @kind object;
  #L3e5260.  v0:= length @variable v0;
  #L3e5262.  v1:= 1I;
  #L3e5264.  if v13 < v0 then goto L3e5274;
  #L3e5268.  v12:= v12 - v1 @kind int;
  #L3e526a.  v11:= 46I;
  #L3e526e.  v10[v12]:= v11 @kind char;
  #L3e5272.  return v1;
  #L3e5274.  v0:= 0I;
  #L3e5276.  v2:= fcmpl(v11, v0);
  #L3e527a.  v3:= 48I;
  #L3e527e.  if v2 != 0 then goto L3e528a;
  #L3e5282.  v12:= v12 - v1 @kind int;
  #L3e5284.  v10[v12]:= v3 @kind char;
  #L3e5288.  return v1;
  #L3e528a.  v0:= fcmpg(v11, v0);
  #L3e528e.  v2:= 0I;
  #L3e5290.  if v0 >= 0 then goto L3e529a;
  #L3e5294.  v11:= -v11 @kind float;
  #L3e5296.  v0:= 1I;
  #L3e5298.  goto L3e529c;
  #L3e529a.  v0:= 0I;
  #L3e529c.  v4:= `@@lecho.lib.hellocharts.i.c.a` @type ^`int`[] @kind object;
  #L3e52a0.  v4:= length @variable v4;
  #L3e52a2.  if v13 <= v4 then goto L3e52ae;
  #L3e52a6.  v13:= `@@lecho.lib.hellocharts.i.c.a` @type ^`int`[] @kind object;
  #L3e52aa.  v13:= length @variable v13;
  #L3e52ac.  v13:= v13 - v1 @kind int;
  #L3e52ae.  v4:= `@@lecho.lib.hellocharts.i.c.a` @type ^`int`[] @kind object;
  #L3e52b2.  v4:= v4[v13];
  #L3e52b6.  v4:= (`float`) v4 @kind i2f;
  #L3e52b8.  v11:= v11 * v4 @kind float;
  #L3e52bc.  call temp:= `round`(v11) @signature `Ljava/lang/Math;.round:(F)I` @kind static;
  #L3e52c2.  v11:= temp;
  #L3e52c4.  v4:= (`long`) v11 @kind i2l;
  #L3e52c6.  v12:= v12 - v1 @kind int;
  #L3e52c8.  v6:= 0L;
  #L3e52cc.  v11:= lcmp(v4, v6);
  #L3e52d0.  if v11 != 0 then goto L3e530c;
  #L3e52d4.  v11:= v13 + 1;
  #L3e52d8.  if v2 >= v11 then goto L3e52de;
  #L3e52dc.  goto L3e530c;
  #L3e52de.  v11:= v12 + 1;
  #L3e52e2.  v11:= v10[v11] @kind char;
  #L3e52e6.  if v11 != v14 then goto L3e52f8;
  #L3e52ea.  v11:= v12 + -1;
  #L3e52ee.  v10[v12]:= v3 @kind char;
  #L3e52f2.  v2:= v2 + 1;
  #L3e52f6.  goto L3e52fa;
  #L3e52f8.  v11:= v12;
  #L3e52fa.  if v0 == 0 then goto L3e530a;
  #L3e52fe.  v12:= 45I;
  #L3e5302.  v10[v11]:= v12 @kind char;
  #L3e5306.  v2:= v2 + 1;
  #L3e530a.  return v2;
  #L3e530c.  v6:= 10L;
  #L3e5310.  v8:= v4 %% v6 @kind long;
  #L3e5314.  v11:= (`int`) v8 @kind l2i;
  #L3e5316.  v4:= v4 / v6 @kind long;
  #L3e5318.  v1:= v12 + -1;
  #L3e531c.  v11:= v11 + v3 @kind int;
  #L3e531e.  v11:= (`char`) v11 @kind i2c;
  #L3e5320.  v10[v12]:= v11 @kind char;
  #L3e5324.  v2:= v2 + 1;
  #L3e5328.  if v2 != v13 then goto L3e533c;
  #L3e532c.  v11:= v1 + -1;
  #L3e5330.  v10[v1]:= v14 @kind char;
  #L3e5334.  v2:= v2 + 1;
  #L3e5338.  v12:= v11;
  #L3e533a.  goto L3e52c8;
  #L3e533c.  v12:= v1;
  #L3e533e.  goto L3e52c8;
}
procedure `void` `a`(`float` v9 , `float` v10 , `int` v11 , `lecho.lib.hellocharts.i.a` v12 @kind object) @signature `Llecho/lib/hellocharts/i/c;.a:(FFILlecho/lib/hellocharts/i/a;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3e5398.  v0:= v10 - v9 @kind float;
  #L3e539c.  v0:= (`double`) v0 @kind f2d;
  #L3e539e.  v2:= 0I;
  #L3e53a0.  if v11 == 0 then goto L3e5486;
  #L3e53a4.  v3:= 0L;
  #L3e53a8.  v5:= dcmpg(v0, v3);
  #L3e53ac.  if v5 > 0 then goto L3e53b2;
  #L3e53b0.  goto L3e5486;
  #L3e53b2.  v3:= (`double`) v11 @kind i2d;
  #L3e53b4.  v0:= v0 / v3 @kind double;
  #L3e53b6.  call temp:= `b`(v0) @signature `Llecho/lib/hellocharts/i/c;.b:(D)F` @kind static;
  #L3e53bc.  v11:= temp;
  #L3e53be.  v0:= (`double`) v11 @kind f2d;
  #L3e53c0.  call temp:= `log10`(v0) @signature `Ljava/lang/Math;.log10:(D)D` @kind static;
  #L3e53c6.  v3:= temp @kind wide;
  #L3e53c8.  v11:= (`int`) v3 @kind d2i;
  #L3e53ca.  v3:= (`double`) v11 @kind i2d;
  #L3e53cc.  v5:= 10.0D;
  #L3e53d0.  call temp:= `pow`(v5, v3) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L3e53d6.  v3:= temp @kind wide;
  #L3e53d8.  v7:= v0 / v3 @kind double;
  #L3e53dc.  v11:= (`int`) v7 @kind d2i;
  #L3e53de.  v7:= 5I;
  #L3e53e0.  if v11 <= v7 then goto L3e53f0;
  #L3e53e4.  v3:= v3 * v5 @kind double;
  #L3e53e8.  call temp:= `floor`(v3) @signature `Ljava/lang/Math;.floor:(D)D` @kind static;
  #L3e53ee.  v0:= temp @kind wide;
  #L3e53f0.  v3:= (`double`) v9 @kind f2d;
  #L3e53f2.  v3:= v3 / v0 @kind double;
  #L3e53f4.  call temp:= `ceil`(v3) @signature `Ljava/lang/Math;.ceil:(D)D` @kind static;
  #L3e53fa.  v3:= temp @kind wide;
  #L3e53fc.  v3:= v3 * v0 @kind double;
  #L3e5400.  v9:= (`double`) v10 @kind f2d;
  #L3e5402.  v9:= v9 / v0 @kind double;
  #L3e5404.  call temp:= `floor`(v9) @signature `Ljava/lang/Math;.floor:(D)D` @kind static;
  #L3e540a.  v9:= temp @kind wide;
  #L3e540c.  v9:= v9 * v0 @kind double;
  #L3e5410.  call temp:= `a`(v9) @signature `Llecho/lib/hellocharts/i/c;.a:(D)D` @kind static;
  #L3e5416.  v9:= temp @kind wide;
  #L3e5418.  v5:= v3 @kind wide;
  #L3e541a.  v11:= 0I;
  #L3e541c.  v7:= dcmpg(v5, v9);
  #L3e5420.  if v7 > 0 then goto L3e542c;
  #L3e5424.  v11:= v11 + 1;
  #L3e5428.  v5:= v5 + v0 @kind double;
  #L3e542a.  goto L3e541c;
  #L3e542c.  v12.`lecho.lib.hellocharts.i.a.b` @type ^`int` := v11;
  #L3e5430.  v9:= v12.`lecho.lib.hellocharts.i.a.a` @type ^`float`[] @kind object;
  #L3e5434.  v9:= length @variable v9;
  #L3e5436.  if v9 >= v11 then goto L3e5442;
  #L3e543a.  v9:= new `float`[v11];
  #L3e543e.  v12.`lecho.lib.hellocharts.i.a.a` @type ^`float`[] := v9 @kind object;
  #L3e5442.  v9:= 0I;
  #L3e5444.  if v9 >= v11 then goto L3e545a;
  #L3e5448.  v10:= v12.`lecho.lib.hellocharts.i.a.a` @type ^`float`[] @kind object;
  #L3e544c.  v5:= (`float`) v3 @kind d2f;
  #L3e544e.  v10[v9]:= v5;
  #L3e5452.  v3:= v3 + v0 @kind double;
  #L3e5454.  v9:= v9 + 1;
  #L3e5458.  goto L3e5444;
  #L3e545a.  v9:= 1.0D;
  #L3e545e.  v11:= dcmpg(v0, v9);
  #L3e5462.  if v11 >= 0 then goto L3e5480;
  #L3e5466.  call temp:= `log10`(v0) @signature `Ljava/lang/Math;.log10:(D)D` @kind static;
  #L3e546c.  v9:= temp @kind wide;
  #L3e546e.  v9:= -v9 @kind double;
  #L3e5470.  call temp:= `ceil`(v9) @signature `Ljava/lang/Math;.ceil:(D)D` @kind static;
  #L3e5476.  v9:= temp @kind wide;
  #L3e5478.  v9:= (`int`) v9 @kind d2i;
  #L3e547a.  v12.`lecho.lib.hellocharts.i.a.c` @type ^`int` := v9;
  #L3e547e.  goto L3e5484;
  #L3e5480.  v12.`lecho.lib.hellocharts.i.a.c` @type ^`int` := v2;
  #L3e5484.  return @kind void;
  #L3e5486.  v9:= new `float`[v2];
  #L3e548a.  v12.`lecho.lib.hellocharts.i.a.a` @type ^`float`[] := v9 @kind object;
  #L3e548e.  v12.`lecho.lib.hellocharts.i.a.b` @type ^`int` := v2;
  #L3e5492.  return @kind void;
}
procedure `float` `b`(`double` v5 ) @signature `Llecho/lib/hellocharts/i/c;.b:(D)F` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3e51f8.  v0:= 0L;
  #L3e51fc.  v2:= dcmpg(v5, v0);
  #L3e5200.  if v2 >= 0 then goto L3e5208;
  #L3e5204.  v0:= -v5 @kind double;
  #L3e5206.  goto L3e520a;
  #L3e5208.  v0:= v5 @kind wide;
  #L3e520a.  call temp:= `log10`(v0) @signature `Ljava/lang/Math;.log10:(D)D` @kind static;
  #L3e5210.  v0:= temp @kind wide;
  #L3e5212.  v0:= (`float`) v0 @kind d2f;
  #L3e5214.  v0:= (`double`) v0 @kind f2d;
  #L3e5216.  call temp:= `ceil`(v0) @signature `Ljava/lang/Math;.ceil:(D)D` @kind static;
  #L3e521c.  v0:= temp @kind wide;
  #L3e521e.  v0:= (`float`) v0 @kind d2f;
  #L3e5220.  v0:= (`int`) v0 @kind f2i;
  #L3e5222.  v0:= v0 - 1;
  #L3e5226.  v1:= 10.0D;
  #L3e522a.  v3:= (`double`) v0 @kind i2d;
  #L3e522c.  call temp:= `pow`(v1, v3) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L3e5232.  v0:= temp @kind wide;
  #L3e5234.  v0:= (`float`) v0 @kind d2f;
  #L3e5236.  v1:= (`double`) v0 @kind f2d;
  #L3e5238.  v5:= v5 * v1 @kind double;
  #L3e523c.  call temp:= `round`(v5) @signature `Ljava/lang/Math;.round:(D)J` @kind static;
  #L3e5242.  v5:= temp @kind wide;
  #L3e5244.  v5:= (`float`) v5 @kind l2f;
  #L3e5246.  v5:= v5 / v0 @kind float;
  #L3e5248.  return v5;
}
