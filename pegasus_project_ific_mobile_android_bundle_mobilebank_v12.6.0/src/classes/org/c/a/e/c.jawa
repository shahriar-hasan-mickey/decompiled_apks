record `org.c.a.e.c` @kind class @AccessFlag PUBLIC {
  `java.util.ArrayList` `org.c.a.e.c.a` @AccessFlag PRIVATE;
  `java.lang.Object` `org.c.a.e.c.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.c.a.e.c` v1 @kind this) @signature `Lorg/c/a/e/c;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3fc410.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3fc416.  v0:= new `java.util.ArrayList`;
  #L3fc41a.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L3fc420.  v1.`org.c.a.e.c.a` @type ^`java.util.ArrayList` := v0 @kind object;
  #L3fc424.  return @kind void;
}
procedure `org.c.a.e.c` `a`(`org.c.a.e.c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lorg/c/a/e/c;.a:(Ljava/lang/Object;)Lorg/c/a/e/c;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3fbb48.  v0:= 0I;
  #L3fbb4a.  v1.`org.c.a.e.c.b` @type ^`java.lang.Object` := v0 @kind object;
  #L3fbb4e.  v0:= v1.`org.c.a.e.c.a` @type ^`java.util.ArrayList` @kind object;
  #L3fbb52.  call temp:= `add`(v0, v2) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L3fbb58.  v0:= v1.`org.c.a.e.c.a` @type ^`java.util.ArrayList` @kind object;
  #L3fbb5c.  call temp:= `add`(v0, v2) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L3fbb62.  return v1 @kind object;
}
procedure `org.c.a.e.c` `a`(`org.c.a.e.c` v1 @kind this, `org.c.a.e.n` v2 @kind object, `org.c.a.e.l` v3 @kind object) @signature `Lorg/c/a/e/c;.a:(Lorg/c/a/e/n;Lorg/c/a/e/l;)Lorg/c/a/e/c;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3fbec8.  v0:= 0I;
  #L3fbeca.  v1.`org.c.a.e.c.b` @type ^`java.lang.Object` := v0 @kind object;
  #L3fbece.  v0:= v1.`org.c.a.e.c.a` @type ^`java.util.ArrayList` @kind object;
  #L3fbed2.  call temp:= `add`(v0, v2) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L3fbed8.  v2:= v1.`org.c.a.e.c.a` @type ^`java.util.ArrayList` @kind object;
  #L3fbedc.  call temp:= `add`(v2, v3) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L3fbee2.  return v1 @kind object;
}
procedure `void` `a`(`java.lang.Appendable` v1 @kind object, `int` v2 ) @signature `Lorg/c/a/e/c;.a:(Ljava/lang/Appendable;I)V` @AccessFlag STATIC {
    temp;
    v0;

  #L3fc438.  v2:= v2 + -1;
  #L3fc43c.  if v2 < 0 then goto L3fc44e;
  #L3fc440.  v0:= 65533I;
  #L3fc446.  call temp:= `append`(v1, v0) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L3fc44c.  goto L3fc438;
  #L3fc44e.  return @kind void;
}
procedure `void` `a`(`org.c.a.e.c` v1 @kind this, `org.c.a.e.g` v2 @kind object) @signature `Lorg/c/a/e/c;.a:(Lorg/c/a/e/g;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3fc460.  if v2 != 0 then goto L3fc474;
  #L3fc464.  v2:= new `java.lang.IllegalArgumentException`;
  #L3fc468.  v0:= "No printer supplied" @kind object;
  #L3fc46c.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fc472.  throw v2;
  #L3fc474.  return @kind void;
}
procedure `boolean` `a`(`java.lang.CharSequence` v5 @kind object, `int` v6 , `java.lang.String` v7 @kind object) @signature `Lorg/c/a/e/c;.a:(Ljava/lang/CharSequence;ILjava/lang/String;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3fb898.  call temp:= `length`(v7) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3fb89e.  v0:= temp;
  #L3fb8a0.  call temp:= `length`(v5) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L3fb8a6.  v1:= temp;
  #L3fb8a8.  v1:= v1 - v6 @kind int;
  #L3fb8aa.  v2:= 0I;
  #L3fb8ac.  if v1 >= v0 then goto L3fb8b2;
  #L3fb8b0.  return v2;
  #L3fb8b2.  v1:= 0I;
  #L3fb8b4.  if v1 >= v0 then goto L3fb8d8;
  #L3fb8b8.  v3:= v6 + v1 @kind int;
  #L3fb8bc.  call temp:= `charAt`(v5, v3) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L3fb8c2.  v3:= temp;
  #L3fb8c4.  call temp:= `charAt`(v7, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3fb8ca.  v4:= temp;
  #L3fb8cc.  if v3 == v4 then goto L3fb8d2;
  #L3fb8d0.  return v2;
  #L3fb8d2.  v1:= v1 + 1;
  #L3fb8d6.  goto L3fb8b4;
  #L3fb8d8.  v5:= 1I;
  #L3fb8da.  return v5;
}
procedure `boolean` `b`(`java.lang.CharSequence` v5 @kind object, `int` v6 , `java.lang.String` v7 @kind object) @signature `Lorg/c/a/e/c;.b:(Ljava/lang/CharSequence;ILjava/lang/String;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3fb8ec.  call temp:= `length`(v7) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3fb8f2.  v0:= temp;
  #L3fb8f4.  call temp:= `length`(v5) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L3fb8fa.  v1:= temp;
  #L3fb8fc.  v1:= v1 - v6 @kind int;
  #L3fb8fe.  v2:= 0I;
  #L3fb900.  if v1 >= v0 then goto L3fb906;
  #L3fb904.  return v2;
  #L3fb906.  v1:= 0I;
  #L3fb908.  if v1 >= v0 then goto L3fb954;
  #L3fb90c.  v3:= v6 + v1 @kind int;
  #L3fb910.  call temp:= `charAt`(v5, v3) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L3fb916.  v3:= temp;
  #L3fb918.  call temp:= `charAt`(v7, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3fb91e.  v4:= temp;
  #L3fb920.  if v3 == v4 then goto L3fb94e;
  #L3fb924.  call temp:= `toUpperCase`(v3) @signature `Ljava/lang/Character;.toUpperCase:(C)C` @kind static;
  #L3fb92a.  v3:= temp;
  #L3fb92c.  call temp:= `toUpperCase`(v4) @signature `Ljava/lang/Character;.toUpperCase:(C)C` @kind static;
  #L3fb932.  v4:= temp;
  #L3fb934.  if v3 == v4 then goto L3fb94e;
  #L3fb938.  call temp:= `toLowerCase`(v3) @signature `Ljava/lang/Character;.toLowerCase:(C)C` @kind static;
  #L3fb93e.  v3:= temp;
  #L3fb940.  call temp:= `toLowerCase`(v4) @signature `Ljava/lang/Character;.toLowerCase:(C)C` @kind static;
  #L3fb946.  v4:= temp;
  #L3fb948.  if v3 == v4 then goto L3fb94e;
  #L3fb94c.  return v2;
  #L3fb94e.  v1:= v1 + 1;
  #L3fb952.  goto L3fb908;
  #L3fb954.  v5:= 1I;
  #L3fb956.  return v5;
}
procedure `boolean` `b`(`org.c.a.e.c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lorg/c/a/e/c;.b:(Ljava/lang/Object;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3fb968.  v0:= instanceof @variable v2 @type ^`org.c.a.e.n` @kind boolean;
  #L3fb96c.  if v0 == 0 then goto L3fb98a;
  #L3fb970.  v0:= instanceof @variable v2 @type ^`org.c.a.e.c$b` @kind boolean;
  #L3fb974.  if v0 == 0 then goto L3fb986;
  #L3fb978.  v2:= (`org.c.a.e.c$b`) v2 @kind object;
  #L3fb97c.  call temp:= `c`(v2) @signature `Lorg/c/a/e/c$b;.c:()Z` @kind virtual;
  #L3fb982.  v2:= temp;
  #L3fb984.  return v2;
  #L3fb986.  v2:= 1I;
  #L3fb988.  return v2;
  #L3fb98a.  v2:= 0I;
  #L3fb98c.  return v2;
}
procedure `void` `c`(`org.c.a.e.c` v1 @kind this, `org.c.a.e.d` v2 @kind object) @signature `Lorg/c/a/e/c;.c:(Lorg/c/a/e/d;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3fc488.  if v2 != 0 then goto L3fc49c;
  #L3fc48c.  v2:= new `java.lang.IllegalArgumentException`;
  #L3fc490.  v0:= "No parser supplied" @kind object;
  #L3fc494.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fc49a.  throw v2;
  #L3fc49c.  return @kind void;
}
procedure `boolean` `c`(`org.c.a.e.c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lorg/c/a/e/c;.c:(Ljava/lang/Object;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3fb9a0.  v0:= instanceof @variable v2 @type ^`org.c.a.e.l` @kind boolean;
  #L3fb9a4.  if v0 == 0 then goto L3fb9c2;
  #L3fb9a8.  v0:= instanceof @variable v2 @type ^`org.c.a.e.c$b` @kind boolean;
  #L3fb9ac.  if v0 == 0 then goto L3fb9be;
  #L3fb9b0.  v2:= (`org.c.a.e.c$b`) v2 @kind object;
  #L3fb9b4.  call temp:= `d`(v2) @signature `Lorg/c/a/e/c$b;.d:()Z` @kind virtual;
  #L3fb9ba.  v2:= temp;
  #L3fb9bc.  return v2;
  #L3fb9be.  v2:= 1I;
  #L3fb9c0.  return v2;
  #L3fb9c2.  v2:= 0I;
  #L3fb9c4.  return v2;
}
procedure `java.lang.Object` `k`(`org.c.a.e.c` v4 @kind this) @signature `Lorg/c/a/e/c;.k:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3fb9d8.  v0:= v4.`org.c.a.e.c.b` @type ^`java.lang.Object` @kind object;
  #L3fb9dc.  if v0 != 0 then goto L3fba36;
  #L3fb9e0.  v1:= v4.`org.c.a.e.c.a` @type ^`java.util.ArrayList` @kind object;
  #L3fb9e4.  call temp:= `size`(v1) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L3fb9ea.  v1:= temp;
  #L3fb9ec.  v2:= 2I;
  #L3fb9ee.  if v1 != v2 then goto L3fba20;
  #L3fb9f2.  v1:= v4.`org.c.a.e.c.a` @type ^`java.util.ArrayList` @kind object;
  #L3fb9f6.  v2:= 0I;
  #L3fb9f8.  call temp:= `get`(v1, v2) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L3fb9fe.  v1:= temp @kind object;
  #L3fba00.  v2:= v4.`org.c.a.e.c.a` @type ^`java.util.ArrayList` @kind object;
  #L3fba04.  v3:= 1I;
  #L3fba06.  call temp:= `get`(v2, v3) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L3fba0c.  v2:= temp @kind object;
  #L3fba0e.  if v1 == 0 then goto L3fba1e;
  #L3fba12.  if v1 == v2 then goto L3fba1a;
  #L3fba16.  if v2 != 0 then goto L3fba20;
  #L3fba1a.  v0:= v1 @kind object;
  #L3fba1c.  goto L3fba20;
  #L3fba1e.  v0:= v2 @kind object;
  #L3fba20.  if v0 != 0 then goto L3fba32;
  #L3fba24.  v0:= new `org.c.a.e.c$b`;
  #L3fba28.  v1:= v4.`org.c.a.e.c.a` @type ^`java.util.ArrayList` @kind object;
  #L3fba2c.  call `<init>`(v0, v1) @signature `Lorg/c/a/e/c$b;.<init>:(Ljava/util/List;)V` @kind direct;
  #L3fba32.  v4.`org.c.a.e.c.b` @type ^`java.lang.Object` := v0 @kind object;
  #L3fba36.  return v0 @kind object;
}
procedure `org.c.a.e.b` `a`(`org.c.a.e.c` v4 @kind this) @signature `Lorg/c/a/e/c;.a:()Lorg/c/a/e/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3fba48.  call temp:= `k`(v4) @signature `Lorg/c/a/e/c;.k:()Ljava/lang/Object;` @kind direct;
  #L3fba4e.  v0:= temp @kind object;
  #L3fba50.  call temp:= `b`(v4, v0) @signature `Lorg/c/a/e/c;.b:(Ljava/lang/Object;)Z` @kind direct;
  #L3fba56.  v1:= temp;
  #L3fba58.  v2:= 0I;
  #L3fba5a.  if v1 == 0 then goto L3fba66;
  #L3fba5e.  v1:= v0 @kind object;
  #L3fba60.  v1:= (`org.c.a.e.n`) v1 @kind object;
  #L3fba64.  goto L3fba68;
  #L3fba66.  v1:= v2 @kind object;
  #L3fba68.  call temp:= `c`(v4, v0) @signature `Lorg/c/a/e/c;.c:(Ljava/lang/Object;)Z` @kind direct;
  #L3fba6e.  v3:= temp;
  #L3fba70.  if v3 == 0 then goto L3fba7a;
  #L3fba74.  v2:= v0 @kind object;
  #L3fba76.  v2:= (`org.c.a.e.l`) v2 @kind object;
  #L3fba7a.  if v1 != 0 then goto L3fba94;
  #L3fba7e.  if v2 == 0 then goto L3fba84;
  #L3fba82.  goto L3fba94;
  #L3fba84.  v0:= new `java.lang.UnsupportedOperationException`;
  #L3fba88.  v1:= "Both printing and parsing not supported" @kind object;
  #L3fba8c.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fba92.  throw v0;
  #L3fba94.  v0:= new `org.c.a.e.b`;
  #L3fba98.  call `<init>`(v0, v1, v2) @signature `Lorg/c/a/e/b;.<init>:(Lorg/c/a/e/n;Lorg/c/a/e/l;)V` @kind direct;
  #L3fba9e.  return v0 @kind object;
}
procedure `org.c.a.e.c` `a`(`org.c.a.e.c` v1 @kind this, `char` v2 ) @signature `Lorg/c/a/e/c;.a:(C)Lorg/c/a/e/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fbab0.  v0:= new `org.c.a.e.c$a`;
  #L3fbab4.  call `<init>`(v0, v2) @signature `Lorg/c/a/e/c$a;.<init>:(C)V` @kind direct;
  #L3fbaba.  call temp:= `a`(v1, v0) @signature `Lorg/c/a/e/c;.a:(Ljava/lang/Object;)Lorg/c/a/e/c;` @kind direct;
  #L3fbac0.  v2:= temp @kind object;
  #L3fbac2.  return v2 @kind object;
}
procedure `org.c.a.e.c` `a`(`org.c.a.e.c` v2 @kind this, `int` v3 ) @signature `Lorg/c/a/e/c;.a:(I)Lorg/c/a/e/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fbad4.  call temp:= `c`() @signature `Lorg/c/a/d;.c:()Lorg/c/a/d;` @kind static;
  #L3fbada.  v0:= temp @kind object;
  #L3fbadc.  v1:= 2I;
  #L3fbade.  call temp:= `a`(v2, v0, v3, v1) @signature `Lorg/c/a/e/c;.a:(Lorg/c/a/d;II)Lorg/c/a/e/c;` @kind virtual;
  #L3fbae4.  v3:= temp @kind object;
  #L3fbae6.  return v3 @kind object;
}
procedure `org.c.a.e.c` `a`(`org.c.a.e.c` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lorg/c/a/e/c;.a:(II)Lorg/c/a/e/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fbb24.  call temp:= `d`() @signature `Lorg/c/a/d;.d:()Lorg/c/a/d;` @kind static;
  #L3fbb2a.  v0:= temp @kind object;
  #L3fbb2c.  call temp:= `c`(v1, v0, v2, v3) @signature `Lorg/c/a/e/c;.c:(Lorg/c/a/d;II)Lorg/c/a/e/c;` @kind virtual;
  #L3fbb32.  v2:= temp @kind object;
  #L3fbb34.  return v2 @kind object;
}
procedure `org.c.a.e.c` `a`(`org.c.a.e.c` v2 @kind this, `int` v3 , `boolean` v4 ) @signature `Lorg/c/a/e/c;.a:(IZ)Lorg/c/a/e/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fbaf8.  v0:= new `org.c.a.e.c$m`;
  #L3fbafc.  call temp:= `s`() @signature `Lorg/c/a/d;.s:()Lorg/c/a/d;` @kind static;
  #L3fbb02.  v1:= temp @kind object;
  #L3fbb04.  call `<init>`(v0, v1, v3, v4) @signature `Lorg/c/a/e/c$m;.<init>:(Lorg/c/a/d;IZ)V` @kind direct;
  #L3fbb0a.  call temp:= `a`(v2, v0) @signature `Lorg/c/a/e/c;.a:(Ljava/lang/Object;)Lorg/c/a/e/c;` @kind direct;
  #L3fbb10.  v3:= temp @kind object;
  #L3fbb12.  return v3 @kind object;
}
procedure `org.c.a.e.c` `a`(`org.c.a.e.c` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lorg/c/a/e/c;.a:(Ljava/lang/String;)Lorg/c/a/e/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fbb74.  if v3 != 0 then goto L3fbb88;
  #L3fbb78.  v3:= new `java.lang.IllegalArgumentException`;
  #L3fbb7c.  v0:= "Literal must not be null" @kind object;
  #L3fbb80.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fbb86.  throw v3;
  #L3fbb88.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3fbb8e.  v0:= temp;
  #L3fbb90.  goto L3fbbcc;
  #L3fbb96.  v0:= new `org.c.a.e.c$h`;
  #L3fbb9a.  call `<init>`(v0, v3) @signature `Lorg/c/a/e/c$h;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fbba0.  call temp:= `a`(v2, v0) @signature `Lorg/c/a/e/c;.a:(Ljava/lang/Object;)Lorg/c/a/e/c;` @kind direct;
  #L3fbba6.  v3:= temp @kind object;
  #L3fbba8.  return v3 @kind object;
  #L3fbbaa.  v0:= new `org.c.a.e.c$a`;
  #L3fbbae.  v1:= 0I;
  #L3fbbb0.  call temp:= `charAt`(v3, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3fbbb6.  v3:= temp;
  #L3fbbb8.  call `<init>`(v0, v3) @signature `Lorg/c/a/e/c$a;.<init>:(C)V` @kind direct;
  #L3fbbbe.  call temp:= `a`(v2, v0) @signature `Lorg/c/a/e/c;.a:(Ljava/lang/Object;)Lorg/c/a/e/c;` @kind direct;
  #L3fbbc4.  v3:= temp @kind object;
  #L3fbbc6.  return v3 @kind object;
  #L3fbbc8.  return v2 @kind object;
  #L3fbbca.  
  #L3fbbcc.  switch v0
                  | 0 => goto L3fbbc8
                  | 1 => goto L3fbbaa
                  | else => goto L3fbb96;
}
procedure `org.c.a.e.c` `a`(`org.c.a.e.c` v7 @kind this, `java.lang.String` v8 @kind object, `java.lang.String` v9 @kind object, `boolean` v10 , `int` v11 , `int` v12 ) @signature `Lorg/c/a/e/c;.a:(Ljava/lang/String;Ljava/lang/String;ZII)Lorg/c/a/e/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3fbc1c.  v6:= new `org.c.a.e.c$l`;
  #L3fbc20.  v0:= v6 @kind object;
  #L3fbc22.  v1:= v8 @kind object;
  #L3fbc24.  v2:= v9 @kind object;
  #L3fbc26.  v3:= v10;
  #L3fbc28.  v4:= v11;
  #L3fbc2a.  v5:= v12;
  #L3fbc2c.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lorg/c/a/e/c$l;.<init>:(Ljava/lang/String;Ljava/lang/String;ZII)V` @kind direct;
  #L3fbc32.  call temp:= `a`(v7, v6) @signature `Lorg/c/a/e/c;.a:(Ljava/lang/Object;)Lorg/c/a/e/c;` @kind direct;
  #L3fbc38.  v8:= temp @kind object;
  #L3fbc3a.  return v8 @kind object;
}
procedure `org.c.a.e.c` `a`(`org.c.a.e.c` v7 @kind this, `java.lang.String` v8 @kind object, `boolean` v9 , `int` v10 , `int` v11 ) @signature `Lorg/c/a/e/c;.a:(Ljava/lang/String;ZII)Lorg/c/a/e/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3fbbec.  v6:= new `org.c.a.e.c$l`;
  #L3fbbf0.  v0:= v6 @kind object;
  #L3fbbf2.  v1:= v8 @kind object;
  #L3fbbf4.  v2:= v8 @kind object;
  #L3fbbf6.  v3:= v9;
  #L3fbbf8.  v4:= v10;
  #L3fbbfa.  v5:= v11;
  #L3fbbfc.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lorg/c/a/e/c$l;.<init>:(Ljava/lang/String;Ljava/lang/String;ZII)V` @kind direct;
  #L3fbc02.  call temp:= `a`(v7, v6) @signature `Lorg/c/a/e/c;.a:(Ljava/lang/Object;)Lorg/c/a/e/c;` @kind direct;
  #L3fbc08.  v8:= temp @kind object;
  #L3fbc0a.  return v8 @kind object;
}
procedure `org.c.a.e.c` `a`(`org.c.a.e.c` v2 @kind this, `java.util.Map` v3 @kind object) @signature `Lorg/c/a/e/c;.a:(Ljava/util/Map;)Lorg/c/a/e/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fbc4c.  v0:= new `org.c.a.e.c$k`;
  #L3fbc50.  v1:= 1I;
  #L3fbc52.  call `<init>`(v0, v1, v3) @signature `Lorg/c/a/e/c$k;.<init>:(ILjava/util/Map;)V` @kind direct;
  #L3fbc58.  call temp:= `a`(v2, v0, v0) @signature `Lorg/c/a/e/c;.a:(Lorg/c/a/e/n;Lorg/c/a/e/l;)Lorg/c/a/e/c;` @kind direct;
  #L3fbc5e.  v3:= temp @kind object;
  #L3fbc60.  return v3 @kind object;
}
procedure `org.c.a.e.c` `a`(`org.c.a.e.c` v2 @kind this, `org.c.a.d` v3 @kind object) @signature `Lorg/c/a/e/c;.a:(Lorg/c/a/d;)Lorg/c/a/e/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fbc74.  if v3 != 0 then goto L3fbc88;
  #L3fbc78.  v3:= new `java.lang.IllegalArgumentException`;
  #L3fbc7c.  v0:= "Field type must not be null" @kind object;
  #L3fbc80.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fbc86.  throw v3;
  #L3fbc88.  v0:= new `org.c.a.e.c$i`;
  #L3fbc8c.  v1:= 0I;
  #L3fbc8e.  call `<init>`(v0, v3, v1) @signature `Lorg/c/a/e/c$i;.<init>:(Lorg/c/a/d;Z)V` @kind direct;
  #L3fbc94.  call temp:= `a`(v2, v0) @signature `Lorg/c/a/e/c;.a:(Ljava/lang/Object;)Lorg/c/a/e/c;` @kind direct;
  #L3fbc9a.  v3:= temp @kind object;
  #L3fbc9c.  return v3 @kind object;
}
procedure `org.c.a.e.c` `a`(`org.c.a.e.c` v2 @kind this, `org.c.a.d` v3 @kind object, `int` v4 ) @signature `Lorg/c/a/e/c;.a:(Lorg/c/a/d;I)Lorg/c/a/e/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fbcb0.  if v3 != 0 then goto L3fbcc4;
  #L3fbcb4.  v3:= new `java.lang.IllegalArgumentException`;
  #L3fbcb8.  v4:= "Field type must not be null" @kind object;
  #L3fbcbc.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fbcc2.  throw v3;
  #L3fbcc4.  if v4 > 0 then goto L3fbcf6;
  #L3fbcc8.  v3:= new `java.lang.IllegalArgumentException`;
  #L3fbccc.  v0:= new `java.lang.StringBuilder`;
  #L3fbcd0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3fbcd6.  v1:= "Illegal number of digits: " @kind object;
  #L3fbcda.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fbce0.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fbce6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3fbcec.  v4:= temp @kind object;
  #L3fbcee.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fbcf4.  throw v3;
  #L3fbcf6.  v0:= new `org.c.a.e.c$c`;
  #L3fbcfa.  v1:= 0I;
  #L3fbcfc.  call `<init>`(v0, v3, v4, v1) @signature `Lorg/c/a/e/c$c;.<init>:(Lorg/c/a/d;IZ)V` @kind direct;
  #L3fbd02.  call temp:= `a`(v2, v0) @signature `Lorg/c/a/e/c;.a:(Ljava/lang/Object;)Lorg/c/a/e/c;` @kind direct;
  #L3fbd08.  v3:= temp @kind object;
  #L3fbd0a.  return v3 @kind object;
}
procedure `org.c.a.e.c` `a`(`org.c.a.e.c` v2 @kind this, `org.c.a.d` v3 @kind object, `int` v4 , `int` v5 ) @signature `Lorg/c/a/e/c;.a:(Lorg/c/a/d;II)Lorg/c/a/e/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fbd1c.  if v3 != 0 then goto L3fbd30;
  #L3fbd20.  v3:= new `java.lang.IllegalArgumentException`;
  #L3fbd24.  v4:= "Field type must not be null" @kind object;
  #L3fbd28.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fbd2e.  throw v3;
  #L3fbd30.  if v5 >= v4 then goto L3fbd36;
  #L3fbd34.  v5:= v4;
  #L3fbd36.  if v4 < 0 then goto L3fbd70;
  #L3fbd3a.  if v5 > 0 then goto L3fbd40;
  #L3fbd3e.  goto L3fbd70;
  #L3fbd40.  v0:= 1I;
  #L3fbd42.  v1:= 0I;
  #L3fbd44.  if v4 > v0 then goto L3fbd5c;
  #L3fbd48.  v4:= new `org.c.a.e.c$n`;
  #L3fbd4c.  call `<init>`(v4, v3, v5, v1) @signature `Lorg/c/a/e/c$n;.<init>:(Lorg/c/a/d;IZ)V` @kind direct;
  #L3fbd52.  call temp:= `a`(v2, v4) @signature `Lorg/c/a/e/c;.a:(Ljava/lang/Object;)Lorg/c/a/e/c;` @kind direct;
  #L3fbd58.  v3:= temp @kind object;
  #L3fbd5a.  return v3 @kind object;
  #L3fbd5c.  v0:= new `org.c.a.e.c$g`;
  #L3fbd60.  call `<init>`(v0, v3, v5, v1, v4) @signature `Lorg/c/a/e/c$g;.<init>:(Lorg/c/a/d;IZI)V` @kind direct;
  #L3fbd66.  call temp:= `a`(v2, v0) @signature `Lorg/c/a/e/c;.a:(Ljava/lang/Object;)Lorg/c/a/e/c;` @kind direct;
  #L3fbd6c.  v3:= temp @kind object;
  #L3fbd6e.  return v3 @kind object;
  #L3fbd70.  v3:= new `java.lang.IllegalArgumentException`;
  #L3fbd74.  call `<init>`(v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L3fbd7a.  throw v3;
}
procedure `org.c.a.e.c` `a`(`org.c.a.e.c` v1 @kind this, `org.c.a.e.b` v2 @kind object) @signature `Lorg/c/a/e/c;.a:(Lorg/c/a/e/b;)Lorg/c/a/e/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fbd8c.  if v2 != 0 then goto L3fbda0;
  #L3fbd90.  v2:= new `java.lang.IllegalArgumentException`;
  #L3fbd94.  v0:= "No formatter supplied" @kind object;
  #L3fbd98.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fbd9e.  throw v2;
  #L3fbda0.  call temp:= `a`(v2) @signature `Lorg/c/a/e/b;.a:()Lorg/c/a/e/n;` @kind virtual;
  #L3fbda6.  v0:= temp @kind object;
  #L3fbda8.  call temp:= `c`(v2) @signature `Lorg/c/a/e/b;.c:()Lorg/c/a/e/l;` @kind virtual;
  #L3fbdae.  v2:= temp @kind object;
  #L3fbdb0.  call temp:= `a`(v1, v0, v2) @signature `Lorg/c/a/e/c;.a:(Lorg/c/a/e/n;Lorg/c/a/e/l;)Lorg/c/a/e/c;` @kind direct;
  #L3fbdb6.  v2:= temp @kind object;
  #L3fbdb8.  return v2 @kind object;
}
procedure `org.c.a.e.c` `a`(`org.c.a.e.c` v1 @kind this, `org.c.a.e.d` v2 @kind object) @signature `Lorg/c/a/e/c;.a:(Lorg/c/a/e/d;)Lorg/c/a/e/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fbdcc.  call `c`(v1, v2) @signature `Lorg/c/a/e/c;.c:(Lorg/c/a/e/d;)V` @kind direct;
  #L3fbdd2.  call temp:= `a`(v2) @signature `Lorg/c/a/e/f;.a:(Lorg/c/a/e/d;)Lorg/c/a/e/l;` @kind static;
  #L3fbdd8.  v2:= temp @kind object;
  #L3fbdda.  v0:= 0I;
  #L3fbddc.  call temp:= `a`(v1, v0, v2) @signature `Lorg/c/a/e/c;.a:(Lorg/c/a/e/n;Lorg/c/a/e/l;)Lorg/c/a/e/c;` @kind direct;
  #L3fbde2.  v2:= temp @kind object;
  #L3fbde4.  return v2 @kind object;
}
procedure `org.c.a.e.c` `a`(`org.c.a.e.c` v5 @kind this, `org.c.a.e.g` v6 @kind object, `org.c.a.e.d`[] v7 @kind object) @signature `Lorg/c/a/e/c;.a:(Lorg/c/a/e/g;[Lorg/c/a/e/d;)Lorg/c/a/e/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3fbdf8.  if v6 == 0 then goto L3fbe02;
  #L3fbdfc.  call `a`(v5, v6) @signature `Lorg/c/a/e/c;.a:(Lorg/c/a/e/g;)V` @kind direct;
  #L3fbe02.  if v7 != 0 then goto L3fbe16;
  #L3fbe06.  v6:= new `java.lang.IllegalArgumentException`;
  #L3fbe0a.  v7:= "No parsers supplied" @kind object;
  #L3fbe0e.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fbe14.  throw v6;
  #L3fbe16.  v0:= length @variable v7;
  #L3fbe18.  v1:= 0I;
  #L3fbe1a.  v2:= 1I;
  #L3fbe1c.  if v0 != v2 then goto L3fbe56;
  #L3fbe20.  v0:= v7[v1] @kind object;
  #L3fbe24.  if v0 != 0 then goto L3fbe38;
  #L3fbe28.  v6:= new `java.lang.IllegalArgumentException`;
  #L3fbe2c.  v7:= "No parser supplied" @kind object;
  #L3fbe30.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fbe36.  throw v6;
  #L3fbe38.  call temp:= `a`(v6) @signature `Lorg/c/a/e/h;.a:(Lorg/c/a/e/g;)Lorg/c/a/e/n;` @kind static;
  #L3fbe3e.  v6:= temp @kind object;
  #L3fbe40.  v7:= v7[v1] @kind object;
  #L3fbe44.  call temp:= `a`(v7) @signature `Lorg/c/a/e/f;.a:(Lorg/c/a/e/d;)Lorg/c/a/e/l;` @kind static;
  #L3fbe4a.  v7:= temp @kind object;
  #L3fbe4c.  call temp:= `a`(v5, v6, v7) @signature `Lorg/c/a/e/c;.a:(Lorg/c/a/e/n;Lorg/c/a/e/l;)Lorg/c/a/e/c;` @kind direct;
  #L3fbe52.  v6:= temp @kind object;
  #L3fbe54.  return v6 @kind object;
  #L3fbe56.  v3:= new `org.c.a.e.l`[v0];
  #L3fbe5a.  v4:= v0 + -1;
  #L3fbe5e.  if v1 >= v4 then goto L3fbe8c;
  #L3fbe62.  v4:= v7[v1] @kind object;
  #L3fbe66.  call temp:= `a`(v4) @signature `Lorg/c/a/e/f;.a:(Lorg/c/a/e/d;)Lorg/c/a/e/l;` @kind static;
  #L3fbe6c.  v4:= temp @kind object;
  #L3fbe6e.  v3[v1]:= v4 @kind object;
  #L3fbe72.  if v4 != 0 then goto L3fbe86;
  #L3fbe76.  v6:= new `java.lang.IllegalArgumentException`;
  #L3fbe7a.  v7:= "Incomplete parser array" @kind object;
  #L3fbe7e.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fbe84.  throw v6;
  #L3fbe86.  v1:= v1 + 1;
  #L3fbe8a.  goto L3fbe5a;
  #L3fbe8c.  v7:= v7[v1] @kind object;
  #L3fbe90.  call temp:= `a`(v7) @signature `Lorg/c/a/e/f;.a:(Lorg/c/a/e/d;)Lorg/c/a/e/l;` @kind static;
  #L3fbe96.  v7:= temp @kind object;
  #L3fbe98.  v3[v1]:= v7 @kind object;
  #L3fbe9c.  call temp:= `a`(v6) @signature `Lorg/c/a/e/h;.a:(Lorg/c/a/e/g;)Lorg/c/a/e/n;` @kind static;
  #L3fbea2.  v6:= temp @kind object;
  #L3fbea4.  v7:= new `org.c.a.e.c$e`;
  #L3fbea8.  call `<init>`(v7, v3) @signature `Lorg/c/a/e/c$e;.<init>:([Lorg/c/a/e/l;)V` @kind direct;
  #L3fbeae.  call temp:= `a`(v5, v6, v7) @signature `Lorg/c/a/e/c;.a:(Lorg/c/a/e/n;Lorg/c/a/e/l;)Lorg/c/a/e/c;` @kind direct;
  #L3fbeb4.  v6:= temp @kind object;
  #L3fbeb6.  return v6 @kind object;
}
procedure `org.c.a.e.c` `b`(`org.c.a.e.c` v2 @kind this, `int` v3 ) @signature `Lorg/c/a/e/c;.b:(I)Lorg/c/a/e/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fbef4.  call temp:= `e`() @signature `Lorg/c/a/d;.e:()Lorg/c/a/d;` @kind static;
  #L3fbefa.  v0:= temp @kind object;
  #L3fbefc.  v1:= 2I;
  #L3fbefe.  call temp:= `a`(v2, v0, v3, v1) @signature `Lorg/c/a/e/c;.a:(Lorg/c/a/d;II)Lorg/c/a/e/c;` @kind virtual;
  #L3fbf04.  v3:= temp @kind object;
  #L3fbf06.  return v3 @kind object;
}
procedure `org.c.a.e.c` `b`(`org.c.a.e.c` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lorg/c/a/e/c;.b:(II)Lorg/c/a/e/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fbf44.  call temp:= `f`() @signature `Lorg/c/a/d;.f:()Lorg/c/a/d;` @kind static;
  #L3fbf4a.  v0:= temp @kind object;
  #L3fbf4c.  call temp:= `c`(v1, v0, v2, v3) @signature `Lorg/c/a/e/c;.c:(Lorg/c/a/d;II)Lorg/c/a/e/c;` @kind virtual;
  #L3fbf52.  v2:= temp @kind object;
  #L3fbf54.  return v2 @kind object;
}
procedure `org.c.a.e.c` `b`(`org.c.a.e.c` v2 @kind this, `int` v3 , `boolean` v4 ) @signature `Lorg/c/a/e/c;.b:(IZ)Lorg/c/a/e/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fbf18.  v0:= new `org.c.a.e.c$m`;
  #L3fbf1c.  call temp:= `p`() @signature `Lorg/c/a/d;.p:()Lorg/c/a/d;` @kind static;
  #L3fbf22.  v1:= temp @kind object;
  #L3fbf24.  call `<init>`(v0, v1, v3, v4) @signature `Lorg/c/a/e/c$m;.<init>:(Lorg/c/a/d;IZ)V` @kind direct;
  #L3fbf2a.  call temp:= `a`(v2, v0) @signature `Lorg/c/a/e/c;.a:(Ljava/lang/Object;)Lorg/c/a/e/c;` @kind direct;
  #L3fbf30.  v3:= temp @kind object;
  #L3fbf32.  return v3 @kind object;
}
procedure `org.c.a.e.c` `b`(`org.c.a.e.c` v2 @kind this, `org.c.a.d` v3 @kind object) @signature `Lorg/c/a/e/c;.b:(Lorg/c/a/d;)Lorg/c/a/e/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fbf68.  if v3 != 0 then goto L3fbf7c;
  #L3fbf6c.  v3:= new `java.lang.IllegalArgumentException`;
  #L3fbf70.  v0:= "Field type must not be null" @kind object;
  #L3fbf74.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fbf7a.  throw v3;
  #L3fbf7c.  v0:= new `org.c.a.e.c$i`;
  #L3fbf80.  v1:= 1I;
  #L3fbf82.  call `<init>`(v0, v3, v1) @signature `Lorg/c/a/e/c$i;.<init>:(Lorg/c/a/d;Z)V` @kind direct;
  #L3fbf88.  call temp:= `a`(v2, v0) @signature `Lorg/c/a/e/c;.a:(Ljava/lang/Object;)Lorg/c/a/e/c;` @kind direct;
  #L3fbf8e.  v3:= temp @kind object;
  #L3fbf90.  return v3 @kind object;
}
procedure `org.c.a.e.c` `b`(`org.c.a.e.c` v2 @kind this, `org.c.a.d` v3 @kind object, `int` v4 , `int` v5 ) @signature `Lorg/c/a/e/c;.b:(Lorg/c/a/d;II)Lorg/c/a/e/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fbfa4.  if v3 != 0 then goto L3fbfb8;
  #L3fbfa8.  v3:= new `java.lang.IllegalArgumentException`;
  #L3fbfac.  v4:= "Field type must not be null" @kind object;
  #L3fbfb0.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fbfb6.  throw v3;
  #L3fbfb8.  if v5 >= v4 then goto L3fbfbe;
  #L3fbfbc.  v5:= v4;
  #L3fbfbe.  if v4 < 0 then goto L3fbff6;
  #L3fbfc2.  if v5 > 0 then goto L3fbfc8;
  #L3fbfc6.  goto L3fbff6;
  #L3fbfc8.  v0:= 1I;
  #L3fbfca.  if v4 > v0 then goto L3fbfe2;
  #L3fbfce.  v4:= new `org.c.a.e.c$n`;
  #L3fbfd2.  call `<init>`(v4, v3, v5, v0) @signature `Lorg/c/a/e/c$n;.<init>:(Lorg/c/a/d;IZ)V` @kind direct;
  #L3fbfd8.  call temp:= `a`(v2, v4) @signature `Lorg/c/a/e/c;.a:(Ljava/lang/Object;)Lorg/c/a/e/c;` @kind direct;
  #L3fbfde.  v3:= temp @kind object;
  #L3fbfe0.  return v3 @kind object;
  #L3fbfe2.  v1:= new `org.c.a.e.c$g`;
  #L3fbfe6.  call `<init>`(v1, v3, v5, v0, v4) @signature `Lorg/c/a/e/c$g;.<init>:(Lorg/c/a/d;IZI)V` @kind direct;
  #L3fbfec.  call temp:= `a`(v2, v1) @signature `Lorg/c/a/e/c;.a:(Ljava/lang/Object;)Lorg/c/a/e/c;` @kind direct;
  #L3fbff2.  v3:= temp @kind object;
  #L3fbff4.  return v3 @kind object;
  #L3fbff6.  v3:= new `java.lang.IllegalArgumentException`;
  #L3fbffa.  call `<init>`(v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L3fc000.  throw v3;
}
procedure `org.c.a.e.c` `b`(`org.c.a.e.c` v2 @kind this, `org.c.a.e.d` v3 @kind object) @signature `Lorg/c/a/e/c;.b:(Lorg/c/a/e/d;)Lorg/c/a/e/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fc014.  call `c`(v2, v3) @signature `Lorg/c/a/e/c;.c:(Lorg/c/a/e/d;)V` @kind direct;
  #L3fc01a.  v0:= 2I;
  #L3fc01c.  v0:= new `org.c.a.e.l`[v0];
  #L3fc020.  call temp:= `a`(v3) @signature `Lorg/c/a/e/f;.a:(Lorg/c/a/e/d;)Lorg/c/a/e/l;` @kind static;
  #L3fc026.  v3:= temp @kind object;
  #L3fc028.  v1:= 0I;
  #L3fc02a.  v0[v1]:= v3 @kind object;
  #L3fc02e.  v3:= 0I;
  #L3fc030.  v1:= 1I;
  #L3fc032.  v0[v1]:= v3 @kind object;
  #L3fc036.  v1:= new `org.c.a.e.c$e`;
  #L3fc03a.  call `<init>`(v1, v0) @signature `Lorg/c/a/e/c$e;.<init>:([Lorg/c/a/e/l;)V` @kind direct;
  #L3fc040.  call temp:= `a`(v2, v3, v1) @signature `Lorg/c/a/e/c;.a:(Lorg/c/a/e/n;Lorg/c/a/e/l;)Lorg/c/a/e/c;` @kind direct;
  #L3fc046.  v3:= temp @kind object;
  #L3fc048.  return v3 @kind object;
}
procedure `org.c.a.e.d` `b`(`org.c.a.e.c` v2 @kind this) @signature `Lorg/c/a/e/c;.b:()Lorg/c/a/e/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fc3cc.  call temp:= `k`(v2) @signature `Lorg/c/a/e/c;.k:()Ljava/lang/Object;` @kind direct;
  #L3fc3d2.  v0:= temp @kind object;
  #L3fc3d4.  call temp:= `c`(v2, v0) @signature `Lorg/c/a/e/c;.c:(Ljava/lang/Object;)Z` @kind direct;
  #L3fc3da.  v1:= temp;
  #L3fc3dc.  if v1 == 0 then goto L3fc3ee;
  #L3fc3e0.  v0:= (`org.c.a.e.l`) v0 @kind object;
  #L3fc3e4.  call temp:= `a`(v0) @signature `Lorg/c/a/e/m;.a:(Lorg/c/a/e/l;)Lorg/c/a/e/d;` @kind static;
  #L3fc3ea.  v0:= temp @kind object;
  #L3fc3ec.  return v0 @kind object;
  #L3fc3ee.  v0:= new `java.lang.UnsupportedOperationException`;
  #L3fc3f2.  v1:= "Parsing is not supported" @kind object;
  #L3fc3f6.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fc3fc.  throw v0;
}
procedure `org.c.a.e.c` `c`(`org.c.a.e.c` v1 @kind this) @signature `Lorg/c/a/e/c;.c:()Lorg/c/a/e/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fc05c.  call temp:= `k`() @signature `Lorg/c/a/d;.k:()Lorg/c/a/d;` @kind static;
  #L3fc062.  v0:= temp @kind object;
  #L3fc064.  call temp:= `a`(v1, v0) @signature `Lorg/c/a/e/c;.a:(Lorg/c/a/d;)Lorg/c/a/e/c;` @kind virtual;
  #L3fc06a.  v0:= temp @kind object;
  #L3fc06c.  return v0 @kind object;
}
procedure `org.c.a.e.c` `c`(`org.c.a.e.c` v2 @kind this, `int` v3 ) @signature `Lorg/c/a/e/c;.c:(I)Lorg/c/a/e/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fc080.  call temp:= `g`() @signature `Lorg/c/a/d;.g:()Lorg/c/a/d;` @kind static;
  #L3fc086.  v0:= temp @kind object;
  #L3fc088.  v1:= 2I;
  #L3fc08a.  call temp:= `a`(v2, v0, v3, v1) @signature `Lorg/c/a/e/c;.a:(Lorg/c/a/d;II)Lorg/c/a/e/c;` @kind virtual;
  #L3fc090.  v3:= temp @kind object;
  #L3fc092.  return v3 @kind object;
}
procedure `org.c.a.e.c` `c`(`org.c.a.e.c` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lorg/c/a/e/c;.c:(II)Lorg/c/a/e/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fc0a4.  call temp:= `g`() @signature `Lorg/c/a/d;.g:()Lorg/c/a/d;` @kind static;
  #L3fc0aa.  v0:= temp @kind object;
  #L3fc0ac.  call temp:= `c`(v1, v0, v2, v3) @signature `Lorg/c/a/e/c;.c:(Lorg/c/a/d;II)Lorg/c/a/e/c;` @kind virtual;
  #L3fc0b2.  v2:= temp @kind object;
  #L3fc0b4.  return v2 @kind object;
}
procedure `org.c.a.e.c` `c`(`org.c.a.e.c` v1 @kind this, `org.c.a.d` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lorg/c/a/e/c;.c:(Lorg/c/a/d;II)Lorg/c/a/e/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fc0c8.  if v2 != 0 then goto L3fc0dc;
  #L3fc0cc.  v2:= new `java.lang.IllegalArgumentException`;
  #L3fc0d0.  v3:= "Field type must not be null" @kind object;
  #L3fc0d4.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3fc0da.  throw v2;
  #L3fc0dc.  if v4 >= v3 then goto L3fc0e2;
  #L3fc0e0.  v4:= v3;
  #L3fc0e2.  if v3 < 0 then goto L3fc100;
  #L3fc0e6.  if v4 > 0 then goto L3fc0ec;
  #L3fc0ea.  goto L3fc100;
  #L3fc0ec.  v0:= new `org.c.a.e.c$d`;
  #L3fc0f0.  call `<init>`(v0, v2, v3, v4) @signature `Lorg/c/a/e/c$d;.<init>:(Lorg/c/a/d;II)V` @kind direct;
  #L3fc0f6.  call temp:= `a`(v1, v0) @signature `Lorg/c/a/e/c;.a:(Ljava/lang/Object;)Lorg/c/a/e/c;` @kind direct;
  #L3fc0fc.  v2:= temp @kind object;
  #L3fc0fe.  return v2 @kind object;
  #L3fc100.  v2:= new `java.lang.IllegalArgumentException`;
  #L3fc104.  call `<init>`(v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L3fc10a.  throw v2;
}
procedure `org.c.a.e.c` `d`(`org.c.a.e.c` v1 @kind this) @signature `Lorg/c/a/e/c;.d:()Lorg/c/a/e/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fc11c.  call temp:= `l`() @signature `Lorg/c/a/d;.l:()Lorg/c/a/d;` @kind static;
  #L3fc122.  v0:= temp @kind object;
  #L3fc124.  call temp:= `a`(v1, v0) @signature `Lorg/c/a/e/c;.a:(Lorg/c/a/d;)Lorg/c/a/e/c;` @kind virtual;
  #L3fc12a.  v0:= temp @kind object;
  #L3fc12c.  return v0 @kind object;
}
procedure `org.c.a.e.c` `d`(`org.c.a.e.c` v2 @kind this, `int` v3 ) @signature `Lorg/c/a/e/c;.d:(I)Lorg/c/a/e/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fc140.  call temp:= `h`() @signature `Lorg/c/a/d;.h:()Lorg/c/a/d;` @kind static;
  #L3fc146.  v0:= temp @kind object;
  #L3fc148.  v1:= 2I;
  #L3fc14a.  call temp:= `a`(v2, v0, v3, v1) @signature `Lorg/c/a/e/c;.a:(Lorg/c/a/d;II)Lorg/c/a/e/c;` @kind virtual;
  #L3fc150.  v3:= temp @kind object;
  #L3fc152.  return v3 @kind object;
}
procedure `org.c.a.e.c` `d`(`org.c.a.e.c` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lorg/c/a/e/c;.d:(II)Lorg/c/a/e/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fc164.  call temp:= `p`() @signature `Lorg/c/a/d;.p:()Lorg/c/a/d;` @kind static;
  #L3fc16a.  v0:= temp @kind object;
  #L3fc16c.  call temp:= `b`(v1, v0, v2, v3) @signature `Lorg/c/a/e/c;.b:(Lorg/c/a/d;II)Lorg/c/a/e/c;` @kind virtual;
  #L3fc172.  v2:= temp @kind object;
  #L3fc174.  return v2 @kind object;
}
procedure `org.c.a.e.c` `e`(`org.c.a.e.c` v1 @kind this) @signature `Lorg/c/a/e/c;.e:()Lorg/c/a/e/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fc188.  call temp:= `l`() @signature `Lorg/c/a/d;.l:()Lorg/c/a/d;` @kind static;
  #L3fc18e.  v0:= temp @kind object;
  #L3fc190.  call temp:= `b`(v1, v0) @signature `Lorg/c/a/e/c;.b:(Lorg/c/a/d;)Lorg/c/a/e/c;` @kind virtual;
  #L3fc196.  v0:= temp @kind object;
  #L3fc198.  return v0 @kind object;
}
procedure `org.c.a.e.c` `e`(`org.c.a.e.c` v2 @kind this, `int` v3 ) @signature `Lorg/c/a/e/c;.e:(I)Lorg/c/a/e/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fc1ac.  call temp:= `i`() @signature `Lorg/c/a/d;.i:()Lorg/c/a/d;` @kind static;
  #L3fc1b2.  v0:= temp @kind object;
  #L3fc1b4.  v1:= 2I;
  #L3fc1b6.  call temp:= `a`(v2, v0, v3, v1) @signature `Lorg/c/a/e/c;.a:(Lorg/c/a/d;II)Lorg/c/a/e/c;` @kind virtual;
  #L3fc1bc.  v3:= temp @kind object;
  #L3fc1be.  return v3 @kind object;
}
procedure `org.c.a.e.c` `e`(`org.c.a.e.c` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lorg/c/a/e/c;.e:(II)Lorg/c/a/e/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fc1d0.  call temp:= `s`() @signature `Lorg/c/a/d;.s:()Lorg/c/a/d;` @kind static;
  #L3fc1d6.  v0:= temp @kind object;
  #L3fc1d8.  call temp:= `b`(v1, v0, v2, v3) @signature `Lorg/c/a/e/c;.b:(Lorg/c/a/d;II)Lorg/c/a/e/c;` @kind virtual;
  #L3fc1de.  v2:= temp @kind object;
  #L3fc1e0.  return v2 @kind object;
}
procedure `org.c.a.e.c` `f`(`org.c.a.e.c` v1 @kind this) @signature `Lorg/c/a/e/c;.f:()Lorg/c/a/e/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fc1f4.  call temp:= `r`() @signature `Lorg/c/a/d;.r:()Lorg/c/a/d;` @kind static;
  #L3fc1fa.  v0:= temp @kind object;
  #L3fc1fc.  call temp:= `a`(v1, v0) @signature `Lorg/c/a/e/c;.a:(Lorg/c/a/d;)Lorg/c/a/e/c;` @kind virtual;
  #L3fc202.  v0:= temp @kind object;
  #L3fc204.  return v0 @kind object;
}
procedure `org.c.a.e.c` `f`(`org.c.a.e.c` v2 @kind this, `int` v3 ) @signature `Lorg/c/a/e/c;.f:(I)Lorg/c/a/e/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fc218.  call temp:= `j`() @signature `Lorg/c/a/d;.j:()Lorg/c/a/d;` @kind static;
  #L3fc21e.  v0:= temp @kind object;
  #L3fc220.  v1:= 2I;
  #L3fc222.  call temp:= `a`(v2, v0, v3, v1) @signature `Lorg/c/a/e/c;.a:(Lorg/c/a/d;II)Lorg/c/a/e/c;` @kind virtual;
  #L3fc228.  v3:= temp @kind object;
  #L3fc22a.  return v3 @kind object;
}
procedure `org.c.a.e.c` `f`(`org.c.a.e.c` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lorg/c/a/e/c;.f:(II)Lorg/c/a/e/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fc23c.  call temp:= `t`() @signature `Lorg/c/a/d;.t:()Lorg/c/a/d;` @kind static;
  #L3fc242.  v0:= temp @kind object;
  #L3fc244.  call temp:= `a`(v1, v0, v2, v3) @signature `Lorg/c/a/e/c;.a:(Lorg/c/a/d;II)Lorg/c/a/e/c;` @kind virtual;
  #L3fc24a.  v2:= temp @kind object;
  #L3fc24c.  return v2 @kind object;
}
procedure `org.c.a.e.c` `g`(`org.c.a.e.c` v1 @kind this) @signature `Lorg/c/a/e/c;.g:()Lorg/c/a/e/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fc260.  call temp:= `r`() @signature `Lorg/c/a/d;.r:()Lorg/c/a/d;` @kind static;
  #L3fc266.  v0:= temp @kind object;
  #L3fc268.  call temp:= `b`(v1, v0) @signature `Lorg/c/a/e/c;.b:(Lorg/c/a/d;)Lorg/c/a/e/c;` @kind virtual;
  #L3fc26e.  v0:= temp @kind object;
  #L3fc270.  return v0 @kind object;
}
procedure `org.c.a.e.c` `g`(`org.c.a.e.c` v2 @kind this, `int` v3 ) @signature `Lorg/c/a/e/c;.g:(I)Lorg/c/a/e/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fc284.  call temp:= `l`() @signature `Lorg/c/a/d;.l:()Lorg/c/a/d;` @kind static;
  #L3fc28a.  v0:= temp @kind object;
  #L3fc28c.  v1:= 1I;
  #L3fc28e.  call temp:= `a`(v2, v0, v3, v1) @signature `Lorg/c/a/e/c;.a:(Lorg/c/a/d;II)Lorg/c/a/e/c;` @kind virtual;
  #L3fc294.  v3:= temp @kind object;
  #L3fc296.  return v3 @kind object;
}
procedure `org.c.a.e.c` `g`(`org.c.a.e.c` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lorg/c/a/e/c;.g:(II)Lorg/c/a/e/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fc2a8.  call temp:= `v`() @signature `Lorg/c/a/d;.v:()Lorg/c/a/d;` @kind static;
  #L3fc2ae.  v0:= temp @kind object;
  #L3fc2b0.  call temp:= `b`(v1, v0, v2, v3) @signature `Lorg/c/a/e/c;.b:(Lorg/c/a/d;II)Lorg/c/a/e/c;` @kind virtual;
  #L3fc2b6.  v2:= temp @kind object;
  #L3fc2b8.  return v2 @kind object;
}
procedure `org.c.a.e.c` `h`(`org.c.a.e.c` v1 @kind this) @signature `Lorg/c/a/e/c;.h:()Lorg/c/a/e/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fc2cc.  call temp:= `w`() @signature `Lorg/c/a/d;.w:()Lorg/c/a/d;` @kind static;
  #L3fc2d2.  v0:= temp @kind object;
  #L3fc2d4.  call temp:= `a`(v1, v0) @signature `Lorg/c/a/e/c;.a:(Lorg/c/a/d;)Lorg/c/a/e/c;` @kind virtual;
  #L3fc2da.  v0:= temp @kind object;
  #L3fc2dc.  return v0 @kind object;
}
procedure `org.c.a.e.c` `h`(`org.c.a.e.c` v2 @kind this, `int` v3 ) @signature `Lorg/c/a/e/c;.h:(I)Lorg/c/a/e/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fc2f0.  call temp:= `m`() @signature `Lorg/c/a/d;.m:()Lorg/c/a/d;` @kind static;
  #L3fc2f6.  v0:= temp @kind object;
  #L3fc2f8.  v1:= 2I;
  #L3fc2fa.  call temp:= `a`(v2, v0, v3, v1) @signature `Lorg/c/a/e/c;.a:(Lorg/c/a/d;II)Lorg/c/a/e/c;` @kind virtual;
  #L3fc300.  v3:= temp @kind object;
  #L3fc302.  return v3 @kind object;
}
procedure `org.c.a.e.c` `i`(`org.c.a.e.c` v3 @kind this) @signature `Lorg/c/a/e/c;.i:()Lorg/c/a/e/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3fc314.  v0:= new `org.c.a.e.c$k`;
  #L3fc318.  v1:= 0I;
  #L3fc31a.  v2:= 0I;
  #L3fc31c.  call `<init>`(v0, v2, v1) @signature `Lorg/c/a/e/c$k;.<init>:(ILjava/util/Map;)V` @kind direct;
  #L3fc322.  call temp:= `a`(v3, v0, v1) @signature `Lorg/c/a/e/c;.a:(Lorg/c/a/e/n;Lorg/c/a/e/l;)Lorg/c/a/e/c;` @kind direct;
  #L3fc328.  v0:= temp @kind object;
  #L3fc32a.  return v0 @kind object;
}
procedure `org.c.a.e.c` `i`(`org.c.a.e.c` v2 @kind this, `int` v3 ) @signature `Lorg/c/a/e/c;.i:(I)Lorg/c/a/e/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fc33c.  call temp:= `n`() @signature `Lorg/c/a/d;.n:()Lorg/c/a/d;` @kind static;
  #L3fc342.  v0:= temp @kind object;
  #L3fc344.  v1:= 3I;
  #L3fc346.  call temp:= `a`(v2, v0, v3, v1) @signature `Lorg/c/a/e/c;.a:(Lorg/c/a/d;II)Lorg/c/a/e/c;` @kind virtual;
  #L3fc34c.  v3:= temp @kind object;
  #L3fc34e.  return v3 @kind object;
}
procedure `org.c.a.e.c` `j`(`org.c.a.e.c` v2 @kind this) @signature `Lorg/c/a/e/c;.j:()Lorg/c/a/e/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fc360.  v0:= `@@org.c.a.e.c$j.a` @type ^`org.c.a.e.c$j` @kind object;
  #L3fc364.  v1:= `@@org.c.a.e.c$j.a` @type ^`org.c.a.e.c$j` @kind object;
  #L3fc368.  call temp:= `a`(v2, v0, v1) @signature `Lorg/c/a/e/c;.a:(Lorg/c/a/e/n;Lorg/c/a/e/l;)Lorg/c/a/e/c;` @kind direct;
  #L3fc36e.  v0:= temp @kind object;
  #L3fc370.  return v0 @kind object;
}
procedure `org.c.a.e.c` `j`(`org.c.a.e.c` v2 @kind this, `int` v3 ) @signature `Lorg/c/a/e/c;.j:(I)Lorg/c/a/e/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fc384.  call temp:= `o`() @signature `Lorg/c/a/d;.o:()Lorg/c/a/d;` @kind static;
  #L3fc38a.  v0:= temp @kind object;
  #L3fc38c.  v1:= 2I;
  #L3fc38e.  call temp:= `a`(v2, v0, v3, v1) @signature `Lorg/c/a/e/c;.a:(Lorg/c/a/d;II)Lorg/c/a/e/c;` @kind virtual;
  #L3fc394.  v3:= temp @kind object;
  #L3fc396.  return v3 @kind object;
}
procedure `org.c.a.e.c` `k`(`org.c.a.e.c` v2 @kind this, `int` v3 ) @signature `Lorg/c/a/e/c;.k:(I)Lorg/c/a/e/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3fc3a8.  call temp:= `r`() @signature `Lorg/c/a/d;.r:()Lorg/c/a/d;` @kind static;
  #L3fc3ae.  v0:= temp @kind object;
  #L3fc3b0.  v1:= 2I;
  #L3fc3b2.  call temp:= `a`(v2, v0, v3, v1) @signature `Lorg/c/a/e/c;.a:(Lorg/c/a/d;II)Lorg/c/a/e/c;` @kind virtual;
  #L3fc3b8.  v3:= temp @kind object;
  #L3fc3ba.  return v3 @kind object;
}
