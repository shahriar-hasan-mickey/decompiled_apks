record `org.c.a.e.c$c` @kind class @AccessFlag  extends `org.c.a.e.c$g` @kind class {
}
procedure `void` `<init>`(`org.c.a.e.c$c` v0 @kind this, `org.c.a.d` v1 @kind object, `int` v2 , `boolean` v3 ) @signature `Lorg/c/a/e/c$c;.<init>:(Lorg/c/a/d;IZ)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L3f9e78.  call `<init>`(v0, v1, v2, v3, v2) @signature `Lorg/c/a/e/c$g;.<init>:(Lorg/c/a/d;IZI)V` @kind direct;
  #L3f9e7e.  return @kind void;
}
procedure `int` `a`(`org.c.a.e.c$c` v2 @kind this, `org.c.a.e.e` v3 @kind object, `java.lang.CharSequence` v4 @kind object, `int` v5 ) @signature `Lorg/c/a/e/c$c;.a:(Lorg/c/a/e/e;Ljava/lang/CharSequence;I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f9e10.  call temp:= `a`(v2, v3, v4, v5) @signature `Lorg/c/a/e/c$g;.a:(Lorg/c/a/e/e;Ljava/lang/CharSequence;I)I` @kind super;
  #L3f9e16.  v3:= temp;
  #L3f9e18.  if v3 >= 0 then goto L3f9e1e;
  #L3f9e1c.  return v3;
  #L3f9e1e.  v0:= v2.`org.c.a.e.c$c.b` @type ^`int`;
  #L3f9e22.  v0:= v0 + v5 @kind int;
  #L3f9e24.  if v3 == v0 then goto L3f9e64;
  #L3f9e28.  v1:= v2.`org.c.a.e.c$c.c` @type ^`boolean` @kind boolean;
  #L3f9e2c.  if v1 == 0 then goto L3f9e4c;
  #L3f9e30.  call temp:= `charAt`(v4, v5) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L3f9e36.  v4:= temp;
  #L3f9e38.  v5:= 45I;
  #L3f9e3c.  if v4 == v5 then goto L3f9e48;
  #L3f9e40.  v5:= 43I;
  #L3f9e44.  if v4 != v5 then goto L3f9e4c;
  #L3f9e48.  v0:= v0 + 1;
  #L3f9e4c.  if v3 <= v0 then goto L3f9e5a;
  #L3f9e50.  v0:= v0 + 1;
  #L3f9e54.  v3:= v0 ^~ -1;
  #L3f9e58.  return v3;
  #L3f9e5a.  if v3 >= v0 then goto L3f9e64;
  #L3f9e5e.  v3:= v3 ^~ -1;
  #L3f9e62.  return v3;
  #L3f9e64.  return v3;
}
