record `org.c.a.e.c$f` @kind class @AccessFlag ABSTRACT extends `org.c.a.e.l` @kind interface, `org.c.a.e.n` @kind interface {
  `org.c.a.d` `org.c.a.e.c$f.a` @AccessFlag PROTECTED_FINAL;
  `int` `org.c.a.e.c$f.b` @AccessFlag PROTECTED_FINAL;
  `boolean` `org.c.a.e.c$f.c` @AccessFlag PROTECTED_FINAL;
}
procedure `void` `<init>`(`org.c.a.e.c$f` v0 @kind this, `org.c.a.d` v1 @kind object, `int` v2 , `boolean` v3 ) @signature `Lorg/c/a/e/c$f;.<init>:(Lorg/c/a/d;IZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3fa564.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3fa56a.  v0.`org.c.a.e.c$f.a` @type ^`org.c.a.d` := v1 @kind object;
  #L3fa56e.  v0.`org.c.a.e.c$f.b` @type ^`int` := v2;
  #L3fa572.  v0.`org.c.a.e.c$f.c` @type ^`boolean` := v3 @kind boolean;
  #L3fa576.  return @kind void;
}
procedure `int` `a`(`org.c.a.e.c$f` v16 @kind this, `org.c.a.e.e` v17 @kind object, `java.lang.CharSequence` v18 @kind object, `int` v19 ) @signature `Lorg/c/a/e/c$f;.a:(Lorg/c/a/e/e;Ljava/lang/CharSequence;I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L3fa3a8.  v0:= v16 @kind object;
  #L3fa3ac.  v1:= v18 @kind object;
  #L3fa3b0.  v2:= v19;
  #L3fa3b4.  v3:= v0.`org.c.a.e.c$f.b` @type ^`int`;
  #L3fa3b8.  call temp:= `length`(v18) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L3fa3be.  v4:= temp;
  #L3fa3c0.  v4:= v4 - v2 @kind int;
  #L3fa3c2.  call temp:= `min`(v3, v4) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3fa3c8.  v3:= temp;
  #L3fa3ca.  v4:= 0I;
  #L3fa3cc.  v5:= v3;
  #L3fa3ce.  v3:= 0I;
  #L3fa3d0.  v6:= 0I;
  #L3fa3d2.  v7:= 0I;
  #L3fa3d4.  v8:= 48I;
  #L3fa3d8.  if v3 >= v5 then goto L3fa46a;
  #L3fa3dc.  v9:= v2 + v3 @kind int;
  #L3fa3e0.  call temp:= `charAt`(v1, v9) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L3fa3e6.  v10:= temp;
  #L3fa3e8.  v11:= 57I;
  #L3fa3ec.  if v3 != 0 then goto L3fa45a;
  #L3fa3f0.  v12:= 43I;
  #L3fa3f4.  v13:= 45I;
  #L3fa3f8.  if v10 == v13 then goto L3fa400;
  #L3fa3fc.  if v10 != v12 then goto L3fa45a;
  #L3fa400.  v14:= v0.`org.c.a.e.c$f.c` @type ^`boolean` @kind boolean;
  #L3fa404.  if v14 == 0 then goto L3fa45a;
  #L3fa408.  v6:= 1I;
  #L3fa40a.  if v10 != v13 then goto L3fa412;
  #L3fa40e.  v7:= 1I;
  #L3fa410.  goto L3fa414;
  #L3fa412.  v7:= 0I;
  #L3fa414.  if v10 != v12 then goto L3fa41a;
  #L3fa418.  goto L3fa41c;
  #L3fa41a.  v6:= 0I;
  #L3fa41c.  v10:= v3 + 1;
  #L3fa420.  if v10 >= v5 then goto L3fa470;
  #L3fa424.  v9:= v9 + 1;
  #L3fa428.  call temp:= `charAt`(v1, v9) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L3fa42e.  v9:= temp;
  #L3fa430.  if v9 < v8 then goto L3fa470;
  #L3fa434.  if v9 <= v11 then goto L3fa43a;
  #L3fa438.  goto L3fa470;
  #L3fa43a.  v5:= v5 + 1;
  #L3fa43e.  call temp:= `length`(v18) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L3fa444.  v3:= temp;
  #L3fa446.  v3:= v3 - v2 @kind int;
  #L3fa448.  call temp:= `min`(v5, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3fa44e.  v5:= temp;
  #L3fa450.  v3:= v10;
  #L3fa452.  v15:= v7;
  #L3fa454.  v7:= v6;
  #L3fa456.  v6:= v15;
  #L3fa458.  goto L3fa3d4;
  #L3fa45a.  if v10 < v8 then goto L3fa46a;
  #L3fa45e.  if v10 <= v11 then goto L3fa464;
  #L3fa462.  goto L3fa46a;
  #L3fa464.  v3:= v3 + 1;
  #L3fa468.  goto L3fa3d4;
  #L3fa46a.  v15:= v7;
  #L3fa46c.  v7:= v6;
  #L3fa46e.  v6:= v15;
  #L3fa470.  if v3 != 0 then goto L3fa47a;
  #L3fa474.  v1:= v2 ^~ -1;
  #L3fa478.  return v1;
  #L3fa47a.  v4:= 9I;
  #L3fa47e.  if v3 < v4 then goto L3fa4c4;
  #L3fa482.  if v6 == 0 then goto L3fa4a6;
  #L3fa486.  v4:= v2 + 1;
  #L3fa48a.  v2:= v2 + v3 @kind int;
  #L3fa48c.  call temp:= `subSequence`(v1, v4, v2) @signature `Ljava/lang/CharSequence;.subSequence:(II)Ljava/lang/CharSequence;` @kind interface;
  #L3fa492.  v1:= temp @kind object;
  #L3fa494.  call temp:= `toString`(v1) @signature `Ljava/lang/CharSequence;.toString:()Ljava/lang/String;` @kind interface;
  #L3fa49a.  v1:= temp @kind object;
  #L3fa49c.  call temp:= `parseInt`(v1) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L3fa4a2.  v1:= temp;
  #L3fa4a4.  goto L3fa514;
  #L3fa4a6.  v3:= v3 + v2 @kind int;
  #L3fa4a8.  call temp:= `subSequence`(v1, v2, v3) @signature `Ljava/lang/CharSequence;.subSequence:(II)Ljava/lang/CharSequence;` @kind interface;
  #L3fa4ae.  v1:= temp @kind object;
  #L3fa4b0.  call temp:= `toString`(v1) @signature `Ljava/lang/CharSequence;.toString:()Ljava/lang/String;` @kind interface;
  #L3fa4b6.  v1:= temp @kind object;
  #L3fa4b8.  call temp:= `parseInt`(v1) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L3fa4be.  v1:= temp;
  #L3fa4c0.  v2:= v3;
  #L3fa4c2.  goto L3fa514;
  #L3fa4c4.  if v7 != 0 then goto L3fa4d2;
  #L3fa4c8.  if v6 == 0 then goto L3fa4ce;
  #L3fa4cc.  goto L3fa4d2;
  #L3fa4ce.  v4:= v2;
  #L3fa4d0.  goto L3fa4d6;
  #L3fa4d2.  v4:= v2 + 1;
  #L3fa4d6.  v5:= v4 + 1;
  #L3fa4da.  call temp:= `charAt`(v1, v4) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L3fa4e0.  v4:= temp;
  #L3fa4e2.  v4:= v4 - v8 @kind int;
  #L3fa4e4.  v2:= v2 + v3 @kind int;
  #L3fa4e6.  if v5 >= v2 then goto L3fa50a;
  #L3fa4ea.  v3:= v4 ^< 3;
  #L3fa4ee.  v4:= v4 ^< 1;
  #L3fa4f2.  v3:= v3 + v4 @kind int;
  #L3fa4f4.  v4:= v5 + 1;
  #L3fa4f8.  call temp:= `charAt`(v1, v5) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L3fa4fe.  v5:= temp;
  #L3fa500.  v3:= v3 + v5 @kind int;
  #L3fa502.  v3:= v3 - v8 @kind int;
  #L3fa504.  v5:= v4;
  #L3fa506.  v4:= v3;
  #L3fa508.  goto L3fa4e6;
  #L3fa50a.  if v7 == 0 then goto L3fa512;
  #L3fa50e.  v1:= -v4 @kind int;
  #L3fa510.  goto L3fa514;
  #L3fa512.  v1:= v4;
  #L3fa514.  v3:= v0.`org.c.a.e.c$f.a` @type ^`org.c.a.d` @kind object;
  #L3fa518.  v4:= v17 @kind object;
  #L3fa51c.  call `a`(v4, v3, v1) @signature `Lorg/c/a/e/e;.a:(Lorg/c/a/d;I)V` @kind virtual;
  #L3fa522.  return v2;
  #L3fa524.  v1:= v2 ^~ -1;
  #L3fa528.  return v1;
  catch `java.lang.StringIndexOutOfBoundsException` @[L3fa4da..L3fa4e2] goto L3fa524;
}
procedure `int` `b`(`org.c.a.e.c$f` v1 @kind this) @signature `Lorg/c/a/e/c$f;.b:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3fa54c.  v0:= v1.`org.c.a.e.c$f.b` @type ^`int`;
  #L3fa550.  return v0;
}
