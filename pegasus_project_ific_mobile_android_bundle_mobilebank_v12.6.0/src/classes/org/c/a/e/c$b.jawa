record `org.c.a.e.c$b` @kind class @AccessFlag  extends `org.c.a.e.l` @kind interface, `org.c.a.e.n` @kind interface {
  `org.c.a.e.n`[] `org.c.a.e.c$b.a` @AccessFlag PRIVATE_FINAL;
  `org.c.a.e.l`[] `org.c.a.e.c$b.b` @AccessFlag PRIVATE_FINAL;
  `int` `org.c.a.e.c$b.c` @AccessFlag PRIVATE_FINAL;
  `int` `org.c.a.e.c$b.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.c.a.e.c$b` v8 @kind this, `java.util.List` v9 @kind object) @signature `Lorg/c/a/e/c$b;.<init>:(Ljava/util/List;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3f9bb8.  call `<init>`(v8) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f9bbe.  v0:= new `java.util.ArrayList`;
  #L3f9bc2.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L3f9bc8.  v1:= new `java.util.ArrayList`;
  #L3f9bcc.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L3f9bd2.  call `a`(v8, v9, v0, v1) @signature `Lorg/c/a/e/c$b;.a:(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @kind direct;
  #L3f9bd8.  v9:= 0I;
  #L3f9bda.  call temp:= `contains`(v0, v9) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L3f9be0.  v2:= temp;
  #L3f9be2.  v3:= 0I;
  #L3f9be4.  if v2 != 0 then goto L3f9c38;
  #L3f9be8.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L3f9bee.  v2:= temp;
  #L3f9bf0.  if v2 == 0 then goto L3f9bf6;
  #L3f9bf4.  goto L3f9c38;
  #L3f9bf6.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3f9bfc.  v2:= temp;
  #L3f9bfe.  v4:= new `org.c.a.e.n`[v2];
  #L3f9c02.  v8.`org.c.a.e.c$b.a` @type ^`org.c.a.e.n`[] := v4 @kind object;
  #L3f9c06.  v4:= 0I;
  #L3f9c08.  v5:= 0I;
  #L3f9c0a.  if v4 >= v2 then goto L3f9c32;
  #L3f9c0e.  call temp:= `get`(v0, v4) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3f9c14.  v6:= temp @kind object;
  #L3f9c16.  v6:= (`org.c.a.e.n`) v6 @kind object;
  #L3f9c1a.  call temp:= `a`(v6) @signature `Lorg/c/a/e/n;.a:()I` @kind interface;
  #L3f9c20.  v7:= temp;
  #L3f9c22.  v5:= v5 + v7 @kind int;
  #L3f9c24.  v7:= v8.`org.c.a.e.c$b.a` @type ^`org.c.a.e.n`[] @kind object;
  #L3f9c28.  v7[v4]:= v6 @kind object;
  #L3f9c2c.  v4:= v4 + 1;
  #L3f9c30.  goto L3f9c0a;
  #L3f9c32.  v8.`org.c.a.e.c$b.c` @type ^`int` := v5;
  #L3f9c36.  goto L3f9c40;
  #L3f9c38.  v8.`org.c.a.e.c$b.a` @type ^`org.c.a.e.n`[] := v9 @kind object;
  #L3f9c3c.  v8.`org.c.a.e.c$b.c` @type ^`int` := v3;
  #L3f9c40.  call temp:= `contains`(v1, v9) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L3f9c46.  v0:= temp;
  #L3f9c48.  if v0 != 0 then goto L3f9c9a;
  #L3f9c4c.  call temp:= `isEmpty`(v1) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L3f9c52.  v0:= temp;
  #L3f9c54.  if v0 == 0 then goto L3f9c5a;
  #L3f9c58.  goto L3f9c9a;
  #L3f9c5a.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3f9c60.  v9:= temp;
  #L3f9c62.  v0:= new `org.c.a.e.l`[v9];
  #L3f9c66.  v8.`org.c.a.e.c$b.b` @type ^`org.c.a.e.l`[] := v0 @kind object;
  #L3f9c6a.  v0:= 0I;
  #L3f9c6c.  if v3 >= v9 then goto L3f9c94;
  #L3f9c70.  call temp:= `get`(v1, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3f9c76.  v2:= temp @kind object;
  #L3f9c78.  v2:= (`org.c.a.e.l`) v2 @kind object;
  #L3f9c7c.  call temp:= `b`(v2) @signature `Lorg/c/a/e/l;.b:()I` @kind interface;
  #L3f9c82.  v4:= temp;
  #L3f9c84.  v0:= v0 + v4 @kind int;
  #L3f9c86.  v4:= v8.`org.c.a.e.c$b.b` @type ^`org.c.a.e.l`[] @kind object;
  #L3f9c8a.  v4[v3]:= v2 @kind object;
  #L3f9c8e.  v3:= v3 + 1;
  #L3f9c92.  goto L3f9c6c;
  #L3f9c94.  v8.`org.c.a.e.c$b.d` @type ^`int` := v0;
  #L3f9c98.  goto L3f9ca2;
  #L3f9c9a.  v8.`org.c.a.e.c$b.b` @type ^`org.c.a.e.l`[] := v9 @kind object;
  #L3f9c9e.  v8.`org.c.a.e.c$b.d` @type ^`int` := v3;
  #L3f9ca2.  return @kind void;
}
procedure `void` `a`(`org.c.a.e.c$b` v4 @kind this, `java.util.List` v5 @kind object, `java.util.List` v6 @kind object, `java.util.List` v7 @kind object) @signature `Lorg/c/a/e/c$b;.a:(Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f9d98.  call temp:= `size`(v5) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L3f9d9e.  v0:= temp;
  #L3f9da0.  v1:= 0I;
  #L3f9da2.  if v1 >= v0 then goto L3f9dfc;
  #L3f9da6.  call temp:= `get`(v5, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3f9dac.  v2:= temp @kind object;
  #L3f9dae.  v3:= instanceof @variable v2 @type ^`org.c.a.e.c$b` @kind boolean;
  #L3f9db2.  if v3 == 0 then goto L3f9dc6;
  #L3f9db6.  v2:= (`org.c.a.e.c$b`) v2 @kind object;
  #L3f9dba.  v2:= v2.`org.c.a.e.c$b.a` @type ^`org.c.a.e.n`[] @kind object;
  #L3f9dbe.  call `a`(v4, v6, v2) @signature `Lorg/c/a/e/c$b;.a:(Ljava/util/List;[Ljava/lang/Object;)V` @kind direct;
  #L3f9dc4.  goto L3f9dcc;
  #L3f9dc6.  call temp:= `add`(v6, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3f9dcc.  v2:= v1 + 1;
  #L3f9dd0.  call temp:= `get`(v5, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L3f9dd6.  v2:= temp @kind object;
  #L3f9dd8.  v3:= instanceof @variable v2 @type ^`org.c.a.e.c$b` @kind boolean;
  #L3f9ddc.  if v3 == 0 then goto L3f9df0;
  #L3f9de0.  v2:= (`org.c.a.e.c$b`) v2 @kind object;
  #L3f9de4.  v2:= v2.`org.c.a.e.c$b.b` @type ^`org.c.a.e.l`[] @kind object;
  #L3f9de8.  call `a`(v4, v7, v2) @signature `Lorg/c/a/e/c$b;.a:(Ljava/util/List;[Ljava/lang/Object;)V` @kind direct;
  #L3f9dee.  goto L3f9df6;
  #L3f9df0.  call temp:= `add`(v7, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3f9df6.  v1:= v1 + 2;
  #L3f9dfa.  goto L3f9da2;
  #L3f9dfc.  return @kind void;
}
procedure `void` `a`(`org.c.a.e.c$b` v2 @kind this, `java.util.List` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `Lorg/c/a/e/c$b;.a:(Ljava/util/List;[Ljava/lang/Object;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3f9d68.  if v4 == 0 then goto L3f9d84;
  #L3f9d6c.  v0:= 0I;
  #L3f9d6e.  v1:= length @variable v4;
  #L3f9d70.  if v0 >= v1 then goto L3f9d84;
  #L3f9d74.  v1:= v4[v0] @kind object;
  #L3f9d78.  call temp:= `add`(v3, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L3f9d7e.  v0:= v0 + 1;
  #L3f9d82.  goto L3f9d6e;
  #L3f9d84.  return @kind void;
}
procedure `int` `a`(`org.c.a.e.c$b` v1 @kind this) @signature `Lorg/c/a/e/c$b;.a:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f9b44.  v0:= v1.`org.c.a.e.c$b.c` @type ^`int`;
  #L3f9b48.  return v0;
}
procedure `int` `a`(`org.c.a.e.c$b` v4 @kind this, `org.c.a.e.e` v5 @kind object, `java.lang.CharSequence` v6 @kind object, `int` v7 ) @signature `Lorg/c/a/e/c$b;.a:(Lorg/c/a/e/e;Ljava/lang/CharSequence;I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f9b5c.  v0:= v4.`org.c.a.e.c$b.b` @type ^`org.c.a.e.l`[] @kind object;
  #L3f9b60.  if v0 != 0 then goto L3f9b70;
  #L3f9b64.  v5:= new `java.lang.UnsupportedOperationException`;
  #L3f9b68.  call `<init>`(v5) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L3f9b6e.  throw v5;
  #L3f9b70.  v1:= length @variable v0;
  #L3f9b72.  v2:= 0I;
  #L3f9b74.  if v2 >= v1 then goto L3f9b8e;
  #L3f9b78.  if v7 < 0 then goto L3f9b8e;
  #L3f9b7c.  v3:= v0[v2] @kind object;
  #L3f9b80.  call temp:= `a`(v3, v5, v6, v7) @signature `Lorg/c/a/e/l;.a:(Lorg/c/a/e/e;Ljava/lang/CharSequence;I)I` @kind interface;
  #L3f9b86.  v7:= temp;
  #L3f9b88.  v2:= v2 + 1;
  #L3f9b8c.  goto L3f9b74;
  #L3f9b8e.  return v7;
}
procedure `void` `a`(`org.c.a.e.c$b` v13 @kind this, `java.lang.Appendable` v14 @kind object, `long` v15 , `org.c.a.a` v17 @kind object, `int` v18 , `org.c.a.f` v19 @kind object, `java.util.Locale` v20 @kind object) @signature `Lorg/c/a/e/c$b;.a:(Ljava/lang/Appendable;JLorg/c/a/a;ILorg/c/a/f;Ljava/util/Locale;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L3f9cb4.  v0:= v13 @kind object;
  #L3f9cb6.  v1:= v0.`org.c.a.e.c$b.a` @type ^`org.c.a.e.n`[] @kind object;
  #L3f9cba.  if v1 != 0 then goto L3f9cca;
  #L3f9cbe.  v1:= new `java.lang.UnsupportedOperationException`;
  #L3f9cc2.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L3f9cc8.  throw v1;
  #L3f9cca.  if v20 != 0 then goto L3f9cd8;
  #L3f9cce.  call temp:= `getDefault`() @signature `Ljava/util/Locale;.getDefault:()Ljava/util/Locale;` @kind static;
  #L3f9cd4.  v2:= temp @kind object;
  #L3f9cd6.  goto L3f9cdc;
  #L3f9cd8.  v2:= v20 @kind object;
  #L3f9cdc.  v11:= length @variable v1;
  #L3f9cde.  v3:= 0I;
  #L3f9ce0.  v12:= 0I;
  #L3f9ce2.  if v12 >= v11 then goto L3f9d08;
  #L3f9ce6.  v3:= v1[v12] @kind object;
  #L3f9cea.  v4:= v14 @kind object;
  #L3f9cec.  v5:= v15 @kind wide;
  #L3f9cee.  v7:= v17 @kind object;
  #L3f9cf2.  v8:= v18;
  #L3f9cf6.  v9:= v19 @kind object;
  #L3f9cfa.  v10:= v2 @kind object;
  #L3f9cfc.  call `a`(v3, v4, v5, v7, v8, v9, v10) @signature `Lorg/c/a/e/n;.a:(Ljava/lang/Appendable;JLorg/c/a/a;ILorg/c/a/f;Ljava/util/Locale;)V` @kind interface;
  #L3f9d02.  v12:= v12 + 1;
  #L3f9d06.  goto L3f9ce2;
  #L3f9d08.  return @kind void;
}
procedure `void` `a`(`org.c.a.e.c$b` v4 @kind this, `java.lang.Appendable` v5 @kind object, `org.c.a.v` v6 @kind object, `java.util.Locale` v7 @kind object) @signature `Lorg/c/a/e/c$b;.a:(Ljava/lang/Appendable;Lorg/c/a/v;Ljava/util/Locale;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f9d1c.  v0:= v4.`org.c.a.e.c$b.a` @type ^`org.c.a.e.n`[] @kind object;
  #L3f9d20.  if v0 != 0 then goto L3f9d30;
  #L3f9d24.  v5:= new `java.lang.UnsupportedOperationException`;
  #L3f9d28.  call `<init>`(v5) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L3f9d2e.  throw v5;
  #L3f9d30.  if v7 != 0 then goto L3f9d3c;
  #L3f9d34.  call temp:= `getDefault`() @signature `Ljava/util/Locale;.getDefault:()Ljava/util/Locale;` @kind static;
  #L3f9d3a.  v7:= temp @kind object;
  #L3f9d3c.  v1:= length @variable v0;
  #L3f9d3e.  v2:= 0I;
  #L3f9d40.  if v2 >= v1 then goto L3f9d54;
  #L3f9d44.  v3:= v0[v2] @kind object;
  #L3f9d48.  call `a`(v3, v5, v6, v7) @signature `Lorg/c/a/e/n;.a:(Ljava/lang/Appendable;Lorg/c/a/v;Ljava/util/Locale;)V` @kind interface;
  #L3f9d4e.  v2:= v2 + 1;
  #L3f9d52.  goto L3f9d40;
  #L3f9d54.  return @kind void;
}
procedure `int` `b`(`org.c.a.e.c$b` v1 @kind this) @signature `Lorg/c/a/e/c$b;.b:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f9ba0.  v0:= v1.`org.c.a.e.c$b.d` @type ^`int`;
  #L3f9ba4.  return v0;
}
procedure `boolean` `c`(`org.c.a.e.c$b` v1 @kind this) @signature `Lorg/c/a/e/c$b;.c:()Z` @AccessFlag  {
    temp;
    v0;

  #L3f9b04.  v0:= v1.`org.c.a.e.c$b.a` @type ^`org.c.a.e.n`[] @kind object;
  #L3f9b08.  if v0 == 0 then goto L3f9b10;
  #L3f9b0c.  v0:= 1I;
  #L3f9b0e.  goto L3f9b12;
  #L3f9b10.  v0:= 0I;
  #L3f9b12.  return v0;
}
procedure `boolean` `d`(`org.c.a.e.c$b` v1 @kind this) @signature `Lorg/c/a/e/c$b;.d:()Z` @AccessFlag  {
    temp;
    v0;

  #L3f9b24.  v0:= v1.`org.c.a.e.c$b.b` @type ^`org.c.a.e.l`[] @kind object;
  #L3f9b28.  if v0 == 0 then goto L3f9b30;
  #L3f9b2c.  v0:= 1I;
  #L3f9b2e.  goto L3f9b32;
  #L3f9b30.  v0:= 0I;
  #L3f9b32.  return v0;
}
