record `org.c.a.e.i` @kind class @AccessFlag PUBLIC {
}
global `double` `@@org.c.a.e.i.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/c/a/e/i;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3fd0ac.  v0:= 10.0D;
  #L3fd0b0.  call temp:= `log`(v0) @signature `Ljava/lang/Math;.log:(D)D` @kind static;
  #L3fd0b6.  v0:= temp @kind wide;
  #L3fd0b8.  `@@org.c.a.e.i.a` @type ^`double` := v0 @kind wide;
  #L3fd0bc.  return @kind void;
}
procedure `int` `a`(`long` v4 ) @signature `Lorg/c/a/e/i;.a:(J)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3fcf2c.  v0:= 0L;
  #L3fcf30.  v2:= lcmp(v4, v0);
  #L3fcf34.  v0:= 1I;
  #L3fcf36.  if v2 >= 0 then goto L3fcf5a;
  #L3fcf3a.  v1:= -9223372036854775808L;
  #L3fcf3e.  v3:= lcmp(v4, v1);
  #L3fcf42.  if v3 == 0 then goto L3fcf54;
  #L3fcf46.  v4:= -v4 @kind long;
  #L3fcf48.  call temp:= `a`(v4) @signature `Lorg/c/a/e/i;.a:(J)I` @kind static;
  #L3fcf4e.  v4:= temp;
  #L3fcf50.  v4:= v4 + v0 @kind int;
  #L3fcf52.  return v4;
  #L3fcf54.  v4:= 20I;
  #L3fcf58.  return v4;
  #L3fcf5a.  v1:= 10L;
  #L3fcf5e.  v3:= lcmp(v4, v1);
  #L3fcf62.  if v3 >= 0 then goto L3fcf68;
  #L3fcf66.  goto L3fcfac;
  #L3fcf68.  v1:= 100L;
  #L3fcf6c.  v3:= lcmp(v4, v1);
  #L3fcf70.  if v3 >= 0 then goto L3fcf78;
  #L3fcf74.  v0:= 2I;
  #L3fcf76.  goto L3fcfac;
  #L3fcf78.  v1:= 1000L;
  #L3fcf7c.  v3:= lcmp(v4, v1);
  #L3fcf80.  if v3 >= 0 then goto L3fcf88;
  #L3fcf84.  v0:= 3I;
  #L3fcf86.  goto L3fcfac;
  #L3fcf88.  v1:= 10000L;
  #L3fcf8c.  v3:= lcmp(v4, v1);
  #L3fcf90.  if v3 >= 0 then goto L3fcf98;
  #L3fcf94.  v0:= 4I;
  #L3fcf96.  goto L3fcfac;
  #L3fcf98.  v4:= (`double`) v4 @kind l2d;
  #L3fcf9a.  call temp:= `log`(v4) @signature `Ljava/lang/Math;.log:(D)D` @kind static;
  #L3fcfa0.  v4:= temp @kind wide;
  #L3fcfa2.  v1:= `@@org.c.a.e.i.a` @type ^`double` @kind wide;
  #L3fcfa6.  v4:= v4 / v1 @kind double;
  #L3fcfa8.  v4:= (`int`) v4 @kind d2i;
  #L3fcfaa.  v0:= v0 + v4 @kind int;
  #L3fcfac.  return v0;
}
procedure `int` `a`(`java.lang.CharSequence` v2 @kind object, `int` v3 ) @signature `Lorg/c/a/e/i;.a:(Ljava/lang/CharSequence;I)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L3fcef0.  call temp:= `charAt`(v2, v3) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L3fcef6.  v0:= temp;
  #L3fcef8.  v0:= v0 + -48;
  #L3fcefc.  v1:= v0 ^< 3;
  #L3fcf00.  v0:= v0 ^< 1;
  #L3fcf04.  v1:= v1 + v0 @kind int;
  #L3fcf06.  v3:= v3 + 1;
  #L3fcf0a.  call temp:= `charAt`(v2, v3) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L3fcf10.  v2:= temp;
  #L3fcf12.  v1:= v1 + v2 @kind int;
  #L3fcf14.  v1:= v1 + -48;
  #L3fcf18.  return v1;
}
procedure `java.lang.String` `a`(`java.lang.String` v3 @kind object, `int` v4 ) @signature `Lorg/c/a/e/i;.a:(Ljava/lang/String;I)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3fcfc0.  v0:= v4 + 32;
  #L3fcfc4.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3fcfca.  v1:= temp;
  #L3fcfcc.  v2:= v0 + 3;
  #L3fcfd0.  if v1 > v2 then goto L3fcfd8;
  #L3fcfd4.  v0:= v3 @kind object;
  #L3fcfd6.  goto L3fcfee;
  #L3fcfd8.  v1:= 0I;
  #L3fcfda.  call temp:= `substring`(v3, v1, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L3fcfe0.  v0:= temp @kind object;
  #L3fcfe2.  v1:= "..." @kind object;
  #L3fcfe6.  call temp:= `concat`(v0, v1) @signature `Ljava/lang/String;.concat:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L3fcfec.  v0:= temp @kind object;
  #L3fcfee.  v1:= 34I;
  #L3fcff2.  if v4 > 0 then goto L3fd020;
  #L3fcff6.  v3:= new `java.lang.StringBuilder`;
  #L3fcffa.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3fd000.  v4:= "Invalid format: \"" @kind object;
  #L3fd004.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fd00a.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fd010.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fd016.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3fd01c.  v3:= temp @kind object;
  #L3fd01e.  return v3 @kind object;
  #L3fd020.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3fd026.  v3:= temp;
  #L3fd028.  if v4 < v3 then goto L3fd05a;
  #L3fd02c.  v3:= new `java.lang.StringBuilder`;
  #L3fd030.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3fd036.  v4:= "Invalid format: \"" @kind object;
  #L3fd03a.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fd040.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fd046.  v4:= "\" is too short" @kind object;
  #L3fd04a.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fd050.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3fd056.  v3:= temp @kind object;
  #L3fd058.  return v3 @kind object;
  #L3fd05a.  v3:= new `java.lang.StringBuilder`;
  #L3fd05e.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3fd064.  v2:= "Invalid format: \"" @kind object;
  #L3fd068.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fd06e.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fd074.  v2:= "\" is malformed at \"" @kind object;
  #L3fd078.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fd07e.  call temp:= `substring`(v0, v4) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L3fd084.  v4:= temp @kind object;
  #L3fd086.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fd08c.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3fd092.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3fd098.  v3:= temp @kind object;
  #L3fd09a.  return v3 @kind object;
}
procedure `void` `a`(`java.lang.Appendable` v2 @kind object, `int` v3 ) @signature `Lorg/c/a/e/i;.a:(Ljava/lang/Appendable;I)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3fd0d0.  if v3 >= 0 then goto L3fd0f6;
  #L3fd0d4.  v0:= 45I;
  #L3fd0d8.  call temp:= `append`(v2, v0) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L3fd0de.  v0:= -2147483648I;
  #L3fd0e2.  if v3 == v0 then goto L3fd0ea;
  #L3fd0e6.  v3:= -v3 @kind int;
  #L3fd0e8.  goto L3fd0f6;
  #L3fd0ea.  v3:= "2147483648" @kind object;
  #L3fd0ee.  call temp:= `append`(v2, v3) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L3fd0f4.  return @kind void;
  #L3fd0f6.  v0:= 10I;
  #L3fd0fa.  if v3 >= v0 then goto L3fd10c;
  #L3fd0fe.  v3:= v3 + 48;
  #L3fd102.  v3:= (`char`) v3 @kind i2c;
  #L3fd104.  call temp:= `append`(v2, v3) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L3fd10a.  goto L3fd15a;
  #L3fd10c.  v0:= 100I;
  #L3fd110.  if v3 >= v0 then goto L3fd14c;
  #L3fd114.  v0:= v3 + 1;
  #L3fd118.  v1:= 13421772I;
  #L3fd11e.  v0:= v0 * v1 @kind int;
  #L3fd122.  v0:= v0 ^> 27;
  #L3fd126.  v1:= v0 + 48;
  #L3fd12a.  v1:= (`char`) v1 @kind i2c;
  #L3fd12c.  call temp:= `append`(v2, v1) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L3fd132.  v1:= v0 ^< 3;
  #L3fd136.  v3:= v3 - v1 @kind int;
  #L3fd138.  v0:= v0 ^< 1;
  #L3fd13c.  v3:= v3 - v0 @kind int;
  #L3fd13e.  v3:= v3 + 48;
  #L3fd142.  v3:= (`char`) v3 @kind i2c;
  #L3fd144.  call temp:= `append`(v2, v3) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L3fd14a.  goto L3fd15a;
  #L3fd14c.  call temp:= `toString`(v3) @signature `Ljava/lang/Integer;.toString:(I)Ljava/lang/String;` @kind static;
  #L3fd152.  v3:= temp @kind object;
  #L3fd154.  call temp:= `append`(v2, v3) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L3fd15a.  return @kind void;
}
procedure `void` `a`(`java.lang.Appendable` v7 @kind object, `int` v8 , `int` v9 ) @signature `Lorg/c/a/e/i;.a:(Ljava/lang/Appendable;II)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3fd16c.  v0:= 10I;
  #L3fd170.  v1:= 48I;
  #L3fd174.  if v8 >= 0 then goto L3fd1aa;
  #L3fd178.  v2:= 45I;
  #L3fd17c.  call temp:= `append`(v7, v2) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L3fd182.  v2:= -2147483648I;
  #L3fd186.  if v8 == v2 then goto L3fd18e;
  #L3fd18a.  v8:= -v8 @kind int;
  #L3fd18c.  goto L3fd1aa;
  #L3fd18e.  if v9 <= v0 then goto L3fd19e;
  #L3fd192.  call temp:= `append`(v7, v1) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L3fd198.  v9:= v9 + -1;
  #L3fd19c.  goto L3fd18e;
  #L3fd19e.  v8:= "2147483648" @kind object;
  #L3fd1a2.  call temp:= `append`(v7, v8) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L3fd1a8.  return @kind void;
  #L3fd1aa.  v2:= 1I;
  #L3fd1ac.  if v8 >= v0 then goto L3fd1cc;
  #L3fd1b0.  if v9 <= v2 then goto L3fd1c0;
  #L3fd1b4.  call temp:= `append`(v7, v1) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L3fd1ba.  v9:= v9 + -1;
  #L3fd1be.  goto L3fd1b0;
  #L3fd1c0.  v8:= v8 + v1 @kind int;
  #L3fd1c2.  v8:= (`char`) v8 @kind i2c;
  #L3fd1c4.  call temp:= `append`(v7, v8) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L3fd1ca.  goto L3fd264;
  #L3fd1cc.  v0:= 100I;
  #L3fd1d0.  if v8 >= v0 then goto L3fd21a;
  #L3fd1d4.  v0:= 2I;
  #L3fd1d6.  if v9 <= v0 then goto L3fd1e6;
  #L3fd1da.  call temp:= `append`(v7, v1) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L3fd1e0.  v9:= v9 + -1;
  #L3fd1e4.  goto L3fd1d4;
  #L3fd1e6.  v9:= v8 + 1;
  #L3fd1ea.  v0:= 13421772I;
  #L3fd1f0.  v9:= v9 * v0 @kind int;
  #L3fd1f4.  v9:= v9 ^> 27;
  #L3fd1f8.  v0:= v9 + 48;
  #L3fd1fc.  v0:= (`char`) v0 @kind i2c;
  #L3fd1fe.  call temp:= `append`(v7, v0) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L3fd204.  v0:= v9 ^< 3;
  #L3fd208.  v8:= v8 - v0 @kind int;
  #L3fd20a.  v9:= v9 ^< v2 @kind int;
  #L3fd20c.  v8:= v8 - v9 @kind int;
  #L3fd20e.  v8:= v8 + v1 @kind int;
  #L3fd210.  v8:= (`char`) v8 @kind i2c;
  #L3fd212.  call temp:= `append`(v7, v8) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L3fd218.  goto L3fd264;
  #L3fd21a.  v0:= 1000I;
  #L3fd21e.  if v8 >= v0 then goto L3fd226;
  #L3fd222.  v0:= 3I;
  #L3fd224.  goto L3fd246;
  #L3fd226.  v0:= 10000I;
  #L3fd22a.  if v8 >= v0 then goto L3fd232;
  #L3fd22e.  v0:= 4I;
  #L3fd230.  goto L3fd246;
  #L3fd232.  v3:= (`double`) v8 @kind i2d;
  #L3fd234.  call temp:= `log`(v3) @signature `Ljava/lang/Math;.log:(D)D` @kind static;
  #L3fd23a.  v3:= temp @kind wide;
  #L3fd23c.  v5:= `@@org.c.a.e.i.a` @type ^`double` @kind wide;
  #L3fd240.  v3:= v3 / v5 @kind double;
  #L3fd242.  v0:= (`int`) v3 @kind d2i;
  #L3fd244.  v0:= v0 + v2 @kind int;
  #L3fd246.  if v9 <= v0 then goto L3fd256;
  #L3fd24a.  call temp:= `append`(v7, v1) @signature `Ljava/lang/Appendable;.append:(C)Ljava/lang/Appendable;` @kind interface;
  #L3fd250.  v9:= v9 + -1;
  #L3fd254.  goto L3fd246;
  #L3fd256.  call temp:= `toString`(v8) @signature `Ljava/lang/Integer;.toString:(I)Ljava/lang/String;` @kind static;
  #L3fd25c.  v8:= temp @kind object;
  #L3fd25e.  call temp:= `append`(v7, v8) @signature `Ljava/lang/Appendable;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @kind interface;
  #L3fd264.  return @kind void;
}
procedure `void` `a`(`java.lang.StringBuffer` v0 @kind object, `int` v1 ) @signature `Lorg/c/a/e/i;.a:(Ljava/lang/StringBuffer;I)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3fd278.  call `a`(v0, v1) @signature `Lorg/c/a/e/i;.a:(Ljava/lang/Appendable;I)V` @kind static;
  #L3fd27e.  return @kind void;
  catch `java.io.IOException` @[L3fd278..L3fd27e] goto L3fd27e;
}
procedure `void` `a`(`java.lang.StringBuffer` v0 @kind object, `int` v1 , `int` v2 ) @signature `Lorg/c/a/e/i;.a:(Ljava/lang/StringBuffer;II)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3fd2a0.  call `a`(v0, v1, v2) @signature `Lorg/c/a/e/i;.a:(Ljava/lang/Appendable;II)V` @kind static;
  #L3fd2a6.  return @kind void;
  catch `java.io.IOException` @[L3fd2a0..L3fd2a6] goto L3fd2a6;
}
