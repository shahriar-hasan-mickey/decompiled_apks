record `org.c.a.f.b$c` @kind class @AccessFlag FINAL extends `org.c.a.f` @kind class {
  `long`[] `org.c.a.f.b$c.b` @AccessFlag PRIVATE_FINAL;
  `int`[] `org.c.a.f.b$c.c` @AccessFlag PRIVATE_FINAL;
  `int`[] `org.c.a.f.b$c.d` @AccessFlag PRIVATE_FINAL;
  `java.lang.String`[] `org.c.a.f.b$c.e` @AccessFlag PRIVATE_FINAL;
  `org.c.a.f.b$a` `org.c.a.f.b$c.f` @AccessFlag PRIVATE_FINAL;
}
global `long` `@@org.c.a.f.b$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.c.a.f.b$c` v0 @kind this, `java.lang.String` v1 @kind object, `long`[] v2 @kind object, `int`[] v3 @kind object, `int`[] v4 @kind object, `java.lang.String`[] v5 @kind object, `org.c.a.f.b$a` v6 @kind object) @signature `Lorg/c/a/f/b$c;.<init>:(Ljava/lang/String;[J[I[I[Ljava/lang/String;Lorg/c/a/f/b$a;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L401d98.  call `<init>`(v0, v1) @signature `Lorg/c/a/f;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L401d9e.  v0.`org.c.a.f.b$c.b` @type ^`long`[] := v2 @kind object;
  #L401da2.  v0.`org.c.a.f.b$c.c` @type ^`int`[] := v3 @kind object;
  #L401da6.  v0.`org.c.a.f.b$c.d` @type ^`int`[] := v4 @kind object;
  #L401daa.  v0.`org.c.a.f.b$c.e` @type ^`java.lang.String`[] := v5 @kind object;
  #L401dae.  v0.`org.c.a.f.b$c.f` @type ^`org.c.a.f.b$a` := v6 @kind object;
  #L401db2.  return @kind void;
}
procedure `org.c.a.f.b$c` `a`(`java.io.DataInput` v11 @kind object, `java.lang.String` v12 @kind object) @signature `Lorg/c/a/f/b$c;.a:(Ljava/io/DataInput;Ljava/lang/String;)Lorg/c/a/f/b$c;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L401ca8.  call temp:= `readUnsignedShort`(v11) @signature `Ljava/io/DataInput;.readUnsignedShort:()I` @kind interface;
  #L401cae.  v0:= temp;
  #L401cb0.  v1:= new `java.lang.String`[v0];
  #L401cb4.  v2:= 0I;
  #L401cb6.  v3:= 0I;
  #L401cb8.  if v3 >= v0 then goto L401cce;
  #L401cbc.  call temp:= `readUTF`(v11) @signature `Ljava/io/DataInput;.readUTF:()Ljava/lang/String;` @kind interface;
  #L401cc2.  v4:= temp @kind object;
  #L401cc4.  v1[v3]:= v4 @kind object;
  #L401cc8.  v3:= v3 + 1;
  #L401ccc.  goto L401cb8;
  #L401cce.  call temp:= `readInt`(v11) @signature `Ljava/io/DataInput;.readInt:()I` @kind interface;
  #L401cd4.  v3:= temp;
  #L401cd6.  v6:= new `long`[v3];
  #L401cda.  v7:= new `int`[v3];
  #L401cde.  v8:= new `int`[v3];
  #L401ce2.  v9:= new `java.lang.String`[v3];
  #L401ce6.  if v2 >= v3 then goto L401d4a;
  #L401cea.  call temp:= `a`(v11) @signature `Lorg/c/a/f/b;.a:(Ljava/io/DataInput;)J` @kind static;
  #L401cf0.  v4:= temp @kind wide;
  #L401cf2.  v6[v2]:= v4 @kind wide;
  #L401cf6.  call temp:= `a`(v11) @signature `Lorg/c/a/f/b;.a:(Ljava/io/DataInput;)J` @kind static;
  #L401cfc.  v4:= temp @kind wide;
  #L401cfe.  v4:= (`int`) v4 @kind l2i;
  #L401d00.  v7[v2]:= v4;
  #L401d04.  call temp:= `a`(v11) @signature `Lorg/c/a/f/b;.a:(Ljava/io/DataInput;)J` @kind static;
  #L401d0a.  v4:= temp @kind wide;
  #L401d0c.  v4:= (`int`) v4 @kind l2i;
  #L401d0e.  v8[v2]:= v4;
  #L401d12.  v4:= 256I;
  #L401d16.  if v0 >= v4 then goto L401d24;
  #L401d1a.  call temp:= `readUnsignedByte`(v11) @signature `Ljava/io/DataInput;.readUnsignedByte:()I` @kind interface;
  #L401d20.  v4:= temp;
  #L401d22.  goto L401d2c;
  #L401d24.  call temp:= `readUnsignedShort`(v11) @signature `Ljava/io/DataInput;.readUnsignedShort:()I` @kind interface;
  #L401d2a.  v4:= temp;
  #L401d2c.  v4:= v1[v4] @kind object;
  #L401d30.  v9[v2]:= v4 @kind object;
  #L401d34.  v2:= v2 + 1;
  #L401d38.  goto L401ce6;
  #L401d3a.  v11:= new `java.io.IOException`;
  #L401d3e.  v12:= "Invalid encoding" @kind object;
  #L401d42.  call `<init>`(v11, v12) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L401d48.  throw v11;
  #L401d4a.  v0:= 0I;
  #L401d4c.  call temp:= `readBoolean`(v11) @signature `Ljava/io/DataInput;.readBoolean:()Z` @kind interface;
  #L401d52.  v1:= temp;
  #L401d54.  if v1 == 0 then goto L401d64;
  #L401d58.  call temp:= `a`(v11, v12) @signature `Lorg/c/a/f/b$a;.a:(Ljava/io/DataInput;Ljava/lang/String;)Lorg/c/a/f/b$a;` @kind static;
  #L401d5e.  v11:= temp @kind object;
  #L401d60.  v10:= v11 @kind object;
  #L401d62.  goto L401d66;
  #L401d64.  v10:= v0 @kind object;
  #L401d66.  v11:= new `org.c.a.f.b$c`;
  #L401d6a.  v4:= v11 @kind object;
  #L401d6c.  v5:= v12 @kind object;
  #L401d6e.  call `<init>`(v4, v5, v6, v7, v8, v9, v10) @signature `Lorg/c/a/f/b$c;.<init>:(Ljava/lang/String;[J[I[I[Ljava/lang/String;Lorg/c/a/f/b$a;)V` @kind direct;
  #L401d74.  return v11 @kind object;
  catch `java.lang.ArrayIndexOutOfBoundsException` @[L401d1a..L401d34] goto L401d3a;
}
procedure `java.lang.String` `a`(`org.c.a.f.b$c` v2 @kind this, `long` v3 ) @signature `Lorg/c/a/f/b$c;.a:(J)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L401b40.  v0:= v2.`org.c.a.f.b$c.b` @type ^`long`[] @kind object;
  #L401b44.  call temp:= `binarySearch`(v0, v3) @signature `Ljava/util/Arrays;.binarySearch:([JJ)I` @kind static;
  #L401b4a.  v1:= temp;
  #L401b4c.  if v1 < 0 then goto L401b5a;
  #L401b50.  v3:= v2.`org.c.a.f.b$c.e` @type ^`java.lang.String`[] @kind object;
  #L401b54.  v3:= v3[v1] @kind object;
  #L401b58.  return v3 @kind object;
  #L401b5a.  v1:= v1 ^~ -1;
  #L401b5e.  v0:= length @variable v0;
  #L401b60.  if v1 >= v0 then goto L401b7c;
  #L401b64.  if v1 <= 0 then goto L401b76;
  #L401b68.  v3:= v2.`org.c.a.f.b$c.e` @type ^`java.lang.String`[] @kind object;
  #L401b6c.  v1:= v1 + -1;
  #L401b70.  v3:= v3[v1] @kind object;
  #L401b74.  return v3 @kind object;
  #L401b76.  v3:= "UTC" @kind object;
  #L401b7a.  return v3 @kind object;
  #L401b7c.  v0:= v2.`org.c.a.f.b$c.f` @type ^`org.c.a.f.b$a` @kind object;
  #L401b80.  if v0 != 0 then goto L401b92;
  #L401b84.  v3:= v2.`org.c.a.f.b$c.e` @type ^`java.lang.String`[] @kind object;
  #L401b88.  v1:= v1 + -1;
  #L401b8c.  v3:= v3[v1] @kind object;
  #L401b90.  return v3 @kind object;
  #L401b92.  v0:= v2.`org.c.a.f.b$c.f` @type ^`org.c.a.f.b$a` @kind object;
  #L401b96.  call temp:= `a`(v0, v3) @signature `Lorg/c/a/f/b$a;.a:(J)Ljava/lang/String;` @kind virtual;
  #L401b9c.  v3:= temp @kind object;
  #L401b9e.  return v3 @kind object;
}
procedure `int` `b`(`org.c.a.f.b$c` v2 @kind this, `long` v3 ) @signature `Lorg/c/a/f/b$c;.b:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L401a60.  v0:= v2.`org.c.a.f.b$c.b` @type ^`long`[] @kind object;
  #L401a64.  call temp:= `binarySearch`(v0, v3) @signature `Ljava/util/Arrays;.binarySearch:([JJ)I` @kind static;
  #L401a6a.  v1:= temp;
  #L401a6c.  if v1 < 0 then goto L401a7a;
  #L401a70.  v3:= v2.`org.c.a.f.b$c.c` @type ^`int`[] @kind object;
  #L401a74.  v3:= v3[v1];
  #L401a78.  return v3;
  #L401a7a.  v1:= v1 ^~ -1;
  #L401a7e.  v0:= length @variable v0;
  #L401a80.  if v1 >= v0 then goto L401a9a;
  #L401a84.  if v1 <= 0 then goto L401a96;
  #L401a88.  v3:= v2.`org.c.a.f.b$c.c` @type ^`int`[] @kind object;
  #L401a8c.  v1:= v1 + -1;
  #L401a90.  v3:= v3[v1];
  #L401a94.  return v3;
  #L401a96.  v3:= 0I;
  #L401a98.  return v3;
  #L401a9a.  v0:= v2.`org.c.a.f.b$c.f` @type ^`org.c.a.f.b$a` @kind object;
  #L401a9e.  if v0 != 0 then goto L401ab0;
  #L401aa2.  v3:= v2.`org.c.a.f.b$c.c` @type ^`int`[] @kind object;
  #L401aa6.  v1:= v1 + -1;
  #L401aaa.  v3:= v3[v1];
  #L401aae.  return v3;
  #L401ab0.  v0:= v2.`org.c.a.f.b$c.f` @type ^`org.c.a.f.b$a` @kind object;
  #L401ab4.  call temp:= `b`(v0, v3) @signature `Lorg/c/a/f/b$a;.b:(J)I` @kind virtual;
  #L401aba.  v3:= temp;
  #L401abc.  return v3;
}
procedure `int` `c`(`org.c.a.f.b$c` v2 @kind this, `long` v3 ) @signature `Lorg/c/a/f/b$c;.c:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L401ad0.  v0:= v2.`org.c.a.f.b$c.b` @type ^`long`[] @kind object;
  #L401ad4.  call temp:= `binarySearch`(v0, v3) @signature `Ljava/util/Arrays;.binarySearch:([JJ)I` @kind static;
  #L401ada.  v1:= temp;
  #L401adc.  if v1 < 0 then goto L401aea;
  #L401ae0.  v3:= v2.`org.c.a.f.b$c.d` @type ^`int`[] @kind object;
  #L401ae4.  v3:= v3[v1];
  #L401ae8.  return v3;
  #L401aea.  v1:= v1 ^~ -1;
  #L401aee.  v0:= length @variable v0;
  #L401af0.  if v1 >= v0 then goto L401b0a;
  #L401af4.  if v1 <= 0 then goto L401b06;
  #L401af8.  v3:= v2.`org.c.a.f.b$c.d` @type ^`int`[] @kind object;
  #L401afc.  v1:= v1 + -1;
  #L401b00.  v3:= v3[v1];
  #L401b04.  return v3;
  #L401b06.  v3:= 0I;
  #L401b08.  return v3;
  #L401b0a.  v0:= v2.`org.c.a.f.b$c.f` @type ^`org.c.a.f.b$a` @kind object;
  #L401b0e.  if v0 != 0 then goto L401b20;
  #L401b12.  v3:= v2.`org.c.a.f.b$c.d` @type ^`int`[] @kind object;
  #L401b16.  v1:= v1 + -1;
  #L401b1a.  v3:= v3[v1];
  #L401b1e.  return v3;
  #L401b20.  v0:= v2.`org.c.a.f.b$c.f` @type ^`org.c.a.f.b$a` @kind object;
  #L401b24.  call temp:= `c`(v0, v3) @signature `Lorg/c/a/f/b$a;.c:(J)I` @kind virtual;
  #L401b2a.  v3:= temp;
  #L401b2c.  return v3;
}
procedure `boolean` `equals`(`org.c.a.f.b$c` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lorg/c/a/f/b$c;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L40198c.  v0:= 1I;
  #L40198e.  if v4 != v5 then goto L401994;
  #L401992.  return v0;
  #L401994.  v1:= instanceof @variable v5 @type ^`org.c.a.f.b$c` @kind boolean;
  #L401998.  v2:= 0I;
  #L40199a.  if v1 == 0 then goto L401a3a;
  #L40199e.  v5:= (`org.c.a.f.b$c`) v5 @kind object;
  #L4019a2.  call temp:= `e`(v4) @signature `Lorg/c/a/f/b$c;.e:()Ljava/lang/String;` @kind virtual;
  #L4019a8.  v1:= temp @kind object;
  #L4019aa.  call temp:= `e`(v5) @signature `Lorg/c/a/f/b$c;.e:()Ljava/lang/String;` @kind virtual;
  #L4019b0.  v3:= temp @kind object;
  #L4019b2.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4019b8.  v1:= temp;
  #L4019ba.  if v1 == 0 then goto L401a36;
  #L4019be.  v1:= v4.`org.c.a.f.b$c.b` @type ^`long`[] @kind object;
  #L4019c2.  v3:= v5.`org.c.a.f.b$c.b` @type ^`long`[] @kind object;
  #L4019c6.  call temp:= `equals`(v1, v3) @signature `Ljava/util/Arrays;.equals:([J[J)Z` @kind static;
  #L4019cc.  v1:= temp;
  #L4019ce.  if v1 == 0 then goto L401a36;
  #L4019d2.  v1:= v4.`org.c.a.f.b$c.e` @type ^`java.lang.String`[] @kind object;
  #L4019d6.  v3:= v5.`org.c.a.f.b$c.e` @type ^`java.lang.String`[] @kind object;
  #L4019da.  call temp:= `equals`(v1, v3) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L4019e0.  v1:= temp;
  #L4019e2.  if v1 == 0 then goto L401a36;
  #L4019e6.  v1:= v4.`org.c.a.f.b$c.c` @type ^`int`[] @kind object;
  #L4019ea.  v3:= v5.`org.c.a.f.b$c.c` @type ^`int`[] @kind object;
  #L4019ee.  call temp:= `equals`(v1, v3) @signature `Ljava/util/Arrays;.equals:([I[I)Z` @kind static;
  #L4019f4.  v1:= temp;
  #L4019f6.  if v1 == 0 then goto L401a36;
  #L4019fa.  v1:= v4.`org.c.a.f.b$c.d` @type ^`int`[] @kind object;
  #L4019fe.  v3:= v5.`org.c.a.f.b$c.d` @type ^`int`[] @kind object;
  #L401a02.  call temp:= `equals`(v1, v3) @signature `Ljava/util/Arrays;.equals:([I[I)Z` @kind static;
  #L401a08.  v1:= temp;
  #L401a0a.  if v1 == 0 then goto L401a36;
  #L401a0e.  v1:= v4.`org.c.a.f.b$c.f` @type ^`org.c.a.f.b$a` @kind object;
  #L401a12.  if v1 != 0 then goto L401a20;
  #L401a16.  v5:= v5.`org.c.a.f.b$c.f` @type ^`org.c.a.f.b$a` @kind object;
  #L401a1a.  if v5 != 0 then goto L401a36;
  #L401a1e.  goto L401a38;
  #L401a20.  v1:= v4.`org.c.a.f.b$c.f` @type ^`org.c.a.f.b$a` @kind object;
  #L401a24.  v5:= v5.`org.c.a.f.b$c.f` @type ^`org.c.a.f.b$a` @kind object;
  #L401a28.  call temp:= `equals`(v1, v5) @signature `Lorg/c/a/f/b$a;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L401a2e.  v5:= temp;
  #L401a30.  if v5 == 0 then goto L401a36;
  #L401a34.  goto L401a38;
  #L401a36.  v0:= 0I;
  #L401a38.  return v0;
  #L401a3a.  return v2;
}
procedure `boolean` `f`(`org.c.a.f.b$c` v1 @kind this) @signature `Lorg/c/a/f/b$c;.f:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L401a4c.  v0:= 0I;
  #L401a4e.  return v0;
}
procedure `long` `g`(`org.c.a.f.b$c` v3 @kind this, `long` v4 ) @signature `Lorg/c/a/f/b$c;.g:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L401bb0.  v0:= v3.`org.c.a.f.b$c.b` @type ^`long`[] @kind object;
  #L401bb4.  call temp:= `binarySearch`(v0, v4) @signature `Ljava/util/Arrays;.binarySearch:([JJ)I` @kind static;
  #L401bba.  v1:= temp;
  #L401bbc.  if v1 < 0 then goto L401bc6;
  #L401bc0.  v1:= v1 + 1;
  #L401bc4.  goto L401bca;
  #L401bc6.  v1:= v1 ^~ -1;
  #L401bca.  v2:= length @variable v0;
  #L401bcc.  if v1 >= v2 then goto L401bd6;
  #L401bd0.  v4:= v0[v1] @kind wide;
  #L401bd4.  return v4 @kind wide;
  #L401bd6.  v1:= v3.`org.c.a.f.b$c.f` @type ^`org.c.a.f.b$a` @kind object;
  #L401bda.  if v1 != 0 then goto L401be0;
  #L401bde.  return v4 @kind wide;
  #L401be0.  v1:= length @variable v0;
  #L401be2.  v1:= v1 + -1;
  #L401be6.  v1:= v0[v1] @kind wide;
  #L401bea.  v0:= lcmp(v4, v1);
  #L401bee.  if v0 >= 0 then goto L401bf4;
  #L401bf2.  v4:= v1 @kind wide;
  #L401bf4.  v0:= v3.`org.c.a.f.b$c.f` @type ^`org.c.a.f.b$a` @kind object;
  #L401bf8.  call temp:= `g`(v0, v4) @signature `Lorg/c/a/f/b$a;.g:(J)J` @kind virtual;
  #L401bfe.  v4:= temp @kind wide;
  #L401c00.  return v4 @kind wide;
}
procedure `long` `h`(`org.c.a.f.b$c` v9 @kind this, `long` v10 ) @signature `Lorg/c/a/f/b$c;.h:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L401c14.  v0:= v9.`org.c.a.f.b$c.b` @type ^`long`[] @kind object;
  #L401c18.  call temp:= `binarySearch`(v0, v10) @signature `Ljava/util/Arrays;.binarySearch:([JJ)I` @kind static;
  #L401c1e.  v1:= temp;
  #L401c20.  v2:= 1L;
  #L401c24.  v4:= -9223372036854775808L;
  #L401c28.  if v1 < 0 then goto L401c3c;
  #L401c2c.  v0:= lcmp(v10, v4);
  #L401c30.  if v0 <= 0 then goto L401c3a;
  #L401c34.  v0:= v10 - v2 @kind long;
  #L401c38.  return v0 @kind wide;
  #L401c3a.  return v10 @kind wide;
  #L401c3c.  v1:= v1 ^~ -1;
  #L401c40.  v6:= length @variable v0;
  #L401c42.  if v1 >= v6 then goto L401c62;
  #L401c46.  if v1 <= 0 then goto L401c60;
  #L401c4a.  v1:= v1 + -1;
  #L401c4e.  v6:= v0[v1] @kind wide;
  #L401c52.  v0:= lcmp(v6, v4);
  #L401c56.  if v0 <= 0 then goto L401c60;
  #L401c5a.  v10:= v6 - v2 @kind long;
  #L401c5e.  return v10 @kind wide;
  #L401c60.  return v10 @kind wide;
  #L401c62.  v6:= v9.`org.c.a.f.b$c.f` @type ^`org.c.a.f.b$a` @kind object;
  #L401c66.  if v6 == 0 then goto L401c80;
  #L401c6a.  v6:= v9.`org.c.a.f.b$c.f` @type ^`org.c.a.f.b$a` @kind object;
  #L401c6e.  call temp:= `h`(v6, v10) @signature `Lorg/c/a/f/b$a;.h:(J)J` @kind virtual;
  #L401c74.  v6:= temp @kind wide;
  #L401c76.  v8:= lcmp(v6, v10);
  #L401c7a.  if v8 >= 0 then goto L401c80;
  #L401c7e.  return v6 @kind wide;
  #L401c80.  v1:= v1 + -1;
  #L401c84.  v6:= v0[v1] @kind wide;
  #L401c88.  v0:= lcmp(v6, v4);
  #L401c8c.  if v0 <= 0 then goto L401c96;
  #L401c90.  v10:= v6 - v2 @kind long;
  #L401c94.  return v10 @kind wide;
  #L401c96.  return v10 @kind wide;
}
