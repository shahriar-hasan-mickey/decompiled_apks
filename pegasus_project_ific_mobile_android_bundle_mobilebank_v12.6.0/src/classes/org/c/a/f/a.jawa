record `org.c.a.f.a` @kind class @AccessFlag PUBLIC extends `org.c.a.f` @kind class {
  `org.c.a.f` `org.c.a.f.a.c` @AccessFlag PRIVATE_FINAL;
  `org.c.a.f.a$a`[] `org.c.a.f.a.d` @AccessFlag PRIVATE_FINAL_TRANSIENT;
}
global `int` `@@org.c.a.f.a.b` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@org.c.a.f.a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/c/a/f/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L401054.  v0:= "org.joda.time.tz.CachedDateTimeZone.size" @kind object;
  #L401058.  call temp:= `getInteger`(v0) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;)Ljava/lang/Integer;` @kind static;
  #L40105e.  v0:= temp @kind object;
  #L401060.  goto L401064;
  #L401062.  v0:= 0I;
  #L401064.  v1:= 1I;
  #L401066.  if v0 != 0 then goto L401070;
  #L40106a.  v0:= 512I;
  #L40106e.  goto L401090;
  #L401070.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L401076.  v0:= temp;
  #L401078.  v0:= v0 + -1;
  #L40107c.  v2:= 0I;
  #L40107e.  if v0 <= 0 then goto L40108c;
  #L401082.  v2:= v2 + 1;
  #L401086.  v0:= v0 ^> 1;
  #L40108a.  goto L40107e;
  #L40108c.  v0:= v1 ^< v2 @kind int;
  #L401090.  v0:= v0 - v1 @kind int;
  #L401092.  `@@org.c.a.f.a.b` @type ^`int` := v0;
  #L401096.  return @kind void;
  catch `java.lang.SecurityException` @[L401054..L401060] goto L401062;
}
procedure `void` `<init>`(`org.c.a.f.a` v1 @kind this, `org.c.a.f` v2 @kind object) @signature `Lorg/c/a/f/a;.<init>:(Lorg/c/a/f;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L4010b8.  call temp:= `e`(v2) @signature `Lorg/c/a/f;.e:()Ljava/lang/String;` @kind virtual;
  #L4010be.  v0:= temp @kind object;
  #L4010c0.  call `<init>`(v1, v0) @signature `Lorg/c/a/f;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4010c6.  v0:= `@@org.c.a.f.a.b` @type ^`int`;
  #L4010ca.  v0:= v0 + 1;
  #L4010ce.  v0:= new `org.c.a.f.a$a`[v0];
  #L4010d2.  v1.`org.c.a.f.a.d` @type ^`org.c.a.f.a$a`[] := v0 @kind object;
  #L4010d6.  v1.`org.c.a.f.a.c` @type ^`org.c.a.f` := v2 @kind object;
  #L4010da.  return @kind void;
}
procedure `org.c.a.f.a` `a`(`org.c.a.f` v1 @kind object) @signature `Lorg/c/a/f/a;.a:(Lorg/c/a/f;)Lorg/c/a/f/a;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L400f6c.  v0:= instanceof @variable v1 @type ^`org.c.a.f.a` @kind boolean;
  #L400f70.  if v0 == 0 then goto L400f7a;
  #L400f74.  v1:= (`org.c.a.f.a`) v1 @kind object;
  #L400f78.  return v1 @kind object;
  #L400f7a.  v0:= new `org.c.a.f.a`;
  #L400f7e.  call `<init>`(v0, v1) @signature `Lorg/c/a/f/a;.<init>:(Lorg/c/a/f;)V` @kind direct;
  #L400f84.  return v0 @kind object;
}
procedure `org.c.a.f.a$a` `i`(`org.c.a.f.a` v7 @kind this, `long` v8 ) @signature `Lorg/c/a/f/a;.i:(J)Lorg/c/a/f/a$a;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L400f98.  v0:= 32I;
  #L400f9c.  v1:= v8 ^> v0 @kind long;
  #L400fa0.  v1:= (`int`) v1 @kind l2i;
  #L400fa2.  v2:= v7.`org.c.a.f.a.d` @type ^`org.c.a.f.a$a`[] @kind object;
  #L400fa6.  v3:= `@@org.c.a.f.a.b` @type ^`int`;
  #L400faa.  v3:= v3 ^& v1 @kind int;
  #L400fac.  v4:= v2[v3] @kind object;
  #L400fb0.  if v4 == 0 then goto L400fc0;
  #L400fb4.  v5:= v4.`org.c.a.f.a$a.a` @type ^`long` @kind wide;
  #L400fb8.  v5:= v5 ^> v0 @kind long;
  #L400fba.  v0:= (`int`) v5 @kind l2i;
  #L400fbc.  if v0 == v1 then goto L400fcc;
  #L400fc0.  call temp:= `j`(v7, v8) @signature `Lorg/c/a/f/a;.j:(J)Lorg/c/a/f/a$a;` @kind direct;
  #L400fc6.  v4:= temp @kind object;
  #L400fc8.  v2[v3]:= v4 @kind object;
  #L400fcc.  return v4 @kind object;
}
procedure `org.c.a.f.a$a` `j`(`org.c.a.f.a` v7 @kind this, `long` v8 ) @signature `Lorg/c/a/f/a;.j:(J)Lorg/c/a/f/a$a;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L400fe0.  v0:= -4294967296L;
  #L400fea.  v2:= v8 ^& v0 @kind long;
  #L400fee.  v8:= new `org.c.a.f.a$a`;
  #L400ff2.  v9:= v7.`org.c.a.f.a.c` @type ^`org.c.a.f` @kind object;
  #L400ff6.  call `<init>`(v8, v9, v2) @signature `Lorg/c/a/f/a$a;.<init>:(Lorg/c/a/f;J)V` @kind direct;
  #L400ffc.  v0:= 4294967295L;
  #L401006.  v4:= v2 ^| v0 @kind long;
  #L40100a.  v9:= v8 @kind object;
  #L40100c.  v0:= v7.`org.c.a.f.a.c` @type ^`org.c.a.f` @kind object;
  #L401010.  call temp:= `g`(v0, v2) @signature `Lorg/c/a/f;.g:(J)J` @kind virtual;
  #L401016.  v0:= temp @kind wide;
  #L401018.  v6:= lcmp(v0, v2);
  #L40101c.  if v6 == 0 then goto L401042;
  #L401020.  v2:= lcmp(v0, v4);
  #L401024.  if v2 <= 0 then goto L40102a;
  #L401028.  goto L401042;
  #L40102a.  v2:= new `org.c.a.f.a$a`;
  #L40102e.  v3:= v7.`org.c.a.f.a.c` @type ^`org.c.a.f` @kind object;
  #L401032.  call `<init>`(v2, v3, v0) @signature `Lorg/c/a/f/a$a;.<init>:(Lorg/c/a/f;J)V` @kind direct;
  #L401038.  v9.`org.c.a.f.a$a.c` @type ^`org.c.a.f.a$a` := v2 @kind object;
  #L40103c.  v9:= v2 @kind object;
  #L40103e.  v2:= v0 @kind wide;
  #L401040.  goto L40100c;
  #L401042.  return v8 @kind object;
}
procedure `java.lang.String` `a`(`org.c.a.f.a` v1 @kind this, `long` v2 ) @signature `Lorg/c/a/f/a;.a:(J)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L400f08.  call temp:= `i`(v1, v2) @signature `Lorg/c/a/f/a;.i:(J)Lorg/c/a/f/a$a;` @kind direct;
  #L400f0e.  v0:= temp @kind object;
  #L400f10.  call temp:= `a`(v0, v2) @signature `Lorg/c/a/f/a$a;.a:(J)Ljava/lang/String;` @kind virtual;
  #L400f16.  v2:= temp @kind object;
  #L400f18.  return v2 @kind object;
}
procedure `int` `b`(`org.c.a.f.a` v1 @kind this, `long` v2 ) @signature `Lorg/c/a/f/a;.b:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L400ea0.  call temp:= `i`(v1, v2) @signature `Lorg/c/a/f/a;.i:(J)Lorg/c/a/f/a$a;` @kind direct;
  #L400ea6.  v0:= temp @kind object;
  #L400ea8.  call temp:= `b`(v0, v2) @signature `Lorg/c/a/f/a$a;.b:(J)I` @kind virtual;
  #L400eae.  v2:= temp;
  #L400eb0.  return v2;
}
procedure `int` `c`(`org.c.a.f.a` v1 @kind this, `long` v2 ) @signature `Lorg/c/a/f/a;.c:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L400ec4.  call temp:= `i`(v1, v2) @signature `Lorg/c/a/f/a;.i:(J)Lorg/c/a/f/a$a;` @kind direct;
  #L400eca.  v0:= temp @kind object;
  #L400ecc.  call temp:= `c`(v0, v2) @signature `Lorg/c/a/f/a$a;.c:(J)I` @kind virtual;
  #L400ed2.  v2:= temp;
  #L400ed4.  return v2;
}
procedure `boolean` `equals`(`org.c.a.f.a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lorg/c/a/f/a;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L400e44.  if v1 != v2 then goto L400e4c;
  #L400e48.  v2:= 1I;
  #L400e4a.  return v2;
  #L400e4c.  v0:= instanceof @variable v2 @type ^`org.c.a.f.a` @kind boolean;
  #L400e50.  if v0 == 0 then goto L400e6a;
  #L400e54.  v0:= v1.`org.c.a.f.a.c` @type ^`org.c.a.f` @kind object;
  #L400e58.  v2:= (`org.c.a.f.a`) v2 @kind object;
  #L400e5c.  v2:= v2.`org.c.a.f.a.c` @type ^`org.c.a.f` @kind object;
  #L400e60.  call temp:= `equals`(v0, v2) @signature `Lorg/c/a/f;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L400e66.  v2:= temp;
  #L400e68.  return v2;
  #L400e6a.  v2:= 0I;
  #L400e6c.  return v2;
}
procedure `boolean` `f`(`org.c.a.f.a` v1 @kind this) @signature `Lorg/c/a/f/a;.f:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L400e80.  v0:= v1.`org.c.a.f.a.c` @type ^`org.c.a.f` @kind object;
  #L400e84.  call temp:= `f`(v0) @signature `Lorg/c/a/f;.f:()Z` @kind virtual;
  #L400e8a.  v0:= temp;
  #L400e8c.  return v0;
}
procedure `long` `g`(`org.c.a.f.a` v1 @kind this, `long` v2 ) @signature `Lorg/c/a/f/a;.g:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L400f2c.  v0:= v1.`org.c.a.f.a.c` @type ^`org.c.a.f` @kind object;
  #L400f30.  call temp:= `g`(v0, v2) @signature `Lorg/c/a/f;.g:(J)J` @kind virtual;
  #L400f36.  v2:= temp @kind wide;
  #L400f38.  return v2 @kind wide;
}
procedure `long` `h`(`org.c.a.f.a` v1 @kind this, `long` v2 ) @signature `Lorg/c/a/f/a;.h:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L400f4c.  v0:= v1.`org.c.a.f.a.c` @type ^`org.c.a.f` @kind object;
  #L400f50.  call temp:= `h`(v0, v2) @signature `Lorg/c/a/f;.h:(J)J` @kind virtual;
  #L400f56.  v2:= temp @kind wide;
  #L400f58.  return v2 @kind wide;
}
procedure `int` `hashCode`(`org.c.a.f.a` v1 @kind this) @signature `Lorg/c/a/f/a;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L400ee8.  v0:= v1.`org.c.a.f.a.c` @type ^`org.c.a.f` @kind object;
  #L400eec.  call temp:= `hashCode`(v0) @signature `Lorg/c/a/f;.hashCode:()I` @kind virtual;
  #L400ef2.  v0:= temp;
  #L400ef4.  return v0;
}
