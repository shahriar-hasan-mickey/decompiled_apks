record `org.c.a.f.b$a` @kind class @AccessFlag FINAL extends `org.c.a.f` @kind class {
  `int` `org.c.a.f.b$a.b` @AccessFlag FINAL;
  `org.c.a.f.b$d` `org.c.a.f.b$a.c` @AccessFlag FINAL;
  `org.c.a.f.b$d` `org.c.a.f.b$a.d` @AccessFlag FINAL;
}
global `long` `@@org.c.a.f.b$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.c.a.f.b$a` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `org.c.a.f.b$d` v3 @kind object, `org.c.a.f.b$d` v4 @kind object) @signature `Lorg/c/a/f/b$a;.<init>:(Ljava/lang/String;ILorg/c/a/f/b$d;Lorg/c/a/f/b$d;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4013c0.  call `<init>`(v0, v1) @signature `Lorg/c/a/f;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4013c6.  v0.`org.c.a.f.b$a.b` @type ^`int` := v2;
  #L4013ca.  v0.`org.c.a.f.b$a.c` @type ^`org.c.a.f.b$d` := v3 @kind object;
  #L4013ce.  v0.`org.c.a.f.b$a.d` @type ^`org.c.a.f.b$d` := v4 @kind object;
  #L4013d2.  return @kind void;
}
procedure `org.c.a.f.b$a` `a`(`java.io.DataInput` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lorg/c/a/f/b$a;.a:(Ljava/io/DataInput;Ljava/lang/String;)Lorg/c/a/f/b$a;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L401318.  v0:= new `org.c.a.f.b$a`;
  #L40131c.  call temp:= `a`(v3) @signature `Lorg/c/a/f/b;.a:(Ljava/io/DataInput;)J` @kind static;
  #L401322.  v1:= temp @kind wide;
  #L401324.  v1:= (`int`) v1 @kind l2i;
  #L401326.  call temp:= `a`(v3) @signature `Lorg/c/a/f/b$d;.a:(Ljava/io/DataInput;)Lorg/c/a/f/b$d;` @kind static;
  #L40132c.  v2:= temp @kind object;
  #L40132e.  call temp:= `a`(v3) @signature `Lorg/c/a/f/b$d;.a:(Ljava/io/DataInput;)Lorg/c/a/f/b$d;` @kind static;
  #L401334.  v3:= temp @kind object;
  #L401336.  call `<init>`(v0, v4, v1, v2, v3) @signature `Lorg/c/a/f/b$a;.<init>:(Ljava/lang/String;ILorg/c/a/f/b$d;Lorg/c/a/f/b$d;)V` @kind direct;
  #L40133c.  return v0 @kind object;
}
procedure `org.c.a.f.b$d` `i`(`org.c.a.f.b$a` v7 @kind this, `long` v8 ) @signature `Lorg/c/a/f/b$a;.i:(J)Lorg/c/a/f/b$d;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L401350.  v0:= v7.`org.c.a.f.b$a.b` @type ^`int`;
  #L401354.  v1:= v7.`org.c.a.f.b$a.c` @type ^`org.c.a.f.b$d` @kind object;
  #L401358.  v2:= v7.`org.c.a.f.b$a.d` @type ^`org.c.a.f.b$d` @kind object;
  #L40135c.  call temp:= `b`(v2) @signature `Lorg/c/a/f/b$d;.b:()I` @kind virtual;
  #L401362.  v3:= temp;
  #L401364.  call temp:= `a`(v1, v8, v0, v3) @signature `Lorg/c/a/f/b$d;.a:(JII)J` @kind virtual;
  #L40136a.  v3:= temp @kind wide;
  #L40136c.  goto L401370;
  #L40136e.  v3:= v8 @kind wide;
  #L401370.  call temp:= `b`(v1) @signature `Lorg/c/a/f/b$d;.b:()I` @kind virtual;
  #L401376.  v5:= temp;
  #L401378.  call temp:= `a`(v2, v8, v0, v5) @signature `Lorg/c/a/f/b$d;.a:(JII)J` @kind virtual;
  #L40137e.  v5:= temp @kind wide;
  #L401380.  v8:= v5 @kind wide;
  #L401382.  v0:= lcmp(v3, v8);
  #L401386.  if v0 <= 0 then goto L40138c;
  #L40138a.  goto L40138e;
  #L40138c.  v1:= v2 @kind object;
  #L40138e.  return v1 @kind object;
  catch `java.lang.IllegalArgumentException` @[L40135c..L40136c] goto L40136e;
  catch `java.lang.ArithmeticException` @[L40135c..L40136c] goto L40136e;
  catch `java.lang.IllegalArgumentException` @[L401370..L401380] goto L401382;
  catch `java.lang.ArithmeticException` @[L401370..L401380] goto L401382;
}
procedure `java.lang.String` `a`(`org.c.a.f.b$a` v0 @kind this, `long` v1 ) @signature `Lorg/c/a/f/b$a;.a:(J)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;

  #L4011c0.  call temp:= `i`(v0, v1) @signature `Lorg/c/a/f/b$a;.i:(J)Lorg/c/a/f/b$d;` @kind direct;
  #L4011c6.  v1:= temp @kind object;
  #L4011c8.  call temp:= `a`(v1) @signature `Lorg/c/a/f/b$d;.a:()Ljava/lang/String;` @kind virtual;
  #L4011ce.  v1:= temp @kind object;
  #L4011d0.  return v1 @kind object;
}
procedure `int` `b`(`org.c.a.f.b$a` v1 @kind this, `long` v2 ) @signature `Lorg/c/a/f/b$a;.b:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L401180.  v0:= v1.`org.c.a.f.b$a.b` @type ^`int`;
  #L401184.  call temp:= `i`(v1, v2) @signature `Lorg/c/a/f/b$a;.i:(J)Lorg/c/a/f/b$d;` @kind direct;
  #L40118a.  v2:= temp @kind object;
  #L40118c.  call temp:= `b`(v2) @signature `Lorg/c/a/f/b$d;.b:()I` @kind virtual;
  #L401192.  v2:= temp;
  #L401194.  v0:= v0 + v2 @kind int;
  #L401196.  return v0;
}
procedure `int` `c`(`org.c.a.f.b$a` v0 @kind this, `long` v1 ) @signature `Lorg/c/a/f/b$a;.c:(J)I` @AccessFlag PUBLIC {
    temp;

  #L4011a8.  v1:= v0.`org.c.a.f.b$a.b` @type ^`int`;
  #L4011ac.  return v1;
}
procedure `boolean` `equals`(`org.c.a.f.b$a` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lorg/c/a/f/b$a;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4010ec.  v0:= 1I;
  #L4010ee.  if v4 != v5 then goto L4010f4;
  #L4010f2.  return v0;
  #L4010f4.  v1:= instanceof @variable v5 @type ^`org.c.a.f.b$a` @kind boolean;
  #L4010f8.  v2:= 0I;
  #L4010fa.  if v1 == 0 then goto L401158;
  #L4010fe.  v5:= (`org.c.a.f.b$a`) v5 @kind object;
  #L401102.  call temp:= `e`(v4) @signature `Lorg/c/a/f/b$a;.e:()Ljava/lang/String;` @kind virtual;
  #L401108.  v1:= temp @kind object;
  #L40110a.  call temp:= `e`(v5) @signature `Lorg/c/a/f/b$a;.e:()Ljava/lang/String;` @kind virtual;
  #L401110.  v3:= temp @kind object;
  #L401112.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L401118.  v1:= temp;
  #L40111a.  if v1 == 0 then goto L401154;
  #L40111e.  v1:= v4.`org.c.a.f.b$a.b` @type ^`int`;
  #L401122.  v3:= v5.`org.c.a.f.b$a.b` @type ^`int`;
  #L401126.  if v1 != v3 then goto L401154;
  #L40112a.  v1:= v4.`org.c.a.f.b$a.c` @type ^`org.c.a.f.b$d` @kind object;
  #L40112e.  v3:= v5.`org.c.a.f.b$a.c` @type ^`org.c.a.f.b$d` @kind object;
  #L401132.  call temp:= `equals`(v1, v3) @signature `Lorg/c/a/f/b$d;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L401138.  v1:= temp;
  #L40113a.  if v1 == 0 then goto L401154;
  #L40113e.  v1:= v4.`org.c.a.f.b$a.d` @type ^`org.c.a.f.b$d` @kind object;
  #L401142.  v5:= v5.`org.c.a.f.b$a.d` @type ^`org.c.a.f.b$d` @kind object;
  #L401146.  call temp:= `equals`(v1, v5) @signature `Lorg/c/a/f/b$d;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L40114c.  v5:= temp;
  #L40114e.  if v5 == 0 then goto L401154;
  #L401152.  goto L401156;
  #L401154.  v0:= 0I;
  #L401156.  return v0;
  #L401158.  return v2;
}
procedure `boolean` `f`(`org.c.a.f.b$a` v1 @kind this) @signature `Lorg/c/a/f/b$a;.f:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40116c.  v0:= 0I;
  #L40116e.  return v0;
}
procedure `long` `g`(`org.c.a.f.b$a` v8 @kind this, `long` v9 ) @signature `Lorg/c/a/f/b$a;.g:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4011e4.  v0:= v8.`org.c.a.f.b$a.b` @type ^`int`;
  #L4011e8.  v1:= v8.`org.c.a.f.b$a.c` @type ^`org.c.a.f.b$d` @kind object;
  #L4011ec.  v2:= v8.`org.c.a.f.b$a.d` @type ^`org.c.a.f.b$d` @kind object;
  #L4011f0.  v3:= 0L;
  #L4011f4.  call temp:= `b`(v2) @signature `Lorg/c/a/f/b$d;.b:()I` @kind virtual;
  #L4011fa.  v5:= temp;
  #L4011fc.  call temp:= `a`(v1, v9, v0, v5) @signature `Lorg/c/a/f/b$d;.a:(JII)J` @kind virtual;
  #L401202.  v5:= temp @kind wide;
  #L401204.  v7:= lcmp(v9, v3);
  #L401208.  if v7 <= 0 then goto L401216;
  #L40120c.  v7:= lcmp(v5, v3);
  #L401210.  if v7 >= 0 then goto L401216;
  #L401214.  v5:= v9 @kind wide;
  #L401216.  call temp:= `b`(v1) @signature `Lorg/c/a/f/b$d;.b:()I` @kind virtual;
  #L40121c.  v1:= temp;
  #L40121e.  call temp:= `a`(v2, v9, v0, v1) @signature `Lorg/c/a/f/b$d;.a:(JII)J` @kind virtual;
  #L401224.  v0:= temp @kind wide;
  #L401226.  v2:= lcmp(v9, v3);
  #L40122a.  if v2 <= 0 then goto L401238;
  #L40122e.  v2:= lcmp(v0, v3);
  #L401232.  if v2 >= 0 then goto L401238;
  #L401236.  goto L40123a;
  #L401238.  v9:= v0 @kind wide;
  #L40123a.  v0:= lcmp(v5, v9);
  #L40123e.  if v0 <= 0 then goto L401244;
  #L401242.  goto L401246;
  #L401244.  v9:= v5 @kind wide;
  #L401246.  return v9 @kind wide;
  catch `java.lang.IllegalArgumentException` @[L4011f4..L401204] goto L401214;
  catch `java.lang.ArithmeticException` @[L4011f4..L401204] goto L401214;
  catch `java.lang.IllegalArgumentException` @[L401216..L401226] goto L40123a;
  catch `java.lang.ArithmeticException` @[L401216..L401226] goto L40123a;
}
procedure `long` `h`(`org.c.a.f.b$a` v10 @kind this, `long` v11 ) @signature `Lorg/c/a/f/b$a;.h:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L401278.  v0:= 1L;
  #L40127c.  v2:= v11 + v0 @kind long;
  #L401280.  v11:= v10.`org.c.a.f.b$a.b` @type ^`int`;
  #L401284.  v12:= v10.`org.c.a.f.b$a.c` @type ^`org.c.a.f.b$d` @kind object;
  #L401288.  v4:= v10.`org.c.a.f.b$a.d` @type ^`org.c.a.f.b$d` @kind object;
  #L40128c.  v5:= 0L;
  #L401290.  call temp:= `b`(v4) @signature `Lorg/c/a/f/b$d;.b:()I` @kind virtual;
  #L401296.  v7:= temp;
  #L401298.  call temp:= `b`(v12, v2, v11, v7) @signature `Lorg/c/a/f/b$d;.b:(JII)J` @kind virtual;
  #L40129e.  v7:= temp @kind wide;
  #L4012a0.  v9:= lcmp(v2, v5);
  #L4012a4.  if v9 >= 0 then goto L4012b2;
  #L4012a8.  v9:= lcmp(v7, v5);
  #L4012ac.  if v9 <= 0 then goto L4012b2;
  #L4012b0.  v7:= v2 @kind wide;
  #L4012b2.  call temp:= `b`(v12) @signature `Lorg/c/a/f/b$d;.b:()I` @kind virtual;
  #L4012b8.  v12:= temp;
  #L4012ba.  call temp:= `b`(v4, v2, v11, v12) @signature `Lorg/c/a/f/b$d;.b:(JII)J` @kind virtual;
  #L4012c0.  v11:= temp @kind wide;
  #L4012c2.  v4:= lcmp(v2, v5);
  #L4012c6.  if v4 >= 0 then goto L4012d4;
  #L4012ca.  v4:= lcmp(v11, v5);
  #L4012ce.  if v4 <= 0 then goto L4012d4;
  #L4012d2.  goto L4012d6;
  #L4012d4.  v2:= v11 @kind wide;
  #L4012d6.  v11:= lcmp(v7, v2);
  #L4012da.  if v11 <= 0 then goto L4012e0;
  #L4012de.  v2:= v7 @kind wide;
  #L4012e0.  v11:= 0I;
  #L4012e2.  v11:= v2 - v0 @kind long;
  #L4012e6.  return v11 @kind wide;
  catch `java.lang.IllegalArgumentException` @[L401290..L4012a0] goto L4012b0;
  catch `java.lang.ArithmeticException` @[L401290..L4012a0] goto L4012b0;
  catch `java.lang.IllegalArgumentException` @[L4012b2..L4012c2] goto L4012d6;
  catch `java.lang.ArithmeticException` @[L4012b2..L4012c2] goto L4012d6;
}
