record `org.c.a.c.e` @kind class @AccessFlag  {
  `org.c.a.c.c`[] `org.c.a.c.e.a` @AccessFlag PRIVATE_FINAL;
  `org.c.a.c.e$a`[] `org.c.a.c.e.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.c.a.c.e` v0 @kind this, `org.c.a.c.c`[] v1 @kind object) @signature `Lorg/c/a/c/e;.<init>:([Lorg/c/a/c/c;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f4dc8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3f4dce.  v0.`org.c.a.c.e.a` @type ^`org.c.a.c.c`[] := v1 @kind object;
  #L3f4dd2.  v1:= 16I;
  #L3f4dd6.  v1:= new `org.c.a.c.e$a`[v1];
  #L3f4dda.  v0.`org.c.a.c.e.b` @type ^`org.c.a.c.e$a`[] := v1 @kind object;
  #L3f4dde.  return @kind void;
}
procedure `org.c.a.c.c` `a`(`org.c.a.c.e` v10 @kind object, `java.lang.Class` v11 @kind object) @signature `Lorg/c/a/c/e;.a:(Lorg/c/a/c/e;Ljava/lang/Class;)Lorg/c/a/c/c;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L3f4be8.  v0:= v10.`org.c.a.c.e.a` @type ^`org.c.a.c.c`[] @kind object;
  #L3f4bec.  v1:= length @variable v0;
  #L3f4bee.  v2:= v10 @kind object;
  #L3f4bf0.  v10:= v1;
  #L3f4bf2.  v1:= v1 + -1;
  #L3f4bf6.  v3:= 0I;
  #L3f4bf8.  if v1 < 0 then goto L3f4c38;
  #L3f4bfc.  v4:= v0[v1] @kind object;
  #L3f4c00.  call temp:= `a`(v4) @signature `Lorg/c/a/c/c;.a:()Ljava/lang/Class;` @kind interface;
  #L3f4c06.  v5:= temp @kind object;
  #L3f4c08.  if v5 != v11 then goto L3f4c0e;
  #L3f4c0c.  return v4 @kind object;
  #L3f4c0e.  if v5 == 0 then goto L3f4c22;
  #L3f4c12.  if v11 == 0 then goto L3f4bf2;
  #L3f4c16.  call temp:= `isAssignableFrom`(v5, v11) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L3f4c1c.  v4:= temp;
  #L3f4c1e.  if v4 != 0 then goto L3f4bf2;
  #L3f4c22.  call temp:= `a`(v2, v1, v3) @signature `Lorg/c/a/c/e;.a:(I[Lorg/c/a/c/c;)Lorg/c/a/c/e;` @kind virtual;
  #L3f4c28.  v10:= temp @kind object;
  #L3f4c2a.  v0:= v10.`org.c.a.c.e.a` @type ^`org.c.a.c.c`[] @kind object;
  #L3f4c2e.  v2:= length @variable v0;
  #L3f4c30.  v9:= v2;
  #L3f4c32.  v2:= v10 @kind object;
  #L3f4c34.  v10:= v9;
  #L3f4c36.  goto L3f4bf2;
  #L3f4c38.  if v11 == 0 then goto L3f4d4c;
  #L3f4c3c.  if v10 != 0 then goto L3f4c44;
  #L3f4c40.  goto L3f4d4c;
  #L3f4c44.  v1:= 0I;
  #L3f4c46.  v4:= 1I;
  #L3f4c48.  if v10 != v4 then goto L3f4c52;
  #L3f4c4c.  v10:= v0[v1] @kind object;
  #L3f4c50.  return v10 @kind object;
  #L3f4c52.  v5:= v2 @kind object;
  #L3f4c54.  v2:= v10;
  #L3f4c56.  v10:= v10 + -1;
  #L3f4c5a.  if v10 < 0 then goto L3f4cac;
  #L3f4c5e.  v6:= v0[v10] @kind object;
  #L3f4c62.  call temp:= `a`(v6) @signature `Lorg/c/a/c/c;.a:()Ljava/lang/Class;` @kind interface;
  #L3f4c68.  v6:= temp @kind object;
  #L3f4c6a.  v7:= v5 @kind object;
  #L3f4c6c.  v5:= v2;
  #L3f4c6e.  v2:= v2 + -1;
  #L3f4c72.  if v2 < 0 then goto L3f4ca6;
  #L3f4c76.  if v2 == v10 then goto L3f4c6e;
  #L3f4c7a.  v8:= v0[v2] @kind object;
  #L3f4c7e.  call temp:= `a`(v8) @signature `Lorg/c/a/c/c;.a:()Ljava/lang/Class;` @kind interface;
  #L3f4c84.  v8:= temp @kind object;
  #L3f4c86.  call temp:= `isAssignableFrom`(v8, v6) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L3f4c8c.  v8:= temp;
  #L3f4c8e.  if v8 == 0 then goto L3f4c6e;
  #L3f4c92.  call temp:= `a`(v7, v2, v3) @signature `Lorg/c/a/c/e;.a:(I[Lorg/c/a/c/c;)Lorg/c/a/c/e;` @kind virtual;
  #L3f4c98.  v7:= temp @kind object;
  #L3f4c9a.  v0:= v7.`org.c.a.c.e.a` @type ^`org.c.a.c.c`[] @kind object;
  #L3f4c9e.  v5:= length @variable v0;
  #L3f4ca0.  v10:= v5 + -1;
  #L3f4ca4.  goto L3f4c6e;
  #L3f4ca6.  v2:= v5;
  #L3f4ca8.  v5:= v7 @kind object;
  #L3f4caa.  goto L3f4c56;
  #L3f4cac.  if v2 != v4 then goto L3f4cb6;
  #L3f4cb0.  v10:= v0[v1] @kind object;
  #L3f4cb4.  return v10 @kind object;
  #L3f4cb6.  v10:= new `java.lang.StringBuilder`;
  #L3f4cba.  call `<init>`(v10) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f4cc0.  v4:= "Unable to find best converter for type \"" @kind object;
  #L3f4cc4.  call temp:= `append`(v10, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f4cca.  call temp:= `getName`(v11) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L3f4cd0.  v11:= temp @kind object;
  #L3f4cd2.  call temp:= `append`(v10, v11) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f4cd8.  v11:= "\" from remaining set: " @kind object;
  #L3f4cdc.  call temp:= `append`(v10, v11) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f4ce2.  if v1 >= v2 then goto L3f4d38;
  #L3f4ce6.  v11:= v0[v1] @kind object;
  #L3f4cea.  call temp:= `a`(v11) @signature `Lorg/c/a/c/c;.a:()Ljava/lang/Class;` @kind interface;
  #L3f4cf0.  v4:= temp @kind object;
  #L3f4cf2.  call temp:= `getClass`(v11) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3f4cf8.  v11:= temp @kind object;
  #L3f4cfa.  call temp:= `getName`(v11) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L3f4d00.  v11:= temp @kind object;
  #L3f4d02.  call temp:= `append`(v10, v11) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f4d08.  v11:= 91I;
  #L3f4d0c.  call temp:= `append`(v10, v11) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f4d12.  if v4 != 0 then goto L3f4d1a;
  #L3f4d16.  v11:= v3 @kind object;
  #L3f4d18.  goto L3f4d22;
  #L3f4d1a.  call temp:= `getName`(v4) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L3f4d20.  v11:= temp @kind object;
  #L3f4d22.  call temp:= `append`(v10, v11) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f4d28.  v11:= "], " @kind object;
  #L3f4d2c.  call temp:= `append`(v10, v11) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f4d32.  v1:= v1 + 1;
  #L3f4d36.  goto L3f4ce2;
  #L3f4d38.  v11:= new `java.lang.IllegalStateException`;
  #L3f4d3c.  call temp:= `toString`(v10) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f4d42.  v10:= temp @kind object;
  #L3f4d44.  call `<init>`(v11, v10) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f4d4a.  throw v11;
  #L3f4d4c.  return v3 @kind object;
}
procedure `int` `a`(`org.c.a.c.e` v1 @kind this) @signature `Lorg/c/a/c/e;.a:()I` @AccessFlag  {
    temp;
    v0;

  #L3f4af8.  v0:= v1.`org.c.a.c.e.a` @type ^`org.c.a.c.c`[] @kind object;
  #L3f4afc.  v0:= length @variable v0;
  #L3f4afe.  return v0;
}
procedure `org.c.a.c.c` `a`(`org.c.a.c.e` v9 @kind this, `java.lang.Class` v10 @kind object) @signature `Lorg/c/a/c/e;.a:(Ljava/lang/Class;)Lorg/c/a/c/c;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3f4b10.  v0:= v9.`org.c.a.c.e.b` @type ^`org.c.a.c.e$a`[] @kind object;
  #L3f4b14.  v1:= length @variable v0;
  #L3f4b16.  v2:= 0I;
  #L3f4b18.  if v10 != 0 then goto L3f4b1e;
  #L3f4b1c.  goto L3f4b4a;
  #L3f4b1e.  call temp:= `hashCode`(v10) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3f4b24.  v3:= temp;
  #L3f4b26.  v4:= v1 + -1;
  #L3f4b2a.  v3:= v3 ^& v4 @kind int;
  #L3f4b2c.  v4:= v0[v3] @kind object;
  #L3f4b30.  if v4 == 0 then goto L3f4b4e;
  #L3f4b34.  v5:= v4.`org.c.a.c.e$a.a` @type ^`java.lang.Class` @kind object;
  #L3f4b38.  if v5 != v10 then goto L3f4b42;
  #L3f4b3c.  v10:= v4.`org.c.a.c.e$a.b` @type ^`org.c.a.c.c` @kind object;
  #L3f4b40.  return v10 @kind object;
  #L3f4b42.  v3:= v3 + 1;
  #L3f4b46.  if v3 < v1 then goto L3f4b2c;
  #L3f4b4a.  v3:= 0I;
  #L3f4b4c.  goto L3f4b2c;
  #L3f4b4e.  call temp:= `a`(v9, v10) @signature `Lorg/c/a/c/e;.a:(Lorg/c/a/c/e;Ljava/lang/Class;)Lorg/c/a/c/c;` @kind static;
  #L3f4b54.  v4:= temp @kind object;
  #L3f4b56.  v5:= new `org.c.a.c.e$a`;
  #L3f4b5a.  call `<init>`(v5, v10, v4) @signature `Lorg/c/a/c/e$a;.<init>:(Ljava/lang/Class;Lorg/c/a/c/c;)V` @kind direct;
  #L3f4b60.  call temp:= `clone`(v0) @signature `[Lorg/c/a/c/e$a;.clone:()Ljava/lang/Object;` @kind virtual;
  #L3f4b66.  v10:= temp @kind object;
  #L3f4b68.  v10:= (`org.c.a.c.e$a`[]) v10 @kind object;
  #L3f4b6c.  v10[v3]:= v5 @kind object;
  #L3f4b70.  v0:= 0I;
  #L3f4b72.  if v0 >= v1 then goto L3f4b8a;
  #L3f4b76.  v3:= v10[v0] @kind object;
  #L3f4b7a.  if v3 != 0 then goto L3f4b84;
  #L3f4b7e.  v9.`org.c.a.c.e.b` @type ^`org.c.a.c.e$a`[] := v10 @kind object;
  #L3f4b82.  return v4 @kind object;
  #L3f4b84.  v0:= v0 + 1;
  #L3f4b88.  goto L3f4b72;
  #L3f4b8a.  v0:= v1 ^< 1;
  #L3f4b8e.  v3:= new `org.c.a.c.e$a`[v0];
  #L3f4b92.  v5:= 0I;
  #L3f4b94.  if v5 >= v1 then goto L3f4bd2;
  #L3f4b98.  v6:= v10[v5] @kind object;
  #L3f4b9c.  v7:= v6.`org.c.a.c.e$a.a` @type ^`java.lang.Class` @kind object;
  #L3f4ba0.  if v7 != 0 then goto L3f4ba6;
  #L3f4ba4.  goto L3f4bc4;
  #L3f4ba6.  call temp:= `hashCode`(v7) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3f4bac.  v7:= temp;
  #L3f4bae.  v8:= v0 + -1;
  #L3f4bb2.  v7:= v7 ^& v8 @kind int;
  #L3f4bb4.  v8:= v3[v7] @kind object;
  #L3f4bb8.  if v8 == 0 then goto L3f4bc8;
  #L3f4bbc.  v7:= v7 + 1;
  #L3f4bc0.  if v7 < v0 then goto L3f4bb4;
  #L3f4bc4.  v7:= 0I;
  #L3f4bc6.  goto L3f4bb4;
  #L3f4bc8.  v3[v7]:= v6 @kind object;
  #L3f4bcc.  v5:= v5 + 1;
  #L3f4bd0.  goto L3f4b94;
  #L3f4bd2.  v9.`org.c.a.c.e.b` @type ^`org.c.a.c.e$a`[] := v3 @kind object;
  #L3f4bd6.  return v4 @kind object;
}
procedure `org.c.a.c.e` `a`(`org.c.a.c.e` v6 @kind this, `int` v7 , `org.c.a.c.c`[] v8 @kind object) @signature `Lorg/c/a/c/e;.a:(I[Lorg/c/a/c/c;)Lorg/c/a/c/e;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f4d60.  v0:= v6.`org.c.a.c.e.a` @type ^`org.c.a.c.c`[] @kind object;
  #L3f4d64.  v1:= length @variable v0;
  #L3f4d66.  if v7 < v1 then goto L3f4d76;
  #L3f4d6a.  v7:= new `java.lang.IndexOutOfBoundsException`;
  #L3f4d6e.  call `<init>`(v7) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:()V` @kind direct;
  #L3f4d74.  throw v7;
  #L3f4d76.  v2:= 0I;
  #L3f4d78.  if v8 == 0 then goto L3f4d84;
  #L3f4d7c.  v3:= v0[v7] @kind object;
  #L3f4d80.  v8[v2]:= v3 @kind object;
  #L3f4d84.  v8:= v1 + -1;
  #L3f4d88.  v8:= new `org.c.a.c.c`[v8];
  #L3f4d8c.  v3:= 0I;
  #L3f4d8e.  if v2 >= v1 then goto L3f4daa;
  #L3f4d92.  if v2 == v7 then goto L3f4da4;
  #L3f4d96.  v4:= v3 + 1;
  #L3f4d9a.  v5:= v0[v2] @kind object;
  #L3f4d9e.  v8[v3]:= v5 @kind object;
  #L3f4da2.  v3:= v4;
  #L3f4da4.  v2:= v2 + 1;
  #L3f4da8.  goto L3f4d8e;
  #L3f4daa.  v7:= new `org.c.a.c.e`;
  #L3f4dae.  call `<init>`(v7, v8) @signature `Lorg/c/a/c/e;.<init>:([Lorg/c/a/c/c;)V` @kind direct;
  #L3f4db4.  return v7 @kind object;
}
