record `org.c.a.l` @kind class @AccessFlag PUBLIC_FINAL extends `org.c.a.a.f` @kind class, `java.io.Serializable` @kind interface, `org.c.a.v` @kind interface {
  `long` `org.c.a.l.b` @AccessFlag PRIVATE_FINAL;
  `org.c.a.a` `org.c.a.l.c` @AccessFlag PRIVATE_FINAL;
  `int` `org.c.a.l.d` @AccessFlag PRIVATE_TRANSIENT;
}
global `java.util.Set` `@@org.c.a.l.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@org.c.a.l.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/c/a/l;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L40465c.  v0:= new `java.util.HashSet`;
  #L404660.  call `<init>`(v0) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L404666.  `@@org.c.a.l.a` @type ^`java.util.Set` := v0 @kind object;
  #L40466a.  v0:= `@@org.c.a.l.a` @type ^`java.util.Set` @kind object;
  #L40466e.  call temp:= `f`() @signature `Lorg/c/a/h;.f:()Lorg/c/a/h;` @kind static;
  #L404674.  v1:= temp @kind object;
  #L404676.  call temp:= `add`(v0, v1) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L40467c.  v0:= `@@org.c.a.l.a` @type ^`java.util.Set` @kind object;
  #L404680.  call temp:= `g`() @signature `Lorg/c/a/h;.g:()Lorg/c/a/h;` @kind static;
  #L404686.  v1:= temp @kind object;
  #L404688.  call temp:= `add`(v0, v1) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L40468e.  v0:= `@@org.c.a.l.a` @type ^`java.util.Set` @kind object;
  #L404692.  call temp:= `i`() @signature `Lorg/c/a/h;.i:()Lorg/c/a/h;` @kind static;
  #L404698.  v1:= temp @kind object;
  #L40469a.  call temp:= `add`(v0, v1) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4046a0.  v0:= `@@org.c.a.l.a` @type ^`java.util.Set` @kind object;
  #L4046a4.  call temp:= `h`() @signature `Lorg/c/a/h;.h:()Lorg/c/a/h;` @kind static;
  #L4046aa.  v1:= temp @kind object;
  #L4046ac.  call temp:= `add`(v0, v1) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4046b2.  v0:= `@@org.c.a.l.a` @type ^`java.util.Set` @kind object;
  #L4046b6.  call temp:= `j`() @signature `Lorg/c/a/h;.j:()Lorg/c/a/h;` @kind static;
  #L4046bc.  v1:= temp @kind object;
  #L4046be.  call temp:= `add`(v0, v1) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4046c4.  v0:= `@@org.c.a.l.a` @type ^`java.util.Set` @kind object;
  #L4046c8.  call temp:= `k`() @signature `Lorg/c/a/h;.k:()Lorg/c/a/h;` @kind static;
  #L4046ce.  v1:= temp @kind object;
  #L4046d0.  call temp:= `add`(v0, v1) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4046d6.  v0:= `@@org.c.a.l.a` @type ^`java.util.Set` @kind object;
  #L4046da.  call temp:= `l`() @signature `Lorg/c/a/h;.l:()Lorg/c/a/h;` @kind static;
  #L4046e0.  v1:= temp @kind object;
  #L4046e2.  call temp:= `add`(v0, v1) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4046e8.  return @kind void;
}
procedure `void` `<init>`(`org.c.a.l` v3 @kind this) @signature `Lorg/c/a/l;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L4046fc.  call temp:= `a`() @signature `Lorg/c/a/e;.a:()J` @kind static;
  #L404702.  v0:= temp @kind wide;
  #L404704.  call temp:= `O`() @signature `Lorg/c/a/b/u;.O:()Lorg/c/a/b/u;` @kind static;
  #L40470a.  v2:= temp @kind object;
  #L40470c.  call `<init>`(v3, v0, v2) @signature `Lorg/c/a/l;.<init>:(JLorg/c/a/a;)V` @kind direct;
  #L404712.  return @kind void;
}
procedure `void` `<init>`(`org.c.a.l` v2 @kind this, `long` v3 , `org.c.a.a` v5 @kind object) @signature `Lorg/c/a/l;.<init>:(JLorg/c/a/a;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L404724.  call `<init>`(v2) @signature `Lorg/c/a/a/f;.<init>:()V` @kind direct;
  #L40472a.  call temp:= `a`(v5) @signature `Lorg/c/a/e;.a:(Lorg/c/a/a;)Lorg/c/a/a;` @kind static;
  #L404730.  v5:= temp @kind object;
  #L404732.  call temp:= `a`(v5) @signature `Lorg/c/a/a;.a:()Lorg/c/a/f;` @kind virtual;
  #L404738.  v0:= temp @kind object;
  #L40473a.  v1:= `@@org.c.a.f.a` @type ^`org.c.a.f` @kind object;
  #L40473e.  call temp:= `a`(v0, v1, v3) @signature `Lorg/c/a/f;.a:(Lorg/c/a/f;J)J` @kind virtual;
  #L404744.  v3:= temp @kind wide;
  #L404746.  call temp:= `b`(v5) @signature `Lorg/c/a/a;.b:()Lorg/c/a/a;` @kind virtual;
  #L40474c.  v5:= temp @kind object;
  #L40474e.  call temp:= `u`(v5) @signature `Lorg/c/a/a;.u:()Lorg/c/a/c;` @kind virtual;
  #L404754.  v0:= temp @kind object;
  #L404756.  call temp:= `d`(v0, v3) @signature `Lorg/c/a/c;.d:(J)J` @kind virtual;
  #L40475c.  v3:= temp @kind wide;
  #L40475e.  v2.`org.c.a.l.b` @type ^`long` := v3 @kind wide;
  #L404762.  v2.`org.c.a.l.c` @type ^`org.c.a.a` := v5 @kind object;
  #L404766.  return @kind void;
}
procedure `java.lang.Object` `readResolve`(`org.c.a.l` v4 @kind this) @signature `Lorg/c/a/l;.readResolve:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L404524.  v0:= v4.`org.c.a.l.c` @type ^`org.c.a.a` @kind object;
  #L404528.  if v0 != 0 then goto L404544;
  #L40452c.  v0:= new `org.c.a.l`;
  #L404530.  v1:= v4.`org.c.a.l.b` @type ^`long` @kind wide;
  #L404534.  call temp:= `N`() @signature `Lorg/c/a/b/u;.N:()Lorg/c/a/b/u;` @kind static;
  #L40453a.  v3:= temp @kind object;
  #L40453c.  call `<init>`(v0, v1, v3) @signature `Lorg/c/a/l;.<init>:(JLorg/c/a/a;)V` @kind direct;
  #L404542.  return v0 @kind object;
  #L404544.  v0:= `@@org.c.a.f.a` @type ^`org.c.a.f` @kind object;
  #L404548.  v1:= v4.`org.c.a.l.c` @type ^`org.c.a.a` @kind object;
  #L40454c.  call temp:= `a`(v1) @signature `Lorg/c/a/a;.a:()Lorg/c/a/f;` @kind virtual;
  #L404552.  v1:= temp @kind object;
  #L404554.  call temp:= `equals`(v0, v1) @signature `Lorg/c/a/f;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L40455a.  v0:= temp;
  #L40455c.  if v0 != 0 then goto L40457c;
  #L404560.  v0:= new `org.c.a.l`;
  #L404564.  v1:= v4.`org.c.a.l.b` @type ^`long` @kind wide;
  #L404568.  v3:= v4.`org.c.a.l.c` @type ^`org.c.a.a` @kind object;
  #L40456c.  call temp:= `b`(v3) @signature `Lorg/c/a/a;.b:()Lorg/c/a/a;` @kind virtual;
  #L404572.  v3:= temp @kind object;
  #L404574.  call `<init>`(v0, v1, v3) @signature `Lorg/c/a/l;.<init>:(JLorg/c/a/a;)V` @kind direct;
  #L40457a.  return v0 @kind object;
  #L40457c.  return v4 @kind object;
}
procedure `int` `a`(`org.c.a.l` v1 @kind this) @signature `Lorg/c/a/l;.a:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4042d8.  v0:= 3I;
  #L4042da.  return v0;
}
procedure `int` `a`(`org.c.a.l` v3 @kind this, `int` v4 ) @signature `Lorg/c/a/l;.a:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4042ec.  goto L404388;
  #L4042f2.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L4042f6.  v1:= new `java.lang.StringBuilder`;
  #L4042fa.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L404300.  v2:= "Invalid index: " @kind object;
  #L404304.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40430a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L404310.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L404316.  v4:= temp @kind object;
  #L404318.  call `<init>`(v0, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40431e.  throw v0;
  #L404320.  call temp:= `c`(v3) @signature `Lorg/c/a/l;.c:()Lorg/c/a/a;` @kind virtual;
  #L404326.  v4:= temp @kind object;
  #L404328.  call temp:= `u`(v4) @signature `Lorg/c/a/a;.u:()Lorg/c/a/c;` @kind virtual;
  #L40432e.  v4:= temp @kind object;
  #L404330.  call temp:= `b`(v3) @signature `Lorg/c/a/l;.b:()J` @kind virtual;
  #L404336.  v0:= temp @kind wide;
  #L404338.  call temp:= `a`(v4, v0) @signature `Lorg/c/a/c;.a:(J)I` @kind virtual;
  #L40433e.  v4:= temp;
  #L404340.  return v4;
  #L404342.  call temp:= `c`(v3) @signature `Lorg/c/a/l;.c:()Lorg/c/a/a;` @kind virtual;
  #L404348.  v4:= temp @kind object;
  #L40434a.  call temp:= `C`(v4) @signature `Lorg/c/a/a;.C:()Lorg/c/a/c;` @kind virtual;
  #L404350.  v4:= temp @kind object;
  #L404352.  call temp:= `b`(v3) @signature `Lorg/c/a/l;.b:()J` @kind virtual;
  #L404358.  v0:= temp @kind wide;
  #L40435a.  call temp:= `a`(v4, v0) @signature `Lorg/c/a/c;.a:(J)I` @kind virtual;
  #L404360.  v4:= temp;
  #L404362.  return v4;
  #L404364.  call temp:= `c`(v3) @signature `Lorg/c/a/l;.c:()Lorg/c/a/a;` @kind virtual;
  #L40436a.  v4:= temp @kind object;
  #L40436c.  call temp:= `E`(v4) @signature `Lorg/c/a/a;.E:()Lorg/c/a/c;` @kind virtual;
  #L404372.  v4:= temp @kind object;
  #L404374.  call temp:= `b`(v3) @signature `Lorg/c/a/l;.b:()J` @kind virtual;
  #L40437a.  v0:= temp @kind wide;
  #L40437c.  call temp:= `a`(v4, v0) @signature `Lorg/c/a/c;.a:(J)I` @kind virtual;
  #L404382.  v4:= temp;
  #L404384.  return v4;
  #L404386.  
  #L404388.  switch v4
                  | 0 => goto L404364
                  | 1 => goto L404342
                  | 2 => goto L404320
                  | else => goto L4042f2;
}
procedure `int` `a`(`org.c.a.l` v3 @kind this, `org.c.a.d` v4 @kind object) @signature `Lorg/c/a/l;.a:(Lorg/c/a/d;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4043ac.  if v4 != 0 then goto L4043c0;
  #L4043b0.  v4:= new `java.lang.IllegalArgumentException`;
  #L4043b4.  v0:= "The DateTimeFieldType must not be null" @kind object;
  #L4043b8.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4043be.  throw v4;
  #L4043c0.  call temp:= `b`(v3, v4) @signature `Lorg/c/a/l;.b:(Lorg/c/a/d;)Z` @kind virtual;
  #L4043c6.  v0:= temp;
  #L4043c8.  if v0 != 0 then goto L404404;
  #L4043cc.  v0:= new `java.lang.IllegalArgumentException`;
  #L4043d0.  v1:= new `java.lang.StringBuilder`;
  #L4043d4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4043da.  v2:= "Field '" @kind object;
  #L4043de.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4043e4.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4043ea.  v4:= "' is not supported" @kind object;
  #L4043ee.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4043f4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4043fa.  v4:= temp @kind object;
  #L4043fc.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L404402.  throw v0;
  #L404404.  call temp:= `c`(v3) @signature `Lorg/c/a/l;.c:()Lorg/c/a/a;` @kind virtual;
  #L40440a.  v0:= temp @kind object;
  #L40440c.  call temp:= `a`(v4, v0) @signature `Lorg/c/a/d;.a:(Lorg/c/a/a;)Lorg/c/a/c;` @kind virtual;
  #L404412.  v4:= temp @kind object;
  #L404414.  call temp:= `b`(v3) @signature `Lorg/c/a/l;.b:()J` @kind virtual;
  #L40441a.  v0:= temp @kind wide;
  #L40441c.  call temp:= `a`(v4, v0) @signature `Lorg/c/a/c;.a:(J)I` @kind virtual;
  #L404422.  v4:= temp;
  #L404424.  return v4;
}
procedure `int` `a`(`org.c.a.l` v6 @kind this, `org.c.a.v` v7 @kind object) @signature `Lorg/c/a/l;.a:(Lorg/c/a/v;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L404438.  v0:= 0I;
  #L40443a.  if v6 != v7 then goto L404440;
  #L40443e.  return v0;
  #L404440.  v1:= instanceof @variable v7 @type ^`org.c.a.l` @kind boolean;
  #L404444.  if v1 == 0 then goto L40448c;
  #L404448.  v1:= v7 @kind object;
  #L40444a.  v1:= (`org.c.a.l`) v1 @kind object;
  #L40444e.  v2:= v6.`org.c.a.l.c` @type ^`org.c.a.a` @kind object;
  #L404452.  v3:= v1.`org.c.a.l.c` @type ^`org.c.a.a` @kind object;
  #L404456.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L40445c.  v2:= temp;
  #L40445e.  if v2 == 0 then goto L40448c;
  #L404462.  v2:= v6.`org.c.a.l.b` @type ^`long` @kind wide;
  #L404466.  v4:= v1.`org.c.a.l.b` @type ^`long` @kind wide;
  #L40446a.  v7:= lcmp(v2, v4);
  #L40446e.  if v7 >= 0 then goto L404476;
  #L404472.  v0:= -1I;
  #L404474.  goto L40448a;
  #L404476.  v2:= v6.`org.c.a.l.b` @type ^`long` @kind wide;
  #L40447a.  v4:= v1.`org.c.a.l.b` @type ^`long` @kind wide;
  #L40447e.  v7:= lcmp(v2, v4);
  #L404482.  if v7 != 0 then goto L404488;
  #L404486.  goto L40448a;
  #L404488.  v0:= 1I;
  #L40448a.  return v0;
  #L40448c.  call temp:= `a`(v6, v7) @signature `Lorg/c/a/a/f;.a:(Lorg/c/a/v;)I` @kind super;
  #L404492.  v7:= temp;
  #L404494.  return v7;
}
procedure `org.c.a.c` `a`(`org.c.a.l` v2 @kind this, `int` v3 , `org.c.a.a` v4 @kind object) @signature `Lorg/c/a/l;.a:(ILorg/c/a/a;)Lorg/c/a/c;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L4045e4.  goto L404638;
  #L4045ea.  v4:= new `java.lang.IndexOutOfBoundsException`;
  #L4045ee.  v0:= new `java.lang.StringBuilder`;
  #L4045f2.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4045f8.  v1:= "Invalid index: " @kind object;
  #L4045fc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L404602.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L404608.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L40460e.  v3:= temp @kind object;
  #L404610.  call `<init>`(v4, v3) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L404616.  throw v4;
  #L404618.  call temp:= `u`(v4) @signature `Lorg/c/a/a;.u:()Lorg/c/a/c;` @kind virtual;
  #L40461e.  v3:= temp @kind object;
  #L404620.  return v3 @kind object;
  #L404622.  call temp:= `C`(v4) @signature `Lorg/c/a/a;.C:()Lorg/c/a/c;` @kind virtual;
  #L404628.  v3:= temp @kind object;
  #L40462a.  return v3 @kind object;
  #L40462c.  call temp:= `E`(v4) @signature `Lorg/c/a/a;.E:()Lorg/c/a/c;` @kind virtual;
  #L404632.  v3:= temp @kind object;
  #L404634.  return v3 @kind object;
  #L404636.  
  #L404638.  switch v3
                  | 0 => goto L40462c
                  | 1 => goto L404622
                  | 2 => goto L404618
                  | else => goto L4045ea;
}
procedure `long` `b`(`org.c.a.l` v2 @kind this) @signature `Lorg/c/a/l;.b:()J` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L4045b4.  v0:= v2.`org.c.a.l.b` @type ^`long` @kind wide;
  #L4045b8.  return v0 @kind wide;
}
procedure `boolean` `b`(`org.c.a.l` v6 @kind this, `org.c.a.d` v7 @kind object) @signature `Lorg/c/a/l;.b:(Lorg/c/a/d;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4041f4.  v0:= 0I;
  #L4041f6.  if v7 != 0 then goto L4041fc;
  #L4041fa.  return v0;
  #L4041fc.  call temp:= `y`(v7) @signature `Lorg/c/a/d;.y:()Lorg/c/a/h;` @kind virtual;
  #L404202.  v1:= temp @kind object;
  #L404204.  v2:= `@@org.c.a.l.a` @type ^`java.util.Set` @kind object;
  #L404208.  call temp:= `contains`(v2, v1) @signature `Ljava/util/Set;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L40420e.  v2:= temp;
  #L404210.  if v2 != 0 then goto L404250;
  #L404214.  call temp:= `c`(v6) @signature `Lorg/c/a/l;.c:()Lorg/c/a/a;` @kind virtual;
  #L40421a.  v2:= temp @kind object;
  #L40421c.  call temp:= `a`(v1, v2) @signature `Lorg/c/a/h;.a:(Lorg/c/a/a;)Lorg/c/a/g;` @kind virtual;
  #L404222.  v1:= temp @kind object;
  #L404224.  call temp:= `d`(v1) @signature `Lorg/c/a/g;.d:()J` @kind virtual;
  #L40422a.  v1:= temp @kind wide;
  #L40422c.  call temp:= `c`(v6) @signature `Lorg/c/a/l;.c:()Lorg/c/a/a;` @kind virtual;
  #L404232.  v3:= temp @kind object;
  #L404234.  call temp:= `s`(v3) @signature `Lorg/c/a/a;.s:()Lorg/c/a/g;` @kind virtual;
  #L40423a.  v3:= temp @kind object;
  #L40423c.  call temp:= `d`(v3) @signature `Lorg/c/a/g;.d:()J` @kind virtual;
  #L404242.  v3:= temp @kind wide;
  #L404244.  v5:= lcmp(v1, v3);
  #L404248.  if v5 < 0 then goto L40424e;
  #L40424c.  goto L404250;
  #L40424e.  return v0;
  #L404250.  call temp:= `c`(v6) @signature `Lorg/c/a/l;.c:()Lorg/c/a/a;` @kind virtual;
  #L404256.  v0:= temp @kind object;
  #L404258.  call temp:= `a`(v7, v0) @signature `Lorg/c/a/d;.a:(Lorg/c/a/a;)Lorg/c/a/c;` @kind virtual;
  #L40425e.  v7:= temp @kind object;
  #L404260.  call temp:= `c`(v7) @signature `Lorg/c/a/c;.c:()Z` @kind virtual;
  #L404266.  v7:= temp;
  #L404268.  return v7;
}
procedure `org.c.a.a` `c`(`org.c.a.l` v1 @kind this) @signature `Lorg/c/a/l;.c:()Lorg/c/a/a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4045cc.  v0:= v1.`org.c.a.l.c` @type ^`org.c.a.a` @kind object;
  #L4045d0.  return v0 @kind object;
}
procedure `int` `compareTo`(`org.c.a.l` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lorg/c/a/l;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4044a8.  v1:= (`org.c.a.v`) v1 @kind object;
  #L4044ac.  call temp:= `a`(v0, v1) @signature `Lorg/c/a/l;.a:(Lorg/c/a/v;)I` @kind virtual;
  #L4044b2.  v1:= temp;
  #L4044b4.  return v1;
}
procedure `int` `d`(`org.c.a.l` v3 @kind this) @signature `Lorg/c/a/l;.d:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4044c8.  call temp:= `c`(v3) @signature `Lorg/c/a/l;.c:()Lorg/c/a/a;` @kind virtual;
  #L4044ce.  v0:= temp @kind object;
  #L4044d0.  call temp:= `E`(v0) @signature `Lorg/c/a/a;.E:()Lorg/c/a/c;` @kind virtual;
  #L4044d6.  v0:= temp @kind object;
  #L4044d8.  call temp:= `b`(v3) @signature `Lorg/c/a/l;.b:()J` @kind virtual;
  #L4044de.  v1:= temp @kind wide;
  #L4044e0.  call temp:= `a`(v0, v1) @signature `Lorg/c/a/c;.a:(J)I` @kind virtual;
  #L4044e6.  v0:= temp;
  #L4044e8.  return v0;
}
procedure `boolean` `equals`(`org.c.a.l` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lorg/c/a/l;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L40427c.  v0:= 1I;
  #L40427e.  if v6 != v7 then goto L404284;
  #L404282.  return v0;
  #L404284.  v1:= instanceof @variable v7 @type ^`org.c.a.l` @kind boolean;
  #L404288.  if v1 == 0 then goto L4042bc;
  #L40428c.  v1:= v7 @kind object;
  #L40428e.  v1:= (`org.c.a.l`) v1 @kind object;
  #L404292.  v2:= v6.`org.c.a.l.c` @type ^`org.c.a.a` @kind object;
  #L404296.  v3:= v1.`org.c.a.l.c` @type ^`org.c.a.a` @kind object;
  #L40429a.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4042a0.  v2:= temp;
  #L4042a2.  if v2 == 0 then goto L4042bc;
  #L4042a6.  v2:= v6.`org.c.a.l.b` @type ^`long` @kind wide;
  #L4042aa.  v4:= v1.`org.c.a.l.b` @type ^`long` @kind wide;
  #L4042ae.  v7:= lcmp(v2, v4);
  #L4042b2.  if v7 != 0 then goto L4042b8;
  #L4042b6.  goto L4042ba;
  #L4042b8.  v0:= 0I;
  #L4042ba.  return v0;
  #L4042bc.  call temp:= `equals`(v6, v7) @signature `Lorg/c/a/a/f;.equals:(Ljava/lang/Object;)Z` @kind super;
  #L4042c2.  v7:= temp;
  #L4042c4.  return v7;
}
procedure `int` `hashCode`(`org.c.a.l` v1 @kind this) @signature `Lorg/c/a/l;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4044fc.  v0:= v1.`org.c.a.l.d` @type ^`int`;
  #L404500.  if v0 != 0 then goto L404510;
  #L404504.  call temp:= `hashCode`(v1) @signature `Lorg/c/a/a/f;.hashCode:()I` @kind super;
  #L40450a.  v0:= temp;
  #L40450c.  v1.`org.c.a.l.d` @type ^`int` := v0;
  #L404510.  return v0;
}
procedure `java.lang.String` `toString`(`org.c.a.l` v1 @kind this) @signature `Lorg/c/a/l;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L404590.  call temp:= `b`() @signature `Lorg/c/a/e/j;.b:()Lorg/c/a/e/b;` @kind static;
  #L404596.  v0:= temp @kind object;
  #L404598.  call temp:= `a`(v0, v1) @signature `Lorg/c/a/e/b;.a:(Lorg/c/a/v;)Ljava/lang/String;` @kind virtual;
  #L40459e.  v0:= temp @kind object;
  #L4045a0.  return v0 @kind object;
}
