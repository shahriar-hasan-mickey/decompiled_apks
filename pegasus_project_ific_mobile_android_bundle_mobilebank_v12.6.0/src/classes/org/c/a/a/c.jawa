record `org.c.a.a.c` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.lang.Comparable` @kind interface, `org.c.a.v` @kind interface {
}
procedure `void` `<init>`(`org.c.a.a.c` v0 @kind this) @signature `Lorg/c/a/a/c;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L3eb658.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3eb65e.  return @kind void;
}
procedure `int` `a`(`org.c.a.a.c` v0 @kind this, `org.c.a.d` v1 @kind object) @signature `Lorg/c/a/a/c;.a:(Lorg/c/a/d;)I` @AccessFlag PUBLIC {
    temp;

  #L3eb43c.  call temp:= `d`(v0, v1) @signature `Lorg/c/a/a/c;.d:(Lorg/c/a/d;)I` @kind virtual;
  #L3eb442.  v1:= temp;
  #L3eb444.  call temp:= `a`(v0, v1) @signature `Lorg/c/a/a/c;.a:(I)I` @kind virtual;
  #L3eb44a.  v1:= temp;
  #L3eb44c.  return v1;
}
procedure `int` `a`(`org.c.a.a.c` v5 @kind this, `org.c.a.v` v6 @kind object) @signature `Lorg/c/a/a/c;.a:(Lorg/c/a/v;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3eb460.  v0:= 0I;
  #L3eb462.  if v5 != v6 then goto L3eb468;
  #L3eb466.  return v0;
  #L3eb468.  call temp:= `a`(v5) @signature `Lorg/c/a/a/c;.a:()I` @kind virtual;
  #L3eb46e.  v1:= temp;
  #L3eb470.  call temp:= `a`(v6) @signature `Lorg/c/a/v;.a:()I` @kind interface;
  #L3eb476.  v2:= temp;
  #L3eb478.  if v1 == v2 then goto L3eb48c;
  #L3eb47c.  v6:= new `java.lang.ClassCastException`;
  #L3eb480.  v0:= "ReadablePartial objects must have matching field types" @kind object;
  #L3eb484.  call `<init>`(v6, v0) @signature `Ljava/lang/ClassCastException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3eb48a.  throw v6;
  #L3eb48c.  call temp:= `a`(v5) @signature `Lorg/c/a/a/c;.a:()I` @kind virtual;
  #L3eb492.  v1:= temp;
  #L3eb494.  v2:= 0I;
  #L3eb496.  if v2 >= v1 then goto L3eb4c4;
  #L3eb49a.  call temp:= `b`(v5, v2) @signature `Lorg/c/a/a/c;.b:(I)Lorg/c/a/d;` @kind virtual;
  #L3eb4a0.  v3:= temp @kind object;
  #L3eb4a2.  call temp:= `b`(v6, v2) @signature `Lorg/c/a/v;.b:(I)Lorg/c/a/d;` @kind interface;
  #L3eb4a8.  v4:= temp @kind object;
  #L3eb4aa.  if v3 == v4 then goto L3eb4be;
  #L3eb4ae.  v6:= new `java.lang.ClassCastException`;
  #L3eb4b2.  v0:= "ReadablePartial objects must have matching field types" @kind object;
  #L3eb4b6.  call `<init>`(v6, v0) @signature `Ljava/lang/ClassCastException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3eb4bc.  throw v6;
  #L3eb4be.  v2:= v2 + 1;
  #L3eb4c2.  goto L3eb496;
  #L3eb4c4.  call temp:= `a`(v5) @signature `Lorg/c/a/a/c;.a:()I` @kind virtual;
  #L3eb4ca.  v1:= temp;
  #L3eb4cc.  v2:= 0I;
  #L3eb4ce.  if v2 >= v1 then goto L3eb508;
  #L3eb4d2.  call temp:= `a`(v5, v2) @signature `Lorg/c/a/a/c;.a:(I)I` @kind virtual;
  #L3eb4d8.  v3:= temp;
  #L3eb4da.  call temp:= `a`(v6, v2) @signature `Lorg/c/a/v;.a:(I)I` @kind interface;
  #L3eb4e0.  v4:= temp;
  #L3eb4e2.  if v3 <= v4 then goto L3eb4ea;
  #L3eb4e6.  v6:= 1I;
  #L3eb4e8.  return v6;
  #L3eb4ea.  call temp:= `a`(v5, v2) @signature `Lorg/c/a/a/c;.a:(I)I` @kind virtual;
  #L3eb4f0.  v3:= temp;
  #L3eb4f2.  call temp:= `a`(v6, v2) @signature `Lorg/c/a/v;.a:(I)I` @kind interface;
  #L3eb4f8.  v4:= temp;
  #L3eb4fa.  if v3 >= v4 then goto L3eb502;
  #L3eb4fe.  v6:= -1I;
  #L3eb500.  return v6;
  #L3eb502.  v2:= v2 + 1;
  #L3eb506.  goto L3eb4ce;
  #L3eb508.  return v0;
}
procedure `org.c.a.c` `a`(`int` v0 , `org.c.a.a` v1 @kind object) @signature `Lorg/c/a/a/c;.a:(ILorg/c/a/a;)Lorg/c/a/c;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `org.c.a.d` `b`(`org.c.a.a.c` v1 @kind this, `int` v2 ) @signature `Lorg/c/a/a/c;.b:(I)Lorg/c/a/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3eb62c.  call temp:= `c`(v1) @signature `Lorg/c/a/a/c;.c:()Lorg/c/a/a;` @kind virtual;
  #L3eb632.  v0:= temp @kind object;
  #L3eb634.  call temp:= `a`(v1, v2, v0) @signature `Lorg/c/a/a/c;.a:(ILorg/c/a/a;)Lorg/c/a/c;` @kind virtual;
  #L3eb63a.  v2:= temp @kind object;
  #L3eb63c.  call temp:= `a`(v2) @signature `Lorg/c/a/c;.a:()Lorg/c/a/d;` @kind virtual;
  #L3eb642.  v2:= temp @kind object;
  #L3eb644.  return v2 @kind object;
}
procedure `boolean` `b`(`org.c.a.a.c` v1 @kind this, `org.c.a.d` v2 @kind object) @signature `Lorg/c/a/a/c;.b:(Lorg/c/a/d;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3eb37c.  call temp:= `c`(v1, v2) @signature `Lorg/c/a/a/c;.c:(Lorg/c/a/d;)I` @kind virtual;
  #L3eb382.  v2:= temp;
  #L3eb384.  v0:= -1I;
  #L3eb386.  if v2 == v0 then goto L3eb38e;
  #L3eb38a.  v2:= 1I;
  #L3eb38c.  goto L3eb390;
  #L3eb38e.  v2:= 0I;
  #L3eb390.  return v2;
}
procedure `int` `c`(`org.c.a.a.c` v3 @kind this, `org.c.a.d` v4 @kind object) @signature `Lorg/c/a/a/c;.c:(Lorg/c/a/d;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3eb51c.  call temp:= `a`(v3) @signature `Lorg/c/a/a/c;.a:()I` @kind virtual;
  #L3eb522.  v0:= temp;
  #L3eb524.  v1:= 0I;
  #L3eb526.  if v1 >= v0 then goto L3eb53e;
  #L3eb52a.  call temp:= `b`(v3, v1) @signature `Lorg/c/a/a/c;.b:(I)Lorg/c/a/d;` @kind virtual;
  #L3eb530.  v2:= temp @kind object;
  #L3eb532.  if v2 != v4 then goto L3eb538;
  #L3eb536.  return v1;
  #L3eb538.  v1:= v1 + 1;
  #L3eb53c.  goto L3eb526;
  #L3eb53e.  v4:= -1I;
  #L3eb540.  return v4;
}
procedure `int` `compareTo`(`org.c.a.a.c` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lorg/c/a/a/c;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3eb554.  v1:= (`org.c.a.v`) v1 @kind object;
  #L3eb558.  call temp:= `a`(v0, v1) @signature `Lorg/c/a/a/c;.a:(Lorg/c/a/v;)I` @kind virtual;
  #L3eb55e.  v1:= temp;
  #L3eb560.  return v1;
}
procedure `int` `d`(`org.c.a.a.c` v3 @kind this, `org.c.a.d` v4 @kind object) @signature `Lorg/c/a/a/c;.d:(Lorg/c/a/d;)I` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L3eb574.  call temp:= `c`(v3, v4) @signature `Lorg/c/a/a/c;.c:(Lorg/c/a/d;)I` @kind virtual;
  #L3eb57a.  v0:= temp;
  #L3eb57c.  v1:= -1I;
  #L3eb57e.  if v0 != v1 then goto L3eb5ba;
  #L3eb582.  v0:= new `java.lang.IllegalArgumentException`;
  #L3eb586.  v1:= new `java.lang.StringBuilder`;
  #L3eb58a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3eb590.  v2:= "Field '" @kind object;
  #L3eb594.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3eb59a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3eb5a0.  v4:= "' is not supported" @kind object;
  #L3eb5a4.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3eb5aa.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3eb5b0.  v4:= temp @kind object;
  #L3eb5b2.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3eb5b8.  throw v0;
  #L3eb5ba.  return v0;
}
procedure `boolean` `equals`(`org.c.a.a.c` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lorg/c/a/a/c;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3eb3a4.  if v5 != v6 then goto L3eb3ac;
  #L3eb3a8.  v6:= 1I;
  #L3eb3aa.  return v6;
  #L3eb3ac.  v0:= instanceof @variable v6 @type ^`org.c.a.v` @kind boolean;
  #L3eb3b0.  v1:= 0I;
  #L3eb3b2.  if v0 != 0 then goto L3eb3b8;
  #L3eb3b6.  return v1;
  #L3eb3b8.  v6:= (`org.c.a.v`) v6 @kind object;
  #L3eb3bc.  call temp:= `a`(v5) @signature `Lorg/c/a/a/c;.a:()I` @kind virtual;
  #L3eb3c2.  v0:= temp;
  #L3eb3c4.  call temp:= `a`(v6) @signature `Lorg/c/a/v;.a:()I` @kind interface;
  #L3eb3ca.  v2:= temp;
  #L3eb3cc.  if v0 == v2 then goto L3eb3d2;
  #L3eb3d0.  return v1;
  #L3eb3d2.  call temp:= `a`(v5) @signature `Lorg/c/a/a/c;.a:()I` @kind virtual;
  #L3eb3d8.  v0:= temp;
  #L3eb3da.  v2:= 0I;
  #L3eb3dc.  if v2 >= v0 then goto L3eb412;
  #L3eb3e0.  call temp:= `a`(v5, v2) @signature `Lorg/c/a/a/c;.a:(I)I` @kind virtual;
  #L3eb3e6.  v3:= temp;
  #L3eb3e8.  call temp:= `a`(v6, v2) @signature `Lorg/c/a/v;.a:(I)I` @kind interface;
  #L3eb3ee.  v4:= temp;
  #L3eb3f0.  if v3 != v4 then goto L3eb410;
  #L3eb3f4.  call temp:= `b`(v5, v2) @signature `Lorg/c/a/a/c;.b:(I)Lorg/c/a/d;` @kind virtual;
  #L3eb3fa.  v3:= temp @kind object;
  #L3eb3fc.  call temp:= `b`(v6, v2) @signature `Lorg/c/a/v;.b:(I)Lorg/c/a/d;` @kind interface;
  #L3eb402.  v4:= temp @kind object;
  #L3eb404.  if v3 == v4 then goto L3eb40a;
  #L3eb408.  goto L3eb410;
  #L3eb40a.  v2:= v2 + 1;
  #L3eb40e.  goto L3eb3dc;
  #L3eb410.  return v1;
  #L3eb412.  call temp:= `c`(v5) @signature `Lorg/c/a/a/c;.c:()Lorg/c/a/a;` @kind virtual;
  #L3eb418.  v0:= temp @kind object;
  #L3eb41a.  call temp:= `c`(v6) @signature `Lorg/c/a/v;.c:()Lorg/c/a/a;` @kind interface;
  #L3eb420.  v6:= temp @kind object;
  #L3eb422.  call temp:= `a`(v0, v6) @signature `Lorg/c/a/d/h;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L3eb428.  v6:= temp;
  #L3eb42a.  return v6;
}
procedure `int` `hashCode`(`org.c.a.a.c` v4 @kind this) @signature `Lorg/c/a/a/c;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3eb5cc.  call temp:= `a`(v4) @signature `Lorg/c/a/a/c;.a:()I` @kind virtual;
  #L3eb5d2.  v0:= temp;
  #L3eb5d4.  v1:= 157I;
  #L3eb5d8.  v2:= 0I;
  #L3eb5da.  if v2 >= v0 then goto L3eb608;
  #L3eb5de.  v1:= v1 * 23;
  #L3eb5e2.  call temp:= `a`(v4, v2) @signature `Lorg/c/a/a/c;.a:(I)I` @kind virtual;
  #L3eb5e8.  v3:= temp;
  #L3eb5ea.  v1:= v1 + v3 @kind int;
  #L3eb5ec.  v1:= v1 * 23;
  #L3eb5f0.  call temp:= `b`(v4, v2) @signature `Lorg/c/a/a/c;.b:(I)Lorg/c/a/d;` @kind virtual;
  #L3eb5f6.  v3:= temp @kind object;
  #L3eb5f8.  call temp:= `hashCode`(v3) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3eb5fe.  v3:= temp;
  #L3eb600.  v1:= v1 + v3 @kind int;
  #L3eb602.  v2:= v2 + 1;
  #L3eb606.  goto L3eb5da;
  #L3eb608.  call temp:= `c`(v4) @signature `Lorg/c/a/a/c;.c:()Lorg/c/a/a;` @kind virtual;
  #L3eb60e.  v0:= temp @kind object;
  #L3eb610.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3eb616.  v0:= temp;
  #L3eb618.  v1:= v1 + v0 @kind int;
  #L3eb61a.  return v1;
}
