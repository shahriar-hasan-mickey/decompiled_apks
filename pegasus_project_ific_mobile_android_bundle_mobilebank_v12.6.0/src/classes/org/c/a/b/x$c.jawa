record `org.c.a.b.x$c` @kind class @AccessFlag  extends `java.lang.IllegalArgumentException` @kind class {
  `org.c.a.b.x` `org.c.a.b.x$c.a` @AccessFlag FINAL_SYNTHETIC;
  `boolean` `org.c.a.b.x$c.b` @AccessFlag PRIVATE_FINAL;
}
global `long` `@@org.c.a.b.x$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.c.a.b.x$c` v0 @kind this, `org.c.a.b.x` v1 @kind object, `java.lang.String` v2 @kind object, `boolean` v3 ) @signature `Lorg/c/a/b/x$c;.<init>:(Lorg/c/a/b/x;Ljava/lang/String;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3f2e48.  v0.`org.c.a.b.x$c.a` @type ^`org.c.a.b.x` := v1 @kind object;
  #L3f2e4c.  call `<init>`(v0, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f2e52.  v0.`org.c.a.b.x$c.b` @type ^`boolean` := v3 @kind boolean;
  #L3f2e56.  return @kind void;
}
procedure `java.lang.String` `getMessage`(`org.c.a.b.x$c` v4 @kind this) @signature `Lorg/c/a/b/x$c;.getMessage:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f2d20.  v0:= new `java.lang.StringBuffer`;
  #L3f2d24.  v1:= 85I;
  #L3f2d28.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuffer;.<init>:(I)V` @kind direct;
  #L3f2d2e.  v1:= "The" @kind object;
  #L3f2d32.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuffer;.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;` @kind virtual;
  #L3f2d38.  call temp:= `getMessage`(v4) @signature `Ljava/lang/IllegalArgumentException;.getMessage:()Ljava/lang/String;` @kind super;
  #L3f2d3e.  v1:= temp @kind object;
  #L3f2d40.  if v1 == 0 then goto L3f2d54;
  #L3f2d44.  v2:= 32I;
  #L3f2d48.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuffer;.append:(C)Ljava/lang/StringBuffer;` @kind virtual;
  #L3f2d4e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuffer;.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;` @kind virtual;
  #L3f2d54.  v1:= " instant is " @kind object;
  #L3f2d58.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuffer;.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;` @kind virtual;
  #L3f2d5e.  call temp:= `c`() @signature `Lorg/c/a/e/j;.c:()Lorg/c/a/e/b;` @kind static;
  #L3f2d64.  v1:= temp @kind object;
  #L3f2d66.  v2:= v4.`org.c.a.b.x$c.a` @type ^`org.c.a.b.x` @kind object;
  #L3f2d6a.  call temp:= `L`(v2) @signature `Lorg/c/a/b/x;.L:()Lorg/c/a/a;` @kind virtual;
  #L3f2d70.  v2:= temp @kind object;
  #L3f2d72.  call temp:= `a`(v1, v2) @signature `Lorg/c/a/e/b;.a:(Lorg/c/a/a;)Lorg/c/a/e/b;` @kind virtual;
  #L3f2d78.  v1:= temp @kind object;
  #L3f2d7a.  v2:= v4.`org.c.a.b.x$c.b` @type ^`boolean` @kind boolean;
  #L3f2d7e.  if v2 == 0 then goto L3f2da8;
  #L3f2d82.  v2:= "below the supported minimum of " @kind object;
  #L3f2d86.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuffer;.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;` @kind virtual;
  #L3f2d8c.  v2:= v4.`org.c.a.b.x$c.a` @type ^`org.c.a.b.x` @kind object;
  #L3f2d90.  call temp:= `N`(v2) @signature `Lorg/c/a/b/x;.N:()Lorg/c/a/b;` @kind virtual;
  #L3f2d96.  v2:= temp @kind object;
  #L3f2d98.  call temp:= `c`(v2) @signature `Lorg/c/a/b;.c:()J` @kind virtual;
  #L3f2d9e.  v2:= temp @kind wide;
  #L3f2da0.  call `a`(v1, v0, v2) @signature `Lorg/c/a/e/b;.a:(Ljava/lang/StringBuffer;J)V` @kind virtual;
  #L3f2da6.  goto L3f2dcc;
  #L3f2da8.  v2:= "above the supported maximum of " @kind object;
  #L3f2dac.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuffer;.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;` @kind virtual;
  #L3f2db2.  v2:= v4.`org.c.a.b.x$c.a` @type ^`org.c.a.b.x` @kind object;
  #L3f2db6.  call temp:= `O`(v2) @signature `Lorg/c/a/b/x;.O:()Lorg/c/a/b;` @kind virtual;
  #L3f2dbc.  v2:= temp @kind object;
  #L3f2dbe.  call temp:= `c`(v2) @signature `Lorg/c/a/b;.c:()J` @kind virtual;
  #L3f2dc4.  v2:= temp @kind wide;
  #L3f2dc6.  call `a`(v1, v0, v2) @signature `Lorg/c/a/e/b;.a:(Ljava/lang/StringBuffer;J)V` @kind virtual;
  #L3f2dcc.  v1:= " (" @kind object;
  #L3f2dd0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuffer;.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;` @kind virtual;
  #L3f2dd6.  v1:= v4.`org.c.a.b.x$c.a` @type ^`org.c.a.b.x` @kind object;
  #L3f2dda.  call temp:= `L`(v1) @signature `Lorg/c/a/b/x;.L:()Lorg/c/a/a;` @kind virtual;
  #L3f2de0.  v1:= temp @kind object;
  #L3f2de2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuffer;.append:(Ljava/lang/Object;)Ljava/lang/StringBuffer;` @kind virtual;
  #L3f2de8.  v1:= 41I;
  #L3f2dec.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuffer;.append:(C)Ljava/lang/StringBuffer;` @kind virtual;
  #L3f2df2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuffer;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f2df8.  v0:= temp @kind object;
  #L3f2dfa.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`org.c.a.b.x$c` v2 @kind this) @signature `Lorg/c/a/b/x$c;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f2e0c.  v0:= new `java.lang.StringBuilder`;
  #L3f2e10.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f2e16.  v1:= "IllegalArgumentException: " @kind object;
  #L3f2e1a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f2e20.  call temp:= `getMessage`(v2) @signature `Lorg/c/a/b/x$c;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L3f2e26.  v1:= temp @kind object;
  #L3f2e28.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f2e2e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f2e34.  v0:= temp @kind object;
  #L3f2e36.  return v0 @kind object;
}
