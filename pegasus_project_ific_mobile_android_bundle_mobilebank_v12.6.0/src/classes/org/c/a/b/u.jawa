record `org.c.a.b.u` @kind class @AccessFlag PUBLIC_FINAL extends `org.c.a.b.a` @kind class {
}
global `org.c.a.b.u` `@@org.c.a.b.u.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.ConcurrentHashMap` `@@org.c.a.b.u.b` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@org.c.a.b.u.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/c/a/b/u;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3f2018.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L3f201c.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L3f2022.  `@@org.c.a.b.u.b` @type ^`java.util.concurrent.ConcurrentHashMap` := v0 @kind object;
  #L3f2026.  v0:= new `org.c.a.b.u`;
  #L3f202a.  call temp:= `Z`() @signature `Lorg/c/a/b/t;.Z:()Lorg/c/a/b/t;` @kind static;
  #L3f2030.  v1:= temp @kind object;
  #L3f2032.  call `<init>`(v0, v1) @signature `Lorg/c/a/b/u;.<init>:(Lorg/c/a/a;)V` @kind direct;
  #L3f2038.  `@@org.c.a.b.u.a` @type ^`org.c.a.b.u` := v0 @kind object;
  #L3f203c.  v0:= `@@org.c.a.b.u.b` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L3f2040.  v1:= `@@org.c.a.f.a` @type ^`org.c.a.f` @kind object;
  #L3f2044.  v2:= `@@org.c.a.b.u.a` @type ^`org.c.a.b.u` @kind object;
  #L3f2048.  call temp:= `put`(v0, v1, v2) @signature `Ljava/util/concurrent/ConcurrentHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f204e.  return @kind void;
}
procedure `void` `<init>`(`org.c.a.b.u` v1 @kind this, `org.c.a.a` v2 @kind object) @signature `Lorg/c/a/b/u;.<init>:(Lorg/c/a/a;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L3f2060.  v0:= 0I;
  #L3f2062.  call `<init>`(v1, v2, v0) @signature `Lorg/c/a/b/a;.<init>:(Lorg/c/a/a;Ljava/lang/Object;)V` @kind direct;
  #L3f2068.  return @kind void;
}
procedure `org.c.a.b.u` `N`() @signature `Lorg/c/a/b/u;.N:()Lorg/c/a/b/u;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f1f7c.  v0:= `@@org.c.a.b.u.a` @type ^`org.c.a.b.u` @kind object;
  #L3f1f80.  return v0 @kind object;
}
procedure `org.c.a.b.u` `O`() @signature `Lorg/c/a/b/u;.O:()Lorg/c/a/b/u;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f1f94.  call temp:= `a`() @signature `Lorg/c/a/f;.a:()Lorg/c/a/f;` @kind static;
  #L3f1f9a.  v0:= temp @kind object;
  #L3f1f9c.  call temp:= `b`(v0) @signature `Lorg/c/a/b/u;.b:(Lorg/c/a/f;)Lorg/c/a/b/u;` @kind static;
  #L3f1fa2.  v0:= temp @kind object;
  #L3f1fa4.  return v0 @kind object;
}
procedure `org.c.a.b.u` `b`(`org.c.a.f` v2 @kind object) @signature `Lorg/c/a/b/u;.b:(Lorg/c/a/f;)Lorg/c/a/b/u;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3f1fb8.  if v2 != 0 then goto L3f1fc4;
  #L3f1fbc.  call temp:= `a`() @signature `Lorg/c/a/f;.a:()Lorg/c/a/f;` @kind static;
  #L3f1fc2.  v2:= temp @kind object;
  #L3f1fc4.  v0:= `@@org.c.a.b.u.b` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L3f1fc8.  call temp:= `get`(v0, v2) @signature `Ljava/util/concurrent/ConcurrentHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f1fce.  v0:= temp @kind object;
  #L3f1fd0.  v0:= (`org.c.a.b.u`) v0 @kind object;
  #L3f1fd4.  if v0 != 0 then goto L3f2004;
  #L3f1fd8.  v0:= new `org.c.a.b.u`;
  #L3f1fdc.  v1:= `@@org.c.a.b.u.a` @type ^`org.c.a.b.u` @kind object;
  #L3f1fe0.  call temp:= `a`(v1, v2) @signature `Lorg/c/a/b/y;.a:(Lorg/c/a/a;Lorg/c/a/f;)Lorg/c/a/b/y;` @kind static;
  #L3f1fe6.  v1:= temp @kind object;
  #L3f1fe8.  call `<init>`(v0, v1) @signature `Lorg/c/a/b/u;.<init>:(Lorg/c/a/a;)V` @kind direct;
  #L3f1fee.  v1:= `@@org.c.a.b.u.b` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L3f1ff2.  call temp:= `putIfAbsent`(v1, v2, v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3f1ff8.  v2:= temp @kind object;
  #L3f1ffa.  v2:= (`org.c.a.b.u`) v2 @kind object;
  #L3f1ffe.  if v2 == 0 then goto L3f2004;
  #L3f2002.  v0:= v2 @kind object;
  #L3f2004.  return v0 @kind object;
}
procedure `java.lang.Object` `writeReplace`(`org.c.a.b.u` v2 @kind this) @signature `Lorg/c/a/b/u;.writeReplace:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3f1eb0.  v0:= new `org.c.a.b.u$a`;
  #L3f1eb4.  call temp:= `a`(v2) @signature `Lorg/c/a/b/u;.a:()Lorg/c/a/f;` @kind virtual;
  #L3f1eba.  v1:= temp @kind object;
  #L3f1ebc.  call `<init>`(v0, v1) @signature `Lorg/c/a/b/u$a;.<init>:(Lorg/c/a/f;)V` @kind direct;
  #L3f1ec2.  return v0 @kind object;
}
procedure `org.c.a.a` `a`(`org.c.a.b.u` v1 @kind this, `org.c.a.f` v2 @kind object) @signature `Lorg/c/a/b/u;.a:(Lorg/c/a/f;)Lorg/c/a/a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f1f30.  if v2 != 0 then goto L3f1f3c;
  #L3f1f34.  call temp:= `a`() @signature `Lorg/c/a/f;.a:()Lorg/c/a/f;` @kind static;
  #L3f1f3a.  v2:= temp @kind object;
  #L3f1f3c.  call temp:= `a`(v1) @signature `Lorg/c/a/b/u;.a:()Lorg/c/a/f;` @kind virtual;
  #L3f1f42.  v0:= temp @kind object;
  #L3f1f44.  if v2 != v0 then goto L3f1f4a;
  #L3f1f48.  return v1 @kind object;
  #L3f1f4a.  call temp:= `b`(v2) @signature `Lorg/c/a/b/u;.b:(Lorg/c/a/f;)Lorg/c/a/b/u;` @kind static;
  #L3f1f50.  v2:= temp @kind object;
  #L3f1f52.  return v2 @kind object;
}
procedure `void` `a`(`org.c.a.b.u` v4 @kind this, `org.c.a.b.a$a` v5 @kind object) @signature `Lorg/c/a/b/u;.a:(Lorg/c/a/b/a$a;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f207c.  call temp:= `L`(v4) @signature `Lorg/c/a/b/u;.L:()Lorg/c/a/a;` @kind virtual;
  #L3f2082.  v0:= temp @kind object;
  #L3f2084.  call temp:= `a`(v0) @signature `Lorg/c/a/a;.a:()Lorg/c/a/f;` @kind virtual;
  #L3f208a.  v0:= temp @kind object;
  #L3f208c.  v1:= `@@org.c.a.f.a` @type ^`org.c.a.f` @kind object;
  #L3f2090.  if v0 != v1 then goto L3f2102;
  #L3f2094.  v0:= new `org.c.a.d.g`;
  #L3f2098.  v1:= `@@org.c.a.b.v.a` @type ^`org.c.a.c` @kind object;
  #L3f209c.  call temp:= `v`() @signature `Lorg/c/a/d;.v:()Lorg/c/a/d;` @kind static;
  #L3f20a2.  v2:= temp @kind object;
  #L3f20a4.  v3:= 100I;
  #L3f20a8.  call `<init>`(v0, v1, v2, v3) @signature `Lorg/c/a/d/g;.<init>:(Lorg/c/a/c;Lorg/c/a/d;I)V` @kind direct;
  #L3f20ae.  v5.`org.c.a.b.a$a.H` @type ^`org.c.a.c` := v0 @kind object;
  #L3f20b2.  v0:= v5.`org.c.a.b.a$a.H` @type ^`org.c.a.c` @kind object;
  #L3f20b6.  call temp:= `e`(v0) @signature `Lorg/c/a/c;.e:()Lorg/c/a/g;` @kind virtual;
  #L3f20bc.  v0:= temp @kind object;
  #L3f20be.  v5.`org.c.a.b.a$a.k` @type ^`org.c.a.g` := v0 @kind object;
  #L3f20c2.  v0:= new `org.c.a.d.o`;
  #L3f20c6.  v1:= v5.`org.c.a.b.a$a.H` @type ^`org.c.a.c` @kind object;
  #L3f20ca.  v1:= (`org.c.a.d.g`) v1 @kind object;
  #L3f20ce.  call temp:= `u`() @signature `Lorg/c/a/d;.u:()Lorg/c/a/d;` @kind static;
  #L3f20d4.  v2:= temp @kind object;
  #L3f20d6.  call `<init>`(v0, v1, v2) @signature `Lorg/c/a/d/o;.<init>:(Lorg/c/a/d/g;Lorg/c/a/d;)V` @kind direct;
  #L3f20dc.  v5.`org.c.a.b.a$a.G` @type ^`org.c.a.c` := v0 @kind object;
  #L3f20e0.  v0:= new `org.c.a.d.o`;
  #L3f20e4.  v1:= v5.`org.c.a.b.a$a.H` @type ^`org.c.a.c` @kind object;
  #L3f20e8.  v1:= (`org.c.a.d.g`) v1 @kind object;
  #L3f20ec.  v2:= v5.`org.c.a.b.a$a.h` @type ^`org.c.a.g` @kind object;
  #L3f20f0.  call temp:= `q`() @signature `Lorg/c/a/d;.q:()Lorg/c/a/d;` @kind static;
  #L3f20f6.  v3:= temp @kind object;
  #L3f20f8.  call `<init>`(v0, v1, v2, v3) @signature `Lorg/c/a/d/o;.<init>:(Lorg/c/a/d/g;Lorg/c/a/g;Lorg/c/a/d;)V` @kind direct;
  #L3f20fe.  v5.`org.c.a.b.a$a.C` @type ^`org.c.a.c` := v0 @kind object;
  #L3f2102.  return @kind void;
}
procedure `org.c.a.a` `b`(`org.c.a.b.u` v1 @kind this) @signature `Lorg/c/a/b/u;.b:()Lorg/c/a/a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f1f64.  v0:= `@@org.c.a.b.u.a` @type ^`org.c.a.b.u` @kind object;
  #L3f1f68.  return v0 @kind object;
}
procedure `boolean` `equals`(`org.c.a.b.u` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lorg/c/a/b/u;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f1e38.  if v1 != v2 then goto L3f1e40;
  #L3f1e3c.  v2:= 1I;
  #L3f1e3e.  return v2;
  #L3f1e40.  v0:= instanceof @variable v2 @type ^`org.c.a.b.u` @kind boolean;
  #L3f1e44.  if v0 == 0 then goto L3f1e66;
  #L3f1e48.  v2:= (`org.c.a.b.u`) v2 @kind object;
  #L3f1e4c.  call temp:= `a`(v1) @signature `Lorg/c/a/b/u;.a:()Lorg/c/a/f;` @kind virtual;
  #L3f1e52.  v0:= temp @kind object;
  #L3f1e54.  call temp:= `a`(v2) @signature `Lorg/c/a/b/u;.a:()Lorg/c/a/f;` @kind virtual;
  #L3f1e5a.  v2:= temp @kind object;
  #L3f1e5c.  call temp:= `equals`(v0, v2) @signature `Lorg/c/a/f;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f1e62.  v2:= temp;
  #L3f1e64.  return v2;
  #L3f1e66.  v2:= 0I;
  #L3f1e68.  return v2;
}
procedure `int` `hashCode`(`org.c.a.b.u` v2 @kind this) @signature `Lorg/c/a/b/u;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f1e7c.  v0:= "ISO" @kind object;
  #L3f1e80.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L3f1e86.  v0:= temp;
  #L3f1e88.  v0:= v0 * 11;
  #L3f1e8c.  call temp:= `a`(v2) @signature `Lorg/c/a/b/u;.a:()Lorg/c/a/f;` @kind virtual;
  #L3f1e92.  v1:= temp @kind object;
  #L3f1e94.  call temp:= `hashCode`(v1) @signature `Lorg/c/a/f;.hashCode:()I` @kind virtual;
  #L3f1e9a.  v1:= temp;
  #L3f1e9c.  v0:= v0 + v1 @kind int;
  #L3f1e9e.  return v0;
}
procedure `java.lang.String` `toString`(`org.c.a.b.u` v3 @kind this) @signature `Lorg/c/a/b/u;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f1ed4.  v0:= "ISOChronology" @kind object;
  #L3f1ed8.  call temp:= `a`(v3) @signature `Lorg/c/a/b/u;.a:()Lorg/c/a/f;` @kind virtual;
  #L3f1ede.  v1:= temp @kind object;
  #L3f1ee0.  if v1 == 0 then goto L3f1f1e;
  #L3f1ee4.  v2:= new `java.lang.StringBuilder`;
  #L3f1ee8.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f1eee.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f1ef4.  v0:= 91I;
  #L3f1ef8.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f1efe.  call temp:= `e`(v1) @signature `Lorg/c/a/f;.e:()Ljava/lang/String;` @kind virtual;
  #L3f1f04.  v0:= temp @kind object;
  #L3f1f06.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f1f0c.  v0:= 93I;
  #L3f1f10.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f1f16.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f1f1c.  v0:= temp @kind object;
  #L3f1f1e.  return v0 @kind object;
}
