record `org.c.a.b.y$b` @kind class @AccessFlag  extends `org.c.a.d.c` @kind class {
  `org.c.a.g` `org.c.a.b.y$b.a` @AccessFlag FINAL;
  `boolean` `org.c.a.b.y$b.b` @AccessFlag FINAL;
  `org.c.a.f` `org.c.a.b.y$b.c` @AccessFlag FINAL;
}
global `long` `@@org.c.a.b.y$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.c.a.b.y$b` v1 @kind this, `org.c.a.g` v2 @kind object, `org.c.a.f` v3 @kind object) @signature `Lorg/c/a/b/y$b;.<init>:(Lorg/c/a/g;Lorg/c/a/f;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3f3e88.  call temp:= `a`(v2) @signature `Lorg/c/a/g;.a:()Lorg/c/a/h;` @kind virtual;
  #L3f3e8e.  v0:= temp @kind object;
  #L3f3e90.  call `<init>`(v1, v0) @signature `Lorg/c/a/d/c;.<init>:(Lorg/c/a/h;)V` @kind direct;
  #L3f3e96.  call temp:= `b`(v2) @signature `Lorg/c/a/g;.b:()Z` @kind virtual;
  #L3f3e9c.  v0:= temp;
  #L3f3e9e.  if v0 != 0 then goto L3f3eae;
  #L3f3ea2.  v2:= new `java.lang.IllegalArgumentException`;
  #L3f3ea6.  call `<init>`(v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L3f3eac.  throw v2;
  #L3f3eae.  v1.`org.c.a.b.y$b.a` @type ^`org.c.a.g` := v2 @kind object;
  #L3f3eb2.  call temp:= `a`(v2) @signature `Lorg/c/a/b/y;.a:(Lorg/c/a/g;)Z` @kind static;
  #L3f3eb8.  v2:= temp;
  #L3f3eba.  v1.`org.c.a.b.y$b.b` @type ^`boolean` := v2 @kind boolean;
  #L3f3ebe.  v1.`org.c.a.b.y$b.c` @type ^`org.c.a.f` := v3 @kind object;
  #L3f3ec2.  return @kind void;
}
procedure `int` `a`(`org.c.a.b.y$b` v8 @kind this, `long` v9 ) @signature `Lorg/c/a/b/y$b;.a:(J)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3f3c84.  v0:= v8.`org.c.a.b.y$b.c` @type ^`org.c.a.f` @kind object;
  #L3f3c88.  call temp:= `b`(v0, v9) @signature `Lorg/c/a/f;.b:(J)I` @kind virtual;
  #L3f3c8e.  v0:= temp;
  #L3f3c90.  v1:= (`long`) v0 @kind i2l;
  #L3f3c92.  v3:= v9 + v1 @kind long;
  #L3f3c96.  v5:= v9 ^~ v3 @kind long;
  #L3f3c9a.  v3:= 0L;
  #L3f3c9e.  v7:= lcmp(v5, v3);
  #L3f3ca2.  if v7 >= 0 then goto L3f3cc2;
  #L3f3ca6.  v5:= v9 ^~ v1 @kind long;
  #L3f3caa.  v9:= lcmp(v5, v3);
  #L3f3cae.  if v9 < 0 then goto L3f3cc2;
  #L3f3cb2.  v9:= new `java.lang.ArithmeticException`;
  #L3f3cb6.  v10:= "Adding time zone offset caused overflow" @kind object;
  #L3f3cba.  call `<init>`(v9, v10) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f3cc0.  throw v9;
  #L3f3cc2.  return v0;
}
procedure `int` `b`(`org.c.a.b.y$b` v8 @kind this, `long` v9 ) @signature `Lorg/c/a/b/y$b;.b:(J)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3f3cd4.  v0:= v8.`org.c.a.b.y$b.c` @type ^`org.c.a.f` @kind object;
  #L3f3cd8.  call temp:= `e`(v0, v9) @signature `Lorg/c/a/f;.e:(J)I` @kind virtual;
  #L3f3cde.  v0:= temp;
  #L3f3ce0.  v1:= (`long`) v0 @kind i2l;
  #L3f3ce2.  v3:= v9 - v1 @kind long;
  #L3f3ce6.  v5:= v9 ^~ v3 @kind long;
  #L3f3cea.  v3:= 0L;
  #L3f3cee.  v7:= lcmp(v5, v3);
  #L3f3cf2.  if v7 >= 0 then goto L3f3d12;
  #L3f3cf6.  v5:= v9 ^~ v1 @kind long;
  #L3f3cfa.  v9:= lcmp(v5, v3);
  #L3f3cfe.  if v9 >= 0 then goto L3f3d12;
  #L3f3d02.  v9:= new `java.lang.ArithmeticException`;
  #L3f3d06.  v10:= "Subtracting time zone offset caused overflow" @kind object;
  #L3f3d0a.  call `<init>`(v9, v10) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f3d10.  throw v9;
  #L3f3d12.  return v0;
}
procedure `long` `a`(`org.c.a.b.y$b` v6 @kind this, `long` v7 , `int` v9 ) @signature `Lorg/c/a/b/y$b;.a:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f3d98.  call temp:= `a`(v6, v7) @signature `Lorg/c/a/b/y$b;.a:(J)I` @kind direct;
  #L3f3d9e.  v0:= temp;
  #L3f3da0.  v1:= v6.`org.c.a.b.y$b.a` @type ^`org.c.a.g` @kind object;
  #L3f3da4.  v2:= (`long`) v0 @kind i2l;
  #L3f3da6.  v4:= v7 + v2 @kind long;
  #L3f3daa.  call temp:= `a`(v1, v4, v9) @signature `Lorg/c/a/g;.a:(JI)J` @kind virtual;
  #L3f3db0.  v7:= temp @kind wide;
  #L3f3db2.  v9:= v6.`org.c.a.b.y$b.b` @type ^`boolean` @kind boolean;
  #L3f3db6.  if v9 == 0 then goto L3f3dbc;
  #L3f3dba.  goto L3f3dc4;
  #L3f3dbc.  call temp:= `b`(v6, v7) @signature `Lorg/c/a/b/y$b;.b:(J)I` @kind direct;
  #L3f3dc2.  v0:= temp;
  #L3f3dc4.  v0:= (`long`) v0 @kind i2l;
  #L3f3dc6.  v2:= v7 - v0 @kind long;
  #L3f3dca.  return v2 @kind wide;
}
procedure `long` `a`(`org.c.a.b.y$b` v6 @kind this, `long` v7 , `long` v9 ) @signature `Lorg/c/a/b/y$b;.a:(JJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f3ddc.  call temp:= `a`(v6, v7) @signature `Lorg/c/a/b/y$b;.a:(J)I` @kind direct;
  #L3f3de2.  v0:= temp;
  #L3f3de4.  v1:= v6.`org.c.a.b.y$b.a` @type ^`org.c.a.g` @kind object;
  #L3f3de8.  v2:= (`long`) v0 @kind i2l;
  #L3f3dea.  v4:= v7 + v2 @kind long;
  #L3f3dee.  call temp:= `a`(v1, v4, v9) @signature `Lorg/c/a/g;.a:(JJ)J` @kind virtual;
  #L3f3df4.  v7:= temp @kind wide;
  #L3f3df6.  v9:= v6.`org.c.a.b.y$b.b` @type ^`boolean` @kind boolean;
  #L3f3dfa.  if v9 == 0 then goto L3f3e00;
  #L3f3dfe.  goto L3f3e08;
  #L3f3e00.  call temp:= `b`(v6, v7) @signature `Lorg/c/a/b/y$b;.b:(J)I` @kind direct;
  #L3f3e06.  v0:= temp;
  #L3f3e08.  v9:= (`long`) v0 @kind i2l;
  #L3f3e0a.  v0:= v7 - v9 @kind long;
  #L3f3e0e.  return v0 @kind wide;
}
procedure `int` `b`(`org.c.a.b.y$b` v6 @kind this, `long` v7 , `long` v9 ) @signature `Lorg/c/a/b/y$b;.b:(JJ)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f3d24.  call temp:= `a`(v6, v9) @signature `Lorg/c/a/b/y$b;.a:(J)I` @kind direct;
  #L3f3d2a.  v0:= temp;
  #L3f3d2c.  v1:= v6.`org.c.a.b.y$b.a` @type ^`org.c.a.g` @kind object;
  #L3f3d30.  v2:= v6.`org.c.a.b.y$b.b` @type ^`boolean` @kind boolean;
  #L3f3d34.  if v2 == 0 then goto L3f3d3c;
  #L3f3d38.  v2:= v0;
  #L3f3d3a.  goto L3f3d44;
  #L3f3d3c.  call temp:= `a`(v6, v7) @signature `Lorg/c/a/b/y$b;.a:(J)I` @kind direct;
  #L3f3d42.  v2:= temp;
  #L3f3d44.  v2:= (`long`) v2 @kind i2l;
  #L3f3d46.  v4:= v7 + v2 @kind long;
  #L3f3d4a.  v7:= (`long`) v0 @kind i2l;
  #L3f3d4c.  v2:= v9 + v7 @kind long;
  #L3f3d50.  call temp:= `b`(v1, v4, v2) @signature `Lorg/c/a/g;.b:(JJ)I` @kind virtual;
  #L3f3d56.  v7:= temp;
  #L3f3d58.  return v7;
}
procedure `long` `c`(`org.c.a.b.y$b` v6 @kind this, `long` v7 , `long` v9 ) @signature `Lorg/c/a/b/y$b;.c:(JJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f3e20.  call temp:= `a`(v6, v9) @signature `Lorg/c/a/b/y$b;.a:(J)I` @kind direct;
  #L3f3e26.  v0:= temp;
  #L3f3e28.  v1:= v6.`org.c.a.b.y$b.a` @type ^`org.c.a.g` @kind object;
  #L3f3e2c.  v2:= v6.`org.c.a.b.y$b.b` @type ^`boolean` @kind boolean;
  #L3f3e30.  if v2 == 0 then goto L3f3e38;
  #L3f3e34.  v2:= v0;
  #L3f3e36.  goto L3f3e40;
  #L3f3e38.  call temp:= `a`(v6, v7) @signature `Lorg/c/a/b/y$b;.a:(J)I` @kind direct;
  #L3f3e3e.  v2:= temp;
  #L3f3e40.  v2:= (`long`) v2 @kind i2l;
  #L3f3e42.  v4:= v7 + v2 @kind long;
  #L3f3e46.  v7:= (`long`) v0 @kind i2l;
  #L3f3e48.  v2:= v9 + v7 @kind long;
  #L3f3e4c.  call temp:= `c`(v1, v4, v2) @signature `Lorg/c/a/g;.c:(JJ)J` @kind virtual;
  #L3f3e52.  v7:= temp @kind wide;
  #L3f3e54.  return v7 @kind wide;
}
procedure `boolean` `c`(`org.c.a.b.y$b` v1 @kind this) @signature `Lorg/c/a/b/y$b;.c:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f3bdc.  v0:= v1.`org.c.a.b.y$b.b` @type ^`boolean` @kind boolean;
  #L3f3be0.  if v0 == 0 then goto L3f3bf2;
  #L3f3be4.  v0:= v1.`org.c.a.b.y$b.a` @type ^`org.c.a.g` @kind object;
  #L3f3be8.  call temp:= `c`(v0) @signature `Lorg/c/a/g;.c:()Z` @kind virtual;
  #L3f3bee.  v0:= temp;
  #L3f3bf0.  goto L3f3c18;
  #L3f3bf2.  v0:= v1.`org.c.a.b.y$b.a` @type ^`org.c.a.g` @kind object;
  #L3f3bf6.  call temp:= `c`(v0) @signature `Lorg/c/a/g;.c:()Z` @kind virtual;
  #L3f3bfc.  v0:= temp;
  #L3f3bfe.  if v0 == 0 then goto L3f3c16;
  #L3f3c02.  v0:= v1.`org.c.a.b.y$b.c` @type ^`org.c.a.f` @kind object;
  #L3f3c06.  call temp:= `f`(v0) @signature `Lorg/c/a/f;.f:()Z` @kind virtual;
  #L3f3c0c.  v0:= temp;
  #L3f3c0e.  if v0 == 0 then goto L3f3c16;
  #L3f3c12.  v0:= 1I;
  #L3f3c14.  goto L3f3c18;
  #L3f3c16.  v0:= 0I;
  #L3f3c18.  return v0;
}
procedure `long` `d`(`org.c.a.b.y$b` v2 @kind this) @signature `Lorg/c/a/b/y$b;.d:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f3e68.  v0:= v2.`org.c.a.b.y$b.a` @type ^`org.c.a.g` @kind object;
  #L3f3e6c.  call temp:= `d`(v0) @signature `Lorg/c/a/g;.d:()J` @kind virtual;
  #L3f3e72.  v0:= temp @kind wide;
  #L3f3e74.  return v0 @kind wide;
}
procedure `boolean` `equals`(`org.c.a.b.y$b` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lorg/c/a/b/y$b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f3c2c.  v0:= 1I;
  #L3f3c2e.  if v4 != v5 then goto L3f3c34;
  #L3f3c32.  return v0;
  #L3f3c34.  v1:= instanceof @variable v5 @type ^`org.c.a.b.y$b` @kind boolean;
  #L3f3c38.  v2:= 0I;
  #L3f3c3a.  if v1 == 0 then goto L3f3c70;
  #L3f3c3e.  v5:= (`org.c.a.b.y$b`) v5 @kind object;
  #L3f3c42.  v1:= v4.`org.c.a.b.y$b.a` @type ^`org.c.a.g` @kind object;
  #L3f3c46.  v3:= v5.`org.c.a.b.y$b.a` @type ^`org.c.a.g` @kind object;
  #L3f3c4a.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f3c50.  v1:= temp;
  #L3f3c52.  if v1 == 0 then goto L3f3c6c;
  #L3f3c56.  v1:= v4.`org.c.a.b.y$b.c` @type ^`org.c.a.f` @kind object;
  #L3f3c5a.  v5:= v5.`org.c.a.b.y$b.c` @type ^`org.c.a.f` @kind object;
  #L3f3c5e.  call temp:= `equals`(v1, v5) @signature `Lorg/c/a/f;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f3c64.  v5:= temp;
  #L3f3c66.  if v5 == 0 then goto L3f3c6c;
  #L3f3c6a.  goto L3f3c6e;
  #L3f3c6c.  v0:= 0I;
  #L3f3c6e.  return v0;
  #L3f3c70.  return v2;
}
procedure `int` `hashCode`(`org.c.a.b.y$b` v2 @kind this) @signature `Lorg/c/a/b/y$b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f3d6c.  v0:= v2.`org.c.a.b.y$b.a` @type ^`org.c.a.g` @kind object;
  #L3f3d70.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3f3d76.  v0:= temp;
  #L3f3d78.  v1:= v2.`org.c.a.b.y$b.c` @type ^`org.c.a.f` @kind object;
  #L3f3d7c.  call temp:= `hashCode`(v1) @signature `Lorg/c/a/f;.hashCode:()I` @kind virtual;
  #L3f3d82.  v1:= temp;
  #L3f3d84.  v0:= v0 ^~ v1 @kind int;
  #L3f3d86.  return v0;
}
