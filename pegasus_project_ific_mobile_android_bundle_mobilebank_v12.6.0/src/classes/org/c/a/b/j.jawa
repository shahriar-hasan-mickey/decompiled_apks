record `org.c.a.b.j` @kind class @AccessFlag FINAL extends `org.c.a.d.i` @kind class {
  `org.c.a.b.c` `org.c.a.b.j.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.c.a.b.j` v3 @kind this, `org.c.a.b.c` v4 @kind object) @signature `Lorg/c/a/b/j;.<init>:(Lorg/c/a/b/c;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3eeff0.  call temp:= `p`() @signature `Lorg/c/a/d;.p:()Lorg/c/a/d;` @kind static;
  #L3eeff6.  v0:= temp @kind object;
  #L3eeff8.  call temp:= `T`(v4) @signature `Lorg/c/a/b/c;.T:()J` @kind virtual;
  #L3eeffe.  v1:= temp @kind wide;
  #L3ef000.  call `<init>`(v3, v0, v1) @signature `Lorg/c/a/d/i;.<init>:(Lorg/c/a/d;J)V` @kind direct;
  #L3ef006.  v3.`org.c.a.b.j.a` @type ^`org.c.a.b.c` := v4 @kind object;
  #L3ef00a.  return @kind void;
}
procedure `int` `a`(`org.c.a.b.j` v1 @kind this, `long` v2 ) @signature `Lorg/c/a/b/j;.a:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3eed34.  v0:= v1.`org.c.a.b.j.a` @type ^`org.c.a.b.c` @kind object;
  #L3eed38.  call temp:= `e`(v0, v2) @signature `Lorg/c/a/b/c;.e:(J)I` @kind virtual;
  #L3eed3e.  v2:= temp;
  #L3eed40.  return v2;
}
procedure `long` `a`(`org.c.a.b.j` v1 @kind this, `long` v2 , `int` v4 ) @signature `Lorg/c/a/b/j;.a:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3eed94.  if v4 != 0 then goto L3eed9a;
  #L3eed98.  return v2 @kind wide;
  #L3eed9a.  call temp:= `a`(v1, v2) @signature `Lorg/c/a/b/j;.a:(J)I` @kind virtual;
  #L3eeda0.  v0:= temp;
  #L3eeda2.  v0:= v0 + v4 @kind int;
  #L3eeda4.  call temp:= `b`(v1, v2, v0) @signature `Lorg/c/a/b/j;.b:(JI)J` @kind virtual;
  #L3eedaa.  v2:= temp @kind wide;
  #L3eedac.  return v2 @kind wide;
}
procedure `long` `a`(`org.c.a.b.j` v0 @kind this, `long` v1 , `long` v3 ) @signature `Lorg/c/a/b/j;.a:(JJ)J` @AccessFlag PUBLIC {
    temp;

  #L3eedc0.  call temp:= `a`(v3) @signature `Lorg/c/a/d/h;.a:(J)I` @kind static;
  #L3eedc6.  v3:= temp;
  #L3eedc8.  call temp:= `a`(v0, v1, v3) @signature `Lorg/c/a/b/j;.a:(JI)J` @kind virtual;
  #L3eedce.  v1:= temp @kind wide;
  #L3eedd0.  return v1 @kind wide;
}
procedure `long` `b`(`org.c.a.b.j` v7 @kind this, `long` v8 , `int` v10 ) @signature `Lorg/c/a/b/j;.b:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3eede4.  call temp:= `abs`(v10) @signature `Ljava/lang/Math;.abs:(I)I` @kind static;
  #L3eedea.  v0:= temp;
  #L3eedec.  v1:= v7.`org.c.a.b.j.a` @type ^`org.c.a.b.c` @kind object;
  #L3eedf0.  call temp:= `Q`(v1) @signature `Lorg/c/a/b/c;.Q:()I` @kind virtual;
  #L3eedf6.  v1:= temp;
  #L3eedf8.  v2:= v7.`org.c.a.b.j.a` @type ^`org.c.a.b.c` @kind object;
  #L3eedfc.  call temp:= `R`(v2) @signature `Lorg/c/a/b/c;.R:()I` @kind virtual;
  #L3eee02.  v2:= temp;
  #L3eee04.  call `a`(v7, v0, v1, v2) @signature `Lorg/c/a/d/h;.a:(Lorg/c/a/c;III)V` @kind static;
  #L3eee0a.  call temp:= `a`(v7, v8) @signature `Lorg/c/a/b/j;.a:(J)I` @kind virtual;
  #L3eee10.  v0:= temp;
  #L3eee12.  if v0 != v10 then goto L3eee18;
  #L3eee16.  return v8 @kind wide;
  #L3eee18.  v1:= v7.`org.c.a.b.j.a` @type ^`org.c.a.b.c` @kind object;
  #L3eee1c.  call temp:= `g`(v1, v8) @signature `Lorg/c/a/b/c;.g:(J)I` @kind virtual;
  #L3eee22.  v1:= temp;
  #L3eee24.  v2:= v7.`org.c.a.b.j.a` @type ^`org.c.a.b.c` @kind object;
  #L3eee28.  call temp:= `b`(v2, v0) @signature `Lorg/c/a/b/c;.b:(I)I` @kind virtual;
  #L3eee2e.  v0:= temp;
  #L3eee30.  v2:= v7.`org.c.a.b.j.a` @type ^`org.c.a.b.c` @kind object;
  #L3eee34.  call temp:= `b`(v2, v10) @signature `Lorg/c/a/b/c;.b:(I)I` @kind virtual;
  #L3eee3a.  v2:= temp;
  #L3eee3c.  if v2 >= v0 then goto L3eee42;
  #L3eee40.  v0:= v2;
  #L3eee42.  v2:= v7.`org.c.a.b.j.a` @type ^`org.c.a.b.c` @kind object;
  #L3eee46.  call temp:= `f`(v2, v8) @signature `Lorg/c/a/b/c;.f:(J)I` @kind virtual;
  #L3eee4c.  v2:= temp;
  #L3eee4e.  if v2 <= v0 then goto L3eee54;
  #L3eee52.  goto L3eee56;
  #L3eee54.  v0:= v2;
  #L3eee56.  v2:= v7.`org.c.a.b.j.a` @type ^`org.c.a.b.c` @kind object;
  #L3eee5a.  call temp:= `f`(v2, v8, v10) @signature `Lorg/c/a/b/c;.f:(JI)J` @kind virtual;
  #L3eee60.  v8:= temp @kind wide;
  #L3eee62.  call temp:= `a`(v7, v8) @signature `Lorg/c/a/b/j;.a:(J)I` @kind virtual;
  #L3eee68.  v2:= temp;
  #L3eee6a.  v3:= 604800000L;
  #L3eee70.  if v2 >= v10 then goto L3eee7a;
  #L3eee74.  v5:= v8 + v3 @kind long;
  #L3eee78.  goto L3eee86;
  #L3eee7a.  if v2 <= v10 then goto L3eee84;
  #L3eee7e.  v5:= v8 - v3 @kind long;
  #L3eee82.  goto L3eee86;
  #L3eee84.  v5:= v8 @kind wide;
  #L3eee86.  v8:= v7.`org.c.a.b.j.a` @type ^`org.c.a.b.c` @kind object;
  #L3eee8a.  call temp:= `f`(v8, v5) @signature `Lorg/c/a/b/c;.f:(J)I` @kind virtual;
  #L3eee90.  v8:= temp;
  #L3eee92.  v0:= v0 - v8 @kind int;
  #L3eee94.  v8:= (`long`) v0 @kind i2l;
  #L3eee96.  v8:= v8 * v3 @kind long;
  #L3eee9a.  v2:= v5 + v8 @kind long;
  #L3eee9e.  v8:= v7.`org.c.a.b.j.a` @type ^`org.c.a.b.c` @kind object;
  #L3eeea2.  call temp:= `t`(v8) @signature `Lorg/c/a/b/c;.t:()Lorg/c/a/c;` @kind virtual;
  #L3eeea8.  v8:= temp @kind object;
  #L3eeeaa.  call temp:= `b`(v8, v2, v1) @signature `Lorg/c/a/c;.b:(JI)J` @kind virtual;
  #L3eeeb0.  v8:= temp @kind wide;
  #L3eeeb2.  return v8 @kind wide;
}
procedure `boolean` `b`(`org.c.a.b.j` v2 @kind this, `long` v3 ) @signature `Lorg/c/a/b/j;.b:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3eece8.  v0:= v2.`org.c.a.b.j.a` @type ^`org.c.a.b.c` @kind object;
  #L3eecec.  v1:= v2.`org.c.a.b.j.a` @type ^`org.c.a.b.c` @kind object;
  #L3eecf0.  call temp:= `e`(v1, v3) @signature `Lorg/c/a/b/c;.e:(J)I` @kind virtual;
  #L3eecf6.  v3:= temp;
  #L3eecf8.  call temp:= `b`(v0, v3) @signature `Lorg/c/a/b/c;.b:(I)I` @kind virtual;
  #L3eecfe.  v3:= temp;
  #L3eed00.  v4:= 52I;
  #L3eed04.  if v3 <= v4 then goto L3eed0c;
  #L3eed08.  v3:= 1I;
  #L3eed0a.  goto L3eed0e;
  #L3eed0c.  v3:= 0I;
  #L3eed0e.  return v3;
}
procedure `long` `c`(`org.c.a.b.j` v6 @kind this, `long` v7 , `long` v9 ) @signature `Lorg/c/a/b/j;.c:(JJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3eeec4.  v0:= lcmp(v7, v9);
  #L3eeec8.  if v0 >= 0 then goto L3eeeda;
  #L3eeecc.  call temp:= `b`(v6, v9, v7) @signature `Lorg/c/a/b/j;.b:(JJ)I` @kind virtual;
  #L3eeed2.  v7:= temp;
  #L3eeed4.  v7:= -v7 @kind int;
  #L3eeed6.  v7:= (`long`) v7 @kind i2l;
  #L3eeed8.  return v7 @kind wide;
  #L3eeeda.  call temp:= `a`(v6, v7) @signature `Lorg/c/a/b/j;.a:(J)I` @kind virtual;
  #L3eeee0.  v0:= temp;
  #L3eeee2.  call temp:= `a`(v6, v9) @signature `Lorg/c/a/b/j;.a:(J)I` @kind virtual;
  #L3eeee8.  v1:= temp;
  #L3eeeea.  call temp:= `i`(v6, v7) @signature `Lorg/c/a/b/j;.i:(J)J` @kind virtual;
  #L3eeef0.  v7:= temp @kind wide;
  #L3eeef2.  call temp:= `i`(v6, v9) @signature `Lorg/c/a/b/j;.i:(J)J` @kind virtual;
  #L3eeef8.  v9:= temp @kind wide;
  #L3eeefa.  v2:= 31449600000L;
  #L3eef04.  v4:= lcmp(v9, v2);
  #L3eef08.  if v4 < 0 then goto L3eef2c;
  #L3eef0c.  v2:= v6.`org.c.a.b.j.a` @type ^`org.c.a.b.c` @kind object;
  #L3eef10.  call temp:= `b`(v2, v0) @signature `Lorg/c/a/b/c;.b:(I)I` @kind virtual;
  #L3eef16.  v2:= temp;
  #L3eef18.  v3:= 52I;
  #L3eef1c.  if v2 > v3 then goto L3eef2c;
  #L3eef20.  v2:= 604800000L;
  #L3eef26.  v4:= v9 - v2 @kind long;
  #L3eef2a.  v9:= v4 @kind wide;
  #L3eef2c.  v0:= v0 - v1 @kind int;
  #L3eef2e.  v1:= lcmp(v7, v9);
  #L3eef32.  if v1 >= 0 then goto L3eef3a;
  #L3eef36.  v0:= v0 + -1;
  #L3eef3a.  v7:= (`long`) v0 @kind i2l;
  #L3eef3c.  return v7 @kind wide;
}
procedure `long` `d`(`org.c.a.b.j` v4 @kind this, `long` v5 ) @signature `Lorg/c/a/b/j;.d:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3eef50.  v0:= v4.`org.c.a.b.j.a` @type ^`org.c.a.b.c` @kind object;
  #L3eef54.  call temp:= `x`(v0) @signature `Lorg/c/a/b/c;.x:()Lorg/c/a/c;` @kind virtual;
  #L3eef5a.  v0:= temp @kind object;
  #L3eef5c.  call temp:= `d`(v0, v5) @signature `Lorg/c/a/c;.d:(J)J` @kind virtual;
  #L3eef62.  v5:= temp @kind wide;
  #L3eef64.  v0:= v4.`org.c.a.b.j.a` @type ^`org.c.a.b.c` @kind object;
  #L3eef68.  call temp:= `f`(v0, v5) @signature `Lorg/c/a/b/c;.f:(J)I` @kind virtual;
  #L3eef6e.  v0:= temp;
  #L3eef70.  v1:= 1I;
  #L3eef72.  if v0 <= v1 then goto L3eef8a;
  #L3eef76.  v2:= 604800000L;
  #L3eef7c.  v0:= v0 - v1 @kind int;
  #L3eef7e.  v0:= (`long`) v0 @kind i2l;
  #L3eef80.  v0:= v0 * v2 @kind long;
  #L3eef84.  v2:= v5 - v0 @kind long;
  #L3eef88.  v5:= v2 @kind wide;
  #L3eef8a.  return v5 @kind wide;
}
procedure `boolean` `d`(`org.c.a.b.j` v1 @kind this) @signature `Lorg/c/a/b/j;.d:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3eed20.  v0:= 0I;
  #L3eed22.  return v0;
}
procedure `org.c.a.g` `f`(`org.c.a.b.j` v1 @kind this) @signature `Lorg/c/a/b/j;.f:()Lorg/c/a/g;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3eefbc.  v0:= 0I;
  #L3eefbe.  return v0 @kind object;
}
procedure `org.c.a.g` `g`(`org.c.a.b.j` v1 @kind this) @signature `Lorg/c/a/b/j;.g:()Lorg/c/a/g;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3eefd0.  v0:= v1.`org.c.a.b.j.a` @type ^`org.c.a.b.c` @kind object;
  #L3eefd4.  call temp:= `w`(v0) @signature `Lorg/c/a/b/c;.w:()Lorg/c/a/g;` @kind virtual;
  #L3eefda.  v0:= temp @kind object;
  #L3eefdc.  return v0 @kind object;
}
procedure `int` `h`(`org.c.a.b.j` v1 @kind this) @signature `Lorg/c/a/b/j;.h:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3eed54.  v0:= v1.`org.c.a.b.j.a` @type ^`org.c.a.b.c` @kind object;
  #L3eed58.  call temp:= `Q`(v0) @signature `Lorg/c/a/b/c;.Q:()I` @kind virtual;
  #L3eed5e.  v0:= temp;
  #L3eed60.  return v0;
}
procedure `int` `i`(`org.c.a.b.j` v1 @kind this) @signature `Lorg/c/a/b/j;.i:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3eed74.  v0:= v1.`org.c.a.b.j.a` @type ^`org.c.a.b.c` @kind object;
  #L3eed78.  call temp:= `R`(v0) @signature `Lorg/c/a/b/c;.R:()I` @kind virtual;
  #L3eed7e.  v0:= temp;
  #L3eed80.  return v0;
}
procedure `long` `i`(`org.c.a.b.j` v4 @kind this, `long` v5 ) @signature `Lorg/c/a/b/j;.i:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3eef9c.  call temp:= `d`(v4, v5) @signature `Lorg/c/a/b/j;.d:(J)J` @kind virtual;
  #L3eefa2.  v0:= temp @kind wide;
  #L3eefa4.  v2:= v5 - v0 @kind long;
  #L3eefa8.  return v2 @kind wide;
}
