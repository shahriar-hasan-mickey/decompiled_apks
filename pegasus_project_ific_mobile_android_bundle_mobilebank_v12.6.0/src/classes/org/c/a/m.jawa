record `org.c.a.m` @kind class @AccessFlag PUBLIC extends `org.c.a.a.e` @kind class, `java.io.Serializable` @kind interface, `java.lang.Cloneable` @kind interface, `org.c.a.p` @kind interface {
  `org.c.a.c` `org.c.a.m.a` @AccessFlag PRIVATE;
  `int` `org.c.a.m.b` @AccessFlag PRIVATE;
}
global `long` `@@org.c.a.m.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.c.a.m` v0 @kind this) @signature `Lorg/c/a/m;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L404964.  call `<init>`(v0) @signature `Lorg/c/a/a/e;.<init>:()V` @kind direct;
  #L40496a.  return @kind void;
}
procedure `void` `<init>`(`org.c.a.m` v0 @kind this, `long` v1 , `org.c.a.a` v3 @kind object) @signature `Lorg/c/a/m;.<init>:(JLorg/c/a/a;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L40497c.  call `<init>`(v0, v1, v3) @signature `Lorg/c/a/a/e;.<init>:(JLorg/c/a/a;)V` @kind direct;
  #L404982.  return @kind void;
}
procedure `void` `<init>`(`org.c.a.m` v0 @kind this, `long` v1 , `org.c.a.f` v3 @kind object) @signature `Lorg/c/a/m;.<init>:(JLorg/c/a/f;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L404994.  call `<init>`(v0, v1, v3) @signature `Lorg/c/a/a/e;.<init>:(JLorg/c/a/f;)V` @kind direct;
  #L40499a.  return @kind void;
}
procedure `org.c.a.m$a` `a`(`org.c.a.m` v3 @kind this, `org.c.a.d` v4 @kind object) @signature `Lorg/c/a/m;.a:(Lorg/c/a/d;)Lorg/c/a/m$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4048e0.  if v4 != 0 then goto L4048f4;
  #L4048e4.  v4:= new `java.lang.IllegalArgumentException`;
  #L4048e8.  v0:= "The DateTimeFieldType must not be null" @kind object;
  #L4048ec.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4048f2.  throw v4;
  #L4048f4.  call temp:= `d`(v3) @signature `Lorg/c/a/m;.d:()Lorg/c/a/a;` @kind virtual;
  #L4048fa.  v0:= temp @kind object;
  #L4048fc.  call temp:= `a`(v4, v0) @signature `Lorg/c/a/d;.a:(Lorg/c/a/a;)Lorg/c/a/c;` @kind virtual;
  #L404902.  v0:= temp @kind object;
  #L404904.  call temp:= `c`(v0) @signature `Lorg/c/a/c;.c:()Z` @kind virtual;
  #L40490a.  v1:= temp;
  #L40490c.  if v1 != 0 then goto L404948;
  #L404910.  v0:= new `java.lang.IllegalArgumentException`;
  #L404914.  v1:= new `java.lang.StringBuilder`;
  #L404918.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L40491e.  v2:= "Field '" @kind object;
  #L404922.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L404928.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40492e.  v4:= "' is not supported" @kind object;
  #L404932.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L404938.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L40493e.  v4:= temp @kind object;
  #L404940.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L404946.  throw v0;
  #L404948.  v4:= new `org.c.a.m$a`;
  #L40494c.  call `<init>`(v4, v3, v0) @signature `Lorg/c/a/m$a;.<init>:(Lorg/c/a/m;Lorg/c/a/c;)V` @kind direct;
  #L404952.  return v4 @kind object;
}
procedure `void` `a`(`org.c.a.m` v1 @kind this, `long` v2 ) @signature `Lorg/c/a/m;.a:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4049ac.  v0:= v1.`org.c.a.m.b` @type ^`int`;
  #L4049b0.  goto L404a04;
  #L4049b6.  goto L4049fc;
  #L4049b8.  v0:= v1.`org.c.a.m.a` @type ^`org.c.a.c` @kind object;
  #L4049bc.  call temp:= `h`(v0, v2) @signature `Lorg/c/a/c;.h:(J)J` @kind virtual;
  #L4049c2.  v2:= temp @kind wide;
  #L4049c4.  goto L4049fc;
  #L4049c6.  v0:= v1.`org.c.a.m.a` @type ^`org.c.a.c` @kind object;
  #L4049ca.  call temp:= `g`(v0, v2) @signature `Lorg/c/a/c;.g:(J)J` @kind virtual;
  #L4049d0.  v2:= temp @kind wide;
  #L4049d2.  goto L4049fc;
  #L4049d4.  v0:= v1.`org.c.a.m.a` @type ^`org.c.a.c` @kind object;
  #L4049d8.  call temp:= `f`(v0, v2) @signature `Lorg/c/a/c;.f:(J)J` @kind virtual;
  #L4049de.  v2:= temp @kind wide;
  #L4049e0.  goto L4049fc;
  #L4049e2.  v0:= v1.`org.c.a.m.a` @type ^`org.c.a.c` @kind object;
  #L4049e6.  call temp:= `e`(v0, v2) @signature `Lorg/c/a/c;.e:(J)J` @kind virtual;
  #L4049ec.  v2:= temp @kind wide;
  #L4049ee.  goto L4049fc;
  #L4049f0.  v0:= v1.`org.c.a.m.a` @type ^`org.c.a.c` @kind object;
  #L4049f4.  call temp:= `d`(v0, v2) @signature `Lorg/c/a/c;.d:(J)J` @kind virtual;
  #L4049fa.  v2:= temp @kind wide;
  #L4049fc.  call `a`(v1, v2) @signature `Lorg/c/a/a/e;.a:(J)V` @kind super;
  #L404a02.  return @kind void;
  #L404a04.  switch v0
                  | 0 => goto L4049fc
                  | 1 => goto L4049f0
                  | 2 => goto L4049e2
                  | 3 => goto L4049d4
                  | 4 => goto L4049c6
                  | 5 => goto L4049b8
                  | else => goto L4049b6;
}
procedure `void` `a`(`org.c.a.m` v0 @kind this, `org.c.a.a` v1 @kind object) @signature `Lorg/c/a/m;.a:(Lorg/c/a/a;)V` @AccessFlag PUBLIC {
    temp;

  #L404a34.  call `a`(v0, v1) @signature `Lorg/c/a/a/e;.a:(Lorg/c/a/a;)V` @kind super;
  #L404a3a.  return @kind void;
}
procedure `void` `a`(`org.c.a.m` v3 @kind this, `org.c.a.f` v4 @kind object) @signature `Lorg/c/a/m;.a:(Lorg/c/a/f;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L404a4c.  call temp:= `a`(v4) @signature `Lorg/c/a/e;.a:(Lorg/c/a/f;)Lorg/c/a/f;` @kind static;
  #L404a52.  v4:= temp @kind object;
  #L404a54.  call temp:= `h`(v3) @signature `Lorg/c/a/m;.h:()Lorg/c/a/f;` @kind virtual;
  #L404a5a.  v0:= temp @kind object;
  #L404a5c.  call temp:= `a`(v0) @signature `Lorg/c/a/e;.a:(Lorg/c/a/f;)Lorg/c/a/f;` @kind static;
  #L404a62.  v0:= temp @kind object;
  #L404a64.  if v4 != v0 then goto L404a6a;
  #L404a68.  return @kind void;
  #L404a6a.  call temp:= `c`(v3) @signature `Lorg/c/a/m;.c:()J` @kind virtual;
  #L404a70.  v1:= temp @kind wide;
  #L404a72.  call temp:= `a`(v0, v4, v1) @signature `Lorg/c/a/f;.a:(Lorg/c/a/f;J)J` @kind virtual;
  #L404a78.  v0:= temp @kind wide;
  #L404a7a.  call temp:= `d`(v3) @signature `Lorg/c/a/m;.d:()Lorg/c/a/a;` @kind virtual;
  #L404a80.  v2:= temp @kind object;
  #L404a82.  call temp:= `a`(v2, v4) @signature `Lorg/c/a/a;.a:(Lorg/c/a/f;)Lorg/c/a/a;` @kind virtual;
  #L404a88.  v4:= temp @kind object;
  #L404a8a.  call `a`(v3, v4) @signature `Lorg/c/a/m;.a:(Lorg/c/a/a;)V` @kind virtual;
  #L404a90.  call `a`(v3, v0) @signature `Lorg/c/a/m;.a:(J)V` @kind virtual;
  #L404a96.  return @kind void;
}
procedure `java.lang.Object` `clone`(`org.c.a.m` v2 @kind this) @signature `Lorg/c/a/m;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4048a4.  call temp:= `clone`(v2) @signature `Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind super;
  #L4048aa.  v0:= temp @kind object;
  #L4048ac.  return v0 @kind object;
  #L4048ae.  v0:= new `java.lang.InternalError`;
  #L4048b2.  v1:= "Clone error" @kind object;
  #L4048b6.  call `<init>`(v0, v1) @signature `Ljava/lang/InternalError;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4048bc.  throw v0;
  catch `java.lang.CloneNotSupportedException` @[L4048a4..L4048ac] goto L4048ae;
}
