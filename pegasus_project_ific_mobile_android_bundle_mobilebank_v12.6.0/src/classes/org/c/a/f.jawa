record `org.c.a.f` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.io.Serializable` @kind interface {
  `java.lang.String` `org.c.a.f.e` @AccessFlag PRIVATE_FINAL;
}
global `org.c.a.f` `@@org.c.a.f.a` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.util.concurrent.atomic.AtomicReference` `@@org.c.a.f.b` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.atomic.AtomicReference` `@@org.c.a.f.c` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.atomic.AtomicReference` `@@org.c.a.f.d` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@org.c.a.f.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/c/a/f;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L403870.  v0:= `@@org.c.a.x.b` @type ^`org.c.a.f` @kind object;
  #L403874.  `@@org.c.a.f.a` @type ^`org.c.a.f` := v0 @kind object;
  #L403878.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L40387c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L403882.  `@@org.c.a.f.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L403886.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L40388a.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L403890.  `@@org.c.a.f.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L403894.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L403898.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L40389e.  `@@org.c.a.f.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4038a2.  return @kind void;
}
procedure `void` `<init>`(`org.c.a.f` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lorg/c/a/f;.<init>:(Ljava/lang/String;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;

  #L4038b4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4038ba.  if v2 != 0 then goto L4038ce;
  #L4038be.  v2:= new `java.lang.IllegalArgumentException`;
  #L4038c2.  v0:= "Id must not be null" @kind object;
  #L4038c6.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4038cc.  throw v2;
  #L4038ce.  v1.`org.c.a.f.e` @type ^`java.lang.String` := v2 @kind object;
  #L4038d2.  return @kind void;
}
procedure `java.lang.String` `a`(`int` v5 ) @signature `Lorg/c/a/f;.a:(I)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L402e00.  v0:= new `java.lang.StringBuffer`;
  #L402e04.  call `<init>`(v0) @signature `Ljava/lang/StringBuffer;.<init>:()V` @kind direct;
  #L402e0a.  if v5 < 0 then goto L402e1a;
  #L402e0e.  v1:= 43I;
  #L402e12.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuffer;.append:(C)Ljava/lang/StringBuffer;` @kind virtual;
  #L402e18.  goto L402e26;
  #L402e1a.  v1:= 45I;
  #L402e1e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuffer;.append:(C)Ljava/lang/StringBuffer;` @kind virtual;
  #L402e24.  v5:= -v5 @kind int;
  #L402e26.  v1:= 3600000I;
  #L402e2c.  v2:= v5 / v1 @kind int;
  #L402e30.  v3:= 2I;
  #L402e32.  call `a`(v0, v2, v3) @signature `Lorg/c/a/e/i;.a:(Ljava/lang/StringBuffer;II)V` @kind static;
  #L402e38.  v2:= v2 * v1 @kind int;
  #L402e3c.  v5:= v5 - v2 @kind int;
  #L402e3e.  v1:= 60000I;
  #L402e44.  v2:= v5 / v1 @kind int;
  #L402e48.  v4:= 58I;
  #L402e4c.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuffer;.append:(C)Ljava/lang/StringBuffer;` @kind virtual;
  #L402e52.  call `a`(v0, v2, v3) @signature `Lorg/c/a/e/i;.a:(Ljava/lang/StringBuffer;II)V` @kind static;
  #L402e58.  v2:= v2 * v1 @kind int;
  #L402e5c.  v5:= v5 - v2 @kind int;
  #L402e5e.  if v5 != 0 then goto L402e6c;
  #L402e62.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuffer;.toString:()Ljava/lang/String;` @kind virtual;
  #L402e68.  v5:= temp @kind object;
  #L402e6a.  return v5 @kind object;
  #L402e6c.  v1:= v5 / 1000;
  #L402e70.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuffer;.append:(C)Ljava/lang/StringBuffer;` @kind virtual;
  #L402e76.  call `a`(v0, v1, v3) @signature `Lorg/c/a/e/i;.a:(Ljava/lang/StringBuffer;II)V` @kind static;
  #L402e7c.  v1:= v1 * 1000;
  #L402e80.  v5:= v5 - v1 @kind int;
  #L402e82.  if v5 != 0 then goto L402e90;
  #L402e86.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuffer;.toString:()Ljava/lang/String;` @kind virtual;
  #L402e8c.  v5:= temp @kind object;
  #L402e8e.  return v5 @kind object;
  #L402e90.  v1:= 46I;
  #L402e94.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuffer;.append:(C)Ljava/lang/StringBuffer;` @kind virtual;
  #L402e9a.  v1:= 3I;
  #L402e9c.  call `a`(v0, v5, v1) @signature `Lorg/c/a/e/i;.a:(Ljava/lang/StringBuffer;II)V` @kind static;
  #L402ea2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuffer;.toString:()Ljava/lang/String;` @kind virtual;
  #L402ea8.  v5:= temp @kind object;
  #L402eaa.  return v5 @kind object;
}
procedure `org.c.a.f.f` `a`(`org.c.a.f.f` v2 @kind object) @signature `Lorg/c/a/f;.a:(Lorg/c/a/f/f;)Lorg/c/a/f/f;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L403624.  call temp:= `a`(v2) @signature `Lorg/c/a/f/f;.a:()Ljava/util/Set;` @kind interface;
  #L40362a.  v0:= temp @kind object;
  #L40362c.  if v0 == 0 then goto L40368c;
  #L403630.  call temp:= `size`(v0) @signature `Ljava/util/Set;.size:()I` @kind interface;
  #L403636.  v1:= temp;
  #L403638.  if v1 != 0 then goto L40363e;
  #L40363c.  goto L40368c;
  #L40363e.  v1:= "UTC" @kind object;
  #L403642.  call temp:= `contains`(v0, v1) @signature `Ljava/util/Set;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L403648.  v0:= temp;
  #L40364a.  if v0 != 0 then goto L40365e;
  #L40364e.  v2:= new `java.lang.IllegalArgumentException`;
  #L403652.  v0:= "The provider doesn't support UTC" @kind object;
  #L403656.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40365c.  throw v2;
  #L40365e.  v0:= `@@org.c.a.f.a` @type ^`org.c.a.f` @kind object;
  #L403662.  v1:= "UTC" @kind object;
  #L403666.  call temp:= `a`(v2, v1) @signature `Lorg/c/a/f/f;.a:(Ljava/lang/String;)Lorg/c/a/f;` @kind interface;
  #L40366c.  v1:= temp @kind object;
  #L40366e.  call temp:= `equals`(v0, v1) @signature `Lorg/c/a/f;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L403674.  v0:= temp;
  #L403676.  if v0 != 0 then goto L40368a;
  #L40367a.  v2:= new `java.lang.IllegalArgumentException`;
  #L40367e.  v0:= "Invalid UTC zone provided" @kind object;
  #L403682.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L403688.  throw v2;
  #L40368a.  return v2 @kind object;
  #L40368c.  v2:= new `java.lang.IllegalArgumentException`;
  #L403690.  v0:= "The provider doesn't have any available ids" @kind object;
  #L403694.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40369a.  throw v2;
}
procedure `org.c.a.f` `a`() @signature `Lorg/c/a/f;.a:()Lorg/c/a/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L40320c.  v0:= `@@org.c.a.f.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L403210.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L403216.  v0:= temp @kind object;
  #L403218.  v0:= (`org.c.a.f`) v0 @kind object;
  #L40321c.  if v0 != 0 then goto L40327a;
  #L403220.  v1:= "user.timezone" @kind object;
  #L403224.  call temp:= `getProperty`(v1) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L40322a.  v1:= temp @kind object;
  #L40322c.  if v1 == 0 then goto L40323a;
  #L403230.  call temp:= `a`(v1) @signature `Lorg/c/a/f;.a:(Ljava/lang/String;)Lorg/c/a/f;` @kind static;
  #L403236.  v1:= temp @kind object;
  #L403238.  v0:= v1 @kind object;
  #L40323a.  if v0 != 0 then goto L403250;
  #L40323e.  call temp:= `getDefault`() @signature `Ljava/util/TimeZone;.getDefault:()Ljava/util/TimeZone;` @kind static;
  #L403244.  v1:= temp @kind object;
  #L403246.  call temp:= `a`(v1) @signature `Lorg/c/a/f;.a:(Ljava/util/TimeZone;)Lorg/c/a/f;` @kind static;
  #L40324c.  v1:= temp @kind object;
  #L40324e.  v0:= v1 @kind object;
  #L403250.  if v0 != 0 then goto L403258;
  #L403254.  v0:= `@@org.c.a.f.a` @type ^`org.c.a.f` @kind object;
  #L403258.  v1:= `@@org.c.a.f.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40325c.  v2:= 0I;
  #L40325e.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L403264.  v1:= temp;
  #L403266.  if v1 != 0 then goto L40327a;
  #L40326a.  v0:= `@@org.c.a.f.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40326e.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L403274.  v0:= temp @kind object;
  #L403276.  v0:= (`org.c.a.f`) v0 @kind object;
  #L40327a.  return v0 @kind object;
  catch `java.lang.RuntimeException` @[L403220..L403238] goto L40323a;
  catch `java.lang.IllegalArgumentException` @[L403220..L403238] goto L403250;
  catch `java.lang.IllegalArgumentException` @[L40323e..L40324e] goto L403250;
}
procedure `org.c.a.f` `a`(`java.lang.String` v5 @kind object) @signature `Lorg/c/a/f;.a:(Ljava/lang/String;)Lorg/c/a/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4032a8.  if v5 != 0 then goto L4032b6;
  #L4032ac.  call temp:= `a`() @signature `Lorg/c/a/f;.a:()Lorg/c/a/f;` @kind static;
  #L4032b2.  v5:= temp @kind object;
  #L4032b4.  return v5 @kind object;
  #L4032b6.  v0:= "UTC" @kind object;
  #L4032ba.  call temp:= `equals`(v5, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4032c0.  v0:= temp;
  #L4032c2.  if v0 == 0 then goto L4032cc;
  #L4032c6.  v5:= `@@org.c.a.f.a` @type ^`org.c.a.f` @kind object;
  #L4032ca.  return v5 @kind object;
  #L4032cc.  call temp:= `c`() @signature `Lorg/c/a/f;.c:()Lorg/c/a/f/f;` @kind static;
  #L4032d2.  v0:= temp @kind object;
  #L4032d4.  call temp:= `a`(v0, v5) @signature `Lorg/c/a/f/f;.a:(Ljava/lang/String;)Lorg/c/a/f;` @kind interface;
  #L4032da.  v0:= temp @kind object;
  #L4032dc.  if v0 == 0 then goto L4032e2;
  #L4032e0.  return v0 @kind object;
  #L4032e2.  v0:= "+" @kind object;
  #L4032e6.  call temp:= `startsWith`(v5, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L4032ec.  v0:= temp;
  #L4032ee.  if v0 != 0 then goto L40333c;
  #L4032f2.  v0:= "-" @kind object;
  #L4032f6.  call temp:= `startsWith`(v5, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L4032fc.  v0:= temp;
  #L4032fe.  if v0 == 0 then goto L403304;
  #L403302.  goto L40333c;
  #L403304.  v0:= new `java.lang.IllegalArgumentException`;
  #L403308.  v1:= new `java.lang.StringBuilder`;
  #L40330c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L403312.  v2:= "The datetime zone id '" @kind object;
  #L403316.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40331c.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L403322.  v5:= "' is not recognised" @kind object;
  #L403326.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40332c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L403332.  v5:= temp @kind object;
  #L403334.  call `<init>`(v0, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40333a.  throw v0;
  #L40333c.  call temp:= `d`(v5) @signature `Lorg/c/a/f;.d:(Ljava/lang/String;)I` @kind static;
  #L403342.  v5:= temp;
  #L403344.  v0:= (`long`) v5 @kind i2l;
  #L403346.  v2:= 0L;
  #L40334a.  v4:= lcmp(v0, v2);
  #L40334e.  if v4 != 0 then goto L403358;
  #L403352.  v5:= `@@org.c.a.f.a` @type ^`org.c.a.f` @kind object;
  #L403356.  return v5 @kind object;
  #L403358.  call temp:= `a`(v5) @signature `Lorg/c/a/f;.a:(I)Ljava/lang/String;` @kind static;
  #L40335e.  v0:= temp @kind object;
  #L403360.  call temp:= `a`(v0, v5) @signature `Lorg/c/a/f;.a:(Ljava/lang/String;I)Lorg/c/a/f;` @kind static;
  #L403366.  v5:= temp @kind object;
  #L403368.  return v5 @kind object;
}
procedure `org.c.a.f` `a`(`java.lang.String` v2 @kind object, `int` v3 ) @signature `Lorg/c/a/f;.a:(Ljava/lang/String;I)Lorg/c/a/f;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L40337c.  if v3 != 0 then goto L403386;
  #L403380.  v2:= `@@org.c.a.f.a` @type ^`org.c.a.f` @kind object;
  #L403384.  return v2 @kind object;
  #L403386.  v0:= new `org.c.a.f.d`;
  #L40338a.  v1:= 0I;
  #L40338c.  call `<init>`(v0, v2, v1, v3, v3) @signature `Lorg/c/a/f/d;.<init>:(Ljava/lang/String;Ljava/lang/String;II)V` @kind direct;
  #L403392.  return v0 @kind object;
}
procedure `org.c.a.f` `a`(`java.util.TimeZone` v5 @kind object) @signature `Lorg/c/a/f;.a:(Ljava/util/TimeZone;)Lorg/c/a/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4033a4.  if v5 != 0 then goto L4033b2;
  #L4033a8.  call temp:= `a`() @signature `Lorg/c/a/f;.a:()Lorg/c/a/f;` @kind static;
  #L4033ae.  v5:= temp @kind object;
  #L4033b0.  return v5 @kind object;
  #L4033b2.  call temp:= `getID`(v5) @signature `Ljava/util/TimeZone;.getID:()Ljava/lang/String;` @kind virtual;
  #L4033b8.  v5:= temp @kind object;
  #L4033ba.  if v5 != 0 then goto L4033ce;
  #L4033be.  v5:= new `java.lang.IllegalArgumentException`;
  #L4033c2.  v0:= "The TimeZone id must not be null" @kind object;
  #L4033c6.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4033cc.  throw v5;
  #L4033ce.  v0:= "UTC" @kind object;
  #L4033d2.  call temp:= `equals`(v5, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4033d8.  v0:= temp;
  #L4033da.  if v0 == 0 then goto L4033e4;
  #L4033de.  v5:= `@@org.c.a.f.a` @type ^`org.c.a.f` @kind object;
  #L4033e2.  return v5 @kind object;
  #L4033e4.  v0:= 0I;
  #L4033e6.  call temp:= `c`(v5) @signature `Lorg/c/a/f;.c:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L4033ec.  v1:= temp @kind object;
  #L4033ee.  call temp:= `c`() @signature `Lorg/c/a/f;.c:()Lorg/c/a/f/f;` @kind static;
  #L4033f4.  v2:= temp @kind object;
  #L4033f6.  if v1 == 0 then goto L403402;
  #L4033fa.  call temp:= `a`(v2, v1) @signature `Lorg/c/a/f/f;.a:(Ljava/lang/String;)Lorg/c/a/f;` @kind interface;
  #L403400.  v0:= temp @kind object;
  #L403402.  if v0 != 0 then goto L40340e;
  #L403406.  call temp:= `a`(v2, v5) @signature `Lorg/c/a/f/f;.a:(Ljava/lang/String;)Lorg/c/a/f;` @kind interface;
  #L40340c.  v0:= temp @kind object;
  #L40340e.  if v0 == 0 then goto L403414;
  #L403412.  return v0 @kind object;
  #L403414.  if v1 != 0 then goto L4034a4;
  #L403418.  v0:= "GMT+" @kind object;
  #L40341c.  call temp:= `startsWith`(v5, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L403422.  v0:= temp;
  #L403424.  if v0 != 0 then goto L403438;
  #L403428.  v0:= "GMT-" @kind object;
  #L40342c.  call temp:= `startsWith`(v5, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L403432.  v0:= temp;
  #L403434.  if v0 == 0 then goto L4034a4;
  #L403438.  v0:= 3I;
  #L40343a.  call temp:= `substring`(v5, v0) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L403440.  v5:= temp @kind object;
  #L403442.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L403448.  v0:= temp;
  #L40344a.  v1:= 2I;
  #L40344c.  if v0 <= v1 then goto L403476;
  #L403450.  v0:= 1I;
  #L403452.  call temp:= `charAt`(v5, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L403458.  v0:= temp;
  #L40345a.  v1:= 57I;
  #L40345e.  if v0 <= v1 then goto L403476;
  #L403462.  call temp:= `isDigit`(v0) @signature `Ljava/lang/Character;.isDigit:(C)Z` @kind static;
  #L403468.  v0:= temp;
  #L40346a.  if v0 == 0 then goto L403476;
  #L40346e.  call temp:= `b`(v5) @signature `Lorg/c/a/f;.b:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L403474.  v5:= temp @kind object;
  #L403476.  call temp:= `d`(v5) @signature `Lorg/c/a/f;.d:(Ljava/lang/String;)I` @kind static;
  #L40347c.  v5:= temp;
  #L40347e.  v0:= (`long`) v5 @kind i2l;
  #L403480.  v2:= 0L;
  #L403484.  v4:= lcmp(v0, v2);
  #L403488.  if v4 != 0 then goto L403492;
  #L40348c.  v5:= `@@org.c.a.f.a` @type ^`org.c.a.f` @kind object;
  #L403490.  return v5 @kind object;
  #L403492.  call temp:= `a`(v5) @signature `Lorg/c/a/f;.a:(I)Ljava/lang/String;` @kind static;
  #L403498.  v0:= temp @kind object;
  #L40349a.  call temp:= `a`(v0, v5) @signature `Lorg/c/a/f;.a:(Ljava/lang/String;I)Lorg/c/a/f;` @kind static;
  #L4034a0.  v5:= temp @kind object;
  #L4034a2.  return v5 @kind object;
  #L4034a4.  v0:= new `java.lang.IllegalArgumentException`;
  #L4034a8.  v1:= new `java.lang.StringBuilder`;
  #L4034ac.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4034b2.  v2:= "The datetime zone id '" @kind object;
  #L4034b6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4034bc.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4034c2.  v5:= "' is not recognised" @kind object;
  #L4034c6.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4034cc.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4034d2.  v5:= temp @kind object;
  #L4034d4.  call `<init>`(v0, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4034da.  throw v0;
}
procedure `java.lang.String` `b`(`java.lang.String` v3 @kind object) @signature `Lorg/c/a/f;.b:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L402f38.  v0:= new `java.lang.StringBuilder`;
  #L402f3c.  call `<init>`(v0, v3) @signature `Ljava/lang/StringBuilder;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L402f42.  v3:= 0I;
  #L402f44.  call temp:= `length`(v0) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L402f4a.  v1:= temp;
  #L402f4c.  if v3 >= v1 then goto L402f7a;
  #L402f50.  call temp:= `charAt`(v0, v3) @signature `Ljava/lang/StringBuilder;.charAt:(I)C` @kind virtual;
  #L402f56.  v1:= temp;
  #L402f58.  v2:= 10I;
  #L402f5c.  call temp:= `digit`(v1, v2) @signature `Ljava/lang/Character;.digit:(CI)I` @kind static;
  #L402f62.  v1:= temp;
  #L402f64.  if v1 < 0 then goto L402f74;
  #L402f68.  v1:= v1 + 48;
  #L402f6c.  v1:= (`char`) v1 @kind i2c;
  #L402f6e.  call `setCharAt`(v0, v3, v1) @signature `Ljava/lang/StringBuilder;.setCharAt:(IC)V` @kind virtual;
  #L402f74.  v3:= v3 + 1;
  #L402f78.  goto L402f44;
  #L402f7a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L402f80.  v3:= temp @kind object;
  #L402f82.  return v3 @kind object;
}
procedure `java.util.Set` `b`() @signature `Lorg/c/a/f;.b:()Ljava/util/Set;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L403068.  call temp:= `c`() @signature `Lorg/c/a/f;.c:()Lorg/c/a/f/f;` @kind static;
  #L40306e.  v0:= temp @kind object;
  #L403070.  call temp:= `a`(v0) @signature `Lorg/c/a/f/f;.a:()Ljava/util/Set;` @kind interface;
  #L403076.  v0:= temp @kind object;
  #L403078.  return v0 @kind object;
}
procedure `java.lang.String` `c`(`java.lang.String` v1 @kind object) @signature `Lorg/c/a/f;.c:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L403010.  v0:= `@@org.c.a.f$a.a` @type ^`java.util.Map` @kind object;
  #L403014.  call temp:= `get`(v0, v1) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L40301a.  v1:= temp @kind object;
  #L40301c.  v1:= (`java.lang.String`) v1 @kind object;
  #L403020.  return v1 @kind object;
}
procedure `org.c.a.f.f` `c`() @signature `Lorg/c/a/f;.c:()Lorg/c/a/f/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4036ac.  v0:= `@@org.c.a.f.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4036b0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4036b6.  v0:= temp @kind object;
  #L4036b8.  v0:= (`org.c.a.f.f`) v0 @kind object;
  #L4036bc.  if v0 != 0 then goto L4036ea;
  #L4036c0.  call temp:= `g`() @signature `Lorg/c/a/f;.g:()Lorg/c/a/f/f;` @kind static;
  #L4036c6.  v0:= temp @kind object;
  #L4036c8.  v1:= `@@org.c.a.f.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4036cc.  v2:= 0I;
  #L4036ce.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4036d4.  v1:= temp;
  #L4036d6.  if v1 != 0 then goto L4036ea;
  #L4036da.  v0:= `@@org.c.a.f.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4036de.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4036e4.  v0:= temp @kind object;
  #L4036e6.  v0:= (`org.c.a.f.f`) v0 @kind object;
  #L4036ea.  return v0 @kind object;
}
procedure `int` `d`(`java.lang.String` v2 @kind object) @signature `Lorg/c/a/f;.d:(Ljava/lang/String;)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L402cf0.  v0:= `@@org.c.a.f$a.b` @type ^`org.c.a.e.b` @kind object;
  #L402cf4.  call temp:= `a`(v0, v2) @signature `Lorg/c/a/e/b;.a:(Ljava/lang/String;)J` @kind virtual;
  #L402cfa.  v0:= temp @kind wide;
  #L402cfc.  v2:= (`int`) v0 @kind l2i;
  #L402cfe.  v2:= -v2 @kind int;
  #L402d00.  return v2;
}
procedure `org.c.a.f.e` `d`() @signature `Lorg/c/a/f;.d:()Lorg/c/a/f/e;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4034ec.  v0:= `@@org.c.a.f.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4034f0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4034f6.  v0:= temp @kind object;
  #L4034f8.  v0:= (`org.c.a.f.e`) v0 @kind object;
  #L4034fc.  if v0 != 0 then goto L40352a;
  #L403500.  call temp:= `h`() @signature `Lorg/c/a/f;.h:()Lorg/c/a/f/e;` @kind static;
  #L403506.  v0:= temp @kind object;
  #L403508.  v1:= `@@org.c.a.f.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40350c.  v2:= 0I;
  #L40350e.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L403514.  v1:= temp;
  #L403516.  if v1 != 0 then goto L40352a;
  #L40351a.  v0:= `@@org.c.a.f.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L40351e.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L403524.  v0:= temp @kind object;
  #L403526.  v0:= (`org.c.a.f.e`) v0 @kind object;
  #L40352a.  return v0 @kind object;
}
procedure `org.c.a.f.f` `g`() @signature `Lorg/c/a/f;.g:()Lorg/c/a/f/f;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4036fc.  v0:= "org.joda.time.DateTimeZone.Provider" @kind object;
  #L403700.  call temp:= `getProperty`(v0) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L403706.  v0:= temp @kind object;
  #L403708.  if v0 == 0 then goto L4037a4;
  #L40370c.  v1:= constclass @type ^`org.c.a.f` @kind object;
  #L403710.  call temp:= `getClassLoader`(v1) @signature `Ljava/lang/Class;.getClassLoader:()Ljava/lang/ClassLoader;` @kind virtual;
  #L403716.  v1:= temp @kind object;
  #L403718.  v2:= 0I;
  #L40371a.  call temp:= `forName`(v0, v2, v1) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;` @kind static;
  #L403720.  v0:= temp @kind object;
  #L403722.  v1:= constclass @type ^`org.c.a.f.f` @kind object;
  #L403726.  call temp:= `isAssignableFrom`(v1, v0) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L40372c.  v1:= temp;
  #L40372e.  if v1 != 0 then goto L403764;
  #L403732.  v0:= new `java.lang.IllegalArgumentException`;
  #L403736.  v1:= new `java.lang.StringBuilder`;
  #L40373a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L403740.  v2:= "System property referred to class that does not implement " @kind object;
  #L403744.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40374a.  v2:= constclass @type ^`org.c.a.f.f` @kind object;
  #L40374e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L403754.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L40375a.  v1:= temp @kind object;
  #L40375c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L403762.  throw v0;
  #L403764.  v1:= constclass @type ^`org.c.a.f.f` @kind object;
  #L403768.  call temp:= `asSubclass`(v0, v1) @signature `Ljava/lang/Class;.asSubclass:(Ljava/lang/Class;)Ljava/lang/Class;` @kind virtual;
  #L40376e.  v0:= temp @kind object;
  #L403770.  v1:= new `java.lang.Class`[v2];
  #L403774.  call temp:= `getConstructor`(v0, v1) @signature `Ljava/lang/Class;.getConstructor:([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;` @kind virtual;
  #L40377a.  v0:= temp @kind object;
  #L40377c.  v1:= new `java.lang.Object`[v2];
  #L403780.  call temp:= `newInstance`(v0, v1) @signature `Ljava/lang/reflect/Constructor;.newInstance:([Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L403786.  v0:= temp @kind object;
  #L403788.  v0:= (`org.c.a.f.f`) v0 @kind object;
  #L40378c.  call temp:= `a`(v0) @signature `Lorg/c/a/f;.a:(Lorg/c/a/f/f;)Lorg/c/a/f/f;` @kind static;
  #L403792.  v0:= temp @kind object;
  #L403794.  return v0 @kind object;
  #L403796.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L403798.  v1:= new `java.lang.RuntimeException`;
  #L40379c.  call `<init>`(v1, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L4037a2.  throw v1;
  #L4037a4.  v0:= "org.joda.time.DateTimeZone.Folder" @kind object;
  #L4037a8.  call temp:= `getProperty`(v0) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L4037ae.  v0:= temp @kind object;
  #L4037b0.  if v0 == 0 then goto L4037e0;
  #L4037b4.  v1:= new `org.c.a.f.h`;
  #L4037b8.  v2:= new `java.io.File`;
  #L4037bc.  call `<init>`(v2, v0) @signature `Ljava/io/File;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4037c2.  call `<init>`(v1, v2) @signature `Lorg/c/a/f/h;.<init>:(Ljava/io/File;)V` @kind direct;
  #L4037c8.  call temp:= `a`(v1) @signature `Lorg/c/a/f;.a:(Lorg/c/a/f/f;)Lorg/c/a/f/f;` @kind static;
  #L4037ce.  v0:= temp @kind object;
  #L4037d0.  return v0 @kind object;
  #L4037d2.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L4037d4.  v1:= new `java.lang.RuntimeException`;
  #L4037d8.  call `<init>`(v1, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L4037de.  throw v1;
  #L4037e0.  v0:= new `org.c.a.f.h`;
  #L4037e4.  v1:= "org/joda/time/tz/data" @kind object;
  #L4037e8.  call `<init>`(v0, v1) @signature `Lorg/c/a/f/h;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4037ee.  call temp:= `a`(v0) @signature `Lorg/c/a/f;.a:(Lorg/c/a/f/f;)Lorg/c/a/f/f;` @kind static;
  #L4037f4.  v0:= temp @kind object;
  #L4037f6.  return v0 @kind object;
  #L4037f8.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L4037fa.  call `printStackTrace`(v0) @signature `Ljava/lang/Exception;.printStackTrace:()V` @kind virtual;
  #L403800.  v0:= new `org.c.a.f.g`;
  #L403804.  call `<init>`(v0) @signature `Lorg/c/a/f/g;.<init>:()V` @kind direct;
  #L40380a.  return v0 @kind object;
  catch `java.lang.SecurityException` @[L4036fc..L403708] goto L4037a4;
  catch `java.lang.Exception` @[L40370c..L403794] goto L403796;
  catch `java.lang.SecurityException` @[L40370c..L403794] goto L4037a4;
  catch `java.lang.SecurityException` @[L403798..L4037a4] goto L4037a4;
  catch `java.lang.SecurityException` @[L4037a4..L4037b0] goto L4037e0;
  catch `java.lang.Exception` @[L4037b4..L4037d0] goto L4037d2;
  catch `java.lang.SecurityException` @[L4037b4..L4037d0] goto L4037e0;
  catch `java.lang.SecurityException` @[L4037d4..L4037e0] goto L4037e0;
  catch `java.lang.Exception` @[L4037e0..L4037f6] goto L4037f8;
}
procedure `org.c.a.f.e` `h`() @signature `Lorg/c/a/f;.h:()Lorg/c/a/f/e;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L40353c.  v0:= 0I;
  #L40353e.  v1:= "org.joda.time.DateTimeZone.NameProvider" @kind object;
  #L403542.  call temp:= `getProperty`(v1) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L403548.  v1:= temp @kind object;
  #L40354a.  if v1 == 0 then goto L4035e0;
  #L40354e.  v2:= constclass @type ^`org.c.a.f` @kind object;
  #L403552.  call temp:= `getClassLoader`(v2) @signature `Ljava/lang/Class;.getClassLoader:()Ljava/lang/ClassLoader;` @kind virtual;
  #L403558.  v2:= temp @kind object;
  #L40355a.  v3:= 0I;
  #L40355c.  call temp:= `forName`(v1, v3, v2) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;` @kind static;
  #L403562.  v1:= temp @kind object;
  #L403564.  v2:= constclass @type ^`org.c.a.f.e` @kind object;
  #L403568.  call temp:= `isAssignableFrom`(v2, v1) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L40356e.  v2:= temp;
  #L403570.  if v2 != 0 then goto L4035a6;
  #L403574.  v1:= new `java.lang.IllegalArgumentException`;
  #L403578.  v2:= new `java.lang.StringBuilder`;
  #L40357c.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L403582.  v3:= "System property referred to class that does not implement " @kind object;
  #L403586.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40358c.  v3:= constclass @type ^`org.c.a.f.e` @kind object;
  #L403590.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L403596.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L40359c.  v2:= temp @kind object;
  #L40359e.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4035a4.  throw v1;
  #L4035a6.  v2:= constclass @type ^`org.c.a.f.e` @kind object;
  #L4035aa.  call temp:= `asSubclass`(v1, v2) @signature `Ljava/lang/Class;.asSubclass:(Ljava/lang/Class;)Ljava/lang/Class;` @kind virtual;
  #L4035b0.  v1:= temp @kind object;
  #L4035b2.  v2:= new `java.lang.Class`[v3];
  #L4035b6.  call temp:= `getConstructor`(v1, v2) @signature `Ljava/lang/Class;.getConstructor:([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;` @kind virtual;
  #L4035bc.  v1:= temp @kind object;
  #L4035be.  v2:= new `java.lang.Object`[v3];
  #L4035c2.  call temp:= `newInstance`(v1, v2) @signature `Ljava/lang/reflect/Constructor;.newInstance:([Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4035c8.  v1:= temp @kind object;
  #L4035ca.  v1:= (`org.c.a.f.e`) v1 @kind object;
  #L4035ce.  v0:= v1 @kind object;
  #L4035d0.  goto L4035e0;
  #L4035d2.  v1:= Exception @type ^`java.lang.Exception` @kind object;
  #L4035d4.  v2:= new `java.lang.RuntimeException`;
  #L4035d8.  call `<init>`(v2, v1) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L4035de.  throw v2;
  #L4035e0.  if v0 != 0 then goto L4035ee;
  #L4035e4.  v0:= new `org.c.a.f.c`;
  #L4035e8.  call `<init>`(v0) @signature `Lorg/c/a/f/c;.<init>:()V` @kind direct;
  #L4035ee.  return v0 @kind object;
  catch `java.lang.SecurityException` @[L40353e..L40354a] goto L4035e0;
  catch `java.lang.Exception` @[L40354e..L4035ce] goto L4035d2;
  catch `java.lang.SecurityException` @[L40354e..L4035ce] goto L4035e0;
  catch `java.lang.SecurityException` @[L4035d4..L4035e0] goto L4035e0;
}
procedure `long` `a`(`org.c.a.f` v11 @kind this, `long` v12 , `boolean` v14 ) @signature `Lorg/c/a/f;.a:(JZ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L40308c.  call temp:= `b`(v11, v12) @signature `Lorg/c/a/f;.b:(J)I` @kind virtual;
  #L403092.  v0:= temp;
  #L403094.  v1:= (`long`) v0 @kind i2l;
  #L403096.  v3:= v12 - v1 @kind long;
  #L40309a.  call temp:= `b`(v11, v3) @signature `Lorg/c/a/f;.b:(J)I` @kind virtual;
  #L4030a0.  v1:= temp;
  #L4030a2.  if v0 == v1 then goto L403104;
  #L4030a6.  if v14 != 0 then goto L4030ae;
  #L4030aa.  if v0 >= 0 then goto L403104;
  #L4030ae.  call temp:= `g`(v11, v3) @signature `Lorg/c/a/f;.g:(J)J` @kind virtual;
  #L4030b4.  v5:= temp @kind wide;
  #L4030b6.  v2:= lcmp(v5, v3);
  #L4030ba.  v3:= 9223372036854775807L;
  #L4030c4.  if v2 != 0 then goto L4030ca;
  #L4030c8.  v5:= v3 @kind wide;
  #L4030ca.  v7:= (`long`) v1 @kind i2l;
  #L4030cc.  v9:= v12 - v7 @kind long;
  #L4030d0.  call temp:= `g`(v11, v9) @signature `Lorg/c/a/f;.g:(J)J` @kind virtual;
  #L4030d6.  v7:= temp @kind wide;
  #L4030d8.  v2:= lcmp(v7, v9);
  #L4030dc.  if v2 != 0 then goto L4030e2;
  #L4030e0.  goto L4030e4;
  #L4030e2.  v3:= v7 @kind wide;
  #L4030e4.  v2:= lcmp(v5, v3);
  #L4030e8.  if v2 == 0 then goto L403104;
  #L4030ec.  if v14 == 0 then goto L403106;
  #L4030f0.  v14:= new `org.c.a.j`;
  #L4030f4.  call temp:= `e`(v11) @signature `Lorg/c/a/f;.e:()Ljava/lang/String;` @kind virtual;
  #L4030fa.  v0:= temp @kind object;
  #L4030fc.  call `<init>`(v14, v12, v0) @signature `Lorg/c/a/j;.<init>:(JLjava/lang/String;)V` @kind direct;
  #L403102.  throw v14;
  #L403104.  v0:= v1;
  #L403106.  v0:= (`long`) v0 @kind i2l;
  #L403108.  v2:= v12 - v0 @kind long;
  #L40310c.  v4:= v12 ^~ v2 @kind long;
  #L403110.  v6:= 0L;
  #L403114.  v14:= lcmp(v4, v6);
  #L403118.  if v14 >= 0 then goto L403138;
  #L40311c.  v4:= v12 ^~ v0 @kind long;
  #L403120.  v12:= lcmp(v4, v6);
  #L403124.  if v12 >= 0 then goto L403138;
  #L403128.  v12:= new `java.lang.ArithmeticException`;
  #L40312c.  v13:= "Subtracting time zone offset caused overflow" @kind object;
  #L403130.  call `<init>`(v12, v13) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L403136.  throw v12;
  #L403138.  return v2 @kind wide;
}
procedure `long` `a`(`org.c.a.f` v4 @kind this, `long` v5 , `boolean` v7 , `long` v8 ) @signature `Lorg/c/a/f;.a:(JZJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L40314c.  call temp:= `b`(v4, v8) @signature `Lorg/c/a/f;.b:(J)I` @kind virtual;
  #L403152.  v8:= temp;
  #L403154.  v0:= (`long`) v8 @kind i2l;
  #L403156.  v2:= v5 - v0 @kind long;
  #L40315a.  call temp:= `b`(v4, v2) @signature `Lorg/c/a/f;.b:(J)I` @kind virtual;
  #L403160.  v9:= temp;
  #L403162.  if v9 != v8 then goto L403168;
  #L403166.  return v2 @kind wide;
  #L403168.  call temp:= `a`(v4, v5, v7) @signature `Lorg/c/a/f;.a:(JZ)J` @kind virtual;
  #L40316e.  v5:= temp @kind wide;
  #L403170.  return v5 @kind wide;
}
procedure `long` `a`(`org.c.a.f` v6 @kind this, `org.c.a.f` v7 @kind object, `long` v8 ) @signature `Lorg/c/a/f;.a:(Lorg/c/a/f;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L403184.  if v7 != 0 then goto L403190;
  #L403188.  call temp:= `a`() @signature `Lorg/c/a/f;.a:()Lorg/c/a/f;` @kind static;
  #L40318e.  v7:= temp @kind object;
  #L403190.  v0:= v7 @kind object;
  #L403192.  if v0 != v6 then goto L403198;
  #L403196.  return v8 @kind wide;
  #L403198.  call temp:= `f`(v6, v8) @signature `Lorg/c/a/f;.f:(J)J` @kind virtual;
  #L40319e.  v1:= temp @kind wide;
  #L4031a0.  v3:= 0I;
  #L4031a2.  v4:= v8 @kind wide;
  #L4031a4.  call temp:= `a`(v0, v1, v3, v4) @signature `Lorg/c/a/f;.a:(JZJ)J` @kind virtual;
  #L4031aa.  v7:= temp @kind wide;
  #L4031ac.  return v7 @kind wide;
}
procedure `java.lang.String` `a`(`long` v0 ) @signature `Lorg/c/a/f;.a:(J)Ljava/lang/String;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.String` `a`(`org.c.a.f` v4 @kind this, `long` v5 , `java.util.Locale` v7 @kind object) @signature `Lorg/c/a/f;.a:(JLjava/util/Locale;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L402ebc.  if v7 != 0 then goto L402ec8;
  #L402ec0.  call temp:= `getDefault`() @signature `Ljava/util/Locale;.getDefault:()Ljava/util/Locale;` @kind static;
  #L402ec6.  v7:= temp @kind object;
  #L402ec8.  call temp:= `a`(v4, v5) @signature `Lorg/c/a/f;.a:(J)Ljava/lang/String;` @kind virtual;
  #L402ece.  v0:= temp @kind object;
  #L402ed0.  if v0 != 0 then goto L402eda;
  #L402ed4.  v5:= v4.`org.c.a.f.e` @type ^`java.lang.String` @kind object;
  #L402ed8.  return v5 @kind object;
  #L402eda.  call temp:= `d`() @signature `Lorg/c/a/f;.d:()Lorg/c/a/f/e;` @kind static;
  #L402ee0.  v1:= temp @kind object;
  #L402ee2.  v2:= instanceof @variable v1 @type ^`org.c.a.f.c` @kind boolean;
  #L402ee6.  if v2 == 0 then goto L402f04;
  #L402eea.  v1:= (`org.c.a.f.c`) v1 @kind object;
  #L402eee.  v2:= v4.`org.c.a.f.e` @type ^`java.lang.String` @kind object;
  #L402ef2.  call temp:= `d`(v4, v5) @signature `Lorg/c/a/f;.d:(J)Z` @kind virtual;
  #L402ef8.  v3:= temp;
  #L402efa.  call temp:= `a`(v1, v7, v2, v0, v3) @signature `Lorg/c/a/f/c;.a:(Ljava/util/Locale;Ljava/lang/String;Ljava/lang/String;Z)Ljava/lang/String;` @kind virtual;
  #L402f00.  v7:= temp @kind object;
  #L402f02.  goto L402f10;
  #L402f04.  v2:= v4.`org.c.a.f.e` @type ^`java.lang.String` @kind object;
  #L402f08.  call temp:= `a`(v1, v7, v2, v0) @signature `Lorg/c/a/f/e;.a:(Ljava/util/Locale;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L402f0e.  v7:= temp @kind object;
  #L402f10.  if v7 == 0 then goto L402f16;
  #L402f14.  return v7 @kind object;
  #L402f16.  call temp:= `b`(v4, v5) @signature `Lorg/c/a/f;.b:(J)I` @kind virtual;
  #L402f1c.  v5:= temp;
  #L402f1e.  call temp:= `a`(v5) @signature `Lorg/c/a/f;.a:(I)Ljava/lang/String;` @kind static;
  #L402f24.  v5:= temp @kind object;
  #L402f26.  return v5 @kind object;
}
procedure `int` `b`(`long` v0 ) @signature `Lorg/c/a/f;.b:(J)I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.String` `b`(`org.c.a.f` v4 @kind this, `long` v5 , `java.util.Locale` v7 @kind object) @signature `Lorg/c/a/f;.b:(JLjava/util/Locale;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L402f94.  if v7 != 0 then goto L402fa0;
  #L402f98.  call temp:= `getDefault`() @signature `Ljava/util/Locale;.getDefault:()Ljava/util/Locale;` @kind static;
  #L402f9e.  v7:= temp @kind object;
  #L402fa0.  call temp:= `a`(v4, v5) @signature `Lorg/c/a/f;.a:(J)Ljava/lang/String;` @kind virtual;
  #L402fa6.  v0:= temp @kind object;
  #L402fa8.  if v0 != 0 then goto L402fb2;
  #L402fac.  v5:= v4.`org.c.a.f.e` @type ^`java.lang.String` @kind object;
  #L402fb0.  return v5 @kind object;
  #L402fb2.  call temp:= `d`() @signature `Lorg/c/a/f;.d:()Lorg/c/a/f/e;` @kind static;
  #L402fb8.  v1:= temp @kind object;
  #L402fba.  v2:= instanceof @variable v1 @type ^`org.c.a.f.c` @kind boolean;
  #L402fbe.  if v2 == 0 then goto L402fdc;
  #L402fc2.  v1:= (`org.c.a.f.c`) v1 @kind object;
  #L402fc6.  v2:= v4.`org.c.a.f.e` @type ^`java.lang.String` @kind object;
  #L402fca.  call temp:= `d`(v4, v5) @signature `Lorg/c/a/f;.d:(J)Z` @kind virtual;
  #L402fd0.  v3:= temp;
  #L402fd2.  call temp:= `b`(v1, v7, v2, v0, v3) @signature `Lorg/c/a/f/c;.b:(Ljava/util/Locale;Ljava/lang/String;Ljava/lang/String;Z)Ljava/lang/String;` @kind virtual;
  #L402fd8.  v7:= temp @kind object;
  #L402fda.  goto L402fe8;
  #L402fdc.  v2:= v4.`org.c.a.f.e` @type ^`java.lang.String` @kind object;
  #L402fe0.  call temp:= `b`(v1, v7, v2, v0) @signature `Lorg/c/a/f/e;.b:(Ljava/util/Locale;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L402fe6.  v7:= temp @kind object;
  #L402fe8.  if v7 == 0 then goto L402fee;
  #L402fec.  return v7 @kind object;
  #L402fee.  call temp:= `b`(v4, v5) @signature `Lorg/c/a/f;.b:(J)I` @kind virtual;
  #L402ff4.  v5:= temp;
  #L402ff6.  call temp:= `a`(v5) @signature `Lorg/c/a/f;.a:(I)Ljava/lang/String;` @kind static;
  #L402ffc.  v5:= temp @kind object;
  #L402ffe.  return v5 @kind object;
}
procedure `int` `c`(`long` v0 ) @signature `Lorg/c/a/f;.c:(J)I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `d`(`org.c.a.f` v1 @kind this, `long` v2 ) @signature `Lorg/c/a/f;.d:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L402cc4.  call temp:= `b`(v1, v2) @signature `Lorg/c/a/f;.b:(J)I` @kind virtual;
  #L402cca.  v0:= temp;
  #L402ccc.  call temp:= `c`(v1, v2) @signature `Lorg/c/a/f;.c:(J)I` @kind virtual;
  #L402cd2.  v2:= temp;
  #L402cd4.  if v0 != v2 then goto L402cdc;
  #L402cd8.  v2:= 1I;
  #L402cda.  goto L402cde;
  #L402cdc.  v2:= 0I;
  #L402cde.  return v2;
}
procedure `int` `e`(`org.c.a.f` v11 @kind this, `long` v12 ) @signature `Lorg/c/a/f;.e:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L402d14.  call temp:= `b`(v11, v12) @signature `Lorg/c/a/f;.b:(J)I` @kind virtual;
  #L402d1a.  v0:= temp;
  #L402d1c.  v1:= (`long`) v0 @kind i2l;
  #L402d1e.  v3:= v12 - v1 @kind long;
  #L402d22.  call temp:= `b`(v11, v3) @signature `Lorg/c/a/f;.b:(J)I` @kind virtual;
  #L402d28.  v1:= temp;
  #L402d2a.  if v0 == v1 then goto L402d74;
  #L402d2e.  v2:= v0 - v1 @kind int;
  #L402d32.  if v2 >= 0 then goto L402da4;
  #L402d36.  call temp:= `g`(v11, v3) @signature `Lorg/c/a/f;.g:(J)J` @kind virtual;
  #L402d3c.  v5:= temp @kind wide;
  #L402d3e.  v2:= lcmp(v5, v3);
  #L402d42.  v3:= 9223372036854775807L;
  #L402d4c.  if v2 != 0 then goto L402d52;
  #L402d50.  v5:= v3 @kind wide;
  #L402d52.  v7:= (`long`) v1 @kind i2l;
  #L402d54.  v9:= v12 - v7 @kind long;
  #L402d58.  call temp:= `g`(v11, v9) @signature `Lorg/c/a/f;.g:(J)J` @kind virtual;
  #L402d5e.  v12:= temp @kind wide;
  #L402d60.  v2:= lcmp(v12, v9);
  #L402d64.  if v2 != 0 then goto L402d6a;
  #L402d68.  v12:= v3 @kind wide;
  #L402d6a.  v2:= lcmp(v5, v12);
  #L402d6e.  if v2 == 0 then goto L402da4;
  #L402d72.  return v0;
  #L402d74.  if v0 < 0 then goto L402da4;
  #L402d78.  call temp:= `h`(v11, v3) @signature `Lorg/c/a/f;.h:(J)J` @kind virtual;
  #L402d7e.  v12:= temp @kind wide;
  #L402d80.  v2:= lcmp(v12, v3);
  #L402d84.  if v2 >= 0 then goto L402da4;
  #L402d88.  call temp:= `b`(v11, v12) @signature `Lorg/c/a/f;.b:(J)I` @kind virtual;
  #L402d8e.  v2:= temp;
  #L402d90.  v0:= v2 - v0 @kind int;
  #L402d94.  v5:= v3 - v12 @kind long;
  #L402d98.  v12:= (`long`) v0 @kind i2l;
  #L402d9a.  v0:= lcmp(v5, v12);
  #L402d9e.  if v0 > 0 then goto L402da4;
  #L402da2.  return v2;
  #L402da4.  return v1;
}
procedure `java.lang.String` `e`(`org.c.a.f` v1 @kind this) @signature `Lorg/c/a/f;.e:()Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L403034.  v0:= v1.`org.c.a.f.e` @type ^`java.lang.String` @kind object;
  #L403038.  return v0 @kind object;
}
procedure `boolean` `equals`(`java.lang.Object` v0 @kind object) @signature `Lorg/c/a/f;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `long` `f`(`org.c.a.f` v9 @kind this, `long` v10 ) @signature `Lorg/c/a/f;.f:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4031c0.  call temp:= `b`(v9, v10) @signature `Lorg/c/a/f;.b:(J)I` @kind virtual;
  #L4031c6.  v0:= temp;
  #L4031c8.  v0:= (`long`) v0 @kind i2l;
  #L4031ca.  v2:= v10 + v0 @kind long;
  #L4031ce.  v4:= v10 ^~ v2 @kind long;
  #L4031d2.  v6:= 0L;
  #L4031d6.  v8:= lcmp(v4, v6);
  #L4031da.  if v8 >= 0 then goto L4031fa;
  #L4031de.  v4:= v10 ^~ v0 @kind long;
  #L4031e2.  v10:= lcmp(v4, v6);
  #L4031e6.  if v10 < 0 then goto L4031fa;
  #L4031ea.  v10:= new `java.lang.ArithmeticException`;
  #L4031ee.  v11:= "Adding time zone offset caused overflow" @kind object;
  #L4031f2.  call `<init>`(v10, v11) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4031f8.  throw v10;
  #L4031fa.  return v2 @kind wide;
}
procedure `boolean` `f`() @signature `Lorg/c/a/f;.f:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `long` `g`(`long` v0 ) @signature `Lorg/c/a/f;.g:(J)J` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `long` `h`(`long` v0 ) @signature `Lorg/c/a/f;.h:(J)J` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `hashCode`(`org.c.a.f` v1 @kind this) @signature `Lorg/c/a/f;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L402db8.  call temp:= `e`(v1) @signature `Lorg/c/a/f;.e:()Ljava/lang/String;` @kind virtual;
  #L402dbe.  v0:= temp @kind object;
  #L402dc0.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L402dc6.  v0:= temp;
  #L402dc8.  v0:= v0 + 57;
  #L402dcc.  return v0;
}
procedure `java.lang.String` `toString`(`org.c.a.f` v1 @kind this) @signature `Lorg/c/a/f;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40304c.  call temp:= `e`(v1) @signature `Lorg/c/a/f;.e:()Ljava/lang/String;` @kind virtual;
  #L403052.  v0:= temp @kind object;
  #L403054.  return v0 @kind object;
}
procedure `java.lang.Object` `writeReplace`(`org.c.a.f` v2 @kind this) @signature `Lorg/c/a/f;.writeReplace:()Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L402de0.  v0:= new `org.c.a.f$b`;
  #L402de4.  v1:= v2.`org.c.a.f.e` @type ^`java.lang.String` @kind object;
  #L402de8.  call `<init>`(v0, v1) @signature `Lorg/c/a/f$b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L402dee.  return v0 @kind object;
}
