record `org.c.a.d.p` @kind class @AccessFlag PUBLIC extends `org.c.a.d.e` @kind class {
  `int` `org.c.a.d.p.a` @AccessFlag PRIVATE_FINAL;
}
global `long` `@@org.c.a.d.p.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.c.a.d.p` v0 @kind this, `org.c.a.g` v1 @kind object, `org.c.a.h` v2 @kind object, `int` v3 ) @signature `Lorg/c/a/d/p;.<init>:(Lorg/c/a/g;Lorg/c/a/h;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f7b40.  call `<init>`(v0, v1, v2) @signature `Lorg/c/a/d/e;.<init>:(Lorg/c/a/g;Lorg/c/a/h;)V` @kind direct;
  #L3f7b46.  if v3 == 0 then goto L3f7b58;
  #L3f7b4a.  v1:= 1I;
  #L3f7b4c.  if v3 != v1 then goto L3f7b52;
  #L3f7b50.  goto L3f7b58;
  #L3f7b52.  v0.`org.c.a.d.p.a` @type ^`int` := v3;
  #L3f7b56.  return @kind void;
  #L3f7b58.  v1:= new `java.lang.IllegalArgumentException`;
  #L3f7b5c.  v2:= "The scalar must not be 0 or 1" @kind object;
  #L3f7b60.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f7b66.  throw v1;
}
procedure `long` `a`(`org.c.a.d.p` v4 @kind this, `long` v5 , `int` v7 ) @signature `Lorg/c/a/d/p;.a:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f7a88.  v0:= (`long`) v7 @kind i2l;
  #L3f7a8a.  v7:= v4.`org.c.a.d.p.a` @type ^`int`;
  #L3f7a8e.  v2:= (`long`) v7 @kind i2l;
  #L3f7a90.  v0:= v0 * v2 @kind long;
  #L3f7a94.  call temp:= `f`(v4) @signature `Lorg/c/a/d/p;.f:()Lorg/c/a/g;` @kind virtual;
  #L3f7a9a.  v7:= temp @kind object;
  #L3f7a9c.  call temp:= `a`(v7, v5, v0) @signature `Lorg/c/a/g;.a:(JJ)J` @kind virtual;
  #L3f7aa2.  v5:= temp @kind wide;
  #L3f7aa4.  return v5 @kind wide;
}
procedure `long` `a`(`org.c.a.d.p` v1 @kind this, `long` v2 , `long` v4 ) @signature `Lorg/c/a/d/p;.a:(JJ)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f7ab8.  v0:= v1.`org.c.a.d.p.a` @type ^`int`;
  #L3f7abc.  call temp:= `a`(v4, v0) @signature `Lorg/c/a/d/h;.a:(JI)J` @kind static;
  #L3f7ac2.  v4:= temp @kind wide;
  #L3f7ac4.  call temp:= `f`(v1) @signature `Lorg/c/a/d/p;.f:()Lorg/c/a/g;` @kind virtual;
  #L3f7aca.  v0:= temp @kind object;
  #L3f7acc.  call temp:= `a`(v0, v2, v4) @signature `Lorg/c/a/g;.a:(JJ)J` @kind virtual;
  #L3f7ad2.  v2:= temp @kind wide;
  #L3f7ad4.  return v2 @kind wide;
}
procedure `int` `b`(`org.c.a.d.p` v1 @kind this, `long` v2 , `long` v4 ) @signature `Lorg/c/a/d/p;.b:(JJ)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f7a14.  call temp:= `f`(v1) @signature `Lorg/c/a/d/p;.f:()Lorg/c/a/g;` @kind virtual;
  #L3f7a1a.  v0:= temp @kind object;
  #L3f7a1c.  call temp:= `b`(v0, v2, v4) @signature `Lorg/c/a/g;.b:(JJ)I` @kind virtual;
  #L3f7a22.  v2:= temp;
  #L3f7a24.  v3:= v1.`org.c.a.d.p.a` @type ^`int`;
  #L3f7a28.  v2:= v2 / v3 @kind int;
  #L3f7a2a.  return v2;
}
procedure `long` `c`(`org.c.a.d.p` v1 @kind this, `long` v2 , `long` v4 ) @signature `Lorg/c/a/d/p;.c:(JJ)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f7ae8.  call temp:= `f`(v1) @signature `Lorg/c/a/d/p;.f:()Lorg/c/a/g;` @kind virtual;
  #L3f7aee.  v0:= temp @kind object;
  #L3f7af0.  call temp:= `c`(v0, v2, v4) @signature `Lorg/c/a/g;.c:(JJ)J` @kind virtual;
  #L3f7af6.  v2:= temp @kind wide;
  #L3f7af8.  v4:= v1.`org.c.a.d.p.a` @type ^`int`;
  #L3f7afc.  v4:= (`long`) v4 @kind i2l;
  #L3f7afe.  v2:= v2 / v4 @kind long;
  #L3f7b00.  return v2 @kind wide;
}
procedure `long` `d`(`org.c.a.d.p` v4 @kind this) @signature `Lorg/c/a/d/p;.d:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f7b14.  call temp:= `f`(v4) @signature `Lorg/c/a/d/p;.f:()Lorg/c/a/g;` @kind virtual;
  #L3f7b1a.  v0:= temp @kind object;
  #L3f7b1c.  call temp:= `d`(v0) @signature `Lorg/c/a/g;.d:()J` @kind virtual;
  #L3f7b22.  v0:= temp @kind wide;
  #L3f7b24.  v2:= v4.`org.c.a.d.p.a` @type ^`int`;
  #L3f7b28.  v2:= (`long`) v2 @kind i2l;
  #L3f7b2a.  v0:= v0 * v2 @kind long;
  #L3f7b2e.  return v0 @kind wide;
}
procedure `boolean` `equals`(`org.c.a.d.p` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lorg/c/a/d/p;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f79a8.  v0:= 1I;
  #L3f79aa.  if v4 != v5 then goto L3f79b0;
  #L3f79ae.  return v0;
  #L3f79b0.  v1:= instanceof @variable v5 @type ^`org.c.a.d.p` @kind boolean;
  #L3f79b4.  v2:= 0I;
  #L3f79b6.  if v1 == 0 then goto L3f7a00;
  #L3f79ba.  v5:= (`org.c.a.d.p`) v5 @kind object;
  #L3f79be.  call temp:= `f`(v4) @signature `Lorg/c/a/d/p;.f:()Lorg/c/a/g;` @kind virtual;
  #L3f79c4.  v1:= temp @kind object;
  #L3f79c6.  call temp:= `f`(v5) @signature `Lorg/c/a/d/p;.f:()Lorg/c/a/g;` @kind virtual;
  #L3f79cc.  v3:= temp @kind object;
  #L3f79ce.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f79d4.  v1:= temp;
  #L3f79d6.  if v1 == 0 then goto L3f79fc;
  #L3f79da.  call temp:= `a`(v4) @signature `Lorg/c/a/d/p;.a:()Lorg/c/a/h;` @kind virtual;
  #L3f79e0.  v1:= temp @kind object;
  #L3f79e2.  call temp:= `a`(v5) @signature `Lorg/c/a/d/p;.a:()Lorg/c/a/h;` @kind virtual;
  #L3f79e8.  v3:= temp @kind object;
  #L3f79ea.  if v1 != v3 then goto L3f79fc;
  #L3f79ee.  v1:= v4.`org.c.a.d.p.a` @type ^`int`;
  #L3f79f2.  v5:= v5.`org.c.a.d.p.a` @type ^`int`;
  #L3f79f6.  if v1 != v5 then goto L3f79fc;
  #L3f79fa.  goto L3f79fe;
  #L3f79fc.  v0:= 0I;
  #L3f79fe.  return v0;
  #L3f7a00.  return v2;
}
procedure `int` `hashCode`(`org.c.a.d.p` v6 @kind this) @signature `Lorg/c/a/d/p;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f7a3c.  v0:= v6.`org.c.a.d.p.a` @type ^`int`;
  #L3f7a40.  v0:= (`long`) v0 @kind i2l;
  #L3f7a42.  v2:= 32I;
  #L3f7a46.  v2:= v0 ^>> v2 @kind long;
  #L3f7a4a.  v4:= v0 ^~ v2 @kind long;
  #L3f7a4e.  v0:= (`int`) v4 @kind l2i;
  #L3f7a50.  call temp:= `a`(v6) @signature `Lorg/c/a/d/p;.a:()Lorg/c/a/h;` @kind virtual;
  #L3f7a56.  v1:= temp @kind object;
  #L3f7a58.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3f7a5e.  v1:= temp;
  #L3f7a60.  v0:= v0 + v1 @kind int;
  #L3f7a62.  call temp:= `f`(v6) @signature `Lorg/c/a/d/p;.f:()Lorg/c/a/g;` @kind virtual;
  #L3f7a68.  v1:= temp @kind object;
  #L3f7a6a.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3f7a70.  v1:= temp;
  #L3f7a72.  v0:= v0 + v1 @kind int;
  #L3f7a74.  return v0;
}
