record `org.c.a.d.o` @kind class @AccessFlag PUBLIC extends `org.c.a.d.d` @kind class {
  `int` `org.c.a.d.o.a` @AccessFlag FINAL;
  `org.c.a.g` `org.c.a.d.o.b` @AccessFlag FINAL;
  `org.c.a.g` `org.c.a.d.o.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`org.c.a.d.o` v0 @kind this, `org.c.a.c` v1 @kind object, `org.c.a.g` v2 @kind object, `org.c.a.d` v3 @kind object, `int` v4 ) @signature `Lorg/c/a/d/o;.<init>:(Lorg/c/a/c;Lorg/c/a/g;Lorg/c/a/d;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f78e8.  call `<init>`(v0, v1, v3) @signature `Lorg/c/a/d/d;.<init>:(Lorg/c/a/c;Lorg/c/a/d;)V` @kind direct;
  #L3f78ee.  v3:= 2I;
  #L3f78f0.  if v4 >= v3 then goto L3f7904;
  #L3f78f4.  v1:= new `java.lang.IllegalArgumentException`;
  #L3f78f8.  v2:= "The divisor must be at least 2" @kind object;
  #L3f78fc.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f7902.  throw v1;
  #L3f7904.  v0.`org.c.a.d.o.c` @type ^`org.c.a.g` := v2 @kind object;
  #L3f7908.  call temp:= `e`(v1) @signature `Lorg/c/a/c;.e:()Lorg/c/a/g;` @kind virtual;
  #L3f790e.  v1:= temp @kind object;
  #L3f7910.  v0.`org.c.a.d.o.b` @type ^`org.c.a.g` := v1 @kind object;
  #L3f7914.  v0.`org.c.a.d.o.a` @type ^`int` := v4;
  #L3f7918.  return @kind void;
}
procedure `void` `<init>`(`org.c.a.d.o` v1 @kind this, `org.c.a.d.g` v2 @kind object) @signature `Lorg/c/a/d/o;.<init>:(Lorg/c/a/d/g;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f792c.  call temp:= `a`(v2) @signature `Lorg/c/a/d/g;.a:()Lorg/c/a/d;` @kind virtual;
  #L3f7932.  v0:= temp @kind object;
  #L3f7934.  call `<init>`(v1, v2, v0) @signature `Lorg/c/a/d/o;.<init>:(Lorg/c/a/d/g;Lorg/c/a/d;)V` @kind direct;
  #L3f793a.  return @kind void;
}
procedure `void` `<init>`(`org.c.a.d.o` v1 @kind this, `org.c.a.d.g` v2 @kind object, `org.c.a.d` v3 @kind object) @signature `Lorg/c/a/d/o;.<init>:(Lorg/c/a/d/g;Lorg/c/a/d;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f794c.  call temp:= `j`(v2) @signature `Lorg/c/a/d/g;.j:()Lorg/c/a/c;` @kind virtual;
  #L3f7952.  v0:= temp @kind object;
  #L3f7954.  call temp:= `e`(v0) @signature `Lorg/c/a/c;.e:()Lorg/c/a/g;` @kind virtual;
  #L3f795a.  v0:= temp @kind object;
  #L3f795c.  call `<init>`(v1, v2, v0, v3) @signature `Lorg/c/a/d/o;.<init>:(Lorg/c/a/d/g;Lorg/c/a/g;Lorg/c/a/d;)V` @kind direct;
  #L3f7962.  return @kind void;
}
procedure `void` `<init>`(`org.c.a.d.o` v1 @kind this, `org.c.a.d.g` v2 @kind object, `org.c.a.g` v3 @kind object, `org.c.a.d` v4 @kind object) @signature `Lorg/c/a/d/o;.<init>:(Lorg/c/a/d/g;Lorg/c/a/g;Lorg/c/a/d;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f7974.  call temp:= `j`(v2) @signature `Lorg/c/a/d/g;.j:()Lorg/c/a/c;` @kind virtual;
  #L3f797a.  v0:= temp @kind object;
  #L3f797c.  call `<init>`(v1, v0, v4) @signature `Lorg/c/a/d/d;.<init>:(Lorg/c/a/c;Lorg/c/a/d;)V` @kind direct;
  #L3f7982.  v4:= v2.`org.c.a.d.g.a` @type ^`int`;
  #L3f7986.  v1.`org.c.a.d.o.a` @type ^`int` := v4;
  #L3f798a.  v1.`org.c.a.d.o.b` @type ^`org.c.a.g` := v3 @kind object;
  #L3f798e.  v2:= v2.`org.c.a.d.g.b` @type ^`org.c.a.g` @kind object;
  #L3f7992.  v1.`org.c.a.d.o.c` @type ^`org.c.a.g` := v2 @kind object;
  #L3f7996.  return @kind void;
}
procedure `int` `a`(`org.c.a.d.o` v1 @kind this, `int` v2 ) @signature `Lorg/c/a/d/o;.a:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3f76ec.  if v2 < 0 then goto L3f76f8;
  #L3f76f0.  v0:= v1.`org.c.a.d.o.a` @type ^`int`;
  #L3f76f4.  v2:= v2 / v0 @kind int;
  #L3f76f6.  return v2;
  #L3f76f8.  v2:= v2 + 1;
  #L3f76fc.  v0:= v1.`org.c.a.d.o.a` @type ^`int`;
  #L3f7700.  v2:= v2 / v0 @kind int;
  #L3f7702.  v2:= v2 + -1;
  #L3f7706.  return v2;
}
procedure `int` `a`(`org.c.a.d.o` v1 @kind this, `long` v2 ) @signature `Lorg/c/a/d/o;.a:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f7718.  call temp:= `j`(v1) @signature `Lorg/c/a/d/o;.j:()Lorg/c/a/c;` @kind virtual;
  #L3f771e.  v0:= temp @kind object;
  #L3f7720.  call temp:= `a`(v0, v2) @signature `Lorg/c/a/c;.a:(J)I` @kind virtual;
  #L3f7726.  v2:= temp;
  #L3f7728.  if v2 < 0 then goto L3f7734;
  #L3f772c.  v3:= v1.`org.c.a.d.o.a` @type ^`int`;
  #L3f7730.  v2:= v2 %% v3 @kind int;
  #L3f7732.  return v2;
  #L3f7734.  v3:= v1.`org.c.a.d.o.a` @type ^`int`;
  #L3f7738.  v3:= v3 + -1;
  #L3f773c.  v2:= v2 + 1;
  #L3f7740.  v0:= v1.`org.c.a.d.o.a` @type ^`int`;
  #L3f7744.  v2:= v2 %% v0 @kind int;
  #L3f7746.  v3:= v3 + v2 @kind int;
  #L3f7748.  return v3;
}
procedure `long` `b`(`org.c.a.d.o` v3 @kind this, `long` v4 , `int` v6 ) @signature `Lorg/c/a/d/o;.b:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f778c.  v0:= v3.`org.c.a.d.o.a` @type ^`int`;
  #L3f7790.  v0:= v0 + -1;
  #L3f7794.  v1:= 0I;
  #L3f7796.  call `a`(v3, v6, v1, v0) @signature `Lorg/c/a/d/h;.a:(Lorg/c/a/c;III)V` @kind static;
  #L3f779c.  call temp:= `j`(v3) @signature `Lorg/c/a/d/o;.j:()Lorg/c/a/c;` @kind virtual;
  #L3f77a2.  v0:= temp @kind object;
  #L3f77a4.  call temp:= `a`(v0, v4) @signature `Lorg/c/a/c;.a:(J)I` @kind virtual;
  #L3f77aa.  v0:= temp;
  #L3f77ac.  call temp:= `a`(v3, v0) @signature `Lorg/c/a/d/o;.a:(I)I` @kind direct;
  #L3f77b2.  v0:= temp;
  #L3f77b4.  call temp:= `j`(v3) @signature `Lorg/c/a/d/o;.j:()Lorg/c/a/c;` @kind virtual;
  #L3f77ba.  v1:= temp @kind object;
  #L3f77bc.  v2:= v3.`org.c.a.d.o.a` @type ^`int`;
  #L3f77c0.  v0:= v0 * v2 @kind int;
  #L3f77c4.  v0:= v0 + v6 @kind int;
  #L3f77c6.  call temp:= `b`(v1, v4, v0) @signature `Lorg/c/a/c;.b:(JI)J` @kind virtual;
  #L3f77cc.  v4:= temp @kind wide;
  #L3f77ce.  return v4 @kind wide;
}
procedure `long` `d`(`org.c.a.d.o` v1 @kind this, `long` v2 ) @signature `Lorg/c/a/d/o;.d:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f77e0.  call temp:= `j`(v1) @signature `Lorg/c/a/d/o;.j:()Lorg/c/a/c;` @kind virtual;
  #L3f77e6.  v0:= temp @kind object;
  #L3f77e8.  call temp:= `d`(v0, v2) @signature `Lorg/c/a/c;.d:(J)J` @kind virtual;
  #L3f77ee.  v2:= temp @kind wide;
  #L3f77f0.  return v2 @kind wide;
}
procedure `long` `e`(`org.c.a.d.o` v1 @kind this, `long` v2 ) @signature `Lorg/c/a/d/o;.e:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f7804.  call temp:= `j`(v1) @signature `Lorg/c/a/d/o;.j:()Lorg/c/a/c;` @kind virtual;
  #L3f780a.  v0:= temp @kind object;
  #L3f780c.  call temp:= `e`(v0, v2) @signature `Lorg/c/a/c;.e:(J)J` @kind virtual;
  #L3f7812.  v2:= temp @kind wide;
  #L3f7814.  return v2 @kind wide;
}
procedure `org.c.a.g` `e`(`org.c.a.d.o` v1 @kind this) @signature `Lorg/c/a/d/o;.e:()Lorg/c/a/g;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f78b8.  v0:= v1.`org.c.a.d.o.b` @type ^`org.c.a.g` @kind object;
  #L3f78bc.  return v0 @kind object;
}
procedure `long` `f`(`org.c.a.d.o` v1 @kind this, `long` v2 ) @signature `Lorg/c/a/d/o;.f:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f7828.  call temp:= `j`(v1) @signature `Lorg/c/a/d/o;.j:()Lorg/c/a/c;` @kind virtual;
  #L3f782e.  v0:= temp @kind object;
  #L3f7830.  call temp:= `f`(v0, v2) @signature `Lorg/c/a/c;.f:(J)J` @kind virtual;
  #L3f7836.  v2:= temp @kind wide;
  #L3f7838.  return v2 @kind wide;
}
procedure `org.c.a.g` `f`(`org.c.a.d.o` v1 @kind this) @signature `Lorg/c/a/d/o;.f:()Lorg/c/a/g;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f78d0.  v0:= v1.`org.c.a.d.o.c` @type ^`org.c.a.g` @kind object;
  #L3f78d4.  return v0 @kind object;
}
procedure `long` `g`(`org.c.a.d.o` v1 @kind this, `long` v2 ) @signature `Lorg/c/a/d/o;.g:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f784c.  call temp:= `j`(v1) @signature `Lorg/c/a/d/o;.j:()Lorg/c/a/c;` @kind virtual;
  #L3f7852.  v0:= temp @kind object;
  #L3f7854.  call temp:= `g`(v0, v2) @signature `Lorg/c/a/c;.g:(J)J` @kind virtual;
  #L3f785a.  v2:= temp @kind wide;
  #L3f785c.  return v2 @kind wide;
}
procedure `int` `h`(`org.c.a.d.o` v1 @kind this) @signature `Lorg/c/a/d/o;.h:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f775c.  v0:= 0I;
  #L3f775e.  return v0;
}
procedure `long` `h`(`org.c.a.d.o` v1 @kind this, `long` v2 ) @signature `Lorg/c/a/d/o;.h:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f7870.  call temp:= `j`(v1) @signature `Lorg/c/a/d/o;.j:()Lorg/c/a/c;` @kind virtual;
  #L3f7876.  v0:= temp @kind object;
  #L3f7878.  call temp:= `h`(v0, v2) @signature `Lorg/c/a/c;.h:(J)J` @kind virtual;
  #L3f787e.  v2:= temp @kind wide;
  #L3f7880.  return v2 @kind wide;
}
procedure `int` `i`(`org.c.a.d.o` v1 @kind this) @signature `Lorg/c/a/d/o;.i:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f7770.  v0:= v1.`org.c.a.d.o.a` @type ^`int`;
  #L3f7774.  v0:= v0 + -1;
  #L3f7778.  return v0;
}
procedure `long` `i`(`org.c.a.d.o` v1 @kind this, `long` v2 ) @signature `Lorg/c/a/d/o;.i:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f7894.  call temp:= `j`(v1) @signature `Lorg/c/a/d/o;.j:()Lorg/c/a/c;` @kind virtual;
  #L3f789a.  v0:= temp @kind object;
  #L3f789c.  call temp:= `i`(v0, v2) @signature `Lorg/c/a/c;.i:(J)J` @kind virtual;
  #L3f78a2.  v2:= temp @kind wide;
  #L3f78a4.  return v2 @kind wide;
}
