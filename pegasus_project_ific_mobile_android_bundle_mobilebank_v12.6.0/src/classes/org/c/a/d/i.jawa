record `org.c.a.d.i` @kind class @AccessFlag PUBLIC_ABSTRACT extends `org.c.a.d.b` @kind class {
  `org.c.a.g` `org.c.a.d.i.a` @AccessFlag PRIVATE_FINAL;
  `long` `org.c.a.d.i.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`org.c.a.d.i` v0 @kind this, `org.c.a.d` v1 @kind object, `long` v2 ) @signature `Lorg/c/a/d/i;.<init>:(Lorg/c/a/d;J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f6d88.  call `<init>`(v0, v1) @signature `Lorg/c/a/d/b;.<init>:(Lorg/c/a/d;)V` @kind direct;
  #L3f6d8e.  v0.`org.c.a.d.i.b` @type ^`long` := v2 @kind wide;
  #L3f6d92.  v2:= new `org.c.a.d.i$a`;
  #L3f6d96.  call temp:= `y`(v1) @signature `Lorg/c/a/d;.y:()Lorg/c/a/h;` @kind virtual;
  #L3f6d9c.  v1:= temp @kind object;
  #L3f6d9e.  call `<init>`(v2, v0, v1) @signature `Lorg/c/a/d/i$a;.<init>:(Lorg/c/a/d/i;Lorg/c/a/h;)V` @kind direct;
  #L3f6da4.  v0.`org.c.a.d.i.a` @type ^`org.c.a.g` := v2 @kind object;
  #L3f6da8.  return @kind void;
}
procedure `long` `a`(`long` v0 , `int` v2 ) @signature `Lorg/c/a/d/i;.a:(JI)J` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `long` `a`(`long` v0 , `long` v2 ) @signature `Lorg/c/a/d/i;.a:(JJ)J` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `b`(`org.c.a.d.i` v0 @kind this, `long` v1 , `long` v3 ) @signature `Lorg/c/a/d/i;.b:(JJ)I` @AccessFlag PUBLIC {
    temp;

  #L3f6cb8.  call temp:= `c`(v0, v1, v3) @signature `Lorg/c/a/d/i;.c:(JJ)J` @kind virtual;
  #L3f6cbe.  v1:= temp @kind wide;
  #L3f6cc0.  call temp:= `a`(v1) @signature `Lorg/c/a/d/h;.a:(J)I` @kind static;
  #L3f6cc6.  v1:= temp;
  #L3f6cc8.  return v1;
}
procedure `long` `c`(`org.c.a.d.i` v7 @kind this, `long` v8 , `long` v10 ) @signature `Lorg/c/a/d/i;.c:(JJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f6cdc.  v0:= lcmp(v8, v10);
  #L3f6ce0.  if v0 >= 0 then goto L3f6cf0;
  #L3f6ce4.  call temp:= `c`(v7, v10, v8) @signature `Lorg/c/a/d/i;.c:(JJ)J` @kind virtual;
  #L3f6cea.  v8:= temp @kind wide;
  #L3f6cec.  v8:= -v8 @kind long;
  #L3f6cee.  return v8 @kind wide;
  #L3f6cf0.  v0:= 0I;
  #L3f6cf2.  v0:= v8 - v10 @kind long;
  #L3f6cf6.  v2:= v7.`org.c.a.d.i.b` @type ^`long` @kind wide;
  #L3f6cfa.  v0:= v0 / v2 @kind long;
  #L3f6cfc.  call temp:= `a`(v7, v10, v0) @signature `Lorg/c/a/d/i;.a:(JJ)J` @kind virtual;
  #L3f6d02.  v2:= temp @kind wide;
  #L3f6d04.  v4:= lcmp(v2, v8);
  #L3f6d08.  v2:= 1L;
  #L3f6d0c.  if v4 >= 0 then goto L3f6d30;
  #L3f6d10.  v4:= 0I;
  #L3f6d12.  v4:= v0 + v2 @kind long;
  #L3f6d16.  call temp:= `a`(v7, v10, v4) @signature `Lorg/c/a/d/i;.a:(JJ)J` @kind virtual;
  #L3f6d1c.  v0:= temp @kind wide;
  #L3f6d1e.  v6:= lcmp(v0, v8);
  #L3f6d22.  if v6 <= 0 then goto L3f6d2c;
  #L3f6d26.  v0:= v4 - v2 @kind long;
  #L3f6d2a.  goto L3f6d5e;
  #L3f6d2c.  v0:= v4 @kind wide;
  #L3f6d2e.  goto L3f6d10;
  #L3f6d30.  call temp:= `a`(v7, v10, v0) @signature `Lorg/c/a/d/i;.a:(JJ)J` @kind virtual;
  #L3f6d36.  v4:= temp @kind wide;
  #L3f6d38.  v6:= lcmp(v4, v8);
  #L3f6d3c.  if v6 <= 0 then goto L3f6d5e;
  #L3f6d40.  v4:= 0I;
  #L3f6d42.  v4:= v0 - v2 @kind long;
  #L3f6d46.  call temp:= `a`(v7, v10, v4) @signature `Lorg/c/a/d/i;.a:(JJ)J` @kind virtual;
  #L3f6d4c.  v0:= temp @kind wide;
  #L3f6d4e.  v6:= lcmp(v0, v8);
  #L3f6d52.  if v6 > 0 then goto L3f6d5a;
  #L3f6d56.  v0:= v4 @kind wide;
  #L3f6d58.  goto L3f6d5e;
  #L3f6d5a.  v0:= v4 @kind wide;
  #L3f6d5c.  goto L3f6d40;
  #L3f6d5e.  return v0 @kind wide;
}
procedure `org.c.a.g` `e`(`org.c.a.d.i` v1 @kind this) @signature `Lorg/c/a/d/i;.e:()Lorg/c/a/g;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3f6d70.  v0:= v1.`org.c.a.d.i.a` @type ^`org.c.a.g` @kind object;
  #L3f6d74.  return v0 @kind object;
}
