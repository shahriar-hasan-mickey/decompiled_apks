record `org.c.a.d.l` @kind class @AccessFlag PUBLIC extends `org.c.a.d.m` @kind class {
  `int` `org.c.a.d.l.b` @AccessFlag PRIVATE_FINAL;
  `org.c.a.g` `org.c.a.d.l.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.c.a.d.l` v2 @kind this, `org.c.a.d` v3 @kind object, `org.c.a.g` v4 @kind object, `org.c.a.g` v5 @kind object) @signature `Lorg/c/a/d/l;.<init>:(Lorg/c/a/d;Lorg/c/a/g;Lorg/c/a/g;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3f7358.  call `<init>`(v2, v3, v4) @signature `Lorg/c/a/d/m;.<init>:(Lorg/c/a/d;Lorg/c/a/g;)V` @kind direct;
  #L3f735e.  call temp:= `c`(v5) @signature `Lorg/c/a/g;.c:()Z` @kind virtual;
  #L3f7364.  v3:= temp;
  #L3f7366.  if v3 != 0 then goto L3f737a;
  #L3f736a.  v3:= new `java.lang.IllegalArgumentException`;
  #L3f736e.  v4:= "Range duration field must be precise" @kind object;
  #L3f7372.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f7378.  throw v3;
  #L3f737a.  call temp:= `d`(v5) @signature `Lorg/c/a/g;.d:()J` @kind virtual;
  #L3f7380.  v3:= temp @kind wide;
  #L3f7382.  call temp:= `j`(v2) @signature `Lorg/c/a/d/l;.j:()J` @kind virtual;
  #L3f7388.  v0:= temp @kind wide;
  #L3f738a.  v3:= v3 / v0 @kind long;
  #L3f738c.  v3:= (`int`) v3 @kind l2i;
  #L3f738e.  v2.`org.c.a.d.l.b` @type ^`int` := v3;
  #L3f7392.  v3:= v2.`org.c.a.d.l.b` @type ^`int`;
  #L3f7396.  v4:= 2I;
  #L3f7398.  if v3 >= v4 then goto L3f73ac;
  #L3f739c.  v3:= new `java.lang.IllegalArgumentException`;
  #L3f73a0.  v4:= "The effective range must be at least 2" @kind object;
  #L3f73a4.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f73aa.  throw v3;
  #L3f73ac.  v2.`org.c.a.d.l.c` @type ^`org.c.a.g` := v5 @kind object;
  #L3f73b0.  return @kind void;
}
procedure `int` `a`(`org.c.a.d.l` v5 @kind this, `long` v6 ) @signature `Lorg/c/a/d/l;.a:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f7288.  v0:= 0L;
  #L3f728c.  v2:= lcmp(v6, v0);
  #L3f7290.  if v2 < 0 then goto L3f72aa;
  #L3f7294.  call temp:= `j`(v5) @signature `Lorg/c/a/d/l;.j:()J` @kind virtual;
  #L3f729a.  v0:= temp @kind wide;
  #L3f729c.  v6:= v6 / v0 @kind long;
  #L3f729e.  v0:= v5.`org.c.a.d.l.b` @type ^`int`;
  #L3f72a2.  v0:= (`long`) v0 @kind i2l;
  #L3f72a4.  v6:= v6 %% v0 @kind long;
  #L3f72a6.  v6:= (`int`) v6 @kind l2i;
  #L3f72a8.  return v6;
  #L3f72aa.  v0:= v5.`org.c.a.d.l.b` @type ^`int`;
  #L3f72ae.  v0:= v0 + -1;
  #L3f72b2.  v1:= 1L;
  #L3f72b6.  v3:= v6 + v1 @kind long;
  #L3f72ba.  call temp:= `j`(v5) @signature `Lorg/c/a/d/l;.j:()J` @kind virtual;
  #L3f72c0.  v6:= temp @kind wide;
  #L3f72c2.  v3:= v3 / v6 @kind long;
  #L3f72c4.  v6:= v5.`org.c.a.d.l.b` @type ^`int`;
  #L3f72c8.  v6:= (`long`) v6 @kind i2l;
  #L3f72ca.  v3:= v3 %% v6 @kind long;
  #L3f72cc.  v6:= (`int`) v3 @kind l2i;
  #L3f72ce.  v0:= v0 + v6 @kind int;
  #L3f72d0.  return v0;
}
procedure `long` `b`(`org.c.a.d.l` v4 @kind this, `long` v5 , `int` v7 ) @signature `Lorg/c/a/d/l;.b:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f7300.  call temp:= `h`(v4) @signature `Lorg/c/a/d/l;.h:()I` @kind virtual;
  #L3f7306.  v0:= temp;
  #L3f7308.  call temp:= `i`(v4) @signature `Lorg/c/a/d/l;.i:()I` @kind virtual;
  #L3f730e.  v1:= temp;
  #L3f7310.  call `a`(v4, v7, v0, v1) @signature `Lorg/c/a/d/h;.a:(Lorg/c/a/c;III)V` @kind static;
  #L3f7316.  call temp:= `a`(v4, v5) @signature `Lorg/c/a/d/l;.a:(J)I` @kind virtual;
  #L3f731c.  v0:= temp;
  #L3f731e.  v7:= v7 - v0 @kind int;
  #L3f7320.  v0:= (`long`) v7 @kind i2l;
  #L3f7322.  v2:= v4.`org.c.a.d.l.a` @type ^`long` @kind wide;
  #L3f7326.  v0:= v0 * v2 @kind long;
  #L3f732a.  v2:= v5 + v0 @kind long;
  #L3f732e.  return v2 @kind wide;
}
procedure `org.c.a.g` `f`(`org.c.a.d.l` v1 @kind this) @signature `Lorg/c/a/d/l;.f:()Lorg/c/a/g;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f7340.  v0:= v1.`org.c.a.d.l.c` @type ^`org.c.a.g` @kind object;
  #L3f7344.  return v0 @kind object;
}
procedure `int` `i`(`org.c.a.d.l` v1 @kind this) @signature `Lorg/c/a/d/l;.i:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f72e4.  v0:= v1.`org.c.a.d.l.b` @type ^`int`;
  #L3f72e8.  v0:= v0 + -1;
  #L3f72ec.  return v0;
}
