record `org.c.a.d.h` @kind class @AccessFlag PUBLIC {
}
procedure `int` `a`(`int` v3 , `int` v4 ) @signature `Lorg/c/a/d/h;.a:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3f6830.  v0:= v3 + v4 @kind int;
  #L3f6834.  v1:= v3 ^~ v0 @kind int;
  #L3f6838.  if v1 >= 0 then goto L3f6882;
  #L3f683c.  v1:= v3 ^~ v4 @kind int;
  #L3f6840.  if v1 < 0 then goto L3f6882;
  #L3f6844.  v0:= new `java.lang.ArithmeticException`;
  #L3f6848.  v1:= new `java.lang.StringBuilder`;
  #L3f684c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f6852.  v2:= "The calculation caused an overflow: " @kind object;
  #L3f6856.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f685c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f6862.  v3:= " + " @kind object;
  #L3f6866.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f686c.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f6872.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f6878.  v3:= temp @kind object;
  #L3f687a.  call `<init>`(v0, v3) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f6880.  throw v0;
  #L3f6882.  return v0;
}
procedure `int` `a`(`long` v3 ) @signature `Lorg/c/a/d/h;.a:(J)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3f6894.  v0:= -2147483648L;
  #L3f689a.  v2:= lcmp(v0, v3);
  #L3f689e.  if v2 > 0 then goto L3f68b4;
  #L3f68a2.  v0:= 2147483647L;
  #L3f68a8.  v2:= lcmp(v3, v0);
  #L3f68ac.  if v2 > 0 then goto L3f68b4;
  #L3f68b0.  v3:= (`int`) v3 @kind l2i;
  #L3f68b2.  return v3;
  #L3f68b4.  v0:= new `java.lang.ArithmeticException`;
  #L3f68b8.  v1:= new `java.lang.StringBuilder`;
  #L3f68bc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f68c2.  v2:= "Value cannot fit in an int: " @kind object;
  #L3f68c6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f68cc.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f68d2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f68d8.  v3:= temp @kind object;
  #L3f68da.  call `<init>`(v0, v3) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f68e0.  throw v0;
}
procedure `long` `a`(`long` v5 , `int` v7 ) @signature `Lorg/c/a/d/h;.a:(JI)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3f68f4.  goto L3f69a4;
  #L3f68fa.  v0:= (`long`) v7 @kind i2l;
  #L3f68fc.  v2:= v5 * v0 @kind long;
  #L3f6900.  v0:= v2 / v0 @kind long;
  #L3f6904.  v4:= lcmp(v0, v5);
  #L3f6908.  if v4 == 0 then goto L3f69a0;
  #L3f690c.  v0:= new `java.lang.ArithmeticException`;
  #L3f6910.  v1:= new `java.lang.StringBuilder`;
  #L3f6914.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f691a.  v2:= "Multiplication overflows a long: " @kind object;
  #L3f691e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f6924.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f692a.  v5:= " * " @kind object;
  #L3f692e.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f6934.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f693a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f6940.  v5:= temp @kind object;
  #L3f6942.  call `<init>`(v0, v5) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f6948.  throw v0;
  #L3f694a.  return v5 @kind wide;
  #L3f694c.  v5:= 0L;
  #L3f6950.  return v5 @kind wide;
  #L3f6952.  v0:= -9223372036854775808L;
  #L3f6956.  v2:= lcmp(v5, v0);
  #L3f695a.  if v2 != 0 then goto L3f699c;
  #L3f695e.  v0:= new `java.lang.ArithmeticException`;
  #L3f6962.  v1:= new `java.lang.StringBuilder`;
  #L3f6966.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f696c.  v2:= "Multiplication overflows a long: " @kind object;
  #L3f6970.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f6976.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f697c.  v5:= " * " @kind object;
  #L3f6980.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f6986.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f698c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f6992.  v5:= temp @kind object;
  #L3f6994.  call `<init>`(v0, v5) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f699a.  throw v0;
  #L3f699c.  v5:= -v5 @kind long;
  #L3f699e.  return v5 @kind wide;
  #L3f69a0.  return v2 @kind wide;
  #L3f69a2.  
  #L3f69a4.  switch v7
                  | -1 => goto L3f6952
                  | 0 => goto L3f694c
                  | 1 => goto L3f694a
                  | else => goto L3f68fa;
}
procedure `long` `a`(`long` v7 , `long` v9 ) @signature `Lorg/c/a/d/h;.a:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f69c8.  v0:= v7 + v9 @kind long;
  #L3f69cc.  v2:= v7 ^~ v0 @kind long;
  #L3f69d0.  v4:= 0L;
  #L3f69d4.  v6:= lcmp(v2, v4);
  #L3f69d8.  if v6 >= 0 then goto L3f6a26;
  #L3f69dc.  v2:= v7 ^~ v9 @kind long;
  #L3f69e0.  v6:= lcmp(v2, v4);
  #L3f69e4.  if v6 < 0 then goto L3f6a26;
  #L3f69e8.  v0:= new `java.lang.ArithmeticException`;
  #L3f69ec.  v1:= new `java.lang.StringBuilder`;
  #L3f69f0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f69f6.  v2:= "The calculation caused an overflow: " @kind object;
  #L3f69fa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f6a00.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f6a06.  v7:= " + " @kind object;
  #L3f6a0a.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f6a10.  call temp:= `append`(v1, v9) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f6a16.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f6a1c.  v7:= temp @kind object;
  #L3f6a1e.  call `<init>`(v0, v7) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f6a24.  throw v0;
  #L3f6a26.  return v0 @kind wide;
}
procedure `void` `a`(`org.c.a.c` v1 @kind object, `int` v2 , `int` v3 , `int` v4 ) @signature `Lorg/c/a/d/h;.a:(Lorg/c/a/c;III)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f6b64.  if v2 < v3 then goto L3f6b70;
  #L3f6b68.  if v2 <= v4 then goto L3f6b6e;
  #L3f6b6c.  goto L3f6b70;
  #L3f6b6e.  return @kind void;
  #L3f6b70.  v0:= new `org.c.a.i`;
  #L3f6b74.  call temp:= `a`(v1) @signature `Lorg/c/a/c;.a:()Lorg/c/a/d;` @kind virtual;
  #L3f6b7a.  v1:= temp @kind object;
  #L3f6b7c.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3f6b82.  v2:= temp @kind object;
  #L3f6b84.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3f6b8a.  v3:= temp @kind object;
  #L3f6b8c.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3f6b92.  v4:= temp @kind object;
  #L3f6b94.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lorg/c/a/i;.<init>:(Lorg/c/a/d;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V` @kind direct;
  #L3f6b9a.  throw v0;
}
procedure `void` `a`(`org.c.a.d` v1 @kind object, `int` v2 , `int` v3 , `int` v4 ) @signature `Lorg/c/a/d/h;.a:(Lorg/c/a/d;III)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3f6bac.  if v2 < v3 then goto L3f6bb8;
  #L3f6bb0.  if v2 <= v4 then goto L3f6bb6;
  #L3f6bb4.  goto L3f6bb8;
  #L3f6bb6.  return @kind void;
  #L3f6bb8.  v0:= new `org.c.a.i`;
  #L3f6bbc.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3f6bc2.  v2:= temp @kind object;
  #L3f6bc4.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3f6bca.  v3:= temp @kind object;
  #L3f6bcc.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3f6bd2.  v4:= temp @kind object;
  #L3f6bd4.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lorg/c/a/i;.<init>:(Lorg/c/a/d;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V` @kind direct;
  #L3f6bda.  throw v0;
}
procedure `boolean` `a`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lorg/c/a/d/h;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3f6800.  if v0 != v1 then goto L3f6808;
  #L3f6804.  v0:= 1I;
  #L3f6806.  return v0;
  #L3f6808.  if v0 == 0 then goto L3f681c;
  #L3f680c.  if v1 != 0 then goto L3f6812;
  #L3f6810.  goto L3f681c;
  #L3f6812.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3f6818.  v0:= temp;
  #L3f681a.  return v0;
  #L3f681c.  v0:= 0I;
  #L3f681e.  return v0;
}
procedure `long` `b`(`long` v7 , `long` v9 ) @signature `Lorg/c/a/d/h;.b:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f6a38.  v0:= v7 - v9 @kind long;
  #L3f6a3c.  v2:= v7 ^~ v0 @kind long;
  #L3f6a40.  v4:= 0L;
  #L3f6a44.  v6:= lcmp(v2, v4);
  #L3f6a48.  if v6 >= 0 then goto L3f6a96;
  #L3f6a4c.  v2:= v7 ^~ v9 @kind long;
  #L3f6a50.  v6:= lcmp(v2, v4);
  #L3f6a54.  if v6 >= 0 then goto L3f6a96;
  #L3f6a58.  v0:= new `java.lang.ArithmeticException`;
  #L3f6a5c.  v1:= new `java.lang.StringBuilder`;
  #L3f6a60.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f6a66.  v2:= "The calculation caused an overflow: " @kind object;
  #L3f6a6a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f6a70.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f6a76.  v7:= " - " @kind object;
  #L3f6a7a.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f6a80.  call temp:= `append`(v1, v9) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f6a86.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f6a8c.  v7:= temp @kind object;
  #L3f6a8e.  call `<init>`(v0, v7) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f6a94.  throw v0;
  #L3f6a96.  return v0 @kind wide;
}
procedure `long` `c`(`long` v7 , `long` v9 ) @signature `Lorg/c/a/d/h;.c:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f6aa8.  v0:= 1L;
  #L3f6aac.  v2:= lcmp(v9, v0);
  #L3f6ab0.  if v2 != 0 then goto L3f6ab6;
  #L3f6ab4.  return v7 @kind wide;
  #L3f6ab6.  v2:= lcmp(v7, v0);
  #L3f6aba.  if v2 != 0 then goto L3f6ac0;
  #L3f6abe.  return v9 @kind wide;
  #L3f6ac0.  v0:= 0L;
  #L3f6ac4.  v2:= lcmp(v7, v0);
  #L3f6ac8.  if v2 == 0 then goto L3f6b50;
  #L3f6acc.  v2:= lcmp(v9, v0);
  #L3f6ad0.  if v2 != 0 then goto L3f6ad6;
  #L3f6ad4.  goto L3f6b50;
  #L3f6ad6.  v0:= v7 * v9 @kind long;
  #L3f6ada.  v2:= v0 / v9 @kind long;
  #L3f6ade.  v4:= lcmp(v2, v7);
  #L3f6ae2.  if v4 != 0 then goto L3f6b12;
  #L3f6ae6.  v2:= -9223372036854775808L;
  #L3f6aea.  v4:= lcmp(v7, v2);
  #L3f6aee.  v5:= -1L;
  #L3f6af2.  if v4 != 0 then goto L3f6afe;
  #L3f6af6.  v4:= lcmp(v9, v5);
  #L3f6afa.  if v4 == 0 then goto L3f6b12;
  #L3f6afe.  v4:= lcmp(v9, v2);
  #L3f6b02.  if v4 != 0 then goto L3f6b10;
  #L3f6b06.  v2:= lcmp(v7, v5);
  #L3f6b0a.  if v2 != 0 then goto L3f6b10;
  #L3f6b0e.  goto L3f6b12;
  #L3f6b10.  return v0 @kind wide;
  #L3f6b12.  v0:= new `java.lang.ArithmeticException`;
  #L3f6b16.  v1:= new `java.lang.StringBuilder`;
  #L3f6b1a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3f6b20.  v2:= "Multiplication overflows a long: " @kind object;
  #L3f6b24.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f6b2a.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f6b30.  v7:= " * " @kind object;
  #L3f6b34.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f6b3a.  call temp:= `append`(v1, v9) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3f6b40.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3f6b46.  v7:= temp @kind object;
  #L3f6b48.  call `<init>`(v0, v7) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f6b4e.  throw v0;
  #L3f6b50.  return v0 @kind wide;
}
