record `org.c.a.d.g` @kind class @AccessFlag PUBLIC extends `org.c.a.d.d` @kind class {
  `int` `org.c.a.d.g.a` @AccessFlag FINAL;
  `org.c.a.g` `org.c.a.d.g.b` @AccessFlag FINAL;
  `org.c.a.g` `org.c.a.d.g.c` @AccessFlag FINAL;
  `int` `org.c.a.d.g.d` @AccessFlag PRIVATE_FINAL;
  `int` `org.c.a.d.g.e` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.c.a.d.g` v1 @kind this, `org.c.a.c` v2 @kind object, `org.c.a.d` v3 @kind object, `int` v4 ) @signature `Lorg/c/a/d/g;.<init>:(Lorg/c/a/c;Lorg/c/a/d;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f6744.  call temp:= `f`(v2) @signature `Lorg/c/a/c;.f:()Lorg/c/a/g;` @kind virtual;
  #L3f674a.  v0:= temp @kind object;
  #L3f674c.  call `<init>`(v1, v2, v0, v3, v4) @signature `Lorg/c/a/d/g;.<init>:(Lorg/c/a/c;Lorg/c/a/g;Lorg/c/a/d;I)V` @kind direct;
  #L3f6752.  return @kind void;
}
procedure `void` `<init>`(`org.c.a.d.g` v2 @kind this, `org.c.a.c` v3 @kind object, `org.c.a.g` v4 @kind object, `org.c.a.d` v5 @kind object, `int` v6 ) @signature `Lorg/c/a/d/g;.<init>:(Lorg/c/a/c;Lorg/c/a/g;Lorg/c/a/d;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3f6764.  call `<init>`(v2, v3, v5) @signature `Lorg/c/a/d/d;.<init>:(Lorg/c/a/c;Lorg/c/a/d;)V` @kind direct;
  #L3f676a.  v0:= 2I;
  #L3f676c.  if v6 >= v0 then goto L3f6780;
  #L3f6770.  v3:= new `java.lang.IllegalArgumentException`;
  #L3f6774.  v4:= "The divisor must be at least 2" @kind object;
  #L3f6778.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f677e.  throw v3;
  #L3f6780.  call temp:= `e`(v3) @signature `Lorg/c/a/c;.e:()Lorg/c/a/g;` @kind virtual;
  #L3f6786.  v0:= temp @kind object;
  #L3f6788.  if v0 != 0 then goto L3f6794;
  #L3f678c.  v5:= 0I;
  #L3f678e.  v2.`org.c.a.d.g.b` @type ^`org.c.a.g` := v5 @kind object;
  #L3f6792.  goto L3f67aa;
  #L3f6794.  v1:= new `org.c.a.d.p`;
  #L3f6798.  call temp:= `y`(v5) @signature `Lorg/c/a/d;.y:()Lorg/c/a/h;` @kind virtual;
  #L3f679e.  v5:= temp @kind object;
  #L3f67a0.  call `<init>`(v1, v0, v5, v6) @signature `Lorg/c/a/d/p;.<init>:(Lorg/c/a/g;Lorg/c/a/h;I)V` @kind direct;
  #L3f67a6.  v2.`org.c.a.d.g.b` @type ^`org.c.a.g` := v1 @kind object;
  #L3f67aa.  v2.`org.c.a.d.g.c` @type ^`org.c.a.g` := v4 @kind object;
  #L3f67ae.  v2.`org.c.a.d.g.a` @type ^`int` := v6;
  #L3f67b2.  call temp:= `h`(v3) @signature `Lorg/c/a/c;.h:()I` @kind virtual;
  #L3f67b8.  v4:= temp;
  #L3f67ba.  if v4 < 0 then goto L3f67c2;
  #L3f67be.  v4:= v4 / v6 @kind int;
  #L3f67c0.  goto L3f67cc;
  #L3f67c2.  v4:= v4 + 1;
  #L3f67c6.  v4:= v4 / v6 @kind int;
  #L3f67c8.  v4:= v4 + -1;
  #L3f67cc.  call temp:= `i`(v3) @signature `Lorg/c/a/c;.i:()I` @kind virtual;
  #L3f67d2.  v3:= temp;
  #L3f67d4.  if v3 < 0 then goto L3f67dc;
  #L3f67d8.  v3:= v3 / v6 @kind int;
  #L3f67da.  goto L3f67e6;
  #L3f67dc.  v3:= v3 + 1;
  #L3f67e0.  v3:= v3 / v6 @kind int;
  #L3f67e2.  v3:= v3 + -1;
  #L3f67e6.  v2.`org.c.a.d.g.d` @type ^`int` := v4;
  #L3f67ea.  v2.`org.c.a.d.g.e` @type ^`int` := v3;
  #L3f67ee.  return @kind void;
}
procedure `int` `a`(`org.c.a.d.g` v2 @kind this, `int` v3 ) @signature `Lorg/c/a/d/g;.a:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3f64f4.  if v3 < 0 then goto L3f6500;
  #L3f64f8.  v0:= v2.`org.c.a.d.g.a` @type ^`int`;
  #L3f64fc.  v3:= v3 %% v0 @kind int;
  #L3f64fe.  return v3;
  #L3f6500.  v0:= v2.`org.c.a.d.g.a` @type ^`int`;
  #L3f6504.  v0:= v0 + -1;
  #L3f6508.  v3:= v3 + 1;
  #L3f650c.  v1:= v2.`org.c.a.d.g.a` @type ^`int`;
  #L3f6510.  v3:= v3 %% v1 @kind int;
  #L3f6512.  v0:= v0 + v3 @kind int;
  #L3f6514.  return v0;
}
procedure `int` `a`(`org.c.a.d.g` v1 @kind this, `long` v2 ) @signature `Lorg/c/a/d/g;.a:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f6528.  call temp:= `j`(v1) @signature `Lorg/c/a/d/g;.j:()Lorg/c/a/c;` @kind virtual;
  #L3f652e.  v0:= temp @kind object;
  #L3f6530.  call temp:= `a`(v0, v2) @signature `Lorg/c/a/c;.a:(J)I` @kind virtual;
  #L3f6536.  v2:= temp;
  #L3f6538.  if v2 < 0 then goto L3f6544;
  #L3f653c.  v3:= v1.`org.c.a.d.g.a` @type ^`int`;
  #L3f6540.  v2:= v2 / v3 @kind int;
  #L3f6542.  return v2;
  #L3f6544.  v2:= v2 + 1;
  #L3f6548.  v3:= v1.`org.c.a.d.g.a` @type ^`int`;
  #L3f654c.  v2:= v2 / v3 @kind int;
  #L3f654e.  v2:= v2 + -1;
  #L3f6552.  return v2;
}
procedure `long` `a`(`org.c.a.d.g` v2 @kind this, `long` v3 , `int` v5 ) @signature `Lorg/c/a/d/g;.a:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f65bc.  call temp:= `j`(v2) @signature `Lorg/c/a/d/g;.j:()Lorg/c/a/c;` @kind virtual;
  #L3f65c2.  v0:= temp @kind object;
  #L3f65c4.  v1:= v2.`org.c.a.d.g.a` @type ^`int`;
  #L3f65c8.  v5:= v5 * v1 @kind int;
  #L3f65cc.  call temp:= `a`(v0, v3, v5) @signature `Lorg/c/a/c;.a:(JI)J` @kind virtual;
  #L3f65d2.  v3:= temp @kind wide;
  #L3f65d4.  return v3 @kind wide;
}
procedure `long` `a`(`org.c.a.d.g` v3 @kind this, `long` v4 , `long` v6 ) @signature `Lorg/c/a/d/g;.a:(JJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f65e8.  call temp:= `j`(v3) @signature `Lorg/c/a/d/g;.j:()Lorg/c/a/c;` @kind virtual;
  #L3f65ee.  v0:= temp @kind object;
  #L3f65f0.  v1:= v3.`org.c.a.d.g.a` @type ^`int`;
  #L3f65f4.  v1:= (`long`) v1 @kind i2l;
  #L3f65f6.  v6:= v6 * v1 @kind long;
  #L3f65fa.  call temp:= `a`(v0, v4, v6) @signature `Lorg/c/a/c;.a:(JJ)J` @kind virtual;
  #L3f6600.  v4:= temp @kind wide;
  #L3f6602.  return v4 @kind wide;
}
procedure `int` `b`(`org.c.a.d.g` v1 @kind this, `long` v2 , `long` v4 ) @signature `Lorg/c/a/d/g;.b:(JJ)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f6564.  call temp:= `j`(v1) @signature `Lorg/c/a/d/g;.j:()Lorg/c/a/c;` @kind virtual;
  #L3f656a.  v0:= temp @kind object;
  #L3f656c.  call temp:= `b`(v0, v2, v4) @signature `Lorg/c/a/c;.b:(JJ)I` @kind virtual;
  #L3f6572.  v2:= temp;
  #L3f6574.  v3:= v1.`org.c.a.d.g.a` @type ^`int`;
  #L3f6578.  v2:= v2 / v3 @kind int;
  #L3f657a.  return v2;
}
procedure `long` `b`(`org.c.a.d.g` v3 @kind this, `long` v4 , `int` v6 ) @signature `Lorg/c/a/d/g;.b:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f6614.  v0:= v3.`org.c.a.d.g.d` @type ^`int`;
  #L3f6618.  v1:= v3.`org.c.a.d.g.e` @type ^`int`;
  #L3f661c.  call `a`(v3, v6, v0, v1) @signature `Lorg/c/a/d/h;.a:(Lorg/c/a/c;III)V` @kind static;
  #L3f6622.  call temp:= `j`(v3) @signature `Lorg/c/a/d/g;.j:()Lorg/c/a/c;` @kind virtual;
  #L3f6628.  v0:= temp @kind object;
  #L3f662a.  call temp:= `a`(v0, v4) @signature `Lorg/c/a/c;.a:(J)I` @kind virtual;
  #L3f6630.  v0:= temp;
  #L3f6632.  call temp:= `a`(v3, v0) @signature `Lorg/c/a/d/g;.a:(I)I` @kind direct;
  #L3f6638.  v0:= temp;
  #L3f663a.  call temp:= `j`(v3) @signature `Lorg/c/a/d/g;.j:()Lorg/c/a/c;` @kind virtual;
  #L3f6640.  v1:= temp @kind object;
  #L3f6642.  v2:= v3.`org.c.a.d.g.a` @type ^`int`;
  #L3f6646.  v6:= v6 * v2 @kind int;
  #L3f664a.  v6:= v6 + v0 @kind int;
  #L3f664c.  call temp:= `b`(v1, v4, v6) @signature `Lorg/c/a/c;.b:(JI)J` @kind virtual;
  #L3f6652.  v4:= temp @kind wide;
  #L3f6654.  return v4 @kind wide;
}
procedure `long` `c`(`org.c.a.d.g` v1 @kind this, `long` v2 , `long` v4 ) @signature `Lorg/c/a/d/g;.c:(JJ)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f6668.  call temp:= `j`(v1) @signature `Lorg/c/a/d/g;.j:()Lorg/c/a/c;` @kind virtual;
  #L3f666e.  v0:= temp @kind object;
  #L3f6670.  call temp:= `c`(v0, v2, v4) @signature `Lorg/c/a/c;.c:(JJ)J` @kind virtual;
  #L3f6676.  v2:= temp @kind wide;
  #L3f6678.  v4:= v1.`org.c.a.d.g.a` @type ^`int`;
  #L3f667c.  v4:= (`long`) v4 @kind i2l;
  #L3f667e.  v2:= v2 / v4 @kind long;
  #L3f6680.  return v2 @kind wide;
}
procedure `long` `d`(`org.c.a.d.g` v3 @kind this, `long` v4 ) @signature `Lorg/c/a/d/g;.d:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3f6694.  call temp:= `j`(v3) @signature `Lorg/c/a/d/g;.j:()Lorg/c/a/c;` @kind virtual;
  #L3f669a.  v0:= temp @kind object;
  #L3f669c.  call temp:= `a`(v3, v4) @signature `Lorg/c/a/d/g;.a:(J)I` @kind virtual;
  #L3f66a2.  v1:= temp;
  #L3f66a4.  v2:= v3.`org.c.a.d.g.a` @type ^`int`;
  #L3f66a8.  v1:= v1 * v2 @kind int;
  #L3f66ac.  call temp:= `b`(v0, v4, v1) @signature `Lorg/c/a/c;.b:(JI)J` @kind virtual;
  #L3f66b2.  v4:= temp @kind wide;
  #L3f66b4.  call temp:= `d`(v0, v4) @signature `Lorg/c/a/c;.d:(J)J` @kind virtual;
  #L3f66ba.  v4:= temp @kind wide;
  #L3f66bc.  return v4 @kind wide;
}
procedure `org.c.a.g` `e`(`org.c.a.d.g` v1 @kind this) @signature `Lorg/c/a/d/g;.e:()Lorg/c/a/g;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f6704.  v0:= v1.`org.c.a.d.g.b` @type ^`org.c.a.g` @kind object;
  #L3f6708.  return v0 @kind object;
}
procedure `org.c.a.g` `f`(`org.c.a.d.g` v1 @kind this) @signature `Lorg/c/a/d/g;.f:()Lorg/c/a/g;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f671c.  v0:= v1.`org.c.a.d.g.c` @type ^`org.c.a.g` @kind object;
  #L3f6720.  if v0 == 0 then goto L3f672a;
  #L3f6724.  v0:= v1.`org.c.a.d.g.c` @type ^`org.c.a.g` @kind object;
  #L3f6728.  return v0 @kind object;
  #L3f672a.  call temp:= `f`(v1) @signature `Lorg/c/a/d/d;.f:()Lorg/c/a/g;` @kind super;
  #L3f6730.  v0:= temp @kind object;
  #L3f6732.  return v0 @kind object;
}
procedure `int` `h`(`org.c.a.d.g` v1 @kind this) @signature `Lorg/c/a/d/g;.h:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f658c.  v0:= v1.`org.c.a.d.g.d` @type ^`int`;
  #L3f6590.  return v0;
}
procedure `int` `i`(`org.c.a.d.g` v1 @kind this) @signature `Lorg/c/a/d/g;.i:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f65a4.  v0:= v1.`org.c.a.d.g.e` @type ^`int`;
  #L3f65a8.  return v0;
}
procedure `long` `i`(`org.c.a.d.g` v2 @kind this, `long` v3 ) @signature `Lorg/c/a/d/g;.i:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f66d0.  call temp:= `j`(v2) @signature `Lorg/c/a/d/g;.j:()Lorg/c/a/c;` @kind virtual;
  #L3f66d6.  v0:= temp @kind object;
  #L3f66d8.  call temp:= `i`(v0, v3) @signature `Lorg/c/a/c;.i:(J)J` @kind virtual;
  #L3f66de.  v0:= temp @kind wide;
  #L3f66e0.  call temp:= `a`(v2, v0) @signature `Lorg/c/a/d/g;.a:(J)I` @kind virtual;
  #L3f66e6.  v0:= temp;
  #L3f66e8.  call temp:= `b`(v2, v3, v0) @signature `Lorg/c/a/d/g;.b:(JI)J` @kind virtual;
  #L3f66ee.  v3:= temp @kind wide;
  #L3f66f0.  return v3 @kind wide;
}
