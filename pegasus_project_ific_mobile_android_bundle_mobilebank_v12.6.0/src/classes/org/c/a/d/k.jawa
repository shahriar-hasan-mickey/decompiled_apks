record `org.c.a.d.k` @kind class @AccessFlag PUBLIC extends `org.c.a.d.d` @kind class {
  `int` `org.c.a.d.k.a` @AccessFlag PRIVATE_FINAL;
  `int` `org.c.a.d.k.b` @AccessFlag PRIVATE_FINAL;
  `int` `org.c.a.d.k.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.c.a.d.k` v7 @kind this, `org.c.a.c` v8 @kind object, `int` v9 ) @signature `Lorg/c/a/d/k;.<init>:(Lorg/c/a/c;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3f71ac.  if v8 != 0 then goto L3f71b6;
  #L3f71b0.  v0:= 0I;
  #L3f71b2.  v3:= v0 @kind object;
  #L3f71b4.  goto L3f71c0;
  #L3f71b6.  call temp:= `a`(v8) @signature `Lorg/c/a/c;.a:()Lorg/c/a/d;` @kind virtual;
  #L3f71bc.  v0:= temp @kind object;
  #L3f71be.  goto L3f71b2;
  #L3f71c0.  v5:= -2147483648I;
  #L3f71c4.  v6:= 2147483647I;
  #L3f71ca.  v1:= v7 @kind object;
  #L3f71cc.  v2:= v8 @kind object;
  #L3f71ce.  v4:= v9;
  #L3f71d0.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lorg/c/a/d/k;.<init>:(Lorg/c/a/c;Lorg/c/a/d;III)V` @kind direct;
  #L3f71d6.  return @kind void;
}
procedure `void` `<init>`(`org.c.a.d.k` v6 @kind this, `org.c.a.c` v7 @kind object, `org.c.a.d` v8 @kind object, `int` v9 ) @signature `Lorg/c/a/d/k;.<init>:(Lorg/c/a/c;Lorg/c/a/d;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f71e8.  v4:= -2147483648I;
  #L3f71ec.  v5:= 2147483647I;
  #L3f71f2.  v0:= v6 @kind object;
  #L3f71f4.  v1:= v7 @kind object;
  #L3f71f6.  v2:= v8 @kind object;
  #L3f71f8.  v3:= v9;
  #L3f71fa.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lorg/c/a/d/k;.<init>:(Lorg/c/a/c;Lorg/c/a/d;III)V` @kind direct;
  #L3f7200.  return @kind void;
}
procedure `void` `<init>`(`org.c.a.d.k` v0 @kind this, `org.c.a.c` v1 @kind object, `org.c.a.d` v2 @kind object, `int` v3 , `int` v4 , `int` v5 ) @signature `Lorg/c/a/d/k;.<init>:(Lorg/c/a/c;Lorg/c/a/d;III)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f7214.  call `<init>`(v0, v1, v2) @signature `Lorg/c/a/d/d;.<init>:(Lorg/c/a/c;Lorg/c/a/d;)V` @kind direct;
  #L3f721a.  if v3 != 0 then goto L3f722e;
  #L3f721e.  v1:= new `java.lang.IllegalArgumentException`;
  #L3f7222.  v2:= "The offset cannot be zero" @kind object;
  #L3f7226.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f722c.  throw v1;
  #L3f722e.  v0.`org.c.a.d.k.a` @type ^`int` := v3;
  #L3f7232.  call temp:= `h`(v1) @signature `Lorg/c/a/c;.h:()I` @kind virtual;
  #L3f7238.  v2:= temp;
  #L3f723a.  v2:= v2 + v3 @kind int;
  #L3f723c.  if v4 >= v2 then goto L3f7250;
  #L3f7240.  call temp:= `h`(v1) @signature `Lorg/c/a/c;.h:()I` @kind virtual;
  #L3f7246.  v2:= temp;
  #L3f7248.  v2:= v2 + v3 @kind int;
  #L3f724a.  v0.`org.c.a.d.k.b` @type ^`int` := v2;
  #L3f724e.  goto L3f7254;
  #L3f7250.  v0.`org.c.a.d.k.b` @type ^`int` := v4;
  #L3f7254.  call temp:= `i`(v1) @signature `Lorg/c/a/c;.i:()I` @kind virtual;
  #L3f725a.  v2:= temp;
  #L3f725c.  v2:= v2 + v3 @kind int;
  #L3f725e.  if v5 <= v2 then goto L3f7272;
  #L3f7262.  call temp:= `i`(v1) @signature `Lorg/c/a/c;.i:()I` @kind virtual;
  #L3f7268.  v1:= temp;
  #L3f726a.  v1:= v1 + v3 @kind int;
  #L3f726c.  v0.`org.c.a.d.k.c` @type ^`int` := v1;
  #L3f7270.  goto L3f7276;
  #L3f7272.  v0.`org.c.a.d.k.c` @type ^`int` := v5;
  #L3f7276.  return @kind void;
}
procedure `int` `a`(`org.c.a.d.k` v0 @kind this, `long` v1 ) @signature `Lorg/c/a/d/k;.a:(J)I` @AccessFlag PUBLIC {
    temp;

  #L3f6fd0.  call temp:= `a`(v0, v1) @signature `Lorg/c/a/d/d;.a:(J)I` @kind super;
  #L3f6fd6.  v1:= temp;
  #L3f6fd8.  v2:= v0.`org.c.a.d.k.a` @type ^`int`;
  #L3f6fdc.  v1:= v1 + v2 @kind int;
  #L3f6fde.  return v1;
}
procedure `long` `a`(`org.c.a.d.k` v2 @kind this, `long` v3 , `int` v5 ) @signature `Lorg/c/a/d/k;.a:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f7020.  call temp:= `a`(v2, v3, v5) @signature `Lorg/c/a/d/d;.a:(JI)J` @kind super;
  #L3f7026.  v3:= temp @kind wide;
  #L3f7028.  call temp:= `a`(v2, v3) @signature `Lorg/c/a/d/k;.a:(J)I` @kind virtual;
  #L3f702e.  v5:= temp;
  #L3f7030.  v0:= v2.`org.c.a.d.k.b` @type ^`int`;
  #L3f7034.  v1:= v2.`org.c.a.d.k.c` @type ^`int`;
  #L3f7038.  call `a`(v2, v5, v0, v1) @signature `Lorg/c/a/d/h;.a:(Lorg/c/a/c;III)V` @kind static;
  #L3f703e.  return v3 @kind wide;
}
procedure `long` `a`(`org.c.a.d.k` v1 @kind this, `long` v2 , `long` v4 ) @signature `Lorg/c/a/d/k;.a:(JJ)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f7050.  call temp:= `a`(v1, v2, v4) @signature `Lorg/c/a/d/d;.a:(JJ)J` @kind super;
  #L3f7056.  v2:= temp @kind wide;
  #L3f7058.  call temp:= `a`(v1, v2) @signature `Lorg/c/a/d/k;.a:(J)I` @kind virtual;
  #L3f705e.  v4:= temp;
  #L3f7060.  v5:= v1.`org.c.a.d.k.b` @type ^`int`;
  #L3f7064.  v0:= v1.`org.c.a.d.k.c` @type ^`int`;
  #L3f7068.  call `a`(v1, v4, v5, v0) @signature `Lorg/c/a/d/h;.a:(Lorg/c/a/c;III)V` @kind static;
  #L3f706e.  return v2 @kind wide;
}
procedure `long` `b`(`org.c.a.d.k` v2 @kind this, `long` v3 , `int` v5 ) @signature `Lorg/c/a/d/k;.b:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f7080.  v0:= v2.`org.c.a.d.k.b` @type ^`int`;
  #L3f7084.  v1:= v2.`org.c.a.d.k.c` @type ^`int`;
  #L3f7088.  call `a`(v2, v5, v0, v1) @signature `Lorg/c/a/d/h;.a:(Lorg/c/a/c;III)V` @kind static;
  #L3f708e.  v0:= v2.`org.c.a.d.k.a` @type ^`int`;
  #L3f7092.  v5:= v5 - v0 @kind int;
  #L3f7094.  call temp:= `b`(v2, v3, v5) @signature `Lorg/c/a/d/d;.b:(JI)J` @kind super;
  #L3f709a.  v3:= temp @kind wide;
  #L3f709c.  return v3 @kind wide;
}
procedure `boolean` `b`(`org.c.a.d.k` v1 @kind this, `long` v2 ) @signature `Lorg/c/a/d/k;.b:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f6fac.  call temp:= `j`(v1) @signature `Lorg/c/a/d/k;.j:()Lorg/c/a/c;` @kind virtual;
  #L3f6fb2.  v0:= temp @kind object;
  #L3f6fb4.  call temp:= `b`(v0, v2) @signature `Lorg/c/a/c;.b:(J)Z` @kind virtual;
  #L3f6fba.  v2:= temp;
  #L3f6fbc.  return v2;
}
procedure `long` `d`(`org.c.a.d.k` v1 @kind this, `long` v2 ) @signature `Lorg/c/a/d/k;.d:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f70b0.  call temp:= `j`(v1) @signature `Lorg/c/a/d/k;.j:()Lorg/c/a/c;` @kind virtual;
  #L3f70b6.  v0:= temp @kind object;
  #L3f70b8.  call temp:= `d`(v0, v2) @signature `Lorg/c/a/c;.d:(J)J` @kind virtual;
  #L3f70be.  v2:= temp @kind wide;
  #L3f70c0.  return v2 @kind wide;
}
procedure `long` `e`(`org.c.a.d.k` v1 @kind this, `long` v2 ) @signature `Lorg/c/a/d/k;.e:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f70d4.  call temp:= `j`(v1) @signature `Lorg/c/a/d/k;.j:()Lorg/c/a/c;` @kind virtual;
  #L3f70da.  v0:= temp @kind object;
  #L3f70dc.  call temp:= `e`(v0, v2) @signature `Lorg/c/a/c;.e:(J)J` @kind virtual;
  #L3f70e2.  v2:= temp @kind wide;
  #L3f70e4.  return v2 @kind wide;
}
procedure `long` `f`(`org.c.a.d.k` v1 @kind this, `long` v2 ) @signature `Lorg/c/a/d/k;.f:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f70f8.  call temp:= `j`(v1) @signature `Lorg/c/a/d/k;.j:()Lorg/c/a/c;` @kind virtual;
  #L3f70fe.  v0:= temp @kind object;
  #L3f7100.  call temp:= `f`(v0, v2) @signature `Lorg/c/a/c;.f:(J)J` @kind virtual;
  #L3f7106.  v2:= temp @kind wide;
  #L3f7108.  return v2 @kind wide;
}
procedure `long` `g`(`org.c.a.d.k` v1 @kind this, `long` v2 ) @signature `Lorg/c/a/d/k;.g:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f711c.  call temp:= `j`(v1) @signature `Lorg/c/a/d/k;.j:()Lorg/c/a/c;` @kind virtual;
  #L3f7122.  v0:= temp @kind object;
  #L3f7124.  call temp:= `g`(v0, v2) @signature `Lorg/c/a/c;.g:(J)J` @kind virtual;
  #L3f712a.  v2:= temp @kind wide;
  #L3f712c.  return v2 @kind wide;
}
procedure `org.c.a.g` `g`(`org.c.a.d.k` v1 @kind this) @signature `Lorg/c/a/d/k;.g:()Lorg/c/a/g;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f7188.  call temp:= `j`(v1) @signature `Lorg/c/a/d/k;.j:()Lorg/c/a/c;` @kind virtual;
  #L3f718e.  v0:= temp @kind object;
  #L3f7190.  call temp:= `g`(v0) @signature `Lorg/c/a/c;.g:()Lorg/c/a/g;` @kind virtual;
  #L3f7196.  v0:= temp @kind object;
  #L3f7198.  return v0 @kind object;
}
procedure `int` `h`(`org.c.a.d.k` v1 @kind this) @signature `Lorg/c/a/d/k;.h:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f6ff0.  v0:= v1.`org.c.a.d.k.b` @type ^`int`;
  #L3f6ff4.  return v0;
}
procedure `long` `h`(`org.c.a.d.k` v1 @kind this, `long` v2 ) @signature `Lorg/c/a/d/k;.h:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f7140.  call temp:= `j`(v1) @signature `Lorg/c/a/d/k;.j:()Lorg/c/a/c;` @kind virtual;
  #L3f7146.  v0:= temp @kind object;
  #L3f7148.  call temp:= `h`(v0, v2) @signature `Lorg/c/a/c;.h:(J)J` @kind virtual;
  #L3f714e.  v2:= temp @kind wide;
  #L3f7150.  return v2 @kind wide;
}
procedure `int` `i`(`org.c.a.d.k` v1 @kind this) @signature `Lorg/c/a/d/k;.i:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f7008.  v0:= v1.`org.c.a.d.k.c` @type ^`int`;
  #L3f700c.  return v0;
}
procedure `long` `i`(`org.c.a.d.k` v1 @kind this, `long` v2 ) @signature `Lorg/c/a/d/k;.i:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f7164.  call temp:= `j`(v1) @signature `Lorg/c/a/d/k;.j:()Lorg/c/a/c;` @kind virtual;
  #L3f716a.  v0:= temp @kind object;
  #L3f716c.  call temp:= `i`(v0, v2) @signature `Lorg/c/a/c;.i:(J)J` @kind virtual;
  #L3f7172.  v2:= temp @kind wide;
  #L3f7174.  return v2 @kind wide;
}
