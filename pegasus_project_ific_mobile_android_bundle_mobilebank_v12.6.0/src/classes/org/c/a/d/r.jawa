record `org.c.a.d.r` @kind class @AccessFlag PUBLIC_FINAL extends `org.c.a.d.f` @kind class {
  `org.c.a.a` `org.c.a.d.r.a` @AccessFlag PRIVATE_FINAL;
  `int` `org.c.a.d.r.b` @AccessFlag PRIVATE_FINAL;
  `int` `org.c.a.d.r.c` @AccessFlag PRIVATE_TRANSIENT;
}
global `long` `@@org.c.a.d.r.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.c.a.d.r` v1 @kind this, `org.c.a.a` v2 @kind object, `org.c.a.c` v3 @kind object) @signature `Lorg/c/a/d/r;.<init>:(Lorg/c/a/a;Lorg/c/a/c;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3f7d44.  v0:= 0I;
  #L3f7d46.  call `<init>`(v1, v2, v3, v0) @signature `Lorg/c/a/d/r;.<init>:(Lorg/c/a/a;Lorg/c/a/c;I)V` @kind direct;
  #L3f7d4c.  return @kind void;
}
procedure `void` `<init>`(`org.c.a.d.r` v0 @kind this, `org.c.a.a` v1 @kind object, `org.c.a.c` v2 @kind object, `int` v3 ) @signature `Lorg/c/a/d/r;.<init>:(Lorg/c/a/a;Lorg/c/a/c;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3f7d60.  call `<init>`(v0, v2) @signature `Lorg/c/a/d/f;.<init>:(Lorg/c/a/c;)V` @kind direct;
  #L3f7d66.  v0.`org.c.a.d.r.a` @type ^`org.c.a.a` := v1 @kind object;
  #L3f7d6a.  call temp:= `h`(v0) @signature `Lorg/c/a/d/f;.h:()I` @kind super;
  #L3f7d70.  v1:= temp;
  #L3f7d72.  if v1 >= v3 then goto L3f7d80;
  #L3f7d76.  v1:= v1 + 1;
  #L3f7d7a.  v0.`org.c.a.d.r.c` @type ^`int` := v1;
  #L3f7d7e.  goto L3f7d92;
  #L3f7d80.  v2:= v3 + 1;
  #L3f7d84.  if v1 != v2 then goto L3f7d8e;
  #L3f7d88.  v0.`org.c.a.d.r.c` @type ^`int` := v3;
  #L3f7d8c.  goto L3f7d92;
  #L3f7d8e.  v0.`org.c.a.d.r.c` @type ^`int` := v1;
  #L3f7d92.  v0.`org.c.a.d.r.b` @type ^`int` := v3;
  #L3f7d96.  return @kind void;
}
procedure `java.lang.Object` `readResolve`(`org.c.a.d.r` v2 @kind this) @signature `Lorg/c/a/d/r;.readResolve:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3f7ce4.  call temp:= `a`(v2) @signature `Lorg/c/a/d/r;.a:()Lorg/c/a/d;` @kind virtual;
  #L3f7cea.  v0:= temp @kind object;
  #L3f7cec.  v1:= v2.`org.c.a.d.r.a` @type ^`org.c.a.a` @kind object;
  #L3f7cf0.  call temp:= `a`(v0, v1) @signature `Lorg/c/a/d;.a:(Lorg/c/a/a;)Lorg/c/a/c;` @kind virtual;
  #L3f7cf6.  v0:= temp @kind object;
  #L3f7cf8.  return v0 @kind object;
}
procedure `int` `a`(`org.c.a.d.r` v0 @kind this, `long` v1 ) @signature `Lorg/c/a/d/r;.a:(J)I` @AccessFlag PUBLIC {
    temp;

  #L3f7ca4.  call temp:= `a`(v0, v1) @signature `Lorg/c/a/d/f;.a:(J)I` @kind super;
  #L3f7caa.  v1:= temp;
  #L3f7cac.  v2:= v0.`org.c.a.d.r.b` @type ^`int`;
  #L3f7cb0.  if v1 >= v2 then goto L3f7cb8;
  #L3f7cb4.  v1:= v1 + 1;
  #L3f7cb8.  return v1;
}
procedure `long` `b`(`org.c.a.d.r` v2 @kind this, `long` v3 , `int` v5 ) @signature `Lorg/c/a/d/r;.b:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3f7d0c.  v0:= v2.`org.c.a.d.r.c` @type ^`int`;
  #L3f7d10.  call temp:= `i`(v2) @signature `Lorg/c/a/d/r;.i:()I` @kind virtual;
  #L3f7d16.  v1:= temp;
  #L3f7d18.  call `a`(v2, v5, v0, v1) @signature `Lorg/c/a/d/h;.a:(Lorg/c/a/c;III)V` @kind static;
  #L3f7d1e.  v0:= v2.`org.c.a.d.r.b` @type ^`int`;
  #L3f7d22.  if v5 > v0 then goto L3f7d2a;
  #L3f7d26.  v5:= v5 + -1;
  #L3f7d2a.  call temp:= `b`(v2, v3, v5) @signature `Lorg/c/a/d/f;.b:(JI)J` @kind super;
  #L3f7d30.  v3:= temp @kind wide;
  #L3f7d32.  return v3 @kind wide;
}
procedure `int` `h`(`org.c.a.d.r` v1 @kind this) @signature `Lorg/c/a/d/r;.h:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f7ccc.  v0:= v1.`org.c.a.d.r.c` @type ^`int`;
  #L3f7cd0.  return v0;
}
