record `org.c.a.d.m` @kind class @AccessFlag PUBLIC_ABSTRACT extends `org.c.a.d.b` @kind class {
  `long` `org.c.a.d.m.a` @AccessFlag FINAL;
  `org.c.a.g` `org.c.a.d.m.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.c.a.d.m` v4 @kind this, `org.c.a.d` v5 @kind object, `org.c.a.g` v6 @kind object) @signature `Lorg/c/a/d/m;.<init>:(Lorg/c/a/d;Lorg/c/a/g;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f7548.  call `<init>`(v4, v5) @signature `Lorg/c/a/d/b;.<init>:(Lorg/c/a/d;)V` @kind direct;
  #L3f754e.  call temp:= `c`(v6) @signature `Lorg/c/a/g;.c:()Z` @kind virtual;
  #L3f7554.  v5:= temp;
  #L3f7556.  if v5 != 0 then goto L3f756a;
  #L3f755a.  v5:= new `java.lang.IllegalArgumentException`;
  #L3f755e.  v6:= "Unit duration field must be precise" @kind object;
  #L3f7562.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f7568.  throw v5;
  #L3f756a.  call temp:= `d`(v6) @signature `Lorg/c/a/g;.d:()J` @kind virtual;
  #L3f7570.  v0:= temp @kind wide;
  #L3f7572.  v4.`org.c.a.d.m.a` @type ^`long` := v0 @kind wide;
  #L3f7576.  v0:= v4.`org.c.a.d.m.a` @type ^`long` @kind wide;
  #L3f757a.  v2:= 1L;
  #L3f757e.  v5:= lcmp(v0, v2);
  #L3f7582.  if v5 >= 0 then goto L3f7596;
  #L3f7586.  v5:= new `java.lang.IllegalArgumentException`;
  #L3f758a.  v6:= "The unit milliseconds must be at least 1" @kind object;
  #L3f758e.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3f7594.  throw v5;
  #L3f7596.  v4.`org.c.a.d.m.b` @type ^`org.c.a.g` := v6 @kind object;
  #L3f759a.  return @kind void;
}
procedure `long` `b`(`org.c.a.d.m` v4 @kind this, `long` v5 , `int` v7 ) @signature `Lorg/c/a/d/m;.b:(JI)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f7408.  call temp:= `h`(v4) @signature `Lorg/c/a/d/m;.h:()I` @kind virtual;
  #L3f740e.  v0:= temp;
  #L3f7410.  call temp:= `d`(v4, v5, v7) @signature `Lorg/c/a/d/m;.d:(JI)I` @kind virtual;
  #L3f7416.  v1:= temp;
  #L3f7418.  call `a`(v4, v7, v0, v1) @signature `Lorg/c/a/d/h;.a:(Lorg/c/a/c;III)V` @kind static;
  #L3f741e.  call temp:= `a`(v4, v5) @signature `Lorg/c/a/d/m;.a:(J)I` @kind virtual;
  #L3f7424.  v0:= temp;
  #L3f7426.  v7:= v7 - v0 @kind int;
  #L3f7428.  v0:= (`long`) v7 @kind i2l;
  #L3f742a.  v2:= v4.`org.c.a.d.m.a` @type ^`long` @kind wide;
  #L3f742e.  v0:= v0 * v2 @kind long;
  #L3f7432.  v2:= v5 + v0 @kind long;
  #L3f7436.  return v2 @kind wide;
}
procedure `int` `d`(`org.c.a.d.m` v0 @kind this, `long` v1 , `int` v3 ) @signature `Lorg/c/a/d/m;.d:(JI)I` @AccessFlag PROTECTED {
    temp;

  #L3f73d8.  call temp:= `c`(v0, v1) @signature `Lorg/c/a/d/m;.c:(J)I` @kind virtual;
  #L3f73de.  v1:= temp;
  #L3f73e0.  return v1;
}
procedure `long` `d`(`org.c.a.d.m` v4 @kind this, `long` v5 ) @signature `Lorg/c/a/d/m;.d:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f7448.  v0:= 0L;
  #L3f744c.  v2:= lcmp(v5, v0);
  #L3f7450.  if v2 < 0 then goto L3f7462;
  #L3f7454.  v0:= v4.`org.c.a.d.m.a` @type ^`long` @kind wide;
  #L3f7458.  v0:= v5 %% v0 @kind long;
  #L3f745c.  v2:= v5 - v0 @kind long;
  #L3f7460.  return v2 @kind wide;
  #L3f7462.  v0:= 1L;
  #L3f7466.  v2:= v5 + v0 @kind long;
  #L3f746a.  v5:= v4.`org.c.a.d.m.a` @type ^`long` @kind wide;
  #L3f746e.  v5:= v2 %% v5 @kind long;
  #L3f7472.  v0:= v2 - v5 @kind long;
  #L3f7476.  v5:= v4.`org.c.a.d.m.a` @type ^`long` @kind wide;
  #L3f747a.  v2:= v0 - v5 @kind long;
  #L3f747e.  return v2 @kind wide;
}
procedure `boolean` `d`(`org.c.a.d.m` v1 @kind this) @signature `Lorg/c/a/d/m;.d:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f73c4.  v0:= 0I;
  #L3f73c6.  return v0;
}
procedure `long` `e`(`org.c.a.d.m` v4 @kind this, `long` v5 ) @signature `Lorg/c/a/d/m;.e:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3f7490.  v0:= 0L;
  #L3f7494.  v2:= lcmp(v5, v0);
  #L3f7498.  if v2 <= 0 then goto L3f74ba;
  #L3f749c.  v0:= 1L;
  #L3f74a0.  v2:= v5 - v0 @kind long;
  #L3f74a4.  v5:= v4.`org.c.a.d.m.a` @type ^`long` @kind wide;
  #L3f74a8.  v5:= v2 %% v5 @kind long;
  #L3f74ac.  v0:= v2 - v5 @kind long;
  #L3f74b0.  v5:= v4.`org.c.a.d.m.a` @type ^`long` @kind wide;
  #L3f74b4.  v2:= v0 + v5 @kind long;
  #L3f74b8.  return v2 @kind wide;
  #L3f74ba.  v0:= v4.`org.c.a.d.m.a` @type ^`long` @kind wide;
  #L3f74be.  v0:= v5 %% v0 @kind long;
  #L3f74c2.  v2:= v5 - v0 @kind long;
  #L3f74c6.  return v2 @kind wide;
}
procedure `org.c.a.g` `e`(`org.c.a.d.m` v1 @kind this) @signature `Lorg/c/a/d/m;.e:()Lorg/c/a/g;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f7530.  v0:= v1.`org.c.a.d.m.b` @type ^`org.c.a.g` @kind object;
  #L3f7534.  return v0 @kind object;
}
procedure `int` `h`(`org.c.a.d.m` v1 @kind this) @signature `Lorg/c/a/d/m;.h:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3f73f4.  v0:= 0I;
  #L3f73f6.  return v0;
}
procedure `long` `i`(`org.c.a.d.m` v6 @kind this, `long` v7 ) @signature `Lorg/c/a/d/m;.i:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3f74d8.  v0:= 0L;
  #L3f74dc.  v2:= lcmp(v7, v0);
  #L3f74e0.  if v2 < 0 then goto L3f74ec;
  #L3f74e4.  v0:= v6.`org.c.a.d.m.a` @type ^`long` @kind wide;
  #L3f74e8.  v7:= v7 %% v0 @kind long;
  #L3f74ea.  return v7 @kind wide;
  #L3f74ec.  v0:= 1L;
  #L3f74f0.  v2:= v7 + v0 @kind long;
  #L3f74f4.  v7:= v6.`org.c.a.d.m.a` @type ^`long` @kind wide;
  #L3f74f8.  v2:= v2 %% v7 @kind long;
  #L3f74fa.  v7:= v6.`org.c.a.d.m.a` @type ^`long` @kind wide;
  #L3f74fe.  v4:= v2 + v7 @kind long;
  #L3f7502.  v7:= v4 - v0 @kind long;
  #L3f7506.  return v7 @kind wide;
}
procedure `long` `j`(`org.c.a.d.m` v2 @kind this) @signature `Lorg/c/a/d/m;.j:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3f7518.  v0:= v2.`org.c.a.d.m.a` @type ^`long` @kind wide;
  #L3f751c.  return v0 @kind wide;
}
