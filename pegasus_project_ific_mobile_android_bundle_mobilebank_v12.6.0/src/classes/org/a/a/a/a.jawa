record `org.a.a.a.a` @kind class @AccessFlag PUBLIC {
}
global `java.lang.Object`[] `@@org.a.a.a.a.a` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.lang.Class`[] `@@org.a.a.a.a.b` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.lang.String`[] `@@org.a.a.a.a.c` @AccessFlag PUBLIC_STATIC_FINAL;
global `long`[] `@@org.a.a.a.a.d` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.lang.Long`[] `@@org.a.a.a.a.e` @AccessFlag PUBLIC_STATIC_FINAL;
global `int`[] `@@org.a.a.a.a.f` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.lang.Integer`[] `@@org.a.a.a.a.g` @AccessFlag PUBLIC_STATIC_FINAL;
global `short`[] `@@org.a.a.a.a.h` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.lang.Short`[] `@@org.a.a.a.a.i` @AccessFlag PUBLIC_STATIC_FINAL;
global `byte`[] `@@org.a.a.a.a.j` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.lang.Byte`[] `@@org.a.a.a.a.k` @AccessFlag PUBLIC_STATIC_FINAL;
global `double`[] `@@org.a.a.a.a.l` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.lang.Double`[] `@@org.a.a.a.a.m` @AccessFlag PUBLIC_STATIC_FINAL;
global `float`[] `@@org.a.a.a.a.n` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.lang.Float`[] `@@org.a.a.a.a.o` @AccessFlag PUBLIC_STATIC_FINAL;
global `boolean`[] `@@org.a.a.a.a.p` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.lang.Boolean`[] `@@org.a.a.a.a.q` @AccessFlag PUBLIC_STATIC_FINAL;
global `char`[] `@@org.a.a.a.a.r` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.lang.Character`[] `@@org.a.a.a.a.s` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/a/a/a/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3e7ee0.  v0:= 0I;
  #L3e7ee2.  v1:= new `java.lang.Object`[v0];
  #L3e7ee6.  `@@org.a.a.a.a.a` @type ^`java.lang.Object`[] := v1 @kind object;
  #L3e7eea.  v1:= new `java.lang.Class`[v0];
  #L3e7eee.  `@@org.a.a.a.a.b` @type ^`java.lang.Class`[] := v1 @kind object;
  #L3e7ef2.  v1:= new `java.lang.String`[v0];
  #L3e7ef6.  `@@org.a.a.a.a.c` @type ^`java.lang.String`[] := v1 @kind object;
  #L3e7efa.  v1:= new `long`[v0];
  #L3e7efe.  `@@org.a.a.a.a.d` @type ^`long`[] := v1 @kind object;
  #L3e7f02.  v1:= new `java.lang.Long`[v0];
  #L3e7f06.  `@@org.a.a.a.a.e` @type ^`java.lang.Long`[] := v1 @kind object;
  #L3e7f0a.  v1:= new `int`[v0];
  #L3e7f0e.  `@@org.a.a.a.a.f` @type ^`int`[] := v1 @kind object;
  #L3e7f12.  v1:= new `java.lang.Integer`[v0];
  #L3e7f16.  `@@org.a.a.a.a.g` @type ^`java.lang.Integer`[] := v1 @kind object;
  #L3e7f1a.  v1:= new `short`[v0];
  #L3e7f1e.  `@@org.a.a.a.a.h` @type ^`short`[] := v1 @kind object;
  #L3e7f22.  v1:= new `java.lang.Short`[v0];
  #L3e7f26.  `@@org.a.a.a.a.i` @type ^`java.lang.Short`[] := v1 @kind object;
  #L3e7f2a.  v1:= new `byte`[v0];
  #L3e7f2e.  `@@org.a.a.a.a.j` @type ^`byte`[] := v1 @kind object;
  #L3e7f32.  v1:= new `java.lang.Byte`[v0];
  #L3e7f36.  `@@org.a.a.a.a.k` @type ^`java.lang.Byte`[] := v1 @kind object;
  #L3e7f3a.  v1:= new `double`[v0];
  #L3e7f3e.  `@@org.a.a.a.a.l` @type ^`double`[] := v1 @kind object;
  #L3e7f42.  v1:= new `java.lang.Double`[v0];
  #L3e7f46.  `@@org.a.a.a.a.m` @type ^`java.lang.Double`[] := v1 @kind object;
  #L3e7f4a.  v1:= new `float`[v0];
  #L3e7f4e.  `@@org.a.a.a.a.n` @type ^`float`[] := v1 @kind object;
  #L3e7f52.  v1:= new `java.lang.Float`[v0];
  #L3e7f56.  `@@org.a.a.a.a.o` @type ^`java.lang.Float`[] := v1 @kind object;
  #L3e7f5a.  v1:= new `boolean`[v0];
  #L3e7f5e.  `@@org.a.a.a.a.p` @type ^`boolean`[] := v1 @kind object;
  #L3e7f62.  v1:= new `java.lang.Boolean`[v0];
  #L3e7f66.  `@@org.a.a.a.a.q` @type ^`java.lang.Boolean`[] := v1 @kind object;
  #L3e7f6a.  v1:= new `char`[v0];
  #L3e7f6e.  `@@org.a.a.a.a.r` @type ^`char`[] := v1 @kind object;
  #L3e7f72.  v0:= new `java.lang.Character`[v0];
  #L3e7f76.  `@@org.a.a.a.a.s` @type ^`java.lang.Character`[] := v0 @kind object;
  #L3e7f7a.  return @kind void;
}
procedure `int` `a`(`java.lang.Object` v0 @kind object) @signature `Lorg/a/a/a/a;.a:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3e7c50.  if v0 != 0 then goto L3e7c58;
  #L3e7c54.  v0:= 0I;
  #L3e7c56.  return v0;
  #L3e7c58.  call temp:= `getLength`(v0) @signature `Ljava/lang/reflect/Array;.getLength:(Ljava/lang/Object;)I` @kind static;
  #L3e7c5e.  v0:= temp;
  #L3e7c60.  return v0;
}
procedure `int` `a`(`java.lang.Object`[] v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lorg/a/a/a/a;.a:([Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3e7c74.  v0:= 0I;
  #L3e7c76.  call temp:= `a`(v1, v2, v0) @signature `Lorg/a/a/a/a;.a:([Ljava/lang/Object;Ljava/lang/Object;I)I` @kind static;
  #L3e7c7c.  v1:= temp;
  #L3e7c7e.  return v1;
}
procedure `int` `a`(`java.lang.Object`[] v2 @kind object, `java.lang.Object` v3 @kind object, `int` v4 ) @signature `Lorg/a/a/a/a;.a:([Ljava/lang/Object;Ljava/lang/Object;I)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3e7c90.  v0:= -1I;
  #L3e7c92.  if v2 != 0 then goto L3e7c98;
  #L3e7c96.  return v0;
  #L3e7c98.  if v4 >= 0 then goto L3e7c9e;
  #L3e7c9c.  v4:= 0I;
  #L3e7c9e.  if v3 != 0 then goto L3e7cb8;
  #L3e7ca2.  v3:= length @variable v2;
  #L3e7ca4.  if v4 >= v3 then goto L3e7cd6;
  #L3e7ca8.  v3:= v2[v4] @kind object;
  #L3e7cac.  if v3 != 0 then goto L3e7cb2;
  #L3e7cb0.  return v4;
  #L3e7cb2.  v4:= v4 + 1;
  #L3e7cb6.  goto L3e7ca2;
  #L3e7cb8.  v1:= length @variable v2;
  #L3e7cba.  if v4 >= v1 then goto L3e7cd6;
  #L3e7cbe.  v1:= v2[v4] @kind object;
  #L3e7cc2.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3e7cc8.  v1:= temp;
  #L3e7cca.  if v1 == 0 then goto L3e7cd0;
  #L3e7cce.  return v4;
  #L3e7cd0.  v4:= v4 + 1;
  #L3e7cd4.  goto L3e7cb8;
  #L3e7cd6.  return v0;
}
procedure `java.lang.Object` `a`(`java.lang.Object` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lorg/a/a/a/a;.a:(Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/Object;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L3e7d14.  if v2 == 0 then goto L3e7d46;
  #L3e7d18.  call temp:= `getLength`(v2) @signature `Ljava/lang/reflect/Array;.getLength:(Ljava/lang/Object;)I` @kind static;
  #L3e7d1e.  v3:= temp;
  #L3e7d20.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3e7d26.  v0:= temp @kind object;
  #L3e7d28.  call temp:= `getComponentType`(v0) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L3e7d2e.  v0:= temp @kind object;
  #L3e7d30.  v1:= v3 + 1;
  #L3e7d34.  call temp:= `newInstance`(v0, v1) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L3e7d3a.  v0:= temp @kind object;
  #L3e7d3c.  v1:= 0I;
  #L3e7d3e.  call `arraycopy`(v2, v1, v0, v1, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3e7d44.  return v0 @kind object;
  #L3e7d46.  v2:= 1I;
  #L3e7d48.  call temp:= `newInstance`(v3, v2) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L3e7d4e.  v2:= temp @kind object;
  #L3e7d50.  return v2 @kind object;
}
procedure `int`[] `a`(`int`[] v1 @kind object, `int` v2 ) @signature `Lorg/a/a/a/a;.a:([II)[I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3e7ce8.  v0:= `@@java.lang.Integer.TYPE` @type ^`java.lang.Class` @kind object;
  #L3e7cec.  call temp:= `a`(v1, v0) @signature `Lorg/a/a/a/a;.a:(Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/Object;` @kind static;
  #L3e7cf2.  v1:= temp @kind object;
  #L3e7cf4.  v1:= (`int`[]) v1 @kind object;
  #L3e7cf8.  v0:= length @variable v1;
  #L3e7cfa.  v0:= v0 + -1;
  #L3e7cfe.  v1[v0]:= v2;
  #L3e7d02.  return v1 @kind object;
}
procedure `java.lang.Object`[] `a`(`java.lang.Object`[] v0 @kind object) @signature `Lorg/a/a/a/a;.a:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3e7d64.  return v0 @kind object;
}
procedure `java.lang.Object`[] `a`(`java.lang.Object`[] v4 @kind object, `java.lang.Object`[] v5 @kind object) @signature `Lorg/a/a/a/a;.a:([Ljava/lang/Object;[Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3e7d78.  if v4 != 0 then goto L3e7d86;
  #L3e7d7c.  call temp:= `b`(v5) @signature `Lorg/a/a/a/a;.b:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind static;
  #L3e7d82.  v4:= temp @kind object;
  #L3e7d84.  return v4 @kind object;
  #L3e7d86.  if v5 != 0 then goto L3e7d94;
  #L3e7d8a.  call temp:= `b`(v4) @signature `Lorg/a/a/a/a;.b:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind static;
  #L3e7d90.  v4:= temp @kind object;
  #L3e7d92.  return v4 @kind object;
  #L3e7d94.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3e7d9a.  v0:= temp @kind object;
  #L3e7d9c.  call temp:= `getComponentType`(v0) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L3e7da2.  v0:= temp @kind object;
  #L3e7da4.  v1:= length @variable v4;
  #L3e7da6.  v2:= length @variable v5;
  #L3e7da8.  v1:= v1 + v2 @kind int;
  #L3e7daa.  call temp:= `newInstance`(v0, v1) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L3e7db0.  v1:= temp @kind object;
  #L3e7db2.  v1:= (`java.lang.Object`[]) v1 @kind object;
  #L3e7db6.  v2:= length @variable v4;
  #L3e7db8.  v3:= 0I;
  #L3e7dba.  call `arraycopy`(v4, v3, v1, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3e7dc0.  v4:= length @variable v4;
  #L3e7dc2.  v2:= length @variable v5;
  #L3e7dc4.  call `arraycopy`(v5, v3, v1, v4, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3e7dca.  return v1 @kind object;
  #L3e7dcc.  v4:= Exception @type ^`java.lang.ArrayStoreException` @kind object;
  #L3e7dce.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3e7dd4.  v5:= temp @kind object;
  #L3e7dd6.  call temp:= `getComponentType`(v5) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L3e7ddc.  v5:= temp @kind object;
  #L3e7dde.  call temp:= `isAssignableFrom`(v0, v5) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L3e7de4.  v1:= temp;
  #L3e7de6.  if v1 != 0 then goto L3e7e38;
  #L3e7dea.  v1:= new `java.lang.IllegalArgumentException`;
  #L3e7dee.  v2:= new `java.lang.StringBuilder`;
  #L3e7df2.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3e7df8.  v3:= "Cannot store " @kind object;
  #L3e7dfc.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e7e02.  call temp:= `getName`(v5) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L3e7e08.  v5:= temp @kind object;
  #L3e7e0a.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e7e10.  v5:= " in an array of " @kind object;
  #L3e7e14.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e7e1a.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L3e7e20.  v5:= temp @kind object;
  #L3e7e22.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3e7e28.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3e7e2e.  v5:= temp @kind object;
  #L3e7e30.  call `<init>`(v1, v5, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L3e7e36.  throw v1;
  #L3e7e38.  throw v4;
  catch `java.lang.ArrayStoreException` @[L3e7dc0..L3e7dca] goto L3e7dcc;
}
procedure `boolean` `b`(`java.lang.Object`[] v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lorg/a/a/a/a;.b:([Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3e7be4.  call temp:= `a`(v0, v1) @signature `Lorg/a/a/a/a;.a:([Ljava/lang/Object;Ljava/lang/Object;)I` @kind static;
  #L3e7bea.  v0:= temp;
  #L3e7bec.  v1:= -1I;
  #L3e7bee.  if v0 == v1 then goto L3e7bf6;
  #L3e7bf2.  v0:= 1I;
  #L3e7bf4.  goto L3e7bf8;
  #L3e7bf6.  v0:= 0I;
  #L3e7bf8.  return v0;
}
procedure `java.lang.Object`[] `b`(`java.lang.Object`[] v0 @kind object) @signature `Lorg/a/a/a/a;.b:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3e7e5c.  if v0 != 0 then goto L3e7e64;
  #L3e7e60.  v0:= 0I;
  #L3e7e62.  return v0 @kind object;
  #L3e7e64.  call temp:= `clone`(v0) @signature `[Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L3e7e6a.  v0:= temp @kind object;
  #L3e7e6c.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L3e7e70.  return v0 @kind object;
}
procedure `boolean` `c`(`java.lang.Object`[] v0 @kind object) @signature `Lorg/a/a/a/a;.c:([Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3e7c0c.  call temp:= `a`(v0) @signature `Lorg/a/a/a/a;.a:(Ljava/lang/Object;)I` @kind static;
  #L3e7c12.  v0:= temp;
  #L3e7c14.  if v0 != 0 then goto L3e7c1c;
  #L3e7c18.  v0:= 1I;
  #L3e7c1a.  goto L3e7c1e;
  #L3e7c1c.  v0:= 0I;
  #L3e7c1e.  return v0;
}
procedure `java.lang.Object`[] `c`(`java.lang.Object`[] v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lorg/a/a/a/a;.c:([Ljava/lang/Object;Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3e7e84.  if v1 == 0 then goto L3e7e9a;
  #L3e7e88.  call temp:= `getClass`(v1) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3e7e8e.  v0:= temp @kind object;
  #L3e7e90.  call temp:= `getComponentType`(v0) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L3e7e96.  v0:= temp @kind object;
  #L3e7e98.  goto L3e7ea6;
  #L3e7e9a.  if v2 == 0 then goto L3e7ebe;
  #L3e7e9e.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3e7ea4.  v0:= temp @kind object;
  #L3e7ea6.  call temp:= `a`(v1, v0) @signature `Lorg/a/a/a/a;.a:(Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/Object;` @kind static;
  #L3e7eac.  v1:= temp @kind object;
  #L3e7eae.  v1:= (`java.lang.Object`[]) v1 @kind object;
  #L3e7eb2.  v0:= length @variable v1;
  #L3e7eb4.  v0:= v0 + -1;
  #L3e7eb8.  v1[v0]:= v2 @kind object;
  #L3e7ebc.  return v1 @kind object;
  #L3e7ebe.  v1:= new `java.lang.IllegalArgumentException`;
  #L3e7ec2.  v2:= "Arguments cannot both be null" @kind object;
  #L3e7ec6.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3e7ecc.  throw v1;
}
procedure `boolean` `d`(`java.lang.Object`[] v0 @kind object) @signature `Lorg/a/a/a/a;.d:([Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3e7c30.  call temp:= `c`(v0) @signature `Lorg/a/a/a/a;.c:([Ljava/lang/Object;)Z` @kind static;
  #L3e7c36.  v0:= temp;
  #L3e7c38.  v0:= v0 ^~ 1;
  #L3e7c3c.  return v0;
}
