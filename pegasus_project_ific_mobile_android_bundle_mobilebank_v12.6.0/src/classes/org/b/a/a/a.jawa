record `org.b.a.a.a` @kind class @AccessFlag PUBLIC_ABSTRACT extends `org.b.a.e` @kind interface, `org.b.b.c` @kind interface {
  `byte`[] `org.b.a.a.a.a` @AccessFlag PRIVATE_FINAL;
  `int` `org.b.a.a.a.b` @AccessFlag PRIVATE;
  `long` `org.b.a.a.a.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.b.a.a.a` v1 @kind this) @signature `Lorg/b/a/a/a;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;

  #L3e9428.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3e942e.  v0:= 4I;
  #L3e9430.  v0:= new `byte`[v0];
  #L3e9434.  v1.`org.b.a.a.a.a` @type ^`byte`[] := v0 @kind object;
  #L3e9438.  v0:= 0I;
  #L3e943a.  v1.`org.b.a.a.a.b` @type ^`int` := v0;
  #L3e943e.  return @kind void;
}
procedure `void` `<init>`(`org.b.a.a.a` v1 @kind this, `org.b.a.a.a` v2 @kind object) @signature `Lorg/b/a/a/a;.<init>:(Lorg/b/a/a/a;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;

  #L3e9450.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3e9456.  v0:= 4I;
  #L3e9458.  v0:= new `byte`[v0];
  #L3e945c.  v1.`org.b.a.a.a.a` @type ^`byte`[] := v0 @kind object;
  #L3e9460.  call `a`(v1, v2) @signature `Lorg/b/a/a/a;.a:(Lorg/b/a/a/a;)V` @kind virtual;
  #L3e9466.  return @kind void;
}
procedure `void` `a`(`org.b.a.a.a` v6 @kind this, `byte` v7 ) @signature `Lorg/b/a/a/a;.a:(B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3e9478.  v0:= v6.`org.b.a.a.a.a` @type ^`byte`[] @kind object;
  #L3e947c.  v1:= v6.`org.b.a.a.a.b` @type ^`int`;
  #L3e9480.  v2:= v1 + 1;
  #L3e9484.  v6.`org.b.a.a.a.b` @type ^`int` := v2;
  #L3e9488.  v0[v1]:= v7 @kind byte;
  #L3e948c.  v7:= v6.`org.b.a.a.a.b` @type ^`int`;
  #L3e9490.  v0:= v6.`org.b.a.a.a.a` @type ^`byte`[] @kind object;
  #L3e9494.  v0:= length @variable v0;
  #L3e9496.  if v7 != v0 then goto L3e94aa;
  #L3e949a.  v7:= v6.`org.b.a.a.a.a` @type ^`byte`[] @kind object;
  #L3e949e.  v0:= 0I;
  #L3e94a0.  call `b`(v6, v7, v0) @signature `Lorg/b/a/a/a;.b:([BI)V` @kind virtual;
  #L3e94a6.  v6.`org.b.a.a.a.b` @type ^`int` := v0;
  #L3e94aa.  v0:= v6.`org.b.a.a.a.c` @type ^`long` @kind wide;
  #L3e94ae.  v2:= 1L;
  #L3e94b2.  v4:= v0 + v2 @kind long;
  #L3e94b6.  v6.`org.b.a.a.a.c` @type ^`long` := v4 @kind wide;
  #L3e94ba.  return @kind void;
}
procedure `void` `a`(`long` v0 ) @signature `Lorg/b/a/a/a;.a:(J)V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `a`(`org.b.a.a.a` v4 @kind this, `org.b.a.a.a` v5 @kind object) @signature `Lorg/b/a/a/a;.a:(Lorg/b/a/a/a;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3e9588.  v0:= v5.`org.b.a.a.a.a` @type ^`byte`[] @kind object;
  #L3e958c.  v1:= v4.`org.b.a.a.a.a` @type ^`byte`[] @kind object;
  #L3e9590.  v2:= v5.`org.b.a.a.a.a` @type ^`byte`[] @kind object;
  #L3e9594.  v2:= length @variable v2;
  #L3e9596.  v3:= 0I;
  #L3e9598.  call `arraycopy`(v0, v3, v1, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3e959e.  v0:= v5.`org.b.a.a.a.b` @type ^`int`;
  #L3e95a2.  v4.`org.b.a.a.a.b` @type ^`int` := v0;
  #L3e95a6.  v0:= v5.`org.b.a.a.a.c` @type ^`long` @kind wide;
  #L3e95aa.  v4.`org.b.a.a.a.c` @type ^`long` := v0 @kind wide;
  #L3e95ae.  return @kind void;
}
procedure `void` `a`(`org.b.a.a.a` v5 @kind this, `byte`[] v6 @kind object, `int` v7 , `int` v8 ) @signature `Lorg/b/a/a/a;.a:([BII)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3e94cc.  v0:= 0I;
  #L3e94ce.  call temp:= `max`(v0, v8) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L3e94d4.  v8:= temp;
  #L3e94d6.  v1:= v5.`org.b.a.a.a.b` @type ^`int`;
  #L3e94da.  if v1 == 0 then goto L3e9524;
  #L3e94de.  v1:= 0I;
  #L3e94e0.  if v1 >= v8 then goto L3e9522;
  #L3e94e4.  v2:= v5.`org.b.a.a.a.a` @type ^`byte`[] @kind object;
  #L3e94e8.  v3:= v5.`org.b.a.a.a.b` @type ^`int`;
  #L3e94ec.  v4:= v3 + 1;
  #L3e94f0.  v5.`org.b.a.a.a.b` @type ^`int` := v4;
  #L3e94f4.  v4:= v1 + 1;
  #L3e94f8.  v1:= v1 + v7 @kind int;
  #L3e94fa.  v1:= v6[v1] @kind byte;
  #L3e94fe.  v2[v3]:= v1 @kind byte;
  #L3e9502.  v1:= v5.`org.b.a.a.a.b` @type ^`int`;
  #L3e9506.  v2:= 4I;
  #L3e9508.  if v1 != v2 then goto L3e951e;
  #L3e950c.  v1:= v5.`org.b.a.a.a.a` @type ^`byte`[] @kind object;
  #L3e9510.  call `b`(v5, v1, v0) @signature `Lorg/b/a/a/a;.b:([BI)V` @kind virtual;
  #L3e9516.  v5.`org.b.a.a.a.b` @type ^`int` := v0;
  #L3e951a.  v0:= v4;
  #L3e951c.  goto L3e9524;
  #L3e951e.  v1:= v4;
  #L3e9520.  goto L3e94e0;
  #L3e9522.  v0:= v1;
  #L3e9524.  v1:= v8 - v0 @kind int;
  #L3e9528.  v1:= v1 ^& -4;
  #L3e952c.  v1:= v1 + v0 @kind int;
  #L3e952e.  if v0 >= v1 then goto L3e9542;
  #L3e9532.  v2:= v7 + v0 @kind int;
  #L3e9536.  call `b`(v5, v6, v2) @signature `Lorg/b/a/a/a;.b:([BI)V` @kind virtual;
  #L3e953c.  v0:= v0 + 4;
  #L3e9540.  goto L3e952e;
  #L3e9542.  if v0 >= v8 then goto L3e9568;
  #L3e9546.  v1:= v5.`org.b.a.a.a.a` @type ^`byte`[] @kind object;
  #L3e954a.  v2:= v5.`org.b.a.a.a.b` @type ^`int`;
  #L3e954e.  v3:= v2 + 1;
  #L3e9552.  v5.`org.b.a.a.a.b` @type ^`int` := v3;
  #L3e9556.  v3:= v0 + 1;
  #L3e955a.  v0:= v0 + v7 @kind int;
  #L3e955c.  v0:= v6[v0] @kind byte;
  #L3e9560.  v1[v2]:= v0 @kind byte;
  #L3e9564.  v0:= v3;
  #L3e9566.  goto L3e9542;
  #L3e9568.  v6:= v5.`org.b.a.a.a.c` @type ^`long` @kind wide;
  #L3e956c.  v0:= (`long`) v8 @kind i2l;
  #L3e956e.  v2:= v6 + v0 @kind long;
  #L3e9572.  v5.`org.b.a.a.a.c` @type ^`long` := v2 @kind wide;
  #L3e9576.  return @kind void;
}
procedure `void` `b`(`byte`[] v0 @kind object, `int` v1 ) @signature `Lorg/b/a/a/a;.b:([BI)V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `c`(`org.b.a.a.a` v3 @kind this) @signature `Lorg/b/a/a/a;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3e95c0.  v0:= 0L;
  #L3e95c4.  v3.`org.b.a.a.a.c` @type ^`long` := v0 @kind wide;
  #L3e95c8.  v0:= 0I;
  #L3e95ca.  v3.`org.b.a.a.a.b` @type ^`int` := v0;
  #L3e95ce.  v1:= 0I;
  #L3e95d0.  v2:= v3.`org.b.a.a.a.a` @type ^`byte`[] @kind object;
  #L3e95d4.  v2:= length @variable v2;
  #L3e95d6.  if v1 >= v2 then goto L3e95e8;
  #L3e95da.  v2:= v3.`org.b.a.a.a.a` @type ^`byte`[] @kind object;
  #L3e95de.  v2[v1]:= v0 @kind byte;
  #L3e95e2.  v1:= v1 + 1;
  #L3e95e6.  goto L3e95d0;
  #L3e95e8.  return @kind void;
}
procedure `int` `d`(`org.b.a.a.a` v1 @kind this) @signature `Lorg/b/a/a/a;.d:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3e9410.  v0:= 64I;
  #L3e9414.  return v0;
}
procedure `void` `e`(`org.b.a.a.a` v3 @kind this) @signature `Lorg/b/a/a/a;.e:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3e95fc.  v0:= v3.`org.b.a.a.a.c` @type ^`long` @kind wide;
  #L3e9600.  v2:= 3I;
  #L3e9602.  v0:= v0 ^< v2 @kind long;
  #L3e9604.  v2:= -128I;
  #L3e9608.  call `a`(v3, v2) @signature `Lorg/b/a/a/a;.a:(B)V` @kind virtual;
  #L3e960e.  v2:= v3.`org.b.a.a.a.b` @type ^`int`;
  #L3e9612.  if v2 == 0 then goto L3e961a;
  #L3e9616.  v2:= 0I;
  #L3e9618.  goto L3e9608;
  #L3e961a.  call `a`(v3, v0) @signature `Lorg/b/a/a/a;.a:(J)V` @kind virtual;
  #L3e9620.  call `f`(v3) @signature `Lorg/b/a/a/a;.f:()V` @kind virtual;
  #L3e9626.  return @kind void;
}
procedure `void` `f`() @signature `Lorg/b/a/a/a;.f:()V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
