record `org.b.a.d.f` @kind class @AccessFlag PUBLIC extends `java.security.SecureRandom` @kind class {
  `org.b.a.d.b` `org.b.a.d.f.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `org.b.a.d.f.b` @AccessFlag PRIVATE_FINAL;
  `java.security.SecureRandom` `org.b.a.d.f.c` @AccessFlag PRIVATE_FINAL;
  `org.b.a.d.c` `org.b.a.d.f.d` @AccessFlag PRIVATE_FINAL;
  `org.b.a.d.a.b` `org.b.a.d.f.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.b.a.d.f` v0 @kind this, `java.security.SecureRandom` v1 @kind object, `org.b.a.d.c` v2 @kind object, `org.b.a.d.b` v3 @kind object, `boolean` v4 ) @signature `Lorg/b/a/d/f;.<init>:(Ljava/security/SecureRandom;Lorg/b/a/d/c;Lorg/b/a/d/b;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3ea9b0.  call `<init>`(v0) @signature `Ljava/security/SecureRandom;.<init>:()V` @kind direct;
  #L3ea9b6.  v0.`org.b.a.d.f.c` @type ^`java.security.SecureRandom` := v1 @kind object;
  #L3ea9ba.  v0.`org.b.a.d.f.d` @type ^`org.b.a.d.c` := v2 @kind object;
  #L3ea9be.  v0.`org.b.a.d.f.a` @type ^`org.b.a.d.b` := v3 @kind object;
  #L3ea9c2.  v0.`org.b.a.d.f.b` @type ^`boolean` := v4 @kind boolean;
  #L3ea9c6.  return @kind void;
}
procedure `byte`[] `generateSeed`(`org.b.a.d.f` v1 @kind this, `int` v2 ) @signature `Lorg/b/a/d/f;.generateSeed:(I)[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ea990.  v0:= v1.`org.b.a.d.f.d` @type ^`org.b.a.d.c` @kind object;
  #L3ea994.  call temp:= `a`(v0, v2) @signature `Lorg/b/a/d/e;.a:(Lorg/b/a/d/c;I)[B` @kind static;
  #L3ea99a.  v2:= temp @kind object;
  #L3ea99c.  return v2 @kind object;
}
procedure `void` `nextBytes`(`org.b.a.d.f` v3 @kind this, `byte`[] v4 @kind object) @signature `Lorg/b/a/d/f;.nextBytes:([B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ea9d8.  @monitorenter v3
  #L3ea9da.  v0:= v3.`org.b.a.d.f.e` @type ^`org.b.a.d.a.b` @kind object;
  #L3ea9de.  if v0 != 0 then goto L3ea9f6;
  #L3ea9e2.  v0:= v3.`org.b.a.d.f.a` @type ^`org.b.a.d.b` @kind object;
  #L3ea9e6.  v1:= v3.`org.b.a.d.f.d` @type ^`org.b.a.d.c` @kind object;
  #L3ea9ea.  call temp:= `a`(v0, v1) @signature `Lorg/b/a/d/b;.a:(Lorg/b/a/d/c;)Lorg/b/a/d/a/b;` @kind interface;
  #L3ea9f0.  v0:= temp @kind object;
  #L3ea9f2.  v3.`org.b.a.d.f.e` @type ^`org.b.a.d.a.b` := v0 @kind object;
  #L3ea9f6.  v0:= v3.`org.b.a.d.f.e` @type ^`org.b.a.d.a.b` @kind object;
  #L3ea9fa.  v1:= v3.`org.b.a.d.f.b` @type ^`boolean` @kind boolean;
  #L3ea9fe.  v2:= 0I;
  #L3eaa00.  call temp:= `a`(v0, v4, v2, v1) @signature `Lorg/b/a/d/a/b;.a:([B[BZ)I` @kind interface;
  #L3eaa06.  v0:= temp;
  #L3eaa08.  if v0 >= 0 then goto L3eaa24;
  #L3eaa0c.  v0:= v3.`org.b.a.d.f.e` @type ^`org.b.a.d.a.b` @kind object;
  #L3eaa10.  call `a`(v0, v2) @signature `Lorg/b/a/d/a/b;.a:([B)V` @kind interface;
  #L3eaa16.  v0:= v3.`org.b.a.d.f.e` @type ^`org.b.a.d.a.b` @kind object;
  #L3eaa1a.  v1:= v3.`org.b.a.d.f.b` @type ^`boolean` @kind boolean;
  #L3eaa1e.  call temp:= `a`(v0, v4, v2, v1) @signature `Lorg/b/a/d/a/b;.a:([B[BZ)I` @kind interface;
  #L3eaa24.  @monitorexit v3
  #L3eaa26.  return @kind void;
  #L3eaa28.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3eaa2a.  @monitorexit v3
  #L3eaa2c.  throw v4;
  catch `java.lang.Throwable` @[L3ea9da..L3eaa2c] goto L3eaa28;
}
procedure `void` `setSeed`(`org.b.a.d.f` v1 @kind this, `long` v2 ) @signature `Lorg/b/a/d/f;.setSeed:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3eaa88.  @monitorenter v1
  #L3eaa8a.  v0:= v1.`org.b.a.d.f.c` @type ^`java.security.SecureRandom` @kind object;
  #L3eaa8e.  if v0 == 0 then goto L3eaa9c;
  #L3eaa92.  v0:= v1.`org.b.a.d.f.c` @type ^`java.security.SecureRandom` @kind object;
  #L3eaa96.  call `setSeed`(v0, v2) @signature `Ljava/security/SecureRandom;.setSeed:(J)V` @kind virtual;
  #L3eaa9c.  @monitorexit v1
  #L3eaa9e.  return @kind void;
  #L3eaaa0.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3eaaa2.  @monitorexit v1
  #L3eaaa4.  throw v2;
  catch `java.lang.Throwable` @[L3eaa8a..L3eaaa4] goto L3eaaa0;
}
procedure `void` `setSeed`(`org.b.a.d.f` v1 @kind this, `byte`[] v2 @kind object) @signature `Lorg/b/a/d/f;.setSeed:([B)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3eaa4c.  @monitorenter v1
  #L3eaa4e.  v0:= v1.`org.b.a.d.f.c` @type ^`java.security.SecureRandom` @kind object;
  #L3eaa52.  if v0 == 0 then goto L3eaa60;
  #L3eaa56.  v0:= v1.`org.b.a.d.f.c` @type ^`java.security.SecureRandom` @kind object;
  #L3eaa5a.  call `setSeed`(v0, v2) @signature `Ljava/security/SecureRandom;.setSeed:([B)V` @kind virtual;
  #L3eaa60.  @monitorexit v1
  #L3eaa62.  return @kind void;
  #L3eaa64.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3eaa66.  @monitorexit v1
  #L3eaa68.  throw v2;
  catch `java.lang.Throwable` @[L3eaa4e..L3eaa68] goto L3eaa64;
}
