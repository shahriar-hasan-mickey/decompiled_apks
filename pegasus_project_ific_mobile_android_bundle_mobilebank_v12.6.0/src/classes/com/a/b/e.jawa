record `com.a.b.e` @kind class @AccessFlag  extends `com.a.b.d` @kind class {
  `java.lang.reflect.Method` `com.a.b.e.a` @AccessFlag PRIVATE;
  `java.lang.reflect.Method` `com.a.b.e.b` @AccessFlag PRIVATE;
  `java.lang.reflect.Field` `com.a.b.e.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.a.b.e` v6 @kind this, `java.lang.Class` v7 @kind object, `java.lang.Class` v8 @kind object, `java.lang.String` v9 @kind object) @signature `Lcom/a/b/e;.<init>:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L28b77c.  call `<init>`(v6, v8, v9) @signature `Lcom/a/b/d;.<init>:(Ljava/lang/Class;Ljava/lang/String;)V` @kind direct;
  #L28b782.  v0:= 0I;
  #L28b784.  call temp:= `charAt`(v9, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L28b78a.  v1:= temp;
  #L28b78c.  call temp:= `toUpperCase`(v1) @signature `Ljava/lang/Character;.toUpperCase:(C)C` @kind static;
  #L28b792.  v1:= temp;
  #L28b794.  v2:= 1I;
  #L28b796.  call temp:= `substring`(v9, v2) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L28b79c.  v3:= temp @kind object;
  #L28b79e.  v4:= new `java.lang.StringBuilder`;
  #L28b7a2.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L28b7a8.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L28b7ae.  call temp:= `append`(v4, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28b7b4.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L28b7ba.  v1:= temp @kind object;
  #L28b7bc.  v3:= new `java.lang.StringBuilder`;
  #L28b7c0.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L28b7c6.  v4:= "get" @kind object;
  #L28b7ca.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28b7d0.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28b7d6.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L28b7dc.  v3:= temp @kind object;
  #L28b7de.  v4:= 0I;
  #L28b7e0.  v5:= v4 @kind object;
  #L28b7e2.  v5:= (`java.lang.Class`[]) v5 @kind object;
  #L28b7e6.  call temp:= `getMethod`(v7, v3, v5) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L28b7ec.  v5:= temp @kind object;
  #L28b7ee.  v6.`com.a.b.e.b` @type ^`java.lang.reflect.Method` := v5 @kind object;
  #L28b7f2.  goto L28b862;
  #L28b7f4.  v5:= v4 @kind object;
  #L28b7f6.  v5:= (`java.lang.Class`[]) v5 @kind object;
  #L28b7fa.  call temp:= `getDeclaredMethod`(v7, v3, v5) @signature `Ljava/lang/Class;.getDeclaredMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L28b800.  v3:= temp @kind object;
  #L28b802.  v6.`com.a.b.e.b` @type ^`java.lang.reflect.Method` := v3 @kind object;
  #L28b806.  v3:= v6.`com.a.b.e.b` @type ^`java.lang.reflect.Method` @kind object;
  #L28b80a.  call `setAccessible`(v3, v2) @signature `Ljava/lang/reflect/Method;.setAccessible:(Z)V` @kind virtual;
  #L28b810.  goto L28b862;
  #L28b812.  v3:= new `java.lang.StringBuilder`;
  #L28b816.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L28b81c.  v5:= "is" @kind object;
  #L28b820.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28b826.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28b82c.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L28b832.  v3:= temp @kind object;
  #L28b834.  v5:= v4 @kind object;
  #L28b836.  v5:= (`java.lang.Class`[]) v5 @kind object;
  #L28b83a.  call temp:= `getMethod`(v7, v3, v5) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L28b840.  v5:= temp @kind object;
  #L28b842.  v6.`com.a.b.e.b` @type ^`java.lang.reflect.Method` := v5 @kind object;
  #L28b846.  goto L28b862;
  #L28b848.  v4:= (`java.lang.Class`[]) v4 @kind object;
  #L28b84c.  call temp:= `getDeclaredMethod`(v7, v3, v4) @signature `Ljava/lang/Class;.getDeclaredMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L28b852.  v3:= temp @kind object;
  #L28b854.  v6.`com.a.b.e.b` @type ^`java.lang.reflect.Method` := v3 @kind object;
  #L28b858.  v3:= v6.`com.a.b.e.b` @type ^`java.lang.reflect.Method` @kind object;
  #L28b85c.  call `setAccessible`(v3, v2) @signature `Ljava/lang/reflect/Method;.setAccessible:(Z)V` @kind virtual;
  #L28b862.  v9:= v6.`com.a.b.e.b` @type ^`java.lang.reflect.Method` @kind object;
  #L28b866.  call temp:= `getReturnType`(v9) @signature `Ljava/lang/reflect/Method;.getReturnType:()Ljava/lang/Class;` @kind virtual;
  #L28b86c.  v9:= temp @kind object;
  #L28b86e.  call temp:= `a`(v6, v8, v9) @signature `Lcom/a/b/e;.a:(Ljava/lang/Class;Ljava/lang/Class;)Z` @kind direct;
  #L28b874.  v3:= temp;
  #L28b876.  if v3 != 0 then goto L28b8cc;
  #L28b87a.  v7:= new `com.a.b.c`;
  #L28b87e.  v0:= new `java.lang.StringBuilder`;
  #L28b882.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L28b888.  v1:= "Underlying type (" @kind object;
  #L28b88c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28b892.  call temp:= `append`(v0, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28b898.  v9:= ") " @kind object;
  #L28b89c.  call temp:= `append`(v0, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28b8a2.  v9:= "does not match Property type (" @kind object;
  #L28b8a6.  call temp:= `append`(v0, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28b8ac.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28b8b2.  v8:= ")" @kind object;
  #L28b8b6.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28b8bc.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L28b8c2.  v8:= temp @kind object;
  #L28b8c4.  call `<init>`(v7, v8) @signature `Lcom/a/b/c;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L28b8ca.  throw v7;
  #L28b8cc.  v8:= new `java.lang.StringBuilder`;
  #L28b8d0.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L28b8d6.  v3:= "set" @kind object;
  #L28b8da.  call temp:= `append`(v8, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28b8e0.  call temp:= `append`(v8, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28b8e6.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L28b8ec.  v8:= temp @kind object;
  #L28b8ee.  v1:= new `java.lang.Class`[v2];
  #L28b8f2.  v1[v0]:= v9 @kind object;
  #L28b8f6.  call temp:= `getDeclaredMethod`(v7, v8, v1) @signature `Ljava/lang/Class;.getDeclaredMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L28b8fc.  v7:= temp @kind object;
  #L28b8fe.  v6.`com.a.b.e.a` @type ^`java.lang.reflect.Method` := v7 @kind object;
  #L28b902.  v7:= v6.`com.a.b.e.a` @type ^`java.lang.reflect.Method` @kind object;
  #L28b906.  call `setAccessible`(v7, v2) @signature `Ljava/lang/reflect/Method;.setAccessible:(Z)V` @kind virtual;
  #L28b90c.  return @kind void;
  #L28b90e.  call temp:= `getField`(v7, v9) @signature `Ljava/lang/Class;.getField:(Ljava/lang/String;)Ljava/lang/reflect/Field;` @kind virtual;
  #L28b914.  v7:= temp @kind object;
  #L28b916.  v6.`com.a.b.e.c` @type ^`java.lang.reflect.Field` := v7 @kind object;
  #L28b91a.  v7:= v6.`com.a.b.e.c` @type ^`java.lang.reflect.Field` @kind object;
  #L28b91e.  call temp:= `getType`(v7) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L28b924.  v7:= temp @kind object;
  #L28b926.  call temp:= `a`(v6, v8, v7) @signature `Lcom/a/b/e;.a:(Ljava/lang/Class;Ljava/lang/Class;)Z` @kind direct;
  #L28b92c.  v0:= temp;
  #L28b92e.  if v0 != 0 then goto L28b984;
  #L28b932.  v0:= new `com.a.b.c`;
  #L28b936.  v1:= new `java.lang.StringBuilder`;
  #L28b93a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L28b940.  v2:= "Underlying type (" @kind object;
  #L28b944.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28b94a.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28b950.  v7:= ") " @kind object;
  #L28b954.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28b95a.  v7:= "does not match Property type (" @kind object;
  #L28b95e.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28b964.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28b96a.  v7:= ")" @kind object;
  #L28b96e.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28b974.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L28b97a.  v7:= temp @kind object;
  #L28b97c.  call `<init>`(v0, v7) @signature `Lcom/a/b/c;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L28b982.  throw v0;
  #L28b984.  return @kind void;
  #L28b986.  v7:= new `com.a.b.c`;
  #L28b98a.  v8:= new `java.lang.StringBuilder`;
  #L28b98e.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L28b994.  v0:= "No accessor method or field found for property with name " @kind object;
  #L28b998.  call temp:= `append`(v8, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28b99e.  call temp:= `append`(v8, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28b9a4.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L28b9aa.  v8:= temp @kind object;
  #L28b9ac.  call `<init>`(v7, v8) @signature `Lcom/a/b/c;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L28b9b2.  throw v7;
  catch `java.lang.NoSuchMethodException` @[L28b7e0..L28b7f2] goto L28b7f4;
  catch `java.lang.NoSuchMethodException` @[L28b7f4..L28b810] goto L28b812;
  catch `java.lang.NoSuchMethodException` @[L28b834..L28b846] goto L28b848;
  catch `java.lang.NoSuchMethodException` @[L28b848..L28b862] goto L28b90e;
  catch `java.lang.NoSuchMethodException` @[L28b8ee..L28b90c] goto L28b90c;
  catch `java.lang.NoSuchFieldException` @[L28b90e..L28b984] goto L28b986;
}
procedure `boolean` `a`(`com.a.b.e` v3 @kind this, `java.lang.Class` v4 @kind object, `java.lang.Class` v5 @kind object) @signature `Lcom/a/b/e;.a:(Ljava/lang/Class;Ljava/lang/Class;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L28b634.  v0:= 1I;
  #L28b636.  if v5 == v4 then goto L28b6d0;
  #L28b63a.  call temp:= `isPrimitive`(v5) @signature `Ljava/lang/Class;.isPrimitive:()Z` @kind virtual;
  #L28b640.  v1:= temp;
  #L28b642.  v2:= 0I;
  #L28b644.  if v1 == 0 then goto L28b6ce;
  #L28b648.  v1:= `@@java.lang.Float.TYPE` @type ^`java.lang.Class` @kind object;
  #L28b64c.  if v5 != v1 then goto L28b658;
  #L28b650.  v1:= constclass @type ^`java.lang.Float` @kind object;
  #L28b654.  if v4 == v1 then goto L28b6cc;
  #L28b658.  v1:= `@@java.lang.Integer.TYPE` @type ^`java.lang.Class` @kind object;
  #L28b65c.  if v5 != v1 then goto L28b668;
  #L28b660.  v1:= constclass @type ^`java.lang.Integer` @kind object;
  #L28b664.  if v4 == v1 then goto L28b6cc;
  #L28b668.  v1:= `@@java.lang.Boolean.TYPE` @type ^`java.lang.Class` @kind object;
  #L28b66c.  if v5 != v1 then goto L28b678;
  #L28b670.  v1:= constclass @type ^`java.lang.Boolean` @kind object;
  #L28b674.  if v4 == v1 then goto L28b6cc;
  #L28b678.  v1:= `@@java.lang.Long.TYPE` @type ^`java.lang.Class` @kind object;
  #L28b67c.  if v5 != v1 then goto L28b688;
  #L28b680.  v1:= constclass @type ^`java.lang.Long` @kind object;
  #L28b684.  if v4 == v1 then goto L28b6cc;
  #L28b688.  v1:= `@@java.lang.Double.TYPE` @type ^`java.lang.Class` @kind object;
  #L28b68c.  if v5 != v1 then goto L28b698;
  #L28b690.  v1:= constclass @type ^`java.lang.Double` @kind object;
  #L28b694.  if v4 == v1 then goto L28b6cc;
  #L28b698.  v1:= `@@java.lang.Short.TYPE` @type ^`java.lang.Class` @kind object;
  #L28b69c.  if v5 != v1 then goto L28b6a8;
  #L28b6a0.  v1:= constclass @type ^`java.lang.Short` @kind object;
  #L28b6a4.  if v4 == v1 then goto L28b6cc;
  #L28b6a8.  v1:= `@@java.lang.Byte.TYPE` @type ^`java.lang.Class` @kind object;
  #L28b6ac.  if v5 != v1 then goto L28b6b8;
  #L28b6b0.  v1:= constclass @type ^`java.lang.Byte` @kind object;
  #L28b6b4.  if v4 == v1 then goto L28b6cc;
  #L28b6b8.  v1:= `@@java.lang.Character.TYPE` @type ^`java.lang.Class` @kind object;
  #L28b6bc.  if v5 != v1 then goto L28b6ca;
  #L28b6c0.  v5:= constclass @type ^`java.lang.Character` @kind object;
  #L28b6c4.  if v4 != v5 then goto L28b6ca;
  #L28b6c8.  goto L28b6cc;
  #L28b6ca.  v0:= 0I;
  #L28b6cc.  return v0;
  #L28b6ce.  return v2;
  #L28b6d0.  return v0;
}
procedure `java.lang.Object` `a`(`com.a.b.e` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lcom/a/b/e;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L28b6e4.  v0:= v2.`com.a.b.e.b` @type ^`java.lang.reflect.Method` @kind object;
  #L28b6e8.  if v0 == 0 then goto L28b722;
  #L28b6ec.  v0:= v2.`com.a.b.e.b` @type ^`java.lang.reflect.Method` @kind object;
  #L28b6f0.  v1:= 0I;
  #L28b6f2.  v1:= (`java.lang.Object`[]) v1 @kind object;
  #L28b6f6.  call temp:= `invoke`(v0, v3, v1) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L28b6fc.  v3:= temp @kind object;
  #L28b6fe.  return v3 @kind object;
  #L28b700.  v3:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L28b702.  v0:= new `java.lang.RuntimeException`;
  #L28b706.  call temp:= `getCause`(v3) @signature `Ljava/lang/reflect/InvocationTargetException;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L28b70c.  v3:= temp @kind object;
  #L28b70e.  call `<init>`(v0, v3) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L28b714.  throw v0;
  #L28b716.  v3:= new `java.lang.AssertionError`;
  #L28b71a.  call `<init>`(v3) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L28b720.  throw v3;
  #L28b722.  v0:= v2.`com.a.b.e.c` @type ^`java.lang.reflect.Field` @kind object;
  #L28b726.  if v0 == 0 then goto L28b744;
  #L28b72a.  v0:= v2.`com.a.b.e.c` @type ^`java.lang.reflect.Field` @kind object;
  #L28b72e.  call temp:= `get`(v0, v3) @signature `Ljava/lang/reflect/Field;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L28b734.  v3:= temp @kind object;
  #L28b736.  return v3 @kind object;
  #L28b738.  v3:= new `java.lang.AssertionError`;
  #L28b73c.  call `<init>`(v3) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L28b742.  throw v3;
  #L28b744.  v3:= new `java.lang.AssertionError`;
  #L28b748.  call `<init>`(v3) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L28b74e.  throw v3;
  catch `java.lang.IllegalAccessException` @[L28b6ec..L28b6fe] goto L28b716;
  catch `java.lang.reflect.InvocationTargetException` @[L28b6ec..L28b6fe] goto L28b700;
  catch `java.lang.IllegalAccessException` @[L28b72a..L28b736] goto L28b738;
}
procedure `void` `a`(`com.a.b.e` v3 @kind this, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lcom/a/b/e;.a:(Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L28ba10.  v0:= v3.`com.a.b.e.a` @type ^`java.lang.reflect.Method` @kind object;
  #L28ba14.  if v0 == 0 then goto L28ba52;
  #L28ba18.  v0:= v3.`com.a.b.e.a` @type ^`java.lang.reflect.Method` @kind object;
  #L28ba1c.  v1:= 1I;
  #L28ba1e.  v1:= new `java.lang.Object`[v1];
  #L28ba22.  v2:= 0I;
  #L28ba24.  v1[v2]:= v5 @kind object;
  #L28ba28.  call temp:= `invoke`(v0, v4, v1) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L28ba2e.  goto L28ba64;
  #L28ba30.  v4:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L28ba32.  v5:= new `java.lang.RuntimeException`;
  #L28ba36.  call temp:= `getCause`(v4) @signature `Ljava/lang/reflect/InvocationTargetException;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L28ba3c.  v4:= temp @kind object;
  #L28ba3e.  call `<init>`(v5, v4) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L28ba44.  throw v5;
  #L28ba46.  v4:= new `java.lang.AssertionError`;
  #L28ba4a.  call `<init>`(v4) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L28ba50.  throw v4;
  #L28ba52.  v0:= v3.`com.a.b.e.c` @type ^`java.lang.reflect.Field` @kind object;
  #L28ba56.  if v0 == 0 then goto L28ba72;
  #L28ba5a.  v0:= v3.`com.a.b.e.c` @type ^`java.lang.reflect.Field` @kind object;
  #L28ba5e.  call `set`(v0, v4, v5) @signature `Ljava/lang/reflect/Field;.set:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L28ba64.  return @kind void;
  #L28ba66.  v4:= new `java.lang.AssertionError`;
  #L28ba6a.  call `<init>`(v4) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L28ba70.  throw v4;
  #L28ba72.  v4:= new `java.lang.UnsupportedOperationException`;
  #L28ba76.  v5:= new `java.lang.StringBuilder`;
  #L28ba7a.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L28ba80.  v0:= "Property " @kind object;
  #L28ba84.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28ba8a.  call temp:= `a`(v3) @signature `Lcom/a/b/e;.a:()Ljava/lang/String;` @kind virtual;
  #L28ba90.  v0:= temp @kind object;
  #L28ba92.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28ba98.  v0:= " is read-only" @kind object;
  #L28ba9c.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L28baa2.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L28baa8.  v5:= temp @kind object;
  #L28baaa.  call `<init>`(v4, v5) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L28bab0.  throw v4;
  catch `java.lang.IllegalAccessException` @[L28ba18..L28ba2e] goto L28ba46;
  catch `java.lang.reflect.InvocationTargetException` @[L28ba18..L28ba2e] goto L28ba30;
  catch `java.lang.IllegalAccessException` @[L28ba5a..L28ba64] goto L28ba66;
}
