record `com.a.a.h$b` @kind class @AccessFlag  extends `com.a.a.h` @kind class {
  `int` `com.a.a.h$b.d` @AccessFlag ;
}
procedure `void` `<init>`(`com.a.a.h$b` v0 @kind this, `float` v1 ) @signature `Lcom/a/a/h$b;.<init>:(F)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L287d0c.  call `<init>`(v0) @signature `Lcom/a/a/h;.<init>:()V` @kind direct;
  #L287d12.  v0.`com.a.a.h$b.a` @type ^`float` := v1;
  #L287d16.  v1:= `@@java.lang.Integer.TYPE` @type ^`java.lang.Class` @kind object;
  #L287d1a.  v0.`com.a.a.h$b.b` @type ^`java.lang.Class` := v1 @kind object;
  #L287d1e.  return @kind void;
}
procedure `void` `<init>`(`com.a.a.h$b` v0 @kind this, `float` v1 , `int` v2 ) @signature `Lcom/a/a/h$b;.<init>:(FI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L287d30.  call `<init>`(v0) @signature `Lcom/a/a/h;.<init>:()V` @kind direct;
  #L287d36.  v0.`com.a.a.h$b.a` @type ^`float` := v1;
  #L287d3a.  v0.`com.a.a.h$b.d` @type ^`int` := v2;
  #L287d3e.  v1:= `@@java.lang.Integer.TYPE` @type ^`java.lang.Class` @kind object;
  #L287d42.  v0.`com.a.a.h$b.b` @type ^`java.lang.Class` := v1 @kind object;
  #L287d46.  v1:= 1I;
  #L287d48.  v0.`com.a.a.h$b.c` @type ^`boolean` := v1 @kind boolean;
  #L287d4c.  return @kind void;
}
procedure `void` `a`(`com.a.a.h$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lcom/a/a/h$b;.a:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L287d60.  if v3 == 0 then goto L287d8a;
  #L287d64.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L287d6a.  v0:= temp @kind object;
  #L287d6c.  v1:= constclass @type ^`java.lang.Integer` @kind object;
  #L287d70.  if v0 != v1 then goto L287d8a;
  #L287d74.  v3:= (`java.lang.Integer`) v3 @kind object;
  #L287d78.  call temp:= `intValue`(v3) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L287d7e.  v3:= temp;
  #L287d80.  v2.`com.a.a.h$b.d` @type ^`int` := v3;
  #L287d84.  v3:= 1I;
  #L287d86.  v2.`com.a.a.h$b.c` @type ^`boolean` := v3 @kind boolean;
  #L287d8a.  return @kind void;
}
procedure `java.lang.Object` `b`(`com.a.a.h$b` v1 @kind this) @signature `Lcom/a/a/h$b;.b:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L287cd0.  v0:= v1.`com.a.a.h$b.d` @type ^`int`;
  #L287cd4.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L287cda.  v0:= temp @kind object;
  #L287cdc.  return v0 @kind object;
}
procedure `java.lang.Object` `clone`(`com.a.a.h$b` v1 @kind this) @signature `Lcom/a/a/h$b;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L287cf0.  call temp:= `g`(v1) @signature `Lcom/a/a/h$b;.g:()Lcom/a/a/h$b;` @kind virtual;
  #L287cf6.  v0:= temp @kind object;
  #L287cf8.  return v0 @kind object;
}
procedure `com.a.a.h` `e`(`com.a.a.h$b` v1 @kind this) @signature `Lcom/a/a/h$b;.e:()Lcom/a/a/h;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L287c64.  call temp:= `g`(v1) @signature `Lcom/a/a/h$b;.g:()Lcom/a/a/h$b;` @kind virtual;
  #L287c6a.  v0:= temp @kind object;
  #L287c6c.  return v0 @kind object;
}
procedure `int` `f`(`com.a.a.h$b` v1 @kind this) @signature `Lcom/a/a/h$b;.f:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L287cb8.  v0:= v1.`com.a.a.h$b.d` @type ^`int`;
  #L287cbc.  return v0;
}
procedure `com.a.a.h$b` `g`(`com.a.a.h$b` v3 @kind this) @signature `Lcom/a/a/h$b;.g:()Lcom/a/a/h$b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L287c80.  v0:= new `com.a.a.h$b`;
  #L287c84.  call temp:= `c`(v3) @signature `Lcom/a/a/h$b;.c:()F` @kind virtual;
  #L287c8a.  v1:= temp;
  #L287c8c.  v2:= v3.`com.a.a.h$b.d` @type ^`int`;
  #L287c90.  call `<init>`(v0, v1, v2) @signature `Lcom/a/a/h$b;.<init>:(FI)V` @kind direct;
  #L287c96.  call temp:= `d`(v3) @signature `Lcom/a/a/h$b;.d:()Landroid/view/animation/Interpolator;` @kind virtual;
  #L287c9c.  v1:= temp @kind object;
  #L287c9e.  call `a`(v0, v1) @signature `Lcom/a/a/h$b;.a:(Landroid/view/animation/Interpolator;)V` @kind virtual;
  #L287ca4.  return v0 @kind object;
}
