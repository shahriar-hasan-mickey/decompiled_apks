record `com.a.a.c$d` @kind class @AccessFlag  extends `com.a.a.a$a` @kind interface {
  `com.a.a.c` `com.a.a.c$d.a` @AccessFlag PRIVATE;
  `com.a.a.c$e` `com.a.a.c$d.b` @AccessFlag PRIVATE;
  `int` `com.a.a.c$d.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.a.a.c$d` v0 @kind this, `com.a.a.c` v1 @kind object, `com.a.a.c$e` v2 @kind object, `int` v3 ) @signature `Lcom/a/a/c$d;.<init>:(Lcom/a/a/c;Lcom/a/a/c$e;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L286444.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L28644a.  v0.`com.a.a.c$d.a` @type ^`com.a.a.c` := v1 @kind object;
  #L28644e.  v0.`com.a.a.c$d.b` @type ^`com.a.a.c$e` := v2 @kind object;
  #L286452.  v0.`com.a.a.c$d.c` @type ^`int` := v3;
  #L286456.  return @kind void;
}
procedure `void` `e`(`com.a.a.c$d` v6 @kind this, `com.a.a.a` v7 @kind object) @signature `Lcom/a/a/c$d;.e:(Lcom/a/a/a;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2864d4.  v0:= v6.`com.a.a.c$d.a` @type ^`com.a.a.c` @kind object;
  #L2864d8.  v0:= v0.`com.a.a.c.b` @type ^`boolean` @kind boolean;
  #L2864dc.  if v0 == 0 then goto L2864e2;
  #L2864e0.  return @kind void;
  #L2864e2.  v0:= 0I;
  #L2864e4.  v1:= v6.`com.a.a.c$d.b` @type ^`com.a.a.c$e` @kind object;
  #L2864e8.  v1:= v1.`com.a.a.c$e.c` @type ^`java.util.ArrayList` @kind object;
  #L2864ec.  call temp:= `size`(v1) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L2864f2.  v1:= temp;
  #L2864f4.  v2:= 0I;
  #L2864f6.  if v2 >= v1 then goto L286536;
  #L2864fa.  v3:= v6.`com.a.a.c$d.b` @type ^`com.a.a.c$e` @kind object;
  #L2864fe.  v3:= v3.`com.a.a.c$e.c` @type ^`java.util.ArrayList` @kind object;
  #L286502.  call temp:= `get`(v3, v2) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L286508.  v3:= temp @kind object;
  #L28650a.  v3:= (`com.a.a.c$c`) v3 @kind object;
  #L28650e.  v4:= v3.`com.a.a.c$c.b` @type ^`int`;
  #L286512.  v5:= v6.`com.a.a.c$d.c` @type ^`int`;
  #L286516.  if v4 != v5 then goto L286530;
  #L28651a.  v4:= v3.`com.a.a.c$c.a` @type ^`com.a.a.c$e` @kind object;
  #L28651e.  v4:= v4.`com.a.a.c$e.a` @type ^`com.a.a.a` @kind object;
  #L286522.  if v4 != v7 then goto L286530;
  #L286526.  call `b`(v7, v6) @signature `Lcom/a/a/a;.b:(Lcom/a/a/a$a;)V` @kind virtual;
  #L28652c.  v0:= v3 @kind object;
  #L28652e.  goto L286536;
  #L286530.  v2:= v2 + 1;
  #L286534.  goto L2864f6;
  #L286536.  v7:= v6.`com.a.a.c$d.b` @type ^`com.a.a.c$e` @kind object;
  #L28653a.  v7:= v7.`com.a.a.c$e.c` @type ^`java.util.ArrayList` @kind object;
  #L28653e.  call temp:= `remove`(v7, v0) @signature `Ljava/util/ArrayList;.remove:(Ljava/lang/Object;)Z` @kind virtual;
  #L286544.  v7:= v6.`com.a.a.c$d.b` @type ^`com.a.a.c$e` @kind object;
  #L286548.  v7:= v7.`com.a.a.c$e.c` @type ^`java.util.ArrayList` @kind object;
  #L28654c.  call temp:= `size`(v7) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L286552.  v7:= temp;
  #L286554.  if v7 != 0 then goto L286580;
  #L286558.  v7:= v6.`com.a.a.c$d.b` @type ^`com.a.a.c$e` @kind object;
  #L28655c.  v7:= v7.`com.a.a.c$e.a` @type ^`com.a.a.a` @kind object;
  #L286560.  call `a`(v7) @signature `Lcom/a/a/a;.a:()V` @kind virtual;
  #L286566.  v7:= v6.`com.a.a.c$d.a` @type ^`com.a.a.c` @kind object;
  #L28656a.  call temp:= `a`(v7) @signature `Lcom/a/a/c;.a:(Lcom/a/a/c;)Ljava/util/ArrayList;` @kind static;
  #L286570.  v7:= temp @kind object;
  #L286572.  v0:= v6.`com.a.a.c$d.b` @type ^`com.a.a.c$e` @kind object;
  #L286576.  v0:= v0.`com.a.a.c$e.a` @type ^`com.a.a.a` @kind object;
  #L28657a.  call temp:= `add`(v7, v0) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L286580.  return @kind void;
}
procedure `void` `a`(`com.a.a.c$d` v1 @kind this, `com.a.a.a` v2 @kind object) @signature `Lcom/a/a/c$d;.a:(Lcom/a/a/a;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L286468.  v0:= v1.`com.a.a.c$d.c` @type ^`int`;
  #L28646c.  if v0 != 0 then goto L286476;
  #L286470.  call `e`(v1, v2) @signature `Lcom/a/a/c$d;.e:(Lcom/a/a/a;)V` @kind direct;
  #L286476.  return @kind void;
}
procedure `void` `b`(`com.a.a.c$d` v2 @kind this, `com.a.a.a` v3 @kind object) @signature `Lcom/a/a/c$d;.b:(Lcom/a/a/a;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L286488.  v0:= v2.`com.a.a.c$d.c` @type ^`int`;
  #L28648c.  v1:= 1I;
  #L28648e.  if v0 != v1 then goto L286498;
  #L286492.  call `e`(v2, v3) @signature `Lcom/a/a/c$d;.e:(Lcom/a/a/a;)V` @kind direct;
  #L286498.  return @kind void;
}
procedure `void` `c`(`com.a.a.c$d` v0 @kind this, `com.a.a.a` v1 @kind object) @signature `Lcom/a/a/c$d;.c:(Lcom/a/a/a;)V` @AccessFlag PUBLIC {
    temp;

  #L2864ac.  return @kind void;
}
procedure `void` `d`(`com.a.a.c$d` v0 @kind this, `com.a.a.a` v1 @kind object) @signature `Lcom/a/a/c$d;.d:(Lcom/a/a/a;)V` @AccessFlag PUBLIC {
    temp;

  #L2864c0.  return @kind void;
}
