record `com.a.a.c$e` @kind class @AccessFlag  extends `java.lang.Cloneable` @kind interface {
  `com.a.a.a` `com.a.a.c$e.a` @AccessFlag PUBLIC;
  `java.util.ArrayList` `com.a.a.c$e.b` @AccessFlag PUBLIC;
  `java.util.ArrayList` `com.a.a.c$e.c` @AccessFlag PUBLIC;
  `java.util.ArrayList` `com.a.a.c$e.d` @AccessFlag PUBLIC;
  `java.util.ArrayList` `com.a.a.c$e.e` @AccessFlag PUBLIC;
  `boolean` `com.a.a.c$e.f` @AccessFlag PUBLIC;
}
procedure `void` `<init>`(`com.a.a.c$e` v1 @kind this, `com.a.a.a` v2 @kind object) @signature `Lcom/a/a/c$e;.<init>:(Lcom/a/a/a;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2865fc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L286602.  v0:= 0I;
  #L286604.  v1.`com.a.a.c$e.b` @type ^`java.util.ArrayList` := v0 @kind object;
  #L286608.  v1.`com.a.a.c$e.c` @type ^`java.util.ArrayList` := v0 @kind object;
  #L28660c.  v1.`com.a.a.c$e.d` @type ^`java.util.ArrayList` := v0 @kind object;
  #L286610.  v1.`com.a.a.c$e.e` @type ^`java.util.ArrayList` := v0 @kind object;
  #L286614.  v0:= 0I;
  #L286616.  v1.`com.a.a.c$e.f` @type ^`boolean` := v0 @kind boolean;
  #L28661a.  v1.`com.a.a.c$e.a` @type ^`com.a.a.a` := v2 @kind object;
  #L28661e.  return @kind void;
}
procedure `com.a.a.c$e` `a`(`com.a.a.c$e` v2 @kind this) @signature `Lcom/a/a/c$e;.a:()Lcom/a/a/c$e;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L286594.  call temp:= `clone`(v2) @signature `Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind super;
  #L28659a.  v0:= temp @kind object;
  #L28659c.  v0:= (`com.a.a.c$e`) v0 @kind object;
  #L2865a0.  v1:= v2.`com.a.a.c$e.a` @type ^`com.a.a.a` @kind object;
  #L2865a4.  call temp:= `g`(v1) @signature `Lcom/a/a/a;.g:()Lcom/a/a/a;` @kind virtual;
  #L2865aa.  v1:= temp @kind object;
  #L2865ac.  v0.`com.a.a.c$e.a` @type ^`com.a.a.a` := v1 @kind object;
  #L2865b0.  return v0 @kind object;
  #L2865b2.  v0:= new `java.lang.AssertionError`;
  #L2865b6.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2865bc.  throw v0;
  catch `java.lang.CloneNotSupportedException` @[L286594..L2865b0] goto L2865b2;
}
procedure `void` `a`(`com.a.a.c$e` v2 @kind this, `com.a.a.c$c` v3 @kind object) @signature `Lcom/a/a/c$e;.a:(Lcom/a/a/c$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L286630.  v0:= v2.`com.a.a.c$e.b` @type ^`java.util.ArrayList` @kind object;
  #L286634.  if v0 != 0 then goto L286654;
  #L286638.  v0:= new `java.util.ArrayList`;
  #L28663c.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L286642.  v2.`com.a.a.c$e.b` @type ^`java.util.ArrayList` := v0 @kind object;
  #L286646.  v0:= new `java.util.ArrayList`;
  #L28664a.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L286650.  v2.`com.a.a.c$e.d` @type ^`java.util.ArrayList` := v0 @kind object;
  #L286654.  v0:= v2.`com.a.a.c$e.b` @type ^`java.util.ArrayList` @kind object;
  #L286658.  call temp:= `add`(v0, v3) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L28665e.  v0:= v2.`com.a.a.c$e.d` @type ^`java.util.ArrayList` @kind object;
  #L286662.  v1:= v3.`com.a.a.c$c.a` @type ^`com.a.a.c$e` @kind object;
  #L286666.  call temp:= `contains`(v0, v1) @signature `Ljava/util/ArrayList;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L28666c.  v0:= temp;
  #L28666e.  if v0 != 0 then goto L286680;
  #L286672.  v0:= v2.`com.a.a.c$e.d` @type ^`java.util.ArrayList` @kind object;
  #L286676.  v1:= v3.`com.a.a.c$c.a` @type ^`com.a.a.c$e` @kind object;
  #L28667a.  call temp:= `add`(v0, v1) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L286680.  v3:= v3.`com.a.a.c$c.a` @type ^`com.a.a.c$e` @kind object;
  #L286684.  v0:= v3.`com.a.a.c$e.e` @type ^`java.util.ArrayList` @kind object;
  #L286688.  if v0 != 0 then goto L28669a;
  #L28668c.  v0:= new `java.util.ArrayList`;
  #L286690.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L286696.  v3.`com.a.a.c$e.e` @type ^`java.util.ArrayList` := v0 @kind object;
  #L28669a.  v3:= v3.`com.a.a.c$e.e` @type ^`java.util.ArrayList` @kind object;
  #L28669e.  call temp:= `add`(v3, v2) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L2866a4.  return @kind void;
}
procedure `java.lang.Object` `clone`(`com.a.a.c$e` v1 @kind this) @signature `Lcom/a/a/c$e;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2865e0.  call temp:= `a`(v1) @signature `Lcom/a/a/c$e;.a:()Lcom/a/a/c$e;` @kind virtual;
  #L2865e6.  v0:= temp @kind object;
  #L2865e8.  return v0 @kind object;
}
