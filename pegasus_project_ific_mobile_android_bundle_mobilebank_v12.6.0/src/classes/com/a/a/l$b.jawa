record `com.a.a.l$b` @kind class @AccessFlag  extends `com.a.a.l` @kind class {
  `com.a.a.g` `com.a.a.l$b.h` @AccessFlag ;
  `int` `com.a.a.l$b.i` @AccessFlag ;
  `com.a.b.b` `com.a.a.l$b.j` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.a.a.l$b` v1 @kind this, `com.a.b.d` v2 @kind object, `int`[] v3 @kind object) @signature `Lcom/a/a/l$b;.<init>:(Lcom/a/b/d;[I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2897a8.  v0:= 0I;
  #L2897aa.  call `<init>`(v1, v2, v0) @signature `Lcom/a/a/l;.<init>:(Lcom/a/b/d;Lcom/a/a/l$1;)V` @kind direct;
  #L2897b0.  call `a`(v1, v3) @signature `Lcom/a/a/l$b;.a:([I)V` @kind virtual;
  #L2897b6.  v2:= instanceof @variable v2 @type ^`com.a.b.b` @kind boolean;
  #L2897ba.  if v2 == 0 then goto L2897ca;
  #L2897be.  v2:= v1.`com.a.a.l$b.b` @type ^`com.a.b.d` @kind object;
  #L2897c2.  v2:= (`com.a.b.b`) v2 @kind object;
  #L2897c6.  v1.`com.a.a.l$b.j` @type ^`com.a.b.b` := v2 @kind object;
  #L2897ca.  return @kind void;
}
procedure `void` `<init>`(`com.a.a.l$b` v1 @kind this, `java.lang.String` v2 @kind object, `int`[] v3 @kind object) @signature `Lcom/a/a/l$b;.<init>:(Ljava/lang/String;[I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2897dc.  v0:= 0I;
  #L2897de.  call `<init>`(v1, v2, v0) @signature `Lcom/a/a/l;.<init>:(Ljava/lang/String;Lcom/a/a/l$1;)V` @kind direct;
  #L2897e4.  call `a`(v1, v3) @signature `Lcom/a/a/l$b;.a:([I)V` @kind virtual;
  #L2897ea.  return @kind void;
}
procedure `com.a.a.l` `a`(`com.a.a.l$b` v1 @kind this) @signature `Lcom/a/a/l$b;.a:()Lcom/a/a/l;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L289724.  call temp:= `e`(v1) @signature `Lcom/a/a/l$b;.e:()Lcom/a/a/l$b;` @kind virtual;
  #L28972a.  v0:= temp @kind object;
  #L28972c.  return v0 @kind object;
}
procedure `void` `a`(`com.a.a.l$b` v1 @kind this, `float` v2 ) @signature `Lcom/a/a/l$b;.a:(F)V` @AccessFlag  {
    temp;
    v0;

  #L2897fc.  v0:= v1.`com.a.a.l$b.h` @type ^`com.a.a.g` @kind object;
  #L289800.  call temp:= `b`(v0, v2) @signature `Lcom/a/a/g;.b:(F)I` @kind virtual;
  #L289806.  v2:= temp;
  #L289808.  v1.`com.a.a.l$b.i` @type ^`int` := v2;
  #L28980c.  return @kind void;
}
procedure `void` `a`(`com.a.a.l$b` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lcom/a/a/l$b;.a:(Ljava/lang/Class;)V` @AccessFlag  {
    temp;
    v0;

  #L289844.  v0:= v1.`com.a.a.l$b.b` @type ^`com.a.b.d` @kind object;
  #L289848.  if v0 == 0 then goto L28984e;
  #L28984c.  return @kind void;
  #L28984e.  call `a`(v1, v2) @signature `Lcom/a/a/l;.a:(Ljava/lang/Class;)V` @kind super;
  #L289854.  return @kind void;
}
procedure `void` `a`(`com.a.a.l$b` v0 @kind this, `int`[] v1 @kind object) @signature `Lcom/a/a/l$b;.a:([I)V` @AccessFlag PUBLIC {
    temp;

  #L289820.  call `a`(v0, v1) @signature `Lcom/a/a/l;.a:([I)V` @kind super;
  #L289826.  v1:= v0.`com.a.a.l$b.e` @type ^`com.a.a.i` @kind object;
  #L28982a.  v1:= (`com.a.a.g`) v1 @kind object;
  #L28982e.  v0.`com.a.a.l$b.h` @type ^`com.a.a.g` := v1 @kind object;
  #L289832.  return @kind void;
}
procedure `void` `b`(`com.a.a.l$b` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lcom/a/a/l$b;.b:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L289868.  v0:= v3.`com.a.a.l$b.j` @type ^`com.a.b.b` @kind object;
  #L28986c.  if v0 == 0 then goto L289880;
  #L289870.  v0:= v3.`com.a.a.l$b.j` @type ^`com.a.b.b` @kind object;
  #L289874.  v1:= v3.`com.a.a.l$b.i` @type ^`int`;
  #L289878.  call `a`(v0, v4, v1) @signature `Lcom/a/b/b;.a:(Ljava/lang/Object;I)V` @kind virtual;
  #L28987e.  return @kind void;
  #L289880.  v0:= v3.`com.a.a.l$b.b` @type ^`com.a.b.d` @kind object;
  #L289884.  if v0 == 0 then goto L2898a0;
  #L289888.  v0:= v3.`com.a.a.l$b.b` @type ^`com.a.b.d` @kind object;
  #L28988c.  v1:= v3.`com.a.a.l$b.i` @type ^`int`;
  #L289890.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L289896.  v1:= temp @kind object;
  #L289898.  call `a`(v0, v4, v1) @signature `Lcom/a/b/d;.a:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L28989e.  return @kind void;
  #L2898a0.  v0:= v3.`com.a.a.l$b.c` @type ^`java.lang.reflect.Method` @kind object;
  #L2898a4.  if v0 == 0 then goto L2898f8;
  #L2898a8.  v0:= v3.`com.a.a.l$b.g` @type ^`java.lang.Object`[] @kind object;
  #L2898ac.  v1:= 0I;
  #L2898ae.  v2:= v3.`com.a.a.l$b.i` @type ^`int`;
  #L2898b2.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2898b8.  v2:= temp @kind object;
  #L2898ba.  v0[v1]:= v2 @kind object;
  #L2898be.  v0:= v3.`com.a.a.l$b.c` @type ^`java.lang.reflect.Method` @kind object;
  #L2898c2.  v1:= v3.`com.a.a.l$b.g` @type ^`java.lang.Object`[] @kind object;
  #L2898c6.  call temp:= `invoke`(v0, v4, v1) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2898cc.  goto L2898f8;
  #L2898ce.  v4:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L2898d0.  v0:= "PropertyValuesHolder" @kind object;
  #L2898d4.  call temp:= `toString`(v4) @signature `Ljava/lang/IllegalAccessException;.toString:()Ljava/lang/String;` @kind virtual;
  #L2898da.  v4:= temp @kind object;
  #L2898dc.  call temp:= `e`(v0, v4) @signature `Landroid/util/Log;.e:(Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L2898e2.  goto L2898f8;
  #L2898e4.  v4:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L2898e6.  v0:= "PropertyValuesHolder" @kind object;
  #L2898ea.  call temp:= `toString`(v4) @signature `Ljava/lang/reflect/InvocationTargetException;.toString:()Ljava/lang/String;` @kind virtual;
  #L2898f0.  v4:= temp @kind object;
  #L2898f2.  call temp:= `e`(v0, v4) @signature `Landroid/util/Log;.e:(Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L2898f8.  return @kind void;
  catch `java.lang.reflect.InvocationTargetException` @[L2898a8..L2898cc] goto L2898e4;
  catch `java.lang.IllegalAccessException` @[L2898a8..L2898cc] goto L2898ce;
}
procedure `java.lang.Object` `clone`(`com.a.a.l$b` v1 @kind this) @signature `Lcom/a/a/l$b;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L28976c.  call temp:= `e`(v1) @signature `Lcom/a/a/l$b;.e:()Lcom/a/a/l$b;` @kind virtual;
  #L289772.  v0:= temp @kind object;
  #L289774.  return v0 @kind object;
}
procedure `java.lang.Object` `d`(`com.a.a.l$b` v1 @kind this) @signature `Lcom/a/a/l$b;.d:()Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;

  #L289788.  v0:= v1.`com.a.a.l$b.i` @type ^`int`;
  #L28978c.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L289792.  v0:= temp @kind object;
  #L289794.  return v0 @kind object;
}
procedure `com.a.a.l$b` `e`(`com.a.a.l$b` v2 @kind this) @signature `Lcom/a/a/l$b;.e:()Lcom/a/a/l$b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L289740.  call temp:= `a`(v2) @signature `Lcom/a/a/l;.a:()Lcom/a/a/l;` @kind super;
  #L289746.  v0:= temp @kind object;
  #L289748.  v0:= (`com.a.a.l$b`) v0 @kind object;
  #L28974c.  v1:= v0.`com.a.a.l$b.e` @type ^`com.a.a.i` @kind object;
  #L289750.  v1:= (`com.a.a.g`) v1 @kind object;
  #L289754.  v0.`com.a.a.l$b.h` @type ^`com.a.a.g` := v1 @kind object;
  #L289758.  return v0 @kind object;
}
