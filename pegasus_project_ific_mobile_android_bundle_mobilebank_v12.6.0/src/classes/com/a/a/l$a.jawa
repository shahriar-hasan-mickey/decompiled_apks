record `com.a.a.l$a` @kind class @AccessFlag  extends `com.a.a.l` @kind class {
  `com.a.a.e` `com.a.a.l$a.h` @AccessFlag ;
  `float` `com.a.a.l$a.i` @AccessFlag ;
  `com.a.b.a` `com.a.a.l$a.j` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.a.a.l$a` v1 @kind this, `com.a.b.d` v2 @kind object, `float`[] v3 @kind object) @signature `Lcom/a/a/l$a;.<init>:(Lcom/a/b/d;[F)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2895b0.  v0:= 0I;
  #L2895b2.  call `<init>`(v1, v2, v0) @signature `Lcom/a/a/l;.<init>:(Lcom/a/b/d;Lcom/a/a/l$1;)V` @kind direct;
  #L2895b8.  call `a`(v1, v3) @signature `Lcom/a/a/l$a;.a:([F)V` @kind virtual;
  #L2895be.  v2:= instanceof @variable v2 @type ^`com.a.b.a` @kind boolean;
  #L2895c2.  if v2 == 0 then goto L2895d2;
  #L2895c6.  v2:= v1.`com.a.a.l$a.b` @type ^`com.a.b.d` @kind object;
  #L2895ca.  v2:= (`com.a.b.a`) v2 @kind object;
  #L2895ce.  v1.`com.a.a.l$a.j` @type ^`com.a.b.a` := v2 @kind object;
  #L2895d2.  return @kind void;
}
procedure `void` `<init>`(`com.a.a.l$a` v1 @kind this, `java.lang.String` v2 @kind object, `float`[] v3 @kind object) @signature `Lcom/a/a/l$a;.<init>:(Ljava/lang/String;[F)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2895e4.  v0:= 0I;
  #L2895e6.  call `<init>`(v1, v2, v0) @signature `Lcom/a/a/l;.<init>:(Ljava/lang/String;Lcom/a/a/l$1;)V` @kind direct;
  #L2895ec.  call `a`(v1, v3) @signature `Lcom/a/a/l$a;.a:([F)V` @kind virtual;
  #L2895f2.  return @kind void;
}
procedure `com.a.a.l` `a`(`com.a.a.l$a` v1 @kind this) @signature `Lcom/a/a/l$a;.a:()Lcom/a/a/l;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L28952c.  call temp:= `e`(v1) @signature `Lcom/a/a/l$a;.e:()Lcom/a/a/l$a;` @kind virtual;
  #L289532.  v0:= temp @kind object;
  #L289534.  return v0 @kind object;
}
procedure `void` `a`(`com.a.a.l$a` v1 @kind this, `float` v2 ) @signature `Lcom/a/a/l$a;.a:(F)V` @AccessFlag  {
    temp;
    v0;

  #L289604.  v0:= v1.`com.a.a.l$a.h` @type ^`com.a.a.e` @kind object;
  #L289608.  call temp:= `b`(v0, v2) @signature `Lcom/a/a/e;.b:(F)F` @kind virtual;
  #L28960e.  v2:= temp;
  #L289610.  v1.`com.a.a.l$a.i` @type ^`float` := v2;
  #L289614.  return @kind void;
}
procedure `void` `a`(`com.a.a.l$a` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lcom/a/a/l$a;.a:(Ljava/lang/Class;)V` @AccessFlag  {
    temp;
    v0;

  #L28964c.  v0:= v1.`com.a.a.l$a.b` @type ^`com.a.b.d` @kind object;
  #L289650.  if v0 == 0 then goto L289656;
  #L289654.  return @kind void;
  #L289656.  call `a`(v1, v2) @signature `Lcom/a/a/l;.a:(Ljava/lang/Class;)V` @kind super;
  #L28965c.  return @kind void;
}
procedure `void` `a`(`com.a.a.l$a` v0 @kind this, `float`[] v1 @kind object) @signature `Lcom/a/a/l$a;.a:([F)V` @AccessFlag PUBLIC {
    temp;

  #L289628.  call `a`(v0, v1) @signature `Lcom/a/a/l;.a:([F)V` @kind super;
  #L28962e.  v1:= v0.`com.a.a.l$a.e` @type ^`com.a.a.i` @kind object;
  #L289632.  v1:= (`com.a.a.e`) v1 @kind object;
  #L289636.  v0.`com.a.a.l$a.h` @type ^`com.a.a.e` := v1 @kind object;
  #L28963a.  return @kind void;
}
procedure `void` `b`(`com.a.a.l$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lcom/a/a/l$a;.b:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L289670.  v0:= v3.`com.a.a.l$a.j` @type ^`com.a.b.a` @kind object;
  #L289674.  if v0 == 0 then goto L289688;
  #L289678.  v0:= v3.`com.a.a.l$a.j` @type ^`com.a.b.a` @kind object;
  #L28967c.  v1:= v3.`com.a.a.l$a.i` @type ^`float`;
  #L289680.  call `a`(v0, v4, v1) @signature `Lcom/a/b/a;.a:(Ljava/lang/Object;F)V` @kind virtual;
  #L289686.  return @kind void;
  #L289688.  v0:= v3.`com.a.a.l$a.b` @type ^`com.a.b.d` @kind object;
  #L28968c.  if v0 == 0 then goto L2896a8;
  #L289690.  v0:= v3.`com.a.a.l$a.b` @type ^`com.a.b.d` @kind object;
  #L289694.  v1:= v3.`com.a.a.l$a.i` @type ^`float`;
  #L289698.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L28969e.  v1:= temp @kind object;
  #L2896a0.  call `a`(v0, v4, v1) @signature `Lcom/a/b/d;.a:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L2896a6.  return @kind void;
  #L2896a8.  v0:= v3.`com.a.a.l$a.c` @type ^`java.lang.reflect.Method` @kind object;
  #L2896ac.  if v0 == 0 then goto L289700;
  #L2896b0.  v0:= v3.`com.a.a.l$a.g` @type ^`java.lang.Object`[] @kind object;
  #L2896b4.  v1:= 0I;
  #L2896b6.  v2:= v3.`com.a.a.l$a.i` @type ^`float`;
  #L2896ba.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L2896c0.  v2:= temp @kind object;
  #L2896c2.  v0[v1]:= v2 @kind object;
  #L2896c6.  v0:= v3.`com.a.a.l$a.c` @type ^`java.lang.reflect.Method` @kind object;
  #L2896ca.  v1:= v3.`com.a.a.l$a.g` @type ^`java.lang.Object`[] @kind object;
  #L2896ce.  call temp:= `invoke`(v0, v4, v1) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2896d4.  goto L289700;
  #L2896d6.  v4:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L2896d8.  v0:= "PropertyValuesHolder" @kind object;
  #L2896dc.  call temp:= `toString`(v4) @signature `Ljava/lang/IllegalAccessException;.toString:()Ljava/lang/String;` @kind virtual;
  #L2896e2.  v4:= temp @kind object;
  #L2896e4.  call temp:= `e`(v0, v4) @signature `Landroid/util/Log;.e:(Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L2896ea.  goto L289700;
  #L2896ec.  v4:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L2896ee.  v0:= "PropertyValuesHolder" @kind object;
  #L2896f2.  call temp:= `toString`(v4) @signature `Ljava/lang/reflect/InvocationTargetException;.toString:()Ljava/lang/String;` @kind virtual;
  #L2896f8.  v4:= temp @kind object;
  #L2896fa.  call temp:= `e`(v0, v4) @signature `Landroid/util/Log;.e:(Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L289700.  return @kind void;
  catch `java.lang.reflect.InvocationTargetException` @[L2896b0..L2896d4] goto L2896ec;
  catch `java.lang.IllegalAccessException` @[L2896b0..L2896d4] goto L2896d6;
}
procedure `java.lang.Object` `clone`(`com.a.a.l$a` v1 @kind this) @signature `Lcom/a/a/l$a;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L289574.  call temp:= `e`(v1) @signature `Lcom/a/a/l$a;.e:()Lcom/a/a/l$a;` @kind virtual;
  #L28957a.  v0:= temp @kind object;
  #L28957c.  return v0 @kind object;
}
procedure `java.lang.Object` `d`(`com.a.a.l$a` v1 @kind this) @signature `Lcom/a/a/l$a;.d:()Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;

  #L289590.  v0:= v1.`com.a.a.l$a.i` @type ^`float`;
  #L289594.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L28959a.  v0:= temp @kind object;
  #L28959c.  return v0 @kind object;
}
procedure `com.a.a.l$a` `e`(`com.a.a.l$a` v2 @kind this) @signature `Lcom/a/a/l$a;.e:()Lcom/a/a/l$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L289548.  call temp:= `a`(v2) @signature `Lcom/a/a/l;.a:()Lcom/a/a/l;` @kind super;
  #L28954e.  v0:= temp @kind object;
  #L289550.  v0:= (`com.a.a.l$a`) v0 @kind object;
  #L289554.  v1:= v0.`com.a.a.l$a.e` @type ^`com.a.a.i` @kind object;
  #L289558.  v1:= (`com.a.a.e`) v1 @kind object;
  #L28955c.  v0.`com.a.a.l$a.h` @type ^`com.a.a.e` := v1 @kind object;
  #L289560.  return v0 @kind object;
}
