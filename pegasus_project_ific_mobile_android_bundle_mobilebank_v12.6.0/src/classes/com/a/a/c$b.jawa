record `com.a.a.c$b` @kind class @AccessFlag PUBLIC {
  `com.a.a.c` `com.a.a.c$b.a` @AccessFlag FINAL_SYNTHETIC;
  `com.a.a.c$e` `com.a.a.c$b.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.a.a.c$b` v2 @kind this, `com.a.a.c` v3 @kind object, `com.a.a.a` v4 @kind object) @signature `Lcom/a/a/c$b;.<init>:(Lcom/a/a/c;Lcom/a/a/a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2863b4.  v2.`com.a.a.c$b.a` @type ^`com.a.a.c` := v3 @kind object;
  #L2863b8.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2863be.  call temp:= `b`(v3) @signature `Lcom/a/a/c;.b:(Lcom/a/a/c;)Ljava/util/HashMap;` @kind static;
  #L2863c4.  v0:= temp @kind object;
  #L2863c6.  call temp:= `get`(v0, v4) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2863cc.  v0:= temp @kind object;
  #L2863ce.  v0:= (`com.a.a.c$e`) v0 @kind object;
  #L2863d2.  v2.`com.a.a.c$b.b` @type ^`com.a.a.c$e` := v0 @kind object;
  #L2863d6.  v0:= v2.`com.a.a.c$b.b` @type ^`com.a.a.c$e` @kind object;
  #L2863da.  if v0 != 0 then goto L286410;
  #L2863de.  v0:= new `com.a.a.c$e`;
  #L2863e2.  call `<init>`(v0, v4) @signature `Lcom/a/a/c$e;.<init>:(Lcom/a/a/a;)V` @kind direct;
  #L2863e8.  v2.`com.a.a.c$b.b` @type ^`com.a.a.c$e` := v0 @kind object;
  #L2863ec.  call temp:= `b`(v3) @signature `Lcom/a/a/c;.b:(Lcom/a/a/c;)Ljava/util/HashMap;` @kind static;
  #L2863f2.  v0:= temp @kind object;
  #L2863f4.  v1:= v2.`com.a.a.c$b.b` @type ^`com.a.a.c$e` @kind object;
  #L2863f8.  call temp:= `put`(v0, v4, v1) @signature `Ljava/util/HashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2863fe.  call temp:= `d`(v3) @signature `Lcom/a/a/c;.d:(Lcom/a/a/c;)Ljava/util/ArrayList;` @kind static;
  #L286404.  v3:= temp @kind object;
  #L286406.  v4:= v2.`com.a.a.c$b.b` @type ^`com.a.a.c$e` @kind object;
  #L28640a.  call temp:= `add`(v3, v4) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L286410.  return @kind void;
}
procedure `com.a.a.c$b` `a`(`com.a.a.c$b` v3 @kind this, `com.a.a.a` v4 @kind object) @signature `Lcom/a/a/c$b;.a:(Lcom/a/a/a;)Lcom/a/a/c$b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L286340.  v0:= v3.`com.a.a.c$b.a` @type ^`com.a.a.c` @kind object;
  #L286344.  call temp:= `b`(v0) @signature `Lcom/a/a/c;.b:(Lcom/a/a/c;)Ljava/util/HashMap;` @kind static;
  #L28634a.  v0:= temp @kind object;
  #L28634c.  call temp:= `get`(v0, v4) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L286352.  v0:= temp @kind object;
  #L286354.  v0:= (`com.a.a.c$e`) v0 @kind object;
  #L286358.  if v0 != 0 then goto L28638a;
  #L28635c.  v0:= new `com.a.a.c$e`;
  #L286360.  call `<init>`(v0, v4) @signature `Lcom/a/a/c$e;.<init>:(Lcom/a/a/a;)V` @kind direct;
  #L286366.  v1:= v3.`com.a.a.c$b.a` @type ^`com.a.a.c` @kind object;
  #L28636a.  call temp:= `b`(v1) @signature `Lcom/a/a/c;.b:(Lcom/a/a/c;)Ljava/util/HashMap;` @kind static;
  #L286370.  v1:= temp @kind object;
  #L286372.  call temp:= `put`(v1, v4, v0) @signature `Ljava/util/HashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L286378.  v4:= v3.`com.a.a.c$b.a` @type ^`com.a.a.c` @kind object;
  #L28637c.  call temp:= `d`(v4) @signature `Lcom/a/a/c;.d:(Lcom/a/a/c;)Ljava/util/ArrayList;` @kind static;
  #L286382.  v4:= temp @kind object;
  #L286384.  call temp:= `add`(v4, v0) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L28638a.  v4:= new `com.a.a.c$c`;
  #L28638e.  v1:= v3.`com.a.a.c$b.b` @type ^`com.a.a.c$e` @kind object;
  #L286392.  v2:= 0I;
  #L286394.  call `<init>`(v4, v1, v2) @signature `Lcom/a/a/c$c;.<init>:(Lcom/a/a/c$e;I)V` @kind direct;
  #L28639a.  call `a`(v0, v4) @signature `Lcom/a/a/c$e;.a:(Lcom/a/a/c$c;)V` @kind virtual;
  #L2863a0.  return v3 @kind object;
}
