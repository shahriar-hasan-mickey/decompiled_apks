record `com.a.a.c$a` @kind class @AccessFlag  extends `com.a.a.a$a` @kind interface {
  `com.a.a.c` `com.a.a.c$a.a` @AccessFlag FINAL_SYNTHETIC;
  `com.a.a.c` `com.a.a.c$a.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.a.a.c$a` v0 @kind this, `com.a.a.c` v1 @kind object, `com.a.a.c` v2 @kind object) @signature `Lcom/a/a/c$a;.<init>:(Lcom/a/a/c;Lcom/a/a/c;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L286194.  v0.`com.a.a.c$a.a` @type ^`com.a.a.c` := v1 @kind object;
  #L286198.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L28619e.  v0.`com.a.a.c$a.b` @type ^`com.a.a.c` := v2 @kind object;
  #L2861a2.  return @kind void;
}
procedure `void` `a`(`com.a.a.c$a` v0 @kind this, `com.a.a.a` v1 @kind object) @signature `Lcom/a/a/c$a;.a:(Lcom/a/a/a;)V` @AccessFlag PUBLIC {
    temp;

  #L2861b4.  return @kind void;
}
procedure `void` `b`(`com.a.a.c$a` v5 @kind this, `com.a.a.a` v6 @kind object) @signature `Lcom/a/a/c$a;.b:(Lcom/a/a/a;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2861c8.  call `b`(v6, v5) @signature `Lcom/a/a/a;.b:(Lcom/a/a/a$a;)V` @kind virtual;
  #L2861ce.  v0:= v5.`com.a.a.c$a.a` @type ^`com.a.a.c` @kind object;
  #L2861d2.  call temp:= `a`(v0) @signature `Lcom/a/a/c;.a:(Lcom/a/a/c;)Ljava/util/ArrayList;` @kind static;
  #L2861d8.  v0:= temp @kind object;
  #L2861da.  call temp:= `remove`(v0, v6) @signature `Ljava/util/ArrayList;.remove:(Ljava/lang/Object;)Z` @kind virtual;
  #L2861e0.  v0:= v5.`com.a.a.c$a.b` @type ^`com.a.a.c` @kind object;
  #L2861e4.  call temp:= `b`(v0) @signature `Lcom/a/a/c;.b:(Lcom/a/a/c;)Ljava/util/HashMap;` @kind static;
  #L2861ea.  v0:= temp @kind object;
  #L2861ec.  call temp:= `get`(v0, v6) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2861f2.  v6:= temp @kind object;
  #L2861f4.  v6:= (`com.a.a.c$e`) v6 @kind object;
  #L2861f8.  v0:= 1I;
  #L2861fa.  v6.`com.a.a.c$e.f` @type ^`boolean` := v0 @kind boolean;
  #L2861fe.  v6:= v5.`com.a.a.c$a.a` @type ^`com.a.a.c` @kind object;
  #L286202.  v6:= v6.`com.a.a.c.b` @type ^`boolean` @kind boolean;
  #L286206.  if v6 != 0 then goto L28629c;
  #L28620a.  v6:= v5.`com.a.a.c$a.b` @type ^`com.a.a.c` @kind object;
  #L28620e.  call temp:= `c`(v6) @signature `Lcom/a/a/c;.c:(Lcom/a/a/c;)Ljava/util/ArrayList;` @kind static;
  #L286214.  v6:= temp @kind object;
  #L286216.  call temp:= `size`(v6) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L28621c.  v1:= temp;
  #L28621e.  v2:= 0I;
  #L286220.  v3:= 0I;
  #L286222.  if v3 >= v1 then goto L286244;
  #L286226.  call temp:= `get`(v6, v3) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L28622c.  v4:= temp @kind object;
  #L28622e.  v4:= (`com.a.a.c$e`) v4 @kind object;
  #L286232.  v4:= v4.`com.a.a.c$e.f` @type ^`boolean` @kind boolean;
  #L286236.  if v4 != 0 then goto L28623e;
  #L28623a.  v0:= 0I;
  #L28623c.  goto L286244;
  #L28623e.  v3:= v3 + 1;
  #L286242.  goto L286222;
  #L286244.  if v0 == 0 then goto L28629c;
  #L286248.  v6:= v5.`com.a.a.c$a.a` @type ^`com.a.a.c` @kind object;
  #L28624c.  v6:= v6.`com.a.a.c.a` @type ^`java.util.ArrayList` @kind object;
  #L286250.  if v6 == 0 then goto L286292;
  #L286254.  v6:= v5.`com.a.a.c$a.a` @type ^`com.a.a.c` @kind object;
  #L286258.  v6:= v6.`com.a.a.c.a` @type ^`java.util.ArrayList` @kind object;
  #L28625c.  call temp:= `clone`(v6) @signature `Ljava/util/ArrayList;.clone:()Ljava/lang/Object;` @kind virtual;
  #L286262.  v6:= temp @kind object;
  #L286264.  v6:= (`java.util.ArrayList`) v6 @kind object;
  #L286268.  call temp:= `size`(v6) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L28626e.  v0:= temp;
  #L286270.  v1:= 0I;
  #L286272.  if v1 >= v0 then goto L286292;
  #L286276.  call temp:= `get`(v6, v1) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L28627c.  v3:= temp @kind object;
  #L28627e.  v3:= (`com.a.a.a$a`) v3 @kind object;
  #L286282.  v4:= v5.`com.a.a.c$a.b` @type ^`com.a.a.c` @kind object;
  #L286286.  call `b`(v3, v4) @signature `Lcom/a/a/a$a;.b:(Lcom/a/a/a;)V` @kind interface;
  #L28628c.  v1:= v1 + 1;
  #L286290.  goto L286272;
  #L286292.  v6:= v5.`com.a.a.c$a.b` @type ^`com.a.a.c` @kind object;
  #L286296.  call temp:= `a`(v6, v2) @signature `Lcom/a/a/c;.a:(Lcom/a/a/c;Z)Z` @kind static;
  #L28629c.  return @kind void;
}
procedure `void` `c`(`com.a.a.c$a` v3 @kind this, `com.a.a.a` v4 @kind object) @signature `Lcom/a/a/c$a;.c:(Lcom/a/a/a;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2862b0.  v4:= v3.`com.a.a.c$a.a` @type ^`com.a.a.c` @kind object;
  #L2862b4.  v4:= v4.`com.a.a.c.b` @type ^`boolean` @kind boolean;
  #L2862b8.  if v4 != 0 then goto L28631a;
  #L2862bc.  v4:= v3.`com.a.a.c$a.a` @type ^`com.a.a.c` @kind object;
  #L2862c0.  call temp:= `a`(v4) @signature `Lcom/a/a/c;.a:(Lcom/a/a/c;)Ljava/util/ArrayList;` @kind static;
  #L2862c6.  v4:= temp @kind object;
  #L2862c8.  call temp:= `size`(v4) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L2862ce.  v4:= temp;
  #L2862d0.  if v4 != 0 then goto L28631a;
  #L2862d4.  v4:= v3.`com.a.a.c$a.a` @type ^`com.a.a.c` @kind object;
  #L2862d8.  v4:= v4.`com.a.a.c.a` @type ^`java.util.ArrayList` @kind object;
  #L2862dc.  if v4 == 0 then goto L28631a;
  #L2862e0.  v4:= v3.`com.a.a.c$a.a` @type ^`com.a.a.c` @kind object;
  #L2862e4.  v4:= v4.`com.a.a.c.a` @type ^`java.util.ArrayList` @kind object;
  #L2862e8.  call temp:= `size`(v4) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L2862ee.  v4:= temp;
  #L2862f0.  v0:= 0I;
  #L2862f2.  if v0 >= v4 then goto L28631a;
  #L2862f6.  v1:= v3.`com.a.a.c$a.a` @type ^`com.a.a.c` @kind object;
  #L2862fa.  v1:= v1.`com.a.a.c.a` @type ^`java.util.ArrayList` @kind object;
  #L2862fe.  call temp:= `get`(v1, v0) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L286304.  v1:= temp @kind object;
  #L286306.  v1:= (`com.a.a.a$a`) v1 @kind object;
  #L28630a.  v2:= v3.`com.a.a.c$a.b` @type ^`com.a.a.c` @kind object;
  #L28630e.  call `c`(v1, v2) @signature `Lcom/a/a/a$a;.c:(Lcom/a/a/a;)V` @kind interface;
  #L286314.  v0:= v0 + 1;
  #L286318.  goto L2862f2;
  #L28631a.  return @kind void;
}
procedure `void` `d`(`com.a.a.c$a` v0 @kind this, `com.a.a.a` v1 @kind object) @signature `Lcom/a/a/c$a;.d:(Lcom/a/a/a;)V` @AccessFlag PUBLIC {
    temp;

  #L28632c.  return @kind void;
}
