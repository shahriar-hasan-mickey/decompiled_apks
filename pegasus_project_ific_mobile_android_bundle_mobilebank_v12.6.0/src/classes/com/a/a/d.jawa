record `com.a.a.d` @kind class @AccessFlag PUBLIC extends `com.a.a.m` @kind interface {
}
procedure `void` `<init>`(`com.a.a.d` v0 @kind this) @signature `Lcom/a/a/d;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2872d0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2872d6.  return @kind void;
}
procedure `java.lang.Float` `a`(`com.a.a.d` v0 @kind this, `float` v1 , `java.lang.Number` v2 @kind object, `java.lang.Number` v3 @kind object) @signature `Lcom/a/a/d;.a:(FLjava/lang/Number;Ljava/lang/Number;)Ljava/lang/Float;` @AccessFlag PUBLIC {
    temp;

  #L287278.  call temp:= `floatValue`(v2) @signature `Ljava/lang/Number;.floatValue:()F` @kind virtual;
  #L28727e.  v2:= temp;
  #L287280.  call temp:= `floatValue`(v3) @signature `Ljava/lang/Number;.floatValue:()F` @kind virtual;
  #L287286.  v3:= temp;
  #L287288.  v3:= v3 - v2 @kind float;
  #L28728a.  v1:= v1 * v3 @kind float;
  #L28728e.  v2:= v2 + v1 @kind float;
  #L287290.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L287296.  v1:= temp @kind object;
  #L287298.  return v1 @kind object;
}
procedure `java.lang.Object` `a`(`com.a.a.d` v0 @kind this, `float` v1 , `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/a/a/d;.a:(FLjava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2872ac.  v2:= (`java.lang.Number`) v2 @kind object;
  #L2872b0.  v3:= (`java.lang.Number`) v3 @kind object;
  #L2872b4.  call temp:= `a`(v0, v1, v2, v3) @signature `Lcom/a/a/d;.a:(FLjava/lang/Number;Ljava/lang/Number;)Ljava/lang/Float;` @kind virtual;
  #L2872ba.  v1:= temp @kind object;
  #L2872bc.  return v1 @kind object;
}
