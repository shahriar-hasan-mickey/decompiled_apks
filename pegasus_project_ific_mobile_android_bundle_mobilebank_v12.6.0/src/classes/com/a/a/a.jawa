record `com.a.a.a` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.lang.Cloneable` @kind interface {
  `java.util.ArrayList` `com.a.a.a.a` @AccessFlag ;
}
procedure `void` `<init>`(`com.a.a.a` v1 @kind this) @signature `Lcom/a/a/a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L285fbc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L285fc2.  v0:= 0I;
  #L285fc4.  v1.`com.a.a.a.a` @type ^`java.util.ArrayList` := v0 @kind object;
  #L285fc8.  return @kind void;
}
procedure `com.a.a.a` `a`(`long` v0 ) @signature `Lcom/a/a/a;.a:(J)Lcom/a/a/a;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `a`(`com.a.a.a` v0 @kind this) @signature `Lcom/a/a/a;.a:()V` @AccessFlag PUBLIC {
    temp;

  #L285fdc.  return @kind void;
}
procedure `void` `a`(`android.view.animation.Interpolator` v0 @kind object) @signature `Lcom/a/a/a;.a:(Landroid/view/animation/Interpolator;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `a`(`com.a.a.a` v1 @kind this, `com.a.a.a$a` v2 @kind object) @signature `Lcom/a/a/a;.a:(Lcom/a/a/a$a;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L285ff0.  v0:= v1.`com.a.a.a.a` @type ^`java.util.ArrayList` @kind object;
  #L285ff4.  if v0 != 0 then goto L286006;
  #L285ff8.  v0:= new `java.util.ArrayList`;
  #L285ffc.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L286002.  v1.`com.a.a.a.a` @type ^`java.util.ArrayList` := v0 @kind object;
  #L286006.  v0:= v1.`com.a.a.a.a` @type ^`java.util.ArrayList` @kind object;
  #L28600a.  call temp:= `add`(v0, v2) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L286010.  return @kind void;
}
procedure `void` `b`(`com.a.a.a` v0 @kind this) @signature `Lcom/a/a/a;.b:()V` @AccessFlag PUBLIC {
    temp;

  #L286024.  return @kind void;
}
procedure `void` `b`(`com.a.a.a` v1 @kind this, `com.a.a.a$a` v2 @kind object) @signature `Lcom/a/a/a;.b:(Lcom/a/a/a$a;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L286038.  v0:= v1.`com.a.a.a.a` @type ^`java.util.ArrayList` @kind object;
  #L28603c.  if v0 != 0 then goto L286042;
  #L286040.  return @kind void;
  #L286042.  v0:= v1.`com.a.a.a.a` @type ^`java.util.ArrayList` @kind object;
  #L286046.  call temp:= `remove`(v0, v2) @signature `Ljava/util/ArrayList;.remove:(Ljava/lang/Object;)Z` @kind virtual;
  #L28604c.  v2:= v1.`com.a.a.a.a` @type ^`java.util.ArrayList` @kind object;
  #L286050.  call temp:= `size`(v2) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L286056.  v2:= temp;
  #L286058.  if v2 != 0 then goto L286062;
  #L28605c.  v2:= 0I;
  #L28605e.  v1.`com.a.a.a.a` @type ^`java.util.ArrayList` := v2 @kind object;
  #L286062.  return @kind void;
}
procedure `void` `c`(`com.a.a.a` v0 @kind this) @signature `Lcom/a/a/a;.c:()V` @AccessFlag PUBLIC {
    temp;

  #L286074.  return @kind void;
}
procedure `java.lang.Object` `clone`(`com.a.a.a` v1 @kind this) @signature `Lcom/a/a/a;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L285f88.  call temp:= `g`(v1) @signature `Lcom/a/a/a;.g:()Lcom/a/a/a;` @kind virtual;
  #L285f8e.  v0:= temp @kind object;
  #L285f90.  return v0 @kind object;
}
procedure `boolean` `d`() @signature `Lcom/a/a/a;.d:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `e`(`com.a.a.a` v1 @kind this) @signature `Lcom/a/a/a;.e:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L285ef0.  call temp:= `d`(v1) @signature `Lcom/a/a/a;.d:()Z` @kind virtual;
  #L285ef6.  v0:= temp;
  #L285ef8.  return v0;
}
procedure `java.util.ArrayList` `f`(`com.a.a.a` v1 @kind this) @signature `Lcom/a/a/a;.f:()Ljava/util/ArrayList;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L285fa4.  v0:= v1.`com.a.a.a.a` @type ^`java.util.ArrayList` @kind object;
  #L285fa8.  return v0 @kind object;
}
procedure `com.a.a.a` `g`(`com.a.a.a` v6 @kind this) @signature `Lcom/a/a/a;.g:()Lcom/a/a/a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L285f0c.  call temp:= `clone`(v6) @signature `Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind super;
  #L285f12.  v0:= temp @kind object;
  #L285f14.  v0:= (`com.a.a.a`) v0 @kind object;
  #L285f18.  v1:= v6.`com.a.a.a.a` @type ^`java.util.ArrayList` @kind object;
  #L285f1c.  if v1 == 0 then goto L285f58;
  #L285f20.  v1:= v6.`com.a.a.a.a` @type ^`java.util.ArrayList` @kind object;
  #L285f24.  v2:= new `java.util.ArrayList`;
  #L285f28.  call `<init>`(v2) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L285f2e.  v0.`com.a.a.a.a` @type ^`java.util.ArrayList` := v2 @kind object;
  #L285f32.  call temp:= `size`(v1) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L285f38.  v2:= temp;
  #L285f3a.  v3:= 0I;
  #L285f3c.  if v3 >= v2 then goto L285f58;
  #L285f40.  v4:= v0.`com.a.a.a.a` @type ^`java.util.ArrayList` @kind object;
  #L285f44.  call temp:= `get`(v1, v3) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L285f4a.  v5:= temp @kind object;
  #L285f4c.  call temp:= `add`(v4, v5) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L285f52.  v3:= v3 + 1;
  #L285f56.  goto L285f3c;
  #L285f58.  return v0 @kind object;
  #L285f5a.  v0:= new `java.lang.AssertionError`;
  #L285f5e.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L285f64.  throw v0;
  catch `java.lang.CloneNotSupportedException` @[L285f0c..L285f52] goto L285f5a;
}
