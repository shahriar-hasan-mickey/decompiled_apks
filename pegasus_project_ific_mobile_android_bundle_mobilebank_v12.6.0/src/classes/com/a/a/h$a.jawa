record `com.a.a.h$a` @kind class @AccessFlag  extends `com.a.a.h` @kind class {
  `float` `com.a.a.h$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`com.a.a.h$a` v0 @kind this, `float` v1 ) @signature `Lcom/a/a/h$a;.<init>:(F)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L287bd4.  call `<init>`(v0) @signature `Lcom/a/a/h;.<init>:()V` @kind direct;
  #L287bda.  v0.`com.a.a.h$a.a` @type ^`float` := v1;
  #L287bde.  v1:= `@@java.lang.Float.TYPE` @type ^`java.lang.Class` @kind object;
  #L287be2.  v0.`com.a.a.h$a.b` @type ^`java.lang.Class` := v1 @kind object;
  #L287be6.  return @kind void;
}
procedure `void` `<init>`(`com.a.a.h$a` v0 @kind this, `float` v1 , `float` v2 ) @signature `Lcom/a/a/h$a;.<init>:(FF)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L287bf8.  call `<init>`(v0) @signature `Lcom/a/a/h;.<init>:()V` @kind direct;
  #L287bfe.  v0.`com.a.a.h$a.a` @type ^`float` := v1;
  #L287c02.  v0.`com.a.a.h$a.d` @type ^`float` := v2;
  #L287c06.  v1:= `@@java.lang.Float.TYPE` @type ^`java.lang.Class` @kind object;
  #L287c0a.  v0.`com.a.a.h$a.b` @type ^`java.lang.Class` := v1 @kind object;
  #L287c0e.  v1:= 1I;
  #L287c10.  v0.`com.a.a.h$a.c` @type ^`boolean` := v1 @kind boolean;
  #L287c14.  return @kind void;
}
procedure `void` `a`(`com.a.a.h$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lcom/a/a/h$a;.a:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L287c28.  if v3 == 0 then goto L287c52;
  #L287c2c.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L287c32.  v0:= temp @kind object;
  #L287c34.  v1:= constclass @type ^`java.lang.Float` @kind object;
  #L287c38.  if v0 != v1 then goto L287c52;
  #L287c3c.  v3:= (`java.lang.Float`) v3 @kind object;
  #L287c40.  call temp:= `floatValue`(v3) @signature `Ljava/lang/Float;.floatValue:()F` @kind virtual;
  #L287c46.  v3:= temp;
  #L287c48.  v2.`com.a.a.h$a.d` @type ^`float` := v3;
  #L287c4c.  v3:= 1I;
  #L287c4e.  v2.`com.a.a.h$a.c` @type ^`boolean` := v3 @kind boolean;
  #L287c52.  return @kind void;
}
procedure `java.lang.Object` `b`(`com.a.a.h$a` v1 @kind this) @signature `Lcom/a/a/h$a;.b:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L287b98.  v0:= v1.`com.a.a.h$a.d` @type ^`float`;
  #L287b9c.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L287ba2.  v0:= temp @kind object;
  #L287ba4.  return v0 @kind object;
}
procedure `java.lang.Object` `clone`(`com.a.a.h$a` v1 @kind this) @signature `Lcom/a/a/h$a;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L287bb8.  call temp:= `g`(v1) @signature `Lcom/a/a/h$a;.g:()Lcom/a/a/h$a;` @kind virtual;
  #L287bbe.  v0:= temp @kind object;
  #L287bc0.  return v0 @kind object;
}
procedure `com.a.a.h` `e`(`com.a.a.h$a` v1 @kind this) @signature `Lcom/a/a/h$a;.e:()Lcom/a/a/h;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L287b2c.  call temp:= `g`(v1) @signature `Lcom/a/a/h$a;.g:()Lcom/a/a/h$a;` @kind virtual;
  #L287b32.  v0:= temp @kind object;
  #L287b34.  return v0 @kind object;
}
procedure `float` `f`(`com.a.a.h$a` v1 @kind this) @signature `Lcom/a/a/h$a;.f:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L287b80.  v0:= v1.`com.a.a.h$a.d` @type ^`float`;
  #L287b84.  return v0;
}
procedure `com.a.a.h$a` `g`(`com.a.a.h$a` v3 @kind this) @signature `Lcom/a/a/h$a;.g:()Lcom/a/a/h$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L287b48.  v0:= new `com.a.a.h$a`;
  #L287b4c.  call temp:= `c`(v3) @signature `Lcom/a/a/h$a;.c:()F` @kind virtual;
  #L287b52.  v1:= temp;
  #L287b54.  v2:= v3.`com.a.a.h$a.d` @type ^`float`;
  #L287b58.  call `<init>`(v0, v1, v2) @signature `Lcom/a/a/h$a;.<init>:(FF)V` @kind direct;
  #L287b5e.  call temp:= `d`(v3) @signature `Lcom/a/a/h$a;.d:()Landroid/view/animation/Interpolator;` @kind virtual;
  #L287b64.  v1:= temp @kind object;
  #L287b66.  call `a`(v0, v1) @signature `Lcom/a/a/h$a;.a:(Landroid/view/animation/Interpolator;)V` @kind virtual;
  #L287b6c.  return v0 @kind object;
}
