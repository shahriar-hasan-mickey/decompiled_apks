record `com.google.a.c.a` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `int` `a`(`int` v0 ) @signature `Lcom/google/a/c/a;.a:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L335b5c.  return v0;
}
procedure `int` `a`(`int`[] v0 @kind object, `int` v1 , `int` v2 , `int` v3 ) @signature `Lcom/google/a/c/a;.a:([IIII)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L335b70.  call temp:= `c`(v0, v1, v2, v3) @signature `Lcom/google/a/c/a;.c:([IIII)I` @kind static;
  #L335b76.  v0:= temp;
  #L335b78.  return v0;
}
procedure `java.util.List` `a`(`int`[] v1 @kind object) @signature `Lcom/google/a/c/a;.a:([I)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L335bfc.  v0:= length @variable v1;
  #L335bfe.  if v0 != 0 then goto L335c0c;
  #L335c02.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L335c08.  v1:= temp @kind object;
  #L335c0a.  return v1 @kind object;
  #L335c0c.  v0:= new `com.google.a.c.a$a`;
  #L335c10.  call `<init>`(v0, v1) @signature `Lcom/google/a/c/a$a;.<init>:([I)V` @kind direct;
  #L335c16.  return v0 @kind object;
}
procedure `int` `b`(`int`[] v0 @kind object, `int` v1 , `int` v2 , `int` v3 ) @signature `Lcom/google/a/c/a;.b:([IIII)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L335b8c.  call temp:= `d`(v0, v1, v2, v3) @signature `Lcom/google/a/c/a;.d:([IIII)I` @kind static;
  #L335b92.  v0:= temp;
  #L335b94.  return v0;
}
procedure `int` `c`(`int`[] v1 @kind object, `int` v2 , `int` v3 , `int` v4 ) @signature `Lcom/google/a/c/a;.c:([IIII)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L335ba8.  if v3 >= v4 then goto L335bbc;
  #L335bac.  v0:= v1[v3];
  #L335bb0.  if v0 != v2 then goto L335bb6;
  #L335bb4.  return v3;
  #L335bb6.  v3:= v3 + 1;
  #L335bba.  goto L335ba8;
  #L335bbc.  v1:= -1I;
  #L335bbe.  return v1;
}
procedure `int` `d`(`int`[] v1 @kind object, `int` v2 , `int` v3 , `int` v4 ) @signature `Lcom/google/a/c/a;.d:([IIII)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L335bd0.  v4:= v4 + -1;
  #L335bd4.  if v4 < v3 then goto L335be8;
  #L335bd8.  v0:= v1[v4];
  #L335bdc.  if v0 != v2 then goto L335be2;
  #L335be0.  return v4;
  #L335be2.  v4:= v4 + -1;
  #L335be6.  goto L335bd4;
  #L335be8.  v1:= -1I;
  #L335bea.  return v1;
}
