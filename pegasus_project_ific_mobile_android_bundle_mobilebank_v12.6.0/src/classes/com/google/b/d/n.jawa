record `com.google.b.d.n` @kind class @AccessFlag PUBLIC_ABSTRACT extends `com.google.b.g` @kind interface {
}
procedure `void` `<init>`(`com.google.b.d.n` v0 @kind this) @signature `Lcom/google/b/d/n;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3ac140.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3ac146.  return @kind void;
}
procedure `int` `a`(`boolean`[] v7 @kind object, `int` v8 , `int`[] v9 @kind object, `boolean` v10 ) @signature `Lcom/google/b/d/n;.a:([ZI[IZ)I` @AccessFlag PROTECTED_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3ac0ec.  v0:= length @variable v9;
  #L3ac0ee.  v1:= 0I;
  #L3ac0f0.  v2:= v8;
  #L3ac0f2.  v3:= v10;
  #L3ac0f4.  v8:= 0I;
  #L3ac0f6.  v10:= 0I;
  #L3ac0f8.  if v8 >= v0 then goto L3ac12e;
  #L3ac0fc.  v4:= v9[v8];
  #L3ac100.  v5:= v2;
  #L3ac102.  v2:= 0I;
  #L3ac104.  if v2 >= v4 then goto L3ac118;
  #L3ac108.  v6:= v5 + 1;
  #L3ac10c.  v7[v5]:= v3 @kind boolean;
  #L3ac110.  v2:= v2 + 1;
  #L3ac114.  v5:= v6;
  #L3ac116.  goto L3ac104;
  #L3ac118.  v10:= v10 + v4 @kind int;
  #L3ac11a.  if v3 != 0 then goto L3ac124;
  #L3ac11e.  v2:= 1I;
  #L3ac120.  v3:= 1I;
  #L3ac122.  goto L3ac126;
  #L3ac124.  v3:= 0I;
  #L3ac126.  v8:= v8 + 1;
  #L3ac12a.  v2:= v5;
  #L3ac12c.  goto L3ac0f8;
  #L3ac12e.  return v10;
}
procedure `com.google.b.b.b` `a`(`boolean`[] v5 @kind object, `int` v6 , `int` v7 , `int` v8 ) @signature `Lcom/google/b/d/n;.a:([ZIII)Lcom/google/b/b/b;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3abfb8.  v0:= length @variable v5;
  #L3abfba.  v8:= v8 + v0 @kind int;
  #L3abfbc.  call temp:= `max`(v6, v8) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L3abfc2.  v6:= temp;
  #L3abfc4.  v1:= 1I;
  #L3abfc6.  call temp:= `max`(v1, v7) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L3abfcc.  v7:= temp;
  #L3abfce.  v8:= v6 / v8 @kind int;
  #L3abfd2.  v1:= v0 * v8 @kind int;
  #L3abfd6.  v1:= v6 - v1 @kind int;
  #L3abfda.  v1:= v1 / 2;
  #L3abfde.  v2:= new `com.google.b.b.b`;
  #L3abfe2.  call `<init>`(v2, v6, v7) @signature `Lcom/google/b/b/b;.<init>:(II)V` @kind direct;
  #L3abfe8.  v6:= 0I;
  #L3abfea.  v3:= v1;
  #L3abfec.  v1:= 0I;
  #L3abfee.  if v1 >= v0 then goto L3ac008;
  #L3abff2.  v4:= v5[v1] @kind boolean;
  #L3abff6.  if v4 == 0 then goto L3ac000;
  #L3abffa.  call `a`(v2, v3, v6, v8, v7) @signature `Lcom/google/b/b/b;.a:(IIII)V` @kind virtual;
  #L3ac000.  v1:= v1 + 1;
  #L3ac004.  v3:= v3 + v8 @kind int;
  #L3ac006.  goto L3abfee;
  #L3ac008.  return v2 @kind object;
}
procedure `int` `a`(`com.google.b.d.n` v1 @kind this) @signature `Lcom/google/b/d/n;.a:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ac0d4.  v0:= 10I;
  #L3ac0d8.  return v0;
}
procedure `com.google.b.b.b` `a`(`com.google.b.d.n` v1 @kind this, `java.lang.String` v2 @kind object, `com.google.b.a` v3 @kind object, `int` v4 , `int` v5 , `java.util.Map` v6 @kind object) @signature `Lcom/google/b/d/n;.a:(Ljava/lang/String;Lcom/google/b/a;IILjava/util/Map;)Lcom/google/b/b/b;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ac01c.  call temp:= `isEmpty`(v2) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L3ac022.  v3:= temp;
  #L3ac024.  if v3 == 0 then goto L3ac038;
  #L3ac028.  v2:= new `java.lang.IllegalArgumentException`;
  #L3ac02c.  v3:= "Found empty contents" @kind object;
  #L3ac030.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ac036.  throw v2;
  #L3ac038.  if v4 < 0 then goto L3ac08c;
  #L3ac03c.  if v5 >= 0 then goto L3ac042;
  #L3ac040.  goto L3ac08c;
  #L3ac042.  call temp:= `a`(v1) @signature `Lcom/google/b/d/n;.a:()I` @kind virtual;
  #L3ac048.  v3:= temp;
  #L3ac04a.  if v6 == 0 then goto L3ac07a;
  #L3ac04e.  v0:= `@@com.google.b.c.f` @type ^`com.google.b.c` @kind object;
  #L3ac052.  call temp:= `containsKey`(v6, v0) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L3ac058.  v0:= temp;
  #L3ac05a.  if v0 == 0 then goto L3ac07a;
  #L3ac05e.  v3:= `@@com.google.b.c.f` @type ^`com.google.b.c` @kind object;
  #L3ac062.  call temp:= `get`(v6, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3ac068.  v3:= temp @kind object;
  #L3ac06a.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L3ac070.  v3:= temp @kind object;
  #L3ac072.  call temp:= `parseInt`(v3) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L3ac078.  v3:= temp;
  #L3ac07a.  call temp:= `a`(v1, v2) @signature `Lcom/google/b/d/n;.a:(Ljava/lang/String;)[Z` @kind virtual;
  #L3ac080.  v2:= temp @kind object;
  #L3ac082.  call temp:= `a`(v2, v4, v5, v3) @signature `Lcom/google/b/d/n;.a:([ZIII)Lcom/google/b/b/b;` @kind static;
  #L3ac088.  v2:= temp @kind object;
  #L3ac08a.  return v2 @kind object;
  #L3ac08c.  v2:= new `java.lang.IllegalArgumentException`;
  #L3ac090.  v3:= new `java.lang.StringBuilder`;
  #L3ac094.  v6:= "Negative size is not allowed. Input: " @kind object;
  #L3ac098.  call `<init>`(v3, v6) @signature `Ljava/lang/StringBuilder;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ac09e.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ac0a4.  v4:= 120I;
  #L3ac0a8.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ac0ae.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3ac0b4.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3ac0ba.  v3:= temp @kind object;
  #L3ac0bc.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3ac0c2.  throw v2;
}
procedure `boolean`[] `a`(`java.lang.String` v0 @kind object) @signature `Lcom/google/b/d/n;.a:(Ljava/lang/String;)[Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
