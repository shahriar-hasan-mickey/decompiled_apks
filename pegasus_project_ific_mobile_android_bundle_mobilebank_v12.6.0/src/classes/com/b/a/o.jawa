record `com.b.a.o` @kind class @AccessFlag FINAL extends `java.io.InputStream` @kind class {
  `java.io.InputStream` `com.b.a.o.a` @AccessFlag PRIVATE_FINAL;
  `long` `com.b.a.o.b` @AccessFlag PRIVATE;
  `long` `com.b.a.o.c` @AccessFlag PRIVATE;
  `long` `com.b.a.o.d` @AccessFlag PRIVATE;
  `long` `com.b.a.o.e` @AccessFlag PRIVATE;
  `boolean` `com.b.a.o.f` @AccessFlag PRIVATE;
  `int` `com.b.a.o.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.b.a.o` v1 @kind this, `java.io.InputStream` v2 @kind object) @signature `Lcom/b/a/o;.<init>:(Ljava/io/InputStream;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L291fd4.  v0:= 4096I;
  #L291fd8.  call `<init>`(v1, v2, v0) @signature `Lcom/b/a/o;.<init>:(Ljava/io/InputStream;I)V` @kind direct;
  #L291fde.  return @kind void;
}
procedure `void` `<init>`(`com.b.a.o` v1 @kind this, `java.io.InputStream` v2 @kind object, `int` v3 ) @signature `Lcom/b/a/o;.<init>:(Ljava/io/InputStream;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L291ff0.  v0:= 1024I;
  #L291ff4.  call `<init>`(v1, v2, v3, v0) @signature `Lcom/b/a/o;.<init>:(Ljava/io/InputStream;II)V` @kind direct;
  #L291ffa.  return @kind void;
}
procedure `void` `<init>`(`com.b.a.o` v2 @kind this, `java.io.InputStream` v3 @kind object, `int` v4 , `int` v5 ) @signature `Lcom/b/a/o;.<init>:(Ljava/io/InputStream;II)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L29200c.  call `<init>`(v2) @signature `Ljava/io/InputStream;.<init>:()V` @kind direct;
  #L292012.  v0:= -1L;
  #L292016.  v2.`com.b.a.o.e` @type ^`long` := v0 @kind wide;
  #L29201a.  v0:= 1I;
  #L29201c.  v2.`com.b.a.o.f` @type ^`boolean` := v0 @kind boolean;
  #L292020.  v0:= -1I;
  #L292022.  v2.`com.b.a.o.g` @type ^`int` := v0;
  #L292026.  call temp:= `markSupported`(v3) @signature `Ljava/io/InputStream;.markSupported:()Z` @kind virtual;
  #L29202c.  v0:= temp;
  #L29202e.  if v0 != 0 then goto L29203e;
  #L292032.  v0:= new `java.io.BufferedInputStream`;
  #L292036.  call `<init>`(v0, v3, v4) @signature `Ljava/io/BufferedInputStream;.<init>:(Ljava/io/InputStream;I)V` @kind direct;
  #L29203c.  v3:= v0 @kind object;
  #L29203e.  v2.`com.b.a.o.a` @type ^`java.io.InputStream` := v3 @kind object;
  #L292042.  v2.`com.b.a.o.g` @type ^`int` := v5;
  #L292046.  return @kind void;
}
procedure `void` `a`(`com.b.a.o` v5 @kind this, `long` v6 , `long` v8 ) @signature `Lcom/b/a/o;.a:(JJ)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2920c8.  v0:= lcmp(v6, v8);
  #L2920cc.  if v0 >= 0 then goto L29210a;
  #L2920d0.  v0:= v5.`com.b.a.o.a` @type ^`java.io.InputStream` @kind object;
  #L2920d4.  v1:= v8 - v6 @kind long;
  #L2920d8.  call temp:= `skip`(v0, v1) @signature `Ljava/io/InputStream;.skip:(J)J` @kind virtual;
  #L2920de.  v0:= temp @kind wide;
  #L2920e0.  v2:= 0L;
  #L2920e4.  v4:= lcmp(v0, v2);
  #L2920e8.  if v4 != 0 then goto L292100;
  #L2920ec.  call temp:= `read`(v5) @signature `Lcom/b/a/o;.read:()I` @kind virtual;
  #L2920f2.  v0:= temp;
  #L2920f4.  v1:= -1I;
  #L2920f6.  if v0 != v1 then goto L2920fc;
  #L2920fa.  goto L29210a;
  #L2920fc.  v0:= 1L;
  #L292100.  v2:= 0I;
  #L292102.  v2:= v6 + v0 @kind long;
  #L292106.  v6:= v2 @kind wide;
  #L292108.  goto L2920c8;
  #L29210a.  return @kind void;
}
procedure `void` `b`(`com.b.a.o` v5 @kind this, `long` v6 ) @signature `Lcom/b/a/o;.b:(J)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L29211c.  v0:= v5.`com.b.a.o.c` @type ^`long` @kind wide;
  #L292120.  v2:= v5.`com.b.a.o.b` @type ^`long` @kind wide;
  #L292124.  v4:= lcmp(v0, v2);
  #L292128.  if v4 >= 0 then goto L29216c;
  #L29212c.  v0:= v5.`com.b.a.o.b` @type ^`long` @kind wide;
  #L292130.  v2:= v5.`com.b.a.o.d` @type ^`long` @kind wide;
  #L292134.  v4:= lcmp(v0, v2);
  #L292138.  if v4 > 0 then goto L29216c;
  #L29213c.  v0:= v5.`com.b.a.o.a` @type ^`java.io.InputStream` @kind object;
  #L292140.  call `reset`(v0) @signature `Ljava/io/InputStream;.reset:()V` @kind virtual;
  #L292146.  v0:= v5.`com.b.a.o.a` @type ^`java.io.InputStream` @kind object;
  #L29214a.  v1:= v5.`com.b.a.o.c` @type ^`long` @kind wide;
  #L29214e.  v3:= 0I;
  #L292150.  v3:= v6 - v1 @kind long;
  #L292154.  v1:= (`int`) v3 @kind l2i;
  #L292156.  call `mark`(v0, v1) @signature `Ljava/io/InputStream;.mark:(I)V` @kind virtual;
  #L29215c.  v0:= v5.`com.b.a.o.c` @type ^`long` @kind wide;
  #L292160.  v2:= v5.`com.b.a.o.b` @type ^`long` @kind wide;
  #L292164.  call `a`(v5, v0, v2) @signature `Lcom/b/a/o;.a:(JJ)V` @kind direct;
  #L29216a.  goto L29218a;
  #L29216c.  v0:= v5.`com.b.a.o.b` @type ^`long` @kind wide;
  #L292170.  v5.`com.b.a.o.c` @type ^`long` := v0 @kind wide;
  #L292174.  v0:= v5.`com.b.a.o.a` @type ^`java.io.InputStream` @kind object;
  #L292178.  v1:= v5.`com.b.a.o.b` @type ^`long` @kind wide;
  #L29217c.  v3:= 0I;
  #L29217e.  v3:= v6 - v1 @kind long;
  #L292182.  v1:= (`int`) v3 @kind l2i;
  #L292184.  call `mark`(v0, v1) @signature `Ljava/io/InputStream;.mark:(I)V` @kind virtual;
  #L29218a.  v5.`com.b.a.o.d` @type ^`long` := v6 @kind wide;
  #L29218e.  return @kind void;
  #L292190.  v6:= Exception @type ^`java.io.IOException` @kind object;
  #L292192.  v7:= new `java.lang.IllegalStateException`;
  #L292196.  v0:= new `java.lang.StringBuilder`;
  #L29219a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2921a0.  v1:= "Unable to mark: " @kind object;
  #L2921a4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2921aa.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2921b0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2921b6.  v6:= temp @kind object;
  #L2921b8.  call `<init>`(v7, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2921be.  throw v7;
  catch `java.io.IOException` @[L29211c..L29218e] goto L292190;
}
procedure `long` `a`(`com.b.a.o` v6 @kind this, `int` v7 ) @signature `Lcom/b/a/o;.a:(I)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L291f40.  v0:= v6.`com.b.a.o.b` @type ^`long` @kind wide;
  #L291f44.  v2:= (`long`) v7 @kind i2l;
  #L291f46.  v4:= v0 + v2 @kind long;
  #L291f4a.  v0:= v6.`com.b.a.o.d` @type ^`long` @kind wide;
  #L291f4e.  v7:= lcmp(v0, v4);
  #L291f52.  if v7 >= 0 then goto L291f5c;
  #L291f56.  call `b`(v6, v4) @signature `Lcom/b/a/o;.b:(J)V` @kind direct;
  #L291f5c.  v0:= v6.`com.b.a.o.b` @type ^`long` @kind wide;
  #L291f60.  return v0 @kind wide;
}
procedure `void` `a`(`com.b.a.o` v5 @kind this, `long` v6 ) @signature `Lcom/b/a/o;.a:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L292070.  v0:= v5.`com.b.a.o.b` @type ^`long` @kind wide;
  #L292074.  v2:= v5.`com.b.a.o.d` @type ^`long` @kind wide;
  #L292078.  v4:= lcmp(v0, v2);
  #L29207c.  if v4 > 0 then goto L2920a8;
  #L292080.  v0:= v5.`com.b.a.o.c` @type ^`long` @kind wide;
  #L292084.  v2:= lcmp(v6, v0);
  #L292088.  if v2 >= 0 then goto L29208e;
  #L29208c.  goto L2920a8;
  #L29208e.  v0:= v5.`com.b.a.o.a` @type ^`java.io.InputStream` @kind object;
  #L292092.  call `reset`(v0) @signature `Ljava/io/InputStream;.reset:()V` @kind virtual;
  #L292098.  v0:= v5.`com.b.a.o.c` @type ^`long` @kind wide;
  #L29209c.  call `a`(v5, v0, v6) @signature `Lcom/b/a/o;.a:(JJ)V` @kind direct;
  #L2920a2.  v5.`com.b.a.o.b` @type ^`long` := v6 @kind wide;
  #L2920a6.  return @kind void;
  #L2920a8.  v6:= new `java.io.IOException`;
  #L2920ac.  v7:= "Cannot reset" @kind object;
  #L2920b0.  call `<init>`(v6, v7) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2920b6.  throw v6;
}
procedure `void` `a`(`com.b.a.o` v0 @kind this, `boolean` v1 ) @signature `Lcom/b/a/o;.a:(Z)V` @AccessFlag PUBLIC {
    temp;

  #L292058.  v0.`com.b.a.o.f` @type ^`boolean` := v1 @kind boolean;
  #L29205c.  return @kind void;
}
procedure `int` `available`(`com.b.a.o` v1 @kind this) @signature `Lcom/b/a/o;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L291de4.  v0:= v1.`com.b.a.o.a` @type ^`java.io.InputStream` @kind object;
  #L291de8.  call temp:= `available`(v0) @signature `Ljava/io/InputStream;.available:()I` @kind virtual;
  #L291dee.  v0:= temp;
  #L291df0.  return v0;
}
procedure `void` `close`(`com.b.a.o` v1 @kind this) @signature `Lcom/b/a/o;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2921e0.  v0:= v1.`com.b.a.o.a` @type ^`java.io.InputStream` @kind object;
  #L2921e4.  call `close`(v0) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L2921ea.  return @kind void;
}
procedure `void` `mark`(`com.b.a.o` v2 @kind this, `int` v3 ) @signature `Lcom/b/a/o;.mark:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2921fc.  call temp:= `a`(v2, v3) @signature `Lcom/b/a/o;.a:(I)J` @kind virtual;
  #L292202.  v0:= temp @kind wide;
  #L292204.  v2.`com.b.a.o.e` @type ^`long` := v0 @kind wide;
  #L292208.  return @kind void;
}
procedure `boolean` `markSupported`(`com.b.a.o` v1 @kind this) @signature `Lcom/b/a/o;.markSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L291dc4.  v0:= v1.`com.b.a.o.a` @type ^`java.io.InputStream` @kind object;
  #L291dc8.  call temp:= `markSupported`(v0) @signature `Ljava/io/InputStream;.markSupported:()Z` @kind virtual;
  #L291dce.  v0:= temp;
  #L291dd0.  return v0;
}
procedure `int` `read`(`com.b.a.o` v9 @kind this) @signature `Lcom/b/a/o;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L291e04.  v0:= v9.`com.b.a.o.f` @type ^`boolean` @kind boolean;
  #L291e08.  v1:= 1L;
  #L291e0c.  if v0 != 0 then goto L291e38;
  #L291e10.  v3:= v9.`com.b.a.o.b` @type ^`long` @kind wide;
  #L291e14.  v5:= v3 + v1 @kind long;
  #L291e18.  v3:= v9.`com.b.a.o.d` @type ^`long` @kind wide;
  #L291e1c.  v0:= lcmp(v5, v3);
  #L291e20.  if v0 <= 0 then goto L291e38;
  #L291e24.  v3:= v9.`com.b.a.o.d` @type ^`long` @kind wide;
  #L291e28.  v0:= v9.`com.b.a.o.g` @type ^`int`;
  #L291e2c.  v5:= (`long`) v0 @kind i2l;
  #L291e2e.  v7:= v3 + v5 @kind long;
  #L291e32.  call `b`(v9, v7) @signature `Lcom/b/a/o;.b:(J)V` @kind direct;
  #L291e38.  v0:= v9.`com.b.a.o.a` @type ^`java.io.InputStream` @kind object;
  #L291e3c.  call temp:= `read`(v0) @signature `Ljava/io/InputStream;.read:()I` @kind virtual;
  #L291e42.  v0:= temp;
  #L291e44.  v3:= -1I;
  #L291e46.  if v0 == v3 then goto L291e56;
  #L291e4a.  v3:= v9.`com.b.a.o.b` @type ^`long` @kind wide;
  #L291e4e.  v5:= v3 + v1 @kind long;
  #L291e52.  v9.`com.b.a.o.b` @type ^`long` := v5 @kind wide;
  #L291e56.  return v0;
}
procedure `int` `read`(`com.b.a.o` v6 @kind this, `byte`[] v7 @kind object) @signature `Lcom/b/a/o;.read:([B)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L291e68.  v0:= v6.`com.b.a.o.f` @type ^`boolean` @kind boolean;
  #L291e6c.  if v0 != 0 then goto L291ea4;
  #L291e70.  v0:= v6.`com.b.a.o.b` @type ^`long` @kind wide;
  #L291e74.  v2:= length @variable v7;
  #L291e76.  v2:= (`long`) v2 @kind i2l;
  #L291e78.  v4:= v0 + v2 @kind long;
  #L291e7c.  v0:= v6.`com.b.a.o.d` @type ^`long` @kind wide;
  #L291e80.  v2:= lcmp(v4, v0);
  #L291e84.  if v2 <= 0 then goto L291ea4;
  #L291e88.  v0:= v6.`com.b.a.o.b` @type ^`long` @kind wide;
  #L291e8c.  v2:= length @variable v7;
  #L291e8e.  v2:= (`long`) v2 @kind i2l;
  #L291e90.  v4:= v0 + v2 @kind long;
  #L291e94.  v0:= v6.`com.b.a.o.g` @type ^`int`;
  #L291e98.  v0:= (`long`) v0 @kind i2l;
  #L291e9a.  v2:= v4 + v0 @kind long;
  #L291e9e.  call `b`(v6, v2) @signature `Lcom/b/a/o;.b:(J)V` @kind direct;
  #L291ea4.  v0:= v6.`com.b.a.o.a` @type ^`java.io.InputStream` @kind object;
  #L291ea8.  call temp:= `read`(v0, v7) @signature `Ljava/io/InputStream;.read:([B)I` @kind virtual;
  #L291eae.  v7:= temp;
  #L291eb0.  v0:= -1I;
  #L291eb2.  if v7 == v0 then goto L291ec4;
  #L291eb6.  v0:= v6.`com.b.a.o.b` @type ^`long` @kind wide;
  #L291eba.  v2:= (`long`) v7 @kind i2l;
  #L291ebc.  v4:= v0 + v2 @kind long;
  #L291ec0.  v6.`com.b.a.o.b` @type ^`long` := v4 @kind wide;
  #L291ec4.  return v7;
}
procedure `int` `read`(`com.b.a.o` v7 @kind this, `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Lcom/b/a/o;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L291ed8.  v0:= v7.`com.b.a.o.f` @type ^`boolean` @kind boolean;
  #L291edc.  if v0 != 0 then goto L291f0e;
  #L291ee0.  v0:= v7.`com.b.a.o.b` @type ^`long` @kind wide;
  #L291ee4.  v2:= (`long`) v10 @kind i2l;
  #L291ee6.  v4:= v0 + v2 @kind long;
  #L291eea.  v0:= v7.`com.b.a.o.d` @type ^`long` @kind wide;
  #L291eee.  v6:= lcmp(v4, v0);
  #L291ef2.  if v6 <= 0 then goto L291f0e;
  #L291ef6.  v0:= v7.`com.b.a.o.b` @type ^`long` @kind wide;
  #L291efa.  v4:= v0 + v2 @kind long;
  #L291efe.  v0:= v7.`com.b.a.o.g` @type ^`int`;
  #L291f02.  v0:= (`long`) v0 @kind i2l;
  #L291f04.  v2:= v4 + v0 @kind long;
  #L291f08.  call `b`(v7, v2) @signature `Lcom/b/a/o;.b:(J)V` @kind direct;
  #L291f0e.  v0:= v7.`com.b.a.o.a` @type ^`java.io.InputStream` @kind object;
  #L291f12.  call temp:= `read`(v0, v8, v9, v10) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L291f18.  v8:= temp;
  #L291f1a.  v9:= -1I;
  #L291f1c.  if v8 == v9 then goto L291f2e;
  #L291f20.  v9:= v7.`com.b.a.o.b` @type ^`long` @kind wide;
  #L291f24.  v0:= (`long`) v8 @kind i2l;
  #L291f26.  v2:= v9 + v0 @kind long;
  #L291f2a.  v7.`com.b.a.o.b` @type ^`long` := v2 @kind wide;
  #L291f2e.  return v8;
}
procedure `void` `reset`(`com.b.a.o` v2 @kind this) @signature `Lcom/b/a/o;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L29221c.  v0:= v2.`com.b.a.o.e` @type ^`long` @kind wide;
  #L292220.  call `a`(v2, v0) @signature `Lcom/b/a/o;.a:(J)V` @kind virtual;
  #L292226.  return @kind void;
}
procedure `long` `skip`(`com.b.a.o` v6 @kind this, `long` v7 ) @signature `Lcom/b/a/o;.skip:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L291f74.  v0:= v6.`com.b.a.o.f` @type ^`boolean` @kind boolean;
  #L291f78.  if v0 != 0 then goto L291fa8;
  #L291f7c.  v0:= v6.`com.b.a.o.b` @type ^`long` @kind wide;
  #L291f80.  v2:= v0 + v7 @kind long;
  #L291f84.  v0:= v6.`com.b.a.o.d` @type ^`long` @kind wide;
  #L291f88.  v4:= lcmp(v2, v0);
  #L291f8c.  if v4 <= 0 then goto L291fa8;
  #L291f90.  v0:= v6.`com.b.a.o.b` @type ^`long` @kind wide;
  #L291f94.  v2:= v0 + v7 @kind long;
  #L291f98.  v0:= v6.`com.b.a.o.g` @type ^`int`;
  #L291f9c.  v0:= (`long`) v0 @kind i2l;
  #L291f9e.  v4:= v2 + v0 @kind long;
  #L291fa2.  call `b`(v6, v4) @signature `Lcom/b/a/o;.b:(J)V` @kind direct;
  #L291fa8.  v0:= v6.`com.b.a.o.a` @type ^`java.io.InputStream` @kind object;
  #L291fac.  call temp:= `skip`(v0, v7) @signature `Ljava/io/InputStream;.skip:(J)J` @kind virtual;
  #L291fb2.  v7:= temp @kind wide;
  #L291fb4.  v0:= v6.`com.b.a.o.b` @type ^`long` @kind wide;
  #L291fb8.  v2:= v0 + v7 @kind long;
  #L291fbc.  v6.`com.b.a.o.b` @type ^`long` := v2 @kind wide;
  #L291fc0.  return v7 @kind wide;
}
