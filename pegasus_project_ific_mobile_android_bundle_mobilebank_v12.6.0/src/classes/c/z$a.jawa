record `c.z$a` @kind class @AccessFlag PUBLIC {
  `c.x` `c.z$a.a` @AccessFlag ;
  `c.v` `c.z$a.b` @AccessFlag ;
  `int` `c.z$a.c` @AccessFlag ;
  `java.lang.String` `c.z$a.d` @AccessFlag ;
  `c.p` `c.z$a.e` @AccessFlag ;
  `c.q$a` `c.z$a.f` @AccessFlag ;
  `c.aa` `c.z$a.g` @AccessFlag ;
  `c.z` `c.z$a.h` @AccessFlag ;
  `c.z` `c.z$a.i` @AccessFlag ;
  `c.z` `c.z$a.j` @AccessFlag ;
  `long` `c.z$a.k` @AccessFlag ;
  `long` `c.z$a.l` @AccessFlag ;
}
procedure `void` `<init>`(`c.z$a` v1 @kind this) @signature `Lc/z$a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L285a6c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L285a72.  v0:= -1I;
  #L285a74.  v1.`c.z$a.c` @type ^`int` := v0;
  #L285a78.  v0:= new `c.q$a`;
  #L285a7c.  call `<init>`(v0) @signature `Lc/q$a;.<init>:()V` @kind direct;
  #L285a82.  v1.`c.z$a.f` @type ^`c.q$a` := v0 @kind object;
  #L285a86.  return @kind void;
}
procedure `void` `<init>`(`c.z$a` v2 @kind this, `c.z` v3 @kind object) @signature `Lc/z$a;.<init>:(Lc/z;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L285a98.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L285a9e.  v0:= -1I;
  #L285aa0.  v2.`c.z$a.c` @type ^`int` := v0;
  #L285aa4.  v0:= v3.`c.z.a` @type ^`c.x` @kind object;
  #L285aa8.  v2.`c.z$a.a` @type ^`c.x` := v0 @kind object;
  #L285aac.  v0:= v3.`c.z.b` @type ^`c.v` @kind object;
  #L285ab0.  v2.`c.z$a.b` @type ^`c.v` := v0 @kind object;
  #L285ab4.  v0:= v3.`c.z.c` @type ^`int`;
  #L285ab8.  v2.`c.z$a.c` @type ^`int` := v0;
  #L285abc.  v0:= v3.`c.z.d` @type ^`java.lang.String` @kind object;
  #L285ac0.  v2.`c.z$a.d` @type ^`java.lang.String` := v0 @kind object;
  #L285ac4.  v0:= v3.`c.z.e` @type ^`c.p` @kind object;
  #L285ac8.  v2.`c.z$a.e` @type ^`c.p` := v0 @kind object;
  #L285acc.  v0:= v3.`c.z.f` @type ^`c.q` @kind object;
  #L285ad0.  call temp:= `b`(v0) @signature `Lc/q;.b:()Lc/q$a;` @kind virtual;
  #L285ad6.  v0:= temp @kind object;
  #L285ad8.  v2.`c.z$a.f` @type ^`c.q$a` := v0 @kind object;
  #L285adc.  v0:= v3.`c.z.g` @type ^`c.aa` @kind object;
  #L285ae0.  v2.`c.z$a.g` @type ^`c.aa` := v0 @kind object;
  #L285ae4.  v0:= v3.`c.z.h` @type ^`c.z` @kind object;
  #L285ae8.  v2.`c.z$a.h` @type ^`c.z` := v0 @kind object;
  #L285aec.  v0:= v3.`c.z.i` @type ^`c.z` @kind object;
  #L285af0.  v2.`c.z$a.i` @type ^`c.z` := v0 @kind object;
  #L285af4.  v0:= v3.`c.z.j` @type ^`c.z` @kind object;
  #L285af8.  v2.`c.z$a.j` @type ^`c.z` := v0 @kind object;
  #L285afc.  v0:= v3.`c.z.k` @type ^`long` @kind wide;
  #L285b00.  v2.`c.z$a.k` @type ^`long` := v0 @kind wide;
  #L285b04.  v0:= v3.`c.z.l` @type ^`long` @kind wide;
  #L285b08.  v2.`c.z$a.l` @type ^`long` := v0 @kind wide;
  #L285b0c.  return @kind void;
}
procedure `void` `a`(`c.z$a` v1 @kind this, `java.lang.String` v2 @kind object, `c.z` v3 @kind object) @signature `Lc/z$a;.a:(Ljava/lang/String;Lc/z;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L285b20.  v0:= v3.`c.z.g` @type ^`c.aa` @kind object;
  #L285b24.  if v0 == 0 then goto L285b56;
  #L285b28.  v3:= new `java.lang.IllegalArgumentException`;
  #L285b2c.  v0:= new `java.lang.StringBuilder`;
  #L285b30.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L285b36.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L285b3c.  v2:= ".body != null" @kind object;
  #L285b40.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L285b46.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L285b4c.  v2:= temp @kind object;
  #L285b4e.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L285b54.  throw v3;
  #L285b56.  v0:= v3.`c.z.h` @type ^`c.z` @kind object;
  #L285b5a.  if v0 == 0 then goto L285b8c;
  #L285b5e.  v3:= new `java.lang.IllegalArgumentException`;
  #L285b62.  v0:= new `java.lang.StringBuilder`;
  #L285b66.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L285b6c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L285b72.  v2:= ".networkResponse != null" @kind object;
  #L285b76.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L285b7c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L285b82.  v2:= temp @kind object;
  #L285b84.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L285b8a.  throw v3;
  #L285b8c.  v0:= v3.`c.z.i` @type ^`c.z` @kind object;
  #L285b90.  if v0 == 0 then goto L285bc2;
  #L285b94.  v3:= new `java.lang.IllegalArgumentException`;
  #L285b98.  v0:= new `java.lang.StringBuilder`;
  #L285b9c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L285ba2.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L285ba8.  v2:= ".cacheResponse != null" @kind object;
  #L285bac.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L285bb2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L285bb8.  v2:= temp @kind object;
  #L285bba.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L285bc0.  throw v3;
  #L285bc2.  v3:= v3.`c.z.j` @type ^`c.z` @kind object;
  #L285bc6.  if v3 == 0 then goto L285bf8;
  #L285bca.  v3:= new `java.lang.IllegalArgumentException`;
  #L285bce.  v0:= new `java.lang.StringBuilder`;
  #L285bd2.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L285bd8.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L285bde.  v2:= ".priorResponse != null" @kind object;
  #L285be2.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L285be8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L285bee.  v2:= temp @kind object;
  #L285bf0.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L285bf6.  throw v3;
  #L285bf8.  return @kind void;
}
procedure `void` `d`(`c.z$a` v1 @kind this, `c.z` v2 @kind object) @signature `Lc/z$a;.d:(Lc/z;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L285c0c.  v2:= v2.`c.z.g` @type ^`c.aa` @kind object;
  #L285c10.  if v2 == 0 then goto L285c24;
  #L285c14.  v2:= new `java.lang.IllegalArgumentException`;
  #L285c18.  v0:= "priorResponse.body != null" @kind object;
  #L285c1c.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L285c22.  throw v2;
  #L285c24.  return @kind void;
}
procedure `c.z$a` `a`(`c.z$a` v0 @kind this, `int` v1 ) @signature `Lc/z$a;.a:(I)Lc/z$a;` @AccessFlag PUBLIC {
    temp;

  #L2859ac.  v0.`c.z$a.c` @type ^`int` := v1;
  #L2859b0.  return v0 @kind object;
}
procedure `c.z$a` `a`(`c.z$a` v0 @kind this, `long` v1 ) @signature `Lc/z$a;.a:(J)Lc/z$a;` @AccessFlag PUBLIC {
    temp;

  #L2859f8.  v0.`c.z$a.k` @type ^`long` := v1 @kind wide;
  #L2859fc.  return v0 @kind object;
}
procedure `c.z$a` `a`(`c.z$a` v0 @kind this, `c.aa` v1 @kind object) @signature `Lc/z$a;.a:(Lc/aa;)Lc/z$a;` @AccessFlag PUBLIC {
    temp;

  #L285908.  v0.`c.z$a.g` @type ^`c.aa` := v1 @kind object;
  #L28590c.  return v0 @kind object;
}
procedure `c.z$a` `a`(`c.z$a` v0 @kind this, `c.p` v1 @kind object) @signature `Lc/z$a;.a:(Lc/p;)Lc/z$a;` @AccessFlag PUBLIC {
    temp;

  #L285920.  v0.`c.z$a.e` @type ^`c.p` := v1 @kind object;
  #L285924.  return v0 @kind object;
}
procedure `c.z$a` `a`(`c.z$a` v0 @kind this, `c.q` v1 @kind object) @signature `Lc/z$a;.a:(Lc/q;)Lc/z$a;` @AccessFlag PUBLIC {
    temp;

  #L285938.  call temp:= `b`(v1) @signature `Lc/q;.b:()Lc/q$a;` @kind virtual;
  #L28593e.  v1:= temp @kind object;
  #L285940.  v0.`c.z$a.f` @type ^`c.q$a` := v1 @kind object;
  #L285944.  return v0 @kind object;
}
procedure `c.z$a` `a`(`c.z$a` v0 @kind this, `c.v` v1 @kind object) @signature `Lc/z$a;.a:(Lc/v;)Lc/z$a;` @AccessFlag PUBLIC {
    temp;

  #L285958.  v0.`c.z$a.b` @type ^`c.v` := v1 @kind object;
  #L28595c.  return v0 @kind object;
}
procedure `c.z$a` `a`(`c.z$a` v0 @kind this, `c.x` v1 @kind object) @signature `Lc/z$a;.a:(Lc/x;)Lc/z$a;` @AccessFlag PUBLIC {
    temp;

  #L285970.  v0.`c.z$a.a` @type ^`c.x` := v1 @kind object;
  #L285974.  return v0 @kind object;
}
procedure `c.z$a` `a`(`c.z$a` v1 @kind this, `c.z` v2 @kind object) @signature `Lc/z$a;.a:(Lc/z;)Lc/z$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L285988.  if v2 == 0 then goto L285996;
  #L28598c.  v0:= "networkResponse" @kind object;
  #L285990.  call `a`(v1, v0, v2) @signature `Lc/z$a;.a:(Ljava/lang/String;Lc/z;)V` @kind direct;
  #L285996.  v1.`c.z$a.h` @type ^`c.z` := v2 @kind object;
  #L28599a.  return v1 @kind object;
}
procedure `c.z$a` `a`(`c.z$a` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lc/z$a;.a:(Ljava/lang/String;)Lc/z$a;` @AccessFlag PUBLIC {
    temp;

  #L2859c4.  v0.`c.z$a.d` @type ^`java.lang.String` := v1 @kind object;
  #L2859c8.  return v0 @kind object;
}
procedure `c.z$a` `a`(`c.z$a` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lc/z$a;.a:(Ljava/lang/String;Ljava/lang/String;)Lc/z$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2859dc.  v0:= v1.`c.z$a.f` @type ^`c.q$a` @kind object;
  #L2859e0.  call temp:= `a`(v0, v2, v3) @signature `Lc/q$a;.a:(Ljava/lang/String;Ljava/lang/String;)Lc/q$a;` @kind virtual;
  #L2859e6.  return v1 @kind object;
}
procedure `c.z` `a`(`c.z$a` v3 @kind this) @signature `Lc/z$a;.a:()Lc/z;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L285868.  v0:= v3.`c.z$a.a` @type ^`c.x` @kind object;
  #L28586c.  if v0 != 0 then goto L285880;
  #L285870.  v0:= new `java.lang.IllegalStateException`;
  #L285874.  v1:= "request == null" @kind object;
  #L285878.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L28587e.  throw v0;
  #L285880.  v0:= v3.`c.z$a.b` @type ^`c.v` @kind object;
  #L285884.  if v0 != 0 then goto L285898;
  #L285888.  v0:= new `java.lang.IllegalStateException`;
  #L28588c.  v1:= "protocol == null" @kind object;
  #L285890.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L285896.  throw v0;
  #L285898.  v0:= v3.`c.z$a.c` @type ^`int`;
  #L28589c.  if v0 >= 0 then goto L2858d2;
  #L2858a0.  v0:= new `java.lang.IllegalStateException`;
  #L2858a4.  v1:= new `java.lang.StringBuilder`;
  #L2858a8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2858ae.  v2:= "code < 0: " @kind object;
  #L2858b2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2858b8.  v2:= v3.`c.z$a.c` @type ^`int`;
  #L2858bc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2858c2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2858c8.  v1:= temp @kind object;
  #L2858ca.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2858d0.  throw v0;
  #L2858d2.  v0:= v3.`c.z$a.d` @type ^`java.lang.String` @kind object;
  #L2858d6.  if v0 != 0 then goto L2858ea;
  #L2858da.  v0:= new `java.lang.IllegalStateException`;
  #L2858de.  v1:= "message == null" @kind object;
  #L2858e2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2858e8.  throw v0;
  #L2858ea.  v0:= new `c.z`;
  #L2858ee.  call `<init>`(v0, v3) @signature `Lc/z;.<init>:(Lc/z$a;)V` @kind direct;
  #L2858f4.  return v0 @kind object;
}
procedure `c.z$a` `b`(`c.z$a` v0 @kind this, `long` v1 ) @signature `Lc/z$a;.b:(J)Lc/z$a;` @AccessFlag PUBLIC {
    temp;

  #L285a34.  v0.`c.z$a.l` @type ^`long` := v1 @kind wide;
  #L285a38.  return v0 @kind object;
}
procedure `c.z$a` `b`(`c.z$a` v1 @kind this, `c.z` v2 @kind object) @signature `Lc/z$a;.b:(Lc/z;)Lc/z$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L285a10.  if v2 == 0 then goto L285a1e;
  #L285a14.  v0:= "cacheResponse" @kind object;
  #L285a18.  call `a`(v1, v0, v2) @signature `Lc/z$a;.a:(Ljava/lang/String;Lc/z;)V` @kind direct;
  #L285a1e.  v1.`c.z$a.i` @type ^`c.z` := v2 @kind object;
  #L285a22.  return v1 @kind object;
}
procedure `c.z$a` `c`(`c.z$a` v0 @kind this, `c.z` v1 @kind object) @signature `Lc/z$a;.c:(Lc/z;)Lc/z$a;` @AccessFlag PUBLIC {
    temp;

  #L285a4c.  if v1 == 0 then goto L285a56;
  #L285a50.  call `d`(v0, v1) @signature `Lc/z$a;.d:(Lc/z;)V` @kind direct;
  #L285a56.  v0.`c.z$a.j` @type ^`c.z` := v1 @kind object;
  #L285a5a.  return v0 @kind object;
}
