record `c.i$1` @kind class @AccessFlag  extends `java.lang.Runnable` @kind interface {
  `c.i` `c.i$1.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`c.i$1` v0 @kind this, `c.i` v1 @kind object) @signature `Lc/i$1;.<init>:(Lc/i;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2800ec.  v0.`c.i$1.a` @type ^`c.i` := v1 @kind object;
  #L2800f0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2800f6.  return @kind void;
}
procedure `void` `run`(`c.i$1` v8 @kind this) @signature `Lc/i$1;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L280108.  v0:= v8.`c.i$1.a` @type ^`c.i` @kind object;
  #L28010c.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L280112.  v1:= temp @kind wide;
  #L280114.  call temp:= `a`(v0, v1) @signature `Lc/i;.a:(J)J` @kind virtual;
  #L28011a.  v0:= temp @kind wide;
  #L28011c.  v2:= -1L;
  #L280120.  v4:= lcmp(v0, v2);
  #L280124.  if v4 != 0 then goto L28012a;
  #L280128.  return @kind void;
  #L28012a.  v2:= 0L;
  #L28012e.  v4:= lcmp(v0, v2);
  #L280132.  if v4 <= 0 then goto L280108;
  #L280136.  v2:= 1000000L;
  #L28013c.  v4:= v0 / v2 @kind long;
  #L280140.  v2:= v2 * v4 @kind long;
  #L280144.  v6:= v0 - v2 @kind long;
  #L280148.  v0:= v8.`c.i$1.a` @type ^`c.i` @kind object;
  #L28014c.  @monitorenter v0
  #L28014e.  v1:= v8.`c.i$1.a` @type ^`c.i` @kind object;
  #L280152.  v2:= (`int`) v6 @kind l2i;
  #L280154.  call `wait`(v1, v4, v2) @signature `Ljava/lang/Object;.wait:(JI)V` @kind virtual;
  #L28015a.  goto L280160;
  #L28015c.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L28015e.  goto L280164;
  #L280160.  @monitorexit v0
  #L280162.  goto L280108;
  #L280164.  @monitorexit v0
  #L280166.  throw v1;
  catch `java.lang.InterruptedException` @[L28014e..L28015a] goto L280160;
  catch `java.lang.Throwable` @[L28014e..L28015a] goto L28015c;
  catch `java.lang.Throwable` @[L280160..L280166] goto L28015c;
}
