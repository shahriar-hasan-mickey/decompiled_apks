record `c.j$a` @kind class @AccessFlag PUBLIC_FINAL {
  `boolean` `c.j$a.a` @AccessFlag ;
  `java.lang.String`[] `c.j$a.b` @AccessFlag ;
  `java.lang.String`[] `c.j$a.c` @AccessFlag ;
  `boolean` `c.j$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`c.j$a` v1 @kind this, `c.j` v2 @kind object) @signature `Lc/j$a;.<init>:(Lc/j;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2807a0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2807a6.  v0:= v2.`c.j.d` @type ^`boolean` @kind boolean;
  #L2807aa.  v1.`c.j$a.a` @type ^`boolean` := v0 @kind boolean;
  #L2807ae.  v0:= v2.`c.j.f` @type ^`java.lang.String`[] @kind object;
  #L2807b2.  v1.`c.j$a.b` @type ^`java.lang.String`[] := v0 @kind object;
  #L2807b6.  v0:= v2.`c.j.g` @type ^`java.lang.String`[] @kind object;
  #L2807ba.  v1.`c.j$a.c` @type ^`java.lang.String`[] := v0 @kind object;
  #L2807be.  v2:= v2.`c.j.e` @type ^`boolean` @kind boolean;
  #L2807c2.  v1.`c.j$a.d` @type ^`boolean` := v2 @kind boolean;
  #L2807c6.  return @kind void;
}
procedure `void` `<init>`(`c.j$a` v0 @kind this, `boolean` v1 ) @signature `Lc/j$a;.<init>:(Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L280784.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L28078a.  v0.`c.j$a.a` @type ^`boolean` := v1 @kind boolean;
  #L28078e.  return @kind void;
}
procedure `c.j$a` `a`(`c.j$a` v1 @kind this, `boolean` v2 ) @signature `Lc/j$a;.a:(Z)Lc/j$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L28060c.  v0:= v1.`c.j$a.a` @type ^`boolean` @kind boolean;
  #L280610.  if v0 != 0 then goto L280624;
  #L280614.  v2:= new `java.lang.IllegalStateException`;
  #L280618.  v0:= "no TLS extensions for cleartext connections" @kind object;
  #L28061c.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L280622.  throw v2;
  #L280624.  v1.`c.j$a.d` @type ^`boolean` := v2 @kind boolean;
  #L280628.  return v1 @kind object;
}
procedure `c.j$a` `a`(`c.j$a` v3 @kind this, `c.ac`[] v4 @kind object) @signature `Lc/j$a;.a:([Lc/ac;)Lc/j$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L28063c.  v0:= v3.`c.j$a.a` @type ^`boolean` @kind boolean;
  #L280640.  if v0 != 0 then goto L280654;
  #L280644.  v4:= new `java.lang.IllegalStateException`;
  #L280648.  v0:= "no TLS versions for cleartext connections" @kind object;
  #L28064c.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L280652.  throw v4;
  #L280654.  v0:= length @variable v4;
  #L280656.  v0:= new `java.lang.String`[v0];
  #L28065a.  v1:= 0I;
  #L28065c.  v2:= length @variable v4;
  #L28065e.  if v1 >= v2 then goto L280674;
  #L280662.  v2:= v4[v1] @kind object;
  #L280666.  v2:= v2.`c.ac.f` @type ^`java.lang.String` @kind object;
  #L28066a.  v0[v1]:= v2 @kind object;
  #L28066e.  v1:= v1 + 1;
  #L280672.  goto L28065c;
  #L280674.  call temp:= `b`(v3, v0) @signature `Lc/j$a;.b:([Ljava/lang/String;)Lc/j$a;` @kind virtual;
  #L28067a.  v4:= temp @kind object;
  #L28067c.  return v4 @kind object;
}
procedure `c.j$a` `a`(`c.j$a` v3 @kind this, `c.g`[] v4 @kind object) @signature `Lc/j$a;.a:([Lc/g;)Lc/j$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L280690.  v0:= v3.`c.j$a.a` @type ^`boolean` @kind boolean;
  #L280694.  if v0 != 0 then goto L2806a8;
  #L280698.  v4:= new `java.lang.IllegalStateException`;
  #L28069c.  v0:= "no cipher suites for cleartext connections" @kind object;
  #L2806a0.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2806a6.  throw v4;
  #L2806a8.  v0:= length @variable v4;
  #L2806aa.  v0:= new `java.lang.String`[v0];
  #L2806ae.  v1:= 0I;
  #L2806b0.  v2:= length @variable v4;
  #L2806b2.  if v1 >= v2 then goto L2806c8;
  #L2806b6.  v2:= v4[v1] @kind object;
  #L2806ba.  v2:= v2.`c.g.bj` @type ^`java.lang.String` @kind object;
  #L2806be.  v0[v1]:= v2 @kind object;
  #L2806c2.  v1:= v1 + 1;
  #L2806c6.  goto L2806b0;
  #L2806c8.  call temp:= `a`(v3, v0) @signature `Lc/j$a;.a:([Ljava/lang/String;)Lc/j$a;` @kind virtual;
  #L2806ce.  v4:= temp @kind object;
  #L2806d0.  return v4 @kind object;
}
procedure `c.j$a` `a`(`c.j$a` v1 @kind this, `java.lang.String`[] v2 @kind object) @signature `Lc/j$a;.a:([Ljava/lang/String;)Lc/j$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2806e4.  v0:= v1.`c.j$a.a` @type ^`boolean` @kind boolean;
  #L2806e8.  if v0 != 0 then goto L2806fc;
  #L2806ec.  v2:= new `java.lang.IllegalStateException`;
  #L2806f0.  v0:= "no cipher suites for cleartext connections" @kind object;
  #L2806f4.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2806fa.  throw v2;
  #L2806fc.  v0:= length @variable v2;
  #L2806fe.  if v0 != 0 then goto L280712;
  #L280702.  v2:= new `java.lang.IllegalArgumentException`;
  #L280706.  v0:= "At least one cipher suite is required" @kind object;
  #L28070a.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L280710.  throw v2;
  #L280712.  call temp:= `clone`(v2) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L280718.  v2:= temp @kind object;
  #L28071a.  v2:= (`java.lang.String`[]) v2 @kind object;
  #L28071e.  v1.`c.j$a.b` @type ^`java.lang.String`[] := v2 @kind object;
  #L280722.  return v1 @kind object;
}
procedure `c.j` `a`(`c.j$a` v1 @kind this) @signature `Lc/j$a;.a:()Lc/j;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2805f0.  v0:= new `c.j`;
  #L2805f4.  call `<init>`(v0, v1) @signature `Lc/j;.<init>:(Lc/j$a;)V` @kind direct;
  #L2805fa.  return v0 @kind object;
}
procedure `c.j$a` `b`(`c.j$a` v1 @kind this, `java.lang.String`[] v2 @kind object) @signature `Lc/j$a;.b:([Ljava/lang/String;)Lc/j$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L280734.  v0:= v1.`c.j$a.a` @type ^`boolean` @kind boolean;
  #L280738.  if v0 != 0 then goto L28074c;
  #L28073c.  v2:= new `java.lang.IllegalStateException`;
  #L280740.  v0:= "no TLS versions for cleartext connections" @kind object;
  #L280744.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L28074a.  throw v2;
  #L28074c.  v0:= length @variable v2;
  #L28074e.  if v0 != 0 then goto L280762;
  #L280752.  v2:= new `java.lang.IllegalArgumentException`;
  #L280756.  v0:= "At least one TLS version is required" @kind object;
  #L28075a.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L280760.  throw v2;
  #L280762.  call temp:= `clone`(v2) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L280768.  v2:= temp @kind object;
  #L28076a.  v2:= (`java.lang.String`[]) v2 @kind object;
  #L28076e.  v1.`c.j$a.c` @type ^`java.lang.String`[] := v2 @kind object;
  #L280772.  return v1 @kind object;
}
