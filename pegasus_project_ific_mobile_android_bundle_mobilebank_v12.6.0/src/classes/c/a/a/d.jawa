record `c.a.a.d` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.Closeable` @kind interface, `java.io.Flushable` @kind interface {
  `c.a.f.a` `c.a.a.d.b` @AccessFlag FINAL;
  `int` `c.a.a.d.c` @AccessFlag FINAL;
  `d.d` `c.a.a.d.d` @AccessFlag ;
  `java.util.LinkedHashMap` `c.a.a.d.e` @AccessFlag FINAL;
  `int` `c.a.a.d.f` @AccessFlag ;
  `boolean` `c.a.a.d.g` @AccessFlag ;
  `boolean` `c.a.a.d.h` @AccessFlag ;
  `boolean` `c.a.a.d.i` @AccessFlag ;
  `long` `c.a.a.d.k` @AccessFlag PRIVATE;
  `long` `c.a.a.d.l` @AccessFlag PRIVATE;
  `long` `c.a.a.d.m` @AccessFlag PRIVATE;
  `java.util.concurrent.Executor` `c.a.a.d.n` @AccessFlag PRIVATE_FINAL;
  `java.lang.Runnable` `c.a.a.d.o` @AccessFlag PRIVATE_FINAL;
}
global `java.util.regex.Pattern` `@@c.a.a.d.a` @AccessFlag STATIC_FINAL;
global `boolean` `@@c.a.a.d.j` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lc/a/a/d;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L26ecd8.  v0:= "[a-z0-9_-]{1,120}" @kind object;
  #L26ecdc.  call temp:= `compile`(v0) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L26ece2.  v0:= temp @kind object;
  #L26ece4.  `@@c.a.a.d.a` @type ^`java.util.regex.Pattern` := v0 @kind object;
  #L26ece8.  return @kind void;
}
procedure `void` `d`(`c.a.a.d` v2 @kind this) @signature `Lc/a/a/d;.d:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L26f028.  @monitorenter v2
  #L26f02a.  call temp:= `b`(v2) @signature `Lc/a/a/d;.b:()Z` @kind virtual;
  #L26f030.  v0:= temp;
  #L26f032.  if v0 == 0 then goto L26f046;
  #L26f036.  v0:= new `java.lang.IllegalStateException`;
  #L26f03a.  v1:= "cache is closed" @kind object;
  #L26f03e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L26f044.  throw v0;
  #L26f046.  @monitorexit v2
  #L26f048.  return @kind void;
  #L26f04a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L26f04c.  @monitorexit v2
  #L26f04e.  throw v0;
  catch `java.lang.Throwable` @[L26f02a..L26f046] goto L26f04a;
}
procedure `void` `a`(`c.a.a.d` v11 @kind this, `c.a.a.d$a` v12 @kind object, `boolean` v13 ) @signature `Lc/a/a/d;.a:(Lc/a/a/d$a;Z)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L26ecfc.  @monitorenter v11
  #L26ecfe.  v0:= v12.`c.a.a.d$a.a` @type ^`c.a.a.d$b` @kind object;
  #L26ed02.  v1:= v0.`c.a.a.d$b.f` @type ^`c.a.a.d$a` @kind object;
  #L26ed06.  if v1 == v12 then goto L26ed16;
  #L26ed0a.  v12:= new `java.lang.IllegalStateException`;
  #L26ed0e.  call `<init>`(v12) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L26ed14.  throw v12;
  #L26ed16.  v1:= 0I;
  #L26ed18.  if v13 == 0 then goto L26ed96;
  #L26ed1c.  v2:= v0.`c.a.a.d$b.e` @type ^`boolean` @kind boolean;
  #L26ed20.  if v2 != 0 then goto L26ed96;
  #L26ed24.  v2:= 0I;
  #L26ed26.  v3:= v11.`c.a.a.d.c` @type ^`int`;
  #L26ed2a.  if v2 >= v3 then goto L26ed96;
  #L26ed2e.  v3:= v12.`c.a.a.d$a.b` @type ^`boolean`[] @kind object;
  #L26ed32.  v3:= v3[v2] @kind boolean;
  #L26ed36.  if v3 != 0 then goto L26ed6e;
  #L26ed3a.  call `b`(v12) @signature `Lc/a/a/d$a;.b:()V` @kind virtual;
  #L26ed40.  v12:= new `java.lang.IllegalStateException`;
  #L26ed44.  v13:= new `java.lang.StringBuilder`;
  #L26ed48.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L26ed4e.  v0:= "Newly created entry didn't create value for index " @kind object;
  #L26ed52.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L26ed58.  call temp:= `append`(v13, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L26ed5e.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L26ed64.  v13:= temp @kind object;
  #L26ed66.  call `<init>`(v12, v13) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L26ed6c.  throw v12;
  #L26ed6e.  v3:= v11.`c.a.a.d.b` @type ^`c.a.f.a` @kind object;
  #L26ed72.  v4:= v0.`c.a.a.d$b.d` @type ^`java.io.File`[] @kind object;
  #L26ed76.  v4:= v4[v2] @kind object;
  #L26ed7a.  call temp:= `b`(v3, v4) @signature `Lc/a/f/a;.b:(Ljava/io/File;)Z` @kind interface;
  #L26ed80.  v3:= temp;
  #L26ed82.  if v3 != 0 then goto L26ed90;
  #L26ed86.  call `b`(v12) @signature `Lc/a/a/d$a;.b:()V` @kind virtual;
  #L26ed8c.  @monitorexit v11
  #L26ed8e.  return @kind void;
  #L26ed90.  v2:= v2 + 1;
  #L26ed94.  goto L26ed26;
  #L26ed96.  v12:= v11.`c.a.a.d.c` @type ^`int`;
  #L26ed9a.  if v1 >= v12 then goto L26ee0c;
  #L26ed9e.  v12:= v0.`c.a.a.d$b.d` @type ^`java.io.File`[] @kind object;
  #L26eda2.  v12:= v12[v1] @kind object;
  #L26eda6.  if v13 == 0 then goto L26edfc;
  #L26edaa.  v2:= v11.`c.a.a.d.b` @type ^`c.a.f.a` @kind object;
  #L26edae.  call temp:= `b`(v2, v12) @signature `Lc/a/f/a;.b:(Ljava/io/File;)Z` @kind interface;
  #L26edb4.  v2:= temp;
  #L26edb6.  if v2 == 0 then goto L26ee06;
  #L26edba.  v2:= v0.`c.a.a.d$b.c` @type ^`java.io.File`[] @kind object;
  #L26edbe.  v2:= v2[v1] @kind object;
  #L26edc2.  v3:= v11.`c.a.a.d.b` @type ^`c.a.f.a` @kind object;
  #L26edc6.  call `a`(v3, v12, v2) @signature `Lc/a/f/a;.a:(Ljava/io/File;Ljava/io/File;)V` @kind interface;
  #L26edcc.  v12:= v0.`c.a.a.d$b.b` @type ^`long`[] @kind object;
  #L26edd0.  v3:= v12[v1] @kind wide;
  #L26edd4.  v12:= v11.`c.a.a.d.b` @type ^`c.a.f.a` @kind object;
  #L26edd8.  call temp:= `c`(v12, v2) @signature `Lc/a/f/a;.c:(Ljava/io/File;)J` @kind interface;
  #L26edde.  v5:= temp @kind wide;
  #L26ede0.  v12:= v0.`c.a.a.d$b.b` @type ^`long`[] @kind object;
  #L26ede4.  v12[v1]:= v5 @kind wide;
  #L26ede8.  v7:= v11.`c.a.a.d.l` @type ^`long` @kind wide;
  #L26edec.  v12:= 0I;
  #L26edee.  v9:= v7 - v3 @kind long;
  #L26edf2.  v2:= v9 + v5 @kind long;
  #L26edf6.  v11.`c.a.a.d.l` @type ^`long` := v2 @kind wide;
  #L26edfa.  goto L26ee06;
  #L26edfc.  v2:= v11.`c.a.a.d.b` @type ^`c.a.f.a` @kind object;
  #L26ee00.  call `a`(v2, v12) @signature `Lc/a/f/a;.a:(Ljava/io/File;)V` @kind interface;
  #L26ee06.  v1:= v1 + 1;
  #L26ee0a.  goto L26ed96;
  #L26ee0c.  v12:= v11.`c.a.a.d.f` @type ^`int`;
  #L26ee10.  v1:= 1I;
  #L26ee12.  v12:= v12 + v1 @kind int;
  #L26ee14.  v11.`c.a.a.d.f` @type ^`int` := v12;
  #L26ee18.  v12:= 0I;
  #L26ee1a.  v0.`c.a.a.d$b.f` @type ^`c.a.a.d$a` := v12 @kind object;
  #L26ee1e.  v12:= v0.`c.a.a.d$b.e` @type ^`boolean` @kind boolean;
  #L26ee22.  v12:= v12 ^| v13 @kind int;
  #L26ee24.  v2:= 10I;
  #L26ee28.  v3:= 32I;
  #L26ee2c.  if v12 == 0 then goto L26ee86;
  #L26ee30.  v0.`c.a.a.d$b.e` @type ^`boolean` := v1 @kind boolean;
  #L26ee34.  v12:= v11.`c.a.a.d.d` @type ^`d.d` @kind object;
  #L26ee38.  v1:= "CLEAN" @kind object;
  #L26ee3c.  call temp:= `b`(v12, v1) @signature `Ld/d;.b:(Ljava/lang/String;)Ld/d;` @kind interface;
  #L26ee42.  v12:= temp @kind object;
  #L26ee44.  call temp:= `i`(v12, v3) @signature `Ld/d;.i:(I)Ld/d;` @kind interface;
  #L26ee4a.  v12:= v11.`c.a.a.d.d` @type ^`d.d` @kind object;
  #L26ee4e.  v1:= v0.`c.a.a.d$b.a` @type ^`java.lang.String` @kind object;
  #L26ee52.  call temp:= `b`(v12, v1) @signature `Ld/d;.b:(Ljava/lang/String;)Ld/d;` @kind interface;
  #L26ee58.  v12:= v11.`c.a.a.d.d` @type ^`d.d` @kind object;
  #L26ee5c.  call `a`(v0, v12) @signature `Lc/a/a/d$b;.a:(Ld/d;)V` @kind virtual;
  #L26ee62.  v12:= v11.`c.a.a.d.d` @type ^`d.d` @kind object;
  #L26ee66.  call temp:= `i`(v12, v2) @signature `Ld/d;.i:(I)Ld/d;` @kind interface;
  #L26ee6c.  if v13 == 0 then goto L26eec2;
  #L26ee70.  v12:= v11.`c.a.a.d.m` @type ^`long` @kind wide;
  #L26ee74.  v1:= 1L;
  #L26ee78.  v3:= v12 + v1 @kind long;
  #L26ee7c.  v11.`c.a.a.d.m` @type ^`long` := v3 @kind wide;
  #L26ee80.  v0.`c.a.a.d$b.g` @type ^`long` := v12 @kind wide;
  #L26ee84.  goto L26eec2;
  #L26ee86.  v12:= v11.`c.a.a.d.e` @type ^`java.util.LinkedHashMap` @kind object;
  #L26ee8a.  v13:= v0.`c.a.a.d$b.a` @type ^`java.lang.String` @kind object;
  #L26ee8e.  call temp:= `remove`(v12, v13) @signature `Ljava/util/LinkedHashMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L26ee94.  v12:= v11.`c.a.a.d.d` @type ^`d.d` @kind object;
  #L26ee98.  v13:= "REMOVE" @kind object;
  #L26ee9c.  call temp:= `b`(v12, v13) @signature `Ld/d;.b:(Ljava/lang/String;)Ld/d;` @kind interface;
  #L26eea2.  v12:= temp @kind object;
  #L26eea4.  call temp:= `i`(v12, v3) @signature `Ld/d;.i:(I)Ld/d;` @kind interface;
  #L26eeaa.  v12:= v11.`c.a.a.d.d` @type ^`d.d` @kind object;
  #L26eeae.  v13:= v0.`c.a.a.d$b.a` @type ^`java.lang.String` @kind object;
  #L26eeb2.  call temp:= `b`(v12, v13) @signature `Ld/d;.b:(Ljava/lang/String;)Ld/d;` @kind interface;
  #L26eeb8.  v12:= v11.`c.a.a.d.d` @type ^`d.d` @kind object;
  #L26eebc.  call temp:= `i`(v12, v2) @signature `Ld/d;.i:(I)Ld/d;` @kind interface;
  #L26eec2.  v12:= v11.`c.a.a.d.d` @type ^`d.d` @kind object;
  #L26eec6.  call `flush`(v12) @signature `Ld/d;.flush:()V` @kind interface;
  #L26eecc.  v12:= v11.`c.a.a.d.l` @type ^`long` @kind wide;
  #L26eed0.  v0:= v11.`c.a.a.d.k` @type ^`long` @kind wide;
  #L26eed4.  v2:= lcmp(v12, v0);
  #L26eed8.  if v2 > 0 then goto L26eee8;
  #L26eedc.  call temp:= `a`(v11) @signature `Lc/a/a/d;.a:()Z` @kind virtual;
  #L26eee2.  v12:= temp;
  #L26eee4.  if v12 == 0 then goto L26eef6;
  #L26eee8.  v12:= v11.`c.a.a.d.n` @type ^`java.util.concurrent.Executor` @kind object;
  #L26eeec.  v13:= v11.`c.a.a.d.o` @type ^`java.lang.Runnable` @kind object;
  #L26eef0.  call `execute`(v12, v13) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L26eef6.  @monitorexit v11
  #L26eef8.  return @kind void;
  #L26eefa.  v12:= Exception @type ^`java.lang.Throwable` @kind object;
  #L26eefc.  @monitorexit v11
  #L26eefe.  throw v12;
  catch `java.lang.Throwable` @[L26ecfe..L26ed8c] goto L26eefa;
  catch `java.lang.Throwable` @[L26ed96..L26eef6] goto L26eefa;
}
procedure `boolean` `a`(`c.a.a.d` v2 @kind this) @signature `Lc/a/a/d;.a:()Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L26eba8.  v0:= v2.`c.a.a.d.f` @type ^`int`;
  #L26ebac.  v1:= 2000I;
  #L26ebb0.  if v0 < v1 then goto L26ebcc;
  #L26ebb4.  v0:= v2.`c.a.a.d.f` @type ^`int`;
  #L26ebb8.  v1:= v2.`c.a.a.d.e` @type ^`java.util.LinkedHashMap` @kind object;
  #L26ebbc.  call temp:= `size`(v1) @signature `Ljava/util/LinkedHashMap;.size:()I` @kind virtual;
  #L26ebc2.  v1:= temp;
  #L26ebc4.  if v0 < v1 then goto L26ebcc;
  #L26ebc8.  v0:= 1I;
  #L26ebca.  goto L26ebce;
  #L26ebcc.  v0:= 0I;
  #L26ebce.  return v0;
}
procedure `boolean` `a`(`c.a.a.d` v8 @kind this, `c.a.a.d$b` v9 @kind object) @signature `Lc/a/a/d;.a:(Lc/a/a/d$b;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L26ebe0.  v0:= v9.`c.a.a.d$b.f` @type ^`c.a.a.d$a` @kind object;
  #L26ebe4.  if v0 == 0 then goto L26ebf2;
  #L26ebe8.  v0:= v9.`c.a.a.d$b.f` @type ^`c.a.a.d$a` @kind object;
  #L26ebec.  call `a`(v0) @signature `Lc/a/a/d$a;.a:()V` @kind virtual;
  #L26ebf2.  v0:= 0I;
  #L26ebf4.  v1:= v8.`c.a.a.d.c` @type ^`int`;
  #L26ebf8.  if v0 >= v1 then goto L26ec34;
  #L26ebfc.  v1:= v8.`c.a.a.d.b` @type ^`c.a.f.a` @kind object;
  #L26ec00.  v2:= v9.`c.a.a.d$b.c` @type ^`java.io.File`[] @kind object;
  #L26ec04.  v2:= v2[v0] @kind object;
  #L26ec08.  call `a`(v1, v2) @signature `Lc/a/f/a;.a:(Ljava/io/File;)V` @kind interface;
  #L26ec0e.  v1:= v8.`c.a.a.d.l` @type ^`long` @kind wide;
  #L26ec12.  v3:= v9.`c.a.a.d$b.b` @type ^`long`[] @kind object;
  #L26ec16.  v4:= v3[v0] @kind wide;
  #L26ec1a.  v6:= v1 - v4 @kind long;
  #L26ec1e.  v8.`c.a.a.d.l` @type ^`long` := v6 @kind wide;
  #L26ec22.  v1:= v9.`c.a.a.d$b.b` @type ^`long`[] @kind object;
  #L26ec26.  v2:= 0L;
  #L26ec2a.  v1[v0]:= v2 @kind wide;
  #L26ec2e.  v0:= v0 + 1;
  #L26ec32.  goto L26ebf4;
  #L26ec34.  v0:= v8.`c.a.a.d.f` @type ^`int`;
  #L26ec38.  v1:= 1I;
  #L26ec3a.  v0:= v0 + v1 @kind int;
  #L26ec3c.  v8.`c.a.a.d.f` @type ^`int` := v0;
  #L26ec40.  v0:= v8.`c.a.a.d.d` @type ^`d.d` @kind object;
  #L26ec44.  v2:= "REMOVE" @kind object;
  #L26ec48.  call temp:= `b`(v0, v2) @signature `Ld/d;.b:(Ljava/lang/String;)Ld/d;` @kind interface;
  #L26ec4e.  v0:= temp @kind object;
  #L26ec50.  v2:= 32I;
  #L26ec54.  call temp:= `i`(v0, v2) @signature `Ld/d;.i:(I)Ld/d;` @kind interface;
  #L26ec5a.  v0:= temp @kind object;
  #L26ec5c.  v2:= v9.`c.a.a.d$b.a` @type ^`java.lang.String` @kind object;
  #L26ec60.  call temp:= `b`(v0, v2) @signature `Ld/d;.b:(Ljava/lang/String;)Ld/d;` @kind interface;
  #L26ec66.  v0:= temp @kind object;
  #L26ec68.  v2:= 10I;
  #L26ec6c.  call temp:= `i`(v0, v2) @signature `Ld/d;.i:(I)Ld/d;` @kind interface;
  #L26ec72.  v0:= v8.`c.a.a.d.e` @type ^`java.util.LinkedHashMap` @kind object;
  #L26ec76.  v9:= v9.`c.a.a.d$b.a` @type ^`java.lang.String` @kind object;
  #L26ec7a.  call temp:= `remove`(v0, v9) @signature `Ljava/util/LinkedHashMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L26ec80.  call temp:= `a`(v8) @signature `Lc/a/a/d;.a:()Z` @kind virtual;
  #L26ec86.  v9:= temp;
  #L26ec88.  if v9 == 0 then goto L26ec9a;
  #L26ec8c.  v9:= v8.`c.a.a.d.n` @type ^`java.util.concurrent.Executor` @kind object;
  #L26ec90.  v0:= v8.`c.a.a.d.o` @type ^`java.lang.Runnable` @kind object;
  #L26ec94.  call `execute`(v9, v0) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L26ec9a.  return v1;
}
procedure `boolean` `b`(`c.a.a.d` v1 @kind this) @signature `Lc/a/a/d;.b:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26ecac.  @monitorenter v1
  #L26ecae.  v0:= v1.`c.a.a.d.h` @type ^`boolean` @kind boolean;
  #L26ecb2.  @monitorexit v1
  #L26ecb4.  return v0;
  #L26ecb6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L26ecb8.  @monitorexit v1
  #L26ecba.  throw v0;
  catch `java.lang.Throwable` @[L26ecae..L26ecb2] goto L26ecb6;
}
procedure `void` `c`(`c.a.a.d` v5 @kind this) @signature `Lc/a/a/d;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L26ef24.  v0:= v5.`c.a.a.d.l` @type ^`long` @kind wide;
  #L26ef28.  v2:= v5.`c.a.a.d.k` @type ^`long` @kind wide;
  #L26ef2c.  v4:= lcmp(v0, v2);
  #L26ef30.  if v4 <= 0 then goto L26ef5c;
  #L26ef34.  v0:= v5.`c.a.a.d.e` @type ^`java.util.LinkedHashMap` @kind object;
  #L26ef38.  call temp:= `values`(v0) @signature `Ljava/util/LinkedHashMap;.values:()Ljava/util/Collection;` @kind virtual;
  #L26ef3e.  v0:= temp @kind object;
  #L26ef40.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L26ef46.  v0:= temp @kind object;
  #L26ef48.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L26ef4e.  v0:= temp @kind object;
  #L26ef50.  v0:= (`c.a.a.d$b`) v0 @kind object;
  #L26ef54.  call temp:= `a`(v5, v0) @signature `Lc/a/a/d;.a:(Lc/a/a/d$b;)Z` @kind virtual;
  #L26ef5a.  goto L26ef24;
  #L26ef5c.  v0:= 0I;
  #L26ef5e.  v5.`c.a.a.d.i` @type ^`boolean` := v0 @kind boolean;
  #L26ef62.  return @kind void;
}
procedure `void` `close`(`c.a.a.d` v6 @kind this) @signature `Lc/a/a/d;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L26ef74.  @monitorenter v6
  #L26ef76.  v0:= v6.`c.a.a.d.g` @type ^`boolean` @kind boolean;
  #L26ef7a.  v1:= 1I;
  #L26ef7c.  if v0 == 0 then goto L26eff4;
  #L26ef80.  v0:= v6.`c.a.a.d.h` @type ^`boolean` @kind boolean;
  #L26ef84.  if v0 == 0 then goto L26ef8a;
  #L26ef88.  goto L26eff4;
  #L26ef8a.  v0:= v6.`c.a.a.d.e` @type ^`java.util.LinkedHashMap` @kind object;
  #L26ef8e.  call temp:= `values`(v0) @signature `Ljava/util/LinkedHashMap;.values:()Ljava/util/Collection;` @kind virtual;
  #L26ef94.  v0:= temp @kind object;
  #L26ef96.  v2:= v6.`c.a.a.d.e` @type ^`java.util.LinkedHashMap` @kind object;
  #L26ef9a.  call temp:= `size`(v2) @signature `Ljava/util/LinkedHashMap;.size:()I` @kind virtual;
  #L26efa0.  v2:= temp;
  #L26efa2.  v2:= new `c.a.a.d$b`[v2];
  #L26efa6.  call temp:= `toArray`(v0, v2) @signature `Ljava/util/Collection;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L26efac.  v0:= temp @kind object;
  #L26efae.  v0:= (`c.a.a.d$b`[]) v0 @kind object;
  #L26efb2.  v2:= length @variable v0;
  #L26efb4.  v3:= 0I;
  #L26efb6.  if v3 >= v2 then goto L26efd6;
  #L26efba.  v4:= v0[v3] @kind object;
  #L26efbe.  v5:= v4.`c.a.a.d$b.f` @type ^`c.a.a.d$a` @kind object;
  #L26efc2.  if v5 == 0 then goto L26efd0;
  #L26efc6.  v4:= v4.`c.a.a.d$b.f` @type ^`c.a.a.d$a` @kind object;
  #L26efca.  call `b`(v4) @signature `Lc/a/a/d$a;.b:()V` @kind virtual;
  #L26efd0.  v3:= v3 + 1;
  #L26efd4.  goto L26efb6;
  #L26efd6.  call `c`(v6) @signature `Lc/a/a/d;.c:()V` @kind virtual;
  #L26efdc.  v0:= v6.`c.a.a.d.d` @type ^`d.d` @kind object;
  #L26efe0.  call `close`(v0) @signature `Ld/d;.close:()V` @kind interface;
  #L26efe6.  v0:= 0I;
  #L26efe8.  v6.`c.a.a.d.d` @type ^`d.d` := v0 @kind object;
  #L26efec.  v6.`c.a.a.d.h` @type ^`boolean` := v1 @kind boolean;
  #L26eff0.  @monitorexit v6
  #L26eff2.  return @kind void;
  #L26eff4.  v6.`c.a.a.d.h` @type ^`boolean` := v1 @kind boolean;
  #L26eff8.  @monitorexit v6
  #L26effa.  return @kind void;
  #L26effc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L26effe.  @monitorexit v6
  #L26f000.  throw v0;
  catch `java.lang.Throwable` @[L26ef76..L26eff0] goto L26effc;
  catch `java.lang.Throwable` @[L26eff4..L26eff8] goto L26effc;
}
procedure `void` `flush`(`c.a.a.d` v1 @kind this) @signature `Lc/a/a/d;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26f06c.  @monitorenter v1
  #L26f06e.  v0:= v1.`c.a.a.d.g` @type ^`boolean` @kind boolean;
  #L26f072.  if v0 != 0 then goto L26f07a;
  #L26f076.  @monitorexit v1
  #L26f078.  return @kind void;
  #L26f07a.  call `d`(v1) @signature `Lc/a/a/d;.d:()V` @kind direct;
  #L26f080.  call `c`(v1) @signature `Lc/a/a/d;.c:()V` @kind virtual;
  #L26f086.  v0:= v1.`c.a.a.d.d` @type ^`d.d` @kind object;
  #L26f08a.  call `flush`(v0) @signature `Ld/d;.flush:()V` @kind interface;
  #L26f090.  @monitorexit v1
  #L26f092.  return @kind void;
  #L26f094.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L26f096.  @monitorexit v1
  #L26f098.  throw v0;
  catch `java.lang.Throwable` @[L26f06e..L26f072] goto L26f094;
  catch `java.lang.Throwable` @[L26f07a..L26f090] goto L26f094;
}
