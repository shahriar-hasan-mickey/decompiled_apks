record `c.a.a.a$1` @kind class @AccessFlag  extends `d.s` @kind interface {
  `boolean` `c.a.a.a$1.a` @AccessFlag ;
  `d.e` `c.a.a.a$1.b` @AccessFlag FINAL_SYNTHETIC;
  `c.a.a.b` `c.a.a.a$1.c` @AccessFlag FINAL_SYNTHETIC;
  `d.d` `c.a.a.a$1.d` @AccessFlag FINAL_SYNTHETIC;
  `c.a.a.a` `c.a.a.a$1.e` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`c.a.a.a$1` v0 @kind this, `c.a.a.a` v1 @kind object, `d.e` v2 @kind object, `c.a.a.b` v3 @kind object, `d.d` v4 @kind object) @signature `Lc/a/a/a$1;.<init>:(Lc/a/a/a;Ld/e;Lc/a/a/b;Ld/d;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L26de40.  v0.`c.a.a.a$1.e` @type ^`c.a.a.a` := v1 @kind object;
  #L26de44.  v0.`c.a.a.a$1.b` @type ^`d.e` := v2 @kind object;
  #L26de48.  v0.`c.a.a.a$1.c` @type ^`c.a.a.b` := v3 @kind object;
  #L26de4c.  v0.`c.a.a.a$1.d` @type ^`d.d` := v4 @kind object;
  #L26de50.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L26de56.  return @kind void;
}
procedure `long` `a`(`c.a.a.a$1` v8 @kind this, `d.c` v9 @kind object, `long` v10 ) @signature `Lc/a/a/a$1;.a:(Ld/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L26ddb0.  v0:= 1I;
  #L26ddb2.  v1:= v8.`c.a.a.a$1.b` @type ^`d.e` @kind object;
  #L26ddb6.  call temp:= `a`(v1, v9, v10) @signature `Ld/e;.a:(Ld/c;J)J` @kind interface;
  #L26ddbc.  v10:= temp @kind wide;
  #L26ddbe.  v1:= -1L;
  #L26ddc2.  v3:= lcmp(v10, v1);
  #L26ddc6.  if v3 != 0 then goto L26dde2;
  #L26ddca.  v9:= v8.`c.a.a.a$1.a` @type ^`boolean` @kind boolean;
  #L26ddce.  if v9 != 0 then goto L26dde0;
  #L26ddd2.  v8.`c.a.a.a$1.a` @type ^`boolean` := v0 @kind boolean;
  #L26ddd6.  v9:= v8.`c.a.a.a$1.d` @type ^`d.d` @kind object;
  #L26ddda.  call `close`(v9) @signature `Ld/d;.close:()V` @kind interface;
  #L26dde0.  return v1 @kind wide;
  #L26dde2.  v0:= v8.`c.a.a.a$1.d` @type ^`d.d` @kind object;
  #L26dde6.  call temp:= `c`(v0) @signature `Ld/d;.c:()Ld/c;` @kind interface;
  #L26ddec.  v3:= temp @kind object;
  #L26ddee.  call temp:= `b`(v9) @signature `Ld/c;.b:()J` @kind virtual;
  #L26ddf4.  v0:= temp @kind wide;
  #L26ddf6.  v4:= v0 - v10 @kind long;
  #L26ddfa.  v2:= v9 @kind object;
  #L26ddfc.  v6:= v10 @kind wide;
  #L26ddfe.  call temp:= `a`(v2, v3, v4, v6) @signature `Ld/c;.a:(Ld/c;JJ)Ld/c;` @kind virtual;
  #L26de04.  v9:= v8.`c.a.a.a$1.d` @type ^`d.d` @kind object;
  #L26de08.  call temp:= `t`(v9) @signature `Ld/d;.t:()Ld/d;` @kind interface;
  #L26de0e.  return v10 @kind wide;
  #L26de10.  v9:= Exception @type ^`java.io.IOException` @kind object;
  #L26de12.  v10:= v8.`c.a.a.a$1.a` @type ^`boolean` @kind boolean;
  #L26de16.  if v10 != 0 then goto L26de1e;
  #L26de1a.  v8.`c.a.a.a$1.a` @type ^`boolean` := v0 @kind boolean;
  #L26de1e.  throw v9;
  catch `java.io.IOException` @[L26ddb2..L26ddbe] goto L26de10;
}
procedure `d.t` `a`(`c.a.a.a$1` v1 @kind this) @signature `Lc/a/a/a$1;.a:()Ld/t;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26dd90.  v0:= v1.`c.a.a.a$1.b` @type ^`d.e` @kind object;
  #L26dd94.  call temp:= `a`(v0) @signature `Ld/e;.a:()Ld/t;` @kind interface;
  #L26dd9a.  v0:= temp @kind object;
  #L26dd9c.  return v0 @kind object;
}
procedure `void` `close`(`c.a.a.a$1` v2 @kind this) @signature `Lc/a/a/a$1;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L26de68.  v0:= v2.`c.a.a.a$1.a` @type ^`boolean` @kind boolean;
  #L26de6c.  if v0 != 0 then goto L26de8a;
  #L26de70.  v0:= 100I;
  #L26de74.  v1:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L26de78.  call temp:= `a`(v2, v0, v1) @signature `Lc/a/c;.a:(Ld/s;ILjava/util/concurrent/TimeUnit;)Z` @kind static;
  #L26de7e.  v0:= temp;
  #L26de80.  if v0 != 0 then goto L26de8a;
  #L26de84.  v0:= 1I;
  #L26de86.  v2.`c.a.a.a$1.a` @type ^`boolean` := v0 @kind boolean;
  #L26de8a.  v0:= v2.`c.a.a.a$1.b` @type ^`d.e` @kind object;
  #L26de8e.  call `close`(v0) @signature `Ld/e;.close:()V` @kind interface;
  #L26de94.  return @kind void;
}
