record `c.a.g.b` @kind class @AccessFlag PUBLIC extends `c.a.g.f` @kind class {
}
procedure `void` `<init>`(`c.a.g.b` v0 @kind this) @signature `Lc/a/g/b;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L27c420.  call `<init>`(v0) @signature `Lc/a/g/f;.<init>:()V` @kind direct;
  #L27c426.  return @kind void;
}
procedure `c.a.g.f` `b`() @signature `Lc/a/g/b;.b:()Lc/a/g/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L27c33c.  v0:= 0I;
  #L27c33e.  v1:= "org.conscrypt.ConscryptEngineSocket" @kind object;
  #L27c342.  call temp:= `forName`(v1) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L27c348.  call temp:= `isAvailable`() @signature `Lorg/conscrypt/Conscrypt;.isAvailable:()Z` @kind static;
  #L27c34e.  v1:= temp;
  #L27c350.  if v1 != 0 then goto L27c356;
  #L27c354.  return v0 @kind object;
  #L27c356.  v1:= 1I;
  #L27c358.  call `setUseEngineSocketByDefault`(v1) @signature `Lorg/conscrypt/Conscrypt;.setUseEngineSocketByDefault:(Z)V` @kind static;
  #L27c35e.  v1:= new `c.a.g.b`;
  #L27c362.  call `<init>`(v1) @signature `Lc/a/g/b;.<init>:()V` @kind direct;
  #L27c368.  return v1 @kind object;
  #L27c36a.  return v0 @kind object;
  catch `java.lang.ClassNotFoundException` @[L27c33e..L27c368] goto L27c36a;
}
procedure `java.security.Provider` `e`(`c.a.g.b` v1 @kind this) @signature `Lc/a/g/b;.e:()Ljava/security/Provider;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L27c3bc.  v0:= new `org.conscrypt.OpenSSLProvider`;
  #L27c3c0.  call `<init>`(v0) @signature `Lorg/conscrypt/OpenSSLProvider;.<init>:()V` @kind direct;
  #L27c3c6.  return v0 @kind object;
}
procedure `java.lang.String` `a`(`c.a.g.b` v1 @kind this, `javax.net.ssl.SSLSocket` v2 @kind object) @signature `Lc/a/g/b;.a:(Ljavax/net/ssl/SSLSocket;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27c38c.  call temp:= `isConscrypt`(v2) @signature `Lorg/conscrypt/Conscrypt;.isConscrypt:(Ljavax/net/ssl/SSLSocket;)Z` @kind static;
  #L27c392.  v0:= temp;
  #L27c394.  if v0 == 0 then goto L27c3a2;
  #L27c398.  call temp:= `getApplicationProtocol`(v2) @signature `Lorg/conscrypt/Conscrypt;.getApplicationProtocol:(Ljavax/net/ssl/SSLSocket;)Ljava/lang/String;` @kind static;
  #L27c39e.  v2:= temp @kind object;
  #L27c3a0.  return v2 @kind object;
  #L27c3a2.  call temp:= `a`(v1, v2) @signature `Lc/a/g/f;.a:(Ljavax/net/ssl/SSLSocket;)Ljava/lang/String;` @kind super;
  #L27c3a8.  v2:= temp @kind object;
  #L27c3aa.  return v2 @kind object;
}
procedure `void` `a`(`c.a.g.b` v1 @kind this, `javax.net.ssl.SSLSocket` v2 @kind object, `java.lang.String` v3 @kind object, `java.util.List` v4 @kind object) @signature `Lc/a/g/b;.a:(Ljavax/net/ssl/SSLSocket;Ljava/lang/String;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27c438.  call temp:= `isConscrypt`(v2) @signature `Lorg/conscrypt/Conscrypt;.isConscrypt:(Ljavax/net/ssl/SSLSocket;)Z` @kind static;
  #L27c43e.  v0:= temp;
  #L27c440.  if v0 == 0 then goto L27c478;
  #L27c444.  if v3 == 0 then goto L27c456;
  #L27c448.  v0:= 1I;
  #L27c44a.  call `setUseSessionTickets`(v2, v0) @signature `Lorg/conscrypt/Conscrypt;.setUseSessionTickets:(Ljavax/net/ssl/SSLSocket;Z)V` @kind static;
  #L27c450.  call `setHostname`(v2, v3) @signature `Lorg/conscrypt/Conscrypt;.setHostname:(Ljavax/net/ssl/SSLSocket;Ljava/lang/String;)V` @kind static;
  #L27c456.  call temp:= `a`(v4) @signature `Lc/a/g/f;.a:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L27c45c.  v3:= temp @kind object;
  #L27c45e.  v4:= 0I;
  #L27c460.  v4:= new `java.lang.String`[v4];
  #L27c464.  call temp:= `toArray`(v3, v4) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L27c46a.  v3:= temp @kind object;
  #L27c46c.  v3:= (`java.lang.String`[]) v3 @kind object;
  #L27c470.  call `setApplicationProtocols`(v2, v3) @signature `Lorg/conscrypt/Conscrypt;.setApplicationProtocols:(Ljavax/net/ssl/SSLSocket;[Ljava/lang/String;)V` @kind static;
  #L27c476.  goto L27c47e;
  #L27c478.  call `a`(v1, v2, v3, v4) @signature `Lc/a/g/f;.a:(Ljavax/net/ssl/SSLSocket;Ljava/lang/String;Ljava/util/List;)V` @kind super;
  #L27c47e.  return @kind void;
}
procedure `javax.net.ssl.SSLContext` `n_`(`c.a.g.b` v3 @kind this) @signature `Lc/a/g/b;.n_:()Ljavax/net/ssl/SSLContext;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L27c3d8.  v0:= "TLS" @kind object;
  #L27c3dc.  call temp:= `e`(v3) @signature `Lc/a/g/b;.e:()Ljava/security/Provider;` @kind direct;
  #L27c3e2.  v1:= temp @kind object;
  #L27c3e4.  call temp:= `getInstance`(v0, v1) @signature `Ljavax/net/ssl/SSLContext;.getInstance:(Ljava/lang/String;Ljava/security/Provider;)Ljavax/net/ssl/SSLContext;` @kind static;
  #L27c3ea.  v0:= temp @kind object;
  #L27c3ec.  return v0 @kind object;
  #L27c3ee.  v0:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L27c3f0.  v1:= new `java.lang.IllegalStateException`;
  #L27c3f4.  v2:= "No TLS provider" @kind object;
  #L27c3f8.  call `<init>`(v1, v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L27c3fe.  throw v1;
  catch `java.security.NoSuchAlgorithmException` @[L27c3d8..L27c3ec] goto L27c3ee;
}
