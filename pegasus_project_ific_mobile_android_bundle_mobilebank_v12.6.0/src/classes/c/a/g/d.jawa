record `c.a.g.d` @kind class @AccessFlag  extends `c.a.g.f` @kind class {
  `java.lang.reflect.Method` `c.a.g.d.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Method` `c.a.g.d.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Method` `c.a.g.d.c` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `c.a.g.d.d` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `c.a.g.d.e` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`c.a.g.d` v0 @kind this, `java.lang.reflect.Method` v1 @kind object, `java.lang.reflect.Method` v2 @kind object, `java.lang.reflect.Method` v3 @kind object, `java.lang.Class` v4 @kind object, `java.lang.Class` v5 @kind object) @signature `Lc/a/g/d;.<init>:(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/Class;Ljava/lang/Class;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L27c904.  call `<init>`(v0) @signature `Lc/a/g/f;.<init>:()V` @kind direct;
  #L27c90a.  v0.`c.a.g.d.a` @type ^`java.lang.reflect.Method` := v1 @kind object;
  #L27c90e.  v0.`c.a.g.d.b` @type ^`java.lang.reflect.Method` := v2 @kind object;
  #L27c912.  v0.`c.a.g.d.c` @type ^`java.lang.reflect.Method` := v3 @kind object;
  #L27c916.  v0.`c.a.g.d.d` @type ^`java.lang.Class` := v4 @kind object;
  #L27c91a.  v0.`c.a.g.d.e` @type ^`java.lang.Class` := v5 @kind object;
  #L27c91e.  return @kind void;
}
procedure `c.a.g.f` `b`() @signature `Lc/a/g/d;.b:()Lc/a/g/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L27c768.  v0:= "org.eclipse.jetty.alpn.ALPN" @kind object;
  #L27c76c.  call temp:= `forName`(v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L27c772.  v1:= temp @kind object;
  #L27c774.  v2:= new `java.lang.StringBuilder`;
  #L27c778.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L27c77e.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L27c784.  v3:= "$Provider" @kind object;
  #L27c788.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L27c78e.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L27c794.  v2:= temp @kind object;
  #L27c796.  call temp:= `forName`(v2) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L27c79c.  v2:= temp @kind object;
  #L27c79e.  v3:= new `java.lang.StringBuilder`;
  #L27c7a2.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L27c7a8.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L27c7ae.  v4:= "$ClientProvider" @kind object;
  #L27c7b2.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L27c7b8.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L27c7be.  v3:= temp @kind object;
  #L27c7c0.  call temp:= `forName`(v3) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L27c7c6.  v8:= temp @kind object;
  #L27c7c8.  v3:= new `java.lang.StringBuilder`;
  #L27c7cc.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L27c7d2.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L27c7d8.  v0:= "$ServerProvider" @kind object;
  #L27c7dc.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L27c7e2.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L27c7e8.  v0:= temp @kind object;
  #L27c7ea.  call temp:= `forName`(v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L27c7f0.  v9:= temp @kind object;
  #L27c7f2.  v0:= "put" @kind object;
  #L27c7f6.  v3:= 2I;
  #L27c7f8.  v3:= new `java.lang.Class`[v3];
  #L27c7fc.  v4:= constclass @type ^`javax.net.ssl.SSLSocket` @kind object;
  #L27c800.  v5:= 0I;
  #L27c802.  v3[v5]:= v4 @kind object;
  #L27c806.  v4:= 1I;
  #L27c808.  v3[v4]:= v2 @kind object;
  #L27c80c.  call temp:= `getMethod`(v1, v0, v3) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L27c812.  v0:= temp @kind object;
  #L27c814.  v2:= "get" @kind object;
  #L27c818.  v3:= new `java.lang.Class`[v4];
  #L27c81c.  v6:= constclass @type ^`javax.net.ssl.SSLSocket` @kind object;
  #L27c820.  v3[v5]:= v6 @kind object;
  #L27c824.  call temp:= `getMethod`(v1, v2, v3) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L27c82a.  v6:= temp @kind object;
  #L27c82c.  v2:= "remove" @kind object;
  #L27c830.  v3:= new `java.lang.Class`[v4];
  #L27c834.  v4:= constclass @type ^`javax.net.ssl.SSLSocket` @kind object;
  #L27c838.  v3[v5]:= v4 @kind object;
  #L27c83c.  call temp:= `getMethod`(v1, v2, v3) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L27c842.  v7:= temp @kind object;
  #L27c844.  v1:= new `c.a.g.d`;
  #L27c848.  v4:= v1 @kind object;
  #L27c84a.  v5:= v0 @kind object;
  #L27c84c.  call `<init>`(v4, v5, v6, v7, v8, v9) @signature `Lc/a/g/d;.<init>:(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/Class;Ljava/lang/Class;)V` @kind direct;
  #L27c852.  return v1 @kind object;
  #L27c854.  v0:= 0I;
  #L27c856.  return v0 @kind object;
  catch `java.lang.ClassNotFoundException` @[L27c768..L27c852] goto L27c854;
  catch `java.lang.NoSuchMethodException` @[L27c768..L27c852] goto L27c854;
}
procedure `java.lang.String` `a`(`c.a.g.d` v3 @kind this, `javax.net.ssl.SSLSocket` v4 @kind object) @signature `Lc/a/g/d;.a:(Ljavax/net/ssl/SSLSocket;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L27c878.  v0:= v3.`c.a.g.d.b` @type ^`java.lang.reflect.Method` @kind object;
  #L27c87c.  v1:= 1I;
  #L27c87e.  v1:= new `java.lang.Object`[v1];
  #L27c882.  v2:= 0I;
  #L27c884.  v1[v2]:= v4 @kind object;
  #L27c888.  v4:= 0I;
  #L27c88a.  call temp:= `invoke`(v0, v4, v1) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L27c890.  v0:= temp @kind object;
  #L27c892.  call temp:= `getInvocationHandler`(v0) @signature `Ljava/lang/reflect/Proxy;.getInvocationHandler:(Ljava/lang/Object;)Ljava/lang/reflect/InvocationHandler;` @kind static;
  #L27c898.  v0:= temp @kind object;
  #L27c89a.  v0:= (`c.a.g.d$a`) v0 @kind object;
  #L27c89e.  v1:= v0.`c.a.g.d$a.a` @type ^`boolean` @kind boolean;
  #L27c8a2.  if v1 != 0 then goto L27c8c4;
  #L27c8a6.  v1:= v0.`c.a.g.d$a.b` @type ^`java.lang.String` @kind object;
  #L27c8aa.  if v1 != 0 then goto L27c8c4;
  #L27c8ae.  call temp:= `c`() @signature `Lc/a/g/f;.c:()Lc/a/g/f;` @kind static;
  #L27c8b4.  v0:= temp @kind object;
  #L27c8b6.  v1:= 4I;
  #L27c8b8.  v2:= "ALPN callback dropped: HTTP/2 is disabled. Is alpn-boot on the boot class path?" @kind object;
  #L27c8bc.  call `a`(v0, v1, v2, v4) @signature `Lc/a/g/f;.a:(ILjava/lang/String;Ljava/lang/Throwable;)V` @kind virtual;
  #L27c8c2.  return v4 @kind object;
  #L27c8c4.  v1:= v0.`c.a.g.d$a.a` @type ^`boolean` @kind boolean;
  #L27c8c8.  if v1 == 0 then goto L27c8ce;
  #L27c8cc.  goto L27c8d2;
  #L27c8ce.  v4:= v0.`c.a.g.d$a.b` @type ^`java.lang.String` @kind object;
  #L27c8d2.  return v4 @kind object;
  #L27c8d4.  v4:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L27c8d6.  v0:= "unable to get selected protocol" @kind object;
  #L27c8da.  call temp:= `a`(v0, v4) @signature `Lc/a/c;.a:(Ljava/lang/String;Ljava/lang/Exception;)Ljava/lang/AssertionError;` @kind static;
  #L27c8e0.  v4:= temp @kind object;
  #L27c8e2.  throw v4;
  catch `java.lang.reflect.InvocationTargetException` @[L27c878..L27c8d2] goto L27c8d4;
  catch `java.lang.IllegalAccessException` @[L27c878..L27c8d2] goto L27c8d4;
}
procedure `void` `a`(`c.a.g.d` v5 @kind this, `javax.net.ssl.SSLSocket` v6 @kind object, `java.lang.String` v7 @kind object, `java.util.List` v8 @kind object) @signature `Lc/a/g/d;.a:(Ljavax/net/ssl/SSLSocket;Ljava/lang/String;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L27c930.  call temp:= `a`(v8) @signature `Lc/a/g/d;.a:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L27c936.  v7:= temp @kind object;
  #L27c938.  v8:= constclass @type ^`c.a.g.f` @kind object;
  #L27c93c.  call temp:= `getClassLoader`(v8) @signature `Ljava/lang/Class;.getClassLoader:()Ljava/lang/ClassLoader;` @kind virtual;
  #L27c942.  v8:= temp @kind object;
  #L27c944.  v0:= 2I;
  #L27c946.  v1:= new `java.lang.Class`[v0];
  #L27c94a.  v2:= v5.`c.a.g.d.d` @type ^`java.lang.Class` @kind object;
  #L27c94e.  v3:= 0I;
  #L27c950.  v1[v3]:= v2 @kind object;
  #L27c954.  v2:= v5.`c.a.g.d.e` @type ^`java.lang.Class` @kind object;
  #L27c958.  v4:= 1I;
  #L27c95a.  v1[v4]:= v2 @kind object;
  #L27c95e.  v2:= new `c.a.g.d$a`;
  #L27c962.  call `<init>`(v2, v7) @signature `Lc/a/g/d$a;.<init>:(Ljava/util/List;)V` @kind direct;
  #L27c968.  call temp:= `newProxyInstance`(v8, v1, v2) @signature `Ljava/lang/reflect/Proxy;.newProxyInstance:(Ljava/lang/ClassLoader;[Ljava/lang/Class;Ljava/lang/reflect/InvocationHandler;)Ljava/lang/Object;` @kind static;
  #L27c96e.  v7:= temp @kind object;
  #L27c970.  v8:= v5.`c.a.g.d.a` @type ^`java.lang.reflect.Method` @kind object;
  #L27c974.  v1:= 0I;
  #L27c976.  v0:= new `java.lang.Object`[v0];
  #L27c97a.  v0[v3]:= v6 @kind object;
  #L27c97e.  v0[v4]:= v7 @kind object;
  #L27c982.  call temp:= `invoke`(v8, v1, v0) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L27c988.  return @kind void;
  #L27c98a.  v6:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L27c98c.  v7:= "unable to set alpn" @kind object;
  #L27c990.  call temp:= `a`(v7, v6) @signature `Lc/a/c;.a:(Ljava/lang/String;Ljava/lang/Exception;)Ljava/lang/AssertionError;` @kind static;
  #L27c996.  v6:= temp @kind object;
  #L27c998.  throw v6;
  catch `java.lang.reflect.InvocationTargetException` @[L27c938..L27c988] goto L27c98a;
  catch `java.lang.IllegalAccessException` @[L27c938..L27c988] goto L27c98a;
}
procedure `void` `b`(`c.a.g.d` v4 @kind this, `javax.net.ssl.SSLSocket` v5 @kind object) @signature `Lc/a/g/d;.b:(Ljavax/net/ssl/SSLSocket;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L27c9bc.  v0:= v4.`c.a.g.d.c` @type ^`java.lang.reflect.Method` @kind object;
  #L27c9c0.  v1:= 0I;
  #L27c9c2.  v2:= 1I;
  #L27c9c4.  v2:= new `java.lang.Object`[v2];
  #L27c9c8.  v3:= 0I;
  #L27c9ca.  v2[v3]:= v5 @kind object;
  #L27c9ce.  call temp:= `invoke`(v0, v1, v2) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L27c9d4.  return @kind void;
  #L27c9d6.  v5:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L27c9d8.  v0:= "unable to remove alpn" @kind object;
  #L27c9dc.  call temp:= `a`(v0, v5) @signature `Lc/a/c;.a:(Ljava/lang/String;Ljava/lang/Exception;)Ljava/lang/AssertionError;` @kind static;
  #L27c9e2.  v5:= temp @kind object;
  #L27c9e4.  throw v5;
  catch `java.lang.IllegalAccessException` @[L27c9bc..L27c9d4] goto L27c9d6;
  catch `java.lang.reflect.InvocationTargetException` @[L27c9bc..L27c9d4] goto L27c9d6;
}
