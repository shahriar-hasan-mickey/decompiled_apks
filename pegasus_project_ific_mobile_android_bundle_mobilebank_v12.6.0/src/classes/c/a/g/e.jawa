record `c.a.g.e` @kind class @AccessFlag  {
  `java.lang.Class` `c.a.g.e.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `c.a.g.e.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class`[] `c.a.g.e.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`c.a.g.e` v0 @kind this, `java.lang.Class` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.Class`[] v3 @kind object) @signature `Lc/a/g/e;.<init>:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L27cc80.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L27cc86.  v0.`c.a.g.e.a` @type ^`java.lang.Class` := v1 @kind object;
  #L27cc8a.  v0.`c.a.g.e.b` @type ^`java.lang.String` := v2 @kind object;
  #L27cc8e.  v0.`c.a.g.e.c` @type ^`java.lang.Class`[] := v3 @kind object;
  #L27cc92.  return @kind void;
}
procedure `java.lang.reflect.Method` `a`(`c.a.g.e` v3 @kind this, `java.lang.Class` v4 @kind object) @signature `Lc/a/g/e;.a:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L27cbe0.  v0:= v3.`c.a.g.e.b` @type ^`java.lang.String` @kind object;
  #L27cbe4.  v1:= 0I;
  #L27cbe6.  if v0 == 0 then goto L27cc22;
  #L27cbea.  v0:= v3.`c.a.g.e.b` @type ^`java.lang.String` @kind object;
  #L27cbee.  v2:= v3.`c.a.g.e.c` @type ^`java.lang.Class`[] @kind object;
  #L27cbf2.  call temp:= `a`(v4, v0, v2) @signature `Lc/a/g/e;.a:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind static;
  #L27cbf8.  v4:= temp @kind object;
  #L27cbfa.  if v4 == 0 then goto L27cc20;
  #L27cbfe.  v0:= v3.`c.a.g.e.a` @type ^`java.lang.Class` @kind object;
  #L27cc02.  if v0 == 0 then goto L27cc20;
  #L27cc06.  v0:= v3.`c.a.g.e.a` @type ^`java.lang.Class` @kind object;
  #L27cc0a.  call temp:= `getReturnType`(v4) @signature `Ljava/lang/reflect/Method;.getReturnType:()Ljava/lang/Class;` @kind virtual;
  #L27cc10.  v2:= temp @kind object;
  #L27cc12.  call temp:= `isAssignableFrom`(v0, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L27cc18.  v0:= temp;
  #L27cc1a.  if v0 != 0 then goto L27cc20;
  #L27cc1e.  goto L27cc22;
  #L27cc20.  v1:= v4 @kind object;
  #L27cc22.  return v1 @kind object;
}
procedure `java.lang.reflect.Method` `a`(`java.lang.Class` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.Class`[] v3 @kind object) @signature `Lc/a/g/e;.a:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L27cc34.  v0:= 0I;
  #L27cc36.  call temp:= `getMethod`(v1, v2, v3) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L27cc3c.  v1:= temp @kind object;
  #L27cc3e.  call temp:= `getModifiers`(v1) @signature `Ljava/lang/reflect/Method;.getModifiers:()I` @kind virtual;
  #L27cc44.  v2:= temp;
  #L27cc46.  v2:= v2 ^& 1;
  #L27cc4a.  if v2 != 0 then goto L27cc50;
  #L27cc4e.  v1:= v0 @kind object;
  #L27cc50.  return v1 @kind object;
  catch `java.lang.NoSuchMethodException` @[L27cc36..L27cc3e] goto L27cc4e;
  catch `java.lang.NoSuchMethodException` @[L27cc3e..L27cc46] goto L27cc50;
}
procedure `java.lang.Object` `a`(`c.a.g.e` v2 @kind this, `java.lang.Object` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `Lc/a/g/e;.a:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L27ca34.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L27ca3a.  v0:= temp @kind object;
  #L27ca3c.  call temp:= `a`(v2, v0) @signature `Lc/a/g/e;.a:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L27ca42.  v0:= temp @kind object;
  #L27ca44.  v1:= 0I;
  #L27ca46.  if v0 != 0 then goto L27ca4c;
  #L27ca4a.  return v1 @kind object;
  #L27ca4c.  call temp:= `invoke`(v0, v3, v4) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L27ca52.  v3:= temp @kind object;
  #L27ca54.  return v3 @kind object;
  #L27ca56.  return v1 @kind object;
  catch `java.lang.IllegalAccessException` @[L27ca4c..L27ca54] goto L27ca56;
}
procedure `boolean` `a`(`c.a.g.e` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lc/a/g/e;.a:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L27ca08.  call temp:= `getClass`(v1) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L27ca0e.  v1:= temp @kind object;
  #L27ca10.  call temp:= `a`(v0, v1) @signature `Lc/a/g/e;.a:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L27ca16.  v1:= temp @kind object;
  #L27ca18.  if v1 == 0 then goto L27ca20;
  #L27ca1c.  v1:= 1I;
  #L27ca1e.  goto L27ca22;
  #L27ca20.  v1:= 0I;
  #L27ca22.  return v1;
}
procedure `java.lang.Object` `b`(`c.a.g.e` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object`[] v3 @kind object) @signature `Lc/a/g/e;.b:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27ca78.  call temp:= `a`(v1, v2, v3) @signature `Lc/a/g/e;.a:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L27ca7e.  v2:= temp @kind object;
  #L27ca80.  return v2 @kind object;
  #L27ca82.  v2:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L27ca84.  call temp:= `getTargetException`(v2) @signature `Ljava/lang/reflect/InvocationTargetException;.getTargetException:()Ljava/lang/Throwable;` @kind virtual;
  #L27ca8a.  v2:= temp @kind object;
  #L27ca8c.  v3:= instanceof @variable v2 @type ^`java.lang.RuntimeException` @kind boolean;
  #L27ca90.  if v3 == 0 then goto L27ca9a;
  #L27ca94.  v2:= (`java.lang.RuntimeException`) v2 @kind object;
  #L27ca98.  throw v2;
  #L27ca9a.  v3:= new `java.lang.AssertionError`;
  #L27ca9e.  v0:= "Unexpected exception" @kind object;
  #L27caa2.  call `<init>`(v3, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L27caa8.  call temp:= `initCause`(v3, v2) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L27caae.  throw v3;
  catch `java.lang.reflect.InvocationTargetException` @[L27ca78..L27ca80] goto L27ca82;
}
procedure `java.lang.Object` `c`(`c.a.g.e` v3 @kind this, `java.lang.Object` v4 @kind object, `java.lang.Object`[] v5 @kind object) @signature `Lc/a/g/e;.c:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L27cad0.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L27cad6.  v0:= temp @kind object;
  #L27cad8.  call temp:= `a`(v3, v0) @signature `Lc/a/g/e;.a:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L27cade.  v0:= temp @kind object;
  #L27cae0.  if v0 != 0 then goto L27cb26;
  #L27cae4.  v5:= new `java.lang.AssertionError`;
  #L27cae8.  v0:= new `java.lang.StringBuilder`;
  #L27caec.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L27caf2.  v1:= "Method " @kind object;
  #L27caf6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L27cafc.  v1:= v3.`c.a.g.e.b` @type ^`java.lang.String` @kind object;
  #L27cb00.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L27cb06.  v1:= " not supported for object " @kind object;
  #L27cb0a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L27cb10.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L27cb16.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L27cb1c.  v4:= temp @kind object;
  #L27cb1e.  call `<init>`(v5, v4) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L27cb24.  throw v5;
  #L27cb26.  call temp:= `invoke`(v0, v4, v5) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L27cb2c.  v4:= temp @kind object;
  #L27cb2e.  return v4 @kind object;
  #L27cb30.  v4:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L27cb32.  v5:= new `java.lang.AssertionError`;
  #L27cb36.  v1:= new `java.lang.StringBuilder`;
  #L27cb3a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L27cb40.  v2:= "Unexpectedly could not call: " @kind object;
  #L27cb44.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L27cb4a.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L27cb50.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L27cb56.  v0:= temp @kind object;
  #L27cb58.  call `<init>`(v5, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L27cb5e.  call temp:= `initCause`(v5, v4) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L27cb64.  throw v5;
  catch `java.lang.IllegalAccessException` @[L27cb26..L27cb2e] goto L27cb30;
}
procedure `java.lang.Object` `d`(`c.a.g.e` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object`[] v3 @kind object) @signature `Lc/a/g/e;.d:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27cb88.  call temp:= `c`(v1, v2, v3) @signature `Lc/a/g/e;.c:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L27cb8e.  v2:= temp @kind object;
  #L27cb90.  return v2 @kind object;
  #L27cb92.  v2:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L27cb94.  call temp:= `getTargetException`(v2) @signature `Ljava/lang/reflect/InvocationTargetException;.getTargetException:()Ljava/lang/Throwable;` @kind virtual;
  #L27cb9a.  v2:= temp @kind object;
  #L27cb9c.  v3:= instanceof @variable v2 @type ^`java.lang.RuntimeException` @kind boolean;
  #L27cba0.  if v3 == 0 then goto L27cbaa;
  #L27cba4.  v2:= (`java.lang.RuntimeException`) v2 @kind object;
  #L27cba8.  throw v2;
  #L27cbaa.  v3:= new `java.lang.AssertionError`;
  #L27cbae.  v0:= "Unexpected exception" @kind object;
  #L27cbb2.  call `<init>`(v3, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L27cbb8.  call temp:= `initCause`(v3, v2) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L27cbbe.  throw v3;
  catch `java.lang.reflect.InvocationTargetException` @[L27cb88..L27cb90] goto L27cb92;
}
