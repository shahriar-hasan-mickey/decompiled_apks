record `c.a.g.a$c` @kind class @AccessFlag FINAL {
  `java.lang.reflect.Method` `c.a.g.a$c.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Method` `c.a.g.a$c.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Method` `c.a.g.a$c.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`c.a.g.a$c` v0 @kind this, `java.lang.reflect.Method` v1 @kind object, `java.lang.reflect.Method` v2 @kind object, `java.lang.reflect.Method` v3 @kind object) @signature `Lc/a/g/a$c;.<init>:(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L27bd50.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L27bd56.  v0.`c.a.g.a$c.a` @type ^`java.lang.reflect.Method` := v1 @kind object;
  #L27bd5a.  v0.`c.a.g.a$c.b` @type ^`java.lang.reflect.Method` := v2 @kind object;
  #L27bd5e.  v0.`c.a.g.a$c.c` @type ^`java.lang.reflect.Method` := v3 @kind object;
  #L27bd62.  return @kind void;
}
procedure `c.a.g.a$c` `a`() @signature `Lc/a/g/a$c;.a:()Lc/a/g/a$c;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L27bc7c.  v0:= 0I;
  #L27bc7e.  v1:= "dalvik.system.CloseGuard" @kind object;
  #L27bc82.  call temp:= `forName`(v1) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L27bc88.  v1:= temp @kind object;
  #L27bc8a.  v2:= "get" @kind object;
  #L27bc8e.  v3:= 0I;
  #L27bc90.  v4:= new `java.lang.Class`[v3];
  #L27bc94.  call temp:= `getMethod`(v1, v2, v4) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L27bc9a.  v2:= temp @kind object;
  #L27bc9c.  v4:= "open" @kind object;
  #L27bca0.  v5:= 1I;
  #L27bca2.  v5:= new `java.lang.Class`[v5];
  #L27bca6.  v6:= constclass @type ^`java.lang.String` @kind object;
  #L27bcaa.  v5[v3]:= v6 @kind object;
  #L27bcae.  call temp:= `getMethod`(v1, v4, v5) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L27bcb4.  v4:= temp @kind object;
  #L27bcb6.  v5:= "warnIfOpen" @kind object;
  #L27bcba.  v3:= new `java.lang.Class`[v3];
  #L27bcbe.  call temp:= `getMethod`(v1, v5, v3) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L27bcc4.  v1:= temp @kind object;
  #L27bcc6.  v0:= v2 @kind object;
  #L27bcc8.  goto L27bcce;
  #L27bcca.  v1:= v0 @kind object;
  #L27bccc.  v4:= v1 @kind object;
  #L27bcce.  v2:= new `c.a.g.a$c`;
  #L27bcd2.  call `<init>`(v2, v0, v4, v1) @signature `Lc/a/g/a$c;.<init>:(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;)V` @kind direct;
  #L27bcd8.  return v2 @kind object;
  catch `java.lang.Exception` @[L27bc7e..L27bcc6] goto L27bcca;
}
procedure `java.lang.Object` `a`(`c.a.g.a$c` v5 @kind this, `java.lang.String` v6 @kind object) @signature `Lc/a/g/a$c;.a:(Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L27bcfc.  v0:= v5.`c.a.g.a$c.a` @type ^`java.lang.reflect.Method` @kind object;
  #L27bd00.  v1:= 0I;
  #L27bd02.  if v0 == 0 then goto L27bd2e;
  #L27bd06.  v0:= v5.`c.a.g.a$c.a` @type ^`java.lang.reflect.Method` @kind object;
  #L27bd0a.  v2:= 0I;
  #L27bd0c.  v3:= new `java.lang.Object`[v2];
  #L27bd10.  call temp:= `invoke`(v0, v1, v3) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L27bd16.  v0:= temp @kind object;
  #L27bd18.  v3:= v5.`c.a.g.a$c.b` @type ^`java.lang.reflect.Method` @kind object;
  #L27bd1c.  v4:= 1I;
  #L27bd1e.  v4:= new `java.lang.Object`[v4];
  #L27bd22.  v4[v2]:= v6 @kind object;
  #L27bd26.  call temp:= `invoke`(v3, v0, v4) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L27bd2c.  return v0 @kind object;
  #L27bd2e.  return v1 @kind object;
  catch `java.lang.Exception` @[L27bd06..L27bd2c] goto L27bd2e;
}
procedure `boolean` `a`(`c.a.g.a$c` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lc/a/g/a$c;.a:(Ljava/lang/Object;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L27bc44.  v0:= 0I;
  #L27bc46.  if v4 == 0 then goto L27bc5a;
  #L27bc4a.  v1:= v3.`c.a.g.a$c.c` @type ^`java.lang.reflect.Method` @kind object;
  #L27bc4e.  v2:= new `java.lang.Object`[v0];
  #L27bc52.  call temp:= `invoke`(v1, v4, v2) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L27bc58.  v0:= 1I;
  #L27bc5a.  return v0;
  catch `java.lang.Exception` @[L27bc4a..L27bc58] goto L27bc5a;
}
