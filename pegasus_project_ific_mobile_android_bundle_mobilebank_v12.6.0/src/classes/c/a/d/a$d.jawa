record `c.a.d.a$d` @kind class @AccessFlag FINAL extends `d.r` @kind interface {
  `c.a.d.a` `c.a.d.a$d.a` @AccessFlag FINAL_SYNTHETIC;
  `d.i` `c.a.d.a$d.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `c.a.d.a$d.c` @AccessFlag PRIVATE;
  `long` `c.a.d.a$d.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`c.a.d.a$d` v1 @kind this, `c.a.d.a` v2 @kind object, `long` v3 ) @signature `Lc/a/d/a$d;.<init>:(Lc/a/d/a;J)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L274528.  v1.`c.a.d.a$d.a` @type ^`c.a.d.a` := v2 @kind object;
  #L27452c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L274532.  v2:= new `d.i`;
  #L274536.  v0:= v1.`c.a.d.a$d.a` @type ^`c.a.d.a` @kind object;
  #L27453a.  v0:= v0.`c.a.d.a.d` @type ^`d.d` @kind object;
  #L27453e.  call temp:= `a`(v0) @signature `Ld/d;.a:()Ld/t;` @kind interface;
  #L274544.  v0:= temp @kind object;
  #L274546.  call `<init>`(v2, v0) @signature `Ld/i;.<init>:(Ld/t;)V` @kind direct;
  #L27454c.  v1.`c.a.d.a$d.b` @type ^`d.i` := v2 @kind object;
  #L274550.  v1.`c.a.d.a$d.d` @type ^`long` := v3 @kind wide;
  #L274554.  return @kind void;
}
procedure `d.t` `a`(`c.a.d.a$d` v1 @kind this) @signature `Lc/a/d/a$d;.a:()Ld/t;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L274510.  v0:= v1.`c.a.d.a$d.b` @type ^`d.i` @kind object;
  #L274514.  return v0 @kind object;
}
procedure `void` `a_`(`c.a.d.a$d` v6 @kind this, `d.c` v7 @kind object, `long` v8 ) @signature `Lc/a/d/a$d;.a_:(Ld/c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L274568.  v0:= v6.`c.a.d.a$d.c` @type ^`boolean` @kind boolean;
  #L27456c.  if v0 == 0 then goto L274580;
  #L274570.  v7:= new `java.lang.IllegalStateException`;
  #L274574.  v8:= "closed" @kind object;
  #L274578.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L27457e.  throw v7;
  #L274580.  call temp:= `b`(v7) @signature `Ld/c;.b:()J` @kind virtual;
  #L274586.  v0:= temp @kind wide;
  #L274588.  v2:= 0L;
  #L27458c.  v4:= v8 @kind wide;
  #L27458e.  call `a`(v0, v2, v4) @signature `Lc/a/c;.a:(JJJ)V` @kind static;
  #L274594.  v0:= v6.`c.a.d.a$d.d` @type ^`long` @kind wide;
  #L274598.  v2:= lcmp(v8, v0);
  #L27459c.  if v2 <= 0 then goto L2745e2;
  #L2745a0.  v7:= new `java.net.ProtocolException`;
  #L2745a4.  v0:= new `java.lang.StringBuilder`;
  #L2745a8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2745ae.  v1:= "expected " @kind object;
  #L2745b2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2745b8.  v1:= v6.`c.a.d.a$d.d` @type ^`long` @kind wide;
  #L2745bc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2745c2.  v1:= " bytes but received " @kind object;
  #L2745c6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2745cc.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2745d2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2745d8.  v8:= temp @kind object;
  #L2745da.  call `<init>`(v7, v8) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2745e0.  throw v7;
  #L2745e2.  v0:= v6.`c.a.d.a$d.a` @type ^`c.a.d.a` @kind object;
  #L2745e6.  v0:= v0.`c.a.d.a.d` @type ^`d.d` @kind object;
  #L2745ea.  call `a_`(v0, v7, v8) @signature `Ld/d;.a_:(Ld/c;J)V` @kind interface;
  #L2745f0.  v0:= v6.`c.a.d.a$d.d` @type ^`long` @kind wide;
  #L2745f4.  v2:= v0 - v8 @kind long;
  #L2745f8.  v6.`c.a.d.a$d.d` @type ^`long` := v2 @kind wide;
  #L2745fc.  return @kind void;
}
procedure `void` `close`(`c.a.d.a$d` v5 @kind this) @signature `Lc/a/d/a$d;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L274610.  v0:= v5.`c.a.d.a$d.c` @type ^`boolean` @kind boolean;
  #L274614.  if v0 == 0 then goto L27461a;
  #L274618.  return @kind void;
  #L27461a.  v0:= 1I;
  #L27461c.  v5.`c.a.d.a$d.c` @type ^`boolean` := v0 @kind boolean;
  #L274620.  v0:= v5.`c.a.d.a$d.d` @type ^`long` @kind wide;
  #L274624.  v2:= 0L;
  #L274628.  v4:= lcmp(v0, v2);
  #L27462c.  if v4 <= 0 then goto L274640;
  #L274630.  v0:= new `java.net.ProtocolException`;
  #L274634.  v1:= "unexpected end of stream" @kind object;
  #L274638.  call `<init>`(v0, v1) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L27463e.  throw v0;
  #L274640.  v0:= v5.`c.a.d.a$d.a` @type ^`c.a.d.a` @kind object;
  #L274644.  v1:= v5.`c.a.d.a$d.b` @type ^`d.i` @kind object;
  #L274648.  call `a`(v0, v1) @signature `Lc/a/d/a;.a:(Ld/i;)V` @kind virtual;
  #L27464e.  v0:= v5.`c.a.d.a$d.a` @type ^`c.a.d.a` @kind object;
  #L274652.  v1:= 3I;
  #L274654.  v0.`c.a.d.a.e` @type ^`int` := v1;
  #L274658.  return @kind void;
}
procedure `void` `flush`(`c.a.d.a$d` v1 @kind this) @signature `Lc/a/d/a$d;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27466c.  v0:= v1.`c.a.d.a$d.c` @type ^`boolean` @kind boolean;
  #L274670.  if v0 == 0 then goto L274676;
  #L274674.  return @kind void;
  #L274676.  v0:= v1.`c.a.d.a$d.a` @type ^`c.a.d.a` @kind object;
  #L27467a.  v0:= v0.`c.a.d.a.d` @type ^`d.d` @kind object;
  #L27467e.  call `flush`(v0) @signature `Ld/d;.flush:()V` @kind interface;
  #L274684.  return @kind void;
}
