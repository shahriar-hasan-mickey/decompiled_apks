record `c.a.d.a$f` @kind class @AccessFlag  extends `c.a.d.a$a` @kind class {
  `c.a.d.a` `c.a.d.a$f.e` @AccessFlag FINAL_SYNTHETIC;
  `boolean` `c.a.d.a$f.f` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`c.a.d.a$f` v1 @kind this, `c.a.d.a` v2 @kind object) @signature `Lc/a/d/a$f;.<init>:(Lc/a/d/a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L274884.  v1.`c.a.d.a$f.e` @type ^`c.a.d.a` := v2 @kind object;
  #L274888.  v0:= 0I;
  #L27488a.  call `<init>`(v1, v2, v0) @signature `Lc/a/d/a$a;.<init>:(Lc/a/d/a;Lc/a/d/a$1;)V` @kind direct;
  #L274890.  return @kind void;
}
procedure `long` `a`(`c.a.d.a$f` v3 @kind this, `d.c` v4 @kind object, `long` v5 ) @signature `Lc/a/d/a$f;.a:(Ld/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2747f0.  v0:= 0L;
  #L2747f4.  v2:= lcmp(v5, v0);
  #L2747f8.  if v2 >= 0 then goto L27482a;
  #L2747fc.  v4:= new `java.lang.IllegalArgumentException`;
  #L274800.  v0:= new `java.lang.StringBuilder`;
  #L274804.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L27480a.  v1:= "byteCount < 0: " @kind object;
  #L27480e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L274814.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L27481a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L274820.  v5:= temp @kind object;
  #L274822.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L274828.  throw v4;
  #L27482a.  v0:= v3.`c.a.d.a$f.b` @type ^`boolean` @kind boolean;
  #L27482e.  if v0 == 0 then goto L274842;
  #L274832.  v4:= new `java.lang.IllegalStateException`;
  #L274836.  v5:= "closed" @kind object;
  #L27483a.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L274840.  throw v4;
  #L274842.  v0:= v3.`c.a.d.a$f.f` @type ^`boolean` @kind boolean;
  #L274846.  v1:= -1L;
  #L27484a.  if v0 == 0 then goto L274850;
  #L27484e.  return v1 @kind wide;
  #L274850.  call temp:= `a`(v3, v4, v5) @signature `Lc/a/d/a$a;.a:(Ld/c;J)J` @kind super;
  #L274856.  v4:= temp @kind wide;
  #L274858.  v6:= lcmp(v4, v1);
  #L27485c.  if v6 != 0 then goto L274870;
  #L274860.  v4:= 1I;
  #L274862.  v3.`c.a.d.a$f.f` @type ^`boolean` := v4 @kind boolean;
  #L274866.  v5:= 0I;
  #L274868.  call `a`(v3, v4, v5) @signature `Lc/a/d/a$f;.a:(ZLjava/io/IOException;)V` @kind virtual;
  #L27486e.  return v1 @kind wide;
  #L274870.  return v4 @kind wide;
}
procedure `void` `close`(`c.a.d.a$f` v2 @kind this) @signature `Lc/a/d/a$f;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2748a4.  v0:= v2.`c.a.d.a$f.b` @type ^`boolean` @kind boolean;
  #L2748a8.  if v0 == 0 then goto L2748ae;
  #L2748ac.  return @kind void;
  #L2748ae.  v0:= v2.`c.a.d.a$f.f` @type ^`boolean` @kind boolean;
  #L2748b2.  if v0 != 0 then goto L2748c0;
  #L2748b6.  v0:= 0I;
  #L2748b8.  v1:= 0I;
  #L2748ba.  call `a`(v2, v0, v1) @signature `Lc/a/d/a$f;.a:(ZLjava/io/IOException;)V` @kind virtual;
  #L2748c0.  v0:= 1I;
  #L2748c2.  v2.`c.a.d.a$f.b` @type ^`boolean` := v0 @kind boolean;
  #L2748c6.  return @kind void;
}
