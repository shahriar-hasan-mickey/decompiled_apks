record `c.a.d.a$c` @kind class @AccessFlag  extends `c.a.d.a$a` @kind class {
  `c.a.d.a` `c.a.d.a$c.e` @AccessFlag FINAL_SYNTHETIC;
  `c.r` `c.a.d.a$c.f` @AccessFlag PRIVATE_FINAL;
  `long` `c.a.d.a$c.g` @AccessFlag PRIVATE;
  `boolean` `c.a.d.a$c.h` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`c.a.d.a$c` v2 @kind this, `c.a.d.a` v3 @kind object, `c.r` v4 @kind object) @signature `Lc/a/d/a$c;.<init>:(Lc/a/d/a;Lc/r;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L27435c.  v2.`c.a.d.a$c.e` @type ^`c.a.d.a` := v3 @kind object;
  #L274360.  v0:= 0I;
  #L274362.  call `<init>`(v2, v3, v0) @signature `Lc/a/d/a$a;.<init>:(Lc/a/d/a;Lc/a/d/a$1;)V` @kind direct;
  #L274368.  v0:= -1L;
  #L27436c.  v2.`c.a.d.a$c.g` @type ^`long` := v0 @kind wide;
  #L274370.  v3:= 1I;
  #L274372.  v2.`c.a.d.a$c.h` @type ^`boolean` := v3 @kind boolean;
  #L274376.  v2.`c.a.d.a$c.f` @type ^`c.r` := v4 @kind object;
  #L27437a.  return @kind void;
}
procedure `void` `b`(`c.a.d.a$c` v6 @kind this) @signature `Lc/a/d/a$c;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L27438c.  v0:= v6.`c.a.d.a$c.g` @type ^`long` @kind wide;
  #L274390.  v2:= -1L;
  #L274394.  v4:= lcmp(v0, v2);
  #L274398.  if v4 == 0 then goto L2743aa;
  #L27439c.  v0:= v6.`c.a.d.a$c.e` @type ^`c.a.d.a` @kind object;
  #L2743a0.  v0:= v0.`c.a.d.a.c` @type ^`d.e` @kind object;
  #L2743a4.  call temp:= `o`(v0) @signature `Ld/e;.o:()Ljava/lang/String;` @kind interface;
  #L2743aa.  v0:= v6.`c.a.d.a$c.e` @type ^`c.a.d.a` @kind object;
  #L2743ae.  v0:= v0.`c.a.d.a.c` @type ^`d.e` @kind object;
  #L2743b2.  call temp:= `l`(v0) @signature `Ld/e;.l:()J` @kind interface;
  #L2743b8.  v0:= temp @kind wide;
  #L2743ba.  v6.`c.a.d.a$c.g` @type ^`long` := v0 @kind wide;
  #L2743be.  v0:= v6.`c.a.d.a$c.e` @type ^`c.a.d.a` @kind object;
  #L2743c2.  v0:= v0.`c.a.d.a.c` @type ^`d.e` @kind object;
  #L2743c6.  call temp:= `o`(v0) @signature `Ld/e;.o:()Ljava/lang/String;` @kind interface;
  #L2743cc.  v0:= temp @kind object;
  #L2743ce.  call temp:= `trim`(v0) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L2743d4.  v0:= temp @kind object;
  #L2743d6.  v1:= v6.`c.a.d.a$c.g` @type ^`long` @kind wide;
  #L2743da.  v3:= 0L;
  #L2743de.  v5:= lcmp(v1, v3);
  #L2743e2.  if v5 < 0 then goto L274448;
  #L2743e6.  call temp:= `isEmpty`(v0) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L2743ec.  v1:= temp;
  #L2743ee.  if v1 != 0 then goto L274404;
  #L2743f2.  v1:= ";" @kind object;
  #L2743f6.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L2743fc.  v1:= temp;
  #L2743fe.  if v1 != 0 then goto L274404;
  #L274402.  goto L274448;
  #L274404.  v0:= v6.`c.a.d.a$c.g` @type ^`long` @kind wide;
  #L274408.  v2:= lcmp(v0, v3);
  #L27440c.  if v2 != 0 then goto L274446;
  #L274410.  v0:= 0I;
  #L274412.  v6.`c.a.d.a$c.h` @type ^`boolean` := v0 @kind boolean;
  #L274416.  v0:= v6.`c.a.d.a$c.e` @type ^`c.a.d.a` @kind object;
  #L27441a.  v0:= v0.`c.a.d.a.a` @type ^`c.u` @kind object;
  #L27441e.  call temp:= `g`(v0) @signature `Lc/u;.g:()Lc/l;` @kind virtual;
  #L274424.  v0:= temp @kind object;
  #L274426.  v1:= v6.`c.a.d.a$c.f` @type ^`c.r` @kind object;
  #L27442a.  v2:= v6.`c.a.d.a$c.e` @type ^`c.a.d.a` @kind object;
  #L27442e.  call temp:= `c`(v2) @signature `Lc/a/d/a;.c:()Lc/q;` @kind virtual;
  #L274434.  v2:= temp @kind object;
  #L274436.  call `a`(v0, v1, v2) @signature `Lc/a/c/e;.a:(Lc/l;Lc/r;Lc/q;)V` @kind static;
  #L27443c.  v0:= 1I;
  #L27443e.  v1:= 0I;
  #L274440.  call `a`(v6, v0, v1) @signature `Lc/a/d/a$c;.a:(ZLjava/io/IOException;)V` @kind virtual;
  #L274446.  return @kind void;
  #L274448.  v1:= new `java.net.ProtocolException`;
  #L27444c.  v2:= new `java.lang.StringBuilder`;
  #L274450.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L274456.  v3:= "expected chunk size and optional extensions but was \"" @kind object;
  #L27445a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L274460.  v3:= v6.`c.a.d.a$c.g` @type ^`long` @kind wide;
  #L274464.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L27446a.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L274470.  v0:= "\"" @kind object;
  #L274474.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L27447a.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L274480.  v0:= temp @kind object;
  #L274482.  call `<init>`(v1, v0) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L274488.  throw v1;
  #L27448a.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L27448c.  v1:= new `java.net.ProtocolException`;
  #L274490.  call temp:= `getMessage`(v0) @signature `Ljava/lang/NumberFormatException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L274496.  v0:= temp @kind object;
  #L274498.  call `<init>`(v1, v0) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L27449e.  throw v1;
  catch `java.lang.NumberFormatException` @[L2743aa..L2743fe] goto L27448a;
  catch `java.lang.NumberFormatException` @[L274448..L27448a] goto L27448a;
}
procedure `long` `a`(`c.a.d.a$c` v7 @kind this, `d.c` v8 @kind object, `long` v9 ) @signature `Lc/a/d/a$c;.a:(Ld/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L274280.  v0:= 0L;
  #L274284.  v2:= lcmp(v9, v0);
  #L274288.  if v2 >= 0 then goto L2742ba;
  #L27428c.  v8:= new `java.lang.IllegalArgumentException`;
  #L274290.  v0:= new `java.lang.StringBuilder`;
  #L274294.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L27429a.  v1:= "byteCount < 0: " @kind object;
  #L27429e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2742a4.  call temp:= `append`(v0, v9) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2742aa.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2742b0.  v9:= temp @kind object;
  #L2742b2.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2742b8.  throw v8;
  #L2742ba.  v2:= v7.`c.a.d.a$c.b` @type ^`boolean` @kind boolean;
  #L2742be.  if v2 == 0 then goto L2742d2;
  #L2742c2.  v8:= new `java.lang.IllegalStateException`;
  #L2742c6.  v9:= "closed" @kind object;
  #L2742ca.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2742d0.  throw v8;
  #L2742d2.  v2:= v7.`c.a.d.a$c.h` @type ^`boolean` @kind boolean;
  #L2742d6.  v3:= -1L;
  #L2742da.  if v2 != 0 then goto L2742e0;
  #L2742de.  return v3 @kind wide;
  #L2742e0.  v5:= v7.`c.a.d.a$c.g` @type ^`long` @kind wide;
  #L2742e4.  v2:= lcmp(v5, v0);
  #L2742e8.  if v2 == 0 then goto L2742f8;
  #L2742ec.  v0:= v7.`c.a.d.a$c.g` @type ^`long` @kind wide;
  #L2742f0.  v2:= lcmp(v0, v3);
  #L2742f4.  if v2 != 0 then goto L274308;
  #L2742f8.  call `b`(v7) @signature `Lc/a/d/a$c;.b:()V` @kind direct;
  #L2742fe.  v0:= v7.`c.a.d.a$c.h` @type ^`boolean` @kind boolean;
  #L274302.  if v0 != 0 then goto L274308;
  #L274306.  return v3 @kind wide;
  #L274308.  v0:= v7.`c.a.d.a$c.g` @type ^`long` @kind wide;
  #L27430c.  call temp:= `min`(v9, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L274312.  v9:= temp @kind wide;
  #L274314.  call temp:= `a`(v7, v8, v9) @signature `Lc/a/d/a$a;.a:(Ld/c;J)J` @kind super;
  #L27431a.  v8:= temp @kind wide;
  #L27431c.  v10:= lcmp(v8, v3);
  #L274320.  if v10 != 0 then goto L27433c;
  #L274324.  v8:= new `java.net.ProtocolException`;
  #L274328.  v9:= "unexpected end of stream" @kind object;
  #L27432c.  call `<init>`(v8, v9) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L274332.  v9:= 0I;
  #L274334.  call `a`(v7, v9, v8) @signature `Lc/a/d/a$c;.a:(ZLjava/io/IOException;)V` @kind virtual;
  #L27433a.  throw v8;
  #L27433c.  v0:= v7.`c.a.d.a$c.g` @type ^`long` @kind wide;
  #L274340.  v2:= v0 - v8 @kind long;
  #L274344.  v7.`c.a.d.a$c.g` @type ^`long` := v2 @kind wide;
  #L274348.  return v8 @kind wide;
}
procedure `void` `close`(`c.a.d.a$c` v2 @kind this) @signature `Lc/a/d/a$c;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2744c8.  v0:= v2.`c.a.d.a$c.b` @type ^`boolean` @kind boolean;
  #L2744cc.  if v0 == 0 then goto L2744d2;
  #L2744d0.  return @kind void;
  #L2744d2.  v0:= v2.`c.a.d.a$c.h` @type ^`boolean` @kind boolean;
  #L2744d6.  if v0 == 0 then goto L2744f8;
  #L2744da.  v0:= 100I;
  #L2744de.  v1:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L2744e2.  call temp:= `a`(v2, v0, v1) @signature `Lc/a/c;.a:(Ld/s;ILjava/util/concurrent/TimeUnit;)Z` @kind static;
  #L2744e8.  v0:= temp;
  #L2744ea.  if v0 != 0 then goto L2744f8;
  #L2744ee.  v0:= 0I;
  #L2744f0.  v1:= 0I;
  #L2744f2.  call `a`(v2, v0, v1) @signature `Lc/a/d/a$c;.a:(ZLjava/io/IOException;)V` @kind virtual;
  #L2744f8.  v0:= 1I;
  #L2744fa.  v2.`c.a.d.a$c.b` @type ^`boolean` := v0 @kind boolean;
  #L2744fe.  return @kind void;
}
