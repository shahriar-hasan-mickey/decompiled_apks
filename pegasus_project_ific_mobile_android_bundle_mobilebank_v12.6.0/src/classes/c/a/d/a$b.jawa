record `c.a.d.a$b` @kind class @AccessFlag FINAL extends `d.r` @kind interface {
  `c.a.d.a` `c.a.d.a$b.a` @AccessFlag FINAL_SYNTHETIC;
  `d.i` `c.a.d.a$b.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `c.a.d.a$b.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`c.a.d.a$b` v1 @kind this, `c.a.d.a` v2 @kind object) @signature `Lc/a/d/a$b;.<init>:(Lc/a/d/a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L274114.  v1.`c.a.d.a$b.a` @type ^`c.a.d.a` := v2 @kind object;
  #L274118.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L27411e.  v2:= new `d.i`;
  #L274122.  v0:= v1.`c.a.d.a$b.a` @type ^`c.a.d.a` @kind object;
  #L274126.  v0:= v0.`c.a.d.a.d` @type ^`d.d` @kind object;
  #L27412a.  call temp:= `a`(v0) @signature `Ld/d;.a:()Ld/t;` @kind interface;
  #L274130.  v0:= temp @kind object;
  #L274132.  call `<init>`(v2, v0) @signature `Ld/i;.<init>:(Ld/t;)V` @kind direct;
  #L274138.  v1.`c.a.d.a$b.b` @type ^`d.i` := v2 @kind object;
  #L27413c.  return @kind void;
}
procedure `d.t` `a`(`c.a.d.a$b` v1 @kind this) @signature `Lc/a/d/a$b;.a:()Ld/t;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2740fc.  v0:= v1.`c.a.d.a$b.b` @type ^`d.i` @kind object;
  #L274100.  return v0 @kind object;
}
procedure `void` `a_`(`c.a.d.a$b` v3 @kind this, `d.c` v4 @kind object, `long` v5 ) @signature `Lc/a/d/a$b;.a_:(Ld/c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L274150.  v0:= v3.`c.a.d.a$b.c` @type ^`boolean` @kind boolean;
  #L274154.  if v0 == 0 then goto L274168;
  #L274158.  v4:= new `java.lang.IllegalStateException`;
  #L27415c.  v5:= "closed" @kind object;
  #L274160.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L274166.  throw v4;
  #L274168.  v0:= 0L;
  #L27416c.  v2:= lcmp(v5, v0);
  #L274170.  if v2 != 0 then goto L274176;
  #L274174.  return @kind void;
  #L274176.  v0:= v3.`c.a.d.a$b.a` @type ^`c.a.d.a` @kind object;
  #L27417a.  v0:= v0.`c.a.d.a.d` @type ^`d.d` @kind object;
  #L27417e.  call temp:= `k`(v0, v5) @signature `Ld/d;.k:(J)Ld/d;` @kind interface;
  #L274184.  v0:= v3.`c.a.d.a$b.a` @type ^`c.a.d.a` @kind object;
  #L274188.  v0:= v0.`c.a.d.a.d` @type ^`d.d` @kind object;
  #L27418c.  v1:= "\r\n" @kind object;
  #L274190.  call temp:= `b`(v0, v1) @signature `Ld/d;.b:(Ljava/lang/String;)Ld/d;` @kind interface;
  #L274196.  v0:= v3.`c.a.d.a$b.a` @type ^`c.a.d.a` @kind object;
  #L27419a.  v0:= v0.`c.a.d.a.d` @type ^`d.d` @kind object;
  #L27419e.  call `a_`(v0, v4, v5) @signature `Ld/d;.a_:(Ld/c;J)V` @kind interface;
  #L2741a4.  v4:= v3.`c.a.d.a$b.a` @type ^`c.a.d.a` @kind object;
  #L2741a8.  v4:= v4.`c.a.d.a.d` @type ^`d.d` @kind object;
  #L2741ac.  v5:= "\r\n" @kind object;
  #L2741b0.  call temp:= `b`(v4, v5) @signature `Ld/d;.b:(Ljava/lang/String;)Ld/d;` @kind interface;
  #L2741b6.  return @kind void;
}
procedure `void` `close`(`c.a.d.a$b` v2 @kind this) @signature `Lc/a/d/a$b;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2741c8.  @monitorenter v2
  #L2741ca.  v0:= v2.`c.a.d.a$b.c` @type ^`boolean` @kind boolean;
  #L2741ce.  if v0 == 0 then goto L2741d6;
  #L2741d2.  @monitorexit v2
  #L2741d4.  return @kind void;
  #L2741d6.  v0:= 1I;
  #L2741d8.  v2.`c.a.d.a$b.c` @type ^`boolean` := v0 @kind boolean;
  #L2741dc.  v0:= v2.`c.a.d.a$b.a` @type ^`c.a.d.a` @kind object;
  #L2741e0.  v0:= v0.`c.a.d.a.d` @type ^`d.d` @kind object;
  #L2741e4.  v1:= "0\r\n\r\n" @kind object;
  #L2741e8.  call temp:= `b`(v0, v1) @signature `Ld/d;.b:(Ljava/lang/String;)Ld/d;` @kind interface;
  #L2741ee.  v0:= v2.`c.a.d.a$b.a` @type ^`c.a.d.a` @kind object;
  #L2741f2.  v1:= v2.`c.a.d.a$b.b` @type ^`d.i` @kind object;
  #L2741f6.  call `a`(v0, v1) @signature `Lc/a/d/a;.a:(Ld/i;)V` @kind virtual;
  #L2741fc.  v0:= v2.`c.a.d.a$b.a` @type ^`c.a.d.a` @kind object;
  #L274200.  v1:= 3I;
  #L274202.  v0.`c.a.d.a.e` @type ^`int` := v1;
  #L274206.  @monitorexit v2
  #L274208.  return @kind void;
  #L27420a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L27420c.  @monitorexit v2
  #L27420e.  throw v0;
  catch `java.lang.Throwable` @[L2741ca..L2741ce] goto L27420a;
  catch `java.lang.Throwable` @[L2741d8..L274206] goto L27420a;
}
procedure `void` `flush`(`c.a.d.a$b` v1 @kind this) @signature `Lc/a/d/a$b;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L274234.  @monitorenter v1
  #L274236.  v0:= v1.`c.a.d.a$b.c` @type ^`boolean` @kind boolean;
  #L27423a.  if v0 == 0 then goto L274242;
  #L27423e.  @monitorexit v1
  #L274240.  return @kind void;
  #L274242.  v0:= v1.`c.a.d.a$b.a` @type ^`c.a.d.a` @kind object;
  #L274246.  v0:= v0.`c.a.d.a.d` @type ^`d.d` @kind object;
  #L27424a.  call `flush`(v0) @signature `Ld/d;.flush:()V` @kind interface;
  #L274250.  @monitorexit v1
  #L274252.  return @kind void;
  #L274254.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L274256.  @monitorexit v1
  #L274258.  throw v0;
  catch `java.lang.Throwable` @[L274236..L27423a] goto L274254;
  catch `java.lang.Throwable` @[L274242..L274250] goto L274254;
}
