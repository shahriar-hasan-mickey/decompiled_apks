record `c.a.a` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
global `c.a.a` `@@c.a.a.a` @AccessFlag PUBLIC_STATIC;
procedure `void` `<init>`(`c.a.a` v0 @kind this) @signature `Lc/a/a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L26f0c0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L26f0c6.  return @kind void;
}
procedure `int` `a`(`c.z$a` v0 @kind object) @signature `Lc/a/a;.a:(Lc/z$a;)I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `c.a.b.c` `a`(`c.i` v0 @kind object, `c.a` v1 @kind object, `c.a.b.g` v2 @kind object, `c.ab` v3 @kind object) @signature `Lc/a/a;.a:(Lc/i;Lc/a;Lc/a/b/g;Lc/ab;)Lc/a/b/c;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `c.a.b.d` `a`(`c.i` v0 @kind object) @signature `Lc/a/a;.a:(Lc/i;)Lc/a/b/d;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.net.Socket` `a`(`c.i` v0 @kind object, `c.a` v1 @kind object, `c.a.b.g` v2 @kind object) @signature `Lc/a/a;.a:(Lc/i;Lc/a;Lc/a/b/g;)Ljava/net/Socket;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `a`(`c.j` v0 @kind object, `javax.net.ssl.SSLSocket` v1 @kind object, `boolean` v2 ) @signature `Lc/a/a;.a:(Lc/j;Ljavax/net/ssl/SSLSocket;Z)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `a`(`c.q$a` v0 @kind object, `java.lang.String` v1 @kind object) @signature `Lc/a/a;.a:(Lc/q$a;Ljava/lang/String;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `a`(`c.q$a` v0 @kind object, `java.lang.String` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lc/a/a;.a:(Lc/q$a;Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `a`(`c.a` v0 @kind object, `c.a` v1 @kind object) @signature `Lc/a/a;.a:(Lc/a;Lc/a;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `a`(`c.i` v0 @kind object, `c.a.b.c` v1 @kind object) @signature `Lc/a/a;.a:(Lc/i;Lc/a/b/c;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `b`(`c.i` v0 @kind object, `c.a.b.c` v1 @kind object) @signature `Lc/a/a;.b:(Lc/i;Lc/a/b/c;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
