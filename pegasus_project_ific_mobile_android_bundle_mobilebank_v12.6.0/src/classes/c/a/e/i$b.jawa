record `c.a.e.i$b` @kind class @AccessFlag FINAL extends `d.s` @kind interface {
  `boolean` `c.a.e.i$b.a` @AccessFlag ;
  `boolean` `c.a.e.i$b.b` @AccessFlag ;
  `c.a.e.i` `c.a.e.i$b.d` @AccessFlag FINAL_SYNTHETIC;
  `d.c` `c.a.e.i$b.e` @AccessFlag PRIVATE_FINAL;
  `d.c` `c.a.e.i$b.f` @AccessFlag PRIVATE_FINAL;
  `long` `c.a.e.i$b.g` @AccessFlag PRIVATE_FINAL;
}
global `boolean` `@@c.a.e.i$b.c` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lc/a/e/i$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L279b04.  v0:= constclass @type ^`c.a.e.i` @kind object;
  #L279b08.  return @kind void;
}
procedure `void` `<init>`(`c.a.e.i$b` v0 @kind this, `c.a.e.i` v1 @kind object, `long` v2 ) @signature `Lc/a/e/i$b;.<init>:(Lc/a/e/i;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L279b1c.  v0.`c.a.e.i$b.d` @type ^`c.a.e.i` := v1 @kind object;
  #L279b20.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L279b26.  v1:= new `d.c`;
  #L279b2a.  call `<init>`(v1) @signature `Ld/c;.<init>:()V` @kind direct;
  #L279b30.  v0.`c.a.e.i$b.e` @type ^`d.c` := v1 @kind object;
  #L279b34.  v1:= new `d.c`;
  #L279b38.  call `<init>`(v1) @signature `Ld/c;.<init>:()V` @kind direct;
  #L279b3e.  v0.`c.a.e.i$b.f` @type ^`d.c` := v1 @kind object;
  #L279b42.  v0.`c.a.e.i$b.g` @type ^`long` := v2 @kind wide;
  #L279b46.  return @kind void;
}
procedure `void` `b`(`c.a.e.i$b` v5 @kind this) @signature `Lc/a/e/i$b;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L279c88.  v0:= v5.`c.a.e.i$b.d` @type ^`c.a.e.i` @kind object;
  #L279c8c.  v0:= v0.`c.a.e.i.f` @type ^`c.a.e.i$c` @kind object;
  #L279c90.  call `c`(v0) @signature `Lc/a/e/i$c;.c:()V` @kind virtual;
  #L279c96.  v0:= v5.`c.a.e.i$b.f` @type ^`d.c` @kind object;
  #L279c9a.  call temp:= `b`(v0) @signature `Ld/c;.b:()J` @kind virtual;
  #L279ca0.  v0:= temp @kind wide;
  #L279ca2.  v2:= 0L;
  #L279ca6.  v4:= lcmp(v0, v2);
  #L279caa.  if v4 != 0 then goto L279cd6;
  #L279cae.  v0:= v5.`c.a.e.i$b.b` @type ^`boolean` @kind boolean;
  #L279cb2.  if v0 != 0 then goto L279cd6;
  #L279cb6.  v0:= v5.`c.a.e.i$b.a` @type ^`boolean` @kind boolean;
  #L279cba.  if v0 != 0 then goto L279cd6;
  #L279cbe.  v0:= v5.`c.a.e.i$b.d` @type ^`c.a.e.i` @kind object;
  #L279cc2.  v0:= v0.`c.a.e.i.h` @type ^`c.a.e.b` @kind object;
  #L279cc6.  if v0 != 0 then goto L279cd6;
  #L279cca.  v0:= v5.`c.a.e.i$b.d` @type ^`c.a.e.i` @kind object;
  #L279cce.  call `l`(v0) @signature `Lc/a/e/i;.l:()V` @kind virtual;
  #L279cd4.  goto L279c96;
  #L279cd6.  v0:= v5.`c.a.e.i$b.d` @type ^`c.a.e.i` @kind object;
  #L279cda.  v0:= v0.`c.a.e.i.f` @type ^`c.a.e.i$c` @kind object;
  #L279cde.  call `b`(v0) @signature `Lc/a/e/i$c;.b:()V` @kind virtual;
  #L279ce4.  return @kind void;
  #L279ce6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L279ce8.  v1:= v5.`c.a.e.i$b.d` @type ^`c.a.e.i` @kind object;
  #L279cec.  v1:= v1.`c.a.e.i.f` @type ^`c.a.e.i$c` @kind object;
  #L279cf0.  call `b`(v1) @signature `Lc/a/e/i$c;.b:()V` @kind virtual;
  #L279cf6.  throw v0;
  catch `java.lang.Throwable` @[L279c96..L279cd4] goto L279ce6;
}
procedure `void` `c`(`c.a.e.i$b` v2 @kind this) @signature `Lc/a/e/i$b;.c:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L279d14.  v0:= v2.`c.a.e.i$b.a` @type ^`boolean` @kind boolean;
  #L279d18.  if v0 == 0 then goto L279d2c;
  #L279d1c.  v0:= new `java.io.IOException`;
  #L279d20.  v1:= "stream closed" @kind object;
  #L279d24.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L279d2a.  throw v0;
  #L279d2c.  v0:= v2.`c.a.e.i$b.d` @type ^`c.a.e.i` @kind object;
  #L279d30.  v0:= v0.`c.a.e.i.h` @type ^`c.a.e.b` @kind object;
  #L279d34.  if v0 == 0 then goto L279d4c;
  #L279d38.  v0:= new `c.a.e.n`;
  #L279d3c.  v1:= v2.`c.a.e.i$b.d` @type ^`c.a.e.i` @kind object;
  #L279d40.  v1:= v1.`c.a.e.i.h` @type ^`c.a.e.b` @kind object;
  #L279d44.  call `<init>`(v0, v1) @signature `Lc/a/e/n;.<init>:(Lc/a/e/b;)V` @kind direct;
  #L279d4a.  throw v0;
  #L279d4c.  return @kind void;
}
procedure `long` `a`(`c.a.e.i$b` v7 @kind this, `d.c` v8 @kind object, `long` v9 ) @signature `Lc/a/e/i$b;.a:(Ld/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L279960.  v0:= 0L;
  #L279964.  v2:= lcmp(v9, v0);
  #L279968.  if v2 >= 0 then goto L27999a;
  #L27996c.  v8:= new `java.lang.IllegalArgumentException`;
  #L279970.  v0:= new `java.lang.StringBuilder`;
  #L279974.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L27997a.  v1:= "byteCount < 0: " @kind object;
  #L27997e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L279984.  call temp:= `append`(v0, v9) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L27998a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L279990.  v9:= temp @kind object;
  #L279992.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L279998.  throw v8;
  #L27999a.  v2:= v7.`c.a.e.i$b.d` @type ^`c.a.e.i` @kind object;
  #L27999e.  @monitorenter v2
  #L2799a0.  call `b`(v7) @signature `Lc/a/e/i$b;.b:()V` @kind direct;
  #L2799a6.  call `c`(v7) @signature `Lc/a/e/i$b;.c:()V` @kind direct;
  #L2799ac.  v3:= v7.`c.a.e.i$b.f` @type ^`d.c` @kind object;
  #L2799b0.  call temp:= `b`(v3) @signature `Ld/c;.b:()J` @kind virtual;
  #L2799b6.  v3:= temp @kind wide;
  #L2799b8.  v5:= lcmp(v3, v0);
  #L2799bc.  if v5 != 0 then goto L2799c8;
  #L2799c0.  v8:= -1L;
  #L2799c4.  @monitorexit v2
  #L2799c6.  return v8 @kind wide;
  #L2799c8.  v3:= v7.`c.a.e.i$b.f` @type ^`d.c` @kind object;
  #L2799cc.  v4:= v7.`c.a.e.i$b.f` @type ^`d.c` @kind object;
  #L2799d0.  call temp:= `b`(v4) @signature `Ld/c;.b:()J` @kind virtual;
  #L2799d6.  v4:= temp @kind wide;
  #L2799d8.  call temp:= `min`(v9, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2799de.  v9:= temp @kind wide;
  #L2799e0.  call temp:= `a`(v3, v8, v9) @signature `Ld/c;.a:(Ld/c;J)J` @kind virtual;
  #L2799e6.  v8:= temp @kind wide;
  #L2799e8.  v10:= v7.`c.a.e.i$b.d` @type ^`c.a.e.i` @kind object;
  #L2799ec.  v3:= v10.`c.a.e.i.a` @type ^`long` @kind wide;
  #L2799f0.  v5:= 0I;
  #L2799f2.  v5:= v3 + v8 @kind long;
  #L2799f6.  v10.`c.a.e.i.a` @type ^`long` := v5 @kind wide;
  #L2799fa.  v10:= v7.`c.a.e.i$b.d` @type ^`c.a.e.i` @kind object;
  #L2799fe.  v3:= v10.`c.a.e.i.a` @type ^`long` @kind wide;
  #L279a02.  v10:= v7.`c.a.e.i$b.d` @type ^`c.a.e.i` @kind object;
  #L279a06.  v10:= v10.`c.a.e.i.d` @type ^`c.a.e.g` @kind object;
  #L279a0a.  v10:= v10.`c.a.e.g.k` @type ^`c.a.e.m` @kind object;
  #L279a0e.  call temp:= `d`(v10) @signature `Lc/a/e/m;.d:()I` @kind virtual;
  #L279a14.  v10:= temp;
  #L279a16.  v10:= v10 / 2;
  #L279a1a.  v5:= (`long`) v10 @kind i2l;
  #L279a1c.  v10:= lcmp(v3, v5);
  #L279a20.  if v10 < 0 then goto L279a4a;
  #L279a24.  v10:= v7.`c.a.e.i$b.d` @type ^`c.a.e.i` @kind object;
  #L279a28.  v10:= v10.`c.a.e.i.d` @type ^`c.a.e.g` @kind object;
  #L279a2c.  v3:= v7.`c.a.e.i$b.d` @type ^`c.a.e.i` @kind object;
  #L279a30.  v3:= v3.`c.a.e.i.c` @type ^`int`;
  #L279a34.  v4:= v7.`c.a.e.i$b.d` @type ^`c.a.e.i` @kind object;
  #L279a38.  v4:= v4.`c.a.e.i.a` @type ^`long` @kind wide;
  #L279a3c.  call `a`(v10, v3, v4) @signature `Lc/a/e/g;.a:(IJ)V` @kind virtual;
  #L279a42.  v10:= v7.`c.a.e.i$b.d` @type ^`c.a.e.i` @kind object;
  #L279a46.  v10.`c.a.e.i.a` @type ^`long` := v0 @kind wide;
  #L279a4a.  @monitorexit v2
  #L279a4c.  v10:= v7.`c.a.e.i$b.d` @type ^`c.a.e.i` @kind object;
  #L279a50.  v10:= v10.`c.a.e.i.d` @type ^`c.a.e.g` @kind object;
  #L279a54.  @monitorenter v10
  #L279a56.  v2:= v7.`c.a.e.i$b.d` @type ^`c.a.e.i` @kind object;
  #L279a5a.  v2:= v2.`c.a.e.i.d` @type ^`c.a.e.g` @kind object;
  #L279a5e.  v3:= v2.`c.a.e.g.i` @type ^`long` @kind wide;
  #L279a62.  v5:= 0I;
  #L279a64.  v5:= v3 + v8 @kind long;
  #L279a68.  v2.`c.a.e.g.i` @type ^`long` := v5 @kind wide;
  #L279a6c.  v2:= v7.`c.a.e.i$b.d` @type ^`c.a.e.i` @kind object;
  #L279a70.  v2:= v2.`c.a.e.i.d` @type ^`c.a.e.g` @kind object;
  #L279a74.  v2:= v2.`c.a.e.g.i` @type ^`long` @kind wide;
  #L279a78.  v4:= v7.`c.a.e.i$b.d` @type ^`c.a.e.i` @kind object;
  #L279a7c.  v4:= v4.`c.a.e.i.d` @type ^`c.a.e.g` @kind object;
  #L279a80.  v4:= v4.`c.a.e.g.k` @type ^`c.a.e.m` @kind object;
  #L279a84.  call temp:= `d`(v4) @signature `Lc/a/e/m;.d:()I` @kind virtual;
  #L279a8a.  v4:= temp;
  #L279a8c.  v4:= v4 / 2;
  #L279a90.  v4:= (`long`) v4 @kind i2l;
  #L279a92.  v6:= lcmp(v2, v4);
  #L279a96.  if v6 < 0 then goto L279ac2;
  #L279a9a.  v2:= v7.`c.a.e.i$b.d` @type ^`c.a.e.i` @kind object;
  #L279a9e.  v2:= v2.`c.a.e.i.d` @type ^`c.a.e.g` @kind object;
  #L279aa2.  v3:= 0I;
  #L279aa4.  v4:= v7.`c.a.e.i$b.d` @type ^`c.a.e.i` @kind object;
  #L279aa8.  v4:= v4.`c.a.e.i.d` @type ^`c.a.e.g` @kind object;
  #L279aac.  v4:= v4.`c.a.e.g.i` @type ^`long` @kind wide;
  #L279ab0.  call `a`(v2, v3, v4) @signature `Lc/a/e/g;.a:(IJ)V` @kind virtual;
  #L279ab6.  v2:= v7.`c.a.e.i$b.d` @type ^`c.a.e.i` @kind object;
  #L279aba.  v2:= v2.`c.a.e.i.d` @type ^`c.a.e.g` @kind object;
  #L279abe.  v2.`c.a.e.g.i` @type ^`long` := v0 @kind wide;
  #L279ac2.  @monitorexit v10
  #L279ac4.  return v8 @kind wide;
  #L279ac6.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L279ac8.  @monitorexit v10
  #L279aca.  throw v8;
  #L279acc.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L279ace.  @monitorexit v2
  #L279ad0.  throw v8;
  catch `java.lang.Throwable` @[L2799a0..L279a4c] goto L279acc;
  catch `java.lang.Throwable` @[L279a56..L279aca] goto L279ac6;
  catch `java.lang.Throwable` @[L279ace..L279ad0] goto L279acc;
}
procedure `d.t` `a`(`c.a.e.i$b` v1 @kind this) @signature `Lc/a/e/i$b;.a:()Ld/t;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L279944.  v0:= v1.`c.a.e.i$b.d` @type ^`c.a.e.i` @kind object;
  #L279948.  v0:= v0.`c.a.e.i.f` @type ^`c.a.e.i$c` @kind object;
  #L27994c.  return v0 @kind object;
}
procedure `void` `a`(`c.a.e.i$b` v9 @kind this, `d.e` v10 @kind object, `long` v11 ) @signature `Lc/a/e/i$b;.a:(Ld/e;J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L279b58.  v0:= `@@c.a.e.i$b.c` @type ^`boolean` @kind boolean;
  #L279b5c.  if v0 != 0 then goto L279b7c;
  #L279b60.  v0:= v9.`c.a.e.i$b.d` @type ^`c.a.e.i` @kind object;
  #L279b64.  call temp:= `holdsLock`(v0) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L279b6a.  v0:= temp;
  #L279b6c.  if v0 == 0 then goto L279b7c;
  #L279b70.  v10:= new `java.lang.AssertionError`;
  #L279b74.  call `<init>`(v10) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L279b7a.  throw v10;
  #L279b7c.  v0:= 0L;
  #L279b80.  v2:= lcmp(v11, v0);
  #L279b84.  if v2 <= 0 then goto L279c56;
  #L279b88.  v2:= v9.`c.a.e.i$b.d` @type ^`c.a.e.i` @kind object;
  #L279b8c.  @monitorenter v2
  #L279b8e.  v3:= v9.`c.a.e.i$b.b` @type ^`boolean` @kind boolean;
  #L279b92.  v4:= v9.`c.a.e.i$b.f` @type ^`d.c` @kind object;
  #L279b96.  call temp:= `b`(v4) @signature `Ld/c;.b:()J` @kind virtual;
  #L279b9c.  v4:= temp @kind wide;
  #L279b9e.  v6:= 0I;
  #L279ba0.  v6:= v11 + v4 @kind long;
  #L279ba4.  v4:= v9.`c.a.e.i$b.g` @type ^`long` @kind wide;
  #L279ba8.  v8:= lcmp(v6, v4);
  #L279bac.  v4:= 0I;
  #L279bae.  v5:= 1I;
  #L279bb0.  if v8 <= 0 then goto L279bb8;
  #L279bb4.  v6:= 1I;
  #L279bb6.  goto L279bba;
  #L279bb8.  v6:= 0I;
  #L279bba.  @monitorexit v2
  #L279bbc.  if v6 == 0 then goto L279bd6;
  #L279bc0.  call `h`(v10, v11) @signature `Ld/e;.h:(J)V` @kind interface;
  #L279bc6.  v10:= v9.`c.a.e.i$b.d` @type ^`c.a.e.i` @kind object;
  #L279bca.  v11:= `@@c.a.e.b.d` @type ^`c.a.e.b` @kind object;
  #L279bce.  call `b`(v10, v11) @signature `Lc/a/e/i;.b:(Lc/a/e/b;)V` @kind virtual;
  #L279bd4.  return @kind void;
  #L279bd6.  if v3 == 0 then goto L279be2;
  #L279bda.  call `h`(v10, v11) @signature `Ld/e;.h:(J)V` @kind interface;
  #L279be0.  return @kind void;
  #L279be2.  v2:= v9.`c.a.e.i$b.e` @type ^`d.c` @kind object;
  #L279be6.  call temp:= `a`(v10, v2, v11) @signature `Ld/e;.a:(Ld/c;J)J` @kind interface;
  #L279bec.  v2:= temp @kind wide;
  #L279bee.  v6:= -1L;
  #L279bf2.  v8:= lcmp(v2, v6);
  #L279bf6.  if v8 != 0 then goto L279c06;
  #L279bfa.  v10:= new `java.io.EOFException`;
  #L279bfe.  call `<init>`(v10) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L279c04.  throw v10;
  #L279c06.  v6:= 0I;
  #L279c08.  v6:= v11 - v2 @kind long;
  #L279c0c.  v11:= v9.`c.a.e.i$b.d` @type ^`c.a.e.i` @kind object;
  #L279c10.  @monitorenter v11
  #L279c12.  v12:= v9.`c.a.e.i$b.f` @type ^`d.c` @kind object;
  #L279c16.  call temp:= `b`(v12) @signature `Ld/c;.b:()J` @kind virtual;
  #L279c1c.  v2:= temp @kind wide;
  #L279c1e.  v12:= lcmp(v2, v0);
  #L279c22.  if v12 != 0 then goto L279c28;
  #L279c26.  v4:= 1I;
  #L279c28.  v12:= v9.`c.a.e.i$b.f` @type ^`d.c` @kind object;
  #L279c2c.  v0:= v9.`c.a.e.i$b.e` @type ^`d.c` @kind object;
  #L279c30.  call temp:= `a`(v12, v0) @signature `Ld/c;.a:(Ld/s;)J` @kind virtual;
  #L279c36.  if v4 == 0 then goto L279c44;
  #L279c3a.  v12:= v9.`c.a.e.i$b.d` @type ^`c.a.e.i` @kind object;
  #L279c3e.  call `notifyAll`(v12) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L279c44.  @monitorexit v11
  #L279c46.  v11:= v6 @kind wide;
  #L279c48.  goto L279b7c;
  #L279c4a.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L279c4c.  @monitorexit v11
  #L279c4e.  throw v10;
  #L279c50.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L279c52.  @monitorexit v2
  #L279c54.  throw v10;
  #L279c56.  return @kind void;
  catch `java.lang.Throwable` @[L279b8e..L279bbc] goto L279c50;
  catch `java.lang.Throwable` @[L279c12..L279c4e] goto L279c4a;
  catch `java.lang.Throwable` @[L279c52..L279c54] goto L279c50;
}
procedure `void` `close`(`c.a.e.i$b` v2 @kind this) @signature `Lc/a/e/i$b;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L279d60.  v0:= v2.`c.a.e.i$b.d` @type ^`c.a.e.i` @kind object;
  #L279d64.  @monitorenter v0
  #L279d66.  v1:= 1I;
  #L279d68.  v2.`c.a.e.i$b.a` @type ^`boolean` := v1 @kind boolean;
  #L279d6c.  v1:= v2.`c.a.e.i$b.f` @type ^`d.c` @kind object;
  #L279d70.  call `q`(v1) @signature `Ld/c;.q:()V` @kind virtual;
  #L279d76.  v1:= v2.`c.a.e.i$b.d` @type ^`c.a.e.i` @kind object;
  #L279d7a.  call `notifyAll`(v1) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L279d80.  @monitorexit v0
  #L279d82.  v0:= v2.`c.a.e.i$b.d` @type ^`c.a.e.i` @kind object;
  #L279d86.  call `j`(v0) @signature `Lc/a/e/i;.j:()V` @kind virtual;
  #L279d8c.  return @kind void;
  #L279d8e.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L279d90.  @monitorexit v0
  #L279d92.  throw v1;
  catch `java.lang.Throwable` @[L279d68..L279d82] goto L279d8e;
  catch `java.lang.Throwable` @[L279d90..L279d92] goto L279d8e;
}
