record `c.a.e.f$a` @kind class @AccessFlag  extends `d.h` @kind class {
  `boolean` `c.a.e.f$a.a` @AccessFlag ;
  `long` `c.a.e.f$a.b` @AccessFlag ;
  `c.a.e.f` `c.a.e.f$a.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`c.a.e.f$a` v0 @kind this, `c.a.e.f` v1 @kind object, `d.s` v2 @kind object) @signature `Lc/a/e/f$a;.<init>:(Lc/a/e/f;Ld/s;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L276b7c.  v0.`c.a.e.f$a.c` @type ^`c.a.e.f` := v1 @kind object;
  #L276b80.  call `<init>`(v0, v2) @signature `Ld/h;.<init>:(Ld/s;)V` @kind direct;
  #L276b86.  v1:= 0I;
  #L276b88.  v0.`c.a.e.f$a.a` @type ^`boolean` := v1 @kind boolean;
  #L276b8c.  v1:= 0L;
  #L276b90.  v0.`c.a.e.f$a.b` @type ^`long` := v1 @kind wide;
  #L276b94.  return @kind void;
}
procedure `void` `a`(`c.a.e.f$a` v7 @kind this, `java.io.IOException` v8 @kind object) @signature `Lc/a/e/f$a;.a:(Ljava/io/IOException;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L276ba8.  v0:= v7.`c.a.e.f$a.a` @type ^`boolean` @kind boolean;
  #L276bac.  if v0 == 0 then goto L276bb2;
  #L276bb0.  return @kind void;
  #L276bb2.  v0:= 1I;
  #L276bb4.  v7.`c.a.e.f$a.a` @type ^`boolean` := v0 @kind boolean;
  #L276bb8.  v0:= v7.`c.a.e.f$a.c` @type ^`c.a.e.f` @kind object;
  #L276bbc.  v1:= v0.`c.a.e.f.a` @type ^`c.a.b.g` @kind object;
  #L276bc0.  v2:= 0I;
  #L276bc2.  v3:= v7.`c.a.e.f$a.c` @type ^`c.a.e.f` @kind object;
  #L276bc6.  v4:= v7.`c.a.e.f$a.b` @type ^`long` @kind wide;
  #L276bca.  v6:= v8 @kind object;
  #L276bcc.  call `a`(v1, v2, v3, v4, v6) @signature `Lc/a/b/g;.a:(ZLc/a/c/c;JLjava/io/IOException;)V` @kind virtual;
  #L276bd2.  return @kind void;
}
procedure `long` `a`(`c.a.e.f$a` v4 @kind this, `d.c` v5 @kind object, `long` v6 ) @signature `Lc/a/e/f$a;.a:(Ld/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L276b24.  call temp:= `b`(v4) @signature `Lc/a/e/f$a;.b:()Ld/s;` @kind virtual;
  #L276b2a.  v0:= temp @kind object;
  #L276b2c.  call temp:= `a`(v0, v5, v6) @signature `Ld/s;.a:(Ld/c;J)J` @kind interface;
  #L276b32.  v5:= temp @kind wide;
  #L276b34.  v0:= 0L;
  #L276b38.  v7:= lcmp(v5, v0);
  #L276b3c.  if v7 <= 0 then goto L276b4e;
  #L276b40.  v0:= v4.`c.a.e.f$a.b` @type ^`long` @kind wide;
  #L276b44.  v7:= 0I;
  #L276b46.  v2:= v0 + v5 @kind long;
  #L276b4a.  v4.`c.a.e.f$a.b` @type ^`long` := v2 @kind wide;
  #L276b4e.  return v5 @kind wide;
  #L276b50.  v5:= Exception @type ^`java.io.IOException` @kind object;
  #L276b52.  call `a`(v4, v5) @signature `Lc/a/e/f$a;.a:(Ljava/io/IOException;)V` @kind direct;
  #L276b58.  throw v5;
  catch `java.io.IOException` @[L276b24..L276b4e] goto L276b50;
}
procedure `void` `close`(`c.a.e.f$a` v1 @kind this) @signature `Lc/a/e/f$a;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L276be4.  call `close`(v1) @signature `Ld/h;.close:()V` @kind super;
  #L276bea.  v0:= 0I;
  #L276bec.  call `a`(v1, v0) @signature `Lc/a/e/f$a;.a:(Ljava/io/IOException;)V` @kind direct;
  #L276bf2.  return @kind void;
}
