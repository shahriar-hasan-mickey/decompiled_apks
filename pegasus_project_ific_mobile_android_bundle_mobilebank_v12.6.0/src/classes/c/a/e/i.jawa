record `c.a.e.i` @kind class @AccessFlag PUBLIC_FINAL {
  `long` `c.a.e.i.a` @AccessFlag ;
  `long` `c.a.e.i.b` @AccessFlag ;
  `int` `c.a.e.i.c` @AccessFlag FINAL;
  `c.a.e.g` `c.a.e.i.d` @AccessFlag FINAL;
  `c.a.e.i$a` `c.a.e.i.e` @AccessFlag FINAL;
  `c.a.e.i$c` `c.a.e.i.f` @AccessFlag FINAL;
  `c.a.e.i$c` `c.a.e.i.g` @AccessFlag FINAL;
  `c.a.e.b` `c.a.e.i.h` @AccessFlag ;
  `java.util.List` `c.a.e.i.j` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `c.a.e.i.k` @AccessFlag PRIVATE;
  `boolean` `c.a.e.i.l` @AccessFlag PRIVATE;
  `c.a.e.i$b` `c.a.e.i.m` @AccessFlag PRIVATE_FINAL;
}
global `boolean` `@@c.a.e.i.i` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lc/a/e/i;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;

  #L27a104.  return @kind void;
}
procedure `void` `<init>`(`c.a.e.i` v2 @kind this, `int` v3 , `c.a.e.g` v4 @kind object, `boolean` v5 , `boolean` v6 , `java.util.List` v7 @kind object) @signature `Lc/a/e/i;.<init>:(ILc/a/e/g;ZZLjava/util/List;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L27a118.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L27a11e.  v0:= 0L;
  #L27a122.  v2.`c.a.e.i.a` @type ^`long` := v0 @kind wide;
  #L27a126.  v0:= new `c.a.e.i$c`;
  #L27a12a.  call `<init>`(v0, v2) @signature `Lc/a/e/i$c;.<init>:(Lc/a/e/i;)V` @kind direct;
  #L27a130.  v2.`c.a.e.i.f` @type ^`c.a.e.i$c` := v0 @kind object;
  #L27a134.  v0:= new `c.a.e.i$c`;
  #L27a138.  call `<init>`(v0, v2) @signature `Lc/a/e/i$c;.<init>:(Lc/a/e/i;)V` @kind direct;
  #L27a13e.  v2.`c.a.e.i.g` @type ^`c.a.e.i$c` := v0 @kind object;
  #L27a142.  v0:= 0I;
  #L27a144.  v2.`c.a.e.i.h` @type ^`c.a.e.b` := v0 @kind object;
  #L27a148.  if v4 != 0 then goto L27a15c;
  #L27a14c.  v3:= new `java.lang.NullPointerException`;
  #L27a150.  v4:= "connection == null" @kind object;
  #L27a154.  call `<init>`(v3, v4) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L27a15a.  throw v3;
  #L27a15c.  if v7 != 0 then goto L27a170;
  #L27a160.  v3:= new `java.lang.NullPointerException`;
  #L27a164.  v4:= "requestHeaders == null" @kind object;
  #L27a168.  call `<init>`(v3, v4) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L27a16e.  throw v3;
  #L27a170.  v2.`c.a.e.i.c` @type ^`int` := v3;
  #L27a174.  v2.`c.a.e.i.d` @type ^`c.a.e.g` := v4 @kind object;
  #L27a178.  v3:= v4.`c.a.e.g.l` @type ^`c.a.e.m` @kind object;
  #L27a17c.  call temp:= `d`(v3) @signature `Lc/a/e/m;.d:()I` @kind virtual;
  #L27a182.  v3:= temp;
  #L27a184.  v0:= (`long`) v3 @kind i2l;
  #L27a186.  v2.`c.a.e.i.b` @type ^`long` := v0 @kind wide;
  #L27a18a.  v3:= new `c.a.e.i$b`;
  #L27a18e.  v4:= v4.`c.a.e.g.k` @type ^`c.a.e.m` @kind object;
  #L27a192.  call temp:= `d`(v4) @signature `Lc/a/e/m;.d:()I` @kind virtual;
  #L27a198.  v4:= temp;
  #L27a19a.  v0:= (`long`) v4 @kind i2l;
  #L27a19c.  call `<init>`(v3, v2, v0) @signature `Lc/a/e/i$b;.<init>:(Lc/a/e/i;J)V` @kind direct;
  #L27a1a2.  v2.`c.a.e.i.m` @type ^`c.a.e.i$b` := v3 @kind object;
  #L27a1a6.  v3:= new `c.a.e.i$a`;
  #L27a1aa.  call `<init>`(v3, v2) @signature `Lc/a/e/i$a;.<init>:(Lc/a/e/i;)V` @kind direct;
  #L27a1b0.  v2.`c.a.e.i.e` @type ^`c.a.e.i$a` := v3 @kind object;
  #L27a1b4.  v3:= v2.`c.a.e.i.m` @type ^`c.a.e.i$b` @kind object;
  #L27a1b8.  v3.`c.a.e.i$b.b` @type ^`boolean` := v6 @kind boolean;
  #L27a1bc.  v3:= v2.`c.a.e.i.e` @type ^`c.a.e.i$a` @kind object;
  #L27a1c0.  v3.`c.a.e.i$a.b` @type ^`boolean` := v5 @kind boolean;
  #L27a1c4.  v2.`c.a.e.i.j` @type ^`java.util.List` := v7 @kind object;
  #L27a1c8.  return @kind void;
}
procedure `boolean` `d`(`c.a.e.i` v2 @kind this, `c.a.e.b` v3 @kind object) @signature `Lc/a/e/i;.d:(Lc/a/e/b;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L279f00.  v0:= `@@c.a.e.i.i` @type ^`boolean` @kind boolean;
  #L279f04.  if v0 != 0 then goto L279f20;
  #L279f08.  call temp:= `holdsLock`(v2) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L279f0e.  v0:= temp;
  #L279f10.  if v0 == 0 then goto L279f20;
  #L279f14.  v3:= new `java.lang.AssertionError`;
  #L279f18.  call `<init>`(v3) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L279f1e.  throw v3;
  #L279f20.  @monitorenter v2
  #L279f22.  v0:= v2.`c.a.e.i.h` @type ^`c.a.e.b` @kind object;
  #L279f26.  v1:= 0I;
  #L279f28.  if v0 == 0 then goto L279f30;
  #L279f2c.  @monitorexit v2
  #L279f2e.  return v1;
  #L279f30.  v0:= v2.`c.a.e.i.m` @type ^`c.a.e.i$b` @kind object;
  #L279f34.  v0:= v0.`c.a.e.i$b.b` @type ^`boolean` @kind boolean;
  #L279f38.  if v0 == 0 then goto L279f4c;
  #L279f3c.  v0:= v2.`c.a.e.i.e` @type ^`c.a.e.i$a` @kind object;
  #L279f40.  v0:= v0.`c.a.e.i$a.b` @type ^`boolean` @kind boolean;
  #L279f44.  if v0 == 0 then goto L279f4c;
  #L279f48.  @monitorexit v2
  #L279f4a.  return v1;
  #L279f4c.  v2.`c.a.e.i.h` @type ^`c.a.e.b` := v3 @kind object;
  #L279f50.  call `notifyAll`(v2) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L279f56.  @monitorexit v2
  #L279f58.  v3:= v2.`c.a.e.i.d` @type ^`c.a.e.g` @kind object;
  #L279f5c.  v0:= v2.`c.a.e.i.c` @type ^`int`;
  #L279f60.  call temp:= `b`(v3, v0) @signature `Lc/a/e/g;.b:(I)Lc/a/e/i;` @kind virtual;
  #L279f66.  v3:= 1I;
  #L279f68.  return v3;
  #L279f6a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L279f6c.  @monitorexit v2
  #L279f6e.  throw v3;
  catch `java.lang.Throwable` @[L279f22..L279f58] goto L279f6a;
  catch `java.lang.Throwable` @[L279f6c..L279f6e] goto L279f6a;
}
procedure `int` `a`(`c.a.e.i` v1 @kind this) @signature `Lc/a/e/i;.a:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27a034.  v0:= v1.`c.a.e.i.c` @type ^`int`;
  #L27a038.  return v0;
}
procedure `void` `a`(`c.a.e.i` v4 @kind this, `long` v5 ) @signature `Lc/a/e/i;.a:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L27a2f8.  v0:= v4.`c.a.e.i.b` @type ^`long` @kind wide;
  #L27a2fc.  v2:= v0 + v5 @kind long;
  #L27a300.  v4.`c.a.e.i.b` @type ^`long` := v2 @kind wide;
  #L27a304.  v0:= 0L;
  #L27a308.  v2:= lcmp(v5, v0);
  #L27a30c.  if v2 <= 0 then goto L27a316;
  #L27a310.  call `notifyAll`(v4) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L27a316.  return @kind void;
}
procedure `void` `a`(`c.a.e.i` v2 @kind this, `c.a.e.b` v3 @kind object) @signature `Lc/a/e/i;.a:(Lc/a/e/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L27a1dc.  call temp:= `d`(v2, v3) @signature `Lc/a/e/i;.d:(Lc/a/e/b;)Z` @kind direct;
  #L27a1e2.  v0:= temp;
  #L27a1e4.  if v0 != 0 then goto L27a1ea;
  #L27a1e8.  return @kind void;
  #L27a1ea.  v0:= v2.`c.a.e.i.d` @type ^`c.a.e.g` @kind object;
  #L27a1ee.  v1:= v2.`c.a.e.i.c` @type ^`int`;
  #L27a1f2.  call `b`(v0, v1, v3) @signature `Lc/a/e/g;.b:(ILc/a/e/b;)V` @kind virtual;
  #L27a1f8.  return @kind void;
}
procedure `void` `a`(`c.a.e.i` v3 @kind this, `d.e` v4 @kind object, `int` v5 ) @signature `Lc/a/e/i;.a:(Ld/e;I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L27a20c.  v0:= `@@c.a.e.i.i` @type ^`boolean` @kind boolean;
  #L27a210.  if v0 != 0 then goto L27a22c;
  #L27a214.  call temp:= `holdsLock`(v3) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L27a21a.  v0:= temp;
  #L27a21c.  if v0 == 0 then goto L27a22c;
  #L27a220.  v4:= new `java.lang.AssertionError`;
  #L27a224.  call `<init>`(v4) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L27a22a.  throw v4;
  #L27a22c.  v0:= v3.`c.a.e.i.m` @type ^`c.a.e.i$b` @kind object;
  #L27a230.  v1:= (`long`) v5 @kind i2l;
  #L27a232.  call `a`(v0, v4, v1) @signature `Lc/a/e/i$b;.a:(Ld/e;J)V` @kind virtual;
  #L27a238.  return @kind void;
}
procedure `void` `a`(`c.a.e.i` v3 @kind this, `java.util.List` v4 @kind object) @signature `Lc/a/e/i;.a:(Ljava/util/List;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L27a24c.  v0:= `@@c.a.e.i.i` @type ^`boolean` @kind boolean;
  #L27a250.  if v0 != 0 then goto L27a26c;
  #L27a254.  call temp:= `holdsLock`(v3) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L27a25a.  v0:= temp;
  #L27a25c.  if v0 == 0 then goto L27a26c;
  #L27a260.  v4:= new `java.lang.AssertionError`;
  #L27a264.  call `<init>`(v4) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L27a26a.  throw v4;
  #L27a26c.  @monitorenter v3
  #L27a26e.  v0:= 1I;
  #L27a270.  v3.`c.a.e.i.l` @type ^`boolean` := v0 @kind boolean;
  #L27a274.  v1:= v3.`c.a.e.i.k` @type ^`java.util.List` @kind object;
  #L27a278.  if v1 != 0 then goto L27a290;
  #L27a27c.  v3.`c.a.e.i.k` @type ^`java.util.List` := v4 @kind object;
  #L27a280.  call temp:= `b`(v3) @signature `Lc/a/e/i;.b:()Z` @kind virtual;
  #L27a286.  v0:= temp;
  #L27a288.  call `notifyAll`(v3) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L27a28e.  goto L27a2b6;
  #L27a290.  v1:= new `java.util.ArrayList`;
  #L27a294.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L27a29a.  v2:= v3.`c.a.e.i.k` @type ^`java.util.List` @kind object;
  #L27a29e.  call temp:= `addAll`(v1, v2) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L27a2a4.  v2:= 0I;
  #L27a2a6.  call temp:= `add`(v1, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L27a2ac.  call temp:= `addAll`(v1, v4) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L27a2b2.  v3.`c.a.e.i.k` @type ^`java.util.List` := v1 @kind object;
  #L27a2b6.  @monitorexit v3
  #L27a2b8.  if v0 != 0 then goto L27a2ca;
  #L27a2bc.  v4:= v3.`c.a.e.i.d` @type ^`c.a.e.g` @kind object;
  #L27a2c0.  v0:= v3.`c.a.e.i.c` @type ^`int`;
  #L27a2c4.  call temp:= `b`(v4, v0) @signature `Lc/a/e/g;.b:(I)Lc/a/e/i;` @kind virtual;
  #L27a2ca.  return @kind void;
  #L27a2cc.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L27a2ce.  @monitorexit v3
  #L27a2d0.  throw v4;
  catch `java.lang.Throwable` @[L27a270..L27a2b8] goto L27a2cc;
  catch `java.lang.Throwable` @[L27a2ce..L27a2d0] goto L27a2cc;
}
procedure `void` `b`(`c.a.e.i` v2 @kind this, `c.a.e.b` v3 @kind object) @signature `Lc/a/e/i;.b:(Lc/a/e/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L27a328.  call temp:= `d`(v2, v3) @signature `Lc/a/e/i;.d:(Lc/a/e/b;)Z` @kind direct;
  #L27a32e.  v0:= temp;
  #L27a330.  if v0 != 0 then goto L27a336;
  #L27a334.  return @kind void;
  #L27a336.  v0:= v2.`c.a.e.i.d` @type ^`c.a.e.g` @kind object;
  #L27a33a.  v1:= v2.`c.a.e.i.c` @type ^`int`;
  #L27a33e.  call `a`(v0, v1, v3) @signature `Lc/a/e/g;.a:(ILc/a/e/b;)V` @kind virtual;
  #L27a344.  return @kind void;
}
procedure `boolean` `b`(`c.a.e.i` v2 @kind this) @signature `Lc/a/e/i;.b:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L279e4c.  @monitorenter v2
  #L279e4e.  v0:= v2.`c.a.e.i.h` @type ^`c.a.e.b` @kind object;
  #L279e52.  v1:= 0I;
  #L279e54.  if v0 == 0 then goto L279e5c;
  #L279e58.  @monitorexit v2
  #L279e5a.  return v1;
  #L279e5c.  v0:= v2.`c.a.e.i.m` @type ^`c.a.e.i$b` @kind object;
  #L279e60.  v0:= v0.`c.a.e.i$b.b` @type ^`boolean` @kind boolean;
  #L279e64.  if v0 != 0 then goto L279e74;
  #L279e68.  v0:= v2.`c.a.e.i.m` @type ^`c.a.e.i$b` @kind object;
  #L279e6c.  v0:= v0.`c.a.e.i$b.a` @type ^`boolean` @kind boolean;
  #L279e70.  if v0 == 0 then goto L279e98;
  #L279e74.  v0:= v2.`c.a.e.i.e` @type ^`c.a.e.i$a` @kind object;
  #L279e78.  v0:= v0.`c.a.e.i$a.b` @type ^`boolean` @kind boolean;
  #L279e7c.  if v0 != 0 then goto L279e8c;
  #L279e80.  v0:= v2.`c.a.e.i.e` @type ^`c.a.e.i$a` @kind object;
  #L279e84.  v0:= v0.`c.a.e.i$a.a` @type ^`boolean` @kind boolean;
  #L279e88.  if v0 == 0 then goto L279e98;
  #L279e8c.  v0:= v2.`c.a.e.i.l` @type ^`boolean` @kind boolean;
  #L279e90.  if v0 == 0 then goto L279e98;
  #L279e94.  @monitorexit v2
  #L279e96.  return v1;
  #L279e98.  v0:= 1I;
  #L279e9a.  @monitorexit v2
  #L279e9c.  return v0;
  #L279e9e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L279ea0.  @monitorexit v2
  #L279ea2.  throw v0;
  catch `java.lang.Throwable` @[L279e4e..L279e52] goto L279e9e;
  catch `java.lang.Throwable` @[L279e5c..L279e90] goto L279e9e;
}
procedure `void` `c`(`c.a.e.i` v1 @kind this, `c.a.e.b` v2 @kind object) @signature `Lc/a/e/i;.c:(Lc/a/e/b;)V` @AccessFlag  {
    temp;
    v0;

  #L27a358.  @monitorenter v1
  #L27a35a.  v0:= v1.`c.a.e.i.h` @type ^`c.a.e.b` @kind object;
  #L27a35e.  if v0 != 0 then goto L27a36c;
  #L27a362.  v1.`c.a.e.i.h` @type ^`c.a.e.b` := v2 @kind object;
  #L27a366.  call `notifyAll`(v1) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L27a36c.  @monitorexit v1
  #L27a36e.  return @kind void;
  #L27a370.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L27a372.  @monitorexit v1
  #L27a374.  throw v2;
  catch `java.lang.Throwable` @[L27a35a..L27a36c] goto L27a370;
}
procedure `boolean` `c`(`c.a.e.i` v4 @kind this) @signature `Lc/a/e/i;.c:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L279ec8.  v0:= v4.`c.a.e.i.c` @type ^`int`;
  #L279ecc.  v1:= 1I;
  #L279ece.  v0:= v0 ^& v1 @kind int;
  #L279ed0.  v2:= 0I;
  #L279ed2.  if v0 != v1 then goto L279eda;
  #L279ed6.  v0:= 1I;
  #L279ed8.  goto L279edc;
  #L279eda.  v0:= 0I;
  #L279edc.  v3:= v4.`c.a.e.i.d` @type ^`c.a.e.g` @kind object;
  #L279ee0.  v3:= v3.`c.a.e.g.a` @type ^`boolean` @kind boolean;
  #L279ee4.  if v3 != v0 then goto L279eea;
  #L279ee8.  goto L279eec;
  #L279eea.  v1:= 0I;
  #L279eec.  return v1;
}
procedure `java.util.List` `d`(`c.a.e.i` v2 @kind this) @signature `Lc/a/e/i;.d:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L27a04c.  @monitorenter v2
  #L27a04e.  call temp:= `c`(v2) @signature `Lc/a/e/i;.c:()Z` @kind virtual;
  #L27a054.  v0:= temp;
  #L27a056.  if v0 != 0 then goto L27a06a;
  #L27a05a.  v0:= new `java.lang.IllegalStateException`;
  #L27a05e.  v1:= "servers cannot read response headers" @kind object;
  #L27a062.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L27a068.  throw v0;
  #L27a06a.  v0:= v2.`c.a.e.i.f` @type ^`c.a.e.i$c` @kind object;
  #L27a06e.  call `c`(v0) @signature `Lc/a/e/i$c;.c:()V` @kind virtual;
  #L27a074.  v0:= v2.`c.a.e.i.k` @type ^`java.util.List` @kind object;
  #L27a078.  if v0 != 0 then goto L27a08c;
  #L27a07c.  v0:= v2.`c.a.e.i.h` @type ^`c.a.e.b` @kind object;
  #L27a080.  if v0 != 0 then goto L27a08c;
  #L27a084.  call `l`(v2) @signature `Lc/a/e/i;.l:()V` @kind virtual;
  #L27a08a.  goto L27a074;
  #L27a08c.  v0:= v2.`c.a.e.i.f` @type ^`c.a.e.i$c` @kind object;
  #L27a090.  call `b`(v0) @signature `Lc/a/e/i$c;.b:()V` @kind virtual;
  #L27a096.  v0:= v2.`c.a.e.i.k` @type ^`java.util.List` @kind object;
  #L27a09a.  if v0 == 0 then goto L27a0a8;
  #L27a09e.  v1:= 0I;
  #L27a0a0.  v2.`c.a.e.i.k` @type ^`java.util.List` := v1 @kind object;
  #L27a0a4.  @monitorexit v2
  #L27a0a6.  return v0 @kind object;
  #L27a0a8.  v0:= new `c.a.e.n`;
  #L27a0ac.  v1:= v2.`c.a.e.i.h` @type ^`c.a.e.b` @kind object;
  #L27a0b0.  call `<init>`(v0, v1) @signature `Lc/a/e/n;.<init>:(Lc/a/e/b;)V` @kind direct;
  #L27a0b6.  throw v0;
  #L27a0b8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L27a0ba.  v1:= v2.`c.a.e.i.f` @type ^`c.a.e.i$c` @kind object;
  #L27a0be.  call `b`(v1) @signature `Lc/a/e/i$c;.b:()V` @kind virtual;
  #L27a0c4.  throw v0;
  #L27a0c6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L27a0c8.  @monitorexit v2
  #L27a0ca.  throw v0;
  catch `java.lang.Throwable` @[L27a04e..L27a074] goto L27a0c6;
  catch `java.lang.Throwable` @[L27a074..L27a08a] goto L27a0b8;
  catch `java.lang.Throwable` @[L27a08c..L27a0a4] goto L27a0c6;
  catch `java.lang.Throwable` @[L27a0a8..L27a0c6] goto L27a0c6;
}
procedure `d.t` `e`(`c.a.e.i` v1 @kind this) @signature `Lc/a/e/i;.e:()Ld/t;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27a004.  v0:= v1.`c.a.e.i.f` @type ^`c.a.e.i$c` @kind object;
  #L27a008.  return v0 @kind object;
}
procedure `d.t` `f`(`c.a.e.i` v1 @kind this) @signature `Lc/a/e/i;.f:()Ld/t;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27a01c.  v0:= v1.`c.a.e.i.g` @type ^`c.a.e.i$c` @kind object;
  #L27a020.  return v0 @kind object;
}
procedure `d.s` `g`(`c.a.e.i` v1 @kind this) @signature `Lc/a/e/i;.g:()Ld/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L279fec.  v0:= v1.`c.a.e.i.m` @type ^`c.a.e.i$b` @kind object;
  #L279ff0.  return v0 @kind object;
}
procedure `d.r` `h`(`c.a.e.i` v2 @kind this) @signature `Lc/a/e/i;.h:()Ld/r;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L279f94.  @monitorenter v2
  #L279f96.  v0:= v2.`c.a.e.i.l` @type ^`boolean` @kind boolean;
  #L279f9a.  if v0 != 0 then goto L279fba;
  #L279f9e.  call temp:= `c`(v2) @signature `Lc/a/e/i;.c:()Z` @kind virtual;
  #L279fa4.  v0:= temp;
  #L279fa6.  if v0 != 0 then goto L279fba;
  #L279faa.  v0:= new `java.lang.IllegalStateException`;
  #L279fae.  v1:= "reply before requesting the sink" @kind object;
  #L279fb2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L279fb8.  throw v0;
  #L279fba.  @monitorexit v2
  #L279fbc.  v0:= v2.`c.a.e.i.e` @type ^`c.a.e.i$a` @kind object;
  #L279fc0.  return v0 @kind object;
  #L279fc2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L279fc4.  @monitorexit v2
  #L279fc6.  throw v0;
  catch `java.lang.Throwable` @[L279f96..L279fbc] goto L279fc2;
  catch `java.lang.Throwable` @[L279fc4..L279fc6] goto L279fc2;
}
procedure `void` `i`(`c.a.e.i` v2 @kind this) @signature `Lc/a/e/i;.i:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L27a394.  v0:= `@@c.a.e.i.i` @type ^`boolean` @kind boolean;
  #L27a398.  if v0 != 0 then goto L27a3b4;
  #L27a39c.  call temp:= `holdsLock`(v2) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L27a3a2.  v0:= temp;
  #L27a3a4.  if v0 == 0 then goto L27a3b4;
  #L27a3a8.  v0:= new `java.lang.AssertionError`;
  #L27a3ac.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L27a3b2.  throw v0;
  #L27a3b4.  @monitorenter v2
  #L27a3b6.  v0:= v2.`c.a.e.i.m` @type ^`c.a.e.i$b` @kind object;
  #L27a3ba.  v1:= 1I;
  #L27a3bc.  v0.`c.a.e.i$b.b` @type ^`boolean` := v1 @kind boolean;
  #L27a3c0.  call temp:= `b`(v2) @signature `Lc/a/e/i;.b:()Z` @kind virtual;
  #L27a3c6.  v0:= temp;
  #L27a3c8.  call `notifyAll`(v2) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L27a3ce.  @monitorexit v2
  #L27a3d0.  if v0 != 0 then goto L27a3e2;
  #L27a3d4.  v0:= v2.`c.a.e.i.d` @type ^`c.a.e.g` @kind object;
  #L27a3d8.  v1:= v2.`c.a.e.i.c` @type ^`int`;
  #L27a3dc.  call temp:= `b`(v0, v1) @signature `Lc/a/e/g;.b:(I)Lc/a/e/i;` @kind virtual;
  #L27a3e2.  return @kind void;
  #L27a3e4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L27a3e6.  @monitorexit v2
  #L27a3e8.  throw v0;
  catch `java.lang.Throwable` @[L27a3b6..L27a3d0] goto L27a3e4;
  catch `java.lang.Throwable` @[L27a3e6..L27a3e8] goto L27a3e4;
}
procedure `void` `j`(`c.a.e.i` v2 @kind this) @signature `Lc/a/e/i;.j:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L27a410.  v0:= `@@c.a.e.i.i` @type ^`boolean` @kind boolean;
  #L27a414.  if v0 != 0 then goto L27a430;
  #L27a418.  call temp:= `holdsLock`(v2) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L27a41e.  v0:= temp;
  #L27a420.  if v0 == 0 then goto L27a430;
  #L27a424.  v0:= new `java.lang.AssertionError`;
  #L27a428.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L27a42e.  throw v0;
  #L27a430.  @monitorenter v2
  #L27a432.  v0:= v2.`c.a.e.i.m` @type ^`c.a.e.i$b` @kind object;
  #L27a436.  v0:= v0.`c.a.e.i$b.b` @type ^`boolean` @kind boolean;
  #L27a43a.  if v0 != 0 then goto L27a466;
  #L27a43e.  v0:= v2.`c.a.e.i.m` @type ^`c.a.e.i$b` @kind object;
  #L27a442.  v0:= v0.`c.a.e.i$b.a` @type ^`boolean` @kind boolean;
  #L27a446.  if v0 == 0 then goto L27a466;
  #L27a44a.  v0:= v2.`c.a.e.i.e` @type ^`c.a.e.i$a` @kind object;
  #L27a44e.  v0:= v0.`c.a.e.i$a.b` @type ^`boolean` @kind boolean;
  #L27a452.  if v0 != 0 then goto L27a462;
  #L27a456.  v0:= v2.`c.a.e.i.e` @type ^`c.a.e.i$a` @kind object;
  #L27a45a.  v0:= v0.`c.a.e.i$a.a` @type ^`boolean` @kind boolean;
  #L27a45e.  if v0 == 0 then goto L27a466;
  #L27a462.  v0:= 1I;
  #L27a464.  goto L27a468;
  #L27a466.  v0:= 0I;
  #L27a468.  call temp:= `b`(v2) @signature `Lc/a/e/i;.b:()Z` @kind virtual;
  #L27a46e.  v1:= temp;
  #L27a470.  @monitorexit v2
  #L27a472.  if v0 == 0 then goto L27a482;
  #L27a476.  v0:= `@@c.a.e.b.f` @type ^`c.a.e.b` @kind object;
  #L27a47a.  call `a`(v2, v0) @signature `Lc/a/e/i;.a:(Lc/a/e/b;)V` @kind virtual;
  #L27a480.  goto L27a494;
  #L27a482.  if v1 != 0 then goto L27a494;
  #L27a486.  v0:= v2.`c.a.e.i.d` @type ^`c.a.e.g` @kind object;
  #L27a48a.  v1:= v2.`c.a.e.i.c` @type ^`int`;
  #L27a48e.  call temp:= `b`(v0, v1) @signature `Lc/a/e/g;.b:(I)Lc/a/e/i;` @kind virtual;
  #L27a494.  return @kind void;
  #L27a496.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L27a498.  @monitorexit v2
  #L27a49a.  throw v0;
  catch `java.lang.Throwable` @[L27a432..L27a472] goto L27a496;
  catch `java.lang.Throwable` @[L27a498..L27a49a] goto L27a496;
}
procedure `void` `k`(`c.a.e.i` v2 @kind this) @signature `Lc/a/e/i;.k:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L27a4c0.  v0:= v2.`c.a.e.i.e` @type ^`c.a.e.i$a` @kind object;
  #L27a4c4.  v0:= v0.`c.a.e.i$a.a` @type ^`boolean` @kind boolean;
  #L27a4c8.  if v0 == 0 then goto L27a4dc;
  #L27a4cc.  v0:= new `java.io.IOException`;
  #L27a4d0.  v1:= "stream closed" @kind object;
  #L27a4d4.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L27a4da.  throw v0;
  #L27a4dc.  v0:= v2.`c.a.e.i.e` @type ^`c.a.e.i$a` @kind object;
  #L27a4e0.  v0:= v0.`c.a.e.i$a.b` @type ^`boolean` @kind boolean;
  #L27a4e4.  if v0 == 0 then goto L27a4f8;
  #L27a4e8.  v0:= new `java.io.IOException`;
  #L27a4ec.  v1:= "stream finished" @kind object;
  #L27a4f0.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L27a4f6.  throw v0;
  #L27a4f8.  v0:= v2.`c.a.e.i.h` @type ^`c.a.e.b` @kind object;
  #L27a4fc.  if v0 == 0 then goto L27a510;
  #L27a500.  v0:= new `c.a.e.n`;
  #L27a504.  v1:= v2.`c.a.e.i.h` @type ^`c.a.e.b` @kind object;
  #L27a508.  call `<init>`(v0, v1) @signature `Lc/a/e/n;.<init>:(Lc/a/e/b;)V` @kind direct;
  #L27a50e.  throw v0;
  #L27a510.  return @kind void;
}
procedure `void` `l`(`c.a.e.i` v1 @kind this) @signature `Lc/a/e/i;.l:()V` @AccessFlag  {
    temp;
    v0;

  #L27a524.  call `wait`(v1) @signature `Ljava/lang/Object;.wait:()V` @kind virtual;
  #L27a52a.  return @kind void;
  #L27a52c.  v0:= new `java.io.InterruptedIOException`;
  #L27a530.  call `<init>`(v0) @signature `Ljava/io/InterruptedIOException;.<init>:()V` @kind direct;
  #L27a536.  throw v0;
  catch `java.lang.InterruptedException` @[L27a524..L27a52a] goto L27a52c;
}
