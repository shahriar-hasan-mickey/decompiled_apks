record `c.a.e.m` @kind class @AccessFlag PUBLIC_FINAL {
  `int` `c.a.e.m.a` @AccessFlag PRIVATE;
  `int`[] `c.a.e.m.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`c.a.e.m` v1 @kind this) @signature `Lc/a/e/m;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L27b860.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L27b866.  v0:= 10I;
  #L27b86a.  v0:= new `int`[v0];
  #L27b86e.  v1.`c.a.e.m.b` @type ^`int`[] := v0 @kind object;
  #L27b872.  return @kind void;
}
procedure `c.a.e.m` `a`(`c.a.e.m` v2 @kind this, `int` v3 , `int` v4 ) @signature `Lc/a/e/m;.a:(II)Lc/a/e/m;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L27b73c.  if v3 < 0 then goto L27b764;
  #L27b740.  v0:= v2.`c.a.e.m.b` @type ^`int`[] @kind object;
  #L27b744.  v0:= length @variable v0;
  #L27b746.  if v3 < v0 then goto L27b74c;
  #L27b74a.  goto L27b764;
  #L27b74c.  v0:= 1I;
  #L27b74e.  v0:= v0 ^< v3 @kind int;
  #L27b750.  v1:= v2.`c.a.e.m.a` @type ^`int`;
  #L27b754.  v0:= v0 ^| v1 @kind int;
  #L27b756.  v2.`c.a.e.m.a` @type ^`int` := v0;
  #L27b75a.  v0:= v2.`c.a.e.m.b` @type ^`int`[] @kind object;
  #L27b75e.  v0[v3]:= v4;
  #L27b762.  return v2 @kind object;
  #L27b764.  return v2 @kind object;
}
procedure `void` `a`(`c.a.e.m` v2 @kind this) @signature `Lc/a/e/m;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L27b884.  v0:= 0I;
  #L27b886.  v2.`c.a.e.m.a` @type ^`int` := v0;
  #L27b88a.  v1:= v2.`c.a.e.m.b` @type ^`int`[] @kind object;
  #L27b88e.  call `fill`(v1, v0) @signature `Ljava/util/Arrays;.fill:([II)V` @kind static;
  #L27b894.  return @kind void;
}
procedure `void` `a`(`c.a.e.m` v2 @kind this, `c.a.e.m` v3 @kind object) @signature `Lc/a/e/m;.a:(Lc/a/e/m;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L27b8a8.  v0:= 0I;
  #L27b8aa.  v1:= 10I;
  #L27b8ae.  if v0 >= v1 then goto L27b8d4;
  #L27b8b2.  call temp:= `a`(v3, v0) @signature `Lc/a/e/m;.a:(I)Z` @kind virtual;
  #L27b8b8.  v1:= temp;
  #L27b8ba.  if v1 != 0 then goto L27b8c0;
  #L27b8be.  goto L27b8ce;
  #L27b8c0.  call temp:= `b`(v3, v0) @signature `Lc/a/e/m;.b:(I)I` @kind virtual;
  #L27b8c6.  v1:= temp;
  #L27b8c8.  call temp:= `a`(v2, v0, v1) @signature `Lc/a/e/m;.a:(II)Lc/a/e/m;` @kind virtual;
  #L27b8ce.  v0:= v0 + 1;
  #L27b8d2.  goto L27b8aa;
  #L27b8d4.  return @kind void;
}
procedure `boolean` `a`(`c.a.e.m` v2 @kind this, `int` v3 ) @signature `Lc/a/e/m;.a:(I)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L27b714.  v0:= 1I;
  #L27b716.  v3:= v0 ^< v3 @kind int;
  #L27b71a.  v1:= v2.`c.a.e.m.a` @type ^`int`;
  #L27b71e.  v3:= v3 ^& v1 @kind int;
  #L27b720.  if v3 == 0 then goto L27b726;
  #L27b724.  goto L27b728;
  #L27b726.  v0:= 0I;
  #L27b728.  return v0;
}
procedure `int` `b`(`c.a.e.m` v1 @kind this) @signature `Lc/a/e/m;.b:()I` @AccessFlag  {
    temp;
    v0;

  #L27b778.  v0:= v1.`c.a.e.m.a` @type ^`int`;
  #L27b77c.  call temp:= `bitCount`(v0) @signature `Ljava/lang/Integer;.bitCount:(I)I` @kind static;
  #L27b782.  v0:= temp;
  #L27b784.  return v0;
}
procedure `int` `b`(`c.a.e.m` v1 @kind this, `int` v2 ) @signature `Lc/a/e/m;.b:(I)I` @AccessFlag  {
    temp;
    v0;

  #L27b798.  v0:= v1.`c.a.e.m.b` @type ^`int`[] @kind object;
  #L27b79c.  v2:= v0[v2];
  #L27b7a0.  return v2;
}
procedure `int` `c`(`c.a.e.m` v2 @kind this) @signature `Lc/a/e/m;.c:()I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L27b7b4.  v0:= v2.`c.a.e.m.a` @type ^`int`;
  #L27b7b8.  v0:= v0 ^& 2;
  #L27b7bc.  if v0 == 0 then goto L27b7cc;
  #L27b7c0.  v0:= v2.`c.a.e.m.b` @type ^`int`[] @kind object;
  #L27b7c4.  v1:= 1I;
  #L27b7c6.  v0:= v0[v1];
  #L27b7ca.  goto L27b7ce;
  #L27b7cc.  v0:= -1I;
  #L27b7ce.  return v0;
}
procedure `int` `c`(`c.a.e.m` v1 @kind this, `int` v2 ) @signature `Lc/a/e/m;.c:(I)I` @AccessFlag  {
    temp;
    v0;

  #L27b7e0.  v0:= v1.`c.a.e.m.a` @type ^`int`;
  #L27b7e4.  v0:= v0 ^& 16;
  #L27b7e8.  if v0 == 0 then goto L27b7f6;
  #L27b7ec.  v2:= v1.`c.a.e.m.b` @type ^`int`[] @kind object;
  #L27b7f0.  v0:= 4I;
  #L27b7f2.  v2:= v2[v0];
  #L27b7f6.  return v2;
}
procedure `int` `d`(`c.a.e.m` v2 @kind this) @signature `Lc/a/e/m;.d:()I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L27b808.  v0:= v2.`c.a.e.m.a` @type ^`int`;
  #L27b80c.  v0:= v0 ^& 128;
  #L27b810.  if v0 == 0 then goto L27b820;
  #L27b814.  v0:= v2.`c.a.e.m.b` @type ^`int`[] @kind object;
  #L27b818.  v1:= 7I;
  #L27b81a.  v0:= v0[v1];
  #L27b81e.  goto L27b826;
  #L27b820.  v0:= 65535I;
  #L27b826.  return v0;
}
procedure `int` `d`(`c.a.e.m` v1 @kind this, `int` v2 ) @signature `Lc/a/e/m;.d:(I)I` @AccessFlag  {
    temp;
    v0;

  #L27b838.  v0:= v1.`c.a.e.m.a` @type ^`int`;
  #L27b83c.  v0:= v0 ^& 32;
  #L27b840.  if v0 == 0 then goto L27b84e;
  #L27b844.  v2:= v1.`c.a.e.m.b` @type ^`int`[] @kind object;
  #L27b848.  v0:= 5I;
  #L27b84a.  v2:= v2[v0];
  #L27b84e.  return v2;
}
