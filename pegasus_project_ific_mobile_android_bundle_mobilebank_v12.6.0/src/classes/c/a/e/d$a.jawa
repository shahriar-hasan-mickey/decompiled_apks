record `c.a.e.d$a` @kind class @AccessFlag FINAL {
  `c.a.e.c`[] `c.a.e.d$a.a` @AccessFlag ;
  `int` `c.a.e.d$a.b` @AccessFlag ;
  `int` `c.a.e.d$a.c` @AccessFlag ;
  `int` `c.a.e.d$a.d` @AccessFlag ;
  `java.util.List` `c.a.e.d$a.e` @AccessFlag PRIVATE_FINAL;
  `d.e` `c.a.e.d$a.f` @AccessFlag PRIVATE_FINAL;
  `int` `c.a.e.d$a.g` @AccessFlag PRIVATE_FINAL;
  `int` `c.a.e.d$a.h` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`c.a.e.d$a` v1 @kind this, `int` v2 , `int` v3 , `d.s` v4 @kind object) @signature `Lc/a/e/d$a;.<init>:(IILd/s;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2755e0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2755e6.  v0:= new `java.util.ArrayList`;
  #L2755ea.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2755f0.  v1.`c.a.e.d$a.e` @type ^`java.util.List` := v0 @kind object;
  #L2755f4.  v0:= 8I;
  #L2755f8.  v0:= new `c.a.e.c`[v0];
  #L2755fc.  v1.`c.a.e.d$a.a` @type ^`c.a.e.c`[] := v0 @kind object;
  #L275600.  v0:= v1.`c.a.e.d$a.a` @type ^`c.a.e.c`[] @kind object;
  #L275604.  v0:= length @variable v0;
  #L275606.  v0:= v0 + -1;
  #L27560a.  v1.`c.a.e.d$a.b` @type ^`int` := v0;
  #L27560e.  v0:= 0I;
  #L275610.  v1.`c.a.e.d$a.c` @type ^`int` := v0;
  #L275614.  v1.`c.a.e.d$a.d` @type ^`int` := v0;
  #L275618.  v1.`c.a.e.d$a.g` @type ^`int` := v2;
  #L27561c.  v1.`c.a.e.d$a.h` @type ^`int` := v3;
  #L275620.  call temp:= `a`(v4) @signature `Ld/l;.a:(Ld/s;)Ld/e;` @kind static;
  #L275626.  v2:= temp @kind object;
  #L275628.  v1.`c.a.e.d$a.f` @type ^`d.e` := v2 @kind object;
  #L27562c.  return @kind void;
}
procedure `void` `<init>`(`c.a.e.d$a` v0 @kind this, `int` v1 , `d.s` v2 @kind object) @signature `Lc/a/e/d$a;.<init>:(ILd/s;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2755c8.  call `<init>`(v0, v1, v1, v2) @signature `Lc/a/e/d$a;.<init>:(IILd/s;)V` @kind direct;
  #L2755ce.  return @kind void;
}
procedure `int` `a`(`c.a.e.d$a` v5 @kind this, `int` v6 ) @signature `Lc/a/e/d$a;.a:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L275484.  v0:= 0I;
  #L275486.  if v6 <= 0 then goto L275508;
  #L27548a.  v1:= v5.`c.a.e.d$a.a` @type ^`c.a.e.c`[] @kind object;
  #L27548e.  v1:= length @variable v1;
  #L275490.  v1:= v1 + -1;
  #L275494.  v2:= v5.`c.a.e.d$a.b` @type ^`int`;
  #L275498.  if v1 < v2 then goto L2754da;
  #L27549c.  if v6 <= 0 then goto L2754da;
  #L2754a0.  v2:= v5.`c.a.e.d$a.a` @type ^`c.a.e.c`[] @kind object;
  #L2754a4.  v2:= v2[v1] @kind object;
  #L2754a8.  v2:= v2.`c.a.e.c.i` @type ^`int`;
  #L2754ac.  v6:= v6 - v2 @kind int;
  #L2754ae.  v2:= v5.`c.a.e.d$a.d` @type ^`int`;
  #L2754b2.  v3:= v5.`c.a.e.d$a.a` @type ^`c.a.e.c`[] @kind object;
  #L2754b6.  v3:= v3[v1] @kind object;
  #L2754ba.  v3:= v3.`c.a.e.c.i` @type ^`int`;
  #L2754be.  v2:= v2 - v3 @kind int;
  #L2754c0.  v5.`c.a.e.d$a.d` @type ^`int` := v2;
  #L2754c4.  v2:= v5.`c.a.e.d$a.c` @type ^`int`;
  #L2754c8.  v2:= v2 + -1;
  #L2754cc.  v5.`c.a.e.d$a.c` @type ^`int` := v2;
  #L2754d0.  v0:= v0 + 1;
  #L2754d4.  v1:= v1 + -1;
  #L2754d8.  goto L275494;
  #L2754da.  v6:= v5.`c.a.e.d$a.a` @type ^`c.a.e.c`[] @kind object;
  #L2754de.  v1:= v5.`c.a.e.d$a.b` @type ^`int`;
  #L2754e2.  v1:= v1 + 1;
  #L2754e6.  v2:= v5.`c.a.e.d$a.a` @type ^`c.a.e.c`[] @kind object;
  #L2754ea.  v3:= v5.`c.a.e.d$a.b` @type ^`int`;
  #L2754ee.  v3:= v3 + 1;
  #L2754f2.  v3:= v3 + v0 @kind int;
  #L2754f4.  v4:= v5.`c.a.e.d$a.c` @type ^`int`;
  #L2754f8.  call `arraycopy`(v6, v1, v2, v3, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2754fe.  v6:= v5.`c.a.e.d$a.b` @type ^`int`;
  #L275502.  v6:= v6 + v0 @kind int;
  #L275504.  v5.`c.a.e.d$a.b` @type ^`int` := v6;
  #L275508.  return v0;
}
procedure `void` `a`(`c.a.e.d$a` v5 @kind this, `int` v6 , `c.a.e.c` v7 @kind object) @signature `Lc/a/e/d$a;.a:(ILc/a/e/c;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L275778.  v0:= v5.`c.a.e.d$a.e` @type ^`java.util.List` @kind object;
  #L27577c.  call temp:= `add`(v0, v7) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L275782.  v0:= v7.`c.a.e.c.i` @type ^`int`;
  #L275786.  v1:= -1I;
  #L275788.  if v6 == v1 then goto L2757a2;
  #L27578c.  v2:= v5.`c.a.e.d$a.a` @type ^`c.a.e.c`[] @kind object;
  #L275790.  call temp:= `c`(v5, v6) @signature `Lc/a/e/d$a;.c:(I)I` @kind direct;
  #L275796.  v3:= temp;
  #L275798.  v2:= v2[v3] @kind object;
  #L27579c.  v2:= v2.`c.a.e.c.i` @type ^`int`;
  #L2757a0.  v0:= v0 - v2 @kind int;
  #L2757a2.  v2:= v5.`c.a.e.d$a.h` @type ^`int`;
  #L2757a6.  if v0 <= v2 then goto L2757b2;
  #L2757aa.  call `e`(v5) @signature `Lc/a/e/d$a;.e:()V` @kind direct;
  #L2757b0.  return @kind void;
  #L2757b2.  v2:= v5.`c.a.e.d$a.d` @type ^`int`;
  #L2757b6.  v2:= v2 + v0 @kind int;
  #L2757b8.  v3:= v5.`c.a.e.d$a.h` @type ^`int`;
  #L2757bc.  v2:= v2 - v3 @kind int;
  #L2757be.  call temp:= `a`(v5, v2) @signature `Lc/a/e/d$a;.a:(I)I` @kind direct;
  #L2757c4.  v2:= temp;
  #L2757c6.  if v6 != v1 then goto L275836;
  #L2757ca.  v6:= v5.`c.a.e.d$a.c` @type ^`int`;
  #L2757ce.  v6:= v6 + 1;
  #L2757d2.  v1:= v5.`c.a.e.d$a.a` @type ^`c.a.e.c`[] @kind object;
  #L2757d6.  v1:= length @variable v1;
  #L2757d8.  if v6 <= v1 then goto L275814;
  #L2757dc.  v6:= v5.`c.a.e.d$a.a` @type ^`c.a.e.c`[] @kind object;
  #L2757e0.  v6:= length @variable v6;
  #L2757e2.  v6:= v6 * 2;
  #L2757e6.  v6:= new `c.a.e.c`[v6];
  #L2757ea.  v1:= v5.`c.a.e.d$a.a` @type ^`c.a.e.c`[] @kind object;
  #L2757ee.  v2:= 0I;
  #L2757f0.  v3:= v5.`c.a.e.d$a.a` @type ^`c.a.e.c`[] @kind object;
  #L2757f4.  v3:= length @variable v3;
  #L2757f6.  v4:= v5.`c.a.e.d$a.a` @type ^`c.a.e.c`[] @kind object;
  #L2757fa.  v4:= length @variable v4;
  #L2757fc.  call `arraycopy`(v1, v2, v6, v3, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L275802.  v1:= v5.`c.a.e.d$a.a` @type ^`c.a.e.c`[] @kind object;
  #L275806.  v1:= length @variable v1;
  #L275808.  v1:= v1 + -1;
  #L27580c.  v5.`c.a.e.d$a.b` @type ^`int` := v1;
  #L275810.  v5.`c.a.e.d$a.a` @type ^`c.a.e.c`[] := v6 @kind object;
  #L275814.  v6:= v5.`c.a.e.d$a.b` @type ^`int`;
  #L275818.  v1:= v6 + -1;
  #L27581c.  v5.`c.a.e.d$a.b` @type ^`int` := v1;
  #L275820.  v1:= v5.`c.a.e.d$a.a` @type ^`c.a.e.c`[] @kind object;
  #L275824.  v1[v6]:= v7 @kind object;
  #L275828.  v6:= v5.`c.a.e.d$a.c` @type ^`int`;
  #L27582c.  v6:= v6 + 1;
  #L275830.  v5.`c.a.e.d$a.c` @type ^`int` := v6;
  #L275834.  goto L27584a;
  #L275836.  call temp:= `c`(v5, v6) @signature `Lc/a/e/d$a;.c:(I)I` @kind direct;
  #L27583c.  v1:= temp;
  #L27583e.  v1:= v1 + v2 @kind int;
  #L275840.  v6:= v6 + v1 @kind int;
  #L275842.  v1:= v5.`c.a.e.d$a.a` @type ^`c.a.e.c`[] @kind object;
  #L275846.  v1[v6]:= v7 @kind object;
  #L27584a.  v6:= v5.`c.a.e.d$a.d` @type ^`int`;
  #L27584e.  v6:= v6 + v0 @kind int;
  #L275850.  v5.`c.a.e.d$a.d` @type ^`int` := v6;
  #L275854.  return @kind void;
}
procedure `void` `b`(`c.a.e.d$a` v3 @kind this, `int` v4 ) @signature `Lc/a/e/d$a;.b:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L275868.  call temp:= `g`(v3, v4) @signature `Lc/a/e/d$a;.g:(I)Z` @kind direct;
  #L27586e.  v0:= temp;
  #L275870.  if v0 == 0 then goto L275888;
  #L275874.  v0:= `@@c.a.e.d.a` @type ^`c.a.e.c`[] @kind object;
  #L275878.  v4:= v0[v4] @kind object;
  #L27587c.  v0:= v3.`c.a.e.d$a.e` @type ^`java.util.List` @kind object;
  #L275880.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L275886.  goto L2758bc;
  #L275888.  v0:= `@@c.a.e.d.a` @type ^`c.a.e.c`[] @kind object;
  #L27588c.  v0:= length @variable v0;
  #L27588e.  v0:= v4 - v0 @kind int;
  #L275892.  call temp:= `c`(v3, v0) @signature `Lc/a/e/d$a;.c:(I)I` @kind direct;
  #L275898.  v0:= temp;
  #L27589a.  if v0 < 0 then goto L2758be;
  #L27589e.  v1:= v3.`c.a.e.d$a.a` @type ^`c.a.e.c`[] @kind object;
  #L2758a2.  v1:= length @variable v1;
  #L2758a4.  if v0 < v1 then goto L2758aa;
  #L2758a8.  goto L2758be;
  #L2758aa.  v4:= v3.`c.a.e.d$a.e` @type ^`java.util.List` @kind object;
  #L2758ae.  v1:= v3.`c.a.e.d$a.a` @type ^`c.a.e.c`[] @kind object;
  #L2758b2.  v0:= v1[v0] @kind object;
  #L2758b6.  call temp:= `add`(v4, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2758bc.  return @kind void;
  #L2758be.  v0:= new `java.io.IOException`;
  #L2758c2.  v1:= new `java.lang.StringBuilder`;
  #L2758c6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2758cc.  v2:= "Header index too large " @kind object;
  #L2758d0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2758d6.  v4:= v4 + 1;
  #L2758da.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2758e0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2758e6.  v4:= temp @kind object;
  #L2758e8.  call `<init>`(v0, v4) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2758ee.  throw v0;
}
procedure `int` `c`(`c.a.e.d$a` v1 @kind this, `int` v2 ) @signature `Lc/a/e/d$a;.c:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L27555c.  v0:= v1.`c.a.e.d$a.b` @type ^`int`;
  #L275560.  v0:= v0 + 1;
  #L275564.  v0:= v0 + v2 @kind int;
  #L275566.  return v0;
}
procedure `void` `d`(`c.a.e.d$a` v2 @kind this) @signature `Lc/a/e/d$a;.d:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L275900.  v0:= v2.`c.a.e.d$a.h` @type ^`int`;
  #L275904.  v1:= v2.`c.a.e.d$a.d` @type ^`int`;
  #L275908.  if v0 >= v1 then goto L27592c;
  #L27590c.  v0:= v2.`c.a.e.d$a.h` @type ^`int`;
  #L275910.  if v0 != 0 then goto L27591c;
  #L275914.  call `e`(v2) @signature `Lc/a/e/d$a;.e:()V` @kind direct;
  #L27591a.  goto L27592c;
  #L27591c.  v0:= v2.`c.a.e.d$a.d` @type ^`int`;
  #L275920.  v1:= v2.`c.a.e.d$a.h` @type ^`int`;
  #L275924.  v0:= v0 - v1 @kind int;
  #L275926.  call temp:= `a`(v2, v0) @signature `Lc/a/e/d$a;.a:(I)I` @kind direct;
  #L27592c.  return @kind void;
}
procedure `void` `d`(`c.a.e.d$a` v3 @kind this, `int` v4 ) @signature `Lc/a/e/d$a;.d:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L275940.  call temp:= `f`(v3, v4) @signature `Lc/a/e/d$a;.f:(I)Ld/f;` @kind direct;
  #L275946.  v4:= temp @kind object;
  #L275948.  call temp:= `c`(v3) @signature `Lc/a/e/d$a;.c:()Ld/f;` @kind virtual;
  #L27594e.  v0:= temp @kind object;
  #L275950.  v1:= v3.`c.a.e.d$a.e` @type ^`java.util.List` @kind object;
  #L275954.  v2:= new `c.a.e.c`;
  #L275958.  call `<init>`(v2, v4, v0) @signature `Lc/a/e/c;.<init>:(Ld/f;Ld/f;)V` @kind direct;
  #L27595e.  call temp:= `add`(v1, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L275964.  return @kind void;
}
procedure `void` `e`(`c.a.e.d$a` v2 @kind this) @signature `Lc/a/e/d$a;.e:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L275978.  v0:= v2.`c.a.e.d$a.a` @type ^`c.a.e.c`[] @kind object;
  #L27597c.  v1:= 0I;
  #L27597e.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L275984.  v0:= v2.`c.a.e.d$a.a` @type ^`c.a.e.c`[] @kind object;
  #L275988.  v0:= length @variable v0;
  #L27598a.  v0:= v0 + -1;
  #L27598e.  v2.`c.a.e.d$a.b` @type ^`int` := v0;
  #L275992.  v0:= 0I;
  #L275994.  v2.`c.a.e.d$a.c` @type ^`int` := v0;
  #L275998.  v2.`c.a.e.d$a.d` @type ^`int` := v0;
  #L27599c.  return @kind void;
}
procedure `void` `e`(`c.a.e.d$a` v2 @kind this, `int` v3 ) @signature `Lc/a/e/d$a;.e:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L2759b0.  call temp:= `f`(v2, v3) @signature `Lc/a/e/d$a;.f:(I)Ld/f;` @kind direct;
  #L2759b6.  v3:= temp @kind object;
  #L2759b8.  call temp:= `c`(v2) @signature `Lc/a/e/d$a;.c:()Ld/f;` @kind virtual;
  #L2759be.  v0:= temp @kind object;
  #L2759c0.  v1:= new `c.a.e.c`;
  #L2759c4.  call `<init>`(v1, v3, v0) @signature `Lc/a/e/c;.<init>:(Ld/f;Ld/f;)V` @kind direct;
  #L2759ca.  v3:= -1I;
  #L2759cc.  call `a`(v2, v3, v1) @signature `Lc/a/e/d$a;.a:(ILc/a/e/c;)V` @kind direct;
  #L2759d2.  return @kind void;
}
procedure `d.f` `f`(`c.a.e.d$a` v3 @kind this, `int` v4 ) @signature `Lc/a/e/d$a;.f:(I)Ld/f;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2753f8.  call temp:= `g`(v3, v4) @signature `Lc/a/e/d$a;.g:(I)Z` @kind direct;
  #L2753fe.  v0:= temp;
  #L275400.  if v0 == 0 then goto L275412;
  #L275404.  v0:= `@@c.a.e.d.a` @type ^`c.a.e.c`[] @kind object;
  #L275408.  v4:= v0[v4] @kind object;
  #L27540c.  v4:= v4.`c.a.e.c.g` @type ^`d.f` @kind object;
  #L275410.  return v4 @kind object;
  #L275412.  v0:= `@@c.a.e.d.a` @type ^`c.a.e.c`[] @kind object;
  #L275416.  v0:= length @variable v0;
  #L275418.  v0:= v4 - v0 @kind int;
  #L27541c.  call temp:= `c`(v3, v0) @signature `Lc/a/e/d$a;.c:(I)I` @kind direct;
  #L275422.  v0:= temp;
  #L275424.  if v0 < 0 then goto L275442;
  #L275428.  v1:= v3.`c.a.e.d$a.a` @type ^`c.a.e.c`[] @kind object;
  #L27542c.  v1:= length @variable v1;
  #L27542e.  if v0 < v1 then goto L275434;
  #L275432.  goto L275442;
  #L275434.  v4:= v3.`c.a.e.d$a.a` @type ^`c.a.e.c`[] @kind object;
  #L275438.  v4:= v4[v0] @kind object;
  #L27543c.  v4:= v4.`c.a.e.c.g` @type ^`d.f` @kind object;
  #L275440.  return v4 @kind object;
  #L275442.  v0:= new `java.io.IOException`;
  #L275446.  v1:= new `java.lang.StringBuilder`;
  #L27544a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L275450.  v2:= "Header index too large " @kind object;
  #L275454.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L27545a.  v4:= v4 + 1;
  #L27545e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L275464.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L27546a.  v4:= temp @kind object;
  #L27546c.  call `<init>`(v0, v4) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L275472.  throw v0;
}
procedure `void` `f`(`c.a.e.d$a` v4 @kind this) @signature `Lc/a/e/d$a;.f:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2759e4.  call temp:= `c`(v4) @signature `Lc/a/e/d$a;.c:()Ld/f;` @kind virtual;
  #L2759ea.  v0:= temp @kind object;
  #L2759ec.  call temp:= `a`(v0) @signature `Lc/a/e/d;.a:(Ld/f;)Ld/f;` @kind static;
  #L2759f2.  v0:= temp @kind object;
  #L2759f4.  call temp:= `c`(v4) @signature `Lc/a/e/d$a;.c:()Ld/f;` @kind virtual;
  #L2759fa.  v1:= temp @kind object;
  #L2759fc.  v2:= v4.`c.a.e.d$a.e` @type ^`java.util.List` @kind object;
  #L275a00.  v3:= new `c.a.e.c`;
  #L275a04.  call `<init>`(v3, v0, v1) @signature `Lc/a/e/c;.<init>:(Ld/f;Ld/f;)V` @kind direct;
  #L275a0a.  call temp:= `add`(v2, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L275a10.  return @kind void;
}
procedure `void` `g`(`c.a.e.d$a` v3 @kind this) @signature `Lc/a/e/d$a;.g:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L275a24.  call temp:= `c`(v3) @signature `Lc/a/e/d$a;.c:()Ld/f;` @kind virtual;
  #L275a2a.  v0:= temp @kind object;
  #L275a2c.  call temp:= `a`(v0) @signature `Lc/a/e/d;.a:(Ld/f;)Ld/f;` @kind static;
  #L275a32.  v0:= temp @kind object;
  #L275a34.  call temp:= `c`(v3) @signature `Lc/a/e/d$a;.c:()Ld/f;` @kind virtual;
  #L275a3a.  v1:= temp @kind object;
  #L275a3c.  v2:= new `c.a.e.c`;
  #L275a40.  call `<init>`(v2, v0, v1) @signature `Lc/a/e/c;.<init>:(Ld/f;Ld/f;)V` @kind direct;
  #L275a46.  v0:= -1I;
  #L275a48.  call `a`(v3, v0, v2) @signature `Lc/a/e/d$a;.a:(ILc/a/e/c;)V` @kind direct;
  #L275a4e.  return @kind void;
}
procedure `boolean` `g`(`c.a.e.d$a` v2 @kind this, `int` v3 ) @signature `Lc/a/e/d$a;.g:(I)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L27535c.  v0:= 1I;
  #L27535e.  if v3 < 0 then goto L275370;
  #L275362.  v1:= `@@c.a.e.d.a` @type ^`c.a.e.c`[] @kind object;
  #L275366.  v1:= length @variable v1;
  #L275368.  v1:= v1 - v0 @kind int;
  #L27536a.  if v3 > v1 then goto L275370;
  #L27536e.  goto L275372;
  #L275370.  v0:= 0I;
  #L275372.  return v0;
}
procedure `int` `h`(`c.a.e.d$a` v1 @kind this) @signature `Lc/a/e/d$a;.h:()I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L275578.  v0:= v1.`c.a.e.d$a.f` @type ^`d.e` @kind object;
  #L27557c.  call temp:= `g`(v0) @signature `Ld/e;.g:()B` @kind interface;
  #L275582.  v0:= temp;
  #L275584.  v0:= v0 ^& 255;
  #L275588.  return v0;
}
procedure `int` `a`(`c.a.e.d$a` v2 @kind this, `int` v3 , `int` v4 ) @signature `Lc/a/e/d$a;.a:(II)I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L27551c.  v3:= v3 ^& v4 @kind int;
  #L27551e.  if v3 >= v4 then goto L275524;
  #L275522.  return v3;
  #L275524.  v3:= 0I;
  #L275526.  call temp:= `h`(v2) @signature `Lc/a/e/d$a;.h:()I` @kind direct;
  #L27552c.  v0:= temp;
  #L27552e.  v1:= v0 ^& 128;
  #L275532.  if v1 == 0 then goto L275544;
  #L275536.  v0:= v0 ^& 127;
  #L27553a.  v0:= v0 ^< v3 @kind int;
  #L27553c.  v4:= v4 + v0 @kind int;
  #L27553e.  v3:= v3 + 7;
  #L275542.  goto L275526;
  #L275544.  v3:= v0 ^< v3 @kind int;
  #L275548.  v4:= v4 + v3 @kind int;
  #L27554a.  return v4;
}
procedure `void` `a`(`c.a.e.d$a` v3 @kind this) @signature `Lc/a/e/d$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L275640.  v0:= v3.`c.a.e.d$a.f` @type ^`d.e` @kind object;
  #L275644.  call temp:= `e`(v0) @signature `Ld/e;.e:()Z` @kind interface;
  #L27564a.  v0:= temp;
  #L27564c.  if v0 != 0 then goto L275766;
  #L275650.  v0:= v3.`c.a.e.d$a.f` @type ^`d.e` @kind object;
  #L275654.  call temp:= `g`(v0) @signature `Ld/e;.g:()B` @kind interface;
  #L27565a.  v0:= temp;
  #L27565c.  v0:= v0 ^& 255;
  #L275660.  v1:= 128I;
  #L275664.  if v0 != v1 then goto L275678;
  #L275668.  v0:= new `java.io.IOException`;
  #L27566c.  v1:= "index == 0" @kind object;
  #L275670.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L275676.  throw v0;
  #L275678.  v2:= v0 ^& 128;
  #L27567c.  if v2 != v1 then goto L275698;
  #L275680.  v1:= 127I;
  #L275684.  call temp:= `a`(v3, v0, v1) @signature `Lc/a/e/d$a;.a:(II)I` @kind virtual;
  #L27568a.  v0:= temp;
  #L27568c.  v0:= v0 + -1;
  #L275690.  call `b`(v3, v0) @signature `Lc/a/e/d$a;.b:(I)V` @kind direct;
  #L275696.  goto L275640;
  #L275698.  v1:= 64I;
  #L27569c.  if v0 != v1 then goto L2756a8;
  #L2756a0.  call `g`(v3) @signature `Lc/a/e/d$a;.g:()V` @kind direct;
  #L2756a6.  goto L275640;
  #L2756a8.  v2:= v0 ^& 64;
  #L2756ac.  if v2 != v1 then goto L2756c8;
  #L2756b0.  v1:= 63I;
  #L2756b4.  call temp:= `a`(v3, v0, v1) @signature `Lc/a/e/d$a;.a:(II)I` @kind virtual;
  #L2756ba.  v0:= temp;
  #L2756bc.  v0:= v0 + -1;
  #L2756c0.  call `e`(v3, v0) @signature `Lc/a/e/d$a;.e:(I)V` @kind direct;
  #L2756c6.  goto L275640;
  #L2756c8.  v1:= v0 ^& 32;
  #L2756cc.  v2:= 32I;
  #L2756d0.  if v1 != v2 then goto L275734;
  #L2756d4.  v1:= 31I;
  #L2756d8.  call temp:= `a`(v3, v0, v1) @signature `Lc/a/e/d$a;.a:(II)I` @kind virtual;
  #L2756de.  v0:= temp;
  #L2756e0.  v3.`c.a.e.d$a.h` @type ^`int` := v0;
  #L2756e4.  v0:= v3.`c.a.e.d$a.h` @type ^`int`;
  #L2756e8.  if v0 < 0 then goto L275702;
  #L2756ec.  v0:= v3.`c.a.e.d$a.h` @type ^`int`;
  #L2756f0.  v1:= v3.`c.a.e.d$a.g` @type ^`int`;
  #L2756f4.  if v0 <= v1 then goto L2756fa;
  #L2756f8.  goto L275702;
  #L2756fa.  call `d`(v3) @signature `Lc/a/e/d$a;.d:()V` @kind direct;
  #L275700.  goto L275640;
  #L275702.  v0:= new `java.io.IOException`;
  #L275706.  v1:= new `java.lang.StringBuilder`;
  #L27570a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L275710.  v2:= "Invalid dynamic table size update " @kind object;
  #L275714.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L27571a.  v2:= v3.`c.a.e.d$a.h` @type ^`int`;
  #L27571e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L275724.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L27572a.  v1:= temp @kind object;
  #L27572c.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L275732.  throw v0;
  #L275734.  v1:= 16I;
  #L275738.  if v0 == v1 then goto L27575c;
  #L27573c.  if v0 != 0 then goto L275742;
  #L275740.  goto L27575c;
  #L275742.  v1:= 15I;
  #L275746.  call temp:= `a`(v3, v0, v1) @signature `Lc/a/e/d$a;.a:(II)I` @kind virtual;
  #L27574c.  v0:= temp;
  #L27574e.  v0:= v0 + -1;
  #L275752.  call `d`(v3, v0) @signature `Lc/a/e/d$a;.d:(I)V` @kind direct;
  #L275758.  goto L275640;
  #L27575c.  call `f`(v3) @signature `Lc/a/e/d$a;.f:()V` @kind direct;
  #L275762.  goto L275640;
  #L275766.  return @kind void;
}
procedure `java.util.List` `b`(`c.a.e.d$a` v2 @kind this) @signature `Lc/a/e/d$a;.b:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L27559c.  v0:= new `java.util.ArrayList`;
  #L2755a0.  v1:= v2.`c.a.e.d$a.e` @type ^`java.util.List` @kind object;
  #L2755a4.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L2755aa.  v1:= v2.`c.a.e.d$a.e` @type ^`java.util.List` @kind object;
  #L2755ae.  call `clear`(v1) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L2755b4.  return v0 @kind object;
}
procedure `d.f` `c`(`c.a.e.d$a` v5 @kind this) @signature `Lc/a/e/d$a;.c:()Ld/f;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L275384.  call temp:= `h`(v5) @signature `Lc/a/e/d$a;.h:()I` @kind direct;
  #L27538a.  v0:= temp;
  #L27538c.  v1:= v0 ^& 128;
  #L275390.  v2:= 128I;
  #L275394.  if v1 != v2 then goto L27539c;
  #L275398.  v1:= 1I;
  #L27539a.  goto L27539e;
  #L27539c.  v1:= 0I;
  #L27539e.  v2:= 127I;
  #L2753a2.  call temp:= `a`(v5, v0, v2) @signature `Lc/a/e/d$a;.a:(II)I` @kind virtual;
  #L2753a8.  v0:= temp;
  #L2753aa.  if v1 == 0 then goto L2753d6;
  #L2753ae.  call temp:= `a`() @signature `Lc/a/e/k;.a:()Lc/a/e/k;` @kind static;
  #L2753b4.  v1:= temp @kind object;
  #L2753b6.  v2:= v5.`c.a.e.d$a.f` @type ^`d.e` @kind object;
  #L2753ba.  v3:= (`long`) v0 @kind i2l;
  #L2753bc.  call temp:= `g`(v2, v3) @signature `Ld/e;.g:(J)[B` @kind interface;
  #L2753c2.  v0:= temp @kind object;
  #L2753c4.  call temp:= `a`(v1, v0) @signature `Lc/a/e/k;.a:([B)[B` @kind virtual;
  #L2753ca.  v0:= temp @kind object;
  #L2753cc.  call temp:= `a`(v0) @signature `Ld/f;.a:([B)Ld/f;` @kind static;
  #L2753d2.  v0:= temp @kind object;
  #L2753d4.  return v0 @kind object;
  #L2753d6.  v1:= v5.`c.a.e.d$a.f` @type ^`d.e` @kind object;
  #L2753da.  v2:= (`long`) v0 @kind i2l;
  #L2753dc.  call temp:= `c`(v1, v2) @signature `Ld/e;.c:(J)Ld/f;` @kind interface;
  #L2753e2.  v0:= temp @kind object;
  #L2753e4.  return v0 @kind object;
}
