record `c.a.e.h$a` @kind class @AccessFlag FINAL extends `d.s` @kind interface {
  `int` `c.a.e.h$a.a` @AccessFlag ;
  `byte` `c.a.e.h$a.b` @AccessFlag ;
  `int` `c.a.e.h$a.c` @AccessFlag ;
  `int` `c.a.e.h$a.d` @AccessFlag ;
  `short` `c.a.e.h$a.e` @AccessFlag ;
  `d.e` `c.a.e.h$a.f` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`c.a.e.h$a` v0 @kind this, `d.e` v1 @kind object) @signature `Lc/a/e/h$a;.<init>:(Ld/e;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L278b40.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L278b46.  v0.`c.a.e.h$a.f` @type ^`d.e` := v1 @kind object;
  #L278b4a.  return @kind void;
}
procedure `void` `b`(`c.a.e.h$a` v7 @kind this) @signature `Lc/a/e/h$a;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L278b5c.  v0:= v7.`c.a.e.h$a.c` @type ^`int`;
  #L278b60.  v1:= v7.`c.a.e.h$a.f` @type ^`d.e` @kind object;
  #L278b64.  call temp:= `a`(v1) @signature `Lc/a/e/h;.a:(Ld/e;)I` @kind static;
  #L278b6a.  v1:= temp;
  #L278b6c.  v7.`c.a.e.h$a.d` @type ^`int` := v1;
  #L278b70.  v7.`c.a.e.h$a.a` @type ^`int` := v1;
  #L278b74.  v1:= v7.`c.a.e.h$a.f` @type ^`d.e` @kind object;
  #L278b78.  call temp:= `g`(v1) @signature `Ld/e;.g:()B` @kind interface;
  #L278b7e.  v1:= temp;
  #L278b80.  v1:= v1 ^& 255;
  #L278b84.  v1:= (`byte`) v1 @kind i2b;
  #L278b86.  v2:= v7.`c.a.e.h$a.f` @type ^`d.e` @kind object;
  #L278b8a.  call temp:= `g`(v2) @signature `Ld/e;.g:()B` @kind interface;
  #L278b90.  v2:= temp;
  #L278b92.  v2:= v2 ^& 255;
  #L278b96.  v2:= (`byte`) v2 @kind i2b;
  #L278b98.  v7.`c.a.e.h$a.b` @type ^`byte` := v2 @kind byte;
  #L278b9c.  v2:= `@@c.a.e.h.a` @type ^`java.util.logging.Logger` @kind object;
  #L278ba0.  v3:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L278ba4.  call temp:= `isLoggable`(v2, v3) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L278baa.  v2:= temp;
  #L278bac.  v3:= 1I;
  #L278bae.  if v2 == 0 then goto L278bd0;
  #L278bb2.  v2:= `@@c.a.e.h.a` @type ^`java.util.logging.Logger` @kind object;
  #L278bb6.  v4:= v7.`c.a.e.h$a.c` @type ^`int`;
  #L278bba.  v5:= v7.`c.a.e.h$a.a` @type ^`int`;
  #L278bbe.  v6:= v7.`c.a.e.h$a.b` @type ^`byte` @kind byte;
  #L278bc2.  call temp:= `a`(v3, v4, v5, v1, v6) @signature `Lc/a/e/e;.a:(ZIIBB)Ljava/lang/String;` @kind static;
  #L278bc8.  v4:= temp @kind object;
  #L278bca.  call `fine`(v2, v4) @signature `Ljava/util/logging/Logger;.fine:(Ljava/lang/String;)V` @kind virtual;
  #L278bd0.  v2:= v7.`c.a.e.h$a.f` @type ^`d.e` @kind object;
  #L278bd4.  call temp:= `i`(v2) @signature `Ld/e;.i:()I` @kind interface;
  #L278bda.  v2:= temp;
  #L278bdc.  v4:= 2147483647I;
  #L278be2.  v2:= v2 ^& v4 @kind int;
  #L278be4.  v7.`c.a.e.h$a.c` @type ^`int` := v2;
  #L278be8.  v2:= 9I;
  #L278bec.  v4:= 0I;
  #L278bee.  if v1 == v2 then goto L278c10;
  #L278bf2.  v0:= "%s != TYPE_CONTINUATION" @kind object;
  #L278bf6.  v2:= new `java.lang.Object`[v3];
  #L278bfa.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Byte;.valueOf:(B)Ljava/lang/Byte;` @kind static;
  #L278c00.  v1:= temp @kind object;
  #L278c02.  v2[v4]:= v1 @kind object;
  #L278c06.  call temp:= `b`(v0, v2) @signature `Lc/a/e/e;.b:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L278c0c.  v0:= temp @kind object;
  #L278c0e.  throw v0;
  #L278c10.  v1:= v7.`c.a.e.h$a.c` @type ^`int`;
  #L278c14.  if v1 == v0 then goto L278c2a;
  #L278c18.  v0:= "TYPE_CONTINUATION streamId changed" @kind object;
  #L278c1c.  v1:= new `java.lang.Object`[v4];
  #L278c20.  call temp:= `b`(v0, v1) @signature `Lc/a/e/e;.b:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L278c26.  v0:= temp @kind object;
  #L278c28.  throw v0;
  #L278c2a.  return @kind void;
}
procedure `long` `a`(`c.a.e.h$a` v5 @kind this, `d.c` v6 @kind object, `long` v7 ) @signature `Lc/a/e/h$a;.a:(Ld/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L278ac0.  v0:= v5.`c.a.e.h$a.d` @type ^`int`;
  #L278ac4.  v1:= -1L;
  #L278ac8.  if v0 != 0 then goto L278af8;
  #L278acc.  v0:= v5.`c.a.e.h$a.f` @type ^`d.e` @kind object;
  #L278ad0.  v3:= v5.`c.a.e.h$a.e` @type ^`short` @kind short;
  #L278ad4.  v3:= (`long`) v3 @kind i2l;
  #L278ad6.  call `h`(v0, v3) @signature `Ld/e;.h:(J)V` @kind interface;
  #L278adc.  v0:= 0I;
  #L278ade.  v5.`c.a.e.h$a.e` @type ^`short` := v0 @kind char;
  #L278ae2.  v0:= v5.`c.a.e.h$a.b` @type ^`byte` @kind byte;
  #L278ae6.  v0:= v0 ^& 4;
  #L278aea.  if v0 == 0 then goto L278af0;
  #L278aee.  return v1 @kind wide;
  #L278af0.  call `b`(v5) @signature `Lc/a/e/h$a;.b:()V` @kind direct;
  #L278af6.  goto L278ac0;
  #L278af8.  v0:= v5.`c.a.e.h$a.f` @type ^`d.e` @kind object;
  #L278afc.  v3:= v5.`c.a.e.h$a.d` @type ^`int`;
  #L278b00.  v3:= (`long`) v3 @kind i2l;
  #L278b02.  call temp:= `min`(v7, v3) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L278b08.  v7:= temp @kind wide;
  #L278b0a.  call temp:= `a`(v0, v6, v7) @signature `Ld/e;.a:(Ld/c;J)J` @kind interface;
  #L278b10.  v6:= temp @kind wide;
  #L278b12.  v8:= lcmp(v6, v1);
  #L278b16.  if v8 != 0 then goto L278b1c;
  #L278b1a.  return v1 @kind wide;
  #L278b1c.  v8:= v5.`c.a.e.h$a.d` @type ^`int`;
  #L278b20.  v0:= (`long`) v8 @kind i2l;
  #L278b22.  v2:= v0 - v6 @kind long;
  #L278b26.  v8:= (`int`) v2 @kind l2i;
  #L278b28.  v5.`c.a.e.h$a.d` @type ^`int` := v8;
  #L278b2c.  return v6 @kind wide;
}
procedure `d.t` `a`(`c.a.e.h$a` v1 @kind this) @signature `Lc/a/e/h$a;.a:()Ld/t;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L278aa0.  v0:= v1.`c.a.e.h$a.f` @type ^`d.e` @kind object;
  #L278aa4.  call temp:= `a`(v0) @signature `Ld/e;.a:()Ld/t;` @kind interface;
  #L278aaa.  v0:= temp @kind object;
  #L278aac.  return v0 @kind object;
}
procedure `void` `close`(`c.a.e.h$a` v0 @kind this) @signature `Lc/a/e/h$a;.close:()V` @AccessFlag PUBLIC {
    temp;

  #L278c3c.  return @kind void;
}
