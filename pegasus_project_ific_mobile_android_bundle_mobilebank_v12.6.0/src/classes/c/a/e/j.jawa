record `c.a.e.j` @kind class @AccessFlag FINAL extends `java.io.Closeable` @kind interface {
  `c.a.e.d$b` `c.a.e.j.a` @AccessFlag FINAL;
  `d.d` `c.a.e.j.c` @AccessFlag PRIVATE_FINAL;
  `boolean` `c.a.e.j.d` @AccessFlag PRIVATE_FINAL;
  `d.c` `c.a.e.j.e` @AccessFlag PRIVATE_FINAL;
  `int` `c.a.e.j.f` @AccessFlag PRIVATE;
  `boolean` `c.a.e.j.g` @AccessFlag PRIVATE;
}
global `java.util.logging.Logger` `@@c.a.e.j.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lc/a/e/j;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L27a570.  v0:= constclass @type ^`c.a.e.e` @kind object;
  #L27a574.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L27a57a.  v0:= temp @kind object;
  #L27a57c.  call temp:= `getLogger`(v0) @signature `Ljava/util/logging/Logger;.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;` @kind static;
  #L27a582.  v0:= temp @kind object;
  #L27a584.  `@@c.a.e.j.b` @type ^`java.util.logging.Logger` := v0 @kind object;
  #L27a588.  return @kind void;
}
procedure `void` `<init>`(`c.a.e.j` v0 @kind this, `d.d` v1 @kind object, `boolean` v2 ) @signature `Lc/a/e/j;.<init>:(Ld/d;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L27a59c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L27a5a2.  v0.`c.a.e.j.c` @type ^`d.d` := v1 @kind object;
  #L27a5a6.  v0.`c.a.e.j.d` @type ^`boolean` := v2 @kind boolean;
  #L27a5aa.  v1:= new `d.c`;
  #L27a5ae.  call `<init>`(v1) @signature `Ld/c;.<init>:()V` @kind direct;
  #L27a5b4.  v0.`c.a.e.j.e` @type ^`d.c` := v1 @kind object;
  #L27a5b8.  v1:= new `c.a.e.d$b`;
  #L27a5bc.  v2:= v0.`c.a.e.j.e` @type ^`d.c` @kind object;
  #L27a5c0.  call `<init>`(v1, v2) @signature `Lc/a/e/d$b;.<init>:(Ld/c;)V` @kind direct;
  #L27a5c6.  v0.`c.a.e.j.a` @type ^`c.a.e.d$b` := v1 @kind object;
  #L27a5ca.  v1:= 16384I;
  #L27a5ce.  v0.`c.a.e.j.f` @type ^`int` := v1;
  #L27a5d2.  return @kind void;
}
procedure `void` `a`(`d.d` v1 @kind object, `int` v2 ) @signature `Lc/a/e/j;.a:(Ld/d;I)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L27a8bc.  v0:= v2 ^>> 16;
  #L27a8c0.  v0:= v0 ^& 255;
  #L27a8c4.  call temp:= `i`(v1, v0) @signature `Ld/d;.i:(I)Ld/d;` @kind interface;
  #L27a8ca.  v0:= v2 ^>> 8;
  #L27a8ce.  v0:= v0 ^& 255;
  #L27a8d2.  call temp:= `i`(v1, v0) @signature `Ld/d;.i:(I)Ld/d;` @kind interface;
  #L27a8d8.  v2:= v2 ^& 255;
  #L27a8dc.  call temp:= `i`(v1, v2) @signature `Ld/d;.i:(I)Ld/d;` @kind interface;
  #L27a8e2.  return @kind void;
}
procedure `void` `b`(`c.a.e.j` v7 @kind this, `int` v8 , `long` v9 ) @signature `Lc/a/e/j;.b:(IJ)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L27ad68.  v0:= 0L;
  #L27ad6c.  v2:= lcmp(v9, v0);
  #L27ad70.  if v2 <= 0 then goto L27adb4;
  #L27ad74.  v2:= v7.`c.a.e.j.f` @type ^`int`;
  #L27ad78.  v2:= (`long`) v2 @kind i2l;
  #L27ad7a.  call temp:= `min`(v2, v9) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L27ad80.  v2:= temp @kind wide;
  #L27ad82.  v2:= (`int`) v2 @kind l2i;
  #L27ad84.  v3:= (`long`) v2 @kind i2l;
  #L27ad86.  v5:= v9 - v3 @kind long;
  #L27ad8a.  v9:= 9I;
  #L27ad8e.  v10:= lcmp(v5, v0);
  #L27ad92.  if v10 != 0 then goto L27ad9a;
  #L27ad96.  v10:= 4I;
  #L27ad98.  goto L27ad9c;
  #L27ad9a.  v10:= 0I;
  #L27ad9c.  call `a`(v7, v8, v2, v9, v10) @signature `Lc/a/e/j;.a:(IIBB)V` @kind virtual;
  #L27ada2.  v9:= v7.`c.a.e.j.c` @type ^`d.d` @kind object;
  #L27ada6.  v10:= v7.`c.a.e.j.e` @type ^`d.c` @kind object;
  #L27adaa.  call `a_`(v9, v10, v3) @signature `Ld/d;.a_:(Ld/c;J)V` @kind interface;
  #L27adb0.  v9:= v5 @kind wide;
  #L27adb2.  goto L27ad68;
  #L27adb4.  return @kind void;
}
procedure `void` `a`(`c.a.e.j` v5 @kind this) @signature `Lc/a/e/j;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L27a5e4.  @monitorenter v5
  #L27a5e6.  v0:= v5.`c.a.e.j.g` @type ^`boolean` @kind boolean;
  #L27a5ea.  if v0 == 0 then goto L27a5fe;
  #L27a5ee.  v0:= new `java.io.IOException`;
  #L27a5f2.  v1:= "closed" @kind object;
  #L27a5f6.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L27a5fc.  throw v0;
  #L27a5fe.  v0:= v5.`c.a.e.j.d` @type ^`boolean` @kind boolean;
  #L27a602.  if v0 != 0 then goto L27a60a;
  #L27a606.  @monitorexit v5
  #L27a608.  return @kind void;
  #L27a60a.  v0:= `@@c.a.e.j.b` @type ^`java.util.logging.Logger` @kind object;
  #L27a60e.  v1:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L27a612.  call temp:= `isLoggable`(v0, v1) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L27a618.  v0:= temp;
  #L27a61a.  if v0 == 0 then goto L27a64c;
  #L27a61e.  v0:= `@@c.a.e.j.b` @type ^`java.util.logging.Logger` @kind object;
  #L27a622.  v1:= ">> CONNECTION %s" @kind object;
  #L27a626.  v2:= 1I;
  #L27a628.  v2:= new `java.lang.Object`[v2];
  #L27a62c.  v3:= 0I;
  #L27a62e.  v4:= `@@c.a.e.e.a` @type ^`d.f` @kind object;
  #L27a632.  call temp:= `e`(v4) @signature `Ld/f;.e:()Ljava/lang/String;` @kind virtual;
  #L27a638.  v4:= temp @kind object;
  #L27a63a.  v2[v3]:= v4 @kind object;
  #L27a63e.  call temp:= `a`(v1, v2) @signature `Lc/a/c;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L27a644.  v1:= temp @kind object;
  #L27a646.  call `fine`(v0, v1) @signature `Ljava/util/logging/Logger;.fine:(Ljava/lang/String;)V` @kind virtual;
  #L27a64c.  v0:= v5.`c.a.e.j.c` @type ^`d.d` @kind object;
  #L27a650.  v1:= `@@c.a.e.e.a` @type ^`d.f` @kind object;
  #L27a654.  call temp:= `h`(v1) @signature `Ld/f;.h:()[B` @kind virtual;
  #L27a65a.  v1:= temp @kind object;
  #L27a65c.  call temp:= `c`(v0, v1) @signature `Ld/d;.c:([B)Ld/d;` @kind interface;
  #L27a662.  v0:= v5.`c.a.e.j.c` @type ^`d.d` @kind object;
  #L27a666.  call `flush`(v0) @signature `Ld/d;.flush:()V` @kind interface;
  #L27a66c.  @monitorexit v5
  #L27a66e.  return @kind void;
  #L27a670.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L27a672.  @monitorexit v5
  #L27a674.  throw v0;
  catch `java.lang.Throwable` @[L27a5e6..L27a602] goto L27a670;
  catch `java.lang.Throwable` @[L27a60a..L27a66c] goto L27a670;
}
procedure `void` `a`(`c.a.e.j` v2 @kind this, `int` v3 , `byte` v4 , `d.c` v5 @kind object, `int` v6 ) @signature `Lc/a/e/j;.a:(IBLd/c;I)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L27a8f4.  v0:= 0I;
  #L27a8f6.  call `a`(v2, v3, v6, v0, v4) @signature `Lc/a/e/j;.a:(IIBB)V` @kind virtual;
  #L27a8fc.  if v6 <= 0 then goto L27a90c;
  #L27a900.  v3:= v2.`c.a.e.j.c` @type ^`d.d` @kind object;
  #L27a904.  v0:= (`long`) v6 @kind i2l;
  #L27a906.  call `a_`(v3, v5, v0) @signature `Ld/d;.a_:(Ld/c;J)V` @kind interface;
  #L27a90c.  return @kind void;
}
procedure `void` `a`(`c.a.e.j` v3 @kind this, `int` v4 , `int` v5 , `byte` v6 , `byte` v7 ) @signature `Lc/a/e/j;.a:(IIBB)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L27aa3c.  v0:= `@@c.a.e.j.b` @type ^`java.util.logging.Logger` @kind object;
  #L27aa40.  v1:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L27aa44.  call temp:= `isLoggable`(v0, v1) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L27aa4a.  v0:= temp;
  #L27aa4c.  v1:= 0I;
  #L27aa4e.  if v0 == 0 then goto L27aa64;
  #L27aa52.  v0:= `@@c.a.e.j.b` @type ^`java.util.logging.Logger` @kind object;
  #L27aa56.  call temp:= `a`(v1, v4, v5, v6, v7) @signature `Lc/a/e/e;.a:(ZIIBB)Ljava/lang/String;` @kind static;
  #L27aa5c.  v2:= temp @kind object;
  #L27aa5e.  call `fine`(v0, v2) @signature `Ljava/util/logging/Logger;.fine:(Ljava/lang/String;)V` @kind virtual;
  #L27aa64.  v0:= v3.`c.a.e.j.f` @type ^`int`;
  #L27aa68.  v2:= 1I;
  #L27aa6a.  if v5 <= v0 then goto L27aa9e;
  #L27aa6e.  v4:= "FRAME_SIZE_ERROR length > %d: %d" @kind object;
  #L27aa72.  v6:= 2I;
  #L27aa74.  v6:= new `java.lang.Object`[v6];
  #L27aa78.  v7:= v3.`c.a.e.j.f` @type ^`int`;
  #L27aa7c.  call temp:= `valueOf`(v7) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L27aa82.  v7:= temp @kind object;
  #L27aa84.  v6[v1]:= v7 @kind object;
  #L27aa88.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L27aa8e.  v5:= temp @kind object;
  #L27aa90.  v6[v2]:= v5 @kind object;
  #L27aa94.  call temp:= `a`(v4, v6) @signature `Lc/a/e/e;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalArgumentException;` @kind static;
  #L27aa9a.  v4:= temp @kind object;
  #L27aa9c.  throw v4;
  #L27aa9e.  v0:= -2147483648I;
  #L27aaa2.  v0:= v0 ^& v4 @kind int;
  #L27aaa4.  if v0 == 0 then goto L27aac6;
  #L27aaa8.  v5:= "reserved bit set: %s" @kind object;
  #L27aaac.  v6:= new `java.lang.Object`[v2];
  #L27aab0.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L27aab6.  v4:= temp @kind object;
  #L27aab8.  v6[v1]:= v4 @kind object;
  #L27aabc.  call temp:= `a`(v5, v6) @signature `Lc/a/e/e;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalArgumentException;` @kind static;
  #L27aac2.  v4:= temp @kind object;
  #L27aac4.  throw v4;
  #L27aac6.  v0:= v3.`c.a.e.j.c` @type ^`d.d` @kind object;
  #L27aaca.  call `a`(v0, v5) @signature `Lc/a/e/j;.a:(Ld/d;I)V` @kind static;
  #L27aad0.  v5:= v3.`c.a.e.j.c` @type ^`d.d` @kind object;
  #L27aad4.  v6:= v6 ^& 255;
  #L27aad8.  call temp:= `i`(v5, v6) @signature `Ld/d;.i:(I)Ld/d;` @kind interface;
  #L27aade.  v5:= v3.`c.a.e.j.c` @type ^`d.d` @kind object;
  #L27aae2.  v6:= v7 ^& 255;
  #L27aae6.  call temp:= `i`(v5, v6) @signature `Ld/d;.i:(I)Ld/d;` @kind interface;
  #L27aaec.  v5:= v3.`c.a.e.j.c` @type ^`d.d` @kind object;
  #L27aaf0.  v6:= 2147483647I;
  #L27aaf6.  v4:= v4 ^& v6 @kind int;
  #L27aaf8.  call temp:= `g`(v5, v4) @signature `Ld/d;.g:(I)Ld/d;` @kind interface;
  #L27aafe.  return @kind void;
}
procedure `void` `a`(`c.a.e.j` v7 @kind this, `int` v8 , `int` v9 , `java.util.List` v10 @kind object) @signature `Lc/a/e/j;.a:(IILjava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L27ab10.  @monitorenter v7
  #L27ab12.  v0:= v7.`c.a.e.j.g` @type ^`boolean` @kind boolean;
  #L27ab16.  if v0 == 0 then goto L27ab2a;
  #L27ab1a.  v8:= new `java.io.IOException`;
  #L27ab1e.  v9:= "closed" @kind object;
  #L27ab22.  call `<init>`(v8, v9) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L27ab28.  throw v8;
  #L27ab2a.  v0:= v7.`c.a.e.j.a` @type ^`c.a.e.d$b` @kind object;
  #L27ab2e.  call `a`(v0, v10) @signature `Lc/a/e/d$b;.a:(Ljava/util/List;)V` @kind virtual;
  #L27ab34.  v10:= v7.`c.a.e.j.e` @type ^`d.c` @kind object;
  #L27ab38.  call temp:= `b`(v10) @signature `Ld/c;.b:()J` @kind virtual;
  #L27ab3e.  v0:= temp @kind wide;
  #L27ab40.  v10:= v7.`c.a.e.j.f` @type ^`int`;
  #L27ab44.  v2:= 4I;
  #L27ab46.  v10:= v10 - v2 @kind int;
  #L27ab48.  v3:= (`long`) v10 @kind i2l;
  #L27ab4a.  call temp:= `min`(v3, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L27ab50.  v3:= temp @kind wide;
  #L27ab52.  v10:= (`int`) v3 @kind l2i;
  #L27ab54.  v3:= 5I;
  #L27ab56.  v4:= (`long`) v10 @kind i2l;
  #L27ab58.  v6:= lcmp(v0, v4);
  #L27ab5c.  if v6 != 0 then goto L27ab64;
  #L27ab60.  v6:= 4I;
  #L27ab62.  goto L27ab66;
  #L27ab64.  v6:= 0I;
  #L27ab66.  v10:= v10 + v2 @kind int;
  #L27ab68.  call `a`(v7, v8, v10, v3, v6) @signature `Lc/a/e/j;.a:(IIBB)V` @kind virtual;
  #L27ab6e.  v10:= v7.`c.a.e.j.c` @type ^`d.d` @kind object;
  #L27ab72.  v2:= 2147483647I;
  #L27ab78.  v9:= v9 ^& v2 @kind int;
  #L27ab7a.  call temp:= `g`(v10, v9) @signature `Ld/d;.g:(I)Ld/d;` @kind interface;
  #L27ab80.  v9:= v7.`c.a.e.j.c` @type ^`d.d` @kind object;
  #L27ab84.  v10:= v7.`c.a.e.j.e` @type ^`d.c` @kind object;
  #L27ab88.  call `a_`(v9, v10, v4) @signature `Ld/d;.a_:(Ld/c;J)V` @kind interface;
  #L27ab8e.  v9:= lcmp(v0, v4);
  #L27ab92.  if v9 <= 0 then goto L27aba0;
  #L27ab96.  v9:= v0 - v4 @kind long;
  #L27ab9a.  call `b`(v7, v8, v9) @signature `Lc/a/e/j;.b:(IJ)V` @kind direct;
  #L27aba0.  @monitorexit v7
  #L27aba2.  return @kind void;
  #L27aba4.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L27aba6.  @monitorexit v7
  #L27aba8.  throw v8;
  catch `java.lang.Throwable` @[L27ab12..L27aba0] goto L27aba4;
}
procedure `void` `a`(`c.a.e.j` v4 @kind this, `int` v5 , `long` v6 ) @signature `Lc/a/e/j;.a:(IJ)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L27abc8.  @monitorenter v4
  #L27abca.  v0:= v4.`c.a.e.j.g` @type ^`boolean` @kind boolean;
  #L27abce.  if v0 == 0 then goto L27abe2;
  #L27abd2.  v5:= new `java.io.IOException`;
  #L27abd6.  v6:= "closed" @kind object;
  #L27abda.  call `<init>`(v5, v6) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L27abe0.  throw v5;
  #L27abe2.  v0:= 0L;
  #L27abe6.  v2:= lcmp(v6, v0);
  #L27abea.  v0:= 0I;
  #L27abec.  if v2 == 0 then goto L27ac26;
  #L27abf0.  v1:= 2147483647L;
  #L27abf6.  v3:= lcmp(v6, v1);
  #L27abfa.  if v3 <= 0 then goto L27ac00;
  #L27abfe.  goto L27ac26;
  #L27ac00.  v1:= 4I;
  #L27ac02.  v2:= 8I;
  #L27ac06.  call `a`(v4, v5, v1, v2, v0) @signature `Lc/a/e/j;.a:(IIBB)V` @kind virtual;
  #L27ac0c.  v5:= v4.`c.a.e.j.c` @type ^`d.d` @kind object;
  #L27ac10.  v6:= (`int`) v6 @kind l2i;
  #L27ac12.  call temp:= `g`(v5, v6) @signature `Ld/d;.g:(I)Ld/d;` @kind interface;
  #L27ac18.  v5:= v4.`c.a.e.j.c` @type ^`d.d` @kind object;
  #L27ac1c.  call `flush`(v5) @signature `Ld/d;.flush:()V` @kind interface;
  #L27ac22.  @monitorexit v4
  #L27ac24.  return @kind void;
  #L27ac26.  v5:= "windowSizeIncrement == 0 || windowSizeIncrement > 0x7fffffffL: %s" @kind object;
  #L27ac2a.  v1:= 1I;
  #L27ac2c.  v1:= new `java.lang.Object`[v1];
  #L27ac30.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L27ac36.  v6:= temp @kind object;
  #L27ac38.  v1[v0]:= v6 @kind object;
  #L27ac3c.  call temp:= `a`(v5, v1) @signature `Lc/a/e/e;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalArgumentException;` @kind static;
  #L27ac42.  v5:= temp @kind object;
  #L27ac44.  throw v5;
  #L27ac46.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L27ac48.  @monitorexit v4
  #L27ac4a.  throw v5;
  catch `java.lang.Throwable` @[L27abca..L27ac22] goto L27ac46;
  catch `java.lang.Throwable` @[L27ac26..L27ac46] goto L27ac46;
}
procedure `void` `a`(`c.a.e.j` v3 @kind this, `int` v4 , `c.a.e.b` v5 @kind object) @signature `Lc/a/e/j;.a:(ILc/a/e/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L27a920.  @monitorenter v3
  #L27a922.  v0:= v3.`c.a.e.j.g` @type ^`boolean` @kind boolean;
  #L27a926.  if v0 == 0 then goto L27a93a;
  #L27a92a.  v4:= new `java.io.IOException`;
  #L27a92e.  v5:= "closed" @kind object;
  #L27a932.  call `<init>`(v4, v5) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L27a938.  throw v4;
  #L27a93a.  v0:= v5.`c.a.e.b.l` @type ^`int`;
  #L27a93e.  v1:= -1I;
  #L27a940.  if v0 != v1 then goto L27a950;
  #L27a944.  v4:= new `java.lang.IllegalArgumentException`;
  #L27a948.  call `<init>`(v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L27a94e.  throw v4;
  #L27a950.  v0:= 4I;
  #L27a952.  v1:= 3I;
  #L27a954.  v2:= 0I;
  #L27a956.  call `a`(v3, v4, v0, v1, v2) @signature `Lc/a/e/j;.a:(IIBB)V` @kind virtual;
  #L27a95c.  v4:= v3.`c.a.e.j.c` @type ^`d.d` @kind object;
  #L27a960.  v5:= v5.`c.a.e.b.l` @type ^`int`;
  #L27a964.  call temp:= `g`(v4, v5) @signature `Ld/d;.g:(I)Ld/d;` @kind interface;
  #L27a96a.  v4:= v3.`c.a.e.j.c` @type ^`d.d` @kind object;
  #L27a96e.  call `flush`(v4) @signature `Ld/d;.flush:()V` @kind interface;
  #L27a974.  @monitorexit v3
  #L27a976.  return @kind void;
  #L27a978.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L27a97a.  @monitorexit v3
  #L27a97c.  throw v4;
  catch `java.lang.Throwable` @[L27a922..L27a974] goto L27a978;
}
procedure `void` `a`(`c.a.e.j` v3 @kind this, `int` v4 , `c.a.e.b` v5 @kind object, `byte`[] v6 @kind object) @signature `Lc/a/e/j;.a:(ILc/a/e/b;[B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L27a99c.  @monitorenter v3
  #L27a99e.  v0:= v3.`c.a.e.j.g` @type ^`boolean` @kind boolean;
  #L27a9a2.  if v0 == 0 then goto L27a9b6;
  #L27a9a6.  v4:= new `java.io.IOException`;
  #L27a9aa.  v5:= "closed" @kind object;
  #L27a9ae.  call `<init>`(v4, v5) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L27a9b4.  throw v4;
  #L27a9b6.  v0:= v5.`c.a.e.b.l` @type ^`int`;
  #L27a9ba.  v1:= -1I;
  #L27a9bc.  v2:= 0I;
  #L27a9be.  if v0 != v1 then goto L27a9d4;
  #L27a9c2.  v4:= "errorCode.httpCode == -1" @kind object;
  #L27a9c6.  v5:= new `java.lang.Object`[v2];
  #L27a9ca.  call temp:= `a`(v4, v5) @signature `Lc/a/e/e;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalArgumentException;` @kind static;
  #L27a9d0.  v4:= temp @kind object;
  #L27a9d2.  throw v4;
  #L27a9d4.  v0:= length @variable v6;
  #L27a9d6.  v0:= v0 + 8;
  #L27a9da.  v1:= 7I;
  #L27a9dc.  call `a`(v3, v2, v0, v1, v2) @signature `Lc/a/e/j;.a:(IIBB)V` @kind virtual;
  #L27a9e2.  v0:= v3.`c.a.e.j.c` @type ^`d.d` @kind object;
  #L27a9e6.  call temp:= `g`(v0, v4) @signature `Ld/d;.g:(I)Ld/d;` @kind interface;
  #L27a9ec.  v4:= v3.`c.a.e.j.c` @type ^`d.d` @kind object;
  #L27a9f0.  v5:= v5.`c.a.e.b.l` @type ^`int`;
  #L27a9f4.  call temp:= `g`(v4, v5) @signature `Ld/d;.g:(I)Ld/d;` @kind interface;
  #L27a9fa.  v4:= length @variable v6;
  #L27a9fc.  if v4 <= 0 then goto L27aa0a;
  #L27aa00.  v4:= v3.`c.a.e.j.c` @type ^`d.d` @kind object;
  #L27aa04.  call temp:= `c`(v4, v6) @signature `Ld/d;.c:([B)Ld/d;` @kind interface;
  #L27aa0a.  v4:= v3.`c.a.e.j.c` @type ^`d.d` @kind object;
  #L27aa0e.  call `flush`(v4) @signature `Ld/d;.flush:()V` @kind interface;
  #L27aa14.  @monitorexit v3
  #L27aa16.  return @kind void;
  #L27aa18.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L27aa1a.  @monitorexit v3
  #L27aa1c.  throw v4;
  catch `java.lang.Throwable` @[L27a99e..L27aa14] goto L27aa18;
}
procedure `void` `a`(`c.a.e.j` v2 @kind this, `c.a.e.m` v3 @kind object) @signature `Lc/a/e/j;.a:(Lc/a/e/m;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L27a834.  @monitorenter v2
  #L27a836.  v0:= v2.`c.a.e.j.g` @type ^`boolean` @kind boolean;
  #L27a83a.  if v0 == 0 then goto L27a84e;
  #L27a83e.  v3:= new `java.io.IOException`;
  #L27a842.  v0:= "closed" @kind object;
  #L27a846.  call `<init>`(v3, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L27a84c.  throw v3;
  #L27a84e.  v0:= v2.`c.a.e.j.f` @type ^`int`;
  #L27a852.  call temp:= `d`(v3, v0) @signature `Lc/a/e/m;.d:(I)I` @kind virtual;
  #L27a858.  v0:= temp;
  #L27a85a.  v2.`c.a.e.j.f` @type ^`int` := v0;
  #L27a85e.  call temp:= `c`(v3) @signature `Lc/a/e/m;.c:()I` @kind virtual;
  #L27a864.  v0:= temp;
  #L27a866.  v1:= -1I;
  #L27a868.  if v0 == v1 then goto L27a87e;
  #L27a86c.  v0:= v2.`c.a.e.j.a` @type ^`c.a.e.d$b` @kind object;
  #L27a870.  call temp:= `c`(v3) @signature `Lc/a/e/m;.c:()I` @kind virtual;
  #L27a876.  v3:= temp;
  #L27a878.  call `a`(v0, v3) @signature `Lc/a/e/d$b;.a:(I)V` @kind virtual;
  #L27a87e.  v3:= 4I;
  #L27a880.  v0:= 1I;
  #L27a882.  v1:= 0I;
  #L27a884.  call `a`(v2, v1, v1, v3, v0) @signature `Lc/a/e/j;.a:(IIBB)V` @kind virtual;
  #L27a88a.  v3:= v2.`c.a.e.j.c` @type ^`d.d` @kind object;
  #L27a88e.  call `flush`(v3) @signature `Ld/d;.flush:()V` @kind interface;
  #L27a894.  @monitorexit v2
  #L27a896.  return @kind void;
  #L27a898.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L27a89a.  @monitorexit v2
  #L27a89c.  throw v3;
  catch `java.lang.Throwable` @[L27a836..L27a894] goto L27a898;
}
procedure `void` `a`(`c.a.e.j` v3 @kind this, `boolean` v4 , `int` v5 , `int` v6 ) @signature `Lc/a/e/j;.a:(ZII)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L27a6ec.  @monitorenter v3
  #L27a6ee.  v0:= v3.`c.a.e.j.g` @type ^`boolean` @kind boolean;
  #L27a6f2.  if v0 == 0 then goto L27a706;
  #L27a6f6.  v4:= new `java.io.IOException`;
  #L27a6fa.  v5:= "closed" @kind object;
  #L27a6fe.  call `<init>`(v4, v5) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L27a704.  throw v4;
  #L27a706.  v0:= 8I;
  #L27a70a.  v1:= 6I;
  #L27a70c.  v2:= 0I;
  #L27a70e.  call `a`(v3, v2, v0, v1, v4) @signature `Lc/a/e/j;.a:(IIBB)V` @kind virtual;
  #L27a714.  v4:= v3.`c.a.e.j.c` @type ^`d.d` @kind object;
  #L27a718.  call temp:= `g`(v4, v5) @signature `Ld/d;.g:(I)Ld/d;` @kind interface;
  #L27a71e.  v4:= v3.`c.a.e.j.c` @type ^`d.d` @kind object;
  #L27a722.  call temp:= `g`(v4, v6) @signature `Ld/d;.g:(I)Ld/d;` @kind interface;
  #L27a728.  v4:= v3.`c.a.e.j.c` @type ^`d.d` @kind object;
  #L27a72c.  call `flush`(v4) @signature `Ld/d;.flush:()V` @kind interface;
  #L27a732.  @monitorexit v3
  #L27a734.  return @kind void;
  #L27a736.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L27a738.  @monitorexit v3
  #L27a73a.  throw v4;
  catch `java.lang.Throwable` @[L27a6ee..L27a732] goto L27a736;
}
procedure `void` `a`(`c.a.e.j` v0 @kind this, `boolean` v1 , `int` v2 , `int` v3 , `java.util.List` v4 @kind object) @signature `Lc/a/e/j;.a:(ZIILjava/util/List;)V` @AccessFlag PUBLIC {
    temp;

  #L27a758.  @monitorenter v0
  #L27a75a.  v3:= v0.`c.a.e.j.g` @type ^`boolean` @kind boolean;
  #L27a75e.  if v3 == 0 then goto L27a772;
  #L27a762.  v1:= new `java.io.IOException`;
  #L27a766.  v2:= "closed" @kind object;
  #L27a76a.  call `<init>`(v1, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L27a770.  throw v1;
  #L27a772.  call `a`(v0, v1, v2, v4) @signature `Lc/a/e/j;.a:(ZILjava/util/List;)V` @kind virtual;
  #L27a778.  @monitorexit v0
  #L27a77a.  return @kind void;
  #L27a77c.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L27a77e.  @monitorexit v0
  #L27a780.  throw v1;
  catch `java.lang.Throwable` @[L27a75a..L27a778] goto L27a77c;
}
procedure `void` `a`(`c.a.e.j` v1 @kind this, `boolean` v2 , `int` v3 , `d.c` v4 @kind object, `int` v5 ) @signature `Lc/a/e/j;.a:(ZILd/c;I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27a69c.  @monitorenter v1
  #L27a69e.  v0:= v1.`c.a.e.j.g` @type ^`boolean` @kind boolean;
  #L27a6a2.  if v0 == 0 then goto L27a6b6;
  #L27a6a6.  v2:= new `java.io.IOException`;
  #L27a6aa.  v3:= "closed" @kind object;
  #L27a6ae.  call `<init>`(v2, v3) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L27a6b4.  throw v2;
  #L27a6b6.  v0:= 0I;
  #L27a6b8.  if v2 == 0 then goto L27a6c0;
  #L27a6bc.  v2:= 1I;
  #L27a6be.  v0:= (`byte`) v2 @kind i2b;
  #L27a6c0.  call `a`(v1, v3, v0, v4, v5) @signature `Lc/a/e/j;.a:(IBLd/c;I)V` @kind virtual;
  #L27a6c6.  @monitorexit v1
  #L27a6c8.  return @kind void;
  #L27a6ca.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L27a6cc.  @monitorexit v1
  #L27a6ce.  throw v2;
  catch `java.lang.Throwable` @[L27a69e..L27a6c6] goto L27a6ca;
}
procedure `void` `a`(`c.a.e.j` v6 @kind this, `boolean` v7 , `int` v8 , `java.util.List` v9 @kind object) @signature `Lc/a/e/j;.a:(ZILjava/util/List;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L27a7a0.  v0:= v6.`c.a.e.j.g` @type ^`boolean` @kind boolean;
  #L27a7a4.  if v0 == 0 then goto L27a7b8;
  #L27a7a8.  v7:= new `java.io.IOException`;
  #L27a7ac.  v8:= "closed" @kind object;
  #L27a7b0.  call `<init>`(v7, v8) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L27a7b6.  throw v7;
  #L27a7b8.  v0:= v6.`c.a.e.j.a` @type ^`c.a.e.d$b` @kind object;
  #L27a7bc.  call `a`(v0, v9) @signature `Lc/a/e/d$b;.a:(Ljava/util/List;)V` @kind virtual;
  #L27a7c2.  v9:= v6.`c.a.e.j.e` @type ^`d.c` @kind object;
  #L27a7c6.  call temp:= `b`(v9) @signature `Ld/c;.b:()J` @kind virtual;
  #L27a7cc.  v0:= temp @kind wide;
  #L27a7ce.  v9:= v6.`c.a.e.j.f` @type ^`int`;
  #L27a7d2.  v2:= (`long`) v9 @kind i2l;
  #L27a7d4.  call temp:= `min`(v2, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L27a7da.  v2:= temp @kind wide;
  #L27a7dc.  v9:= (`int`) v2 @kind l2i;
  #L27a7de.  v2:= (`long`) v9 @kind i2l;
  #L27a7e0.  v4:= lcmp(v0, v2);
  #L27a7e4.  if v4 != 0 then goto L27a7ec;
  #L27a7e8.  v4:= 4I;
  #L27a7ea.  goto L27a7ee;
  #L27a7ec.  v4:= 0I;
  #L27a7ee.  if v7 == 0 then goto L27a7f8;
  #L27a7f2.  v7:= v4 ^| 1;
  #L27a7f6.  v4:= (`byte`) v7 @kind i2b;
  #L27a7f8.  v7:= 1I;
  #L27a7fa.  call `a`(v6, v8, v9, v7, v4) @signature `Lc/a/e/j;.a:(IIBB)V` @kind virtual;
  #L27a800.  v7:= v6.`c.a.e.j.c` @type ^`d.d` @kind object;
  #L27a804.  v9:= v6.`c.a.e.j.e` @type ^`d.c` @kind object;
  #L27a808.  call `a_`(v7, v9, v2) @signature `Ld/d;.a_:(Ld/c;J)V` @kind interface;
  #L27a80e.  v7:= lcmp(v0, v2);
  #L27a812.  if v7 <= 0 then goto L27a820;
  #L27a816.  v4:= v0 - v2 @kind long;
  #L27a81a.  call `b`(v6, v8, v4) @signature `Lc/a/e/j;.b:(IJ)V` @kind direct;
  #L27a820.  return @kind void;
}
procedure `void` `b`(`c.a.e.j` v2 @kind this) @signature `Lc/a/e/j;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L27ac70.  @monitorenter v2
  #L27ac72.  v0:= v2.`c.a.e.j.g` @type ^`boolean` @kind boolean;
  #L27ac76.  if v0 == 0 then goto L27ac8a;
  #L27ac7a.  v0:= new `java.io.IOException`;
  #L27ac7e.  v1:= "closed" @kind object;
  #L27ac82.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L27ac88.  throw v0;
  #L27ac8a.  v0:= v2.`c.a.e.j.c` @type ^`d.d` @kind object;
  #L27ac8e.  call `flush`(v0) @signature `Ld/d;.flush:()V` @kind interface;
  #L27ac94.  @monitorexit v2
  #L27ac96.  return @kind void;
  #L27ac98.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L27ac9a.  @monitorexit v2
  #L27ac9c.  throw v0;
  catch `java.lang.Throwable` @[L27ac72..L27ac94] goto L27ac98;
}
procedure `void` `b`(`c.a.e.j` v4 @kind this, `c.a.e.m` v5 @kind object) @signature `Lc/a/e/j;.b:(Lc/a/e/m;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L27acbc.  @monitorenter v4
  #L27acbe.  v0:= v4.`c.a.e.j.g` @type ^`boolean` @kind boolean;
  #L27acc2.  if v0 == 0 then goto L27acd6;
  #L27acc6.  v5:= new `java.io.IOException`;
  #L27acca.  v0:= "closed" @kind object;
  #L27acce.  call `<init>`(v5, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L27acd4.  throw v5;
  #L27acd6.  call temp:= `b`(v5) @signature `Lc/a/e/m;.b:()I` @kind virtual;
  #L27acdc.  v0:= temp;
  #L27acde.  v0:= v0 * 6;
  #L27ace2.  v1:= 0I;
  #L27ace4.  v2:= 4I;
  #L27ace6.  call `a`(v4, v1, v0, v2, v1) @signature `Lc/a/e/j;.a:(IIBB)V` @kind virtual;
  #L27acec.  v0:= 10I;
  #L27acf0.  if v1 >= v0 then goto L27ad38;
  #L27acf4.  call temp:= `a`(v5, v1) @signature `Lc/a/e/m;.a:(I)Z` @kind virtual;
  #L27acfa.  v0:= temp;
  #L27acfc.  if v0 != 0 then goto L27ad02;
  #L27ad00.  goto L27ad32;
  #L27ad02.  if v1 != v2 then goto L27ad0a;
  #L27ad06.  v0:= 3I;
  #L27ad08.  goto L27ad16;
  #L27ad0a.  v0:= 7I;
  #L27ad0c.  if v1 != v0 then goto L27ad14;
  #L27ad10.  v0:= 4I;
  #L27ad12.  goto L27ad16;
  #L27ad14.  v0:= v1;
  #L27ad16.  v3:= v4.`c.a.e.j.c` @type ^`d.d` @kind object;
  #L27ad1a.  call temp:= `h`(v3, v0) @signature `Ld/d;.h:(I)Ld/d;` @kind interface;
  #L27ad20.  v0:= v4.`c.a.e.j.c` @type ^`d.d` @kind object;
  #L27ad24.  call temp:= `b`(v5, v1) @signature `Lc/a/e/m;.b:(I)I` @kind virtual;
  #L27ad2a.  v3:= temp;
  #L27ad2c.  call temp:= `g`(v0, v3) @signature `Ld/d;.g:(I)Ld/d;` @kind interface;
  #L27ad32.  v1:= v1 + 1;
  #L27ad36.  goto L27acec;
  #L27ad38.  v5:= v4.`c.a.e.j.c` @type ^`d.d` @kind object;
  #L27ad3c.  call `flush`(v5) @signature `Ld/d;.flush:()V` @kind interface;
  #L27ad42.  @monitorexit v4
  #L27ad44.  return @kind void;
  #L27ad46.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L27ad48.  @monitorexit v4
  #L27ad4a.  throw v5;
  catch `java.lang.Throwable` @[L27acbe..L27ad42] goto L27ad46;
}
procedure `int` `c`(`c.a.e.j` v1 @kind this) @signature `Lc/a/e/j;.c:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27a558.  v0:= v1.`c.a.e.j.f` @type ^`int`;
  #L27a55c.  return v0;
}
procedure `void` `close`(`c.a.e.j` v1 @kind this) @signature `Lc/a/e/j;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27adc8.  @monitorenter v1
  #L27adca.  v0:= 1I;
  #L27adcc.  v1.`c.a.e.j.g` @type ^`boolean` := v0 @kind boolean;
  #L27add0.  v0:= v1.`c.a.e.j.c` @type ^`d.d` @kind object;
  #L27add4.  call `close`(v0) @signature `Ld/d;.close:()V` @kind interface;
  #L27adda.  @monitorexit v1
  #L27addc.  return @kind void;
  #L27adde.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L27ade0.  @monitorexit v1
  #L27ade2.  throw v0;
  catch `java.lang.Throwable` @[L27adcc..L27adda] goto L27adde;
}
