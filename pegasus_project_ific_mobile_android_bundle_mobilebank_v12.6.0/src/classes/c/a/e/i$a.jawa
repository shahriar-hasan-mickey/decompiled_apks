record `c.a.e.i$a` @kind class @AccessFlag FINAL extends `d.r` @kind interface {
  `boolean` `c.a.e.i$a.a` @AccessFlag ;
  `boolean` `c.a.e.i$a.b` @AccessFlag ;
  `c.a.e.i` `c.a.e.i$a.d` @AccessFlag FINAL_SYNTHETIC;
  `d.c` `c.a.e.i$a.e` @AccessFlag PRIVATE_FINAL;
}
global `boolean` `@@c.a.e.i$a.c` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lc/a/e/i$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2795a0.  v0:= constclass @type ^`c.a.e.i` @kind object;
  #L2795a4.  return @kind void;
}
procedure `void` `<init>`(`c.a.e.i$a` v0 @kind this, `c.a.e.i` v1 @kind object) @signature `Lc/a/e/i$a;.<init>:(Lc/a/e/i;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2795b8.  v0.`c.a.e.i$a.d` @type ^`c.a.e.i` := v1 @kind object;
  #L2795bc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2795c2.  v1:= new `d.c`;
  #L2795c6.  call `<init>`(v1) @signature `Ld/c;.<init>:()V` @kind direct;
  #L2795cc.  v0.`c.a.e.i$a.e` @type ^`d.c` := v1 @kind object;
  #L2795d0.  return @kind void;
}
procedure `void` `a`(`c.a.e.i$a` v11 @kind this, `boolean` v12 ) @signature `Lc/a/e/i$a;.a:(Z)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L2795e4.  v0:= v11.`c.a.e.i$a.d` @type ^`c.a.e.i` @kind object;
  #L2795e8.  @monitorenter v0
  #L2795ea.  v1:= v11.`c.a.e.i$a.d` @type ^`c.a.e.i` @kind object;
  #L2795ee.  v1:= v1.`c.a.e.i.g` @type ^`c.a.e.i$c` @kind object;
  #L2795f2.  call `c`(v1) @signature `Lc/a/e/i$c;.c:()V` @kind virtual;
  #L2795f8.  v1:= v11.`c.a.e.i$a.d` @type ^`c.a.e.i` @kind object;
  #L2795fc.  v1:= v1.`c.a.e.i.b` @type ^`long` @kind wide;
  #L279600.  v3:= 0L;
  #L279604.  v5:= lcmp(v1, v3);
  #L279608.  if v5 > 0 then goto L279634;
  #L27960c.  v1:= v11.`c.a.e.i$a.b` @type ^`boolean` @kind boolean;
  #L279610.  if v1 != 0 then goto L279634;
  #L279614.  v1:= v11.`c.a.e.i$a.a` @type ^`boolean` @kind boolean;
  #L279618.  if v1 != 0 then goto L279634;
  #L27961c.  v1:= v11.`c.a.e.i$a.d` @type ^`c.a.e.i` @kind object;
  #L279620.  v1:= v1.`c.a.e.i.h` @type ^`c.a.e.b` @kind object;
  #L279624.  if v1 != 0 then goto L279634;
  #L279628.  v1:= v11.`c.a.e.i$a.d` @type ^`c.a.e.i` @kind object;
  #L27962c.  call `l`(v1) @signature `Lc/a/e/i;.l:()V` @kind virtual;
  #L279632.  goto L2795f8;
  #L279634.  v1:= v11.`c.a.e.i$a.d` @type ^`c.a.e.i` @kind object;
  #L279638.  v1:= v1.`c.a.e.i.g` @type ^`c.a.e.i$c` @kind object;
  #L27963c.  call `b`(v1) @signature `Lc/a/e/i$c;.b:()V` @kind virtual;
  #L279642.  v1:= v11.`c.a.e.i$a.d` @type ^`c.a.e.i` @kind object;
  #L279646.  call `k`(v1) @signature `Lc/a/e/i;.k:()V` @kind virtual;
  #L27964c.  v1:= v11.`c.a.e.i$a.d` @type ^`c.a.e.i` @kind object;
  #L279650.  v1:= v1.`c.a.e.i.b` @type ^`long` @kind wide;
  #L279654.  v3:= v11.`c.a.e.i$a.e` @type ^`d.c` @kind object;
  #L279658.  call temp:= `b`(v3) @signature `Ld/c;.b:()J` @kind virtual;
  #L27965e.  v3:= temp @kind wide;
  #L279660.  call temp:= `min`(v1, v3) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L279666.  v9:= temp @kind wide;
  #L279668.  v1:= v11.`c.a.e.i$a.d` @type ^`c.a.e.i` @kind object;
  #L27966c.  v2:= v1.`c.a.e.i.b` @type ^`long` @kind wide;
  #L279670.  v4:= 0I;
  #L279672.  v4:= v2 - v9 @kind long;
  #L279676.  v1.`c.a.e.i.b` @type ^`long` := v4 @kind wide;
  #L27967a.  @monitorexit v0
  #L27967c.  v0:= v11.`c.a.e.i$a.d` @type ^`c.a.e.i` @kind object;
  #L279680.  v0:= v0.`c.a.e.i.g` @type ^`c.a.e.i$c` @kind object;
  #L279684.  call `c`(v0) @signature `Lc/a/e/i$c;.c:()V` @kind virtual;
  #L27968a.  v0:= v11.`c.a.e.i$a.d` @type ^`c.a.e.i` @kind object;
  #L27968e.  v5:= v0.`c.a.e.i.d` @type ^`c.a.e.g` @kind object;
  #L279692.  v0:= v11.`c.a.e.i$a.d` @type ^`c.a.e.i` @kind object;
  #L279696.  v6:= v0.`c.a.e.i.c` @type ^`int`;
  #L27969a.  if v12 == 0 then goto L2796b8;
  #L27969e.  v12:= v11.`c.a.e.i$a.e` @type ^`d.c` @kind object;
  #L2796a2.  call temp:= `b`(v12) @signature `Ld/c;.b:()J` @kind virtual;
  #L2796a8.  v0:= temp @kind wide;
  #L2796aa.  v12:= lcmp(v9, v0);
  #L2796ae.  if v12 != 0 then goto L2796b8;
  #L2796b2.  v12:= 1I;
  #L2796b4.  v7:= 1I;
  #L2796b6.  goto L2796bc;
  #L2796b8.  v12:= 0I;
  #L2796ba.  v7:= 0I;
  #L2796bc.  v8:= v11.`c.a.e.i$a.e` @type ^`d.c` @kind object;
  #L2796c0.  call `a`(v5, v6, v7, v8, v9) @signature `Lc/a/e/g;.a:(IZLd/c;J)V` @kind virtual;
  #L2796c6.  v12:= v11.`c.a.e.i$a.d` @type ^`c.a.e.i` @kind object;
  #L2796ca.  v12:= v12.`c.a.e.i.g` @type ^`c.a.e.i$c` @kind object;
  #L2796ce.  call `b`(v12) @signature `Lc/a/e/i$c;.b:()V` @kind virtual;
  #L2796d4.  return @kind void;
  #L2796d6.  v12:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2796d8.  v0:= v11.`c.a.e.i$a.d` @type ^`c.a.e.i` @kind object;
  #L2796dc.  v0:= v0.`c.a.e.i.g` @type ^`c.a.e.i$c` @kind object;
  #L2796e0.  call `b`(v0) @signature `Lc/a/e/i$c;.b:()V` @kind virtual;
  #L2796e6.  throw v12;
  #L2796e8.  v12:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2796ea.  v1:= v11.`c.a.e.i$a.d` @type ^`c.a.e.i` @kind object;
  #L2796ee.  v1:= v1.`c.a.e.i.g` @type ^`c.a.e.i$c` @kind object;
  #L2796f2.  call `b`(v1) @signature `Lc/a/e/i$c;.b:()V` @kind virtual;
  #L2796f8.  throw v12;
  #L2796fa.  v12:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2796fc.  @monitorexit v0
  #L2796fe.  throw v12;
  catch `java.lang.Throwable` @[L2795ea..L2795f8] goto L2796fa;
  catch `java.lang.Throwable` @[L2795f8..L279632] goto L2796e8;
  catch `java.lang.Throwable` @[L279634..L27967c] goto L2796fa;
  catch `java.lang.Throwable` @[L27968a..L2796c6] goto L2796d6;
  catch `java.lang.Throwable` @[L2796ea..L2796fe] goto L2796fa;
}
procedure `d.t` `a`(`c.a.e.i$a` v1 @kind this) @signature `Lc/a/e/i$a;.a:()Ld/t;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L279584.  v0:= v1.`c.a.e.i$a.d` @type ^`c.a.e.i` @kind object;
  #L279588.  v0:= v0.`c.a.e.i.g` @type ^`c.a.e.i$c` @kind object;
  #L27958c.  return v0 @kind object;
}
procedure `void` `a_`(`c.a.e.i$a` v2 @kind this, `d.c` v3 @kind object, `long` v4 ) @signature `Lc/a/e/i$a;.a_:(Ld/c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L279744.  v0:= `@@c.a.e.i$a.c` @type ^`boolean` @kind boolean;
  #L279748.  if v0 != 0 then goto L279768;
  #L27974c.  v0:= v2.`c.a.e.i$a.d` @type ^`c.a.e.i` @kind object;
  #L279750.  call temp:= `holdsLock`(v0) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L279756.  v0:= temp;
  #L279758.  if v0 == 0 then goto L279768;
  #L27975c.  v3:= new `java.lang.AssertionError`;
  #L279760.  call `<init>`(v3) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L279766.  throw v3;
  #L279768.  v0:= v2.`c.a.e.i$a.e` @type ^`d.c` @kind object;
  #L27976c.  call `a_`(v0, v3, v4) @signature `Ld/c;.a_:(Ld/c;J)V` @kind virtual;
  #L279772.  v3:= v2.`c.a.e.i$a.e` @type ^`d.c` @kind object;
  #L279776.  call temp:= `b`(v3) @signature `Ld/c;.b:()J` @kind virtual;
  #L27977c.  v3:= temp @kind wide;
  #L27977e.  v0:= 16384L;
  #L279782.  v5:= lcmp(v3, v0);
  #L279786.  if v5 < 0 then goto L279794;
  #L27978a.  v3:= 0I;
  #L27978c.  call `a`(v2, v3) @signature `Lc/a/e/i$a;.a:(Z)V` @kind direct;
  #L279792.  goto L279772;
  #L279794.  return @kind void;
}
procedure `void` `close`(`c.a.e.i$a` v8 @kind this) @signature `Lc/a/e/i$a;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2797a8.  v0:= `@@c.a.e.i$a.c` @type ^`boolean` @kind boolean;
  #L2797ac.  if v0 != 0 then goto L2797cc;
  #L2797b0.  v0:= v8.`c.a.e.i$a.d` @type ^`c.a.e.i` @kind object;
  #L2797b4.  call temp:= `holdsLock`(v0) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L2797ba.  v0:= temp;
  #L2797bc.  if v0 == 0 then goto L2797cc;
  #L2797c0.  v0:= new `java.lang.AssertionError`;
  #L2797c4.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2797ca.  throw v0;
  #L2797cc.  v0:= v8.`c.a.e.i$a.d` @type ^`c.a.e.i` @kind object;
  #L2797d0.  @monitorenter v0
  #L2797d2.  v1:= v8.`c.a.e.i$a.a` @type ^`boolean` @kind boolean;
  #L2797d6.  if v1 == 0 then goto L2797de;
  #L2797da.  @monitorexit v0
  #L2797dc.  return @kind void;
  #L2797de.  @monitorexit v0
  #L2797e0.  v0:= v8.`c.a.e.i$a.d` @type ^`c.a.e.i` @kind object;
  #L2797e4.  v0:= v0.`c.a.e.i.e` @type ^`c.a.e.i$a` @kind object;
  #L2797e8.  v0:= v0.`c.a.e.i$a.b` @type ^`boolean` @kind boolean;
  #L2797ec.  v1:= 1I;
  #L2797ee.  if v0 != 0 then goto L279844;
  #L2797f2.  v0:= v8.`c.a.e.i$a.e` @type ^`d.c` @kind object;
  #L2797f6.  call temp:= `b`(v0) @signature `Ld/c;.b:()J` @kind virtual;
  #L2797fc.  v2:= temp @kind wide;
  #L2797fe.  v4:= 0L;
  #L279802.  v0:= lcmp(v2, v4);
  #L279806.  if v0 <= 0 then goto L279826;
  #L27980a.  v0:= v8.`c.a.e.i$a.e` @type ^`d.c` @kind object;
  #L27980e.  call temp:= `b`(v0) @signature `Ld/c;.b:()J` @kind virtual;
  #L279814.  v2:= temp @kind wide;
  #L279816.  v0:= lcmp(v2, v4);
  #L27981a.  if v0 <= 0 then goto L279844;
  #L27981e.  call `a`(v8, v1) @signature `Lc/a/e/i$a;.a:(Z)V` @kind direct;
  #L279824.  goto L27980a;
  #L279826.  v0:= v8.`c.a.e.i$a.d` @type ^`c.a.e.i` @kind object;
  #L27982a.  v2:= v0.`c.a.e.i.d` @type ^`c.a.e.g` @kind object;
  #L27982e.  v0:= v8.`c.a.e.i$a.d` @type ^`c.a.e.i` @kind object;
  #L279832.  v3:= v0.`c.a.e.i.c` @type ^`int`;
  #L279836.  v4:= 1I;
  #L279838.  v5:= 0I;
  #L27983a.  v6:= 0L;
  #L27983e.  call `a`(v2, v3, v4, v5, v6) @signature `Lc/a/e/g;.a:(IZLd/c;J)V` @kind virtual;
  #L279844.  v2:= v8.`c.a.e.i$a.d` @type ^`c.a.e.i` @kind object;
  #L279848.  @monitorenter v2
  #L27984a.  v8.`c.a.e.i$a.a` @type ^`boolean` := v1 @kind boolean;
  #L27984e.  @monitorexit v2
  #L279850.  v0:= v8.`c.a.e.i$a.d` @type ^`c.a.e.i` @kind object;
  #L279854.  v0:= v0.`c.a.e.i.d` @type ^`c.a.e.g` @kind object;
  #L279858.  call `b`(v0) @signature `Lc/a/e/g;.b:()V` @kind virtual;
  #L27985e.  v0:= v8.`c.a.e.i$a.d` @type ^`c.a.e.i` @kind object;
  #L279862.  call `j`(v0) @signature `Lc/a/e/i;.j:()V` @kind virtual;
  #L279868.  return @kind void;
  #L27986a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L27986c.  @monitorexit v2
  #L27986e.  throw v0;
  #L279870.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L279872.  @monitorexit v0
  #L279874.  throw v1;
  catch `java.lang.Throwable` @[L2797d2..L2797e0] goto L279870;
  catch `java.lang.Throwable` @[L27984a..L279850] goto L27986a;
  catch `java.lang.Throwable` @[L27986c..L27986e] goto L27986a;
  catch `java.lang.Throwable` @[L279872..L279874] goto L279870;
}
procedure `void` `flush`(`c.a.e.i$a` v5 @kind this) @signature `Lc/a/e/i$a;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2798b0.  v0:= `@@c.a.e.i$a.c` @type ^`boolean` @kind boolean;
  #L2798b4.  if v0 != 0 then goto L2798d4;
  #L2798b8.  v0:= v5.`c.a.e.i$a.d` @type ^`c.a.e.i` @kind object;
  #L2798bc.  call temp:= `holdsLock`(v0) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L2798c2.  v0:= temp;
  #L2798c4.  if v0 == 0 then goto L2798d4;
  #L2798c8.  v0:= new `java.lang.AssertionError`;
  #L2798cc.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2798d2.  throw v0;
  #L2798d4.  v0:= v5.`c.a.e.i$a.d` @type ^`c.a.e.i` @kind object;
  #L2798d8.  @monitorenter v0
  #L2798da.  v1:= v5.`c.a.e.i$a.d` @type ^`c.a.e.i` @kind object;
  #L2798de.  call `k`(v1) @signature `Lc/a/e/i;.k:()V` @kind virtual;
  #L2798e4.  @monitorexit v0
  #L2798e6.  v0:= v5.`c.a.e.i$a.e` @type ^`d.c` @kind object;
  #L2798ea.  call temp:= `b`(v0) @signature `Ld/c;.b:()J` @kind virtual;
  #L2798f0.  v0:= temp @kind wide;
  #L2798f2.  v2:= 0L;
  #L2798f6.  v4:= lcmp(v0, v2);
  #L2798fa.  if v4 <= 0 then goto L279916;
  #L2798fe.  v0:= 0I;
  #L279900.  call `a`(v5, v0) @signature `Lc/a/e/i$a;.a:(Z)V` @kind direct;
  #L279906.  v0:= v5.`c.a.e.i$a.d` @type ^`c.a.e.i` @kind object;
  #L27990a.  v0:= v0.`c.a.e.i.d` @type ^`c.a.e.g` @kind object;
  #L27990e.  call `b`(v0) @signature `Lc/a/e/g;.b:()V` @kind virtual;
  #L279914.  goto L2798e6;
  #L279916.  return @kind void;
  #L279918.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L27991a.  @monitorexit v0
  #L27991c.  throw v1;
  catch `java.lang.Throwable` @[L2798da..L2798e6] goto L279918;
  catch `java.lang.Throwable` @[L27991a..L27991c] goto L279918;
}
