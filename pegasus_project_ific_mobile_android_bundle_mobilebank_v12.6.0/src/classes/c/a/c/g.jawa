record `c.a.c.g` @kind class @AccessFlag PUBLIC_FINAL extends `c.s$a` @kind interface {
  `java.util.List` `c.a.c.g.a` @AccessFlag PRIVATE_FINAL;
  `c.a.b.g` `c.a.c.g.b` @AccessFlag PRIVATE_FINAL;
  `c.a.c.c` `c.a.c.g.c` @AccessFlag PRIVATE_FINAL;
  `c.a.b.c` `c.a.c.g.d` @AccessFlag PRIVATE_FINAL;
  `int` `c.a.c.g.e` @AccessFlag PRIVATE_FINAL;
  `c.x` `c.a.c.g.f` @AccessFlag PRIVATE_FINAL;
  `c.e` `c.a.c.g.g` @AccessFlag PRIVATE_FINAL;
  `c.o` `c.a.c.g.h` @AccessFlag PRIVATE_FINAL;
  `int` `c.a.c.g.i` @AccessFlag PRIVATE_FINAL;
  `int` `c.a.c.g.j` @AccessFlag PRIVATE_FINAL;
  `int` `c.a.c.g.k` @AccessFlag PRIVATE_FINAL;
  `int` `c.a.c.g.l` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`c.a.c.g` v0 @kind this, `java.util.List` v1 @kind object, `c.a.b.g` v2 @kind object, `c.a.c.c` v3 @kind object, `c.a.b.c` v4 @kind object, `int` v5 , `c.x` v6 @kind object, `c.e` v7 @kind object, `c.o` v8 @kind object, `int` v9 , `int` v10 , `int` v11 ) @signature `Lc/a/c/g;.<init>:(Ljava/util/List;Lc/a/b/g;Lc/a/c/c;Lc/a/b/c;ILc/x;Lc/e;Lc/o;III)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2725fc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L272602.  v0.`c.a.c.g.a` @type ^`java.util.List` := v1 @kind object;
  #L272606.  v0.`c.a.c.g.d` @type ^`c.a.b.c` := v4 @kind object;
  #L27260a.  v0.`c.a.c.g.b` @type ^`c.a.b.g` := v2 @kind object;
  #L27260e.  v0.`c.a.c.g.c` @type ^`c.a.c.c` := v3 @kind object;
  #L272612.  v0.`c.a.c.g.e` @type ^`int` := v5;
  #L272616.  v0.`c.a.c.g.f` @type ^`c.x` := v6 @kind object;
  #L27261a.  v0.`c.a.c.g.g` @type ^`c.e` := v7 @kind object;
  #L27261e.  v0.`c.a.c.g.h` @type ^`c.o` := v8 @kind object;
  #L272622.  v0.`c.a.c.g.i` @type ^`int` := v9;
  #L272626.  v0.`c.a.c.g.j` @type ^`int` := v10;
  #L27262a.  v0.`c.a.c.g.k` @type ^`int` := v11;
  #L27262e.  return @kind void;
}
procedure `c.x` `a`(`c.a.c.g` v1 @kind this) @signature `Lc/a/c/g;.a:()Lc/x;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27233c.  v0:= v1.`c.a.c.g.f` @type ^`c.x` @kind object;
  #L272340.  return v0 @kind object;
}
procedure `c.z` `a`(`c.a.c.g` v3 @kind this, `c.x` v4 @kind object) @signature `Lc/a/c/g;.a:(Lc/x;)Lc/z;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L272354.  v0:= v3.`c.a.c.g.b` @type ^`c.a.b.g` @kind object;
  #L272358.  v1:= v3.`c.a.c.g.c` @type ^`c.a.c.c` @kind object;
  #L27235c.  v2:= v3.`c.a.c.g.d` @type ^`c.a.b.c` @kind object;
  #L272360.  call temp:= `a`(v3, v4, v0, v1, v2) @signature `Lc/a/c/g;.a:(Lc/x;Lc/a/b/g;Lc/a/c/c;Lc/a/b/c;)Lc/z;` @kind virtual;
  #L272366.  v4:= temp @kind object;
  #L272368.  return v4 @kind object;
}
procedure `c.z` `a`(`c.a.c.g` v15 @kind this, `c.x` v16 @kind object, `c.a.b.g` v17 @kind object, `c.a.c.c` v18 @kind object, `c.a.b.c` v19 @kind object) @signature `Lc/a/c/g;.a:(Lc/x;Lc/a/b/g;Lc/a/c/c;Lc/a/b/c;)Lc/z;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L27237c.  v0:= v15 @kind object;
  #L27237e.  v1:= v0.`c.a.c.g.e` @type ^`int`;
  #L272382.  v2:= v0.`c.a.c.g.a` @type ^`java.util.List` @kind object;
  #L272386.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L27238c.  v2:= temp;
  #L27238e.  if v1 < v2 then goto L27239e;
  #L272392.  v1:= new `java.lang.AssertionError`;
  #L272396.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L27239c.  throw v1;
  #L27239e.  v1:= v0.`c.a.c.g.l` @type ^`int`;
  #L2723a2.  v2:= 1I;
  #L2723a4.  v1:= v1 + v2 @kind int;
  #L2723a6.  v0.`c.a.c.g.l` @type ^`int` := v1;
  #L2723aa.  v1:= v0.`c.a.c.g.c` @type ^`c.a.c.c` @kind object;
  #L2723ae.  if v1 == 0 then goto L272414;
  #L2723b2.  v1:= v0.`c.a.c.g.d` @type ^`c.a.b.c` @kind object;
  #L2723b6.  call temp:= `a`(v16) @signature `Lc/x;.a:()Lc/r;` @kind virtual;
  #L2723bc.  v3:= temp @kind object;
  #L2723be.  call temp:= `a`(v1, v3) @signature `Lc/a/b/c;.a:(Lc/r;)Z` @kind virtual;
  #L2723c4.  v1:= temp;
  #L2723c6.  if v1 != 0 then goto L272414;
  #L2723ca.  v1:= new `java.lang.IllegalStateException`;
  #L2723ce.  v3:= new `java.lang.StringBuilder`;
  #L2723d2.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2723d8.  v4:= "network interceptor " @kind object;
  #L2723dc.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2723e2.  v4:= v0.`c.a.c.g.a` @type ^`java.util.List` @kind object;
  #L2723e6.  v5:= v0.`c.a.c.g.e` @type ^`int`;
  #L2723ea.  v5:= v5 - v2 @kind int;
  #L2723ec.  call temp:= `get`(v4, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2723f2.  v2:= temp @kind object;
  #L2723f4.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2723fa.  v2:= " must retain the same host and port" @kind object;
  #L2723fe.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L272404.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L27240a.  v2:= temp @kind object;
  #L27240c.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L272412.  throw v1;
  #L272414.  v1:= v0.`c.a.c.g.c` @type ^`c.a.c.c` @kind object;
  #L272418.  if v1 == 0 then goto L27246e;
  #L27241c.  v1:= v0.`c.a.c.g.l` @type ^`int`;
  #L272420.  if v1 <= v2 then goto L27246e;
  #L272424.  v1:= new `java.lang.IllegalStateException`;
  #L272428.  v3:= new `java.lang.StringBuilder`;
  #L27242c.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L272432.  v4:= "network interceptor " @kind object;
  #L272436.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L27243c.  v4:= v0.`c.a.c.g.a` @type ^`java.util.List` @kind object;
  #L272440.  v5:= v0.`c.a.c.g.e` @type ^`int`;
  #L272444.  v5:= v5 - v2 @kind int;
  #L272446.  call temp:= `get`(v4, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L27244c.  v2:= temp @kind object;
  #L27244e.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L272454.  v2:= " must call proceed() exactly once" @kind object;
  #L272458.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L27245e.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L272464.  v2:= temp @kind object;
  #L272466.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L27246c.  throw v1;
  #L27246e.  v1:= new `c.a.c.g`;
  #L272472.  v4:= v0.`c.a.c.g.a` @type ^`java.util.List` @kind object;
  #L272476.  v3:= v0.`c.a.c.g.e` @type ^`int`;
  #L27247a.  v8:= v3 + 1;
  #L27247e.  v10:= v0.`c.a.c.g.g` @type ^`c.e` @kind object;
  #L272482.  v11:= v0.`c.a.c.g.h` @type ^`c.o` @kind object;
  #L272486.  v12:= v0.`c.a.c.g.i` @type ^`int`;
  #L27248a.  v13:= v0.`c.a.c.g.j` @type ^`int`;
  #L27248e.  v14:= v0.`c.a.c.g.k` @type ^`int`;
  #L272492.  v3:= v1 @kind object;
  #L272494.  v5:= v17 @kind object;
  #L272498.  v6:= v18 @kind object;
  #L27249c.  v7:= v19 @kind object;
  #L2724a0.  v9:= v16 @kind object;
  #L2724a4.  call `<init>`(v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14) @signature `Lc/a/c/g;.<init>:(Ljava/util/List;Lc/a/b/g;Lc/a/c/c;Lc/a/b/c;ILc/x;Lc/e;Lc/o;III)V` @kind direct;
  #L2724aa.  v3:= v0.`c.a.c.g.a` @type ^`java.util.List` @kind object;
  #L2724ae.  v4:= v0.`c.a.c.g.e` @type ^`int`;
  #L2724b2.  call temp:= `get`(v3, v4) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2724b8.  v3:= temp @kind object;
  #L2724ba.  v3:= (`c.s`) v3 @kind object;
  #L2724be.  call temp:= `a`(v3, v1) @signature `Lc/s;.a:(Lc/s$a;)Lc/z;` @kind interface;
  #L2724c4.  v4:= temp @kind object;
  #L2724c6.  if v18 == 0 then goto L272520;
  #L2724ca.  v5:= v0.`c.a.c.g.e` @type ^`int`;
  #L2724ce.  v5:= v5 + v2 @kind int;
  #L2724d0.  v6:= v0.`c.a.c.g.a` @type ^`java.util.List` @kind object;
  #L2724d4.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2724da.  v6:= temp;
  #L2724dc.  if v5 >= v6 then goto L272520;
  #L2724e0.  v1:= v1.`c.a.c.g.l` @type ^`int`;
  #L2724e4.  if v1 == v2 then goto L272520;
  #L2724e8.  v1:= new `java.lang.IllegalStateException`;
  #L2724ec.  v2:= new `java.lang.StringBuilder`;
  #L2724f0.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2724f6.  v4:= "network interceptor " @kind object;
  #L2724fa.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L272500.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L272506.  v3:= " must call proceed() exactly once" @kind object;
  #L27250a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L272510.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L272516.  v2:= temp @kind object;
  #L272518.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L27251e.  throw v1;
  #L272520.  if v4 != 0 then goto L27255c;
  #L272524.  v1:= new `java.lang.NullPointerException`;
  #L272528.  v2:= new `java.lang.StringBuilder`;
  #L27252c.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L272532.  v4:= "interceptor " @kind object;
  #L272536.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L27253c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L272542.  v3:= " returned null" @kind object;
  #L272546.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L27254c.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L272552.  v2:= temp @kind object;
  #L272554.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L27255a.  throw v1;
  #L27255c.  call temp:= `f`(v4) @signature `Lc/z;.f:()Lc/aa;` @kind virtual;
  #L272562.  v1:= temp @kind object;
  #L272564.  if v1 != 0 then goto L2725a0;
  #L272568.  v1:= new `java.lang.IllegalStateException`;
  #L27256c.  v2:= new `java.lang.StringBuilder`;
  #L272570.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L272576.  v4:= "interceptor " @kind object;
  #L27257a.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L272580.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L272586.  v3:= " returned a response with no body" @kind object;
  #L27258a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L272590.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L272596.  v2:= temp @kind object;
  #L272598.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L27259e.  throw v1;
  #L2725a0.  return v4 @kind object;
}
procedure `int` `b`(`c.a.c.g` v1 @kind this) @signature `Lc/a/c/g;.b:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2725b4.  v0:= v1.`c.a.c.g.i` @type ^`int`;
  #L2725b8.  return v0;
}
procedure `int` `c`(`c.a.c.g` v1 @kind this) @signature `Lc/a/c/g;.c:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2725cc.  v0:= v1.`c.a.c.g.j` @type ^`int`;
  #L2725d0.  return v0;
}
procedure `int` `d`(`c.a.c.g` v1 @kind this) @signature `Lc/a/c/g;.d:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2725e4.  v0:= v1.`c.a.c.g.k` @type ^`int`;
  #L2725e8.  return v0;
}
procedure `c.h` `e`(`c.a.c.g` v1 @kind this) @signature `Lc/a/c/g;.e:()Lc/h;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27230c.  v0:= v1.`c.a.c.g.d` @type ^`c.a.b.c` @kind object;
  #L272310.  return v0 @kind object;
}
procedure `c.a.b.g` `f`(`c.a.c.g` v1 @kind this) @signature `Lc/a/c/g;.f:()Lc/a/b/g;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2722c4.  v0:= v1.`c.a.c.g.b` @type ^`c.a.b.g` @kind object;
  #L2722c8.  return v0 @kind object;
}
procedure `c.a.c.c` `g`(`c.a.c.g` v1 @kind this) @signature `Lc/a/c/g;.g:()Lc/a/c/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2722dc.  v0:= v1.`c.a.c.g.c` @type ^`c.a.c.c` @kind object;
  #L2722e0.  return v0 @kind object;
}
procedure `c.e` `h`(`c.a.c.g` v1 @kind this) @signature `Lc/a/c/g;.h:()Lc/e;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2722f4.  v0:= v1.`c.a.c.g.g` @type ^`c.e` @kind object;
  #L2722f8.  return v0 @kind object;
}
procedure `c.o` `i`(`c.a.c.g` v1 @kind this) @signature `Lc/a/c/g;.i:()Lc/o;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L272324.  v0:= v1.`c.a.c.g.h` @type ^`c.o` @kind object;
  #L272328.  return v0 @kind object;
}
