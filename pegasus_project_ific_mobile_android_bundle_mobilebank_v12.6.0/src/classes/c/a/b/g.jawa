record `c.a.b.g` @kind class @AccessFlag PUBLIC_FINAL {
  `c.a` `c.a.b.g.a` @AccessFlag PUBLIC_FINAL;
  `c.e` `c.a.b.g.b` @AccessFlag PUBLIC_FINAL;
  `c.o` `c.a.b.g.c` @AccessFlag PUBLIC_FINAL;
  `c.a.b.f$a` `c.a.b.g.e` @AccessFlag PRIVATE;
  `c.ab` `c.a.b.g.f` @AccessFlag PRIVATE;
  `c.i` `c.a.b.g.g` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `c.a.b.g.h` @AccessFlag PRIVATE_FINAL;
  `c.a.b.f` `c.a.b.g.i` @AccessFlag PRIVATE_FINAL;
  `int` `c.a.b.g.j` @AccessFlag PRIVATE;
  `c.a.b.c` `c.a.b.g.k` @AccessFlag PRIVATE;
  `boolean` `c.a.b.g.l` @AccessFlag PRIVATE;
  `boolean` `c.a.b.g.m` @AccessFlag PRIVATE;
  `boolean` `c.a.b.g.n` @AccessFlag PRIVATE;
  `c.a.c.c` `c.a.b.g.o` @AccessFlag PRIVATE;
}
global `boolean` `@@c.a.b.g.d` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lc/a/b/g;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;

  #L27119c.  return @kind void;
}
procedure `void` `<init>`(`c.a.b.g` v1 @kind this, `c.i` v2 @kind object, `c.a` v3 @kind object, `c.e` v4 @kind object, `c.o` v5 @kind object, `java.lang.Object` v6 @kind object) @signature `Lc/a/b/g;.<init>:(Lc/i;Lc/a;Lc/e;Lc/o;Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2711b0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2711b6.  v1.`c.a.b.g.g` @type ^`c.i` := v2 @kind object;
  #L2711ba.  v1.`c.a.b.g.a` @type ^`c.a` := v3 @kind object;
  #L2711be.  v1.`c.a.b.g.b` @type ^`c.e` := v4 @kind object;
  #L2711c2.  v1.`c.a.b.g.c` @type ^`c.o` := v5 @kind object;
  #L2711c6.  v2:= new `c.a.b.f`;
  #L2711ca.  call temp:= `h`(v1) @signature `Lc/a/b/g;.h:()Lc/a/b/d;` @kind direct;
  #L2711d0.  v0:= temp @kind object;
  #L2711d2.  call `<init>`(v2, v3, v0, v4, v5) @signature `Lc/a/b/f;.<init>:(Lc/a;Lc/a/b/d;Lc/e;Lc/o;)V` @kind direct;
  #L2711d8.  v1.`c.a.b.g.i` @type ^`c.a.b.f` := v2 @kind object;
  #L2711dc.  v1.`c.a.b.g.h` @type ^`java.lang.Object` := v6 @kind object;
  #L2711e0.  return @kind void;
}
procedure `c.a.b.c` `a`(`c.a.b.g` v19 @kind this, `int` v20 , `int` v21 , `int` v22 , `int` v23 , `boolean` v24 ) @signature `Lc/a/b/g;.a:(IIIIZ)Lc/a/b/c;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;

  #L270b50.  v1:= v19 @kind object;
  #L270b54.  v2:= v1.`c.a.b.g.g` @type ^`c.i` @kind object;
  #L270b58.  @monitorenter v2
  #L270b5a.  v3:= v1.`c.a.b.g.m` @type ^`boolean` @kind boolean;
  #L270b5e.  if v3 == 0 then goto L270b72;
  #L270b62.  v3:= new `java.lang.IllegalStateException`;
  #L270b66.  v4:= "released" @kind object;
  #L270b6a.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L270b70.  throw v3;
  #L270b72.  v3:= v1.`c.a.b.g.o` @type ^`c.a.c.c` @kind object;
  #L270b76.  if v3 == 0 then goto L270b8a;
  #L270b7a.  v3:= new `java.lang.IllegalStateException`;
  #L270b7e.  v4:= "codec != null" @kind object;
  #L270b82.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L270b88.  throw v3;
  #L270b8a.  v3:= v1.`c.a.b.g.n` @type ^`boolean` @kind boolean;
  #L270b8e.  if v3 == 0 then goto L270ba2;
  #L270b92.  v3:= new `java.io.IOException`;
  #L270b96.  v4:= "Canceled" @kind object;
  #L270b9a.  call `<init>`(v3, v4) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L270ba0.  throw v3;
  #L270ba2.  v3:= v1.`c.a.b.g.k` @type ^`c.a.b.c` @kind object;
  #L270ba6.  call temp:= `g`(v19) @signature `Lc/a/b/g;.g:()Ljava/net/Socket;` @kind direct;
  #L270bac.  v4:= temp @kind object;
  #L270bae.  v5:= v1.`c.a.b.g.k` @type ^`c.a.b.c` @kind object;
  #L270bb2.  v6:= 0I;
  #L270bb4.  if v5 == 0 then goto L270bc0;
  #L270bb8.  v3:= v1.`c.a.b.g.k` @type ^`c.a.b.c` @kind object;
  #L270bbc.  v5:= v6 @kind object;
  #L270bbe.  goto L270bc4;
  #L270bc0.  v5:= v3 @kind object;
  #L270bc2.  v3:= v6 @kind object;
  #L270bc4.  v7:= v1.`c.a.b.g.l` @type ^`boolean` @kind boolean;
  #L270bc8.  if v7 != 0 then goto L270bce;
  #L270bcc.  v5:= v6 @kind object;
  #L270bce.  v7:= 1I;
  #L270bd0.  v8:= 0I;
  #L270bd2.  if v3 != 0 then goto L270c06;
  #L270bd6.  v9:= `@@c.a.a.a` @type ^`c.a.a` @kind object;
  #L270bda.  v10:= v1.`c.a.b.g.g` @type ^`c.i` @kind object;
  #L270bde.  v11:= v1.`c.a.b.g.a` @type ^`c.a` @kind object;
  #L270be2.  call temp:= `a`(v9, v10, v11, v1, v6) @signature `Lc/a/a;.a:(Lc/i;Lc/a;Lc/a/b/g;Lc/ab;)Lc/a/b/c;` @kind virtual;
  #L270be8.  v9:= v1.`c.a.b.g.k` @type ^`c.a.b.c` @kind object;
  #L270bec.  if v9 == 0 then goto L270bfc;
  #L270bf0.  v3:= v1.`c.a.b.g.k` @type ^`c.a.b.c` @kind object;
  #L270bf4.  v9:= v3 @kind object;
  #L270bf6.  v10:= v6 @kind object;
  #L270bf8.  v3:= 1I;
  #L270bfa.  goto L270c0c;
  #L270bfc.  v9:= v1.`c.a.b.g.f` @type ^`c.ab` @kind object;
  #L270c00.  v10:= v9 @kind object;
  #L270c02.  v9:= v3 @kind object;
  #L270c04.  goto L270c0a;
  #L270c06.  v9:= v3 @kind object;
  #L270c08.  v10:= v6 @kind object;
  #L270c0a.  v3:= 0I;
  #L270c0c.  @monitorexit v2
  #L270c0e.  call `a`(v4) @signature `Lc/a/c;.a:(Ljava/net/Socket;)V` @kind static;
  #L270c14.  if v5 == 0 then goto L270c26;
  #L270c18.  v2:= v1.`c.a.b.g.c` @type ^`c.o` @kind object;
  #L270c1c.  v4:= v1.`c.a.b.g.b` @type ^`c.e` @kind object;
  #L270c20.  call `b`(v2, v4, v5) @signature `Lc/o;.b:(Lc/e;Lc/h;)V` @kind virtual;
  #L270c26.  if v3 == 0 then goto L270c38;
  #L270c2a.  v2:= v1.`c.a.b.g.c` @type ^`c.o` @kind object;
  #L270c2e.  v4:= v1.`c.a.b.g.b` @type ^`c.e` @kind object;
  #L270c32.  call `a`(v2, v4, v9) @signature `Lc/o;.a:(Lc/e;Lc/h;)V` @kind virtual;
  #L270c38.  if v9 == 0 then goto L270c3e;
  #L270c3c.  return v9 @kind object;
  #L270c3e.  if v10 != 0 then goto L270c6e;
  #L270c42.  v2:= v1.`c.a.b.g.e` @type ^`c.a.b.f$a` @kind object;
  #L270c46.  if v2 == 0 then goto L270c5a;
  #L270c4a.  v2:= v1.`c.a.b.g.e` @type ^`c.a.b.f$a` @kind object;
  #L270c4e.  call temp:= `a`(v2) @signature `Lc/a/b/f$a;.a:()Z` @kind virtual;
  #L270c54.  v2:= temp;
  #L270c56.  if v2 != 0 then goto L270c6e;
  #L270c5a.  v2:= v1.`c.a.b.g.i` @type ^`c.a.b.f` @kind object;
  #L270c5e.  call temp:= `b`(v2) @signature `Lc/a/b/f;.b:()Lc/a/b/f$a;` @kind virtual;
  #L270c64.  v2:= temp @kind object;
  #L270c66.  v1.`c.a.b.g.e` @type ^`c.a.b.f$a` := v2 @kind object;
  #L270c6a.  v2:= 1I;
  #L270c6c.  goto L270c70;
  #L270c6e.  v2:= 0I;
  #L270c70.  v4:= v1.`c.a.b.g.g` @type ^`c.i` @kind object;
  #L270c74.  @monitorenter v4
  #L270c76.  v5:= v1.`c.a.b.g.n` @type ^`boolean` @kind boolean;
  #L270c7a.  if v5 == 0 then goto L270c8e;
  #L270c7e.  v2:= new `java.io.IOException`;
  #L270c82.  v3:= "Canceled" @kind object;
  #L270c86.  call `<init>`(v2, v3) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L270c8c.  throw v2;
  #L270c8e.  if v2 == 0 then goto L270ce4;
  #L270c92.  v2:= v1.`c.a.b.g.e` @type ^`c.a.b.f$a` @kind object;
  #L270c96.  call temp:= `c`(v2) @signature `Lc/a/b/f$a;.c:()Ljava/util/List;` @kind virtual;
  #L270c9c.  v2:= temp @kind object;
  #L270c9e.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L270ca4.  v5:= temp;
  #L270ca6.  v11:= 0I;
  #L270ca8.  if v11 >= v5 then goto L270ce4;
  #L270cac.  call temp:= `get`(v2, v11) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L270cb2.  v12:= temp @kind object;
  #L270cb4.  v12:= (`c.ab`) v12 @kind object;
  #L270cb8.  v13:= `@@c.a.a.a` @type ^`c.a.a` @kind object;
  #L270cbc.  v14:= v1.`c.a.b.g.g` @type ^`c.i` @kind object;
  #L270cc0.  v15:= v1.`c.a.b.g.a` @type ^`c.a` @kind object;
  #L270cc4.  call temp:= `a`(v13, v14, v15, v1, v12) @signature `Lc/a/a;.a:(Lc/i;Lc/a;Lc/a/b/g;Lc/ab;)Lc/a/b/c;` @kind virtual;
  #L270cca.  v13:= v1.`c.a.b.g.k` @type ^`c.a.b.c` @kind object;
  #L270cce.  if v13 == 0 then goto L270cde;
  #L270cd2.  v9:= v1.`c.a.b.g.k` @type ^`c.a.b.c` @kind object;
  #L270cd6.  v1.`c.a.b.g.f` @type ^`c.ab` := v12 @kind object;
  #L270cda.  v3:= 1I;
  #L270cdc.  goto L270ce4;
  #L270cde.  v11:= v11 + 1;
  #L270ce2.  goto L270ca8;
  #L270ce4.  if v3 != 0 then goto L270d14;
  #L270ce8.  if v10 != 0 then goto L270cf8;
  #L270cec.  v2:= v1.`c.a.b.g.e` @type ^`c.a.b.f$a` @kind object;
  #L270cf0.  call temp:= `b`(v2) @signature `Lc/a/b/f$a;.b:()Lc/ab;` @kind virtual;
  #L270cf6.  v10:= temp @kind object;
  #L270cf8.  v1.`c.a.b.g.f` @type ^`c.ab` := v10 @kind object;
  #L270cfc.  v1.`c.a.b.g.j` @type ^`int` := v8;
  #L270d00.  v9:= new `c.a.b.c`;
  #L270d04.  v2:= v1.`c.a.b.g.g` @type ^`c.i` @kind object;
  #L270d08.  call `<init>`(v9, v2, v10) @signature `Lc/a/b/c;.<init>:(Lc/i;Lc/ab;)V` @kind direct;
  #L270d0e.  call `a`(v1, v9, v8) @signature `Lc/a/b/g;.a:(Lc/a/b/c;Z)V` @kind virtual;
  #L270d14.  @monitorexit v4
  #L270d16.  if v3 == 0 then goto L270d2a;
  #L270d1a.  v2:= v1.`c.a.b.g.c` @type ^`c.o` @kind object;
  #L270d1e.  v3:= v1.`c.a.b.g.b` @type ^`c.e` @kind object;
  #L270d22.  call `a`(v2, v3, v9) @signature `Lc/o;.a:(Lc/e;Lc/h;)V` @kind virtual;
  #L270d28.  return v9 @kind object;
  #L270d2a.  v2:= v1.`c.a.b.g.b` @type ^`c.e` @kind object;
  #L270d2e.  v3:= v1.`c.a.b.g.c` @type ^`c.o` @kind object;
  #L270d32.  v11:= v9 @kind object;
  #L270d34.  v12:= v20;
  #L270d38.  v13:= v21;
  #L270d3c.  v14:= v22;
  #L270d40.  v15:= v23;
  #L270d44.  v16:= v24;
  #L270d48.  v17:= v2 @kind object;
  #L270d4c.  v18:= v3 @kind object;
  #L270d50.  call `a`(v11, v12, v13, v14, v15, v16, v17, v18) @signature `Lc/a/b/c;.a:(IIIIZLc/e;Lc/o;)V` @kind virtual;
  #L270d56.  call temp:= `h`(v19) @signature `Lc/a/b/g;.h:()Lc/a/b/d;` @kind direct;
  #L270d5c.  v2:= temp @kind object;
  #L270d5e.  call temp:= `a`(v9) @signature `Lc/a/b/c;.a:()Lc/ab;` @kind virtual;
  #L270d64.  v3:= temp @kind object;
  #L270d66.  call `b`(v2, v3) @signature `Lc/a/b/d;.b:(Lc/ab;)V` @kind virtual;
  #L270d6c.  v2:= v1.`c.a.b.g.g` @type ^`c.i` @kind object;
  #L270d70.  @monitorenter v2
  #L270d72.  v1.`c.a.b.g.l` @type ^`boolean` := v7 @kind boolean;
  #L270d76.  v3:= `@@c.a.a.a` @type ^`c.a.a` @kind object;
  #L270d7a.  v4:= v1.`c.a.b.g.g` @type ^`c.i` @kind object;
  #L270d7e.  call `b`(v3, v4, v9) @signature `Lc/a/a;.b:(Lc/i;Lc/a/b/c;)V` @kind virtual;
  #L270d84.  call temp:= `d`(v9) @signature `Lc/a/b/c;.d:()Z` @kind virtual;
  #L270d8a.  v3:= temp;
  #L270d8c.  if v3 == 0 then goto L270da8;
  #L270d90.  v3:= `@@c.a.a.a` @type ^`c.a.a` @kind object;
  #L270d94.  v4:= v1.`c.a.b.g.g` @type ^`c.i` @kind object;
  #L270d98.  v5:= v1.`c.a.b.g.a` @type ^`c.a` @kind object;
  #L270d9c.  call temp:= `a`(v3, v4, v5, v1) @signature `Lc/a/a;.a:(Lc/i;Lc/a;Lc/a/b/g;)Ljava/net/Socket;` @kind virtual;
  #L270da2.  v6:= temp @kind object;
  #L270da4.  v9:= v1.`c.a.b.g.k` @type ^`c.a.b.c` @kind object;
  #L270da8.  @monitorexit v2
  #L270daa.  call `a`(v6) @signature `Lc/a/c;.a:(Ljava/net/Socket;)V` @kind static;
  #L270db0.  v2:= v1.`c.a.b.g.c` @type ^`c.o` @kind object;
  #L270db4.  v3:= v1.`c.a.b.g.b` @type ^`c.e` @kind object;
  #L270db8.  call `a`(v2, v3, v9) @signature `Lc/o;.a:(Lc/e;Lc/h;)V` @kind virtual;
  #L270dbe.  return v9 @kind object;
  #L270dc0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L270dc2.  v3:= v0 @kind object;
  #L270dc4.  @monitorexit v2
  #L270dc6.  throw v3;
  #L270dc8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L270dca.  v2:= v0 @kind object;
  #L270dcc.  @monitorexit v4
  #L270dce.  throw v2;
  #L270dd0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L270dd2.  v3:= v0 @kind object;
  #L270dd4.  @monitorexit v2
  #L270dd6.  throw v3;
  catch `java.lang.Throwable` @[L270b5a..L270c0e] goto L270dd0;
  catch `java.lang.Throwable` @[L270c76..L270d16] goto L270dc8;
  catch `java.lang.Throwable` @[L270d72..L270daa] goto L270dc0;
  catch `java.lang.Throwable` @[L270dc4..L270dc6] goto L270dc0;
  catch `java.lang.Throwable` @[L270dcc..L270dce] goto L270dc8;
  catch `java.lang.Throwable` @[L270dd4..L270dd6] goto L270dd0;
}
procedure `c.a.b.c` `a`(`c.a.b.g` v3 @kind this, `int` v4 , `int` v5 , `int` v6 , `int` v7 , `boolean` v8 , `boolean` v9 ) @signature `Lc/a/b/g;.a:(IIIIZZ)Lc/a/b/c;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L270e24.  call temp:= `a`(v3, v4, v5, v6, v7, v8) @signature `Lc/a/b/g;.a:(IIIIZ)Lc/a/b/c;` @kind direct;
  #L270e2a.  v0:= temp @kind object;
  #L270e2c.  v1:= v3.`c.a.b.g.g` @type ^`c.i` @kind object;
  #L270e30.  @monitorenter v1
  #L270e32.  v2:= v0.`c.a.b.c.b` @type ^`int`;
  #L270e36.  if v2 != 0 then goto L270e3e;
  #L270e3a.  @monitorexit v1
  #L270e3c.  return v0 @kind object;
  #L270e3e.  @monitorexit v1
  #L270e40.  call temp:= `a`(v0, v9) @signature `Lc/a/b/c;.a:(Z)Z` @kind virtual;
  #L270e46.  v1:= temp;
  #L270e48.  if v1 != 0 then goto L270e54;
  #L270e4c.  call `e`(v3) @signature `Lc/a/b/g;.e:()V` @kind virtual;
  #L270e52.  goto L270e24;
  #L270e54.  return v0 @kind object;
  #L270e56.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L270e58.  @monitorexit v1
  #L270e5a.  throw v4;
  catch `java.lang.Throwable` @[L270e32..L270e40] goto L270e56;
  catch `java.lang.Throwable` @[L270e58..L270e5a] goto L270e56;
}
procedure `java.net.Socket` `a`(`c.a.b.g` v1 @kind this, `boolean` v2 , `boolean` v3 , `boolean` v4 ) @signature `Lc/a/b/g;.a:(ZZZ)Ljava/net/Socket;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L270fdc.  v0:= `@@c.a.b.g.d` @type ^`boolean` @kind boolean;
  #L270fe0.  if v0 != 0 then goto L271000;
  #L270fe4.  v0:= v1.`c.a.b.g.g` @type ^`c.i` @kind object;
  #L270fe8.  call temp:= `holdsLock`(v0) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L270fee.  v0:= temp;
  #L270ff0.  if v0 != 0 then goto L271000;
  #L270ff4.  v2:= new `java.lang.AssertionError`;
  #L270ff8.  call `<init>`(v2) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L270ffe.  throw v2;
  #L271000.  v0:= 0I;
  #L271002.  if v4 == 0 then goto L27100a;
  #L271006.  v1.`c.a.b.g.o` @type ^`c.a.c.c` := v0 @kind object;
  #L27100a.  v4:= 1I;
  #L27100c.  if v3 == 0 then goto L271014;
  #L271010.  v1.`c.a.b.g.m` @type ^`boolean` := v4 @kind boolean;
  #L271014.  v3:= v1.`c.a.b.g.k` @type ^`c.a.b.c` @kind object;
  #L271018.  if v3 == 0 then goto L2710a0;
  #L27101c.  if v2 == 0 then goto L271028;
  #L271020.  v2:= v1.`c.a.b.g.k` @type ^`c.a.b.c` @kind object;
  #L271024.  v2.`c.a.b.c.a` @type ^`boolean` := v4 @kind boolean;
  #L271028.  v2:= v1.`c.a.b.g.o` @type ^`c.a.c.c` @kind object;
  #L27102c.  if v2 != 0 then goto L2710a0;
  #L271030.  v2:= v1.`c.a.b.g.m` @type ^`boolean` @kind boolean;
  #L271034.  if v2 != 0 then goto L271044;
  #L271038.  v2:= v1.`c.a.b.g.k` @type ^`c.a.b.c` @kind object;
  #L27103c.  v2:= v2.`c.a.b.c.a` @type ^`boolean` @kind boolean;
  #L271040.  if v2 == 0 then goto L2710a0;
  #L271044.  v2:= v1.`c.a.b.g.k` @type ^`c.a.b.c` @kind object;
  #L271048.  call `b`(v1, v2) @signature `Lc/a/b/g;.b:(Lc/a/b/c;)V` @kind direct;
  #L27104e.  v2:= v1.`c.a.b.g.k` @type ^`c.a.b.c` @kind object;
  #L271052.  v2:= v2.`c.a.b.c.d` @type ^`java.util.List` @kind object;
  #L271056.  call temp:= `isEmpty`(v2) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L27105c.  v2:= temp;
  #L27105e.  if v2 == 0 then goto L271098;
  #L271062.  v2:= v1.`c.a.b.g.k` @type ^`c.a.b.c` @kind object;
  #L271066.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L27106c.  v3:= temp @kind wide;
  #L27106e.  v2.`c.a.b.c.e` @type ^`long` := v3 @kind wide;
  #L271072.  v2:= `@@c.a.a.a` @type ^`c.a.a` @kind object;
  #L271076.  v3:= v1.`c.a.b.g.g` @type ^`c.i` @kind object;
  #L27107a.  v4:= v1.`c.a.b.g.k` @type ^`c.a.b.c` @kind object;
  #L27107e.  call temp:= `a`(v2, v3, v4) @signature `Lc/a/a;.a:(Lc/i;Lc/a/b/c;)Z` @kind virtual;
  #L271084.  v2:= temp;
  #L271086.  if v2 == 0 then goto L271098;
  #L27108a.  v2:= v1.`c.a.b.g.k` @type ^`c.a.b.c` @kind object;
  #L27108e.  call temp:= `b`(v2) @signature `Lc/a/b/c;.b:()Ljava/net/Socket;` @kind virtual;
  #L271094.  v2:= temp @kind object;
  #L271096.  goto L27109a;
  #L271098.  v2:= v0 @kind object;
  #L27109a.  v1.`c.a.b.g.k` @type ^`c.a.b.c` := v0 @kind object;
  #L27109e.  goto L2710a2;
  #L2710a0.  v2:= v0 @kind object;
  #L2710a2.  return v2 @kind object;
}
procedure `void` `b`(`c.a.b.g` v3 @kind this, `c.a.b.c` v4 @kind object) @signature `Lc/a/b/g;.b:(Lc/a/b/c;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L271460.  v0:= v4.`c.a.b.c.d` @type ^`java.util.List` @kind object;
  #L271464.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L27146a.  v0:= temp;
  #L27146c.  v1:= 0I;
  #L27146e.  if v1 >= v0 then goto L2714a0;
  #L271472.  v2:= v4.`c.a.b.c.d` @type ^`java.util.List` @kind object;
  #L271476.  call temp:= `get`(v2, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L27147c.  v2:= temp @kind object;
  #L27147e.  v2:= (`java.lang.ref.Reference`) v2 @kind object;
  #L271482.  call temp:= `get`(v2) @signature `Ljava/lang/ref/Reference;.get:()Ljava/lang/Object;` @kind virtual;
  #L271488.  v2:= temp @kind object;
  #L27148a.  if v2 != v3 then goto L27149a;
  #L27148e.  v4:= v4.`c.a.b.c.d` @type ^`java.util.List` @kind object;
  #L271492.  call temp:= `remove`(v4, v1) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L271498.  return @kind void;
  #L27149a.  v1:= v1 + 1;
  #L27149e.  goto L27146e;
  #L2714a0.  v4:= new `java.lang.IllegalStateException`;
  #L2714a4.  call `<init>`(v4) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L2714aa.  throw v4;
}
procedure `java.net.Socket` `g`(`c.a.b.g` v2 @kind this) @signature `Lc/a/b/g;.g:()Ljava/net/Socket;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L271144.  v0:= `@@c.a.b.g.d` @type ^`boolean` @kind boolean;
  #L271148.  if v0 != 0 then goto L271168;
  #L27114c.  v0:= v2.`c.a.b.g.g` @type ^`c.i` @kind object;
  #L271150.  call temp:= `holdsLock`(v0) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L271156.  v0:= temp;
  #L271158.  if v0 != 0 then goto L271168;
  #L27115c.  v0:= new `java.lang.AssertionError`;
  #L271160.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L271166.  throw v0;
  #L271168.  v0:= v2.`c.a.b.g.k` @type ^`c.a.b.c` @kind object;
  #L27116c.  if v0 == 0 then goto L271186;
  #L271170.  v0:= v0.`c.a.b.c.a` @type ^`boolean` @kind boolean;
  #L271174.  if v0 == 0 then goto L271186;
  #L271178.  v0:= 1I;
  #L27117a.  v1:= 0I;
  #L27117c.  call temp:= `a`(v2, v1, v1, v0) @signature `Lc/a/b/g;.a:(ZZZ)Ljava/net/Socket;` @kind direct;
  #L271182.  v0:= temp @kind object;
  #L271184.  return v0 @kind object;
  #L271186.  v0:= 0I;
  #L271188.  return v0 @kind object;
}
procedure `c.a.b.d` `h`(`c.a.b.g` v2 @kind this) @signature `Lc/a/b/g;.h:()Lc/a/b/d;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L270eac.  v0:= `@@c.a.a.a` @type ^`c.a.a` @kind object;
  #L270eb0.  v1:= v2.`c.a.b.g.g` @type ^`c.i` @kind object;
  #L270eb4.  call temp:= `a`(v0, v1) @signature `Lc/a/a;.a:(Lc/i;)Lc/a/b/d;` @kind virtual;
  #L270eba.  v0:= temp @kind object;
  #L270ebc.  return v0 @kind object;
}
procedure `c.a.c.c` `a`(`c.a.b.g` v2 @kind this) @signature `Lc/a/b/g;.a:()Lc/a/c/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L270ed0.  v0:= v2.`c.a.b.g.g` @type ^`c.i` @kind object;
  #L270ed4.  @monitorenter v0
  #L270ed6.  v1:= v2.`c.a.b.g.o` @type ^`c.a.c.c` @kind object;
  #L270eda.  @monitorexit v0
  #L270edc.  return v1 @kind object;
  #L270ede.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L270ee0.  @monitorexit v0
  #L270ee2.  throw v1;
  catch `java.lang.Throwable` @[L270ed6..L270ee2] goto L270ede;
}
procedure `c.a.c.c` `a`(`c.a.b.g` v7 @kind this, `c.u` v8 @kind object, `c.s$a` v9 @kind object, `boolean` v10 ) @signature `Lc/a/b/g;.a:(Lc/u;Lc/s$a;Z)Lc/a/c/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L270f00.  call temp:= `b`(v9) @signature `Lc/s$a;.b:()I` @kind interface;
  #L270f06.  v1:= temp;
  #L270f08.  call temp:= `c`(v9) @signature `Lc/s$a;.c:()I` @kind interface;
  #L270f0e.  v2:= temp;
  #L270f10.  call temp:= `d`(v9) @signature `Lc/s$a;.d:()I` @kind interface;
  #L270f16.  v3:= temp;
  #L270f18.  call temp:= `d`(v8) @signature `Lc/u;.d:()I` @kind virtual;
  #L270f1e.  v4:= temp;
  #L270f20.  call temp:= `s`(v8) @signature `Lc/u;.s:()Z` @kind virtual;
  #L270f26.  v5:= temp;
  #L270f28.  v0:= v7 @kind object;
  #L270f2a.  v6:= v10;
  #L270f2c.  call temp:= `a`(v0, v1, v2, v3, v4, v5, v6) @signature `Lc/a/b/g;.a:(IIIIZZ)Lc/a/b/c;` @kind direct;
  #L270f32.  v10:= temp @kind object;
  #L270f34.  call temp:= `a`(v10, v8, v9, v7) @signature `Lc/a/b/c;.a:(Lc/u;Lc/s$a;Lc/a/b/g;)Lc/a/c/c;` @kind virtual;
  #L270f3a.  v8:= temp @kind object;
  #L270f3c.  v9:= v7.`c.a.b.g.g` @type ^`c.i` @kind object;
  #L270f40.  @monitorenter v9
  #L270f42.  v7.`c.a.b.g.o` @type ^`c.a.c.c` := v8 @kind object;
  #L270f46.  @monitorexit v9
  #L270f48.  return v8 @kind object;
  #L270f4a.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L270f4c.  @monitorexit v9
  #L270f4e.  throw v8;
  #L270f50.  v8:= Exception @type ^`java.io.IOException` @kind object;
  #L270f52.  v9:= new `c.a.b.e`;
  #L270f56.  call `<init>`(v9, v8) @signature `Lc/a/b/e;.<init>:(Ljava/io/IOException;)V` @kind direct;
  #L270f5c.  throw v9;
  catch `java.io.IOException` @[L270f2c..L270f42] goto L270f50;
  catch `java.lang.Throwable` @[L270f42..L270f4e] goto L270f4a;
  catch `java.io.IOException` @[L270f4e..L270f50] goto L270f50;
}
procedure `java.net.Socket` `a`(`c.a.b.g` v3 @kind this, `c.a.b.c` v4 @kind object) @signature `Lc/a/b/g;.a:(Lc/a/b/c;)Ljava/net/Socket;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2710b4.  v0:= `@@c.a.b.g.d` @type ^`boolean` @kind boolean;
  #L2710b8.  if v0 != 0 then goto L2710d8;
  #L2710bc.  v0:= v3.`c.a.b.g.g` @type ^`c.i` @kind object;
  #L2710c0.  call temp:= `holdsLock`(v0) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L2710c6.  v0:= temp;
  #L2710c8.  if v0 != 0 then goto L2710d8;
  #L2710cc.  v4:= new `java.lang.AssertionError`;
  #L2710d0.  call `<init>`(v4) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2710d6.  throw v4;
  #L2710d8.  v0:= v3.`c.a.b.g.o` @type ^`c.a.c.c` @kind object;
  #L2710dc.  if v0 != 0 then goto L271126;
  #L2710e0.  v0:= v3.`c.a.b.g.k` @type ^`c.a.b.c` @kind object;
  #L2710e4.  v0:= v0.`c.a.b.c.d` @type ^`java.util.List` @kind object;
  #L2710e8.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2710ee.  v0:= temp;
  #L2710f0.  v1:= 1I;
  #L2710f2.  if v0 == v1 then goto L2710f8;
  #L2710f6.  goto L271126;
  #L2710f8.  v0:= v3.`c.a.b.g.k` @type ^`c.a.b.c` @kind object;
  #L2710fc.  v0:= v0.`c.a.b.c.d` @type ^`java.util.List` @kind object;
  #L271100.  v2:= 0I;
  #L271102.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L271108.  v0:= temp @kind object;
  #L27110a.  v0:= (`java.lang.ref.Reference`) v0 @kind object;
  #L27110e.  call temp:= `a`(v3, v1, v2, v2) @signature `Lc/a/b/g;.a:(ZZZ)Ljava/net/Socket;` @kind direct;
  #L271114.  v1:= temp @kind object;
  #L271116.  v3.`c.a.b.g.k` @type ^`c.a.b.c` := v4 @kind object;
  #L27111a.  v4:= v4.`c.a.b.c.d` @type ^`java.util.List` @kind object;
  #L27111e.  call temp:= `add`(v4, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L271124.  return v1 @kind object;
  #L271126.  v4:= new `java.lang.IllegalStateException`;
  #L27112a.  call `<init>`(v4) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L271130.  throw v4;
}
procedure `void` `a`(`c.a.b.g` v1 @kind this, `c.a.b.c` v2 @kind object, `boolean` v3 ) @signature `Lc/a/b/g;.a:(Lc/a/b/c;Z)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2712f8.  v0:= `@@c.a.b.g.d` @type ^`boolean` @kind boolean;
  #L2712fc.  if v0 != 0 then goto L27131c;
  #L271300.  v0:= v1.`c.a.b.g.g` @type ^`c.i` @kind object;
  #L271304.  call temp:= `holdsLock`(v0) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L27130a.  v0:= temp;
  #L27130c.  if v0 != 0 then goto L27131c;
  #L271310.  v2:= new `java.lang.AssertionError`;
  #L271314.  call `<init>`(v2) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L27131a.  throw v2;
  #L27131c.  v0:= v1.`c.a.b.g.k` @type ^`c.a.b.c` @kind object;
  #L271320.  if v0 == 0 then goto L271330;
  #L271324.  v2:= new `java.lang.IllegalStateException`;
  #L271328.  call `<init>`(v2) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L27132e.  throw v2;
  #L271330.  v1.`c.a.b.g.k` @type ^`c.a.b.c` := v2 @kind object;
  #L271334.  v1.`c.a.b.g.l` @type ^`boolean` := v3 @kind boolean;
  #L271338.  v2:= v2.`c.a.b.c.d` @type ^`java.util.List` @kind object;
  #L27133c.  v3:= new `c.a.b.g$a`;
  #L271340.  v0:= v1.`c.a.b.g.h` @type ^`java.lang.Object` @kind object;
  #L271344.  call `<init>`(v3, v1, v0) @signature `Lc/a/b/g$a;.<init>:(Lc/a/b/g;Ljava/lang/Object;)V` @kind direct;
  #L27134a.  call temp:= `add`(v2, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L271350.  return @kind void;
}
procedure `void` `a`(`c.a.b.g` v6 @kind this, `java.io.IOException` v7 @kind object) @signature `Lc/a/b/g;.a:(Ljava/io/IOException;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L271364.  v0:= v6.`c.a.b.g.g` @type ^`c.i` @kind object;
  #L271368.  @monitorenter v0
  #L27136a.  v1:= instanceof @variable v7 @type ^`c.a.e.n` @kind boolean;
  #L27136e.  v2:= 0I;
  #L271370.  v3:= 0I;
  #L271372.  v4:= 1I;
  #L271374.  if v1 == 0 then goto L2713ac;
  #L271378.  v7:= (`c.a.e.n`) v7 @kind object;
  #L27137c.  v1:= v7.`c.a.e.n.a` @type ^`c.a.e.b` @kind object;
  #L271380.  v5:= `@@c.a.e.b.e` @type ^`c.a.e.b` @kind object;
  #L271384.  if v1 != v5 then goto L271392;
  #L271388.  v1:= v6.`c.a.b.g.j` @type ^`int`;
  #L27138c.  v1:= v1 + v4 @kind int;
  #L27138e.  v6.`c.a.b.g.j` @type ^`int` := v1;
  #L271392.  v7:= v7.`c.a.e.n.a` @type ^`c.a.e.b` @kind object;
  #L271396.  v1:= `@@c.a.e.b.e` @type ^`c.a.e.b` @kind object;
  #L27139a.  if v7 != v1 then goto L2713a6;
  #L27139e.  v7:= v6.`c.a.b.g.j` @type ^`int`;
  #L2713a2.  if v7 <= v4 then goto L2713fa;
  #L2713a6.  v6.`c.a.b.g.f` @type ^`c.ab` := v3 @kind object;
  #L2713aa.  goto L2713f6;
  #L2713ac.  v1:= v6.`c.a.b.g.k` @type ^`c.a.b.c` @kind object;
  #L2713b0.  if v1 == 0 then goto L2713fa;
  #L2713b4.  v1:= v6.`c.a.b.g.k` @type ^`c.a.b.c` @kind object;
  #L2713b8.  call temp:= `d`(v1) @signature `Lc/a/b/c;.d:()Z` @kind virtual;
  #L2713be.  v1:= temp;
  #L2713c0.  if v1 == 0 then goto L2713cc;
  #L2713c4.  v1:= instanceof @variable v7 @type ^`c.a.e.a` @kind boolean;
  #L2713c8.  if v1 == 0 then goto L2713fa;
  #L2713cc.  v1:= v6.`c.a.b.g.k` @type ^`c.a.b.c` @kind object;
  #L2713d0.  v1:= v1.`c.a.b.c.b` @type ^`int`;
  #L2713d4.  if v1 != 0 then goto L2713f6;
  #L2713d8.  v1:= v6.`c.a.b.g.f` @type ^`c.ab` @kind object;
  #L2713dc.  if v1 == 0 then goto L2713f2;
  #L2713e0.  if v7 == 0 then goto L2713f2;
  #L2713e4.  v1:= v6.`c.a.b.g.i` @type ^`c.a.b.f` @kind object;
  #L2713e8.  v5:= v6.`c.a.b.g.f` @type ^`c.ab` @kind object;
  #L2713ec.  call `a`(v1, v5, v7) @signature `Lc/a/b/f;.a:(Lc/ab;Ljava/io/IOException;)V` @kind virtual;
  #L2713f2.  v6.`c.a.b.g.f` @type ^`c.ab` := v3 @kind object;
  #L2713f6.  v7:= 1I;
  #L2713f8.  goto L2713fc;
  #L2713fa.  v7:= 0I;
  #L2713fc.  v1:= v6.`c.a.b.g.k` @type ^`c.a.b.c` @kind object;
  #L271400.  call temp:= `a`(v6, v7, v2, v4) @signature `Lc/a/b/g;.a:(ZZZ)Ljava/net/Socket;` @kind direct;
  #L271406.  v7:= temp @kind object;
  #L271408.  v2:= v6.`c.a.b.g.k` @type ^`c.a.b.c` @kind object;
  #L27140c.  if v2 != 0 then goto L271418;
  #L271410.  v2:= v6.`c.a.b.g.l` @type ^`boolean` @kind boolean;
  #L271414.  if v2 != 0 then goto L27141a;
  #L271418.  v1:= v3 @kind object;
  #L27141a.  @monitorexit v0
  #L27141c.  call `a`(v7) @signature `Lc/a/c;.a:(Ljava/net/Socket;)V` @kind static;
  #L271422.  if v1 == 0 then goto L271434;
  #L271426.  v7:= v6.`c.a.b.g.c` @type ^`c.o` @kind object;
  #L27142a.  v0:= v6.`c.a.b.g.b` @type ^`c.e` @kind object;
  #L27142e.  call `b`(v7, v0, v1) @signature `Lc/o;.b:(Lc/e;Lc/h;)V` @kind virtual;
  #L271434.  return @kind void;
  #L271436.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L271438.  @monitorexit v0
  #L27143a.  throw v7;
  catch `java.lang.Throwable` @[L27136a..L27141c] goto L271436;
  catch `java.lang.Throwable` @[L271438..L27143a] goto L271436;
}
procedure `void` `a`(`c.a.b.g` v2 @kind this, `boolean` v3 , `c.a.c.c` v4 @kind object, `long` v5 , `java.io.IOException` v7 @kind object) @signature `Lc/a/b/g;.a:(ZLc/a/c/c;JLjava/io/IOException;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2711f4.  v0:= v2.`c.a.b.g.c` @type ^`c.o` @kind object;
  #L2711f8.  v1:= v2.`c.a.b.g.b` @type ^`c.e` @kind object;
  #L2711fc.  call `b`(v0, v1, v5) @signature `Lc/o;.b:(Lc/e;J)V` @kind virtual;
  #L271202.  v5:= v2.`c.a.b.g.g` @type ^`c.i` @kind object;
  #L271206.  @monitorenter v5
  #L271208.  if v4 == 0 then goto L27128c;
  #L27120c.  v6:= v2.`c.a.b.g.o` @type ^`c.a.c.c` @kind object;
  #L271210.  if v4 == v6 then goto L271216;
  #L271214.  goto L27128c;
  #L271216.  v4:= 1I;
  #L271218.  if v3 != 0 then goto L27122a;
  #L27121c.  v6:= v2.`c.a.b.g.k` @type ^`c.a.b.c` @kind object;
  #L271220.  v0:= v6.`c.a.b.c.b` @type ^`int`;
  #L271224.  v0:= v0 + v4 @kind int;
  #L271226.  v6.`c.a.b.c.b` @type ^`int` := v0;
  #L27122a.  v6:= v2.`c.a.b.g.k` @type ^`c.a.b.c` @kind object;
  #L27122e.  v0:= 0I;
  #L271230.  call temp:= `a`(v2, v3, v0, v4) @signature `Lc/a/b/g;.a:(ZZZ)Ljava/net/Socket;` @kind direct;
  #L271236.  v3:= temp @kind object;
  #L271238.  v4:= v2.`c.a.b.g.k` @type ^`c.a.b.c` @kind object;
  #L27123c.  if v4 == 0 then goto L271242;
  #L271240.  v6:= 0I;
  #L271242.  v4:= v2.`c.a.b.g.m` @type ^`boolean` @kind boolean;
  #L271246.  @monitorexit v5
  #L271248.  call `a`(v3) @signature `Lc/a/c;.a:(Ljava/net/Socket;)V` @kind static;
  #L27124e.  if v6 == 0 then goto L271260;
  #L271252.  v3:= v2.`c.a.b.g.c` @type ^`c.o` @kind object;
  #L271256.  v5:= v2.`c.a.b.g.b` @type ^`c.e` @kind object;
  #L27125a.  call `b`(v3, v5, v6) @signature `Lc/o;.b:(Lc/e;Lc/h;)V` @kind virtual;
  #L271260.  if v7 == 0 then goto L271274;
  #L271264.  v3:= v2.`c.a.b.g.c` @type ^`c.o` @kind object;
  #L271268.  v4:= v2.`c.a.b.g.b` @type ^`c.e` @kind object;
  #L27126c.  call `a`(v3, v4, v7) @signature `Lc/o;.a:(Lc/e;Ljava/io/IOException;)V` @kind virtual;
  #L271272.  goto L271286;
  #L271274.  if v4 == 0 then goto L271286;
  #L271278.  v3:= v2.`c.a.b.g.c` @type ^`c.o` @kind object;
  #L27127c.  v4:= v2.`c.a.b.g.b` @type ^`c.e` @kind object;
  #L271280.  call `g`(v3, v4) @signature `Lc/o;.g:(Lc/e;)V` @kind virtual;
  #L271286.  return @kind void;
  #L271288.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L27128a.  goto L2712ce;
  #L27128c.  v3:= new `java.lang.IllegalStateException`;
  #L271290.  v6:= new `java.lang.StringBuilder`;
  #L271294.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L27129a.  v7:= "expected " @kind object;
  #L27129e.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2712a4.  v7:= v2.`c.a.b.g.o` @type ^`c.a.c.c` @kind object;
  #L2712a8.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2712ae.  v7:= " but was " @kind object;
  #L2712b2.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2712b8.  call temp:= `append`(v6, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2712be.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2712c4.  v4:= temp @kind object;
  #L2712c6.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2712cc.  throw v3;
  #L2712ce.  @monitorexit v5
  #L2712d0.  throw v3;
  catch `java.lang.Throwable` @[L27120c..L271248] goto L271288;
  catch `java.lang.Throwable` @[L27128c..L2712d0] goto L271288;
}
procedure `c.ab` `b`(`c.a.b.g` v1 @kind this) @signature `Lc/a/b/g;.b:()Lc/ab;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L270f90.  v0:= v1.`c.a.b.g.f` @type ^`c.ab` @kind object;
  #L270f94.  return v0 @kind object;
}
procedure `c.a.b.c` `c`(`c.a.b.g` v1 @kind this) @signature `Lc/a/b/g;.c:()Lc/a/b/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L270e80.  @monitorenter v1
  #L270e82.  v0:= v1.`c.a.b.g.k` @type ^`c.a.b.c` @kind object;
  #L270e86.  @monitorexit v1
  #L270e88.  return v0 @kind object;
  #L270e8a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L270e8c.  @monitorexit v1
  #L270e8e.  throw v0;
  catch `java.lang.Throwable` @[L270e82..L270e86] goto L270e8a;
}
procedure `void` `d`(`c.a.b.g` v4 @kind this) @signature `Lc/a/b/g;.d:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2714bc.  v0:= v4.`c.a.b.g.g` @type ^`c.i` @kind object;
  #L2714c0.  @monitorenter v0
  #L2714c2.  v1:= v4.`c.a.b.g.k` @type ^`c.a.b.c` @kind object;
  #L2714c6.  v2:= 1I;
  #L2714c8.  v3:= 0I;
  #L2714ca.  call temp:= `a`(v4, v3, v2, v3) @signature `Lc/a/b/g;.a:(ZZZ)Ljava/net/Socket;` @kind direct;
  #L2714d0.  v2:= temp @kind object;
  #L2714d2.  v3:= v4.`c.a.b.g.k` @type ^`c.a.b.c` @kind object;
  #L2714d6.  if v3 == 0 then goto L2714dc;
  #L2714da.  v1:= 0I;
  #L2714dc.  @monitorexit v0
  #L2714de.  call `a`(v2) @signature `Lc/a/c;.a:(Ljava/net/Socket;)V` @kind static;
  #L2714e4.  if v1 == 0 then goto L2714f6;
  #L2714e8.  v0:= v4.`c.a.b.g.c` @type ^`c.o` @kind object;
  #L2714ec.  v2:= v4.`c.a.b.g.b` @type ^`c.e` @kind object;
  #L2714f0.  call `b`(v0, v2, v1) @signature `Lc/o;.b:(Lc/e;Lc/h;)V` @kind virtual;
  #L2714f6.  return @kind void;
  #L2714f8.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2714fa.  @monitorexit v0
  #L2714fc.  throw v1;
  catch `java.lang.Throwable` @[L2714c2..L2714de] goto L2714f8;
  catch `java.lang.Throwable` @[L2714fa..L2714fc] goto L2714f8;
}
procedure `void` `e`(`c.a.b.g` v4 @kind this) @signature `Lc/a/b/g;.e:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L271524.  v0:= v4.`c.a.b.g.g` @type ^`c.i` @kind object;
  #L271528.  @monitorenter v0
  #L27152a.  v1:= v4.`c.a.b.g.k` @type ^`c.a.b.c` @kind object;
  #L27152e.  v2:= 1I;
  #L271530.  v3:= 0I;
  #L271532.  call temp:= `a`(v4, v2, v3, v3) @signature `Lc/a/b/g;.a:(ZZZ)Ljava/net/Socket;` @kind direct;
  #L271538.  v2:= temp @kind object;
  #L27153a.  v3:= v4.`c.a.b.g.k` @type ^`c.a.b.c` @kind object;
  #L27153e.  if v3 == 0 then goto L271544;
  #L271542.  v1:= 0I;
  #L271544.  @monitorexit v0
  #L271546.  call `a`(v2) @signature `Lc/a/c;.a:(Ljava/net/Socket;)V` @kind static;
  #L27154c.  if v1 == 0 then goto L27155e;
  #L271550.  v0:= v4.`c.a.b.g.c` @type ^`c.o` @kind object;
  #L271554.  v2:= v4.`c.a.b.g.b` @type ^`c.e` @kind object;
  #L271558.  call `b`(v0, v2, v1) @signature `Lc/o;.b:(Lc/e;Lc/h;)V` @kind virtual;
  #L27155e.  return @kind void;
  #L271560.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L271562.  @monitorexit v0
  #L271564.  throw v1;
  catch `java.lang.Throwable` @[L27152a..L271546] goto L271560;
  catch `java.lang.Throwable` @[L271562..L271564] goto L271560;
}
procedure `boolean` `f`(`c.a.b.g` v1 @kind this) @signature `Lc/a/b/g;.f:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L270b04.  v0:= v1.`c.a.b.g.f` @type ^`c.ab` @kind object;
  #L270b08.  if v0 != 0 then goto L270b3a;
  #L270b0c.  v0:= v1.`c.a.b.g.e` @type ^`c.a.b.f$a` @kind object;
  #L270b10.  if v0 == 0 then goto L270b24;
  #L270b14.  v0:= v1.`c.a.b.g.e` @type ^`c.a.b.f$a` @kind object;
  #L270b18.  call temp:= `a`(v0) @signature `Lc/a/b/f$a;.a:()Z` @kind virtual;
  #L270b1e.  v0:= temp;
  #L270b20.  if v0 != 0 then goto L270b3a;
  #L270b24.  v0:= v1.`c.a.b.g.i` @type ^`c.a.b.f` @kind object;
  #L270b28.  call temp:= `a`(v0) @signature `Lc/a/b/f;.a:()Z` @kind virtual;
  #L270b2e.  v0:= temp;
  #L270b30.  if v0 == 0 then goto L270b36;
  #L270b34.  goto L270b3a;
  #L270b36.  v0:= 0I;
  #L270b38.  goto L270b3c;
  #L270b3a.  v0:= 1I;
  #L270b3c.  return v0;
}
procedure `java.lang.String` `toString`(`c.a.b.g` v1 @kind this) @signature `Lc/a/b/g;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L270fa8.  call temp:= `c`(v1) @signature `Lc/a/b/g;.c:()Lc/a/b/c;` @kind virtual;
  #L270fae.  v0:= temp @kind object;
  #L270fb0.  if v0 == 0 then goto L270fbe;
  #L270fb4.  call temp:= `toString`(v0) @signature `Lc/a/b/c;.toString:()Ljava/lang/String;` @kind virtual;
  #L270fba.  v0:= temp @kind object;
  #L270fbc.  goto L270fca;
  #L270fbe.  v0:= v1.`c.a.b.g.a` @type ^`c.a` @kind object;
  #L270fc2.  call temp:= `toString`(v0) @signature `Lc/a;.toString:()Ljava/lang/String;` @kind virtual;
  #L270fc8.  v0:= temp @kind object;
  #L270fca.  return v0 @kind object;
}
