record `c.a.i.b` @kind class @AccessFlag PUBLIC_FINAL extends `c.a.i.e` @kind interface {
  `java.util.Map` `c.a.i.b.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`c.a.i.b` v6 @kind this, `java.security.cert.X509Certificate`[] v7 @kind object) @signature `Lc/a/i/b;.<init>:([Ljava/security/cert/X509Certificate;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L27d894.  call `<init>`(v6) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L27d89a.  v0:= new `java.util.LinkedHashMap`;
  #L27d89e.  call `<init>`(v0) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L27d8a4.  v6.`c.a.i.b.a` @type ^`java.util.Map` := v0 @kind object;
  #L27d8a8.  v0:= length @variable v7;
  #L27d8aa.  v1:= 0I;
  #L27d8ac.  if v1 >= v0 then goto L27d8f2;
  #L27d8b0.  v2:= v7[v1] @kind object;
  #L27d8b4.  call temp:= `getSubjectX500Principal`(v2) @signature `Ljava/security/cert/X509Certificate;.getSubjectX500Principal:()Ljavax/security/auth/x500/X500Principal;` @kind virtual;
  #L27d8ba.  v3:= temp @kind object;
  #L27d8bc.  v4:= v6.`c.a.i.b.a` @type ^`java.util.Map` @kind object;
  #L27d8c0.  call temp:= `get`(v4, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L27d8c6.  v4:= temp @kind object;
  #L27d8c8.  v4:= (`java.util.Set`) v4 @kind object;
  #L27d8cc.  if v4 != 0 then goto L27d8e6;
  #L27d8d0.  v4:= new `java.util.LinkedHashSet`;
  #L27d8d4.  v5:= 1I;
  #L27d8d6.  call `<init>`(v4, v5) @signature `Ljava/util/LinkedHashSet;.<init>:(I)V` @kind direct;
  #L27d8dc.  v5:= v6.`c.a.i.b.a` @type ^`java.util.Map` @kind object;
  #L27d8e0.  call temp:= `put`(v5, v3, v4) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L27d8e6.  call temp:= `add`(v4, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L27d8ec.  v1:= v1 + 1;
  #L27d8f0.  goto L27d8ac;
  #L27d8f2.  return @kind void;
}
procedure `java.security.cert.X509Certificate` `a`(`c.a.i.b` v4 @kind this, `java.security.cert.X509Certificate` v5 @kind object) @signature `Lc/a/i/b;.a:(Ljava/security/cert/X509Certificate;)Ljava/security/cert/X509Certificate;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L27d820.  call temp:= `getIssuerX500Principal`(v5) @signature `Ljava/security/cert/X509Certificate;.getIssuerX500Principal:()Ljavax/security/auth/x500/X500Principal;` @kind virtual;
  #L27d826.  v0:= temp @kind object;
  #L27d828.  v1:= v4.`c.a.i.b.a` @type ^`java.util.Map` @kind object;
  #L27d82c.  call temp:= `get`(v1, v0) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L27d832.  v0:= temp @kind object;
  #L27d834.  v0:= (`java.util.Set`) v0 @kind object;
  #L27d838.  v1:= 0I;
  #L27d83a.  if v0 != 0 then goto L27d840;
  #L27d83e.  return v1 @kind object;
  #L27d840.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L27d846.  v0:= temp @kind object;
  #L27d848.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L27d84e.  v2:= temp;
  #L27d850.  if v2 == 0 then goto L27d870;
  #L27d854.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L27d85a.  v2:= temp @kind object;
  #L27d85c.  v2:= (`java.security.cert.X509Certificate`) v2 @kind object;
  #L27d860.  call temp:= `getPublicKey`(v2) @signature `Ljava/security/cert/X509Certificate;.getPublicKey:()Ljava/security/PublicKey;` @kind virtual;
  #L27d866.  v3:= temp @kind object;
  #L27d868.  call `verify`(v5, v3) @signature `Ljava/security/cert/X509Certificate;.verify:(Ljava/security/PublicKey;)V` @kind virtual;
  #L27d86e.  return v2 @kind object;
  #L27d870.  return v1 @kind object;
  catch `java.lang.Exception` @[L27d868..L27d86e] goto L27d848;
}
procedure `boolean` `equals`(`c.a.i.b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lc/a/i/b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L27d7c0.  v0:= 1I;
  #L27d7c2.  if v3 != v2 then goto L27d7c8;
  #L27d7c6.  return v0;
  #L27d7c8.  v1:= instanceof @variable v3 @type ^`c.a.i.b` @kind boolean;
  #L27d7cc.  if v1 == 0 then goto L27d7ea;
  #L27d7d0.  v3:= (`c.a.i.b`) v3 @kind object;
  #L27d7d4.  v3:= v3.`c.a.i.b.a` @type ^`java.util.Map` @kind object;
  #L27d7d8.  v1:= v2.`c.a.i.b.a` @type ^`java.util.Map` @kind object;
  #L27d7dc.  call temp:= `equals`(v3, v1) @signature `Ljava/util/Map;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L27d7e2.  v3:= temp;
  #L27d7e4.  if v3 == 0 then goto L27d7ea;
  #L27d7e8.  goto L27d7ec;
  #L27d7ea.  v0:= 0I;
  #L27d7ec.  return v0;
}
procedure `int` `hashCode`(`c.a.i.b` v1 @kind this) @signature `Lc/a/i/b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27d800.  v0:= v1.`c.a.i.b.a` @type ^`java.util.Map` @kind object;
  #L27d804.  call temp:= `hashCode`(v0) @signature `Ljava/util/Map;.hashCode:()I` @kind interface;
  #L27d80a.  v0:= temp;
  #L27d80c.  return v0;
}
