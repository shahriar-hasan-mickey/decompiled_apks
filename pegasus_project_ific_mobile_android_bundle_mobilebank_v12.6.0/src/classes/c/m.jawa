record `c.m` @kind class @AccessFlag PUBLIC_FINAL {
  `int` `c.m.a` @AccessFlag PRIVATE;
  `int` `c.m.b` @AccessFlag PRIVATE;
  `java.lang.Runnable` `c.m.c` @AccessFlag PRIVATE;
  `java.util.concurrent.ExecutorService` `c.m.d` @AccessFlag PRIVATE;
  `java.util.Deque` `c.m.e` @AccessFlag PRIVATE_FINAL;
  `java.util.Deque` `c.m.f` @AccessFlag PRIVATE_FINAL;
  `java.util.Deque` `c.m.g` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`c.m` v1 @kind this) @signature `Lc/m;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L281b34.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L281b3a.  v0:= 64I;
  #L281b3e.  v1.`c.m.a` @type ^`int` := v0;
  #L281b42.  v0:= 5I;
  #L281b44.  v1.`c.m.b` @type ^`int` := v0;
  #L281b48.  v0:= new `java.util.ArrayDeque`;
  #L281b4c.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L281b52.  v1.`c.m.e` @type ^`java.util.Deque` := v0 @kind object;
  #L281b56.  v0:= new `java.util.ArrayDeque`;
  #L281b5a.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L281b60.  v1.`c.m.f` @type ^`java.util.Deque` := v0 @kind object;
  #L281b64.  v0:= new `java.util.ArrayDeque`;
  #L281b68.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L281b6e.  v1.`c.m.g` @type ^`java.util.Deque` := v0 @kind object;
  #L281b72.  return @kind void;
}
procedure `void` `a`(`c.m` v0 @kind this, `java.util.Deque` v1 @kind object, `java.lang.Object` v2 @kind object, `boolean` v3 ) @signature `Lc/m;.a:(Ljava/util/Deque;Ljava/lang/Object;Z)V` @AccessFlag PRIVATE {
    temp;

  #L281bd8.  @monitorenter v0
  #L281bda.  call temp:= `remove`(v1, v2) @signature `Ljava/util/Deque;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L281be0.  v1:= temp;
  #L281be2.  if v1 != 0 then goto L281bf6;
  #L281be6.  v1:= new `java.lang.AssertionError`;
  #L281bea.  v2:= "Call wasn't in-flight!" @kind object;
  #L281bee.  call `<init>`(v1, v2) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L281bf4.  throw v1;
  #L281bf6.  if v3 == 0 then goto L281c00;
  #L281bfa.  call `c`(v0) @signature `Lc/m;.c:()V` @kind direct;
  #L281c00.  call temp:= `b`(v0) @signature `Lc/m;.b:()I` @kind virtual;
  #L281c06.  v1:= temp;
  #L281c08.  v2:= v0.`c.m.c` @type ^`java.lang.Runnable` @kind object;
  #L281c0c.  @monitorexit v0
  #L281c0e.  if v1 != 0 then goto L281c1c;
  #L281c12.  if v2 == 0 then goto L281c1c;
  #L281c16.  call `run`(v2) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L281c1c.  return @kind void;
  #L281c1e.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L281c20.  @monitorexit v0
  #L281c22.  throw v1;
  catch `java.lang.Throwable` @[L281bda..L281c0e] goto L281c1e;
  catch `java.lang.Throwable` @[L281c20..L281c22] goto L281c1e;
}
procedure `int` `b`(`c.m` v4 @kind this, `c.w$a` v5 @kind object) @signature `Lc/m;.b:(Lc/w$a;)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L281a5c.  v0:= v4.`c.m.f` @type ^`java.util.Deque` @kind object;
  #L281a60.  call temp:= `iterator`(v0) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L281a66.  v0:= temp @kind object;
  #L281a68.  v1:= 0I;
  #L281a6a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L281a70.  v2:= temp;
  #L281a72.  if v2 == 0 then goto L281ab6;
  #L281a76.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L281a7c.  v2:= temp @kind object;
  #L281a7e.  v2:= (`c.w$a`) v2 @kind object;
  #L281a82.  call temp:= `b`(v2) @signature `Lc/w$a;.b:()Lc/w;` @kind virtual;
  #L281a88.  v3:= temp @kind object;
  #L281a8a.  v3:= v3.`c.w.d` @type ^`boolean` @kind boolean;
  #L281a8e.  if v3 == 0 then goto L281a94;
  #L281a92.  goto L281a6a;
  #L281a94.  call temp:= `a`(v2) @signature `Lc/w$a;.a:()Ljava/lang/String;` @kind virtual;
  #L281a9a.  v2:= temp @kind object;
  #L281a9c.  call temp:= `a`(v5) @signature `Lc/w$a;.a:()Ljava/lang/String;` @kind virtual;
  #L281aa2.  v3:= temp @kind object;
  #L281aa4.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L281aaa.  v2:= temp;
  #L281aac.  if v2 == 0 then goto L281a6a;
  #L281ab0.  v1:= v1 + 1;
  #L281ab4.  goto L281a6a;
  #L281ab6.  return v1;
}
procedure `void` `c`(`c.m` v4 @kind this) @signature `Lc/m;.c:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L281c68.  v0:= v4.`c.m.f` @type ^`java.util.Deque` @kind object;
  #L281c6c.  call temp:= `size`(v0) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #L281c72.  v0:= temp;
  #L281c74.  v1:= v4.`c.m.a` @type ^`int`;
  #L281c78.  if v0 < v1 then goto L281c7e;
  #L281c7c.  return @kind void;
  #L281c7e.  v0:= v4.`c.m.e` @type ^`java.util.Deque` @kind object;
  #L281c82.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Deque;.isEmpty:()Z` @kind interface;
  #L281c88.  v0:= temp;
  #L281c8a.  if v0 == 0 then goto L281c90;
  #L281c8e.  return @kind void;
  #L281c90.  v0:= v4.`c.m.e` @type ^`java.util.Deque` @kind object;
  #L281c94.  call temp:= `iterator`(v0) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L281c9a.  v0:= temp @kind object;
  #L281c9c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L281ca2.  v1:= temp;
  #L281ca4.  if v1 == 0 then goto L281cf8;
  #L281ca8.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L281cae.  v1:= temp @kind object;
  #L281cb0.  v1:= (`c.w$a`) v1 @kind object;
  #L281cb4.  call temp:= `b`(v4, v1) @signature `Lc/m;.b:(Lc/w$a;)I` @kind direct;
  #L281cba.  v2:= temp;
  #L281cbc.  v3:= v4.`c.m.b` @type ^`int`;
  #L281cc0.  if v2 >= v3 then goto L281ce2;
  #L281cc4.  call `remove`(v0) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L281cca.  v2:= v4.`c.m.f` @type ^`java.util.Deque` @kind object;
  #L281cce.  call temp:= `add`(v2, v1) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L281cd4.  call temp:= `a`(v4) @signature `Lc/m;.a:()Ljava/util/concurrent/ExecutorService;` @kind virtual;
  #L281cda.  v2:= temp @kind object;
  #L281cdc.  call `execute`(v2, v1) @signature `Ljava/util/concurrent/ExecutorService;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L281ce2.  v1:= v4.`c.m.f` @type ^`java.util.Deque` @kind object;
  #L281ce6.  call temp:= `size`(v1) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #L281cec.  v1:= temp;
  #L281cee.  v2:= v4.`c.m.a` @type ^`int`;
  #L281cf2.  if v1 < v2 then goto L281c9c;
  #L281cf6.  return @kind void;
  #L281cf8.  return @kind void;
}
procedure `java.util.concurrent.ExecutorService` `a`(`c.m` v9 @kind this) @signature `Lc/m;.a:()Ljava/util/concurrent/ExecutorService;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L281ac8.  @monitorenter v9
  #L281aca.  v0:= v9.`c.m.d` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L281ace.  if v0 != 0 then goto L281b0a;
  #L281ad2.  v0:= new `java.util.concurrent.ThreadPoolExecutor`;
  #L281ad6.  v2:= 0I;
  #L281ad8.  v3:= 2147483647I;
  #L281ade.  v4:= 60L;
  #L281ae2.  v6:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L281ae6.  v7:= new `java.util.concurrent.SynchronousQueue`;
  #L281aea.  call `<init>`(v7) @signature `Ljava/util/concurrent/SynchronousQueue;.<init>:()V` @kind direct;
  #L281af0.  v1:= "OkHttp Dispatcher" @kind object;
  #L281af4.  v8:= 0I;
  #L281af6.  call temp:= `a`(v1, v8) @signature `Lc/a/c;.a:(Ljava/lang/String;Z)Ljava/util/concurrent/ThreadFactory;` @kind static;
  #L281afc.  v8:= temp @kind object;
  #L281afe.  v1:= v0 @kind object;
  #L281b00.  call `<init>`(v1, v2, v3, v4, v6, v7, v8) @signature `Ljava/util/concurrent/ThreadPoolExecutor;.<init>:(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L281b06.  v9.`c.m.d` @type ^`java.util.concurrent.ExecutorService` := v0 @kind object;
  #L281b0a.  v0:= v9.`c.m.d` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L281b0e.  @monitorexit v9
  #L281b10.  return v0 @kind object;
  #L281b12.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L281b14.  @monitorexit v9
  #L281b16.  throw v0;
  catch `java.lang.Throwable` @[L281aca..L281b0e] goto L281b12;
}
procedure `void` `a`(`c.m` v2 @kind this, `c.w$a` v3 @kind object) @signature `Lc/m;.a:(Lc/w$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L281b84.  v0:= v2.`c.m.f` @type ^`java.util.Deque` @kind object;
  #L281b88.  v1:= 1I;
  #L281b8a.  call `a`(v2, v0, v3, v1) @signature `Lc/m;.a:(Ljava/util/Deque;Ljava/lang/Object;Z)V` @kind direct;
  #L281b90.  return @kind void;
}
procedure `void` `a`(`c.m` v1 @kind this, `c.w` v2 @kind object) @signature `Lc/m;.a:(Lc/w;)V` @AccessFlag  {
    temp;
    v0;

  #L281ba4.  @monitorenter v1
  #L281ba6.  v0:= v1.`c.m.g` @type ^`java.util.Deque` @kind object;
  #L281baa.  call temp:= `add`(v0, v2) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L281bb0.  @monitorexit v1
  #L281bb2.  return @kind void;
  #L281bb4.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L281bb6.  @monitorexit v1
  #L281bb8.  throw v2;
  catch `java.lang.Throwable` @[L281ba6..L281bb0] goto L281bb4;
}
procedure `int` `b`(`c.m` v2 @kind this) @signature `Lc/m;.b:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L281a18.  @monitorenter v2
  #L281a1a.  v0:= v2.`c.m.f` @type ^`java.util.Deque` @kind object;
  #L281a1e.  call temp:= `size`(v0) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #L281a24.  v0:= temp;
  #L281a26.  v1:= v2.`c.m.g` @type ^`java.util.Deque` @kind object;
  #L281a2a.  call temp:= `size`(v1) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #L281a30.  v1:= temp;
  #L281a32.  v0:= v0 + v1 @kind int;
  #L281a34.  @monitorexit v2
  #L281a36.  return v0;
  #L281a38.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L281a3a.  @monitorexit v2
  #L281a3c.  throw v0;
  catch `java.lang.Throwable` @[L281a1a..L281a32] goto L281a38;
}
procedure `void` `b`(`c.m` v2 @kind this, `c.w` v3 @kind object) @signature `Lc/m;.b:(Lc/w;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L281c48.  v0:= v2.`c.m.g` @type ^`java.util.Deque` @kind object;
  #L281c4c.  v1:= 0I;
  #L281c4e.  call `a`(v2, v0, v3, v1) @signature `Lc/m;.a:(Ljava/util/Deque;Ljava/lang/Object;Z)V` @kind direct;
  #L281c54.  return @kind void;
}
