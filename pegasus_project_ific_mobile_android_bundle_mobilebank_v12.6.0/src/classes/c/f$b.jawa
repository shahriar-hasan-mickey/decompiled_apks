record `c.f$b` @kind class @AccessFlag FINAL {
  `java.lang.String` `c.f$b.a` @AccessFlag FINAL;
  `java.lang.String` `c.f$b.b` @AccessFlag FINAL;
  `java.lang.String` `c.f$b.c` @AccessFlag FINAL;
  `d.f` `c.f$b.d` @AccessFlag FINAL;
}
procedure `boolean` `a`(`c.f$b` v10 @kind this, `java.lang.String` v11 @kind object) @signature `Lc/f$b;.a:(Ljava/lang/String;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L27f060.  v0:= v10.`c.f$b.a` @type ^`java.lang.String` @kind object;
  #L27f064.  v1:= "*." @kind object;
  #L27f068.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L27f06e.  v0:= temp;
  #L27f070.  if v0 == 0 then goto L27f0ca;
  #L27f074.  v0:= 46I;
  #L27f078.  call temp:= `indexOf`(v11, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L27f07e.  v0:= temp;
  #L27f080.  call temp:= `length`(v11) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L27f086.  v1:= temp;
  #L27f088.  v1:= v1 - v0 @kind int;
  #L27f08a.  v2:= 1I;
  #L27f08c.  v1:= v1 - v2 @kind int;
  #L27f08e.  v3:= v10.`c.f$b.b` @type ^`java.lang.String` @kind object;
  #L27f092.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L27f098.  v3:= temp;
  #L27f09a.  if v1 != v3 then goto L27f0c6;
  #L27f09e.  v5:= 0I;
  #L27f0a0.  v6:= v0 + 1;
  #L27f0a4.  v7:= v10.`c.f$b.b` @type ^`java.lang.String` @kind object;
  #L27f0a8.  v8:= 0I;
  #L27f0aa.  v0:= v10.`c.f$b.b` @type ^`java.lang.String` @kind object;
  #L27f0ae.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L27f0b4.  v9:= temp;
  #L27f0b6.  v4:= v11 @kind object;
  #L27f0b8.  call temp:= `regionMatches`(v4, v5, v6, v7, v8, v9) @signature `Ljava/lang/String;.regionMatches:(ZILjava/lang/String;II)Z` @kind virtual;
  #L27f0be.  v11:= temp;
  #L27f0c0.  if v11 == 0 then goto L27f0c6;
  #L27f0c4.  goto L27f0c8;
  #L27f0c6.  v2:= 0I;
  #L27f0c8.  return v2;
  #L27f0ca.  v0:= v10.`c.f$b.b` @type ^`java.lang.String` @kind object;
  #L27f0ce.  call temp:= `equals`(v11, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L27f0d4.  v11:= temp;
  #L27f0d6.  return v11;
}
procedure `boolean` `equals`(`c.f$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lc/f$b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L27f0e8.  v0:= instanceof @variable v3 @type ^`c.f$b` @kind boolean;
  #L27f0ec.  if v0 == 0 then goto L27f134;
  #L27f0f0.  v0:= v2.`c.f$b.a` @type ^`java.lang.String` @kind object;
  #L27f0f4.  v3:= (`c.f$b`) v3 @kind object;
  #L27f0f8.  v1:= v3.`c.f$b.a` @type ^`java.lang.String` @kind object;
  #L27f0fc.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L27f102.  v0:= temp;
  #L27f104.  if v0 == 0 then goto L27f134;
  #L27f108.  v0:= v2.`c.f$b.c` @type ^`java.lang.String` @kind object;
  #L27f10c.  v1:= v3.`c.f$b.c` @type ^`java.lang.String` @kind object;
  #L27f110.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L27f116.  v0:= temp;
  #L27f118.  if v0 == 0 then goto L27f134;
  #L27f11c.  v0:= v2.`c.f$b.d` @type ^`d.f` @kind object;
  #L27f120.  v3:= v3.`c.f$b.d` @type ^`d.f` @kind object;
  #L27f124.  call temp:= `equals`(v0, v3) @signature `Ld/f;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L27f12a.  v3:= temp;
  #L27f12c.  if v3 == 0 then goto L27f134;
  #L27f130.  v3:= 1I;
  #L27f132.  goto L27f136;
  #L27f134.  v3:= 0I;
  #L27f136.  return v3;
}
procedure `int` `hashCode`(`c.f$b` v2 @kind this) @signature `Lc/f$b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L27f148.  v0:= v2.`c.f$b.a` @type ^`java.lang.String` @kind object;
  #L27f14c.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L27f152.  v0:= temp;
  #L27f154.  v1:= 527I;
  #L27f158.  v1:= v1 + v0 @kind int;
  #L27f15a.  v1:= v1 * 31;
  #L27f15e.  v0:= v2.`c.f$b.c` @type ^`java.lang.String` @kind object;
  #L27f162.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L27f168.  v0:= temp;
  #L27f16a.  v1:= v1 + v0 @kind int;
  #L27f16c.  v1:= v1 * 31;
  #L27f170.  v0:= v2.`c.f$b.d` @type ^`d.f` @kind object;
  #L27f174.  call temp:= `hashCode`(v0) @signature `Ld/f;.hashCode:()I` @kind virtual;
  #L27f17a.  v0:= temp;
  #L27f17c.  v1:= v1 + v0 @kind int;
  #L27f17e.  return v1;
}
procedure `java.lang.String` `toString`(`c.f$b` v2 @kind this) @signature `Lc/f$b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L27f190.  v0:= new `java.lang.StringBuilder`;
  #L27f194.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L27f19a.  v1:= v2.`c.f$b.c` @type ^`java.lang.String` @kind object;
  #L27f19e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L27f1a4.  v1:= v2.`c.f$b.d` @type ^`d.f` @kind object;
  #L27f1a8.  call temp:= `b`(v1) @signature `Ld/f;.b:()Ljava/lang/String;` @kind virtual;
  #L27f1ae.  v1:= temp @kind object;
  #L27f1b0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L27f1b6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L27f1bc.  v0:= temp @kind object;
  #L27f1be.  return v0 @kind object;
}
