record `c.i` @kind class @AccessFlag PUBLIC_FINAL {
  `c.a.b.d` `c.i.a` @AccessFlag FINAL;
  `boolean` `c.i.b` @AccessFlag ;
  `int` `c.i.e` @AccessFlag PRIVATE_FINAL;
  `long` `c.i.f` @AccessFlag PRIVATE_FINAL;
  `java.lang.Runnable` `c.i.g` @AccessFlag PRIVATE_FINAL;
  `java.util.Deque` `c.i.h` @AccessFlag PRIVATE_FINAL;
}
global `boolean` `@@c.i.c` @AccessFlag STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.Executor` `@@c.i.d` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lc/i;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L28049c.  v8:= new `java.util.concurrent.ThreadPoolExecutor`;
  #L2804a0.  v1:= 0I;
  #L2804a2.  v2:= 2147483647I;
  #L2804a8.  v3:= 60L;
  #L2804ac.  v5:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L2804b0.  v6:= new `java.util.concurrent.SynchronousQueue`;
  #L2804b4.  call `<init>`(v6) @signature `Ljava/util/concurrent/SynchronousQueue;.<init>:()V` @kind direct;
  #L2804ba.  v0:= "OkHttp ConnectionPool" @kind object;
  #L2804be.  v7:= 1I;
  #L2804c0.  call temp:= `a`(v0, v7) @signature `Lc/a/c;.a:(Ljava/lang/String;Z)Ljava/util/concurrent/ThreadFactory;` @kind static;
  #L2804c6.  v7:= temp @kind object;
  #L2804c8.  v0:= v8 @kind object;
  #L2804ca.  call `<init>`(v0, v1, v2, v3, v5, v6, v7) @signature `Ljava/util/concurrent/ThreadPoolExecutor;.<init>:(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L2804d0.  `@@c.i.d` @type ^`java.util.concurrent.Executor` := v8 @kind object;
  #L2804d4.  return @kind void;
}
procedure `void` `<init>`(`c.i` v4 @kind this) @signature `Lc/i;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2804e8.  v0:= `@@java.util.concurrent.TimeUnit.MINUTES` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L2804ec.  v1:= 5I;
  #L2804ee.  v2:= 5L;
  #L2804f2.  call `<init>`(v4, v1, v2, v0) @signature `Lc/i;.<init>:(IJLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L2804f8.  return @kind void;
}
procedure `void` `<init>`(`c.i` v2 @kind this, `int` v3 , `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object) @signature `Lc/i;.<init>:(IJLjava/util/concurrent/TimeUnit;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L28050c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L280512.  v0:= new `c.i$1`;
  #L280516.  call `<init>`(v0, v2) @signature `Lc/i$1;.<init>:(Lc/i;)V` @kind direct;
  #L28051c.  v2.`c.i.g` @type ^`java.lang.Runnable` := v0 @kind object;
  #L280520.  v0:= new `java.util.ArrayDeque`;
  #L280524.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L28052a.  v2.`c.i.h` @type ^`java.util.Deque` := v0 @kind object;
  #L28052e.  v0:= new `c.a.b.d`;
  #L280532.  call `<init>`(v0) @signature `Lc/a/b/d;.<init>:()V` @kind direct;
  #L280538.  v2.`c.i.a` @type ^`c.a.b.d` := v0 @kind object;
  #L28053c.  v2.`c.i.e` @type ^`int` := v3;
  #L280540.  call temp:= `toNanos`(v6, v4) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L280546.  v0:= temp @kind wide;
  #L280548.  v2.`c.i.f` @type ^`long` := v0 @kind wide;
  #L28054c.  v0:= 0L;
  #L280550.  v3:= lcmp(v4, v0);
  #L280554.  if v3 > 0 then goto L280586;
  #L280558.  v3:= new `java.lang.IllegalArgumentException`;
  #L28055c.  v6:= new `java.lang.StringBuilder`;
  #L280560.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L280566.  v0:= "keepAliveDuration <= 0: " @kind object;
  #L28056a.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L280570.  call temp:= `append`(v6, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L280576.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L28057c.  v4:= temp @kind object;
  #L28057e.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L280584.  throw v3;
  #L280586.  return @kind void;
}
procedure `int` `a`(`c.i` v6 @kind this, `c.a.b.c` v7 @kind object, `long` v8 ) @signature `Lc/i;.a:(Lc/a/b/c;J)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L28025c.  v0:= v7.`c.a.b.c.d` @type ^`java.util.List` @kind object;
  #L280260.  v1:= 0I;
  #L280262.  v2:= 0I;
  #L280264.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L28026a.  v3:= temp;
  #L28026c.  if v2 >= v3 then goto L28030e;
  #L280270.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L280276.  v3:= temp @kind object;
  #L280278.  v3:= (`java.lang.ref.Reference`) v3 @kind object;
  #L28027c.  call temp:= `get`(v3) @signature `Ljava/lang/ref/Reference;.get:()Ljava/lang/Object;` @kind virtual;
  #L280282.  v4:= temp @kind object;
  #L280284.  if v4 == 0 then goto L28028e;
  #L280288.  v2:= v2 + 1;
  #L28028c.  goto L280264;
  #L28028e.  v3:= (`c.a.b.g$a`) v3 @kind object;
  #L280292.  v4:= new `java.lang.StringBuilder`;
  #L280296.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L28029c.  v5:= "A connection to " @kind object;
  #L2802a0.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2802a6.  call temp:= `a`(v7) @signature `Lc/a/b/c;.a:()Lc/ab;` @kind virtual;
  #L2802ac.  v5:= temp @kind object;
  #L2802ae.  call temp:= `a`(v5) @signature `Lc/ab;.a:()Lc/a;` @kind virtual;
  #L2802b4.  v5:= temp @kind object;
  #L2802b6.  call temp:= `a`(v5) @signature `Lc/a;.a:()Lc/r;` @kind virtual;
  #L2802bc.  v5:= temp @kind object;
  #L2802be.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2802c4.  v5:= " was leaked. Did you forget to close a response body?" @kind object;
  #L2802c8.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2802ce.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2802d4.  v4:= temp @kind object;
  #L2802d6.  call temp:= `c`() @signature `Lc/a/g/f;.c:()Lc/a/g/f;` @kind static;
  #L2802dc.  v5:= temp @kind object;
  #L2802de.  v3:= v3.`c.a.b.g$a.a` @type ^`java.lang.Object` @kind object;
  #L2802e2.  call `a`(v5, v4, v3) @signature `Lc/a/g/f;.a:(Ljava/lang/String;Ljava/lang/Object;)V` @kind virtual;
  #L2802e8.  call temp:= `remove`(v0, v2) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L2802ee.  v3:= 1I;
  #L2802f0.  v7.`c.a.b.c.a` @type ^`boolean` := v3 @kind boolean;
  #L2802f4.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L2802fa.  v3:= temp;
  #L2802fc.  if v3 == 0 then goto L280264;
  #L280300.  v2:= v6.`c.i.f` @type ^`long` @kind wide;
  #L280304.  v4:= v8 - v2 @kind long;
  #L280308.  v7.`c.a.b.c.e` @type ^`long` := v4 @kind wide;
  #L28030c.  return v1;
  #L28030e.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L280314.  v7:= temp;
  #L280316.  return v7;
}
procedure `long` `a`(`c.i` v12 @kind this, `long` v13 ) @signature `Lc/i;.a:(J)J` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L2803b0.  @monitorenter v12
  #L2803b2.  v0:= v12.`c.i.h` @type ^`java.util.Deque` @kind object;
  #L2803b6.  call temp:= `iterator`(v0) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2803bc.  v0:= temp @kind object;
  #L2803be.  v1:= 0I;
  #L2803c0.  v2:= 0I;
  #L2803c2.  v3:= -9223372036854775808L;
  #L2803c6.  v5:= v2 @kind object;
  #L2803c8.  v2:= 0I;
  #L2803ca.  v6:= 0I;
  #L2803cc.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2803d2.  v7:= temp;
  #L2803d4.  if v7 == 0 then goto L280412;
  #L2803d8.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2803de.  v7:= temp @kind object;
  #L2803e0.  v7:= (`c.a.b.c`) v7 @kind object;
  #L2803e4.  call temp:= `a`(v12, v7, v13) @signature `Lc/i;.a:(Lc/a/b/c;J)I` @kind direct;
  #L2803ea.  v8:= temp;
  #L2803ec.  if v8 <= 0 then goto L2803f6;
  #L2803f0.  v6:= v6 + 1;
  #L2803f4.  goto L2803cc;
  #L2803f6.  v2:= v2 + 1;
  #L2803fa.  v8:= v7.`c.a.b.c.e` @type ^`long` @kind wide;
  #L2803fe.  v10:= 0I;
  #L280400.  v10:= v13 - v8 @kind long;
  #L280404.  v8:= lcmp(v10, v3);
  #L280408.  if v8 <= 0 then goto L2803cc;
  #L28040c.  v5:= v7 @kind object;
  #L28040e.  v3:= v10 @kind wide;
  #L280410.  goto L2803cc;
  #L280412.  v13:= v12.`c.i.f` @type ^`long` @kind wide;
  #L280416.  v0:= lcmp(v3, v13);
  #L28041a.  if v0 >= 0 then goto L280452;
  #L28041e.  v13:= v12.`c.i.e` @type ^`int`;
  #L280422.  if v2 <= v13 then goto L280428;
  #L280426.  goto L280452;
  #L280428.  if v2 <= 0 then goto L28043a;
  #L28042c.  v13:= v12.`c.i.f` @type ^`long` @kind wide;
  #L280430.  v0:= 0I;
  #L280432.  v0:= v13 - v3 @kind long;
  #L280436.  @monitorexit v12
  #L280438.  return v0 @kind wide;
  #L28043a.  if v6 <= 0 then goto L280446;
  #L28043e.  v13:= v12.`c.i.f` @type ^`long` @kind wide;
  #L280442.  @monitorexit v12
  #L280444.  return v13 @kind wide;
  #L280446.  v12.`c.i.b` @type ^`boolean` := v1 @kind boolean;
  #L28044a.  v13:= -1L;
  #L28044e.  @monitorexit v12
  #L280450.  return v13 @kind wide;
  #L280452.  v13:= v12.`c.i.h` @type ^`java.util.Deque` @kind object;
  #L280456.  call temp:= `remove`(v13, v5) @signature `Ljava/util/Deque;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L28045c.  @monitorexit v12
  #L28045e.  call temp:= `b`(v5) @signature `Lc/a/b/c;.b:()Ljava/net/Socket;` @kind virtual;
  #L280464.  v13:= temp @kind object;
  #L280466.  call `a`(v13) @signature `Lc/a/c;.a:(Ljava/net/Socket;)V` @kind static;
  #L28046c.  v13:= 0L;
  #L280470.  return v13 @kind wide;
  #L280472.  v13:= Exception @type ^`java.lang.Throwable` @kind object;
  #L280474.  @monitorexit v12
  #L280476.  throw v13;
  catch `java.lang.Throwable` @[L2803b2..L28045e] goto L280472;
  catch `java.lang.Throwable` @[L280474..L280476] goto L280472;
}
procedure `c.a.b.c` `a`(`c.i` v3 @kind this, `c.a` v4 @kind object, `c.a.b.g` v5 @kind object, `c.ab` v6 @kind object) @signature `Lc/i;.a:(Lc/a;Lc/a/b/g;Lc/ab;)Lc/a/b/c;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L2801ec.  v0:= `@@c.i.c` @type ^`boolean` @kind boolean;
  #L2801f0.  if v0 != 0 then goto L28020c;
  #L2801f4.  call temp:= `holdsLock`(v3) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L2801fa.  v0:= temp;
  #L2801fc.  if v0 != 0 then goto L28020c;
  #L280200.  v4:= new `java.lang.AssertionError`;
  #L280204.  call `<init>`(v4) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L28020a.  throw v4;
  #L28020c.  v0:= v3.`c.i.h` @type ^`java.util.Deque` @kind object;
  #L280210.  call temp:= `iterator`(v0) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L280216.  v0:= temp @kind object;
  #L280218.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L28021e.  v1:= temp;
  #L280220.  if v1 == 0 then goto L280246;
  #L280224.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L28022a.  v1:= temp @kind object;
  #L28022c.  v1:= (`c.a.b.c`) v1 @kind object;
  #L280230.  call temp:= `a`(v1, v4, v6) @signature `Lc/a/b/c;.a:(Lc/a;Lc/ab;)Z` @kind virtual;
  #L280236.  v2:= temp;
  #L280238.  if v2 == 0 then goto L280218;
  #L28023c.  v4:= 1I;
  #L28023e.  call `a`(v5, v1, v4) @signature `Lc/a/b/g;.a:(Lc/a/b/c;Z)V` @kind virtual;
  #L280244.  return v1 @kind object;
  #L280246.  v4:= 0I;
  #L280248.  return v4 @kind object;
}
procedure `java.net.Socket` `a`(`c.i` v3 @kind this, `c.a` v4 @kind object, `c.a.b.g` v5 @kind object) @signature `Lc/i;.a:(Lc/a;Lc/a/b/g;)Ljava/net/Socket;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L280328.  v0:= `@@c.i.c` @type ^`boolean` @kind boolean;
  #L28032c.  if v0 != 0 then goto L280348;
  #L280330.  call temp:= `holdsLock`(v3) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L280336.  v0:= temp;
  #L280338.  if v0 != 0 then goto L280348;
  #L28033c.  v4:= new `java.lang.AssertionError`;
  #L280340.  call `<init>`(v4) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L280346.  throw v4;
  #L280348.  v0:= v3.`c.i.h` @type ^`java.util.Deque` @kind object;
  #L28034c.  call temp:= `iterator`(v0) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L280352.  v0:= temp @kind object;
  #L280354.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L28035a.  v1:= temp;
  #L28035c.  v2:= 0I;
  #L28035e.  if v1 == 0 then goto L28039c;
  #L280362.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L280368.  v1:= temp @kind object;
  #L28036a.  v1:= (`c.a.b.c`) v1 @kind object;
  #L28036e.  call temp:= `a`(v1, v4, v2) @signature `Lc/a/b/c;.a:(Lc/a;Lc/ab;)Z` @kind virtual;
  #L280374.  v2:= temp;
  #L280376.  if v2 == 0 then goto L280354;
  #L28037a.  call temp:= `d`(v1) @signature `Lc/a/b/c;.d:()Z` @kind virtual;
  #L280380.  v2:= temp;
  #L280382.  if v2 == 0 then goto L280354;
  #L280386.  call temp:= `c`(v5) @signature `Lc/a/b/g;.c:()Lc/a/b/c;` @kind virtual;
  #L28038c.  v2:= temp @kind object;
  #L28038e.  if v1 == v2 then goto L280354;
  #L280392.  call temp:= `a`(v5, v1) @signature `Lc/a/b/g;.a:(Lc/a/b/c;)Ljava/net/Socket;` @kind virtual;
  #L280398.  v4:= temp @kind object;
  #L28039a.  return v4 @kind object;
  #L28039c.  return v2 @kind object;
}
procedure `void` `a`(`c.i` v2 @kind this, `c.a.b.c` v3 @kind object) @signature `Lc/i;.a:(Lc/a/b/c;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L280598.  v0:= `@@c.i.c` @type ^`boolean` @kind boolean;
  #L28059c.  if v0 != 0 then goto L2805b8;
  #L2805a0.  call temp:= `holdsLock`(v2) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L2805a6.  v0:= temp;
  #L2805a8.  if v0 != 0 then goto L2805b8;
  #L2805ac.  v3:= new `java.lang.AssertionError`;
  #L2805b0.  call `<init>`(v3) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2805b6.  throw v3;
  #L2805b8.  v0:= v2.`c.i.b` @type ^`boolean` @kind boolean;
  #L2805bc.  if v0 != 0 then goto L2805d4;
  #L2805c0.  v0:= 1I;
  #L2805c2.  v2.`c.i.b` @type ^`boolean` := v0 @kind boolean;
  #L2805c6.  v0:= `@@c.i.d` @type ^`java.util.concurrent.Executor` @kind object;
  #L2805ca.  v1:= v2.`c.i.g` @type ^`java.lang.Runnable` @kind object;
  #L2805ce.  call `execute`(v0, v1) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L2805d4.  v0:= v2.`c.i.h` @type ^`java.util.Deque` @kind object;
  #L2805d8.  call temp:= `add`(v0, v3) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2805de.  return @kind void;
}
procedure `boolean` `b`(`c.i` v1 @kind this, `c.a.b.c` v2 @kind object) @signature `Lc/i;.b:(Lc/a/b/c;)Z` @AccessFlag  {
    temp;
    v0;

  #L280190.  v0:= `@@c.i.c` @type ^`boolean` @kind boolean;
  #L280194.  if v0 != 0 then goto L2801b0;
  #L280198.  call temp:= `holdsLock`(v1) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L28019e.  v0:= temp;
  #L2801a0.  if v0 != 0 then goto L2801b0;
  #L2801a4.  v2:= new `java.lang.AssertionError`;
  #L2801a8.  call `<init>`(v2) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2801ae.  throw v2;
  #L2801b0.  v0:= v2.`c.a.b.c.a` @type ^`boolean` @kind boolean;
  #L2801b4.  if v0 != 0 then goto L2801cc;
  #L2801b8.  v0:= v1.`c.i.e` @type ^`int`;
  #L2801bc.  if v0 != 0 then goto L2801c2;
  #L2801c0.  goto L2801cc;
  #L2801c2.  call `notifyAll`(v1) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L2801c8.  v2:= 0I;
  #L2801ca.  return v2;
  #L2801cc.  v0:= v1.`c.i.h` @type ^`java.util.Deque` @kind object;
  #L2801d0.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Deque;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L2801d6.  v2:= 1I;
  #L2801d8.  return v2;
}
