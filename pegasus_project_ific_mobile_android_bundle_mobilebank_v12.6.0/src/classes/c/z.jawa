record `c.z` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.Closeable` @kind interface {
  `c.x` `c.z.a` @AccessFlag FINAL;
  `c.v` `c.z.b` @AccessFlag FINAL;
  `int` `c.z.c` @AccessFlag FINAL;
  `java.lang.String` `c.z.d` @AccessFlag FINAL;
  `c.p` `c.z.e` @AccessFlag FINAL;
  `c.q` `c.z.f` @AccessFlag FINAL;
  `c.aa` `c.z.g` @AccessFlag FINAL;
  `c.z` `c.z.h` @AccessFlag FINAL;
  `c.z` `c.z.i` @AccessFlag FINAL;
  `c.z` `c.z.j` @AccessFlag FINAL;
  `long` `c.z.k` @AccessFlag FINAL;
  `long` `c.z.l` @AccessFlag FINAL;
  `c.d` `c.z.m` @AccessFlag PRIVATE_VOLATILE;
}
procedure `void` `<init>`(`c.z` v2 @kind this, `c.z$a` v3 @kind object) @signature `Lc/z;.<init>:(Lc/z$a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L285e3c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L285e42.  v0:= v3.`c.z$a.a` @type ^`c.x` @kind object;
  #L285e46.  v2.`c.z.a` @type ^`c.x` := v0 @kind object;
  #L285e4a.  v0:= v3.`c.z$a.b` @type ^`c.v` @kind object;
  #L285e4e.  v2.`c.z.b` @type ^`c.v` := v0 @kind object;
  #L285e52.  v0:= v3.`c.z$a.c` @type ^`int`;
  #L285e56.  v2.`c.z.c` @type ^`int` := v0;
  #L285e5a.  v0:= v3.`c.z$a.d` @type ^`java.lang.String` @kind object;
  #L285e5e.  v2.`c.z.d` @type ^`java.lang.String` := v0 @kind object;
  #L285e62.  v0:= v3.`c.z$a.e` @type ^`c.p` @kind object;
  #L285e66.  v2.`c.z.e` @type ^`c.p` := v0 @kind object;
  #L285e6a.  v0:= v3.`c.z$a.f` @type ^`c.q$a` @kind object;
  #L285e6e.  call temp:= `a`(v0) @signature `Lc/q$a;.a:()Lc/q;` @kind virtual;
  #L285e74.  v0:= temp @kind object;
  #L285e76.  v2.`c.z.f` @type ^`c.q` := v0 @kind object;
  #L285e7a.  v0:= v3.`c.z$a.g` @type ^`c.aa` @kind object;
  #L285e7e.  v2.`c.z.g` @type ^`c.aa` := v0 @kind object;
  #L285e82.  v0:= v3.`c.z$a.h` @type ^`c.z` @kind object;
  #L285e86.  v2.`c.z.h` @type ^`c.z` := v0 @kind object;
  #L285e8a.  v0:= v3.`c.z$a.i` @type ^`c.z` @kind object;
  #L285e8e.  v2.`c.z.i` @type ^`c.z` := v0 @kind object;
  #L285e92.  v0:= v3.`c.z$a.j` @type ^`c.z` @kind object;
  #L285e96.  v2.`c.z.j` @type ^`c.z` := v0 @kind object;
  #L285e9a.  v0:= v3.`c.z$a.k` @type ^`long` @kind wide;
  #L285e9e.  v2.`c.z.k` @type ^`long` := v0 @kind wide;
  #L285ea2.  v0:= v3.`c.z$a.l` @type ^`long` @kind wide;
  #L285ea6.  v2.`c.z.l` @type ^`long` := v0 @kind wide;
  #L285eaa.  return @kind void;
}
procedure `c.x` `a`(`c.z` v1 @kind this) @signature `Lc/z;.a:()Lc/x;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L285cdc.  v0:= v1.`c.z.a` @type ^`c.x` @kind object;
  #L285ce0.  return v0 @kind object;
}
procedure `java.lang.String` `a`(`c.z` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lc/z;.a:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L285d40.  v0:= 0I;
  #L285d42.  call temp:= `a`(v1, v2, v0) @signature `Lc/z;.a:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L285d48.  v2:= temp @kind object;
  #L285d4a.  return v2 @kind object;
}
procedure `java.lang.String` `a`(`c.z` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lc/z;.a:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L285d5c.  v0:= v1.`c.z.f` @type ^`c.q` @kind object;
  #L285d60.  call temp:= `a`(v0, v2) @signature `Lc/q;.a:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L285d66.  v2:= temp @kind object;
  #L285d68.  if v2 == 0 then goto L285d6e;
  #L285d6c.  goto L285d70;
  #L285d6e.  v2:= v3 @kind object;
  #L285d70.  return v2 @kind object;
}
procedure `int` `b`(`c.z` v1 @kind this) @signature `Lc/z;.b:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L285d28.  v0:= v1.`c.z.c` @type ^`int`;
  #L285d2c.  return v0;
}
procedure `boolean` `c`(`c.z` v2 @kind this) @signature `Lc/z;.c:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L285c38.  v0:= v2.`c.z.c` @type ^`int`;
  #L285c3c.  v1:= 200I;
  #L285c40.  if v0 < v1 then goto L285c54;
  #L285c44.  v0:= v2.`c.z.c` @type ^`int`;
  #L285c48.  v1:= 300I;
  #L285c4c.  if v0 >= v1 then goto L285c54;
  #L285c50.  v0:= 1I;
  #L285c52.  goto L285c56;
  #L285c54.  v0:= 0I;
  #L285c56.  return v0;
}
procedure `void` `close`(`c.z` v2 @kind this) @signature `Lc/z;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L285ebc.  v0:= v2.`c.z.g` @type ^`c.aa` @kind object;
  #L285ec0.  if v0 != 0 then goto L285ed4;
  #L285ec4.  v0:= new `java.lang.IllegalStateException`;
  #L285ec8.  v1:= "response is not eligible for a body and must not be closed" @kind object;
  #L285ecc.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L285ed2.  throw v0;
  #L285ed4.  v0:= v2.`c.z.g` @type ^`c.aa` @kind object;
  #L285ed8.  call `close`(v0) @signature `Lc/aa;.close:()V` @kind virtual;
  #L285ede.  return @kind void;
}
procedure `c.p` `d`(`c.z` v1 @kind this) @signature `Lc/z;.d:()Lc/p;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L285cac.  v0:= v1.`c.z.e` @type ^`c.p` @kind object;
  #L285cb0.  return v0 @kind object;
}
procedure `c.q` `e`(`c.z` v1 @kind this) @signature `Lc/z;.e:()Lc/q;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L285cc4.  v0:= v1.`c.z.f` @type ^`c.q` @kind object;
  #L285cc8.  return v0 @kind object;
}
procedure `c.aa` `f`(`c.z` v1 @kind this) @signature `Lc/z;.f:()Lc/aa;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L285c68.  v0:= v1.`c.z.g` @type ^`c.aa` @kind object;
  #L285c6c.  return v0 @kind object;
}
procedure `c.z$a` `g`(`c.z` v1 @kind this) @signature `Lc/z;.g:()Lc/z$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L285d0c.  v0:= new `c.z$a`;
  #L285d10.  call `<init>`(v0, v1) @signature `Lc/z$a;.<init>:(Lc/z;)V` @kind direct;
  #L285d16.  return v0 @kind object;
}
procedure `c.z` `h`(`c.z` v1 @kind this) @signature `Lc/z;.h:()Lc/z;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L285cf4.  v0:= v1.`c.z.j` @type ^`c.z` @kind object;
  #L285cf8.  return v0 @kind object;
}
procedure `c.d` `i`(`c.z` v1 @kind this) @signature `Lc/z;.i:()Lc/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L285c80.  v0:= v1.`c.z.m` @type ^`c.d` @kind object;
  #L285c84.  if v0 == 0 then goto L285c8a;
  #L285c88.  goto L285c9a;
  #L285c8a.  v0:= v1.`c.z.f` @type ^`c.q` @kind object;
  #L285c8e.  call temp:= `a`(v0) @signature `Lc/d;.a:(Lc/q;)Lc/d;` @kind static;
  #L285c94.  v0:= temp @kind object;
  #L285c96.  v1.`c.z.m` @type ^`c.d` := v0 @kind object;
  #L285c9a.  return v0 @kind object;
}
procedure `long` `j`(`c.z` v2 @kind this) @signature `Lc/z;.j:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L285e0c.  v0:= v2.`c.z.k` @type ^`long` @kind wide;
  #L285e10.  return v0 @kind wide;
}
procedure `long` `k`(`c.z` v2 @kind this) @signature `Lc/z;.k:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L285e24.  v0:= v2.`c.z.l` @type ^`long` @kind wide;
  #L285e28.  return v0 @kind wide;
}
procedure `java.lang.String` `toString`(`c.z` v2 @kind this) @signature `Lc/z;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L285d84.  v0:= new `java.lang.StringBuilder`;
  #L285d88.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L285d8e.  v1:= "Response{protocol=" @kind object;
  #L285d92.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L285d98.  v1:= v2.`c.z.b` @type ^`c.v` @kind object;
  #L285d9c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L285da2.  v1:= ", code=" @kind object;
  #L285da6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L285dac.  v1:= v2.`c.z.c` @type ^`int`;
  #L285db0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L285db6.  v1:= ", message=" @kind object;
  #L285dba.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L285dc0.  v1:= v2.`c.z.d` @type ^`java.lang.String` @kind object;
  #L285dc4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L285dca.  v1:= ", url=" @kind object;
  #L285dce.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L285dd4.  v1:= v2.`c.z.a` @type ^`c.x` @kind object;
  #L285dd8.  call temp:= `a`(v1) @signature `Lc/x;.a:()Lc/r;` @kind virtual;
  #L285dde.  v1:= temp @kind object;
  #L285de0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L285de6.  v1:= 125I;
  #L285dea.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L285df0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L285df6.  v0:= temp @kind object;
  #L285df8.  return v0 @kind object;
}
