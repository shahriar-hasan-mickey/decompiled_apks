record `b.a.a` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `java.util.List` `a`(`int` v1 ) @signature `Lb/a/a;.a:(I)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L26d8a4.  if v1 != 0 then goto L26d8b2;
  #L26d8a8.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L26d8ae.  v1:= temp @kind object;
  #L26d8b0.  return v1 @kind object;
  #L26d8b2.  v0:= new `java.util.ArrayList`;
  #L26d8b6.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L26d8bc.  return v0 @kind object;
}
procedure `boolean` `a`(`java.util.List` v3 @kind object) @signature `Lb/a/a;.a:(Ljava/util/List;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L26d7fc.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L26d802.  v0:= temp;
  #L26d804.  v1:= 0I;
  #L26d806.  v2:= 2I;
  #L26d808.  if v0 >= v2 then goto L26d80e;
  #L26d80c.  return v1;
  #L26d80e.  v0:= new `java.util.HashSet`;
  #L26d812.  call `<init>`(v0, v3) @signature `Ljava/util/HashSet;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L26d818.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L26d81e.  v3:= temp;
  #L26d820.  call temp:= `size`(v0) @signature `Ljava/util/Set;.size:()I` @kind interface;
  #L26d826.  v0:= temp;
  #L26d828.  if v3 == v0 then goto L26d82e;
  #L26d82c.  v1:= 1I;
  #L26d82e.  return v1;
}
procedure `java.util.HashSet` `b`(`int` v1 ) @signature `Lb/a/a;.b:(I)Ljava/util/HashSet;` @AccessFlag STATIC {
    temp;
    v0;

  #L26d880.  v0:= new `java.util.HashSet`;
  #L26d884.  call temp:= `c`(v1) @signature `Lb/a/a;.c:(I)I` @kind static;
  #L26d88a.  v1:= temp;
  #L26d88c.  call `<init>`(v0, v1) @signature `Ljava/util/HashSet;.<init>:(I)V` @kind direct;
  #L26d892.  return v0 @kind object;
}
procedure `int` `c`(`int` v1 ) @signature `Lb/a/a;.c:(I)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L26d840.  v0:= 3I;
  #L26d842.  if v1 >= v0 then goto L26d84c;
  #L26d846.  v1:= v1 + 1;
  #L26d84a.  return v1;
  #L26d84c.  v0:= 2.0F;
  #L26d850.  if v1 >= v0 then goto L26d866;
  #L26d854.  v1:= (`float`) v1 @kind i2f;
  #L26d856.  v0:= 0.75F;
  #L26d85a.  v1:= v1 / v0 @kind float;
  #L26d85c.  v0:= 1.0F;
  #L26d860.  v1:= v1 + v0 @kind float;
  #L26d862.  v1:= (`int`) v1 @kind f2i;
  #L26d864.  return v1;
  #L26d866.  v1:= 2147483647I;
  #L26d86c.  return v1;
}
