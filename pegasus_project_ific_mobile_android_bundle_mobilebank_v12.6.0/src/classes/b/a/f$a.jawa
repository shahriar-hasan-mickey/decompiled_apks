record `b.a.f$a` @kind class @AccessFlag PUBLIC_FINAL {
  `java.util.List` `b.a.f$a.b` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `b.a.f$a.c` @AccessFlag PRIVATE_FINAL;
}
global `boolean` `@@b.a.f$a.a` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lb/a/f$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L26db80.  v0:= constclass @type ^`b.a.f` @kind object;
  #L26db84.  return @kind void;
}
procedure `void` `<init>`(`b.a.f$a` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lb/a/f$a;.<init>:(II)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L26db98.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L26db9e.  call temp:= `a`(v1) @signature `Lb/a/a;.a:(I)Ljava/util/List;` @kind static;
  #L26dba4.  v1:= temp @kind object;
  #L26dba6.  v0.`b.a.f$a.b` @type ^`java.util.List` := v1 @kind object;
  #L26dbaa.  call temp:= `a`(v2) @signature `Lb/a/a;.a:(I)Ljava/util/List;` @kind static;
  #L26dbb0.  v1:= temp @kind object;
  #L26dbb2.  v0.`b.a.f$a.c` @type ^`java.util.List` := v1 @kind object;
  #L26dbb6.  return @kind void;
}
procedure `void` `<init>`(`b.a.f$a` v0 @kind this, `int` v1 , `int` v2 , `b.a.f$1` v3 @kind object) @signature `Lb/a/f$a;.<init>:(IILb/a/f$1;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L26dbc8.  call `<init>`(v0, v1, v2) @signature `Lb/a/f$a;.<init>:(II)V` @kind direct;
  #L26dbce.  return @kind void;
}
procedure `b.a.f$a` `a`(`b.a.f$a` v1 @kind this, `javax.a.a` v2 @kind object) @signature `Lb/a/f$a;.a:(Ljavax/a/a;)Lb/a/f$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26db48.  v0:= `@@b.a.f$a.a` @type ^`boolean` @kind boolean;
  #L26db4c.  if v0 != 0 then goto L26db64;
  #L26db50.  if v2 != 0 then goto L26db64;
  #L26db54.  v2:= new `java.lang.AssertionError`;
  #L26db58.  v0:= "Codegen error? Null provider" @kind object;
  #L26db5c.  call `<init>`(v2, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L26db62.  throw v2;
  #L26db64.  v0:= v1.`b.a.f$a.b` @type ^`java.util.List` @kind object;
  #L26db68.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L26db6e.  return v1 @kind object;
}
procedure `b.a.f` `a`(`b.a.f$a` v4 @kind this) @signature `Lb/a/f$a;.a:()Lb/a/f;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L26dad0.  v0:= `@@b.a.f$a.a` @type ^`boolean` @kind boolean;
  #L26dad4.  if v0 != 0 then goto L26daf8;
  #L26dad8.  v0:= v4.`b.a.f$a.b` @type ^`java.util.List` @kind object;
  #L26dadc.  call temp:= `a`(v0) @signature `Lb/a/a;.a:(Ljava/util/List;)Z` @kind static;
  #L26dae2.  v0:= temp;
  #L26dae4.  if v0 == 0 then goto L26daf8;
  #L26dae8.  v0:= new `java.lang.AssertionError`;
  #L26daec.  v1:= "Codegen error?  Duplicates in the provider list" @kind object;
  #L26daf0.  call `<init>`(v0, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L26daf6.  throw v0;
  #L26daf8.  v0:= `@@b.a.f$a.a` @type ^`boolean` @kind boolean;
  #L26dafc.  if v0 != 0 then goto L26db20;
  #L26db00.  v0:= v4.`b.a.f$a.c` @type ^`java.util.List` @kind object;
  #L26db04.  call temp:= `a`(v0) @signature `Lb/a/a;.a:(Ljava/util/List;)Z` @kind static;
  #L26db0a.  v0:= temp;
  #L26db0c.  if v0 == 0 then goto L26db20;
  #L26db10.  v0:= new `java.lang.AssertionError`;
  #L26db14.  v1:= "Codegen error?  Duplicates in the provider list" @kind object;
  #L26db18.  call `<init>`(v0, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L26db1e.  throw v0;
  #L26db20.  v0:= new `b.a.f`;
  #L26db24.  v1:= v4.`b.a.f$a.b` @type ^`java.util.List` @kind object;
  #L26db28.  v2:= v4.`b.a.f$a.c` @type ^`java.util.List` @kind object;
  #L26db2c.  v3:= 0I;
  #L26db2e.  call `<init>`(v0, v1, v2, v3) @signature `Lb/a/f;.<init>:(Ljava/util/List;Ljava/util/List;Lb/a/f$1;)V` @kind direct;
  #L26db34.  return v0 @kind object;
}
