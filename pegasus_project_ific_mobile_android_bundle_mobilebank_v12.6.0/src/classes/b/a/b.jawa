record `b.a.b` @kind class @AccessFlag PUBLIC_FINAL extends `javax.a.a` @kind interface {
  `javax.a.a` `b.a.b.c` @AccessFlag PRIVATE_VOLATILE;
  `java.lang.Object` `b.a.b.d` @AccessFlag PRIVATE_VOLATILE;
}
global `boolean` `@@b.a.b.a` @AccessFlag STATIC_FINAL_SYNTHETIC;
global `java.lang.Object` `@@b.a.b.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lb/a/b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L26d9ac.  v0:= new `java.lang.Object`;
  #L26d9b0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L26d9b6.  `@@b.a.b.b` @type ^`java.lang.Object` := v0 @kind object;
  #L26d9ba.  return @kind void;
}
procedure `void` `<init>`(`b.a.b` v1 @kind this, `javax.a.a` v2 @kind object) @signature `Lb/a/b;.<init>:(Ljavax/a/a;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L26d9cc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L26d9d2.  v0:= `@@b.a.b.b` @type ^`java.lang.Object` @kind object;
  #L26d9d6.  v1.`b.a.b.d` @type ^`java.lang.Object` := v0 @kind object;
  #L26d9da.  v0:= `@@b.a.b.a` @type ^`boolean` @kind boolean;
  #L26d9de.  if v0 != 0 then goto L26d9f2;
  #L26d9e2.  if v2 != 0 then goto L26d9f2;
  #L26d9e6.  v2:= new `java.lang.AssertionError`;
  #L26d9ea.  call `<init>`(v2) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L26d9f0.  throw v2;
  #L26d9f2.  v1.`b.a.b.c` @type ^`javax.a.a` := v2 @kind object;
  #L26d9f6.  return @kind void;
}
procedure `javax.a.a` `a`(`javax.a.a` v1 @kind object) @signature `Lb/a/b;.a:(Ljavax/a/a;)Ljavax/a/a;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L26d980.  call temp:= `a`(v1) @signature `Lb/a/e;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L26d986.  v0:= instanceof @variable v1 @type ^`b.a.b` @kind boolean;
  #L26d98a.  if v0 == 0 then goto L26d990;
  #L26d98e.  return v1 @kind object;
  #L26d990.  v0:= new `b.a.b`;
  #L26d994.  call `<init>`(v0, v1) @signature `Lb/a/b;.<init>:(Ljavax/a/a;)V` @kind direct;
  #L26d99a.  return v0 @kind object;
}
procedure `java.lang.Object` `a`(`b.a.b` v5 @kind this) @signature `Lb/a/b;.a:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L26d8d0.  v0:= v5.`b.a.b.d` @type ^`java.lang.Object` @kind object;
  #L26d8d4.  v1:= `@@b.a.b.b` @type ^`java.lang.Object` @kind object;
  #L26d8d8.  if v0 != v1 then goto L26d962;
  #L26d8dc.  @monitorenter v5
  #L26d8de.  v0:= v5.`b.a.b.d` @type ^`java.lang.Object` @kind object;
  #L26d8e2.  v1:= `@@b.a.b.b` @type ^`java.lang.Object` @kind object;
  #L26d8e6.  if v0 != v1 then goto L26d958;
  #L26d8ea.  v0:= v5.`b.a.b.c` @type ^`javax.a.a` @kind object;
  #L26d8ee.  call temp:= `a`(v0) @signature `Ljavax/a/a;.a:()Ljava/lang/Object;` @kind interface;
  #L26d8f4.  v0:= temp @kind object;
  #L26d8f6.  v1:= v5.`b.a.b.d` @type ^`java.lang.Object` @kind object;
  #L26d8fa.  v2:= `@@b.a.b.b` @type ^`java.lang.Object` @kind object;
  #L26d8fe.  if v1 == v2 then goto L26d94e;
  #L26d902.  if v1 == v0 then goto L26d94e;
  #L26d906.  v2:= new `java.lang.IllegalStateException`;
  #L26d90a.  v3:= new `java.lang.StringBuilder`;
  #L26d90e.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L26d914.  v4:= "Scoped provider was invoked recursively returning different results: " @kind object;
  #L26d918.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L26d91e.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L26d924.  v1:= " & " @kind object;
  #L26d928.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L26d92e.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L26d934.  v0:= ". This is likely due to a circular dependency." @kind object;
  #L26d938.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L26d93e.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L26d944.  v0:= temp @kind object;
  #L26d946.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L26d94c.  throw v2;
  #L26d94e.  v5.`b.a.b.d` @type ^`java.lang.Object` := v0 @kind object;
  #L26d952.  v1:= 0I;
  #L26d954.  v5.`b.a.b.c` @type ^`javax.a.a` := v1 @kind object;
  #L26d958.  @monitorexit v5
  #L26d95a.  goto L26d962;
  #L26d95c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L26d95e.  @monitorexit v5
  #L26d960.  throw v0;
  #L26d962.  return v0 @kind object;
  catch `java.lang.Throwable` @[L26d8de..L26d960] goto L26d95c;
}
