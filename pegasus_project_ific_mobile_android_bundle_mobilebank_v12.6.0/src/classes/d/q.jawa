record `d.q` @kind class @AccessFlag FINAL extends `d.f` @kind class {
  `byte`[][] `d.q.f` @AccessFlag FINAL_TRANSIENT;
  `int`[] `d.q.g` @AccessFlag FINAL_TRANSIENT;
}
procedure `void` `<init>`(`d.q` v7 @kind this, `d.c` v8 @kind object, `int` v9 ) @signature `Ld/q;.<init>:(Ld/c;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3d851c.  v0:= 0I;
  #L3d851e.  call `<init>`(v7, v0) @signature `Ld/f;.<init>:([B)V` @kind direct;
  #L3d8524.  v1:= v8.`d.c.b` @type ^`long` @kind wide;
  #L3d8528.  v5:= (`long`) v9 @kind i2l;
  #L3d852a.  v3:= 0L;
  #L3d852e.  call `a`(v1, v3, v5) @signature `Ld/u;.a:(JJJ)V` @kind static;
  #L3d8534.  v0:= v8.`d.c.a` @type ^`d.o` @kind object;
  #L3d8538.  v1:= 0I;
  #L3d853a.  v2:= v0 @kind object;
  #L3d853c.  v0:= 0I;
  #L3d853e.  v3:= 0I;
  #L3d8540.  if v0 >= v9 then goto L3d8576;
  #L3d8544.  v4:= v2.`d.o.c` @type ^`int`;
  #L3d8548.  v5:= v2.`d.o.b` @type ^`int`;
  #L3d854c.  if v4 != v5 then goto L3d8560;
  #L3d8550.  v8:= new `java.lang.AssertionError`;
  #L3d8554.  v9:= "s.limit == s.pos" @kind object;
  #L3d8558.  call `<init>`(v8, v9) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3d855e.  throw v8;
  #L3d8560.  v4:= v2.`d.o.c` @type ^`int`;
  #L3d8564.  v5:= v2.`d.o.b` @type ^`int`;
  #L3d8568.  v4:= v4 - v5 @kind int;
  #L3d856a.  v0:= v0 + v4 @kind int;
  #L3d856c.  v3:= v3 + 1;
  #L3d8570.  v2:= v2.`d.o.f` @type ^`d.o` @kind object;
  #L3d8574.  goto L3d8540;
  #L3d8576.  v0:= new `byte`[][v3];
  #L3d857a.  v7.`d.q.f` @type ^`byte`[][] := v0 @kind object;
  #L3d857e.  v3:= v3 * 2;
  #L3d8582.  v0:= new `int`[v3];
  #L3d8586.  v7.`d.q.g` @type ^`int`[] := v0 @kind object;
  #L3d858a.  v8:= v8.`d.c.a` @type ^`d.o` @kind object;
  #L3d858e.  v0:= v8 @kind object;
  #L3d8590.  v8:= 0I;
  #L3d8592.  if v1 >= v9 then goto L3d85e0;
  #L3d8596.  v2:= v7.`d.q.f` @type ^`byte`[][] @kind object;
  #L3d859a.  v3:= v0.`d.o.a` @type ^`byte`[] @kind object;
  #L3d859e.  v2[v8]:= v3 @kind object;
  #L3d85a2.  v2:= v0.`d.o.c` @type ^`int`;
  #L3d85a6.  v3:= v0.`d.o.b` @type ^`int`;
  #L3d85aa.  v2:= v2 - v3 @kind int;
  #L3d85ac.  v1:= v1 + v2 @kind int;
  #L3d85ae.  if v1 <= v9 then goto L3d85b4;
  #L3d85b2.  v1:= v9;
  #L3d85b4.  v2:= v7.`d.q.g` @type ^`int`[] @kind object;
  #L3d85b8.  v2[v8]:= v1;
  #L3d85bc.  v2:= v7.`d.q.g` @type ^`int`[] @kind object;
  #L3d85c0.  v3:= v7.`d.q.f` @type ^`byte`[][] @kind object;
  #L3d85c4.  v3:= length @variable v3;
  #L3d85c6.  v3:= v3 + v8 @kind int;
  #L3d85c8.  v4:= v0.`d.o.b` @type ^`int`;
  #L3d85cc.  v2[v3]:= v4;
  #L3d85d0.  v2:= 1I;
  #L3d85d2.  v0.`d.o.d` @type ^`boolean` := v2 @kind boolean;
  #L3d85d6.  v8:= v8 + 1;
  #L3d85da.  v0:= v0.`d.o.f` @type ^`d.o` @kind object;
  #L3d85de.  goto L3d8592;
  #L3d85e0.  return @kind void;
}
procedure `int` `b`(`d.q` v3 @kind this, `int` v4 ) @signature `Ld/q;.b:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3d83a8.  v0:= v3.`d.q.g` @type ^`int`[] @kind object;
  #L3d83ac.  v1:= v3.`d.q.f` @type ^`byte`[][] @kind object;
  #L3d83b0.  v1:= length @variable v1;
  #L3d83b2.  v4:= v4 + 1;
  #L3d83b6.  v2:= 0I;
  #L3d83b8.  call temp:= `binarySearch`(v0, v2, v1, v4) @signature `Ljava/util/Arrays;.binarySearch:([IIII)I` @kind static;
  #L3d83be.  v4:= temp;
  #L3d83c0.  if v4 < 0 then goto L3d83c6;
  #L3d83c4.  goto L3d83ca;
  #L3d83c6.  v4:= v4 ^~ -1;
  #L3d83ca.  return v4;
}
procedure `d.f` `i`(`d.q` v2 @kind this) @signature `Ld/q;.i:()Ld/f;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3d8384.  v0:= new `d.f`;
  #L3d8388.  call temp:= `h`(v2) @signature `Ld/q;.h:()[B` @kind virtual;
  #L3d838e.  v1:= temp @kind object;
  #L3d8390.  call `<init>`(v0, v1) @signature `Ld/f;.<init>:([B)V` @kind direct;
  #L3d8396.  return v0 @kind object;
}
procedure `java.lang.Object` `writeReplace`(`d.q` v1 @kind this) @signature `Ld/q;.writeReplace:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3d8470.  call temp:= `i`(v1) @signature `Ld/q;.i:()Ld/f;` @kind direct;
  #L3d8476.  v0:= temp @kind object;
  #L3d8478.  return v0 @kind object;
}
procedure `byte` `a`(`d.q` v7 @kind this, `int` v8 ) @signature `Ld/q;.a:(I)B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3d8220.  v0:= v7.`d.q.g` @type ^`int`[] @kind object;
  #L3d8224.  v1:= v7.`d.q.f` @type ^`byte`[][] @kind object;
  #L3d8228.  v1:= length @variable v1;
  #L3d822a.  v1:= v1 + -1;
  #L3d822e.  v0:= v0[v1];
  #L3d8232.  v1:= (`long`) v0 @kind i2l;
  #L3d8234.  v3:= (`long`) v8 @kind i2l;
  #L3d8236.  v5:= 1L;
  #L3d823a.  call `a`(v1, v3, v5) @signature `Ld/u;.a:(JJJ)V` @kind static;
  #L3d8240.  call temp:= `b`(v7, v8) @signature `Ld/q;.b:(I)I` @kind direct;
  #L3d8246.  v0:= temp;
  #L3d8248.  if v0 != 0 then goto L3d8250;
  #L3d824c.  v1:= 0I;
  #L3d824e.  goto L3d825c;
  #L3d8250.  v1:= v7.`d.q.g` @type ^`int`[] @kind object;
  #L3d8254.  v2:= v0 + -1;
  #L3d8258.  v1:= v1[v2];
  #L3d825c.  v2:= v7.`d.q.g` @type ^`int`[] @kind object;
  #L3d8260.  v3:= v7.`d.q.f` @type ^`byte`[][] @kind object;
  #L3d8264.  v3:= length @variable v3;
  #L3d8266.  v3:= v3 + v0 @kind int;
  #L3d8268.  v2:= v2[v3];
  #L3d826c.  v3:= v7.`d.q.f` @type ^`byte`[][] @kind object;
  #L3d8270.  v0:= v3[v0] @kind object;
  #L3d8274.  v8:= v8 - v1 @kind int;
  #L3d8276.  v8:= v8 + v2 @kind int;
  #L3d8278.  v8:= v0[v8] @kind byte;
  #L3d827c.  return v8;
}
procedure `d.f` `a`(`d.q` v1 @kind this, `int` v2 , `int` v3 ) @signature `Ld/q;.a:(II)Ld/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d82f4.  call temp:= `i`(v1) @signature `Ld/q;.i:()Ld/f;` @kind direct;
  #L3d82fa.  v0:= temp @kind object;
  #L3d82fc.  call temp:= `a`(v0, v2, v3) @signature `Ld/f;.a:(II)Ld/f;` @kind virtual;
  #L3d8302.  v2:= temp @kind object;
  #L3d8304.  return v2 @kind object;
}
procedure `java.lang.String` `a`(`d.q` v1 @kind this) @signature `Ld/q;.a:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d848c.  call temp:= `i`(v1) @signature `Ld/q;.i:()Ld/f;` @kind direct;
  #L3d8492.  v0:= temp @kind object;
  #L3d8494.  call temp:= `a`(v0) @signature `Ld/f;.a:()Ljava/lang/String;` @kind virtual;
  #L3d849a.  v0:= temp @kind object;
  #L3d849c.  return v0 @kind object;
}
procedure `void` `a`(`d.q` v11 @kind this, `d.c` v12 @kind object) @signature `Ld/q;.a:(Ld/c;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L3d85f4.  v0:= v11.`d.q.f` @type ^`byte`[][] @kind object;
  #L3d85f8.  v0:= length @variable v0;
  #L3d85fa.  v1:= 0I;
  #L3d85fc.  v2:= 0I;
  #L3d85fe.  if v1 >= v0 then goto L3d8662;
  #L3d8602.  v3:= v11.`d.q.g` @type ^`int`[] @kind object;
  #L3d8606.  v4:= v0 + v1 @kind int;
  #L3d860a.  v7:= v3[v4];
  #L3d860e.  v3:= v11.`d.q.g` @type ^`int`[] @kind object;
  #L3d8612.  v3:= v3[v1];
  #L3d8616.  v4:= new `d.o`;
  #L3d861a.  v5:= v11.`d.q.f` @type ^`byte`[][] @kind object;
  #L3d861e.  v6:= v5[v1] @kind object;
  #L3d8622.  v5:= v7 + v3 @kind int;
  #L3d8626.  v8:= v5 - v2 @kind int;
  #L3d862a.  v9:= 1I;
  #L3d862c.  v10:= 0I;
  #L3d862e.  v5:= v4 @kind object;
  #L3d8630.  call `<init>`(v5, v6, v7, v8, v9, v10) @signature `Ld/o;.<init>:([BIIZZ)V` @kind direct;
  #L3d8636.  v2:= v12.`d.c.a` @type ^`d.o` @kind object;
  #L3d863a.  if v2 != 0 then goto L3d864c;
  #L3d863e.  v4.`d.o.g` @type ^`d.o` := v4 @kind object;
  #L3d8642.  v4.`d.o.f` @type ^`d.o` := v4 @kind object;
  #L3d8646.  v12.`d.c.a` @type ^`d.o` := v4 @kind object;
  #L3d864a.  goto L3d865a;
  #L3d864c.  v2:= v12.`d.c.a` @type ^`d.o` @kind object;
  #L3d8650.  v2:= v2.`d.o.g` @type ^`d.o` @kind object;
  #L3d8654.  call temp:= `a`(v2, v4) @signature `Ld/o;.a:(Ld/o;)Ld/o;` @kind virtual;
  #L3d865a.  v1:= v1 + 1;
  #L3d865e.  v2:= v3;
  #L3d8660.  goto L3d85fe;
  #L3d8662.  v0:= v12.`d.c.b` @type ^`long` @kind wide;
  #L3d8666.  v2:= (`long`) v2 @kind i2l;
  #L3d8668.  v4:= v0 + v2 @kind long;
  #L3d866c.  v12.`d.c.b` @type ^`long` := v4 @kind wide;
  #L3d8670.  return @kind void;
}
procedure `boolean` `a`(`d.q` v6 @kind this, `int` v7 , `d.f` v8 @kind object, `int` v9 , `int` v10 ) @signature `Ld/q;.a:(ILd/f;II)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d8130.  v0:= 0I;
  #L3d8132.  if v7 < 0 then goto L3d81b8;
  #L3d8136.  call temp:= `g`(v6) @signature `Ld/q;.g:()I` @kind virtual;
  #L3d813c.  v1:= temp;
  #L3d813e.  v1:= v1 - v10 @kind int;
  #L3d8140.  if v7 <= v1 then goto L3d8146;
  #L3d8144.  goto L3d81b8;
  #L3d8146.  call temp:= `b`(v6, v7) @signature `Ld/q;.b:(I)I` @kind direct;
  #L3d814c.  v1:= temp;
  #L3d814e.  if v10 <= 0 then goto L3d81b4;
  #L3d8152.  if v1 != 0 then goto L3d815a;
  #L3d8156.  v2:= 0I;
  #L3d8158.  goto L3d8166;
  #L3d815a.  v2:= v6.`d.q.g` @type ^`int`[] @kind object;
  #L3d815e.  v3:= v1 + -1;
  #L3d8162.  v2:= v2[v3];
  #L3d8166.  v3:= v6.`d.q.g` @type ^`int`[] @kind object;
  #L3d816a.  v3:= v3[v1];
  #L3d816e.  v3:= v3 - v2 @kind int;
  #L3d8170.  v3:= v3 + v2 @kind int;
  #L3d8172.  v3:= v3 - v7 @kind int;
  #L3d8174.  call temp:= `min`(v10, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3d817a.  v3:= temp;
  #L3d817c.  v4:= v6.`d.q.g` @type ^`int`[] @kind object;
  #L3d8180.  v5:= v6.`d.q.f` @type ^`byte`[][] @kind object;
  #L3d8184.  v5:= length @variable v5;
  #L3d8186.  v5:= v5 + v1 @kind int;
  #L3d8188.  v4:= v4[v5];
  #L3d818c.  v2:= v7 - v2 @kind int;
  #L3d8190.  v2:= v2 + v4 @kind int;
  #L3d8192.  v4:= v6.`d.q.f` @type ^`byte`[][] @kind object;
  #L3d8196.  v4:= v4[v1] @kind object;
  #L3d819a.  call temp:= `a`(v8, v9, v4, v2, v3) @signature `Ld/f;.a:(I[BII)Z` @kind virtual;
  #L3d81a0.  v2:= temp;
  #L3d81a2.  if v2 != 0 then goto L3d81a8;
  #L3d81a6.  return v0;
  #L3d81a8.  v7:= v7 + v3 @kind int;
  #L3d81aa.  v9:= v9 + v3 @kind int;
  #L3d81ac.  v10:= v10 - v3 @kind int;
  #L3d81ae.  v1:= v1 + 1;
  #L3d81b2.  goto L3d814e;
  #L3d81b4.  v7:= 1I;
  #L3d81b6.  return v7;
  #L3d81b8.  return v0;
}
procedure `boolean` `a`(`d.q` v6 @kind this, `int` v7 , `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Ld/q;.a:(I[BII)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d8088.  v0:= 0I;
  #L3d808a.  if v7 < 0 then goto L3d811c;
  #L3d808e.  call temp:= `g`(v6) @signature `Ld/q;.g:()I` @kind virtual;
  #L3d8094.  v1:= temp;
  #L3d8096.  v1:= v1 - v10 @kind int;
  #L3d8098.  if v7 > v1 then goto L3d811c;
  #L3d809c.  if v9 < 0 then goto L3d811c;
  #L3d80a0.  v1:= length @variable v8;
  #L3d80a2.  v1:= v1 - v10 @kind int;
  #L3d80a4.  if v9 <= v1 then goto L3d80aa;
  #L3d80a8.  goto L3d811c;
  #L3d80aa.  call temp:= `b`(v6, v7) @signature `Ld/q;.b:(I)I` @kind direct;
  #L3d80b0.  v1:= temp;
  #L3d80b2.  if v10 <= 0 then goto L3d8118;
  #L3d80b6.  if v1 != 0 then goto L3d80be;
  #L3d80ba.  v2:= 0I;
  #L3d80bc.  goto L3d80ca;
  #L3d80be.  v2:= v6.`d.q.g` @type ^`int`[] @kind object;
  #L3d80c2.  v3:= v1 + -1;
  #L3d80c6.  v2:= v2[v3];
  #L3d80ca.  v3:= v6.`d.q.g` @type ^`int`[] @kind object;
  #L3d80ce.  v3:= v3[v1];
  #L3d80d2.  v3:= v3 - v2 @kind int;
  #L3d80d4.  v3:= v3 + v2 @kind int;
  #L3d80d6.  v3:= v3 - v7 @kind int;
  #L3d80d8.  call temp:= `min`(v10, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3d80de.  v3:= temp;
  #L3d80e0.  v4:= v6.`d.q.g` @type ^`int`[] @kind object;
  #L3d80e4.  v5:= v6.`d.q.f` @type ^`byte`[][] @kind object;
  #L3d80e8.  v5:= length @variable v5;
  #L3d80ea.  v5:= v5 + v1 @kind int;
  #L3d80ec.  v4:= v4[v5];
  #L3d80f0.  v2:= v7 - v2 @kind int;
  #L3d80f4.  v2:= v2 + v4 @kind int;
  #L3d80f6.  v4:= v6.`d.q.f` @type ^`byte`[][] @kind object;
  #L3d80fa.  v4:= v4[v1] @kind object;
  #L3d80fe.  call temp:= `a`(v4, v2, v8, v9, v3) @signature `Ld/u;.a:([BI[BII)Z` @kind static;
  #L3d8104.  v2:= temp;
  #L3d8106.  if v2 != 0 then goto L3d810c;
  #L3d810a.  return v0;
  #L3d810c.  v7:= v7 + v3 @kind int;
  #L3d810e.  v9:= v9 + v3 @kind int;
  #L3d8110.  v10:= v10 - v3 @kind int;
  #L3d8112.  v1:= v1 + 1;
  #L3d8116.  goto L3d80b2;
  #L3d8118.  v7:= 1I;
  #L3d811a.  return v7;
  #L3d811c.  return v0;
}
procedure `java.lang.String` `b`(`d.q` v1 @kind this) @signature `Ld/q;.b:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d84b0.  call temp:= `i`(v1) @signature `Ld/q;.i:()Ld/f;` @kind direct;
  #L3d84b6.  v0:= temp @kind object;
  #L3d84b8.  call temp:= `b`(v0) @signature `Ld/f;.b:()Ljava/lang/String;` @kind virtual;
  #L3d84be.  v0:= temp @kind object;
  #L3d84c0.  return v0 @kind object;
}
procedure `d.f` `c`(`d.q` v1 @kind this) @signature `Ld/q;.c:()Ld/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d8318.  call temp:= `i`(v1) @signature `Ld/q;.i:()Ld/f;` @kind direct;
  #L3d831e.  v0:= temp @kind object;
  #L3d8320.  call temp:= `c`(v0) @signature `Ld/f;.c:()Ld/f;` @kind virtual;
  #L3d8326.  v0:= temp @kind object;
  #L3d8328.  return v0 @kind object;
}
procedure `d.f` `d`(`d.q` v1 @kind this) @signature `Ld/q;.d:()Ld/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d833c.  call temp:= `i`(v1) @signature `Ld/q;.i:()Ld/f;` @kind direct;
  #L3d8342.  v0:= temp @kind object;
  #L3d8344.  call temp:= `d`(v0) @signature `Ld/f;.d:()Ld/f;` @kind virtual;
  #L3d834a.  v0:= temp @kind object;
  #L3d834c.  return v0 @kind object;
}
procedure `java.lang.String` `e`(`d.q` v1 @kind this) @signature `Ld/q;.e:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d84d4.  call temp:= `i`(v1) @signature `Ld/q;.i:()Ld/f;` @kind direct;
  #L3d84da.  v0:= temp @kind object;
  #L3d84dc.  call temp:= `e`(v0) @signature `Ld/f;.e:()Ljava/lang/String;` @kind virtual;
  #L3d84e2.  v0:= temp @kind object;
  #L3d84e4.  return v0 @kind object;
}
procedure `boolean` `equals`(`d.q` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Ld/q;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3d81cc.  v0:= 1I;
  #L3d81ce.  if v5 != v4 then goto L3d81d4;
  #L3d81d2.  return v0;
  #L3d81d4.  v1:= instanceof @variable v5 @type ^`d.f` @kind boolean;
  #L3d81d8.  v2:= 0I;
  #L3d81da.  if v1 == 0 then goto L3d820c;
  #L3d81de.  v5:= (`d.f`) v5 @kind object;
  #L3d81e2.  call temp:= `g`(v5) @signature `Ld/f;.g:()I` @kind virtual;
  #L3d81e8.  v1:= temp;
  #L3d81ea.  call temp:= `g`(v4) @signature `Ld/q;.g:()I` @kind virtual;
  #L3d81f0.  v3:= temp;
  #L3d81f2.  if v1 != v3 then goto L3d820c;
  #L3d81f6.  call temp:= `g`(v4) @signature `Ld/q;.g:()I` @kind virtual;
  #L3d81fc.  v1:= temp;
  #L3d81fe.  call temp:= `a`(v4, v2, v5, v2, v1) @signature `Ld/q;.a:(ILd/f;II)Z` @kind virtual;
  #L3d8204.  v5:= temp;
  #L3d8206.  if v5 == 0 then goto L3d820c;
  #L3d820a.  goto L3d820e;
  #L3d820c.  v0:= 0I;
  #L3d820e.  return v0;
}
procedure `d.f` `f`(`d.q` v1 @kind this) @signature `Ld/q;.f:()Ld/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d8360.  call temp:= `i`(v1) @signature `Ld/q;.i:()Ld/f;` @kind direct;
  #L3d8366.  v0:= temp @kind object;
  #L3d8368.  call temp:= `f`(v0) @signature `Ld/f;.f:()Ld/f;` @kind virtual;
  #L3d836e.  v0:= temp @kind object;
  #L3d8370.  return v0 @kind object;
}
procedure `int` `g`(`d.q` v2 @kind this) @signature `Ld/q;.g:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3d83dc.  v0:= v2.`d.q.g` @type ^`int`[] @kind object;
  #L3d83e0.  v1:= v2.`d.q.f` @type ^`byte`[][] @kind object;
  #L3d83e4.  v1:= length @variable v1;
  #L3d83e6.  v1:= v1 + -1;
  #L3d83ea.  v0:= v0[v1];
  #L3d83ee.  return v0;
}
procedure `byte`[] `h`(`d.q` v8 @kind this) @signature `Ld/q;.h:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3d8290.  v0:= v8.`d.q.g` @type ^`int`[] @kind object;
  #L3d8294.  v1:= v8.`d.q.f` @type ^`byte`[][] @kind object;
  #L3d8298.  v1:= length @variable v1;
  #L3d829a.  v1:= v1 + -1;
  #L3d829e.  v0:= v0[v1];
  #L3d82a2.  v0:= new `byte`[v0];
  #L3d82a6.  v1:= v8.`d.q.f` @type ^`byte`[][] @kind object;
  #L3d82aa.  v1:= length @variable v1;
  #L3d82ac.  v2:= 0I;
  #L3d82ae.  v3:= 0I;
  #L3d82b0.  if v2 >= v1 then goto L3d82e2;
  #L3d82b4.  v4:= v8.`d.q.g` @type ^`int`[] @kind object;
  #L3d82b8.  v5:= v1 + v2 @kind int;
  #L3d82bc.  v4:= v4[v5];
  #L3d82c0.  v5:= v8.`d.q.g` @type ^`int`[] @kind object;
  #L3d82c4.  v5:= v5[v2];
  #L3d82c8.  v6:= v8.`d.q.f` @type ^`byte`[][] @kind object;
  #L3d82cc.  v6:= v6[v2] @kind object;
  #L3d82d0.  v7:= v5 - v3 @kind int;
  #L3d82d4.  call `arraycopy`(v6, v4, v0, v3, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3d82da.  v2:= v2 + 1;
  #L3d82de.  v3:= v5;
  #L3d82e0.  goto L3d82b0;
  #L3d82e2.  return v0 @kind object;
}
procedure `int` `hashCode`(`d.q` v8 @kind this) @signature `Ld/q;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3d8400.  v0:= v8.`d.q.d` @type ^`int`;
  #L3d8404.  if v0 == 0 then goto L3d840a;
  #L3d8408.  return v0;
  #L3d840a.  v0:= v8.`d.q.f` @type ^`byte`[][] @kind object;
  #L3d840e.  v0:= length @variable v0;
  #L3d8410.  v1:= 0I;
  #L3d8412.  v2:= 1I;
  #L3d8414.  v2:= 0I;
  #L3d8416.  v3:= 1I;
  #L3d8418.  if v1 >= v0 then goto L3d845a;
  #L3d841c.  v4:= v8.`d.q.f` @type ^`byte`[][] @kind object;
  #L3d8420.  v4:= v4[v1] @kind object;
  #L3d8424.  v5:= v8.`d.q.g` @type ^`int`[] @kind object;
  #L3d8428.  v6:= v0 + v1 @kind int;
  #L3d842c.  v5:= v5[v6];
  #L3d8430.  v6:= v8.`d.q.g` @type ^`int`[] @kind object;
  #L3d8434.  v6:= v6[v1];
  #L3d8438.  v2:= v6 - v2 @kind int;
  #L3d843c.  v2:= v2 + v5 @kind int;
  #L3d843e.  if v5 >= v2 then goto L3d8452;
  #L3d8442.  v3:= v3 * 31;
  #L3d8446.  v7:= v4[v5] @kind byte;
  #L3d844a.  v3:= v3 + v7 @kind int;
  #L3d844c.  v5:= v5 + 1;
  #L3d8450.  goto L3d843e;
  #L3d8452.  v1:= v1 + 1;
  #L3d8456.  v2:= v6;
  #L3d8458.  goto L3d8418;
  #L3d845a.  v8.`d.q.d` @type ^`int` := v3;
  #L3d845e.  return v3;
}
procedure `java.lang.String` `toString`(`d.q` v1 @kind this) @signature `Ld/q;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d84f8.  call temp:= `i`(v1) @signature `Ld/q;.i:()Ld/f;` @kind direct;
  #L3d84fe.  v0:= temp @kind object;
  #L3d8500.  call temp:= `toString`(v0) @signature `Ld/f;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d8506.  v0:= temp @kind object;
  #L3d8508.  return v0 @kind object;
}
