record `d.j` @kind class @AccessFlag PUBLIC_FINAL extends `d.s` @kind interface {
  `int` `d.j.a` @AccessFlag PRIVATE;
  `d.e` `d.j.b` @AccessFlag PRIVATE_FINAL;
  `java.util.zip.Inflater` `d.j.c` @AccessFlag PRIVATE_FINAL;
  `d.k` `d.j.d` @AccessFlag PRIVATE_FINAL;
  `java.util.zip.CRC32` `d.j.e` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`d.j` v2 @kind this, `d.s` v3 @kind object) @signature `Ld/j;.<init>:(Ld/s;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3d627c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3d6282.  v0:= 0I;
  #L3d6284.  v2.`d.j.a` @type ^`int` := v0;
  #L3d6288.  v0:= new `java.util.zip.CRC32`;
  #L3d628c.  call `<init>`(v0) @signature `Ljava/util/zip/CRC32;.<init>:()V` @kind direct;
  #L3d6292.  v2.`d.j.e` @type ^`java.util.zip.CRC32` := v0 @kind object;
  #L3d6296.  if v3 != 0 then goto L3d62aa;
  #L3d629a.  v3:= new `java.lang.IllegalArgumentException`;
  #L3d629e.  v0:= "source == null" @kind object;
  #L3d62a2.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d62a8.  throw v3;
  #L3d62aa.  v0:= new `java.util.zip.Inflater`;
  #L3d62ae.  v1:= 1I;
  #L3d62b0.  call `<init>`(v0, v1) @signature `Ljava/util/zip/Inflater;.<init>:(Z)V` @kind direct;
  #L3d62b6.  v2.`d.j.c` @type ^`java.util.zip.Inflater` := v0 @kind object;
  #L3d62ba.  call temp:= `a`(v3) @signature `Ld/l;.a:(Ld/s;)Ld/e;` @kind static;
  #L3d62c0.  v3:= temp @kind object;
  #L3d62c2.  v2.`d.j.b` @type ^`d.e` := v3 @kind object;
  #L3d62c6.  v3:= new `d.k`;
  #L3d62ca.  v0:= v2.`d.j.b` @type ^`d.e` @kind object;
  #L3d62ce.  v1:= v2.`d.j.c` @type ^`java.util.zip.Inflater` @kind object;
  #L3d62d2.  call `<init>`(v3, v0, v1) @signature `Ld/k;.<init>:(Ld/e;Ljava/util/zip/Inflater;)V` @kind direct;
  #L3d62d8.  v2.`d.j.d` @type ^`d.k` := v3 @kind object;
  #L3d62dc.  return @kind void;
}
procedure `void` `a`(`d.j` v6 @kind this, `d.c` v7 @kind object, `long` v8 , `long` v10 ) @signature `Ld/j;.a:(Ld/c;JJ)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d62f0.  v7:= v7.`d.c.a` @type ^`d.o` @kind object;
  #L3d62f4.  v0:= v7.`d.o.c` @type ^`int`;
  #L3d62f8.  v1:= v7.`d.o.b` @type ^`int`;
  #L3d62fc.  v0:= v0 - v1 @kind int;
  #L3d62fe.  v0:= (`long`) v0 @kind i2l;
  #L3d6300.  v2:= lcmp(v8, v0);
  #L3d6304.  if v2 < 0 then goto L3d6320;
  #L3d6308.  v0:= v7.`d.o.c` @type ^`int`;
  #L3d630c.  v1:= v7.`d.o.b` @type ^`int`;
  #L3d6310.  v0:= v0 - v1 @kind int;
  #L3d6312.  v0:= (`long`) v0 @kind i2l;
  #L3d6314.  v2:= v8 - v0 @kind long;
  #L3d6318.  v7:= v7.`d.o.f` @type ^`d.o` @kind object;
  #L3d631c.  v8:= v2 @kind wide;
  #L3d631e.  goto L3d62f4;
  #L3d6320.  v0:= 0L;
  #L3d6324.  v2:= lcmp(v10, v0);
  #L3d6328.  if v2 <= 0 then goto L3d6368;
  #L3d632c.  v2:= v7.`d.o.b` @type ^`int`;
  #L3d6330.  v2:= (`long`) v2 @kind i2l;
  #L3d6332.  v4:= v2 + v8 @kind long;
  #L3d6336.  v8:= (`int`) v4 @kind l2i;
  #L3d6338.  v9:= v7.`d.o.c` @type ^`int`;
  #L3d633c.  v9:= v9 - v8 @kind int;
  #L3d633e.  v2:= (`long`) v9 @kind i2l;
  #L3d6340.  call temp:= `min`(v2, v10) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3d6346.  v2:= temp @kind wide;
  #L3d6348.  v9:= (`int`) v2 @kind l2i;
  #L3d634a.  v2:= v6.`d.j.e` @type ^`java.util.zip.CRC32` @kind object;
  #L3d634e.  v3:= v7.`d.o.a` @type ^`byte`[] @kind object;
  #L3d6352.  call `update`(v2, v3, v8, v9) @signature `Ljava/util/zip/CRC32;.update:([BII)V` @kind virtual;
  #L3d6358.  v8:= (`long`) v9 @kind i2l;
  #L3d635a.  v2:= v10 - v8 @kind long;
  #L3d635e.  v7:= v7.`d.o.f` @type ^`d.o` @kind object;
  #L3d6362.  v8:= v0 @kind wide;
  #L3d6364.  v10:= v2 @kind wide;
  #L3d6366.  goto L3d6324;
  #L3d6368.  return @kind void;
}
procedure `void` `a`(`d.j` v4 @kind this, `java.lang.String` v5 @kind object, `int` v6 , `int` v7 ) @signature `Ld/j;.a:(Ljava/lang/String;II)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3d637c.  if v7 == v6 then goto L3d63c0;
  #L3d6380.  v0:= new `java.io.IOException`;
  #L3d6384.  v1:= "%s: actual 0x%08x != expected 0x%08x" @kind object;
  #L3d6388.  v2:= 3I;
  #L3d638a.  v2:= new `java.lang.Object`[v2];
  #L3d638e.  v3:= 0I;
  #L3d6390.  v2[v3]:= v5 @kind object;
  #L3d6394.  v5:= 1I;
  #L3d6396.  call temp:= `valueOf`(v7) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3d639c.  v7:= temp @kind object;
  #L3d639e.  v2[v5]:= v7 @kind object;
  #L3d63a2.  v5:= 2I;
  #L3d63a4.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3d63aa.  v6:= temp @kind object;
  #L3d63ac.  v2[v5]:= v6 @kind object;
  #L3d63b0.  call temp:= `format`(v1, v2) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L3d63b6.  v5:= temp @kind object;
  #L3d63b8.  call `<init>`(v0, v5) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d63be.  throw v0;
  #L3d63c0.  return @kind void;
}
procedure `void` `b`(`d.j` v17 @kind this) @signature `Ld/j;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L3d63d4.  v6:= v17 @kind object;
  #L3d63d8.  v0:= v6.`d.j.b` @type ^`d.e` @kind object;
  #L3d63dc.  v1:= 10L;
  #L3d63e0.  call `a`(v0, v1) @signature `Ld/e;.a:(J)V` @kind interface;
  #L3d63e6.  v0:= v6.`d.j.b` @type ^`d.e` @kind object;
  #L3d63ea.  call temp:= `c`(v0) @signature `Ld/e;.c:()Ld/c;` @kind interface;
  #L3d63f0.  v0:= temp @kind object;
  #L3d63f2.  v1:= 3L;
  #L3d63f6.  call temp:= `b`(v0, v1) @signature `Ld/c;.b:(J)B` @kind virtual;
  #L3d63fc.  v7:= temp;
  #L3d63fe.  v0:= v7 ^> 1;
  #L3d6402.  v8:= 1I;
  #L3d6404.  v0:= v0 ^& v8 @kind int;
  #L3d6406.  v9:= 0I;
  #L3d6408.  if v0 != v8 then goto L3d6410;
  #L3d640c.  v10:= 1I;
  #L3d640e.  goto L3d6412;
  #L3d6410.  v10:= 0I;
  #L3d6412.  if v10 == 0 then goto L3d6432;
  #L3d6416.  v0:= v6.`d.j.b` @type ^`d.e` @kind object;
  #L3d641a.  call temp:= `c`(v0) @signature `Ld/e;.c:()Ld/c;` @kind interface;
  #L3d6420.  v1:= temp @kind object;
  #L3d6422.  v2:= 0L;
  #L3d6426.  v4:= 10L;
  #L3d642a.  v0:= v6 @kind object;
  #L3d642c.  call `a`(v0, v1, v2, v4) @signature `Ld/j;.a:(Ld/c;JJ)V` @kind direct;
  #L3d6432.  v0:= v6.`d.j.b` @type ^`d.e` @kind object;
  #L3d6436.  call temp:= `h`(v0) @signature `Ld/e;.h:()S` @kind interface;
  #L3d643c.  v0:= temp;
  #L3d643e.  v1:= "ID1ID2" @kind object;
  #L3d6442.  v2:= 8075I;
  #L3d6446.  call `a`(v6, v1, v2, v0) @signature `Ld/j;.a:(Ljava/lang/String;II)V` @kind direct;
  #L3d644c.  v0:= v6.`d.j.b` @type ^`d.e` @kind object;
  #L3d6450.  v1:= 8L;
  #L3d6454.  call `h`(v0, v1) @signature `Ld/e;.h:(J)V` @kind interface;
  #L3d645a.  v0:= v7 ^> 2;
  #L3d645e.  v0:= v0 ^& v8 @kind int;
  #L3d6460.  if v0 != v8 then goto L3d64da;
  #L3d6464.  v0:= v6.`d.j.b` @type ^`d.e` @kind object;
  #L3d6468.  v1:= 2L;
  #L3d646c.  call `a`(v0, v1) @signature `Ld/e;.a:(J)V` @kind interface;
  #L3d6472.  if v10 == 0 then goto L3d6492;
  #L3d6476.  v0:= v6.`d.j.b` @type ^`d.e` @kind object;
  #L3d647a.  call temp:= `c`(v0) @signature `Ld/e;.c:()Ld/c;` @kind interface;
  #L3d6480.  v1:= temp @kind object;
  #L3d6482.  v2:= 0L;
  #L3d6486.  v4:= 2L;
  #L3d648a.  v0:= v6 @kind object;
  #L3d648c.  call `a`(v0, v1, v2, v4) @signature `Ld/j;.a:(Ld/c;JJ)V` @kind direct;
  #L3d6492.  v0:= v6.`d.j.b` @type ^`d.e` @kind object;
  #L3d6496.  call temp:= `c`(v0) @signature `Ld/e;.c:()Ld/c;` @kind interface;
  #L3d649c.  v0:= temp @kind object;
  #L3d649e.  call temp:= `j`(v0) @signature `Ld/c;.j:()S` @kind virtual;
  #L3d64a4.  v0:= temp;
  #L3d64a6.  v1:= v6.`d.j.b` @type ^`d.e` @kind object;
  #L3d64aa.  v11:= (`long`) v0 @kind i2l;
  #L3d64ac.  call `a`(v1, v11) @signature `Ld/e;.a:(J)V` @kind interface;
  #L3d64b2.  if v10 == 0 then goto L3d64d0;
  #L3d64b6.  v0:= v6.`d.j.b` @type ^`d.e` @kind object;
  #L3d64ba.  call temp:= `c`(v0) @signature `Ld/e;.c:()Ld/c;` @kind interface;
  #L3d64c0.  v1:= temp @kind object;
  #L3d64c2.  v2:= 0L;
  #L3d64c6.  v0:= v6 @kind object;
  #L3d64c8.  v4:= v11 @kind wide;
  #L3d64ca.  call `a`(v0, v1, v2, v4) @signature `Ld/j;.a:(Ld/c;JJ)V` @kind direct;
  #L3d64d0.  v0:= v6.`d.j.b` @type ^`d.e` @kind object;
  #L3d64d4.  call `h`(v0, v11) @signature `Ld/e;.h:(J)V` @kind interface;
  #L3d64da.  v0:= v7 ^> 3;
  #L3d64de.  v0:= v0 ^& v8 @kind int;
  #L3d64e0.  v11:= -1L;
  #L3d64e4.  v13:= 1L;
  #L3d64e8.  if v0 != v8 then goto L3d653a;
  #L3d64ec.  v0:= v6.`d.j.b` @type ^`d.e` @kind object;
  #L3d64f0.  call temp:= `a`(v0, v9) @signature `Ld/e;.a:(B)J` @kind interface;
  #L3d64f6.  v15:= temp @kind wide;
  #L3d64f8.  v0:= lcmp(v15, v11);
  #L3d64fc.  if v0 != 0 then goto L3d650c;
  #L3d6500.  v0:= new `java.io.EOFException`;
  #L3d6504.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L3d650a.  throw v0;
  #L3d650c.  if v10 == 0 then goto L3d652c;
  #L3d6510.  v0:= v6.`d.j.b` @type ^`d.e` @kind object;
  #L3d6514.  call temp:= `c`(v0) @signature `Ld/e;.c:()Ld/c;` @kind interface;
  #L3d651a.  v1:= temp @kind object;
  #L3d651c.  v2:= 0L;
  #L3d6520.  v4:= v15 + v13 @kind long;
  #L3d6524.  v0:= v6 @kind object;
  #L3d6526.  call `a`(v0, v1, v2, v4) @signature `Ld/j;.a:(Ld/c;JJ)V` @kind direct;
  #L3d652c.  v0:= v6.`d.j.b` @type ^`d.e` @kind object;
  #L3d6530.  v1:= v15 + v13 @kind long;
  #L3d6534.  call `h`(v0, v1) @signature `Ld/e;.h:(J)V` @kind interface;
  #L3d653a.  v0:= v7 ^> 4;
  #L3d653e.  v0:= v0 ^& v8 @kind int;
  #L3d6540.  if v0 != v8 then goto L3d6592;
  #L3d6544.  v0:= v6.`d.j.b` @type ^`d.e` @kind object;
  #L3d6548.  call temp:= `a`(v0, v9) @signature `Ld/e;.a:(B)J` @kind interface;
  #L3d654e.  v7:= temp @kind wide;
  #L3d6550.  v0:= lcmp(v7, v11);
  #L3d6554.  if v0 != 0 then goto L3d6564;
  #L3d6558.  v0:= new `java.io.EOFException`;
  #L3d655c.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L3d6562.  throw v0;
  #L3d6564.  if v10 == 0 then goto L3d6584;
  #L3d6568.  v0:= v6.`d.j.b` @type ^`d.e` @kind object;
  #L3d656c.  call temp:= `c`(v0) @signature `Ld/e;.c:()Ld/c;` @kind interface;
  #L3d6572.  v1:= temp @kind object;
  #L3d6574.  v2:= 0L;
  #L3d6578.  v4:= v7 + v13 @kind long;
  #L3d657c.  v0:= v6 @kind object;
  #L3d657e.  call `a`(v0, v1, v2, v4) @signature `Ld/j;.a:(Ld/c;JJ)V` @kind direct;
  #L3d6584.  v0:= v6.`d.j.b` @type ^`d.e` @kind object;
  #L3d6588.  v1:= v7 + v13 @kind long;
  #L3d658c.  call `h`(v0, v1) @signature `Ld/e;.h:(J)V` @kind interface;
  #L3d6592.  if v10 == 0 then goto L3d65c6;
  #L3d6596.  v0:= "FHCRC" @kind object;
  #L3d659a.  v1:= v6.`d.j.b` @type ^`d.e` @kind object;
  #L3d659e.  call temp:= `j`(v1) @signature `Ld/e;.j:()S` @kind interface;
  #L3d65a4.  v1:= temp;
  #L3d65a6.  v2:= v6.`d.j.e` @type ^`java.util.zip.CRC32` @kind object;
  #L3d65aa.  call temp:= `getValue`(v2) @signature `Ljava/util/zip/CRC32;.getValue:()J` @kind virtual;
  #L3d65b0.  v2:= temp @kind wide;
  #L3d65b2.  v2:= (`int`) v2 @kind l2i;
  #L3d65b4.  v2:= (`short`) v2 @kind i2s;
  #L3d65b6.  call `a`(v6, v0, v1, v2) @signature `Ld/j;.a:(Ljava/lang/String;II)V` @kind direct;
  #L3d65bc.  v0:= v6.`d.j.e` @type ^`java.util.zip.CRC32` @kind object;
  #L3d65c0.  call `reset`(v0) @signature `Ljava/util/zip/CRC32;.reset:()V` @kind virtual;
  #L3d65c6.  return @kind void;
}
procedure `void` `c`(`d.j` v4 @kind this) @signature `Ld/j;.c:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3d65d8.  v0:= "CRC" @kind object;
  #L3d65dc.  v1:= v4.`d.j.b` @type ^`d.e` @kind object;
  #L3d65e0.  call temp:= `k`(v1) @signature `Ld/e;.k:()I` @kind interface;
  #L3d65e6.  v1:= temp;
  #L3d65e8.  v2:= v4.`d.j.e` @type ^`java.util.zip.CRC32` @kind object;
  #L3d65ec.  call temp:= `getValue`(v2) @signature `Ljava/util/zip/CRC32;.getValue:()J` @kind virtual;
  #L3d65f2.  v2:= temp @kind wide;
  #L3d65f4.  v2:= (`int`) v2 @kind l2i;
  #L3d65f6.  call `a`(v4, v0, v1, v2) @signature `Ld/j;.a:(Ljava/lang/String;II)V` @kind direct;
  #L3d65fc.  v0:= "ISIZE" @kind object;
  #L3d6600.  v1:= v4.`d.j.b` @type ^`d.e` @kind object;
  #L3d6604.  call temp:= `k`(v1) @signature `Ld/e;.k:()I` @kind interface;
  #L3d660a.  v1:= temp;
  #L3d660c.  v2:= v4.`d.j.c` @type ^`java.util.zip.Inflater` @kind object;
  #L3d6610.  call temp:= `getBytesWritten`(v2) @signature `Ljava/util/zip/Inflater;.getBytesWritten:()J` @kind virtual;
  #L3d6616.  v2:= temp @kind wide;
  #L3d6618.  v2:= (`int`) v2 @kind l2i;
  #L3d661a.  call `a`(v4, v0, v1, v2) @signature `Ld/j;.a:(Ljava/lang/String;II)V` @kind direct;
  #L3d6620.  return @kind void;
}
procedure `long` `a`(`d.j` v11 @kind this, `d.c` v12 @kind object, `long` v13 ) @signature `Ld/j;.a:(Ld/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L3d61a4.  v0:= 0L;
  #L3d61a8.  v2:= lcmp(v13, v0);
  #L3d61ac.  if v2 >= 0 then goto L3d61de;
  #L3d61b0.  v12:= new `java.lang.IllegalArgumentException`;
  #L3d61b4.  v0:= new `java.lang.StringBuilder`;
  #L3d61b8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d61be.  v1:= "byteCount < 0: " @kind object;
  #L3d61c2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d61c8.  call temp:= `append`(v0, v13) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d61ce.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d61d4.  v13:= temp @kind object;
  #L3d61d6.  call `<init>`(v12, v13) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d61dc.  throw v12;
  #L3d61de.  v2:= lcmp(v13, v0);
  #L3d61e2.  if v2 != 0 then goto L3d61e8;
  #L3d61e6.  return v0 @kind wide;
  #L3d61e8.  v0:= v11.`d.j.a` @type ^`int`;
  #L3d61ec.  v1:= 1I;
  #L3d61ee.  if v0 != 0 then goto L3d61fc;
  #L3d61f2.  call `b`(v11) @signature `Ld/j;.b:()V` @kind direct;
  #L3d61f8.  v11.`d.j.a` @type ^`int` := v1;
  #L3d61fc.  v0:= v11.`d.j.a` @type ^`int`;
  #L3d6200.  v2:= 2I;
  #L3d6202.  v3:= -1L;
  #L3d6206.  if v0 != v1 then goto L3d6234;
  #L3d620a.  v7:= v12.`d.c.b` @type ^`long` @kind wide;
  #L3d620e.  v0:= v11.`d.j.d` @type ^`d.k` @kind object;
  #L3d6212.  call temp:= `a`(v0, v12, v13) @signature `Ld/k;.a:(Ld/c;J)J` @kind virtual;
  #L3d6218.  v13:= temp @kind wide;
  #L3d621a.  v0:= lcmp(v13, v3);
  #L3d621e.  if v0 == 0 then goto L3d6230;
  #L3d6222.  v5:= v11 @kind object;
  #L3d6224.  v6:= v12 @kind object;
  #L3d6226.  v9:= v13 @kind wide;
  #L3d6228.  call `a`(v5, v6, v7, v9) @signature `Ld/j;.a:(Ld/c;JJ)V` @kind direct;
  #L3d622e.  return v13 @kind wide;
  #L3d6230.  v11.`d.j.a` @type ^`int` := v2;
  #L3d6234.  v12:= v11.`d.j.a` @type ^`int`;
  #L3d6238.  if v12 != v2 then goto L3d6268;
  #L3d623c.  call `c`(v11) @signature `Ld/j;.c:()V` @kind direct;
  #L3d6242.  v12:= 3I;
  #L3d6244.  v11.`d.j.a` @type ^`int` := v12;
  #L3d6248.  v12:= v11.`d.j.b` @type ^`d.e` @kind object;
  #L3d624c.  call temp:= `e`(v12) @signature `Ld/e;.e:()Z` @kind interface;
  #L3d6252.  v12:= temp;
  #L3d6254.  if v12 != 0 then goto L3d6268;
  #L3d6258.  v12:= new `java.io.IOException`;
  #L3d625c.  v13:= "gzip finished without exhausting source" @kind object;
  #L3d6260.  call `<init>`(v12, v13) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d6266.  throw v12;
  #L3d6268.  return v3 @kind wide;
}
procedure `d.t` `a`(`d.j` v1 @kind this) @signature `Ld/j;.a:()Ld/t;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d6184.  v0:= v1.`d.j.b` @type ^`d.e` @kind object;
  #L3d6188.  call temp:= `a`(v0) @signature `Ld/e;.a:()Ld/t;` @kind interface;
  #L3d618e.  v0:= temp @kind object;
  #L3d6190.  return v0 @kind object;
}
procedure `void` `close`(`d.j` v1 @kind this) @signature `Ld/j;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d6634.  v0:= v1.`d.j.d` @type ^`d.k` @kind object;
  #L3d6638.  call `close`(v0) @signature `Ld/k;.close:()V` @kind virtual;
  #L3d663e.  return @kind void;
}
