record `d.m` @kind class @AccessFlag FINAL extends `d.d` @kind interface {
  `d.c` `d.m.a` @AccessFlag PUBLIC_FINAL;
  `d.r` `d.m.b` @AccessFlag PUBLIC_FINAL;
  `boolean` `d.m.c` @AccessFlag ;
}
procedure `void` `<init>`(`d.m` v1 @kind this, `d.r` v2 @kind object) @signature `Ld/m;.<init>:(Ld/r;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3d722c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3d7232.  v0:= new `d.c`;
  #L3d7236.  call `<init>`(v0) @signature `Ld/c;.<init>:()V` @kind direct;
  #L3d723c.  v1.`d.m.a` @type ^`d.c` := v0 @kind object;
  #L3d7240.  if v2 != 0 then goto L3d7254;
  #L3d7244.  v2:= new `java.lang.NullPointerException`;
  #L3d7248.  v0:= "sink == null" @kind object;
  #L3d724c.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d7252.  throw v2;
  #L3d7254.  v1.`d.m.b` @type ^`d.r` := v2 @kind object;
  #L3d7258.  return @kind void;
}
procedure `d.t` `a`(`d.m` v1 @kind this) @signature `Ld/m;.a:()Ld/t;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d718c.  v0:= v1.`d.m.b` @type ^`d.r` @kind object;
  #L3d7190.  call temp:= `a`(v0) @signature `Ld/r;.a:()Ld/t;` @kind interface;
  #L3d7196.  v0:= temp @kind object;
  #L3d7198.  return v0 @kind object;
}
procedure `void` `a_`(`d.m` v1 @kind this, `d.c` v2 @kind object, `long` v3 ) @signature `Ld/m;.a_:(Ld/c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d726c.  v0:= v1.`d.m.c` @type ^`boolean` @kind boolean;
  #L3d7270.  if v0 == 0 then goto L3d7284;
  #L3d7274.  v2:= new `java.lang.IllegalStateException`;
  #L3d7278.  v3:= "closed" @kind object;
  #L3d727c.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d7282.  throw v2;
  #L3d7284.  v0:= v1.`d.m.a` @type ^`d.c` @kind object;
  #L3d7288.  call `a_`(v0, v2, v3) @signature `Ld/c;.a_:(Ld/c;J)V` @kind virtual;
  #L3d728e.  call temp:= `t`(v1) @signature `Ld/m;.t:()Ld/d;` @kind virtual;
  #L3d7294.  return @kind void;
}
procedure `d.d` `b`(`d.m` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Ld/m;.b:(Ljava/lang/String;)Ld/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d6f5c.  v0:= v1.`d.m.c` @type ^`boolean` @kind boolean;
  #L3d6f60.  if v0 == 0 then goto L3d6f74;
  #L3d6f64.  v2:= new `java.lang.IllegalStateException`;
  #L3d6f68.  v0:= "closed" @kind object;
  #L3d6f6c.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d6f72.  throw v2;
  #L3d6f74.  v0:= v1.`d.m.a` @type ^`d.c` @kind object;
  #L3d6f78.  call temp:= `a`(v0, v2) @signature `Ld/c;.a:(Ljava/lang/String;)Ld/c;` @kind virtual;
  #L3d6f7e.  call temp:= `t`(v1) @signature `Ld/m;.t:()Ld/d;` @kind virtual;
  #L3d6f84.  v2:= temp @kind object;
  #L3d6f86.  return v2 @kind object;
}
procedure `d.c` `c`(`d.m` v1 @kind this) @signature `Ld/m;.c:()Ld/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d6f44.  v0:= v1.`d.m.a` @type ^`d.c` @kind object;
  #L3d6f48.  return v0 @kind object;
}
procedure `d.d` `c`(`d.m` v1 @kind this, `byte`[] v2 @kind object) @signature `Ld/m;.c:([B)Ld/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d6f98.  v0:= v1.`d.m.c` @type ^`boolean` @kind boolean;
  #L3d6f9c.  if v0 == 0 then goto L3d6fb0;
  #L3d6fa0.  v2:= new `java.lang.IllegalStateException`;
  #L3d6fa4.  v0:= "closed" @kind object;
  #L3d6fa8.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d6fae.  throw v2;
  #L3d6fb0.  v0:= v1.`d.m.a` @type ^`d.c` @kind object;
  #L3d6fb4.  call temp:= `b`(v0, v2) @signature `Ld/c;.b:([B)Ld/c;` @kind virtual;
  #L3d6fba.  call temp:= `t`(v1) @signature `Ld/m;.t:()Ld/d;` @kind virtual;
  #L3d6fc0.  v2:= temp @kind object;
  #L3d6fc2.  return v2 @kind object;
}
procedure `d.d` `c`(`d.m` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Ld/m;.c:([BII)Ld/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d6fd4.  v0:= v1.`d.m.c` @type ^`boolean` @kind boolean;
  #L3d6fd8.  if v0 == 0 then goto L3d6fec;
  #L3d6fdc.  v2:= new `java.lang.IllegalStateException`;
  #L3d6fe0.  v3:= "closed" @kind object;
  #L3d6fe4.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d6fea.  throw v2;
  #L3d6fec.  v0:= v1.`d.m.a` @type ^`d.c` @kind object;
  #L3d6ff0.  call temp:= `b`(v0, v2, v3, v4) @signature `Ld/c;.b:([BII)Ld/c;` @kind virtual;
  #L3d6ff6.  call temp:= `t`(v1) @signature `Ld/m;.t:()Ld/d;` @kind virtual;
  #L3d6ffc.  v2:= temp @kind object;
  #L3d6ffe.  return v2 @kind object;
}
procedure `void` `close`(`d.m` v6 @kind this) @signature `Ld/m;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d72a8.  v0:= v6.`d.m.c` @type ^`boolean` @kind boolean;
  #L3d72ac.  if v0 == 0 then goto L3d72b2;
  #L3d72b0.  return @kind void;
  #L3d72b2.  v0:= 0I;
  #L3d72b4.  v1:= v6.`d.m.a` @type ^`d.c` @kind object;
  #L3d72b8.  v1:= v1.`d.c.b` @type ^`long` @kind wide;
  #L3d72bc.  v3:= 0L;
  #L3d72c0.  v5:= lcmp(v1, v3);
  #L3d72c4.  if v5 <= 0 then goto L3d72e2;
  #L3d72c8.  v1:= v6.`d.m.b` @type ^`d.r` @kind object;
  #L3d72cc.  v2:= v6.`d.m.a` @type ^`d.c` @kind object;
  #L3d72d0.  v3:= v6.`d.m.a` @type ^`d.c` @kind object;
  #L3d72d4.  v3:= v3.`d.c.b` @type ^`long` @kind wide;
  #L3d72d8.  call `a_`(v1, v2, v3) @signature `Ld/r;.a_:(Ld/c;J)V` @kind interface;
  #L3d72de.  goto L3d72e2;
  #L3d72e0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3d72e2.  v1:= v6.`d.m.b` @type ^`d.r` @kind object;
  #L3d72e6.  call `close`(v1) @signature `Ld/r;.close:()V` @kind interface;
  #L3d72ec.  goto L3d72f6;
  #L3d72ee.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3d72f0.  if v0 != 0 then goto L3d72f6;
  #L3d72f4.  v0:= v1 @kind object;
  #L3d72f6.  v1:= 1I;
  #L3d72f8.  v6.`d.m.c` @type ^`boolean` := v1 @kind boolean;
  #L3d72fc.  if v0 == 0 then goto L3d7306;
  #L3d7300.  call `a`(v0) @signature `Ld/u;.a:(Ljava/lang/Throwable;)V` @kind static;
  #L3d7306.  return @kind void;
  catch `java.lang.Throwable` @[L3d72b4..L3d72de] goto L3d72e0;
  catch `java.lang.Throwable` @[L3d72e2..L3d72ec] goto L3d72ee;
}
procedure `void` `flush`(`d.m` v5 @kind this) @signature `Ld/m;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3d7334.  v0:= v5.`d.m.c` @type ^`boolean` @kind boolean;
  #L3d7338.  if v0 == 0 then goto L3d734c;
  #L3d733c.  v0:= new `java.lang.IllegalStateException`;
  #L3d7340.  v1:= "closed" @kind object;
  #L3d7344.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d734a.  throw v0;
  #L3d734c.  v0:= v5.`d.m.a` @type ^`d.c` @kind object;
  #L3d7350.  v0:= v0.`d.c.b` @type ^`long` @kind wide;
  #L3d7354.  v2:= 0L;
  #L3d7358.  v4:= lcmp(v0, v2);
  #L3d735c.  if v4 <= 0 then goto L3d7376;
  #L3d7360.  v0:= v5.`d.m.b` @type ^`d.r` @kind object;
  #L3d7364.  v1:= v5.`d.m.a` @type ^`d.c` @kind object;
  #L3d7368.  v2:= v5.`d.m.a` @type ^`d.c` @kind object;
  #L3d736c.  v2:= v2.`d.c.b` @type ^`long` @kind wide;
  #L3d7370.  call `a_`(v0, v1, v2) @signature `Ld/r;.a_:(Ld/c;J)V` @kind interface;
  #L3d7376.  v0:= v5.`d.m.b` @type ^`d.r` @kind object;
  #L3d737a.  call `flush`(v0) @signature `Ld/r;.flush:()V` @kind interface;
  #L3d7380.  return @kind void;
}
procedure `d.d` `g`(`d.m` v1 @kind this, `int` v2 ) @signature `Ld/m;.g:(I)Ld/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d7010.  v0:= v1.`d.m.c` @type ^`boolean` @kind boolean;
  #L3d7014.  if v0 == 0 then goto L3d7028;
  #L3d7018.  v2:= new `java.lang.IllegalStateException`;
  #L3d701c.  v0:= "closed" @kind object;
  #L3d7020.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d7026.  throw v2;
  #L3d7028.  v0:= v1.`d.m.a` @type ^`d.c` @kind object;
  #L3d702c.  call temp:= `d`(v0, v2) @signature `Ld/c;.d:(I)Ld/c;` @kind virtual;
  #L3d7032.  call temp:= `t`(v1) @signature `Ld/m;.t:()Ld/d;` @kind virtual;
  #L3d7038.  v2:= temp @kind object;
  #L3d703a.  return v2 @kind object;
}
procedure `d.d` `h`(`d.m` v1 @kind this, `int` v2 ) @signature `Ld/m;.h:(I)Ld/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d704c.  v0:= v1.`d.m.c` @type ^`boolean` @kind boolean;
  #L3d7050.  if v0 == 0 then goto L3d7064;
  #L3d7054.  v2:= new `java.lang.IllegalStateException`;
  #L3d7058.  v0:= "closed" @kind object;
  #L3d705c.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d7062.  throw v2;
  #L3d7064.  v0:= v1.`d.m.a` @type ^`d.c` @kind object;
  #L3d7068.  call temp:= `c`(v0, v2) @signature `Ld/c;.c:(I)Ld/c;` @kind virtual;
  #L3d706e.  call temp:= `t`(v1) @signature `Ld/m;.t:()Ld/d;` @kind virtual;
  #L3d7074.  v2:= temp @kind object;
  #L3d7076.  return v2 @kind object;
}
procedure `d.d` `i`(`d.m` v1 @kind this, `int` v2 ) @signature `Ld/m;.i:(I)Ld/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d7088.  v0:= v1.`d.m.c` @type ^`boolean` @kind boolean;
  #L3d708c.  if v0 == 0 then goto L3d70a0;
  #L3d7090.  v2:= new `java.lang.IllegalStateException`;
  #L3d7094.  v0:= "closed" @kind object;
  #L3d7098.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d709e.  throw v2;
  #L3d70a0.  v0:= v1.`d.m.a` @type ^`d.c` @kind object;
  #L3d70a4.  call temp:= `b`(v0, v2) @signature `Ld/c;.b:(I)Ld/c;` @kind virtual;
  #L3d70aa.  call temp:= `t`(v1) @signature `Ld/m;.t:()Ld/d;` @kind virtual;
  #L3d70b0.  v2:= temp @kind object;
  #L3d70b2.  return v2 @kind object;
}
procedure `boolean` `isOpen`(`d.m` v1 @kind this) @signature `Ld/m;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d6f28.  v0:= v1.`d.m.c` @type ^`boolean` @kind boolean;
  #L3d6f2c.  v0:= v0 ^~ 1;
  #L3d6f30.  return v0;
}
procedure `d.d` `k`(`d.m` v1 @kind this, `long` v2 ) @signature `Ld/m;.k:(J)Ld/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d70c4.  v0:= v1.`d.m.c` @type ^`boolean` @kind boolean;
  #L3d70c8.  if v0 == 0 then goto L3d70dc;
  #L3d70cc.  v2:= new `java.lang.IllegalStateException`;
  #L3d70d0.  v3:= "closed" @kind object;
  #L3d70d4.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d70da.  throw v2;
  #L3d70dc.  v0:= v1.`d.m.a` @type ^`d.c` @kind object;
  #L3d70e0.  call temp:= `j`(v0, v2) @signature `Ld/c;.j:(J)Ld/c;` @kind virtual;
  #L3d70e6.  call temp:= `t`(v1) @signature `Ld/m;.t:()Ld/d;` @kind virtual;
  #L3d70ec.  v2:= temp @kind object;
  #L3d70ee.  return v2 @kind object;
}
procedure `d.d` `l`(`d.m` v1 @kind this, `long` v2 ) @signature `Ld/m;.l:(J)Ld/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d7100.  v0:= v1.`d.m.c` @type ^`boolean` @kind boolean;
  #L3d7104.  if v0 == 0 then goto L3d7118;
  #L3d7108.  v2:= new `java.lang.IllegalStateException`;
  #L3d710c.  v3:= "closed" @kind object;
  #L3d7110.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d7116.  throw v2;
  #L3d7118.  v0:= v1.`d.m.a` @type ^`d.c` @kind object;
  #L3d711c.  call temp:= `i`(v0, v2) @signature `Ld/c;.i:(J)Ld/c;` @kind virtual;
  #L3d7122.  call temp:= `t`(v1) @signature `Ld/m;.t:()Ld/d;` @kind virtual;
  #L3d7128.  v2:= temp @kind object;
  #L3d712a.  return v2 @kind object;
}
procedure `d.d` `t`(`d.m` v5 @kind this) @signature `Ld/m;.t:()Ld/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3d713c.  v0:= v5.`d.m.c` @type ^`boolean` @kind boolean;
  #L3d7140.  if v0 == 0 then goto L3d7154;
  #L3d7144.  v0:= new `java.lang.IllegalStateException`;
  #L3d7148.  v1:= "closed" @kind object;
  #L3d714c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d7152.  throw v0;
  #L3d7154.  v0:= v5.`d.m.a` @type ^`d.c` @kind object;
  #L3d7158.  call temp:= `f`(v0) @signature `Ld/c;.f:()J` @kind virtual;
  #L3d715e.  v0:= temp @kind wide;
  #L3d7160.  v2:= 0L;
  #L3d7164.  v4:= lcmp(v0, v2);
  #L3d7168.  if v4 <= 0 then goto L3d717a;
  #L3d716c.  v2:= v5.`d.m.b` @type ^`d.r` @kind object;
  #L3d7170.  v3:= v5.`d.m.a` @type ^`d.c` @kind object;
  #L3d7174.  call `a_`(v2, v3, v0) @signature `Ld/r;.a_:(Ld/c;J)V` @kind interface;
  #L3d717a.  return v5 @kind object;
}
procedure `java.lang.String` `toString`(`d.m` v2 @kind this) @signature `Ld/m;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3d71e8.  v0:= new `java.lang.StringBuilder`;
  #L3d71ec.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d71f2.  v1:= "buffer(" @kind object;
  #L3d71f6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d71fc.  v1:= v2.`d.m.b` @type ^`d.r` @kind object;
  #L3d7200.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d7206.  v1:= ")" @kind object;
  #L3d720a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d7210.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d7216.  v0:= temp @kind object;
  #L3d7218.  return v0 @kind object;
}
procedure `int` `write`(`d.m` v1 @kind this, `java.nio.ByteBuffer` v2 @kind object) @signature `Ld/m;.write:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d71ac.  v0:= v1.`d.m.c` @type ^`boolean` @kind boolean;
  #L3d71b0.  if v0 == 0 then goto L3d71c4;
  #L3d71b4.  v2:= new `java.lang.IllegalStateException`;
  #L3d71b8.  v0:= "closed" @kind object;
  #L3d71bc.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d71c2.  throw v2;
  #L3d71c4.  v0:= v1.`d.m.a` @type ^`d.c` @kind object;
  #L3d71c8.  call temp:= `write`(v0, v2) @signature `Ld/c;.write:(Ljava/nio/ByteBuffer;)I` @kind virtual;
  #L3d71ce.  v2:= temp;
  #L3d71d0.  call temp:= `t`(v1) @signature `Ld/m;.t:()Ld/d;` @kind virtual;
  #L3d71d6.  return v2;
}
