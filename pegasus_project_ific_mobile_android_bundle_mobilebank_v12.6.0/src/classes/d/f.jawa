record `d.f` @kind class @AccessFlag PUBLIC extends `java.io.Serializable` @kind interface, `java.lang.Comparable` @kind interface {
  `byte`[] `d.f.c` @AccessFlag FINAL;
  `int` `d.f.d` @AccessFlag TRANSIENT;
  `java.lang.String` `d.f.e` @AccessFlag TRANSIENT;
}
global `char`[] `@@d.f.a` @AccessFlag STATIC_FINAL;
global `d.f` `@@d.f.b` @AccessFlag PUBLIC_STATIC_FINAL;
global `long` `@@d.f.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ld/f;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3d5cd8.  v0:= 16I;
  #L3d5cdc.  v0:= new `char`[v0];
  #L3d5ce0.  goto L3d5d00;
  #L3d5ce6.  `@@d.f.a` @type ^`char`[] := v0 @kind object;
  #L3d5cea.  v0:= 0I;
  #L3d5cec.  v0:= new `byte`[v0];
  #L3d5cf0.  call temp:= `a`(v0) @signature `Ld/f;.a:([B)Ld/f;` @kind static;
  #L3d5cf6.  v0:= temp @kind object;
  #L3d5cf8.  `@@d.f.b` @type ^`d.f` := v0 @kind object;
  #L3d5cfc.  return @kind void;
  #L3d5cfe.  
  #L3d5d00.  v0:= (48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 97I, 98I, 99I, 100I, 101I, 102I) @kind object;
  #L3d5d27.  goto L3d5ce6;
}
procedure `void` `<init>`(`d.f` v0 @kind this, `byte`[] v1 @kind object) @signature `Ld/f;.<init>:([B)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3d5d38.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3d5d3e.  v0.`d.f.c` @type ^`byte`[] := v1 @kind object;
  #L3d5d42.  return @kind void;
}
procedure `int` `a`(`char` v3 ) @signature `Ld/f;.a:(C)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3d58c0.  v0:= 48I;
  #L3d58c4.  if v3 < v0 then goto L3d58d4;
  #L3d58c8.  v1:= 57I;
  #L3d58cc.  if v3 > v1 then goto L3d58d4;
  #L3d58d0.  v3:= v3 - v0 @kind int;
  #L3d58d2.  return v3;
  #L3d58d4.  v0:= 97I;
  #L3d58d8.  if v3 < v0 then goto L3d58ec;
  #L3d58dc.  v1:= 102I;
  #L3d58e0.  if v3 > v1 then goto L3d58ec;
  #L3d58e4.  v3:= v3 - v0 @kind int;
  #L3d58e6.  v3:= v3 + 10;
  #L3d58ea.  return v3;
  #L3d58ec.  v0:= 65I;
  #L3d58f0.  if v3 < v0 then goto L3d5904;
  #L3d58f4.  v1:= 70I;
  #L3d58f8.  if v3 > v1 then goto L3d5904;
  #L3d58fc.  v3:= v3 - v0 @kind int;
  #L3d58fe.  v3:= v3 + 10;
  #L3d5902.  return v3;
  #L3d5904.  v0:= new `java.lang.IllegalArgumentException`;
  #L3d5908.  v1:= new `java.lang.StringBuilder`;
  #L3d590c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d5912.  v2:= "Unexpected hex digit: " @kind object;
  #L3d5916.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d591c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d5922.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d5928.  v3:= temp @kind object;
  #L3d592a.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d5930.  throw v0;
}
procedure `int` `a`(`java.lang.String` v5 @kind object, `int` v6 ) @signature `Ld/f;.a:(Ljava/lang/String;I)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3d5944.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3d594a.  v0:= temp;
  #L3d594c.  v1:= 0I;
  #L3d594e.  v2:= 0I;
  #L3d5950.  if v1 >= v0 then goto L3d599c;
  #L3d5954.  if v2 != v6 then goto L3d595a;
  #L3d5958.  return v1;
  #L3d595a.  call temp:= `codePointAt`(v5, v1) @signature `Ljava/lang/String;.codePointAt:(I)I` @kind virtual;
  #L3d5960.  v3:= temp;
  #L3d5962.  call temp:= `isISOControl`(v3) @signature `Ljava/lang/Character;.isISOControl:(I)Z` @kind static;
  #L3d5968.  v4:= temp;
  #L3d596a.  if v4 == 0 then goto L3d597e;
  #L3d596e.  v4:= 10I;
  #L3d5972.  if v3 == v4 then goto L3d597e;
  #L3d5976.  v4:= 13I;
  #L3d597a.  if v3 != v4 then goto L3d5988;
  #L3d597e.  v4:= 65533I;
  #L3d5984.  if v3 != v4 then goto L3d598c;
  #L3d5988.  v5:= -1I;
  #L3d598a.  return v5;
  #L3d598c.  v2:= v2 + 1;
  #L3d5990.  call temp:= `charCount`(v3) @signature `Ljava/lang/Character;.charCount:(I)I` @kind static;
  #L3d5996.  v3:= temp;
  #L3d5998.  v1:= v1 + v3 @kind int;
  #L3d599a.  goto L3d5950;
  #L3d599c.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3d59a2.  v5:= temp;
  #L3d59a4.  return v5;
}
procedure `d.f` `a`(`java.io.InputStream` v4 @kind object, `int` v5 ) @signature `Ld/f;.a:(Ljava/io/InputStream;I)Ld/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3d5618.  if v4 != 0 then goto L3d562c;
  #L3d561c.  v4:= new `java.lang.IllegalArgumentException`;
  #L3d5620.  v5:= "in == null" @kind object;
  #L3d5624.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d562a.  throw v4;
  #L3d562c.  if v5 >= 0 then goto L3d565e;
  #L3d5630.  v4:= new `java.lang.IllegalArgumentException`;
  #L3d5634.  v0:= new `java.lang.StringBuilder`;
  #L3d5638.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d563e.  v1:= "byteCount < 0: " @kind object;
  #L3d5642.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d5648.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d564e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d5654.  v5:= temp @kind object;
  #L3d5656.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d565c.  throw v4;
  #L3d565e.  v0:= new `byte`[v5];
  #L3d5662.  v1:= 0I;
  #L3d5664.  if v1 >= v5 then goto L3d568a;
  #L3d5668.  v2:= v5 - v1 @kind int;
  #L3d566c.  call temp:= `read`(v4, v0, v1, v2) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L3d5672.  v2:= temp;
  #L3d5674.  v3:= -1I;
  #L3d5676.  if v2 != v3 then goto L3d5686;
  #L3d567a.  v4:= new `java.io.EOFException`;
  #L3d567e.  call `<init>`(v4) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L3d5684.  throw v4;
  #L3d5686.  v1:= v1 + v2 @kind int;
  #L3d5688.  goto L3d5664;
  #L3d568a.  v4:= new `d.f`;
  #L3d568e.  call `<init>`(v4, v0) @signature `Ld/f;.<init>:([B)V` @kind direct;
  #L3d5694.  return v4 @kind object;
}
procedure `d.f` `a`(`java.lang.String` v2 @kind object) @signature `Ld/f;.a:(Ljava/lang/String;)Ld/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3d56a8.  if v2 != 0 then goto L3d56bc;
  #L3d56ac.  v2:= new `java.lang.IllegalArgumentException`;
  #L3d56b0.  v0:= "s == null" @kind object;
  #L3d56b4.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d56ba.  throw v2;
  #L3d56bc.  v0:= new `d.f`;
  #L3d56c0.  v1:= `@@d.u.a` @type ^`java.nio.charset.Charset` @kind object;
  #L3d56c4.  call temp:= `getBytes`(v2, v1) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L3d56ca.  v1:= temp @kind object;
  #L3d56cc.  call `<init>`(v0, v1) @signature `Ld/f;.<init>:([B)V` @kind direct;
  #L3d56d2.  v0.`d.f.e` @type ^`java.lang.String` := v2 @kind object;
  #L3d56d6.  return v0 @kind object;
}
procedure `d.f` `a`(`byte`[] v1 @kind object) @signature `Ld/f;.a:([B)Ld/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d552c.  if v1 != 0 then goto L3d5540;
  #L3d5530.  v1:= new `java.lang.IllegalArgumentException`;
  #L3d5534.  v0:= "data == null" @kind object;
  #L3d5538.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d553e.  throw v1;
  #L3d5540.  v0:= new `d.f`;
  #L3d5544.  call temp:= `clone`(v1) @signature `[B.clone:()Ljava/lang/Object;` @kind virtual;
  #L3d554a.  v1:= temp @kind object;
  #L3d554c.  v1:= (`byte`[]) v1 @kind object;
  #L3d5550.  call `<init>`(v0, v1) @signature `Ld/f;.<init>:([B)V` @kind direct;
  #L3d5556.  return v0 @kind object;
}
procedure `d.f` `b`(`java.lang.String` v4 @kind object) @signature `Ld/f;.b:(Ljava/lang/String;)Ld/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3d56e8.  if v4 != 0 then goto L3d56fc;
  #L3d56ec.  v4:= new `java.lang.IllegalArgumentException`;
  #L3d56f0.  v0:= "hex == null" @kind object;
  #L3d56f4.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d56fa.  throw v4;
  #L3d56fc.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3d5702.  v0:= temp;
  #L3d5704.  v0:= v0 %% 2;
  #L3d5708.  if v0 == 0 then goto L3d573a;
  #L3d570c.  v0:= new `java.lang.IllegalArgumentException`;
  #L3d5710.  v1:= new `java.lang.StringBuilder`;
  #L3d5714.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d571a.  v2:= "Unexpected hex string: " @kind object;
  #L3d571e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d5724.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d572a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d5730.  v4:= temp @kind object;
  #L3d5732.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d5738.  throw v0;
  #L3d573a.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3d5740.  v0:= temp;
  #L3d5742.  v0:= v0 / 2;
  #L3d5746.  v0:= new `byte`[v0];
  #L3d574a.  v1:= 0I;
  #L3d574c.  v2:= length @variable v0;
  #L3d574e.  if v1 >= v2 then goto L3d578c;
  #L3d5752.  v2:= v1 * 2;
  #L3d5756.  call temp:= `charAt`(v4, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3d575c.  v3:= temp;
  #L3d575e.  call temp:= `a`(v3) @signature `Ld/f;.a:(C)I` @kind static;
  #L3d5764.  v3:= temp;
  #L3d5766.  v3:= v3 ^< 4;
  #L3d576a.  v2:= v2 + 1;
  #L3d576e.  call temp:= `charAt`(v4, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3d5774.  v2:= temp;
  #L3d5776.  call temp:= `a`(v2) @signature `Ld/f;.a:(C)I` @kind static;
  #L3d577c.  v2:= temp;
  #L3d577e.  v3:= v3 + v2 @kind int;
  #L3d5780.  v2:= (`byte`) v3 @kind i2b;
  #L3d5782.  v0[v1]:= v2 @kind byte;
  #L3d5786.  v1:= v1 + 1;
  #L3d578a.  goto L3d574c;
  #L3d578c.  call temp:= `a`(v0) @signature `Ld/f;.a:([B)Ld/f;` @kind static;
  #L3d5792.  v4:= temp @kind object;
  #L3d5794.  return v4 @kind object;
}
procedure `d.f` `c`(`d.f` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Ld/f;.c:(Ljava/lang/String;)Ld/f;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3d57c8.  call temp:= `getInstance`(v2) @signature `Ljava/security/MessageDigest;.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;` @kind static;
  #L3d57ce.  v2:= temp @kind object;
  #L3d57d0.  v0:= v1.`d.f.c` @type ^`byte`[] @kind object;
  #L3d57d4.  call temp:= `digest`(v2, v0) @signature `Ljava/security/MessageDigest;.digest:([B)[B` @kind virtual;
  #L3d57da.  v2:= temp @kind object;
  #L3d57dc.  call temp:= `a`(v2) @signature `Ld/f;.a:([B)Ld/f;` @kind static;
  #L3d57e2.  v2:= temp @kind object;
  #L3d57e4.  return v2 @kind object;
  #L3d57e6.  v2:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L3d57e8.  v0:= new `java.lang.AssertionError`;
  #L3d57ec.  call `<init>`(v0, v2) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3d57f2.  throw v0;
  catch `java.security.NoSuchAlgorithmException` @[L3d57c8..L3d57e4] goto L3d57e6;
}
procedure `void` `readObject`(`d.f` v2 @kind this, `java.io.ObjectInputStream` v3 @kind object) @signature `Ld/f;.readObject:(Ljava/io/ObjectInputStream;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3d5d78.  call temp:= `readInt`(v3) @signature `Ljava/io/ObjectInputStream;.readInt:()I` @kind virtual;
  #L3d5d7e.  v0:= temp;
  #L3d5d80.  call temp:= `a`(v3, v0) @signature `Ld/f;.a:(Ljava/io/InputStream;I)Ld/f;` @kind static;
  #L3d5d86.  v3:= temp @kind object;
  #L3d5d88.  v0:= constclass @type ^`d.f` @kind object;
  #L3d5d8c.  v1:= "c" @kind object;
  #L3d5d90.  call temp:= `getDeclaredField`(v0, v1) @signature `Ljava/lang/Class;.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;` @kind virtual;
  #L3d5d96.  v0:= temp @kind object;
  #L3d5d98.  v1:= 1I;
  #L3d5d9a.  call `setAccessible`(v0, v1) @signature `Ljava/lang/reflect/Field;.setAccessible:(Z)V` @kind virtual;
  #L3d5da0.  v3:= v3.`d.f.c` @type ^`byte`[] @kind object;
  #L3d5da4.  call `set`(v0, v2, v3) @signature `Ljava/lang/reflect/Field;.set:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L3d5daa.  return @kind void;
  #L3d5dac.  v3:= new `java.lang.AssertionError`;
  #L3d5db0.  call `<init>`(v3) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L3d5db6.  throw v3;
  #L3d5db8.  v3:= new `java.lang.AssertionError`;
  #L3d5dbc.  call `<init>`(v3) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L3d5dc2.  throw v3;
  catch `java.lang.NoSuchFieldException` @[L3d5d88..L3d5daa] goto L3d5db8;
  catch `java.lang.IllegalAccessException` @[L3d5d88..L3d5daa] goto L3d5dac;
}
procedure `void` `writeObject`(`d.f` v1 @kind this, `java.io.ObjectOutputStream` v2 @kind object) @signature `Ld/f;.writeObject:(Ljava/io/ObjectOutputStream;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3d5de4.  v0:= v1.`d.f.c` @type ^`byte`[] @kind object;
  #L3d5de8.  v0:= length @variable v0;
  #L3d5dea.  call `writeInt`(v2, v0) @signature `Ljava/io/ObjectOutputStream;.writeInt:(I)V` @kind virtual;
  #L3d5df0.  v0:= v1.`d.f.c` @type ^`byte`[] @kind object;
  #L3d5df4.  call `write`(v2, v0) @signature `Ljava/io/ObjectOutputStream;.write:([B)V` @kind virtual;
  #L3d5dfa.  return @kind void;
}
procedure `byte` `a`(`d.f` v1 @kind this, `int` v2 ) @signature `Ld/f;.a:(I)B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d54ec.  v0:= v1.`d.f.c` @type ^`byte`[] @kind object;
  #L3d54f0.  v2:= v0[v2] @kind byte;
  #L3d54f4.  return v2;
}
procedure `d.f` `a`(`d.f` v3 @kind this, `int` v4 , `int` v5 ) @signature `Ld/f;.a:(II)Ld/f;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3d5568.  if v4 >= 0 then goto L3d557c;
  #L3d556c.  v4:= new `java.lang.IllegalArgumentException`;
  #L3d5570.  v5:= "beginIndex < 0" @kind object;
  #L3d5574.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d557a.  throw v4;
  #L3d557c.  v0:= v3.`d.f.c` @type ^`byte`[] @kind object;
  #L3d5580.  v0:= length @variable v0;
  #L3d5582.  if v5 <= v0 then goto L3d55c4;
  #L3d5586.  v4:= new `java.lang.IllegalArgumentException`;
  #L3d558a.  v5:= new `java.lang.StringBuilder`;
  #L3d558e.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d5594.  v0:= "endIndex > length(" @kind object;
  #L3d5598.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d559e.  v0:= v3.`d.f.c` @type ^`byte`[] @kind object;
  #L3d55a2.  v0:= length @variable v0;
  #L3d55a4.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d55aa.  v0:= ")" @kind object;
  #L3d55ae.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d55b4.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d55ba.  v5:= temp @kind object;
  #L3d55bc.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d55c2.  throw v4;
  #L3d55c4.  v0:= v5 - v4 @kind int;
  #L3d55c8.  if v0 >= 0 then goto L3d55dc;
  #L3d55cc.  v4:= new `java.lang.IllegalArgumentException`;
  #L3d55d0.  v5:= "endIndex < beginIndex" @kind object;
  #L3d55d4.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d55da.  throw v4;
  #L3d55dc.  if v4 != 0 then goto L3d55ec;
  #L3d55e0.  v1:= v3.`d.f.c` @type ^`byte`[] @kind object;
  #L3d55e4.  v1:= length @variable v1;
  #L3d55e6.  if v5 != v1 then goto L3d55ec;
  #L3d55ea.  return v3 @kind object;
  #L3d55ec.  v5:= new `byte`[v0];
  #L3d55f0.  v1:= v3.`d.f.c` @type ^`byte`[] @kind object;
  #L3d55f4.  v2:= 0I;
  #L3d55f6.  call `arraycopy`(v1, v4, v5, v2, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3d55fc.  v4:= new `d.f`;
  #L3d5600.  call `<init>`(v4, v5) @signature `Ld/f;.<init>:([B)V` @kind direct;
  #L3d5606.  return v4 @kind object;
}
procedure `java.lang.String` `a`(`d.f` v3 @kind this) @signature `Ld/f;.a:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3d5a8c.  v0:= v3.`d.f.e` @type ^`java.lang.String` @kind object;
  #L3d5a90.  if v0 == 0 then goto L3d5a96;
  #L3d5a94.  goto L3d5aac;
  #L3d5a96.  v0:= new `java.lang.String`;
  #L3d5a9a.  v1:= v3.`d.f.c` @type ^`byte`[] @kind object;
  #L3d5a9e.  v2:= `@@d.u.a` @type ^`java.nio.charset.Charset` @kind object;
  #L3d5aa2.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/String;.<init>:([BLjava/nio/charset/Charset;)V` @kind direct;
  #L3d5aa8.  v3.`d.f.e` @type ^`java.lang.String` := v0 @kind object;
  #L3d5aac.  return v0 @kind object;
}
procedure `void` `a`(`d.f` v3 @kind this, `d.c` v4 @kind object) @signature `Ld/f;.a:(Ld/c;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3d5d54.  v0:= v3.`d.f.c` @type ^`byte`[] @kind object;
  #L3d5d58.  v1:= v3.`d.f.c` @type ^`byte`[] @kind object;
  #L3d5d5c.  v1:= length @variable v1;
  #L3d5d5e.  v2:= 0I;
  #L3d5d60.  call temp:= `b`(v4, v0, v2, v1) @signature `Ld/c;.b:([BII)Ld/c;` @kind virtual;
  #L3d5d66.  return @kind void;
}
procedure `boolean` `a`(`d.f` v1 @kind this, `int` v2 , `d.f` v3 @kind object, `int` v4 , `int` v5 ) @signature `Ld/f;.a:(ILd/f;II)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d5478.  v0:= v1.`d.f.c` @type ^`byte`[] @kind object;
  #L3d547c.  call temp:= `a`(v3, v4, v0, v2, v5) @signature `Ld/f;.a:(I[BII)Z` @kind virtual;
  #L3d5482.  v2:= temp;
  #L3d5484.  return v2;
}
procedure `boolean` `a`(`d.f` v1 @kind this, `int` v2 , `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Ld/f;.a:(I[BII)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d5434.  if v2 < 0 then goto L3d5464;
  #L3d5438.  v0:= v1.`d.f.c` @type ^`byte`[] @kind object;
  #L3d543c.  v0:= length @variable v0;
  #L3d543e.  v0:= v0 - v5 @kind int;
  #L3d5440.  if v2 > v0 then goto L3d5464;
  #L3d5444.  if v4 < 0 then goto L3d5464;
  #L3d5448.  v0:= length @variable v3;
  #L3d544a.  v0:= v0 - v5 @kind int;
  #L3d544c.  if v4 > v0 then goto L3d5464;
  #L3d5450.  v0:= v1.`d.f.c` @type ^`byte`[] @kind object;
  #L3d5454.  call temp:= `a`(v0, v2, v3, v4, v5) @signature `Ld/u;.a:([BI[BII)Z` @kind static;
  #L3d545a.  v2:= temp;
  #L3d545c.  if v2 == 0 then goto L3d5464;
  #L3d5460.  v2:= 1I;
  #L3d5462.  goto L3d5466;
  #L3d5464.  v2:= 0I;
  #L3d5466.  return v2;
}
procedure `boolean` `a`(`d.f` v2 @kind this, `d.f` v3 @kind object) @signature `Ld/f;.a:(Ld/f;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d5410.  call temp:= `g`(v3) @signature `Ld/f;.g:()I` @kind virtual;
  #L3d5416.  v0:= temp;
  #L3d5418.  v1:= 0I;
  #L3d541a.  call temp:= `a`(v2, v1, v3, v1, v0) @signature `Ld/f;.a:(ILd/f;II)Z` @kind virtual;
  #L3d5420.  v3:= temp;
  #L3d5422.  return v3;
}
procedure `int` `b`(`d.f` v9 @kind this, `d.f` v10 @kind object) @signature `Ld/f;.b:(Ld/f;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3d59b8.  call temp:= `g`(v9) @signature `Ld/f;.g:()I` @kind virtual;
  #L3d59be.  v0:= temp;
  #L3d59c0.  call temp:= `g`(v10) @signature `Ld/f;.g:()I` @kind virtual;
  #L3d59c6.  v1:= temp;
  #L3d59c8.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3d59ce.  v2:= temp;
  #L3d59d0.  v3:= 0I;
  #L3d59d2.  v4:= 0I;
  #L3d59d4.  v5:= -1I;
  #L3d59d6.  v6:= 1I;
  #L3d59d8.  if v4 >= v2 then goto L3d5a08;
  #L3d59dc.  call temp:= `a`(v9, v4) @signature `Ld/f;.a:(I)B` @kind virtual;
  #L3d59e2.  v7:= temp;
  #L3d59e4.  v7:= v7 ^& 255;
  #L3d59e8.  call temp:= `a`(v10, v4) @signature `Ld/f;.a:(I)B` @kind virtual;
  #L3d59ee.  v8:= temp;
  #L3d59f0.  v8:= v8 ^& 255;
  #L3d59f4.  if v7 != v8 then goto L3d59fe;
  #L3d59f8.  v4:= v4 + 1;
  #L3d59fc.  goto L3d59d4;
  #L3d59fe.  if v7 >= v8 then goto L3d5a04;
  #L3d5a02.  goto L3d5a06;
  #L3d5a04.  v5:= 1I;
  #L3d5a06.  return v5;
  #L3d5a08.  if v0 != v1 then goto L3d5a0e;
  #L3d5a0c.  return v3;
  #L3d5a0e.  if v0 >= v1 then goto L3d5a14;
  #L3d5a12.  goto L3d5a16;
  #L3d5a14.  v5:= 1I;
  #L3d5a16.  return v5;
}
procedure `java.lang.String` `b`(`d.f` v1 @kind this) @signature `Ld/f;.b:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d5ac0.  v0:= v1.`d.f.c` @type ^`byte`[] @kind object;
  #L3d5ac4.  call temp:= `a`(v0) @signature `Ld/b;.a:([B)Ljava/lang/String;` @kind static;
  #L3d5aca.  v0:= temp @kind object;
  #L3d5acc.  return v0 @kind object;
}
procedure `d.f` `c`(`d.f` v1 @kind this) @signature `Ld/f;.c:()Ld/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d57a8.  v0:= "SHA-1" @kind object;
  #L3d57ac.  call temp:= `c`(v1, v0) @signature `Ld/f;.c:(Ljava/lang/String;)Ld/f;` @kind direct;
  #L3d57b2.  v0:= temp @kind object;
  #L3d57b4.  return v0 @kind object;
}
procedure `int` `compareTo`(`d.f` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Ld/f;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3d5a28.  v1:= (`d.f`) v1 @kind object;
  #L3d5a2c.  call temp:= `b`(v0, v1) @signature `Ld/f;.b:(Ld/f;)I` @kind virtual;
  #L3d5a32.  v1:= temp;
  #L3d5a34.  return v1;
}
procedure `d.f` `d`(`d.f` v1 @kind this) @signature `Ld/f;.d:()Ld/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d5814.  v0:= "SHA-256" @kind object;
  #L3d5818.  call temp:= `c`(v1, v0) @signature `Ld/f;.c:(Ljava/lang/String;)Ld/f;` @kind direct;
  #L3d581e.  v0:= temp @kind object;
  #L3d5820.  return v0 @kind object;
}
procedure `java.lang.String` `e`(`d.f` v9 @kind this) @signature `Ld/f;.e:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3d5ae0.  v0:= v9.`d.f.c` @type ^`byte`[] @kind object;
  #L3d5ae4.  v0:= length @variable v0;
  #L3d5ae6.  v0:= v0 * 2;
  #L3d5aea.  v0:= new `char`[v0];
  #L3d5aee.  v1:= v9.`d.f.c` @type ^`byte`[] @kind object;
  #L3d5af2.  v2:= length @variable v1;
  #L3d5af4.  v3:= 0I;
  #L3d5af6.  v4:= 0I;
  #L3d5af8.  if v3 >= v2 then goto L3d5b32;
  #L3d5afc.  v5:= v1[v3] @kind byte;
  #L3d5b00.  v6:= v4 + 1;
  #L3d5b04.  v7:= `@@d.f.a` @type ^`char`[] @kind object;
  #L3d5b08.  v8:= v5 ^> 4;
  #L3d5b0c.  v8:= v8 ^& 15;
  #L3d5b10.  v7:= v7[v8] @kind char;
  #L3d5b14.  v0[v4]:= v7 @kind char;
  #L3d5b18.  v4:= v6 + 1;
  #L3d5b1c.  v7:= `@@d.f.a` @type ^`char`[] @kind object;
  #L3d5b20.  v5:= v5 ^& 15;
  #L3d5b24.  v5:= v7[v5] @kind char;
  #L3d5b28.  v0[v6]:= v5 @kind char;
  #L3d5b2c.  v3:= v3 + 1;
  #L3d5b30.  goto L3d5af8;
  #L3d5b32.  v1:= new `java.lang.String`;
  #L3d5b36.  call `<init>`(v1, v0) @signature `Ljava/lang/String;.<init>:([C)V` @kind direct;
  #L3d5b3c.  return v1 @kind object;
}
procedure `boolean` `equals`(`d.f` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Ld/f;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3d5498.  v0:= 1I;
  #L3d549a.  if v5 != v4 then goto L3d54a0;
  #L3d549e.  return v0;
  #L3d54a0.  v1:= instanceof @variable v5 @type ^`d.f` @kind boolean;
  #L3d54a4.  v2:= 0I;
  #L3d54a6.  if v1 == 0 then goto L3d54d8;
  #L3d54aa.  v5:= (`d.f`) v5 @kind object;
  #L3d54ae.  call temp:= `g`(v5) @signature `Ld/f;.g:()I` @kind virtual;
  #L3d54b4.  v1:= temp;
  #L3d54b6.  v3:= v4.`d.f.c` @type ^`byte`[] @kind object;
  #L3d54ba.  v3:= length @variable v3;
  #L3d54bc.  if v1 != v3 then goto L3d54d8;
  #L3d54c0.  v1:= v4.`d.f.c` @type ^`byte`[] @kind object;
  #L3d54c4.  v3:= v4.`d.f.c` @type ^`byte`[] @kind object;
  #L3d54c8.  v3:= length @variable v3;
  #L3d54ca.  call temp:= `a`(v5, v2, v1, v2, v3) @signature `Ld/f;.a:(I[BII)Z` @kind virtual;
  #L3d54d0.  v5:= temp;
  #L3d54d2.  if v5 == 0 then goto L3d54d8;
  #L3d54d6.  goto L3d54da;
  #L3d54d8.  v0:= 0I;
  #L3d54da.  return v0;
}
procedure `d.f` `f`(`d.f` v6 @kind this) @signature `Ld/f;.f:()Ld/f;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d5834.  v0:= 0I;
  #L3d5836.  v1:= v6.`d.f.c` @type ^`byte`[] @kind object;
  #L3d583a.  v1:= length @variable v1;
  #L3d583c.  if v0 >= v1 then goto L3d58ae;
  #L3d5840.  v1:= v6.`d.f.c` @type ^`byte`[] @kind object;
  #L3d5844.  v1:= v1[v0] @kind byte;
  #L3d5848.  v2:= 65I;
  #L3d584c.  if v1 < v2 then goto L3d58a8;
  #L3d5850.  v3:= 90I;
  #L3d5854.  if v1 <= v3 then goto L3d585a;
  #L3d5858.  goto L3d58a8;
  #L3d585a.  v4:= v6.`d.f.c` @type ^`byte`[] @kind object;
  #L3d585e.  call temp:= `clone`(v4) @signature `[B.clone:()Ljava/lang/Object;` @kind virtual;
  #L3d5864.  v4:= temp @kind object;
  #L3d5866.  v4:= (`byte`[]) v4 @kind object;
  #L3d586a.  v5:= v0 + 1;
  #L3d586e.  v1:= v1 + 32;
  #L3d5872.  v1:= (`byte`) v1 @kind i2b;
  #L3d5874.  v4[v0]:= v1 @kind byte;
  #L3d5878.  v0:= length @variable v4;
  #L3d587a.  if v5 >= v0 then goto L3d589c;
  #L3d587e.  v0:= v4[v5] @kind byte;
  #L3d5882.  if v0 < v2 then goto L3d5896;
  #L3d5886.  if v0 <= v3 then goto L3d588c;
  #L3d588a.  goto L3d5896;
  #L3d588c.  v0:= v0 + 32;
  #L3d5890.  v0:= (`byte`) v0 @kind i2b;
  #L3d5892.  v4[v5]:= v0 @kind byte;
  #L3d5896.  v5:= v5 + 1;
  #L3d589a.  goto L3d5878;
  #L3d589c.  v0:= new `d.f`;
  #L3d58a0.  call `<init>`(v0, v4) @signature `Ld/f;.<init>:([B)V` @kind direct;
  #L3d58a6.  return v0 @kind object;
  #L3d58a8.  v0:= v0 + 1;
  #L3d58ac.  goto L3d5836;
  #L3d58ae.  return v6 @kind object;
}
procedure `int` `g`(`d.f` v1 @kind this) @signature `Ld/f;.g:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d5a48.  v0:= v1.`d.f.c` @type ^`byte`[] @kind object;
  #L3d5a4c.  v0:= length @variable v0;
  #L3d5a4e.  return v0;
}
procedure `byte`[] `h`(`d.f` v1 @kind this) @signature `Ld/f;.h:()[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d5508.  v0:= v1.`d.f.c` @type ^`byte`[] @kind object;
  #L3d550c.  call temp:= `clone`(v0) @signature `[B.clone:()Ljava/lang/Object;` @kind virtual;
  #L3d5512.  v0:= temp @kind object;
  #L3d5514.  v0:= (`byte`[]) v0 @kind object;
  #L3d5518.  return v0 @kind object;
}
procedure `int` `hashCode`(`d.f` v1 @kind this) @signature `Ld/f;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d5a60.  v0:= v1.`d.f.d` @type ^`int`;
  #L3d5a64.  if v0 == 0 then goto L3d5a6a;
  #L3d5a68.  goto L3d5a7a;
  #L3d5a6a.  v0:= v1.`d.f.c` @type ^`byte`[] @kind object;
  #L3d5a6e.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([B)I` @kind static;
  #L3d5a74.  v0:= temp;
  #L3d5a76.  v1.`d.f.d` @type ^`int` := v0;
  #L3d5a7a.  return v0;
}
procedure `java.lang.String` `toString`(`d.f` v5 @kind this) @signature `Ld/f;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3d5b50.  v0:= v5.`d.f.c` @type ^`byte`[] @kind object;
  #L3d5b54.  v0:= length @variable v0;
  #L3d5b56.  if v0 != 0 then goto L3d5b60;
  #L3d5b5a.  v0:= "[size=0]" @kind object;
  #L3d5b5e.  return v0 @kind object;
  #L3d5b60.  call temp:= `a`(v5) @signature `Ld/f;.a:()Ljava/lang/String;` @kind virtual;
  #L3d5b66.  v0:= temp @kind object;
  #L3d5b68.  v1:= 64I;
  #L3d5b6c.  call temp:= `a`(v0, v1) @signature `Ld/f;.a:(Ljava/lang/String;I)I` @kind static;
  #L3d5b72.  v2:= temp;
  #L3d5b74.  v3:= -1I;
  #L3d5b76.  v4:= 0I;
  #L3d5b78.  if v2 != v3 then goto L3d5c10;
  #L3d5b7c.  v0:= v5.`d.f.c` @type ^`byte`[] @kind object;
  #L3d5b80.  v0:= length @variable v0;
  #L3d5b82.  if v0 > v1 then goto L3d5bbc;
  #L3d5b86.  v0:= new `java.lang.StringBuilder`;
  #L3d5b8a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d5b90.  v1:= "[hex=" @kind object;
  #L3d5b94.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d5b9a.  call temp:= `e`(v5) @signature `Ld/f;.e:()Ljava/lang/String;` @kind virtual;
  #L3d5ba0.  v1:= temp @kind object;
  #L3d5ba2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d5ba8.  v1:= "]" @kind object;
  #L3d5bac.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d5bb2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d5bb8.  v0:= temp @kind object;
  #L3d5bba.  goto L3d5c0e;
  #L3d5bbc.  v0:= new `java.lang.StringBuilder`;
  #L3d5bc0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d5bc6.  v2:= "[size=" @kind object;
  #L3d5bca.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d5bd0.  v2:= v5.`d.f.c` @type ^`byte`[] @kind object;
  #L3d5bd4.  v2:= length @variable v2;
  #L3d5bd6.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d5bdc.  v2:= " hex=" @kind object;
  #L3d5be0.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d5be6.  call temp:= `a`(v5, v4, v1) @signature `Ld/f;.a:(II)Ld/f;` @kind virtual;
  #L3d5bec.  v1:= temp @kind object;
  #L3d5bee.  call temp:= `e`(v1) @signature `Ld/f;.e:()Ljava/lang/String;` @kind virtual;
  #L3d5bf4.  v1:= temp @kind object;
  #L3d5bf6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d5bfc.  v1:= "…]" @kind object;
  #L3d5c00.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d5c06.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d5c0c.  v0:= temp @kind object;
  #L3d5c0e.  return v0 @kind object;
  #L3d5c10.  call temp:= `substring`(v0, v4, v2) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L3d5c16.  v1:= temp @kind object;
  #L3d5c18.  v3:= "\\" @kind object;
  #L3d5c1c.  v4:= "\\\\" @kind object;
  #L3d5c20.  call temp:= `replace`(v1, v3, v4) @signature `Ljava/lang/String;.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;` @kind virtual;
  #L3d5c26.  v1:= temp @kind object;
  #L3d5c28.  v3:= "\n" @kind object;
  #L3d5c2c.  v4:= "\\n" @kind object;
  #L3d5c30.  call temp:= `replace`(v1, v3, v4) @signature `Ljava/lang/String;.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;` @kind virtual;
  #L3d5c36.  v1:= temp @kind object;
  #L3d5c38.  v3:= "\r" @kind object;
  #L3d5c3c.  v4:= "\\r" @kind object;
  #L3d5c40.  call temp:= `replace`(v1, v3, v4) @signature `Ljava/lang/String;.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;` @kind virtual;
  #L3d5c46.  v1:= temp @kind object;
  #L3d5c48.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3d5c4e.  v0:= temp;
  #L3d5c50.  if v2 >= v0 then goto L3d5c98;
  #L3d5c54.  v0:= new `java.lang.StringBuilder`;
  #L3d5c58.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d5c5e.  v2:= "[size=" @kind object;
  #L3d5c62.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d5c68.  v2:= v5.`d.f.c` @type ^`byte`[] @kind object;
  #L3d5c6c.  v2:= length @variable v2;
  #L3d5c6e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d5c74.  v2:= " text=" @kind object;
  #L3d5c78.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d5c7e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d5c84.  v1:= "…]" @kind object;
  #L3d5c88.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d5c8e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d5c94.  v0:= temp @kind object;
  #L3d5c96.  goto L3d5cc4;
  #L3d5c98.  v0:= new `java.lang.StringBuilder`;
  #L3d5c9c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d5ca2.  v2:= "[text=" @kind object;
  #L3d5ca6.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d5cac.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d5cb2.  v1:= "]" @kind object;
  #L3d5cb6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d5cbc.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d5cc2.  v0:= temp @kind object;
  #L3d5cc4.  return v0 @kind object;
}
