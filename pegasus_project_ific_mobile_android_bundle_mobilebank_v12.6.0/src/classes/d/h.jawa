record `d.h` @kind class @AccessFlag PUBLIC_ABSTRACT extends `d.s` @kind interface {
  `d.s` `d.h.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`d.h` v1 @kind this, `d.s` v2 @kind object) @signature `Ld/h;.<init>:(Ld/s;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3d5fc8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3d5fce.  if v2 != 0 then goto L3d5fe2;
  #L3d5fd2.  v2:= new `java.lang.IllegalArgumentException`;
  #L3d5fd6.  v0:= "delegate == null" @kind object;
  #L3d5fda.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d5fe0.  throw v2;
  #L3d5fe2.  v1.`d.h.a` @type ^`d.s` := v2 @kind object;
  #L3d5fe6.  return @kind void;
}
procedure `long` `a`(`d.h` v1 @kind this, `d.c` v2 @kind object, `long` v3 ) @signature `Ld/h;.a:(Ld/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d5fa8.  v0:= v1.`d.h.a` @type ^`d.s` @kind object;
  #L3d5fac.  call temp:= `a`(v0, v2, v3) @signature `Ld/s;.a:(Ld/c;J)J` @kind interface;
  #L3d5fb2.  v2:= temp @kind wide;
  #L3d5fb4.  return v2 @kind wide;
}
procedure `d.t` `a`(`d.h` v1 @kind this) @signature `Ld/h;.a:()Ld/t;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d5f28.  v0:= v1.`d.h.a` @type ^`d.s` @kind object;
  #L3d5f2c.  call temp:= `a`(v0) @signature `Ld/s;.a:()Ld/t;` @kind interface;
  #L3d5f32.  v0:= temp @kind object;
  #L3d5f34.  return v0 @kind object;
}
procedure `d.s` `b`(`d.h` v1 @kind this) @signature `Ld/h;.b:()Ld/s;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d5f10.  v0:= v1.`d.h.a` @type ^`d.s` @kind object;
  #L3d5f14.  return v0 @kind object;
}
procedure `void` `close`(`d.h` v1 @kind this) @signature `Ld/h;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d5ff8.  v0:= v1.`d.h.a` @type ^`d.s` @kind object;
  #L3d5ffc.  call `close`(v0) @signature `Ld/s;.close:()V` @kind interface;
  #L3d6002.  return @kind void;
}
procedure `java.lang.String` `toString`(`d.h` v2 @kind this) @signature `Ld/h;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3d5f48.  v0:= new `java.lang.StringBuilder`;
  #L3d5f4c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d5f52.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3d5f58.  v1:= temp @kind object;
  #L3d5f5a.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L3d5f60.  v1:= temp @kind object;
  #L3d5f62.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d5f68.  v1:= "(" @kind object;
  #L3d5f6c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d5f72.  v1:= v2.`d.h.a` @type ^`d.s` @kind object;
  #L3d5f76.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d5f7c.  v1:= temp @kind object;
  #L3d5f7e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d5f84.  v1:= ")" @kind object;
  #L3d5f88.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d5f8e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d5f94.  v0:= temp @kind object;
  #L3d5f96.  return v0 @kind object;
}
