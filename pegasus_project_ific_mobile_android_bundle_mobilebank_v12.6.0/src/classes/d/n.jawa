record `d.n` @kind class @AccessFlag FINAL extends `d.e` @kind interface {
  `d.c` `d.n.a` @AccessFlag PUBLIC_FINAL;
  `d.s` `d.n.b` @AccessFlag PUBLIC_FINAL;
  `boolean` `d.n.c` @AccessFlag ;
}
procedure `void` `<init>`(`d.n` v1 @kind this, `d.s` v2 @kind object) @signature `Ld/n;.<init>:(Ld/s;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3d7af4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3d7afa.  v0:= new `d.c`;
  #L3d7afe.  call `<init>`(v0) @signature `Ld/c;.<init>:()V` @kind direct;
  #L3d7b04.  v1.`d.n.a` @type ^`d.c` := v0 @kind object;
  #L3d7b08.  if v2 != 0 then goto L3d7b1c;
  #L3d7b0c.  v2:= new `java.lang.NullPointerException`;
  #L3d7b10.  v0:= "source == null" @kind object;
  #L3d7b14.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d7b1a.  throw v2;
  #L3d7b1c.  v1.`d.n.b` @type ^`d.s` := v2 @kind object;
  #L3d7b20.  return @kind void;
}
procedure `long` `a`(`d.n` v6 @kind this, `byte` v7 ) @signature `Ld/n;.a:(B)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d7824.  v2:= 0L;
  #L3d7828.  v4:= 9223372036854775807L;
  #L3d7832.  v0:= v6 @kind object;
  #L3d7834.  v1:= v7;
  #L3d7836.  call temp:= `a`(v0, v1, v2, v4) @signature `Ld/n;.a:(BJJ)J` @kind virtual;
  #L3d783c.  v0:= temp @kind wide;
  #L3d783e.  return v0 @kind wide;
}
procedure `long` `a`(`d.n` v9 @kind this, `byte` v10 , `long` v11 , `long` v13 ) @signature `Ld/n;.a:(BJJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3d7850.  v0:= v9.`d.n.c` @type ^`boolean` @kind boolean;
  #L3d7854.  if v0 == 0 then goto L3d7868;
  #L3d7858.  v10:= new `java.lang.IllegalStateException`;
  #L3d785c.  v11:= "closed" @kind object;
  #L3d7860.  call `<init>`(v10, v11) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d7866.  throw v10;
  #L3d7868.  v0:= 0L;
  #L3d786c.  v2:= lcmp(v11, v0);
  #L3d7870.  if v2 < 0 then goto L3d78e2;
  #L3d7874.  v0:= lcmp(v13, v11);
  #L3d7878.  if v0 >= 0 then goto L3d787e;
  #L3d787c.  goto L3d78e2;
  #L3d787e.  v0:= lcmp(v11, v13);
  #L3d7882.  v7:= -1L;
  #L3d7886.  if v0 >= 0 then goto L3d78e0;
  #L3d788a.  v1:= v9.`d.n.a` @type ^`d.c` @kind object;
  #L3d788e.  v2:= v10;
  #L3d7890.  v3:= v11 @kind wide;
  #L3d7892.  v5:= v13 @kind wide;
  #L3d7894.  call temp:= `a`(v1, v2, v3, v5) @signature `Ld/c;.a:(BJJ)J` @kind virtual;
  #L3d789a.  v0:= temp @kind wide;
  #L3d789c.  v2:= lcmp(v0, v7);
  #L3d78a0.  if v2 == 0 then goto L3d78a6;
  #L3d78a4.  return v0 @kind wide;
  #L3d78a6.  v0:= v9.`d.n.a` @type ^`d.c` @kind object;
  #L3d78aa.  v0:= v0.`d.c.b` @type ^`long` @kind wide;
  #L3d78ae.  v2:= lcmp(v0, v13);
  #L3d78b2.  if v2 >= 0 then goto L3d78de;
  #L3d78b6.  v2:= v9.`d.n.b` @type ^`d.s` @kind object;
  #L3d78ba.  v3:= v9.`d.n.a` @type ^`d.c` @kind object;
  #L3d78be.  v4:= 8192L;
  #L3d78c2.  call temp:= `a`(v2, v3, v4) @signature `Ld/s;.a:(Ld/c;J)J` @kind interface;
  #L3d78c8.  v2:= temp @kind wide;
  #L3d78ca.  v4:= lcmp(v2, v7);
  #L3d78ce.  if v4 != 0 then goto L3d78d4;
  #L3d78d2.  goto L3d78de;
  #L3d78d4.  call temp:= `max`(v11, v0) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L3d78da.  v11:= temp @kind wide;
  #L3d78dc.  goto L3d787e;
  #L3d78de.  return v7 @kind wide;
  #L3d78e0.  return v7 @kind wide;
  #L3d78e2.  v10:= new `java.lang.IllegalArgumentException`;
  #L3d78e6.  v0:= "fromIndex=%s toIndex=%s" @kind object;
  #L3d78ea.  v1:= 2I;
  #L3d78ec.  v1:= new `java.lang.Object`[v1];
  #L3d78f0.  v2:= 0I;
  #L3d78f2.  call temp:= `valueOf`(v11) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L3d78f8.  v11:= temp @kind object;
  #L3d78fa.  v1[v2]:= v11 @kind object;
  #L3d78fe.  v11:= 1I;
  #L3d7900.  call temp:= `valueOf`(v13) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L3d7906.  v12:= temp @kind object;
  #L3d7908.  v1[v11]:= v12 @kind object;
  #L3d790c.  call temp:= `format`(v0, v1) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L3d7912.  v11:= temp @kind object;
  #L3d7914.  call `<init>`(v10, v11) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d791a.  throw v10;
}
procedure `long` `a`(`d.n` v5 @kind this, `d.c` v6 @kind object, `long` v7 ) @signature `Ld/n;.a:(Ld/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3d792c.  if v6 != 0 then goto L3d7940;
  #L3d7930.  v6:= new `java.lang.IllegalArgumentException`;
  #L3d7934.  v7:= "sink == null" @kind object;
  #L3d7938.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d793e.  throw v6;
  #L3d7940.  v0:= 0L;
  #L3d7944.  v2:= lcmp(v7, v0);
  #L3d7948.  if v2 >= 0 then goto L3d797a;
  #L3d794c.  v6:= new `java.lang.IllegalArgumentException`;
  #L3d7950.  v0:= new `java.lang.StringBuilder`;
  #L3d7954.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d795a.  v1:= "byteCount < 0: " @kind object;
  #L3d795e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d7964.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d796a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d7970.  v7:= temp @kind object;
  #L3d7972.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d7978.  throw v6;
  #L3d797a.  v2:= v5.`d.n.c` @type ^`boolean` @kind boolean;
  #L3d797e.  if v2 == 0 then goto L3d7992;
  #L3d7982.  v6:= new `java.lang.IllegalStateException`;
  #L3d7986.  v7:= "closed" @kind object;
  #L3d798a.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d7990.  throw v6;
  #L3d7992.  v2:= v5.`d.n.a` @type ^`d.c` @kind object;
  #L3d7996.  v2:= v2.`d.c.b` @type ^`long` @kind wide;
  #L3d799a.  v4:= lcmp(v2, v0);
  #L3d799e.  if v4 != 0 then goto L3d79c4;
  #L3d79a2.  v0:= v5.`d.n.b` @type ^`d.s` @kind object;
  #L3d79a6.  v1:= v5.`d.n.a` @type ^`d.c` @kind object;
  #L3d79aa.  v2:= 8192L;
  #L3d79ae.  call temp:= `a`(v0, v1, v2) @signature `Ld/s;.a:(Ld/c;J)J` @kind interface;
  #L3d79b4.  v0:= temp @kind wide;
  #L3d79b6.  v2:= -1L;
  #L3d79ba.  v4:= lcmp(v0, v2);
  #L3d79be.  if v4 != 0 then goto L3d79c4;
  #L3d79c2.  return v2 @kind wide;
  #L3d79c4.  v0:= v5.`d.n.a` @type ^`d.c` @kind object;
  #L3d79c8.  v0:= v0.`d.c.b` @type ^`long` @kind wide;
  #L3d79cc.  call temp:= `min`(v7, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3d79d2.  v7:= temp @kind wide;
  #L3d79d4.  v0:= v5.`d.n.a` @type ^`d.c` @kind object;
  #L3d79d8.  call temp:= `a`(v0, v6, v7) @signature `Ld/c;.a:(Ld/c;J)J` @kind virtual;
  #L3d79de.  v6:= temp @kind wide;
  #L3d79e0.  return v6 @kind wide;
}
procedure `d.t` `a`(`d.n` v1 @kind this) @signature `Ld/n;.a:()Ld/t;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d7560.  v0:= v1.`d.n.b` @type ^`d.s` @kind object;
  #L3d7564.  call temp:= `a`(v0) @signature `Ld/s;.a:()Ld/t;` @kind interface;
  #L3d756a.  v0:= temp @kind object;
  #L3d756c.  return v0 @kind object;
}
procedure `void` `a`(`d.n` v0 @kind this, `long` v1 ) @signature `Ld/n;.a:(J)V` @AccessFlag PUBLIC {
    temp;

  #L3d7bb0.  call temp:= `b`(v0, v1) @signature `Ld/n;.b:(J)Z` @kind virtual;
  #L3d7bb6.  v1:= temp;
  #L3d7bb8.  if v1 != 0 then goto L3d7bc8;
  #L3d7bbc.  v1:= new `java.io.EOFException`;
  #L3d7bc0.  call `<init>`(v1) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L3d7bc6.  throw v1;
  #L3d7bc8.  return @kind void;
}
procedure `void` `a`(`d.n` v7 @kind this, `byte`[] v8 @kind object) @signature `Ld/n;.a:([B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3d7b34.  v0:= length @variable v8;
  #L3d7b36.  v0:= (`long`) v0 @kind i2l;
  #L3d7b38.  call `a`(v7, v0) @signature `Ld/n;.a:(J)V` @kind virtual;
  #L3d7b3e.  v0:= v7.`d.n.a` @type ^`d.c` @kind object;
  #L3d7b42.  call `a`(v0, v8) @signature `Ld/c;.a:([B)V` @kind virtual;
  #L3d7b48.  return @kind void;
  #L3d7b4a.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L3d7b4c.  v1:= 0I;
  #L3d7b4e.  v2:= v7.`d.n.a` @type ^`d.c` @kind object;
  #L3d7b52.  v2:= v2.`d.c.b` @type ^`long` @kind wide;
  #L3d7b56.  v4:= 0L;
  #L3d7b5a.  v6:= lcmp(v2, v4);
  #L3d7b5e.  if v6 <= 0 then goto L3d7b8e;
  #L3d7b62.  v2:= v7.`d.n.a` @type ^`d.c` @kind object;
  #L3d7b66.  v3:= v7.`d.n.a` @type ^`d.c` @kind object;
  #L3d7b6a.  v3:= v3.`d.c.b` @type ^`long` @kind wide;
  #L3d7b6e.  v3:= (`int`) v3 @kind l2i;
  #L3d7b70.  call temp:= `a`(v2, v8, v1, v3) @signature `Ld/c;.a:([BII)I` @kind virtual;
  #L3d7b76.  v2:= temp;
  #L3d7b78.  v3:= -1I;
  #L3d7b7a.  if v2 != v3 then goto L3d7b8a;
  #L3d7b7e.  v8:= new `java.lang.AssertionError`;
  #L3d7b82.  call `<init>`(v8) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L3d7b88.  throw v8;
  #L3d7b8a.  v1:= v1 + v2 @kind int;
  #L3d7b8c.  goto L3d7b4e;
  #L3d7b8e.  throw v0;
  catch `java.io.EOFException` @[L3d7b34..L3d7b3e] goto L3d7b4a;
}
procedure `boolean` `b`(`d.n` v5 @kind this, `long` v6 ) @signature `Ld/n;.b:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3d7394.  v0:= 0L;
  #L3d7398.  v2:= lcmp(v6, v0);
  #L3d739c.  if v2 >= 0 then goto L3d73ce;
  #L3d73a0.  v0:= new `java.lang.IllegalArgumentException`;
  #L3d73a4.  v1:= new `java.lang.StringBuilder`;
  #L3d73a8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d73ae.  v2:= "byteCount < 0: " @kind object;
  #L3d73b2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d73b8.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d73be.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d73c4.  v6:= temp @kind object;
  #L3d73c6.  call `<init>`(v0, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d73cc.  throw v0;
  #L3d73ce.  v0:= v5.`d.n.c` @type ^`boolean` @kind boolean;
  #L3d73d2.  if v0 == 0 then goto L3d73e6;
  #L3d73d6.  v6:= new `java.lang.IllegalStateException`;
  #L3d73da.  v7:= "closed" @kind object;
  #L3d73de.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d73e4.  throw v6;
  #L3d73e6.  v0:= v5.`d.n.a` @type ^`d.c` @kind object;
  #L3d73ea.  v0:= v0.`d.c.b` @type ^`long` @kind wide;
  #L3d73ee.  v2:= lcmp(v0, v6);
  #L3d73f2.  if v2 >= 0 then goto L3d741a;
  #L3d73f6.  v0:= v5.`d.n.b` @type ^`d.s` @kind object;
  #L3d73fa.  v1:= v5.`d.n.a` @type ^`d.c` @kind object;
  #L3d73fe.  v2:= 8192L;
  #L3d7402.  call temp:= `a`(v0, v1, v2) @signature `Ld/s;.a:(Ld/c;J)J` @kind interface;
  #L3d7408.  v0:= temp @kind wide;
  #L3d740a.  v2:= -1L;
  #L3d740e.  v4:= lcmp(v0, v2);
  #L3d7412.  if v4 != 0 then goto L3d73e6;
  #L3d7416.  v6:= 0I;
  #L3d7418.  return v6;
  #L3d741a.  v6:= 1I;
  #L3d741c.  return v6;
}
procedure `d.c` `c`(`d.n` v1 @kind this) @signature `Ld/n;.c:()Ld/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d7524.  v0:= v1.`d.n.a` @type ^`d.c` @kind object;
  #L3d7528.  return v0 @kind object;
}
procedure `d.f` `c`(`d.n` v1 @kind this, `long` v2 ) @signature `Ld/n;.c:(J)Ld/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d753c.  call `a`(v1, v2) @signature `Ld/n;.a:(J)V` @kind virtual;
  #L3d7542.  v0:= v1.`d.n.a` @type ^`d.c` @kind object;
  #L3d7546.  call temp:= `c`(v0, v2) @signature `Ld/c;.c:(J)Ld/f;` @kind virtual;
  #L3d754c.  v2:= temp @kind object;
  #L3d754e.  return v2 @kind object;
}
procedure `void` `close`(`d.n` v1 @kind this) @signature `Ld/n;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d7bdc.  v0:= v1.`d.n.c` @type ^`boolean` @kind boolean;
  #L3d7be0.  if v0 == 0 then goto L3d7be6;
  #L3d7be4.  return @kind void;
  #L3d7be6.  v0:= 1I;
  #L3d7be8.  v1.`d.n.c` @type ^`boolean` := v0 @kind boolean;
  #L3d7bec.  v0:= v1.`d.n.b` @type ^`d.s` @kind object;
  #L3d7bf0.  call `close`(v0) @signature `Ld/s;.close:()V` @kind interface;
  #L3d7bf6.  v0:= v1.`d.n.a` @type ^`d.c` @kind object;
  #L3d7bfa.  call `q`(v0) @signature `Ld/c;.q:()V` @kind virtual;
  #L3d7c00.  return @kind void;
}
procedure `java.lang.String` `e`(`d.n` v13 @kind this, `long` v14 ) @signature `Ld/n;.e:(J)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L3d7628.  v0:= 0L;
  #L3d762c.  v2:= lcmp(v14, v0);
  #L3d7630.  if v2 >= 0 then goto L3d7662;
  #L3d7634.  v0:= new `java.lang.IllegalArgumentException`;
  #L3d7638.  v1:= new `java.lang.StringBuilder`;
  #L3d763c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d7642.  v2:= "limit < 0: " @kind object;
  #L3d7646.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d764c.  call temp:= `append`(v1, v14) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d7652.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d7658.  v14:= temp @kind object;
  #L3d765a.  call `<init>`(v0, v14) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d7660.  throw v0;
  #L3d7662.  v0:= 9223372036854775807L;
  #L3d766c.  v2:= lcmp(v14, v0);
  #L3d7670.  v3:= 1L;
  #L3d7674.  if v2 != 0 then goto L3d767c;
  #L3d7678.  v5:= v0 @kind wide;
  #L3d767a.  goto L3d7682;
  #L3d767c.  v2:= 0I;
  #L3d767e.  v5:= v14 + v3 @kind long;
  #L3d7682.  v8:= 10I;
  #L3d7686.  v9:= 0L;
  #L3d768a.  v7:= v13 @kind object;
  #L3d768c.  v11:= v5 @kind wide;
  #L3d768e.  call temp:= `a`(v7, v8, v9, v11) @signature `Ld/n;.a:(BJJ)J` @kind virtual;
  #L3d7694.  v7:= temp @kind wide;
  #L3d7696.  v9:= -1L;
  #L3d769a.  v2:= lcmp(v7, v9);
  #L3d769e.  if v2 == 0 then goto L3d76b0;
  #L3d76a2.  v14:= v13.`d.n.a` @type ^`d.c` @kind object;
  #L3d76a6.  call temp:= `f`(v14, v7) @signature `Ld/c;.f:(J)Ljava/lang/String;` @kind virtual;
  #L3d76ac.  v14:= temp @kind object;
  #L3d76ae.  return v14 @kind object;
  #L3d76b0.  v2:= lcmp(v5, v0);
  #L3d76b4.  if v2 >= 0 then goto L3d770e;
  #L3d76b8.  call temp:= `b`(v13, v5) @signature `Ld/n;.b:(J)Z` @kind virtual;
  #L3d76be.  v0:= temp;
  #L3d76c0.  if v0 == 0 then goto L3d770e;
  #L3d76c4.  v0:= v13.`d.n.a` @type ^`d.c` @kind object;
  #L3d76c8.  v1:= v5 - v3 @kind long;
  #L3d76cc.  call temp:= `b`(v0, v1) @signature `Ld/c;.b:(J)B` @kind virtual;
  #L3d76d2.  v0:= temp;
  #L3d76d4.  v1:= 13I;
  #L3d76d8.  if v0 != v1 then goto L3d770e;
  #L3d76dc.  v0:= v5 + v3 @kind long;
  #L3d76e0.  call temp:= `b`(v13, v0) @signature `Ld/n;.b:(J)Z` @kind virtual;
  #L3d76e6.  v0:= temp;
  #L3d76e8.  if v0 == 0 then goto L3d770e;
  #L3d76ec.  v0:= v13.`d.n.a` @type ^`d.c` @kind object;
  #L3d76f0.  call temp:= `b`(v0, v5) @signature `Ld/c;.b:(J)B` @kind virtual;
  #L3d76f6.  v0:= temp;
  #L3d76f8.  v1:= 10I;
  #L3d76fc.  if v0 != v1 then goto L3d770e;
  #L3d7700.  v14:= v13.`d.n.a` @type ^`d.c` @kind object;
  #L3d7704.  call temp:= `f`(v14, v5) @signature `Ld/c;.f:(J)Ljava/lang/String;` @kind virtual;
  #L3d770a.  v14:= temp @kind object;
  #L3d770c.  return v14 @kind object;
  #L3d770e.  v6:= new `d.c`;
  #L3d7712.  call `<init>`(v6) @signature `Ld/c;.<init>:()V` @kind direct;
  #L3d7718.  v0:= v13.`d.n.a` @type ^`d.c` @kind object;
  #L3d771c.  v2:= 0L;
  #L3d7720.  v4:= 32L;
  #L3d7724.  v1:= v13.`d.n.a` @type ^`d.c` @kind object;
  #L3d7728.  call temp:= `b`(v1) @signature `Ld/c;.b:()J` @kind virtual;
  #L3d772e.  v7:= temp @kind wide;
  #L3d7730.  call temp:= `min`(v4, v7) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3d7736.  v4:= temp @kind wide;
  #L3d7738.  v1:= v6 @kind object;
  #L3d773a.  call temp:= `a`(v0, v1, v2, v4) @signature `Ld/c;.a:(Ld/c;JJ)Ld/c;` @kind virtual;
  #L3d7740.  v0:= new `java.io.EOFException`;
  #L3d7744.  v1:= new `java.lang.StringBuilder`;
  #L3d7748.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d774e.  v2:= "\\n not found: limit=" @kind object;
  #L3d7752.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d7758.  v2:= v13.`d.n.a` @type ^`d.c` @kind object;
  #L3d775c.  call temp:= `b`(v2) @signature `Ld/c;.b:()J` @kind virtual;
  #L3d7762.  v2:= temp @kind wide;
  #L3d7764.  call temp:= `min`(v2, v14) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3d776a.  v14:= temp @kind wide;
  #L3d776c.  call temp:= `append`(v1, v14) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d7772.  v14:= " content=" @kind object;
  #L3d7776.  call temp:= `append`(v1, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d777c.  call temp:= `m`(v6) @signature `Ld/c;.m:()Ld/f;` @kind virtual;
  #L3d7782.  v14:= temp @kind object;
  #L3d7784.  call temp:= `e`(v14) @signature `Ld/f;.e:()Ljava/lang/String;` @kind virtual;
  #L3d778a.  v14:= temp @kind object;
  #L3d778c.  call temp:= `append`(v1, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d7792.  v14:= 8230I;
  #L3d7796.  call temp:= `append`(v1, v14) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d779c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d77a2.  v14:= temp @kind object;
  #L3d77a4.  call `<init>`(v0, v14) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d77aa.  throw v0;
}
procedure `boolean` `e`(`d.n` v5 @kind this) @signature `Ld/n;.e:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3d7430.  v0:= v5.`d.n.c` @type ^`boolean` @kind boolean;
  #L3d7434.  if v0 == 0 then goto L3d7448;
  #L3d7438.  v0:= new `java.lang.IllegalStateException`;
  #L3d743c.  v1:= "closed" @kind object;
  #L3d7440.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d7446.  throw v0;
  #L3d7448.  v0:= v5.`d.n.a` @type ^`d.c` @kind object;
  #L3d744c.  call temp:= `e`(v0) @signature `Ld/c;.e:()Z` @kind virtual;
  #L3d7452.  v0:= temp;
  #L3d7454.  if v0 == 0 then goto L3d747c;
  #L3d7458.  v0:= v5.`d.n.b` @type ^`d.s` @kind object;
  #L3d745c.  v1:= v5.`d.n.a` @type ^`d.c` @kind object;
  #L3d7460.  v2:= 8192L;
  #L3d7464.  call temp:= `a`(v0, v1, v2) @signature `Ld/s;.a:(Ld/c;J)J` @kind interface;
  #L3d746a.  v0:= temp @kind wide;
  #L3d746c.  v2:= -1L;
  #L3d7470.  v4:= lcmp(v0, v2);
  #L3d7474.  if v4 != 0 then goto L3d747c;
  #L3d7478.  v0:= 1I;
  #L3d747a.  goto L3d747e;
  #L3d747c.  v0:= 0I;
  #L3d747e.  return v0;
}
procedure `byte` `g`(`d.n` v2 @kind this) @signature `Ld/n;.g:()B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3d74ac.  v0:= 1L;
  #L3d74b0.  call `a`(v2, v0) @signature `Ld/n;.a:(J)V` @kind virtual;
  #L3d74b6.  v0:= v2.`d.n.a` @type ^`d.c` @kind object;
  #L3d74ba.  call temp:= `g`(v0) @signature `Ld/c;.g:()B` @kind virtual;
  #L3d74c0.  v0:= temp;
  #L3d74c2.  return v0;
}
procedure `byte`[] `g`(`d.n` v1 @kind this, `long` v2 ) @signature `Ld/n;.g:(J)[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d74d4.  call `a`(v1, v2) @signature `Ld/n;.a:(J)V` @kind virtual;
  #L3d74da.  v0:= v1.`d.n.a` @type ^`d.c` @kind object;
  #L3d74de.  call temp:= `g`(v0, v2) @signature `Ld/c;.g:(J)[B` @kind virtual;
  #L3d74e4.  v2:= temp @kind object;
  #L3d74e6.  return v2 @kind object;
}
procedure `short` `h`(`d.n` v2 @kind this) @signature `Ld/n;.h:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3d7aa4.  v0:= 2L;
  #L3d7aa8.  call `a`(v2, v0) @signature `Ld/n;.a:(J)V` @kind virtual;
  #L3d7aae.  v0:= v2.`d.n.a` @type ^`d.c` @kind object;
  #L3d7ab2.  call temp:= `h`(v0) @signature `Ld/c;.h:()S` @kind virtual;
  #L3d7ab8.  v0:= temp;
  #L3d7aba.  return v0;
}
procedure `void` `h`(`d.n` v5 @kind this, `long` v6 ) @signature `Ld/n;.h:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3d7c14.  v0:= v5.`d.n.c` @type ^`boolean` @kind boolean;
  #L3d7c18.  if v0 == 0 then goto L3d7c2c;
  #L3d7c1c.  v6:= new `java.lang.IllegalStateException`;
  #L3d7c20.  v7:= "closed" @kind object;
  #L3d7c24.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d7c2a.  throw v6;
  #L3d7c2c.  v0:= 0L;
  #L3d7c30.  v2:= lcmp(v6, v0);
  #L3d7c34.  if v2 <= 0 then goto L3d7c9a;
  #L3d7c38.  v2:= v5.`d.n.a` @type ^`d.c` @kind object;
  #L3d7c3c.  v2:= v2.`d.c.b` @type ^`long` @kind wide;
  #L3d7c40.  v4:= lcmp(v2, v0);
  #L3d7c44.  if v4 != 0 then goto L3d7c74;
  #L3d7c48.  v0:= v5.`d.n.b` @type ^`d.s` @kind object;
  #L3d7c4c.  v1:= v5.`d.n.a` @type ^`d.c` @kind object;
  #L3d7c50.  v2:= 8192L;
  #L3d7c54.  call temp:= `a`(v0, v1, v2) @signature `Ld/s;.a:(Ld/c;J)J` @kind interface;
  #L3d7c5a.  v0:= temp @kind wide;
  #L3d7c5c.  v2:= -1L;
  #L3d7c60.  v4:= lcmp(v0, v2);
  #L3d7c64.  if v4 != 0 then goto L3d7c74;
  #L3d7c68.  v6:= new `java.io.EOFException`;
  #L3d7c6c.  call `<init>`(v6) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L3d7c72.  throw v6;
  #L3d7c74.  v0:= v5.`d.n.a` @type ^`d.c` @kind object;
  #L3d7c78.  call temp:= `b`(v0) @signature `Ld/c;.b:()J` @kind virtual;
  #L3d7c7e.  v0:= temp @kind wide;
  #L3d7c80.  call temp:= `min`(v6, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3d7c86.  v0:= temp @kind wide;
  #L3d7c88.  v2:= v5.`d.n.a` @type ^`d.c` @kind object;
  #L3d7c8c.  call `h`(v2, v0) @signature `Ld/c;.h:(J)V` @kind virtual;
  #L3d7c92.  v2:= v6 - v0 @kind long;
  #L3d7c96.  v6:= v2 @kind wide;
  #L3d7c98.  goto L3d7c2c;
  #L3d7c9a.  return @kind void;
}
procedure `int` `i`(`d.n` v2 @kind this) @signature `Ld/n;.i:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3d7580.  v0:= 4L;
  #L3d7584.  call `a`(v2, v0) @signature `Ld/n;.a:(J)V` @kind virtual;
  #L3d758a.  v0:= v2.`d.n.a` @type ^`d.c` @kind object;
  #L3d758e.  call temp:= `i`(v0) @signature `Ld/c;.i:()I` @kind virtual;
  #L3d7594.  v0:= temp;
  #L3d7596.  return v0;
}
procedure `boolean` `isOpen`(`d.n` v1 @kind this) @signature `Ld/n;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d7490.  v0:= v1.`d.n.c` @type ^`boolean` @kind boolean;
  #L3d7494.  v0:= v0 ^~ 1;
  #L3d7498.  return v0;
}
procedure `short` `j`(`d.n` v2 @kind this) @signature `Ld/n;.j:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3d7acc.  v0:= 2L;
  #L3d7ad0.  call `a`(v2, v0) @signature `Ld/n;.a:(J)V` @kind virtual;
  #L3d7ad6.  v0:= v2.`d.n.a` @type ^`d.c` @kind object;
  #L3d7ada.  call temp:= `j`(v0) @signature `Ld/c;.j:()S` @kind virtual;
  #L3d7ae0.  v0:= temp;
  #L3d7ae2.  return v0;
}
procedure `int` `k`(`d.n` v2 @kind this) @signature `Ld/n;.k:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3d75a8.  v0:= 4L;
  #L3d75ac.  call `a`(v2, v0) @signature `Ld/n;.a:(J)V` @kind virtual;
  #L3d75b2.  v0:= v2.`d.n.a` @type ^`d.c` @kind object;
  #L3d75b6.  call temp:= `k`(v0) @signature `Ld/c;.k:()I` @kind virtual;
  #L3d75bc.  v0:= temp;
  #L3d75be.  return v0;
}
procedure `long` `l`(`d.n` v6 @kind this) @signature `Ld/n;.l:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d79f4.  v0:= 1L;
  #L3d79f8.  call `a`(v6, v0) @signature `Ld/n;.a:(J)V` @kind virtual;
  #L3d79fe.  v0:= 0I;
  #L3d7a00.  v1:= 0I;
  #L3d7a02.  v2:= v1 + 1;
  #L3d7a06.  v3:= (`long`) v2 @kind i2l;
  #L3d7a08.  call temp:= `b`(v6, v3) @signature `Ld/n;.b:(J)Z` @kind virtual;
  #L3d7a0e.  v3:= temp;
  #L3d7a10.  if v3 == 0 then goto L3d7a86;
  #L3d7a14.  v3:= v6.`d.n.a` @type ^`d.c` @kind object;
  #L3d7a18.  v4:= (`long`) v1 @kind i2l;
  #L3d7a1a.  call temp:= `b`(v3, v4) @signature `Ld/c;.b:(J)B` @kind virtual;
  #L3d7a20.  v3:= temp;
  #L3d7a22.  v4:= 48I;
  #L3d7a26.  if v3 < v4 then goto L3d7a32;
  #L3d7a2a.  v4:= 57I;
  #L3d7a2e.  if v3 <= v4 then goto L3d7a54;
  #L3d7a32.  v4:= 97I;
  #L3d7a36.  if v3 < v4 then goto L3d7a42;
  #L3d7a3a.  v4:= 102I;
  #L3d7a3e.  if v3 <= v4 then goto L3d7a54;
  #L3d7a42.  v4:= 65I;
  #L3d7a46.  if v3 < v4 then goto L3d7a58;
  #L3d7a4a.  v4:= 70I;
  #L3d7a4e.  if v3 <= v4 then goto L3d7a54;
  #L3d7a52.  goto L3d7a58;
  #L3d7a54.  v1:= v2;
  #L3d7a56.  goto L3d7a02;
  #L3d7a58.  if v1 != 0 then goto L3d7a86;
  #L3d7a5c.  v1:= new `java.lang.NumberFormatException`;
  #L3d7a60.  v2:= "Expected leading [0-9a-fA-F] character but was %#x" @kind object;
  #L3d7a64.  v4:= 1I;
  #L3d7a66.  v4:= new `java.lang.Object`[v4];
  #L3d7a6a.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Byte;.valueOf:(B)Ljava/lang/Byte;` @kind static;
  #L3d7a70.  v3:= temp @kind object;
  #L3d7a72.  v4[v0]:= v3 @kind object;
  #L3d7a76.  call temp:= `format`(v2, v4) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L3d7a7c.  v0:= temp @kind object;
  #L3d7a7e.  call `<init>`(v1, v0) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d7a84.  throw v1;
  #L3d7a86.  v0:= v6.`d.n.a` @type ^`d.c` @kind object;
  #L3d7a8a.  call temp:= `l`(v0) @signature `Ld/c;.l:()J` @kind virtual;
  #L3d7a90.  v0:= temp @kind wide;
  #L3d7a92.  return v0 @kind wide;
}
procedure `java.lang.String` `o`(`d.n` v2 @kind this) @signature `Ld/n;.o:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3d77bc.  v0:= 9223372036854775807L;
  #L3d77c6.  call temp:= `e`(v2, v0) @signature `Ld/n;.e:(J)Ljava/lang/String;` @kind virtual;
  #L3d77cc.  v0:= temp @kind object;
  #L3d77ce.  return v0 @kind object;
}
procedure `byte`[] `p`(`d.n` v2 @kind this) @signature `Ld/n;.p:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3d74f8.  v0:= v2.`d.n.a` @type ^`d.c` @kind object;
  #L3d74fc.  v1:= v2.`d.n.b` @type ^`d.s` @kind object;
  #L3d7500.  call temp:= `a`(v0, v1) @signature `Ld/c;.a:(Ld/s;)J` @kind virtual;
  #L3d7506.  v0:= v2.`d.n.a` @type ^`d.c` @kind object;
  #L3d750a.  call temp:= `p`(v0) @signature `Ld/c;.p:()[B` @kind virtual;
  #L3d7510.  v0:= temp @kind object;
  #L3d7512.  return v0 @kind object;
}
procedure `int` `read`(`d.n` v5 @kind this, `java.nio.ByteBuffer` v6 @kind object) @signature `Ld/n;.read:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3d75d0.  v0:= v5.`d.n.a` @type ^`d.c` @kind object;
  #L3d75d4.  v0:= v0.`d.c.b` @type ^`long` @kind wide;
  #L3d75d8.  v2:= 0L;
  #L3d75dc.  v4:= lcmp(v0, v2);
  #L3d75e0.  if v4 != 0 then goto L3d7608;
  #L3d75e4.  v0:= v5.`d.n.b` @type ^`d.s` @kind object;
  #L3d75e8.  v1:= v5.`d.n.a` @type ^`d.c` @kind object;
  #L3d75ec.  v2:= 8192L;
  #L3d75f0.  call temp:= `a`(v0, v1, v2) @signature `Ld/s;.a:(Ld/c;J)J` @kind interface;
  #L3d75f6.  v0:= temp @kind wide;
  #L3d75f8.  v2:= -1L;
  #L3d75fc.  v4:= lcmp(v0, v2);
  #L3d7600.  if v4 != 0 then goto L3d7608;
  #L3d7604.  v6:= -1I;
  #L3d7606.  return v6;
  #L3d7608.  v0:= v5.`d.n.a` @type ^`d.c` @kind object;
  #L3d760c.  call temp:= `read`(v0, v6) @signature `Ld/c;.read:(Ljava/nio/ByteBuffer;)I` @kind virtual;
  #L3d7612.  v6:= temp;
  #L3d7614.  return v6;
}
procedure `java.lang.String` `toString`(`d.n` v2 @kind this) @signature `Ld/n;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3d77e0.  v0:= new `java.lang.StringBuilder`;
  #L3d77e4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d77ea.  v1:= "buffer(" @kind object;
  #L3d77ee.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d77f4.  v1:= v2.`d.n.b` @type ^`d.s` @kind object;
  #L3d77f8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d77fe.  v1:= ")" @kind object;
  #L3d7802.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d7808.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d780e.  v0:= temp @kind object;
  #L3d7810.  return v0 @kind object;
}
