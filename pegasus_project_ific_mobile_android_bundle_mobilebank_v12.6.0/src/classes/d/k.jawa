record `d.k` @kind class @AccessFlag PUBLIC_FINAL extends `d.s` @kind interface {
  `d.e` `d.k.a` @AccessFlag PRIVATE_FINAL;
  `java.util.zip.Inflater` `d.k.b` @AccessFlag PRIVATE_FINAL;
  `int` `d.k.c` @AccessFlag PRIVATE;
  `boolean` `d.k.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`d.k` v0 @kind this, `d.e` v1 @kind object, `java.util.zip.Inflater` v2 @kind object) @signature `Ld/k;.<init>:(Ld/e;Ljava/util/zip/Inflater;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3d6848.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3d684e.  if v1 != 0 then goto L3d6862;
  #L3d6852.  v1:= new `java.lang.IllegalArgumentException`;
  #L3d6856.  v2:= "source == null" @kind object;
  #L3d685a.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d6860.  throw v1;
  #L3d6862.  if v2 != 0 then goto L3d6876;
  #L3d6866.  v1:= new `java.lang.IllegalArgumentException`;
  #L3d686a.  v2:= "inflater == null" @kind object;
  #L3d686e.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d6874.  throw v1;
  #L3d6876.  v0.`d.k.a` @type ^`d.e` := v1 @kind object;
  #L3d687a.  v0.`d.k.b` @type ^`java.util.zip.Inflater` := v2 @kind object;
  #L3d687e.  return @kind void;
}
procedure `void` `c`(`d.k` v4 @kind this) @signature `Ld/k;.c:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3d6890.  v0:= v4.`d.k.c` @type ^`int`;
  #L3d6894.  if v0 != 0 then goto L3d689a;
  #L3d6898.  return @kind void;
  #L3d689a.  v0:= v4.`d.k.c` @type ^`int`;
  #L3d689e.  v1:= v4.`d.k.b` @type ^`java.util.zip.Inflater` @kind object;
  #L3d68a2.  call temp:= `getRemaining`(v1) @signature `Ljava/util/zip/Inflater;.getRemaining:()I` @kind virtual;
  #L3d68a8.  v1:= temp;
  #L3d68aa.  v0:= v0 - v1 @kind int;
  #L3d68ac.  v1:= v4.`d.k.c` @type ^`int`;
  #L3d68b0.  v1:= v1 - v0 @kind int;
  #L3d68b2.  v4.`d.k.c` @type ^`int` := v1;
  #L3d68b6.  v1:= v4.`d.k.a` @type ^`d.e` @kind object;
  #L3d68ba.  v2:= (`long`) v0 @kind i2l;
  #L3d68bc.  call `h`(v1, v2) @signature `Ld/e;.h:(J)V` @kind interface;
  #L3d68c2.  return @kind void;
}
procedure `long` `a`(`d.k` v6 @kind this, `d.c` v7 @kind object, `long` v8 ) @signature `Ld/k;.a:(Ld/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d6704.  v0:= 0L;
  #L3d6708.  v2:= lcmp(v8, v0);
  #L3d670c.  if v2 >= 0 then goto L3d673e;
  #L3d6710.  v7:= new `java.lang.IllegalArgumentException`;
  #L3d6714.  v0:= new `java.lang.StringBuilder`;
  #L3d6718.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d671e.  v1:= "byteCount < 0: " @kind object;
  #L3d6722.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d6728.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d672e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d6734.  v8:= temp @kind object;
  #L3d6736.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d673c.  throw v7;
  #L3d673e.  v2:= v6.`d.k.d` @type ^`boolean` @kind boolean;
  #L3d6742.  if v2 == 0 then goto L3d6756;
  #L3d6746.  v7:= new `java.lang.IllegalStateException`;
  #L3d674a.  v8:= "closed" @kind object;
  #L3d674e.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d6754.  throw v7;
  #L3d6756.  v2:= lcmp(v8, v0);
  #L3d675a.  if v2 != 0 then goto L3d6760;
  #L3d675e.  return v0 @kind wide;
  #L3d6760.  call temp:= `b`(v6) @signature `Ld/k;.b:()Z` @kind virtual;
  #L3d6766.  v0:= temp;
  #L3d6768.  v1:= 1I;
  #L3d676a.  call temp:= `e`(v7, v1) @signature `Ld/c;.e:(I)Ld/o;` @kind virtual;
  #L3d6770.  v1:= temp @kind object;
  #L3d6772.  v2:= v1.`d.o.c` @type ^`int`;
  #L3d6776.  v2:= v2 - 8192;
  #L3d677a.  v2:= (`long`) v2 @kind i2l;
  #L3d677c.  call temp:= `min`(v8, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3d6782.  v2:= temp @kind wide;
  #L3d6784.  v2:= (`int`) v2 @kind l2i;
  #L3d6786.  v3:= v6.`d.k.b` @type ^`java.util.zip.Inflater` @kind object;
  #L3d678a.  v4:= v1.`d.o.a` @type ^`byte`[] @kind object;
  #L3d678e.  v5:= v1.`d.o.c` @type ^`int`;
  #L3d6792.  call temp:= `inflate`(v3, v4, v5, v2) @signature `Ljava/util/zip/Inflater;.inflate:([BII)I` @kind virtual;
  #L3d6798.  v2:= temp;
  #L3d679a.  if v2 <= 0 then goto L3d67b8;
  #L3d679e.  v8:= v1.`d.o.c` @type ^`int`;
  #L3d67a2.  v8:= v8 + v2 @kind int;
  #L3d67a4.  v1.`d.o.c` @type ^`int` := v8;
  #L3d67a8.  v8:= v7.`d.c.b` @type ^`long` @kind wide;
  #L3d67ac.  v0:= (`long`) v2 @kind i2l;
  #L3d67ae.  v2:= v8 + v0 @kind long;
  #L3d67b2.  v7.`d.c.b` @type ^`long` := v2 @kind wide;
  #L3d67b6.  return v0 @kind wide;
  #L3d67b8.  v2:= v6.`d.k.b` @type ^`java.util.zip.Inflater` @kind object;
  #L3d67bc.  call temp:= `finished`(v2) @signature `Ljava/util/zip/Inflater;.finished:()Z` @kind virtual;
  #L3d67c2.  v2:= temp;
  #L3d67c4.  if v2 != 0 then goto L3d67ee;
  #L3d67c8.  v2:= v6.`d.k.b` @type ^`java.util.zip.Inflater` @kind object;
  #L3d67cc.  call temp:= `needsDictionary`(v2) @signature `Ljava/util/zip/Inflater;.needsDictionary:()Z` @kind virtual;
  #L3d67d2.  v2:= temp;
  #L3d67d4.  if v2 == 0 then goto L3d67da;
  #L3d67d8.  goto L3d67ee;
  #L3d67da.  if v0 == 0 then goto L3d6760;
  #L3d67de.  v7:= new `java.io.EOFException`;
  #L3d67e2.  v8:= "source exhausted prematurely" @kind object;
  #L3d67e6.  call `<init>`(v7, v8) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d67ec.  throw v7;
  #L3d67ee.  call `c`(v6) @signature `Ld/k;.c:()V` @kind direct;
  #L3d67f4.  v8:= v1.`d.o.b` @type ^`int`;
  #L3d67f8.  v9:= v1.`d.o.c` @type ^`int`;
  #L3d67fc.  if v8 != v9 then goto L3d6812;
  #L3d6800.  call temp:= `b`(v1) @signature `Ld/o;.b:()Ld/o;` @kind virtual;
  #L3d6806.  v8:= temp @kind object;
  #L3d6808.  v7.`d.c.a` @type ^`d.o` := v8 @kind object;
  #L3d680c.  call `a`(v1) @signature `Ld/p;.a:(Ld/o;)V` @kind static;
  #L3d6812.  v7:= -1L;
  #L3d6816.  return v7 @kind wide;
  #L3d6818.  v7:= Exception @type ^`java.util.zip.DataFormatException` @kind object;
  #L3d681a.  v8:= new `java.io.IOException`;
  #L3d681e.  call `<init>`(v8, v7) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L3d6824.  throw v8;
  catch `java.util.zip.DataFormatException` @[L3d676a..L3d6812] goto L3d6818;
}
procedure `d.t` `a`(`d.k` v1 @kind this) @signature `Ld/k;.a:()Ld/t;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d66e4.  v0:= v1.`d.k.a` @type ^`d.e` @kind object;
  #L3d66e8.  call temp:= `a`(v0) @signature `Ld/e;.a:()Ld/t;` @kind interface;
  #L3d66ee.  v0:= temp @kind object;
  #L3d66f0.  return v0 @kind object;
}
procedure `boolean` `b`(`d.k` v5 @kind this) @signature `Ld/k;.b:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3d6650.  v0:= v5.`d.k.b` @type ^`java.util.zip.Inflater` @kind object;
  #L3d6654.  call temp:= `needsInput`(v0) @signature `Ljava/util/zip/Inflater;.needsInput:()Z` @kind virtual;
  #L3d665a.  v0:= temp;
  #L3d665c.  v1:= 0I;
  #L3d665e.  if v0 != 0 then goto L3d6664;
  #L3d6662.  return v1;
  #L3d6664.  call `c`(v5) @signature `Ld/k;.c:()V` @kind direct;
  #L3d666a.  v0:= v5.`d.k.b` @type ^`java.util.zip.Inflater` @kind object;
  #L3d666e.  call temp:= `getRemaining`(v0) @signature `Ljava/util/zip/Inflater;.getRemaining:()I` @kind virtual;
  #L3d6674.  v0:= temp;
  #L3d6676.  if v0 == 0 then goto L3d668a;
  #L3d667a.  v0:= new `java.lang.IllegalStateException`;
  #L3d667e.  v1:= "?" @kind object;
  #L3d6682.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d6688.  throw v0;
  #L3d668a.  v0:= v5.`d.k.a` @type ^`d.e` @kind object;
  #L3d668e.  call temp:= `e`(v0) @signature `Ld/e;.e:()Z` @kind interface;
  #L3d6694.  v0:= temp;
  #L3d6696.  if v0 == 0 then goto L3d669e;
  #L3d669a.  v0:= 1I;
  #L3d669c.  return v0;
  #L3d669e.  v0:= v5.`d.k.a` @type ^`d.e` @kind object;
  #L3d66a2.  call temp:= `c`(v0) @signature `Ld/e;.c:()Ld/c;` @kind interface;
  #L3d66a8.  v0:= temp @kind object;
  #L3d66aa.  v0:= v0.`d.c.a` @type ^`d.o` @kind object;
  #L3d66ae.  v2:= v0.`d.o.c` @type ^`int`;
  #L3d66b2.  v3:= v0.`d.o.b` @type ^`int`;
  #L3d66b6.  v2:= v2 - v3 @kind int;
  #L3d66b8.  v5.`d.k.c` @type ^`int` := v2;
  #L3d66bc.  v2:= v5.`d.k.b` @type ^`java.util.zip.Inflater` @kind object;
  #L3d66c0.  v3:= v0.`d.o.a` @type ^`byte`[] @kind object;
  #L3d66c4.  v0:= v0.`d.o.b` @type ^`int`;
  #L3d66c8.  v4:= v5.`d.k.c` @type ^`int`;
  #L3d66cc.  call `setInput`(v2, v3, v0, v4) @signature `Ljava/util/zip/Inflater;.setInput:([BII)V` @kind virtual;
  #L3d66d2.  return v1;
}
procedure `void` `close`(`d.k` v1 @kind this) @signature `Ld/k;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d68d4.  v0:= v1.`d.k.d` @type ^`boolean` @kind boolean;
  #L3d68d8.  if v0 == 0 then goto L3d68de;
  #L3d68dc.  return @kind void;
  #L3d68de.  v0:= v1.`d.k.b` @type ^`java.util.zip.Inflater` @kind object;
  #L3d68e2.  call `end`(v0) @signature `Ljava/util/zip/Inflater;.end:()V` @kind virtual;
  #L3d68e8.  v0:= 1I;
  #L3d68ea.  v1.`d.k.d` @type ^`boolean` := v0 @kind boolean;
  #L3d68ee.  v0:= v1.`d.k.a` @type ^`d.e` @kind object;
  #L3d68f2.  call `close`(v0) @signature `Ld/e;.close:()V` @kind interface;
  #L3d68f8.  return @kind void;
}
