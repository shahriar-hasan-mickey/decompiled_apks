record `d.l` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.util.logging.Logger` `@@d.l.a` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ld/l;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3d6ee4.  v0:= constclass @type ^`d.l` @kind object;
  #L3d6ee8.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L3d6eee.  v0:= temp @kind object;
  #L3d6ef0.  call temp:= `getLogger`(v0) @signature `Ljava/util/logging/Logger;.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;` @kind static;
  #L3d6ef6.  v0:= temp @kind object;
  #L3d6ef8.  `@@d.l.a` @type ^`java.util.logging.Logger` := v0 @kind object;
  #L3d6efc.  return @kind void;
}
procedure `void` `<init>`(`d.l` v0 @kind this) @signature `Ld/l;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L3d6f10.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3d6f16.  return @kind void;
}
procedure `d.d` `a`(`d.r` v1 @kind object) @signature `Ld/l;.a:(Ld/r;)Ld/d;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d6d38.  v0:= new `d.m`;
  #L3d6d3c.  call `<init>`(v0, v1) @signature `Ld/m;.<init>:(Ld/r;)V` @kind direct;
  #L3d6d42.  return v0 @kind object;
}
procedure `d.e` `a`(`d.s` v1 @kind object) @signature `Ld/l;.a:(Ld/s;)Ld/e;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d6d54.  v0:= new `d.n`;
  #L3d6d58.  call `<init>`(v0, v1) @signature `Ld/n;.<init>:(Ld/s;)V` @kind direct;
  #L3d6d5e.  return v0 @kind object;
}
procedure `d.r` `a`(`java.io.OutputStream` v1 @kind object, `d.t` v2 @kind object) @signature `Ld/l;.a:(Ljava/io/OutputStream;Ld/t;)Ld/r;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L3d6d70.  if v1 != 0 then goto L3d6d84;
  #L3d6d74.  v1:= new `java.lang.IllegalArgumentException`;
  #L3d6d78.  v2:= "out == null" @kind object;
  #L3d6d7c.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d6d82.  throw v1;
  #L3d6d84.  if v2 != 0 then goto L3d6d98;
  #L3d6d88.  v1:= new `java.lang.IllegalArgumentException`;
  #L3d6d8c.  v2:= "timeout == null" @kind object;
  #L3d6d90.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d6d96.  throw v1;
  #L3d6d98.  v0:= new `d.l$1`;
  #L3d6d9c.  call `<init>`(v0, v2, v1) @signature `Ld/l$1;.<init>:(Ld/t;Ljava/io/OutputStream;)V` @kind direct;
  #L3d6da2.  return v0 @kind object;
}
procedure `d.r` `a`(`java.net.Socket` v1 @kind object) @signature `Ld/l;.a:(Ljava/net/Socket;)Ld/r;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d6db4.  if v1 != 0 then goto L3d6dc8;
  #L3d6db8.  v1:= new `java.lang.IllegalArgumentException`;
  #L3d6dbc.  v0:= "socket == null" @kind object;
  #L3d6dc0.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d6dc6.  throw v1;
  #L3d6dc8.  call temp:= `getOutputStream`(v1) @signature `Ljava/net/Socket;.getOutputStream:()Ljava/io/OutputStream;` @kind virtual;
  #L3d6dce.  v0:= temp @kind object;
  #L3d6dd0.  if v0 != 0 then goto L3d6de4;
  #L3d6dd4.  v1:= new `java.io.IOException`;
  #L3d6dd8.  v0:= "socket's output stream == null" @kind object;
  #L3d6ddc.  call `<init>`(v1, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d6de2.  throw v1;
  #L3d6de4.  call temp:= `c`(v1) @signature `Ld/l;.c:(Ljava/net/Socket;)Ld/a;` @kind static;
  #L3d6dea.  v0:= temp @kind object;
  #L3d6dec.  call temp:= `getOutputStream`(v1) @signature `Ljava/net/Socket;.getOutputStream:()Ljava/io/OutputStream;` @kind virtual;
  #L3d6df2.  v1:= temp @kind object;
  #L3d6df4.  call temp:= `a`(v1, v0) @signature `Ld/l;.a:(Ljava/io/OutputStream;Ld/t;)Ld/r;` @kind static;
  #L3d6dfa.  v1:= temp @kind object;
  #L3d6dfc.  call temp:= `a`(v0, v1) @signature `Ld/a;.a:(Ld/r;)Ld/r;` @kind virtual;
  #L3d6e02.  v1:= temp @kind object;
  #L3d6e04.  return v1 @kind object;
}
procedure `d.s` `a`(`java.io.InputStream` v1 @kind object) @signature `Ld/l;.a:(Ljava/io/InputStream;)Ld/s;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d6e18.  v0:= new `d.t`;
  #L3d6e1c.  call `<init>`(v0) @signature `Ld/t;.<init>:()V` @kind direct;
  #L3d6e22.  call temp:= `a`(v1, v0) @signature `Ld/l;.a:(Ljava/io/InputStream;Ld/t;)Ld/s;` @kind static;
  #L3d6e28.  v1:= temp @kind object;
  #L3d6e2a.  return v1 @kind object;
}
procedure `d.s` `a`(`java.io.InputStream` v1 @kind object, `d.t` v2 @kind object) @signature `Ld/l;.a:(Ljava/io/InputStream;Ld/t;)Ld/s;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L3d6e3c.  if v1 != 0 then goto L3d6e50;
  #L3d6e40.  v1:= new `java.lang.IllegalArgumentException`;
  #L3d6e44.  v2:= "in == null" @kind object;
  #L3d6e48.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d6e4e.  throw v1;
  #L3d6e50.  if v2 != 0 then goto L3d6e64;
  #L3d6e54.  v1:= new `java.lang.IllegalArgumentException`;
  #L3d6e58.  v2:= "timeout == null" @kind object;
  #L3d6e5c.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d6e62.  throw v1;
  #L3d6e64.  v0:= new `d.l$2`;
  #L3d6e68.  call `<init>`(v0, v2, v1) @signature `Ld/l$2;.<init>:(Ld/t;Ljava/io/InputStream;)V` @kind direct;
  #L3d6e6e.  return v0 @kind object;
}
procedure `boolean` `a`(`java.lang.AssertionError` v1 @kind object) @signature `Ld/l;.a:(Ljava/lang/AssertionError;)Z` @AccessFlag STATIC {
    temp;
    v0;

  #L3d6cd4.  call temp:= `getCause`(v1) @signature `Ljava/lang/AssertionError;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L3d6cda.  v0:= temp @kind object;
  #L3d6cdc.  if v0 == 0 then goto L3d6d08;
  #L3d6ce0.  call temp:= `getMessage`(v1) @signature `Ljava/lang/AssertionError;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L3d6ce6.  v0:= temp @kind object;
  #L3d6ce8.  if v0 == 0 then goto L3d6d08;
  #L3d6cec.  call temp:= `getMessage`(v1) @signature `Ljava/lang/AssertionError;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L3d6cf2.  v1:= temp @kind object;
  #L3d6cf4.  v0:= "getsockname failed" @kind object;
  #L3d6cf8.  call temp:= `contains`(v1, v0) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L3d6cfe.  v1:= temp;
  #L3d6d00.  if v1 == 0 then goto L3d6d08;
  #L3d6d04.  v1:= 1I;
  #L3d6d06.  goto L3d6d0a;
  #L3d6d08.  v1:= 0I;
  #L3d6d0a.  return v1;
}
procedure `d.s` `b`(`java.net.Socket` v1 @kind object) @signature `Ld/l;.b:(Ljava/net/Socket;)Ld/s;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3d6e80.  if v1 != 0 then goto L3d6e94;
  #L3d6e84.  v1:= new `java.lang.IllegalArgumentException`;
  #L3d6e88.  v0:= "socket == null" @kind object;
  #L3d6e8c.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d6e92.  throw v1;
  #L3d6e94.  call temp:= `getInputStream`(v1) @signature `Ljava/net/Socket;.getInputStream:()Ljava/io/InputStream;` @kind virtual;
  #L3d6e9a.  v0:= temp @kind object;
  #L3d6e9c.  if v0 != 0 then goto L3d6eb0;
  #L3d6ea0.  v1:= new `java.io.IOException`;
  #L3d6ea4.  v0:= "socket's input stream == null" @kind object;
  #L3d6ea8.  call `<init>`(v1, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d6eae.  throw v1;
  #L3d6eb0.  call temp:= `c`(v1) @signature `Ld/l;.c:(Ljava/net/Socket;)Ld/a;` @kind static;
  #L3d6eb6.  v0:= temp @kind object;
  #L3d6eb8.  call temp:= `getInputStream`(v1) @signature `Ljava/net/Socket;.getInputStream:()Ljava/io/InputStream;` @kind virtual;
  #L3d6ebe.  v1:= temp @kind object;
  #L3d6ec0.  call temp:= `a`(v1, v0) @signature `Ld/l;.a:(Ljava/io/InputStream;Ld/t;)Ld/s;` @kind static;
  #L3d6ec6.  v1:= temp @kind object;
  #L3d6ec8.  call temp:= `a`(v0, v1) @signature `Ld/a;.a:(Ld/s;)Ld/s;` @kind virtual;
  #L3d6ece.  v1:= temp @kind object;
  #L3d6ed0.  return v1 @kind object;
}
procedure `d.a` `c`(`java.net.Socket` v1 @kind object) @signature `Ld/l;.c:(Ljava/net/Socket;)Ld/a;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L3d6d1c.  v0:= new `d.l$3`;
  #L3d6d20.  call `<init>`(v0, v1) @signature `Ld/l$3;.<init>:(Ljava/net/Socket;)V` @kind direct;
  #L3d6d26.  return v0 @kind object;
}
