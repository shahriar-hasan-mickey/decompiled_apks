record `d.a` @kind class @AccessFlag PUBLIC extends `d.t` @kind class {
  `boolean` `d.a.e` @AccessFlag PRIVATE;
  `d.a` `d.a.f` @AccessFlag PRIVATE;
  `long` `d.a.g` @AccessFlag PRIVATE;
}
global `long` `@@d.a.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `d.a` `@@d.a.b` @AccessFlag STATIC;
global `long` `@@d.a.d` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ld/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3d2fb0.  v0:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L3d2fb4.  v1:= 60L;
  #L3d2fb8.  call temp:= `toMillis`(v0, v1) @signature `Ljava/util/concurrent/TimeUnit;.toMillis:(J)J` @kind virtual;
  #L3d2fbe.  v0:= temp @kind wide;
  #L3d2fc0.  `@@d.a.a` @type ^`long` := v0 @kind wide;
  #L3d2fc4.  v0:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L3d2fc8.  v1:= `@@d.a.a` @type ^`long` @kind wide;
  #L3d2fcc.  call temp:= `toNanos`(v0, v1) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L3d2fd2.  v0:= temp @kind wide;
  #L3d2fd4.  `@@d.a.d` @type ^`long` := v0 @kind wide;
  #L3d2fd8.  return @kind void;
}
procedure `void` `<init>`(`d.a` v0 @kind this) @signature `Ld/a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3d2fec.  call `<init>`(v0) @signature `Ld/t;.<init>:()V` @kind direct;
  #L3d2ff2.  return @kind void;
}
procedure `void` `a`(`d.a` v7 @kind object, `long` v8 , `boolean` v10 ) @signature `Ld/a;.a:(Ld/a;JZ)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3d3048.  v0:= constclass @type ^`d.a` @kind object;
  #L3d304c.  @monitorenter v0
  #L3d304e.  v1:= `@@d.a.b` @type ^`d.a` @kind object;
  #L3d3052.  if v1 != 0 then goto L3d3074;
  #L3d3056.  v1:= new `d.a`;
  #L3d305a.  call `<init>`(v1) @signature `Ld/a;.<init>:()V` @kind direct;
  #L3d3060.  `@@d.a.b` @type ^`d.a` := v1 @kind object;
  #L3d3064.  v1:= new `d.a$a`;
  #L3d3068.  call `<init>`(v1) @signature `Ld/a$a;.<init>:()V` @kind direct;
  #L3d306e.  call `start`(v1) @signature `Ld/a$a;.start:()V` @kind virtual;
  #L3d3074.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L3d307a.  v1:= temp @kind wide;
  #L3d307c.  v3:= 0L;
  #L3d3080.  v5:= lcmp(v8, v3);
  #L3d3084.  if v5 == 0 then goto L3d30ae;
  #L3d3088.  if v10 == 0 then goto L3d30ae;
  #L3d308c.  call temp:= `d`(v7) @signature `Ld/a;.d:()J` @kind virtual;
  #L3d3092.  v3:= temp @kind wide;
  #L3d3094.  v10:= 0I;
  #L3d3096.  v5:= v3 - v1 @kind long;
  #L3d309a.  call temp:= `min`(v8, v5) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3d30a0.  v8:= temp @kind wide;
  #L3d30a2.  v10:= 0I;
  #L3d30a4.  v3:= v1 + v8 @kind long;
  #L3d30a8.  v7.`d.a.g` @type ^`long` := v3 @kind wide;
  #L3d30ac.  goto L3d30d0;
  #L3d30ae.  v5:= lcmp(v8, v3);
  #L3d30b2.  if v5 == 0 then goto L3d30c0;
  #L3d30b6.  v3:= v1 + v8 @kind long;
  #L3d30ba.  v7.`d.a.g` @type ^`long` := v3 @kind wide;
  #L3d30be.  goto L3d30d0;
  #L3d30c0.  if v10 == 0 then goto L3d3122;
  #L3d30c4.  call temp:= `d`(v7) @signature `Ld/a;.d:()J` @kind virtual;
  #L3d30ca.  v8:= temp @kind wide;
  #L3d30cc.  v7.`d.a.g` @type ^`long` := v8 @kind wide;
  #L3d30d0.  call temp:= `b`(v7, v1) @signature `Ld/a;.b:(J)J` @kind direct;
  #L3d30d6.  v8:= temp @kind wide;
  #L3d30d8.  v10:= `@@d.a.b` @type ^`d.a` @kind object;
  #L3d30dc.  v3:= v10.`d.a.f` @type ^`d.a` @kind object;
  #L3d30e0.  if v3 == 0 then goto L3d3100;
  #L3d30e4.  v3:= v10.`d.a.f` @type ^`d.a` @kind object;
  #L3d30e8.  call temp:= `b`(v3, v1) @signature `Ld/a;.b:(J)J` @kind direct;
  #L3d30ee.  v3:= temp @kind wide;
  #L3d30f0.  v5:= lcmp(v8, v3);
  #L3d30f4.  if v5 >= 0 then goto L3d30fa;
  #L3d30f8.  goto L3d3100;
  #L3d30fa.  v10:= v10.`d.a.f` @type ^`d.a` @kind object;
  #L3d30fe.  goto L3d30dc;
  #L3d3100.  v8:= v10.`d.a.f` @type ^`d.a` @kind object;
  #L3d3104.  v7.`d.a.f` @type ^`d.a` := v8 @kind object;
  #L3d3108.  v10.`d.a.f` @type ^`d.a` := v7 @kind object;
  #L3d310c.  v7:= `@@d.a.b` @type ^`d.a` @kind object;
  #L3d3110.  if v10 != v7 then goto L3d311e;
  #L3d3114.  v7:= constclass @type ^`d.a` @kind object;
  #L3d3118.  call `notify`(v7) @signature `Ljava/lang/Object;.notify:()V` @kind virtual;
  #L3d311e.  @monitorexit v0
  #L3d3120.  return @kind void;
  #L3d3122.  v7:= new `java.lang.AssertionError`;
  #L3d3126.  call `<init>`(v7) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L3d312c.  throw v7;
  #L3d312e.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3d3130.  @monitorexit v0
  #L3d3132.  throw v7;
  catch `java.lang.Throwable` @[L3d304e..L3d311e] goto L3d312e;
  catch `java.lang.Throwable` @[L3d3122..L3d312e] goto L3d312e;
}
procedure `boolean` `a`(`d.a` v3 @kind object) @signature `Ld/a;.a:(Ld/a;)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3d2dd0.  v0:= constclass @type ^`d.a` @kind object;
  #L3d2dd4.  @monitorenter v0
  #L3d2dd6.  v1:= `@@d.a.b` @type ^`d.a` @kind object;
  #L3d2dda.  if v1 == 0 then goto L3d2e00;
  #L3d2dde.  v2:= v1.`d.a.f` @type ^`d.a` @kind object;
  #L3d2de2.  if v2 != v3 then goto L3d2dfa;
  #L3d2de6.  v2:= v3.`d.a.f` @type ^`d.a` @kind object;
  #L3d2dea.  v1.`d.a.f` @type ^`d.a` := v2 @kind object;
  #L3d2dee.  v1:= 0I;
  #L3d2df0.  v3.`d.a.f` @type ^`d.a` := v1 @kind object;
  #L3d2df4.  v3:= 0I;
  #L3d2df6.  @monitorexit v0
  #L3d2df8.  return v3;
  #L3d2dfa.  v1:= v1.`d.a.f` @type ^`d.a` @kind object;
  #L3d2dfe.  goto L3d2dda;
  #L3d2e00.  v3:= 1I;
  #L3d2e02.  @monitorexit v0
  #L3d2e04.  return v3;
  #L3d2e06.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3d2e08.  @monitorexit v0
  #L3d2e0a.  throw v3;
  catch `java.lang.Throwable` @[L3d2dd6..L3d2df4] goto L3d2e06;
  catch `java.lang.Throwable` @[L3d2dfa..L3d2dfe] goto L3d2e06;
}
procedure `long` `b`(`d.a` v4 @kind this, `long` v5 ) @signature `Ld/a;.b:(J)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3d2f94.  v0:= v4.`d.a.g` @type ^`long` @kind wide;
  #L3d2f98.  v2:= v0 - v5 @kind long;
  #L3d2f9c.  return v2 @kind wide;
}
procedure `d.a` `e`() @signature `Ld/a;.e:()Ld/a;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L3d2e5c.  v0:= `@@d.a.b` @type ^`d.a` @kind object;
  #L3d2e60.  v0:= v0.`d.a.f` @type ^`d.a` @kind object;
  #L3d2e64.  v1:= 0I;
  #L3d2e66.  if v0 != 0 then goto L3d2eaa;
  #L3d2e6a.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L3d2e70.  v2:= temp @kind wide;
  #L3d2e72.  v0:= constclass @type ^`d.a` @kind object;
  #L3d2e76.  v4:= `@@d.a.a` @type ^`long` @kind wide;
  #L3d2e7a.  call `wait`(v0, v4) @signature `Ljava/lang/Object;.wait:(J)V` @kind virtual;
  #L3d2e80.  v0:= `@@d.a.b` @type ^`d.a` @kind object;
  #L3d2e84.  v0:= v0.`d.a.f` @type ^`d.a` @kind object;
  #L3d2e88.  if v0 != 0 then goto L3d2ea8;
  #L3d2e8c.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L3d2e92.  v4:= temp @kind wide;
  #L3d2e94.  v6:= v4 - v2 @kind long;
  #L3d2e98.  v2:= `@@d.a.d` @type ^`long` @kind wide;
  #L3d2e9c.  v0:= lcmp(v6, v2);
  #L3d2ea0.  if v0 < 0 then goto L3d2ea8;
  #L3d2ea4.  v1:= `@@d.a.b` @type ^`d.a` @kind object;
  #L3d2ea8.  return v1 @kind object;
  #L3d2eaa.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L3d2eb0.  v2:= temp @kind wide;
  #L3d2eb2.  call temp:= `b`(v0, v2) @signature `Ld/a;.b:(J)J` @kind direct;
  #L3d2eb8.  v2:= temp @kind wide;
  #L3d2eba.  v4:= 0L;
  #L3d2ebe.  v6:= lcmp(v2, v4);
  #L3d2ec2.  if v6 <= 0 then goto L3d2ee6;
  #L3d2ec6.  v4:= 1000000L;
  #L3d2ecc.  v6:= v2 / v4 @kind long;
  #L3d2ed0.  v4:= v4 * v6 @kind long;
  #L3d2ed4.  v8:= v2 - v4 @kind long;
  #L3d2ed8.  v0:= constclass @type ^`d.a` @kind object;
  #L3d2edc.  v2:= (`int`) v8 @kind l2i;
  #L3d2ede.  call `wait`(v0, v6, v2) @signature `Ljava/lang/Object;.wait:(JI)V` @kind virtual;
  #L3d2ee4.  return v1 @kind object;
  #L3d2ee6.  v2:= `@@d.a.b` @type ^`d.a` @kind object;
  #L3d2eea.  v3:= v0.`d.a.f` @type ^`d.a` @kind object;
  #L3d2eee.  v2.`d.a.f` @type ^`d.a` := v3 @kind object;
  #L3d2ef2.  v0.`d.a.f` @type ^`d.a` := v1 @kind object;
  #L3d2ef6.  return v0 @kind object;
}
procedure `d.r` `a`(`d.a` v1 @kind this, `d.r` v2 @kind object) @signature `Ld/a;.a:(Ld/r;)Ld/r;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d2f08.  v0:= new `d.a$1`;
  #L3d2f0c.  call `<init>`(v0, v1, v2) @signature `Ld/a$1;.<init>:(Ld/a;Ld/r;)V` @kind direct;
  #L3d2f12.  return v0 @kind object;
}
procedure `d.s` `a`(`d.a` v1 @kind this, `d.s` v2 @kind object) @signature `Ld/a;.a:(Ld/s;)Ld/s;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3d2f24.  v0:= new `d.a$2`;
  #L3d2f28.  call `<init>`(v0, v1, v2) @signature `Ld/a$2;.<init>:(Ld/a;Ld/s;)V` @kind direct;
  #L3d2f2e.  return v0 @kind object;
}
procedure `java.io.IOException` `a`(`d.a` v2 @kind this, `java.io.IOException` v3 @kind object) @signature `Ld/a;.a:(Ljava/io/IOException;)Ljava/io/IOException;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L3d2f40.  v0:= new `java.io.InterruptedIOException`;
  #L3d2f44.  v1:= "timeout" @kind object;
  #L3d2f48.  call `<init>`(v0, v1) @signature `Ljava/io/InterruptedIOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d2f4e.  if v3 == 0 then goto L3d2f58;
  #L3d2f52.  call temp:= `initCause`(v0, v3) @signature `Ljava/io/InterruptedIOException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L3d2f58.  return v0 @kind object;
}
procedure `void` `a`(`d.a` v0 @kind this) @signature `Ld/a;.a:()V` @AccessFlag PROTECTED {
    temp;

  #L3d3004.  return @kind void;
}
procedure `void` `a`(`d.a` v1 @kind this, `boolean` v2 ) @signature `Ld/a;.a:(Z)V` @AccessFlag FINAL {
    temp;
    v0;

  #L3d3018.  call temp:= `j_`(v1) @signature `Ld/a;.j_:()Z` @kind virtual;
  #L3d301e.  v0:= temp;
  #L3d3020.  if v0 == 0 then goto L3d3034;
  #L3d3024.  if v2 == 0 then goto L3d3034;
  #L3d3028.  v2:= 0I;
  #L3d302a.  call temp:= `a`(v1, v2) @signature `Ld/a;.a:(Ljava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L3d3030.  v2:= temp @kind object;
  #L3d3032.  throw v2;
  #L3d3034.  return @kind void;
}
procedure `java.io.IOException` `b`(`d.a` v1 @kind this, `java.io.IOException` v2 @kind object) @signature `Ld/a;.b:(Ljava/io/IOException;)Ljava/io/IOException;` @AccessFlag FINAL {
    temp;
    v0;

  #L3d2f6c.  call temp:= `j_`(v1) @signature `Ld/a;.j_:()Z` @kind virtual;
  #L3d2f72.  v0:= temp;
  #L3d2f74.  if v0 != 0 then goto L3d2f7a;
  #L3d2f78.  return v2 @kind object;
  #L3d2f7a.  call temp:= `a`(v1, v2) @signature `Ld/a;.a:(Ljava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L3d2f80.  v2:= temp @kind object;
  #L3d2f82.  return v2 @kind object;
}
procedure `void` `c`(`d.a` v6 @kind this) @signature `Ld/a;.c:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d3158.  v0:= v6.`d.a.e` @type ^`boolean` @kind boolean;
  #L3d315c.  if v0 == 0 then goto L3d3170;
  #L3d3160.  v0:= new `java.lang.IllegalStateException`;
  #L3d3164.  v1:= "Unbalanced enter/exit" @kind object;
  #L3d3168.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d316e.  throw v0;
  #L3d3170.  call temp:= `k_`(v6) @signature `Ld/a;.k_:()J` @kind virtual;
  #L3d3176.  v0:= temp @kind wide;
  #L3d3178.  call temp:= `l_`(v6) @signature `Ld/a;.l_:()Z` @kind virtual;
  #L3d317e.  v2:= temp;
  #L3d3180.  v3:= 0L;
  #L3d3184.  v5:= lcmp(v0, v3);
  #L3d3188.  if v5 != 0 then goto L3d3192;
  #L3d318c.  if v2 != 0 then goto L3d3192;
  #L3d3190.  return @kind void;
  #L3d3192.  v3:= 1I;
  #L3d3194.  v6.`d.a.e` @type ^`boolean` := v3 @kind boolean;
  #L3d3198.  call `a`(v6, v0, v2) @signature `Ld/a;.a:(Ld/a;JZ)V` @kind static;
  #L3d319e.  return @kind void;
}
procedure `boolean` `j_`(`d.a` v2 @kind this) @signature `Ld/a;.j_:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L3d2e30.  v0:= v2.`d.a.e` @type ^`boolean` @kind boolean;
  #L3d2e34.  v1:= 0I;
  #L3d2e36.  if v0 != 0 then goto L3d2e3c;
  #L3d2e3a.  return v1;
  #L3d2e3c.  v2.`d.a.e` @type ^`boolean` := v1 @kind boolean;
  #L3d2e40.  call temp:= `a`(v2) @signature `Ld/a;.a:(Ld/a;)Z` @kind static;
  #L3d2e46.  v0:= temp;
  #L3d2e48.  return v0;
}
