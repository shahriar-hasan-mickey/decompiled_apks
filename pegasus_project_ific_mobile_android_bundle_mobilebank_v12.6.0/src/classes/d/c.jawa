record `d.c` @kind class @AccessFlag PUBLIC_FINAL extends `d.d` @kind interface, `d.e` @kind interface, `java.lang.Cloneable` @kind interface, `java.nio.channels.ByteChannel` @kind interface {
  `d.o` `d.c.a` @AccessFlag ;
  `long` `d.c.b` @AccessFlag ;
}
global `byte`[] `@@d.c.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ld/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3d50e4.  v0:= 16I;
  #L3d50e8.  v0:= new `byte`[v0];
  #L3d50ec.  goto L3d50f8;
  #L3d50f2.  `@@d.c.c` @type ^`byte`[] := v0 @kind object;
  #L3d50f6.  return @kind void;
  #L3d50f8.  v0:= (48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 97I, 98I, 99I, 100I, 101I, 102I) @kind object;
  #L3d510f.  goto L3d50f2;
}
procedure `void` `<init>`(`d.c` v0 @kind this) @signature `Ld/c;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3d5120.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3d5126.  return @kind void;
}
procedure `int` `a`(`d.c` v7 @kind this, `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Ld/c;.a:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3d44f0.  v0:= length @variable v8;
  #L3d44f2.  v1:= (`long`) v0 @kind i2l;
  #L3d44f4.  v3:= (`long`) v9 @kind i2l;
  #L3d44f6.  v5:= (`long`) v10 @kind i2l;
  #L3d44f8.  call `a`(v1, v3, v5) @signature `Ld/u;.a:(JJJ)V` @kind static;
  #L3d44fe.  v0:= v7.`d.c.a` @type ^`d.o` @kind object;
  #L3d4502.  if v0 != 0 then goto L3d450a;
  #L3d4506.  v8:= -1I;
  #L3d4508.  return v8;
  #L3d450a.  v1:= v0.`d.o.c` @type ^`int`;
  #L3d450e.  v2:= v0.`d.o.b` @type ^`int`;
  #L3d4512.  v1:= v1 - v2 @kind int;
  #L3d4514.  call temp:= `min`(v10, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3d451a.  v10:= temp;
  #L3d451c.  v1:= v0.`d.o.a` @type ^`byte`[] @kind object;
  #L3d4520.  v2:= v0.`d.o.b` @type ^`int`;
  #L3d4524.  call `arraycopy`(v1, v2, v8, v9, v10) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3d452a.  v8:= v0.`d.o.b` @type ^`int`;
  #L3d452e.  v8:= v8 + v10 @kind int;
  #L3d4530.  v0.`d.o.b` @type ^`int` := v8;
  #L3d4534.  v8:= v7.`d.c.b` @type ^`long` @kind wide;
  #L3d4538.  v1:= (`long`) v10 @kind i2l;
  #L3d453a.  v3:= v8 - v1 @kind long;
  #L3d453e.  v7.`d.c.b` @type ^`long` := v3 @kind wide;
  #L3d4542.  v8:= v0.`d.o.b` @type ^`int`;
  #L3d4546.  v9:= v0.`d.o.c` @type ^`int`;
  #L3d454a.  if v8 != v9 then goto L3d4560;
  #L3d454e.  call temp:= `b`(v0) @signature `Ld/o;.b:()Ld/o;` @kind virtual;
  #L3d4554.  v8:= temp @kind object;
  #L3d4556.  v7.`d.c.a` @type ^`d.o` := v8 @kind object;
  #L3d455a.  call `a`(v0) @signature `Ld/p;.a:(Ld/o;)V` @kind static;
  #L3d4560.  return v10;
}
procedure `long` `a`(`d.c` v6 @kind this, `byte` v7 ) @signature `Ld/c;.a:(B)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d4b78.  v2:= 0L;
  #L3d4b7c.  v4:= 9223372036854775807L;
  #L3d4b86.  v0:= v6 @kind object;
  #L3d4b88.  v1:= v7;
  #L3d4b8a.  call temp:= `a`(v0, v1, v2, v4) @signature `Ld/c;.a:(BJJ)J` @kind virtual;
  #L3d4b90.  v0:= temp @kind wide;
  #L3d4b92.  return v0 @kind wide;
}
procedure `long` `a`(`d.c` v17 @kind this, `byte` v18 , `long` v19 , `long` v21 ) @signature `Ld/c;.a:(BJJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L3d4ba4.  v0:= v17 @kind object;
  #L3d4ba8.  v5:= 0L;
  #L3d4bac.  v7:= lcmp(v19, v5);
  #L3d4bb0.  if v7 < 0 then goto L3d4cc6;
  #L3d4bb4.  v7:= lcmp(v21, v19);
  #L3d4bb8.  if v7 >= 0 then goto L3d4bc0;
  #L3d4bbc.  goto L3d4cc6;
  #L3d4bc0.  v7:= v0.`d.c.b` @type ^`long` @kind wide;
  #L3d4bc4.  v9:= lcmp(v21, v7);
  #L3d4bc8.  if v9 <= 0 then goto L3d4bd2;
  #L3d4bcc.  v3:= v0.`d.c.b` @type ^`long` @kind wide;
  #L3d4bd0.  goto L3d4bd6;
  #L3d4bd2.  v3:= v21 @kind wide;
  #L3d4bd6.  v7:= lcmp(v19, v3);
  #L3d4bda.  v8:= -1L;
  #L3d4bde.  if v7 != 0 then goto L3d4be4;
  #L3d4be2.  return v8 @kind wide;
  #L3d4be4.  v7:= v0.`d.c.a` @type ^`d.o` @kind object;
  #L3d4be8.  if v7 != 0 then goto L3d4bee;
  #L3d4bec.  return v8 @kind wide;
  #L3d4bee.  v10:= v0.`d.c.b` @type ^`long` @kind wide;
  #L3d4bf2.  v12:= v10 - v19 @kind long;
  #L3d4bf6.  v10:= lcmp(v12, v19);
  #L3d4bfa.  if v10 >= 0 then goto L3d4c28;
  #L3d4bfe.  v5:= v0.`d.c.b` @type ^`long` @kind wide;
  #L3d4c02.  v10:= lcmp(v5, v19);
  #L3d4c06.  if v10 <= 0 then goto L3d4c22;
  #L3d4c0a.  v7:= v7.`d.o.g` @type ^`d.o` @kind object;
  #L3d4c0e.  v10:= v7.`d.o.c` @type ^`int`;
  #L3d4c12.  v11:= v7.`d.o.b` @type ^`int`;
  #L3d4c16.  v10:= v10 - v11 @kind int;
  #L3d4c18.  v10:= (`long`) v10 @kind i2l;
  #L3d4c1a.  v12:= v5 - v10 @kind long;
  #L3d4c1e.  v5:= v12 @kind wide;
  #L3d4c20.  goto L3d4c02;
  #L3d4c22.  v1:= v19 @kind wide;
  #L3d4c26.  goto L3d4c48;
  #L3d4c28.  v10:= v7.`d.o.c` @type ^`int`;
  #L3d4c2c.  v11:= v7.`d.o.b` @type ^`int`;
  #L3d4c30.  v10:= v10 - v11 @kind int;
  #L3d4c32.  v10:= (`long`) v10 @kind i2l;
  #L3d4c34.  v12:= v5 + v10 @kind long;
  #L3d4c38.  v10:= lcmp(v12, v19);
  #L3d4c3c.  if v10 >= 0 then goto L3d4c22;
  #L3d4c40.  v7:= v7.`d.o.f` @type ^`d.o` @kind object;
  #L3d4c44.  v5:= v12 @kind wide;
  #L3d4c46.  goto L3d4c28;
  #L3d4c48.  v10:= lcmp(v5, v3);
  #L3d4c4c.  if v10 >= 0 then goto L3d4cc4;
  #L3d4c50.  v10:= v7.`d.o.a` @type ^`byte`[] @kind object;
  #L3d4c54.  v11:= v7.`d.o.c` @type ^`int`;
  #L3d4c58.  v11:= (`long`) v11 @kind i2l;
  #L3d4c5a.  v13:= v7.`d.o.b` @type ^`int`;
  #L3d4c5e.  v13:= (`long`) v13 @kind i2l;
  #L3d4c60.  v15:= v13 + v3 @kind long;
  #L3d4c64.  v13:= v15 - v5 @kind long;
  #L3d4c68.  call temp:= `min`(v11, v13) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3d4c6e.  v11:= temp @kind wide;
  #L3d4c70.  v11:= (`int`) v11 @kind l2i;
  #L3d4c72.  v12:= v7.`d.o.b` @type ^`int`;
  #L3d4c76.  v12:= (`long`) v12 @kind i2l;
  #L3d4c78.  v14:= v12 + v1 @kind long;
  #L3d4c7c.  v1:= v14 - v5 @kind long;
  #L3d4c80.  v1:= (`int`) v1 @kind l2i;
  #L3d4c82.  if v1 >= v11 then goto L3d4ca6;
  #L3d4c86.  v2:= v10[v1] @kind byte;
  #L3d4c8a.  v12:= v18;
  #L3d4c8e.  if v2 != v12 then goto L3d4ca0;
  #L3d4c92.  v2:= v7.`d.o.b` @type ^`int`;
  #L3d4c96.  v1:= v1 - v2 @kind int;
  #L3d4c98.  v1:= (`long`) v1 @kind i2l;
  #L3d4c9a.  v3:= v1 + v5 @kind long;
  #L3d4c9e.  return v3 @kind wide;
  #L3d4ca0.  v1:= v1 + 1;
  #L3d4ca4.  goto L3d4c82;
  #L3d4ca6.  v12:= v18;
  #L3d4caa.  v1:= v7.`d.o.c` @type ^`int`;
  #L3d4cae.  v2:= v7.`d.o.b` @type ^`int`;
  #L3d4cb2.  v1:= v1 - v2 @kind int;
  #L3d4cb4.  v1:= (`long`) v1 @kind i2l;
  #L3d4cb6.  v10:= v5 + v1 @kind long;
  #L3d4cba.  v7:= v7.`d.o.f` @type ^`d.o` @kind object;
  #L3d4cbe.  v1:= v10 @kind wide;
  #L3d4cc0.  v5:= v1 @kind wide;
  #L3d4cc2.  goto L3d4c48;
  #L3d4cc4.  return v8 @kind wide;
  #L3d4cc6.  v5:= new `java.lang.IllegalArgumentException`;
  #L3d4cca.  v6:= "size=%s fromIndex=%s toIndex=%s" @kind object;
  #L3d4cce.  v7:= 3I;
  #L3d4cd0.  v7:= new `java.lang.Object`[v7];
  #L3d4cd4.  v8:= 0I;
  #L3d4cd6.  v9:= v0.`d.c.b` @type ^`long` @kind wide;
  #L3d4cda.  call temp:= `valueOf`(v9) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L3d4ce0.  v9:= temp @kind object;
  #L3d4ce2.  v7[v8]:= v9 @kind object;
  #L3d4ce6.  call temp:= `valueOf`(v19) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L3d4cec.  v1:= temp @kind object;
  #L3d4cee.  v2:= 1I;
  #L3d4cf0.  v7[v2]:= v1 @kind object;
  #L3d4cf4.  v1:= 2I;
  #L3d4cf6.  call temp:= `valueOf`(v21) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L3d4cfc.  v2:= temp @kind object;
  #L3d4cfe.  v7[v1]:= v2 @kind object;
  #L3d4d02.  call temp:= `format`(v6, v7) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L3d4d08.  v1:= temp @kind object;
  #L3d4d0a.  call `<init>`(v5, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d4d10.  throw v5;
}
procedure `long` `a`(`d.c` v5 @kind this, `d.c` v6 @kind object, `long` v7 ) @signature `Ld/c;.a:(Ld/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3d4d24.  if v6 != 0 then goto L3d4d38;
  #L3d4d28.  v6:= new `java.lang.IllegalArgumentException`;
  #L3d4d2c.  v7:= "sink == null" @kind object;
  #L3d4d30.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d4d36.  throw v6;
  #L3d4d38.  v0:= 0L;
  #L3d4d3c.  v2:= lcmp(v7, v0);
  #L3d4d40.  if v2 >= 0 then goto L3d4d72;
  #L3d4d44.  v6:= new `java.lang.IllegalArgumentException`;
  #L3d4d48.  v0:= new `java.lang.StringBuilder`;
  #L3d4d4c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d4d52.  v1:= "byteCount < 0: " @kind object;
  #L3d4d56.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d4d5c.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d4d62.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d4d68.  v7:= temp @kind object;
  #L3d4d6a.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d4d70.  throw v6;
  #L3d4d72.  v2:= v5.`d.c.b` @type ^`long` @kind wide;
  #L3d4d76.  v4:= lcmp(v2, v0);
  #L3d4d7a.  if v4 != 0 then goto L3d4d84;
  #L3d4d7e.  v6:= -1L;
  #L3d4d82.  return v6 @kind wide;
  #L3d4d84.  v0:= v5.`d.c.b` @type ^`long` @kind wide;
  #L3d4d88.  v2:= lcmp(v7, v0);
  #L3d4d8c.  if v2 <= 0 then goto L3d4d94;
  #L3d4d90.  v7:= v5.`d.c.b` @type ^`long` @kind wide;
  #L3d4d94.  call `a_`(v6, v5, v7) @signature `Ld/c;.a_:(Ld/c;J)V` @kind virtual;
  #L3d4d9a.  return v7 @kind wide;
}
procedure `long` `a`(`d.c` v7 @kind this, `d.s` v8 @kind object) @signature `Ld/c;.a:(Ld/s;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3d4dac.  if v8 != 0 then goto L3d4dc0;
  #L3d4db0.  v8:= new `java.lang.IllegalArgumentException`;
  #L3d4db4.  v0:= "source == null" @kind object;
  #L3d4db8.  call `<init>`(v8, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d4dbe.  throw v8;
  #L3d4dc0.  v0:= 0L;
  #L3d4dc4.  v2:= 8192L;
  #L3d4dc8.  call temp:= `a`(v8, v7, v2) @signature `Ld/s;.a:(Ld/c;J)J` @kind interface;
  #L3d4dce.  v2:= temp @kind wide;
  #L3d4dd0.  v4:= -1L;
  #L3d4dd4.  v6:= lcmp(v2, v4);
  #L3d4dd8.  if v6 == 0 then goto L3d4de4;
  #L3d4ddc.  v4:= v0 + v2 @kind long;
  #L3d4de0.  v0:= v4 @kind wide;
  #L3d4de2.  goto L3d4dc4;
  #L3d4de4.  return v0 @kind wide;
}
procedure `d.c` `a`(`d.c` v3 @kind this, `int` v4 ) @signature `Ld/c;.a:(I)Ld/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3d3854.  v0:= 128I;
  #L3d3858.  if v4 >= v0 then goto L3d3864;
  #L3d385c.  call temp:= `b`(v3, v4) @signature `Ld/c;.b:(I)Ld/c;` @kind virtual;
  #L3d3862.  goto L3d3914;
  #L3d3864.  v1:= 2048I;
  #L3d3868.  v2:= 63I;
  #L3d386c.  if v4 >= v1 then goto L3d388a;
  #L3d3870.  v1:= v4 ^> 6;
  #L3d3874.  v1:= v1 ^| 192;
  #L3d3878.  call temp:= `b`(v3, v1) @signature `Ld/c;.b:(I)Ld/c;` @kind virtual;
  #L3d387e.  v4:= v4 ^& v2 @kind int;
  #L3d3880.  v4:= v4 ^| v0 @kind int;
  #L3d3882.  call temp:= `b`(v3, v4) @signature `Ld/c;.b:(I)Ld/c;` @kind virtual;
  #L3d3888.  goto L3d3914;
  #L3d388a.  v1:= 65536I;
  #L3d388e.  if v4 >= v1 then goto L3d38d6;
  #L3d3892.  v1:= 55296I;
  #L3d3898.  if v4 < v1 then goto L3d38ae;
  #L3d389c.  v1:= 57343I;
  #L3d38a2.  if v4 > v1 then goto L3d38ae;
  #L3d38a6.  call temp:= `b`(v3, v2) @signature `Ld/c;.b:(I)Ld/c;` @kind virtual;
  #L3d38ac.  goto L3d3914;
  #L3d38ae.  v1:= v4 ^> 12;
  #L3d38b2.  v1:= v1 ^| 224;
  #L3d38b6.  call temp:= `b`(v3, v1) @signature `Ld/c;.b:(I)Ld/c;` @kind virtual;
  #L3d38bc.  v1:= v4 ^> 6;
  #L3d38c0.  v1:= v1 ^& v2 @kind int;
  #L3d38c2.  v1:= v1 ^| v0 @kind int;
  #L3d38c4.  call temp:= `b`(v3, v1) @signature `Ld/c;.b:(I)Ld/c;` @kind virtual;
  #L3d38ca.  v4:= v4 ^& v2 @kind int;
  #L3d38cc.  v4:= v4 ^| v0 @kind int;
  #L3d38ce.  call temp:= `b`(v3, v4) @signature `Ld/c;.b:(I)Ld/c;` @kind virtual;
  #L3d38d4.  goto L3d3914;
  #L3d38d6.  v1:= 1114111I;
  #L3d38dc.  if v4 > v1 then goto L3d3916;
  #L3d38e0.  v1:= v4 ^> 18;
  #L3d38e4.  v1:= v1 ^| 240;
  #L3d38e8.  call temp:= `b`(v3, v1) @signature `Ld/c;.b:(I)Ld/c;` @kind virtual;
  #L3d38ee.  v1:= v4 ^> 12;
  #L3d38f2.  v1:= v1 ^& v2 @kind int;
  #L3d38f4.  v1:= v1 ^| v0 @kind int;
  #L3d38f6.  call temp:= `b`(v3, v1) @signature `Ld/c;.b:(I)Ld/c;` @kind virtual;
  #L3d38fc.  v1:= v4 ^> 6;
  #L3d3900.  v1:= v1 ^& v2 @kind int;
  #L3d3902.  v1:= v1 ^| v0 @kind int;
  #L3d3904.  call temp:= `b`(v3, v1) @signature `Ld/c;.b:(I)Ld/c;` @kind virtual;
  #L3d390a.  v4:= v4 ^& v2 @kind int;
  #L3d390c.  v4:= v4 ^| v0 @kind int;
  #L3d390e.  call temp:= `b`(v3, v4) @signature `Ld/c;.b:(I)Ld/c;` @kind virtual;
  #L3d3914.  return v3 @kind object;
  #L3d3916.  v0:= new `java.lang.IllegalArgumentException`;
  #L3d391a.  v1:= new `java.lang.StringBuilder`;
  #L3d391e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d3924.  v2:= "Unexpected code point: " @kind object;
  #L3d3928.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d392e.  call temp:= `toHexString`(v4) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L3d3934.  v4:= temp @kind object;
  #L3d3936.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d393c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d3942.  v4:= temp @kind object;
  #L3d3944.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d394a.  throw v0;
}
procedure `d.c` `a`(`d.c` v8 @kind this, `d.c` v9 @kind object, `long` v10 , `long` v12 ) @signature `Ld/c;.a:(Ld/c;JJ)Ld/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3d3734.  if v9 != 0 then goto L3d3748;
  #L3d3738.  v9:= new `java.lang.IllegalArgumentException`;
  #L3d373c.  v10:= "out == null" @kind object;
  #L3d3740.  call `<init>`(v9, v10) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d3746.  throw v9;
  #L3d3748.  v0:= v8.`d.c.b` @type ^`long` @kind wide;
  #L3d374c.  v2:= v10 @kind wide;
  #L3d374e.  v4:= v12 @kind wide;
  #L3d3750.  call `a`(v0, v2, v4) @signature `Ld/u;.a:(JJJ)V` @kind static;
  #L3d3756.  v0:= 0L;
  #L3d375a.  v2:= lcmp(v12, v0);
  #L3d375e.  if v2 != 0 then goto L3d3764;
  #L3d3762.  return v8 @kind object;
  #L3d3764.  v2:= v9.`d.c.b` @type ^`long` @kind wide;
  #L3d3768.  v4:= v2 + v12 @kind long;
  #L3d376c.  v9.`d.c.b` @type ^`long` := v4 @kind wide;
  #L3d3770.  v2:= v8.`d.c.a` @type ^`d.o` @kind object;
  #L3d3774.  v3:= v2.`d.o.c` @type ^`int`;
  #L3d3778.  v4:= v2.`d.o.b` @type ^`int`;
  #L3d377c.  v3:= v3 - v4 @kind int;
  #L3d377e.  v3:= (`long`) v3 @kind i2l;
  #L3d3780.  v5:= lcmp(v10, v3);
  #L3d3784.  if v5 < 0 then goto L3d37a0;
  #L3d3788.  v3:= v2.`d.o.c` @type ^`int`;
  #L3d378c.  v4:= v2.`d.o.b` @type ^`int`;
  #L3d3790.  v3:= v3 - v4 @kind int;
  #L3d3792.  v3:= (`long`) v3 @kind i2l;
  #L3d3794.  v5:= v10 - v3 @kind long;
  #L3d3798.  v2:= v2.`d.o.f` @type ^`d.o` @kind object;
  #L3d379c.  v10:= v5 @kind wide;
  #L3d379e.  goto L3d3774;
  #L3d37a0.  v3:= lcmp(v12, v0);
  #L3d37a4.  if v3 <= 0 then goto L3d3816;
  #L3d37a8.  call temp:= `a`(v2) @signature `Ld/o;.a:()Ld/o;` @kind virtual;
  #L3d37ae.  v3:= temp @kind object;
  #L3d37b0.  v4:= v3.`d.o.b` @type ^`int`;
  #L3d37b4.  v4:= (`long`) v4 @kind i2l;
  #L3d37b6.  v6:= v4 + v10 @kind long;
  #L3d37ba.  v10:= (`int`) v6 @kind l2i;
  #L3d37bc.  v3.`d.o.b` @type ^`int` := v10;
  #L3d37c0.  v10:= v3.`d.o.b` @type ^`int`;
  #L3d37c4.  v11:= (`int`) v12 @kind l2i;
  #L3d37c6.  v10:= v10 + v11 @kind int;
  #L3d37c8.  v11:= v3.`d.o.c` @type ^`int`;
  #L3d37cc.  call temp:= `min`(v10, v11) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3d37d2.  v10:= temp;
  #L3d37d4.  v3.`d.o.c` @type ^`int` := v10;
  #L3d37d8.  v10:= v9.`d.c.a` @type ^`d.o` @kind object;
  #L3d37dc.  if v10 != 0 then goto L3d37ee;
  #L3d37e0.  v3.`d.o.g` @type ^`d.o` := v3 @kind object;
  #L3d37e4.  v3.`d.o.f` @type ^`d.o` := v3 @kind object;
  #L3d37e8.  v9.`d.c.a` @type ^`d.o` := v3 @kind object;
  #L3d37ec.  goto L3d37fc;
  #L3d37ee.  v10:= v9.`d.c.a` @type ^`d.o` @kind object;
  #L3d37f2.  v10:= v10.`d.o.g` @type ^`d.o` @kind object;
  #L3d37f6.  call temp:= `a`(v10, v3) @signature `Ld/o;.a:(Ld/o;)Ld/o;` @kind virtual;
  #L3d37fc.  v10:= v3.`d.o.c` @type ^`int`;
  #L3d3800.  v11:= v3.`d.o.b` @type ^`int`;
  #L3d3804.  v10:= v10 - v11 @kind int;
  #L3d3806.  v10:= (`long`) v10 @kind i2l;
  #L3d3808.  v3:= v12 - v10 @kind long;
  #L3d380c.  v2:= v2.`d.o.f` @type ^`d.o` @kind object;
  #L3d3810.  v10:= v0 @kind wide;
  #L3d3812.  v12:= v3 @kind wide;
  #L3d3814.  goto L3d37a0;
  #L3d3816.  return v8 @kind object;
}
procedure `d.c` `a`(`d.c` v1 @kind this, `d.f` v2 @kind object) @signature `Ld/c;.a:(Ld/f;)Ld/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d3828.  if v2 != 0 then goto L3d383c;
  #L3d382c.  v2:= new `java.lang.IllegalArgumentException`;
  #L3d3830.  v0:= "byteString == null" @kind object;
  #L3d3834.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d383a.  throw v2;
  #L3d383c.  call `a`(v2, v1) @signature `Ld/f;.a:(Ld/c;)V` @kind virtual;
  #L3d3842.  return v1 @kind object;
}
procedure `d.c` `a`(`d.c` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Ld/c;.a:(Ljava/lang/String;)Ld/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3d395c.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3d3962.  v0:= temp;
  #L3d3964.  v1:= 0I;
  #L3d3966.  call temp:= `a`(v2, v3, v1, v0) @signature `Ld/c;.a:(Ljava/lang/String;II)Ld/c;` @kind virtual;
  #L3d396c.  v3:= temp @kind object;
  #L3d396e.  return v3 @kind object;
}
procedure `d.c` `a`(`d.c` v7 @kind this, `java.lang.String` v8 @kind object, `int` v9 , `int` v10 ) @signature `Ld/c;.a:(Ljava/lang/String;II)Ld/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3d3980.  if v8 != 0 then goto L3d3994;
  #L3d3984.  v8:= new `java.lang.IllegalArgumentException`;
  #L3d3988.  v9:= "string == null" @kind object;
  #L3d398c.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d3992.  throw v8;
  #L3d3994.  if v9 >= 0 then goto L3d39c6;
  #L3d3998.  v8:= new `java.lang.IllegalArgumentException`;
  #L3d399c.  v10:= new `java.lang.StringBuilder`;
  #L3d39a0.  call `<init>`(v10) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d39a6.  v0:= "beginIndex < 0: " @kind object;
  #L3d39aa.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d39b0.  call temp:= `append`(v10, v9) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d39b6.  call temp:= `toString`(v10) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d39bc.  v9:= temp @kind object;
  #L3d39be.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d39c4.  throw v8;
  #L3d39c6.  if v10 >= v9 then goto L3d3a08;
  #L3d39ca.  v8:= new `java.lang.IllegalArgumentException`;
  #L3d39ce.  v0:= new `java.lang.StringBuilder`;
  #L3d39d2.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d39d8.  v1:= "endIndex < beginIndex: " @kind object;
  #L3d39dc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d39e2.  call temp:= `append`(v0, v10) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d39e8.  v10:= " < " @kind object;
  #L3d39ec.  call temp:= `append`(v0, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d39f2.  call temp:= `append`(v0, v9) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d39f8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d39fe.  v9:= temp @kind object;
  #L3d3a00.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d3a06.  throw v8;
  #L3d3a08.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3d3a0e.  v0:= temp;
  #L3d3a10.  if v10 <= v0 then goto L3d3a5a;
  #L3d3a14.  v9:= new `java.lang.IllegalArgumentException`;
  #L3d3a18.  v0:= new `java.lang.StringBuilder`;
  #L3d3a1c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d3a22.  v1:= "endIndex > string.length: " @kind object;
  #L3d3a26.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d3a2c.  call temp:= `append`(v0, v10) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d3a32.  v10:= " > " @kind object;
  #L3d3a36.  call temp:= `append`(v0, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d3a3c.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3d3a42.  v8:= temp;
  #L3d3a44.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d3a4a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d3a50.  v8:= temp @kind object;
  #L3d3a52.  call `<init>`(v9, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d3a58.  throw v9;
  #L3d3a5a.  if v9 >= v10 then goto L3d3be4;
  #L3d3a5e.  call temp:= `charAt`(v8, v9) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3d3a64.  v0:= temp;
  #L3d3a66.  v1:= 128I;
  #L3d3a6a.  if v0 >= v1 then goto L3d3ae0;
  #L3d3a6e.  v2:= 1I;
  #L3d3a70.  call temp:= `e`(v7, v2) @signature `Ld/c;.e:(I)Ld/o;` @kind virtual;
  #L3d3a76.  v2:= temp @kind object;
  #L3d3a78.  v3:= v2.`d.o.a` @type ^`byte`[] @kind object;
  #L3d3a7c.  v4:= v2.`d.o.c` @type ^`int`;
  #L3d3a80.  v4:= v4 - v9 @kind int;
  #L3d3a82.  v5:= v4 - 8192;
  #L3d3a86.  call temp:= `min`(v10, v5) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3d3a8c.  v5:= temp;
  #L3d3a8e.  v6:= v9 + 1;
  #L3d3a92.  v9:= v9 + v4 @kind int;
  #L3d3a94.  v0:= (`byte`) v0 @kind i2b;
  #L3d3a96.  v3[v9]:= v0 @kind byte;
  #L3d3a9a.  if v6 >= v5 then goto L3d3abc;
  #L3d3a9e.  call temp:= `charAt`(v8, v6) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3d3aa4.  v9:= temp;
  #L3d3aa6.  if v9 < v1 then goto L3d3aac;
  #L3d3aaa.  goto L3d3abc;
  #L3d3aac.  v0:= v6 + 1;
  #L3d3ab0.  v6:= v6 + v4 @kind int;
  #L3d3ab2.  v9:= (`byte`) v9 @kind i2b;
  #L3d3ab4.  v3[v6]:= v9 @kind byte;
  #L3d3ab8.  v6:= v0;
  #L3d3aba.  goto L3d3a9a;
  #L3d3abc.  v4:= v4 + v6 @kind int;
  #L3d3abe.  v9:= v2.`d.o.c` @type ^`int`;
  #L3d3ac2.  v4:= v4 - v9 @kind int;
  #L3d3ac4.  v9:= v2.`d.o.c` @type ^`int`;
  #L3d3ac8.  v9:= v9 + v4 @kind int;
  #L3d3aca.  v2.`d.o.c` @type ^`int` := v9;
  #L3d3ace.  v0:= v7.`d.c.b` @type ^`long` @kind wide;
  #L3d3ad2.  v2:= (`long`) v4 @kind i2l;
  #L3d3ad4.  v4:= v0 + v2 @kind long;
  #L3d3ad8.  v7.`d.c.b` @type ^`long` := v4 @kind wide;
  #L3d3adc.  v9:= v6;
  #L3d3ade.  goto L3d3a5a;
  #L3d3ae0.  v2:= 2048I;
  #L3d3ae4.  if v0 >= v2 then goto L3d3b08;
  #L3d3ae8.  v2:= v0 ^> 6;
  #L3d3aec.  v2:= v2 ^| 192;
  #L3d3af0.  call temp:= `b`(v7, v2) @signature `Ld/c;.b:(I)Ld/c;` @kind virtual;
  #L3d3af6.  v0:= v0 ^& 63;
  #L3d3afa.  v0:= v0 ^| v1 @kind int;
  #L3d3afc.  call temp:= `b`(v7, v0) @signature `Ld/c;.b:(I)Ld/c;` @kind virtual;
  #L3d3b02.  v9:= v9 + 1;
  #L3d3b06.  goto L3d3a5a;
  #L3d3b08.  v2:= 55296I;
  #L3d3b0e.  v3:= 63I;
  #L3d3b12.  if v0 < v2 then goto L3d3bb4;
  #L3d3b16.  v2:= 57343I;
  #L3d3b1c.  if v0 <= v2 then goto L3d3b22;
  #L3d3b20.  goto L3d3bb4;
  #L3d3b22.  v4:= v9 + 1;
  #L3d3b26.  if v4 >= v10 then goto L3d3b34;
  #L3d3b2a.  call temp:= `charAt`(v8, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3d3b30.  v5:= temp;
  #L3d3b32.  goto L3d3b36;
  #L3d3b34.  v5:= 0I;
  #L3d3b36.  v6:= 56319I;
  #L3d3b3c.  if v0 > v6 then goto L3d3ba8;
  #L3d3b40.  v6:= 56320I;
  #L3d3b46.  if v5 < v6 then goto L3d3ba8;
  #L3d3b4a.  if v5 <= v2 then goto L3d3b50;
  #L3d3b4e.  goto L3d3ba8;
  #L3d3b50.  v2:= 65536I;
  #L3d3b54.  v4:= -55297I;
  #L3d3b5a.  v0:= v0 ^& v4 @kind int;
  #L3d3b5c.  v0:= v0 ^< 10;
  #L3d3b60.  v4:= -56321I;
  #L3d3b66.  v4:= v4 ^& v5 @kind int;
  #L3d3b68.  v0:= v0 ^| v4 @kind int;
  #L3d3b6a.  v0:= v0 + v2 @kind int;
  #L3d3b6c.  v2:= v0 ^> 18;
  #L3d3b70.  v2:= v2 ^| 240;
  #L3d3b74.  call temp:= `b`(v7, v2) @signature `Ld/c;.b:(I)Ld/c;` @kind virtual;
  #L3d3b7a.  v2:= v0 ^> 12;
  #L3d3b7e.  v2:= v2 ^& v3 @kind int;
  #L3d3b80.  v2:= v2 ^| v1 @kind int;
  #L3d3b82.  call temp:= `b`(v7, v2) @signature `Ld/c;.b:(I)Ld/c;` @kind virtual;
  #L3d3b88.  v2:= v0 ^> 6;
  #L3d3b8c.  v2:= v2 ^& v3 @kind int;
  #L3d3b8e.  v2:= v2 ^| v1 @kind int;
  #L3d3b90.  call temp:= `b`(v7, v2) @signature `Ld/c;.b:(I)Ld/c;` @kind virtual;
  #L3d3b96.  v0:= v0 ^& v3 @kind int;
  #L3d3b98.  v0:= v0 ^| v1 @kind int;
  #L3d3b9a.  call temp:= `b`(v7, v0) @signature `Ld/c;.b:(I)Ld/c;` @kind virtual;
  #L3d3ba0.  v9:= v9 + 2;
  #L3d3ba4.  goto L3d3a5a;
  #L3d3ba8.  call temp:= `b`(v7, v3) @signature `Ld/c;.b:(I)Ld/c;` @kind virtual;
  #L3d3bae.  v9:= v4;
  #L3d3bb0.  goto L3d3a5a;
  #L3d3bb4.  v2:= v0 ^> 12;
  #L3d3bb8.  v2:= v2 ^| 224;
  #L3d3bbc.  call temp:= `b`(v7, v2) @signature `Ld/c;.b:(I)Ld/c;` @kind virtual;
  #L3d3bc2.  v2:= v0 ^> 6;
  #L3d3bc6.  v2:= v2 ^& v3 @kind int;
  #L3d3bc8.  v2:= v2 ^| v1 @kind int;
  #L3d3bca.  call temp:= `b`(v7, v2) @signature `Ld/c;.b:(I)Ld/c;` @kind virtual;
  #L3d3bd0.  v0:= v0 ^& 63;
  #L3d3bd4.  v0:= v0 ^| v1 @kind int;
  #L3d3bd6.  call temp:= `b`(v7, v0) @signature `Ld/c;.b:(I)Ld/c;` @kind virtual;
  #L3d3bdc.  v9:= v9 + 1;
  #L3d3be0.  goto L3d3a5a;
  #L3d3be4.  return v7 @kind object;
}
procedure `d.c` `a`(`d.c` v1 @kind this, `java.lang.String` v2 @kind object, `int` v3 , `int` v4 , `java.nio.charset.Charset` v5 @kind object) @signature `Ld/c;.a:(Ljava/lang/String;IILjava/nio/charset/Charset;)Ld/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d3bf8.  if v2 != 0 then goto L3d3c0c;
  #L3d3bfc.  v2:= new `java.lang.IllegalArgumentException`;
  #L3d3c00.  v3:= "string == null" @kind object;
  #L3d3c04.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d3c0a.  throw v2;
  #L3d3c0c.  if v3 >= 0 then goto L3d3c3e;
  #L3d3c10.  v2:= new `java.lang.IllegalAccessError`;
  #L3d3c14.  v4:= new `java.lang.StringBuilder`;
  #L3d3c18.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d3c1e.  v5:= "beginIndex < 0: " @kind object;
  #L3d3c22.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d3c28.  call temp:= `append`(v4, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d3c2e.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d3c34.  v3:= temp @kind object;
  #L3d3c36.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalAccessError;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d3c3c.  throw v2;
  #L3d3c3e.  if v4 >= v3 then goto L3d3c80;
  #L3d3c42.  v2:= new `java.lang.IllegalArgumentException`;
  #L3d3c46.  v5:= new `java.lang.StringBuilder`;
  #L3d3c4a.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d3c50.  v0:= "endIndex < beginIndex: " @kind object;
  #L3d3c54.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d3c5a.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d3c60.  v4:= " < " @kind object;
  #L3d3c64.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d3c6a.  call temp:= `append`(v5, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d3c70.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d3c76.  v3:= temp @kind object;
  #L3d3c78.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d3c7e.  throw v2;
  #L3d3c80.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3d3c86.  v0:= temp;
  #L3d3c88.  if v4 <= v0 then goto L3d3cd2;
  #L3d3c8c.  v3:= new `java.lang.IllegalArgumentException`;
  #L3d3c90.  v5:= new `java.lang.StringBuilder`;
  #L3d3c94.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d3c9a.  v0:= "endIndex > string.length: " @kind object;
  #L3d3c9e.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d3ca4.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d3caa.  v4:= " > " @kind object;
  #L3d3cae.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d3cb4.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3d3cba.  v2:= temp;
  #L3d3cbc.  call temp:= `append`(v5, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d3cc2.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d3cc8.  v2:= temp @kind object;
  #L3d3cca.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d3cd0.  throw v3;
  #L3d3cd2.  if v5 != 0 then goto L3d3ce6;
  #L3d3cd6.  v2:= new `java.lang.IllegalArgumentException`;
  #L3d3cda.  v3:= "charset == null" @kind object;
  #L3d3cde.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d3ce4.  throw v2;
  #L3d3ce6.  v0:= `@@d.u.a` @type ^`java.nio.charset.Charset` @kind object;
  #L3d3cea.  call temp:= `equals`(v5, v0) @signature `Ljava/nio/charset/Charset;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3d3cf0.  v0:= temp;
  #L3d3cf2.  if v0 == 0 then goto L3d3d00;
  #L3d3cf6.  call temp:= `a`(v1, v2, v3, v4) @signature `Ld/c;.a:(Ljava/lang/String;II)Ld/c;` @kind virtual;
  #L3d3cfc.  v2:= temp @kind object;
  #L3d3cfe.  return v2 @kind object;
  #L3d3d00.  call temp:= `substring`(v2, v3, v4) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L3d3d06.  v2:= temp @kind object;
  #L3d3d08.  call temp:= `getBytes`(v2, v5) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L3d3d0e.  v2:= temp @kind object;
  #L3d3d10.  v3:= 0I;
  #L3d3d12.  v4:= length @variable v2;
  #L3d3d14.  call temp:= `b`(v1, v2, v3, v4) @signature `Ld/c;.b:([BII)Ld/c;` @kind virtual;
  #L3d3d1a.  v2:= temp @kind object;
  #L3d3d1c.  return v2 @kind object;
}
procedure `d.t` `a`(`d.c` v1 @kind this) @signature `Ld/c;.a:()Ld/t;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d44d8.  v0:= `@@d.t.c` @type ^`d.t` @kind object;
  #L3d44dc.  return v0 @kind object;
}
procedure `java.lang.String` `a`(`d.c` v6 @kind this, `long` v7 , `java.nio.charset.Charset` v9 @kind object) @signature `Ld/c;.a:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d4810.  v0:= v6.`d.c.b` @type ^`long` @kind wide;
  #L3d4814.  v2:= 0L;
  #L3d4818.  v4:= v7 @kind wide;
  #L3d481a.  call `a`(v0, v2, v4) @signature `Ld/u;.a:(JJJ)V` @kind static;
  #L3d4820.  if v9 != 0 then goto L3d4834;
  #L3d4824.  v7:= new `java.lang.IllegalArgumentException`;
  #L3d4828.  v8:= "charset == null" @kind object;
  #L3d482c.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d4832.  throw v7;
  #L3d4834.  v0:= 2147483647L;
  #L3d483a.  v2:= lcmp(v7, v0);
  #L3d483e.  if v2 <= 0 then goto L3d4870;
  #L3d4842.  v9:= new `java.lang.IllegalArgumentException`;
  #L3d4846.  v0:= new `java.lang.StringBuilder`;
  #L3d484a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d4850.  v1:= "byteCount > Integer.MAX_VALUE: " @kind object;
  #L3d4854.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d485a.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d4860.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d4866.  v7:= temp @kind object;
  #L3d4868.  call `<init>`(v9, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d486e.  throw v9;
  #L3d4870.  v0:= 0L;
  #L3d4874.  v2:= lcmp(v7, v0);
  #L3d4878.  if v2 != 0 then goto L3d4882;
  #L3d487c.  v7:= "" @kind object;
  #L3d4880.  return v7 @kind object;
  #L3d4882.  v0:= v6.`d.c.a` @type ^`d.o` @kind object;
  #L3d4886.  v1:= v0.`d.o.b` @type ^`int`;
  #L3d488a.  v1:= (`long`) v1 @kind i2l;
  #L3d488c.  v3:= v1 + v7 @kind long;
  #L3d4890.  v1:= v0.`d.o.c` @type ^`int`;
  #L3d4894.  v1:= (`long`) v1 @kind i2l;
  #L3d4896.  v5:= lcmp(v3, v1);
  #L3d489a.  if v5 <= 0 then goto L3d48b2;
  #L3d489e.  v0:= new `java.lang.String`;
  #L3d48a2.  call temp:= `g`(v6, v7) @signature `Ld/c;.g:(J)[B` @kind virtual;
  #L3d48a8.  v7:= temp @kind object;
  #L3d48aa.  call `<init>`(v0, v7, v9) @signature `Ljava/lang/String;.<init>:([BLjava/nio/charset/Charset;)V` @kind direct;
  #L3d48b0.  return v0 @kind object;
  #L3d48b2.  v1:= new `java.lang.String`;
  #L3d48b6.  v2:= v0.`d.o.a` @type ^`byte`[] @kind object;
  #L3d48ba.  v3:= v0.`d.o.b` @type ^`int`;
  #L3d48be.  v4:= (`int`) v7 @kind l2i;
  #L3d48c0.  call `<init>`(v1, v2, v3, v4, v9) @signature `Ljava/lang/String;.<init>:([BIILjava/nio/charset/Charset;)V` @kind direct;
  #L3d48c6.  v9:= v0.`d.o.b` @type ^`int`;
  #L3d48ca.  v2:= (`long`) v9 @kind i2l;
  #L3d48cc.  v4:= v2 + v7 @kind long;
  #L3d48d0.  v9:= (`int`) v4 @kind l2i;
  #L3d48d2.  v0.`d.o.b` @type ^`int` := v9;
  #L3d48d6.  v2:= v6.`d.c.b` @type ^`long` @kind wide;
  #L3d48da.  v4:= v2 - v7 @kind long;
  #L3d48de.  v6.`d.c.b` @type ^`long` := v4 @kind wide;
  #L3d48e2.  v7:= v0.`d.o.b` @type ^`int`;
  #L3d48e6.  v8:= v0.`d.o.c` @type ^`int`;
  #L3d48ea.  if v7 != v8 then goto L3d4900;
  #L3d48ee.  call temp:= `b`(v0) @signature `Ld/o;.b:()Ld/o;` @kind virtual;
  #L3d48f4.  v7:= temp @kind object;
  #L3d48f6.  v6.`d.c.a` @type ^`d.o` := v7 @kind object;
  #L3d48fa.  call `a`(v0) @signature `Ld/p;.a:(Ld/o;)V` @kind static;
  #L3d4900.  return v1 @kind object;
}
procedure `void` `a`(`d.c` v3 @kind this, `long` v4 ) @signature `Ld/c;.a:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3d5174.  v0:= v3.`d.c.b` @type ^`long` @kind wide;
  #L3d5178.  v2:= lcmp(v0, v4);
  #L3d517c.  if v2 >= 0 then goto L3d518c;
  #L3d5180.  v4:= new `java.io.EOFException`;
  #L3d5184.  call `<init>`(v4) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L3d518a.  throw v4;
  #L3d518c.  return @kind void;
}
procedure `void` `a`(`d.c` v3 @kind this, `byte`[] v4 @kind object) @signature `Ld/c;.a:([B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3d5138.  v0:= 0I;
  #L3d513a.  v1:= length @variable v4;
  #L3d513c.  if v0 >= v1 then goto L3d5162;
  #L3d5140.  v1:= length @variable v4;
  #L3d5142.  v1:= v1 - v0 @kind int;
  #L3d5144.  call temp:= `a`(v3, v4, v0, v1) @signature `Ld/c;.a:([BII)I` @kind virtual;
  #L3d514a.  v1:= temp;
  #L3d514c.  v2:= -1I;
  #L3d514e.  if v1 != v2 then goto L3d515e;
  #L3d5152.  v4:= new `java.io.EOFException`;
  #L3d5156.  call `<init>`(v4) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L3d515c.  throw v4;
  #L3d515e.  v0:= v0 + v1 @kind int;
  #L3d5160.  goto L3d513a;
  #L3d5162.  return @kind void;
}
procedure `void` `a_`(`d.c` v7 @kind this, `d.c` v8 @kind object, `long` v9 ) @signature `Ld/c;.a_:(Ld/c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3d51a0.  if v8 != 0 then goto L3d51b4;
  #L3d51a4.  v8:= new `java.lang.IllegalArgumentException`;
  #L3d51a8.  v9:= "source == null" @kind object;
  #L3d51ac.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d51b2.  throw v8;
  #L3d51b4.  if v8 != v7 then goto L3d51c8;
  #L3d51b8.  v8:= new `java.lang.IllegalArgumentException`;
  #L3d51bc.  v9:= "source == this" @kind object;
  #L3d51c0.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d51c6.  throw v8;
  #L3d51c8.  v0:= v8.`d.c.b` @type ^`long` @kind wide;
  #L3d51cc.  v2:= 0L;
  #L3d51d0.  v4:= v9 @kind wide;
  #L3d51d2.  call `a`(v0, v2, v4) @signature `Ld/u;.a:(JJJ)V` @kind static;
  #L3d51d8.  v0:= 0L;
  #L3d51dc.  v2:= lcmp(v9, v0);
  #L3d51e0.  if v2 <= 0 then goto L3d52fa;
  #L3d51e4.  v0:= v8.`d.c.a` @type ^`d.o` @kind object;
  #L3d51e8.  v0:= v0.`d.o.c` @type ^`int`;
  #L3d51ec.  v1:= v8.`d.c.a` @type ^`d.o` @kind object;
  #L3d51f0.  v1:= v1.`d.o.b` @type ^`int`;
  #L3d51f4.  v0:= v0 - v1 @kind int;
  #L3d51f6.  v0:= (`long`) v0 @kind i2l;
  #L3d51f8.  v2:= lcmp(v9, v0);
  #L3d51fc.  if v2 >= 0 then goto L3d5284;
  #L3d5200.  v0:= v7.`d.c.a` @type ^`d.o` @kind object;
  #L3d5204.  if v0 == 0 then goto L3d5212;
  #L3d5208.  v0:= v7.`d.c.a` @type ^`d.o` @kind object;
  #L3d520c.  v0:= v0.`d.o.g` @type ^`d.o` @kind object;
  #L3d5210.  goto L3d5214;
  #L3d5212.  v0:= 0I;
  #L3d5214.  if v0 == 0 then goto L3d5272;
  #L3d5218.  v1:= v0.`d.o.e` @type ^`boolean` @kind boolean;
  #L3d521c.  if v1 == 0 then goto L3d5272;
  #L3d5220.  v1:= v0.`d.o.c` @type ^`int`;
  #L3d5224.  v1:= (`long`) v1 @kind i2l;
  #L3d5226.  v3:= v9 + v1 @kind long;
  #L3d522a.  v1:= v0.`d.o.d` @type ^`boolean` @kind boolean;
  #L3d522e.  if v1 == 0 then goto L3d5236;
  #L3d5232.  v1:= 0I;
  #L3d5234.  goto L3d523a;
  #L3d5236.  v1:= v0.`d.o.b` @type ^`int`;
  #L3d523a.  v1:= (`long`) v1 @kind i2l;
  #L3d523c.  v5:= v3 - v1 @kind long;
  #L3d5240.  v1:= 8192L;
  #L3d5244.  v3:= lcmp(v5, v1);
  #L3d5248.  if v3 > 0 then goto L3d5272;
  #L3d524c.  v1:= v8.`d.c.a` @type ^`d.o` @kind object;
  #L3d5250.  v2:= (`int`) v9 @kind l2i;
  #L3d5252.  call `a`(v1, v0, v2) @signature `Ld/o;.a:(Ld/o;I)V` @kind virtual;
  #L3d5258.  v0:= v8.`d.c.b` @type ^`long` @kind wide;
  #L3d525c.  v2:= v0 - v9 @kind long;
  #L3d5260.  v8.`d.c.b` @type ^`long` := v2 @kind wide;
  #L3d5264.  v0:= v7.`d.c.b` @type ^`long` @kind wide;
  #L3d5268.  v2:= v0 + v9 @kind long;
  #L3d526c.  v7.`d.c.b` @type ^`long` := v2 @kind wide;
  #L3d5270.  return @kind void;
  #L3d5272.  v0:= v8.`d.c.a` @type ^`d.o` @kind object;
  #L3d5276.  v1:= (`int`) v9 @kind l2i;
  #L3d5278.  call temp:= `a`(v0, v1) @signature `Ld/o;.a:(I)Ld/o;` @kind virtual;
  #L3d527e.  v0:= temp @kind object;
  #L3d5280.  v8.`d.c.a` @type ^`d.o` := v0 @kind object;
  #L3d5284.  v0:= v8.`d.c.a` @type ^`d.o` @kind object;
  #L3d5288.  v1:= v0.`d.o.c` @type ^`int`;
  #L3d528c.  v2:= v0.`d.o.b` @type ^`int`;
  #L3d5290.  v1:= v1 - v2 @kind int;
  #L3d5292.  v1:= (`long`) v1 @kind i2l;
  #L3d5294.  call temp:= `b`(v0) @signature `Ld/o;.b:()Ld/o;` @kind virtual;
  #L3d529a.  v3:= temp @kind object;
  #L3d529c.  v8.`d.c.a` @type ^`d.o` := v3 @kind object;
  #L3d52a0.  v3:= v7.`d.c.a` @type ^`d.o` @kind object;
  #L3d52a4.  if v3 != 0 then goto L3d52c2;
  #L3d52a8.  v7.`d.c.a` @type ^`d.o` := v0 @kind object;
  #L3d52ac.  v0:= v7.`d.c.a` @type ^`d.o` @kind object;
  #L3d52b0.  v3:= v7.`d.c.a` @type ^`d.o` @kind object;
  #L3d52b4.  v4:= v7.`d.c.a` @type ^`d.o` @kind object;
  #L3d52b8.  v3.`d.o.g` @type ^`d.o` := v4 @kind object;
  #L3d52bc.  v0.`d.o.f` @type ^`d.o` := v4 @kind object;
  #L3d52c0.  goto L3d52d8;
  #L3d52c2.  v3:= v7.`d.c.a` @type ^`d.o` @kind object;
  #L3d52c6.  v3:= v3.`d.o.g` @type ^`d.o` @kind object;
  #L3d52ca.  call temp:= `a`(v3, v0) @signature `Ld/o;.a:(Ld/o;)Ld/o;` @kind virtual;
  #L3d52d0.  v0:= temp @kind object;
  #L3d52d2.  call `c`(v0) @signature `Ld/o;.c:()V` @kind virtual;
  #L3d52d8.  v3:= v8.`d.c.b` @type ^`long` @kind wide;
  #L3d52dc.  v5:= v3 - v1 @kind long;
  #L3d52e0.  v8.`d.c.b` @type ^`long` := v5 @kind wide;
  #L3d52e4.  v3:= v7.`d.c.b` @type ^`long` @kind wide;
  #L3d52e8.  v5:= v3 + v1 @kind long;
  #L3d52ec.  v7.`d.c.b` @type ^`long` := v5 @kind wide;
  #L3d52f0.  v3:= v9 - v1 @kind long;
  #L3d52f4.  v9:= v3 @kind wide;
  #L3d52f6.  goto L3d51d8;
  #L3d52fa.  return @kind void;
}
procedure `byte` `b`(`d.c` v6 @kind this, `long` v7 ) @signature `Ld/c;.b:(J)B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d3564.  v0:= v6.`d.c.b` @type ^`long` @kind wide;
  #L3d3568.  v4:= 1L;
  #L3d356c.  v2:= v7 @kind wide;
  #L3d356e.  call `a`(v0, v2, v4) @signature `Ld/u;.a:(JJJ)V` @kind static;
  #L3d3574.  v0:= v6.`d.c.b` @type ^`long` @kind wide;
  #L3d3578.  v2:= v0 - v7 @kind long;
  #L3d357c.  v0:= lcmp(v2, v7);
  #L3d3580.  if v0 <= 0 then goto L3d35bc;
  #L3d3584.  v0:= v6.`d.c.a` @type ^`d.o` @kind object;
  #L3d3588.  v1:= v0.`d.o.c` @type ^`int`;
  #L3d358c.  v2:= v0.`d.o.b` @type ^`int`;
  #L3d3590.  v1:= v1 - v2 @kind int;
  #L3d3592.  v1:= (`long`) v1 @kind i2l;
  #L3d3594.  v3:= lcmp(v7, v1);
  #L3d3598.  if v3 >= 0 then goto L3d35ae;
  #L3d359c.  v1:= v0.`d.o.a` @type ^`byte`[] @kind object;
  #L3d35a0.  v0:= v0.`d.o.b` @type ^`int`;
  #L3d35a4.  v7:= (`int`) v7 @kind l2i;
  #L3d35a6.  v0:= v0 + v7 @kind int;
  #L3d35a8.  v7:= v1[v0] @kind byte;
  #L3d35ac.  return v7;
  #L3d35ae.  v3:= 0I;
  #L3d35b0.  v3:= v7 - v1 @kind long;
  #L3d35b4.  v0:= v0.`d.o.f` @type ^`d.o` @kind object;
  #L3d35b8.  v7:= v3 @kind wide;
  #L3d35ba.  goto L3d3588;
  #L3d35bc.  v0:= v6.`d.c.b` @type ^`long` @kind wide;
  #L3d35c0.  v2:= v7 - v0 @kind long;
  #L3d35c4.  v7:= v6.`d.c.a` @type ^`d.o` @kind object;
  #L3d35c8.  v7:= v7.`d.o.g` @type ^`d.o` @kind object;
  #L3d35cc.  v8:= v7.`d.o.c` @type ^`int`;
  #L3d35d0.  v0:= v7.`d.o.b` @type ^`int`;
  #L3d35d4.  v8:= v8 - v0 @kind int;
  #L3d35d6.  v0:= (`long`) v8 @kind i2l;
  #L3d35d8.  v4:= v2 + v0 @kind long;
  #L3d35dc.  v0:= 0L;
  #L3d35e0.  v8:= lcmp(v4, v0);
  #L3d35e4.  if v8 < 0 then goto L3d35fa;
  #L3d35e8.  v8:= v7.`d.o.a` @type ^`byte`[] @kind object;
  #L3d35ec.  v7:= v7.`d.o.b` @type ^`int`;
  #L3d35f0.  v0:= (`int`) v4 @kind l2i;
  #L3d35f2.  v7:= v7 + v0 @kind int;
  #L3d35f4.  v7:= v8[v7] @kind byte;
  #L3d35f8.  return v7;
  #L3d35fa.  v7:= v7.`d.o.g` @type ^`d.o` @kind object;
  #L3d35fe.  v2:= v4 @kind wide;
  #L3d3600.  goto L3d35cc;
}
procedure `long` `b`(`d.c` v2 @kind this) @signature `Ld/c;.b:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3d4df8.  v0:= v2.`d.c.b` @type ^`long` @kind wide;
  #L3d4dfc.  return v0 @kind wide;
}
procedure `d.c` `b`(`d.c` v6 @kind this, `int` v7 ) @signature `Ld/c;.b:(I)Ld/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d3de8.  v0:= 1I;
  #L3d3dea.  call temp:= `e`(v6, v0) @signature `Ld/c;.e:(I)Ld/o;` @kind virtual;
  #L3d3df0.  v0:= temp @kind object;
  #L3d3df2.  v1:= v0.`d.o.a` @type ^`byte`[] @kind object;
  #L3d3df6.  v2:= v0.`d.o.c` @type ^`int`;
  #L3d3dfa.  v3:= v2 + 1;
  #L3d3dfe.  v0.`d.o.c` @type ^`int` := v3;
  #L3d3e02.  v7:= (`byte`) v7 @kind i2b;
  #L3d3e04.  v1[v2]:= v7 @kind byte;
  #L3d3e08.  v0:= v6.`d.c.b` @type ^`long` @kind wide;
  #L3d3e0c.  v2:= 1L;
  #L3d3e10.  v4:= v0 + v2 @kind long;
  #L3d3e14.  v6.`d.c.b` @type ^`long` := v4 @kind wide;
  #L3d3e18.  return v6 @kind object;
}
procedure `d.c` `b`(`d.c` v2 @kind this, `byte`[] v3 @kind object) @signature `Ld/c;.b:([B)Ld/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3d3d30.  if v3 != 0 then goto L3d3d44;
  #L3d3d34.  v3:= new `java.lang.IllegalArgumentException`;
  #L3d3d38.  v0:= "source == null" @kind object;
  #L3d3d3c.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d3d42.  throw v3;
  #L3d3d44.  v0:= 0I;
  #L3d3d46.  v1:= length @variable v3;
  #L3d3d48.  call temp:= `b`(v2, v3, v0, v1) @signature `Ld/c;.b:([BII)Ld/c;` @kind virtual;
  #L3d3d4e.  v3:= temp @kind object;
  #L3d3d50.  return v3 @kind object;
}
procedure `d.c` `b`(`d.c` v9 @kind this, `byte`[] v10 @kind object, `int` v11 , `int` v12 ) @signature `Ld/c;.b:([BII)Ld/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3d3d64.  if v10 != 0 then goto L3d3d78;
  #L3d3d68.  v10:= new `java.lang.IllegalArgumentException`;
  #L3d3d6c.  v11:= "source == null" @kind object;
  #L3d3d70.  call `<init>`(v10, v11) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d3d76.  throw v10;
  #L3d3d78.  v0:= length @variable v10;
  #L3d3d7a.  v1:= (`long`) v0 @kind i2l;
  #L3d3d7c.  v3:= (`long`) v11 @kind i2l;
  #L3d3d7e.  v7:= (`long`) v12 @kind i2l;
  #L3d3d80.  v5:= v7 @kind wide;
  #L3d3d82.  call `a`(v1, v3, v5) @signature `Ld/u;.a:(JJJ)V` @kind static;
  #L3d3d88.  v12:= v12 + v11 @kind int;
  #L3d3d8a.  if v11 >= v12 then goto L3d3dc8;
  #L3d3d8e.  v0:= 1I;
  #L3d3d90.  call temp:= `e`(v9, v0) @signature `Ld/c;.e:(I)Ld/o;` @kind virtual;
  #L3d3d96.  v0:= temp @kind object;
  #L3d3d98.  v1:= v12 - v11 @kind int;
  #L3d3d9c.  v2:= v0.`d.o.c` @type ^`int`;
  #L3d3da0.  v2:= v2 - 8192;
  #L3d3da4.  call temp:= `min`(v1, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3d3daa.  v1:= temp;
  #L3d3dac.  v2:= v0.`d.o.a` @type ^`byte`[] @kind object;
  #L3d3db0.  v3:= v0.`d.o.c` @type ^`int`;
  #L3d3db4.  call `arraycopy`(v10, v11, v2, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3d3dba.  v11:= v11 + v1 @kind int;
  #L3d3dbc.  v2:= v0.`d.o.c` @type ^`int`;
  #L3d3dc0.  v2:= v2 + v1 @kind int;
  #L3d3dc2.  v0.`d.o.c` @type ^`int` := v2;
  #L3d3dc6.  goto L3d3d8a;
  #L3d3dc8.  v10:= v9.`d.c.b` @type ^`long` @kind wide;
  #L3d3dcc.  v0:= v10 + v7 @kind long;
  #L3d3dd0.  v9.`d.c.b` @type ^`long` := v0 @kind wide;
  #L3d3dd4.  return v9 @kind object;
}
procedure `d.d` `b`(`d.c` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Ld/c;.b:(Ljava/lang/String;)Ld/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3d4284.  call temp:= `a`(v0, v1) @signature `Ld/c;.a:(Ljava/lang/String;)Ld/c;` @kind virtual;
  #L3d428a.  v1:= temp @kind object;
  #L3d428c.  return v1 @kind object;
}
procedure `d.c` `c`(`d.c` v0 @kind this) @signature `Ld/c;.c:()Ld/c;` @AccessFlag PUBLIC {
    temp;

  #L3d3e2c.  return v0 @kind object;
}
procedure `d.c` `c`(`d.c` v6 @kind this, `int` v7 ) @signature `Ld/c;.c:(I)Ld/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d3e40.  v0:= 2I;
  #L3d3e42.  call temp:= `e`(v6, v0) @signature `Ld/c;.e:(I)Ld/o;` @kind virtual;
  #L3d3e48.  v0:= temp @kind object;
  #L3d3e4a.  v1:= v0.`d.o.a` @type ^`byte`[] @kind object;
  #L3d3e4e.  v2:= v0.`d.o.c` @type ^`int`;
  #L3d3e52.  v3:= v2 + 1;
  #L3d3e56.  v4:= v7 ^>> 8;
  #L3d3e5a.  v4:= v4 ^& 255;
  #L3d3e5e.  v4:= (`byte`) v4 @kind i2b;
  #L3d3e60.  v1[v2]:= v4 @kind byte;
  #L3d3e64.  v2:= v3 + 1;
  #L3d3e68.  v7:= v7 ^& 255;
  #L3d3e6c.  v7:= (`byte`) v7 @kind i2b;
  #L3d3e6e.  v1[v3]:= v7 @kind byte;
  #L3d3e72.  v0.`d.o.c` @type ^`int` := v2;
  #L3d3e76.  v0:= v6.`d.c.b` @type ^`long` @kind wide;
  #L3d3e7a.  v2:= 2L;
  #L3d3e7e.  v4:= v0 + v2 @kind long;
  #L3d3e82.  v6.`d.c.b` @type ^`long` := v4 @kind wide;
  #L3d3e86.  return v6 @kind object;
}
procedure `d.d` `c`(`d.c` v0 @kind this, `byte`[] v1 @kind object) @signature `Ld/c;.c:([B)Ld/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3d42a0.  call temp:= `b`(v0, v1) @signature `Ld/c;.b:([B)Ld/c;` @kind virtual;
  #L3d42a6.  v1:= temp @kind object;
  #L3d42a8.  return v1 @kind object;
}
procedure `d.d` `c`(`d.c` v0 @kind this, `byte`[] v1 @kind object, `int` v2 , `int` v3 ) @signature `Ld/c;.c:([BII)Ld/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3d42bc.  call temp:= `b`(v0, v1, v2, v3) @signature `Ld/c;.b:([BII)Ld/c;` @kind virtual;
  #L3d42c2.  v1:= temp @kind object;
  #L3d42c4.  return v1 @kind object;
}
procedure `d.f` `c`(`d.c` v1 @kind this, `long` v2 ) @signature `Ld/c;.c:(J)Ld/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d4380.  v0:= new `d.f`;
  #L3d4384.  call temp:= `g`(v1, v2) @signature `Ld/c;.g:(J)[B` @kind virtual;
  #L3d438a.  v2:= temp @kind object;
  #L3d438c.  call `<init>`(v0, v2) @signature `Ld/f;.<init>:([B)V` @kind direct;
  #L3d4392.  return v0 @kind object;
}
procedure `java.lang.Object` `clone`(`d.c` v1 @kind this) @signature `Ld/c;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L3d47f4.  call temp:= `r`(v1) @signature `Ld/c;.r:()Ld/c;` @kind virtual;
  #L3d47fa.  v0:= temp @kind object;
  #L3d47fc.  return v0 @kind object;
}
procedure `void` `close`(`d.c` v0 @kind this) @signature `Ld/c;.close:()V` @AccessFlag PUBLIC {
    temp;

  #L3d530c.  return @kind void;
}
procedure `d.c` `d`(`d.c` v0 @kind this) @signature `Ld/c;.d:()Ld/c;` @AccessFlag PUBLIC {
    temp;

  #L3d3e98.  return v0 @kind object;
}
procedure `d.c` `d`(`d.c` v6 @kind this, `int` v7 ) @signature `Ld/c;.d:(I)Ld/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d3eac.  v0:= 4I;
  #L3d3eae.  call temp:= `e`(v6, v0) @signature `Ld/c;.e:(I)Ld/o;` @kind virtual;
  #L3d3eb4.  v0:= temp @kind object;
  #L3d3eb6.  v1:= v0.`d.o.a` @type ^`byte`[] @kind object;
  #L3d3eba.  v2:= v0.`d.o.c` @type ^`int`;
  #L3d3ebe.  v3:= v2 + 1;
  #L3d3ec2.  v4:= v7 ^>> 24;
  #L3d3ec6.  v4:= v4 ^& 255;
  #L3d3eca.  v4:= (`byte`) v4 @kind i2b;
  #L3d3ecc.  v1[v2]:= v4 @kind byte;
  #L3d3ed0.  v2:= v3 + 1;
  #L3d3ed4.  v4:= v7 ^>> 16;
  #L3d3ed8.  v4:= v4 ^& 255;
  #L3d3edc.  v4:= (`byte`) v4 @kind i2b;
  #L3d3ede.  v1[v3]:= v4 @kind byte;
  #L3d3ee2.  v3:= v2 + 1;
  #L3d3ee6.  v4:= v7 ^>> 8;
  #L3d3eea.  v4:= v4 ^& 255;
  #L3d3eee.  v4:= (`byte`) v4 @kind i2b;
  #L3d3ef0.  v1[v2]:= v4 @kind byte;
  #L3d3ef4.  v2:= v3 + 1;
  #L3d3ef8.  v7:= v7 ^& 255;
  #L3d3efc.  v7:= (`byte`) v7 @kind i2b;
  #L3d3efe.  v1[v3]:= v7 @kind byte;
  #L3d3f02.  v0.`d.o.c` @type ^`int` := v2;
  #L3d3f06.  v0:= v6.`d.c.b` @type ^`long` @kind wide;
  #L3d3f0a.  v2:= 4L;
  #L3d3f0e.  v4:= v0 + v2 @kind long;
  #L3d3f12.  v6.`d.c.b` @type ^`long` := v4 @kind wide;
  #L3d3f16.  return v6 @kind object;
}
procedure `java.lang.String` `d`(`d.c` v1 @kind this, `long` v2 ) @signature `Ld/c;.d:(J)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d4914.  v0:= `@@d.u.a` @type ^`java.nio.charset.Charset` @kind object;
  #L3d4918.  call temp:= `a`(v1, v2, v0) @signature `Ld/c;.a:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L3d491e.  v2:= temp @kind object;
  #L3d4920.  return v2 @kind object;
}
procedure `d.o` `e`(`d.c` v3 @kind this, `int` v4 ) @signature `Ld/c;.e:(I)Ld/o;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3d4454.  v0:= 1I;
  #L3d4456.  if v4 < v0 then goto L3d44ba;
  #L3d445a.  v0:= 8192I;
  #L3d445e.  if v4 <= v0 then goto L3d4464;
  #L3d4462.  goto L3d44ba;
  #L3d4464.  v1:= v3.`d.c.a` @type ^`d.o` @kind object;
  #L3d4468.  if v1 != 0 then goto L3d448e;
  #L3d446c.  call temp:= `a`() @signature `Ld/p;.a:()Ld/o;` @kind static;
  #L3d4472.  v4:= temp @kind object;
  #L3d4474.  v3.`d.c.a` @type ^`d.o` := v4 @kind object;
  #L3d4478.  v4:= v3.`d.c.a` @type ^`d.o` @kind object;
  #L3d447c.  v0:= v3.`d.c.a` @type ^`d.o` @kind object;
  #L3d4480.  v1:= v3.`d.c.a` @type ^`d.o` @kind object;
  #L3d4484.  v0.`d.o.g` @type ^`d.o` := v1 @kind object;
  #L3d4488.  v4.`d.o.f` @type ^`d.o` := v1 @kind object;
  #L3d448c.  return v1 @kind object;
  #L3d448e.  v1:= v3.`d.c.a` @type ^`d.o` @kind object;
  #L3d4492.  v1:= v1.`d.o.g` @type ^`d.o` @kind object;
  #L3d4496.  v2:= v1.`d.o.c` @type ^`int`;
  #L3d449a.  v2:= v2 + v4 @kind int;
  #L3d449c.  if v2 > v0 then goto L3d44a8;
  #L3d44a0.  v4:= v1.`d.o.e` @type ^`boolean` @kind boolean;
  #L3d44a4.  if v4 != 0 then goto L3d44b8;
  #L3d44a8.  call temp:= `a`() @signature `Ld/p;.a:()Ld/o;` @kind static;
  #L3d44ae.  v4:= temp @kind object;
  #L3d44b0.  call temp:= `a`(v1, v4) @signature `Ld/o;.a:(Ld/o;)Ld/o;` @kind virtual;
  #L3d44b6.  v1:= temp @kind object;
  #L3d44b8.  return v1 @kind object;
  #L3d44ba.  v4:= new `java.lang.IllegalArgumentException`;
  #L3d44be.  call `<init>`(v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L3d44c4.  throw v4;
}
procedure `java.lang.String` `e`(`d.c` v11 @kind this, `long` v12 ) @signature `Ld/c;.e:(J)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L3d4934.  v0:= 0L;
  #L3d4938.  v2:= lcmp(v12, v0);
  #L3d493c.  if v2 >= 0 then goto L3d496e;
  #L3d4940.  v0:= new `java.lang.IllegalArgumentException`;
  #L3d4944.  v1:= new `java.lang.StringBuilder`;
  #L3d4948.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d494e.  v2:= "limit < 0: " @kind object;
  #L3d4952.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d4958.  call temp:= `append`(v1, v12) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d495e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d4964.  v12:= temp @kind object;
  #L3d4966.  call `<init>`(v0, v12) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d496c.  throw v0;
  #L3d496e.  v0:= 9223372036854775807L;
  #L3d4978.  v2:= lcmp(v12, v0);
  #L3d497c.  v3:= 1L;
  #L3d4980.  if v2 != 0 then goto L3d4986;
  #L3d4984.  goto L3d498c;
  #L3d4986.  v0:= 0I;
  #L3d4988.  v0:= v12 + v3 @kind long;
  #L3d498c.  v6:= 10I;
  #L3d4990.  v7:= 0L;
  #L3d4994.  v5:= v11 @kind object;
  #L3d4996.  v9:= v0 @kind wide;
  #L3d4998.  call temp:= `a`(v5, v6, v7, v9) @signature `Ld/c;.a:(BJJ)J` @kind virtual;
  #L3d499e.  v5:= temp @kind wide;
  #L3d49a0.  v7:= -1L;
  #L3d49a4.  v2:= lcmp(v5, v7);
  #L3d49a8.  if v2 == 0 then goto L3d49b6;
  #L3d49ac.  call temp:= `f`(v11, v5) @signature `Ld/c;.f:(J)Ljava/lang/String;` @kind virtual;
  #L3d49b2.  v12:= temp @kind object;
  #L3d49b4.  return v12 @kind object;
  #L3d49b6.  call temp:= `b`(v11) @signature `Ld/c;.b:()J` @kind virtual;
  #L3d49bc.  v5:= temp @kind wide;
  #L3d49be.  v2:= lcmp(v0, v5);
  #L3d49c2.  if v2 >= 0 then goto L3d49f4;
  #L3d49c6.  v5:= v0 - v3 @kind long;
  #L3d49ca.  call temp:= `b`(v11, v5) @signature `Ld/c;.b:(J)B` @kind virtual;
  #L3d49d0.  v2:= temp;
  #L3d49d2.  v3:= 13I;
  #L3d49d6.  if v2 != v3 then goto L3d49f4;
  #L3d49da.  call temp:= `b`(v11, v0) @signature `Ld/c;.b:(J)B` @kind virtual;
  #L3d49e0.  v2:= temp;
  #L3d49e2.  v3:= 10I;
  #L3d49e6.  if v2 != v3 then goto L3d49f4;
  #L3d49ea.  call temp:= `f`(v11, v0) @signature `Ld/c;.f:(J)Ljava/lang/String;` @kind virtual;
  #L3d49f0.  v12:= temp @kind object;
  #L3d49f2.  return v12 @kind object;
  #L3d49f4.  v6:= new `d.c`;
  #L3d49f8.  call `<init>`(v6) @signature `Ld/c;.<init>:()V` @kind direct;
  #L3d49fe.  v2:= 0L;
  #L3d4a02.  v0:= 32L;
  #L3d4a06.  call temp:= `b`(v11) @signature `Ld/c;.b:()J` @kind virtual;
  #L3d4a0c.  v4:= temp @kind wide;
  #L3d4a0e.  call temp:= `min`(v0, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3d4a14.  v4:= temp @kind wide;
  #L3d4a16.  v0:= v11 @kind object;
  #L3d4a18.  v1:= v6 @kind object;
  #L3d4a1a.  call temp:= `a`(v0, v1, v2, v4) @signature `Ld/c;.a:(Ld/c;JJ)Ld/c;` @kind virtual;
  #L3d4a20.  v0:= new `java.io.EOFException`;
  #L3d4a24.  v1:= new `java.lang.StringBuilder`;
  #L3d4a28.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d4a2e.  v2:= "\\n not found: limit=" @kind object;
  #L3d4a32.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d4a38.  call temp:= `b`(v11) @signature `Ld/c;.b:()J` @kind virtual;
  #L3d4a3e.  v2:= temp @kind wide;
  #L3d4a40.  call temp:= `min`(v2, v12) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3d4a46.  v12:= temp @kind wide;
  #L3d4a48.  call temp:= `append`(v1, v12) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d4a4e.  v12:= " content=" @kind object;
  #L3d4a52.  call temp:= `append`(v1, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d4a58.  call temp:= `m`(v6) @signature `Ld/c;.m:()Ld/f;` @kind virtual;
  #L3d4a5e.  v12:= temp @kind object;
  #L3d4a60.  call temp:= `e`(v12) @signature `Ld/f;.e:()Ljava/lang/String;` @kind virtual;
  #L3d4a66.  v12:= temp @kind object;
  #L3d4a68.  call temp:= `append`(v1, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d4a6e.  v12:= 8230I;
  #L3d4a72.  call temp:= `append`(v1, v12) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d4a78.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d4a7e.  v12:= temp @kind object;
  #L3d4a80.  call `<init>`(v0, v12) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d4a86.  throw v0;
}
procedure `boolean` `e`(`d.c` v5 @kind this) @signature `Ld/c;.e:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3d343c.  v0:= v5.`d.c.b` @type ^`long` @kind wide;
  #L3d3440.  v2:= 0L;
  #L3d3444.  v4:= lcmp(v0, v2);
  #L3d3448.  if v4 != 0 then goto L3d3450;
  #L3d344c.  v0:= 1I;
  #L3d344e.  goto L3d3452;
  #L3d3450.  v0:= 0I;
  #L3d3452.  return v0;
}
procedure `boolean` `equals`(`d.c` v13 @kind this, `java.lang.Object` v14 @kind object) @signature `Ld/c;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L3d3464.  v0:= 1I;
  #L3d3466.  if v13 != v14 then goto L3d346c;
  #L3d346a.  return v0;
  #L3d346c.  v1:= instanceof @variable v14 @type ^`d.c` @kind boolean;
  #L3d3470.  v2:= 0I;
  #L3d3472.  if v1 != 0 then goto L3d3478;
  #L3d3476.  return v2;
  #L3d3478.  v14:= (`d.c`) v14 @kind object;
  #L3d347c.  v3:= v13.`d.c.b` @type ^`long` @kind wide;
  #L3d3480.  v5:= v14.`d.c.b` @type ^`long` @kind wide;
  #L3d3484.  v1:= lcmp(v3, v5);
  #L3d3488.  if v1 == 0 then goto L3d348e;
  #L3d348c.  return v2;
  #L3d348e.  v3:= v13.`d.c.b` @type ^`long` @kind wide;
  #L3d3492.  v5:= 0L;
  #L3d3496.  v1:= lcmp(v3, v5);
  #L3d349a.  if v1 != 0 then goto L3d34a0;
  #L3d349e.  return v0;
  #L3d34a0.  v1:= v13.`d.c.a` @type ^`d.o` @kind object;
  #L3d34a4.  v14:= v14.`d.c.a` @type ^`d.o` @kind object;
  #L3d34a8.  v3:= v1.`d.o.b` @type ^`int`;
  #L3d34ac.  v4:= v14.`d.o.b` @type ^`int`;
  #L3d34b0.  v7:= v13.`d.c.b` @type ^`long` @kind wide;
  #L3d34b4.  v9:= lcmp(v5, v7);
  #L3d34b8.  if v9 >= 0 then goto L3d353c;
  #L3d34bc.  v7:= v1.`d.o.c` @type ^`int`;
  #L3d34c0.  v7:= v7 - v3 @kind int;
  #L3d34c2.  v8:= v14.`d.o.c` @type ^`int`;
  #L3d34c6.  v8:= v8 - v4 @kind int;
  #L3d34c8.  call temp:= `min`(v7, v8) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3d34ce.  v7:= temp;
  #L3d34d0.  v7:= (`long`) v7 @kind i2l;
  #L3d34d2.  v9:= v4;
  #L3d34d4.  v4:= v3;
  #L3d34d6.  v3:= 0I;
  #L3d34d8.  v10:= (`long`) v3 @kind i2l;
  #L3d34da.  v12:= lcmp(v10, v7);
  #L3d34de.  if v12 >= 0 then goto L3d350a;
  #L3d34e2.  v10:= v1.`d.o.a` @type ^`byte`[] @kind object;
  #L3d34e6.  v11:= v4 + 1;
  #L3d34ea.  v4:= v10[v4] @kind byte;
  #L3d34ee.  v10:= v14.`d.o.a` @type ^`byte`[] @kind object;
  #L3d34f2.  v12:= v9 + 1;
  #L3d34f6.  v9:= v10[v9] @kind byte;
  #L3d34fa.  if v4 == v9 then goto L3d3500;
  #L3d34fe.  return v2;
  #L3d3500.  v3:= v3 + 1;
  #L3d3504.  v4:= v11;
  #L3d3506.  v9:= v12;
  #L3d3508.  goto L3d34d8;
  #L3d350a.  v3:= v1.`d.o.c` @type ^`int`;
  #L3d350e.  if v4 != v3 then goto L3d351c;
  #L3d3512.  v1:= v1.`d.o.f` @type ^`d.o` @kind object;
  #L3d3516.  v3:= v1.`d.o.b` @type ^`int`;
  #L3d351a.  goto L3d351e;
  #L3d351c.  v3:= v4;
  #L3d351e.  v4:= v14.`d.o.c` @type ^`int`;
  #L3d3522.  if v9 != v4 then goto L3d3530;
  #L3d3526.  v14:= v14.`d.o.f` @type ^`d.o` @kind object;
  #L3d352a.  v4:= v14.`d.o.b` @type ^`int`;
  #L3d352e.  goto L3d3532;
  #L3d3530.  v4:= v9;
  #L3d3532.  v9:= 0I;
  #L3d3534.  v9:= v5 + v7 @kind long;
  #L3d3538.  v5:= v9 @kind wide;
  #L3d353a.  goto L3d34b0;
  #L3d353c.  return v0;
}
procedure `long` `f`(`d.c` v6 @kind this) @signature `Ld/c;.f:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d4e10.  v0:= v6.`d.c.b` @type ^`long` @kind wide;
  #L3d4e14.  v2:= 0L;
  #L3d4e18.  v4:= lcmp(v0, v2);
  #L3d4e1c.  if v4 != 0 then goto L3d4e22;
  #L3d4e20.  return v2 @kind wide;
  #L3d4e22.  v2:= v6.`d.c.a` @type ^`d.o` @kind object;
  #L3d4e26.  v2:= v2.`d.o.g` @type ^`d.o` @kind object;
  #L3d4e2a.  v3:= v2.`d.o.c` @type ^`int`;
  #L3d4e2e.  v4:= 8192I;
  #L3d4e32.  if v3 >= v4 then goto L3d4e50;
  #L3d4e36.  v3:= v2.`d.o.e` @type ^`boolean` @kind boolean;
  #L3d4e3a.  if v3 == 0 then goto L3d4e50;
  #L3d4e3e.  v3:= v2.`d.o.c` @type ^`int`;
  #L3d4e42.  v2:= v2.`d.o.b` @type ^`int`;
  #L3d4e46.  v3:= v3 - v2 @kind int;
  #L3d4e48.  v2:= (`long`) v3 @kind i2l;
  #L3d4e4a.  v4:= v0 - v2 @kind long;
  #L3d4e4e.  v0:= v4 @kind wide;
  #L3d4e50.  return v0 @kind wide;
}
procedure `d.f` `f`(`d.c` v1 @kind this, `int` v2 ) @signature `Ld/c;.f:(I)Ld/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d43a4.  if v2 != 0 then goto L3d43ae;
  #L3d43a8.  v2:= `@@d.f.b` @type ^`d.f` @kind object;
  #L3d43ac.  return v2 @kind object;
  #L3d43ae.  v0:= new `d.q`;
  #L3d43b2.  call `<init>`(v0, v1, v2) @signature `Ld/q;.<init>:(Ld/c;I)V` @kind direct;
  #L3d43b8.  return v0 @kind object;
}
procedure `java.lang.String` `f`(`d.c` v6 @kind this, `long` v7 ) @signature `Ld/c;.f:(J)Ljava/lang/String;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d4a98.  v0:= 0L;
  #L3d4a9c.  v2:= lcmp(v7, v0);
  #L3d4aa0.  v0:= 1L;
  #L3d4aa4.  if v2 <= 0 then goto L3d4ad0;
  #L3d4aa8.  v2:= v7 - v0 @kind long;
  #L3d4aac.  call temp:= `b`(v6, v2) @signature `Ld/c;.b:(J)B` @kind virtual;
  #L3d4ab2.  v4:= temp;
  #L3d4ab4.  v5:= 13I;
  #L3d4ab8.  if v4 != v5 then goto L3d4ad0;
  #L3d4abc.  call temp:= `d`(v6, v2) @signature `Ld/c;.d:(J)Ljava/lang/String;` @kind virtual;
  #L3d4ac2.  v7:= temp @kind object;
  #L3d4ac4.  v0:= 2L;
  #L3d4ac8.  call `h`(v6, v0) @signature `Ld/c;.h:(J)V` @kind virtual;
  #L3d4ace.  return v7 @kind object;
  #L3d4ad0.  call temp:= `d`(v6, v7) @signature `Ld/c;.d:(J)Ljava/lang/String;` @kind virtual;
  #L3d4ad6.  v7:= temp @kind object;
  #L3d4ad8.  call `h`(v6, v0) @signature `Ld/c;.h:(J)V` @kind virtual;
  #L3d4ade.  return v7 @kind object;
}
procedure `void` `flush`(`d.c` v0 @kind this) @signature `Ld/c;.flush:()V` @AccessFlag PUBLIC {
    temp;

  #L3d5320.  return @kind void;
}
procedure `byte` `g`(`d.c` v11 @kind this) @signature `Ld/c;.g:()B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L3d3614.  v0:= v11.`d.c.b` @type ^`long` @kind wide;
  #L3d3618.  v2:= 0L;
  #L3d361c.  v4:= lcmp(v0, v2);
  #L3d3620.  if v4 != 0 then goto L3d3634;
  #L3d3624.  v0:= new `java.lang.IllegalStateException`;
  #L3d3628.  v1:= "size == 0" @kind object;
  #L3d362c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d3632.  throw v0;
  #L3d3634.  v0:= v11.`d.c.a` @type ^`d.o` @kind object;
  #L3d3638.  v1:= v0.`d.o.b` @type ^`int`;
  #L3d363c.  v2:= v0.`d.o.c` @type ^`int`;
  #L3d3640.  v3:= v0.`d.o.a` @type ^`byte`[] @kind object;
  #L3d3644.  v4:= v1 + 1;
  #L3d3648.  v1:= v3[v1] @kind byte;
  #L3d364c.  v5:= v11.`d.c.b` @type ^`long` @kind wide;
  #L3d3650.  v7:= 1L;
  #L3d3654.  v9:= v5 - v7 @kind long;
  #L3d3658.  v11.`d.c.b` @type ^`long` := v9 @kind wide;
  #L3d365c.  if v4 != v2 then goto L3d3674;
  #L3d3660.  call temp:= `b`(v0) @signature `Ld/o;.b:()Ld/o;` @kind virtual;
  #L3d3666.  v2:= temp @kind object;
  #L3d3668.  v11.`d.c.a` @type ^`d.o` := v2 @kind object;
  #L3d366c.  call `a`(v0) @signature `Ld/p;.a:(Ld/o;)V` @kind static;
  #L3d3672.  goto L3d3678;
  #L3d3674.  v0.`d.o.b` @type ^`int` := v4;
  #L3d3678.  return v1;
}
procedure `d.d` `g`(`d.c` v0 @kind this, `int` v1 ) @signature `Ld/c;.g:(I)Ld/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3d42d8.  call temp:= `d`(v0, v1) @signature `Ld/c;.d:(I)Ld/c;` @kind virtual;
  #L3d42de.  v1:= temp @kind object;
  #L3d42e0.  return v1 @kind object;
}
procedure `byte`[] `g`(`d.c` v6 @kind this, `long` v7 ) @signature `Ld/c;.g:(J)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d368c.  v0:= v6.`d.c.b` @type ^`long` @kind wide;
  #L3d3690.  v2:= 0L;
  #L3d3694.  v4:= v7 @kind wide;
  #L3d3696.  call `a`(v0, v2, v4) @signature `Ld/u;.a:(JJJ)V` @kind static;
  #L3d369c.  v0:= 2147483647L;
  #L3d36a2.  v2:= lcmp(v7, v0);
  #L3d36a6.  if v2 <= 0 then goto L3d36d8;
  #L3d36aa.  v0:= new `java.lang.IllegalArgumentException`;
  #L3d36ae.  v1:= new `java.lang.StringBuilder`;
  #L3d36b2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d36b8.  v2:= "byteCount > Integer.MAX_VALUE: " @kind object;
  #L3d36bc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d36c2.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d36c8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d36ce.  v7:= temp @kind object;
  #L3d36d0.  call `<init>`(v0, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d36d6.  throw v0;
  #L3d36d8.  v7:= (`int`) v7 @kind l2i;
  #L3d36da.  v7:= new `byte`[v7];
  #L3d36de.  call `a`(v6, v7) @signature `Ld/c;.a:([B)V` @kind virtual;
  #L3d36e4.  return v7 @kind object;
}
procedure `d.d` `h`(`d.c` v0 @kind this, `int` v1 ) @signature `Ld/c;.h:(I)Ld/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3d42f4.  call temp:= `c`(v0, v1) @signature `Ld/c;.c:(I)Ld/c;` @kind virtual;
  #L3d42fa.  v1:= temp @kind object;
  #L3d42fc.  return v1 @kind object;
}
procedure `short` `h`(`d.c` v10 @kind this) @signature `Ld/c;.h:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L3d4fe8.  v0:= v10.`d.c.b` @type ^`long` @kind wide;
  #L3d4fec.  v2:= 2L;
  #L3d4ff0.  v4:= lcmp(v0, v2);
  #L3d4ff4.  if v4 >= 0 then goto L3d502a;
  #L3d4ff8.  v0:= new `java.lang.IllegalStateException`;
  #L3d4ffc.  v1:= new `java.lang.StringBuilder`;
  #L3d5000.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d5006.  v2:= "size < 2: " @kind object;
  #L3d500a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d5010.  v2:= v10.`d.c.b` @type ^`long` @kind wide;
  #L3d5014.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d501a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d5020.  v1:= temp @kind object;
  #L3d5022.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d5028.  throw v0;
  #L3d502a.  v0:= v10.`d.c.a` @type ^`d.o` @kind object;
  #L3d502e.  v1:= v0.`d.o.b` @type ^`int`;
  #L3d5032.  v4:= v0.`d.o.c` @type ^`int`;
  #L3d5036.  v5:= v4 - v1 @kind int;
  #L3d503a.  v6:= 2I;
  #L3d503c.  if v5 >= v6 then goto L3d5062;
  #L3d5040.  call temp:= `g`(v10) @signature `Ld/c;.g:()B` @kind virtual;
  #L3d5046.  v0:= temp;
  #L3d5048.  v0:= v0 ^& 255;
  #L3d504c.  v0:= v0 ^< 8;
  #L3d5050.  call temp:= `g`(v10) @signature `Ld/c;.g:()B` @kind virtual;
  #L3d5056.  v1:= temp;
  #L3d5058.  v1:= v1 ^& 255;
  #L3d505c.  v0:= v0 ^| v1 @kind int;
  #L3d505e.  v0:= (`short`) v0 @kind i2s;
  #L3d5060.  return v0;
  #L3d5062.  v5:= v0.`d.o.a` @type ^`byte`[] @kind object;
  #L3d5066.  v6:= v1 + 1;
  #L3d506a.  v1:= v5[v1] @kind byte;
  #L3d506e.  v1:= v1 ^& 255;
  #L3d5072.  v1:= v1 ^< 8;
  #L3d5076.  v7:= v6 + 1;
  #L3d507a.  v5:= v5[v6] @kind byte;
  #L3d507e.  v5:= v5 ^& 255;
  #L3d5082.  v1:= v1 ^| v5 @kind int;
  #L3d5084.  v5:= v10.`d.c.b` @type ^`long` @kind wide;
  #L3d5088.  v8:= v5 - v2 @kind long;
  #L3d508c.  v10.`d.c.b` @type ^`long` := v8 @kind wide;
  #L3d5090.  if v7 != v4 then goto L3d50a8;
  #L3d5094.  call temp:= `b`(v0) @signature `Ld/o;.b:()Ld/o;` @kind virtual;
  #L3d509a.  v2:= temp @kind object;
  #L3d509c.  v10.`d.c.a` @type ^`d.o` := v2 @kind object;
  #L3d50a0.  call `a`(v0) @signature `Ld/p;.a:(Ld/o;)V` @kind static;
  #L3d50a6.  goto L3d50ac;
  #L3d50a8.  v0.`d.o.b` @type ^`int` := v7;
  #L3d50ac.  v0:= (`short`) v1 @kind i2s;
  #L3d50ae.  return v0;
}
procedure `void` `h`(`d.c` v7 @kind this, `long` v8 ) @signature `Ld/c;.h:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3d5334.  v0:= 0L;
  #L3d5338.  v2:= lcmp(v8, v0);
  #L3d533c.  if v2 <= 0 then goto L3d53c0;
  #L3d5340.  v0:= v7.`d.c.a` @type ^`d.o` @kind object;
  #L3d5344.  if v0 != 0 then goto L3d5354;
  #L3d5348.  v8:= new `java.io.EOFException`;
  #L3d534c.  call `<init>`(v8) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L3d5352.  throw v8;
  #L3d5354.  v0:= v7.`d.c.a` @type ^`d.o` @kind object;
  #L3d5358.  v0:= v0.`d.o.c` @type ^`int`;
  #L3d535c.  v1:= v7.`d.c.a` @type ^`d.o` @kind object;
  #L3d5360.  v1:= v1.`d.o.b` @type ^`int`;
  #L3d5364.  v0:= v0 - v1 @kind int;
  #L3d5366.  v0:= (`long`) v0 @kind i2l;
  #L3d5368.  call temp:= `min`(v8, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3d536e.  v0:= temp @kind wide;
  #L3d5370.  v0:= (`int`) v0 @kind l2i;
  #L3d5372.  v1:= v7.`d.c.b` @type ^`long` @kind wide;
  #L3d5376.  v3:= (`long`) v0 @kind i2l;
  #L3d5378.  v5:= v1 - v3 @kind long;
  #L3d537c.  v7.`d.c.b` @type ^`long` := v5 @kind wide;
  #L3d5380.  v1:= v8 - v3 @kind long;
  #L3d5384.  v8:= v7.`d.c.a` @type ^`d.o` @kind object;
  #L3d5388.  v9:= v8.`d.o.b` @type ^`int`;
  #L3d538c.  v9:= v9 + v0 @kind int;
  #L3d538e.  v8.`d.o.b` @type ^`int` := v9;
  #L3d5392.  v8:= v7.`d.c.a` @type ^`d.o` @kind object;
  #L3d5396.  v8:= v8.`d.o.b` @type ^`int`;
  #L3d539a.  v9:= v7.`d.c.a` @type ^`d.o` @kind object;
  #L3d539e.  v9:= v9.`d.o.c` @type ^`int`;
  #L3d53a2.  if v8 != v9 then goto L3d53bc;
  #L3d53a6.  v8:= v7.`d.c.a` @type ^`d.o` @kind object;
  #L3d53aa.  call temp:= `b`(v8) @signature `Ld/o;.b:()Ld/o;` @kind virtual;
  #L3d53b0.  v9:= temp @kind object;
  #L3d53b2.  v7.`d.c.a` @type ^`d.o` := v9 @kind object;
  #L3d53b6.  call `a`(v8) @signature `Ld/p;.a:(Ld/o;)V` @kind static;
  #L3d53bc.  v8:= v1 @kind wide;
  #L3d53be.  goto L3d5334;
  #L3d53c0.  return @kind void;
}
procedure `int` `hashCode`(`d.c` v5 @kind this) @signature `Ld/c;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3d4574.  v0:= v5.`d.c.a` @type ^`d.o` @kind object;
  #L3d4578.  if v0 != 0 then goto L3d4580;
  #L3d457c.  v0:= 0I;
  #L3d457e.  return v0;
  #L3d4580.  v1:= 1I;
  #L3d4582.  v2:= v0.`d.o.b` @type ^`int`;
  #L3d4586.  v3:= v0.`d.o.c` @type ^`int`;
  #L3d458a.  if v2 >= v3 then goto L3d45a2;
  #L3d458e.  v1:= v1 * 31;
  #L3d4592.  v4:= v0.`d.o.a` @type ^`byte`[] @kind object;
  #L3d4596.  v4:= v4[v2] @kind byte;
  #L3d459a.  v1:= v1 + v4 @kind int;
  #L3d459c.  v2:= v2 + 1;
  #L3d45a0.  goto L3d458a;
  #L3d45a2.  v0:= v0.`d.o.f` @type ^`d.o` @kind object;
  #L3d45a6.  v2:= v5.`d.c.a` @type ^`d.o` @kind object;
  #L3d45aa.  if v0 != v2 then goto L3d4582;
  #L3d45ae.  return v1;
}
procedure `int` `i`(`d.c` v10 @kind this) @signature `Ld/c;.i:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L3d45c0.  v0:= v10.`d.c.b` @type ^`long` @kind wide;
  #L3d45c4.  v2:= 4L;
  #L3d45c8.  v4:= lcmp(v0, v2);
  #L3d45cc.  if v4 >= 0 then goto L3d4602;
  #L3d45d0.  v0:= new `java.lang.IllegalStateException`;
  #L3d45d4.  v1:= new `java.lang.StringBuilder`;
  #L3d45d8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d45de.  v2:= "size < 4: " @kind object;
  #L3d45e2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d45e8.  v2:= v10.`d.c.b` @type ^`long` @kind wide;
  #L3d45ec.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d45f2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d45f8.  v1:= temp @kind object;
  #L3d45fa.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d4600.  throw v0;
  #L3d4602.  v0:= v10.`d.c.a` @type ^`d.o` @kind object;
  #L3d4606.  v1:= v0.`d.o.b` @type ^`int`;
  #L3d460a.  v4:= v0.`d.o.c` @type ^`int`;
  #L3d460e.  v5:= v4 - v1 @kind int;
  #L3d4612.  v6:= 4I;
  #L3d4614.  if v5 >= v6 then goto L3d465c;
  #L3d4618.  call temp:= `g`(v10) @signature `Ld/c;.g:()B` @kind virtual;
  #L3d461e.  v0:= temp;
  #L3d4620.  v0:= v0 ^& 255;
  #L3d4624.  v0:= v0 ^< 24;
  #L3d4628.  call temp:= `g`(v10) @signature `Ld/c;.g:()B` @kind virtual;
  #L3d462e.  v1:= temp;
  #L3d4630.  v1:= v1 ^& 255;
  #L3d4634.  v1:= v1 ^< 16;
  #L3d4638.  v0:= v0 ^| v1 @kind int;
  #L3d463a.  call temp:= `g`(v10) @signature `Ld/c;.g:()B` @kind virtual;
  #L3d4640.  v1:= temp;
  #L3d4642.  v1:= v1 ^& 255;
  #L3d4646.  v1:= v1 ^< 8;
  #L3d464a.  v0:= v0 ^| v1 @kind int;
  #L3d464c.  call temp:= `g`(v10) @signature `Ld/c;.g:()B` @kind virtual;
  #L3d4652.  v1:= temp;
  #L3d4654.  v1:= v1 ^& 255;
  #L3d4658.  v0:= v0 ^| v1 @kind int;
  #L3d465a.  return v0;
  #L3d465c.  v5:= v0.`d.o.a` @type ^`byte`[] @kind object;
  #L3d4660.  v6:= v1 + 1;
  #L3d4664.  v1:= v5[v1] @kind byte;
  #L3d4668.  v1:= v1 ^& 255;
  #L3d466c.  v1:= v1 ^< 24;
  #L3d4670.  v7:= v6 + 1;
  #L3d4674.  v6:= v5[v6] @kind byte;
  #L3d4678.  v6:= v6 ^& 255;
  #L3d467c.  v6:= v6 ^< 16;
  #L3d4680.  v1:= v1 ^| v6 @kind int;
  #L3d4682.  v6:= v7 + 1;
  #L3d4686.  v7:= v5[v7] @kind byte;
  #L3d468a.  v7:= v7 ^& 255;
  #L3d468e.  v7:= v7 ^< 8;
  #L3d4692.  v1:= v1 ^| v7 @kind int;
  #L3d4694.  v7:= v6 + 1;
  #L3d4698.  v5:= v5[v6] @kind byte;
  #L3d469c.  v5:= v5 ^& 255;
  #L3d46a0.  v1:= v1 ^| v5 @kind int;
  #L3d46a2.  v5:= v10.`d.c.b` @type ^`long` @kind wide;
  #L3d46a6.  v8:= v5 - v2 @kind long;
  #L3d46aa.  v10.`d.c.b` @type ^`long` := v8 @kind wide;
  #L3d46ae.  if v7 != v4 then goto L3d46c6;
  #L3d46b2.  call temp:= `b`(v0) @signature `Ld/o;.b:()Ld/o;` @kind virtual;
  #L3d46b8.  v2:= temp @kind object;
  #L3d46ba.  v10.`d.c.a` @type ^`d.o` := v2 @kind object;
  #L3d46be.  call `a`(v0) @signature `Ld/p;.a:(Ld/o;)V` @kind static;
  #L3d46c4.  goto L3d46ca;
  #L3d46c6.  v0.`d.o.b` @type ^`int` := v7;
  #L3d46ca.  return v1;
}
procedure `d.c` `i`(`d.c` v11 @kind this, `long` v12 ) @signature `Ld/c;.i:(J)Ld/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L3d3f28.  v0:= 0L;
  #L3d3f2c.  v2:= lcmp(v12, v0);
  #L3d3f30.  if v2 != 0 then goto L3d3f42;
  #L3d3f34.  v12:= 48I;
  #L3d3f38.  call temp:= `b`(v11, v12) @signature `Ld/c;.b:(I)Ld/c;` @kind virtual;
  #L3d3f3e.  v12:= temp @kind object;
  #L3d3f40.  return v12 @kind object;
  #L3d3f42.  v2:= 0I;
  #L3d3f44.  v3:= lcmp(v12, v0);
  #L3d3f48.  v4:= 1I;
  #L3d3f4a.  if v3 >= 0 then goto L3d3f68;
  #L3d3f4e.  v12:= -v12 @kind long;
  #L3d3f50.  v2:= lcmp(v12, v0);
  #L3d3f54.  if v2 >= 0 then goto L3d3f66;
  #L3d3f58.  v12:= "-9223372036854775808" @kind object;
  #L3d3f5c.  call temp:= `a`(v11, v12) @signature `Ld/c;.a:(Ljava/lang/String;)Ld/c;` @kind virtual;
  #L3d3f62.  v12:= temp @kind object;
  #L3d3f64.  return v12 @kind object;
  #L3d3f66.  v2:= 1I;
  #L3d3f68.  v5:= 100000000L;
  #L3d3f6e.  v3:= lcmp(v12, v5);
  #L3d3f72.  v5:= 10L;
  #L3d3f76.  if v3 >= 0 then goto L3d4000;
  #L3d3f7a.  v7:= 10000L;
  #L3d3f7e.  v3:= lcmp(v12, v7);
  #L3d3f82.  if v3 >= 0 then goto L3d3fbc;
  #L3d3f86.  v7:= 100L;
  #L3d3f8a.  v3:= lcmp(v12, v7);
  #L3d3f8e.  if v3 >= 0 then goto L3d3fa4;
  #L3d3f92.  v3:= lcmp(v12, v5);
  #L3d3f96.  if v3 >= 0 then goto L3d3f9e;
  #L3d3f9a.  goto L3d40f0;
  #L3d3f9e.  v4:= 2I;
  #L3d3fa0.  goto L3d40f0;
  #L3d3fa4.  v3:= 1000L;
  #L3d3fa8.  v7:= lcmp(v12, v3);
  #L3d3fac.  if v7 >= 0 then goto L3d3fb6;
  #L3d3fb0.  v4:= 3I;
  #L3d3fb2.  goto L3d40f0;
  #L3d3fb6.  v4:= 4I;
  #L3d3fb8.  goto L3d40f0;
  #L3d3fbc.  v3:= 1000000L;
  #L3d3fc2.  v7:= lcmp(v12, v3);
  #L3d3fc6.  if v7 >= 0 then goto L3d3fe4;
  #L3d3fca.  v3:= 100000L;
  #L3d3fd0.  v7:= lcmp(v12, v3);
  #L3d3fd4.  if v7 >= 0 then goto L3d3fde;
  #L3d3fd8.  v4:= 5I;
  #L3d3fda.  goto L3d40f0;
  #L3d3fde.  v4:= 6I;
  #L3d3fe0.  goto L3d40f0;
  #L3d3fe4.  v3:= 10000000L;
  #L3d3fea.  v7:= lcmp(v12, v3);
  #L3d3fee.  if v7 >= 0 then goto L3d3ff8;
  #L3d3ff2.  v4:= 7I;
  #L3d3ff4.  goto L3d40f0;
  #L3d3ff8.  v4:= 8I;
  #L3d3ffc.  goto L3d40f0;
  #L3d4000.  v3:= 1000000000000L;
  #L3d400a.  v7:= lcmp(v12, v3);
  #L3d400e.  if v7 >= 0 then goto L3d405c;
  #L3d4012.  v3:= 10000000000L;
  #L3d401c.  v7:= lcmp(v12, v3);
  #L3d4020.  if v7 >= 0 then goto L3d403e;
  #L3d4024.  v3:= 1000000000L;
  #L3d402a.  v7:= lcmp(v12, v3);
  #L3d402e.  if v7 >= 0 then goto L3d4038;
  #L3d4032.  v4:= 9I;
  #L3d4036.  goto L3d40f0;
  #L3d4038.  v4:= 10I;
  #L3d403c.  goto L3d40f0;
  #L3d403e.  v3:= 100000000000L;
  #L3d4048.  v7:= lcmp(v12, v3);
  #L3d404c.  if v7 >= 0 then goto L3d4056;
  #L3d4050.  v4:= 11I;
  #L3d4054.  goto L3d40f0;
  #L3d4056.  v4:= 12I;
  #L3d405a.  goto L3d40f0;
  #L3d405c.  v3:= 1000000000000000L;
  #L3d4066.  v7:= lcmp(v12, v3);
  #L3d406a.  if v7 >= 0 then goto L3d40a4;
  #L3d406e.  v3:= 10000000000000L;
  #L3d4078.  v7:= lcmp(v12, v3);
  #L3d407c.  if v7 >= 0 then goto L3d4086;
  #L3d4080.  v4:= 13I;
  #L3d4084.  goto L3d40f0;
  #L3d4086.  v3:= 100000000000000L;
  #L3d4090.  v7:= lcmp(v12, v3);
  #L3d4094.  if v7 >= 0 then goto L3d409e;
  #L3d4098.  v4:= 14I;
  #L3d409c.  goto L3d40f0;
  #L3d409e.  v4:= 15I;
  #L3d40a2.  goto L3d40f0;
  #L3d40a4.  v3:= 100000000000000000L;
  #L3d40ae.  v7:= lcmp(v12, v3);
  #L3d40b2.  if v7 >= 0 then goto L3d40d4;
  #L3d40b6.  v3:= 10000000000000000L;
  #L3d40c0.  v7:= lcmp(v12, v3);
  #L3d40c4.  if v7 >= 0 then goto L3d40ce;
  #L3d40c8.  v4:= 16I;
  #L3d40cc.  goto L3d40f0;
  #L3d40ce.  v4:= 17I;
  #L3d40d2.  goto L3d40f0;
  #L3d40d4.  v3:= 1000000000000000000L;
  #L3d40de.  v7:= lcmp(v12, v3);
  #L3d40e2.  if v7 >= 0 then goto L3d40ec;
  #L3d40e6.  v4:= 18I;
  #L3d40ea.  goto L3d40f0;
  #L3d40ec.  v4:= 19I;
  #L3d40f0.  if v2 == 0 then goto L3d40f8;
  #L3d40f4.  v4:= v4 + 1;
  #L3d40f8.  call temp:= `e`(v11, v4) @signature `Ld/c;.e:(I)Ld/o;` @kind virtual;
  #L3d40fe.  v3:= temp @kind object;
  #L3d4100.  v7:= v3.`d.o.a` @type ^`byte`[] @kind object;
  #L3d4104.  v8:= v3.`d.o.c` @type ^`int`;
  #L3d4108.  v8:= v8 + v4 @kind int;
  #L3d410a.  v9:= lcmp(v12, v0);
  #L3d410e.  if v9 == 0 then goto L3d412c;
  #L3d4112.  v9:= v12 %% v5 @kind long;
  #L3d4116.  v9:= (`int`) v9 @kind l2i;
  #L3d4118.  v8:= v8 + -1;
  #L3d411c.  v10:= `@@d.c.c` @type ^`byte`[] @kind object;
  #L3d4120.  v9:= v10[v9] @kind byte;
  #L3d4124.  v7[v8]:= v9 @kind byte;
  #L3d4128.  v12:= v12 / v5 @kind long;
  #L3d412a.  goto L3d410a;
  #L3d412c.  if v2 == 0 then goto L3d413c;
  #L3d4130.  v8:= v8 + -1;
  #L3d4134.  v12:= 45I;
  #L3d4138.  v7[v8]:= v12 @kind byte;
  #L3d413c.  v12:= v3.`d.o.c` @type ^`int`;
  #L3d4140.  v12:= v12 + v4 @kind int;
  #L3d4142.  v3.`d.o.c` @type ^`int` := v12;
  #L3d4146.  v12:= v11.`d.c.b` @type ^`long` @kind wide;
  #L3d414a.  v0:= (`long`) v4 @kind i2l;
  #L3d414c.  v2:= v12 + v0 @kind long;
  #L3d4150.  v11.`d.c.b` @type ^`long` := v2 @kind wide;
  #L3d4154.  return v11 @kind object;
}
procedure `d.d` `i`(`d.c` v0 @kind this, `int` v1 ) @signature `Ld/c;.i:(I)Ld/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3d4310.  call temp:= `b`(v0, v1) @signature `Ld/c;.b:(I)Ld/c;` @kind virtual;
  #L3d4316.  v1:= temp @kind object;
  #L3d4318.  return v1 @kind object;
}
procedure `boolean` `isOpen`(`d.c` v1 @kind this) @signature `Ld/c;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d3550.  v0:= 1I;
  #L3d3552.  return v0;
}
procedure `d.c` `j`(`d.c` v11 @kind this, `long` v12 ) @signature `Ld/c;.j:(J)Ld/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L3d4168.  v0:= 0L;
  #L3d416c.  v2:= lcmp(v12, v0);
  #L3d4170.  if v2 != 0 then goto L3d4182;
  #L3d4174.  v12:= 48I;
  #L3d4178.  call temp:= `b`(v11, v12) @signature `Ld/c;.b:(I)Ld/c;` @kind virtual;
  #L3d417e.  v12:= temp @kind object;
  #L3d4180.  return v12 @kind object;
  #L3d4182.  call temp:= `highestOneBit`(v12) @signature `Ljava/lang/Long;.highestOneBit:(J)J` @kind static;
  #L3d4188.  v0:= temp @kind wide;
  #L3d418a.  call temp:= `numberOfTrailingZeros`(v0) @signature `Ljava/lang/Long;.numberOfTrailingZeros:(J)I` @kind static;
  #L3d4190.  v0:= temp;
  #L3d4192.  v1:= 4I;
  #L3d4194.  v0:= v0 / v1 @kind int;
  #L3d4196.  v0:= v0 + 1;
  #L3d419a.  call temp:= `e`(v11, v0) @signature `Ld/c;.e:(I)Ld/o;` @kind virtual;
  #L3d41a0.  v2:= temp @kind object;
  #L3d41a2.  v3:= v2.`d.o.a` @type ^`byte`[] @kind object;
  #L3d41a6.  v4:= v2.`d.o.c` @type ^`int`;
  #L3d41aa.  v4:= v4 + v0 @kind int;
  #L3d41ac.  v4:= v4 + -1;
  #L3d41b0.  v5:= v2.`d.o.c` @type ^`int`;
  #L3d41b4.  if v4 < v5 then goto L3d41d6;
  #L3d41b8.  v6:= `@@d.c.c` @type ^`byte`[] @kind object;
  #L3d41bc.  v7:= 15L;
  #L3d41c0.  v9:= v12 ^& v7 @kind long;
  #L3d41c4.  v7:= (`int`) v9 @kind l2i;
  #L3d41c6.  v6:= v6[v7] @kind byte;
  #L3d41ca.  v3[v4]:= v6 @kind byte;
  #L3d41ce.  v12:= v12 ^>> v1 @kind long;
  #L3d41d0.  v4:= v4 + -1;
  #L3d41d4.  goto L3d41b4;
  #L3d41d6.  v12:= v2.`d.o.c` @type ^`int`;
  #L3d41da.  v12:= v12 + v0 @kind int;
  #L3d41dc.  v2.`d.o.c` @type ^`int` := v12;
  #L3d41e0.  v12:= v11.`d.c.b` @type ^`long` @kind wide;
  #L3d41e4.  v0:= (`long`) v0 @kind i2l;
  #L3d41e6.  v2:= v12 + v0 @kind long;
  #L3d41ea.  v11.`d.c.b` @type ^`long` := v2 @kind wide;
  #L3d41ee.  return v11 @kind object;
}
procedure `short` `j`(`d.c` v1 @kind this) @signature `Ld/c;.j:()S` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d50c0.  call temp:= `h`(v1) @signature `Ld/c;.h:()S` @kind virtual;
  #L3d50c6.  v0:= temp;
  #L3d50c8.  call temp:= `a`(v0) @signature `Ld/u;.a:(S)S` @kind static;
  #L3d50ce.  v0:= temp;
  #L3d50d0.  return v0;
}
procedure `int` `k`(`d.c` v1 @kind this) @signature `Ld/c;.k:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d46dc.  call temp:= `i`(v1) @signature `Ld/c;.i:()I` @kind virtual;
  #L3d46e2.  v0:= temp;
  #L3d46e4.  call temp:= `a`(v0) @signature `Ld/u;.a:(I)I` @kind static;
  #L3d46ea.  v0:= temp;
  #L3d46ec.  return v0;
}
procedure `d.d` `k`(`d.c` v0 @kind this, `long` v1 ) @signature `Ld/c;.k:(J)Ld/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3d432c.  call temp:= `j`(v0, v1) @signature `Ld/c;.j:(J)Ld/c;` @kind virtual;
  #L3d4332.  v1:= temp @kind object;
  #L3d4334.  return v1 @kind object;
}
procedure `long` `l`(`d.c` v17 @kind this) @signature `Ld/c;.l:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L3d4e64.  v0:= v17 @kind object;
  #L3d4e68.  v1:= v0.`d.c.b` @type ^`long` @kind wide;
  #L3d4e6c.  v3:= 0L;
  #L3d4e70.  v5:= lcmp(v1, v3);
  #L3d4e74.  if v5 != 0 then goto L3d4e88;
  #L3d4e78.  v1:= new `java.lang.IllegalStateException`;
  #L3d4e7c.  v2:= "size == 0" @kind object;
  #L3d4e80.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d4e86.  throw v1;
  #L3d4e88.  v1:= 0I;
  #L3d4e8a.  v5:= v3 @kind wide;
  #L3d4e8c.  v2:= 0I;
  #L3d4e8e.  v7:= v0.`d.c.a` @type ^`d.o` @kind object;
  #L3d4e92.  v8:= v7.`d.o.a` @type ^`byte`[] @kind object;
  #L3d4e96.  v9:= v7.`d.o.b` @type ^`int`;
  #L3d4e9a.  v10:= v7.`d.o.c` @type ^`int`;
  #L3d4e9e.  if v9 >= v10 then goto L3d4fa0;
  #L3d4ea2.  v11:= v8[v9] @kind byte;
  #L3d4ea6.  v12:= 48I;
  #L3d4eaa.  if v11 < v12 then goto L3d4ebc;
  #L3d4eae.  v12:= 57I;
  #L3d4eb2.  if v11 > v12 then goto L3d4ebc;
  #L3d4eb6.  v12:= v11 + -48;
  #L3d4eba.  goto L3d4eee;
  #L3d4ebc.  v12:= 97I;
  #L3d4ec0.  if v11 < v12 then goto L3d4ed6;
  #L3d4ec4.  v12:= 102I;
  #L3d4ec8.  if v11 > v12 then goto L3d4ed6;
  #L3d4ecc.  v12:= v11 + -97;
  #L3d4ed0.  v12:= v12 + 10;
  #L3d4ed4.  goto L3d4eee;
  #L3d4ed6.  v12:= 65I;
  #L3d4eda.  if v11 < v12 then goto L3d4f64;
  #L3d4ede.  v12:= 70I;
  #L3d4ee2.  if v11 > v12 then goto L3d4f64;
  #L3d4ee6.  v12:= v11 + -65;
  #L3d4eea.  v12:= v12 + 10;
  #L3d4eee.  v13:= -3.105036184601418E231D;
  #L3d4ef2.  v15:= v5 ^& v13 @kind long;
  #L3d4ef6.  v13:= lcmp(v15, v3);
  #L3d4efa.  if v13 == 0 then goto L3d4f4e;
  #L3d4efe.  v1:= new `d.c`;
  #L3d4f02.  call `<init>`(v1) @signature `Ld/c;.<init>:()V` @kind direct;
  #L3d4f08.  call temp:= `j`(v1, v5) @signature `Ld/c;.j:(J)Ld/c;` @kind virtual;
  #L3d4f0e.  v1:= temp @kind object;
  #L3d4f10.  call temp:= `b`(v1, v11) @signature `Ld/c;.b:(I)Ld/c;` @kind virtual;
  #L3d4f16.  v1:= temp @kind object;
  #L3d4f18.  v2:= new `java.lang.NumberFormatException`;
  #L3d4f1c.  v3:= new `java.lang.StringBuilder`;
  #L3d4f20.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d4f26.  v4:= "Number too large: " @kind object;
  #L3d4f2a.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d4f30.  call temp:= `n`(v1) @signature `Ld/c;.n:()Ljava/lang/String;` @kind virtual;
  #L3d4f36.  v1:= temp @kind object;
  #L3d4f38.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d4f3e.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d4f44.  v1:= temp @kind object;
  #L3d4f46.  call `<init>`(v2, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d4f4c.  throw v2;
  #L3d4f4e.  v11:= 4I;
  #L3d4f50.  v5:= v5 ^< v11 @kind long;
  #L3d4f52.  v11:= (`long`) v12 @kind i2l;
  #L3d4f54.  v13:= v5 ^| v11 @kind long;
  #L3d4f58.  v9:= v9 + 1;
  #L3d4f5c.  v1:= v1 + 1;
  #L3d4f60.  v5:= v13 @kind wide;
  #L3d4f62.  goto L3d4e9e;
  #L3d4f64.  if v1 != 0 then goto L3d4f9e;
  #L3d4f68.  v1:= new `java.lang.NumberFormatException`;
  #L3d4f6c.  v2:= new `java.lang.StringBuilder`;
  #L3d4f70.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d4f76.  v3:= "Expected leading [0-9a-fA-F] character but was 0x" @kind object;
  #L3d4f7a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d4f80.  call temp:= `toHexString`(v11) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L3d4f86.  v3:= temp @kind object;
  #L3d4f88.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d4f8e.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d4f94.  v2:= temp @kind object;
  #L3d4f96.  call `<init>`(v1, v2) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d4f9c.  throw v1;
  #L3d4f9e.  v2:= 1I;
  #L3d4fa0.  if v9 != v10 then goto L3d4fb8;
  #L3d4fa4.  call temp:= `b`(v7) @signature `Ld/o;.b:()Ld/o;` @kind virtual;
  #L3d4faa.  v8:= temp @kind object;
  #L3d4fac.  v0.`d.c.a` @type ^`d.o` := v8 @kind object;
  #L3d4fb0.  call `a`(v7) @signature `Ld/p;.a:(Ld/o;)V` @kind static;
  #L3d4fb6.  goto L3d4fbc;
  #L3d4fb8.  v7.`d.o.b` @type ^`int` := v9;
  #L3d4fbc.  if v2 != 0 then goto L3d4fc8;
  #L3d4fc0.  v7:= v0.`d.c.a` @type ^`d.o` @kind object;
  #L3d4fc4.  if v7 != 0 then goto L3d4e8e;
  #L3d4fc8.  v2:= v0.`d.c.b` @type ^`long` @kind wide;
  #L3d4fcc.  v7:= (`long`) v1 @kind i2l;
  #L3d4fce.  v9:= v2 - v7 @kind long;
  #L3d4fd2.  v0.`d.c.b` @type ^`long` := v9 @kind wide;
  #L3d4fd6.  return v5 @kind wide;
}
procedure `d.d` `l`(`d.c` v0 @kind this, `long` v1 ) @signature `Ld/c;.l:(J)Ld/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3d4348.  call temp:= `i`(v0, v1) @signature `Ld/c;.i:(J)Ld/c;` @kind virtual;
  #L3d434e.  v1:= temp @kind object;
  #L3d4350.  return v1 @kind object;
}
procedure `d.f` `m`(`d.c` v2 @kind this) @signature `Ld/c;.m:()Ld/f;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3d43cc.  v0:= new `d.f`;
  #L3d43d0.  call temp:= `p`(v2) @signature `Ld/c;.p:()[B` @kind virtual;
  #L3d43d6.  v1:= temp @kind object;
  #L3d43d8.  call `<init>`(v0, v1) @signature `Ld/f;.<init>:([B)V` @kind direct;
  #L3d43de.  return v0 @kind object;
}
procedure `java.lang.String` `n`(`d.c` v3 @kind this) @signature `Ld/c;.n:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3d4af0.  v0:= v3.`d.c.b` @type ^`long` @kind wide;
  #L3d4af4.  v2:= `@@d.u.a` @type ^`java.nio.charset.Charset` @kind object;
  #L3d4af8.  call temp:= `a`(v3, v0, v2) @signature `Ld/c;.a:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L3d4afe.  v0:= temp @kind object;
  #L3d4b00.  return v0 @kind object;
  #L3d4b02.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L3d4b04.  v1:= new `java.lang.AssertionError`;
  #L3d4b08.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3d4b0e.  throw v1;
  catch `java.io.EOFException` @[L3d4af0..L3d4b00] goto L3d4b02;
}
procedure `java.lang.String` `o`(`d.c` v2 @kind this) @signature `Ld/c;.o:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3d4b30.  v0:= 9223372036854775807L;
  #L3d4b3a.  call temp:= `e`(v2, v0) @signature `Ld/c;.e:(J)Ljava/lang/String;` @kind virtual;
  #L3d4b40.  v0:= temp @kind object;
  #L3d4b42.  return v0 @kind object;
}
procedure `byte`[] `p`(`d.c` v2 @kind this) @signature `Ld/c;.p:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3d36f8.  v0:= v2.`d.c.b` @type ^`long` @kind wide;
  #L3d36fc.  call temp:= `g`(v2, v0) @signature `Ld/c;.g:(J)[B` @kind virtual;
  #L3d3702.  v0:= temp @kind object;
  #L3d3704.  return v0 @kind object;
  #L3d3706.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L3d3708.  v1:= new `java.lang.AssertionError`;
  #L3d370c.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3d3712.  throw v1;
  catch `java.io.EOFException` @[L3d36f8..L3d3704] goto L3d3706;
}
procedure `void` `q`(`d.c` v2 @kind this) @signature `Ld/c;.q:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3d53d4.  v0:= v2.`d.c.b` @type ^`long` @kind wide;
  #L3d53d8.  call `h`(v2, v0) @signature `Ld/c;.h:(J)V` @kind virtual;
  #L3d53de.  return @kind void;
  #L3d53e0.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L3d53e2.  v1:= new `java.lang.AssertionError`;
  #L3d53e6.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3d53ec.  throw v1;
  catch `java.io.EOFException` @[L3d53d4..L3d53de] goto L3d53e0;
}
procedure `d.c` `r`(`d.c` v6 @kind this) @signature `Ld/c;.r:()Ld/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3d4200.  v0:= new `d.c`;
  #L3d4204.  call `<init>`(v0) @signature `Ld/c;.<init>:()V` @kind direct;
  #L3d420a.  v1:= v6.`d.c.b` @type ^`long` @kind wide;
  #L3d420e.  v3:= 0L;
  #L3d4212.  v5:= lcmp(v1, v3);
  #L3d4216.  if v5 != 0 then goto L3d421c;
  #L3d421a.  return v0 @kind object;
  #L3d421c.  v1:= v6.`d.c.a` @type ^`d.o` @kind object;
  #L3d4220.  call temp:= `a`(v1) @signature `Ld/o;.a:()Ld/o;` @kind virtual;
  #L3d4226.  v1:= temp @kind object;
  #L3d4228.  v0.`d.c.a` @type ^`d.o` := v1 @kind object;
  #L3d422c.  v1:= v0.`d.c.a` @type ^`d.o` @kind object;
  #L3d4230.  v2:= v0.`d.c.a` @type ^`d.o` @kind object;
  #L3d4234.  v3:= v0.`d.c.a` @type ^`d.o` @kind object;
  #L3d4238.  v2.`d.o.g` @type ^`d.o` := v3 @kind object;
  #L3d423c.  v1.`d.o.f` @type ^`d.o` := v3 @kind object;
  #L3d4240.  v1:= v6.`d.c.a` @type ^`d.o` @kind object;
  #L3d4244.  v1:= v1.`d.o.f` @type ^`d.o` @kind object;
  #L3d4248.  v2:= v6.`d.c.a` @type ^`d.o` @kind object;
  #L3d424c.  if v1 == v2 then goto L3d4268;
  #L3d4250.  v2:= v0.`d.c.a` @type ^`d.o` @kind object;
  #L3d4254.  v2:= v2.`d.o.g` @type ^`d.o` @kind object;
  #L3d4258.  call temp:= `a`(v1) @signature `Ld/o;.a:()Ld/o;` @kind virtual;
  #L3d425e.  v3:= temp @kind object;
  #L3d4260.  call temp:= `a`(v2, v3) @signature `Ld/o;.a:(Ld/o;)Ld/o;` @kind virtual;
  #L3d4266.  goto L3d4244;
  #L3d4268.  v1:= v6.`d.c.b` @type ^`long` @kind wide;
  #L3d426c.  v0.`d.c.b` @type ^`long` := v1 @kind wide;
  #L3d4270.  return v0 @kind object;
}
procedure `int` `read`(`d.c` v8 @kind this, `java.nio.ByteBuffer` v9 @kind object) @signature `Ld/c;.read:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3d4700.  v0:= v8.`d.c.a` @type ^`d.o` @kind object;
  #L3d4704.  if v0 != 0 then goto L3d470c;
  #L3d4708.  v9:= -1I;
  #L3d470a.  return v9;
  #L3d470c.  call temp:= `remaining`(v9) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L3d4712.  v1:= temp;
  #L3d4714.  v2:= v0.`d.o.c` @type ^`int`;
  #L3d4718.  v3:= v0.`d.o.b` @type ^`int`;
  #L3d471c.  v2:= v2 - v3 @kind int;
  #L3d471e.  call temp:= `min`(v1, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3d4724.  v1:= temp;
  #L3d4726.  v2:= v0.`d.o.a` @type ^`byte`[] @kind object;
  #L3d472a.  v3:= v0.`d.o.b` @type ^`int`;
  #L3d472e.  call temp:= `put`(v9, v2, v3, v1) @signature `Ljava/nio/ByteBuffer;.put:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L3d4734.  v9:= v0.`d.o.b` @type ^`int`;
  #L3d4738.  v9:= v9 + v1 @kind int;
  #L3d473a.  v0.`d.o.b` @type ^`int` := v9;
  #L3d473e.  v2:= v8.`d.c.b` @type ^`long` @kind wide;
  #L3d4742.  v4:= (`long`) v1 @kind i2l;
  #L3d4744.  v6:= v2 - v4 @kind long;
  #L3d4748.  v8.`d.c.b` @type ^`long` := v6 @kind wide;
  #L3d474c.  v9:= v0.`d.o.b` @type ^`int`;
  #L3d4750.  v2:= v0.`d.o.c` @type ^`int`;
  #L3d4754.  if v9 != v2 then goto L3d476a;
  #L3d4758.  call temp:= `b`(v0) @signature `Ld/o;.b:()Ld/o;` @kind virtual;
  #L3d475e.  v9:= temp @kind object;
  #L3d4760.  v8.`d.c.a` @type ^`d.o` := v9 @kind object;
  #L3d4764.  call `a`(v0) @signature `Ld/p;.a:(Ld/o;)V` @kind static;
  #L3d476a.  return v1;
}
procedure `d.f` `s`(`d.c` v5 @kind this) @signature `Ld/c;.s:()Ld/f;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3d43f0.  v0:= v5.`d.c.b` @type ^`long` @kind wide;
  #L3d43f4.  v2:= 2147483647L;
  #L3d43fa.  v4:= lcmp(v0, v2);
  #L3d43fe.  if v4 <= 0 then goto L3d4434;
  #L3d4402.  v0:= new `java.lang.IllegalArgumentException`;
  #L3d4406.  v1:= new `java.lang.StringBuilder`;
  #L3d440a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d4410.  v2:= "size > Integer.MAX_VALUE: " @kind object;
  #L3d4414.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d441a.  v2:= v5.`d.c.b` @type ^`long` @kind wide;
  #L3d441e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d4424.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d442a.  v1:= temp @kind object;
  #L3d442c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d4432.  throw v0;
  #L3d4434.  v0:= v5.`d.c.b` @type ^`long` @kind wide;
  #L3d4438.  v0:= (`int`) v0 @kind l2i;
  #L3d443a.  call temp:= `f`(v5, v0) @signature `Ld/c;.f:(I)Ld/f;` @kind virtual;
  #L3d4440.  v0:= temp @kind object;
  #L3d4442.  return v0 @kind object;
}
procedure `d.d` `t`(`d.c` v1 @kind this) @signature `Ld/c;.t:()Ld/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L3d4364.  call temp:= `d`(v1) @signature `Ld/c;.d:()Ld/c;` @kind virtual;
  #L3d436a.  v0:= temp @kind object;
  #L3d436c.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`d.c` v1 @kind this) @signature `Ld/c;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d4b54.  call temp:= `s`(v1) @signature `Ld/c;.s:()Ld/f;` @kind virtual;
  #L3d4b5a.  v0:= temp @kind object;
  #L3d4b5c.  call temp:= `toString`(v0) @signature `Ld/f;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d4b62.  v0:= temp @kind object;
  #L3d4b64.  return v0 @kind object;
}
procedure `int` `write`(`d.c` v7 @kind this, `java.nio.ByteBuffer` v8 @kind object) @signature `Ld/c;.write:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3d477c.  if v8 != 0 then goto L3d4790;
  #L3d4780.  v8:= new `java.lang.IllegalArgumentException`;
  #L3d4784.  v0:= "source == null" @kind object;
  #L3d4788.  call `<init>`(v8, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d478e.  throw v8;
  #L3d4790.  call temp:= `remaining`(v8) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L3d4796.  v0:= temp;
  #L3d4798.  v1:= v0;
  #L3d479a.  if v1 <= 0 then goto L3d47d4;
  #L3d479e.  v2:= 1I;
  #L3d47a0.  call temp:= `e`(v7, v2) @signature `Ld/c;.e:(I)Ld/o;` @kind virtual;
  #L3d47a6.  v2:= temp @kind object;
  #L3d47a8.  v3:= v2.`d.o.c` @type ^`int`;
  #L3d47ac.  v3:= v3 - 8192;
  #L3d47b0.  call temp:= `min`(v1, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3d47b6.  v3:= temp;
  #L3d47b8.  v4:= v2.`d.o.a` @type ^`byte`[] @kind object;
  #L3d47bc.  v5:= v2.`d.o.c` @type ^`int`;
  #L3d47c0.  call temp:= `get`(v8, v4, v5, v3) @signature `Ljava/nio/ByteBuffer;.get:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L3d47c6.  v1:= v1 - v3 @kind int;
  #L3d47c8.  v4:= v2.`d.o.c` @type ^`int`;
  #L3d47cc.  v4:= v4 + v3 @kind int;
  #L3d47ce.  v2.`d.o.c` @type ^`int` := v4;
  #L3d47d2.  goto L3d479a;
  #L3d47d4.  v1:= v7.`d.c.b` @type ^`long` @kind wide;
  #L3d47d8.  v3:= (`long`) v0 @kind i2l;
  #L3d47da.  v5:= v1 + v3 @kind long;
  #L3d47de.  v7.`d.c.b` @type ^`long` := v5 @kind wide;
  #L3d47e2.  return v0;
}
