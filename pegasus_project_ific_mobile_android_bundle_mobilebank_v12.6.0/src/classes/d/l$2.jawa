record `d.l$2` @kind class @AccessFlag FINAL extends `d.s` @kind interface {
  `d.t` `d.l$2.a` @AccessFlag FINAL_SYNTHETIC;
  `java.io.InputStream` `d.l$2.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`d.l$2` v0 @kind this, `d.t` v1 @kind object, `java.io.InputStream` v2 @kind object) @signature `Ld/l$2;.<init>:(Ld/t;Ljava/io/InputStream;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3d6ba4.  v0.`d.l$2.a` @type ^`d.t` := v1 @kind object;
  #L3d6ba8.  v0.`d.l$2.b` @type ^`java.io.InputStream` := v2 @kind object;
  #L3d6bac.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3d6bb2.  return @kind void;
}
procedure `long` `a`(`d.l$2` v4 @kind this, `d.c` v5 @kind object, `long` v6 ) @signature `Ld/l$2;.a:(Ld/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3d6ac0.  v0:= 0L;
  #L3d6ac4.  v2:= lcmp(v6, v0);
  #L3d6ac8.  if v2 >= 0 then goto L3d6afa;
  #L3d6acc.  v5:= new `java.lang.IllegalArgumentException`;
  #L3d6ad0.  v0:= new `java.lang.StringBuilder`;
  #L3d6ad4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d6ada.  v1:= "byteCount < 0: " @kind object;
  #L3d6ade.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d6ae4.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d6aea.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d6af0.  v6:= temp @kind object;
  #L3d6af2.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d6af8.  throw v5;
  #L3d6afa.  v2:= lcmp(v6, v0);
  #L3d6afe.  if v2 != 0 then goto L3d6b04;
  #L3d6b02.  return v0 @kind wide;
  #L3d6b04.  v0:= v4.`d.l$2.a` @type ^`d.t` @kind object;
  #L3d6b08.  call `g`(v0) @signature `Ld/t;.g:()V` @kind virtual;
  #L3d6b0e.  v0:= 1I;
  #L3d6b10.  call temp:= `e`(v5, v0) @signature `Ld/c;.e:(I)Ld/o;` @kind virtual;
  #L3d6b16.  v0:= temp @kind object;
  #L3d6b18.  v1:= v0.`d.o.c` @type ^`int`;
  #L3d6b1c.  v1:= v1 - 8192;
  #L3d6b20.  v1:= (`long`) v1 @kind i2l;
  #L3d6b22.  call temp:= `min`(v6, v1) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3d6b28.  v6:= temp @kind wide;
  #L3d6b2a.  v6:= (`int`) v6 @kind l2i;
  #L3d6b2c.  v7:= v4.`d.l$2.b` @type ^`java.io.InputStream` @kind object;
  #L3d6b30.  v1:= v0.`d.o.a` @type ^`byte`[] @kind object;
  #L3d6b34.  v2:= v0.`d.o.c` @type ^`int`;
  #L3d6b38.  call temp:= `read`(v7, v1, v2, v6) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L3d6b3e.  v6:= temp;
  #L3d6b40.  v7:= -1I;
  #L3d6b42.  if v6 != v7 then goto L3d6b4c;
  #L3d6b46.  v5:= -1L;
  #L3d6b4a.  return v5 @kind wide;
  #L3d6b4c.  v7:= v0.`d.o.c` @type ^`int`;
  #L3d6b50.  v7:= v7 + v6 @kind int;
  #L3d6b52.  v0.`d.o.c` @type ^`int` := v7;
  #L3d6b56.  v0:= v5.`d.c.b` @type ^`long` @kind wide;
  #L3d6b5a.  v6:= (`long`) v6 @kind i2l;
  #L3d6b5c.  v2:= v0 + v6 @kind long;
  #L3d6b60.  v5.`d.c.b` @type ^`long` := v2 @kind wide;
  #L3d6b64.  return v6 @kind wide;
  #L3d6b66.  v5:= Exception @type ^`java.lang.AssertionError` @kind object;
  #L3d6b68.  call temp:= `a`(v5) @signature `Ld/l;.a:(Ljava/lang/AssertionError;)Z` @kind static;
  #L3d6b6e.  v6:= temp;
  #L3d6b70.  if v6 == 0 then goto L3d6b80;
  #L3d6b74.  v6:= new `java.io.IOException`;
  #L3d6b78.  call `<init>`(v6, v5) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L3d6b7e.  throw v6;
  #L3d6b80.  throw v5;
  catch `java.lang.AssertionError` @[L3d6b04..L3d6b64] goto L3d6b66;
}
procedure `d.t` `a`(`d.l$2` v1 @kind this) @signature `Ld/l$2;.a:()Ld/t;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d6a64.  v0:= v1.`d.l$2.a` @type ^`d.t` @kind object;
  #L3d6a68.  return v0 @kind object;
}
procedure `void` `close`(`d.l$2` v1 @kind this) @signature `Ld/l$2;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3d6bc4.  v0:= v1.`d.l$2.b` @type ^`java.io.InputStream` @kind object;
  #L3d6bc8.  call `close`(v0) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L3d6bce.  return @kind void;
}
procedure `java.lang.String` `toString`(`d.l$2` v2 @kind this) @signature `Ld/l$2;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3d6a7c.  v0:= new `java.lang.StringBuilder`;
  #L3d6a80.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3d6a86.  v1:= "source(" @kind object;
  #L3d6a8a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d6a90.  v1:= v2.`d.l$2.b` @type ^`java.io.InputStream` @kind object;
  #L3d6a94.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d6a9a.  v1:= ")" @kind object;
  #L3d6a9e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3d6aa4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3d6aaa.  v0:= temp @kind object;
  #L3d6aac.  return v0 @kind object;
}
