record `d.a$a` @kind class @AccessFlag FINAL extends `java.lang.Thread` @kind class {
}
procedure `void` `<init>`(`d.a$a` v1 @kind this) @signature `Ld/a$a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3d2d34.  v0:= "Okio Watchdog" @kind object;
  #L3d2d38.  call `<init>`(v1, v0) @signature `Ljava/lang/Thread;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3d2d3e.  v0:= 1I;
  #L3d2d40.  call `setDaemon`(v1, v0) @signature `Ld/a$a;.setDaemon:(Z)V` @kind virtual;
  #L3d2d46.  return @kind void;
}
procedure `void` `run`(`d.a$a` v3 @kind this) @signature `Ld/a$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3d2d58.  v0:= constclass @type ^`d.a` @kind object;
  #L3d2d5c.  @monitorenter v0
  #L3d2d5e.  call temp:= `e`() @signature `Ld/a;.e:()Ld/a;` @kind static;
  #L3d2d64.  v1:= temp @kind object;
  #L3d2d66.  if v1 != 0 then goto L3d2d6e;
  #L3d2d6a.  @monitorexit v0
  #L3d2d6c.  goto L3d2d58;
  #L3d2d6e.  v2:= `@@d.a.b` @type ^`d.a` @kind object;
  #L3d2d72.  if v1 != v2 then goto L3d2d80;
  #L3d2d76.  v1:= 0I;
  #L3d2d78.  `@@d.a.b` @type ^`d.a` := v1 @kind object;
  #L3d2d7c.  @monitorexit v0
  #L3d2d7e.  return @kind void;
  #L3d2d80.  @monitorexit v0
  #L3d2d82.  call `a`(v1) @signature `Ld/a;.a:()V` @kind virtual;
  #L3d2d88.  goto L3d2d58;
  #L3d2d8a.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3d2d8c.  @monitorexit v0
  #L3d2d8e.  throw v1;
  catch `java.lang.InterruptedException` @[L3d2d58..L3d2d5e] goto L3d2d58;
  catch `java.lang.Throwable` @[L3d2d5e..L3d2d82] goto L3d2d8a;
  catch `java.lang.InterruptedException` @[L3d2d82..L3d2d88] goto L3d2d58;
  catch `java.lang.Throwable` @[L3d2d8c..L3d2d8e] goto L3d2d8a;
  catch `java.lang.InterruptedException` @[L3d2d8e..L3d2d90] goto L3d2d58;
}
