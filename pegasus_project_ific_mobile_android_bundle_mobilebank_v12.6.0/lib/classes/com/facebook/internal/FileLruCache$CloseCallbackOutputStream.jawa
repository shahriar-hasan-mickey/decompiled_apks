record `com.facebook.internal.FileLruCache$CloseCallbackOutputStream` @kind class @AccessFlag  extends `java.io.OutputStream` @kind class {
  `com.facebook.internal.FileLruCache$StreamCloseCallback` `com.facebook.internal.FileLruCache$CloseCallbackOutputStream.callback` @AccessFlag FINAL;
  `java.io.OutputStream` `com.facebook.internal.FileLruCache$CloseCallbackOutputStream.innerStream` @AccessFlag FINAL;
}
procedure `void` `<init>`(`com.facebook.internal.FileLruCache$CloseCallbackOutputStream` v0 @kind this, `java.io.OutputStream` v1 @kind object, `com.facebook.internal.FileLruCache$StreamCloseCallback` v2 @kind object) @signature `Lcom/facebook/internal/FileLruCache$CloseCallbackOutputStream;.<init>:(Ljava/io/OutputStream;Lcom/facebook/internal/FileLruCache$StreamCloseCallback;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `void` `close`(`com.facebook.internal.FileLruCache$CloseCallbackOutputStream` v2 @kind this) @signature `Lcom/facebook/internal/FileLruCache$CloseCallbackOutputStream;.close:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `flush`(`com.facebook.internal.FileLruCache$CloseCallbackOutputStream` v1 @kind this) @signature `Lcom/facebook/internal/FileLruCache$CloseCallbackOutputStream;.flush:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `write`(`com.facebook.internal.FileLruCache$CloseCallbackOutputStream` v1 @kind this, `int` v2 ) @signature `Lcom/facebook/internal/FileLruCache$CloseCallbackOutputStream;.write:(I)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `write`(`com.facebook.internal.FileLruCache$CloseCallbackOutputStream` v1 @kind this, `byte`[] v2 @kind object) @signature `Lcom/facebook/internal/FileLruCache$CloseCallbackOutputStream;.write:([B)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `write`(`com.facebook.internal.FileLruCache$CloseCallbackOutputStream` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lcom/facebook/internal/FileLruCache$CloseCallbackOutputStream;.write:([BII)V` @AccessFlag PUBLIC {

  # return;
}
