record `com.fasterxml.jackson.databind.ser.SerializerCache` @kind class @AccessFlag PUBLIC_FINAL {
  `java.util.concurrent.atomic.AtomicReference` `com.fasterxml.jackson.databind.ser.SerializerCache._readOnlyMap` @AccessFlag PRIVATE_FINAL;
  `java.util.HashMap` `com.fasterxml.jackson.databind.ser.SerializerCache._sharedMap` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.fasterxml.jackson.databind.ser.SerializerCache` v2 @kind this) @signature `Lcom/fasterxml/jackson/databind/ser/SerializerCache;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap` `_makeReadOnlyLookupMap`(`com.fasterxml.jackson.databind.ser.SerializerCache` v2 @kind this) @signature `Lcom/fasterxml/jackson/databind/ser/SerializerCache;._makeReadOnlyLookupMap:()Lcom/fasterxml/jackson/databind/ser/impl/ReadOnlyClassToSerializerMap;` @AccessFlag PRIVATE_FINAL {

  # return;
}
procedure `void` `addAndResolveNonTypedSerializer`(`com.fasterxml.jackson.databind.ser.SerializerCache` v3 @kind this, `com.fasterxml.jackson.databind.JavaType` v4 @kind object, `com.fasterxml.jackson.databind.JsonSerializer` v5 @kind object, `com.fasterxml.jackson.databind.SerializerProvider` v6 @kind object) @signature `Lcom/fasterxml/jackson/databind/ser/SerializerCache;.addAndResolveNonTypedSerializer:(Lcom/fasterxml/jackson/databind/JavaType;Lcom/fasterxml/jackson/databind/JsonSerializer;Lcom/fasterxml/jackson/databind/SerializerProvider;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `addAndResolveNonTypedSerializer`(`com.fasterxml.jackson.databind.ser.SerializerCache` v3 @kind this, `java.lang.Class` v4 @kind object, `com.fasterxml.jackson.databind.JavaType` v5 @kind object, `com.fasterxml.jackson.databind.JsonSerializer` v6 @kind object, `com.fasterxml.jackson.databind.SerializerProvider` v7 @kind object) @signature `Lcom/fasterxml/jackson/databind/ser/SerializerCache;.addAndResolveNonTypedSerializer:(Ljava/lang/Class;Lcom/fasterxml/jackson/databind/JavaType;Lcom/fasterxml/jackson/databind/JsonSerializer;Lcom/fasterxml/jackson/databind/SerializerProvider;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `addTypedSerializer`(`com.fasterxml.jackson.databind.ser.SerializerCache` v3 @kind this, `java.lang.Class` v4 @kind object, `com.fasterxml.jackson.databind.JsonSerializer` v5 @kind object) @signature `Lcom/fasterxml/jackson/databind/ser/SerializerCache;.addTypedSerializer:(Ljava/lang/Class;Lcom/fasterxml/jackson/databind/JsonSerializer;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap` `getReadOnlyLookupMap`(`com.fasterxml.jackson.databind.ser.SerializerCache` v1 @kind this) @signature `Lcom/fasterxml/jackson/databind/ser/SerializerCache;.getReadOnlyLookupMap:()Lcom/fasterxml/jackson/databind/ser/impl/ReadOnlyClassToSerializerMap;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.fasterxml.jackson.databind.JsonSerializer` `typedValueSerializer`(`com.fasterxml.jackson.databind.ser.SerializerCache` v3 @kind this, `java.lang.Class` v4 @kind object) @signature `Lcom/fasterxml/jackson/databind/ser/SerializerCache;.typedValueSerializer:(Ljava/lang/Class;)Lcom/fasterxml/jackson/databind/JsonSerializer;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.fasterxml.jackson.databind.JsonSerializer` `untypedValueSerializer`(`com.fasterxml.jackson.databind.ser.SerializerCache` v3 @kind this, `com.fasterxml.jackson.databind.JavaType` v4 @kind object) @signature `Lcom/fasterxml/jackson/databind/ser/SerializerCache;.untypedValueSerializer:(Lcom/fasterxml/jackson/databind/JavaType;)Lcom/fasterxml/jackson/databind/JsonSerializer;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.fasterxml.jackson.databind.JsonSerializer` `untypedValueSerializer`(`com.fasterxml.jackson.databind.ser.SerializerCache` v3 @kind this, `java.lang.Class` v4 @kind object) @signature `Lcom/fasterxml/jackson/databind/ser/SerializerCache;.untypedValueSerializer:(Ljava/lang/Class;)Lcom/fasterxml/jackson/databind/JsonSerializer;` @AccessFlag PUBLIC {

  # return;
}
