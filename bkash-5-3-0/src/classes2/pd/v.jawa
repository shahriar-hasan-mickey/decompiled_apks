record `pd.v` @kind class @AccessFlag FINAL extends `java.util.Map` @kind interface, `java.io.Serializable` @kind interface {
}
global `pd.v` `@@pd.v.INSTANCE` @AccessFlag PUBLIC_STATIC_FINAL;
global `long` `@@pd.v.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lpd/v;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L36d9ec.  v0:= new `pd.v`;
  #L36d9f0.  call `<init>`(v0) @signature `Lpd/v;.<init>:()V` @kind direct;
  #L36d9f6.  `@@pd.v.INSTANCE` @type ^`pd.v` := v0 @kind object;
  #L36d9fa.  return @kind void;
}
procedure `void` `<init>`(`pd.v` v0 @kind this) @signature `Lpd/v;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L36da0c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L36da12.  return @kind void;
}
procedure `java.lang.Object` `readResolve`(`pd.v` v1 @kind this) @signature `Lpd/v;.readResolve:()Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L36d8b0.  v0:= `@@pd.v.INSTANCE` @type ^`pd.v` @kind object;
  #L36d8b4.  return v0 @kind object;
}
procedure `void` `clear`(`pd.v` v2 @kind this) @signature `Lpd/v;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L36da24.  v0:= new `java.lang.UnsupportedOperationException`;
  #L36da28.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L36da2c.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36da32.  throw v0;
}
procedure `boolean` `containsKey`(`pd.v` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lpd/v;.containsKey:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L36d78c.  v1:= 0I;
  #L36d78e.  return v1;
}
procedure `boolean` `containsValue`(`pd.v` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lpd/v;.containsValue:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L36d7a0.  v0:= instanceof @variable v2 @type ^`java.lang.Void` @kind boolean;
  #L36d7a4.  if v0 != 0 then goto L36d7ac;
  #L36d7a8.  v2:= 0I;
  #L36d7aa.  return v2;
  #L36d7ac.  v2:= (`java.lang.Void`) v2 @kind object;
  #L36d7b0.  call temp:= `containsValue`(v1, v2) @signature `Lpd/v;.containsValue:(Ljava/lang/Void;)Z` @kind virtual;
  #L36d7b6.  v2:= temp;
  #L36d7b8.  return v2;
}
procedure `boolean` `containsValue`(`pd.v` v1 @kind this, `java.lang.Void` v2 @kind object) @signature `Lpd/v;.containsValue:(Ljava/lang/Void;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36d7cc.  v0:= "value" @kind object;
  #L36d7d0.  call `f`(v2, v0) @signature `Lkotlin/jvm/internal/k;.f:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L36d7d6.  v2:= 0I;
  #L36d7d8.  return v2;
}
procedure `java.util.Set` `entrySet`(`pd.v` v1 @kind this) @signature `Lpd/v;.entrySet:()Ljava/util/Set;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L36d984.  call temp:= `getEntries`(v1) @signature `Lpd/v;.getEntries:()Ljava/util/Set;` @kind virtual;
  #L36d98a.  v0:= temp @kind object;
  #L36d98c.  return v0 @kind object;
}
procedure `boolean` `equals`(`pd.v` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lpd/v;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36d7ec.  v0:= instanceof @variable v2 @type ^`java.util.Map` @kind boolean;
  #L36d7f0.  if v0 == 0 then goto L36d808;
  #L36d7f4.  v2:= (`java.util.Map`) v2 @kind object;
  #L36d7f8.  call temp:= `isEmpty`(v2) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L36d7fe.  v2:= temp;
  #L36d800.  if v2 == 0 then goto L36d808;
  #L36d804.  v2:= 1I;
  #L36d806.  goto L36d80a;
  #L36d808.  v2:= 0I;
  #L36d80a.  return v2;
}
procedure `java.lang.Object` `get`(`pd.v` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lpd/v;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L36d874.  call temp:= `get`(v0, v1) @signature `Lpd/v;.get:(Ljava/lang/Object;)Ljava/lang/Void;` @kind virtual;
  #L36d87a.  v1:= temp @kind object;
  #L36d87c.  return v1 @kind object;
}
procedure `java.lang.Void` `get`(`pd.v` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lpd/v;.get:(Ljava/lang/Object;)Ljava/lang/Void;` @AccessFlag PUBLIC {
    temp;

  #L36d8fc.  v1:= 0I;
  #L36d8fe.  return v1 @kind object;
}
procedure `java.util.Set` `getEntries`(`pd.v` v1 @kind this) @signature `Lpd/v;.getEntries:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36d9a0.  v0:= `@@pd.w.INSTANCE` @type ^`pd.w` @kind object;
  #L36d9a4.  return v0 @kind object;
}
procedure `java.util.Set` `getKeys`(`pd.v` v1 @kind this) @signature `Lpd/v;.getKeys:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36d9b8.  v0:= `@@pd.w.INSTANCE` @type ^`pd.w` @kind object;
  #L36d9bc.  return v0 @kind object;
}
procedure `int` `getSize`(`pd.v` v1 @kind this) @signature `Lpd/v;.getSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36d830.  v0:= 0I;
  #L36d832.  return v0;
}
procedure `java.util.Collection` `getValues`(`pd.v` v1 @kind this) @signature `Lpd/v;.getValues:()Ljava/util/Collection;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36d950.  v0:= `@@pd.u.INSTANCE` @type ^`pd.u` @kind object;
  #L36d954.  return v0 @kind object;
}
procedure `int` `hashCode`(`pd.v` v1 @kind this) @signature `Lpd/v;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36d844.  v0:= 0I;
  #L36d846.  return v0;
}
procedure `boolean` `isEmpty`(`pd.v` v1 @kind this) @signature `Lpd/v;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36d81c.  v0:= 1I;
  #L36d81e.  return v0;
}
procedure `java.util.Set` `keySet`(`pd.v` v1 @kind this) @signature `Lpd/v;.keySet:()Ljava/util/Set;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L36d9d0.  call temp:= `getKeys`(v1) @signature `Lpd/v;.getKeys:()Ljava/util/Set;` @kind virtual;
  #L36d9d6.  v0:= temp @kind object;
  #L36d9d8.  return v0 @kind object;
}
procedure `java.lang.Object` `put`(`pd.v` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lpd/v;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L36d890.  v1:= new `java.lang.UnsupportedOperationException`;
  #L36d894.  v2:= "Operation is not supported for read-only collection" @kind object;
  #L36d898.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36d89e.  throw v1;
}
procedure `java.lang.Void` `put`(`pd.v` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Void` v2 @kind object) @signature `Lpd/v;.put:(Ljava/lang/Object;Ljava/lang/Void;)Ljava/lang/Void;` @AccessFlag PUBLIC {
    temp;

  #L36d910.  v1:= new `java.lang.UnsupportedOperationException`;
  #L36d914.  v2:= "Operation is not supported for read-only collection" @kind object;
  #L36d918.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36d91e.  throw v1;
}
procedure `void` `putAll`(`pd.v` v1 @kind this, `java.util.Map` v2 @kind object) @signature `Lpd/v;.putAll:(Ljava/util/Map;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36da44.  v2:= new `java.lang.UnsupportedOperationException`;
  #L36da48.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L36da4c.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36da52.  throw v2;
}
procedure `java.lang.Object` `remove`(`pd.v` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lpd/v;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L36d8c8.  call temp:= `remove`(v0, v1) @signature `Lpd/v;.remove:(Ljava/lang/Object;)Ljava/lang/Void;` @kind virtual;
  #L36d8ce.  v1:= temp @kind object;
  #L36d8d0.  return v1 @kind object;
}
procedure `java.lang.Void` `remove`(`pd.v` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lpd/v;.remove:(Ljava/lang/Object;)Ljava/lang/Void;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36d930.  v2:= new `java.lang.UnsupportedOperationException`;
  #L36d934.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L36d938.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36d93e.  throw v2;
}
procedure `int` `size`(`pd.v` v1 @kind this) @signature `Lpd/v;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L36d858.  call temp:= `getSize`(v1) @signature `Lpd/v;.getSize:()I` @kind virtual;
  #L36d85e.  v0:= temp;
  #L36d860.  return v0;
}
procedure `java.lang.String` `toString`(`pd.v` v1 @kind this) @signature `Lpd/v;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36d8e4.  v0:= "{}" @kind object;
  #L36d8e8.  return v0 @kind object;
}
procedure `java.util.Collection` `values`(`pd.v` v1 @kind this) @signature `Lpd/v;.values:()Ljava/util/Collection;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L36d968.  call temp:= `getValues`(v1) @signature `Lpd/v;.getValues:()Ljava/util/Collection;` @kind virtual;
  #L36d96e.  v0:= temp @kind object;
  #L36d970.  return v0 @kind object;
}
