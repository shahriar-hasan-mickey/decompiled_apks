record `pd.x` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.util.Iterator` @kind interface {
}
procedure `void` `<init>`(`pd.x` v0 @kind this) @signature `Lpd/x;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L36dd20.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L36dd26.  return @kind void;
}
procedure `int` `a`() @signature `Lpd/x;.a:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `next`(`pd.x` v1 @kind this) @signature `Lpd/x;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L36dcfc.  call temp:= `a`(v1) @signature `Lpd/x;.a:()I` @kind virtual;
  #L36dd02.  v0:= temp;
  #L36dd04.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L36dd0a.  v0:= temp @kind object;
  #L36dd0c.  return v0 @kind object;
}
procedure `void` `remove`(`pd.x` v2 @kind this) @signature `Lpd/x;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L36dd38.  v0:= new `java.lang.UnsupportedOperationException`;
  #L36dd3c.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L36dd40.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36dd46.  throw v0;
}
