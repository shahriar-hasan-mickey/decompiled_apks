record `pd.u` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.List` @kind interface, `java.io.Serializable` @kind interface, `java.util.RandomAccess` @kind interface {
}
global `pd.u` `@@pd.u.INSTANCE` @AccessFlag PUBLIC_STATIC_FINAL;
global `long` `@@pd.u.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lpd/u;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L36d6f4.  v0:= new `pd.u`;
  #L36d6f8.  call `<init>`(v0) @signature `Lpd/u;.<init>:()V` @kind direct;
  #L36d6fe.  `@@pd.u.INSTANCE` @type ^`pd.u` := v0 @kind object;
  #L36d702.  return @kind void;
}
procedure `void` `<init>`(`pd.u` v0 @kind this) @signature `Lpd/u;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L36d714.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L36d71a.  return @kind void;
}
procedure `java.lang.Object` `readResolve`(`pd.u` v1 @kind this) @signature `Lpd/u;.readResolve:()Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L36d4ec.  v0:= `@@pd.u.INSTANCE` @type ^`pd.u` @kind object;
  #L36d4f0.  return v0 @kind object;
}
procedure `void` `add`(`pd.u` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Lpd/u;.add:(ILjava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L36d72c.  v1:= new `java.lang.UnsupportedOperationException`;
  #L36d730.  v2:= "Operation is not supported for read-only collection" @kind object;
  #L36d734.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36d73a.  throw v1;
}
procedure `void` `add`(`pd.u` v0 @kind this, `int` v1 , `java.lang.Void` v2 @kind object) @signature `Lpd/u;.add:(ILjava/lang/Void;)V` @AccessFlag PUBLIC {
    temp;

  #L36d74c.  v1:= new `java.lang.UnsupportedOperationException`;
  #L36d750.  v2:= "Operation is not supported for read-only collection" @kind object;
  #L36d754.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36d75a.  throw v1;
}
procedure `boolean` `add`(`pd.u` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lpd/u;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L36d260.  v2:= new `java.lang.UnsupportedOperationException`;
  #L36d264.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L36d268.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36d26e.  throw v2;
}
procedure `boolean` `add`(`pd.u` v1 @kind this, `java.lang.Void` v2 @kind object) @signature `Lpd/u;.add:(Ljava/lang/Void;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36d280.  v2:= new `java.lang.UnsupportedOperationException`;
  #L36d284.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L36d288.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36d28e.  throw v2;
}
procedure `boolean` `addAll`(`pd.u` v0 @kind this, `int` v1 , `java.util.Collection` v2 @kind object) @signature `Lpd/u;.addAll:(ILjava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L36d2a0.  v1:= new `java.lang.UnsupportedOperationException`;
  #L36d2a4.  v2:= "Operation is not supported for read-only collection" @kind object;
  #L36d2a8.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36d2ae.  throw v1;
}
procedure `boolean` `addAll`(`pd.u` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lpd/u;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36d2c0.  v2:= new `java.lang.UnsupportedOperationException`;
  #L36d2c4.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L36d2c8.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36d2ce.  throw v2;
}
procedure `void` `clear`(`pd.u` v2 @kind this) @signature `Lpd/u;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L36d76c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L36d770.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L36d774.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36d77a.  throw v0;
}
procedure `boolean` `contains`(`pd.u` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lpd/u;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L36d2e0.  v0:= instanceof @variable v2 @type ^`java.lang.Void` @kind boolean;
  #L36d2e4.  if v0 != 0 then goto L36d2ec;
  #L36d2e8.  v2:= 0I;
  #L36d2ea.  return v2;
  #L36d2ec.  v2:= (`java.lang.Void`) v2 @kind object;
  #L36d2f0.  call temp:= `contains`(v1, v2) @signature `Lpd/u;.contains:(Ljava/lang/Void;)Z` @kind virtual;
  #L36d2f6.  v2:= temp;
  #L36d2f8.  return v2;
}
procedure `boolean` `contains`(`pd.u` v1 @kind this, `java.lang.Void` v2 @kind object) @signature `Lpd/u;.contains:(Ljava/lang/Void;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36d30c.  v0:= "element" @kind object;
  #L36d310.  call `f`(v2, v0) @signature `Lkotlin/jvm/internal/k;.f:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L36d316.  v2:= 0I;
  #L36d318.  return v2;
}
procedure `boolean` `containsAll`(`pd.u` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lpd/u;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36d32c.  v0:= "elements" @kind object;
  #L36d330.  call `f`(v2, v0) @signature `Lkotlin/jvm/internal/k;.f:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L36d336.  call temp:= `isEmpty`(v2) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L36d33c.  v2:= temp;
  #L36d33e.  return v2;
}
procedure `boolean` `equals`(`pd.u` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lpd/u;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36d350.  v0:= instanceof @variable v2 @type ^`java.util.List` @kind boolean;
  #L36d354.  if v0 == 0 then goto L36d36c;
  #L36d358.  v2:= (`java.util.List`) v2 @kind object;
  #L36d35c.  call temp:= `isEmpty`(v2) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L36d362.  v2:= temp;
  #L36d364.  if v2 == 0 then goto L36d36c;
  #L36d368.  v2:= 1I;
  #L36d36a.  goto L36d36e;
  #L36d36c.  v2:= 0I;
  #L36d36e.  return v2;
}
procedure `java.lang.Object` `get`(`pd.u` v0 @kind this, `int` v1 ) @signature `Lpd/u;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L36d4d0.  call temp:= `get`(v0, v1) @signature `Lpd/u;.get:(I)Ljava/lang/Void;` @kind virtual;
  #L36d4d6.  v1:= temp @kind object;
  #L36d4d8.  return v1 @kind object;
}
procedure `java.lang.Void` `get`(`pd.u` v3 @kind this, `int` v4 ) @signature `Lpd/u;.get:(I)Ljava/lang/Void;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L36d59c.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L36d5a0.  v1:= new `java.lang.StringBuilder`;
  #L36d5a4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L36d5aa.  v2:= "Empty list doesn't contain element at index " @kind object;
  #L36d5ae.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36d5b4.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L36d5ba.  v4:= 46I;
  #L36d5be.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L36d5c4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L36d5ca.  v4:= temp @kind object;
  #L36d5cc.  call `<init>`(v0, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36d5d2.  throw v0;
}
procedure `int` `getSize`(`pd.u` v1 @kind this) @signature `Lpd/u;.getSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36d3f4.  v0:= 0I;
  #L36d3f6.  return v0;
}
procedure `int` `hashCode`(`pd.u` v1 @kind this) @signature `Lpd/u;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36d408.  v0:= 1I;
  #L36d40a.  return v0;
}
procedure `int` `indexOf`(`pd.u` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lpd/u;.indexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L36d41c.  v0:= instanceof @variable v2 @type ^`java.lang.Void` @kind boolean;
  #L36d420.  if v0 != 0 then goto L36d428;
  #L36d424.  v2:= -1I;
  #L36d426.  return v2;
  #L36d428.  v2:= (`java.lang.Void`) v2 @kind object;
  #L36d42c.  call temp:= `indexOf`(v1, v2) @signature `Lpd/u;.indexOf:(Ljava/lang/Void;)I` @kind virtual;
  #L36d432.  v2:= temp;
  #L36d434.  return v2;
}
procedure `int` `indexOf`(`pd.u` v1 @kind this, `java.lang.Void` v2 @kind object) @signature `Lpd/u;.indexOf:(Ljava/lang/Void;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36d448.  v0:= "element" @kind object;
  #L36d44c.  call `f`(v2, v0) @signature `Lkotlin/jvm/internal/k;.f:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L36d452.  v2:= -1I;
  #L36d454.  return v2;
}
procedure `boolean` `isEmpty`(`pd.u` v1 @kind this) @signature `Lpd/u;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36d380.  v0:= 1I;
  #L36d382.  return v0;
}
procedure `java.util.Iterator` `iterator`(`pd.u` v1 @kind this) @signature `Lpd/u;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36d624.  v0:= `@@pd.t.g` @type ^`pd.t` @kind object;
  #L36d628.  return v0 @kind object;
}
procedure `int` `lastIndexOf`(`pd.u` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lpd/u;.lastIndexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L36d468.  v0:= instanceof @variable v2 @type ^`java.lang.Void` @kind boolean;
  #L36d46c.  if v0 != 0 then goto L36d474;
  #L36d470.  v2:= -1I;
  #L36d472.  return v2;
  #L36d474.  v2:= (`java.lang.Void`) v2 @kind object;
  #L36d478.  call temp:= `lastIndexOf`(v1, v2) @signature `Lpd/u;.lastIndexOf:(Ljava/lang/Void;)I` @kind virtual;
  #L36d47e.  v2:= temp;
  #L36d480.  return v2;
}
procedure `int` `lastIndexOf`(`pd.u` v1 @kind this, `java.lang.Void` v2 @kind object) @signature `Lpd/u;.lastIndexOf:(Ljava/lang/Void;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36d494.  v0:= "element" @kind object;
  #L36d498.  call `f`(v2, v0) @signature `Lkotlin/jvm/internal/k;.f:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L36d49e.  v2:= -1I;
  #L36d4a0.  return v2;
}
procedure `java.util.ListIterator` `listIterator`(`pd.u` v1 @kind this) @signature `Lpd/u;.listIterator:()Ljava/util/ListIterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36d694.  v0:= `@@pd.t.g` @type ^`pd.t` @kind object;
  #L36d698.  return v0 @kind object;
}
procedure `java.util.ListIterator` `listIterator`(`pd.u` v3 @kind this, `int` v4 ) @signature `Lpd/u;.listIterator:(I)Ljava/util/ListIterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L36d6ac.  if v4 != 0 then goto L36d6b6;
  #L36d6b0.  v4:= `@@pd.t.g` @type ^`pd.t` @kind object;
  #L36d6b4.  return v4 @kind object;
  #L36d6b6.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L36d6ba.  v1:= new `java.lang.StringBuilder`;
  #L36d6be.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L36d6c4.  v2:= "Index: " @kind object;
  #L36d6c8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36d6ce.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L36d6d4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L36d6da.  v4:= temp @kind object;
  #L36d6dc.  call `<init>`(v0, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36d6e2.  throw v0;
}
procedure `java.lang.Object` `remove`(`pd.u` v1 @kind this, `int` v2 ) @signature `Lpd/u;.remove:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L36d504.  v2:= new `java.lang.UnsupportedOperationException`;
  #L36d508.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L36d50c.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36d512.  throw v2;
}
procedure `java.lang.Void` `remove`(`pd.u` v1 @kind this, `int` v2 ) @signature `Lpd/u;.remove:(I)Ljava/lang/Void;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36d5e4.  v2:= new `java.lang.UnsupportedOperationException`;
  #L36d5e8.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L36d5ec.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36d5f2.  throw v2;
}
procedure `boolean` `remove`(`pd.u` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lpd/u;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36d394.  v2:= new `java.lang.UnsupportedOperationException`;
  #L36d398.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L36d39c.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36d3a2.  throw v2;
}
procedure `boolean` `removeAll`(`pd.u` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lpd/u;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36d3b4.  v2:= new `java.lang.UnsupportedOperationException`;
  #L36d3b8.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L36d3bc.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36d3c2.  throw v2;
}
procedure `boolean` `retainAll`(`pd.u` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lpd/u;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36d3d4.  v2:= new `java.lang.UnsupportedOperationException`;
  #L36d3d8.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L36d3dc.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36d3e2.  throw v2;
}
procedure `java.lang.Object` `set`(`pd.u` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Lpd/u;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L36d524.  v1:= new `java.lang.UnsupportedOperationException`;
  #L36d528.  v2:= "Operation is not supported for read-only collection" @kind object;
  #L36d52c.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36d532.  throw v1;
}
procedure `java.lang.Void` `set`(`pd.u` v0 @kind this, `int` v1 , `java.lang.Void` v2 @kind object) @signature `Lpd/u;.set:(ILjava/lang/Void;)Ljava/lang/Void;` @AccessFlag PUBLIC {
    temp;

  #L36d604.  v1:= new `java.lang.UnsupportedOperationException`;
  #L36d608.  v2:= "Operation is not supported for read-only collection" @kind object;
  #L36d60c.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36d612.  throw v1;
}
procedure `int` `size`(`pd.u` v1 @kind this) @signature `Lpd/u;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L36d4b4.  call temp:= `getSize`(v1) @signature `Lpd/u;.getSize:()I` @kind virtual;
  #L36d4ba.  v0:= temp;
  #L36d4bc.  return v0;
}
procedure `java.util.List` `subList`(`pd.u` v3 @kind this, `int` v4 , `int` v5 ) @signature `Lpd/u;.subList:(II)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L36d63c.  if v4 != 0 then goto L36d646;
  #L36d640.  if v5 != 0 then goto L36d646;
  #L36d644.  return v3 @kind object;
  #L36d646.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L36d64a.  v1:= new `java.lang.StringBuilder`;
  #L36d64e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L36d654.  v2:= "fromIndex: " @kind object;
  #L36d658.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36d65e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L36d664.  v4:= ", toIndex: " @kind object;
  #L36d668.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L36d66e.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L36d674.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L36d67a.  v4:= temp @kind object;
  #L36d67c.  call `<init>`(v0, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36d682.  throw v0;
}
procedure `java.lang.Object`[] `toArray`(`pd.u` v1 @kind this) @signature `Lpd/u;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36d544.  call temp:= `a`(v1) @signature `Lkotlin/jvm/internal/f;.a:(Ljava/util/Collection;)[Ljava/lang/Object;` @kind static;
  #L36d54a.  v0:= temp @kind object;
  #L36d54c.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`pd.u` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lpd/u;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36d560.  v0:= "array" @kind object;
  #L36d564.  call `f`(v2, v0) @signature `Lkotlin/jvm/internal/k;.f:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L36d56a.  call temp:= `b`(v1, v2) @signature `Lkotlin/jvm/internal/f;.b:(Ljava/util/Collection;[Ljava/lang/Object;)[Ljava/lang/Object;` @kind static;
  #L36d570.  v2:= temp @kind object;
  #L36d572.  return v2 @kind object;
}
procedure `java.lang.String` `toString`(`pd.u` v1 @kind this) @signature `Lpd/u;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36d584.  v0:= "[]" @kind object;
  #L36d588.  return v0 @kind object;
}
