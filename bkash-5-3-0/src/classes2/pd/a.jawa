record `pd.a` @kind class @AccessFlag FINAL extends `java.util.Collection` @kind interface {
  `java.lang.Object`[] `pd.a.g` @AccessFlag PRIVATE_FINAL;
  `boolean` `pd.a.h` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`pd.a` v1 @kind this, `java.lang.Object`[] v2 @kind object, `boolean` v3 ) @signature `Lpd/a;.<init>:([Ljava/lang/Object;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L36c1ec.  v0:= "values" @kind object;
  #L36c1f0.  call `f`(v2, v0) @signature `Lkotlin/jvm/internal/k;.f:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L36c1f6.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L36c1fc.  v1.`pd.a.g` @type ^`java.lang.Object`[] := v2 @kind object;
  #L36c200.  v1.`pd.a.h` @type ^`boolean` := v3 @kind boolean;
  #L36c204.  return @kind void;
}
procedure `boolean` `add`(`pd.a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lpd/a;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36c014.  v2:= new `java.lang.UnsupportedOperationException`;
  #L36c018.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L36c01c.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36c022.  throw v2;
}
procedure `boolean` `addAll`(`pd.a` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lpd/a;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36c034.  v2:= new `java.lang.UnsupportedOperationException`;
  #L36c038.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L36c03c.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36c042.  throw v2;
}
procedure `void` `clear`(`pd.a` v2 @kind this) @signature `Lpd/a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L36c218.  v0:= new `java.lang.UnsupportedOperationException`;
  #L36c21c.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L36c220.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36c226.  throw v0;
}
procedure `boolean` `contains`(`pd.a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lpd/a;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36c054.  v0:= v1.`pd.a.g` @type ^`java.lang.Object`[] @kind object;
  #L36c058.  call temp:= `g`(v0, v2) @signature `Lpd/f;.g:([Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L36c05e.  v2:= temp;
  #L36c060.  return v2;
}
procedure `boolean` `containsAll`(`pd.a` v2 @kind this, `java.util.Collection` v3 @kind object) @signature `Lpd/a;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L36c074.  v0:= "elements" @kind object;
  #L36c078.  call `f`(v3, v0) @signature `Lkotlin/jvm/internal/k;.f:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L36c07e.  call temp:= `isEmpty`(v3) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L36c084.  v0:= temp;
  #L36c086.  v1:= 1I;
  #L36c088.  if v0 == 0 then goto L36c08e;
  #L36c08c.  goto L36c0b8;
  #L36c08e.  call temp:= `iterator`(v3) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L36c094.  v3:= temp @kind object;
  #L36c096.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L36c09c.  v0:= temp;
  #L36c09e.  if v0 == 0 then goto L36c0b8;
  #L36c0a2.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L36c0a8.  v0:= temp @kind object;
  #L36c0aa.  call temp:= `contains`(v2, v0) @signature `Lpd/a;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L36c0b0.  v0:= temp;
  #L36c0b2.  if v0 != 0 then goto L36c096;
  #L36c0b6.  v1:= 0I;
  #L36c0b8.  return v1;
}
procedure `int` `g`(`pd.a` v1 @kind this) @signature `Lpd/a;.g:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36c150.  v0:= v1.`pd.a.g` @type ^`java.lang.Object`[] @kind object;
  #L36c154.  v0:= length @variable v0;
  #L36c156.  return v0;
}
procedure `boolean` `isEmpty`(`pd.a` v1 @kind this) @signature `Lpd/a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36c0cc.  v0:= v1.`pd.a.g` @type ^`java.lang.Object`[] @kind object;
  #L36c0d0.  v0:= length @variable v0;
  #L36c0d2.  if v0 != 0 then goto L36c0da;
  #L36c0d6.  v0:= 1I;
  #L36c0d8.  goto L36c0dc;
  #L36c0da.  v0:= 0I;
  #L36c0dc.  return v0;
}
procedure `java.util.Iterator` `iterator`(`pd.a` v1 @kind this) @signature `Lpd/a;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36c1cc.  v0:= v1.`pd.a.g` @type ^`java.lang.Object`[] @kind object;
  #L36c1d0.  call temp:= `a`(v0) @signature `Lkotlin/jvm/internal/b;.a:([Ljava/lang/Object;)Ljava/util/Iterator;` @kind static;
  #L36c1d6.  v0:= temp @kind object;
  #L36c1d8.  return v0 @kind object;
}
procedure `boolean` `remove`(`pd.a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lpd/a;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36c0f0.  v2:= new `java.lang.UnsupportedOperationException`;
  #L36c0f4.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L36c0f8.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36c0fe.  throw v2;
}
procedure `boolean` `removeAll`(`pd.a` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lpd/a;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36c110.  v2:= new `java.lang.UnsupportedOperationException`;
  #L36c114.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L36c118.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36c11e.  throw v2;
}
procedure `boolean` `retainAll`(`pd.a` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lpd/a;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36c130.  v2:= new `java.lang.UnsupportedOperationException`;
  #L36c134.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L36c138.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36c13e.  throw v2;
}
procedure `int` `size`(`pd.a` v1 @kind this) @signature `Lpd/a;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L36c168.  call temp:= `g`(v1) @signature `Lpd/a;.g:()I` @kind virtual;
  #L36c16e.  v0:= temp;
  #L36c170.  return v0;
}
procedure `java.lang.Object`[] `toArray`(`pd.a` v2 @kind this) @signature `Lpd/a;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L36c184.  v0:= v2.`pd.a.g` @type ^`java.lang.Object`[] @kind object;
  #L36c188.  v1:= v2.`pd.a.h` @type ^`boolean` @kind boolean;
  #L36c18c.  call temp:= `a`(v0, v1) @signature `Lpd/j;.a:([Ljava/lang/Object;Z)[Ljava/lang/Object;` @kind static;
  #L36c192.  v0:= temp @kind object;
  #L36c194.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`pd.a` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lpd/a;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36c1a8.  v0:= "array" @kind object;
  #L36c1ac.  call `f`(v2, v0) @signature `Lkotlin/jvm/internal/k;.f:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L36c1b2.  call temp:= `b`(v1, v2) @signature `Lkotlin/jvm/internal/f;.b:(Ljava/util/Collection;[Ljava/lang/Object;)[Ljava/lang/Object;` @kind static;
  #L36c1b8.  v2:= temp @kind object;
  #L36c1ba.  return v2 @kind object;
}
