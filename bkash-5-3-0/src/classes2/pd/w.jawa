record `pd.w` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Set` @kind interface, `java.io.Serializable` @kind interface {
}
global `pd.w` `@@pd.w.INSTANCE` @AccessFlag PUBLIC_STATIC_FINAL;
global `long` `@@pd.w.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lpd/w;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L36dca4.  v0:= new `pd.w`;
  #L36dca8.  call `<init>`(v0) @signature `Lpd/w;.<init>:()V` @kind direct;
  #L36dcae.  `@@pd.w.INSTANCE` @type ^`pd.w` := v0 @kind object;
  #L36dcb2.  return @kind void;
}
procedure `void` `<init>`(`pd.w` v0 @kind this) @signature `Lpd/w;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L36dcc4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L36dcca.  return @kind void;
}
procedure `java.lang.Object` `readResolve`(`pd.w` v1 @kind this) @signature `Lpd/w;.readResolve:()Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L36dc1c.  v0:= `@@pd.w.INSTANCE` @type ^`pd.w` @kind object;
  #L36dc20.  return v0 @kind object;
}
procedure `boolean` `add`(`pd.w` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lpd/w;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L36da64.  v2:= new `java.lang.UnsupportedOperationException`;
  #L36da68.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L36da6c.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36da72.  throw v2;
}
procedure `boolean` `add`(`pd.w` v1 @kind this, `java.lang.Void` v2 @kind object) @signature `Lpd/w;.add:(Ljava/lang/Void;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36da84.  v2:= new `java.lang.UnsupportedOperationException`;
  #L36da88.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L36da8c.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36da92.  throw v2;
}
procedure `boolean` `addAll`(`pd.w` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lpd/w;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36daa4.  v2:= new `java.lang.UnsupportedOperationException`;
  #L36daa8.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L36daac.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36dab2.  throw v2;
}
procedure `void` `clear`(`pd.w` v2 @kind this) @signature `Lpd/w;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L36dcdc.  v0:= new `java.lang.UnsupportedOperationException`;
  #L36dce0.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L36dce4.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36dcea.  throw v0;
}
procedure `boolean` `contains`(`pd.w` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lpd/w;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L36dac4.  v0:= instanceof @variable v2 @type ^`java.lang.Void` @kind boolean;
  #L36dac8.  if v0 != 0 then goto L36dad0;
  #L36dacc.  v2:= 0I;
  #L36dace.  return v2;
  #L36dad0.  v2:= (`java.lang.Void`) v2 @kind object;
  #L36dad4.  call temp:= `contains`(v1, v2) @signature `Lpd/w;.contains:(Ljava/lang/Void;)Z` @kind virtual;
  #L36dada.  v2:= temp;
  #L36dadc.  return v2;
}
procedure `boolean` `contains`(`pd.w` v1 @kind this, `java.lang.Void` v2 @kind object) @signature `Lpd/w;.contains:(Ljava/lang/Void;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36daf0.  v0:= "element" @kind object;
  #L36daf4.  call `f`(v2, v0) @signature `Lkotlin/jvm/internal/k;.f:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L36dafa.  v2:= 0I;
  #L36dafc.  return v2;
}
procedure `boolean` `containsAll`(`pd.w` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lpd/w;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36db10.  v0:= "elements" @kind object;
  #L36db14.  call `f`(v2, v0) @signature `Lkotlin/jvm/internal/k;.f:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L36db1a.  call temp:= `isEmpty`(v2) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L36db20.  v2:= temp;
  #L36db22.  return v2;
}
procedure `boolean` `equals`(`pd.w` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lpd/w;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36db34.  v0:= instanceof @variable v2 @type ^`java.util.Set` @kind boolean;
  #L36db38.  if v0 == 0 then goto L36db50;
  #L36db3c.  v2:= (`java.util.Set`) v2 @kind object;
  #L36db40.  call temp:= `isEmpty`(v2) @signature `Ljava/util/Set;.isEmpty:()Z` @kind interface;
  #L36db46.  v2:= temp;
  #L36db48.  if v2 == 0 then goto L36db50;
  #L36db4c.  v2:= 1I;
  #L36db4e.  goto L36db52;
  #L36db50.  v2:= 0I;
  #L36db52.  return v2;
}
procedure `int` `getSize`(`pd.w` v1 @kind this) @signature `Lpd/w;.getSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36dbd8.  v0:= 0I;
  #L36dbda.  return v0;
}
procedure `int` `hashCode`(`pd.w` v1 @kind this) @signature `Lpd/w;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36dbec.  v0:= 0I;
  #L36dbee.  return v0;
}
procedure `boolean` `isEmpty`(`pd.w` v1 @kind this) @signature `Lpd/w;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36db64.  v0:= 1I;
  #L36db66.  return v0;
}
procedure `java.util.Iterator` `iterator`(`pd.w` v1 @kind this) @signature `Lpd/w;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36dc8c.  v0:= `@@pd.t.g` @type ^`pd.t` @kind object;
  #L36dc90.  return v0 @kind object;
}
procedure `boolean` `remove`(`pd.w` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lpd/w;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36db78.  v2:= new `java.lang.UnsupportedOperationException`;
  #L36db7c.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L36db80.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36db86.  throw v2;
}
procedure `boolean` `removeAll`(`pd.w` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lpd/w;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36db98.  v2:= new `java.lang.UnsupportedOperationException`;
  #L36db9c.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L36dba0.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36dba6.  throw v2;
}
procedure `boolean` `retainAll`(`pd.w` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lpd/w;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36dbb8.  v2:= new `java.lang.UnsupportedOperationException`;
  #L36dbbc.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L36dbc0.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36dbc6.  throw v2;
}
procedure `int` `size`(`pd.w` v1 @kind this) @signature `Lpd/w;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L36dc00.  call temp:= `getSize`(v1) @signature `Lpd/w;.getSize:()I` @kind virtual;
  #L36dc06.  v0:= temp;
  #L36dc08.  return v0;
}
procedure `java.lang.Object`[] `toArray`(`pd.w` v1 @kind this) @signature `Lpd/w;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36dc34.  call temp:= `a`(v1) @signature `Lkotlin/jvm/internal/f;.a:(Ljava/util/Collection;)[Ljava/lang/Object;` @kind static;
  #L36dc3a.  v0:= temp @kind object;
  #L36dc3c.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`pd.w` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lpd/w;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36dc50.  v0:= "array" @kind object;
  #L36dc54.  call `f`(v2, v0) @signature `Lkotlin/jvm/internal/k;.f:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L36dc5a.  call temp:= `b`(v1, v2) @signature `Lkotlin/jvm/internal/f;.b:(Ljava/util/Collection;[Ljava/lang/Object;)[Ljava/lang/Object;` @kind static;
  #L36dc60.  v2:= temp @kind object;
  #L36dc62.  return v2 @kind object;
}
procedure `java.lang.String` `toString`(`pd.w` v1 @kind this) @signature `Lpd/w;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L36dc74.  v0:= "[]" @kind object;
  #L36dc78.  return v0 @kind object;
}
