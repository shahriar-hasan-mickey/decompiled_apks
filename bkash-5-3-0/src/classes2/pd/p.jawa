record `pd.p` @kind class @AccessFlag  extends `pd.o` @kind class {
}
procedure `boolean` `j`(`java.util.Collection` v2 @kind object, `java.lang.Iterable` v3 @kind object) @signature `Lpd/p;.j:(Ljava/util/Collection;Ljava/lang/Iterable;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L36c8f8.  v0:= "<this>" @kind object;
  #L36c8fc.  call `f`(v2, v0) @signature `Lkotlin/jvm/internal/k;.f:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L36c902.  v0:= "elements" @kind object;
  #L36c906.  call `f`(v3, v0) @signature `Lkotlin/jvm/internal/k;.f:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L36c90c.  v0:= instanceof @variable v3 @type ^`java.util.Collection` @kind boolean;
  #L36c910.  if v0 == 0 then goto L36c922;
  #L36c914.  v3:= (`java.util.Collection`) v3 @kind object;
  #L36c918.  call temp:= `addAll`(v2, v3) @signature `Ljava/util/Collection;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L36c91e.  v2:= temp;
  #L36c920.  return v2;
  #L36c922.  v0:= 0I;
  #L36c924.  call temp:= `iterator`(v3) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L36c92a.  v3:= temp @kind object;
  #L36c92c.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L36c932.  v1:= temp;
  #L36c934.  if v1 == 0 then goto L36c950;
  #L36c938.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L36c93e.  v1:= temp @kind object;
  #L36c940.  call temp:= `add`(v2, v1) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L36c946.  v1:= temp;
  #L36c948.  if v1 == 0 then goto L36c92c;
  #L36c94c.  v0:= 1I;
  #L36c94e.  goto L36c92c;
  #L36c950.  return v0;
}
