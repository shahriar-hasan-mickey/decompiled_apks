record `pd.j` @kind class @AccessFlag  {
}
procedure `java.lang.Object`[] `a`(`java.lang.Object`[] v2 @kind object, `boolean` v3 ) @signature `Lpd/j;.a:([Ljava/lang/Object;Z)[Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L36c74c.  v0:= constclass @type ^`java.lang.Object`[] @kind object;
  #L36c750.  v1:= "<this>" @kind object;
  #L36c754.  call `f`(v2, v1) @signature `Lkotlin/jvm/internal/k;.f:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L36c75a.  if v3 == 0 then goto L36c774;
  #L36c75e.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L36c764.  v3:= temp @kind object;
  #L36c766.  call temp:= `a`(v3, v0) @signature `Lkotlin/jvm/internal/k;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L36c76c.  v3:= temp;
  #L36c76e.  if v3 == 0 then goto L36c774;
  #L36c772.  goto L36c788;
  #L36c774.  v3:= length @variable v2;
  #L36c776.  call temp:= `copyOf`(v2, v3, v0) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;ILjava/lang/Class;)[Ljava/lang/Object;` @kind static;
  #L36c77c.  v2:= temp @kind object;
  #L36c77e.  v3:= "copyOf(this, this.size, Array<Any?>::class.java)" @kind object;
  #L36c782.  call `e`(v2, v3) @signature `Lkotlin/jvm/internal/k;.e:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L36c788.  return v2 @kind object;
}
procedure `java.util.List` `b`(`java.lang.Object` v1 @kind object) @signature `Lpd/j;.b:(Ljava/lang/Object;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L36c79c.  call temp:= `singletonList`(v1) @signature `Ljava/util/Collections;.singletonList:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L36c7a2.  v1:= temp @kind object;
  #L36c7a4.  v0:= "singletonList(element)" @kind object;
  #L36c7a8.  call `e`(v1, v0) @signature `Lkotlin/jvm/internal/k;.e:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L36c7ae.  return v1 @kind object;
}
