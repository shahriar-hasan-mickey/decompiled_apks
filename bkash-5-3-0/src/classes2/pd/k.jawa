record `pd.k` @kind class @AccessFlag  extends `pd.j` @kind class {
}
procedure `java.util.Collection` `c`(`java.lang.Object`[] v2 @kind object) @signature `Lpd/k;.c:([Ljava/lang/Object;)Ljava/util/Collection;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L36c7e8.  v0:= "<this>" @kind object;
  #L36c7ec.  call `f`(v2, v0) @signature `Lkotlin/jvm/internal/k;.f:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L36c7f2.  v0:= new `pd.a`;
  #L36c7f6.  v1:= 0I;
  #L36c7f8.  call `<init>`(v0, v2, v1) @signature `Lpd/a;.<init>:([Ljava/lang/Object;Z)V` @kind direct;
  #L36c7fe.  return v0 @kind object;
}
procedure `java.util.List` `d`() @signature `Lpd/k;.d:()Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L36c810.  v0:= `@@pd.u.INSTANCE` @type ^`pd.u` @kind object;
  #L36c814.  return v0 @kind object;
}
procedure `int` `e`(`java.util.List` v1 @kind object) @signature `Lpd/k;.e:(Ljava/util/List;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L36c7c0.  v0:= "<this>" @kind object;
  #L36c7c4.  call `f`(v1, v0) @signature `Lkotlin/jvm/internal/k;.f:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L36c7ca.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L36c7d0.  v1:= temp;
  #L36c7d2.  v1:= v1 + -1;
  #L36c7d6.  return v1;
}
procedure `java.util.List` `f`(`java.lang.Object`[] v1 @kind object) @signature `Lpd/k;.f:([Ljava/lang/Object;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L36c828.  v0:= "elements" @kind object;
  #L36c82c.  call `f`(v1, v0) @signature `Lkotlin/jvm/internal/k;.f:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L36c832.  v0:= length @variable v1;
  #L36c834.  if v0 <= 0 then goto L36c842;
  #L36c838.  call temp:= `a`(v1) @signature `Lpd/b;.a:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L36c83e.  v1:= temp @kind object;
  #L36c840.  goto L36c84a;
  #L36c842.  call temp:= `d`() @signature `Lpd/i;.d:()Ljava/util/List;` @kind static;
  #L36c848.  v1:= temp @kind object;
  #L36c84a.  return v1 @kind object;
}
procedure `java.util.List` `g`(`java.util.List` v2 @kind object) @signature `Lpd/k;.g:(Ljava/util/List;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L36c85c.  v0:= "<this>" @kind object;
  #L36c860.  call `f`(v2, v0) @signature `Lkotlin/jvm/internal/k;.f:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L36c866.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L36c86c.  v0:= temp;
  #L36c86e.  if v0 == 0 then goto L36c88e;
  #L36c872.  v1:= 1I;
  #L36c874.  if v0 == v1 then goto L36c87a;
  #L36c878.  goto L36c896;
  #L36c87a.  v0:= 0I;
  #L36c87c.  call temp:= `get`(v2, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L36c882.  v2:= temp @kind object;
  #L36c884.  call temp:= `b`(v2) @signature `Lpd/i;.b:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L36c88a.  v2:= temp @kind object;
  #L36c88c.  goto L36c896;
  #L36c88e.  call temp:= `d`() @signature `Lpd/i;.d:()Ljava/util/List;` @kind static;
  #L36c894.  v2:= temp @kind object;
  #L36c896.  return v2 @kind object;
}
procedure `void` `h`() @signature `Lpd/k;.h:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L36c8a8.  v0:= new `java.lang.ArithmeticException`;
  #L36c8ac.  v1:= "Index overflow has happened." @kind object;
  #L36c8b0.  call `<init>`(v0, v1) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36c8b6.  throw v0;
}
