record `ae.a` @kind class @AccessFlag PUBLIC_FINAL extends `ae.b` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `ae.a.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`ae.a` v1 @kind this, `ae.b` v2 @kind object) @signature `Lae/a;.<init>:(Lae/b;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L10db2c.  v0:= "sequence" @kind object;
  #L10db30.  call `f`(v2, v0) @signature `Lkotlin/jvm/internal/k;.f:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L10db36.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L10db3c.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L10db40.  call `<init>`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L10db46.  v1.`ae.a.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L10db4a.  return @kind void;
}
procedure `java.util.Iterator` `iterator`(`ae.a` v2 @kind this) @signature `Lae/a;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L10daec.  v0:= v2.`ae.a.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L10daf0.  v1:= 0I;
  #L10daf2.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L10daf8.  v0:= temp @kind object;
  #L10dafa.  v0:= (`ae.b`) v0 @kind object;
  #L10dafe.  if v0 == 0 then goto L10db0c;
  #L10db02.  call temp:= `iterator`(v0) @signature `Lae/b;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L10db08.  v0:= temp @kind object;
  #L10db0a.  return v0 @kind object;
  #L10db0c.  v0:= new `java.lang.IllegalStateException`;
  #L10db10.  v1:= "This sequence can be consumed only once." @kind object;
  #L10db14.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L10db1a.  throw v0;
}
