record `ae.i$a` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Iterator` @kind interface {
  `java.util.Iterator` `ae.i$a.g` @AccessFlag PRIVATE_FINAL;
  `ae.i` `ae.i$a.h` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`ae.i$a` v0 @kind this, `ae.i` v1 @kind object) @signature `Lae/i$a;.<init>:(Lae/i;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L10dd78.  v0.`ae.i$a.h` @type ^`ae.i` := v1 @kind object;
  #L10dd7c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L10dd82.  call temp:= `a`(v1) @signature `Lae/i;.a:(Lae/i;)Lae/b;` @kind static;
  #L10dd88.  v1:= temp @kind object;
  #L10dd8a.  call temp:= `iterator`(v1) @signature `Lae/b;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L10dd90.  v1:= temp @kind object;
  #L10dd92.  v0.`ae.i$a.g` @type ^`java.util.Iterator` := v1 @kind object;
  #L10dd96.  return @kind void;
}
procedure `boolean` `hasNext`(`ae.i$a` v1 @kind this) @signature `Lae/i$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L10dd24.  v0:= v1.`ae.i$a.g` @type ^`java.util.Iterator` @kind object;
  #L10dd28.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L10dd2e.  v0:= temp;
  #L10dd30.  return v0;
}
procedure `java.lang.Object` `next`(`ae.i$a` v2 @kind this) @signature `Lae/i$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L10dd44.  v0:= v2.`ae.i$a.h` @type ^`ae.i` @kind object;
  #L10dd48.  call temp:= `b`(v0) @signature `Lae/i;.b:(Lae/i;)Lwd/l;` @kind static;
  #L10dd4e.  v0:= temp @kind object;
  #L10dd50.  v1:= v2.`ae.i$a.g` @type ^`java.util.Iterator` @kind object;
  #L10dd54.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L10dd5a.  v1:= temp @kind object;
  #L10dd5c.  call temp:= `invoke`(v0, v1) @signature `Lwd/l;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L10dd62.  v0:= temp @kind object;
  #L10dd64.  return v0 @kind object;
}
procedure `void` `remove`(`ae.i$a` v2 @kind this) @signature `Lae/i$a;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L10dda8.  v0:= new `java.lang.UnsupportedOperationException`;
  #L10ddac.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L10ddb0.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L10ddb6.  throw v0;
}
