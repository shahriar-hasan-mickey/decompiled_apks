record `ma.a$a` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Comparator` @kind interface {
}
procedure `void` `<init>`(`ma.a$a` v0 @kind this) @signature `Lma/a$a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L321038.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L32103e.  return @kind void;
}
procedure `int` `a`(`ma.a$a` v3 @kind this, `java.io.File` v4 @kind object, `java.io.File` v5 @kind object) @signature `Lma/a$a;.a:(Ljava/io/File;Ljava/io/File;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L320fdc.  call temp:= `lastModified`(v4) @signature `Ljava/io/File;.lastModified:()J` @kind virtual;
  #L320fe2.  v0:= temp @kind wide;
  #L320fe4.  call temp:= `lastModified`(v5) @signature `Ljava/io/File;.lastModified:()J` @kind virtual;
  #L320fea.  v4:= temp @kind wide;
  #L320fec.  v2:= lcmp(v0, v4);
  #L320ff0.  if v2 >= 0 then goto L320ff8;
  #L320ff4.  v4:= -1I;
  #L320ff6.  goto L321002;
  #L320ff8.  if v2 != 0 then goto L321000;
  #L320ffc.  v4:= 0I;
  #L320ffe.  goto L321002;
  #L321000.  v4:= 1I;
  #L321002.  return v4;
}
procedure `int` `compare`(`ma.a$a` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lma/a$a;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L321014.  v1:= (`java.io.File`) v1 @kind object;
  #L321018.  v2:= (`java.io.File`) v2 @kind object;
  #L32101c.  call temp:= `a`(v0, v1, v2) @signature `Lma/a$a;.a:(Ljava/io/File;Ljava/io/File;)I` @kind virtual;
  #L321022.  v1:= temp;
  #L321024.  return v1;
}
