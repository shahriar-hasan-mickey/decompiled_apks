record `bd.c` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `java.lang.Object` `a`(`java.lang.Object` v0 @kind object) @signature `Lbd/c;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L10ed94.  call temp:= `requireNonNull`(v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L10ed9a.  return v0 @kind object;
}
procedure `void` `b`(`boolean` v0 , `java.lang.Object` v1 @kind object) @signature `Lbd/c;.b:(ZLjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L10edac.  if v0 == 0 then goto L10edb2;
  #L10edb0.  return @kind void;
  #L10edb2.  v0:= new `java.lang.IllegalStateException`;
  #L10edb6.  call temp:= `valueOf`(v1) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L10edbc.  v1:= temp @kind object;
  #L10edbe.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L10edc4.  throw v0;
}
