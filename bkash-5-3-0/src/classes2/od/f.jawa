record `od.f` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.Comparable` @kind interface {
  `int` `od.f.g` @AccessFlag PRIVATE_FINAL;
  `int` `od.f.h` @AccessFlag PRIVATE_FINAL;
  `int` `od.f.i` @AccessFlag PRIVATE_FINAL;
  `int` `od.f.j` @AccessFlag PRIVATE_FINAL;
}
global `od.f` `@@od.f.k` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lod/f;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L326554.  v0:= new `od.f$a`;
  #L326558.  v1:= 0I;
  #L32655a.  call `<init>`(v0, v1) @signature `Lod/f$a;.<init>:(Lkotlin/jvm/internal/g;)V` @kind direct;
  #L326560.  call temp:= `a`() @signature `Lod/g;.a:()Lod/f;` @kind static;
  #L326566.  v0:= temp @kind object;
  #L326568.  `@@od.f.k` @type ^`od.f` := v0 @kind object;
  #L32656c.  return @kind void;
}
procedure `void` `<init>`(`od.f` v0 @kind this, `int` v1 , `int` v2 , `int` v3 ) @signature `Lod/f;.<init>:(III)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L326580.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L326586.  v0.`od.f.g` @type ^`int` := v1;
  #L32658a.  v0.`od.f.h` @type ^`int` := v2;
  #L32658e.  v0.`od.f.i` @type ^`int` := v3;
  #L326592.  call temp:= `b`(v0, v1, v2, v3) @signature `Lod/f;.b:(III)I` @kind direct;
  #L326598.  v1:= temp;
  #L32659a.  v0.`od.f.j` @type ^`int` := v1;
  #L32659e.  return @kind void;
}
procedure `int` `b`(`od.f` v3 @kind this, `int` v4 , `int` v5 , `int` v6 ) @signature `Lod/f;.b:(III)I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L326440.  v0:= new `kotlin.ranges.h`;
  #L326444.  v1:= 0I;
  #L326446.  v2:= 255I;
  #L32644a.  call `<init>`(v0, v1, v2) @signature `Lkotlin/ranges/h;.<init>:(II)V` @kind direct;
  #L326450.  call temp:= `l`(v0, v4) @signature `Lkotlin/ranges/h;.l:(I)Z` @kind virtual;
  #L326456.  v0:= temp;
  #L326458.  if v0 == 0 then goto L32648a;
  #L32645c.  v0:= new `kotlin.ranges.h`;
  #L326460.  call `<init>`(v0, v1, v2) @signature `Lkotlin/ranges/h;.<init>:(II)V` @kind direct;
  #L326466.  call temp:= `l`(v0, v5) @signature `Lkotlin/ranges/h;.l:(I)Z` @kind virtual;
  #L32646c.  v0:= temp;
  #L32646e.  if v0 == 0 then goto L32648a;
  #L326472.  v0:= new `kotlin.ranges.h`;
  #L326476.  call `<init>`(v0, v1, v2) @signature `Lkotlin/ranges/h;.<init>:(II)V` @kind direct;
  #L32647c.  call temp:= `l`(v0, v6) @signature `Lkotlin/ranges/h;.l:(I)Z` @kind virtual;
  #L326482.  v0:= temp;
  #L326484.  if v0 == 0 then goto L32648a;
  #L326488.  v1:= 1I;
  #L32648a.  if v1 == 0 then goto L32649c;
  #L32648e.  v4:= v4 ^< 16;
  #L326492.  v5:= v5 ^< 8;
  #L326496.  v4:= v4 + v5 @kind int;
  #L326498.  v4:= v4 + v6 @kind int;
  #L32649a.  return v4;
  #L32649c.  v0:= new `java.lang.StringBuilder`;
  #L3264a0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3264a6.  v1:= "Version components are out of range: " @kind object;
  #L3264aa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3264b0.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3264b6.  v4:= 46I;
  #L3264ba.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3264c0.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3264c6.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3264cc.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3264d2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3264d8.  v4:= temp @kind object;
  #L3264da.  v5:= new `java.lang.IllegalArgumentException`;
  #L3264de.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L3264e4.  v4:= temp @kind object;
  #L3264e6.  call `<init>`(v5, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3264ec.  throw v5;
}
procedure `int` `a`(`od.f` v1 @kind this, `od.f` v2 @kind object) @signature `Lod/f;.a:(Lod/f;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L326400.  v0:= "other" @kind object;
  #L326404.  call `f`(v2, v0) @signature `Lkotlin/jvm/internal/k;.f:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L32640a.  v0:= v1.`od.f.j` @type ^`int`;
  #L32640e.  v2:= v2.`od.f.j` @type ^`int`;
  #L326412.  v0:= v0 - v2 @kind int;
  #L326414.  return v0;
}
procedure `int` `compareTo`(`od.f` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lod/f;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L3263e0.  v1:= (`od.f`) v1 @kind object;
  #L3263e4.  call temp:= `a`(v0, v1) @signature `Lod/f;.a:(Lod/f;)I` @kind virtual;
  #L3263ea.  v1:= temp;
  #L3263ec.  return v1;
}
procedure `boolean` `equals`(`od.f` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lod/f;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L32639c.  v0:= 1I;
  #L32639e.  if v3 != v4 then goto L3263a4;
  #L3263a2.  return v0;
  #L3263a4.  v1:= instanceof @variable v4 @type ^`od.f` @kind boolean;
  #L3263a8.  if v1 == 0 then goto L3263b2;
  #L3263ac.  v4:= (`od.f`) v4 @kind object;
  #L3263b0.  goto L3263b4;
  #L3263b2.  v4:= 0I;
  #L3263b4.  v1:= 0I;
  #L3263b6.  if v4 != 0 then goto L3263bc;
  #L3263ba.  return v1;
  #L3263bc.  v2:= v3.`od.f.j` @type ^`int`;
  #L3263c0.  v4:= v4.`od.f.j` @type ^`int`;
  #L3263c4.  if v2 != v4 then goto L3263ca;
  #L3263c8.  goto L3263cc;
  #L3263ca.  v0:= 0I;
  #L3263cc.  return v0;
}
procedure `int` `hashCode`(`od.f` v1 @kind this) @signature `Lod/f;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L326428.  v0:= v1.`od.f.j` @type ^`int`;
  #L32642c.  return v0;
}
procedure `java.lang.String` `toString`(`od.f` v3 @kind this) @signature `Lod/f;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L326500.  v0:= new `java.lang.StringBuilder`;
  #L326504.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L32650a.  v1:= v3.`od.f.g` @type ^`int`;
  #L32650e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L326514.  v1:= 46I;
  #L326518.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L32651e.  v2:= v3.`od.f.h` @type ^`int`;
  #L326522.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L326528.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L32652e.  v1:= v3.`od.f.i` @type ^`int`;
  #L326532.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L326538.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L32653e.  v0:= temp @kind object;
  #L326540.  return v0 @kind object;
}
