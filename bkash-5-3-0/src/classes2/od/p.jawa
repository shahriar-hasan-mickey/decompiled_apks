record `od.p` @kind class @AccessFlag FINAL extends `od.h` @kind interface, `java.io.Serializable` @kind interface {
  `java.lang.Object` `od.p._value` @AccessFlag PRIVATE_VOLATILE;
  `wd.a` `od.p.initializer` @AccessFlag PRIVATE;
  `java.lang.Object` `od.p.lock` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`od.p` v1 @kind this, `wd.a` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lod/p;.<init>:(Lwd/a;Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L326c5c.  v0:= "initializer" @kind object;
  #L326c60.  call `f`(v2, v0) @signature `Lkotlin/jvm/internal/k;.f:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L326c66.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L326c6c.  v1.`od.p.initializer` @type ^`wd.a` := v2 @kind object;
  #L326c70.  v2:= `@@od.r.a` @type ^`od.r` @kind object;
  #L326c74.  v1.`od.p._value` @type ^`java.lang.Object` := v2 @kind object;
  #L326c78.  if v3 != 0 then goto L326c7e;
  #L326c7c.  v3:= v1 @kind object;
  #L326c7e.  v1.`od.p.lock` @type ^`java.lang.Object` := v3 @kind object;
  #L326c82.  return @kind void;
}
procedure `void` `<init>`(`od.p` v0 @kind this, `wd.a` v1 @kind object, `java.lang.Object` v2 @kind object, `int` v3 , `kotlin.jvm.internal.g` v4 @kind object) @signature `Lod/p;.<init>:(Lwd/a;Ljava/lang/Object;ILkotlin/jvm/internal/g;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L326c94.  v3:= v3 ^& 2;
  #L326c98.  if v3 == 0 then goto L326c9e;
  #L326c9c.  v2:= 0I;
  #L326c9e.  call `<init>`(v0, v1, v2) @signature `Lod/p;.<init>:(Lwd/a;Ljava/lang/Object;)V` @kind direct;
  #L326ca4.  return @kind void;
}
procedure `java.lang.Object` `writeReplace`(`od.p` v2 @kind this) @signature `Lod/p;.writeReplace:()Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L326c04.  v0:= new `od.d`;
  #L326c08.  call temp:= `getValue`(v2) @signature `Lod/p;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L326c0e.  v1:= temp @kind object;
  #L326c10.  call `<init>`(v0, v1) @signature `Lod/d;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L326c16.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`od.p` v3 @kind this) @signature `Lod/p;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L326ba4.  v0:= v3.`od.p._value` @type ^`java.lang.Object` @kind object;
  #L326ba8.  v1:= `@@od.r.a` @type ^`od.r` @kind object;
  #L326bac.  if v0 == v1 then goto L326bb2;
  #L326bb0.  return v0 @kind object;
  #L326bb2.  v0:= v3.`od.p.lock` @type ^`java.lang.Object` @kind object;
  #L326bb6.  @monitorenter v0
  #L326bb8.  v2:= v3.`od.p._value` @type ^`java.lang.Object` @kind object;
  #L326bbc.  if v2 == v1 then goto L326bc2;
  #L326bc0.  goto L326bde;
  #L326bc2.  v1:= v3.`od.p.initializer` @type ^`wd.a` @kind object;
  #L326bc6.  call `c`(v1) @signature `Lkotlin/jvm/internal/k;.c:(Ljava/lang/Object;)V` @kind static;
  #L326bcc.  call temp:= `invoke`(v1) @signature `Lwd/a;.invoke:()Ljava/lang/Object;` @kind interface;
  #L326bd2.  v2:= temp @kind object;
  #L326bd4.  v3.`od.p._value` @type ^`java.lang.Object` := v2 @kind object;
  #L326bd8.  v1:= 0I;
  #L326bda.  v3.`od.p.initializer` @type ^`wd.a` := v1 @kind object;
  #L326bde.  @monitorexit v0
  #L326be0.  return v2 @kind object;
  #L326be2.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L326be4.  @monitorexit v0
  #L326be6.  throw v1;
  catch `java.lang.Throwable` @[L326bb8..L326bde] goto L326be2;
}
procedure `boolean` `isInitialized`(`od.p` v2 @kind this) @signature `Lod/p;.isInitialized:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L326b80.  v0:= v2.`od.p._value` @type ^`java.lang.Object` @kind object;
  #L326b84.  v1:= `@@od.r.a` @type ^`od.r` @kind object;
  #L326b88.  if v0 == v1 then goto L326b90;
  #L326b8c.  v0:= 1I;
  #L326b8e.  goto L326b92;
  #L326b90.  v0:= 0I;
  #L326b92.  return v0;
}
procedure `java.lang.String` `toString`(`od.p` v1 @kind this) @signature `Lod/p;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L326c28.  call temp:= `isInitialized`(v1) @signature `Lod/p;.isInitialized:()Z` @kind virtual;
  #L326c2e.  v0:= temp;
  #L326c30.  if v0 == 0 then goto L326c46;
  #L326c34.  call temp:= `getValue`(v1) @signature `Lod/p;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L326c3a.  v0:= temp @kind object;
  #L326c3c.  call temp:= `valueOf`(v0) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L326c42.  v0:= temp @kind object;
  #L326c44.  goto L326c4a;
  #L326c46.  v0:= "Lazy value not initialized yet." @kind object;
  #L326c4a.  return v0 @kind object;
}
