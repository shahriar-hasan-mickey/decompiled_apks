record `i8.a` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<clinit>`() @signature `Li8/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;

  #L2b6864.  return @kind void;
}
procedure `boolean` `a`(`int` v4 ) @signature `Li8/a;.a:(I)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2b6744.  v0:= 0I;
  #L2b6746.  v1:= 1I;
  #L2b6748.  if v4 <= 0 then goto L2b6750;
  #L2b674c.  v2:= 1I;
  #L2b674e.  goto L2b6752;
  #L2b6750.  v2:= 0I;
  #L2b6752.  v3:= v4 + -1;
  #L2b6756.  v4:= v4 ^& v3 @kind int;
  #L2b6758.  if v4 != 0 then goto L2b675e;
  #L2b675c.  v0:= 1I;
  #L2b675e.  v4:= v2 ^& v0 @kind int;
  #L2b6762.  return v4;
}
procedure `int` `b`(`int` v0 , `int` v1 ) @signature `Li8/a;.b:(II)I` @AccessFlag STATIC {
    temp;

  #L2b6774.  v0:= v0 - v1 @kind int;
  #L2b6776.  v0:= ~v0 @kind int;
  #L2b6778.  v0:= ~v0 @kind int;
  #L2b677a.  v0:= v0 ^>> 31;
  #L2b677e.  return v0;
}
procedure `int` `c`(`int` v1 , `java.math.RoundingMode` v2 @kind object) @signature `Li8/a;.c:(ILjava/math/RoundingMode;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2b6790.  v0:= "x" @kind object;
  #L2b6794.  call temp:= `a`(v0, v1) @signature `Li8/b;.a:(Ljava/lang/String;I)I` @kind static;
  #L2b679a.  v0:= `@@i8.a$a.a` @type ^`int`[] @kind object;
  #L2b679e.  call temp:= `ordinal`(v2) @signature `Ljava/math/RoundingMode;.ordinal:()I` @kind virtual;
  #L2b67a4.  v2:= temp;
  #L2b67a6.  v2:= v0[v2];
  #L2b67aa.  goto L2b680c;
  #L2b67b0.  v1:= new `java.lang.AssertionError`;
  #L2b67b4.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2b67ba.  throw v1;
  #L2b67bc.  call temp:= `numberOfLeadingZeros`(v1) @signature `Ljava/lang/Integer;.numberOfLeadingZeros:(I)I` @kind static;
  #L2b67c2.  v2:= temp;
  #L2b67c4.  v0:= -1257966797I;
  #L2b67ca.  v0:= v0 ^>> v2 @kind int;
  #L2b67cc.  v2:= v2 - 31;
  #L2b67d0.  call temp:= `b`(v0, v1) @signature `Li8/a;.b:(II)I` @kind static;
  #L2b67d6.  v1:= temp;
  #L2b67d8.  v2:= v2 + v1 @kind int;
  #L2b67da.  return v2;
  #L2b67dc.  v1:= v1 + -1;
  #L2b67e0.  call temp:= `numberOfLeadingZeros`(v1) @signature `Ljava/lang/Integer;.numberOfLeadingZeros:(I)I` @kind static;
  #L2b67e6.  v1:= temp;
  #L2b67e8.  v1:= v1 - 32;
  #L2b67ec.  return v1;
  #L2b67ee.  call temp:= `a`(v1) @signature `Li8/a;.a:(I)Z` @kind static;
  #L2b67f4.  v2:= temp;
  #L2b67f6.  call `b`(v2) @signature `Li8/b;.b:(Z)V` @kind static;
  #L2b67fc.  call temp:= `numberOfLeadingZeros`(v1) @signature `Ljava/lang/Integer;.numberOfLeadingZeros:(I)I` @kind static;
  #L2b6802.  v1:= temp;
  #L2b6804.  v1:= v1 - 31;
  #L2b6808.  return v1;
  #L2b680a.  
  #L2b680c.  switch v2
                  | 1 => goto L2b67ee
                  | 2 => goto L2b67fc
                  | 3 => goto L2b67fc
                  | 4 => goto L2b67dc
                  | 5 => goto L2b67dc
                  | 6 => goto L2b67bc
                  | 7 => goto L2b67bc
                  | 8 => goto L2b67bc
                  | else => goto L2b67b0;
}
procedure `int` `d`(`int` v2 , `int` v3 ) @signature `Li8/a;.d:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2b6844.  v0:= (`long`) v2 @kind i2l;
  #L2b6846.  v2:= (`long`) v3 @kind i2l;
  #L2b6848.  v0:= v0 + v2 @kind long;
  #L2b684a.  call temp:= `a`(v0) @signature `Lj8/a;.a:(J)I` @kind static;
  #L2b6850.  v2:= temp;
  #L2b6852.  return v2;
}
