record `i8.b` @kind class @AccessFlag FINAL {
}
procedure `int` `a`(`java.lang.String` v2 @kind object, `int` v3 ) @signature `Li8/b;.a:(Ljava/lang/String;I)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L2b6878.  if v3 <= 0 then goto L2b687e;
  #L2b687c.  return v3;
  #L2b687e.  v0:= new `java.lang.IllegalArgumentException`;
  #L2b6882.  v1:= new `java.lang.StringBuilder`;
  #L2b6886.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2b688c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b6892.  v2:= " (" @kind object;
  #L2b6896.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b689c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b68a2.  v2:= ") must be > 0" @kind object;
  #L2b68a6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b68ac.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2b68b2.  v2:= temp @kind object;
  #L2b68b4.  call `<init>`(v0, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2b68ba.  throw v0;
}
procedure `void` `b`(`boolean` v1 ) @signature `Li8/b;.b:(Z)V` @AccessFlag STATIC {
    temp;
    v0;

  #L2b68cc.  if v1 == 0 then goto L2b68d2;
  #L2b68d0.  return @kind void;
  #L2b68d2.  v1:= new `java.lang.ArithmeticException`;
  #L2b68d6.  v0:= "mode was UNNECESSARY, but rounding was necessary" @kind object;
  #L2b68da.  call `<init>`(v1, v0) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2b68e0.  throw v1;
}
