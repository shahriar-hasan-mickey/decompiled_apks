record `r8.e$c` @kind class @AccessFlag FINAL extends `java.io.InputStream` @kind class {
  `int` `r8.e$c.g` @AccessFlag PRIVATE;
  `int` `r8.e$c.h` @AccessFlag PRIVATE;
  `r8.e` `r8.e$c.i` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`r8.e$c` v1 @kind this, `r8.e` v2 @kind object, `r8.e$b` v3 @kind object) @signature `Lr8/e$c;.<init>:(Lr8/e;Lr8/e$b;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L371af0.  v1.`r8.e$c.i` @type ^`r8.e` := v2 @kind object;
  #L371af4.  call `<init>`(v1) @signature `Ljava/io/InputStream;.<init>:()V` @kind direct;
  #L371afa.  v0:= v3.`r8.e$b.a` @type ^`int`;
  #L371afe.  v0:= v0 + 4;
  #L371b02.  call temp:= `e`(v2, v0) @signature `Lr8/e;.e:(Lr8/e;I)I` @kind static;
  #L371b08.  v2:= temp;
  #L371b0a.  v1.`r8.e$c.g` @type ^`int` := v2;
  #L371b0e.  v2:= v3.`r8.e$b.b` @type ^`int`;
  #L371b12.  v1.`r8.e$c.h` @type ^`int` := v2;
  #L371b16.  return @kind void;
}
procedure `void` `<init>`(`r8.e$c` v0 @kind this, `r8.e` v1 @kind object, `r8.e$b` v2 @kind object, `r8.e$a` v3 @kind object) @signature `Lr8/e$c;.<init>:(Lr8/e;Lr8/e$b;Lr8/e$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L371b28.  call `<init>`(v0, v1, v2) @signature `Lr8/e$c;.<init>:(Lr8/e;Lr8/e$b;)V` @kind direct;
  #L371b2e.  return @kind void;
}
procedure `int` `read`(`r8.e$c` v3 @kind this) @signature `Lr8/e$c;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L371a08.  v0:= v3.`r8.e$c.h` @type ^`int`;
  #L371a0c.  if v0 != 0 then goto L371a14;
  #L371a10.  v0:= -1I;
  #L371a12.  return v0;
  #L371a14.  v0:= v3.`r8.e$c.i` @type ^`r8.e` @kind object;
  #L371a18.  call temp:= `r`(v0) @signature `Lr8/e;.r:(Lr8/e;)Ljava/io/RandomAccessFile;` @kind static;
  #L371a1e.  v0:= temp @kind object;
  #L371a20.  v1:= v3.`r8.e$c.g` @type ^`int`;
  #L371a24.  v1:= (`long`) v1 @kind i2l;
  #L371a26.  call `seek`(v0, v1) @signature `Ljava/io/RandomAccessFile;.seek:(J)V` @kind virtual;
  #L371a2c.  v0:= v3.`r8.e$c.i` @type ^`r8.e` @kind object;
  #L371a30.  call temp:= `r`(v0) @signature `Lr8/e;.r:(Lr8/e;)Ljava/io/RandomAccessFile;` @kind static;
  #L371a36.  v0:= temp @kind object;
  #L371a38.  call temp:= `read`(v0) @signature `Ljava/io/RandomAccessFile;.read:()I` @kind virtual;
  #L371a3e.  v0:= temp;
  #L371a40.  v1:= v3.`r8.e$c.i` @type ^`r8.e` @kind object;
  #L371a44.  v2:= v3.`r8.e$c.g` @type ^`int`;
  #L371a48.  v2:= v2 + 1;
  #L371a4c.  call temp:= `e`(v1, v2) @signature `Lr8/e;.e:(Lr8/e;I)I` @kind static;
  #L371a52.  v1:= temp;
  #L371a54.  v3.`r8.e$c.g` @type ^`int` := v1;
  #L371a58.  v1:= v3.`r8.e$c.h` @type ^`int`;
  #L371a5c.  v1:= v1 + -1;
  #L371a60.  v3.`r8.e$c.h` @type ^`int` := v1;
  #L371a64.  return v0;
}
procedure `int` `read`(`r8.e$c` v2 @kind this, `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lr8/e$c;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L371a78.  v0:= "buffer" @kind object;
  #L371a7c.  call temp:= `i`(v3, v0) @signature `Lr8/e;.i:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L371a82.  v0:= v4 ^| v5 @kind int;
  #L371a86.  if v0 < 0 then goto L371ad4;
  #L371a8a.  v0:= length @variable v3;
  #L371a8c.  v0:= v0 - v4 @kind int;
  #L371a8e.  if v5 > v0 then goto L371ad4;
  #L371a92.  v0:= v2.`r8.e$c.h` @type ^`int`;
  #L371a96.  if v0 <= 0 then goto L371ad0;
  #L371a9a.  if v5 <= v0 then goto L371aa0;
  #L371a9e.  v5:= v0;
  #L371aa0.  v0:= v2.`r8.e$c.i` @type ^`r8.e` @kind object;
  #L371aa4.  v1:= v2.`r8.e$c.g` @type ^`int`;
  #L371aa8.  call `k`(v0, v1, v3, v4, v5) @signature `Lr8/e;.k:(Lr8/e;I[BII)V` @kind static;
  #L371aae.  v3:= v2.`r8.e$c.i` @type ^`r8.e` @kind object;
  #L371ab2.  v4:= v2.`r8.e$c.g` @type ^`int`;
  #L371ab6.  v4:= v4 + v5 @kind int;
  #L371ab8.  call temp:= `e`(v3, v4) @signature `Lr8/e;.e:(Lr8/e;I)I` @kind static;
  #L371abe.  v3:= temp;
  #L371ac0.  v2.`r8.e$c.g` @type ^`int` := v3;
  #L371ac4.  v3:= v2.`r8.e$c.h` @type ^`int`;
  #L371ac8.  v3:= v3 - v5 @kind int;
  #L371aca.  v2.`r8.e$c.h` @type ^`int` := v3;
  #L371ace.  return v5;
  #L371ad0.  v3:= -1I;
  #L371ad2.  return v3;
  #L371ad4.  v3:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L371ad8.  call `<init>`(v3) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:()V` @kind direct;
  #L371ade.  throw v3;
}
