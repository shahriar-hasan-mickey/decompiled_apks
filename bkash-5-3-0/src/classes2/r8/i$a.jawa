record `r8.i$a` @kind class @AccessFlag  {
  `java.util.concurrent.atomic.AtomicMarkableReference` `r8.i$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `r8.i$a.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `r8.i$a.c` @AccessFlag PRIVATE_FINAL;
  `r8.i` `r8.i$a.d` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`r8.i$a` v1 @kind this, `r8.i` v2 @kind object, `boolean` v3 ) @signature `Lr8/i$a;.<init>:(Lr8/i;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L372bd0.  v1.`r8.i$a.d` @type ^`r8.i` := v2 @kind object;
  #L372bd4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L372bda.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L372bde.  v0:= 0I;
  #L372be0.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L372be6.  v1.`r8.i$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L372bea.  v1.`r8.i$a.c` @type ^`boolean` := v3 @kind boolean;
  #L372bee.  v2:= new `r8.b`;
  #L372bf2.  if v3 == 0 then goto L372bfc;
  #L372bf6.  v3:= 8192I;
  #L372bfa.  goto L372c00;
  #L372bfc.  v3:= 1024I;
  #L372c00.  v0:= 64I;
  #L372c04.  call `<init>`(v2, v0, v3) @signature `Lr8/b;.<init>:(II)V` @kind direct;
  #L372c0a.  v3:= new `java.util.concurrent.atomic.AtomicMarkableReference`;
  #L372c0e.  v0:= 0I;
  #L372c10.  call `<init>`(v3, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicMarkableReference;.<init>:(Ljava/lang/Object;Z)V` @kind direct;
  #L372c16.  v1.`r8.i$a.a` @type ^`java.util.concurrent.atomic.AtomicMarkableReference` := v3 @kind object;
  #L372c1a.  return @kind void;
}
procedure `java.lang.Void` `a`(`r8.i$a` v0 @kind object) @signature `Lr8/i$a;.a:(Lr8/i$a;)Ljava/lang/Void;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L372b64.  call temp:= `c`(v0) @signature `Lr8/i$a;.c:()Ljava/lang/Void;` @kind direct;
  #L372b6a.  v0:= temp @kind object;
  #L372b6c.  return v0 @kind object;
}
procedure `java.lang.Void` `c`(`r8.i$a` v2 @kind this) @signature `Lr8/i$a;.c:()Ljava/lang/Void;` @AccessFlag PRIVATE_SYNTHETIC {
    temp;
    v0;
    v1;

  #L372b80.  v0:= v2.`r8.i$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L372b84.  v1:= 0I;
  #L372b86.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L372b8c.  call `e`(v2) @signature `Lr8/i$a;.e:()V` @kind direct;
  #L372b92.  return v1 @kind object;
}
procedure `void` `d`(`r8.i$a` v3 @kind this) @signature `Lr8/i$a;.d:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L372c2c.  v0:= new `r8.h`;
  #L372c30.  call `<init>`(v0, v3) @signature `Lr8/h;.<init>:(Lr8/i$a;)V` @kind direct;
  #L372c36.  v1:= v3.`r8.i$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L372c3a.  v2:= 0I;
  #L372c3c.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L372c42.  v1:= temp;
  #L372c44.  if v1 == 0 then goto L372c5a;
  #L372c48.  v1:= v3.`r8.i$a.d` @type ^`r8.i` @kind object;
  #L372c4c.  call temp:= `b`(v1) @signature `Lr8/i;.b:(Lr8/i;)Lcom/google/firebase/crashlytics/internal/common/h;` @kind static;
  #L372c52.  v1:= temp @kind object;
  #L372c54.  call temp:= `h`(v1, v0) @signature `Lcom/google/firebase/crashlytics/internal/common/h;.h:(Ljava/util/concurrent/Callable;)Lp7/l;` @kind virtual;
  #L372c5a.  return @kind void;
}
procedure `void` `e`(`r8.i$a` v4 @kind this) @signature `Lr8/i$a;.e:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L372c6c.  @monitorenter v4
  #L372c6e.  v0:= v4.`r8.i$a.a` @type ^`java.util.concurrent.atomic.AtomicMarkableReference` @kind object;
  #L372c72.  call temp:= `isMarked`(v0) @signature `Ljava/util/concurrent/atomic/AtomicMarkableReference;.isMarked:()Z` @kind virtual;
  #L372c78.  v0:= temp;
  #L372c7a.  if v0 == 0 then goto L372cb0;
  #L372c7e.  v0:= v4.`r8.i$a.a` @type ^`java.util.concurrent.atomic.AtomicMarkableReference` @kind object;
  #L372c82.  call temp:= `getReference`(v0) @signature `Ljava/util/concurrent/atomic/AtomicMarkableReference;.getReference:()Ljava/lang/Object;` @kind virtual;
  #L372c88.  v0:= temp @kind object;
  #L372c8a.  v0:= (`r8.b`) v0 @kind object;
  #L372c8e.  call temp:= `a`(v0) @signature `Lr8/b;.a:()Ljava/util/Map;` @kind virtual;
  #L372c94.  v0:= temp @kind object;
  #L372c96.  v1:= v4.`r8.i$a.a` @type ^`java.util.concurrent.atomic.AtomicMarkableReference` @kind object;
  #L372c9a.  call temp:= `getReference`(v1) @signature `Ljava/util/concurrent/atomic/AtomicMarkableReference;.getReference:()Ljava/lang/Object;` @kind virtual;
  #L372ca0.  v2:= temp @kind object;
  #L372ca2.  v2:= (`r8.b`) v2 @kind object;
  #L372ca6.  v3:= 0I;
  #L372ca8.  call `set`(v1, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicMarkableReference;.set:(Ljava/lang/Object;Z)V` @kind virtual;
  #L372cae.  goto L372cb2;
  #L372cb0.  v0:= 0I;
  #L372cb2.  @monitorexit v4
  #L372cb4.  if v0 == 0 then goto L372cda;
  #L372cb8.  v1:= v4.`r8.i$a.d` @type ^`r8.i` @kind object;
  #L372cbc.  call temp:= `d`(v1) @signature `Lr8/i;.d:(Lr8/i;)Lr8/d;` @kind static;
  #L372cc2.  v1:= temp @kind object;
  #L372cc4.  v2:= v4.`r8.i$a.d` @type ^`r8.i` @kind object;
  #L372cc8.  call temp:= `c`(v2) @signature `Lr8/i;.c:(Lr8/i;)Ljava/lang/String;` @kind static;
  #L372cce.  v2:= temp @kind object;
  #L372cd0.  v3:= v4.`r8.i$a.c` @type ^`boolean` @kind boolean;
  #L372cd4.  call `l`(v1, v2, v0, v3) @signature `Lr8/d;.l:(Ljava/lang/String;Ljava/util/Map;Z)V` @kind virtual;
  #L372cda.  return @kind void;
  #L372cdc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L372cde.  @monitorexit v4
  #L372ce0.  throw v0;
  catch `java.lang.Throwable` @[L372c6e..L372cb4] goto L372cdc;
  catch `java.lang.Throwable` @[L372cde..L372ce0] goto L372cdc;
}
procedure `java.util.Map` `b`(`r8.i$a` v1 @kind this) @signature `Lr8/i$a;.b:()Ljava/util/Map;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L372ba4.  v0:= v1.`r8.i$a.a` @type ^`java.util.concurrent.atomic.AtomicMarkableReference` @kind object;
  #L372ba8.  call temp:= `getReference`(v0) @signature `Ljava/util/concurrent/atomic/AtomicMarkableReference;.getReference:()Ljava/lang/Object;` @kind virtual;
  #L372bae.  v0:= temp @kind object;
  #L372bb0.  v0:= (`r8.b`) v0 @kind object;
  #L372bb4.  call temp:= `a`(v0) @signature `Lr8/b;.a:()Ljava/util/Map;` @kind virtual;
  #L372bba.  v0:= temp @kind object;
  #L372bbc.  return v0 @kind object;
}
procedure `boolean` `f`(`r8.i$a` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lr8/i$a;.f:(Ljava/lang/String;Ljava/lang/String;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L372af4.  @monitorenter v1
  #L372af6.  v0:= v1.`r8.i$a.a` @type ^`java.util.concurrent.atomic.AtomicMarkableReference` @kind object;
  #L372afa.  call temp:= `getReference`(v0) @signature `Ljava/util/concurrent/atomic/AtomicMarkableReference;.getReference:()Ljava/lang/Object;` @kind virtual;
  #L372b00.  v0:= temp @kind object;
  #L372b02.  v0:= (`r8.b`) v0 @kind object;
  #L372b06.  call temp:= `d`(v0, v2, v3) @signature `Lr8/b;.d:(Ljava/lang/String;Ljava/lang/String;)Z` @kind virtual;
  #L372b0c.  v2:= temp;
  #L372b0e.  if v2 != 0 then goto L372b18;
  #L372b12.  v2:= 0I;
  #L372b14.  @monitorexit v1
  #L372b16.  return v2;
  #L372b18.  v2:= v1.`r8.i$a.a` @type ^`java.util.concurrent.atomic.AtomicMarkableReference` @kind object;
  #L372b1c.  call temp:= `getReference`(v2) @signature `Ljava/util/concurrent/atomic/AtomicMarkableReference;.getReference:()Ljava/lang/Object;` @kind virtual;
  #L372b22.  v3:= temp @kind object;
  #L372b24.  v3:= (`r8.b`) v3 @kind object;
  #L372b28.  v0:= 1I;
  #L372b2a.  call `set`(v2, v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicMarkableReference;.set:(Ljava/lang/Object;Z)V` @kind virtual;
  #L372b30.  @monitorexit v1
  #L372b32.  call `d`(v1) @signature `Lr8/i$a;.d:()V` @kind direct;
  #L372b38.  return v0;
  #L372b3a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L372b3c.  @monitorexit v1
  #L372b3e.  throw v2;
  catch `java.lang.Throwable` @[L372af6..L372b32] goto L372b3a;
  catch `java.lang.Throwable` @[L372b3c..L372b3e] goto L372b3a;
}
