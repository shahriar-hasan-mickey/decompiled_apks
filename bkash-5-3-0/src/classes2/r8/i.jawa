record `r8.i` @kind class @AccessFlag PUBLIC {
  `r8.d` `r8.i.a` @AccessFlag PRIVATE_FINAL;
  `com.google.firebase.crashlytics.internal.common.h` `r8.i.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `r8.i.c` @AccessFlag PRIVATE_FINAL;
  `r8.i$a` `r8.i.d` @AccessFlag PRIVATE_FINAL;
  `r8.i$a` `r8.i.e` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicMarkableReference` `r8.i.f` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`r8.i` v3 @kind this, `java.lang.String` v4 @kind object, `v8.f` v5 @kind object, `com.google.firebase.crashlytics.internal.common.h` v6 @kind object) @signature `Lr8/i;.<init>:(Ljava/lang/String;Lv8/f;Lcom/google/firebase/crashlytics/internal/common/h;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L372ed0.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L372ed6.  v0:= new `r8.i$a`;
  #L372eda.  v1:= 0I;
  #L372edc.  call `<init>`(v0, v3, v1) @signature `Lr8/i$a;.<init>:(Lr8/i;Z)V` @kind direct;
  #L372ee2.  v3.`r8.i.d` @type ^`r8.i$a` := v0 @kind object;
  #L372ee6.  v0:= new `r8.i$a`;
  #L372eea.  v2:= 1I;
  #L372eec.  call `<init>`(v0, v3, v2) @signature `Lr8/i$a;.<init>:(Lr8/i;Z)V` @kind direct;
  #L372ef2.  v3.`r8.i.e` @type ^`r8.i$a` := v0 @kind object;
  #L372ef6.  v0:= new `java.util.concurrent.atomic.AtomicMarkableReference`;
  #L372efa.  v2:= 0I;
  #L372efc.  call `<init>`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicMarkableReference;.<init>:(Ljava/lang/Object;Z)V` @kind direct;
  #L372f02.  v3.`r8.i.f` @type ^`java.util.concurrent.atomic.AtomicMarkableReference` := v0 @kind object;
  #L372f06.  v3.`r8.i.c` @type ^`java.lang.String` := v4 @kind object;
  #L372f0a.  v4:= new `r8.d`;
  #L372f0e.  call `<init>`(v4, v5) @signature `Lr8/d;.<init>:(Lv8/f;)V` @kind direct;
  #L372f14.  v3.`r8.i.a` @type ^`r8.d` := v4 @kind object;
  #L372f18.  v3.`r8.i.b` @type ^`com.google.firebase.crashlytics.internal.common.h` := v6 @kind object;
  #L372f1c.  return @kind void;
}
procedure `java.lang.Object` `a`(`r8.i` v0 @kind object) @signature `Lr8/i;.a:(Lr8/i;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L372d60.  call temp:= `h`(v0) @signature `Lr8/i;.h:()Ljava/lang/Object;` @kind direct;
  #L372d66.  v0:= temp @kind object;
  #L372d68.  return v0 @kind object;
}
procedure `com.google.firebase.crashlytics.internal.common.h` `b`(`r8.i` v0 @kind object) @signature `Lr8/i;.b:(Lr8/i;)Lcom/google/firebase/crashlytics/internal/common/h;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L372d48.  v0:= v0.`r8.i.b` @type ^`com.google.firebase.crashlytics.internal.common.h` @kind object;
  #L372d4c.  return v0 @kind object;
}
procedure `java.lang.String` `c`(`r8.i` v0 @kind object) @signature `Lr8/i;.c:(Lr8/i;)Ljava/lang/String;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L372d98.  v0:= v0.`r8.i.c` @type ^`java.lang.String` @kind object;
  #L372d9c.  return v0 @kind object;
}
procedure `r8.d` `d`(`r8.i` v0 @kind object) @signature `Lr8/i;.d:(Lr8/i;)Lr8/d;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L372e38.  v0:= v0.`r8.i.a` @type ^`r8.d` @kind object;
  #L372e3c.  return v0 @kind object;
}
procedure `java.lang.Object` `h`(`r8.i` v1 @kind this) @signature `Lr8/i;.h:()Ljava/lang/Object;` @AccessFlag PRIVATE_SYNTHETIC {
    temp;
    v0;

  #L372d7c.  call `k`(v1) @signature `Lr8/i;.k:()V` @kind direct;
  #L372d82.  v0:= 0I;
  #L372d84.  return v0 @kind object;
}
procedure `r8.i` `i`(`java.lang.String` v3 @kind object, `v8.f` v4 @kind object, `com.google.firebase.crashlytics.internal.common.h` v5 @kind object) @signature `Lr8/i;.i:(Ljava/lang/String;Lv8/f;Lcom/google/firebase/crashlytics/internal/common/h;)Lr8/i;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L372e50.  v0:= new `r8.d`;
  #L372e54.  call `<init>`(v0, v4) @signature `Lr8/d;.<init>:(Lv8/f;)V` @kind direct;
  #L372e5a.  v1:= new `r8.i`;
  #L372e5e.  call `<init>`(v1, v3, v4, v5) @signature `Lr8/i;.<init>:(Ljava/lang/String;Lv8/f;Lcom/google/firebase/crashlytics/internal/common/h;)V` @kind direct;
  #L372e64.  v4:= v1.`r8.i.d` @type ^`r8.i$a` @kind object;
  #L372e68.  v4:= v4.`r8.i$a.a` @type ^`java.util.concurrent.atomic.AtomicMarkableReference` @kind object;
  #L372e6c.  call temp:= `getReference`(v4) @signature `Ljava/util/concurrent/atomic/AtomicMarkableReference;.getReference:()Ljava/lang/Object;` @kind virtual;
  #L372e72.  v4:= temp @kind object;
  #L372e74.  v4:= (`r8.b`) v4 @kind object;
  #L372e78.  v5:= 0I;
  #L372e7a.  call temp:= `g`(v0, v3, v5) @signature `Lr8/d;.g:(Ljava/lang/String;Z)Ljava/util/Map;` @kind virtual;
  #L372e80.  v2:= temp @kind object;
  #L372e82.  call `e`(v4, v2) @signature `Lr8/b;.e:(Ljava/util/Map;)V` @kind virtual;
  #L372e88.  v4:= v1.`r8.i.e` @type ^`r8.i$a` @kind object;
  #L372e8c.  v4:= v4.`r8.i$a.a` @type ^`java.util.concurrent.atomic.AtomicMarkableReference` @kind object;
  #L372e90.  call temp:= `getReference`(v4) @signature `Ljava/util/concurrent/atomic/AtomicMarkableReference;.getReference:()Ljava/lang/Object;` @kind virtual;
  #L372e96.  v4:= temp @kind object;
  #L372e98.  v4:= (`r8.b`) v4 @kind object;
  #L372e9c.  v2:= 1I;
  #L372e9e.  call temp:= `g`(v0, v3, v2) @signature `Lr8/d;.g:(Ljava/lang/String;Z)Ljava/util/Map;` @kind virtual;
  #L372ea4.  v2:= temp @kind object;
  #L372ea6.  call `e`(v4, v2) @signature `Lr8/b;.e:(Ljava/util/Map;)V` @kind virtual;
  #L372eac.  v4:= v1.`r8.i.f` @type ^`java.util.concurrent.atomic.AtomicMarkableReference` @kind object;
  #L372eb0.  call temp:= `h`(v0, v3) @signature `Lr8/d;.h:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L372eb6.  v3:= temp @kind object;
  #L372eb8.  call `set`(v4, v3, v5) @signature `Ljava/util/concurrent/atomic/AtomicMarkableReference;.set:(Ljava/lang/Object;Z)V` @kind virtual;
  #L372ebe.  return v1 @kind object;
}
procedure `java.lang.String` `j`(`java.lang.String` v1 @kind object, `v8.f` v2 @kind object) @signature `Lr8/i;.j:(Ljava/lang/String;Lv8/f;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L372dd4.  v0:= new `r8.d`;
  #L372dd8.  call `<init>`(v0, v2) @signature `Lr8/d;.<init>:(Lv8/f;)V` @kind direct;
  #L372dde.  call temp:= `h`(v0, v1) @signature `Lr8/d;.h:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L372de4.  v1:= temp @kind object;
  #L372de6.  return v1 @kind object;
}
procedure `void` `k`(`r8.i` v5 @kind this) @signature `Lr8/i;.k:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L372f30.  v0:= v5.`r8.i.f` @type ^`java.util.concurrent.atomic.AtomicMarkableReference` @kind object;
  #L372f34.  @monitorenter v0
  #L372f36.  v1:= v5.`r8.i.f` @type ^`java.util.concurrent.atomic.AtomicMarkableReference` @kind object;
  #L372f3a.  call temp:= `isMarked`(v1) @signature `Ljava/util/concurrent/atomic/AtomicMarkableReference;.isMarked:()Z` @kind virtual;
  #L372f40.  v1:= temp;
  #L372f42.  v2:= 0I;
  #L372f44.  if v1 == 0 then goto L372f60;
  #L372f48.  call temp:= `g`(v5) @signature `Lr8/i;.g:()Ljava/lang/String;` @kind virtual;
  #L372f4e.  v1:= temp @kind object;
  #L372f50.  v3:= 1I;
  #L372f52.  v4:= v5.`r8.i.f` @type ^`java.util.concurrent.atomic.AtomicMarkableReference` @kind object;
  #L372f56.  call `set`(v4, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicMarkableReference;.set:(Ljava/lang/Object;Z)V` @kind virtual;
  #L372f5c.  v2:= 1I;
  #L372f5e.  goto L372f62;
  #L372f60.  v1:= 0I;
  #L372f62.  @monitorexit v0
  #L372f64.  if v2 == 0 then goto L372f76;
  #L372f68.  v0:= v5.`r8.i.a` @type ^`r8.d` @kind object;
  #L372f6c.  v2:= v5.`r8.i.c` @type ^`java.lang.String` @kind object;
  #L372f70.  call `m`(v0, v2, v1) @signature `Lr8/d;.m:(Ljava/lang/String;Ljava/lang/String;)V` @kind virtual;
  #L372f76.  return @kind void;
  #L372f78.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L372f7a.  @monitorexit v0
  #L372f7c.  throw v1;
  catch `java.lang.Throwable` @[L372f36..L372f64] goto L372f78;
  catch `java.lang.Throwable` @[L372f7a..L372f7c] goto L372f78;
}
procedure `java.util.Map` `e`(`r8.i` v1 @kind this) @signature `Lr8/i;.e:()Ljava/util/Map;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L372df8.  v0:= v1.`r8.i.d` @type ^`r8.i$a` @kind object;
  #L372dfc.  call temp:= `b`(v0) @signature `Lr8/i$a;.b:()Ljava/util/Map;` @kind virtual;
  #L372e02.  v0:= temp @kind object;
  #L372e04.  return v0 @kind object;
}
procedure `java.util.Map` `f`(`r8.i` v1 @kind this) @signature `Lr8/i;.f:()Ljava/util/Map;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L372e18.  v0:= v1.`r8.i.e` @type ^`r8.i$a` @kind object;
  #L372e1c.  call temp:= `b`(v0) @signature `Lr8/i$a;.b:()Ljava/util/Map;` @kind virtual;
  #L372e22.  v0:= temp @kind object;
  #L372e24.  return v0 @kind object;
}
procedure `java.lang.String` `g`(`r8.i` v1 @kind this) @signature `Lr8/i;.g:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L372db0.  v0:= v1.`r8.i.f` @type ^`java.util.concurrent.atomic.AtomicMarkableReference` @kind object;
  #L372db4.  call temp:= `getReference`(v0) @signature `Ljava/util/concurrent/atomic/AtomicMarkableReference;.getReference:()Ljava/lang/Object;` @kind virtual;
  #L372dba.  v0:= temp @kind object;
  #L372dbc.  v0:= (`java.lang.String`) v0 @kind object;
  #L372dc0.  return v0 @kind object;
}
procedure `boolean` `l`(`r8.i` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lr8/i;.l:(Ljava/lang/String;Ljava/lang/String;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L372d08.  v0:= v1.`r8.i.d` @type ^`r8.i$a` @kind object;
  #L372d0c.  call temp:= `f`(v0, v2, v3) @signature `Lr8/i$a;.f:(Ljava/lang/String;Ljava/lang/String;)Z` @kind virtual;
  #L372d12.  v2:= temp;
  #L372d14.  return v2;
}
procedure `boolean` `m`(`r8.i` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lr8/i;.m:(Ljava/lang/String;Ljava/lang/String;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L372d28.  v0:= v1.`r8.i.e` @type ^`r8.i$a` @kind object;
  #L372d2c.  call temp:= `f`(v0, v2, v3) @signature `Lr8/i$a;.f:(Ljava/lang/String;Ljava/lang/String;)Z` @kind virtual;
  #L372d32.  v2:= temp;
  #L372d34.  return v2;
}
procedure `void` `n`(`r8.i` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lr8/i;.n:(Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L372fa4.  v0:= 1024I;
  #L372fa8.  call temp:= `c`(v4, v0) @signature `Lr8/b;.c:(Ljava/lang/String;I)Ljava/lang/String;` @kind static;
  #L372fae.  v4:= temp @kind object;
  #L372fb0.  v0:= v3.`r8.i.f` @type ^`java.util.concurrent.atomic.AtomicMarkableReference` @kind object;
  #L372fb4.  @monitorenter v0
  #L372fb6.  v1:= v3.`r8.i.f` @type ^`java.util.concurrent.atomic.AtomicMarkableReference` @kind object;
  #L372fba.  call temp:= `getReference`(v1) @signature `Ljava/util/concurrent/atomic/AtomicMarkableReference;.getReference:()Ljava/lang/Object;` @kind virtual;
  #L372fc0.  v1:= temp @kind object;
  #L372fc2.  v1:= (`java.lang.String`) v1 @kind object;
  #L372fc6.  call temp:= `A`(v4, v1) @signature `Lcom/google/firebase/crashlytics/internal/common/g;.A:(Ljava/lang/String;Ljava/lang/String;)Z` @kind static;
  #L372fcc.  v1:= temp;
  #L372fce.  if v1 == 0 then goto L372fd6;
  #L372fd2.  @monitorexit v0
  #L372fd4.  return @kind void;
  #L372fd6.  v1:= v3.`r8.i.f` @type ^`java.util.concurrent.atomic.AtomicMarkableReference` @kind object;
  #L372fda.  v2:= 1I;
  #L372fdc.  call `set`(v1, v4, v2) @signature `Ljava/util/concurrent/atomic/AtomicMarkableReference;.set:(Ljava/lang/Object;Z)V` @kind virtual;
  #L372fe2.  @monitorexit v0
  #L372fe4.  v4:= v3.`r8.i.b` @type ^`com.google.firebase.crashlytics.internal.common.h` @kind object;
  #L372fe8.  v0:= new `r8.g`;
  #L372fec.  call `<init>`(v0, v3) @signature `Lr8/g;.<init>:(Lr8/i;)V` @kind direct;
  #L372ff2.  call temp:= `h`(v4, v0) @signature `Lcom/google/firebase/crashlytics/internal/common/h;.h:(Ljava/util/concurrent/Callable;)Lp7/l;` @kind virtual;
  #L372ff8.  return @kind void;
  #L372ffa.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L372ffc.  @monitorexit v0
  #L372ffe.  throw v4;
  catch `java.lang.Throwable` @[L372fb6..L372fe4] goto L372ffa;
  catch `java.lang.Throwable` @[L372ffc..L372ffe] goto L372ffa;
}
