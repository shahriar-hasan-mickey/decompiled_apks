record `r8.b` @kind class @AccessFlag  {
  `java.util.Map` `r8.b.a` @AccessFlag PRIVATE_FINAL;
  `int` `r8.b.b` @AccessFlag PRIVATE_FINAL;
  `int` `r8.b.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`r8.b` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lr8/b;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3710a8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3710ae.  v0:= new `java.util.HashMap`;
  #L3710b2.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L3710b8.  v1.`r8.b.a` @type ^`java.util.Map` := v0 @kind object;
  #L3710bc.  v1.`r8.b.b` @type ^`int` := v2;
  #L3710c0.  v1.`r8.b.c` @type ^`int` := v3;
  #L3710c4.  return @kind void;
}
procedure `java.lang.String` `b`(`r8.b` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lr8/b;.b:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L371000.  if v2 == 0 then goto L371012;
  #L371004.  v0:= v1.`r8.b.c` @type ^`int`;
  #L371008.  call temp:= `c`(v2, v0) @signature `Lr8/b;.c:(Ljava/lang/String;I)Ljava/lang/String;` @kind static;
  #L37100e.  v2:= temp @kind object;
  #L371010.  return v2 @kind object;
  #L371012.  v2:= new `java.lang.IllegalArgumentException`;
  #L371016.  v0:= "Custom attribute key must not be null." @kind object;
  #L37101a.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L371020.  throw v2;
}
procedure `java.lang.String` `c`(`java.lang.String` v1 @kind object, `int` v2 ) @signature `Lr8/b;.c:(Ljava/lang/String;I)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L371034.  if v1 == 0 then goto L371056;
  #L371038.  call temp:= `trim`(v1) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L37103e.  v1:= temp @kind object;
  #L371040.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L371046.  v0:= temp;
  #L371048.  if v0 <= v2 then goto L371056;
  #L37104c.  v0:= 0I;
  #L37104e.  call temp:= `substring`(v1, v0, v2) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L371054.  v1:= temp @kind object;
  #L371056.  return v1 @kind object;
}
procedure `java.util.Map` `a`(`r8.b` v2 @kind this) @signature `Lr8/b;.a:()Ljava/util/Map;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L371068.  @monitorenter v2
  #L37106a.  v0:= new `java.util.HashMap`;
  #L37106e.  v1:= v2.`r8.b.a` @type ^`java.util.Map` @kind object;
  #L371072.  call `<init>`(v0, v1) @signature `Ljava/util/HashMap;.<init>:(Ljava/util/Map;)V` @kind direct;
  #L371078.  call temp:= `unmodifiableMap`(v0) @signature `Ljava/util/Collections;.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;` @kind static;
  #L37107e.  v0:= temp @kind object;
  #L371080.  @monitorexit v2
  #L371082.  return v0 @kind object;
  #L371084.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L371086.  @monitorexit v2
  #L371088.  throw v0;
  catch `java.lang.Throwable` @[L37106a..L371080] goto L371084;
}
procedure `boolean` `d`(`r8.b` v4 @kind this, `java.lang.String` v5 @kind object, `java.lang.String` v6 @kind object) @signature `Lr8/b;.d:(Ljava/lang/String;Ljava/lang/String;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L370f10.  @monitorenter v4
  #L370f12.  call temp:= `b`(v4, v5) @signature `Lr8/b;.b:(Ljava/lang/String;)Ljava/lang/String;` @kind direct;
  #L370f18.  v0:= temp @kind object;
  #L370f1a.  v1:= v4.`r8.b.a` @type ^`java.util.Map` @kind object;
  #L370f1e.  call temp:= `size`(v1) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L370f24.  v1:= temp;
  #L370f26.  v2:= v4.`r8.b.b` @type ^`int`;
  #L370f2a.  v3:= 0I;
  #L370f2c.  if v1 < v2 then goto L370f8a;
  #L370f30.  v1:= v4.`r8.b.a` @type ^`java.util.Map` @kind object;
  #L370f34.  call temp:= `containsKey`(v1, v0) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L370f3a.  v1:= temp;
  #L370f3c.  if v1 == 0 then goto L370f42;
  #L370f40.  goto L370f8a;
  #L370f42.  call temp:= `f`() @signature `Lo8/f;.f:()Lo8/f;` @kind static;
  #L370f48.  v6:= temp @kind object;
  #L370f4a.  v0:= new `java.lang.StringBuilder`;
  #L370f4e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L370f54.  v1:= "Ignored entry \"" @kind object;
  #L370f58.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L370f5e.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L370f64.  v5:= "\" when adding custom keys. Maximum allowable: " @kind object;
  #L370f68.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L370f6e.  v5:= v4.`r8.b.b` @type ^`int`;
  #L370f72.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L370f78.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L370f7e.  v5:= temp @kind object;
  #L370f80.  call `k`(v6, v5) @signature `Lo8/f;.k:(Ljava/lang/String;)V` @kind virtual;
  #L370f86.  @monitorexit v4
  #L370f88.  return v3;
  #L370f8a.  v5:= v4.`r8.b.c` @type ^`int`;
  #L370f8e.  call temp:= `c`(v6, v5) @signature `Lr8/b;.c:(Ljava/lang/String;I)Ljava/lang/String;` @kind static;
  #L370f94.  v5:= temp @kind object;
  #L370f96.  v1:= v4.`r8.b.a` @type ^`java.util.Map` @kind object;
  #L370f9a.  call temp:= `get`(v1, v0) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L370fa0.  v1:= temp @kind object;
  #L370fa2.  v1:= (`java.lang.String`) v1 @kind object;
  #L370fa6.  call temp:= `A`(v1, v5) @signature `Lcom/google/firebase/crashlytics/internal/common/g;.A:(Ljava/lang/String;Ljava/lang/String;)Z` @kind static;
  #L370fac.  v1:= temp;
  #L370fae.  if v1 == 0 then goto L370fb6;
  #L370fb2.  @monitorexit v4
  #L370fb4.  return v3;
  #L370fb6.  v1:= v4.`r8.b.a` @type ^`java.util.Map` @kind object;
  #L370fba.  if v6 != 0 then goto L370fc2;
  #L370fbe.  v5:= "" @kind object;
  #L370fc2.  call temp:= `put`(v1, v0, v5) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L370fc8.  v5:= 1I;
  #L370fca.  @monitorexit v4
  #L370fcc.  return v5;
  #L370fce.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L370fd0.  @monitorexit v4
  #L370fd2.  throw v5;
  catch `java.lang.Throwable` @[L370f12..L370f86] goto L370fce;
  catch `java.lang.Throwable` @[L370f8a..L370fae] goto L370fce;
  catch `java.lang.Throwable` @[L370fb6..L370fc8] goto L370fce;
}
procedure `void` `e`(`r8.b` v5 @kind this, `java.util.Map` v6 @kind object) @signature `Lr8/b;.e:(Ljava/util/Map;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3710d8.  @monitorenter v5
  #L3710da.  v0:= 0I;
  #L3710dc.  call temp:= `entrySet`(v6) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L3710e2.  v6:= temp @kind object;
  #L3710e4.  call temp:= `iterator`(v6) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3710ea.  v6:= temp @kind object;
  #L3710ec.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3710f2.  v1:= temp;
  #L3710f4.  if v1 == 0 then goto L371172;
  #L3710f8.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3710fe.  v1:= temp @kind object;
  #L371100.  v1:= (`java.util.Map$Entry`) v1 @kind object;
  #L371104.  call temp:= `getKey`(v1) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L37110a.  v2:= temp @kind object;
  #L37110c.  v2:= (`java.lang.String`) v2 @kind object;
  #L371110.  call temp:= `b`(v5, v2) @signature `Lr8/b;.b:(Ljava/lang/String;)Ljava/lang/String;` @kind direct;
  #L371116.  v2:= temp @kind object;
  #L371118.  v3:= v5.`r8.b.a` @type ^`java.util.Map` @kind object;
  #L37111c.  call temp:= `size`(v3) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L371122.  v3:= temp;
  #L371124.  v4:= v5.`r8.b.b` @type ^`int`;
  #L371128.  if v3 < v4 then goto L371144;
  #L37112c.  v3:= v5.`r8.b.a` @type ^`java.util.Map` @kind object;
  #L371130.  call temp:= `containsKey`(v3, v2) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L371136.  v3:= temp;
  #L371138.  if v3 == 0 then goto L37113e;
  #L37113c.  goto L371144;
  #L37113e.  v0:= v0 + 1;
  #L371142.  goto L3710ec;
  #L371144.  call temp:= `getValue`(v1) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L37114a.  v1:= temp @kind object;
  #L37114c.  v1:= (`java.lang.String`) v1 @kind object;
  #L371150.  v3:= v5.`r8.b.a` @type ^`java.util.Map` @kind object;
  #L371154.  if v1 != 0 then goto L37115e;
  #L371158.  v1:= "" @kind object;
  #L37115c.  goto L37116a;
  #L37115e.  v4:= v5.`r8.b.c` @type ^`int`;
  #L371162.  call temp:= `c`(v1, v4) @signature `Lr8/b;.c:(Ljava/lang/String;I)Ljava/lang/String;` @kind static;
  #L371168.  v1:= temp @kind object;
  #L37116a.  call temp:= `put`(v3, v2, v1) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L371170.  goto L3710ec;
  #L371172.  if v0 <= 0 then goto L3711ba;
  #L371176.  call temp:= `f`() @signature `Lo8/f;.f:()Lo8/f;` @kind static;
  #L37117c.  v6:= temp @kind object;
  #L37117e.  v1:= new `java.lang.StringBuilder`;
  #L371182.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L371188.  v2:= "Ignored " @kind object;
  #L37118c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L371192.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L371198.  v0:= " entries when adding custom keys. Maximum allowable: " @kind object;
  #L37119c.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3711a2.  v0:= v5.`r8.b.b` @type ^`int`;
  #L3711a6.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3711ac.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3711b2.  v0:= temp @kind object;
  #L3711b4.  call `k`(v6, v0) @signature `Lo8/f;.k:(Ljava/lang/String;)V` @kind virtual;
  #L3711ba.  @monitorexit v5
  #L3711bc.  return @kind void;
  #L3711be.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3711c0.  @monitorexit v5
  #L3711c2.  throw v6;
  catch `java.lang.Throwable` @[L3710dc..L3711ba] goto L3711be;
}
