record `r8.f$a` @kind class @AccessFlag  extends `r8.e$d` @kind interface {
  `byte`[] `r8.f$a.a` @AccessFlag FINAL_SYNTHETIC;
  `int`[] `r8.f$a.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`r8.f$a` v0 @kind this, `r8.f` v1 @kind object, `byte`[] v2 @kind object, `int`[] v3 @kind object) @signature `Lr8/f$a;.<init>:(Lr8/f;[B[I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L371bec.  v0.`r8.f$a.a` @type ^`byte`[] := v2 @kind object;
  #L371bf0.  v0.`r8.f$a.b` @type ^`int`[] := v3 @kind object;
  #L371bf4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L371bfa.  return @kind void;
}
procedure `void` `a`(`r8.f$a` v3 @kind this, `java.io.InputStream` v4 @kind object, `int` v5 ) @signature `Lr8/f$a;.a:(Ljava/io/InputStream;I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L371c0c.  v0:= v3.`r8.f$a.a` @type ^`byte`[] @kind object;
  #L371c10.  v1:= v3.`r8.f$a.b` @type ^`int`[] @kind object;
  #L371c14.  v2:= 0I;
  #L371c16.  v1:= v1[v2];
  #L371c1a.  call temp:= `read`(v4, v0, v1, v5) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L371c20.  v0:= v3.`r8.f$a.b` @type ^`int`[] @kind object;
  #L371c24.  v1:= v0[v2];
  #L371c28.  v1:= v1 + v5 @kind int;
  #L371c2a.  v0[v2]:= v1;
  #L371c2e.  call `close`(v4) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L371c34.  return @kind void;
  #L371c36.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L371c38.  call `close`(v4) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L371c3e.  throw v5;
  catch `java.lang.Throwable` @[L371c0c..L371c2e] goto L371c36;
}
