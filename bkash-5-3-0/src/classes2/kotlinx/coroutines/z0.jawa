record `kotlinx.coroutines.z0` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.internal.d0` @kind class {
  `int` `kotlinx.coroutines.z0._decision` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.z0.j` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/z0;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L30f27c.  v0:= constclass @type ^`kotlinx.coroutines.z0` @kind object;
  #L30f280.  v1:= "_decision" @kind object;
  #L30f284.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L30f28a.  v0:= temp @kind object;
  #L30f28c.  `@@kotlinx.coroutines.z0.j` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v0 @kind object;
  #L30f290.  return @kind void;
}
procedure `boolean` `F0`(`kotlinx.coroutines.z0` v4 @kind this) @signature `Lkotlinx/coroutines/z0;.F0:()Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L30f22c.  v0:= v4.`kotlinx.coroutines.z0._decision` @type ^`int`;
  #L30f230.  v1:= 0I;
  #L30f232.  v2:= 1I;
  #L30f234.  if v0 == 0 then goto L30f256;
  #L30f238.  if v0 != v2 then goto L30f23e;
  #L30f23c.  return v1;
  #L30f23e.  v0:= new `java.lang.IllegalStateException`;
  #L30f242.  v1:= "Already resumed" @kind object;
  #L30f246.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L30f24c.  v1:= temp @kind object;
  #L30f24e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30f254.  throw v0;
  #L30f256.  v0:= `@@kotlinx.coroutines.z0.j` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L30f25a.  v3:= 2I;
  #L30f25c.  call temp:= `compareAndSet`(v0, v4, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L30f262.  v0:= temp;
  #L30f264.  if v0 == 0 then goto L30f22c;
  #L30f268.  return v2;
}
procedure `void` `A0`(`kotlinx.coroutines.z0` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/z0;.A0:(Ljava/lang/Object;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L30f2bc.  call temp:= `F0`(v3) @signature `Lkotlinx/coroutines/z0;.F0:()Z` @kind direct;
  #L30f2c2.  v0:= temp;
  #L30f2c4.  if v0 == 0 then goto L30f2ca;
  #L30f2c8.  return @kind void;
  #L30f2ca.  v0:= v3.`kotlinx.coroutines.internal.d0.i` @type ^`kotlin.coroutines.d` @kind object;
  #L30f2ce.  call temp:= `c`(v0) @signature `Lkotlin/coroutines/intrinsics/b;.c:(Lkotlin/coroutines/d;)Lkotlin/coroutines/d;` @kind static;
  #L30f2d4.  v0:= temp @kind object;
  #L30f2d6.  v1:= v3.`kotlinx.coroutines.internal.d0.i` @type ^`kotlin.coroutines.d` @kind object;
  #L30f2da.  call temp:= `a`(v4, v1) @signature `Lkotlinx/coroutines/a0;.a:(Ljava/lang/Object;Lkotlin/coroutines/d;)Ljava/lang/Object;` @kind static;
  #L30f2e0.  v4:= temp @kind object;
  #L30f2e2.  v1:= 2I;
  #L30f2e4.  v2:= 0I;
  #L30f2e6.  call `c`(v0, v4, v2, v1, v2) @signature `Lkotlinx/coroutines/internal/i;.c:(Lkotlin/coroutines/d;Ljava/lang/Object;Lwd/l;ILjava/lang/Object;)V` @kind static;
  #L30f2ec.  return @kind void;
}
procedure `void` `p`(`kotlinx.coroutines.z0` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/z0;.p:(Ljava/lang/Object;)V` @AccessFlag PROTECTED {
    temp;

  #L30f2a4.  call `A0`(v0, v1) @signature `Lkotlinx/coroutines/z0;.A0:(Ljava/lang/Object;)V` @kind virtual;
  #L30f2aa.  return @kind void;
}
