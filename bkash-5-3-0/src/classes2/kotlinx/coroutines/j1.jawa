record `kotlinx.coroutines.j1` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlinx.coroutines.h1` @kind class {
}
procedure `void` `<init>`(`kotlinx.coroutines.j1` v0 @kind this) @signature `Lkotlinx/coroutines/j1;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3104b0.  call `<init>`(v0) @signature `Lkotlinx/coroutines/h1;.<init>:()V` @kind direct;
  #L3104b6.  return @kind void;
}
procedure `java.lang.Thread` `U0`() @signature `Lkotlinx/coroutines/j1;.U0:()Ljava/lang/Thread;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `V0`(`kotlinx.coroutines.j1` v1 @kind this, `long` v2 , `kotlinx.coroutines.i1$b` v4 @kind object) @signature `Lkotlinx/coroutines/j1;.V0:(JLkotlinx/coroutines/i1$b;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L3104c8.  v0:= `@@kotlinx.coroutines.s0.n` @type ^`kotlinx.coroutines.s0` @kind object;
  #L3104cc.  call `h1`(v0, v2, v4) @signature `Lkotlinx/coroutines/i1;.h1:(JLkotlinx/coroutines/i1$b;)V` @kind virtual;
  #L3104d2.  return @kind void;
}
procedure `void` `W0`(`kotlinx.coroutines.j1` v2 @kind this) @signature `Lkotlinx/coroutines/j1;.W0:()V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;

  #L3104e4.  call temp:= `U0`(v2) @signature `Lkotlinx/coroutines/j1;.U0:()Ljava/lang/Thread;` @kind virtual;
  #L3104ea.  v0:= temp @kind object;
  #L3104ec.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L3104f2.  v1:= temp @kind object;
  #L3104f4.  if v1 == v0 then goto L310504;
  #L3104f8.  call temp:= `a`() @signature `Lkotlinx/coroutines/c;.a:()Lkotlinx/coroutines/b;` @kind static;
  #L3104fe.  call `unpark`(v0) @signature `Ljava/util/concurrent/locks/LockSupport;.unpark:(Ljava/lang/Thread;)V` @kind static;
  #L310504.  return @kind void;
}
