record `kotlinx.coroutines.h1` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlinx.coroutines.e0` @kind class {
  `long` `kotlinx.coroutines.h1.i` @AccessFlag PRIVATE;
  `boolean` `kotlinx.coroutines.h1.j` @AccessFlag PRIVATE;
  `kotlinx.coroutines.internal.a` `kotlinx.coroutines.h1.k` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlinx.coroutines.h1` v0 @kind this) @signature `Lkotlinx/coroutines/h1;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3106d8.  call `<init>`(v0) @signature `Lkotlinx/coroutines/e0;.<init>:()V` @kind direct;
  #L3106de.  return @kind void;
}
procedure `void` `Q0`(`kotlinx.coroutines.h1` v0 @kind object, `boolean` v1 , `int` v2 , `java.lang.Object` v3 @kind object) @signature `Lkotlinx/coroutines/h1;.Q0:(Lkotlinx/coroutines/h1;ZILjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L310790.  if v3 != 0 then goto L3107a6;
  #L310794.  v2:= v2 ^& 1;
  #L310798.  if v2 == 0 then goto L31079e;
  #L31079c.  v1:= 0I;
  #L31079e.  call `O0`(v0, v1) @signature `Lkotlinx/coroutines/h1;.O0:(Z)V` @kind virtual;
  #L3107a4.  return @kind void;
  #L3107a6.  v0:= new `java.lang.UnsupportedOperationException`;
  #L3107aa.  v1:= "Super calls with default arguments not supported in this target, function: incrementUseCount" @kind object;
  #L3107ae.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3107b4.  throw v0;
}
procedure `long` `x0`(`kotlinx.coroutines.h1` v2 @kind this, `boolean` v3 ) @signature `Lkotlinx/coroutines/h1;.x0:(Z)J` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L310678.  if v3 == 0 then goto L310688;
  #L31067c.  v0:= 4294967296L;
  #L310686.  goto L31068c;
  #L310688.  v0:= 1L;
  #L31068c.  return v0 @kind wide;
}
procedure `void` `B0`(`kotlinx.coroutines.h1` v1 @kind this, `kotlinx.coroutines.a1` v2 @kind object) @signature `Lkotlinx/coroutines/h1;.B0:(Lkotlinx/coroutines/a1;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L310760.  v0:= v1.`kotlinx.coroutines.h1.k` @type ^`kotlinx.coroutines.internal.a` @kind object;
  #L310764.  if v0 != 0 then goto L310776;
  #L310768.  v0:= new `kotlinx.coroutines.internal.a`;
  #L31076c.  call `<init>`(v0) @signature `Lkotlinx/coroutines/internal/a;.<init>:()V` @kind direct;
  #L310772.  v1.`kotlinx.coroutines.h1.k` @type ^`kotlinx.coroutines.internal.a` := v0 @kind object;
  #L310776.  call `a`(v0, v2) @signature `Lkotlinx/coroutines/internal/a;.a:(Ljava/lang/Object;)V` @kind virtual;
  #L31077c.  return @kind void;
}
procedure `long` `E0`(`kotlinx.coroutines.h1` v3 @kind this) @signature `Lkotlinx/coroutines/h1;.E0:()J` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L3106a0.  v0:= v3.`kotlinx.coroutines.h1.k` @type ^`kotlinx.coroutines.internal.a` @kind object;
  #L3106a4.  v1:= 9223372036854775807L;
  #L3106ae.  if v0 != 0 then goto L3106b4;
  #L3106b2.  return v1 @kind wide;
  #L3106b4.  call temp:= `c`(v0) @signature `Lkotlinx/coroutines/internal/a;.c:()Z` @kind virtual;
  #L3106ba.  v0:= temp;
  #L3106bc.  if v0 == 0 then goto L3106c2;
  #L3106c0.  goto L3106c6;
  #L3106c2.  v1:= 0L;
  #L3106c6.  return v1 @kind wide;
}
procedure `void` `O0`(`kotlinx.coroutines.h1` v4 @kind this, `boolean` v5 ) @signature `Lkotlinx/coroutines/h1;.O0:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3107c8.  v0:= v4.`kotlinx.coroutines.h1.i` @type ^`long` @kind wide;
  #L3107cc.  call temp:= `x0`(v4, v5) @signature `Lkotlinx/coroutines/h1;.x0:(Z)J` @kind direct;
  #L3107d2.  v2:= temp @kind wide;
  #L3107d4.  v0:= v0 + v2 @kind long;
  #L3107d6.  v4.`kotlinx.coroutines.h1.i` @type ^`long` := v0 @kind wide;
  #L3107da.  if v5 != 0 then goto L3107e4;
  #L3107de.  v5:= 1I;
  #L3107e0.  v4.`kotlinx.coroutines.h1.j` @type ^`boolean` := v5 @kind boolean;
  #L3107e4.  return @kind void;
}
procedure `boolean` `R0`(`kotlinx.coroutines.h1` v6 @kind this) @signature `Lkotlinx/coroutines/h1;.R0:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3105ec.  v0:= v6.`kotlinx.coroutines.h1.i` @type ^`long` @kind wide;
  #L3105f0.  v2:= 1I;
  #L3105f2.  call temp:= `x0`(v6, v2) @signature `Lkotlinx/coroutines/h1;.x0:(Z)J` @kind direct;
  #L3105f8.  v3:= temp @kind wide;
  #L3105fa.  v5:= lcmp(v0, v3);
  #L3105fe.  if v5 < 0 then goto L310604;
  #L310602.  goto L310606;
  #L310604.  v2:= 0I;
  #L310606.  return v2;
}
procedure `boolean` `S0`(`kotlinx.coroutines.h1` v1 @kind this) @signature `Lkotlinx/coroutines/h1;.S0:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L310618.  v0:= v1.`kotlinx.coroutines.h1.k` @type ^`kotlinx.coroutines.internal.a` @kind object;
  #L31061c.  if v0 == 0 then goto L31062a;
  #L310620.  call temp:= `c`(v0) @signature `Lkotlinx/coroutines/internal/a;.c:()Z` @kind virtual;
  #L310626.  v0:= temp;
  #L310628.  goto L31062c;
  #L31062a.  v0:= 1I;
  #L31062c.  return v0;
}
procedure `boolean` `T0`(`kotlinx.coroutines.h1` v2 @kind this) @signature `Lkotlinx/coroutines/h1;.T0:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L310640.  v0:= v2.`kotlinx.coroutines.h1.k` @type ^`kotlinx.coroutines.internal.a` @kind object;
  #L310644.  v1:= 0I;
  #L310646.  if v0 != 0 then goto L31064c;
  #L31064a.  return v1;
  #L31064c.  call temp:= `d`(v0) @signature `Lkotlinx/coroutines/internal/a;.d:()Ljava/lang/Object;` @kind virtual;
  #L310652.  v0:= temp @kind object;
  #L310654.  v0:= (`kotlinx.coroutines.a1`) v0 @kind object;
  #L310658.  if v0 != 0 then goto L31065e;
  #L31065c.  return v1;
  #L31065e.  call `run`(v0) @signature `Lkotlinx/coroutines/a1;.run:()V` @kind virtual;
  #L310664.  v0:= 1I;
  #L310666.  return v0;
}
procedure `void` `shutdown`(`kotlinx.coroutines.h1` v0 @kind this) @signature `Lkotlinx/coroutines/h1;.shutdown:()V` @AccessFlag PUBLIC {
    temp;

  #L3107f8.  return @kind void;
}
procedure `void` `u0`(`kotlinx.coroutines.h1` v4 @kind this, `boolean` v5 ) @signature `Lkotlinx/coroutines/h1;.u0:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3106f0.  v0:= v4.`kotlinx.coroutines.h1.i` @type ^`long` @kind wide;
  #L3106f4.  call temp:= `x0`(v4, v5) @signature `Lkotlinx/coroutines/h1;.x0:(Z)J` @kind direct;
  #L3106fa.  v2:= temp @kind wide;
  #L3106fc.  v0:= v0 - v2 @kind long;
  #L3106fe.  v4.`kotlinx.coroutines.h1.i` @type ^`long` := v0 @kind wide;
  #L310702.  v2:= 0L;
  #L310706.  v5:= lcmp(v0, v2);
  #L31070a.  if v5 <= 0 then goto L310710;
  #L31070e.  return @kind void;
  #L310710.  call temp:= `a`() @signature `Lkotlinx/coroutines/q0;.a:()Z` @kind static;
  #L310716.  v5:= temp;
  #L310718.  if v5 == 0 then goto L310740;
  #L31071c.  v0:= v4.`kotlinx.coroutines.h1.i` @type ^`long` @kind wide;
  #L310720.  v5:= lcmp(v0, v2);
  #L310724.  if v5 != 0 then goto L31072c;
  #L310728.  v5:= 1I;
  #L31072a.  goto L31072e;
  #L31072c.  v5:= 0I;
  #L31072e.  if v5 == 0 then goto L310734;
  #L310732.  goto L310740;
  #L310734.  v5:= new `java.lang.AssertionError`;
  #L310738.  call `<init>`(v5) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L31073e.  throw v5;
  #L310740.  v5:= v4.`kotlinx.coroutines.h1.j` @type ^`boolean` @kind boolean;
  #L310744.  if v5 == 0 then goto L31074e;
  #L310748.  call `shutdown`(v4) @signature `Lkotlinx/coroutines/h1;.shutdown:()V` @kind virtual;
  #L31074e.  return @kind void;
}
