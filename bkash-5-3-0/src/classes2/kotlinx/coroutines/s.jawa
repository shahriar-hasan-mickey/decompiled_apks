record `kotlinx.coroutines.s` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.y1` @kind class, `kotlinx.coroutines.r` @kind interface {
  `kotlinx.coroutines.t` `kotlinx.coroutines.s.k` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.s` v0 @kind this, `kotlinx.coroutines.t` v1 @kind object) @signature `Lkotlinx/coroutines/s;.<init>:(Lkotlinx/coroutines/t;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L30d434.  call `<init>`(v0) @signature `Lkotlinx/coroutines/y1;.<init>:()V` @kind direct;
  #L30d43a.  v0.`kotlinx.coroutines.s.k` @type ^`kotlinx.coroutines.t` := v1 @kind object;
  #L30d43e.  return @kind void;
}
procedure `boolean` `b`(`kotlinx.coroutines.s` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lkotlinx/coroutines/s;.b:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30d3d4.  call temp:= `x`(v1) @signature `Lkotlinx/coroutines/d2;.x:()Lkotlinx/coroutines/e2;` @kind virtual;
  #L30d3da.  v0:= temp @kind object;
  #L30d3dc.  call temp:= `B`(v0, v2) @signature `Lkotlinx/coroutines/e2;.B:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L30d3e2.  v2:= temp;
  #L30d3e4.  return v2;
}
procedure `kotlinx.coroutines.w1` `getParent`(`kotlinx.coroutines.s` v1 @kind this) @signature `Lkotlinx/coroutines/s;.getParent:()Lkotlinx/coroutines/w1;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30d418.  call temp:= `x`(v1) @signature `Lkotlinx/coroutines/d2;.x:()Lkotlinx/coroutines/e2;` @kind virtual;
  #L30d41e.  v0:= temp @kind object;
  #L30d420.  return v0 @kind object;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.s` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/s;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L30d3f8.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L30d3fc.  call `w`(v0, v1) @signature `Lkotlinx/coroutines/s;.w:(Ljava/lang/Throwable;)V` @kind virtual;
  #L30d402.  v1:= `@@od.t.a` @type ^`od.t` @kind object;
  #L30d406.  return v1 @kind object;
}
procedure `void` `w`(`kotlinx.coroutines.s` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lkotlinx/coroutines/s;.w:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30d450.  v2:= v1.`kotlinx.coroutines.s.k` @type ^`kotlinx.coroutines.t` @kind object;
  #L30d454.  call temp:= `x`(v1) @signature `Lkotlinx/coroutines/d2;.x:()Lkotlinx/coroutines/e2;` @kind virtual;
  #L30d45a.  v0:= temp @kind object;
  #L30d45c.  call `y`(v2, v0) @signature `Lkotlinx/coroutines/t;.y:(Lkotlinx/coroutines/m2;)V` @kind interface;
  #L30d462.  return @kind void;
}
