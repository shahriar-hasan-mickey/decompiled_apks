record `kotlinx.coroutines.u1` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.y1` @kind class {
  `int` `kotlinx.coroutines.u1._invoked` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `wd.l` `kotlinx.coroutines.u1.k` @AccessFlag PRIVATE_FINAL;
}
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.u1.l` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/u1;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L310cb4.  v0:= constclass @type ^`kotlinx.coroutines.u1` @kind object;
  #L310cb8.  v1:= "_invoked" @kind object;
  #L310cbc.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L310cc2.  v0:= temp @kind object;
  #L310cc4.  `@@kotlinx.coroutines.u1.l` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v0 @kind object;
  #L310cc8.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.u1` v0 @kind this, `wd.l` v1 @kind object) @signature `Lkotlinx/coroutines/u1;.<init>:(Lwd/l;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L310cdc.  call `<init>`(v0) @signature `Lkotlinx/coroutines/y1;.<init>:()V` @kind direct;
  #L310ce2.  v0.`kotlinx.coroutines.u1.k` @type ^`wd.l` := v1 @kind object;
  #L310ce6.  v1:= 0I;
  #L310ce8.  v0.`kotlinx.coroutines.u1._invoked` @type ^`int` := v1;
  #L310cec.  return @kind void;
}
procedure `java.lang.Object` `invoke`(`kotlinx.coroutines.u1` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/u1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L310c94.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L310c98.  call `w`(v0, v1) @signature `Lkotlinx/coroutines/u1;.w:(Ljava/lang/Throwable;)V` @kind virtual;
  #L310c9e.  v1:= `@@od.t.a` @type ^`od.t` @kind object;
  #L310ca2.  return v1 @kind object;
}
procedure `void` `w`(`kotlinx.coroutines.u1` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lkotlinx/coroutines/u1;.w:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L310d00.  v0:= `@@kotlinx.coroutines.u1.l` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L310d04.  v1:= 0I;
  #L310d06.  v2:= 1I;
  #L310d08.  call temp:= `compareAndSet`(v0, v3, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L310d0e.  v0:= temp;
  #L310d10.  if v0 == 0 then goto L310d1e;
  #L310d14.  v0:= v3.`kotlinx.coroutines.u1.k` @type ^`wd.l` @kind object;
  #L310d18.  call temp:= `invoke`(v0, v4) @signature `Lwd/l;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L310d1e.  return @kind void;
}
