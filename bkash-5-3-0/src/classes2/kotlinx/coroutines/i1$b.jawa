record `kotlinx.coroutines.i1$b` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.lang.Runnable` @kind interface, `java.lang.Comparable` @kind interface, `kotlinx.coroutines.e1` @kind interface, `kotlinx.coroutines.internal.l0` @kind interface {
  `java.lang.Object` `kotlinx.coroutines.i1$b._heap` @AccessFlag PRIVATE_VOLATILE;
  `long` `kotlinx.coroutines.i1$b.g` @AccessFlag PUBLIC;
  `int` `kotlinx.coroutines.i1$b.h` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlinx.coroutines.i1$b` v0 @kind this, `long` v1 ) @signature `Lkotlinx/coroutines/i1$b;.<init>:(J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L30fd1c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L30fd22.  v0.`kotlinx.coroutines.i1$b.g` @type ^`long` := v1 @kind wide;
  #L30fd26.  v1:= -1I;
  #L30fd28.  v0.`kotlinx.coroutines.i1$b.h` @type ^`int` := v1;
  #L30fd2c.  return @kind void;
}
procedure `void` `a`(`kotlinx.coroutines.i1$b` v2 @kind this, `kotlinx.coroutines.internal.k0` v3 @kind object) @signature `Lkotlinx/coroutines/i1$b;.a:(Lkotlinx/coroutines/internal/k0;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L30fdac.  v0:= v2.`kotlinx.coroutines.i1$b._heap` @type ^`java.lang.Object` @kind object;
  #L30fdb0.  call temp:= `b`() @signature `Lkotlinx/coroutines/l1;.b:()Lkotlinx/coroutines/internal/f0;` @kind static;
  #L30fdb6.  v1:= temp @kind object;
  #L30fdb8.  if v0 == v1 then goto L30fdc0;
  #L30fdbc.  v0:= 1I;
  #L30fdbe.  goto L30fdc2;
  #L30fdc0.  v0:= 0I;
  #L30fdc2.  if v0 == 0 then goto L30fdcc;
  #L30fdc6.  v2.`kotlinx.coroutines.i1$b._heap` @type ^`java.lang.Object` := v3 @kind object;
  #L30fdca.  return @kind void;
  #L30fdcc.  v3:= new `java.lang.IllegalArgumentException`;
  #L30fdd0.  v0:= "Failed requirement." @kind object;
  #L30fdd4.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L30fdda.  v0:= temp @kind object;
  #L30fddc.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30fde2.  throw v3;
}
procedure `kotlinx.coroutines.internal.k0` `c`(`kotlinx.coroutines.i1$b` v2 @kind this) @signature `Lkotlinx/coroutines/i1$b;.c:()Lkotlinx/coroutines/internal/k0;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L30fcf4.  v0:= v2.`kotlinx.coroutines.i1$b._heap` @type ^`java.lang.Object` @kind object;
  #L30fcf8.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.k0` @kind boolean;
  #L30fcfc.  if v1 == 0 then goto L30fd06;
  #L30fd00.  v0:= (`kotlinx.coroutines.internal.k0`) v0 @kind object;
  #L30fd04.  goto L30fd08;
  #L30fd06.  v0:= 0I;
  #L30fd08.  return v0 @kind object;
}
procedure `int` `compareTo`(`kotlinx.coroutines.i1$b` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/i1$b;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L30fb50.  v1:= (`kotlinx.coroutines.i1$b`) v1 @kind object;
  #L30fb54.  call temp:= `g`(v0, v1) @signature `Lkotlinx/coroutines/i1$b;.g:(Lkotlinx/coroutines/i1$b;)I` @kind virtual;
  #L30fb5a.  v1:= temp;
  #L30fb5c.  return v1;
}
procedure `void` `d`(`kotlinx.coroutines.i1$b` v0 @kind this, `int` v1 ) @signature `Lkotlinx/coroutines/i1$b;.d:(I)V` @AccessFlag PUBLIC {
    temp;

  #L30fdf4.  v0.`kotlinx.coroutines.i1$b.h` @type ^`int` := v1;
  #L30fdf8.  return @kind void;
}
procedure `void` `dispose`(`kotlinx.coroutines.i1$b` v2 @kind this) @signature `Lkotlinx/coroutines/i1$b;.dispose:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L30fd40.  @monitorenter v2
  #L30fd42.  v0:= v2.`kotlinx.coroutines.i1$b._heap` @type ^`java.lang.Object` @kind object;
  #L30fd46.  call temp:= `b`() @signature `Lkotlinx/coroutines/l1;.b:()Lkotlinx/coroutines/internal/f0;` @kind static;
  #L30fd4c.  v1:= temp @kind object;
  #L30fd4e.  if v0 != v1 then goto L30fd56;
  #L30fd52.  @monitorexit v2
  #L30fd54.  return @kind void;
  #L30fd56.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.i1$c` @kind boolean;
  #L30fd5a.  if v1 == 0 then goto L30fd64;
  #L30fd5e.  v0:= (`kotlinx.coroutines.i1$c`) v0 @kind object;
  #L30fd62.  goto L30fd66;
  #L30fd64.  v0:= 0I;
  #L30fd66.  if v0 == 0 then goto L30fd70;
  #L30fd6a.  call temp:= `g`(v0, v2) @signature `Lkotlinx/coroutines/internal/k0;.g:(Lkotlinx/coroutines/internal/l0;)Z` @kind virtual;
  #L30fd70.  call temp:= `b`() @signature `Lkotlinx/coroutines/l1;.b:()Lkotlinx/coroutines/internal/f0;` @kind static;
  #L30fd76.  v0:= temp @kind object;
  #L30fd78.  v2.`kotlinx.coroutines.i1$b._heap` @type ^`java.lang.Object` := v0 @kind object;
  #L30fd7c.  @monitorexit v2
  #L30fd7e.  return @kind void;
  #L30fd80.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L30fd82.  @monitorexit v2
  #L30fd84.  throw v0;
  catch `java.lang.Throwable` @[L30fd42..L30fd4e] goto L30fd80;
  catch `java.lang.Throwable` @[L30fd56..L30fd7c] goto L30fd80;
}
procedure `int` `f`(`kotlinx.coroutines.i1$b` v1 @kind this) @signature `Lkotlinx/coroutines/i1$b;.f:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30fba8.  v0:= v1.`kotlinx.coroutines.i1$b.h` @type ^`int`;
  #L30fbac.  return v0;
}
procedure `int` `g`(`kotlinx.coroutines.i1$b` v4 @kind this, `kotlinx.coroutines.i1$b` v5 @kind object) @signature `Lkotlinx/coroutines/i1$b;.g:(Lkotlinx/coroutines/i1$b;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L30fb70.  v0:= v4.`kotlinx.coroutines.i1$b.g` @type ^`long` @kind wide;
  #L30fb74.  v2:= v5.`kotlinx.coroutines.i1$b.g` @type ^`long` @kind wide;
  #L30fb78.  v0:= v0 - v2 @kind long;
  #L30fb7a.  v2:= 0L;
  #L30fb7e.  v5:= lcmp(v0, v2);
  #L30fb82.  if v5 <= 0 then goto L30fb8a;
  #L30fb86.  v5:= 1I;
  #L30fb88.  goto L30fb94;
  #L30fb8a.  if v5 >= 0 then goto L30fb92;
  #L30fb8e.  v5:= -1I;
  #L30fb90.  goto L30fb94;
  #L30fb92.  v5:= 0I;
  #L30fb94.  return v5;
}
procedure `int` `h`(`kotlinx.coroutines.i1$b` v7 @kind this, `long` v8 , `kotlinx.coroutines.i1$c` v10 @kind object, `kotlinx.coroutines.i1` v11 @kind object) @signature `Lkotlinx/coroutines/i1$b;.h:(JLkotlinx/coroutines/i1$c;Lkotlinx/coroutines/i1;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L30fbc0.  @monitorenter v7
  #L30fbc2.  v0:= v7.`kotlinx.coroutines.i1$b._heap` @type ^`java.lang.Object` @kind object;
  #L30fbc6.  call temp:= `b`() @signature `Lkotlinx/coroutines/l1;.b:()Lkotlinx/coroutines/internal/f0;` @kind static;
  #L30fbcc.  v1:= temp @kind object;
  #L30fbce.  if v0 != v1 then goto L30fbd8;
  #L30fbd2.  v8:= 2I;
  #L30fbd4.  @monitorexit v7
  #L30fbd6.  return v8;
  #L30fbd8.  @monitorenter v10
  #L30fbda.  call temp:= `b`(v10) @signature `Lkotlinx/coroutines/internal/k0;.b:()Lkotlinx/coroutines/internal/l0;` @kind virtual;
  #L30fbe0.  v0:= temp @kind object;
  #L30fbe2.  v0:= (`kotlinx.coroutines.i1$b`) v0 @kind object;
  #L30fbe6.  call temp:= `X0`(v11) @signature `Lkotlinx/coroutines/i1;.X0:(Lkotlinx/coroutines/i1;)Z` @kind static;
  #L30fbec.  v11:= temp;
  #L30fbee.  if v11 == 0 then goto L30fbfa;
  #L30fbf2.  v8:= 1I;
  #L30fbf4.  @monitorexit v10
  #L30fbf6.  @monitorexit v7
  #L30fbf8.  return v8;
  #L30fbfa.  v1:= 0L;
  #L30fbfe.  if v0 != 0 then goto L30fc08;
  #L30fc02.  v10.`kotlinx.coroutines.i1$c.b` @type ^`long` := v8 @kind wide;
  #L30fc06.  goto L30fc30;
  #L30fc08.  v3:= v0.`kotlinx.coroutines.i1$b.g` @type ^`long` @kind wide;
  #L30fc0c.  v5:= v3 - v8 @kind long;
  #L30fc10.  v11:= lcmp(v5, v1);
  #L30fc14.  if v11 < 0 then goto L30fc1a;
  #L30fc18.  goto L30fc1c;
  #L30fc1a.  v8:= v3 @kind wide;
  #L30fc1c.  v3:= v10.`kotlinx.coroutines.i1$c.b` @type ^`long` @kind wide;
  #L30fc20.  v3:= v8 - v3 @kind long;
  #L30fc24.  v11:= lcmp(v3, v1);
  #L30fc28.  if v11 <= 0 then goto L30fc30;
  #L30fc2c.  v10.`kotlinx.coroutines.i1$c.b` @type ^`long` := v8 @kind wide;
  #L30fc30.  v8:= v7.`kotlinx.coroutines.i1$b.g` @type ^`long` @kind wide;
  #L30fc34.  v3:= v10.`kotlinx.coroutines.i1$c.b` @type ^`long` @kind wide;
  #L30fc38.  v8:= v8 - v3 @kind long;
  #L30fc3a.  v11:= lcmp(v8, v1);
  #L30fc3e.  if v11 >= 0 then goto L30fc46;
  #L30fc42.  v7.`kotlinx.coroutines.i1$b.g` @type ^`long` := v3 @kind wide;
  #L30fc46.  call `a`(v10, v7) @signature `Lkotlinx/coroutines/internal/k0;.a:(Lkotlinx/coroutines/internal/l0;)V` @kind virtual;
  #L30fc4c.  @monitorexit v10
  #L30fc4e.  v8:= 0I;
  #L30fc50.  @monitorexit v7
  #L30fc52.  return v8;
  #L30fc54.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L30fc56.  @monitorexit v10
  #L30fc58.  throw v8;
  #L30fc5a.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L30fc5c.  @monitorexit v7
  #L30fc5e.  throw v8;
  catch `java.lang.Throwable` @[L30fbc2..L30fbce] goto L30fc5a;
  catch `java.lang.Throwable` @[L30fbd8..L30fbda] goto L30fc5a;
  catch `java.lang.Throwable` @[L30fbda..L30fbee] goto L30fc54;
  catch `java.lang.Throwable` @[L30fbf4..L30fbf6] goto L30fc5a;
  catch `java.lang.Throwable` @[L30fc02..L30fc4c] goto L30fc54;
  catch `java.lang.Throwable` @[L30fc4c..L30fc4e] goto L30fc5a;
  catch `java.lang.Throwable` @[L30fc56..L30fc5a] goto L30fc5a;
}
procedure `boolean` `j`(`kotlinx.coroutines.i1$b` v3 @kind this, `long` v4 ) @signature `Lkotlinx/coroutines/i1$b;.j:(J)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L30fb24.  v0:= v3.`kotlinx.coroutines.i1$b.g` @type ^`long` @kind wide;
  #L30fb28.  v4:= v4 - v0 @kind long;
  #L30fb2a.  v0:= 0L;
  #L30fb2e.  v2:= lcmp(v4, v0);
  #L30fb32.  if v2 < 0 then goto L30fb3a;
  #L30fb36.  v4:= 1I;
  #L30fb38.  goto L30fb3c;
  #L30fb3a.  v4:= 0I;
  #L30fb3c.  return v4;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.i1$b` v3 @kind this) @signature `Lkotlinx/coroutines/i1$b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L30fcb0.  v0:= new `java.lang.StringBuilder`;
  #L30fcb4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30fcba.  v1:= "Delayed[nanos=" @kind object;
  #L30fcbe.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30fcc4.  v1:= v3.`kotlinx.coroutines.i1$b.g` @type ^`long` @kind wide;
  #L30fcc8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L30fcce.  v1:= 93I;
  #L30fcd2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L30fcd8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30fcde.  v0:= temp @kind object;
  #L30fce0.  return v0 @kind object;
}
