record `kotlinx.coroutines.flow.g` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.flow.a` @kind class {
  `wd.p` `kotlinx.coroutines.flow.g.g` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.g` v0 @kind this, `wd.p` v1 @kind object) @signature `Lkotlinx/coroutines/flow/g;.<init>:(Lwd/p;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3145a0.  call `<init>`(v0) @signature `Lkotlinx/coroutines/flow/a;.<init>:()V` @kind direct;
  #L3145a6.  v0.`kotlinx.coroutines.flow.g.g` @type ^`wd.p` := v1 @kind object;
  #L3145aa.  return @kind void;
}
procedure `java.lang.Object` `b`(`kotlinx.coroutines.flow.g` v1 @kind this, `kotlinx.coroutines.flow.c` v2 @kind object, `kotlin.coroutines.d` v3 @kind object) @signature `Lkotlinx/coroutines/flow/g;.b:(Lkotlinx/coroutines/flow/c;Lkotlin/coroutines/d;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L314570.  v0:= v1.`kotlinx.coroutines.flow.g.g` @type ^`wd.p` @kind object;
  #L314574.  call temp:= `invoke`(v0, v2, v3) @signature `Lwd/p;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L31457a.  v2:= temp @kind object;
  #L31457c.  call temp:= `d`() @signature `Lkotlin/coroutines/intrinsics/b;.d:()Ljava/lang/Object;` @kind static;
  #L314582.  v3:= temp @kind object;
  #L314584.  if v2 != v3 then goto L31458a;
  #L314588.  return v2 @kind object;
  #L31458a.  v2:= `@@od.t.a` @type ^`od.t` @kind object;
  #L31458e.  return v2 @kind object;
}
