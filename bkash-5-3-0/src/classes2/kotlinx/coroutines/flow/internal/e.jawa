record `kotlinx.coroutines.flow.internal.e` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `a`(`kotlinx.coroutines.flow.internal.c` v3 @kind object, `kotlin.coroutines.g` v4 @kind object) @signature `Lkotlinx/coroutines/flow/internal/e;.a:(Lkotlinx/coroutines/flow/internal/c;Lkotlin/coroutines/g;)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L314960.  v0:= 0I;
  #L314962.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L314968.  v0:= temp @kind object;
  #L31496a.  v1:= new `kotlinx.coroutines.flow.internal.e$a`;
  #L31496e.  call `<init>`(v1, v3) @signature `Lkotlinx/coroutines/flow/internal/e$a;.<init>:(Lkotlinx/coroutines/flow/internal/c;)V` @kind direct;
  #L314974.  call temp:= `fold`(v4, v0, v1) @signature `Lkotlin/coroutines/g;.fold:(Ljava/lang/Object;Lwd/p;)Ljava/lang/Object;` @kind interface;
  #L31497a.  v0:= temp @kind object;
  #L31497c.  v0:= (`java.lang.Number`) v0 @kind object;
  #L314980.  call temp:= `intValue`(v0) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L314986.  v0:= temp;
  #L314988.  v1:= v3.`kotlinx.coroutines.flow.internal.c.collectContextSize` @type ^`int`;
  #L31498c.  if v0 != v1 then goto L314992;
  #L314990.  return @kind void;
  #L314992.  v0:= new `java.lang.IllegalStateException`;
  #L314996.  v1:= new `java.lang.StringBuilder`;
  #L31499a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3149a0.  v2:= "Flow invariant is violated:\n\t\tFlow was collected in " @kind object;
  #L3149a4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3149aa.  v3:= v3.`kotlinx.coroutines.flow.internal.c.collectContext` @type ^`kotlin.coroutines.g` @kind object;
  #L3149ae.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3149b4.  v3:= ",\n\t\tbut emission happened in " @kind object;
  #L3149b8.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3149be.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3149c4.  v3:= ".\n\t\tPlease refer to 'flow' documentation or use 'flowOn' instead" @kind object;
  #L3149c8.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3149ce.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3149d4.  v3:= temp @kind object;
  #L3149d6.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L3149dc.  v3:= temp @kind object;
  #L3149de.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3149e4.  throw v0;
}
procedure `kotlinx.coroutines.w1` `b`(`kotlinx.coroutines.w1` v1 @kind object, `kotlinx.coroutines.w1` v2 @kind object) @signature `Lkotlinx/coroutines/flow/internal/e;.b:(Lkotlinx/coroutines/w1;Lkotlinx/coroutines/w1;)Lkotlinx/coroutines/w1;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L314928.  if v1 != 0 then goto L314930;
  #L31492c.  v1:= 0I;
  #L31492e.  return v1 @kind object;
  #L314930.  if v1 != v2 then goto L314936;
  #L314934.  return v1 @kind object;
  #L314936.  v0:= instanceof @variable v1 @type ^`kotlinx.coroutines.internal.d0` @kind boolean;
  #L31493a.  if v0 != 0 then goto L314940;
  #L31493e.  return v1 @kind object;
  #L314940.  v1:= (`kotlinx.coroutines.internal.d0`) v1 @kind object;
  #L314944.  call temp:= `E0`(v1) @signature `Lkotlinx/coroutines/internal/d0;.E0:()Lkotlinx/coroutines/w1;` @kind virtual;
  #L31494a.  v1:= temp @kind object;
  #L31494c.  goto L314928;
}
