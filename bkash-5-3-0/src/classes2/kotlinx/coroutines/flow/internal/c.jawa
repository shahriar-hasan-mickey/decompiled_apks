record `kotlinx.coroutines.flow.internal.c` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.coroutines.jvm.internal.d` @kind class, `kotlinx.coroutines.flow.c` @kind interface {
  `kotlin.coroutines.g` `kotlinx.coroutines.flow.internal.c.collectContext` @AccessFlag PUBLIC_FINAL;
  `int` `kotlinx.coroutines.flow.internal.c.collectContextSize` @AccessFlag PUBLIC_FINAL;
  `kotlinx.coroutines.flow.c` `kotlinx.coroutines.flow.internal.c.collector` @AccessFlag PUBLIC_FINAL;
  `kotlin.coroutines.d` `kotlinx.coroutines.flow.internal.c.completion` @AccessFlag PRIVATE;
  `kotlin.coroutines.g` `kotlinx.coroutines.flow.internal.c.lastEmissionContext` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlinx.coroutines.flow.internal.c` v2 @kind this, `kotlinx.coroutines.flow.c` v3 @kind object, `kotlin.coroutines.g` v4 @kind object) @signature `Lkotlinx/coroutines/flow/internal/c;.<init>:(Lkotlinx/coroutines/flow/c;Lkotlin/coroutines/g;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L314b68.  v0:= `@@kotlinx.coroutines.flow.internal.b.g` @type ^`kotlinx.coroutines.flow.internal.b` @kind object;
  #L314b6c.  v1:= `@@kotlin.coroutines.h.INSTANCE` @type ^`kotlin.coroutines.h` @kind object;
  #L314b70.  call `<init>`(v2, v0, v1) @signature `Lkotlin/coroutines/jvm/internal/d;.<init>:(Lkotlin/coroutines/d;Lkotlin/coroutines/g;)V` @kind direct;
  #L314b76.  v2.`kotlinx.coroutines.flow.internal.c.collector` @type ^`kotlinx.coroutines.flow.c` := v3 @kind object;
  #L314b7a.  v2.`kotlinx.coroutines.flow.internal.c.collectContext` @type ^`kotlin.coroutines.g` := v4 @kind object;
  #L314b7e.  v3:= 0I;
  #L314b80.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L314b86.  v3:= temp @kind object;
  #L314b88.  v0:= `@@kotlinx.coroutines.flow.internal.c$a.INSTANCE` @type ^`kotlinx.coroutines.flow.internal.c$a` @kind object;
  #L314b8c.  call temp:= `fold`(v4, v3, v0) @signature `Lkotlin/coroutines/g;.fold:(Ljava/lang/Object;Lwd/p;)Ljava/lang/Object;` @kind interface;
  #L314b92.  v3:= temp @kind object;
  #L314b94.  v3:= (`java.lang.Number`) v3 @kind object;
  #L314b98.  call temp:= `intValue`(v3) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L314b9e.  v3:= temp;
  #L314ba0.  v2.`kotlinx.coroutines.flow.internal.c.collectContextSize` @type ^`int` := v3;
  #L314ba4.  return @kind void;
}
procedure `void` `e`(`kotlinx.coroutines.flow.internal.c` v1 @kind this, `kotlin.coroutines.g` v2 @kind object, `kotlin.coroutines.g` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/flow/internal/c;.e:(Lkotlin/coroutines/g;Lkotlin/coroutines/g;Ljava/lang/Object;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L314bb8.  v0:= instanceof @variable v3 @type ^`kotlinx.coroutines.flow.internal.a` @kind boolean;
  #L314bbc.  if v0 == 0 then goto L314bca;
  #L314bc0.  v3:= (`kotlinx.coroutines.flow.internal.a`) v3 @kind object;
  #L314bc4.  call `i`(v1, v3, v4) @signature `Lkotlinx/coroutines/flow/internal/c;.i:(Lkotlinx/coroutines/flow/internal/a;Ljava/lang/Object;)V` @kind direct;
  #L314bca.  call `a`(v1, v2) @signature `Lkotlinx/coroutines/flow/internal/e;.a:(Lkotlinx/coroutines/flow/internal/c;Lkotlin/coroutines/g;)V` @kind static;
  #L314bd0.  return @kind void;
}
procedure `java.lang.Object` `g`(`kotlinx.coroutines.flow.internal.c` v2 @kind this, `kotlin.coroutines.d` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/flow/internal/c;.g:(Lkotlin/coroutines/d;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L314a5c.  call temp:= `getContext`(v3) @signature `Lkotlin/coroutines/d;.getContext:()Lkotlin/coroutines/g;` @kind interface;
  #L314a62.  v0:= temp @kind object;
  #L314a64.  call `f`(v0) @signature `Lkotlinx/coroutines/a2;.f:(Lkotlin/coroutines/g;)V` @kind static;
  #L314a6a.  v1:= v2.`kotlinx.coroutines.flow.internal.c.lastEmissionContext` @type ^`kotlin.coroutines.g` @kind object;
  #L314a6e.  if v1 == v0 then goto L314a7c;
  #L314a72.  call `e`(v2, v0, v1, v4) @signature `Lkotlinx/coroutines/flow/internal/c;.e:(Lkotlin/coroutines/g;Lkotlin/coroutines/g;Ljava/lang/Object;)V` @kind direct;
  #L314a78.  v2.`kotlinx.coroutines.flow.internal.c.lastEmissionContext` @type ^`kotlin.coroutines.g` := v0 @kind object;
  #L314a7c.  v2.`kotlinx.coroutines.flow.internal.c.completion` @type ^`kotlin.coroutines.d` := v3 @kind object;
  #L314a80.  call temp:= `a`() @signature `Lkotlinx/coroutines/flow/internal/d;.a:()Lwd/q;` @kind static;
  #L314a86.  v3:= temp @kind object;
  #L314a88.  v0:= v2.`kotlinx.coroutines.flow.internal.c.collector` @type ^`kotlinx.coroutines.flow.c` @kind object;
  #L314a8c.  call temp:= `invoke`(v3, v0, v4, v2) @signature `Lwd/q;.invoke:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L314a92.  v3:= temp @kind object;
  #L314a94.  call temp:= `d`() @signature `Lkotlin/coroutines/intrinsics/b;.d:()Ljava/lang/Object;` @kind static;
  #L314a9a.  v4:= temp @kind object;
  #L314a9c.  call temp:= `a`(v3, v4) @signature `Lkotlin/jvm/internal/k;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L314aa2.  v4:= temp;
  #L314aa4.  if v4 != 0 then goto L314aae;
  #L314aa8.  v4:= 0I;
  #L314aaa.  v2.`kotlinx.coroutines.flow.internal.c.completion` @type ^`kotlin.coroutines.d` := v4 @kind object;
  #L314aae.  return v3 @kind object;
}
procedure `void` `i`(`kotlinx.coroutines.flow.internal.c` v3 @kind this, `kotlinx.coroutines.flow.internal.a` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lkotlinx/coroutines/flow/internal/c;.i:(Lkotlinx/coroutines/flow/internal/a;Ljava/lang/Object;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L314be4.  v0:= new `java.lang.IllegalStateException`;
  #L314be8.  v1:= new `java.lang.StringBuilder`;
  #L314bec.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L314bf2.  v2:= "\n            Flow exception transparency is violated:\n                Previous 'emit' call has thrown exception " @kind object;
  #L314bf6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L314bfc.  v4:= v4.`kotlinx.coroutines.flow.internal.a.g` @type ^`java.lang.Throwable` @kind object;
  #L314c00.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L314c06.  v4:= ", but then emission attempt of value '" @kind object;
  #L314c0a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L314c10.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L314c16.  v4:= "' has been detected.\n                Emissions from 'catch' blocks are prohibited in order to avoid unspecified behaviour, 'Flow.catch' operator can be used instead.\n                For a more detailed explanation, please refer to Flow documentation.\n            " @kind object;
  #L314c1a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L314c20.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L314c26.  v4:= temp @kind object;
  #L314c28.  call temp:= `e`(v4) @signature `Lkotlin/text/d;.e:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L314c2e.  v4:= temp @kind object;
  #L314c30.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L314c36.  v4:= temp @kind object;
  #L314c38.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L314c3e.  throw v0;
}
procedure `java.lang.Object` `emit`(`kotlinx.coroutines.flow.internal.c` v1 @kind this, `java.lang.Object` v2 @kind object, `kotlin.coroutines.d` v3 @kind object) @signature `Lkotlinx/coroutines/flow/internal/c;.emit:(Ljava/lang/Object;Lkotlin/coroutines/d;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3149f8.  call temp:= `g`(v1, v3, v2) @signature `Lkotlinx/coroutines/flow/internal/c;.g:(Lkotlin/coroutines/d;Ljava/lang/Object;)Ljava/lang/Object;` @kind direct;
  #L3149fe.  v2:= temp @kind object;
  #L314a00.  call temp:= `d`() @signature `Lkotlin/coroutines/intrinsics/b;.d:()Ljava/lang/Object;` @kind static;
  #L314a06.  v0:= temp @kind object;
  #L314a08.  if v2 != v0 then goto L314a12;
  #L314a0c.  call `c`(v3) @signature `Lkotlin/coroutines/jvm/internal/g;.c:(Lkotlin/coroutines/d;)V` @kind static;
  #L314a12.  call temp:= `d`() @signature `Lkotlin/coroutines/intrinsics/b;.d:()Ljava/lang/Object;` @kind static;
  #L314a18.  v3:= temp @kind object;
  #L314a1a.  if v2 != v3 then goto L314a20;
  #L314a1e.  return v2 @kind object;
  #L314a20.  v2:= `@@od.t.a` @type ^`od.t` @kind object;
  #L314a24.  return v2 @kind object;
  #L314a26.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L314a28.  v0:= new `kotlinx.coroutines.flow.internal.a`;
  #L314a2c.  call temp:= `getContext`(v3) @signature `Lkotlin/coroutines/d;.getContext:()Lkotlin/coroutines/g;` @kind interface;
  #L314a32.  v3:= temp @kind object;
  #L314a34.  call `<init>`(v0, v2, v3) @signature `Lkotlinx/coroutines/flow/internal/a;.<init>:(Ljava/lang/Throwable;Lkotlin/coroutines/g;)V` @kind direct;
  #L314a3a.  v1.`kotlinx.coroutines.flow.internal.c.lastEmissionContext` @type ^`kotlin.coroutines.g` := v0 @kind object;
  #L314a3e.  throw v2;
  catch `java.lang.Throwable` @[L3149f8..L314a00] goto L314a26;
}
procedure `kotlin.coroutines.jvm.internal.e` `getCallerFrame`(`kotlinx.coroutines.flow.internal.c` v2 @kind this) @signature `Lkotlinx/coroutines/flow/internal/c;.getCallerFrame:()Lkotlin/coroutines/jvm/internal/e;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L314b40.  v0:= v2.`kotlinx.coroutines.flow.internal.c.completion` @type ^`kotlin.coroutines.d` @kind object;
  #L314b44.  v1:= instanceof @variable v0 @type ^`kotlin.coroutines.jvm.internal.e` @kind boolean;
  #L314b48.  if v1 == 0 then goto L314b52;
  #L314b4c.  v0:= (`kotlin.coroutines.jvm.internal.e`) v0 @kind object;
  #L314b50.  goto L314b54;
  #L314b52.  v0:= 0I;
  #L314b54.  return v0 @kind object;
}
procedure `kotlin.coroutines.g` `getContext`(`kotlinx.coroutines.flow.internal.c` v1 @kind this) @signature `Lkotlinx/coroutines/flow/internal/c;.getContext:()Lkotlin/coroutines/g;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L314b20.  v0:= v1.`kotlinx.coroutines.flow.internal.c.lastEmissionContext` @type ^`kotlin.coroutines.g` @kind object;
  #L314b24.  if v0 != 0 then goto L314b2c;
  #L314b28.  v0:= `@@kotlin.coroutines.h.INSTANCE` @type ^`kotlin.coroutines.h` @kind object;
  #L314b2c.  return v0 @kind object;
}
procedure `java.lang.StackTraceElement` `getStackTraceElement`(`kotlinx.coroutines.flow.internal.c` v1 @kind this) @signature `Lkotlinx/coroutines/flow/internal/c;.getStackTraceElement:()Ljava/lang/StackTraceElement;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L314b0c.  v0:= 0I;
  #L314b0e.  return v0 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`kotlinx.coroutines.flow.internal.c` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/flow/internal/c;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L314ac0.  call temp:= `exceptionOrNull-impl`(v4) @signature `Lod/n;.exceptionOrNull-impl:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L314ac6.  v0:= temp @kind object;
  #L314ac8.  if v0 == 0 then goto L314ae2;
  #L314acc.  v1:= new `kotlinx.coroutines.flow.internal.a`;
  #L314ad0.  call temp:= `getContext`(v3) @signature `Lkotlinx/coroutines/flow/internal/c;.getContext:()Lkotlin/coroutines/g;` @kind virtual;
  #L314ad6.  v2:= temp @kind object;
  #L314ad8.  call `<init>`(v1, v0, v2) @signature `Lkotlinx/coroutines/flow/internal/a;.<init>:(Ljava/lang/Throwable;Lkotlin/coroutines/g;)V` @kind direct;
  #L314ade.  v3.`kotlinx.coroutines.flow.internal.c.lastEmissionContext` @type ^`kotlin.coroutines.g` := v1 @kind object;
  #L314ae2.  v0:= v3.`kotlinx.coroutines.flow.internal.c.completion` @type ^`kotlin.coroutines.d` @kind object;
  #L314ae6.  if v0 == 0 then goto L314af0;
  #L314aea.  call `resumeWith`(v0, v4) @signature `Lkotlin/coroutines/d;.resumeWith:(Ljava/lang/Object;)V` @kind interface;
  #L314af0.  call temp:= `d`() @signature `Lkotlin/coroutines/intrinsics/b;.d:()Ljava/lang/Object;` @kind static;
  #L314af6.  v4:= temp @kind object;
  #L314af8.  return v4 @kind object;
}
procedure `void` `releaseIntercepted`(`kotlinx.coroutines.flow.internal.c` v0 @kind this) @signature `Lkotlinx/coroutines/flow/internal/c;.releaseIntercepted:()V` @AccessFlag PUBLIC {
    temp;

  #L314c50.  call `releaseIntercepted`(v0) @signature `Lkotlin/coroutines/jvm/internal/d;.releaseIntercepted:()V` @kind super;
  #L314c56.  return @kind void;
}
