record `kotlinx.coroutines.scheduling.n` @kind class @AccessFlag PUBLIC_FINAL {
  `java.util.concurrent.atomic.AtomicReferenceArray` `kotlinx.coroutines.scheduling.n.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlinx.coroutines.scheduling.n.blockingTasksInBuffer` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `int` `kotlinx.coroutines.scheduling.n.consumerIndex` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `java.lang.Object` `kotlinx.coroutines.scheduling.n.lastScheduledTask` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `int` `kotlinx.coroutines.scheduling.n.producerIndex` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.scheduling.n.b` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.scheduling.n.c` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.scheduling.n.d` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.scheduling.n.e` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/scheduling/n;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L31b2d0.  v0:= constclass @type ^`kotlinx.coroutines.scheduling.n` @kind object;
  #L31b2d4.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L31b2d8.  v2:= "lastScheduledTask" @kind object;
  #L31b2dc.  call temp:= `newUpdater`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L31b2e2.  v1:= temp @kind object;
  #L31b2e4.  `@@kotlinx.coroutines.scheduling.n.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v1 @kind object;
  #L31b2e8.  v1:= "producerIndex" @kind object;
  #L31b2ec.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L31b2f2.  v1:= temp @kind object;
  #L31b2f4.  `@@kotlinx.coroutines.scheduling.n.c` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v1 @kind object;
  #L31b2f8.  v1:= "consumerIndex" @kind object;
  #L31b2fc.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L31b302.  v1:= temp @kind object;
  #L31b304.  `@@kotlinx.coroutines.scheduling.n.d` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v1 @kind object;
  #L31b308.  v1:= "blockingTasksInBuffer" @kind object;
  #L31b30c.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L31b312.  v0:= temp @kind object;
  #L31b314.  `@@kotlinx.coroutines.scheduling.n.e` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v0 @kind object;
  #L31b318.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.scheduling.n` v2 @kind this) @signature `Lkotlinx/coroutines/scheduling/n;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L31b32c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L31b332.  v0:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L31b336.  v1:= 128I;
  #L31b33a.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L31b340.  v2.`kotlinx.coroutines.scheduling.n.a` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v0 @kind object;
  #L31b344.  v0:= 0I;
  #L31b346.  v2.`kotlinx.coroutines.scheduling.n.lastScheduledTask` @type ^`java.lang.Object` := v0 @kind object;
  #L31b34a.  v0:= 0I;
  #L31b34c.  v2.`kotlinx.coroutines.scheduling.n.producerIndex` @type ^`int` := v0;
  #L31b350.  v2.`kotlinx.coroutines.scheduling.n.consumerIndex` @type ^`int` := v0;
  #L31b354.  v2.`kotlinx.coroutines.scheduling.n.blockingTasksInBuffer` @type ^`int` := v0;
  #L31b358.  return @kind void;
}
procedure `kotlinx.coroutines.scheduling.h` `b`(`kotlinx.coroutines.scheduling.n` v0 @kind object, `kotlinx.coroutines.scheduling.h` v1 @kind object, `boolean` v2 , `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/scheduling/n;.b:(Lkotlinx/coroutines/scheduling/n;Lkotlinx/coroutines/scheduling/h;ZILjava/lang/Object;)Lkotlinx/coroutines/scheduling/h;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L31af88.  v3:= v3 ^& 2;
  #L31af8c.  if v3 == 0 then goto L31af92;
  #L31af90.  v2:= 0I;
  #L31af92.  call temp:= `a`(v0, v1, v2) @signature `Lkotlinx/coroutines/scheduling/n;.a:(Lkotlinx/coroutines/scheduling/h;Z)Lkotlinx/coroutines/scheduling/h;` @kind virtual;
  #L31af98.  v0:= temp @kind object;
  #L31af9a.  return v0 @kind object;
}
procedure `kotlinx.coroutines.scheduling.h` `c`(`kotlinx.coroutines.scheduling.n` v2 @kind this, `kotlinx.coroutines.scheduling.h` v3 @kind object) @signature `Lkotlinx/coroutines/scheduling/n;.c:(Lkotlinx/coroutines/scheduling/h;)Lkotlinx/coroutines/scheduling/h;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L31afec.  v0:= v3.`kotlinx.coroutines.scheduling.h.h` @type ^`kotlinx.coroutines.scheduling.i` @kind object;
  #L31aff0.  call temp:= `b`(v0) @signature `Lkotlinx/coroutines/scheduling/i;.b:()I` @kind interface;
  #L31aff6.  v0:= temp;
  #L31aff8.  v1:= 1I;
  #L31affa.  if v0 != v1 then goto L31b000;
  #L31affe.  goto L31b002;
  #L31b000.  v1:= 0I;
  #L31b002.  if v1 == 0 then goto L31b010;
  #L31b006.  v0:= `@@kotlinx.coroutines.scheduling.n.e` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L31b00a.  call temp:= `incrementAndGet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.incrementAndGet:(Ljava/lang/Object;)I` @kind virtual;
  #L31b010.  call temp:= `e`(v2) @signature `Lkotlinx/coroutines/scheduling/n;.e:()I` @kind virtual;
  #L31b016.  v0:= temp;
  #L31b018.  v1:= 127I;
  #L31b01c.  if v0 != v1 then goto L31b022;
  #L31b020.  return v3 @kind object;
  #L31b022.  v0:= v2.`kotlinx.coroutines.scheduling.n.producerIndex` @type ^`int`;
  #L31b026.  v0:= v0 ^& v1 @kind int;
  #L31b028.  v1:= v2.`kotlinx.coroutines.scheduling.n.a` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L31b02c.  call temp:= `get`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L31b032.  v1:= temp @kind object;
  #L31b034.  if v1 == 0 then goto L31b040;
  #L31b038.  call `yield`() @signature `Ljava/lang/Thread;.yield:()V` @kind static;
  #L31b03e.  goto L31b028;
  #L31b040.  v1:= v2.`kotlinx.coroutines.scheduling.n.a` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L31b044.  call `lazySet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L31b04a.  v3:= `@@kotlinx.coroutines.scheduling.n.c` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L31b04e.  call temp:= `incrementAndGet`(v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.incrementAndGet:(Ljava/lang/Object;)I` @kind virtual;
  #L31b054.  v3:= 0I;
  #L31b056.  return v3 @kind object;
}
procedure `void` `d`(`kotlinx.coroutines.scheduling.n` v3 @kind this, `kotlinx.coroutines.scheduling.h` v4 @kind object) @signature `Lkotlinx/coroutines/scheduling/n;.d:(Lkotlinx/coroutines/scheduling/h;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L31b36c.  if v4 == 0 then goto L31b3be;
  #L31b370.  v4:= v4.`kotlinx.coroutines.scheduling.h.h` @type ^`kotlinx.coroutines.scheduling.i` @kind object;
  #L31b374.  call temp:= `b`(v4) @signature `Lkotlinx/coroutines/scheduling/i;.b:()I` @kind interface;
  #L31b37a.  v4:= temp;
  #L31b37c.  v0:= 0I;
  #L31b37e.  v1:= 1I;
  #L31b380.  if v4 != v1 then goto L31b388;
  #L31b384.  v4:= 1I;
  #L31b386.  goto L31b38a;
  #L31b388.  v4:= 0I;
  #L31b38a.  if v4 == 0 then goto L31b3be;
  #L31b38e.  v4:= `@@kotlinx.coroutines.scheduling.n.e` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L31b392.  call temp:= `decrementAndGet`(v4, v3) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.decrementAndGet:(Ljava/lang/Object;)I` @kind virtual;
  #L31b398.  v4:= temp;
  #L31b39a.  call temp:= `a`() @signature `Lkotlinx/coroutines/q0;.a:()Z` @kind static;
  #L31b3a0.  v2:= temp;
  #L31b3a2.  if v2 == 0 then goto L31b3be;
  #L31b3a6.  if v4 < 0 then goto L31b3ac;
  #L31b3aa.  v0:= 1I;
  #L31b3ac.  if v0 == 0 then goto L31b3b2;
  #L31b3b0.  goto L31b3be;
  #L31b3b2.  v4:= new `java.lang.AssertionError`;
  #L31b3b6.  call `<init>`(v4) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L31b3bc.  throw v4;
  #L31b3be.  return @kind void;
}
procedure `kotlinx.coroutines.scheduling.h` `i`(`kotlinx.coroutines.scheduling.n` v5 @kind this) @signature `Lkotlinx/coroutines/scheduling/n;.i:()Lkotlinx/coroutines/scheduling/h;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L31b098.  v0:= v5.`kotlinx.coroutines.scheduling.n.consumerIndex` @type ^`int`;
  #L31b09c.  v1:= v5.`kotlinx.coroutines.scheduling.n.producerIndex` @type ^`int`;
  #L31b0a0.  v1:= v0 - v1 @kind int;
  #L31b0a4.  v2:= 0I;
  #L31b0a6.  if v1 != 0 then goto L31b0ac;
  #L31b0aa.  return v2 @kind object;
  #L31b0ac.  v1:= v0 ^& 127;
  #L31b0b0.  v3:= `@@kotlinx.coroutines.scheduling.n.d` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L31b0b4.  v4:= v0 + 1;
  #L31b0b8.  call temp:= `compareAndSet`(v3, v5, v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L31b0be.  v0:= temp;
  #L31b0c0.  if v0 == 0 then goto L31b098;
  #L31b0c4.  v0:= v5.`kotlinx.coroutines.scheduling.n.a` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L31b0c8.  call temp:= `getAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.getAndSet:(ILjava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L31b0ce.  v0:= temp @kind object;
  #L31b0d0.  v0:= (`kotlinx.coroutines.scheduling.h`) v0 @kind object;
  #L31b0d4.  if v0 != 0 then goto L31b0da;
  #L31b0d8.  goto L31b098;
  #L31b0da.  call `d`(v5, v0) @signature `Lkotlinx/coroutines/scheduling/n;.d:(Lkotlinx/coroutines/scheduling/h;)V` @kind direct;
  #L31b0e0.  return v0 @kind object;
}
procedure `boolean` `j`(`kotlinx.coroutines.scheduling.n` v1 @kind this, `kotlinx.coroutines.scheduling.d` v2 @kind object) @signature `Lkotlinx/coroutines/scheduling/n;.j:(Lkotlinx/coroutines/scheduling/d;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L31af10.  call temp:= `i`(v1) @signature `Lkotlinx/coroutines/scheduling/n;.i:()Lkotlinx/coroutines/scheduling/h;` @kind direct;
  #L31af16.  v0:= temp @kind object;
  #L31af18.  if v0 != 0 then goto L31af20;
  #L31af1c.  v2:= 0I;
  #L31af1e.  return v2;
  #L31af20.  call temp:= `a`(v2, v0) @signature `Lkotlinx/coroutines/internal/s;.a:(Ljava/lang/Object;)Z` @kind virtual;
  #L31af26.  v2:= 1I;
  #L31af28.  return v2;
}
procedure `long` `m`(`kotlinx.coroutines.scheduling.n` v7 @kind this, `kotlinx.coroutines.scheduling.n` v8 @kind object, `boolean` v9 ) @signature `Lkotlinx/coroutines/scheduling/n;.m:(Lkotlinx/coroutines/scheduling/n;Z)J` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L31b248.  v0:= v8.`kotlinx.coroutines.scheduling.n.lastScheduledTask` @type ^`java.lang.Object` @kind object;
  #L31b24c.  v0:= (`kotlinx.coroutines.scheduling.h`) v0 @kind object;
  #L31b250.  v1:= -2L;
  #L31b254.  if v0 != 0 then goto L31b25a;
  #L31b258.  return v1 @kind wide;
  #L31b25a.  v3:= 0I;
  #L31b25c.  if v9 == 0 then goto L31b27c;
  #L31b260.  v4:= v0.`kotlinx.coroutines.scheduling.h.h` @type ^`kotlinx.coroutines.scheduling.i` @kind object;
  #L31b264.  call temp:= `b`(v4) @signature `Lkotlinx/coroutines/scheduling/i;.b:()I` @kind interface;
  #L31b26a.  v4:= temp;
  #L31b26c.  v5:= 1I;
  #L31b26e.  if v4 != v5 then goto L31b274;
  #L31b272.  goto L31b276;
  #L31b274.  v5:= 0I;
  #L31b276.  if v5 != 0 then goto L31b27c;
  #L31b27a.  return v1 @kind wide;
  #L31b27c.  v1:= `@@kotlinx.coroutines.scheduling.l.e` @type ^`kotlinx.coroutines.scheduling.g` @kind object;
  #L31b280.  call temp:= `a`(v1) @signature `Lkotlinx/coroutines/scheduling/g;.a:()J` @kind virtual;
  #L31b286.  v1:= temp @kind wide;
  #L31b288.  v4:= v0.`kotlinx.coroutines.scheduling.h.g` @type ^`long` @kind wide;
  #L31b28c.  v1:= v1 - v4 @kind long;
  #L31b28e.  v4:= `@@kotlinx.coroutines.scheduling.l.a` @type ^`long` @kind wide;
  #L31b292.  v6:= lcmp(v1, v4);
  #L31b296.  if v6 >= 0 then goto L31b29e;
  #L31b29a.  v4:= v4 - v1 @kind long;
  #L31b29c.  return v4 @kind wide;
  #L31b29e.  v1:= `@@kotlinx.coroutines.scheduling.n.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L31b2a2.  v2:= 0I;
  #L31b2a4.  call temp:= `compareAndSet`(v1, v8, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L31b2aa.  v1:= temp;
  #L31b2ac.  if v1 == 0 then goto L31b248;
  #L31b2b0.  v8:= 2I;
  #L31b2b2.  call temp:= `b`(v7, v0, v3, v8, v2) @signature `Lkotlinx/coroutines/scheduling/n;.b:(Lkotlinx/coroutines/scheduling/n;Lkotlinx/coroutines/scheduling/h;ZILjava/lang/Object;)Lkotlinx/coroutines/scheduling/h;` @kind static;
  #L31b2b8.  v8:= -1L;
  #L31b2bc.  return v8 @kind wide;
}
procedure `kotlinx.coroutines.scheduling.h` `a`(`kotlinx.coroutines.scheduling.n` v0 @kind this, `kotlinx.coroutines.scheduling.h` v1 @kind object, `boolean` v2 ) @signature `Lkotlinx/coroutines/scheduling/n;.a:(Lkotlinx/coroutines/scheduling/h;Z)Lkotlinx/coroutines/scheduling/h;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L31afac.  if v2 == 0 then goto L31afba;
  #L31afb0.  call temp:= `c`(v0, v1) @signature `Lkotlinx/coroutines/scheduling/n;.c:(Lkotlinx/coroutines/scheduling/h;)Lkotlinx/coroutines/scheduling/h;` @kind direct;
  #L31afb6.  v1:= temp @kind object;
  #L31afb8.  return v1 @kind object;
  #L31afba.  v2:= `@@kotlinx.coroutines.scheduling.n.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L31afbe.  call temp:= `getAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L31afc4.  v1:= temp @kind object;
  #L31afc6.  v1:= (`kotlinx.coroutines.scheduling.h`) v1 @kind object;
  #L31afca.  if v1 != 0 then goto L31afd2;
  #L31afce.  v1:= 0I;
  #L31afd0.  return v1 @kind object;
  #L31afd2.  call temp:= `c`(v0, v1) @signature `Lkotlinx/coroutines/scheduling/n;.c:(Lkotlinx/coroutines/scheduling/h;)Lkotlinx/coroutines/scheduling/h;` @kind direct;
  #L31afd8.  v1:= temp @kind object;
  #L31afda.  return v1 @kind object;
}
procedure `int` `e`(`kotlinx.coroutines.scheduling.n` v2 @kind this) @signature `Lkotlinx/coroutines/scheduling/n;.e:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L31af3c.  v0:= v2.`kotlinx.coroutines.scheduling.n.producerIndex` @type ^`int`;
  #L31af40.  v1:= v2.`kotlinx.coroutines.scheduling.n.consumerIndex` @type ^`int`;
  #L31af44.  v0:= v0 - v1 @kind int;
  #L31af46.  return v0;
}
procedure `int` `f`(`kotlinx.coroutines.scheduling.n` v1 @kind this) @signature `Lkotlinx/coroutines/scheduling/n;.f:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L31af58.  v0:= v1.`kotlinx.coroutines.scheduling.n.lastScheduledTask` @type ^`java.lang.Object` @kind object;
  #L31af5c.  if v0 == 0 then goto L31af6e;
  #L31af60.  call temp:= `e`(v1) @signature `Lkotlinx/coroutines/scheduling/n;.e:()I` @kind virtual;
  #L31af66.  v0:= temp;
  #L31af68.  v0:= v0 + 1;
  #L31af6c.  goto L31af76;
  #L31af6e.  call temp:= `e`(v1) @signature `Lkotlinx/coroutines/scheduling/n;.e:()I` @kind virtual;
  #L31af74.  v0:= temp;
  #L31af76.  return v0;
}
procedure `void` `g`(`kotlinx.coroutines.scheduling.n` v2 @kind this, `kotlinx.coroutines.scheduling.d` v3 @kind object) @signature `Lkotlinx/coroutines/scheduling/n;.g:(Lkotlinx/coroutines/scheduling/d;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L31b3d0.  v0:= `@@kotlinx.coroutines.scheduling.n.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L31b3d4.  v1:= 0I;
  #L31b3d6.  call temp:= `getAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L31b3dc.  v0:= temp @kind object;
  #L31b3de.  v0:= (`kotlinx.coroutines.scheduling.h`) v0 @kind object;
  #L31b3e2.  if v0 == 0 then goto L31b3ec;
  #L31b3e6.  call temp:= `a`(v3, v0) @signature `Lkotlinx/coroutines/internal/s;.a:(Ljava/lang/Object;)Z` @kind virtual;
  #L31b3ec.  call temp:= `j`(v2, v3) @signature `Lkotlinx/coroutines/scheduling/n;.j:(Lkotlinx/coroutines/scheduling/d;)Z` @kind direct;
  #L31b3f2.  v0:= temp;
  #L31b3f4.  if v0 != 0 then goto L31b3ec;
  #L31b3f8.  return @kind void;
}
procedure `kotlinx.coroutines.scheduling.h` `h`(`kotlinx.coroutines.scheduling.n` v2 @kind this) @signature `Lkotlinx/coroutines/scheduling/n;.h:()Lkotlinx/coroutines/scheduling/h;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L31b068.  v0:= `@@kotlinx.coroutines.scheduling.n.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L31b06c.  v1:= 0I;
  #L31b06e.  call temp:= `getAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L31b074.  v0:= temp @kind object;
  #L31b076.  v0:= (`kotlinx.coroutines.scheduling.h`) v0 @kind object;
  #L31b07a.  if v0 != 0 then goto L31b086;
  #L31b07e.  call temp:= `i`(v2) @signature `Lkotlinx/coroutines/scheduling/n;.i:()Lkotlinx/coroutines/scheduling/h;` @kind direct;
  #L31b084.  v0:= temp @kind object;
  #L31b086.  return v0 @kind object;
}
procedure `long` `k`(`kotlinx.coroutines.scheduling.n` v8 @kind this, `kotlinx.coroutines.scheduling.n` v9 @kind object) @signature `Lkotlinx/coroutines/scheduling/n;.k:(Lkotlinx/coroutines/scheduling/n;)J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L31b0f4.  call temp:= `a`() @signature `Lkotlinx/coroutines/q0;.a:()Z` @kind static;
  #L31b0fa.  v0:= temp;
  #L31b0fc.  v1:= 0I;
  #L31b0fe.  v2:= 1I;
  #L31b100.  if v0 == 0 then goto L31b128;
  #L31b104.  call temp:= `e`(v8) @signature `Lkotlinx/coroutines/scheduling/n;.e:()I` @kind virtual;
  #L31b10a.  v0:= temp;
  #L31b10c.  if v0 != 0 then goto L31b114;
  #L31b110.  v0:= 1I;
  #L31b112.  goto L31b116;
  #L31b114.  v0:= 0I;
  #L31b116.  if v0 == 0 then goto L31b11c;
  #L31b11a.  goto L31b128;
  #L31b11c.  v9:= new `java.lang.AssertionError`;
  #L31b120.  call `<init>`(v9) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L31b126.  throw v9;
  #L31b128.  v0:= v9.`kotlinx.coroutines.scheduling.n.consumerIndex` @type ^`int`;
  #L31b12c.  v3:= v9.`kotlinx.coroutines.scheduling.n.producerIndex` @type ^`int`;
  #L31b130.  v4:= v9.`kotlinx.coroutines.scheduling.n.a` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L31b134.  if v0 == v3 then goto L31b19a;
  #L31b138.  v5:= v0 ^& 127;
  #L31b13c.  v6:= v9.`kotlinx.coroutines.scheduling.n.blockingTasksInBuffer` @type ^`int`;
  #L31b140.  if v6 == 0 then goto L31b19a;
  #L31b144.  call temp:= `get`(v4, v5) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L31b14a.  v6:= temp @kind object;
  #L31b14c.  v6:= (`kotlinx.coroutines.scheduling.h`) v6 @kind object;
  #L31b150.  if v6 == 0 then goto L31b194;
  #L31b154.  v7:= v6.`kotlinx.coroutines.scheduling.h.h` @type ^`kotlinx.coroutines.scheduling.i` @kind object;
  #L31b158.  call temp:= `b`(v7) @signature `Lkotlinx/coroutines/scheduling/i;.b:()I` @kind interface;
  #L31b15e.  v7:= temp;
  #L31b160.  if v7 != v2 then goto L31b168;
  #L31b164.  v7:= 1I;
  #L31b166.  goto L31b16a;
  #L31b168.  v7:= 0I;
  #L31b16a.  if v7 == 0 then goto L31b194;
  #L31b16e.  v7:= 0I;
  #L31b170.  call temp:= `compareAndSet`(v4, v5, v6, v7) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L31b176.  v5:= temp;
  #L31b178.  if v5 == 0 then goto L31b194;
  #L31b17c.  v0:= `@@kotlinx.coroutines.scheduling.n.e` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L31b180.  call temp:= `decrementAndGet`(v0, v9) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.decrementAndGet:(Ljava/lang/Object;)I` @kind virtual;
  #L31b186.  v9:= 2I;
  #L31b188.  call temp:= `b`(v8, v6, v1, v9, v7) @signature `Lkotlinx/coroutines/scheduling/n;.b:(Lkotlinx/coroutines/scheduling/n;Lkotlinx/coroutines/scheduling/h;ZILjava/lang/Object;)Lkotlinx/coroutines/scheduling/h;` @kind static;
  #L31b18e.  v0:= -1L;
  #L31b192.  return v0 @kind wide;
  #L31b194.  v0:= v0 + 1;
  #L31b198.  goto L31b134;
  #L31b19a.  call temp:= `m`(v8, v9, v2) @signature `Lkotlinx/coroutines/scheduling/n;.m:(Lkotlinx/coroutines/scheduling/n;Z)J` @kind direct;
  #L31b1a0.  v0:= temp @kind wide;
  #L31b1a2.  return v0 @kind wide;
}
procedure `long` `l`(`kotlinx.coroutines.scheduling.n` v4 @kind this, `kotlinx.coroutines.scheduling.n` v5 @kind object) @signature `Lkotlinx/coroutines/scheduling/n;.l:(Lkotlinx/coroutines/scheduling/n;)J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L31b1b4.  call temp:= `a`() @signature `Lkotlinx/coroutines/q0;.a:()Z` @kind static;
  #L31b1ba.  v0:= temp;
  #L31b1bc.  v1:= 1I;
  #L31b1be.  v2:= 0I;
  #L31b1c0.  if v0 == 0 then goto L31b1e8;
  #L31b1c4.  call temp:= `e`(v4) @signature `Lkotlinx/coroutines/scheduling/n;.e:()I` @kind virtual;
  #L31b1ca.  v0:= temp;
  #L31b1cc.  if v0 != 0 then goto L31b1d4;
  #L31b1d0.  v0:= 1I;
  #L31b1d2.  goto L31b1d6;
  #L31b1d4.  v0:= 0I;
  #L31b1d6.  if v0 == 0 then goto L31b1dc;
  #L31b1da.  goto L31b1e8;
  #L31b1dc.  v5:= new `java.lang.AssertionError`;
  #L31b1e0.  call `<init>`(v5) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L31b1e6.  throw v5;
  #L31b1e8.  call temp:= `i`(v5) @signature `Lkotlinx/coroutines/scheduling/n;.i:()Lkotlinx/coroutines/scheduling/h;` @kind direct;
  #L31b1ee.  v0:= temp @kind object;
  #L31b1f0.  if v0 == 0 then goto L31b22c;
  #L31b1f4.  v5:= 2I;
  #L31b1f6.  v3:= 0I;
  #L31b1f8.  call temp:= `b`(v4, v0, v2, v5, v3) @signature `Lkotlinx/coroutines/scheduling/n;.b:(Lkotlinx/coroutines/scheduling/n;Lkotlinx/coroutines/scheduling/h;ZILjava/lang/Object;)Lkotlinx/coroutines/scheduling/h;` @kind static;
  #L31b1fe.  v5:= temp @kind object;
  #L31b200.  call temp:= `a`() @signature `Lkotlinx/coroutines/q0;.a:()Z` @kind static;
  #L31b206.  v0:= temp;
  #L31b208.  if v0 == 0 then goto L31b226;
  #L31b20c.  if v5 != 0 then goto L31b212;
  #L31b210.  goto L31b214;
  #L31b212.  v1:= 0I;
  #L31b214.  if v1 == 0 then goto L31b21a;
  #L31b218.  goto L31b226;
  #L31b21a.  v5:= new `java.lang.AssertionError`;
  #L31b21e.  call `<init>`(v5) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L31b224.  throw v5;
  #L31b226.  v0:= -1L;
  #L31b22a.  return v0 @kind wide;
  #L31b22c.  call temp:= `m`(v4, v5, v2) @signature `Lkotlinx/coroutines/scheduling/n;.m:(Lkotlinx/coroutines/scheduling/n;Z)J` @kind direct;
  #L31b232.  v0:= temp @kind wide;
  #L31b234.  return v0 @kind wide;
}
