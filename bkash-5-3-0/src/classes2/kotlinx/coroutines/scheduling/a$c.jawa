record `kotlinx.coroutines.scheduling.a$c` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.Thread` @kind class {
  `kotlinx.coroutines.scheduling.n` `kotlinx.coroutines.scheduling.a$c.g` @AccessFlag PUBLIC_FINAL;
  `kotlinx.coroutines.scheduling.a$d` `kotlinx.coroutines.scheduling.a$c.h` @AccessFlag PUBLIC;
  `long` `kotlinx.coroutines.scheduling.a$c.i` @AccessFlag PRIVATE;
  `int` `kotlinx.coroutines.scheduling.a$c.indexInArray` @AccessFlag PRIVATE_VOLATILE;
  `long` `kotlinx.coroutines.scheduling.a$c.j` @AccessFlag PRIVATE;
  `int` `kotlinx.coroutines.scheduling.a$c.k` @AccessFlag PRIVATE;
  `boolean` `kotlinx.coroutines.scheduling.a$c.l` @AccessFlag PUBLIC;
  `kotlinx.coroutines.scheduling.a` `kotlinx.coroutines.scheduling.a$c.m` @AccessFlag FINAL_SYNTHETIC;
  `java.lang.Object` `kotlinx.coroutines.scheduling.a$c.nextParkedWorker` @AccessFlag PRIVATE_VOLATILE;
  `int` `kotlinx.coroutines.scheduling.a$c.workerCtl` @AccessFlag VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.scheduling.a$c.n` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/scheduling/a$c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L319774.  v0:= constclass @type ^`kotlinx.coroutines.scheduling.a$c` @kind object;
  #L319778.  v1:= "workerCtl" @kind object;
  #L31977c.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L319782.  v0:= temp @kind object;
  #L319784.  `@@kotlinx.coroutines.scheduling.a$c.n` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v0 @kind object;
  #L319788.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.scheduling.a$c` v0 @kind this, `kotlinx.coroutines.scheduling.a` v1 @kind object) @signature `Lkotlinx/coroutines/scheduling/a$c;.<init>:(Lkotlinx/coroutines/scheduling/a;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L31979c.  v0.`kotlinx.coroutines.scheduling.a$c.m` @type ^`kotlinx.coroutines.scheduling.a` := v1 @kind object;
  #L3197a0.  call `<init>`(v0) @signature `Ljava/lang/Thread;.<init>:()V` @kind direct;
  #L3197a6.  v1:= 1I;
  #L3197a8.  call `setDaemon`(v0, v1) @signature `Ljava/lang/Thread;.setDaemon:(Z)V` @kind virtual;
  #L3197ae.  v1:= new `kotlinx.coroutines.scheduling.n`;
  #L3197b2.  call `<init>`(v1) @signature `Lkotlinx/coroutines/scheduling/n;.<init>:()V` @kind direct;
  #L3197b8.  v0.`kotlinx.coroutines.scheduling.a$c.g` @type ^`kotlinx.coroutines.scheduling.n` := v1 @kind object;
  #L3197bc.  v1:= `@@kotlinx.coroutines.scheduling.a$d.DORMANT` @type ^`kotlinx.coroutines.scheduling.a$d` @kind object;
  #L3197c0.  v0.`kotlinx.coroutines.scheduling.a$c.h` @type ^`kotlinx.coroutines.scheduling.a$d` := v1 @kind object;
  #L3197c4.  v1:= 0I;
  #L3197c6.  v0.`kotlinx.coroutines.scheduling.a$c.workerCtl` @type ^`int` := v1;
  #L3197ca.  v1:= `@@kotlinx.coroutines.scheduling.a.q` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L3197ce.  v0.`kotlinx.coroutines.scheduling.a$c.nextParkedWorker` @type ^`java.lang.Object` := v1 @kind object;
  #L3197d2.  v1:= `@@xd.d.Default` @type ^`xd.d$a` @kind object;
  #L3197d6.  call temp:= `nextInt`(v1) @signature `Lxd/d$a;.nextInt:()I` @kind virtual;
  #L3197dc.  v1:= temp;
  #L3197de.  v0.`kotlinx.coroutines.scheduling.a$c.k` @type ^`int` := v1;
  #L3197e2.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.scheduling.a$c` v0 @kind this, `kotlinx.coroutines.scheduling.a` v1 @kind object, `int` v2 ) @signature `Lkotlinx/coroutines/scheduling/a$c;.<init>:(Lkotlinx/coroutines/scheduling/a;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3197f4.  call `<init>`(v0, v1) @signature `Lkotlinx/coroutines/scheduling/a$c;.<init>:(Lkotlinx/coroutines/scheduling/a;)V` @kind direct;
  #L3197fa.  call `o`(v0, v2) @signature `Lkotlinx/coroutines/scheduling/a$c;.o:(I)V` @kind virtual;
  #L319800.  return @kind void;
}
procedure `kotlinx.coroutines.scheduling.a` `a`(`kotlinx.coroutines.scheduling.a$c` v0 @kind object) @signature `Lkotlinx/coroutines/scheduling/a$c;.a:(Lkotlinx/coroutines/scheduling/a$c;)Lkotlinx/coroutines/scheduling/a;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L31949c.  v0:= v0.`kotlinx.coroutines.scheduling.a$c.m` @type ^`kotlinx.coroutines.scheduling.a` @kind object;
  #L3194a0.  return v0 @kind object;
}
procedure `void` `b`(`kotlinx.coroutines.scheduling.a$c` v3 @kind this, `int` v4 ) @signature `Lkotlinx/coroutines/scheduling/a$c;.b:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L319814.  if v4 != 0 then goto L31981a;
  #L319818.  return @kind void;
  #L31981a.  v4:= v3.`kotlinx.coroutines.scheduling.a$c.m` @type ^`kotlinx.coroutines.scheduling.a` @kind object;
  #L31981e.  v0:= `@@kotlinx.coroutines.scheduling.a.o` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L319822.  v1:= -2097152L;
  #L319828.  call temp:= `addAndGet`(v0, v4, v1) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.addAndGet:(Ljava/lang/Object;J)J` @kind virtual;
  #L31982e.  v4:= v3.`kotlinx.coroutines.scheduling.a$c.h` @type ^`kotlinx.coroutines.scheduling.a$d` @kind object;
  #L319832.  v0:= `@@kotlinx.coroutines.scheduling.a$d.TERMINATED` @type ^`kotlinx.coroutines.scheduling.a$d` @kind object;
  #L319836.  if v4 == v0 then goto L31986e;
  #L31983a.  call temp:= `a`() @signature `Lkotlinx/coroutines/q0;.a:()Z` @kind static;
  #L319840.  v0:= temp;
  #L319842.  if v0 == 0 then goto L319866;
  #L319846.  v0:= `@@kotlinx.coroutines.scheduling.a$d.BLOCKING` @type ^`kotlinx.coroutines.scheduling.a$d` @kind object;
  #L31984a.  if v4 != v0 then goto L319852;
  #L31984e.  v4:= 1I;
  #L319850.  goto L319854;
  #L319852.  v4:= 0I;
  #L319854.  if v4 == 0 then goto L31985a;
  #L319858.  goto L319866;
  #L31985a.  v4:= new `java.lang.AssertionError`;
  #L31985e.  call `<init>`(v4) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L319864.  throw v4;
  #L319866.  v4:= `@@kotlinx.coroutines.scheduling.a$d.DORMANT` @type ^`kotlinx.coroutines.scheduling.a$d` @kind object;
  #L31986a.  v3.`kotlinx.coroutines.scheduling.a$c.h` @type ^`kotlinx.coroutines.scheduling.a$d` := v4 @kind object;
  #L31986e.  return @kind void;
}
procedure `void` `c`(`kotlinx.coroutines.scheduling.a$c` v0 @kind this, `int` v1 ) @signature `Lkotlinx/coroutines/scheduling/a$c;.c:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;

  #L319880.  if v1 != 0 then goto L319886;
  #L319884.  return @kind void;
  #L319886.  v1:= `@@kotlinx.coroutines.scheduling.a$d.BLOCKING` @type ^`kotlinx.coroutines.scheduling.a$d` @kind object;
  #L31988a.  call temp:= `s`(v0, v1) @signature `Lkotlinx/coroutines/scheduling/a$c;.s:(Lkotlinx/coroutines/scheduling/a$d;)Z` @kind virtual;
  #L319890.  v1:= temp;
  #L319892.  if v1 == 0 then goto L3198a0;
  #L319896.  v1:= v0.`kotlinx.coroutines.scheduling.a$c.m` @type ^`kotlinx.coroutines.scheduling.a` @kind object;
  #L31989a.  call `a0`(v1) @signature `Lkotlinx/coroutines/scheduling/a;.a0:()V` @kind virtual;
  #L3198a0.  return @kind void;
}
procedure `void` `d`(`kotlinx.coroutines.scheduling.a$c` v2 @kind this, `kotlinx.coroutines.scheduling.h` v3 @kind object) @signature `Lkotlinx/coroutines/scheduling/a$c;.d:(Lkotlinx/coroutines/scheduling/h;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L3198b4.  v0:= v3.`kotlinx.coroutines.scheduling.h.h` @type ^`kotlinx.coroutines.scheduling.i` @kind object;
  #L3198b8.  call temp:= `b`(v0) @signature `Lkotlinx/coroutines/scheduling/i;.b:()I` @kind interface;
  #L3198be.  v0:= temp;
  #L3198c0.  call `i`(v2, v0) @signature `Lkotlinx/coroutines/scheduling/a$c;.i:(I)V` @kind direct;
  #L3198c6.  call `c`(v2, v0) @signature `Lkotlinx/coroutines/scheduling/a$c;.c:(I)V` @kind direct;
  #L3198cc.  v1:= v2.`kotlinx.coroutines.scheduling.a$c.m` @type ^`kotlinx.coroutines.scheduling.a` @kind object;
  #L3198d0.  call `Q`(v1, v3) @signature `Lkotlinx/coroutines/scheduling/a;.Q:(Lkotlinx/coroutines/scheduling/h;)V` @kind virtual;
  #L3198d6.  call `b`(v2, v0) @signature `Lkotlinx/coroutines/scheduling/a$c;.b:(I)V` @kind direct;
  #L3198dc.  return @kind void;
}
procedure `kotlinx.coroutines.scheduling.h` `e`(`kotlinx.coroutines.scheduling.a$c` v2 @kind this, `boolean` v3 ) @signature `Lkotlinx/coroutines/scheduling/a$c;.e:(Z)Lkotlinx/coroutines/scheduling/h;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L3194b4.  v0:= 0I;
  #L3194b6.  if v3 == 0 then goto L31950e;
  #L3194ba.  v3:= v2.`kotlinx.coroutines.scheduling.a$c.m` @type ^`kotlinx.coroutines.scheduling.a` @kind object;
  #L3194be.  v3:= v3.`kotlinx.coroutines.scheduling.a.g` @type ^`int`;
  #L3194c2.  v3:= v3 * 2;
  #L3194c6.  call temp:= `k`(v2, v3) @signature `Lkotlinx/coroutines/scheduling/a$c;.k:(I)I` @kind virtual;
  #L3194cc.  v3:= temp;
  #L3194ce.  if v3 != 0 then goto L3194d6;
  #L3194d2.  v3:= 1I;
  #L3194d4.  goto L3194d8;
  #L3194d6.  v3:= 0I;
  #L3194d8.  if v3 == 0 then goto L3194ea;
  #L3194dc.  call temp:= `m`(v2) @signature `Lkotlinx/coroutines/scheduling/a$c;.m:()Lkotlinx/coroutines/scheduling/h;` @kind direct;
  #L3194e2.  v1:= temp @kind object;
  #L3194e4.  if v1 == 0 then goto L3194ea;
  #L3194e8.  return v1 @kind object;
  #L3194ea.  v1:= v2.`kotlinx.coroutines.scheduling.a$c.g` @type ^`kotlinx.coroutines.scheduling.n` @kind object;
  #L3194ee.  call temp:= `h`(v1) @signature `Lkotlinx/coroutines/scheduling/n;.h:()Lkotlinx/coroutines/scheduling/h;` @kind virtual;
  #L3194f4.  v1:= temp @kind object;
  #L3194f6.  if v1 == 0 then goto L3194fc;
  #L3194fa.  return v1 @kind object;
  #L3194fc.  if v3 != 0 then goto L31951c;
  #L319500.  call temp:= `m`(v2) @signature `Lkotlinx/coroutines/scheduling/a$c;.m:()Lkotlinx/coroutines/scheduling/h;` @kind direct;
  #L319506.  v3:= temp @kind object;
  #L319508.  if v3 == 0 then goto L31951c;
  #L31950c.  return v3 @kind object;
  #L31950e.  call temp:= `m`(v2) @signature `Lkotlinx/coroutines/scheduling/a$c;.m:()Lkotlinx/coroutines/scheduling/h;` @kind direct;
  #L319514.  v3:= temp @kind object;
  #L319516.  if v3 == 0 then goto L31951c;
  #L31951a.  return v3 @kind object;
  #L31951c.  call temp:= `t`(v2, v0) @signature `Lkotlinx/coroutines/scheduling/a$c;.t:(Z)Lkotlinx/coroutines/scheduling/h;` @kind direct;
  #L319522.  v3:= temp @kind object;
  #L319524.  return v3 @kind object;
}
procedure `void` `i`(`kotlinx.coroutines.scheduling.a$c` v2 @kind this, `int` v3 ) @signature `Lkotlinx/coroutines/scheduling/a$c;.i:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L3198f0.  v0:= 0L;
  #L3198f4.  v2.`kotlinx.coroutines.scheduling.a$c.i` @type ^`long` := v0 @kind wide;
  #L3198f8.  v0:= v2.`kotlinx.coroutines.scheduling.a$c.h` @type ^`kotlinx.coroutines.scheduling.a$d` @kind object;
  #L3198fc.  v1:= `@@kotlinx.coroutines.scheduling.a$d.PARKING` @type ^`kotlinx.coroutines.scheduling.a$d` @kind object;
  #L319900.  if v0 != v1 then goto L319934;
  #L319904.  call temp:= `a`() @signature `Lkotlinx/coroutines/q0;.a:()Z` @kind static;
  #L31990a.  v0:= temp;
  #L31990c.  if v0 == 0 then goto L31992c;
  #L319910.  v0:= 1I;
  #L319912.  if v3 != v0 then goto L319918;
  #L319916.  goto L31991a;
  #L319918.  v0:= 0I;
  #L31991a.  if v0 == 0 then goto L319920;
  #L31991e.  goto L31992c;
  #L319920.  v3:= new `java.lang.AssertionError`;
  #L319924.  call `<init>`(v3) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L31992a.  throw v3;
  #L31992c.  v3:= `@@kotlinx.coroutines.scheduling.a$d.BLOCKING` @type ^`kotlinx.coroutines.scheduling.a$d` @kind object;
  #L319930.  v2.`kotlinx.coroutines.scheduling.a$c.h` @type ^`kotlinx.coroutines.scheduling.a$d` := v3 @kind object;
  #L319934.  return @kind void;
}
procedure `boolean` `j`(`kotlinx.coroutines.scheduling.a$c` v2 @kind this) @signature `Lkotlinx/coroutines/scheduling/a$c;.j:()Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L31933c.  v0:= v2.`kotlinx.coroutines.scheduling.a$c.nextParkedWorker` @type ^`java.lang.Object` @kind object;
  #L319340.  v1:= `@@kotlinx.coroutines.scheduling.a.q` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L319344.  if v0 == v1 then goto L31934c;
  #L319348.  v0:= 1I;
  #L31934a.  goto L31934e;
  #L31934c.  v0:= 0I;
  #L31934e.  return v0;
}
procedure `void` `l`(`kotlinx.coroutines.scheduling.a$c` v6 @kind this) @signature `Lkotlinx/coroutines/scheduling/a$c;.l:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L319948.  v0:= v6.`kotlinx.coroutines.scheduling.a$c.i` @type ^`long` @kind wide;
  #L31994c.  v2:= 0L;
  #L319950.  v4:= lcmp(v0, v2);
  #L319954.  if v4 != 0 then goto L31996e;
  #L319958.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L31995e.  v0:= temp @kind wide;
  #L319960.  v4:= v6.`kotlinx.coroutines.scheduling.a$c.m` @type ^`kotlinx.coroutines.scheduling.a` @kind object;
  #L319964.  v4:= v4.`kotlinx.coroutines.scheduling.a.i` @type ^`long` @kind wide;
  #L319968.  v0:= v0 + v4 @kind long;
  #L31996a.  v6.`kotlinx.coroutines.scheduling.a$c.i` @type ^`long` := v0 @kind wide;
  #L31996e.  v0:= v6.`kotlinx.coroutines.scheduling.a$c.m` @type ^`kotlinx.coroutines.scheduling.a` @kind object;
  #L319972.  v0:= v0.`kotlinx.coroutines.scheduling.a.i` @type ^`long` @kind wide;
  #L319976.  call `parkNanos`(v0) @signature `Ljava/util/concurrent/locks/LockSupport;.parkNanos:(J)V` @kind static;
  #L31997c.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L319982.  v0:= temp @kind wide;
  #L319984.  v4:= v6.`kotlinx.coroutines.scheduling.a$c.i` @type ^`long` @kind wide;
  #L319988.  v0:= v0 - v4 @kind long;
  #L31998a.  v4:= lcmp(v0, v2);
  #L31998e.  if v4 < 0 then goto L31999c;
  #L319992.  v6.`kotlinx.coroutines.scheduling.a$c.i` @type ^`long` := v2 @kind wide;
  #L319996.  call `u`(v6) @signature `Lkotlinx/coroutines/scheduling/a$c;.u:()V` @kind direct;
  #L31999c.  return @kind void;
}
procedure `kotlinx.coroutines.scheduling.h` `m`(`kotlinx.coroutines.scheduling.a$c` v1 @kind this) @signature `Lkotlinx/coroutines/scheduling/a$c;.m:()Lkotlinx/coroutines/scheduling/h;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L3195ac.  v0:= 2I;
  #L3195ae.  call temp:= `k`(v1, v0) @signature `Lkotlinx/coroutines/scheduling/a$c;.k:(I)I` @kind virtual;
  #L3195b4.  v0:= temp;
  #L3195b6.  if v0 != 0 then goto L3195ea;
  #L3195ba.  v0:= v1.`kotlinx.coroutines.scheduling.a$c.m` @type ^`kotlinx.coroutines.scheduling.a` @kind object;
  #L3195be.  v0:= v0.`kotlinx.coroutines.scheduling.a.k` @type ^`kotlinx.coroutines.scheduling.d` @kind object;
  #L3195c2.  call temp:= `d`(v0) @signature `Lkotlinx/coroutines/internal/s;.d:()Ljava/lang/Object;` @kind virtual;
  #L3195c8.  v0:= temp @kind object;
  #L3195ca.  v0:= (`kotlinx.coroutines.scheduling.h`) v0 @kind object;
  #L3195ce.  if v0 == 0 then goto L3195d4;
  #L3195d2.  return v0 @kind object;
  #L3195d4.  v0:= v1.`kotlinx.coroutines.scheduling.a$c.m` @type ^`kotlinx.coroutines.scheduling.a` @kind object;
  #L3195d8.  v0:= v0.`kotlinx.coroutines.scheduling.a.l` @type ^`kotlinx.coroutines.scheduling.d` @kind object;
  #L3195dc.  call temp:= `d`(v0) @signature `Lkotlinx/coroutines/internal/s;.d:()Ljava/lang/Object;` @kind virtual;
  #L3195e2.  v0:= temp @kind object;
  #L3195e4.  v0:= (`kotlinx.coroutines.scheduling.h`) v0 @kind object;
  #L3195e8.  return v0 @kind object;
  #L3195ea.  v0:= v1.`kotlinx.coroutines.scheduling.a$c.m` @type ^`kotlinx.coroutines.scheduling.a` @kind object;
  #L3195ee.  v0:= v0.`kotlinx.coroutines.scheduling.a.l` @type ^`kotlinx.coroutines.scheduling.d` @kind object;
  #L3195f2.  call temp:= `d`(v0) @signature `Lkotlinx/coroutines/internal/s;.d:()Ljava/lang/Object;` @kind virtual;
  #L3195f8.  v0:= temp @kind object;
  #L3195fa.  v0:= (`kotlinx.coroutines.scheduling.h`) v0 @kind object;
  #L3195fe.  if v0 == 0 then goto L319604;
  #L319602.  return v0 @kind object;
  #L319604.  v0:= v1.`kotlinx.coroutines.scheduling.a$c.m` @type ^`kotlinx.coroutines.scheduling.a` @kind object;
  #L319608.  v0:= v0.`kotlinx.coroutines.scheduling.a.k` @type ^`kotlinx.coroutines.scheduling.d` @kind object;
  #L31960c.  call temp:= `d`(v0) @signature `Lkotlinx/coroutines/internal/s;.d:()Ljava/lang/Object;` @kind virtual;
  #L319612.  v0:= temp @kind object;
  #L319614.  v0:= (`kotlinx.coroutines.scheduling.h`) v0 @kind object;
  #L319618.  return v0 @kind object;
}
procedure `void` `n`(`kotlinx.coroutines.scheduling.a$c` v7 @kind this) @signature `Lkotlinx/coroutines/scheduling/a$c;.n:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3199c8.  v0:= 0I;
  #L3199ca.  v1:= 0I;
  #L3199cc.  v2:= v7.`kotlinx.coroutines.scheduling.a$c.m` @type ^`kotlinx.coroutines.scheduling.a` @kind object;
  #L3199d0.  call temp:= `isTerminated`(v2) @signature `Lkotlinx/coroutines/scheduling/a;.isTerminated:()Z` @kind virtual;
  #L3199d6.  v2:= temp;
  #L3199d8.  if v2 != 0 then goto L319a48;
  #L3199dc.  v2:= v7.`kotlinx.coroutines.scheduling.a$c.h` @type ^`kotlinx.coroutines.scheduling.a$d` @kind object;
  #L3199e0.  v3:= `@@kotlinx.coroutines.scheduling.a$d.TERMINATED` @type ^`kotlinx.coroutines.scheduling.a$d` @kind object;
  #L3199e4.  if v2 == v3 then goto L319a48;
  #L3199e8.  v2:= v7.`kotlinx.coroutines.scheduling.a$c.l` @type ^`boolean` @kind boolean;
  #L3199ec.  call temp:= `f`(v7, v2) @signature `Lkotlinx/coroutines/scheduling/a$c;.f:(Z)Lkotlinx/coroutines/scheduling/h;` @kind virtual;
  #L3199f2.  v2:= temp @kind object;
  #L3199f4.  v3:= 0L;
  #L3199f8.  if v2 == 0 then goto L319a08;
  #L3199fc.  v7.`kotlinx.coroutines.scheduling.a$c.j` @type ^`long` := v3 @kind wide;
  #L319a00.  call `d`(v7, v2) @signature `Lkotlinx/coroutines/scheduling/a$c;.d:(Lkotlinx/coroutines/scheduling/h;)V` @kind direct;
  #L319a06.  goto L3199ca;
  #L319a08.  v7.`kotlinx.coroutines.scheduling.a$c.l` @type ^`boolean` := v0 @kind boolean;
  #L319a0c.  v5:= v7.`kotlinx.coroutines.scheduling.a$c.j` @type ^`long` @kind wide;
  #L319a10.  v2:= lcmp(v5, v3);
  #L319a14.  if v2 == 0 then goto L319a40;
  #L319a18.  if v1 != 0 then goto L319a20;
  #L319a1c.  v1:= 1I;
  #L319a1e.  goto L3199cc;
  #L319a20.  v1:= `@@kotlinx.coroutines.scheduling.a$d.PARKING` @type ^`kotlinx.coroutines.scheduling.a$d` @kind object;
  #L319a24.  call temp:= `s`(v7, v1) @signature `Lkotlinx/coroutines/scheduling/a$c;.s:(Lkotlinx/coroutines/scheduling/a$d;)Z` @kind virtual;
  #L319a2a.  call temp:= `interrupted`() @signature `Ljava/lang/Thread;.interrupted:()Z` @kind static;
  #L319a30.  v1:= v7.`kotlinx.coroutines.scheduling.a$c.j` @type ^`long` @kind wide;
  #L319a34.  call `parkNanos`(v1) @signature `Ljava/util/concurrent/locks/LockSupport;.parkNanos:(J)V` @kind static;
  #L319a3a.  v7.`kotlinx.coroutines.scheduling.a$c.j` @type ^`long` := v3 @kind wide;
  #L319a3e.  goto L3199ca;
  #L319a40.  call `r`(v7) @signature `Lkotlinx/coroutines/scheduling/a$c;.r:()V` @kind direct;
  #L319a46.  goto L3199cc;
  #L319a48.  v0:= `@@kotlinx.coroutines.scheduling.a$d.TERMINATED` @type ^`kotlinx.coroutines.scheduling.a$d` @kind object;
  #L319a4c.  call temp:= `s`(v7, v0) @signature `Lkotlinx/coroutines/scheduling/a$c;.s:(Lkotlinx/coroutines/scheduling/a$d;)Z` @kind virtual;
  #L319a52.  return @kind void;
}
procedure `boolean` `q`(`kotlinx.coroutines.scheduling.a$c` v10 @kind this) @signature `Lkotlinx/coroutines/scheduling/a$c;.q:()Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L319360.  v0:= v10.`kotlinx.coroutines.scheduling.a$c.h` @type ^`kotlinx.coroutines.scheduling.a$d` @kind object;
  #L319364.  v1:= `@@kotlinx.coroutines.scheduling.a$d.CPU_ACQUIRED` @type ^`kotlinx.coroutines.scheduling.a$d` @kind object;
  #L319368.  v2:= 0I;
  #L31936a.  v3:= 1I;
  #L31936c.  if v0 != v1 then goto L319374;
  #L319370.  v2:= 1I;
  #L319372.  goto L3193c8;
  #L319374.  v0:= v10.`kotlinx.coroutines.scheduling.a$c.m` @type ^`kotlinx.coroutines.scheduling.a` @kind object;
  #L319378.  v6:= v0.`kotlinx.coroutines.scheduling.a.controlState` @type ^`long` @kind wide;
  #L31937c.  v4:= 9223367638808264704L;
  #L319386.  v4:= v4 ^& v6 @kind long;
  #L319388.  v1:= 42I;
  #L31938c.  v4:= v4 ^> v1 @kind long;
  #L31938e.  v1:= (`int`) v4 @kind l2i;
  #L319390.  if v1 != 0 then goto L319398;
  #L319394.  v0:= 0I;
  #L319396.  goto L3193ba;
  #L319398.  v4:= 4398046511104L;
  #L3193a2.  v8:= v6 - v4 @kind long;
  #L3193a6.  v4:= `@@kotlinx.coroutines.scheduling.a.o` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L3193aa.  v5:= v0 @kind object;
  #L3193ac.  call temp:= `compareAndSet`(v4, v5, v6, v8) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.compareAndSet:(Ljava/lang/Object;JJ)Z` @kind virtual;
  #L3193b2.  v1:= temp;
  #L3193b4.  if v1 == 0 then goto L319378;
  #L3193b8.  v0:= 1I;
  #L3193ba.  if v0 == 0 then goto L3193c8;
  #L3193be.  v0:= `@@kotlinx.coroutines.scheduling.a$d.CPU_ACQUIRED` @type ^`kotlinx.coroutines.scheduling.a$d` @kind object;
  #L3193c2.  v10.`kotlinx.coroutines.scheduling.a$c.h` @type ^`kotlinx.coroutines.scheduling.a$d` := v0 @kind object;
  #L3193c6.  goto L319370;
  #L3193c8.  return v2;
}
procedure `void` `r`(`kotlinx.coroutines.scheduling.a$c` v3 @kind this) @signature `Lkotlinx/coroutines/scheduling/a$c;.r:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L319adc.  call temp:= `j`(v3) @signature `Lkotlinx/coroutines/scheduling/a$c;.j:()Z` @kind direct;
  #L319ae2.  v0:= temp;
  #L319ae4.  if v0 != 0 then goto L319af4;
  #L319ae8.  v0:= v3.`kotlinx.coroutines.scheduling.a$c.m` @type ^`kotlinx.coroutines.scheduling.a` @kind object;
  #L319aec.  call temp:= `C`(v0, v3) @signature `Lkotlinx/coroutines/scheduling/a;.C:(Lkotlinx/coroutines/scheduling/a$c;)Z` @kind virtual;
  #L319af2.  return @kind void;
  #L319af4.  call temp:= `a`() @signature `Lkotlinx/coroutines/q0;.a:()Z` @kind static;
  #L319afa.  v0:= temp;
  #L319afc.  if v0 == 0 then goto L319b28;
  #L319b00.  v0:= v3.`kotlinx.coroutines.scheduling.a$c.g` @type ^`kotlinx.coroutines.scheduling.n` @kind object;
  #L319b04.  call temp:= `f`(v0) @signature `Lkotlinx/coroutines/scheduling/n;.f:()I` @kind virtual;
  #L319b0a.  v0:= temp;
  #L319b0c.  if v0 != 0 then goto L319b14;
  #L319b10.  v0:= 1I;
  #L319b12.  goto L319b16;
  #L319b14.  v0:= 0I;
  #L319b16.  if v0 == 0 then goto L319b1c;
  #L319b1a.  goto L319b28;
  #L319b1c.  v0:= new `java.lang.AssertionError`;
  #L319b20.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L319b26.  throw v0;
  #L319b28.  v0:= -1I;
  #L319b2a.  v3.`kotlinx.coroutines.scheduling.a$c.workerCtl` @type ^`int` := v0;
  #L319b2e.  call temp:= `j`(v3) @signature `Lkotlinx/coroutines/scheduling/a$c;.j:()Z` @kind direct;
  #L319b34.  v1:= temp;
  #L319b36.  if v1 == 0 then goto L319b78;
  #L319b3a.  v1:= v3.`kotlinx.coroutines.scheduling.a$c.workerCtl` @type ^`int`;
  #L319b3e.  if v1 != v0 then goto L319b78;
  #L319b42.  v1:= v3.`kotlinx.coroutines.scheduling.a$c.m` @type ^`kotlinx.coroutines.scheduling.a` @kind object;
  #L319b46.  call temp:= `isTerminated`(v1) @signature `Lkotlinx/coroutines/scheduling/a;.isTerminated:()Z` @kind virtual;
  #L319b4c.  v1:= temp;
  #L319b4e.  if v1 != 0 then goto L319b78;
  #L319b52.  v1:= v3.`kotlinx.coroutines.scheduling.a$c.h` @type ^`kotlinx.coroutines.scheduling.a$d` @kind object;
  #L319b56.  v2:= `@@kotlinx.coroutines.scheduling.a$d.TERMINATED` @type ^`kotlinx.coroutines.scheduling.a$d` @kind object;
  #L319b5a.  if v1 != v2 then goto L319b60;
  #L319b5e.  goto L319b78;
  #L319b60.  v1:= `@@kotlinx.coroutines.scheduling.a$d.PARKING` @type ^`kotlinx.coroutines.scheduling.a$d` @kind object;
  #L319b64.  call temp:= `s`(v3, v1) @signature `Lkotlinx/coroutines/scheduling/a$c;.s:(Lkotlinx/coroutines/scheduling/a$d;)Z` @kind virtual;
  #L319b6a.  call temp:= `interrupted`() @signature `Ljava/lang/Thread;.interrupted:()Z` @kind static;
  #L319b70.  call `l`(v3) @signature `Lkotlinx/coroutines/scheduling/a$c;.l:()V` @kind direct;
  #L319b76.  goto L319b2e;
  #L319b78.  return @kind void;
}
procedure `kotlinx.coroutines.scheduling.h` `t`(`kotlinx.coroutines.scheduling.a$c` v19 @kind this, `boolean` v20 ) @signature `Lkotlinx/coroutines/scheduling/a$c;.t:(Z)Lkotlinx/coroutines/scheduling/h;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;

  #L31962c.  v0:= v19 @kind object;
  #L319630.  call temp:= `a`() @signature `Lkotlinx/coroutines/q0;.a:()Z` @kind static;
  #L319636.  v1:= temp;
  #L319638.  v2:= 0I;
  #L31963a.  v3:= 1I;
  #L31963c.  if v1 == 0 then goto L319668;
  #L319640.  v1:= v0.`kotlinx.coroutines.scheduling.a$c.g` @type ^`kotlinx.coroutines.scheduling.n` @kind object;
  #L319644.  call temp:= `f`(v1) @signature `Lkotlinx/coroutines/scheduling/n;.f:()I` @kind virtual;
  #L31964a.  v1:= temp;
  #L31964c.  if v1 != 0 then goto L319654;
  #L319650.  v1:= 1I;
  #L319652.  goto L319656;
  #L319654.  v1:= 0I;
  #L319656.  if v1 == 0 then goto L31965c;
  #L31965a.  goto L319668;
  #L31965c.  v1:= new `java.lang.AssertionError`;
  #L319660.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L319666.  throw v1;
  #L319668.  v1:= v0.`kotlinx.coroutines.scheduling.a$c.m` @type ^`kotlinx.coroutines.scheduling.a` @kind object;
  #L31966c.  v4:= v1.`kotlinx.coroutines.scheduling.a.controlState` @type ^`long` @kind wide;
  #L319670.  v6:= 2097151L;
  #L319676.  v4:= v4 ^& v6 @kind long;
  #L319678.  v1:= (`int`) v4 @kind l2i;
  #L31967a.  v4:= 2I;
  #L31967c.  v5:= 0I;
  #L31967e.  if v1 >= v4 then goto L319684;
  #L319682.  return v5 @kind object;
  #L319684.  call temp:= `k`(v0, v1) @signature `Lkotlinx/coroutines/scheduling/a$c;.k:(I)I` @kind virtual;
  #L31968a.  v4:= temp;
  #L31968c.  v6:= v0.`kotlinx.coroutines.scheduling.a$c.m` @type ^`kotlinx.coroutines.scheduling.a` @kind object;
  #L319690.  v7:= 9223372036854775807L;
  #L31969a.  v10:= v7 @kind wide;
  #L31969c.  v9:= 0I;
  #L31969e.  v12:= 0L;
  #L3196a2.  if v9 >= v1 then goto L319750;
  #L3196a6.  v4:= v4 + v3 @kind int;
  #L3196a8.  if v4 <= v1 then goto L3196ae;
  #L3196ac.  v4:= 1I;
  #L3196ae.  v14:= v6.`kotlinx.coroutines.scheduling.a.m` @type ^`kotlinx.coroutines.internal.c0` @kind object;
  #L3196b2.  call temp:= `b`(v14, v4) @signature `Lkotlinx/coroutines/internal/c0;.b:(I)Ljava/lang/Object;` @kind virtual;
  #L3196b8.  v14:= temp @kind object;
  #L3196ba.  v14:= (`kotlinx.coroutines.scheduling.a$c`) v14 @kind object;
  #L3196be.  if v14 == 0 then goto L31974a;
  #L3196c2.  if v14 == v0 then goto L31974a;
  #L3196c6.  call temp:= `a`() @signature `Lkotlinx/coroutines/q0;.a:()Z` @kind static;
  #L3196cc.  v15:= temp;
  #L3196ce.  if v15 == 0 then goto L3196fa;
  #L3196d2.  v15:= v0.`kotlinx.coroutines.scheduling.a$c.g` @type ^`kotlinx.coroutines.scheduling.n` @kind object;
  #L3196d6.  call temp:= `f`(v15) @signature `Lkotlinx/coroutines/scheduling/n;.f:()I` @kind virtual;
  #L3196dc.  v15:= temp;
  #L3196de.  if v15 != 0 then goto L3196e6;
  #L3196e2.  v15:= 1I;
  #L3196e4.  goto L3196e8;
  #L3196e6.  v15:= 0I;
  #L3196e8.  if v15 == 0 then goto L3196ee;
  #L3196ec.  goto L3196fa;
  #L3196ee.  v1:= new `java.lang.AssertionError`;
  #L3196f2.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L3196f8.  throw v1;
  #L3196fa.  if v20 == 0 then goto L319710;
  #L3196fe.  v15:= v0.`kotlinx.coroutines.scheduling.a$c.g` @type ^`kotlinx.coroutines.scheduling.n` @kind object;
  #L319702.  v14:= v14.`kotlinx.coroutines.scheduling.a$c.g` @type ^`kotlinx.coroutines.scheduling.n` @kind object;
  #L319706.  call temp:= `k`(v15, v14) @signature `Lkotlinx/coroutines/scheduling/n;.k:(Lkotlinx/coroutines/scheduling/n;)J` @kind virtual;
  #L31970c.  v14:= temp @kind wide;
  #L31970e.  goto L319720;
  #L319710.  v15:= v0.`kotlinx.coroutines.scheduling.a$c.g` @type ^`kotlinx.coroutines.scheduling.n` @kind object;
  #L319714.  v14:= v14.`kotlinx.coroutines.scheduling.a$c.g` @type ^`kotlinx.coroutines.scheduling.n` @kind object;
  #L319718.  call temp:= `l`(v15, v14) @signature `Lkotlinx/coroutines/scheduling/n;.l:(Lkotlinx/coroutines/scheduling/n;)J` @kind virtual;
  #L31971e.  v14:= temp @kind wide;
  #L319720.  v16:= -1L;
  #L319724.  v18:= lcmp(v14, v16);
  #L319728.  if v18 != 0 then goto L31973a;
  #L31972c.  v1:= v0.`kotlinx.coroutines.scheduling.a$c.g` @type ^`kotlinx.coroutines.scheduling.n` @kind object;
  #L319730.  call temp:= `h`(v1) @signature `Lkotlinx/coroutines/scheduling/n;.h:()Lkotlinx/coroutines/scheduling/h;` @kind virtual;
  #L319736.  v1:= temp @kind object;
  #L319738.  return v1 @kind object;
  #L31973a.  v16:= lcmp(v14, v12);
  #L31973e.  if v16 <= 0 then goto L31974a;
  #L319742.  call temp:= `min`(v10, v14) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L319748.  v10:= temp @kind wide;
  #L31974a.  v9:= v9 + 1;
  #L31974e.  goto L31969e;
  #L319750.  v1:= lcmp(v10, v7);
  #L319754.  if v1 == 0 then goto L31975a;
  #L319758.  goto L31975c;
  #L31975a.  v10:= v12 @kind wide;
  #L31975c.  v0.`kotlinx.coroutines.scheduling.a$c.j` @type ^`long` := v10 @kind wide;
  #L319760.  return v5 @kind object;
}
procedure `void` `u`(`kotlinx.coroutines.scheduling.a$c` v8 @kind this) @signature `Lkotlinx/coroutines/scheduling/a$c;.u:()V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L319b8c.  v0:= v8.`kotlinx.coroutines.scheduling.a$c.m` @type ^`kotlinx.coroutines.scheduling.a` @kind object;
  #L319b90.  v1:= v0.`kotlinx.coroutines.scheduling.a.m` @type ^`kotlinx.coroutines.internal.c0` @kind object;
  #L319b94.  @monitorenter v1
  #L319b96.  call temp:= `isTerminated`(v0) @signature `Lkotlinx/coroutines/scheduling/a;.isTerminated:()Z` @kind virtual;
  #L319b9c.  v2:= temp;
  #L319b9e.  if v2 == 0 then goto L319ba6;
  #L319ba2.  @monitorexit v1
  #L319ba4.  return @kind void;
  #L319ba6.  v2:= v0.`kotlinx.coroutines.scheduling.a.controlState` @type ^`long` @kind wide;
  #L319baa.  v4:= 2097151L;
  #L319bb0.  v2:= v2 ^& v4 @kind long;
  #L319bb2.  v3:= (`int`) v2 @kind l2i;
  #L319bb4.  v2:= v0.`kotlinx.coroutines.scheduling.a.g` @type ^`int`;
  #L319bb8.  if v3 > v2 then goto L319bc0;
  #L319bbc.  @monitorexit v1
  #L319bbe.  return @kind void;
  #L319bc0.  v2:= `@@kotlinx.coroutines.scheduling.a$c.n` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L319bc4.  v3:= -1I;
  #L319bc6.  v6:= 1I;
  #L319bc8.  call temp:= `compareAndSet`(v2, v8, v3, v6) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L319bce.  v2:= temp;
  #L319bd0.  if v2 != 0 then goto L319bd8;
  #L319bd4.  @monitorexit v1
  #L319bd6.  return @kind void;
  #L319bd8.  v2:= v8.`kotlinx.coroutines.scheduling.a$c.indexInArray` @type ^`int`;
  #L319bdc.  v3:= 0I;
  #L319bde.  call `o`(v8, v3) @signature `Lkotlinx/coroutines/scheduling/a$c;.o:(I)V` @kind virtual;
  #L319be4.  call `J`(v0, v8, v2, v3) @signature `Lkotlinx/coroutines/scheduling/a;.J:(Lkotlinx/coroutines/scheduling/a$c;II)V` @kind virtual;
  #L319bea.  v3:= `@@kotlinx.coroutines.scheduling.a.o` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L319bee.  call temp:= `getAndDecrement`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.getAndDecrement:(Ljava/lang/Object;)J` @kind virtual;
  #L319bf4.  v6:= temp @kind wide;
  #L319bf6.  v3:= v6 ^& v4 @kind long;
  #L319bfa.  v4:= (`int`) v3 @kind l2i;
  #L319bfc.  if v4 == v2 then goto L319c2c;
  #L319c00.  v3:= v0.`kotlinx.coroutines.scheduling.a.m` @type ^`kotlinx.coroutines.internal.c0` @kind object;
  #L319c04.  call temp:= `b`(v3, v4) @signature `Lkotlinx/coroutines/internal/c0;.b:(I)Ljava/lang/Object;` @kind virtual;
  #L319c0a.  v3:= temp @kind object;
  #L319c0c.  call `c`(v3) @signature `Lkotlin/jvm/internal/k;.c:(Ljava/lang/Object;)V` @kind static;
  #L319c12.  v3:= (`kotlinx.coroutines.scheduling.a$c`) v3 @kind object;
  #L319c16.  v5:= v0.`kotlinx.coroutines.scheduling.a.m` @type ^`kotlinx.coroutines.internal.c0` @kind object;
  #L319c1a.  call `c`(v5, v2, v3) @signature `Lkotlinx/coroutines/internal/c0;.c:(ILjava/lang/Object;)V` @kind virtual;
  #L319c20.  call `o`(v3, v2) @signature `Lkotlinx/coroutines/scheduling/a$c;.o:(I)V` @kind virtual;
  #L319c26.  call `J`(v0, v3, v4, v2) @signature `Lkotlinx/coroutines/scheduling/a;.J:(Lkotlinx/coroutines/scheduling/a$c;II)V` @kind virtual;
  #L319c2c.  v0:= v0.`kotlinx.coroutines.scheduling.a.m` @type ^`kotlinx.coroutines.internal.c0` @kind object;
  #L319c30.  v2:= 0I;
  #L319c32.  call `c`(v0, v4, v2) @signature `Lkotlinx/coroutines/internal/c0;.c:(ILjava/lang/Object;)V` @kind virtual;
  #L319c38.  v0:= `@@od.t.a` @type ^`od.t` @kind object;
  #L319c3c.  @monitorexit v1
  #L319c3e.  v0:= `@@kotlinx.coroutines.scheduling.a$d.TERMINATED` @type ^`kotlinx.coroutines.scheduling.a$d` @kind object;
  #L319c42.  v8.`kotlinx.coroutines.scheduling.a$c.h` @type ^`kotlinx.coroutines.scheduling.a$d` := v0 @kind object;
  #L319c46.  return @kind void;
  #L319c48.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L319c4a.  @monitorexit v1
  #L319c4c.  throw v0;
  catch `java.lang.Throwable` @[L319b96..L319b9e] goto L319c48;
  catch `java.lang.Throwable` @[L319ba6..L319bb8] goto L319c48;
  catch `java.lang.Throwable` @[L319bc0..L319bd0] goto L319c48;
  catch `java.lang.Throwable` @[L319bd8..L319c3c] goto L319c48;
}
procedure `kotlinx.coroutines.scheduling.h` `f`(`kotlinx.coroutines.scheduling.a$c` v1 @kind this, `boolean` v2 ) @signature `Lkotlinx/coroutines/scheduling/a$c;.f:(Z)Lkotlinx/coroutines/scheduling/h;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L319538.  call temp:= `q`(v1) @signature `Lkotlinx/coroutines/scheduling/a$c;.q:()Z` @kind direct;
  #L31953e.  v0:= temp;
  #L319540.  if v0 == 0 then goto L31954e;
  #L319544.  call temp:= `e`(v1, v2) @signature `Lkotlinx/coroutines/scheduling/a$c;.e:(Z)Lkotlinx/coroutines/scheduling/h;` @kind direct;
  #L31954a.  v2:= temp @kind object;
  #L31954c.  return v2 @kind object;
  #L31954e.  if v2 == 0 then goto L319578;
  #L319552.  v2:= v1.`kotlinx.coroutines.scheduling.a$c.g` @type ^`kotlinx.coroutines.scheduling.n` @kind object;
  #L319556.  call temp:= `h`(v2) @signature `Lkotlinx/coroutines/scheduling/n;.h:()Lkotlinx/coroutines/scheduling/h;` @kind virtual;
  #L31955c.  v2:= temp @kind object;
  #L31955e.  if v2 != 0 then goto L31958c;
  #L319562.  v2:= v1.`kotlinx.coroutines.scheduling.a$c.m` @type ^`kotlinx.coroutines.scheduling.a` @kind object;
  #L319566.  v2:= v2.`kotlinx.coroutines.scheduling.a.l` @type ^`kotlinx.coroutines.scheduling.d` @kind object;
  #L31956a.  call temp:= `d`(v2) @signature `Lkotlinx/coroutines/internal/s;.d:()Ljava/lang/Object;` @kind virtual;
  #L319570.  v2:= temp @kind object;
  #L319572.  v2:= (`kotlinx.coroutines.scheduling.h`) v2 @kind object;
  #L319576.  goto L31958c;
  #L319578.  v2:= v1.`kotlinx.coroutines.scheduling.a$c.m` @type ^`kotlinx.coroutines.scheduling.a` @kind object;
  #L31957c.  v2:= v2.`kotlinx.coroutines.scheduling.a.l` @type ^`kotlinx.coroutines.scheduling.d` @kind object;
  #L319580.  call temp:= `d`(v2) @signature `Lkotlinx/coroutines/internal/s;.d:()Ljava/lang/Object;` @kind virtual;
  #L319586.  v2:= temp @kind object;
  #L319588.  v2:= (`kotlinx.coroutines.scheduling.h`) v2 @kind object;
  #L31958c.  if v2 != 0 then goto L31959a;
  #L319590.  v2:= 1I;
  #L319592.  call temp:= `t`(v1, v2) @signature `Lkotlinx/coroutines/scheduling/a$c;.t:(Z)Lkotlinx/coroutines/scheduling/h;` @kind direct;
  #L319598.  v2:= temp @kind object;
  #L31959a.  return v2 @kind object;
}
procedure `int` `g`(`kotlinx.coroutines.scheduling.a$c` v1 @kind this) @signature `Lkotlinx/coroutines/scheduling/a$c;.g:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L319424.  v0:= v1.`kotlinx.coroutines.scheduling.a$c.indexInArray` @type ^`int`;
  #L319428.  return v0;
}
procedure `java.lang.Object` `h`(`kotlinx.coroutines.scheduling.a$c` v1 @kind this) @signature `Lkotlinx/coroutines/scheduling/a$c;.h:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L319484.  v0:= v1.`kotlinx.coroutines.scheduling.a$c.nextParkedWorker` @type ^`java.lang.Object` @kind object;
  #L319488.  return v0 @kind object;
}
procedure `int` `k`(`kotlinx.coroutines.scheduling.a$c` v3 @kind this, `int` v4 ) @signature `Lkotlinx/coroutines/scheduling/a$c;.k:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L31943c.  v0:= v3.`kotlinx.coroutines.scheduling.a$c.k` @type ^`int`;
  #L319440.  v1:= v0 ^< 13;
  #L319444.  v0:= v0 ^~ v1 @kind int;
  #L319446.  v1:= v0 ^> 17;
  #L31944a.  v0:= v0 ^~ v1 @kind int;
  #L31944c.  v1:= v0 ^< 5;
  #L319450.  v0:= v0 ^~ v1 @kind int;
  #L319452.  v3.`kotlinx.coroutines.scheduling.a$c.k` @type ^`int` := v0;
  #L319456.  v1:= v4 + -1;
  #L31945a.  v2:= v1 ^& v4 @kind int;
  #L31945e.  if v2 != 0 then goto L319468;
  #L319462.  v4:= v0 ^& v1 @kind int;
  #L319466.  return v4;
  #L319468.  v1:= 2147483647I;
  #L31946e.  v0:= v0 ^& v1 @kind int;
  #L319470.  v0:= v0 %% v4 @kind int;
  #L319472.  return v0;
}
procedure `void` `o`(`kotlinx.coroutines.scheduling.a$c` v2 @kind this, `int` v3 ) @signature `Lkotlinx/coroutines/scheduling/a$c;.o:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L319a64.  v0:= new `java.lang.StringBuilder`;
  #L319a68.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L319a6e.  v1:= v2.`kotlinx.coroutines.scheduling.a$c.m` @type ^`kotlinx.coroutines.scheduling.a` @kind object;
  #L319a72.  v1:= v1.`kotlinx.coroutines.scheduling.a.j` @type ^`java.lang.String` @kind object;
  #L319a76.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L319a7c.  v1:= "-worker-" @kind object;
  #L319a80.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L319a86.  if v3 != 0 then goto L319a90;
  #L319a8a.  v1:= "TERMINATED" @kind object;
  #L319a8e.  goto L319a98;
  #L319a90.  call temp:= `valueOf`(v3) @signature `Ljava/lang/String;.valueOf:(I)Ljava/lang/String;` @kind static;
  #L319a96.  v1:= temp @kind object;
  #L319a98.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L319a9e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L319aa4.  v0:= temp @kind object;
  #L319aa6.  call `setName`(v2, v0) @signature `Ljava/lang/Thread;.setName:(Ljava/lang/String;)V` @kind virtual;
  #L319aac.  v2.`kotlinx.coroutines.scheduling.a$c.indexInArray` @type ^`int` := v3;
  #L319ab0.  return @kind void;
}
procedure `void` `p`(`kotlinx.coroutines.scheduling.a$c` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlinx/coroutines/scheduling/a$c;.p:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L319ac4.  v0.`kotlinx.coroutines.scheduling.a$c.nextParkedWorker` @type ^`java.lang.Object` := v1 @kind object;
  #L319ac8.  return @kind void;
}
procedure `void` `run`(`kotlinx.coroutines.scheduling.a$c` v0 @kind this) @signature `Lkotlinx/coroutines/scheduling/a$c;.run:()V` @AccessFlag PUBLIC {
    temp;

  #L3199b0.  call `n`(v0) @signature `Lkotlinx/coroutines/scheduling/a$c;.n:()V` @kind direct;
  #L3199b6.  return @kind void;
}
procedure `boolean` `s`(`kotlinx.coroutines.scheduling.a$c` v6 @kind this, `kotlinx.coroutines.scheduling.a$d` v7 @kind object) @signature `Lkotlinx/coroutines/scheduling/a$c;.s:(Lkotlinx/coroutines/scheduling/a$d;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3193dc.  v0:= v6.`kotlinx.coroutines.scheduling.a$c.h` @type ^`kotlinx.coroutines.scheduling.a$d` @kind object;
  #L3193e0.  v1:= `@@kotlinx.coroutines.scheduling.a$d.CPU_ACQUIRED` @type ^`kotlinx.coroutines.scheduling.a$d` @kind object;
  #L3193e4.  if v0 != v1 then goto L3193ec;
  #L3193e8.  v1:= 1I;
  #L3193ea.  goto L3193ee;
  #L3193ec.  v1:= 0I;
  #L3193ee.  if v1 == 0 then goto L31940a;
  #L3193f2.  v2:= v6.`kotlinx.coroutines.scheduling.a$c.m` @type ^`kotlinx.coroutines.scheduling.a` @kind object;
  #L3193f6.  v3:= `@@kotlinx.coroutines.scheduling.a.o` @type ^`java.util.concurrent.atomic.AtomicLongFieldUpdater` @kind object;
  #L3193fa.  v4:= 4398046511104L;
  #L319404.  call temp:= `addAndGet`(v3, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;.addAndGet:(Ljava/lang/Object;J)J` @kind virtual;
  #L31940a.  if v0 == v7 then goto L319412;
  #L31940e.  v6.`kotlinx.coroutines.scheduling.a$c.h` @type ^`kotlinx.coroutines.scheduling.a$d` := v7 @kind object;
  #L319412.  return v1;
}
