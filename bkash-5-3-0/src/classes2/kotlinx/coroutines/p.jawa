record `kotlinx.coroutines.p` @kind class @AccessFlag PUBLIC_FINAL extends `kotlinx.coroutines.w` @kind class {
  `int` `kotlinx.coroutines.p._resumed` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicIntegerFieldUpdater` `@@kotlinx.coroutines.p.c` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/p;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L30d2ec.  v0:= constclass @type ^`kotlinx.coroutines.p` @kind object;
  #L30d2f0.  v1:= "_resumed" @kind object;
  #L30d2f4.  call temp:= `newUpdater`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;` @kind static;
  #L30d2fa.  v0:= temp @kind object;
  #L30d2fc.  `@@kotlinx.coroutines.p.c` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` := v0 @kind object;
  #L30d300.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.p` v2 @kind this, `kotlin.coroutines.d` v3 @kind object, `java.lang.Throwable` v4 @kind object, `boolean` v5 ) @signature `Lkotlinx/coroutines/p;.<init>:(Lkotlin/coroutines/d;Ljava/lang/Throwable;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L30d314.  if v4 != 0 then goto L30d34e;
  #L30d318.  v4:= new `java.util.concurrent.CancellationException`;
  #L30d31c.  v0:= new `java.lang.StringBuilder`;
  #L30d320.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30d326.  v1:= "Continuation " @kind object;
  #L30d32a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30d330.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30d336.  v3:= " was cancelled normally" @kind object;
  #L30d33a.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30d340.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30d346.  v3:= temp @kind object;
  #L30d348.  call `<init>`(v4, v3) @signature `Ljava/util/concurrent/CancellationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30d34e.  call `<init>`(v2, v4, v5) @signature `Lkotlinx/coroutines/w;.<init>:(Ljava/lang/Throwable;Z)V` @kind direct;
  #L30d354.  v3:= 0I;
  #L30d356.  v2.`kotlinx.coroutines.p._resumed` @type ^`int` := v3;
  #L30d35a.  return @kind void;
}
procedure `boolean` `c`(`kotlinx.coroutines.p` v3 @kind this) @signature `Lkotlinx/coroutines/p;.c:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L30d2c8.  v0:= `@@kotlinx.coroutines.p.c` @type ^`java.util.concurrent.atomic.AtomicIntegerFieldUpdater` @kind object;
  #L30d2cc.  v1:= 0I;
  #L30d2ce.  v2:= 1I;
  #L30d2d0.  call temp:= `compareAndSet`(v0, v3, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;.compareAndSet:(Ljava/lang/Object;II)Z` @kind virtual;
  #L30d2d6.  v0:= temp;
  #L30d2d8.  return v0;
}
