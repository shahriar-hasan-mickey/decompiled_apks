record `kotlinx.coroutines.internal.c0` @kind class @AccessFlag PUBLIC_FINAL {
  `java.util.concurrent.atomic.AtomicReferenceArray` `kotlinx.coroutines.internal.c0.array` @AccessFlag PRIVATE_VOLATILE;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.c0` v1 @kind this, `int` v2 ) @signature `Lkotlinx/coroutines/internal/c0;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L317cf0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L317cf6.  v0:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L317cfa.  call `<init>`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L317d00.  v1.`kotlinx.coroutines.internal.c0.array` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v0 @kind object;
  #L317d04.  return @kind void;
}
procedure `int` `a`(`kotlinx.coroutines.internal.c0` v1 @kind this) @signature `Lkotlinx/coroutines/internal/c0;.a:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L317ca0.  v0:= v1.`kotlinx.coroutines.internal.c0.array` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L317ca4.  call temp:= `length`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L317caa.  v0:= temp;
  #L317cac.  return v0;
}
procedure `java.lang.Object` `b`(`kotlinx.coroutines.internal.c0` v2 @kind this, `int` v3 ) @signature `Lkotlinx/coroutines/internal/c0;.b:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L317cc0.  v0:= v2.`kotlinx.coroutines.internal.c0.array` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L317cc4.  call temp:= `length`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L317cca.  v1:= temp;
  #L317ccc.  if v3 >= v1 then goto L317cda;
  #L317cd0.  call temp:= `get`(v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L317cd6.  v3:= temp @kind object;
  #L317cd8.  goto L317cdc;
  #L317cda.  v3:= 0I;
  #L317cdc.  return v3 @kind object;
}
procedure `void` `c`(`kotlinx.coroutines.internal.c0` v5 @kind this, `int` v6 , `java.lang.Object` v7 @kind object) @signature `Lkotlinx/coroutines/internal/c0;.c:(ILjava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L317d18.  v0:= v5.`kotlinx.coroutines.internal.c0.array` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L317d1c.  call temp:= `length`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L317d22.  v1:= temp;
  #L317d24.  if v6 >= v1 then goto L317d30;
  #L317d28.  call `set`(v0, v6, v7) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L317d2e.  goto L317d6e;
  #L317d30.  v2:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L317d34.  v3:= v6 + 1;
  #L317d38.  v4:= v1 * 2;
  #L317d3c.  call temp:= `a`(v3, v4) @signature `Lkotlin/ranges/l;.a:(II)I` @kind static;
  #L317d42.  v3:= temp;
  #L317d44.  call `<init>`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L317d4a.  v3:= 0I;
  #L317d4c.  if v3 >= v1 then goto L317d64;
  #L317d50.  call temp:= `get`(v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L317d56.  v4:= temp @kind object;
  #L317d58.  call `set`(v2, v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L317d5e.  v3:= v3 + 1;
  #L317d62.  goto L317d4c;
  #L317d64.  call `set`(v2, v6, v7) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L317d6a.  v5.`kotlinx.coroutines.internal.c0.array` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v2 @kind object;
  #L317d6e.  return @kind void;
}
