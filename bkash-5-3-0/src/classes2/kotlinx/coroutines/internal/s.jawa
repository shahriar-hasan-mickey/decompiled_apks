record `kotlinx.coroutines.internal.s` @kind class @AccessFlag PUBLIC {
  `java.lang.Object` `kotlinx.coroutines.internal.s._cur` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.internal.s.a` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/internal/s;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L317558.  v0:= constclass @type ^`kotlinx.coroutines.internal.s` @kind object;
  #L31755c.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L317560.  v2:= "_cur" @kind object;
  #L317564.  call temp:= `newUpdater`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L31756a.  v0:= temp @kind object;
  #L31756c.  `@@kotlinx.coroutines.internal.s.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v0 @kind object;
  #L317570.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.s` v2 @kind this, `boolean` v3 ) @signature `Lkotlinx/coroutines/internal/s;.<init>:(Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L317584.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L31758a.  v0:= new `kotlinx.coroutines.internal.t`;
  #L31758e.  v1:= 8I;
  #L317592.  call `<init>`(v0, v1, v3) @signature `Lkotlinx/coroutines/internal/t;.<init>:(IZ)V` @kind direct;
  #L317598.  v2.`kotlinx.coroutines.internal.s._cur` @type ^`java.lang.Object` := v0 @kind object;
  #L31759c.  return @kind void;
}
procedure `boolean` `a`(`kotlinx.coroutines.internal.s` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlinx/coroutines/internal/s;.a:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3174a8.  v0:= v3.`kotlinx.coroutines.internal.s._cur` @type ^`java.lang.Object` @kind object;
  #L3174ac.  v0:= (`kotlinx.coroutines.internal.t`) v0 @kind object;
  #L3174b0.  call temp:= `a`(v0, v4) @signature `Lkotlinx/coroutines/internal/t;.a:(Ljava/lang/Object;)I` @kind virtual;
  #L3174b6.  v1:= temp;
  #L3174b8.  v2:= 1I;
  #L3174ba.  if v1 == 0 then goto L3174e2;
  #L3174be.  if v1 == v2 then goto L3174ce;
  #L3174c2.  v0:= 2I;
  #L3174c4.  if v1 == v0 then goto L3174ca;
  #L3174c8.  goto L3174a8;
  #L3174ca.  v4:= 0I;
  #L3174cc.  return v4;
  #L3174ce.  v1:= `@@kotlinx.coroutines.internal.s.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L3174d2.  call temp:= `i`(v0) @signature `Lkotlinx/coroutines/internal/t;.i:()Lkotlinx/coroutines/internal/t;` @kind virtual;
  #L3174d8.  v2:= temp @kind object;
  #L3174da.  call temp:= `compareAndSet`(v1, v3, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3174e0.  goto L3174a8;
  #L3174e2.  return v2;
}
procedure `void` `b`(`kotlinx.coroutines.internal.s` v3 @kind this) @signature `Lkotlinx/coroutines/internal/s;.b:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3175b0.  v0:= v3.`kotlinx.coroutines.internal.s._cur` @type ^`java.lang.Object` @kind object;
  #L3175b4.  v0:= (`kotlinx.coroutines.internal.t`) v0 @kind object;
  #L3175b8.  call temp:= `d`(v0) @signature `Lkotlinx/coroutines/internal/t;.d:()Z` @kind virtual;
  #L3175be.  v1:= temp;
  #L3175c0.  if v1 == 0 then goto L3175c6;
  #L3175c4.  return @kind void;
  #L3175c6.  v1:= `@@kotlinx.coroutines.internal.s.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L3175ca.  call temp:= `i`(v0) @signature `Lkotlinx/coroutines/internal/t;.i:()Lkotlinx/coroutines/internal/t;` @kind virtual;
  #L3175d0.  v2:= temp @kind object;
  #L3175d2.  call temp:= `compareAndSet`(v1, v3, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3175d8.  goto L3175b0;
}
procedure `int` `c`(`kotlinx.coroutines.internal.s` v1 @kind this) @signature `Lkotlinx/coroutines/internal/s;.c:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3174f4.  v0:= v1.`kotlinx.coroutines.internal.s._cur` @type ^`java.lang.Object` @kind object;
  #L3174f8.  v0:= (`kotlinx.coroutines.internal.t`) v0 @kind object;
  #L3174fc.  call temp:= `f`(v0) @signature `Lkotlinx/coroutines/internal/t;.f:()I` @kind virtual;
  #L317502.  v0:= temp;
  #L317504.  return v0;
}
procedure `java.lang.Object` `d`(`kotlinx.coroutines.internal.s` v3 @kind this) @signature `Lkotlinx/coroutines/internal/s;.d:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L317518.  v0:= v3.`kotlinx.coroutines.internal.s._cur` @type ^`java.lang.Object` @kind object;
  #L31751c.  v0:= (`kotlinx.coroutines.internal.t`) v0 @kind object;
  #L317520.  call temp:= `j`(v0) @signature `Lkotlinx/coroutines/internal/t;.j:()Ljava/lang/Object;` @kind virtual;
  #L317526.  v1:= temp @kind object;
  #L317528.  v2:= `@@kotlinx.coroutines.internal.t.h` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L31752c.  if v1 == v2 then goto L317532;
  #L317530.  return v1 @kind object;
  #L317532.  v1:= `@@kotlinx.coroutines.internal.s.a` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L317536.  call temp:= `i`(v0) @signature `Lkotlinx/coroutines/internal/t;.i:()Lkotlinx/coroutines/internal/t;` @kind virtual;
  #L31753c.  v2:= temp @kind object;
  #L31753e.  call temp:= `compareAndSet`(v1, v3, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L317544.  goto L317518;
}
