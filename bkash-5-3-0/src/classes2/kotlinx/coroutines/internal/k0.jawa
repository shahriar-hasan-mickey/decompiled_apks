record `kotlinx.coroutines.internal.k0` @kind class @AccessFlag PUBLIC {
  `int` `kotlinx.coroutines.internal.k0._size` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
  `kotlinx.coroutines.internal.l0`[] `kotlinx.coroutines.internal.k0.a` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.k0` v1 @kind this) @signature `Lkotlinx/coroutines/internal/k0;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L318d50.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L318d56.  v0:= 0I;
  #L318d58.  v1.`kotlinx.coroutines.internal.k0._size` @type ^`int` := v0;
  #L318d5c.  return @kind void;
}
procedure `kotlinx.coroutines.internal.l0`[] `f`(`kotlinx.coroutines.internal.k0` v3 @kind this) @signature `Lkotlinx/coroutines/internal/k0;.f:()[Lkotlinx/coroutines/internal/l0;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L318cf4.  v0:= v3.`kotlinx.coroutines.internal.k0.a` @type ^`kotlinx.coroutines.internal.l0`[] @kind object;
  #L318cf8.  if v0 != 0 then goto L318d08;
  #L318cfc.  v0:= 4I;
  #L318cfe.  v0:= new `kotlinx.coroutines.internal.l0`[v0];
  #L318d02.  v3.`kotlinx.coroutines.internal.k0.a` @type ^`kotlinx.coroutines.internal.l0`[] := v0 @kind object;
  #L318d06.  goto L318d3c;
  #L318d08.  call temp:= `c`(v3) @signature `Lkotlinx/coroutines/internal/k0;.c:()I` @kind virtual;
  #L318d0e.  v1:= temp;
  #L318d10.  v2:= length @variable v0;
  #L318d12.  if v1 < v2 then goto L318d3c;
  #L318d16.  call temp:= `c`(v3) @signature `Lkotlinx/coroutines/internal/k0;.c:()I` @kind virtual;
  #L318d1c.  v1:= temp;
  #L318d1e.  v1:= v1 * 2;
  #L318d22.  call temp:= `copyOf`(v0, v1) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L318d28.  v0:= temp @kind object;
  #L318d2a.  v1:= "copyOf(this, newSize)" @kind object;
  #L318d2e.  call `e`(v0, v1) @signature `Lkotlin/jvm/internal/k;.e:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L318d34.  v0:= (`kotlinx.coroutines.internal.l0`[]) v0 @kind object;
  #L318d38.  v3.`kotlinx.coroutines.internal.k0.a` @type ^`kotlinx.coroutines.internal.l0`[] := v0 @kind object;
  #L318d3c.  return v0 @kind object;
}
procedure `void` `j`(`kotlinx.coroutines.internal.k0` v0 @kind this, `int` v1 ) @signature `Lkotlinx/coroutines/internal/k0;.j:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;

  #L318de4.  v0.`kotlinx.coroutines.internal.k0._size` @type ^`int` := v1;
  #L318de8.  return @kind void;
}
procedure `void` `k`(`kotlinx.coroutines.internal.k0` v5 @kind this, `int` v6 ) @signature `Lkotlinx/coroutines/internal/k0;.k:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L318dfc.  v0:= v6 * 2;
  #L318e00.  v0:= v0 + 1;
  #L318e04.  call temp:= `c`(v5) @signature `Lkotlinx/coroutines/internal/k0;.c:()I` @kind virtual;
  #L318e0a.  v1:= temp;
  #L318e0c.  if v0 < v1 then goto L318e12;
  #L318e10.  return @kind void;
  #L318e12.  v1:= v5.`kotlinx.coroutines.internal.k0.a` @type ^`kotlinx.coroutines.internal.l0`[] @kind object;
  #L318e16.  call `c`(v1) @signature `Lkotlin/jvm/internal/k;.c:(Ljava/lang/Object;)V` @kind static;
  #L318e1c.  v2:= v0 + 1;
  #L318e20.  call temp:= `c`(v5) @signature `Lkotlinx/coroutines/internal/k0;.c:()I` @kind virtual;
  #L318e26.  v3:= temp;
  #L318e28.  if v2 >= v3 then goto L318e52;
  #L318e2c.  v3:= v1[v2] @kind object;
  #L318e30.  call `c`(v3) @signature `Lkotlin/jvm/internal/k;.c:(Ljava/lang/Object;)V` @kind static;
  #L318e36.  v3:= (`java.lang.Comparable`) v3 @kind object;
  #L318e3a.  v4:= v1[v0] @kind object;
  #L318e3e.  call `c`(v4) @signature `Lkotlin/jvm/internal/k;.c:(Ljava/lang/Object;)V` @kind static;
  #L318e44.  call temp:= `compareTo`(v3, v4) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L318e4a.  v3:= temp;
  #L318e4c.  if v3 >= 0 then goto L318e52;
  #L318e50.  v0:= v2;
  #L318e52.  v2:= v1[v6] @kind object;
  #L318e56.  call `c`(v2) @signature `Lkotlin/jvm/internal/k;.c:(Ljava/lang/Object;)V` @kind static;
  #L318e5c.  v2:= (`java.lang.Comparable`) v2 @kind object;
  #L318e60.  v1:= v1[v0] @kind object;
  #L318e64.  call `c`(v1) @signature `Lkotlin/jvm/internal/k;.c:(Ljava/lang/Object;)V` @kind static;
  #L318e6a.  call temp:= `compareTo`(v2, v1) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L318e70.  v1:= temp;
  #L318e72.  if v1 > 0 then goto L318e78;
  #L318e76.  return @kind void;
  #L318e78.  call `m`(v5, v6, v0) @signature `Lkotlinx/coroutines/internal/k0;.m:(II)V` @kind direct;
  #L318e7e.  v6:= v0;
  #L318e80.  goto L318dfc;
}
procedure `void` `l`(`kotlinx.coroutines.internal.k0` v3 @kind this, `int` v4 ) @signature `Lkotlinx/coroutines/internal/k0;.l:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L318e94.  if v4 > 0 then goto L318e9a;
  #L318e98.  return @kind void;
  #L318e9a.  v0:= v3.`kotlinx.coroutines.internal.k0.a` @type ^`kotlinx.coroutines.internal.l0`[] @kind object;
  #L318e9e.  call `c`(v0) @signature `Lkotlin/jvm/internal/k;.c:(Ljava/lang/Object;)V` @kind static;
  #L318ea4.  v1:= v4 + -1;
  #L318ea8.  v1:= v1 / 2;
  #L318eac.  v2:= v0[v1] @kind object;
  #L318eb0.  call `c`(v2) @signature `Lkotlin/jvm/internal/k;.c:(Ljava/lang/Object;)V` @kind static;
  #L318eb6.  v2:= (`java.lang.Comparable`) v2 @kind object;
  #L318eba.  v0:= v0[v4] @kind object;
  #L318ebe.  call `c`(v0) @signature `Lkotlin/jvm/internal/k;.c:(Ljava/lang/Object;)V` @kind static;
  #L318ec4.  call temp:= `compareTo`(v2, v0) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L318eca.  v0:= temp;
  #L318ecc.  if v0 > 0 then goto L318ed2;
  #L318ed0.  return @kind void;
  #L318ed2.  call `m`(v3, v4, v1) @signature `Lkotlinx/coroutines/internal/k0;.m:(II)V` @kind direct;
  #L318ed8.  v4:= v1;
  #L318eda.  goto L318e94;
}
procedure `void` `m`(`kotlinx.coroutines.internal.k0` v3 @kind this, `int` v4 , `int` v5 ) @signature `Lkotlinx/coroutines/internal/k0;.m:(II)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L318eec.  v0:= v3.`kotlinx.coroutines.internal.k0.a` @type ^`kotlinx.coroutines.internal.l0`[] @kind object;
  #L318ef0.  call `c`(v0) @signature `Lkotlin/jvm/internal/k;.c:(Ljava/lang/Object;)V` @kind static;
  #L318ef6.  v1:= v0[v5] @kind object;
  #L318efa.  call `c`(v1) @signature `Lkotlin/jvm/internal/k;.c:(Ljava/lang/Object;)V` @kind static;
  #L318f00.  v2:= v0[v4] @kind object;
  #L318f04.  call `c`(v2) @signature `Lkotlin/jvm/internal/k;.c:(Ljava/lang/Object;)V` @kind static;
  #L318f0a.  v0[v4]:= v1 @kind object;
  #L318f0e.  v0[v5]:= v2 @kind object;
  #L318f12.  call `d`(v1, v4) @signature `Lkotlinx/coroutines/internal/l0;.d:(I)V` @kind interface;
  #L318f18.  call `d`(v2, v5) @signature `Lkotlinx/coroutines/internal/l0;.d:(I)V` @kind interface;
  #L318f1e.  return @kind void;
}
procedure `void` `a`(`kotlinx.coroutines.internal.k0` v3 @kind this, `kotlinx.coroutines.internal.l0` v4 @kind object) @signature `Lkotlinx/coroutines/internal/k0;.a:(Lkotlinx/coroutines/internal/l0;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L318d70.  call temp:= `a`() @signature `Lkotlinx/coroutines/q0;.a:()Z` @kind static;
  #L318d76.  v0:= temp;
  #L318d78.  if v0 == 0 then goto L318da0;
  #L318d7c.  call temp:= `c`(v4) @signature `Lkotlinx/coroutines/internal/l0;.c:()Lkotlinx/coroutines/internal/k0;` @kind interface;
  #L318d82.  v0:= temp @kind object;
  #L318d84.  if v0 != 0 then goto L318d8c;
  #L318d88.  v0:= 1I;
  #L318d8a.  goto L318d8e;
  #L318d8c.  v0:= 0I;
  #L318d8e.  if v0 == 0 then goto L318d94;
  #L318d92.  goto L318da0;
  #L318d94.  v4:= new `java.lang.AssertionError`;
  #L318d98.  call `<init>`(v4) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L318d9e.  throw v4;
  #L318da0.  call `a`(v4, v3) @signature `Lkotlinx/coroutines/internal/l0;.a:(Lkotlinx/coroutines/internal/k0;)V` @kind interface;
  #L318da6.  call temp:= `f`(v3) @signature `Lkotlinx/coroutines/internal/k0;.f:()[Lkotlinx/coroutines/internal/l0;` @kind direct;
  #L318dac.  v0:= temp @kind object;
  #L318dae.  call temp:= `c`(v3) @signature `Lkotlinx/coroutines/internal/k0;.c:()I` @kind virtual;
  #L318db4.  v1:= temp;
  #L318db6.  v2:= v1 + 1;
  #L318dba.  call `j`(v3, v2) @signature `Lkotlinx/coroutines/internal/k0;.j:(I)V` @kind direct;
  #L318dc0.  v0[v1]:= v4 @kind object;
  #L318dc4.  call `d`(v4, v1) @signature `Lkotlinx/coroutines/internal/l0;.d:(I)V` @kind interface;
  #L318dca.  call `l`(v3, v1) @signature `Lkotlinx/coroutines/internal/k0;.l:(I)V` @kind direct;
  #L318dd0.  return @kind void;
}
procedure `kotlinx.coroutines.internal.l0` `b`(`kotlinx.coroutines.internal.k0` v2 @kind this) @signature `Lkotlinx/coroutines/internal/k0;.b:()Lkotlinx/coroutines/internal/l0;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L318b44.  v0:= v2.`kotlinx.coroutines.internal.k0.a` @type ^`kotlinx.coroutines.internal.l0`[] @kind object;
  #L318b48.  if v0 == 0 then goto L318b54;
  #L318b4c.  v1:= 0I;
  #L318b4e.  v0:= v0[v1] @kind object;
  #L318b52.  goto L318b56;
  #L318b54.  v0:= 0I;
  #L318b56.  return v0 @kind object;
}
procedure `int` `c`(`kotlinx.coroutines.internal.k0` v1 @kind this) @signature `Lkotlinx/coroutines/internal/k0;.c:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L318b2c.  v0:= v1.`kotlinx.coroutines.internal.k0._size` @type ^`int`;
  #L318b30.  return v0;
}
procedure `boolean` `d`(`kotlinx.coroutines.internal.k0` v1 @kind this) @signature `Lkotlinx/coroutines/internal/k0;.d:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L318a98.  call temp:= `c`(v1) @signature `Lkotlinx/coroutines/internal/k0;.c:()I` @kind virtual;
  #L318a9e.  v0:= temp;
  #L318aa0.  if v0 != 0 then goto L318aa8;
  #L318aa4.  v0:= 1I;
  #L318aa6.  goto L318aaa;
  #L318aa8.  v0:= 0I;
  #L318aaa.  return v0;
}
procedure `kotlinx.coroutines.internal.l0` `e`(`kotlinx.coroutines.internal.k0` v1 @kind this) @signature `Lkotlinx/coroutines/internal/k0;.e:()Lkotlinx/coroutines/internal/l0;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L318b68.  @monitorenter v1
  #L318b6a.  call temp:= `b`(v1) @signature `Lkotlinx/coroutines/internal/k0;.b:()Lkotlinx/coroutines/internal/l0;` @kind virtual;
  #L318b70.  v0:= temp @kind object;
  #L318b72.  @monitorexit v1
  #L318b74.  return v0 @kind object;
  #L318b76.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L318b78.  @monitorexit v1
  #L318b7a.  throw v0;
  catch `java.lang.Throwable` @[L318b6a..L318b72] goto L318b76;
}
procedure `boolean` `g`(`kotlinx.coroutines.internal.k0` v3 @kind this, `kotlinx.coroutines.internal.l0` v4 @kind object) @signature `Lkotlinx/coroutines/internal/k0;.g:(Lkotlinx/coroutines/internal/l0;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L318abc.  @monitorenter v3
  #L318abe.  call temp:= `c`(v4) @signature `Lkotlinx/coroutines/internal/l0;.c:()Lkotlinx/coroutines/internal/k0;` @kind interface;
  #L318ac4.  v0:= temp @kind object;
  #L318ac6.  v1:= 1I;
  #L318ac8.  v2:= 0I;
  #L318aca.  if v0 != 0 then goto L318ad2;
  #L318ace.  v1:= 0I;
  #L318ad0.  goto L318b04;
  #L318ad2.  call temp:= `f`(v4) @signature `Lkotlinx/coroutines/internal/l0;.f:()I` @kind interface;
  #L318ad8.  v4:= temp;
  #L318ada.  call temp:= `a`() @signature `Lkotlinx/coroutines/q0;.a:()Z` @kind static;
  #L318ae0.  v0:= temp;
  #L318ae2.  if v0 == 0 then goto L318afe;
  #L318ae6.  if v4 < 0 then goto L318aec;
  #L318aea.  v2:= 1I;
  #L318aec.  if v2 == 0 then goto L318af2;
  #L318af0.  goto L318afe;
  #L318af2.  v4:= new `java.lang.AssertionError`;
  #L318af6.  call `<init>`(v4) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L318afc.  throw v4;
  #L318afe.  call temp:= `h`(v3, v4) @signature `Lkotlinx/coroutines/internal/k0;.h:(I)Lkotlinx/coroutines/internal/l0;` @kind virtual;
  #L318b04.  @monitorexit v3
  #L318b06.  return v1;
  #L318b08.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L318b0a.  @monitorexit v3
  #L318b0c.  throw v4;
  catch `java.lang.Throwable` @[L318abe..L318b04] goto L318b08;
}
procedure `kotlinx.coroutines.internal.l0` `h`(`kotlinx.coroutines.internal.k0` v7 @kind this, `int` v8 ) @signature `Lkotlinx/coroutines/internal/k0;.h:(I)Lkotlinx/coroutines/internal/l0;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L318b98.  call temp:= `a`() @signature `Lkotlinx/coroutines/q0;.a:()Z` @kind static;
  #L318b9e.  v0:= temp;
  #L318ba0.  v1:= 0I;
  #L318ba2.  v2:= 1I;
  #L318ba4.  if v0 == 0 then goto L318bcc;
  #L318ba8.  call temp:= `c`(v7) @signature `Lkotlinx/coroutines/internal/k0;.c:()I` @kind virtual;
  #L318bae.  v0:= temp;
  #L318bb0.  if v0 <= 0 then goto L318bb8;
  #L318bb4.  v0:= 1I;
  #L318bb6.  goto L318bba;
  #L318bb8.  v0:= 0I;
  #L318bba.  if v0 == 0 then goto L318bc0;
  #L318bbe.  goto L318bcc;
  #L318bc0.  v8:= new `java.lang.AssertionError`;
  #L318bc4.  call `<init>`(v8) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L318bca.  throw v8;
  #L318bcc.  v0:= v7.`kotlinx.coroutines.internal.k0.a` @type ^`kotlinx.coroutines.internal.l0`[] @kind object;
  #L318bd0.  call `c`(v0) @signature `Lkotlin/jvm/internal/k;.c:(Ljava/lang/Object;)V` @kind static;
  #L318bd6.  call temp:= `c`(v7) @signature `Lkotlinx/coroutines/internal/k0;.c:()I` @kind virtual;
  #L318bdc.  v3:= temp;
  #L318bde.  v4:= -1I;
  #L318be0.  v3:= v3 + v4 @kind int;
  #L318be2.  call `j`(v7, v3) @signature `Lkotlinx/coroutines/internal/k0;.j:(I)V` @kind direct;
  #L318be8.  call temp:= `c`(v7) @signature `Lkotlinx/coroutines/internal/k0;.c:()I` @kind virtual;
  #L318bee.  v3:= temp;
  #L318bf0.  if v8 >= v3 then goto L318c46;
  #L318bf4.  call temp:= `c`(v7) @signature `Lkotlinx/coroutines/internal/k0;.c:()I` @kind virtual;
  #L318bfa.  v3:= temp;
  #L318bfc.  call `m`(v7, v8, v3) @signature `Lkotlinx/coroutines/internal/k0;.m:(II)V` @kind direct;
  #L318c02.  v3:= v8 + -1;
  #L318c06.  v3:= v3 / 2;
  #L318c0a.  if v8 <= 0 then goto L318c40;
  #L318c0e.  v5:= v0[v8] @kind object;
  #L318c12.  call `c`(v5) @signature `Lkotlin/jvm/internal/k;.c:(Ljava/lang/Object;)V` @kind static;
  #L318c18.  v5:= (`java.lang.Comparable`) v5 @kind object;
  #L318c1c.  v6:= v0[v3] @kind object;
  #L318c20.  call `c`(v6) @signature `Lkotlin/jvm/internal/k;.c:(Ljava/lang/Object;)V` @kind static;
  #L318c26.  call temp:= `compareTo`(v5, v6) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L318c2c.  v5:= temp;
  #L318c2e.  if v5 >= 0 then goto L318c40;
  #L318c32.  call `m`(v7, v8, v3) @signature `Lkotlinx/coroutines/internal/k0;.m:(II)V` @kind direct;
  #L318c38.  call `l`(v7, v3) @signature `Lkotlinx/coroutines/internal/k0;.l:(I)V` @kind direct;
  #L318c3e.  goto L318c46;
  #L318c40.  call `k`(v7, v8) @signature `Lkotlinx/coroutines/internal/k0;.k:(I)V` @kind direct;
  #L318c46.  call temp:= `c`(v7) @signature `Lkotlinx/coroutines/internal/k0;.c:()I` @kind virtual;
  #L318c4c.  v8:= temp;
  #L318c4e.  v8:= v0[v8] @kind object;
  #L318c52.  call `c`(v8) @signature `Lkotlin/jvm/internal/k;.c:(Ljava/lang/Object;)V` @kind static;
  #L318c58.  call temp:= `a`() @signature `Lkotlinx/coroutines/q0;.a:()Z` @kind static;
  #L318c5e.  v3:= temp;
  #L318c60.  if v3 == 0 then goto L318c84;
  #L318c64.  call temp:= `c`(v8) @signature `Lkotlinx/coroutines/internal/l0;.c:()Lkotlinx/coroutines/internal/k0;` @kind interface;
  #L318c6a.  v3:= temp @kind object;
  #L318c6c.  if v3 != v7 then goto L318c72;
  #L318c70.  v1:= 1I;
  #L318c72.  if v1 == 0 then goto L318c78;
  #L318c76.  goto L318c84;
  #L318c78.  v8:= new `java.lang.AssertionError`;
  #L318c7c.  call `<init>`(v8) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L318c82.  throw v8;
  #L318c84.  v1:= 0I;
  #L318c86.  call `a`(v8, v1) @signature `Lkotlinx/coroutines/internal/l0;.a:(Lkotlinx/coroutines/internal/k0;)V` @kind interface;
  #L318c8c.  call `d`(v8, v4) @signature `Lkotlinx/coroutines/internal/l0;.d:(I)V` @kind interface;
  #L318c92.  call temp:= `c`(v7) @signature `Lkotlinx/coroutines/internal/k0;.c:()I` @kind virtual;
  #L318c98.  v2:= temp;
  #L318c9a.  v0[v2]:= v1 @kind object;
  #L318c9e.  return v8 @kind object;
}
procedure `kotlinx.coroutines.internal.l0` `i`(`kotlinx.coroutines.internal.k0` v1 @kind this) @signature `Lkotlinx/coroutines/internal/k0;.i:()Lkotlinx/coroutines/internal/l0;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L318cb0.  @monitorenter v1
  #L318cb2.  call temp:= `c`(v1) @signature `Lkotlinx/coroutines/internal/k0;.c:()I` @kind virtual;
  #L318cb8.  v0:= temp;
  #L318cba.  if v0 <= 0 then goto L318cca;
  #L318cbe.  v0:= 0I;
  #L318cc0.  call temp:= `h`(v1, v0) @signature `Lkotlinx/coroutines/internal/k0;.h:(I)Lkotlinx/coroutines/internal/l0;` @kind virtual;
  #L318cc6.  v0:= temp @kind object;
  #L318cc8.  goto L318ccc;
  #L318cca.  v0:= 0I;
  #L318ccc.  @monitorexit v1
  #L318cce.  return v0 @kind object;
  #L318cd0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L318cd2.  @monitorexit v1
  #L318cd4.  throw v0;
  catch `java.lang.Throwable` @[L318cb2..L318cc8] goto L318cd0;
}
