record `kotlinx.coroutines.internal.r` @kind class @AccessFlag PUBLIC {
  `java.lang.Object` `kotlinx.coroutines.internal.r._next` @AccessFlag VOLATILE_SYNTHETIC;
  `java.lang.Object` `kotlinx.coroutines.internal.r._prev` @AccessFlag VOLATILE_SYNTHETIC;
  `java.lang.Object` `kotlinx.coroutines.internal.r._removedRef` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
}
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.internal.r.g` @AccessFlag STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.internal.r.h` @AccessFlag STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlinx.coroutines.internal.r.i` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/internal/r;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L316cb0.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L316cb4.  v1:= constclass @type ^`kotlinx.coroutines.internal.r` @kind object;
  #L316cb8.  v2:= "_next" @kind object;
  #L316cbc.  call temp:= `newUpdater`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L316cc2.  v2:= temp @kind object;
  #L316cc4.  `@@kotlinx.coroutines.internal.r.g` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v2 @kind object;
  #L316cc8.  v2:= "_prev" @kind object;
  #L316ccc.  call temp:= `newUpdater`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L316cd2.  v2:= temp @kind object;
  #L316cd4.  `@@kotlinx.coroutines.internal.r.h` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v2 @kind object;
  #L316cd8.  v2:= "_removedRef" @kind object;
  #L316cdc.  call temp:= `newUpdater`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L316ce2.  v0:= temp @kind object;
  #L316ce4.  `@@kotlinx.coroutines.internal.r.i` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v0 @kind object;
  #L316ce8.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.r` v1 @kind this) @signature `Lkotlinx/coroutines/internal/r;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L316cfc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L316d02.  v1.`kotlinx.coroutines.internal.r._next` @type ^`java.lang.Object` := v1 @kind object;
  #L316d06.  v1.`kotlinx.coroutines.internal.r._prev` @type ^`java.lang.Object` := v1 @kind object;
  #L316d0a.  v0:= 0I;
  #L316d0c.  v1.`kotlinx.coroutines.internal.r._removedRef` @type ^`java.lang.Object` := v0 @kind object;
  #L316d10.  return @kind void;
}
procedure `void` `g`(`kotlinx.coroutines.internal.r` v0 @kind object, `kotlinx.coroutines.internal.r` v1 @kind object) @signature `Lkotlinx/coroutines/internal/r;.g:(Lkotlinx/coroutines/internal/r;Lkotlinx/coroutines/internal/r;)V` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L316d24.  call `l`(v0, v1) @signature `Lkotlinx/coroutines/internal/r;.l:(Lkotlinx/coroutines/internal/r;)V` @kind direct;
  #L316d2a.  return @kind void;
}
procedure `kotlinx.coroutines.internal.r` `j`(`kotlinx.coroutines.internal.r` v7 @kind this, `kotlinx.coroutines.internal.a0` v8 @kind object) @signature `Lkotlinx/coroutines/internal/r;.j:(Lkotlinx/coroutines/internal/a0;)Lkotlinx/coroutines/internal/r;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L316ae0.  v0:= v7.`kotlinx.coroutines.internal.r._prev` @type ^`java.lang.Object` @kind object;
  #L316ae4.  v0:= (`kotlinx.coroutines.internal.r`) v0 @kind object;
  #L316ae8.  v1:= 0I;
  #L316aea.  v2:= v0 @kind object;
  #L316aec.  v3:= v1 @kind object;
  #L316aee.  v4:= v2.`kotlinx.coroutines.internal.r._next` @type ^`java.lang.Object` @kind object;
  #L316af2.  if v4 != v7 then goto L316b10;
  #L316af6.  if v0 != v2 then goto L316afc;
  #L316afa.  return v2 @kind object;
  #L316afc.  v1:= `@@kotlinx.coroutines.internal.r.h` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L316b00.  call temp:= `compareAndSet`(v1, v7, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L316b06.  v0:= temp;
  #L316b08.  if v0 != 0 then goto L316b0e;
  #L316b0c.  goto L316ae0;
  #L316b0e.  return v2 @kind object;
  #L316b10.  call temp:= `r`(v7) @signature `Lkotlinx/coroutines/internal/r;.r:()Z` @kind virtual;
  #L316b16.  v5:= temp;
  #L316b18.  if v5 == 0 then goto L316b1e;
  #L316b1c.  return v1 @kind object;
  #L316b1e.  if v4 != v8 then goto L316b24;
  #L316b22.  return v2 @kind object;
  #L316b24.  v5:= instanceof @variable v4 @type ^`kotlinx.coroutines.internal.a0` @kind boolean;
  #L316b28.  if v5 == 0 then goto L316b50;
  #L316b2c.  if v8 == 0 then goto L316b44;
  #L316b30.  v0:= v4 @kind object;
  #L316b32.  v0:= (`kotlinx.coroutines.internal.a0`) v0 @kind object;
  #L316b36.  call temp:= `b`(v8, v0) @signature `Lkotlinx/coroutines/internal/a0;.b:(Lkotlinx/coroutines/internal/a0;)Z` @kind virtual;
  #L316b3c.  v0:= temp;
  #L316b3e.  if v0 == 0 then goto L316b44;
  #L316b42.  return v1 @kind object;
  #L316b44.  v4:= (`kotlinx.coroutines.internal.a0`) v4 @kind object;
  #L316b48.  call temp:= `c`(v4, v2) @signature `Lkotlinx/coroutines/internal/a0;.c:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L316b4e.  goto L316ae0;
  #L316b50.  v5:= instanceof @variable v4 @type ^`kotlinx.coroutines.internal.b0` @kind boolean;
  #L316b54.  if v5 == 0 then goto L316b84;
  #L316b58.  if v3 == 0 then goto L316b7a;
  #L316b5c.  v5:= `@@kotlinx.coroutines.internal.r.g` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L316b60.  v4:= (`kotlinx.coroutines.internal.b0`) v4 @kind object;
  #L316b64.  v4:= v4.`kotlinx.coroutines.internal.b0.a` @type ^`kotlinx.coroutines.internal.r` @kind object;
  #L316b68.  call temp:= `compareAndSet`(v5, v3, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L316b6e.  v2:= temp;
  #L316b70.  if v2 != 0 then goto L316b76;
  #L316b74.  goto L316ae0;
  #L316b76.  v2:= v3 @kind object;
  #L316b78.  goto L316aec;
  #L316b7a.  v2:= v2.`kotlinx.coroutines.internal.r._prev` @type ^`java.lang.Object` @kind object;
  #L316b7e.  v2:= (`kotlinx.coroutines.internal.r`) v2 @kind object;
  #L316b82.  goto L316aee;
  #L316b84.  v3:= v4 @kind object;
  #L316b86.  v3:= (`kotlinx.coroutines.internal.r`) v3 @kind object;
  #L316b8a.  v6:= v3 @kind object;
  #L316b8c.  v3:= v2 @kind object;
  #L316b8e.  v2:= v6 @kind object;
  #L316b90.  goto L316aee;
}
procedure `kotlinx.coroutines.internal.r` `k`(`kotlinx.coroutines.internal.r` v1 @kind this, `kotlinx.coroutines.internal.r` v2 @kind object) @signature `Lkotlinx/coroutines/internal/r;.k:(Lkotlinx/coroutines/internal/r;)Lkotlinx/coroutines/internal/r;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L316ba4.  call temp:= `r`(v2) @signature `Lkotlinx/coroutines/internal/r;.r:()Z` @kind virtual;
  #L316baa.  v0:= temp;
  #L316bac.  if v0 != 0 then goto L316bb2;
  #L316bb0.  return v2 @kind object;
  #L316bb2.  v2:= v2.`kotlinx.coroutines.internal.r._prev` @type ^`java.lang.Object` @kind object;
  #L316bb6.  v2:= (`kotlinx.coroutines.internal.r`) v2 @kind object;
  #L316bba.  goto L316ba4;
}
procedure `void` `l`(`kotlinx.coroutines.internal.r` v2 @kind this, `kotlinx.coroutines.internal.r` v3 @kind object) @signature `Lkotlinx/coroutines/internal/r;.l:(Lkotlinx/coroutines/internal/r;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L316d3c.  v0:= v3.`kotlinx.coroutines.internal.r._prev` @type ^`java.lang.Object` @kind object;
  #L316d40.  v0:= (`kotlinx.coroutines.internal.r`) v0 @kind object;
  #L316d44.  call temp:= `m`(v2) @signature `Lkotlinx/coroutines/internal/r;.m:()Ljava/lang/Object;` @kind virtual;
  #L316d4a.  v1:= temp @kind object;
  #L316d4c.  if v1 == v3 then goto L316d52;
  #L316d50.  return @kind void;
  #L316d52.  v1:= `@@kotlinx.coroutines.internal.r.h` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L316d56.  call temp:= `compareAndSet`(v1, v3, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L316d5c.  v0:= temp;
  #L316d5e.  if v0 == 0 then goto L316d3c;
  #L316d62.  call temp:= `r`(v2) @signature `Lkotlinx/coroutines/internal/r;.r:()Z` @kind virtual;
  #L316d68.  v0:= temp;
  #L316d6a.  if v0 == 0 then goto L316d76;
  #L316d6e.  v0:= 0I;
  #L316d70.  call temp:= `j`(v3, v0) @signature `Lkotlinx/coroutines/internal/r;.j:(Lkotlinx/coroutines/internal/a0;)Lkotlinx/coroutines/internal/r;` @kind direct;
  #L316d76.  return @kind void;
}
procedure `kotlinx.coroutines.internal.b0` `u`(`kotlinx.coroutines.internal.r` v2 @kind this) @signature `Lkotlinx/coroutines/internal/r;.u:()Lkotlinx/coroutines/internal/b0;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L316c7c.  v0:= v2.`kotlinx.coroutines.internal.r._removedRef` @type ^`java.lang.Object` @kind object;
  #L316c80.  v0:= (`kotlinx.coroutines.internal.b0`) v0 @kind object;
  #L316c84.  if v0 != 0 then goto L316c9c;
  #L316c88.  v0:= new `kotlinx.coroutines.internal.b0`;
  #L316c8c.  call `<init>`(v0, v2) @signature `Lkotlinx/coroutines/internal/b0;.<init>:(Lkotlinx/coroutines/internal/r;)V` @kind direct;
  #L316c92.  v1:= `@@kotlinx.coroutines.internal.r.i` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L316c96.  call `lazySet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L316c9c.  return v0 @kind object;
}
procedure `boolean` `h`(`kotlinx.coroutines.internal.r` v1 @kind this, `kotlinx.coroutines.internal.r` v2 @kind object, `kotlinx.coroutines.internal.r` v3 @kind object) @signature `Lkotlinx/coroutines/internal/r;.h:(Lkotlinx/coroutines/internal/r;Lkotlinx/coroutines/internal/r;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L316948.  v0:= `@@kotlinx.coroutines.internal.r.h` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L31694c.  call `lazySet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L316952.  v0:= `@@kotlinx.coroutines.internal.r.g` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L316956.  call `lazySet`(v0, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L31695c.  call temp:= `compareAndSet`(v0, v1, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L316962.  v0:= temp;
  #L316964.  if v0 != 0 then goto L31696c;
  #L316968.  v2:= 0I;
  #L31696a.  return v2;
  #L31696c.  call `l`(v2, v3) @signature `Lkotlinx/coroutines/internal/r;.l:(Lkotlinx/coroutines/internal/r;)V` @kind direct;
  #L316972.  v2:= 1I;
  #L316974.  return v2;
}
procedure `boolean` `i`(`kotlinx.coroutines.internal.r` v1 @kind this, `kotlinx.coroutines.internal.r` v2 @kind object) @signature `Lkotlinx/coroutines/internal/r;.i:(Lkotlinx/coroutines/internal/r;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L316988.  v0:= `@@kotlinx.coroutines.internal.r.h` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L31698c.  call `lazySet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L316992.  v0:= `@@kotlinx.coroutines.internal.r.g` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L316996.  call `lazySet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L31699c.  call temp:= `m`(v1) @signature `Lkotlinx/coroutines/internal/r;.m:()Ljava/lang/Object;` @kind virtual;
  #L3169a2.  v0:= temp @kind object;
  #L3169a4.  if v0 == v1 then goto L3169ac;
  #L3169a8.  v2:= 0I;
  #L3169aa.  return v2;
  #L3169ac.  v0:= `@@kotlinx.coroutines.internal.r.g` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L3169b0.  call temp:= `compareAndSet`(v0, v1, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3169b6.  v0:= temp;
  #L3169b8.  if v0 == 0 then goto L31699c;
  #L3169bc.  call `l`(v2, v1) @signature `Lkotlinx/coroutines/internal/r;.l:(Lkotlinx/coroutines/internal/r;)V` @kind direct;
  #L3169c2.  v2:= 1I;
  #L3169c4.  return v2;
}
procedure `java.lang.Object` `m`(`kotlinx.coroutines.internal.r` v2 @kind this) @signature `Lkotlinx/coroutines/internal/r;.m:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L316a68.  v0:= v2.`kotlinx.coroutines.internal.r._next` @type ^`java.lang.Object` @kind object;
  #L316a6c.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.a0` @kind boolean;
  #L316a70.  if v1 != 0 then goto L316a76;
  #L316a74.  return v0 @kind object;
  #L316a76.  v0:= (`kotlinx.coroutines.internal.a0`) v0 @kind object;
  #L316a7a.  call temp:= `c`(v0, v2) @signature `Lkotlinx/coroutines/internal/a0;.c:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L316a80.  goto L316a68;
}
procedure `kotlinx.coroutines.internal.r` `n`(`kotlinx.coroutines.internal.r` v1 @kind this) @signature `Lkotlinx/coroutines/internal/r;.n:()Lkotlinx/coroutines/internal/r;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L316bcc.  call temp:= `m`(v1) @signature `Lkotlinx/coroutines/internal/r;.m:()Ljava/lang/Object;` @kind virtual;
  #L316bd2.  v0:= temp @kind object;
  #L316bd4.  call temp:= `b`(v0) @signature `Lkotlinx/coroutines/internal/q;.b:(Ljava/lang/Object;)Lkotlinx/coroutines/internal/r;` @kind static;
  #L316bda.  v0:= temp @kind object;
  #L316bdc.  return v0 @kind object;
}
procedure `kotlinx.coroutines.internal.r` `o`(`kotlinx.coroutines.internal.r` v1 @kind this) @signature `Lkotlinx/coroutines/internal/r;.o:()Lkotlinx/coroutines/internal/r;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L316bf0.  v0:= 0I;
  #L316bf2.  call temp:= `j`(v1, v0) @signature `Lkotlinx/coroutines/internal/r;.j:(Lkotlinx/coroutines/internal/a0;)Lkotlinx/coroutines/internal/r;` @kind direct;
  #L316bf8.  v0:= temp @kind object;
  #L316bfa.  if v0 != 0 then goto L316c0e;
  #L316bfe.  v0:= v1.`kotlinx.coroutines.internal.r._prev` @type ^`java.lang.Object` @kind object;
  #L316c02.  v0:= (`kotlinx.coroutines.internal.r`) v0 @kind object;
  #L316c06.  call temp:= `k`(v1, v0) @signature `Lkotlinx/coroutines/internal/r;.k:(Lkotlinx/coroutines/internal/r;)Lkotlinx/coroutines/internal/r;` @kind direct;
  #L316c0c.  v0:= temp @kind object;
  #L316c0e.  return v0 @kind object;
}
procedure `void` `p`(`kotlinx.coroutines.internal.r` v1 @kind this) @signature `Lkotlinx/coroutines/internal/r;.p:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L316d88.  call temp:= `m`(v1) @signature `Lkotlinx/coroutines/internal/r;.m:()Ljava/lang/Object;` @kind virtual;
  #L316d8e.  v0:= temp @kind object;
  #L316d90.  v0:= (`kotlinx.coroutines.internal.b0`) v0 @kind object;
  #L316d94.  v0:= v0.`kotlinx.coroutines.internal.b0.a` @type ^`kotlinx.coroutines.internal.r` @kind object;
  #L316d98.  call `q`(v0) @signature `Lkotlinx/coroutines/internal/r;.q:()V` @kind virtual;
  #L316d9e.  return @kind void;
}
procedure `void` `q`(`kotlinx.coroutines.internal.r` v3 @kind this) @signature `Lkotlinx/coroutines/internal/r;.q:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L316db0.  v0:= v3 @kind object;
  #L316db2.  call temp:= `m`(v0) @signature `Lkotlinx/coroutines/internal/r;.m:()Ljava/lang/Object;` @kind virtual;
  #L316db8.  v1:= temp @kind object;
  #L316dba.  v2:= instanceof @variable v1 @type ^`kotlinx.coroutines.internal.b0` @kind boolean;
  #L316dbe.  if v2 == 0 then goto L316dcc;
  #L316dc2.  v1:= (`kotlinx.coroutines.internal.b0`) v1 @kind object;
  #L316dc6.  v0:= v1.`kotlinx.coroutines.internal.b0.a` @type ^`kotlinx.coroutines.internal.r` @kind object;
  #L316dca.  goto L316db2;
  #L316dcc.  v1:= 0I;
  #L316dce.  call temp:= `j`(v0, v1) @signature `Lkotlinx/coroutines/internal/r;.j:(Lkotlinx/coroutines/internal/a0;)Lkotlinx/coroutines/internal/r;` @kind direct;
  #L316dd4.  return @kind void;
}
procedure `boolean` `r`(`kotlinx.coroutines.internal.r` v1 @kind this) @signature `Lkotlinx/coroutines/internal/r;.r:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3169d8.  call temp:= `m`(v1) @signature `Lkotlinx/coroutines/internal/r;.m:()Ljava/lang/Object;` @kind virtual;
  #L3169de.  v0:= temp @kind object;
  #L3169e0.  v0:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.b0` @kind boolean;
  #L3169e4.  return v0;
}
procedure `boolean` `s`(`kotlinx.coroutines.internal.r` v1 @kind this) @signature `Lkotlinx/coroutines/internal/r;.s:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3169f8.  call temp:= `t`(v1) @signature `Lkotlinx/coroutines/internal/r;.t:()Lkotlinx/coroutines/internal/r;` @kind virtual;
  #L3169fe.  v0:= temp @kind object;
  #L316a00.  if v0 != 0 then goto L316a08;
  #L316a04.  v0:= 1I;
  #L316a06.  goto L316a0a;
  #L316a08.  v0:= 0I;
  #L316a0a.  return v0;
}
procedure `kotlinx.coroutines.internal.r` `t`(`kotlinx.coroutines.internal.r` v4 @kind this) @signature `Lkotlinx/coroutines/internal/r;.t:()Lkotlinx/coroutines/internal/r;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L316c20.  call temp:= `m`(v4) @signature `Lkotlinx/coroutines/internal/r;.m:()Ljava/lang/Object;` @kind virtual;
  #L316c26.  v0:= temp @kind object;
  #L316c28.  v1:= instanceof @variable v0 @type ^`kotlinx.coroutines.internal.b0` @kind boolean;
  #L316c2c.  if v1 == 0 then goto L316c3a;
  #L316c30.  v0:= (`kotlinx.coroutines.internal.b0`) v0 @kind object;
  #L316c34.  v0:= v0.`kotlinx.coroutines.internal.b0.a` @type ^`kotlinx.coroutines.internal.r` @kind object;
  #L316c38.  return v0 @kind object;
  #L316c3a.  if v0 != v4 then goto L316c44;
  #L316c3e.  v0:= (`kotlinx.coroutines.internal.r`) v0 @kind object;
  #L316c42.  return v0 @kind object;
  #L316c44.  v1:= v0 @kind object;
  #L316c46.  v1:= (`kotlinx.coroutines.internal.r`) v1 @kind object;
  #L316c4a.  call temp:= `u`(v1) @signature `Lkotlinx/coroutines/internal/r;.u:()Lkotlinx/coroutines/internal/b0;` @kind direct;
  #L316c50.  v2:= temp @kind object;
  #L316c52.  v3:= `@@kotlinx.coroutines.internal.r.g` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L316c56.  call temp:= `compareAndSet`(v3, v4, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L316c5c.  v0:= temp;
  #L316c5e.  if v0 == 0 then goto L316c20;
  #L316c62.  v0:= 0I;
  #L316c64.  call temp:= `j`(v1, v0) @signature `Lkotlinx/coroutines/internal/r;.j:(Lkotlinx/coroutines/internal/a0;)Lkotlinx/coroutines/internal/r;` @kind direct;
  #L316c6a.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`kotlinx.coroutines.internal.r` v2 @kind this) @signature `Lkotlinx/coroutines/internal/r;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L316a94.  v0:= new `java.lang.StringBuilder`;
  #L316a98.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L316a9e.  v1:= new `kotlinx.coroutines.internal.r$c`;
  #L316aa2.  call `<init>`(v1, v2) @signature `Lkotlinx/coroutines/internal/r$c;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L316aa8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L316aae.  v1:= 64I;
  #L316ab2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L316ab8.  call temp:= `b`(v2) @signature `Lkotlinx/coroutines/r0;.b:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L316abe.  v1:= temp @kind object;
  #L316ac0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L316ac6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L316acc.  v0:= temp @kind object;
  #L316ace.  return v0 @kind object;
}
procedure `int` `v`(`kotlinx.coroutines.internal.r` v1 @kind this, `kotlinx.coroutines.internal.r` v2 @kind object, `kotlinx.coroutines.internal.r` v3 @kind object, `kotlinx.coroutines.internal.r$a` v4 @kind object) @signature `Lkotlinx/coroutines/internal/r;.v:(Lkotlinx/coroutines/internal/r;Lkotlinx/coroutines/internal/r;Lkotlinx/coroutines/internal/r$a;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L316a1c.  v0:= `@@kotlinx.coroutines.internal.r.h` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L316a20.  call `lazySet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L316a26.  v0:= `@@kotlinx.coroutines.internal.r.g` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L316a2a.  call `lazySet`(v0, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L316a30.  v4.`kotlinx.coroutines.internal.r$a.c` @type ^`kotlinx.coroutines.internal.r` := v3 @kind object;
  #L316a34.  call temp:= `compareAndSet`(v0, v1, v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L316a3a.  v2:= temp;
  #L316a3c.  if v2 != 0 then goto L316a44;
  #L316a40.  v2:= 0I;
  #L316a42.  return v2;
  #L316a44.  call temp:= `c`(v4, v1) @signature `Lkotlinx/coroutines/internal/c;.c:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L316a4a.  v2:= temp @kind object;
  #L316a4c.  if v2 != 0 then goto L316a54;
  #L316a50.  v2:= 1I;
  #L316a52.  goto L316a56;
  #L316a54.  v2:= 2I;
  #L316a56.  return v2;
}
