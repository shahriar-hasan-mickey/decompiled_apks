record `kotlinx.coroutines.internal.o0` @kind class @AccessFlag FINAL extends `kotlinx.coroutines.internal.g` @kind class {
}
global `kotlinx.coroutines.internal.o0` `@@kotlinx.coroutines.internal.o0.a` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.util.concurrent.locks.ReentrantReadWriteLock` `@@kotlinx.coroutines.internal.o0.b` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.WeakHashMap` `@@kotlinx.coroutines.internal.o0.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlinx/coroutines/internal/o0;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L318ff0.  v0:= new `kotlinx.coroutines.internal.o0`;
  #L318ff4.  call `<init>`(v0) @signature `Lkotlinx/coroutines/internal/o0;.<init>:()V` @kind direct;
  #L318ffa.  `@@kotlinx.coroutines.internal.o0.a` @type ^`kotlinx.coroutines.internal.o0` := v0 @kind object;
  #L318ffe.  v0:= new `java.util.concurrent.locks.ReentrantReadWriteLock`;
  #L319002.  call `<init>`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.<init>:()V` @kind direct;
  #L319008.  `@@kotlinx.coroutines.internal.o0.b` @type ^`java.util.concurrent.locks.ReentrantReadWriteLock` := v0 @kind object;
  #L31900c.  v0:= new `java.util.WeakHashMap`;
  #L319010.  call `<init>`(v0) @signature `Ljava/util/WeakHashMap;.<init>:()V` @kind direct;
  #L319016.  `@@kotlinx.coroutines.internal.o0.c` @type ^`java.util.WeakHashMap` := v0 @kind object;
  #L31901a.  return @kind void;
}
procedure `void` `<init>`(`kotlinx.coroutines.internal.o0` v0 @kind this) @signature `Lkotlinx/coroutines/internal/o0;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L31902c.  call `<init>`(v0) @signature `Lkotlinx/coroutines/internal/g;.<init>:()V` @kind direct;
  #L319032.  return @kind void;
}
procedure `wd.l` `a`(`kotlinx.coroutines.internal.o0` v6 @kind this, `java.lang.Class` v7 @kind object) @signature `Lkotlinx/coroutines/internal/o0;.a:(Ljava/lang/Class;)Lwd/l;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L319044.  v0:= `@@kotlinx.coroutines.internal.o0.b` @type ^`java.util.concurrent.locks.ReentrantReadWriteLock` @kind object;
  #L319048.  call temp:= `readLock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;` @kind virtual;
  #L31904e.  v1:= temp @kind object;
  #L319050.  call `lock`(v1) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;.lock:()V` @kind virtual;
  #L319056.  v2:= `@@kotlinx.coroutines.internal.o0.c` @type ^`java.util.WeakHashMap` @kind object;
  #L31905a.  call temp:= `get`(v2, v7) @signature `Ljava/util/WeakHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L319060.  v2:= temp @kind object;
  #L319062.  v2:= (`wd.l`) v2 @kind object;
  #L319066.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;.unlock:()V` @kind virtual;
  #L31906c.  if v2 == 0 then goto L319072;
  #L319070.  return v2 @kind object;
  #L319072.  call temp:= `readLock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;` @kind virtual;
  #L319078.  v1:= temp @kind object;
  #L31907a.  call temp:= `getWriteHoldCount`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.getWriteHoldCount:()I` @kind virtual;
  #L319080.  v2:= temp;
  #L319082.  v3:= 0I;
  #L319084.  if v2 != 0 then goto L319092;
  #L319088.  call temp:= `getReadHoldCount`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.getReadHoldCount:()I` @kind virtual;
  #L31908e.  v2:= temp;
  #L319090.  goto L319094;
  #L319092.  v2:= 0I;
  #L319094.  v4:= 0I;
  #L319096.  if v4 >= v2 then goto L3190a6;
  #L31909a.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;.unlock:()V` @kind virtual;
  #L3190a0.  v4:= v4 + 1;
  #L3190a4.  goto L319096;
  #L3190a6.  call temp:= `writeLock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.writeLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;` @kind virtual;
  #L3190ac.  v0:= temp @kind object;
  #L3190ae.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;.lock:()V` @kind virtual;
  #L3190b4.  v4:= `@@kotlinx.coroutines.internal.o0.c` @type ^`java.util.WeakHashMap` @kind object;
  #L3190b8.  call temp:= `get`(v4, v7) @signature `Ljava/util/WeakHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3190be.  v5:= temp @kind object;
  #L3190c0.  v5:= (`wd.l`) v5 @kind object;
  #L3190c4.  if v5 == 0 then goto L3190e0;
  #L3190c8.  if v3 >= v2 then goto L3190d8;
  #L3190cc.  call `lock`(v1) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;.lock:()V` @kind virtual;
  #L3190d2.  v3:= v3 + 1;
  #L3190d6.  goto L3190c8;
  #L3190d8.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;.unlock:()V` @kind virtual;
  #L3190de.  return v5 @kind object;
  #L3190e0.  call temp:= `a`(v7) @signature `Lkotlinx/coroutines/internal/j;.a:(Ljava/lang/Class;)Lwd/l;` @kind static;
  #L3190e6.  v5:= temp @kind object;
  #L3190e8.  call temp:= `put`(v4, v7, v5) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3190ee.  if v3 >= v2 then goto L3190fe;
  #L3190f2.  call `lock`(v1) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;.lock:()V` @kind virtual;
  #L3190f8.  v3:= v3 + 1;
  #L3190fc.  goto L3190ee;
  #L3190fe.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;.unlock:()V` @kind virtual;
  #L319104.  return v5 @kind object;
  #L319106.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L319108.  if v3 >= v2 then goto L319118;
  #L31910c.  call `lock`(v1) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;.lock:()V` @kind virtual;
  #L319112.  v3:= v3 + 1;
  #L319116.  goto L319108;
  #L319118.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;.unlock:()V` @kind virtual;
  #L31911e.  throw v7;
  #L319120.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L319122.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;.unlock:()V` @kind virtual;
  #L319128.  throw v7;
  catch `java.lang.Throwable` @[L319056..L319066] goto L319120;
  catch `java.lang.Throwable` @[L3190b4..L3190c4] goto L319106;
  catch `java.lang.Throwable` @[L3190e0..L3190ee] goto L319106;
}
