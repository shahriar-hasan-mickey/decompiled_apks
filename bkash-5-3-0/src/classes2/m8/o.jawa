record `m8.o` @kind class @AccessFlag PUBLIC extends `m8.a` @kind class, `a9.a` @kind interface {
  `java.util.Map` `m8.o.a` @AccessFlag PRIVATE_FINAL;
  `java.util.Map` `m8.o.b` @AccessFlag PRIVATE_FINAL;
  `java.util.Map` `m8.o.c` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `m8.o.d` @AccessFlag PRIVATE_FINAL;
  `m8.v` `m8.o.e` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicReference` `m8.o.f` @AccessFlag PRIVATE_FINAL;
  `m8.j` `m8.o.g` @AccessFlag PRIVATE_FINAL;
}
global `h9.b` `@@m8.o.h` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lm8/o;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L31f1f0.  v0:= `@@m8.l.a` @type ^`m8.l` @kind object;
  #L31f1f4.  `@@m8.o.h` @type ^`h9.b` := v0 @kind object;
  #L31f1f8.  return @kind void;
}
procedure `void` `<init>`(`m8.o` v5 @kind this, `java.util.concurrent.Executor` v6 @kind object, `java.lang.Iterable` v7 @kind object, `java.util.Collection` v8 @kind object, `m8.j` v9 @kind object) @signature `Lm8/o;.<init>:(Ljava/util/concurrent/Executor;Ljava/lang/Iterable;Ljava/util/Collection;Lm8/j;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L31f20c.  call `<init>`(v5) @signature `Lm8/a;.<init>:()V` @kind direct;
  #L31f212.  v0:= new `java.util.HashMap`;
  #L31f216.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L31f21c.  v5.`m8.o.a` @type ^`java.util.Map` := v0 @kind object;
  #L31f220.  v0:= new `java.util.HashMap`;
  #L31f224.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L31f22a.  v5.`m8.o.b` @type ^`java.util.Map` := v0 @kind object;
  #L31f22e.  v0:= new `java.util.HashMap`;
  #L31f232.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L31f238.  v5.`m8.o.c` @type ^`java.util.Map` := v0 @kind object;
  #L31f23c.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L31f240.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L31f246.  v5.`m8.o.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L31f24a.  v0:= new `m8.v`;
  #L31f24e.  call `<init>`(v0, v6) @signature `Lm8/v;.<init>:(Ljava/util/concurrent/Executor;)V` @kind direct;
  #L31f254.  v5.`m8.o.e` @type ^`m8.v` := v0 @kind object;
  #L31f258.  v5.`m8.o.g` @type ^`m8.j` := v9 @kind object;
  #L31f25c.  v6:= new `java.util.ArrayList`;
  #L31f260.  call `<init>`(v6) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L31f266.  v9:= constclass @type ^`m8.v` @kind object;
  #L31f26a.  v1:= 2I;
  #L31f26c.  v1:= new `java.lang.Class`[v1];
  #L31f270.  v2:= constclass @type ^`e9.d` @kind object;
  #L31f274.  v3:= 0I;
  #L31f276.  v1[v3]:= v2 @kind object;
  #L31f27a.  v2:= 1I;
  #L31f27c.  v4:= constclass @type ^`e9.c` @kind object;
  #L31f280.  v1[v2]:= v4 @kind object;
  #L31f284.  call temp:= `q`(v0, v9, v1) @signature `Lm8/d;.q:(Ljava/lang/Object;Ljava/lang/Class;[Ljava/lang/Class;)Lm8/d;` @kind static;
  #L31f28a.  v9:= temp @kind object;
  #L31f28c.  call temp:= `add`(v6, v9) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L31f292.  v9:= constclass @type ^`a9.a` @kind object;
  #L31f296.  v0:= new `java.lang.Class`[v3];
  #L31f29a.  call temp:= `q`(v5, v9, v0) @signature `Lm8/d;.q:(Ljava/lang/Object;Ljava/lang/Class;[Ljava/lang/Class;)Lm8/d;` @kind static;
  #L31f2a0.  v9:= temp @kind object;
  #L31f2a2.  call temp:= `add`(v6, v9) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L31f2a8.  call temp:= `iterator`(v8) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L31f2ae.  v8:= temp @kind object;
  #L31f2b0.  call temp:= `hasNext`(v8) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L31f2b6.  v9:= temp;
  #L31f2b8.  if v9 == 0 then goto L31f2d4;
  #L31f2bc.  call temp:= `next`(v8) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L31f2c2.  v9:= temp @kind object;
  #L31f2c4.  v9:= (`m8.d`) v9 @kind object;
  #L31f2c8.  if v9 == 0 then goto L31f2b0;
  #L31f2cc.  call temp:= `add`(v6, v9) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L31f2d2.  goto L31f2b0;
  #L31f2d4.  call temp:= `m`(v7) @signature `Lm8/o;.m:(Ljava/lang/Iterable;)Ljava/util/List;` @kind static;
  #L31f2da.  v7:= temp @kind object;
  #L31f2dc.  v5.`m8.o.d` @type ^`java.util.List` := v7 @kind object;
  #L31f2e0.  call `j`(v5, v6) @signature `Lm8/o;.j:(Ljava/util/List;)V` @kind direct;
  #L31f2e6.  return @kind void;
}
procedure `void` `<init>`(`m8.o` v0 @kind this, `java.util.concurrent.Executor` v1 @kind object, `java.lang.Iterable` v2 @kind object, `java.util.Collection` v3 @kind object, `m8.j` v4 @kind object, `m8.o$a` v5 @kind object) @signature `Lm8/o;.<init>:(Ljava/util/concurrent/Executor;Ljava/lang/Iterable;Ljava/util/Collection;Lm8/j;Lm8/o$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L31f2f8.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lm8/o;.<init>:(Ljava/util/concurrent/Executor;Ljava/lang/Iterable;Ljava/util/Collection;Lm8/j;)V` @kind direct;
  #L31f2fe.  return @kind void;
}
procedure `java.lang.Object` `f`(`m8.o` v0 @kind object, `m8.d` v1 @kind object) @signature `Lm8/o;.f:(Lm8/o;Lm8/d;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L31eec4.  call temp:= `n`(v0, v1) @signature `Lm8/o;.n:(Lm8/d;)Ljava/lang/Object;` @kind direct;
  #L31eeca.  v0:= temp @kind object;
  #L31eecc.  return v0 @kind object;
}
procedure `void` `g`(`m8.y` v0 @kind object, `h9.b` v1 @kind object) @signature `Lm8/o;.g:(Lm8/y;Lh9/b;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L31f1c0.  call `p`(v0, v1) @signature `Lm8/o;.p:(Lm8/y;Lh9/b;)V` @kind static;
  #L31f1c6.  return @kind void;
}
procedure `void` `h`(`m8.d0` v0 @kind object, `h9.b` v1 @kind object) @signature `Lm8/o;.h:(Lm8/d0;Lh9/b;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L31f1d8.  call `o`(v0, v1) @signature `Lm8/o;.o:(Lm8/d0;Lh9/b;)V` @kind static;
  #L31f1de.  return @kind void;
}
procedure `m8.o$b` `i`(`java.util.concurrent.Executor` v1 @kind object) @signature `Lm8/o;.i:(Ljava/util/concurrent/Executor;)Lm8/o$b;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L31f1a4.  v0:= new `m8.o$b`;
  #L31f1a8.  call `<init>`(v0, v1) @signature `Lm8/o$b;.<init>:(Ljava/util/concurrent/Executor;)V` @kind direct;
  #L31f1ae.  return v0 @kind object;
}
procedure `void` `j`(`m8.o` v5 @kind this, `java.util.List` v6 @kind object) @signature `Lm8/o;.j:(Ljava/util/List;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L31f310.  v0:= new `java.util.ArrayList`;
  #L31f314.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L31f31a.  @monitorenter v5
  #L31f31c.  v1:= v5.`m8.o.d` @type ^`java.util.List` @kind object;
  #L31f320.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L31f326.  v1:= temp @kind object;
  #L31f328.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L31f32e.  v2:= temp;
  #L31f330.  if v2 == 0 then goto L31f372;
  #L31f334.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L31f33a.  v2:= temp @kind object;
  #L31f33c.  v2:= (`h9.b`) v2 @kind object;
  #L31f340.  call temp:= `get`(v2) @signature `Lh9/b;.get:()Ljava/lang/Object;` @kind interface;
  #L31f346.  v2:= temp @kind object;
  #L31f348.  v2:= (`com.google.firebase.components.ComponentRegistrar`) v2 @kind object;
  #L31f34c.  if v2 == 0 then goto L31f328;
  #L31f350.  v3:= v5.`m8.o.g` @type ^`m8.j` @kind object;
  #L31f354.  call temp:= `a`(v3, v2) @signature `Lm8/j;.a:(Lcom/google/firebase/components/ComponentRegistrar;)Ljava/util/List;` @kind interface;
  #L31f35a.  v2:= temp @kind object;
  #L31f35c.  call temp:= `addAll`(v6, v2) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L31f362.  call `remove`(v1) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L31f368.  goto L31f328;
  #L31f36a.  call `remove`(v1) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L31f370.  goto L31f328;
  #L31f372.  v1:= v5.`m8.o.a` @type ^`java.util.Map` @kind object;
  #L31f376.  call temp:= `isEmpty`(v1) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L31f37c.  v1:= temp;
  #L31f37e.  if v1 == 0 then goto L31f38a;
  #L31f382.  call `a`(v6) @signature `Lm8/q;.a:(Ljava/util/List;)V` @kind static;
  #L31f388.  goto L31f3ac;
  #L31f38a.  v1:= new `java.util.ArrayList`;
  #L31f38e.  v2:= v5.`m8.o.a` @type ^`java.util.Map` @kind object;
  #L31f392.  call temp:= `keySet`(v2) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L31f398.  v2:= temp @kind object;
  #L31f39a.  call `<init>`(v1, v2) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L31f3a0.  call temp:= `addAll`(v1, v6) @signature `Ljava/util/ArrayList;.addAll:(Ljava/util/Collection;)Z` @kind virtual;
  #L31f3a6.  call `a`(v1) @signature `Lm8/q;.a:(Ljava/util/List;)V` @kind static;
  #L31f3ac.  call temp:= `iterator`(v6) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L31f3b2.  v1:= temp @kind object;
  #L31f3b4.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L31f3ba.  v2:= temp;
  #L31f3bc.  if v2 == 0 then goto L31f3ec;
  #L31f3c0.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L31f3c6.  v2:= temp @kind object;
  #L31f3c8.  v2:= (`m8.d`) v2 @kind object;
  #L31f3cc.  v3:= new `m8.x`;
  #L31f3d0.  v4:= new `m8.k`;
  #L31f3d4.  call `<init>`(v4, v5, v2) @signature `Lm8/k;.<init>:(Lm8/o;Lm8/d;)V` @kind direct;
  #L31f3da.  call `<init>`(v3, v4) @signature `Lm8/x;.<init>:(Lh9/b;)V` @kind direct;
  #L31f3e0.  v4:= v5.`m8.o.a` @type ^`java.util.Map` @kind object;
  #L31f3e4.  call temp:= `put`(v4, v2, v3) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L31f3ea.  goto L31f3b4;
  #L31f3ec.  call temp:= `s`(v5, v6) @signature `Lm8/o;.s:(Ljava/util/List;)Ljava/util/List;` @kind direct;
  #L31f3f2.  v6:= temp @kind object;
  #L31f3f4.  call temp:= `addAll`(v0, v6) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L31f3fa.  call temp:= `t`(v5) @signature `Lm8/o;.t:()Ljava/util/List;` @kind direct;
  #L31f400.  v6:= temp @kind object;
  #L31f402.  call temp:= `addAll`(v0, v6) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L31f408.  call `r`(v5) @signature `Lm8/o;.r:()V` @kind direct;
  #L31f40e.  @monitorexit v5
  #L31f410.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L31f416.  v6:= temp @kind object;
  #L31f418.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L31f41e.  v0:= temp;
  #L31f420.  if v0 == 0 then goto L31f438;
  #L31f424.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L31f42a.  v0:= temp @kind object;
  #L31f42c.  v0:= (`java.lang.Runnable`) v0 @kind object;
  #L31f430.  call `run`(v0) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L31f436.  goto L31f418;
  #L31f438.  call `q`(v5) @signature `Lm8/o;.q:()V` @kind direct;
  #L31f43e.  return @kind void;
  #L31f440.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L31f442.  @monitorexit v5
  #L31f444.  throw v6;
  catch `java.lang.Throwable` @[L31f31c..L31f340] goto L31f440;
  catch `m8.w` @[L31f340..L31f368] goto L31f36a;
  catch `java.lang.Throwable` @[L31f340..L31f368] goto L31f440;
  catch `java.lang.Throwable` @[L31f36a..L31f410] goto L31f440;
  catch `java.lang.Throwable` @[L31f442..L31f444] goto L31f440;
}
procedure `void` `k`(`m8.o` v3 @kind this, `java.util.Map` v4 @kind object, `boolean` v5 ) @signature `Lm8/o;.k:(Ljava/util/Map;Z)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L31f484.  call temp:= `entrySet`(v4) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L31f48a.  v4:= temp @kind object;
  #L31f48c.  call temp:= `iterator`(v4) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L31f492.  v4:= temp @kind object;
  #L31f494.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L31f49a.  v0:= temp;
  #L31f49c.  if v0 == 0 then goto L31f4e8;
  #L31f4a0.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L31f4a6.  v0:= temp @kind object;
  #L31f4a8.  v0:= (`java.util.Map$Entry`) v0 @kind object;
  #L31f4ac.  call temp:= `getKey`(v0) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L31f4b2.  v1:= temp @kind object;
  #L31f4b4.  v1:= (`m8.d`) v1 @kind object;
  #L31f4b8.  call temp:= `getValue`(v0) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L31f4be.  v0:= temp @kind object;
  #L31f4c0.  v0:= (`h9.b`) v0 @kind object;
  #L31f4c4.  call temp:= `l`(v1) @signature `Lm8/d;.l:()Z` @kind virtual;
  #L31f4ca.  v2:= temp;
  #L31f4cc.  if v2 != 0 then goto L31f4e0;
  #L31f4d0.  call temp:= `m`(v1) @signature `Lm8/d;.m:()Z` @kind virtual;
  #L31f4d6.  v1:= temp;
  #L31f4d8.  if v1 == 0 then goto L31f494;
  #L31f4dc.  if v5 == 0 then goto L31f494;
  #L31f4e0.  call temp:= `get`(v0) @signature `Lh9/b;.get:()Ljava/lang/Object;` @kind interface;
  #L31f4e6.  goto L31f494;
  #L31f4e8.  v4:= v3.`m8.o.e` @type ^`m8.v` @kind object;
  #L31f4ec.  call `e`(v4) @signature `Lm8/v;.e:()V` @kind virtual;
  #L31f4f2.  return @kind void;
}
procedure `java.util.List` `m`(`java.lang.Iterable` v2 @kind object) @signature `Lm8/o;.m:(Ljava/lang/Iterable;)Ljava/util/List;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L31ef0c.  v0:= new `java.util.ArrayList`;
  #L31ef10.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L31ef16.  call temp:= `iterator`(v2) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L31ef1c.  v2:= temp @kind object;
  #L31ef1e.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L31ef24.  v1:= temp;
  #L31ef26.  if v1 == 0 then goto L31ef3a;
  #L31ef2a.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L31ef30.  v1:= temp @kind object;
  #L31ef32.  call temp:= `add`(v0, v1) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L31ef38.  goto L31ef1e;
  #L31ef3a.  return v0 @kind object;
}
procedure `java.lang.Object` `n`(`m8.o` v2 @kind this, `m8.d` v3 @kind object) @signature `Lm8/o;.n:(Lm8/d;)Ljava/lang/Object;` @AccessFlag PRIVATE_SYNTHETIC {
    temp;
    v0;
    v1;

  #L31eee0.  call temp:= `f`(v3) @signature `Lm8/d;.f:()Lm8/h;` @kind virtual;
  #L31eee6.  v0:= temp @kind object;
  #L31eee8.  v1:= new `m8.f0`;
  #L31eeec.  call `<init>`(v1, v3, v2) @signature `Lm8/f0;.<init>:(Lm8/d;Lm8/e;)V` @kind direct;
  #L31eef2.  call temp:= `a`(v0, v1) @signature `Lm8/h;.a:(Lm8/e;)Ljava/lang/Object;` @kind interface;
  #L31eef8.  v3:= temp @kind object;
  #L31eefa.  return v3 @kind object;
}
procedure `void` `o`(`m8.d0` v0 @kind object, `h9.b` v1 @kind object) @signature `Lm8/o;.o:(Lm8/d0;Lh9/b;)V` @AccessFlag PRIVATE_STATIC_SYNTHETIC {
    temp;

  #L31f564.  call `j`(v0, v1) @signature `Lm8/d0;.j:(Lh9/b;)V` @kind virtual;
  #L31f56a.  return @kind void;
}
procedure `void` `p`(`m8.y` v0 @kind object, `h9.b` v1 @kind object) @signature `Lm8/o;.p:(Lm8/y;Lh9/b;)V` @AccessFlag PRIVATE_STATIC_SYNTHETIC {
    temp;

  #L31f57c.  call `a`(v0, v1) @signature `Lm8/y;.a:(Lh9/b;)V` @kind virtual;
  #L31f582.  return @kind void;
}
procedure `void` `q`(`m8.o` v2 @kind this) @signature `Lm8/o;.q:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L31f594.  v0:= v2.`m8.o.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L31f598.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L31f59e.  v0:= temp @kind object;
  #L31f5a0.  v0:= (`java.lang.Boolean`) v0 @kind object;
  #L31f5a4.  if v0 == 0 then goto L31f5ba;
  #L31f5a8.  v1:= v2.`m8.o.a` @type ^`java.util.Map` @kind object;
  #L31f5ac.  call temp:= `booleanValue`(v0) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L31f5b2.  v0:= temp;
  #L31f5b4.  call `k`(v2, v1, v0) @signature `Lm8/o;.k:(Ljava/util/Map;Z)V` @kind direct;
  #L31f5ba.  return @kind void;
}
procedure `void` `r`(`m8.o` v6 @kind this) @signature `Lm8/o;.r:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L31f5cc.  v0:= v6.`m8.o.a` @type ^`java.util.Map` @kind object;
  #L31f5d0.  call temp:= `keySet`(v0) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L31f5d6.  v0:= temp @kind object;
  #L31f5d8.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L31f5de.  v0:= temp @kind object;
  #L31f5e0.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L31f5e6.  v1:= temp;
  #L31f5e8.  if v1 == 0 then goto L31f6e6;
  #L31f5ec.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L31f5f2.  v1:= temp @kind object;
  #L31f5f4.  v1:= (`m8.d`) v1 @kind object;
  #L31f5f8.  call temp:= `e`(v1) @signature `Lm8/d;.e:()Ljava/util/Set;` @kind virtual;
  #L31f5fe.  v2:= temp @kind object;
  #L31f600.  call temp:= `iterator`(v2) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L31f606.  v2:= temp @kind object;
  #L31f608.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L31f60e.  v3:= temp;
  #L31f610.  if v3 == 0 then goto L31f5e0;
  #L31f614.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L31f61a.  v3:= temp @kind object;
  #L31f61c.  v3:= (`m8.r`) v3 @kind object;
  #L31f620.  call temp:= `g`(v3) @signature `Lm8/r;.g:()Z` @kind virtual;
  #L31f626.  v4:= temp;
  #L31f628.  if v4 == 0 then goto L31f668;
  #L31f62c.  v4:= v6.`m8.o.c` @type ^`java.util.Map` @kind object;
  #L31f630.  call temp:= `c`(v3) @signature `Lm8/r;.c:()Ljava/lang/Class;` @kind virtual;
  #L31f636.  v5:= temp @kind object;
  #L31f638.  call temp:= `containsKey`(v4, v5) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L31f63e.  v4:= temp;
  #L31f640.  if v4 != 0 then goto L31f668;
  #L31f644.  v4:= v6.`m8.o.c` @type ^`java.util.Map` @kind object;
  #L31f648.  call temp:= `c`(v3) @signature `Lm8/r;.c:()Ljava/lang/Class;` @kind virtual;
  #L31f64e.  v3:= temp @kind object;
  #L31f650.  call temp:= `emptySet`() @signature `Ljava/util/Collections;.emptySet:()Ljava/util/Set;` @kind static;
  #L31f656.  v5:= temp @kind object;
  #L31f658.  call temp:= `b`(v5) @signature `Lm8/y;.b:(Ljava/util/Collection;)Lm8/y;` @kind static;
  #L31f65e.  v5:= temp @kind object;
  #L31f660.  call temp:= `put`(v4, v3, v5) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L31f666.  goto L31f608;
  #L31f668.  v4:= v6.`m8.o.b` @type ^`java.util.Map` @kind object;
  #L31f66c.  call temp:= `c`(v3) @signature `Lm8/r;.c:()Ljava/lang/Class;` @kind virtual;
  #L31f672.  v5:= temp @kind object;
  #L31f674.  call temp:= `containsKey`(v4, v5) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L31f67a.  v4:= temp;
  #L31f67c.  if v4 != 0 then goto L31f608;
  #L31f680.  call temp:= `f`(v3) @signature `Lm8/r;.f:()Z` @kind virtual;
  #L31f686.  v4:= temp;
  #L31f688.  if v4 != 0 then goto L31f6b4;
  #L31f68c.  call temp:= `g`(v3) @signature `Lm8/r;.g:()Z` @kind virtual;
  #L31f692.  v4:= temp;
  #L31f694.  if v4 != 0 then goto L31f608;
  #L31f698.  v4:= v6.`m8.o.b` @type ^`java.util.Map` @kind object;
  #L31f69c.  call temp:= `c`(v3) @signature `Lm8/r;.c:()Ljava/lang/Class;` @kind virtual;
  #L31f6a2.  v3:= temp @kind object;
  #L31f6a4.  call temp:= `e`() @signature `Lm8/d0;.e:()Lm8/d0;` @kind static;
  #L31f6aa.  v5:= temp @kind object;
  #L31f6ac.  call temp:= `put`(v4, v3, v5) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L31f6b2.  goto L31f608;
  #L31f6b4.  v0:= new `m8.z`;
  #L31f6b8.  v2:= 2I;
  #L31f6ba.  v2:= new `java.lang.Object`[v2];
  #L31f6be.  v4:= 0I;
  #L31f6c0.  v2[v4]:= v1 @kind object;
  #L31f6c4.  v1:= 1I;
  #L31f6c6.  call temp:= `c`(v3) @signature `Lm8/r;.c:()Ljava/lang/Class;` @kind virtual;
  #L31f6cc.  v3:= temp @kind object;
  #L31f6ce.  v2[v1]:= v3 @kind object;
  #L31f6d2.  v1:= "Unsatisfied dependency for component %s: %s" @kind object;
  #L31f6d6.  call temp:= `format`(v1, v2) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L31f6dc.  v1:= temp @kind object;
  #L31f6de.  call `<init>`(v0, v1) @signature `Lm8/z;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L31f6e4.  throw v0;
  #L31f6e6.  return @kind void;
}
procedure `java.util.List` `s`(`m8.o` v5 @kind this, `java.util.List` v6 @kind object) @signature `Lm8/o;.s:(Ljava/util/List;)Ljava/util/List;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L31ef4c.  v0:= new `java.util.ArrayList`;
  #L31ef50.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L31ef56.  call temp:= `iterator`(v6) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L31ef5c.  v6:= temp @kind object;
  #L31ef5e.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L31ef64.  v1:= temp;
  #L31ef66.  if v1 == 0 then goto L31effe;
  #L31ef6a.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L31ef70.  v1:= temp @kind object;
  #L31ef72.  v1:= (`m8.d`) v1 @kind object;
  #L31ef76.  call temp:= `n`(v1) @signature `Lm8/d;.n:()Z` @kind virtual;
  #L31ef7c.  v2:= temp;
  #L31ef7e.  if v2 != 0 then goto L31ef84;
  #L31ef82.  goto L31ef5e;
  #L31ef84.  v2:= v5.`m8.o.a` @type ^`java.util.Map` @kind object;
  #L31ef88.  call temp:= `get`(v2, v1) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L31ef8e.  v2:= temp @kind object;
  #L31ef90.  v2:= (`h9.b`) v2 @kind object;
  #L31ef94.  call temp:= `h`(v1) @signature `Lm8/d;.h:()Ljava/util/Set;` @kind virtual;
  #L31ef9a.  v1:= temp @kind object;
  #L31ef9c.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L31efa2.  v1:= temp @kind object;
  #L31efa4.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L31efaa.  v3:= temp;
  #L31efac.  if v3 == 0 then goto L31ef5e;
  #L31efb0.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L31efb6.  v3:= temp @kind object;
  #L31efb8.  v3:= (`java.lang.Class`) v3 @kind object;
  #L31efbc.  v4:= v5.`m8.o.b` @type ^`java.util.Map` @kind object;
  #L31efc0.  call temp:= `containsKey`(v4, v3) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L31efc6.  v4:= temp;
  #L31efc8.  if v4 != 0 then goto L31efd8;
  #L31efcc.  v4:= v5.`m8.o.b` @type ^`java.util.Map` @kind object;
  #L31efd0.  call temp:= `put`(v4, v3, v2) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L31efd6.  goto L31efa4;
  #L31efd8.  v4:= v5.`m8.o.b` @type ^`java.util.Map` @kind object;
  #L31efdc.  call temp:= `get`(v4, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L31efe2.  v3:= temp @kind object;
  #L31efe4.  v3:= (`h9.b`) v3 @kind object;
  #L31efe8.  v3:= (`m8.d0`) v3 @kind object;
  #L31efec.  v4:= new `m8.n`;
  #L31eff0.  call `<init>`(v4, v3, v2) @signature `Lm8/n;.<init>:(Lm8/d0;Lh9/b;)V` @kind direct;
  #L31eff6.  call temp:= `add`(v0, v4) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L31effc.  goto L31efa4;
  #L31effe.  return v0 @kind object;
}
procedure `java.util.List` `t`(`m8.o` v7 @kind this) @signature `Lm8/o;.t:()Ljava/util/List;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L31f010.  v0:= new `java.util.ArrayList`;
  #L31f014.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L31f01a.  v1:= new `java.util.HashMap`;
  #L31f01e.  call `<init>`(v1) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L31f024.  v2:= v7.`m8.o.a` @type ^`java.util.Map` @kind object;
  #L31f028.  call temp:= `entrySet`(v2) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L31f02e.  v2:= temp @kind object;
  #L31f030.  call temp:= `iterator`(v2) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L31f036.  v2:= temp @kind object;
  #L31f038.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L31f03e.  v3:= temp;
  #L31f040.  if v3 == 0 then goto L31f0ce;
  #L31f044.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L31f04a.  v3:= temp @kind object;
  #L31f04c.  v3:= (`java.util.Map$Entry`) v3 @kind object;
  #L31f050.  call temp:= `getKey`(v3) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L31f056.  v4:= temp @kind object;
  #L31f058.  v4:= (`m8.d`) v4 @kind object;
  #L31f05c.  call temp:= `n`(v4) @signature `Lm8/d;.n:()Z` @kind virtual;
  #L31f062.  v5:= temp;
  #L31f064.  if v5 == 0 then goto L31f06a;
  #L31f068.  goto L31f038;
  #L31f06a.  call temp:= `getValue`(v3) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L31f070.  v3:= temp @kind object;
  #L31f072.  v3:= (`h9.b`) v3 @kind object;
  #L31f076.  call temp:= `h`(v4) @signature `Lm8/d;.h:()Ljava/util/Set;` @kind virtual;
  #L31f07c.  v4:= temp @kind object;
  #L31f07e.  call temp:= `iterator`(v4) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L31f084.  v4:= temp @kind object;
  #L31f086.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L31f08c.  v5:= temp;
  #L31f08e.  if v5 == 0 then goto L31f038;
  #L31f092.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L31f098.  v5:= temp @kind object;
  #L31f09a.  v5:= (`java.lang.Class`) v5 @kind object;
  #L31f09e.  call temp:= `containsKey`(v1, v5) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L31f0a4.  v6:= temp;
  #L31f0a6.  if v6 != 0 then goto L31f0ba;
  #L31f0aa.  v6:= new `java.util.HashSet`;
  #L31f0ae.  call `<init>`(v6) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L31f0b4.  call temp:= `put`(v1, v5, v6) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L31f0ba.  call temp:= `get`(v1, v5) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L31f0c0.  v5:= temp @kind object;
  #L31f0c2.  v5:= (`java.util.Set`) v5 @kind object;
  #L31f0c6.  call temp:= `add`(v5, v3) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L31f0cc.  goto L31f086;
  #L31f0ce.  call temp:= `entrySet`(v1) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L31f0d4.  v1:= temp @kind object;
  #L31f0d6.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L31f0dc.  v1:= temp @kind object;
  #L31f0de.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L31f0e4.  v2:= temp;
  #L31f0e6.  if v2 == 0 then goto L31f190;
  #L31f0ea.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L31f0f0.  v2:= temp @kind object;
  #L31f0f2.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L31f0f6.  v3:= v7.`m8.o.c` @type ^`java.util.Map` @kind object;
  #L31f0fa.  call temp:= `getKey`(v2) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L31f100.  v4:= temp @kind object;
  #L31f102.  call temp:= `containsKey`(v3, v4) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L31f108.  v3:= temp;
  #L31f10a.  if v3 != 0 then goto L31f13a;
  #L31f10e.  v3:= v7.`m8.o.c` @type ^`java.util.Map` @kind object;
  #L31f112.  call temp:= `getKey`(v2) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L31f118.  v4:= temp @kind object;
  #L31f11a.  v4:= (`java.lang.Class`) v4 @kind object;
  #L31f11e.  call temp:= `getValue`(v2) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L31f124.  v2:= temp @kind object;
  #L31f126.  v2:= (`java.util.Collection`) v2 @kind object;
  #L31f12a.  call temp:= `b`(v2) @signature `Lm8/y;.b:(Ljava/util/Collection;)Lm8/y;` @kind static;
  #L31f130.  v2:= temp @kind object;
  #L31f132.  call temp:= `put`(v3, v4, v2) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L31f138.  goto L31f0de;
  #L31f13a.  v3:= v7.`m8.o.c` @type ^`java.util.Map` @kind object;
  #L31f13e.  call temp:= `getKey`(v2) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L31f144.  v4:= temp @kind object;
  #L31f146.  call temp:= `get`(v3, v4) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L31f14c.  v3:= temp @kind object;
  #L31f14e.  v3:= (`m8.y`) v3 @kind object;
  #L31f152.  call temp:= `getValue`(v2) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L31f158.  v2:= temp @kind object;
  #L31f15a.  v2:= (`java.util.Set`) v2 @kind object;
  #L31f15e.  call temp:= `iterator`(v2) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L31f164.  v2:= temp @kind object;
  #L31f166.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L31f16c.  v4:= temp;
  #L31f16e.  if v4 == 0 then goto L31f0de;
  #L31f172.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L31f178.  v4:= temp @kind object;
  #L31f17a.  v4:= (`h9.b`) v4 @kind object;
  #L31f17e.  v5:= new `m8.m`;
  #L31f182.  call `<init>`(v5, v3, v4) @signature `Lm8/m;.<init>:(Lm8/y;Lh9/b;)V` @kind direct;
  #L31f188.  call temp:= `add`(v0, v5) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L31f18e.  goto L31f166;
  #L31f190.  return v0 @kind object;
}
procedure `h9.b` `b`(`m8.o` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lm8/o;.b:(Ljava/lang/Class;)Lh9/b;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L31ee34.  @monitorenter v1
  #L31ee36.  v0:= "Null interface requested." @kind object;
  #L31ee3a.  call temp:= `c`(v2, v0) @signature `Lm8/e0;.c:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L31ee40.  v0:= v1.`m8.o.b` @type ^`java.util.Map` @kind object;
  #L31ee44.  call temp:= `get`(v0, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L31ee4a.  v2:= temp @kind object;
  #L31ee4c.  v2:= (`h9.b`) v2 @kind object;
  #L31ee50.  @monitorexit v1
  #L31ee52.  return v2 @kind object;
  #L31ee54.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L31ee56.  @monitorexit v1
  #L31ee58.  throw v2;
  catch `java.lang.Throwable` @[L31ee36..L31ee50] goto L31ee54;
}
procedure `h9.b` `c`(`m8.o` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lm8/o;.c:(Ljava/lang/Class;)Lh9/b;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L31ee78.  @monitorenter v1
  #L31ee7a.  v0:= v1.`m8.o.c` @type ^`java.util.Map` @kind object;
  #L31ee7e.  call temp:= `get`(v0, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L31ee84.  v2:= temp @kind object;
  #L31ee86.  v2:= (`m8.y`) v2 @kind object;
  #L31ee8a.  if v2 == 0 then goto L31ee92;
  #L31ee8e.  @monitorexit v1
  #L31ee90.  return v2 @kind object;
  #L31ee92.  v2:= `@@m8.o.h` @type ^`h9.b` @kind object;
  #L31ee96.  @monitorexit v1
  #L31ee98.  return v2 @kind object;
  #L31ee9a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L31ee9c.  @monitorexit v1
  #L31ee9e.  throw v2;
  catch `java.lang.Throwable` @[L31ee7a..L31ee8a] goto L31ee9a;
  catch `java.lang.Throwable` @[L31ee92..L31ee96] goto L31ee9a;
}
procedure `h9.a` `e`(`m8.o` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lm8/o;.e:(Ljava/lang/Class;)Lh9/a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L31edf4.  call temp:= `b`(v1, v2) @signature `Lm8/o;.b:(Ljava/lang/Class;)Lh9/b;` @kind virtual;
  #L31edfa.  v2:= temp @kind object;
  #L31edfc.  if v2 != 0 then goto L31ee0a;
  #L31ee00.  call temp:= `e`() @signature `Lm8/d0;.e:()Lm8/d0;` @kind static;
  #L31ee06.  v2:= temp @kind object;
  #L31ee08.  return v2 @kind object;
  #L31ee0a.  v0:= instanceof @variable v2 @type ^`m8.d0` @kind boolean;
  #L31ee0e.  if v0 == 0 then goto L31ee18;
  #L31ee12.  v2:= (`m8.d0`) v2 @kind object;
  #L31ee16.  return v2 @kind object;
  #L31ee18.  call temp:= `i`(v2) @signature `Lm8/d0;.i:(Lh9/b;)Lm8/d0;` @kind static;
  #L31ee1e.  v2:= temp @kind object;
  #L31ee20.  return v2 @kind object;
}
procedure `void` `l`(`m8.o` v3 @kind this, `boolean` v4 ) @signature `Lm8/o;.l:(Z)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L31f504.  v0:= v3.`m8.o.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L31f508.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L31f50e.  v1:= temp @kind object;
  #L31f510.  v2:= 0I;
  #L31f512.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L31f518.  v0:= temp;
  #L31f51a.  if v0 != 0 then goto L31f520;
  #L31f51e.  return @kind void;
  #L31f520.  @monitorenter v3
  #L31f522.  v0:= new `java.util.HashMap`;
  #L31f526.  v1:= v3.`m8.o.a` @type ^`java.util.Map` @kind object;
  #L31f52a.  call `<init>`(v0, v1) @signature `Ljava/util/HashMap;.<init>:(Ljava/util/Map;)V` @kind direct;
  #L31f530.  @monitorexit v3
  #L31f532.  call `k`(v3, v0, v4) @signature `Lm8/o;.k:(Ljava/util/Map;Z)V` @kind direct;
  #L31f538.  return @kind void;
  #L31f53a.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L31f53c.  @monitorexit v3
  #L31f53e.  throw v4;
  catch `java.lang.Throwable` @[L31f522..L31f532] goto L31f53a;
  catch `java.lang.Throwable` @[L31f53c..L31f53e] goto L31f53a;
}
