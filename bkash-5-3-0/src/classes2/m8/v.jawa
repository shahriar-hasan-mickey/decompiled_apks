record `m8.v` @kind class @AccessFlag  extends `e9.d` @kind interface, `e9.c` @kind interface {
  `java.util.Map` `m8.v.a` @AccessFlag PRIVATE_FINAL;
  `java.util.Queue` `m8.v.b` @AccessFlag PRIVATE;
  `java.util.concurrent.Executor` `m8.v.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`m8.v` v1 @kind this, `java.util.concurrent.Executor` v2 @kind object) @signature `Lm8/v;.<init>:(Ljava/util/concurrent/Executor;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L320398.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L32039e.  v0:= new `java.util.HashMap`;
  #L3203a2.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L3203a8.  v1.`m8.v.a` @type ^`java.util.Map` := v0 @kind object;
  #L3203ac.  v0:= new `java.util.ArrayDeque`;
  #L3203b0.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L3203b6.  v1.`m8.v.b` @type ^`java.util.Queue` := v0 @kind object;
  #L3203ba.  v1.`m8.v.c` @type ^`java.util.concurrent.Executor` := v2 @kind object;
  #L3203be.  return @kind void;
}
procedure `void` `d`(`java.util.Map$Entry` v0 @kind object, `e9.a` v1 @kind object) @signature `Lm8/v;.d:(Ljava/util/Map$Entry;Le9/a;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L320380.  call `g`(v0, v1) @signature `Lm8/v;.g:(Ljava/util/Map$Entry;Le9/a;)V` @kind static;
  #L320386.  return @kind void;
}
procedure `java.util.Set` `f`(`m8.v` v1 @kind this, `e9.a` v2 @kind object) @signature `Lm8/v;.f:(Le9/a;)Ljava/util/Set;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L320328.  @monitorenter v1
  #L32032a.  v0:= v1.`m8.v.a` @type ^`java.util.Map` @kind object;
  #L32032e.  call temp:= `a`(v2) @signature `Le9/a;.a:()Ljava/lang/Class;` @kind virtual;
  #L320334.  v2:= temp @kind object;
  #L320336.  call temp:= `get`(v0, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L32033c.  v2:= temp @kind object;
  #L32033e.  v2:= (`java.util.Map`) v2 @kind object;
  #L320342.  if v2 != 0 then goto L320350;
  #L320346.  call temp:= `emptySet`() @signature `Ljava/util/Collections;.emptySet:()Ljava/util/Set;` @kind static;
  #L32034c.  v2:= temp @kind object;
  #L32034e.  goto L320358;
  #L320350.  call temp:= `entrySet`(v2) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L320356.  v2:= temp @kind object;
  #L320358.  @monitorexit v1
  #L32035a.  return v2 @kind object;
  #L32035c.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L32035e.  @monitorexit v1
  #L320360.  throw v2;
  catch `java.lang.Throwable` @[L32032a..L320358] goto L32035c;
}
procedure `void` `g`(`java.util.Map$Entry` v0 @kind object, `e9.a` v1 @kind object) @signature `Lm8/v;.g:(Ljava/util/Map$Entry;Le9/a;)V` @AccessFlag PRIVATE_STATIC_SYNTHETIC {
    temp;

  #L320440.  call temp:= `getKey`(v0) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L320446.  v0:= temp @kind object;
  #L320448.  v0:= (`e9.b`) v0 @kind object;
  #L32044c.  call `a`(v0, v1) @signature `Le9/b;.a:(Le9/a;)V` @kind interface;
  #L320452.  return @kind void;
}
procedure `void` `a`(`m8.v` v4 @kind this, `e9.a` v5 @kind object) @signature `Lm8/v;.a:(Le9/a;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L320464.  call temp:= `b`(v5) @signature `Lm8/e0;.b:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L32046a.  @monitorenter v4
  #L32046c.  v0:= v4.`m8.v.b` @type ^`java.util.Queue` @kind object;
  #L320470.  if v0 == 0 then goto L32047e;
  #L320474.  call temp:= `add`(v0, v5) @signature `Ljava/util/Queue;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L32047a.  @monitorexit v4
  #L32047c.  return @kind void;
  #L32047e.  @monitorexit v4
  #L320480.  call temp:= `f`(v4, v5) @signature `Lm8/v;.f:(Le9/a;)Ljava/util/Set;` @kind direct;
  #L320486.  v0:= temp @kind object;
  #L320488.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L32048e.  v0:= temp @kind object;
  #L320490.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L320496.  v1:= temp;
  #L320498.  if v1 == 0 then goto L3204c6;
  #L32049c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3204a2.  v1:= temp @kind object;
  #L3204a4.  v1:= (`java.util.Map$Entry`) v1 @kind object;
  #L3204a8.  call temp:= `getValue`(v1) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L3204ae.  v2:= temp @kind object;
  #L3204b0.  v2:= (`java.util.concurrent.Executor`) v2 @kind object;
  #L3204b4.  v3:= new `m8.u`;
  #L3204b8.  call `<init>`(v3, v1, v5) @signature `Lm8/u;.<init>:(Ljava/util/Map$Entry;Le9/a;)V` @kind direct;
  #L3204be.  call `execute`(v2, v3) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L3204c4.  goto L320490;
  #L3204c6.  return @kind void;
  #L3204c8.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3204ca.  @monitorexit v4
  #L3204cc.  throw v5;
  catch `java.lang.Throwable` @[L32046c..L320480] goto L3204c8;
  catch `java.lang.Throwable` @[L3204ca..L3204cc] goto L3204c8;
}
procedure `void` `b`(`m8.v` v1 @kind this, `java.lang.Class` v2 @kind object, `e9.b` v3 @kind object) @signature `Lm8/v;.b:(Ljava/lang/Class;Le9/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L320584.  @monitorenter v1
  #L320586.  call temp:= `b`(v2) @signature `Lm8/e0;.b:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L32058c.  call temp:= `b`(v3) @signature `Lm8/e0;.b:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L320592.  v0:= v1.`m8.v.a` @type ^`java.util.Map` @kind object;
  #L320596.  call temp:= `containsKey`(v0, v2) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L32059c.  v0:= temp;
  #L32059e.  if v0 != 0 then goto L3205a6;
  #L3205a2.  @monitorexit v1
  #L3205a4.  return @kind void;
  #L3205a6.  v0:= v1.`m8.v.a` @type ^`java.util.Map` @kind object;
  #L3205aa.  call temp:= `get`(v0, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3205b0.  v0:= temp @kind object;
  #L3205b2.  v0:= (`java.util.concurrent.ConcurrentHashMap`) v0 @kind object;
  #L3205b6.  call temp:= `remove`(v0, v3) @signature `Ljava/util/concurrent/ConcurrentHashMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3205bc.  call temp:= `isEmpty`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.isEmpty:()Z` @kind virtual;
  #L3205c2.  v3:= temp;
  #L3205c4.  if v3 == 0 then goto L3205d2;
  #L3205c8.  v3:= v1.`m8.v.a` @type ^`java.util.Map` @kind object;
  #L3205cc.  call temp:= `remove`(v3, v2) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L3205d2.  @monitorexit v1
  #L3205d4.  return @kind void;
  #L3205d6.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3205d8.  @monitorexit v1
  #L3205da.  throw v2;
  catch `java.lang.Throwable` @[L320586..L32059e] goto L3205d6;
  catch `java.lang.Throwable` @[L3205a6..L3205d2] goto L3205d6;
}
procedure `void` `c`(`m8.v` v1 @kind this, `java.lang.Class` v2 @kind object, `e9.b` v3 @kind object) @signature `Lm8/v;.c:(Ljava/lang/Class;Le9/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3204f4.  v0:= v1.`m8.v.c` @type ^`java.util.concurrent.Executor` @kind object;
  #L3204f8.  call `h`(v1, v2, v0, v3) @signature `Lm8/v;.h:(Ljava/lang/Class;Ljava/util/concurrent/Executor;Le9/b;)V` @kind virtual;
  #L3204fe.  return @kind void;
}
procedure `void` `e`(`m8.v` v2 @kind this) @signature `Lm8/v;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L3203d0.  @monitorenter v2
  #L3203d2.  v0:= v2.`m8.v.b` @type ^`java.util.Queue` @kind object;
  #L3203d6.  v1:= 0I;
  #L3203d8.  if v0 == 0 then goto L3203e2;
  #L3203dc.  v2.`m8.v.b` @type ^`java.util.Queue` := v1 @kind object;
  #L3203e0.  goto L3203e4;
  #L3203e2.  v0:= v1 @kind object;
  #L3203e4.  @monitorexit v2
  #L3203e6.  if v0 == 0 then goto L320412;
  #L3203ea.  call temp:= `iterator`(v0) @signature `Ljava/util/Queue;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3203f0.  v0:= temp @kind object;
  #L3203f2.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3203f8.  v1:= temp;
  #L3203fa.  if v1 == 0 then goto L320412;
  #L3203fe.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L320404.  v1:= temp @kind object;
  #L320406.  v1:= (`e9.a`) v1 @kind object;
  #L32040a.  call `a`(v2, v1) @signature `Lm8/v;.a:(Le9/a;)V` @kind virtual;
  #L320410.  goto L3203f2;
  #L320412.  return @kind void;
  #L320414.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L320416.  @monitorexit v2
  #L320418.  throw v0;
  catch `java.lang.Throwable` @[L3203d2..L3203e6] goto L320414;
  catch `java.lang.Throwable` @[L320416..L320418] goto L320414;
}
procedure `void` `h`(`m8.v` v2 @kind this, `java.lang.Class` v3 @kind object, `java.util.concurrent.Executor` v4 @kind object, `e9.b` v5 @kind object) @signature `Lm8/v;.h:(Ljava/lang/Class;Ljava/util/concurrent/Executor;Le9/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L320510.  @monitorenter v2
  #L320512.  call temp:= `b`(v3) @signature `Lm8/e0;.b:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L320518.  call temp:= `b`(v5) @signature `Lm8/e0;.b:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L32051e.  call temp:= `b`(v4) @signature `Lm8/e0;.b:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L320524.  v0:= v2.`m8.v.a` @type ^`java.util.Map` @kind object;
  #L320528.  call temp:= `containsKey`(v0, v3) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L32052e.  v0:= temp;
  #L320530.  if v0 != 0 then goto L320548;
  #L320534.  v0:= v2.`m8.v.a` @type ^`java.util.Map` @kind object;
  #L320538.  v1:= new `java.util.concurrent.ConcurrentHashMap`;
  #L32053c.  call `<init>`(v1) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L320542.  call temp:= `put`(v0, v3, v1) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L320548.  v0:= v2.`m8.v.a` @type ^`java.util.Map` @kind object;
  #L32054c.  call temp:= `get`(v0, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L320552.  v3:= temp @kind object;
  #L320554.  v3:= (`java.util.concurrent.ConcurrentHashMap`) v3 @kind object;
  #L320558.  call temp:= `put`(v3, v5, v4) @signature `Ljava/util/concurrent/ConcurrentHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L32055e.  @monitorexit v2
  #L320560.  return @kind void;
  #L320562.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L320564.  @monitorexit v2
  #L320566.  throw v3;
  catch `java.lang.Throwable` @[L320512..L32055e] goto L320562;
}
