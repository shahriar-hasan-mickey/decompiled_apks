record `m8.r` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.Class` `m8.r.a` @AccessFlag PRIVATE_FINAL;
  `int` `m8.r.b` @AccessFlag PRIVATE_FINAL;
  `int` `m8.r.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`m8.r` v1 @kind this, `java.lang.Class` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lm8/r;.<init>:(Ljava/lang/Class;II)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L3202b4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3202ba.  v0:= "Null dependency anInterface." @kind object;
  #L3202be.  call temp:= `c`(v2, v0) @signature `Lm8/e0;.c:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3202c4.  v2:= temp @kind object;
  #L3202c6.  v2:= (`java.lang.Class`) v2 @kind object;
  #L3202ca.  v1.`m8.r.a` @type ^`java.lang.Class` := v2 @kind object;
  #L3202ce.  v1.`m8.r.b` @type ^`int` := v3;
  #L3202d2.  v1.`m8.r.c` @type ^`int` := v4;
  #L3202d6.  return @kind void;
}
procedure `m8.r` `a`(`java.lang.Class` v3 @kind object) @signature `Lm8/r;.a:(Ljava/lang/Class;)Lm8/r;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3201f4.  v0:= new `m8.r`;
  #L3201f8.  v1:= 0I;
  #L3201fa.  v2:= 2I;
  #L3201fc.  call `<init>`(v0, v3, v1, v2) @signature `Lm8/r;.<init>:(Ljava/lang/Class;II)V` @kind direct;
  #L320202.  return v0 @kind object;
}
procedure `java.lang.String` `b`(`int` v3 ) @signature `Lm8/r;.b:(I)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L32010c.  if v3 == 0 then goto L320156;
  #L320110.  v0:= 1I;
  #L320112.  if v3 == v0 then goto L320150;
  #L320116.  v0:= 2I;
  #L320118.  if v3 != v0 then goto L320122;
  #L32011c.  v3:= "deferred" @kind object;
  #L320120.  return v3 @kind object;
  #L320122.  v0:= new `java.lang.AssertionError`;
  #L320126.  v1:= new `java.lang.StringBuilder`;
  #L32012a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L320130.  v2:= "Unsupported injection: " @kind object;
  #L320134.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32013a.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L320140.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L320146.  v3:= temp @kind object;
  #L320148.  call `<init>`(v0, v3) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L32014e.  throw v0;
  #L320150.  v3:= "provider" @kind object;
  #L320154.  return v3 @kind object;
  #L320156.  v3:= "direct" @kind object;
  #L32015a.  return v3 @kind object;
}
procedure `m8.r` `h`(`java.lang.Class` v2 @kind object) @signature `Lm8/r;.h:(Ljava/lang/Class;)Lm8/r;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L320214.  v0:= new `m8.r`;
  #L320218.  v1:= 0I;
  #L32021a.  call `<init>`(v0, v2, v1, v1) @signature `Lm8/r;.<init>:(Ljava/lang/Class;II)V` @kind direct;
  #L320220.  return v0 @kind object;
}
procedure `m8.r` `i`(`java.lang.Class` v3 @kind object) @signature `Lm8/r;.i:(Ljava/lang/Class;)Lm8/r;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L320234.  v0:= new `m8.r`;
  #L320238.  v1:= 0I;
  #L32023a.  v2:= 1I;
  #L32023c.  call `<init>`(v0, v3, v1, v2) @signature `Lm8/r;.<init>:(Ljava/lang/Class;II)V` @kind direct;
  #L320242.  return v0 @kind object;
}
procedure `m8.r` `j`(`java.lang.Class` v3 @kind object) @signature `Lm8/r;.j:(Ljava/lang/Class;)Lm8/r;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L320254.  v0:= new `m8.r`;
  #L320258.  v1:= 1I;
  #L32025a.  v2:= 0I;
  #L32025c.  call `<init>`(v0, v3, v1, v2) @signature `Lm8/r;.<init>:(Ljava/lang/Class;II)V` @kind direct;
  #L320262.  return v0 @kind object;
}
procedure `m8.r` `k`(`java.lang.Class` v2 @kind object) @signature `Lm8/r;.k:(Ljava/lang/Class;)Lm8/r;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L320274.  v0:= new `m8.r`;
  #L320278.  v1:= 1I;
  #L32027a.  call `<init>`(v0, v2, v1, v1) @signature `Lm8/r;.<init>:(Ljava/lang/Class;II)V` @kind direct;
  #L320280.  return v0 @kind object;
}
procedure `m8.r` `l`(`java.lang.Class` v3 @kind object) @signature `Lm8/r;.l:(Ljava/lang/Class;)Lm8/r;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L320294.  v0:= new `m8.r`;
  #L320298.  v1:= 2I;
  #L32029a.  v2:= 0I;
  #L32029c.  call `<init>`(v0, v3, v1, v2) @signature `Lm8/r;.<init>:(Ljava/lang/Class;II)V` @kind direct;
  #L3202a2.  return v0 @kind object;
}
procedure `java.lang.Class` `c`(`m8.r` v1 @kind this) @signature `Lm8/r;.c:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3200f4.  v0:= v1.`m8.r.a` @type ^`java.lang.Class` @kind object;
  #L3200f8.  return v0 @kind object;
}
procedure `boolean` `d`(`m8.r` v2 @kind this) @signature `Lm8/r;.d:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L320030.  v0:= v2.`m8.r.c` @type ^`int`;
  #L320034.  v1:= 2I;
  #L320036.  if v0 != v1 then goto L32003e;
  #L32003a.  v0:= 1I;
  #L32003c.  goto L320040;
  #L32003e.  v0:= 0I;
  #L320040.  return v0;
}
procedure `boolean` `e`(`m8.r` v1 @kind this) @signature `Lm8/r;.e:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L320054.  v0:= v1.`m8.r.c` @type ^`int`;
  #L320058.  if v0 != 0 then goto L320060;
  #L32005c.  v0:= 1I;
  #L32005e.  goto L320062;
  #L320060.  v0:= 0I;
  #L320062.  return v0;
}
procedure `boolean` `equals`(`m8.r` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lm8/r;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L31ffe8.  v0:= instanceof @variable v4 @type ^`m8.r` @kind boolean;
  #L31ffec.  v1:= 0I;
  #L31ffee.  if v0 == 0 then goto L32001c;
  #L31fff2.  v4:= (`m8.r`) v4 @kind object;
  #L31fff6.  v0:= v3.`m8.r.a` @type ^`java.lang.Class` @kind object;
  #L31fffa.  v2:= v4.`m8.r.a` @type ^`java.lang.Class` @kind object;
  #L31fffe.  if v0 != v2 then goto L32001c;
  #L320002.  v0:= v3.`m8.r.b` @type ^`int`;
  #L320006.  v2:= v4.`m8.r.b` @type ^`int`;
  #L32000a.  if v0 != v2 then goto L32001c;
  #L32000e.  v0:= v3.`m8.r.c` @type ^`int`;
  #L320012.  v4:= v4.`m8.r.c` @type ^`int`;
  #L320016.  if v0 != v4 then goto L32001c;
  #L32001a.  v1:= 1I;
  #L32001c.  return v1;
}
procedure `boolean` `f`(`m8.r` v2 @kind this) @signature `Lm8/r;.f:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L320074.  v0:= v2.`m8.r.b` @type ^`int`;
  #L320078.  v1:= 1I;
  #L32007a.  if v0 != v1 then goto L320080;
  #L32007e.  goto L320082;
  #L320080.  v1:= 0I;
  #L320082.  return v1;
}
procedure `boolean` `g`(`m8.r` v2 @kind this) @signature `Lm8/r;.g:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L320094.  v0:= v2.`m8.r.b` @type ^`int`;
  #L320098.  v1:= 2I;
  #L32009a.  if v0 != v1 then goto L3200a2;
  #L32009e.  v0:= 1I;
  #L3200a0.  goto L3200a4;
  #L3200a2.  v0:= 0I;
  #L3200a4.  return v0;
}
procedure `int` `hashCode`(`m8.r` v3 @kind this) @signature `Lm8/r;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3200b8.  v0:= v3.`m8.r.a` @type ^`java.lang.Class` @kind object;
  #L3200bc.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L3200c2.  v0:= temp;
  #L3200c4.  v1:= 1000003I;
  #L3200ca.  v0:= v0 ^~ v1 @kind int;
  #L3200cc.  v0:= v0 * v1 @kind int;
  #L3200d0.  v2:= v3.`m8.r.b` @type ^`int`;
  #L3200d4.  v0:= v0 ^~ v2 @kind int;
  #L3200d6.  v0:= v0 * v1 @kind int;
  #L3200da.  v1:= v3.`m8.r.c` @type ^`int`;
  #L3200de.  v0:= v0 ^~ v1 @kind int;
  #L3200e0.  return v0;
}
procedure `java.lang.String` `toString`(`m8.r` v3 @kind this) @signature `Lm8/r;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L32016c.  v0:= new `java.lang.StringBuilder`;
  #L320170.  v1:= "Dependency{anInterface=" @kind object;
  #L320174.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32017a.  v1:= v3.`m8.r.a` @type ^`java.lang.Class` @kind object;
  #L32017e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L320184.  v1:= ", type=" @kind object;
  #L320188.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32018e.  v1:= v3.`m8.r.b` @type ^`int`;
  #L320192.  v2:= 1I;
  #L320194.  if v1 != v2 then goto L32019e;
  #L320198.  v1:= "required" @kind object;
  #L32019c.  goto L3201ac;
  #L32019e.  if v1 != 0 then goto L3201a8;
  #L3201a2.  v1:= "optional" @kind object;
  #L3201a6.  goto L3201ac;
  #L3201a8.  v1:= "set" @kind object;
  #L3201ac.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3201b2.  v1:= ", injection=" @kind object;
  #L3201b6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3201bc.  v1:= v3.`m8.r.c` @type ^`int`;
  #L3201c0.  call temp:= `b`(v1) @signature `Lm8/r;.b:(I)Ljava/lang/String;` @kind static;
  #L3201c6.  v1:= temp @kind object;
  #L3201c8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3201ce.  v1:= "}" @kind object;
  #L3201d2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3201d8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3201de.  v0:= temp @kind object;
  #L3201e0.  return v0 @kind object;
}
