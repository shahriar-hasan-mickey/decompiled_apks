record `m8.y` @kind class @AccessFlag  extends `h9.b` @kind interface {
  `java.util.Set` `m8.y.a` @AccessFlag PRIVATE_VOLATILE;
  `java.util.Set` `m8.y.b` @AccessFlag PRIVATE_VOLATILE;
}
procedure `void` `<init>`(`m8.y` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lm8/y;.<init>:(Ljava/util/Collection;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3206d0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3206d6.  v0:= 0I;
  #L3206d8.  v1.`m8.y.b` @type ^`java.util.Set` := v0 @kind object;
  #L3206dc.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L3206e0.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L3206e6.  call temp:= `newSetFromMap`(v0) @signature `Ljava/util/Collections;.newSetFromMap:(Ljava/util/Map;)Ljava/util/Set;` @kind static;
  #L3206ec.  v0:= temp @kind object;
  #L3206ee.  v1.`m8.y.a` @type ^`java.util.Set` := v0 @kind object;
  #L3206f2.  v0:= v1.`m8.y.a` @type ^`java.util.Set` @kind object;
  #L3206f6.  call temp:= `addAll`(v0, v2) @signature `Ljava/util/Set;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L3206fc.  return @kind void;
}
procedure `m8.y` `b`(`java.util.Collection` v1 @kind object) @signature `Lm8/y;.b:(Ljava/util/Collection;)Lm8/y;` @AccessFlag STATIC {
    temp;
    v0;

  #L3206b0.  v1:= (`java.util.Set`) v1 @kind object;
  #L3206b4.  v0:= new `m8.y`;
  #L3206b8.  call `<init>`(v0, v1) @signature `Lm8/y;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L3206be.  return v0 @kind object;
}
procedure `void` `d`(`m8.y` v3 @kind this) @signature `Lm8/y;.d:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L320760.  @monitorenter v3
  #L320762.  v0:= v3.`m8.y.a` @type ^`java.util.Set` @kind object;
  #L320766.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L32076c.  v0:= temp @kind object;
  #L32076e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L320774.  v1:= temp;
  #L320776.  if v1 == 0 then goto L32079a;
  #L32077a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L320780.  v1:= temp @kind object;
  #L320782.  v1:= (`h9.b`) v1 @kind object;
  #L320786.  v2:= v3.`m8.y.b` @type ^`java.util.Set` @kind object;
  #L32078a.  call temp:= `get`(v1) @signature `Lh9/b;.get:()Ljava/lang/Object;` @kind interface;
  #L320790.  v1:= temp @kind object;
  #L320792.  call temp:= `add`(v2, v1) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L320798.  goto L32076e;
  #L32079a.  v0:= 0I;
  #L32079c.  v3.`m8.y.a` @type ^`java.util.Set` := v0 @kind object;
  #L3207a0.  @monitorexit v3
  #L3207a2.  return @kind void;
  #L3207a4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3207a6.  @monitorexit v3
  #L3207a8.  throw v0;
  catch `java.lang.Throwable` @[L320762..L3207a0] goto L3207a4;
}
procedure `void` `a`(`m8.y` v1 @kind this, `h9.b` v2 @kind object) @signature `Lm8/y;.a:(Lh9/b;)V` @AccessFlag  {
    temp;
    v0;

  #L320710.  @monitorenter v1
  #L320712.  v0:= v1.`m8.y.b` @type ^`java.util.Set` @kind object;
  #L320716.  if v0 != 0 then goto L320726;
  #L32071a.  v0:= v1.`m8.y.a` @type ^`java.util.Set` @kind object;
  #L32071e.  call temp:= `add`(v0, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L320724.  goto L320738;
  #L320726.  v0:= v1.`m8.y.b` @type ^`java.util.Set` @kind object;
  #L32072a.  call temp:= `get`(v2) @signature `Lh9/b;.get:()Ljava/lang/Object;` @kind interface;
  #L320730.  v2:= temp @kind object;
  #L320732.  call temp:= `add`(v0, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L320738.  @monitorexit v1
  #L32073a.  return @kind void;
  #L32073c.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L32073e.  @monitorexit v1
  #L320740.  throw v2;
  catch `java.lang.Throwable` @[L320712..L320738] goto L32073c;
}
procedure `java.util.Set` `c`(`m8.y` v1 @kind this) @signature `Lm8/y;.c:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32064c.  v0:= v1.`m8.y.b` @type ^`java.util.Set` @kind object;
  #L320650.  if v0 != 0 then goto L320684;
  #L320654.  @monitorenter v1
  #L320656.  v0:= v1.`m8.y.b` @type ^`java.util.Set` @kind object;
  #L32065a.  if v0 != 0 then goto L32067a;
  #L32065e.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L320662.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L320668.  call temp:= `newSetFromMap`(v0) @signature `Ljava/util/Collections;.newSetFromMap:(Ljava/util/Map;)Ljava/util/Set;` @kind static;
  #L32066e.  v0:= temp @kind object;
  #L320670.  v1.`m8.y.b` @type ^`java.util.Set` := v0 @kind object;
  #L320674.  call `d`(v1) @signature `Lm8/y;.d:()V` @kind direct;
  #L32067a.  @monitorexit v1
  #L32067c.  goto L320684;
  #L32067e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L320680.  @monitorexit v1
  #L320682.  throw v0;
  #L320684.  v0:= v1.`m8.y.b` @type ^`java.util.Set` @kind object;
  #L320688.  call temp:= `unmodifiableSet`(v0) @signature `Ljava/util/Collections;.unmodifiableSet:(Ljava/util/Set;)Ljava/util/Set;` @kind static;
  #L32068e.  v0:= temp @kind object;
  #L320690.  return v0 @kind object;
  catch `java.lang.Throwable` @[L320656..L320682] goto L32067e;
}
procedure `java.lang.Object` `get`(`m8.y` v1 @kind this) @signature `Lm8/y;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L320630.  call temp:= `c`(v1) @signature `Lm8/y;.c:()Ljava/util/Set;` @kind virtual;
  #L320636.  v0:= temp @kind object;
  #L320638.  return v0 @kind object;
}
