record `t7.a` @kind class @AccessFlag PUBLIC {
}
global `android.animation.TimeInterpolator` `@@t7.a.a` @AccessFlag PUBLIC_STATIC_FINAL;
global `android.animation.TimeInterpolator` `@@t7.a.b` @AccessFlag PUBLIC_STATIC_FINAL;
global `android.animation.TimeInterpolator` `@@t7.a.c` @AccessFlag PUBLIC_STATIC_FINAL;
global `android.animation.TimeInterpolator` `@@t7.a.d` @AccessFlag PUBLIC_STATIC_FINAL;
global `android.animation.TimeInterpolator` `@@t7.a.e` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lt7/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L377da0.  v0:= new `android.view.animation.LinearInterpolator`;
  #L377da4.  call `<init>`(v0) @signature `Landroid/view/animation/LinearInterpolator;.<init>:()V` @kind direct;
  #L377daa.  `@@t7.a.a` @type ^`android.animation.TimeInterpolator` := v0 @kind object;
  #L377dae.  v0:= new `f0.b`;
  #L377db2.  call `<init>`(v0) @signature `Lf0/b;.<init>:()V` @kind direct;
  #L377db8.  `@@t7.a.b` @type ^`android.animation.TimeInterpolator` := v0 @kind object;
  #L377dbc.  v0:= new `f0.a`;
  #L377dc0.  call `<init>`(v0) @signature `Lf0/a;.<init>:()V` @kind direct;
  #L377dc6.  `@@t7.a.c` @type ^`android.animation.TimeInterpolator` := v0 @kind object;
  #L377dca.  v0:= new `f0.c`;
  #L377dce.  call `<init>`(v0) @signature `Lf0/c;.<init>:()V` @kind direct;
  #L377dd4.  `@@t7.a.d` @type ^`android.animation.TimeInterpolator` := v0 @kind object;
  #L377dd8.  v0:= new `android.view.animation.DecelerateInterpolator`;
  #L377ddc.  call `<init>`(v0) @signature `Landroid/view/animation/DecelerateInterpolator;.<init>:()V` @kind direct;
  #L377de2.  `@@t7.a.e` @type ^`android.animation.TimeInterpolator` := v0 @kind object;
  #L377de6.  return @kind void;
}
procedure `float` `a`(`float` v0 , `float` v1 , `float` v2 ) @signature `Lt7/a;.a:(FFF)F` @AccessFlag PUBLIC_STATIC {
    temp;

  #L377d2c.  v1:= v1 - v0 @kind float;
  #L377d2e.  v2:= v2 * v1 @kind float;
  #L377d32.  v0:= v0 + v2 @kind float;
  #L377d34.  return v0;
}
procedure `float` `b`(`float` v1 , `float` v2 , `float` v3 , `float` v4 , `float` v5 ) @signature `Lt7/a;.b:(FFFFF)F` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L377d48.  v0:= fcmpg(v5, v3);
  #L377d4c.  if v0 >= 0 then goto L377d52;
  #L377d50.  return v1;
  #L377d52.  v0:= fcmpl(v5, v4);
  #L377d56.  if v0 <= 0 then goto L377d5c;
  #L377d5a.  return v2;
  #L377d5c.  v5:= v5 - v3 @kind float;
  #L377d5e.  v4:= v4 - v3 @kind float;
  #L377d60.  v5:= v5 / v4 @kind float;
  #L377d62.  call temp:= `a`(v1, v2, v5) @signature `Lt7/a;.a:(FFF)F` @kind static;
  #L377d68.  v1:= temp;
  #L377d6a.  return v1;
}
procedure `int` `c`(`int` v0 , `int` v1 , `float` v2 ) @signature `Lt7/a;.c:(IIF)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L377d7c.  v1:= v1 - v0 @kind int;
  #L377d7e.  v1:= (`float`) v1 @kind i2f;
  #L377d80.  v2:= v2 * v1 @kind float;
  #L377d84.  call temp:= `round`(v2) @signature `Ljava/lang/Math;.round:(F)I` @kind static;
  #L377d8a.  v1:= temp;
  #L377d8c.  v0:= v0 + v1 @kind int;
  #L377d8e.  return v0;
}
