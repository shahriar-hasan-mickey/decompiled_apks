record `rd.c` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `int` `a`(`int` v0 , `int` v1 , `int` v2 ) @signature `Lrd/c;.a:(III)I` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L3756c4.  call temp:= `e`(v0, v2) @signature `Lrd/c;.e:(II)I` @kind static;
  #L3756ca.  v0:= temp;
  #L3756cc.  call temp:= `e`(v1, v2) @signature `Lrd/c;.e:(II)I` @kind static;
  #L3756d2.  v1:= temp;
  #L3756d4.  v0:= v0 - v1 @kind int;
  #L3756d6.  call temp:= `e`(v0, v2) @signature `Lrd/c;.e:(II)I` @kind static;
  #L3756dc.  v0:= temp;
  #L3756de.  return v0;
}
procedure `long` `b`(`long` v0 , `long` v2 , `long` v4 ) @signature `Lrd/c;.b:(JJJ)J` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L37575c.  call temp:= `f`(v0, v4) @signature `Lrd/c;.f:(JJ)J` @kind static;
  #L375762.  v0:= temp @kind wide;
  #L375764.  call temp:= `f`(v2, v4) @signature `Lrd/c;.f:(JJ)J` @kind static;
  #L37576a.  v2:= temp @kind wide;
  #L37576c.  v0:= v0 - v2 @kind long;
  #L37576e.  call temp:= `f`(v0, v4) @signature `Lrd/c;.f:(JJ)J` @kind static;
  #L375774.  v0:= temp @kind wide;
  #L375776.  return v0 @kind wide;
}
procedure `int` `c`(`int` v0 , `int` v1 , `int` v2 ) @signature `Lrd/c;.c:(III)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L3756f0.  if v2 <= 0 then goto L375706;
  #L3756f4.  if v0 < v1 then goto L3756fa;
  #L3756f8.  goto L37571c;
  #L3756fa.  call temp:= `a`(v1, v0, v2) @signature `Lrd/c;.a:(III)I` @kind static;
  #L375700.  v0:= temp;
  #L375702.  v1:= v1 - v0 @kind int;
  #L375704.  goto L37571c;
  #L375706.  if v2 >= 0 then goto L37571e;
  #L37570a.  if v0 > v1 then goto L375710;
  #L37570e.  goto L37571c;
  #L375710.  v2:= -v2 @kind int;
  #L375712.  call temp:= `a`(v0, v1, v2) @signature `Lrd/c;.a:(III)I` @kind static;
  #L375718.  v0:= temp;
  #L37571a.  v1:= v1 + v0 @kind int;
  #L37571c.  return v1;
  #L37571e.  v0:= new `java.lang.IllegalArgumentException`;
  #L375722.  v1:= "Step is zero." @kind object;
  #L375726.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37572c.  throw v0;
}
procedure `long` `d`(`long` v7 , `long` v9 , `long` v11 ) @signature `Lrd/c;.d:(JJJ)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L375788.  v0:= 0L;
  #L37578c.  v2:= lcmp(v11, v0);
  #L375790.  if v2 <= 0 then goto L3757b0;
  #L375794.  v0:= lcmp(v7, v9);
  #L375798.  if v0 < 0 then goto L37579e;
  #L37579c.  goto L3757ce;
  #L37579e.  v0:= v9 @kind wide;
  #L3757a0.  v2:= v7 @kind wide;
  #L3757a2.  v4:= v11 @kind wide;
  #L3757a4.  call temp:= `b`(v0, v2, v4) @signature `Lrd/c;.b:(JJJ)J` @kind static;
  #L3757aa.  v7:= temp @kind wide;
  #L3757ac.  v9:= v9 - v7 @kind long;
  #L3757ae.  goto L3757ce;
  #L3757b0.  if v2 >= 0 then goto L3757d0;
  #L3757b4.  v0:= lcmp(v7, v9);
  #L3757b8.  if v0 > 0 then goto L3757be;
  #L3757bc.  goto L3757ce;
  #L3757be.  v5:= -v11 @kind long;
  #L3757c0.  v1:= v7 @kind wide;
  #L3757c2.  v3:= v9 @kind wide;
  #L3757c4.  call temp:= `b`(v1, v3, v5) @signature `Lrd/c;.b:(JJJ)J` @kind static;
  #L3757ca.  v7:= temp @kind wide;
  #L3757cc.  v9:= v9 + v7 @kind long;
  #L3757ce.  return v9 @kind wide;
  #L3757d0.  v7:= new `java.lang.IllegalArgumentException`;
  #L3757d4.  v8:= "Step is zero." @kind object;
  #L3757d8.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3757de.  throw v7;
}
procedure `int` `e`(`int` v0 , `int` v1 ) @signature `Lrd/c;.e:(II)I` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;

  #L375740.  v0:= v0 %% v1 @kind int;
  #L375742.  if v0 < 0 then goto L375748;
  #L375746.  goto L37574a;
  #L375748.  v0:= v0 + v1 @kind int;
  #L37574a.  return v0;
}
procedure `long` `f`(`long` v3 , `long` v5 ) @signature `Lrd/c;.f:(JJ)J` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L3757f0.  v3:= v3 %% v5 @kind long;
  #L3757f2.  v0:= 0L;
  #L3757f6.  v2:= lcmp(v3, v0);
  #L3757fa.  if v2 < 0 then goto L375800;
  #L3757fe.  goto L375802;
  #L375800.  v3:= v3 + v5 @kind long;
  #L375802.  return v3 @kind wide;
}
