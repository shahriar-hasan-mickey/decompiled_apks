record `eb.t` @kind class @AccessFlag PUBLIC {
  `java.lang.String` `eb.t.a` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `eb.t.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`eb.t` v0 @kind this, `java.lang.String` v1 @kind object, `java.util.List` v2 @kind object) @signature `Leb/t;.<init>:(Ljava/lang/String;Ljava/util/List;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2ace0c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2ace12.  v0.`eb.t.a` @type ^`java.lang.String` := v1 @kind object;
  #L2ace16.  if v2 != 0 then goto L2ace24;
  #L2ace1a.  v2:= new `java.util.ArrayList`;
  #L2ace1e.  call `<init>`(v2) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2ace24.  v0.`eb.t.b` @type ^`java.util.List` := v2 @kind object;
  #L2ace28.  return @kind void;
}
procedure `java.lang.Object`[] `e`(`eb.t` v2 @kind this, `java.util.List` v3 @kind object) @signature `Leb/t;.e:(Ljava/util/List;)[Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L2acd08.  v0:= new `java.util.ArrayList`;
  #L2acd0c.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2acd12.  if v3 == 0 then goto L2acd42;
  #L2acd16.  call temp:= `iterator`(v3) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2acd1c.  v3:= temp @kind object;
  #L2acd1e.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2acd24.  v1:= temp;
  #L2acd26.  if v1 == 0 then goto L2acd42;
  #L2acd2a.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2acd30.  v1:= temp @kind object;
  #L2acd32.  call temp:= `f`(v1) @signature `Leb/t;.f:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2acd38.  v1:= temp @kind object;
  #L2acd3a.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2acd40.  goto L2acd1e;
  #L2acd42.  v3:= 0I;
  #L2acd44.  v3:= new `java.lang.Object`[v3];
  #L2acd48.  call temp:= `toArray`(v0, v3) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L2acd4e.  v3:= temp @kind object;
  #L2acd50.  return v3 @kind object;
}
procedure `java.lang.Object` `f`(`java.lang.Object` v3 @kind object) @signature `Leb/t;.f:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2acc84.  if v3 != 0 then goto L2acc8c;
  #L2acc88.  v3:= 0I;
  #L2acc8a.  return v3 @kind object;
  #L2acc8c.  v0:= instanceof @variable v3 @type ^`java.util.List` @kind boolean;
  #L2acc90.  if v0 == 0 then goto L2accd4;
  #L2acc94.  v3:= (`java.util.List`) v3 @kind object;
  #L2acc98.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2acc9e.  v0:= temp;
  #L2acca0.  v0:= new `byte`[v0];
  #L2acca4.  v1:= 0I;
  #L2acca6.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2accac.  v2:= temp;
  #L2accae.  if v1 >= v2 then goto L2accd2;
  #L2accb2.  call temp:= `get`(v3, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2accb8.  v2:= temp @kind object;
  #L2accba.  v2:= (`java.lang.Integer`) v2 @kind object;
  #L2accbe.  call temp:= `intValue`(v2) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L2accc4.  v2:= temp;
  #L2accc6.  v2:= (`byte`) v2 @kind i2b;
  #L2accc8.  v0[v1]:= v2 @kind byte;
  #L2acccc.  v1:= v1 + 1;
  #L2accd0.  goto L2acca6;
  #L2accd2.  v3:= v0 @kind object;
  #L2accd4.  return v3 @kind object;
}
procedure `void` `a`(`eb.t` v5 @kind this, `android.database.sqlite.SQLiteProgram` v6 @kind object) @signature `Leb/t;.a:(Landroid/database/sqlite/SQLiteProgram;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2ace3c.  v0:= v5.`eb.t.b` @type ^`java.util.List` @kind object;
  #L2ace40.  if v0 == 0 then goto L2acf68;
  #L2ace44.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2ace4a.  v0:= temp;
  #L2ace4c.  v1:= 0I;
  #L2ace4e.  if v1 >= v0 then goto L2acf68;
  #L2ace52.  v2:= v5.`eb.t.b` @type ^`java.util.List` @kind object;
  #L2ace56.  call temp:= `get`(v2, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2ace5c.  v2:= temp @kind object;
  #L2ace5e.  call temp:= `f`(v2) @signature `Leb/t;.f:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2ace64.  v2:= temp @kind object;
  #L2ace66.  v3:= v1 + 1;
  #L2ace6a.  if v2 != 0 then goto L2ace76;
  #L2ace6e.  call `bindNull`(v6, v3) @signature `Landroid/database/sqlite/SQLiteProgram;.bindNull:(I)V` @kind virtual;
  #L2ace74.  goto L2acf1c;
  #L2ace76.  v4:= instanceof @variable v2 @type ^`byte`[] @kind boolean;
  #L2ace7a.  if v4 == 0 then goto L2ace8a;
  #L2ace7e.  v2:= (`byte`[]) v2 @kind object;
  #L2ace82.  call `bindBlob`(v6, v3, v2) @signature `Landroid/database/sqlite/SQLiteProgram;.bindBlob:(I[B)V` @kind virtual;
  #L2ace88.  goto L2acf1c;
  #L2ace8a.  v4:= instanceof @variable v2 @type ^`java.lang.Double` @kind boolean;
  #L2ace8e.  if v4 == 0 then goto L2acea6;
  #L2ace92.  v2:= (`java.lang.Double`) v2 @kind object;
  #L2ace96.  call temp:= `doubleValue`(v2) @signature `Ljava/lang/Double;.doubleValue:()D` @kind virtual;
  #L2ace9c.  v1:= temp @kind wide;
  #L2ace9e.  call `bindDouble`(v6, v3, v1) @signature `Landroid/database/sqlite/SQLiteProgram;.bindDouble:(ID)V` @kind virtual;
  #L2acea4.  goto L2acf1c;
  #L2acea6.  v4:= instanceof @variable v2 @type ^`java.lang.Integer` @kind boolean;
  #L2aceaa.  if v4 == 0 then goto L2acec4;
  #L2aceae.  v2:= (`java.lang.Integer`) v2 @kind object;
  #L2aceb2.  call temp:= `intValue`(v2) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L2aceb8.  v1:= temp;
  #L2aceba.  v1:= (`long`) v1 @kind i2l;
  #L2acebc.  call `bindLong`(v6, v3, v1) @signature `Landroid/database/sqlite/SQLiteProgram;.bindLong:(IJ)V` @kind virtual;
  #L2acec2.  goto L2acf1c;
  #L2acec4.  v4:= instanceof @variable v2 @type ^`java.lang.Long` @kind boolean;
  #L2acec8.  if v4 == 0 then goto L2acee0;
  #L2acecc.  v2:= (`java.lang.Long`) v2 @kind object;
  #L2aced0.  call temp:= `longValue`(v2) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L2aced6.  v1:= temp @kind wide;
  #L2aced8.  call `bindLong`(v6, v3, v1) @signature `Landroid/database/sqlite/SQLiteProgram;.bindLong:(IJ)V` @kind virtual;
  #L2acede.  goto L2acf1c;
  #L2acee0.  v4:= instanceof @variable v2 @type ^`java.lang.String` @kind boolean;
  #L2acee4.  if v4 == 0 then goto L2acef4;
  #L2acee8.  v2:= (`java.lang.String`) v2 @kind object;
  #L2aceec.  call `bindString`(v6, v3, v2) @signature `Landroid/database/sqlite/SQLiteProgram;.bindString:(ILjava/lang/String;)V` @kind virtual;
  #L2acef2.  goto L2acf1c;
  #L2acef4.  v4:= instanceof @variable v2 @type ^`java.lang.Boolean` @kind boolean;
  #L2acef8.  if v4 == 0 then goto L2acf20;
  #L2acefc.  v2:= (`java.lang.Boolean`) v2 @kind object;
  #L2acf00.  call temp:= `booleanValue`(v2) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L2acf06.  v1:= temp;
  #L2acf08.  if v1 == 0 then goto L2acf12;
  #L2acf0c.  v1:= 1L;
  #L2acf10.  goto L2acf16;
  #L2acf12.  v1:= 0L;
  #L2acf16.  call `bindLong`(v6, v3, v1) @signature `Landroid/database/sqlite/SQLiteProgram;.bindLong:(IJ)V` @kind virtual;
  #L2acf1c.  v1:= v3;
  #L2acf1e.  goto L2ace4e;
  #L2acf20.  v6:= new `java.lang.IllegalArgumentException`;
  #L2acf24.  v0:= new `java.lang.StringBuilder`;
  #L2acf28.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2acf2e.  v3:= "Could not bind " @kind object;
  #L2acf32.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2acf38.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2acf3e.  v2:= " from index " @kind object;
  #L2acf42.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2acf48.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2acf4e.  v1:= ": Supported types are null, byte[], double, long, boolean and String" @kind object;
  #L2acf52.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2acf58.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2acf5e.  v0:= temp @kind object;
  #L2acf60.  call `<init>`(v6, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2acf66.  throw v6;
  #L2acf68.  return @kind void;
}
procedure `java.util.List` `b`(`eb.t` v1 @kind this) @signature `Leb/t;.b:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2acdf4.  v0:= v1.`eb.t.b` @type ^`java.util.List` @kind object;
  #L2acdf8.  return v0 @kind object;
}
procedure `java.lang.String` `c`(`eb.t` v1 @kind this) @signature `Leb/t;.c:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2acd64.  v0:= v1.`eb.t.a` @type ^`java.lang.String` @kind object;
  #L2acd68.  return v0 @kind object;
}
procedure `java.lang.Object`[] `d`(`eb.t` v1 @kind this) @signature `Leb/t;.d:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2acce8.  v0:= v1.`eb.t.b` @type ^`java.util.List` @kind object;
  #L2accec.  call temp:= `e`(v1, v0) @signature `Leb/t;.e:(Ljava/util/List;)[Ljava/lang/Object;` @kind direct;
  #L2accf2.  v0:= temp @kind object;
  #L2accf4.  return v0 @kind object;
}
procedure `boolean` `equals`(`eb.t` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Leb/t;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2acb60.  v0:= instanceof @variable v5 @type ^`eb.t` @kind boolean;
  #L2acb64.  v1:= 0I;
  #L2acb66.  if v0 == 0 then goto L2acc48;
  #L2acb6a.  v5:= (`eb.t`) v5 @kind object;
  #L2acb6e.  v0:= v4.`eb.t.a` @type ^`java.lang.String` @kind object;
  #L2acb72.  if v0 == 0 then goto L2acb88;
  #L2acb76.  v2:= v5.`eb.t.a` @type ^`java.lang.String` @kind object;
  #L2acb7a.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2acb80.  v0:= temp;
  #L2acb82.  if v0 != 0 then goto L2acb92;
  #L2acb86.  return v1;
  #L2acb88.  v0:= v5.`eb.t.a` @type ^`java.lang.String` @kind object;
  #L2acb8c.  if v0 == 0 then goto L2acb92;
  #L2acb90.  return v1;
  #L2acb92.  v0:= v4.`eb.t.b` @type ^`java.util.List` @kind object;
  #L2acb96.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2acb9c.  v0:= temp;
  #L2acb9e.  v2:= v5.`eb.t.b` @type ^`java.util.List` @kind object;
  #L2acba2.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2acba8.  v2:= temp;
  #L2acbaa.  if v0 == v2 then goto L2acbb0;
  #L2acbae.  return v1;
  #L2acbb0.  v0:= 0I;
  #L2acbb2.  v2:= v4.`eb.t.b` @type ^`java.util.List` @kind object;
  #L2acbb6.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2acbbc.  v2:= temp;
  #L2acbbe.  if v0 >= v2 then goto L2acc44;
  #L2acbc2.  v2:= v4.`eb.t.b` @type ^`java.util.List` @kind object;
  #L2acbc6.  call temp:= `get`(v2, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2acbcc.  v2:= temp @kind object;
  #L2acbce.  v2:= instanceof @variable v2 @type ^`byte`[] @kind boolean;
  #L2acbd2.  if v2 == 0 then goto L2acc18;
  #L2acbd6.  v2:= v5.`eb.t.b` @type ^`java.util.List` @kind object;
  #L2acbda.  call temp:= `get`(v2, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2acbe0.  v2:= temp @kind object;
  #L2acbe2.  v2:= instanceof @variable v2 @type ^`byte`[] @kind boolean;
  #L2acbe6.  if v2 == 0 then goto L2acc18;
  #L2acbea.  v2:= v4.`eb.t.b` @type ^`java.util.List` @kind object;
  #L2acbee.  call temp:= `get`(v2, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2acbf4.  v2:= temp @kind object;
  #L2acbf6.  v2:= (`byte`[]) v2 @kind object;
  #L2acbfa.  v3:= v5.`eb.t.b` @type ^`java.util.List` @kind object;
  #L2acbfe.  call temp:= `get`(v3, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2acc04.  v3:= temp @kind object;
  #L2acc06.  v3:= (`byte`[]) v3 @kind object;
  #L2acc0a.  call temp:= `equals`(v2, v3) @signature `Ljava/util/Arrays;.equals:([B[B)Z` @kind static;
  #L2acc10.  v2:= temp;
  #L2acc12.  if v2 != 0 then goto L2acc3e;
  #L2acc16.  return v1;
  #L2acc18.  v2:= v4.`eb.t.b` @type ^`java.util.List` @kind object;
  #L2acc1c.  call temp:= `get`(v2, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2acc22.  v2:= temp @kind object;
  #L2acc24.  v3:= v5.`eb.t.b` @type ^`java.util.List` @kind object;
  #L2acc28.  call temp:= `get`(v3, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2acc2e.  v3:= temp @kind object;
  #L2acc30.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2acc36.  v2:= temp;
  #L2acc38.  if v2 != 0 then goto L2acc3e;
  #L2acc3c.  return v1;
  #L2acc3e.  v0:= v0 + 1;
  #L2acc42.  goto L2acbb2;
  #L2acc44.  v5:= 1I;
  #L2acc46.  return v5;
  #L2acc48.  return v1;
}
procedure `int` `hashCode`(`eb.t` v1 @kind this) @signature `Leb/t;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2acc5c.  v0:= v1.`eb.t.a` @type ^`java.lang.String` @kind object;
  #L2acc60.  if v0 == 0 then goto L2acc6e;
  #L2acc64.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L2acc6a.  v0:= temp;
  #L2acc6c.  goto L2acc70;
  #L2acc6e.  v0:= 0I;
  #L2acc70.  return v0;
}
procedure `java.lang.String` `toString`(`eb.t` v3 @kind this) @signature `Leb/t;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2acd7c.  v0:= new `java.lang.StringBuilder`;
  #L2acd80.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2acd86.  v1:= v3.`eb.t.a` @type ^`java.lang.String` @kind object;
  #L2acd8a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2acd90.  v1:= v3.`eb.t.b` @type ^`java.util.List` @kind object;
  #L2acd94.  if v1 == 0 then goto L2acdce;
  #L2acd98.  call temp:= `isEmpty`(v1) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L2acd9e.  v1:= temp;
  #L2acda0.  if v1 == 0 then goto L2acda6;
  #L2acda4.  goto L2acdce;
  #L2acda6.  v1:= new `java.lang.StringBuilder`;
  #L2acdaa.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2acdb0.  v2:= " " @kind object;
  #L2acdb4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2acdba.  v2:= v3.`eb.t.b` @type ^`java.util.List` @kind object;
  #L2acdbe.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2acdc4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2acdca.  v1:= temp @kind object;
  #L2acdcc.  goto L2acdd2;
  #L2acdce.  v1:= "" @kind object;
  #L2acdd2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2acdd8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2acdde.  v0:= temp @kind object;
  #L2acde0.  return v0 @kind object;
}
