record `ke.b` @kind class @AccessFlag PUBLIC_FINAL extends `ke.e` @kind interface {
  `java.util.Map` `ke.b.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`ke.b` v6 @kind this, `java.security.cert.X509Certificate`[] v7 @kind object) @signature `Lke/b;.<init>:([Ljava/security/cert/X509Certificate;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L304c0c.  call `<init>`(v6) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L304c12.  v0:= new `java.util.LinkedHashMap`;
  #L304c16.  call `<init>`(v0) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L304c1c.  v6.`ke.b.a` @type ^`java.util.Map` := v0 @kind object;
  #L304c20.  v0:= length @variable v7;
  #L304c22.  v1:= 0I;
  #L304c24.  if v1 >= v0 then goto L304c6a;
  #L304c28.  v2:= v7[v1] @kind object;
  #L304c2c.  call temp:= `getSubjectX500Principal`(v2) @signature `Ljava/security/cert/X509Certificate;.getSubjectX500Principal:()Ljavax/security/auth/x500/X500Principal;` @kind virtual;
  #L304c32.  v3:= temp @kind object;
  #L304c34.  v4:= v6.`ke.b.a` @type ^`java.util.Map` @kind object;
  #L304c38.  call temp:= `get`(v4, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L304c3e.  v4:= temp @kind object;
  #L304c40.  v4:= (`java.util.Set`) v4 @kind object;
  #L304c44.  if v4 != 0 then goto L304c5e;
  #L304c48.  v4:= new `java.util.LinkedHashSet`;
  #L304c4c.  v5:= 1I;
  #L304c4e.  call `<init>`(v4, v5) @signature `Ljava/util/LinkedHashSet;.<init>:(I)V` @kind direct;
  #L304c54.  v5:= v6.`ke.b.a` @type ^`java.util.Map` @kind object;
  #L304c58.  call temp:= `put`(v5, v3, v4) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L304c5e.  call temp:= `add`(v4, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L304c64.  v1:= v1 + 1;
  #L304c68.  goto L304c24;
  #L304c6a.  return @kind void;
}
procedure `java.security.cert.X509Certificate` `a`(`ke.b` v4 @kind this, `java.security.cert.X509Certificate` v5 @kind object) @signature `Lke/b;.a:(Ljava/security/cert/X509Certificate;)Ljava/security/cert/X509Certificate;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L304b94.  call temp:= `getIssuerX500Principal`(v5) @signature `Ljava/security/cert/X509Certificate;.getIssuerX500Principal:()Ljavax/security/auth/x500/X500Principal;` @kind virtual;
  #L304b9a.  v0:= temp @kind object;
  #L304b9c.  v1:= v4.`ke.b.a` @type ^`java.util.Map` @kind object;
  #L304ba0.  call temp:= `get`(v1, v0) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L304ba6.  v0:= temp @kind object;
  #L304ba8.  v0:= (`java.util.Set`) v0 @kind object;
  #L304bac.  v1:= 0I;
  #L304bae.  if v0 != 0 then goto L304bb4;
  #L304bb2.  return v1 @kind object;
  #L304bb4.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L304bba.  v0:= temp @kind object;
  #L304bbc.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L304bc2.  v2:= temp;
  #L304bc4.  if v2 == 0 then goto L304be8;
  #L304bc8.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L304bce.  v2:= temp @kind object;
  #L304bd0.  v2:= (`java.security.cert.X509Certificate`) v2 @kind object;
  #L304bd4.  call temp:= `getPublicKey`(v2) @signature `Ljava/security/cert/X509Certificate;.getPublicKey:()Ljava/security/PublicKey;` @kind virtual;
  #L304bda.  v3:= temp @kind object;
  #L304bdc.  call `verify`(v5, v3) @signature `Ljava/security/cert/X509Certificate;.verify:(Ljava/security/PublicKey;)V` @kind virtual;
  #L304be2.  return v2 @kind object;
  #L304be4.  
  #L304be6.  goto L304bbc;
  #L304be8.  return v1 @kind object;
  catch `java.lang.Exception` @[L304bdc..L304be2] goto L304be4;
}
procedure `boolean` `equals`(`ke.b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lke/b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L304b34.  v0:= 1I;
  #L304b36.  if v3 != v2 then goto L304b3c;
  #L304b3a.  return v0;
  #L304b3c.  v1:= instanceof @variable v3 @type ^`ke.b` @kind boolean;
  #L304b40.  if v1 == 0 then goto L304b5e;
  #L304b44.  v3:= (`ke.b`) v3 @kind object;
  #L304b48.  v3:= v3.`ke.b.a` @type ^`java.util.Map` @kind object;
  #L304b4c.  v1:= v2.`ke.b.a` @type ^`java.util.Map` @kind object;
  #L304b50.  call temp:= `equals`(v3, v1) @signature `Ljava/util/Map;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L304b56.  v3:= temp;
  #L304b58.  if v3 == 0 then goto L304b5e;
  #L304b5c.  goto L304b60;
  #L304b5e.  v0:= 0I;
  #L304b60.  return v0;
}
procedure `int` `hashCode`(`ke.b` v1 @kind this) @signature `Lke/b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L304b74.  v0:= v1.`ke.b.a` @type ^`java.util.Map` @kind object;
  #L304b78.  call temp:= `hashCode`(v0) @signature `Ljava/util/Map;.hashCode:()I` @kind interface;
  #L304b7e.  v0:= temp;
  #L304b80.  return v0;
}
