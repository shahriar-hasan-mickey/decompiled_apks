record `he.a$g` @kind class @AccessFlag  extends `he.a$b` @kind class {
  `boolean` `he.a$g.j` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`he.a$g` v1 @kind this, `he.a` v2 @kind object) @signature `Lhe/a$g;.<init>:(Lhe/a;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L2b5c98.  v0:= 0I;
  #L2b5c9a.  call `<init>`(v1, v2, v0) @signature `Lhe/a$b;.<init>:(Lhe/a;Lhe/a$a;)V` @kind direct;
  #L2b5ca0.  return @kind void;
}
procedure `void` `<init>`(`he.a$g` v0 @kind this, `he.a` v1 @kind object, `he.a$a` v2 @kind object) @signature `Lhe/a$g;.<init>:(Lhe/a;Lhe/a$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L2b5cb4.  call `<init>`(v0, v1) @signature `Lhe/a$g;.<init>:(Lhe/a;)V` @kind direct;
  #L2b5cba.  return @kind void;
}
procedure `void` `close`(`he.a$g` v1 @kind this) @signature `Lhe/a$g;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b5ccc.  v0:= v1.`he.a$b.h` @type ^`boolean` @kind boolean;
  #L2b5cd0.  if v0 == 0 then goto L2b5cd6;
  #L2b5cd4.  return @kind void;
  #L2b5cd6.  v0:= v1.`he.a$g.j` @type ^`boolean` @kind boolean;
  #L2b5cda.  if v0 != 0 then goto L2b5ce4;
  #L2b5cde.  call `e`(v1) @signature `Lhe/a$b;.e:()V` @kind virtual;
  #L2b5ce4.  v0:= 1I;
  #L2b5ce6.  v1.`he.a$b.h` @type ^`boolean` := v0 @kind boolean;
  #L2b5cea.  return @kind void;
}
procedure `long` `z0`(`he.a$g` v3 @kind this, `okio.c` v4 @kind object, `long` v5 ) @signature `Lhe/a$g;.z0:(Lokio/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2b5c08.  v0:= 0L;
  #L2b5c0c.  v2:= lcmp(v5, v0);
  #L2b5c10.  if v2 < 0 then goto L2b5c5a;
  #L2b5c14.  v0:= v3.`he.a$b.h` @type ^`boolean` @kind boolean;
  #L2b5c18.  if v0 != 0 then goto L2b5c4a;
  #L2b5c1c.  v0:= v3.`he.a$g.j` @type ^`boolean` @kind boolean;
  #L2b5c20.  v1:= -1L;
  #L2b5c24.  if v0 == 0 then goto L2b5c2a;
  #L2b5c28.  return v1 @kind wide;
  #L2b5c2a.  call temp:= `z0`(v3, v4, v5) @signature `Lhe/a$b;.z0:(Lokio/c;J)J` @kind super;
  #L2b5c30.  v4:= temp @kind wide;
  #L2b5c32.  v6:= lcmp(v4, v1);
  #L2b5c36.  if v6 != 0 then goto L2b5c48;
  #L2b5c3a.  v4:= 1I;
  #L2b5c3c.  v3.`he.a$g.j` @type ^`boolean` := v4 @kind boolean;
  #L2b5c40.  call `e`(v3) @signature `Lhe/a$b;.e:()V` @kind virtual;
  #L2b5c46.  return v1 @kind wide;
  #L2b5c48.  return v4 @kind wide;
  #L2b5c4a.  v4:= new `java.lang.IllegalStateException`;
  #L2b5c4e.  v5:= "closed" @kind object;
  #L2b5c52.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2b5c58.  throw v4;
  #L2b5c5a.  v4:= new `java.lang.IllegalArgumentException`;
  #L2b5c5e.  v0:= new `java.lang.StringBuilder`;
  #L2b5c62.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2b5c68.  v1:= "byteCount < 0: " @kind object;
  #L2b5c6c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b5c72.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b5c78.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2b5c7e.  v5:= temp @kind object;
  #L2b5c80.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2b5c86.  throw v4;
}
