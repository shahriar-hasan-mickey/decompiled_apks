record `he.a$f` @kind class @AccessFlag FINAL extends `okio.u` @kind interface {
  `okio.j` `he.a$f.g` @AccessFlag PRIVATE_FINAL;
  `boolean` `he.a$f.h` @AccessFlag PRIVATE;
  `he.a` `he.a$f.i` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`he.a$f` v1 @kind this, `he.a` v2 @kind object) @signature `Lhe/a$f;.<init>:(Lhe/a;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L2b5af8.  v1.`he.a$f.i` @type ^`he.a` := v2 @kind object;
  #L2b5afc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2b5b02.  v0:= new `okio.j`;
  #L2b5b06.  call temp:= `j`(v2) @signature `Lhe/a;.j:(Lhe/a;)Lokio/d;` @kind static;
  #L2b5b0c.  v2:= temp @kind object;
  #L2b5b0e.  call temp:= `timeout`(v2) @signature `Lokio/u;.timeout:()Lokio/w;` @kind interface;
  #L2b5b14.  v2:= temp @kind object;
  #L2b5b16.  call `<init>`(v0, v2) @signature `Lokio/j;.<init>:(Lokio/w;)V` @kind direct;
  #L2b5b1c.  v1.`he.a$f.g` @type ^`okio.j` := v0 @kind object;
  #L2b5b20.  return @kind void;
}
procedure `void` `<init>`(`he.a$f` v0 @kind this, `he.a` v1 @kind object, `he.a$a` v2 @kind object) @signature `Lhe/a$f;.<init>:(Lhe/a;Lhe/a$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L2b5b34.  call `<init>`(v0, v1) @signature `Lhe/a$f;.<init>:(Lhe/a;)V` @kind direct;
  #L2b5b3a.  return @kind void;
}
procedure `void` `close`(`he.a$f` v2 @kind this) @signature `Lhe/a$f;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2b5b4c.  v0:= v2.`he.a$f.h` @type ^`boolean` @kind boolean;
  #L2b5b50.  if v0 == 0 then goto L2b5b56;
  #L2b5b54.  return @kind void;
  #L2b5b56.  v0:= 1I;
  #L2b5b58.  v2.`he.a$f.h` @type ^`boolean` := v0 @kind boolean;
  #L2b5b5c.  v0:= v2.`he.a$f.i` @type ^`he.a` @kind object;
  #L2b5b60.  v1:= v2.`he.a$f.g` @type ^`okio.j` @kind object;
  #L2b5b64.  call `k`(v0, v1) @signature `Lhe/a;.k:(Lhe/a;Lokio/j;)V` @kind static;
  #L2b5b6a.  v0:= v2.`he.a$f.i` @type ^`he.a` @kind object;
  #L2b5b6e.  v1:= 3I;
  #L2b5b70.  call temp:= `m`(v0, v1) @signature `Lhe/a;.m:(Lhe/a;I)I` @kind static;
  #L2b5b76.  return @kind void;
}
procedure `void` `e0`(`he.a$f` v7 @kind this, `okio.c` v8 @kind object, `long` v9 ) @signature `Lhe/a$f;.e0:(Lokio/c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2b5bb8.  v0:= v7.`he.a$f.h` @type ^`boolean` @kind boolean;
  #L2b5bbc.  if v0 != 0 then goto L2b5be8;
  #L2b5bc0.  call temp:= `u0`(v8) @signature `Lokio/c;.u0:()J` @kind virtual;
  #L2b5bc6.  v1:= temp @kind wide;
  #L2b5bc8.  v3:= 0L;
  #L2b5bcc.  v5:= v9 @kind wide;
  #L2b5bce.  call `f`(v1, v3, v5) @signature `Lee/e;.f:(JJJ)V` @kind static;
  #L2b5bd4.  v0:= v7.`he.a$f.i` @type ^`he.a` @kind object;
  #L2b5bd8.  call temp:= `j`(v0) @signature `Lhe/a;.j:(Lhe/a;)Lokio/d;` @kind static;
  #L2b5bde.  v0:= temp @kind object;
  #L2b5be0.  call `e0`(v0, v8, v9) @signature `Lokio/u;.e0:(Lokio/c;J)V` @kind interface;
  #L2b5be6.  return @kind void;
  #L2b5be8.  v8:= new `java.lang.IllegalStateException`;
  #L2b5bec.  v9:= "closed" @kind object;
  #L2b5bf0.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2b5bf6.  throw v8;
}
procedure `void` `flush`(`he.a$f` v1 @kind this) @signature `Lhe/a$f;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b5b88.  v0:= v1.`he.a$f.h` @type ^`boolean` @kind boolean;
  #L2b5b8c.  if v0 == 0 then goto L2b5b92;
  #L2b5b90.  return @kind void;
  #L2b5b92.  v0:= v1.`he.a$f.i` @type ^`he.a` @kind object;
  #L2b5b96.  call temp:= `j`(v0) @signature `Lhe/a;.j:(Lhe/a;)Lokio/d;` @kind static;
  #L2b5b9c.  v0:= temp @kind object;
  #L2b5b9e.  call `flush`(v0) @signature `Lokio/d;.flush:()V` @kind interface;
  #L2b5ba4.  return @kind void;
}
procedure `okio.w` `timeout`(`he.a$f` v1 @kind this) @signature `Lhe/a$f;.timeout:()Lokio/w;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b5ae0.  v0:= v1.`he.a$f.g` @type ^`okio.j` @kind object;
  #L2b5ae4.  return v0 @kind object;
}
