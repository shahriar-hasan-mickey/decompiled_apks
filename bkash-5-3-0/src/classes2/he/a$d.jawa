record `he.a$d` @kind class @AccessFlag  extends `he.a$b` @kind class {
  `okhttp3.x` `he.a$d.j` @AccessFlag PRIVATE_FINAL;
  `long` `he.a$d.k` @AccessFlag PRIVATE;
  `boolean` `he.a$d.l` @AccessFlag PRIVATE;
  `he.a` `he.a$d.m` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`he.a$d` v2 @kind this, `he.a` v3 @kind object, `okhttp3.x` v4 @kind object) @signature `Lhe/a$d;.<init>:(Lhe/a;Lokhttp3/x;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2b579c.  v2.`he.a$d.m` @type ^`he.a` := v3 @kind object;
  #L2b57a0.  v0:= 0I;
  #L2b57a2.  call `<init>`(v2, v3, v0) @signature `Lhe/a$b;.<init>:(Lhe/a;Lhe/a$a;)V` @kind direct;
  #L2b57a8.  v0:= -1L;
  #L2b57ac.  v2.`he.a$d.k` @type ^`long` := v0 @kind wide;
  #L2b57b0.  v3:= 1I;
  #L2b57b2.  v2.`he.a$d.l` @type ^`boolean` := v3 @kind boolean;
  #L2b57b6.  v2.`he.a$d.j` @type ^`okhttp3.x` := v4 @kind object;
  #L2b57ba.  return @kind void;
}
procedure `void` `i`(`he.a$d` v6 @kind this) @signature `Lhe/a$d;.i:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2b5824.  v0:= v6.`he.a$d.k` @type ^`long` @kind wide;
  #L2b5828.  v2:= -1L;
  #L2b582c.  v4:= lcmp(v0, v2);
  #L2b5830.  if v4 == 0 then goto L2b5846;
  #L2b5834.  v0:= v6.`he.a$d.m` @type ^`he.a` @kind object;
  #L2b5838.  call temp:= `n`(v0) @signature `Lhe/a;.n:(Lhe/a;)Lokio/e;` @kind static;
  #L2b583e.  v0:= temp @kind object;
  #L2b5840.  call temp:= `o0`(v0) @signature `Lokio/e;.o0:()Ljava/lang/String;` @kind interface;
  #L2b5846.  v0:= v6.`he.a$d.m` @type ^`he.a` @kind object;
  #L2b584a.  call temp:= `n`(v0) @signature `Lhe/a;.n:(Lhe/a;)Lokio/e;` @kind static;
  #L2b5850.  v0:= temp @kind object;
  #L2b5852.  call temp:= `N0`(v0) @signature `Lokio/e;.N0:()J` @kind interface;
  #L2b5858.  v0:= temp @kind wide;
  #L2b585a.  v6.`he.a$d.k` @type ^`long` := v0 @kind wide;
  #L2b585e.  v0:= v6.`he.a$d.m` @type ^`he.a` @kind object;
  #L2b5862.  call temp:= `n`(v0) @signature `Lhe/a;.n:(Lhe/a;)Lokio/e;` @kind static;
  #L2b5868.  v0:= temp @kind object;
  #L2b586a.  call temp:= `o0`(v0) @signature `Lokio/e;.o0:()Ljava/lang/String;` @kind interface;
  #L2b5870.  v0:= temp @kind object;
  #L2b5872.  call temp:= `trim`(v0) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L2b5878.  v0:= temp @kind object;
  #L2b587a.  v1:= v6.`he.a$d.k` @type ^`long` @kind wide;
  #L2b587e.  v3:= 0L;
  #L2b5882.  v5:= lcmp(v1, v3);
  #L2b5886.  if v5 < 0 then goto L2b58fc;
  #L2b588a.  call temp:= `isEmpty`(v0) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L2b5890.  v1:= temp;
  #L2b5892.  if v1 != 0 then goto L2b58a6;
  #L2b5896.  v1:= ";" @kind object;
  #L2b589a.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L2b58a0.  v1:= temp;
  #L2b58a2.  if v1 == 0 then goto L2b58fc;
  #L2b58a6.  v0:= v6.`he.a$d.k` @type ^`long` @kind wide;
  #L2b58aa.  v2:= lcmp(v0, v3);
  #L2b58ae.  if v2 != 0 then goto L2b58fa;
  #L2b58b2.  v0:= 0I;
  #L2b58b4.  v6.`he.a$d.l` @type ^`boolean` := v0 @kind boolean;
  #L2b58b8.  v0:= v6.`he.a$d.m` @type ^`he.a` @kind object;
  #L2b58bc.  call temp:= `r`(v0) @signature `Lhe/a;.r:(Lhe/a;)Lokhttp3/w;` @kind static;
  #L2b58c2.  v1:= temp @kind object;
  #L2b58c4.  call temp:= `q`(v0, v1) @signature `Lhe/a;.q:(Lhe/a;Lokhttp3/w;)Lokhttp3/w;` @kind static;
  #L2b58ca.  v0:= v6.`he.a$d.m` @type ^`he.a` @kind object;
  #L2b58ce.  call temp:= `i`(v0) @signature `Lhe/a;.i:(Lhe/a;)Lokhttp3/b0;` @kind static;
  #L2b58d4.  v0:= temp @kind object;
  #L2b58d6.  call temp:= `g`(v0) @signature `Lokhttp3/b0;.g:()Lokhttp3/o;` @kind virtual;
  #L2b58dc.  v0:= temp @kind object;
  #L2b58de.  v1:= v6.`he.a$d.j` @type ^`okhttp3.x` @kind object;
  #L2b58e2.  v2:= v6.`he.a$d.m` @type ^`he.a` @kind object;
  #L2b58e6.  call temp:= `p`(v2) @signature `Lhe/a;.p:(Lhe/a;)Lokhttp3/w;` @kind static;
  #L2b58ec.  v2:= temp @kind object;
  #L2b58ee.  call `e`(v0, v1, v2) @signature `Lge/e;.e:(Lokhttp3/o;Lokhttp3/x;Lokhttp3/w;)V` @kind static;
  #L2b58f4.  call `e`(v6) @signature `Lhe/a$b;.e:()V` @kind virtual;
  #L2b58fa.  return @kind void;
  #L2b58fc.  v1:= new `java.net.ProtocolException`;
  #L2b5900.  v2:= new `java.lang.StringBuilder`;
  #L2b5904.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2b590a.  v3:= "expected chunk size and optional extensions but was \"" @kind object;
  #L2b590e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b5914.  v3:= v6.`he.a$d.k` @type ^`long` @kind wide;
  #L2b5918.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b591e.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b5924.  v0:= "\"" @kind object;
  #L2b5928.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b592e.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2b5934.  v0:= temp @kind object;
  #L2b5936.  call `<init>`(v1, v0) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2b593c.  throw v1;
  #L2b593e.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L2b5940.  v1:= new `java.net.ProtocolException`;
  #L2b5944.  call temp:= `getMessage`(v0) @signature `Ljava/lang/NumberFormatException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L2b594a.  v0:= temp @kind object;
  #L2b594c.  call `<init>`(v1, v0) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2b5952.  throw v1;
  catch `java.lang.NumberFormatException` @[L2b5846..L2b58a2] goto L2b593e;
  catch `java.lang.NumberFormatException` @[L2b58fc..L2b593e] goto L2b593e;
}
procedure `void` `close`(`he.a$d` v2 @kind this) @signature `Lhe/a$d;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2b57cc.  v0:= v2.`he.a$b.h` @type ^`boolean` @kind boolean;
  #L2b57d0.  if v0 == 0 then goto L2b57d6;
  #L2b57d4.  return @kind void;
  #L2b57d6.  v0:= v2.`he.a$d.l` @type ^`boolean` @kind boolean;
  #L2b57da.  if v0 == 0 then goto L2b580a;
  #L2b57de.  v0:= 100I;
  #L2b57e2.  v1:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L2b57e6.  call temp:= `p`(v2, v0, v1) @signature `Lee/e;.p:(Lokio/v;ILjava/util/concurrent/TimeUnit;)Z` @kind static;
  #L2b57ec.  v0:= temp;
  #L2b57ee.  if v0 != 0 then goto L2b580a;
  #L2b57f2.  v0:= v2.`he.a$d.m` @type ^`he.a` @kind object;
  #L2b57f6.  call temp:= `o`(v0) @signature `Lhe/a;.o:(Lhe/a;)Lokhttp3/internal/connection/e;` @kind static;
  #L2b57fc.  v0:= temp @kind object;
  #L2b57fe.  call `p`(v0) @signature `Lokhttp3/internal/connection/e;.p:()V` @kind virtual;
  #L2b5804.  call `e`(v2) @signature `Lhe/a$b;.e:()V` @kind virtual;
  #L2b580a.  v0:= 1I;
  #L2b580c.  v2.`he.a$b.h` @type ^`boolean` := v0 @kind boolean;
  #L2b5810.  return @kind void;
}
procedure `long` `z0`(`he.a$d` v7 @kind this, `okio.c` v8 @kind object, `long` v9 ) @signature `Lhe/a$d;.z0:(Lokio/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2b56b8.  v0:= 0L;
  #L2b56bc.  v2:= lcmp(v9, v0);
  #L2b56c0.  if v2 < 0 then goto L2b575e;
  #L2b56c4.  v2:= v7.`he.a$b.h` @type ^`boolean` @kind boolean;
  #L2b56c8.  if v2 != 0 then goto L2b574e;
  #L2b56cc.  v2:= v7.`he.a$d.l` @type ^`boolean` @kind boolean;
  #L2b56d0.  v3:= -1L;
  #L2b56d4.  if v2 != 0 then goto L2b56da;
  #L2b56d8.  return v3 @kind wide;
  #L2b56da.  v5:= v7.`he.a$d.k` @type ^`long` @kind wide;
  #L2b56de.  v2:= lcmp(v5, v0);
  #L2b56e2.  if v2 == 0 then goto L2b56ee;
  #L2b56e6.  v0:= lcmp(v5, v3);
  #L2b56ea.  if v0 != 0 then goto L2b56fe;
  #L2b56ee.  call `i`(v7) @signature `Lhe/a$d;.i:()V` @kind direct;
  #L2b56f4.  v0:= v7.`he.a$d.l` @type ^`boolean` @kind boolean;
  #L2b56f8.  if v0 != 0 then goto L2b56fe;
  #L2b56fc.  return v3 @kind wide;
  #L2b56fe.  v0:= v7.`he.a$d.k` @type ^`long` @kind wide;
  #L2b5702.  call temp:= `min`(v9, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2b5708.  v9:= temp @kind wide;
  #L2b570a.  call temp:= `z0`(v7, v8, v9) @signature `Lhe/a$b;.z0:(Lokio/c;J)J` @kind super;
  #L2b5710.  v8:= temp @kind wide;
  #L2b5712.  v10:= lcmp(v8, v3);
  #L2b5716.  if v10 == 0 then goto L2b5726;
  #L2b571a.  v0:= v7.`he.a$d.k` @type ^`long` @kind wide;
  #L2b571e.  v0:= v0 - v8 @kind long;
  #L2b5720.  v7.`he.a$d.k` @type ^`long` := v0 @kind wide;
  #L2b5724.  return v8 @kind wide;
  #L2b5726.  v8:= v7.`he.a$d.m` @type ^`he.a` @kind object;
  #L2b572a.  call temp:= `o`(v8) @signature `Lhe/a;.o:(Lhe/a;)Lokhttp3/internal/connection/e;` @kind static;
  #L2b5730.  v8:= temp @kind object;
  #L2b5732.  call `p`(v8) @signature `Lokhttp3/internal/connection/e;.p:()V` @kind virtual;
  #L2b5738.  v8:= new `java.net.ProtocolException`;
  #L2b573c.  v9:= "unexpected end of stream" @kind object;
  #L2b5740.  call `<init>`(v8, v9) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2b5746.  call `e`(v7) @signature `Lhe/a$b;.e:()V` @kind virtual;
  #L2b574c.  throw v8;
  #L2b574e.  v8:= new `java.lang.IllegalStateException`;
  #L2b5752.  v9:= "closed" @kind object;
  #L2b5756.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2b575c.  throw v8;
  #L2b575e.  v8:= new `java.lang.IllegalArgumentException`;
  #L2b5762.  v0:= new `java.lang.StringBuilder`;
  #L2b5766.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2b576c.  v1:= "byteCount < 0: " @kind object;
  #L2b5770.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b5776.  call temp:= `append`(v0, v9) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b577c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2b5782.  v9:= temp @kind object;
  #L2b5784.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2b578a.  throw v8;
}
