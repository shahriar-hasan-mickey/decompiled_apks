record `kotlin.coroutines.jvm.internal.d` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlin.coroutines.jvm.internal.a` @kind class {
  `kotlin.coroutines.g` `kotlin.coroutines.jvm.internal.d._context` @AccessFlag PRIVATE_FINAL;
  `kotlin.coroutines.d` `kotlin.coroutines.jvm.internal.d.intercepted` @AccessFlag PRIVATE_TRANSIENT;
}
procedure `void` `<init>`(`kotlin.coroutines.jvm.internal.d` v1 @kind this, `kotlin.coroutines.d` v2 @kind object) @signature `Lkotlin/coroutines/jvm/internal/d;.<init>:(Lkotlin/coroutines/d;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L306a8c.  if v2 == 0 then goto L306a9a;
  #L306a90.  call temp:= `getContext`(v2) @signature `Lkotlin/coroutines/d;.getContext:()Lkotlin/coroutines/g;` @kind interface;
  #L306a96.  v0:= temp @kind object;
  #L306a98.  goto L306a9c;
  #L306a9a.  v0:= 0I;
  #L306a9c.  call `<init>`(v1, v2, v0) @signature `Lkotlin/coroutines/jvm/internal/d;.<init>:(Lkotlin/coroutines/d;Lkotlin/coroutines/g;)V` @kind direct;
  #L306aa2.  return @kind void;
}
procedure `void` `<init>`(`kotlin.coroutines.jvm.internal.d` v0 @kind this, `kotlin.coroutines.d` v1 @kind object, `kotlin.coroutines.g` v2 @kind object) @signature `Lkotlin/coroutines/jvm/internal/d;.<init>:(Lkotlin/coroutines/d;Lkotlin/coroutines/g;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L306ab4.  call `<init>`(v0, v1) @signature `Lkotlin/coroutines/jvm/internal/a;.<init>:(Lkotlin/coroutines/d;)V` @kind direct;
  #L306aba.  v0.`kotlin.coroutines.jvm.internal.d._context` @type ^`kotlin.coroutines.g` := v2 @kind object;
  #L306abe.  return @kind void;
}
procedure `kotlin.coroutines.g` `getContext`(`kotlin.coroutines.jvm.internal.d` v1 @kind this) @signature `Lkotlin/coroutines/jvm/internal/d;.getContext:()Lkotlin/coroutines/g;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L306a70.  v0:= v1.`kotlin.coroutines.jvm.internal.d._context` @type ^`kotlin.coroutines.g` @kind object;
  #L306a74.  call `c`(v0) @signature `Lkotlin/jvm/internal/k;.c:(Ljava/lang/Object;)V` @kind static;
  #L306a7a.  return v0 @kind object;
}
procedure `kotlin.coroutines.d` `intercepted`(`kotlin.coroutines.jvm.internal.d` v2 @kind this) @signature `Lkotlin/coroutines/jvm/internal/d;.intercepted:()Lkotlin/coroutines/d;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L306a28.  v0:= v2.`kotlin.coroutines.jvm.internal.d.intercepted` @type ^`kotlin.coroutines.d` @kind object;
  #L306a2c.  if v0 != 0 then goto L306a5e;
  #L306a30.  call temp:= `getContext`(v2) @signature `Lkotlin/coroutines/jvm/internal/d;.getContext:()Lkotlin/coroutines/g;` @kind virtual;
  #L306a36.  v0:= temp @kind object;
  #L306a38.  v1:= `@@kotlin.coroutines.e.d` @type ^`kotlin.coroutines.e$b` @kind object;
  #L306a3c.  call temp:= `get`(v0, v1) @signature `Lkotlin/coroutines/g;.get:(Lkotlin/coroutines/g$c;)Lkotlin/coroutines/g$b;` @kind interface;
  #L306a42.  v0:= temp @kind object;
  #L306a44.  v0:= (`kotlin.coroutines.e`) v0 @kind object;
  #L306a48.  if v0 == 0 then goto L306a58;
  #L306a4c.  call temp:= `k`(v0, v2) @signature `Lkotlin/coroutines/e;.k:(Lkotlin/coroutines/d;)Lkotlin/coroutines/d;` @kind interface;
  #L306a52.  v0:= temp @kind object;
  #L306a54.  if v0 != 0 then goto L306a5a;
  #L306a58.  v0:= v2 @kind object;
  #L306a5a.  v2.`kotlin.coroutines.jvm.internal.d.intercepted` @type ^`kotlin.coroutines.d` := v0 @kind object;
  #L306a5e.  return v0 @kind object;
}
procedure `void` `releaseIntercepted`(`kotlin.coroutines.jvm.internal.d` v3 @kind this) @signature `Lkotlin/coroutines/jvm/internal/d;.releaseIntercepted:()V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L306ad0.  v0:= v3.`kotlin.coroutines.jvm.internal.d.intercepted` @type ^`kotlin.coroutines.d` @kind object;
  #L306ad4.  if v0 == 0 then goto L306b00;
  #L306ad8.  if v0 == v3 then goto L306b00;
  #L306adc.  call temp:= `getContext`(v3) @signature `Lkotlin/coroutines/jvm/internal/d;.getContext:()Lkotlin/coroutines/g;` @kind virtual;
  #L306ae2.  v1:= temp @kind object;
  #L306ae4.  v2:= `@@kotlin.coroutines.e.d` @type ^`kotlin.coroutines.e$b` @kind object;
  #L306ae8.  call temp:= `get`(v1, v2) @signature `Lkotlin/coroutines/g;.get:(Lkotlin/coroutines/g$c;)Lkotlin/coroutines/g$b;` @kind interface;
  #L306aee.  v1:= temp @kind object;
  #L306af0.  call `c`(v1) @signature `Lkotlin/jvm/internal/k;.c:(Ljava/lang/Object;)V` @kind static;
  #L306af6.  v1:= (`kotlin.coroutines.e`) v1 @kind object;
  #L306afa.  call `i`(v1, v0) @signature `Lkotlin/coroutines/e;.i:(Lkotlin/coroutines/d;)V` @kind interface;
  #L306b00.  v0:= `@@kotlin.coroutines.jvm.internal.c.g` @type ^`kotlin.coroutines.jvm.internal.c` @kind object;
  #L306b04.  v3.`kotlin.coroutines.jvm.internal.d.intercepted` @type ^`kotlin.coroutines.d` := v0 @kind object;
  #L306b08.  return @kind void;
}
