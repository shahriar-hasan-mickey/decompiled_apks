record `kotlin.coroutines.jvm.internal.i` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlin.coroutines.jvm.internal.a` @kind class {
}
procedure `void` `<init>`(`kotlin.coroutines.jvm.internal.i` v1 @kind this, `kotlin.coroutines.d` v2 @kind object) @signature `Lkotlin/coroutines/jvm/internal/i;.<init>:(Lkotlin/coroutines/d;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L306efc.  call `<init>`(v1, v2) @signature `Lkotlin/coroutines/jvm/internal/a;.<init>:(Lkotlin/coroutines/d;)V` @kind direct;
  #L306f02.  if v2 == 0 then goto L306f3a;
  #L306f06.  call temp:= `getContext`(v2) @signature `Lkotlin/coroutines/d;.getContext:()Lkotlin/coroutines/g;` @kind interface;
  #L306f0c.  v2:= temp @kind object;
  #L306f0e.  v0:= `@@kotlin.coroutines.h.INSTANCE` @type ^`kotlin.coroutines.h` @kind object;
  #L306f12.  if v2 != v0 then goto L306f1a;
  #L306f16.  v2:= 1I;
  #L306f18.  goto L306f1c;
  #L306f1a.  v2:= 0I;
  #L306f1c.  if v2 == 0 then goto L306f22;
  #L306f20.  goto L306f3a;
  #L306f22.  v2:= new `java.lang.IllegalArgumentException`;
  #L306f26.  v0:= "Coroutines with restricted suspension must have EmptyCoroutineContext" @kind object;
  #L306f2a.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L306f30.  v0:= temp @kind object;
  #L306f32.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L306f38.  throw v2;
  #L306f3a.  return @kind void;
}
procedure `kotlin.coroutines.g` `getContext`(`kotlin.coroutines.jvm.internal.i` v1 @kind this) @signature `Lkotlin/coroutines/jvm/internal/i;.getContext:()Lkotlin/coroutines/g;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L306ee4.  v0:= `@@kotlin.coroutines.h.INSTANCE` @type ^`kotlin.coroutines.h` @kind object;
  #L306ee8.  return v0 @kind object;
}
