record `kotlin.coroutines.g$a` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `kotlin.coroutines.g` `a`(`kotlin.coroutines.g` v1 @kind object, `kotlin.coroutines.g` v2 @kind object) @signature `Lkotlin/coroutines/g$a;.a:(Lkotlin/coroutines/g;Lkotlin/coroutines/g;)Lkotlin/coroutines/g;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L305fa4.  v0:= "context" @kind object;
  #L305fa8.  call `f`(v2, v0) @signature `Lkotlin/jvm/internal/k;.f:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L305fae.  v0:= `@@kotlin.coroutines.h.INSTANCE` @type ^`kotlin.coroutines.h` @kind object;
  #L305fb2.  if v2 != v0 then goto L305fb8;
  #L305fb6.  goto L305fc8;
  #L305fb8.  v0:= `@@kotlin.coroutines.g$a$a.INSTANCE` @type ^`kotlin.coroutines.g$a$a` @kind object;
  #L305fbc.  call temp:= `fold`(v2, v1, v0) @signature `Lkotlin/coroutines/g;.fold:(Ljava/lang/Object;Lwd/p;)Ljava/lang/Object;` @kind interface;
  #L305fc2.  v1:= temp @kind object;
  #L305fc4.  v1:= (`kotlin.coroutines.g`) v1 @kind object;
  #L305fc8.  return v1 @kind object;
}
