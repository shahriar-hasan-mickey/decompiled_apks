record `kotlin.coroutines.c` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.coroutines.g` @kind interface, `java.io.Serializable` @kind interface {
  `kotlin.coroutines.g$b` `kotlin.coroutines.c.element` @AccessFlag PRIVATE_FINAL;
  `kotlin.coroutines.g` `kotlin.coroutines.c.left` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.coroutines.c` v1 @kind this, `kotlin.coroutines.g` v2 @kind object, `kotlin.coroutines.g$b` v3 @kind object) @signature `Lkotlin/coroutines/c;.<init>:(Lkotlin/coroutines/g;Lkotlin/coroutines/g$b;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L305dc0.  v0:= "left" @kind object;
  #L305dc4.  call `f`(v2, v0) @signature `Lkotlin/jvm/internal/k;.f:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L305dca.  v0:= "element" @kind object;
  #L305dce.  call `f`(v3, v0) @signature `Lkotlin/jvm/internal/k;.f:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L305dd4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L305dda.  v1.`kotlin.coroutines.c.left` @type ^`kotlin.coroutines.g` := v2 @kind object;
  #L305dde.  v1.`kotlin.coroutines.c.element` @type ^`kotlin.coroutines.g$b` := v3 @kind object;
  #L305de2.  return @kind void;
}
procedure `boolean` `a`(`kotlin.coroutines.c` v1 @kind this, `kotlin.coroutines.g$b` v2 @kind object) @signature `Lkotlin/coroutines/c;.a:(Lkotlin/coroutines/g$b;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L305ad0.  call temp:= `getKey`(v2) @signature `Lkotlin/coroutines/g$b;.getKey:()Lkotlin/coroutines/g$c;` @kind interface;
  #L305ad6.  v0:= temp @kind object;
  #L305ad8.  call temp:= `get`(v1, v0) @signature `Lkotlin/coroutines/c;.get:(Lkotlin/coroutines/g$c;)Lkotlin/coroutines/g$b;` @kind virtual;
  #L305ade.  v0:= temp @kind object;
  #L305ae0.  call temp:= `a`(v0, v2) @signature `Lkotlin/jvm/internal/k;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L305ae6.  v2:= temp;
  #L305ae8.  return v2;
}
procedure `boolean` `b`(`kotlin.coroutines.c` v1 @kind this, `kotlin.coroutines.c` v2 @kind object) @signature `Lkotlin/coroutines/c;.b:(Lkotlin/coroutines/c;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L305afc.  v0:= v2.`kotlin.coroutines.c.element` @type ^`kotlin.coroutines.g$b` @kind object;
  #L305b00.  call temp:= `a`(v1, v0) @signature `Lkotlin/coroutines/c;.a:(Lkotlin/coroutines/g$b;)Z` @kind direct;
  #L305b06.  v0:= temp;
  #L305b08.  if v0 != 0 then goto L305b10;
  #L305b0c.  v2:= 0I;
  #L305b0e.  return v2;
  #L305b10.  v2:= v2.`kotlin.coroutines.c.left` @type ^`kotlin.coroutines.g` @kind object;
  #L305b14.  v0:= instanceof @variable v2 @type ^`kotlin.coroutines.c` @kind boolean;
  #L305b18.  if v0 == 0 then goto L305b22;
  #L305b1c.  v2:= (`kotlin.coroutines.c`) v2 @kind object;
  #L305b20.  goto L305afc;
  #L305b22.  v0:= "null cannot be cast to non-null type kotlin.coroutines.CoroutineContext.Element" @kind object;
  #L305b26.  call `d`(v2, v0) @signature `Lkotlin/jvm/internal/k;.d:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L305b2c.  v2:= (`kotlin.coroutines.g$b`) v2 @kind object;
  #L305b30.  call temp:= `a`(v1, v2) @signature `Lkotlin/coroutines/c;.a:(Lkotlin/coroutines/g$b;)Z` @kind direct;
  #L305b36.  v2:= temp;
  #L305b38.  return v2;
}
procedure `int` `c`(`kotlin.coroutines.c` v3 @kind this) @signature `Lkotlin/coroutines/c;.c:()I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L305bc4.  v0:= 2I;
  #L305bc6.  v1:= v3 @kind object;
  #L305bc8.  v1:= v1.`kotlin.coroutines.c.left` @type ^`kotlin.coroutines.g` @kind object;
  #L305bcc.  v2:= instanceof @variable v1 @type ^`kotlin.coroutines.c` @kind boolean;
  #L305bd0.  if v2 == 0 then goto L305bda;
  #L305bd4.  v1:= (`kotlin.coroutines.c`) v1 @kind object;
  #L305bd8.  goto L305bdc;
  #L305bda.  v1:= 0I;
  #L305bdc.  if v1 != 0 then goto L305be2;
  #L305be0.  return v0;
  #L305be2.  v0:= v0 + 1;
  #L305be6.  goto L305bc8;
}
procedure `java.lang.Object` `writeReplace`(`kotlin.coroutines.c` v5 @kind this) @signature `Lkotlin/coroutines/c;.writeReplace:()Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L305c2c.  call temp:= `c`(v5) @signature `Lkotlin/coroutines/c;.c:()I` @kind direct;
  #L305c32.  v0:= temp;
  #L305c34.  v1:= new `kotlin.coroutines.g`[v0];
  #L305c38.  v2:= new `kotlin.jvm.internal.q`;
  #L305c3c.  call `<init>`(v2) @signature `Lkotlin/jvm/internal/q;.<init>:()V` @kind direct;
  #L305c42.  v3:= `@@od.t.a` @type ^`od.t` @kind object;
  #L305c46.  v4:= new `kotlin.coroutines.c$c`;
  #L305c4a.  call `<init>`(v4, v1, v2) @signature `Lkotlin/coroutines/c$c;.<init>:([Lkotlin/coroutines/g;Lkotlin/jvm/internal/q;)V` @kind direct;
  #L305c50.  call temp:= `fold`(v5, v3, v4) @signature `Lkotlin/coroutines/c;.fold:(Ljava/lang/Object;Lwd/p;)Ljava/lang/Object;` @kind virtual;
  #L305c56.  v2:= v2.`kotlin.jvm.internal.q.element` @type ^`int`;
  #L305c5a.  if v2 != v0 then goto L305c62;
  #L305c5e.  v0:= 1I;
  #L305c60.  goto L305c64;
  #L305c62.  v0:= 0I;
  #L305c64.  if v0 == 0 then goto L305c74;
  #L305c68.  v0:= new `kotlin.coroutines.c$a`;
  #L305c6c.  call `<init>`(v0, v1) @signature `Lkotlin/coroutines/c$a;.<init>:([Lkotlin/coroutines/g;)V` @kind direct;
  #L305c72.  return v0 @kind object;
  #L305c74.  v0:= new `java.lang.IllegalStateException`;
  #L305c78.  v1:= "Check failed." @kind object;
  #L305c7c.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L305c82.  v1:= temp @kind object;
  #L305c84.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L305c8a.  throw v0;
}
procedure `boolean` `equals`(`kotlin.coroutines.c` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/coroutines/c;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L305b4c.  if v2 == v3 then goto L305b82;
  #L305b50.  v0:= instanceof @variable v3 @type ^`kotlin.coroutines.c` @kind boolean;
  #L305b54.  if v0 == 0 then goto L305b7e;
  #L305b58.  v3:= (`kotlin.coroutines.c`) v3 @kind object;
  #L305b5c.  call temp:= `c`(v3) @signature `Lkotlin/coroutines/c;.c:()I` @kind direct;
  #L305b62.  v0:= temp;
  #L305b64.  call temp:= `c`(v2) @signature `Lkotlin/coroutines/c;.c:()I` @kind direct;
  #L305b6a.  v1:= temp;
  #L305b6c.  if v0 != v1 then goto L305b7e;
  #L305b70.  call temp:= `b`(v3, v2) @signature `Lkotlin/coroutines/c;.b:(Lkotlin/coroutines/c;)Z` @kind direct;
  #L305b76.  v3:= temp;
  #L305b78.  if v3 == 0 then goto L305b7e;
  #L305b7c.  goto L305b82;
  #L305b7e.  v3:= 0I;
  #L305b80.  goto L305b84;
  #L305b82.  v3:= 1I;
  #L305b84.  return v3;
}
procedure `java.lang.Object` `fold`(`kotlin.coroutines.c` v1 @kind this, `java.lang.Object` v2 @kind object, `wd.p` v3 @kind object) @signature `Lkotlin/coroutines/c;.fold:(Ljava/lang/Object;Lwd/p;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L305bf8.  v0:= "operation" @kind object;
  #L305bfc.  call `f`(v3, v0) @signature `Lkotlin/jvm/internal/k;.f:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L305c02.  v0:= v1.`kotlin.coroutines.c.left` @type ^`kotlin.coroutines.g` @kind object;
  #L305c06.  call temp:= `fold`(v0, v2, v3) @signature `Lkotlin/coroutines/g;.fold:(Ljava/lang/Object;Lwd/p;)Ljava/lang/Object;` @kind interface;
  #L305c0c.  v2:= temp @kind object;
  #L305c0e.  v0:= v1.`kotlin.coroutines.c.element` @type ^`kotlin.coroutines.g$b` @kind object;
  #L305c12.  call temp:= `invoke`(v3, v2, v0) @signature `Lwd/p;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L305c18.  v2:= temp @kind object;
  #L305c1a.  return v2 @kind object;
}
procedure `kotlin.coroutines.g$b` `get`(`kotlin.coroutines.c` v2 @kind this, `kotlin.coroutines.g$c` v3 @kind object) @signature `Lkotlin/coroutines/c;.get:(Lkotlin/coroutines/g$c;)Lkotlin/coroutines/g$b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L305d74.  v0:= "key" @kind object;
  #L305d78.  call `f`(v3, v0) @signature `Lkotlin/jvm/internal/k;.f:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L305d7e.  v0:= v2 @kind object;
  #L305d80.  v1:= v0.`kotlin.coroutines.c.element` @type ^`kotlin.coroutines.g$b` @kind object;
  #L305d84.  call temp:= `get`(v1, v3) @signature `Lkotlin/coroutines/g$b;.get:(Lkotlin/coroutines/g$c;)Lkotlin/coroutines/g$b;` @kind interface;
  #L305d8a.  v1:= temp @kind object;
  #L305d8c.  if v1 == 0 then goto L305d92;
  #L305d90.  return v1 @kind object;
  #L305d92.  v0:= v0.`kotlin.coroutines.c.left` @type ^`kotlin.coroutines.g` @kind object;
  #L305d96.  v1:= instanceof @variable v0 @type ^`kotlin.coroutines.c` @kind boolean;
  #L305d9a.  if v1 == 0 then goto L305da4;
  #L305d9e.  v0:= (`kotlin.coroutines.c`) v0 @kind object;
  #L305da2.  goto L305d80;
  #L305da4.  call temp:= `get`(v0, v3) @signature `Lkotlin/coroutines/g;.get:(Lkotlin/coroutines/g$c;)Lkotlin/coroutines/g$b;` @kind interface;
  #L305daa.  v3:= temp @kind object;
  #L305dac.  return v3 @kind object;
}
procedure `int` `hashCode`(`kotlin.coroutines.c` v2 @kind this) @signature `Lkotlin/coroutines/c;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L305b98.  v0:= v2.`kotlin.coroutines.c.left` @type ^`kotlin.coroutines.g` @kind object;
  #L305b9c.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L305ba2.  v0:= temp;
  #L305ba4.  v1:= v2.`kotlin.coroutines.c.element` @type ^`kotlin.coroutines.g$b` @kind object;
  #L305ba8.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L305bae.  v1:= temp;
  #L305bb0.  v0:= v0 + v1 @kind int;
  #L305bb2.  return v0;
}
procedure `kotlin.coroutines.g` `minusKey`(`kotlin.coroutines.c` v2 @kind this, `kotlin.coroutines.g$c` v3 @kind object) @signature `Lkotlin/coroutines/c;.minusKey:(Lkotlin/coroutines/g$c;)Lkotlin/coroutines/g;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L305cf0.  v0:= "key" @kind object;
  #L305cf4.  call `f`(v3, v0) @signature `Lkotlin/jvm/internal/k;.f:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L305cfa.  v0:= v2.`kotlin.coroutines.c.element` @type ^`kotlin.coroutines.g$b` @kind object;
  #L305cfe.  call temp:= `get`(v0, v3) @signature `Lkotlin/coroutines/g$b;.get:(Lkotlin/coroutines/g$c;)Lkotlin/coroutines/g$b;` @kind interface;
  #L305d04.  v0:= temp @kind object;
  #L305d06.  if v0 == 0 then goto L305d10;
  #L305d0a.  v3:= v2.`kotlin.coroutines.c.left` @type ^`kotlin.coroutines.g` @kind object;
  #L305d0e.  return v3 @kind object;
  #L305d10.  v0:= v2.`kotlin.coroutines.c.left` @type ^`kotlin.coroutines.g` @kind object;
  #L305d14.  call temp:= `minusKey`(v0, v3) @signature `Lkotlin/coroutines/g;.minusKey:(Lkotlin/coroutines/g$c;)Lkotlin/coroutines/g;` @kind interface;
  #L305d1a.  v3:= temp @kind object;
  #L305d1c.  v0:= v2.`kotlin.coroutines.c.left` @type ^`kotlin.coroutines.g` @kind object;
  #L305d20.  if v3 != v0 then goto L305d28;
  #L305d24.  v3:= v2 @kind object;
  #L305d26.  goto L305d46;
  #L305d28.  v0:= `@@kotlin.coroutines.h.INSTANCE` @type ^`kotlin.coroutines.h` @kind object;
  #L305d2c.  if v3 != v0 then goto L305d36;
  #L305d30.  v3:= v2.`kotlin.coroutines.c.element` @type ^`kotlin.coroutines.g$b` @kind object;
  #L305d34.  goto L305d46;
  #L305d36.  v0:= new `kotlin.coroutines.c`;
  #L305d3a.  v1:= v2.`kotlin.coroutines.c.element` @type ^`kotlin.coroutines.g$b` @kind object;
  #L305d3e.  call `<init>`(v0, v3, v1) @signature `Lkotlin/coroutines/c;.<init>:(Lkotlin/coroutines/g;Lkotlin/coroutines/g$b;)V` @kind direct;
  #L305d44.  v3:= v0 @kind object;
  #L305d46.  return v3 @kind object;
}
procedure `kotlin.coroutines.g` `plus`(`kotlin.coroutines.c` v0 @kind this, `kotlin.coroutines.g` v1 @kind object) @signature `Lkotlin/coroutines/c;.plus:(Lkotlin/coroutines/g;)Lkotlin/coroutines/g;` @AccessFlag PUBLIC {
    temp;

  #L305d58.  call temp:= `a`(v0, v1) @signature `Lkotlin/coroutines/g$a;.a:(Lkotlin/coroutines/g;Lkotlin/coroutines/g;)Lkotlin/coroutines/g;` @kind static;
  #L305d5e.  v1:= temp @kind object;
  #L305d60.  return v1 @kind object;
}
procedure `java.lang.String` `toString`(`kotlin.coroutines.c` v3 @kind this) @signature `Lkotlin/coroutines/c;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L305c9c.  v0:= new `java.lang.StringBuilder`;
  #L305ca0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L305ca6.  v1:= 91I;
  #L305caa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L305cb0.  v1:= `@@kotlin.coroutines.c$b.INSTANCE` @type ^`kotlin.coroutines.c$b` @kind object;
  #L305cb4.  v2:= "" @kind object;
  #L305cb8.  call temp:= `fold`(v3, v2, v1) @signature `Lkotlin/coroutines/c;.fold:(Ljava/lang/Object;Lwd/p;)Ljava/lang/Object;` @kind virtual;
  #L305cbe.  v1:= temp @kind object;
  #L305cc0.  v1:= (`java.lang.String`) v1 @kind object;
  #L305cc4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L305cca.  v1:= 93I;
  #L305cce.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L305cd4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L305cda.  v0:= temp @kind object;
  #L305cdc.  return v0 @kind object;
}
