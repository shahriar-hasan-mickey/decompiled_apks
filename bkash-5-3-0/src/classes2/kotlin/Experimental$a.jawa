record `kotlin.Experimental$a` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class {
}
global `kotlin.Experimental$a` `@@kotlin.Experimental$a.ERROR` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `kotlin.Experimental$a` `@@kotlin.Experimental$a.WARNING` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `kotlin.Experimental$a`[] `@@kotlin.Experimental$a.g` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlin/Experimental$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3051fc.  v0:= new `kotlin.Experimental$a`;
  #L305200.  v1:= "WARNING" @kind object;
  #L305204.  v2:= 0I;
  #L305206.  call `<init>`(v0, v1, v2) @signature `Lkotlin/Experimental$a;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L30520c.  `@@kotlin.Experimental$a.WARNING` @type ^`kotlin.Experimental$a` := v0 @kind object;
  #L305210.  v0:= new `kotlin.Experimental$a`;
  #L305214.  v1:= "ERROR" @kind object;
  #L305218.  v2:= 1I;
  #L30521a.  call `<init>`(v0, v1, v2) @signature `Lkotlin/Experimental$a;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L305220.  `@@kotlin.Experimental$a.ERROR` @type ^`kotlin.Experimental$a` := v0 @kind object;
  #L305224.  call temp:= `a`() @signature `Lkotlin/Experimental$a;.a:()[Lkotlin/Experimental$a;` @kind static;
  #L30522a.  v0:= temp @kind object;
  #L30522c.  `@@kotlin.Experimental$a.g` @type ^`kotlin.Experimental$a`[] := v0 @kind object;
  #L305230.  return @kind void;
}
procedure `void` `<init>`(`kotlin.Experimental$a` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 ) @signature `Lkotlin/Experimental$a;.<init>:(Ljava/lang/String;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L305244.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L30524a.  return @kind void;
}
procedure `kotlin.Experimental$a`[] `a`() @signature `Lkotlin/Experimental$a;.a:()[Lkotlin/Experimental$a;` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;

  #L3051ac.  v0:= 2I;
  #L3051ae.  v0:= new `kotlin.Experimental$a`[v0];
  #L3051b2.  v1:= `@@kotlin.Experimental$a.WARNING` @type ^`kotlin.Experimental$a` @kind object;
  #L3051b6.  v2:= 0I;
  #L3051b8.  v0[v2]:= v1 @kind object;
  #L3051bc.  v1:= `@@kotlin.Experimental$a.ERROR` @type ^`kotlin.Experimental$a` @kind object;
  #L3051c0.  v2:= 1I;
  #L3051c2.  v0[v2]:= v1 @kind object;
  #L3051c6.  return v0 @kind object;
}
procedure `kotlin.Experimental$a` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lkotlin/Experimental$a;.valueOf:(Ljava/lang/String;)Lkotlin/Experimental$a;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L305188.  v0:= constclass @type ^`kotlin.Experimental$a` @kind object;
  #L30518c.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L305192.  v1:= temp @kind object;
  #L305194.  v1:= (`kotlin.Experimental$a`) v1 @kind object;
  #L305198.  return v1 @kind object;
}
procedure `kotlin.Experimental$a`[] `values`() @signature `Lkotlin/Experimental$a;.values:()[Lkotlin/Experimental$a;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3051d8.  v0:= `@@kotlin.Experimental$a.g` @type ^`kotlin.Experimental$a`[] @kind object;
  #L3051dc.  call temp:= `clone`(v0) @signature `[Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L3051e2.  v0:= temp @kind object;
  #L3051e4.  v0:= (`kotlin.Experimental$a`[]) v0 @kind object;
  #L3051e8.  return v0 @kind object;
}
