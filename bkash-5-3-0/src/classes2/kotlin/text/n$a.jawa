record `kotlin.text.n$a` @kind class @AccessFlag FINAL extends `kotlin.jvm.internal.l` @kind class, `wd.p` @kind interface {
  `java.util.List` `kotlin.text.n$a.$delimitersList` @AccessFlag FINAL_SYNTHETIC;
  `boolean` `kotlin.text.n$a.$ignoreCase` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.text.n$a` v0 @kind this, `java.util.List` v1 @kind object, `boolean` v2 ) @signature `Lkotlin/text/n$a;.<init>:(Ljava/util/List;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L30ae04.  v0.`kotlin.text.n$a.$delimitersList` @type ^`java.util.List` := v1 @kind object;
  #L30ae08.  v0.`kotlin.text.n$a.$ignoreCase` @type ^`boolean` := v2 @kind boolean;
  #L30ae0c.  v1:= 2I;
  #L30ae0e.  call `<init>`(v0, v1) @signature `Lkotlin/jvm/internal/l;.<init>:(I)V` @kind direct;
  #L30ae14.  return @kind void;
}
procedure `java.lang.Object` `invoke`(`kotlin.text.n$a` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlin/text/n$a;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L30ad74.  v1:= (`java.lang.CharSequence`) v1 @kind object;
  #L30ad78.  v2:= (`java.lang.Number`) v2 @kind object;
  #L30ad7c.  call temp:= `intValue`(v2) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L30ad82.  v2:= temp;
  #L30ad84.  call temp:= `invoke`(v0, v1, v2) @signature `Lkotlin/text/n$a;.invoke:(Ljava/lang/CharSequence;I)Lod/m;` @kind virtual;
  #L30ad8a.  v1:= temp @kind object;
  #L30ad8c.  return v1 @kind object;
}
procedure `od.m` `invoke`(`kotlin.text.n$a` v3 @kind this, `java.lang.CharSequence` v4 @kind object, `int` v5 ) @signature `Lkotlin/text/n$a;.invoke:(Ljava/lang/CharSequence;I)Lod/m;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L30ada0.  v0:= "$this$$receiver" @kind object;
  #L30ada4.  call `f`(v4, v0) @signature `Lkotlin/jvm/internal/k;.f:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L30adaa.  v0:= v3.`kotlin.text.n$a.$delimitersList` @type ^`java.util.List` @kind object;
  #L30adae.  v1:= v3.`kotlin.text.n$a.$ignoreCase` @type ^`boolean` @kind boolean;
  #L30adb2.  v2:= 0I;
  #L30adb4.  call temp:= `n`(v4, v0, v5, v1, v2) @signature `Lkotlin/text/n;.n:(Ljava/lang/CharSequence;Ljava/util/Collection;IZZ)Lod/m;` @kind static;
  #L30adba.  v4:= temp @kind object;
  #L30adbc.  if v4 == 0 then goto L30adee;
  #L30adc0.  call temp:= `getFirst`(v4) @signature `Lod/m;.getFirst:()Ljava/lang/Object;` @kind virtual;
  #L30adc6.  v5:= temp @kind object;
  #L30adc8.  call temp:= `getSecond`(v4) @signature `Lod/m;.getSecond:()Ljava/lang/Object;` @kind virtual;
  #L30adce.  v4:= temp @kind object;
  #L30add0.  v4:= (`java.lang.String`) v4 @kind object;
  #L30add4.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L30adda.  v4:= temp;
  #L30addc.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L30ade2.  v4:= temp @kind object;
  #L30ade4.  call temp:= `a`(v5, v4) @signature `Lod/q;.a:(Ljava/lang/Object;Ljava/lang/Object;)Lod/m;` @kind static;
  #L30adea.  v4:= temp @kind object;
  #L30adec.  goto L30adf0;
  #L30adee.  v4:= 0I;
  #L30adf0.  return v4 @kind object;
}
