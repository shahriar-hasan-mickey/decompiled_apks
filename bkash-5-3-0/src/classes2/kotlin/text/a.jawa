record `kotlin.text.a` @kind class @AccessFlag  {
}
procedure `int` `a`(`int` v5 ) @signature `Lkotlin/text/a;.a:(I)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L30a288.  v0:= new `kotlin.ranges.h`;
  #L30a28c.  v1:= 2I;
  #L30a28e.  v2:= 36I;
  #L30a292.  call `<init>`(v0, v1, v2) @signature `Lkotlin/ranges/h;.<init>:(II)V` @kind direct;
  #L30a298.  call temp:= `l`(v0, v5) @signature `Lkotlin/ranges/h;.l:(I)Z` @kind virtual;
  #L30a29e.  v0:= temp;
  #L30a2a0.  if v0 == 0 then goto L30a2a6;
  #L30a2a4.  return v5;
  #L30a2a6.  v0:= new `java.lang.IllegalArgumentException`;
  #L30a2aa.  v3:= new `java.lang.StringBuilder`;
  #L30a2ae.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30a2b4.  v4:= "radix " @kind object;
  #L30a2b8.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30a2be.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L30a2c4.  v5:= " was not in valid range " @kind object;
  #L30a2c8.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30a2ce.  v5:= new `kotlin.ranges.h`;
  #L30a2d2.  call `<init>`(v5, v1, v2) @signature `Lkotlin/ranges/h;.<init>:(II)V` @kind direct;
  #L30a2d8.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30a2de.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30a2e4.  v5:= temp @kind object;
  #L30a2e6.  call `<init>`(v0, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30a2ec.  throw v0;
}
procedure `int` `b`(`char` v0 , `int` v1 ) @signature `Lkotlin/text/a;.b:(CI)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L30a300.  call temp:= `digit`(v0, v1) @signature `Ljava/lang/Character;.digit:(II)I` @kind static;
  #L30a306.  v0:= temp;
  #L30a308.  return v0;
}
procedure `boolean` `c`(`char` v1 ) @signature `Lkotlin/text/a;.c:(C)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L30a254.  call temp:= `isWhitespace`(v1) @signature `Ljava/lang/Character;.isWhitespace:(C)Z` @kind static;
  #L30a25a.  v0:= temp;
  #L30a25c.  if v0 != 0 then goto L30a272;
  #L30a260.  call temp:= `isSpaceChar`(v1) @signature `Ljava/lang/Character;.isSpaceChar:(C)Z` @kind static;
  #L30a266.  v1:= temp;
  #L30a268.  if v1 == 0 then goto L30a26e;
  #L30a26c.  goto L30a272;
  #L30a26e.  v1:= 0I;
  #L30a270.  goto L30a274;
  #L30a272.  v1:= 1I;
  #L30a274.  return v1;
}
