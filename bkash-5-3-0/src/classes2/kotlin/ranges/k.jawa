record `kotlin.ranges.k` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.ranges.i` @kind class {
}
procedure `void` `<clinit>`() @signature `Lkotlin/ranges/k;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L30a010.  v0:= new `kotlin.ranges.k$a`;
  #L30a014.  v1:= 0I;
  #L30a016.  call `<init>`(v0, v1) @signature `Lkotlin/ranges/k$a;.<init>:(Lkotlin/jvm/internal/g;)V` @kind direct;
  #L30a01c.  v0:= new `kotlin.ranges.k`;
  #L30a020.  v1:= 1L;
  #L30a024.  v3:= 0L;
  #L30a028.  call `<init>`(v0, v1, v3) @signature `Lkotlin/ranges/k;.<init>:(JJ)V` @kind direct;
  #L30a02e.  return @kind void;
}
procedure `void` `<init>`(`kotlin.ranges.k` v7 @kind this, `long` v8 , `long` v10 ) @signature `Lkotlin/ranges/k;.<init>:(JJ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L30a040.  v5:= 1L;
  #L30a044.  v0:= v7 @kind object;
  #L30a046.  v1:= v8 @kind wide;
  #L30a048.  v3:= v10 @kind wide;
  #L30a04a.  call `<init>`(v0, v1, v3, v5) @signature `Lkotlin/ranges/i;.<init>:(JJJ)V` @kind direct;
  #L30a050.  return @kind void;
}
procedure `boolean` `equals`(`kotlin.ranges.k` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lkotlin/ranges/k;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L309ec4.  v0:= instanceof @variable v6 @type ^`kotlin.ranges.k` @kind boolean;
  #L309ec8.  if v0 == 0 then goto L309f22;
  #L309ecc.  call temp:= `isEmpty`(v5) @signature `Lkotlin/ranges/k;.isEmpty:()Z` @kind virtual;
  #L309ed2.  v0:= temp;
  #L309ed4.  if v0 == 0 then goto L309eea;
  #L309ed8.  v0:= v6 @kind object;
  #L309eda.  v0:= (`kotlin.ranges.k`) v0 @kind object;
  #L309ede.  call temp:= `isEmpty`(v0) @signature `Lkotlin/ranges/k;.isEmpty:()Z` @kind virtual;
  #L309ee4.  v0:= temp;
  #L309ee6.  if v0 != 0 then goto L309f1e;
  #L309eea.  call temp:= `g`(v5) @signature `Lkotlin/ranges/i;.g:()J` @kind virtual;
  #L309ef0.  v0:= temp @kind wide;
  #L309ef2.  v6:= (`kotlin.ranges.k`) v6 @kind object;
  #L309ef6.  call temp:= `g`(v6) @signature `Lkotlin/ranges/i;.g:()J` @kind virtual;
  #L309efc.  v2:= temp @kind wide;
  #L309efe.  v4:= lcmp(v0, v2);
  #L309f02.  if v4 != 0 then goto L309f22;
  #L309f06.  call temp:= `h`(v5) @signature `Lkotlin/ranges/i;.h:()J` @kind virtual;
  #L309f0c.  v0:= temp @kind wide;
  #L309f0e.  call temp:= `h`(v6) @signature `Lkotlin/ranges/i;.h:()J` @kind virtual;
  #L309f14.  v2:= temp @kind wide;
  #L309f16.  v6:= lcmp(v0, v2);
  #L309f1a.  if v6 != 0 then goto L309f22;
  #L309f1e.  v6:= 1I;
  #L309f20.  goto L309f24;
  #L309f22.  v6:= 0I;
  #L309f24.  return v6;
}
procedure `int` `hashCode`(`kotlin.ranges.k` v7 @kind this) @signature `Lkotlin/ranges/k;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L309f68.  call temp:= `isEmpty`(v7) @signature `Lkotlin/ranges/k;.isEmpty:()Z` @kind virtual;
  #L309f6e.  v0:= temp;
  #L309f70.  if v0 == 0 then goto L309f78;
  #L309f74.  v0:= -1I;
  #L309f76.  goto L309fb2;
  #L309f78.  v0:= 31I;
  #L309f7c.  v0:= (`long`) v0 @kind i2l;
  #L309f7e.  call temp:= `g`(v7) @signature `Lkotlin/ranges/i;.g:()J` @kind virtual;
  #L309f84.  v2:= temp @kind wide;
  #L309f86.  call temp:= `g`(v7) @signature `Lkotlin/ranges/i;.g:()J` @kind virtual;
  #L309f8c.  v4:= temp @kind wide;
  #L309f8e.  v6:= 32I;
  #L309f92.  v4:= v4 ^>> v6 @kind long;
  #L309f94.  v2:= v2 ^~ v4 @kind long;
  #L309f96.  v0:= v0 * v2 @kind long;
  #L309f9a.  call temp:= `h`(v7) @signature `Lkotlin/ranges/i;.h:()J` @kind virtual;
  #L309fa0.  v2:= temp @kind wide;
  #L309fa2.  call temp:= `h`(v7) @signature `Lkotlin/ranges/i;.h:()J` @kind virtual;
  #L309fa8.  v4:= temp @kind wide;
  #L309faa.  v4:= v4 ^>> v6 @kind long;
  #L309fac.  v2:= v2 ^~ v4 @kind long;
  #L309fae.  v0:= v0 + v2 @kind long;
  #L309fb0.  v0:= (`int`) v0 @kind l2i;
  #L309fb2.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.ranges.k` v5 @kind this) @signature `Lkotlin/ranges/k;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L309f38.  call temp:= `g`(v5) @signature `Lkotlin/ranges/i;.g:()J` @kind virtual;
  #L309f3e.  v0:= temp @kind wide;
  #L309f40.  call temp:= `h`(v5) @signature `Lkotlin/ranges/i;.h:()J` @kind virtual;
  #L309f46.  v2:= temp @kind wide;
  #L309f48.  v4:= lcmp(v0, v2);
  #L309f4c.  if v4 <= 0 then goto L309f54;
  #L309f50.  v0:= 1I;
  #L309f52.  goto L309f56;
  #L309f54.  v0:= 0I;
  #L309f56.  return v0;
}
procedure `java.lang.String` `toString`(`kotlin.ranges.k` v3 @kind this) @signature `Lkotlin/ranges/k;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L309fc4.  v0:= new `java.lang.StringBuilder`;
  #L309fc8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L309fce.  call temp:= `g`(v3) @signature `Lkotlin/ranges/i;.g:()J` @kind virtual;
  #L309fd4.  v1:= temp @kind wide;
  #L309fd6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L309fdc.  v1:= ".." @kind object;
  #L309fe0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L309fe6.  call temp:= `h`(v3) @signature `Lkotlin/ranges/i;.h:()J` @kind virtual;
  #L309fec.  v1:= temp @kind wide;
  #L309fee.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L309ff4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L309ffa.  v0:= temp @kind object;
  #L309ffc.  return v0 @kind object;
}
