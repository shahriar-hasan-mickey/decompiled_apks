record `kotlin.ranges.n` @kind class @AccessFlag  extends `kotlin.ranges.m` @kind class {
}
procedure `int` `a`(`int` v0 , `int` v1 ) @signature `Lkotlin/ranges/n;.a:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L30a064.  if v0 >= v1 then goto L30a06a;
  #L30a068.  v0:= v1;
  #L30a06a.  return v0;
}
procedure `long` `b`(`long` v1 , `long` v3 ) @signature `Lkotlin/ranges/n;.b:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L30a158.  v0:= lcmp(v1, v3);
  #L30a15c.  if v0 >= 0 then goto L30a162;
  #L30a160.  v1:= v3 @kind wide;
  #L30a162.  return v1 @kind wide;
}
procedure `int` `c`(`int` v0 , `int` v1 ) @signature `Lkotlin/ranges/n;.c:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L30a07c.  if v0 <= v1 then goto L30a082;
  #L30a080.  v0:= v1;
  #L30a082.  return v0;
}
procedure `long` `d`(`long` v1 , `long` v3 ) @signature `Lkotlin/ranges/n;.d:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L30a174.  v0:= lcmp(v1, v3);
  #L30a178.  if v0 <= 0 then goto L30a17e;
  #L30a17c.  v1:= v3 @kind wide;
  #L30a17e.  return v1 @kind wide;
}
procedure `int` `e`(`int` v2 , `int` v3 , `int` v4 ) @signature `Lkotlin/ranges/n;.e:(III)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L30a094.  if v3 > v4 then goto L30a0a6;
  #L30a098.  if v2 >= v3 then goto L30a09e;
  #L30a09c.  return v3;
  #L30a09e.  if v2 <= v4 then goto L30a0a4;
  #L30a0a2.  return v4;
  #L30a0a4.  return v2;
  #L30a0a6.  v2:= new `java.lang.IllegalArgumentException`;
  #L30a0aa.  v0:= new `java.lang.StringBuilder`;
  #L30a0ae.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30a0b4.  v1:= "Cannot coerce value to an empty range: maximum " @kind object;
  #L30a0b8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30a0be.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L30a0c4.  v4:= " is less than minimum " @kind object;
  #L30a0c8.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30a0ce.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L30a0d4.  v3:= 46I;
  #L30a0d8.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L30a0de.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30a0e4.  v3:= temp @kind object;
  #L30a0e6.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30a0ec.  throw v2;
}
procedure `kotlin.ranges.f` `f`(`int` v2 , `int` v3 ) @signature `Lkotlin/ranges/n;.f:(II)Lkotlin/ranges/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L30a100.  v0:= `@@kotlin.ranges.f.j` @type ^`kotlin.ranges.f$a` @kind object;
  #L30a104.  v1:= -1I;
  #L30a106.  call temp:= `a`(v0, v2, v3, v1) @signature `Lkotlin/ranges/f$a;.a:(III)Lkotlin/ranges/f;` @kind virtual;
  #L30a10c.  v2:= temp @kind object;
  #L30a10e.  return v2 @kind object;
}
procedure `kotlin.ranges.h` `g`(`int` v1 , `int` v2 ) @signature `Lkotlin/ranges/n;.g:(II)Lkotlin/ranges/h;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L30a120.  v0:= -2147483648I;
  #L30a124.  if v2 > v0 then goto L30a136;
  #L30a128.  v1:= `@@kotlin.ranges.h.k` @type ^`kotlin.ranges.h$a` @kind object;
  #L30a12c.  call temp:= `a`(v1) @signature `Lkotlin/ranges/h$a;.a:()Lkotlin/ranges/h;` @kind virtual;
  #L30a132.  v1:= temp @kind object;
  #L30a134.  return v1 @kind object;
  #L30a136.  v0:= new `kotlin.ranges.h`;
  #L30a13a.  v2:= v2 + -1;
  #L30a13e.  call `<init>`(v0, v1, v2) @signature `Lkotlin/ranges/h;.<init>:(II)V` @kind direct;
  #L30a144.  return v0 @kind object;
}
