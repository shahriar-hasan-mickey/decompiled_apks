record `kotlin.ranges.f` @kind class @AccessFlag PUBLIC extends `java.lang.Iterable` @kind interface {
  `int` `kotlin.ranges.f.g` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.ranges.f.h` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.ranges.f.i` @AccessFlag PRIVATE_FINAL;
}
global `kotlin.ranges.f$a` `@@kotlin.ranges.f.j` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/ranges/f;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3099f0.  v0:= new `kotlin.ranges.f$a`;
  #L3099f4.  v1:= 0I;
  #L3099f6.  call `<init>`(v0, v1) @signature `Lkotlin/ranges/f$a;.<init>:(Lkotlin/jvm/internal/g;)V` @kind direct;
  #L3099fc.  `@@kotlin.ranges.f.j` @type ^`kotlin.ranges.f$a` := v0 @kind object;
  #L309a00.  return @kind void;
}
procedure `void` `<init>`(`kotlin.ranges.f` v1 @kind this, `int` v2 , `int` v3 , `int` v4 ) @signature `Lkotlin/ranges/f;.<init>:(III)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L309a14.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L309a1a.  if v4 == 0 then goto L309a4c;
  #L309a1e.  v0:= -2147483648I;
  #L309a22.  if v4 == v0 then goto L309a3c;
  #L309a26.  v1.`kotlin.ranges.f.g` @type ^`int` := v2;
  #L309a2a.  call temp:= `c`(v2, v3, v4) @signature `Lrd/c;.c:(III)I` @kind static;
  #L309a30.  v2:= temp;
  #L309a32.  v1.`kotlin.ranges.f.h` @type ^`int` := v2;
  #L309a36.  v1.`kotlin.ranges.f.i` @type ^`int` := v4;
  #L309a3a.  return @kind void;
  #L309a3c.  v2:= new `java.lang.IllegalArgumentException`;
  #L309a40.  v3:= "Step must be greater than Int.MIN_VALUE to avoid overflow on negation." @kind object;
  #L309a44.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L309a4a.  throw v2;
  #L309a4c.  v2:= new `java.lang.IllegalArgumentException`;
  #L309a50.  v3:= "Step must be non-zero." @kind object;
  #L309a54.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L309a5a.  throw v2;
}
procedure `boolean` `equals`(`kotlin.ranges.f` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/ranges/f;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3097f0.  v0:= instanceof @variable v3 @type ^`kotlin.ranges.f` @kind boolean;
  #L3097f4.  if v0 == 0 then goto L309842;
  #L3097f8.  call temp:= `isEmpty`(v2) @signature `Lkotlin/ranges/f;.isEmpty:()Z` @kind virtual;
  #L3097fe.  v0:= temp;
  #L309800.  if v0 == 0 then goto L309816;
  #L309804.  v0:= v3 @kind object;
  #L309806.  v0:= (`kotlin.ranges.f`) v0 @kind object;
  #L30980a.  call temp:= `isEmpty`(v0) @signature `Lkotlin/ranges/f;.isEmpty:()Z` @kind virtual;
  #L309810.  v0:= temp;
  #L309812.  if v0 != 0 then goto L30983e;
  #L309816.  v0:= v2.`kotlin.ranges.f.g` @type ^`int`;
  #L30981a.  v3:= (`kotlin.ranges.f`) v3 @kind object;
  #L30981e.  v1:= v3.`kotlin.ranges.f.g` @type ^`int`;
  #L309822.  if v0 != v1 then goto L309842;
  #L309826.  v0:= v2.`kotlin.ranges.f.h` @type ^`int`;
  #L30982a.  v1:= v3.`kotlin.ranges.f.h` @type ^`int`;
  #L30982e.  if v0 != v1 then goto L309842;
  #L309832.  v0:= v2.`kotlin.ranges.f.i` @type ^`int`;
  #L309836.  v3:= v3.`kotlin.ranges.f.i` @type ^`int`;
  #L30983a.  if v0 != v3 then goto L309842;
  #L30983e.  v3:= 1I;
  #L309840.  goto L309844;
  #L309842.  v3:= 0I;
  #L309844.  return v3;
}
procedure `int` `g`(`kotlin.ranges.f` v1 @kind this) @signature `Lkotlin/ranges/f;.g:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L309894.  v0:= v1.`kotlin.ranges.f.g` @type ^`int`;
  #L309898.  return v0;
}
procedure `int` `h`(`kotlin.ranges.f` v1 @kind this) @signature `Lkotlin/ranges/f;.h:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3098ac.  v0:= v1.`kotlin.ranges.f.h` @type ^`int`;
  #L3098b0.  return v0;
}
procedure `int` `hashCode`(`kotlin.ranges.f` v2 @kind this) @signature `Lkotlin/ranges/f;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3098dc.  call temp:= `isEmpty`(v2) @signature `Lkotlin/ranges/f;.isEmpty:()Z` @kind virtual;
  #L3098e2.  v0:= temp;
  #L3098e4.  if v0 == 0 then goto L3098ec;
  #L3098e8.  v0:= -1I;
  #L3098ea.  goto L309904;
  #L3098ec.  v0:= v2.`kotlin.ranges.f.g` @type ^`int`;
  #L3098f0.  v0:= v0 * 31;
  #L3098f4.  v1:= v2.`kotlin.ranges.f.h` @type ^`int`;
  #L3098f8.  v0:= v0 + v1 @kind int;
  #L3098fa.  v0:= v0 * 31;
  #L3098fe.  v1:= v2.`kotlin.ranges.f.i` @type ^`int`;
  #L309902.  v0:= v0 + v1 @kind int;
  #L309904.  return v0;
}
procedure `int` `i`(`kotlin.ranges.f` v1 @kind this) @signature `Lkotlin/ranges/f;.i:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L3098c4.  v0:= v1.`kotlin.ranges.f.i` @type ^`int`;
  #L3098c8.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.ranges.f` v4 @kind this) @signature `Lkotlin/ranges/f;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L309858.  v0:= v4.`kotlin.ranges.f.i` @type ^`int`;
  #L30985c.  v1:= 1I;
  #L30985e.  v2:= 0I;
  #L309860.  if v0 <= 0 then goto L309872;
  #L309864.  v0:= v4.`kotlin.ranges.f.g` @type ^`int`;
  #L309868.  v3:= v4.`kotlin.ranges.f.h` @type ^`int`;
  #L30986c.  if v0 <= v3 then goto L309880;
  #L309870.  goto L309882;
  #L309872.  v0:= v4.`kotlin.ranges.f.g` @type ^`int`;
  #L309876.  v3:= v4.`kotlin.ranges.f.h` @type ^`int`;
  #L30987a.  if v0 >= v3 then goto L309880;
  #L30987e.  goto L309882;
  #L309880.  v1:= 0I;
  #L309882.  return v1;
}
procedure `java.util.Iterator` `iterator`(`kotlin.ranges.f` v1 @kind this) @signature `Lkotlin/ranges/f;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L3099ac.  call temp:= `j`(v1) @signature `Lkotlin/ranges/f;.j:()Lpd/x;` @kind virtual;
  #L3099b2.  v0:= temp @kind object;
  #L3099b4.  return v0 @kind object;
}
procedure `pd.x` `j`(`kotlin.ranges.f` v4 @kind this) @signature `Lkotlin/ranges/f;.j:()Lpd/x;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3099c8.  v0:= new `kotlin.ranges.g`;
  #L3099cc.  v1:= v4.`kotlin.ranges.f.g` @type ^`int`;
  #L3099d0.  v2:= v4.`kotlin.ranges.f.h` @type ^`int`;
  #L3099d4.  v3:= v4.`kotlin.ranges.f.i` @type ^`int`;
  #L3099d8.  call `<init>`(v0, v1, v2, v3) @signature `Lkotlin/ranges/g;.<init>:(III)V` @kind direct;
  #L3099de.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`kotlin.ranges.f` v3 @kind this) @signature `Lkotlin/ranges/f;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L309918.  v0:= v3.`kotlin.ranges.f.i` @type ^`int`;
  #L30991c.  v1:= " step " @kind object;
  #L309920.  if v0 <= 0 then goto L309958;
  #L309924.  v0:= new `java.lang.StringBuilder`;
  #L309928.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30992e.  v2:= v3.`kotlin.ranges.f.g` @type ^`int`;
  #L309932.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L309938.  v2:= ".." @kind object;
  #L30993c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L309942.  v2:= v3.`kotlin.ranges.f.h` @type ^`int`;
  #L309946.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L30994c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L309952.  v1:= v3.`kotlin.ranges.f.i` @type ^`int`;
  #L309956.  goto L30998c;
  #L309958.  v0:= new `java.lang.StringBuilder`;
  #L30995c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L309962.  v2:= v3.`kotlin.ranges.f.g` @type ^`int`;
  #L309966.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L30996c.  v2:= " downTo " @kind object;
  #L309970.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L309976.  v2:= v3.`kotlin.ranges.f.h` @type ^`int`;
  #L30997a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L309980.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L309986.  v1:= v3.`kotlin.ranges.f.i` @type ^`int`;
  #L30998a.  v1:= -v1 @kind int;
  #L30998c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L309992.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L309998.  v0:= temp @kind object;
  #L30999a.  return v0 @kind object;
}
