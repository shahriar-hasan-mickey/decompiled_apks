record `kotlin.ranges.g` @kind class @AccessFlag PUBLIC_FINAL extends `pd.x` @kind class {
  `int` `kotlin.ranges.g.g` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.ranges.g.h` @AccessFlag PRIVATE_FINAL;
  `boolean` `kotlin.ranges.g.i` @AccessFlag PRIVATE;
  `int` `kotlin.ranges.g.j` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlin.ranges.g` v2 @kind this, `int` v3 , `int` v4 , `int` v5 ) @signature `Lkotlin/ranges/g;.<init>:(III)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3097a8.  call `<init>`(v2) @signature `Lpd/x;.<init>:()V` @kind direct;
  #L3097ae.  v2.`kotlin.ranges.g.g` @type ^`int` := v5;
  #L3097b2.  v2.`kotlin.ranges.g.h` @type ^`int` := v4;
  #L3097b6.  v0:= 1I;
  #L3097b8.  v1:= 0I;
  #L3097ba.  if v5 <= 0 then goto L3097c4;
  #L3097be.  if v3 > v4 then goto L3097ca;
  #L3097c2.  goto L3097cc;
  #L3097c4.  if v3 < v4 then goto L3097ca;
  #L3097c8.  goto L3097cc;
  #L3097ca.  v0:= 0I;
  #L3097cc.  v2.`kotlin.ranges.g.i` @type ^`boolean` := v0 @kind boolean;
  #L3097d0.  if v0 == 0 then goto L3097d6;
  #L3097d4.  goto L3097d8;
  #L3097d6.  v3:= v4;
  #L3097d8.  v2.`kotlin.ranges.g.j` @type ^`int` := v3;
  #L3097dc.  return @kind void;
}
procedure `int` `a`(`kotlin.ranges.g` v2 @kind this) @signature `Lkotlin/ranges/g;.a:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L309764.  v0:= v2.`kotlin.ranges.g.j` @type ^`int`;
  #L309768.  v1:= v2.`kotlin.ranges.g.h` @type ^`int`;
  #L30976c.  if v0 != v1 then goto L30978c;
  #L309770.  v1:= v2.`kotlin.ranges.g.i` @type ^`boolean` @kind boolean;
  #L309774.  if v1 == 0 then goto L309780;
  #L309778.  v1:= 0I;
  #L30977a.  v2.`kotlin.ranges.g.i` @type ^`boolean` := v1 @kind boolean;
  #L30977e.  goto L309796;
  #L309780.  v0:= new `java.util.NoSuchElementException`;
  #L309784.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L30978a.  throw v0;
  #L30978c.  v1:= v2.`kotlin.ranges.g.g` @type ^`int`;
  #L309790.  v1:= v1 + v0 @kind int;
  #L309792.  v2.`kotlin.ranges.g.j` @type ^`int` := v1;
  #L309796.  return v0;
}
procedure `boolean` `hasNext`(`kotlin.ranges.g` v1 @kind this) @signature `Lkotlin/ranges/g;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30974c.  v0:= v1.`kotlin.ranges.g.i` @type ^`boolean` @kind boolean;
  #L309750.  return v0;
}
