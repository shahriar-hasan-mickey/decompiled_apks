record `kotlin.ranges.i` @kind class @AccessFlag PUBLIC extends `java.lang.Iterable` @kind interface {
  `long` `kotlin.ranges.i.g` @AccessFlag PRIVATE_FINAL;
  `long` `kotlin.ranges.i.h` @AccessFlag PRIVATE_FINAL;
  `long` `kotlin.ranges.i.i` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<clinit>`() @signature `Lkotlin/ranges/i;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L309e10.  v0:= new `kotlin.ranges.i$a`;
  #L309e14.  v1:= 0I;
  #L309e16.  call `<init>`(v0, v1) @signature `Lkotlin/ranges/i$a;.<init>:(Lkotlin/jvm/internal/g;)V` @kind direct;
  #L309e1c.  return @kind void;
}
procedure `void` `<init>`(`kotlin.ranges.i` v3 @kind this, `long` v4 , `long` v6 , `long` v8 ) @signature `Lkotlin/ranges/i;.<init>:(JJJ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L309e30.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L309e36.  v0:= 0L;
  #L309e3a.  v2:= lcmp(v8, v0);
  #L309e3e.  if v2 == 0 then goto L309e74;
  #L309e42.  v0:= -9223372036854775808L;
  #L309e46.  v2:= lcmp(v8, v0);
  #L309e4a.  if v2 == 0 then goto L309e64;
  #L309e4e.  v3.`kotlin.ranges.i.g` @type ^`long` := v4 @kind wide;
  #L309e52.  call temp:= `d`(v4, v6, v8) @signature `Lrd/c;.d:(JJJ)J` @kind static;
  #L309e58.  v4:= temp @kind wide;
  #L309e5a.  v3.`kotlin.ranges.i.h` @type ^`long` := v4 @kind wide;
  #L309e5e.  v3.`kotlin.ranges.i.i` @type ^`long` := v8 @kind wide;
  #L309e62.  return @kind void;
  #L309e64.  v4:= new `java.lang.IllegalArgumentException`;
  #L309e68.  v5:= "Step must be greater than Long.MIN_VALUE to avoid overflow on negation." @kind object;
  #L309e6c.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L309e72.  throw v4;
  #L309e74.  v4:= new `java.lang.IllegalArgumentException`;
  #L309e78.  v5:= "Step must be non-zero." @kind object;
  #L309e7c.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L309e82.  throw v4;
}
procedure `long` `g`(`kotlin.ranges.i` v2 @kind this) @signature `Lkotlin/ranges/i;.g:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L309db4.  v0:= v2.`kotlin.ranges.i.g` @type ^`long` @kind wide;
  #L309db8.  return v0 @kind wide;
}
procedure `long` `h`(`kotlin.ranges.i` v2 @kind this) @signature `Lkotlin/ranges/i;.h:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L309dcc.  v0:= v2.`kotlin.ranges.i.h` @type ^`long` @kind wide;
  #L309dd0.  return v0 @kind wide;
}
procedure `pd.y` `i`(`kotlin.ranges.i` v8 @kind this) @signature `Lkotlin/ranges/i;.i:()Lpd/y;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L309de4.  v7:= new `kotlin.ranges.j`;
  #L309de8.  v1:= v8.`kotlin.ranges.i.g` @type ^`long` @kind wide;
  #L309dec.  v3:= v8.`kotlin.ranges.i.h` @type ^`long` @kind wide;
  #L309df0.  v5:= v8.`kotlin.ranges.i.i` @type ^`long` @kind wide;
  #L309df4.  v0:= v7 @kind object;
  #L309df6.  call `<init>`(v0, v1, v3, v5) @signature `Lkotlin/ranges/j;.<init>:(JJJ)V` @kind direct;
  #L309dfc.  return v7 @kind object;
}
procedure `java.util.Iterator` `iterator`(`kotlin.ranges.i` v1 @kind this) @signature `Lkotlin/ranges/i;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L309d98.  call temp:= `i`(v1) @signature `Lkotlin/ranges/i;.i:()Lpd/y;` @kind virtual;
  #L309d9e.  v0:= temp @kind object;
  #L309da0.  return v0 @kind object;
}
