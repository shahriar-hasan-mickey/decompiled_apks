record `kotlin.jvm.internal.f` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.lang.Object`[] `@@kotlin.jvm.internal.f.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/jvm/internal/f;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L307f18.  v0:= 0I;
  #L307f1a.  v0:= new `java.lang.Object`[v0];
  #L307f1e.  `@@kotlin.jvm.internal.f.a` @type ^`java.lang.Object`[] := v0 @kind object;
  #L307f22.  return @kind void;
}
procedure `java.lang.Object`[] `a`(`java.util.Collection` v4 @kind object) @signature `Lkotlin/jvm/internal/f;.a:(Ljava/util/Collection;)[Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L307d1c.  v0:= "collection" @kind object;
  #L307d20.  call `f`(v4, v0) @signature `Lkotlin/jvm/internal/k;.f:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L307d26.  call temp:= `size`(v4) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L307d2c.  v0:= temp;
  #L307d2e.  if v0 != 0 then goto L307d38;
  #L307d32.  v4:= `@@kotlin.jvm.internal.f.a` @type ^`java.lang.Object`[] @kind object;
  #L307d36.  goto L307dda;
  #L307d38.  call temp:= `iterator`(v4) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L307d3e.  v4:= temp @kind object;
  #L307d40.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L307d46.  v1:= temp;
  #L307d48.  if v1 != 0 then goto L307d4e;
  #L307d4c.  goto L307d32;
  #L307d4e.  v0:= new `java.lang.Object`[v0];
  #L307d52.  v1:= 0I;
  #L307d54.  v2:= v1 + 1;
  #L307d58.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L307d5e.  v3:= temp @kind object;
  #L307d60.  v0[v1]:= v3 @kind object;
  #L307d64.  v1:= length @variable v0;
  #L307d66.  if v2 < v1 then goto L307dbc;
  #L307d6a.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L307d70.  v1:= temp;
  #L307d72.  if v1 != 0 then goto L307d7a;
  #L307d76.  v4:= v0 @kind object;
  #L307d78.  goto L307dda;
  #L307d7a.  v1:= v2 * 3;
  #L307d7e.  v1:= v1 + 1;
  #L307d82.  v1:= v1 ^>> 1;
  #L307d86.  v3:= 2147483645I;
  #L307d8c.  if v1 > v2 then goto L307da8;
  #L307d90.  if v2 >= v3 then goto L307d9c;
  #L307d94.  v1:= 2147483645I;
  #L307d9a.  goto L307da8;
  #L307d9c.  v4:= new `java.lang.OutOfMemoryError`;
  #L307da0.  call `<init>`(v4) @signature `Ljava/lang/OutOfMemoryError;.<init>:()V` @kind direct;
  #L307da6.  throw v4;
  #L307da8.  call temp:= `copyOf`(v0, v1) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L307dae.  v0:= temp @kind object;
  #L307db0.  v1:= "copyOf(result, newSize)" @kind object;
  #L307db4.  call `e`(v0, v1) @signature `Lkotlin/jvm/internal/k;.e:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L307dba.  goto L307ddc;
  #L307dbc.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L307dc2.  v1:= temp;
  #L307dc4.  if v1 != 0 then goto L307ddc;
  #L307dc8.  call temp:= `copyOf`(v0, v2) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L307dce.  v4:= temp @kind object;
  #L307dd0.  v0:= "copyOf(result, size)" @kind object;
  #L307dd4.  call `e`(v4, v0) @signature `Lkotlin/jvm/internal/k;.e:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L307dda.  return v4 @kind object;
  #L307ddc.  v1:= v2;
  #L307dde.  goto L307d54;
}
procedure `java.lang.Object`[] `b`(`java.util.Collection` v5 @kind object, `java.lang.Object`[] v6 @kind object) @signature `Lkotlin/jvm/internal/f;.b:(Ljava/util/Collection;[Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L307df0.  v0:= "collection" @kind object;
  #L307df4.  call `f`(v5, v0) @signature `Lkotlin/jvm/internal/k;.f:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L307dfa.  call temp:= `requireNonNull`(v6) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L307e00.  call temp:= `size`(v5) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L307e06.  v0:= temp;
  #L307e08.  v1:= 0I;
  #L307e0a.  v2:= 0I;
  #L307e0c.  if v0 != 0 then goto L307e1e;
  #L307e10.  v5:= length @variable v6;
  #L307e12.  if v5 <= 0 then goto L307f00;
  #L307e16.  v6[v2]:= v1 @kind object;
  #L307e1a.  goto L307f00;
  #L307e1e.  call temp:= `iterator`(v5) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L307e24.  v5:= temp @kind object;
  #L307e26.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L307e2c.  v3:= temp;
  #L307e2e.  if v3 != 0 then goto L307e3e;
  #L307e32.  v5:= length @variable v6;
  #L307e34.  if v5 <= 0 then goto L307f00;
  #L307e38.  v6[v2]:= v1 @kind object;
  #L307e3c.  goto L307f00;
  #L307e3e.  v3:= length @variable v6;
  #L307e40.  if v0 > v3 then goto L307e48;
  #L307e44.  v0:= v6 @kind object;
  #L307e46.  goto L307e6e;
  #L307e48.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L307e4e.  v3:= temp @kind object;
  #L307e50.  call temp:= `getComponentType`(v3) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L307e56.  v3:= temp @kind object;
  #L307e58.  call temp:= `newInstance`(v3, v0) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L307e5e.  v0:= temp @kind object;
  #L307e60.  v3:= "null cannot be cast to non-null type kotlin.Array<kotlin.Any?>" @kind object;
  #L307e64.  call `d`(v0, v3) @signature `Lkotlin/jvm/internal/k;.d:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L307e6a.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L307e6e.  v3:= v2 + 1;
  #L307e72.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L307e78.  v4:= temp @kind object;
  #L307e7a.  v0[v2]:= v4 @kind object;
  #L307e7e.  v2:= length @variable v0;
  #L307e80.  if v3 < v2 then goto L307ed6;
  #L307e84.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L307e8a.  v2:= temp;
  #L307e8c.  if v2 != 0 then goto L307e94;
  #L307e90.  v6:= v0 @kind object;
  #L307e92.  goto L307f00;
  #L307e94.  v2:= v3 * 3;
  #L307e98.  v2:= v2 + 1;
  #L307e9c.  v2:= v2 ^>> 1;
  #L307ea0.  v4:= 2147483645I;
  #L307ea6.  if v2 > v3 then goto L307ec2;
  #L307eaa.  if v3 >= v4 then goto L307eb6;
  #L307eae.  v2:= 2147483645I;
  #L307eb4.  goto L307ec2;
  #L307eb6.  v5:= new `java.lang.OutOfMemoryError`;
  #L307eba.  call `<init>`(v5) @signature `Ljava/lang/OutOfMemoryError;.<init>:()V` @kind direct;
  #L307ec0.  throw v5;
  #L307ec2.  call temp:= `copyOf`(v0, v2) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L307ec8.  v0:= temp @kind object;
  #L307eca.  v2:= "copyOf(result, newSize)" @kind object;
  #L307ece.  call `e`(v0, v2) @signature `Lkotlin/jvm/internal/k;.e:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L307ed4.  goto L307f02;
  #L307ed6.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L307edc.  v2:= temp;
  #L307ede.  if v2 != 0 then goto L307f02;
  #L307ee2.  if v0 != v6 then goto L307eec;
  #L307ee6.  v6[v3]:= v1 @kind object;
  #L307eea.  goto L307f00;
  #L307eec.  call temp:= `copyOf`(v0, v3) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L307ef2.  v5:= temp @kind object;
  #L307ef4.  v6:= "copyOf(result, size)" @kind object;
  #L307ef8.  call `e`(v5, v6) @signature `Lkotlin/jvm/internal/k;.e:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L307efe.  v6:= v5 @kind object;
  #L307f00.  return v6 @kind object;
  #L307f02.  v2:= v3;
  #L307f04.  goto L307e6e;
}
