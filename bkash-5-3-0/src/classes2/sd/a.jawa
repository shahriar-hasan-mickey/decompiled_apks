record `sd.a` @kind class @AccessFlag PUBLIC extends `rd.a` @kind class {
}
procedure `void` `<init>`(`sd.a` v0 @kind this) @signature `Lsd/a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L377cd0.  call `<init>`(v0) @signature `Lrd/a;.<init>:()V` @kind direct;
  #L377cd6.  return @kind void;
}
procedure `boolean` `c`(`sd.a` v1 @kind this, `int` v2 ) @signature `Lsd/a;.c:(I)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L377ca0.  v0:= `@@sd.a$a.a` @type ^`java.lang.Integer` @kind object;
  #L377ca4.  if v0 == 0 then goto L377cba;
  #L377ca8.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L377cae.  v0:= temp;
  #L377cb0.  if v0 < v2 then goto L377cb6;
  #L377cb4.  goto L377cba;
  #L377cb6.  v2:= 0I;
  #L377cb8.  goto L377cbc;
  #L377cba.  v2:= 1I;
  #L377cbc.  return v2;
}
procedure `void` `a`(`sd.a` v1 @kind this, `java.lang.Throwable` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lsd/a;.a:(Ljava/lang/Throwable;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L377ce8.  v0:= "cause" @kind object;
  #L377cec.  call `f`(v2, v0) @signature `Lkotlin/jvm/internal/k;.f:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L377cf2.  v0:= "exception" @kind object;
  #L377cf6.  call `f`(v3, v0) @signature `Lkotlin/jvm/internal/k;.f:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L377cfc.  v0:= 19I;
  #L377d00.  call temp:= `c`(v1, v0) @signature `Lsd/a;.c:(I)Z` @kind direct;
  #L377d06.  v0:= temp;
  #L377d08.  if v0 == 0 then goto L377d14;
  #L377d0c.  call `addSuppressed`(v2, v3) @signature `Ljava/lang/Throwable;.addSuppressed:(Ljava/lang/Throwable;)V` @kind virtual;
  #L377d12.  goto L377d1a;
  #L377d14.  call `a`(v1, v2, v3) @signature `Lrd/a;.a:(Ljava/lang/Throwable;Ljava/lang/Throwable;)V` @kind super;
  #L377d1a.  return @kind void;
}
