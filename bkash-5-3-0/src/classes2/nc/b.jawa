record `nc.b` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class {
  `java.lang.String` `nc.b.strValue` @AccessFlag PRIVATE_FINAL;
}
global `nc.b` `@@nc.b.always` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `nc.b` `@@nc.b.auto` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `nc.b`[] `@@nc.b.g` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `nc.b` `@@nc.b.off` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `nc.b` `@@nc.b.torch` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
procedure `void` `<clinit>`() @signature `Lnc/b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L3237c0.  v0:= new `nc.b`;
  #L3237c4.  v1:= "off" @kind object;
  #L3237c8.  v2:= 0I;
  #L3237ca.  call `<init>`(v0, v1, v2, v1) @signature `Lnc/b;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L3237d0.  `@@nc.b.off` @type ^`nc.b` := v0 @kind object;
  #L3237d4.  v1:= new `nc.b`;
  #L3237d8.  v3:= "auto" @kind object;
  #L3237dc.  v4:= 1I;
  #L3237de.  call `<init>`(v1, v3, v4, v3) @signature `Lnc/b;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L3237e4.  `@@nc.b.auto` @type ^`nc.b` := v1 @kind object;
  #L3237e8.  v3:= new `nc.b`;
  #L3237ec.  v5:= "always" @kind object;
  #L3237f0.  v6:= 2I;
  #L3237f2.  call `<init>`(v3, v5, v6, v5) @signature `Lnc/b;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L3237f8.  `@@nc.b.always` @type ^`nc.b` := v3 @kind object;
  #L3237fc.  v5:= new `nc.b`;
  #L323800.  v7:= "torch" @kind object;
  #L323804.  v8:= 3I;
  #L323806.  call `<init>`(v5, v7, v8, v7) @signature `Lnc/b;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L32380c.  `@@nc.b.torch` @type ^`nc.b` := v5 @kind object;
  #L323810.  v7:= 4I;
  #L323812.  v7:= new `nc.b`[v7];
  #L323816.  v7[v2]:= v0 @kind object;
  #L32381a.  v7[v4]:= v1 @kind object;
  #L32381e.  v7[v6]:= v3 @kind object;
  #L323822.  v7[v8]:= v5 @kind object;
  #L323826.  `@@nc.b.g` @type ^`nc.b`[] := v7 @kind object;
  #L32382a.  return @kind void;
}
procedure `void` `<init>`(`nc.b` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `java.lang.String` v3 @kind object) @signature `Lnc/b;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L32383c.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L323842.  v0.`nc.b.strValue` @type ^`java.lang.String` := v3 @kind object;
  #L323846.  return @kind void;
}
procedure `nc.b` `getValueForString`(`java.lang.String` v5 @kind object) @signature `Lnc/b;.getValueForString:(Ljava/lang/String;)Lnc/b;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L323738.  call temp:= `values`() @signature `Lnc/b;.values:()[Lnc/b;` @kind static;
  #L32373e.  v0:= temp @kind object;
  #L323740.  v1:= length @variable v0;
  #L323742.  v2:= 0I;
  #L323744.  if v2 >= v1 then goto L323764;
  #L323748.  v3:= v0[v2] @kind object;
  #L32374c.  v4:= v3.`nc.b.strValue` @type ^`java.lang.String` @kind object;
  #L323750.  call temp:= `equals`(v4, v5) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L323756.  v4:= temp;
  #L323758.  if v4 == 0 then goto L32375e;
  #L32375c.  return v3 @kind object;
  #L32375e.  v2:= v2 + 1;
  #L323762.  goto L323744;
  #L323764.  v5:= 0I;
  #L323766.  return v5 @kind object;
}
procedure `nc.b` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lnc/b;.valueOf:(Ljava/lang/String;)Lnc/b;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L323778.  v0:= constclass @type ^`nc.b` @kind object;
  #L32377c.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L323782.  v1:= temp @kind object;
  #L323784.  v1:= (`nc.b`) v1 @kind object;
  #L323788.  return v1 @kind object;
}
procedure `nc.b`[] `values`() @signature `Lnc/b;.values:()[Lnc/b;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L32379c.  v0:= `@@nc.b.g` @type ^`nc.b`[] @kind object;
  #L3237a0.  call temp:= `clone`(v0) @signature `[Lnc/b;.clone:()Ljava/lang/Object;` @kind virtual;
  #L3237a6.  v0:= temp @kind object;
  #L3237a8.  v0:= (`nc.b`[]) v0 @kind object;
  #L3237ac.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`nc.b` v1 @kind this) @signature `Lnc/b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L323720.  v0:= v1.`nc.b.strValue` @type ^`java.lang.String` @kind object;
  #L323724.  return v0 @kind object;
}
