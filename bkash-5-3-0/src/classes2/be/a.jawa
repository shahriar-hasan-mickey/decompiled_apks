record `be.a` @kind class @AccessFlag PUBLIC_ABSTRACT extends `be.c` @kind class, `be.f` @kind interface {
}
procedure `void` `<init>`(`be.a` v0 @kind this, `wd.l` v1 @kind object) @signature `Lbe/a;.<init>:(Lwd/l;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L10f6b4.  call `<init>`(v0, v1) @signature `Lbe/c;.<init>:(Lwd/l;)V` @kind direct;
  #L10f6ba.  return @kind void;
}
procedure `boolean` `n`(`be.a` v0 @kind object, `be.o` v1 @kind object) @signature `Lbe/a;.n:(Lbe/a;Lbe/o;)Z` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L10f578.  call temp:= `p`(v0, v1) @signature `Lbe/a;.p:(Lbe/o;)Z` @kind direct;
  #L10f57e.  v0:= temp;
  #L10f580.  return v0;
}
procedure `void` `o`(`be.a` v0 @kind object, `kotlinx.coroutines.l` v1 @kind object, `be.o` v2 @kind object) @signature `Lbe/a;.o:(Lbe/a;Lkotlinx/coroutines/l;Lbe/o;)V` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L10f6cc.  call `w`(v0, v1, v2) @signature `Lbe/a;.w:(Lkotlinx/coroutines/l;Lbe/o;)V` @kind direct;
  #L10f6d2.  return @kind void;
}
procedure `boolean` `p`(`be.a` v0 @kind this, `be.o` v1 @kind object) @signature `Lbe/a;.p:(Lbe/o;)Z` @AccessFlag PRIVATE_FINAL {
    temp;

  #L10f594.  call temp:= `q`(v0, v1) @signature `Lbe/a;.q:(Lbe/o;)Z` @kind virtual;
  #L10f59a.  v1:= temp;
  #L10f59c.  if v1 == 0 then goto L10f5a6;
  #L10f5a0.  call `u`(v0) @signature `Lbe/a;.u:()V` @kind virtual;
  #L10f5a6.  return v1;
}
procedure `void` `w`(`be.a` v1 @kind this, `kotlinx.coroutines.l` v2 @kind object, `be.o` v3 @kind object) @signature `Lbe/a;.w:(Lkotlinx/coroutines/l;Lbe/o;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L10f70c.  v0:= new `be.a$c`;
  #L10f710.  call `<init>`(v0, v1, v3) @signature `Lbe/a$c;.<init>:(Lbe/a;Lbe/o;)V` @kind direct;
  #L10f716.  call `b`(v2, v0) @signature `Lkotlinx/coroutines/l;.b:(Lwd/l;)V` @kind interface;
  #L10f71c.  return @kind void;
}
procedure `be.g` `iterator`(`be.a` v1 @kind this) @signature `Lbe/a;.iterator:()Lbe/g;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L10f530.  v0:= new `be.a$a`;
  #L10f534.  call `<init>`(v0, v1) @signature `Lbe/a$a;.<init>:(Lbe/a;)V` @kind direct;
  #L10f53a.  return v0 @kind object;
}
procedure `be.q` `l`(`be.a` v2 @kind this) @signature `Lbe/a;.l:()Lbe/q;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L10f54c.  call temp:= `l`(v2) @signature `Lbe/c;.l:()Lbe/q;` @kind super;
  #L10f552.  v0:= temp @kind object;
  #L10f554.  if v0 == 0 then goto L10f566;
  #L10f558.  v1:= instanceof @variable v0 @type ^`be.j` @kind boolean;
  #L10f55c.  if v1 != 0 then goto L10f566;
  #L10f560.  call `t`(v2) @signature `Lbe/a;.t:()V` @kind virtual;
  #L10f566.  return v0 @kind object;
}
procedure `boolean` `q`(`be.a` v6 @kind this, `be.o` v7 @kind object) @signature `Lbe/a;.q:(Lbe/o;)Z` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L10f5b8.  call temp:= `r`(v6) @signature `Lbe/a;.r:()Z` @kind virtual;
  #L10f5be.  v0:= temp;
  #L10f5c0.  v1:= 0I;
  #L10f5c2.  v2:= 1I;
  #L10f5c4.  if v0 == 0 then goto L10f5f2;
  #L10f5c8.  call temp:= `e`(v6) @signature `Lbe/c;.e:()Lkotlinx/coroutines/internal/p;` @kind virtual;
  #L10f5ce.  v0:= temp @kind object;
  #L10f5d0.  call temp:= `o`(v0) @signature `Lkotlinx/coroutines/internal/r;.o:()Lkotlinx/coroutines/internal/r;` @kind virtual;
  #L10f5d6.  v3:= temp @kind object;
  #L10f5d8.  v4:= instanceof @variable v3 @type ^`be.s` @kind boolean;
  #L10f5dc.  v4:= v4 ^~ v2 @kind int;
  #L10f5de.  if v4 != 0 then goto L10f5e4;
  #L10f5e2.  goto L10f62e;
  #L10f5e4.  call temp:= `h`(v3, v7, v0) @signature `Lkotlinx/coroutines/internal/r;.h:(Lkotlinx/coroutines/internal/r;Lkotlinx/coroutines/internal/r;)Z` @kind virtual;
  #L10f5ea.  v3:= temp;
  #L10f5ec.  if v3 == 0 then goto L10f5d0;
  #L10f5f0.  goto L10f62c;
  #L10f5f2.  call temp:= `e`(v6) @signature `Lbe/c;.e:()Lkotlinx/coroutines/internal/p;` @kind virtual;
  #L10f5f8.  v0:= temp @kind object;
  #L10f5fa.  v3:= new `be.a$d`;
  #L10f5fe.  call `<init>`(v3, v7, v6) @signature `Lbe/a$d;.<init>:(Lkotlinx/coroutines/internal/r;Lbe/a;)V` @kind direct;
  #L10f604.  call temp:= `o`(v0) @signature `Lkotlinx/coroutines/internal/r;.o:()Lkotlinx/coroutines/internal/r;` @kind virtual;
  #L10f60a.  v4:= temp @kind object;
  #L10f60c.  v5:= instanceof @variable v4 @type ^`be.s` @kind boolean;
  #L10f610.  v5:= v5 ^~ v2 @kind int;
  #L10f612.  if v5 != 0 then goto L10f618;
  #L10f616.  goto L10f62e;
  #L10f618.  call temp:= `v`(v4, v7, v0, v3) @signature `Lkotlinx/coroutines/internal/r;.v:(Lkotlinx/coroutines/internal/r;Lkotlinx/coroutines/internal/r;Lkotlinx/coroutines/internal/r$a;)I` @kind virtual;
  #L10f61e.  v4:= temp;
  #L10f620.  if v4 == v2 then goto L10f62c;
  #L10f624.  v5:= 2I;
  #L10f626.  if v4 == v5 then goto L10f62e;
  #L10f62a.  goto L10f604;
  #L10f62c.  v1:= 1I;
  #L10f62e.  return v1;
}
procedure `boolean` `r`() @signature `Lbe/a;.r:()Z` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `boolean` `s`() @signature `Lbe/a;.s:()Z` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `t`(`be.a` v0 @kind this) @signature `Lbe/a;.t:()V` @AccessFlag PROTECTED {
    temp;

  #L10f6e4.  return @kind void;
}
procedure `void` `u`(`be.a` v0 @kind this) @signature `Lbe/a;.u:()V` @AccessFlag PROTECTED {
    temp;

  #L10f6f8.  return @kind void;
}
procedure `java.lang.Object` `v`(`be.a` v3 @kind this) @signature `Lbe/a;.v:()Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L10f640.  call temp:= `m`(v3) @signature `Lbe/c;.m:()Lbe/s;` @kind virtual;
  #L10f646.  v0:= temp @kind object;
  #L10f648.  if v0 != 0 then goto L10f652;
  #L10f64c.  v0:= `@@be.b.d` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L10f650.  return v0 @kind object;
  #L10f652.  v1:= 0I;
  #L10f654.  call temp:= `y`(v0, v1) @signature `Lbe/s;.y:(Lkotlinx/coroutines/internal/r$b;)Lkotlinx/coroutines/internal/f0;` @kind virtual;
  #L10f65a.  v1:= temp @kind object;
  #L10f65c.  if v1 == 0 then goto L10f69c;
  #L10f660.  call temp:= `a`() @signature `Lkotlinx/coroutines/q0;.a:()Z` @kind static;
  #L10f666.  v2:= temp;
  #L10f668.  if v2 == 0 then goto L10f68c;
  #L10f66c.  v2:= `@@kotlinx.coroutines.n.a` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L10f670.  if v1 != v2 then goto L10f678;
  #L10f674.  v1:= 1I;
  #L10f676.  goto L10f67a;
  #L10f678.  v1:= 0I;
  #L10f67a.  if v1 == 0 then goto L10f680;
  #L10f67e.  goto L10f68c;
  #L10f680.  v0:= new `java.lang.AssertionError`;
  #L10f684.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L10f68a.  throw v0;
  #L10f68c.  call `w`(v0) @signature `Lbe/s;.w:()V` @kind virtual;
  #L10f692.  call temp:= `x`(v0) @signature `Lbe/s;.x:()Ljava/lang/Object;` @kind virtual;
  #L10f698.  v0:= temp @kind object;
  #L10f69a.  return v0 @kind object;
  #L10f69c.  call `z`(v0) @signature `Lbe/s;.z:()V` @kind virtual;
  #L10f6a2.  goto L10f640;
}
