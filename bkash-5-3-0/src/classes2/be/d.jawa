record `be.d` @kind class @AccessFlag PUBLIC extends `be.a` @kind class {
  `int` `be.d.d` @AccessFlag PRIVATE_FINAL;
  `be.e` `be.d.e` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.locks.ReentrantLock` `be.d.f` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object`[] `be.d.g` @AccessFlag PRIVATE;
  `int` `be.d.h` @AccessFlag PRIVATE;
  `int` `be.d.size` @AccessFlag PRIVATE_VOLATILE_SYNTHETIC;
}
procedure `void` `<init>`(`be.d` v6 @kind this, `int` v7 , `be.e` v8 @kind object, `wd.l` v9 @kind object) @signature `Lbe/d;.<init>:(ILbe/e;Lwd/l;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11015c.  call `<init>`(v6, v9) @signature `Lbe/a;.<init>:(Lwd/l;)V` @kind direct;
  #L110162.  v6.`be.d.d` @type ^`int` := v7;
  #L110166.  v6.`be.d.e` @type ^`be.e` := v8 @kind object;
  #L11016a.  v8:= 0I;
  #L11016c.  v9:= 1I;
  #L11016e.  if v7 < v9 then goto L110174;
  #L110172.  goto L110176;
  #L110174.  v9:= 0I;
  #L110176.  if v9 == 0 then goto L1101b6;
  #L11017a.  v9:= new `java.util.concurrent.locks.ReentrantLock`;
  #L11017e.  call `<init>`(v9) @signature `Ljava/util/concurrent/locks/ReentrantLock;.<init>:()V` @kind direct;
  #L110184.  v6.`be.d.f` @type ^`java.util.concurrent.locks.ReentrantLock` := v9 @kind object;
  #L110188.  v9:= 8I;
  #L11018c.  call temp:= `min`(v7, v9) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L110192.  v7:= temp;
  #L110194.  v7:= new `java.lang.Object`[v7];
  #L110198.  v1:= `@@be.b.a` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L11019c.  v2:= 0I;
  #L11019e.  v3:= 0I;
  #L1101a0.  v4:= 6I;
  #L1101a2.  v5:= 0I;
  #L1101a4.  v0:= v7 @kind object;
  #L1101a6.  call `e`(v0, v1, v2, v3, v4, v5) @signature `Lpd/b;.e:([Ljava/lang/Object;Ljava/lang/Object;IIILjava/lang/Object;)V` @kind static;
  #L1101ac.  v6.`be.d.g` @type ^`java.lang.Object`[] := v7 @kind object;
  #L1101b0.  v6.`be.d.size` @type ^`int` := v8;
  #L1101b4.  return @kind void;
  #L1101b6.  v8:= new `java.lang.StringBuilder`;
  #L1101ba.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1101c0.  v9:= "ArrayChannel capacity must be at least 1, but " @kind object;
  #L1101c4.  call temp:= `append`(v8, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1101ca.  call temp:= `append`(v8, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1101d0.  v7:= " was specified" @kind object;
  #L1101d4.  call temp:= `append`(v8, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1101da.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1101e0.  v7:= temp @kind object;
  #L1101e2.  v8:= new `java.lang.IllegalArgumentException`;
  #L1101e6.  call temp:= `toString`(v7) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1101ec.  v7:= temp @kind object;
  #L1101ee.  call `<init>`(v8, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1101f4.  throw v8;
}
procedure `void` `x`(`be.d` v5 @kind this, `int` v6 , `java.lang.Object` v7 @kind object) @signature `Lbe/d;.x:(ILjava/lang/Object;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L110208.  v0:= v5.`be.d.d` @type ^`int`;
  #L11020c.  if v6 >= v0 then goto L11022a;
  #L110210.  call `y`(v5, v6) @signature `Lbe/d;.y:(I)V` @kind direct;
  #L110216.  v0:= v5.`be.d.g` @type ^`java.lang.Object`[] @kind object;
  #L11021a.  v1:= v5.`be.d.h` @type ^`int`;
  #L11021e.  v1:= v1 + v6 @kind int;
  #L110220.  v6:= length @variable v0;
  #L110222.  v1:= v1 %% v6 @kind int;
  #L110224.  v0[v1]:= v7 @kind object;
  #L110228.  goto L110284;
  #L11022a.  call temp:= `a`() @signature `Lkotlinx/coroutines/q0;.a:()Z` @kind static;
  #L110230.  v0:= temp;
  #L110232.  v1:= 1I;
  #L110234.  if v0 == 0 then goto L11025c;
  #L110238.  v0:= v5.`be.d.e` @type ^`be.e` @kind object;
  #L11023c.  v2:= `@@be.e.DROP_OLDEST` @type ^`be.e` @kind object;
  #L110240.  if v0 != v2 then goto L110248;
  #L110244.  v0:= 1I;
  #L110246.  goto L11024a;
  #L110248.  v0:= 0I;
  #L11024a.  if v0 == 0 then goto L110250;
  #L11024e.  goto L11025c;
  #L110250.  v6:= new `java.lang.AssertionError`;
  #L110254.  call `<init>`(v6) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L11025a.  throw v6;
  #L11025c.  v0:= v5.`be.d.g` @type ^`java.lang.Object`[] @kind object;
  #L110260.  v2:= v5.`be.d.h` @type ^`int`;
  #L110264.  v3:= length @variable v0;
  #L110266.  v3:= v2 %% v3 @kind int;
  #L11026a.  v4:= 0I;
  #L11026c.  v0[v3]:= v4 @kind object;
  #L110270.  v6:= v6 + v2 @kind int;
  #L110272.  v3:= length @variable v0;
  #L110274.  v6:= v6 %% v3 @kind int;
  #L110276.  v0[v6]:= v7 @kind object;
  #L11027a.  v2:= v2 + v1 @kind int;
  #L11027c.  v6:= length @variable v0;
  #L11027e.  v2:= v2 %% v6 @kind int;
  #L110280.  v5.`be.d.h` @type ^`int` := v2;
  #L110284.  return @kind void;
}
procedure `void` `y`(`be.d` v7 @kind this, `int` v8 ) @signature `Lbe/d;.y:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L110298.  v0:= v7.`be.d.g` @type ^`java.lang.Object`[] @kind object;
  #L11029c.  v1:= length @variable v0;
  #L11029e.  if v8 < v1 then goto L1102ee;
  #L1102a2.  v0:= length @variable v0;
  #L1102a4.  v0:= v0 * 2;
  #L1102a8.  v1:= v7.`be.d.d` @type ^`int`;
  #L1102ac.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1102b2.  v0:= temp;
  #L1102b4.  v1:= new `java.lang.Object`[v0];
  #L1102b8.  v2:= 0I;
  #L1102ba.  v3:= 0I;
  #L1102bc.  if v3 >= v8 then goto L1102dc;
  #L1102c0.  v4:= v7.`be.d.g` @type ^`java.lang.Object`[] @kind object;
  #L1102c4.  v5:= v7.`be.d.h` @type ^`int`;
  #L1102c8.  v5:= v5 + v3 @kind int;
  #L1102ca.  v6:= length @variable v4;
  #L1102cc.  v5:= v5 %% v6 @kind int;
  #L1102ce.  v4:= v4[v5] @kind object;
  #L1102d2.  v1[v3]:= v4 @kind object;
  #L1102d6.  v3:= v3 + 1;
  #L1102da.  goto L1102bc;
  #L1102dc.  v3:= `@@be.b.a` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L1102e0.  call `d`(v1, v3, v8, v0) @signature `Lpd/b;.d:([Ljava/lang/Object;Ljava/lang/Object;II)V` @kind static;
  #L1102e6.  v7.`be.d.g` @type ^`java.lang.Object`[] := v1 @kind object;
  #L1102ea.  v7.`be.d.h` @type ^`int` := v2;
  #L1102ee.  return @kind void;
}
procedure `kotlinx.coroutines.internal.f0` `z`(`be.d` v3 @kind this, `int` v4 ) @signature `Lbe/d;.z:(I)Lkotlinx/coroutines/internal/f0;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1100f8.  v0:= v3.`be.d.d` @type ^`int`;
  #L1100fc.  v1:= 0I;
  #L1100fe.  v2:= 1I;
  #L110100.  if v4 >= v0 then goto L11010c;
  #L110104.  v4:= v4 + v2 @kind int;
  #L110106.  v3.`be.d.size` @type ^`int` := v4;
  #L11010a.  return v1 @kind object;
  #L11010c.  v4:= v3.`be.d.e` @type ^`be.e` @kind object;
  #L110110.  v0:= `@@be.d$a.a` @type ^`int`[] @kind object;
  #L110114.  call temp:= `ordinal`(v4) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L11011a.  v4:= temp;
  #L11011c.  v4:= v0[v4];
  #L110120.  if v4 == v2 then goto L110144;
  #L110124.  v0:= 2I;
  #L110126.  if v4 == v0 then goto L11013e;
  #L11012a.  v0:= 3I;
  #L11012c.  if v4 != v0 then goto L110132;
  #L110130.  goto L110148;
  #L110132.  v4:= new `od.l`;
  #L110136.  call `<init>`(v4) @signature `Lod/l;.<init>:()V` @kind direct;
  #L11013c.  throw v4;
  #L11013e.  v1:= `@@be.b.b` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L110142.  goto L110148;
  #L110144.  v1:= `@@be.b.c` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L110148.  return v1 @kind object;
}
procedure `java.lang.String` `c`(`be.d` v2 @kind this) @signature `Lbe/d;.c:()Ljava/lang/String;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L1100a0.  v0:= new `java.lang.StringBuilder`;
  #L1100a4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1100aa.  v1:= "(buffer:capacity=" @kind object;
  #L1100ae.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1100b4.  v1:= v2.`be.d.d` @type ^`int`;
  #L1100b8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1100be.  v1:= ",size=" @kind object;
  #L1100c2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1100c8.  v1:= v2.`be.d.size` @type ^`int`;
  #L1100cc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1100d2.  v1:= 41I;
  #L1100d6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1100dc.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1100e2.  v0:= temp @kind object;
  #L1100e4.  return v0 @kind object;
}
procedure `java.lang.Object` `i`(`be.d` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lbe/d;.i:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L10fe50.  v0:= v5.`be.d.f` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L10fe54.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L10fe5a.  v1:= v5.`be.d.size` @type ^`int`;
  #L10fe5e.  call temp:= `d`(v5) @signature `Lbe/c;.d:()Lbe/j;` @kind virtual;
  #L10fe64.  v2:= temp @kind object;
  #L10fe66.  if v2 == 0 then goto L10fe72;
  #L10fe6a.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L10fe70.  return v2 @kind object;
  #L10fe72.  call temp:= `z`(v5, v1) @signature `Lbe/d;.z:(I)Lkotlinx/coroutines/internal/f0;` @kind direct;
  #L10fe78.  v2:= temp @kind object;
  #L10fe7a.  if v2 == 0 then goto L10fe86;
  #L10fe7e.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L10fe84.  return v2 @kind object;
  #L10fe86.  if v1 != 0 then goto L10ff0a;
  #L10fe8a.  call temp:= `l`(v5) @signature `Lbe/a;.l:()Lbe/q;` @kind virtual;
  #L10fe90.  v2:= temp @kind object;
  #L10fe92.  if v2 != 0 then goto L10fe98;
  #L10fe96.  goto L10ff0a;
  #L10fe98.  v3:= instanceof @variable v2 @type ^`be.j` @kind boolean;
  #L10fe9c.  if v3 == 0 then goto L10feac;
  #L10fea0.  v5.`be.d.size` @type ^`int` := v1;
  #L10fea4.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L10feaa.  return v2 @kind object;
  #L10feac.  call `c`(v2) @signature `Lkotlin/jvm/internal/k;.c:(Ljava/lang/Object;)V` @kind static;
  #L10feb2.  v3:= 0I;
  #L10feb4.  call temp:= `d`(v2, v6, v3) @signature `Lbe/q;.d:(Ljava/lang/Object;Lkotlinx/coroutines/internal/r$b;)Lkotlinx/coroutines/internal/f0;` @kind interface;
  #L10feba.  v3:= temp @kind object;
  #L10febc.  if v3 == 0 then goto L10fe8a;
  #L10fec0.  call temp:= `a`() @signature `Lkotlinx/coroutines/q0;.a:()Z` @kind static;
  #L10fec6.  v4:= temp;
  #L10fec8.  if v4 == 0 then goto L10feec;
  #L10fecc.  v4:= `@@kotlinx.coroutines.n.a` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L10fed0.  if v3 != v4 then goto L10fed8;
  #L10fed4.  v3:= 1I;
  #L10fed6.  goto L10feda;
  #L10fed8.  v3:= 0I;
  #L10feda.  if v3 == 0 then goto L10fee0;
  #L10fede.  goto L10feec;
  #L10fee0.  v6:= new `java.lang.AssertionError`;
  #L10fee4.  call `<init>`(v6) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L10feea.  throw v6;
  #L10feec.  v5.`be.d.size` @type ^`int` := v1;
  #L10fef0.  v1:= `@@od.t.a` @type ^`od.t` @kind object;
  #L10fef4.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L10fefa.  call `c`(v2, v6) @signature `Lbe/q;.c:(Ljava/lang/Object;)V` @kind interface;
  #L10ff00.  call temp:= `a`(v2) @signature `Lbe/q;.a:()Ljava/lang/Object;` @kind interface;
  #L10ff06.  v6:= temp @kind object;
  #L10ff08.  return v6 @kind object;
  #L10ff0a.  call `x`(v5, v1, v6) @signature `Lbe/d;.x:(ILjava/lang/Object;)V` @kind direct;
  #L10ff10.  v6:= `@@be.b.b` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L10ff14.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L10ff1a.  return v6 @kind object;
  #L10ff1c.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L10ff1e.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L10ff24.  throw v6;
  catch `java.lang.Throwable` @[L10fe5a..L10fe66] goto L10ff1c;
  catch `java.lang.Throwable` @[L10fe72..L10fe7a] goto L10ff1c;
  catch `java.lang.Throwable` @[L10fe8a..L10fea4] goto L10ff1c;
  catch `java.lang.Throwable` @[L10feac..L10fef4] goto L10ff1c;
  catch `java.lang.Throwable` @[L10ff0a..L10ff14] goto L10ff1c;
}
procedure `boolean` `q`(`be.d` v1 @kind this, `be.o` v2 @kind object) @signature `Lbe/d;.q:(Lbe/o;)Z` @AccessFlag PROTECTED {
    temp;
    v0;

  #L10fddc.  v0:= v1.`be.d.f` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L10fde0.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L10fde6.  call temp:= `q`(v1, v2) @signature `Lbe/a;.q:(Lbe/o;)Z` @kind super;
  #L10fdec.  v2:= temp;
  #L10fdee.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L10fdf4.  return v2;
  #L10fdf6.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L10fdf8.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L10fdfe.  throw v2;
  catch `java.lang.Throwable` @[L10fde6..L10fdee] goto L10fdf6;
}
procedure `boolean` `r`(`be.d` v1 @kind this) @signature `Lbe/d;.r:()Z` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L10fe1c.  v0:= 0I;
  #L10fe1e.  return v0;
}
procedure `boolean` `s`(`be.d` v1 @kind this) @signature `Lbe/d;.s:()Z` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L10fe30.  v0:= v1.`be.d.size` @type ^`int`;
  #L10fe34.  if v0 != 0 then goto L10fe3c;
  #L10fe38.  v0:= 1I;
  #L10fe3a.  goto L10fe3e;
  #L10fe3c.  v0:= 0I;
  #L10fe3e.  return v0;
}
procedure `java.lang.Object` `v`(`be.d` v9 @kind this) @signature `Lbe/d;.v:()Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L10ff64.  v0:= v9.`be.d.f` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L10ff68.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L10ff6e.  v1:= v9.`be.d.size` @type ^`int`;
  #L10ff72.  if v1 != 0 then goto L10ff8e;
  #L10ff76.  call temp:= `d`(v9) @signature `Lbe/c;.d:()Lbe/j;` @kind virtual;
  #L10ff7c.  v1:= temp @kind object;
  #L10ff7e.  if v1 != 0 then goto L10ff86;
  #L10ff82.  v1:= `@@be.b.d` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L10ff86.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L10ff8c.  return v1 @kind object;
  #L10ff8e.  v2:= v9.`be.d.g` @type ^`java.lang.Object`[] @kind object;
  #L10ff92.  v3:= v9.`be.d.h` @type ^`int`;
  #L10ff96.  v4:= v2[v3] @kind object;
  #L10ff9a.  v5:= 0I;
  #L10ff9c.  v2[v3]:= v5 @kind object;
  #L10ffa0.  v2:= v1 + -1;
  #L10ffa4.  v9.`be.d.size` @type ^`int` := v2;
  #L10ffa8.  v2:= `@@be.b.d` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L10ffac.  v3:= v9.`be.d.d` @type ^`int`;
  #L10ffb0.  v6:= 0I;
  #L10ffb2.  v7:= 1I;
  #L10ffb4.  if v1 != v3 then goto L11001c;
  #L10ffb8.  v3:= v5 @kind object;
  #L10ffba.  call temp:= `m`(v9) @signature `Lbe/c;.m:()Lbe/s;` @kind virtual;
  #L10ffc0.  v8:= temp @kind object;
  #L10ffc2.  if v8 != 0 then goto L10ffca;
  #L10ffc6.  v5:= v3 @kind object;
  #L10ffc8.  goto L11001c;
  #L10ffca.  call `c`(v8) @signature `Lkotlin/jvm/internal/k;.c:(Ljava/lang/Object;)V` @kind static;
  #L10ffd0.  call temp:= `y`(v8, v5) @signature `Lbe/s;.y:(Lkotlinx/coroutines/internal/r$b;)Lkotlinx/coroutines/internal/f0;` @kind virtual;
  #L10ffd6.  v3:= temp @kind object;
  #L10ffd8.  if v3 == 0 then goto L110012;
  #L10ffdc.  call temp:= `a`() @signature `Lkotlinx/coroutines/q0;.a:()Z` @kind static;
  #L10ffe2.  v2:= temp;
  #L10ffe4.  if v2 == 0 then goto L110004;
  #L10ffe8.  v2:= `@@kotlinx.coroutines.n.a` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L10ffec.  if v3 != v2 then goto L10fff2;
  #L10fff0.  v6:= 1I;
  #L10fff2.  if v6 == 0 then goto L10fff8;
  #L10fff6.  goto L110004;
  #L10fff8.  v1:= new `java.lang.AssertionError`;
  #L10fffc.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L110002.  throw v1;
  #L110004.  call temp:= `x`(v8) @signature `Lbe/s;.x:()Ljava/lang/Object;` @kind virtual;
  #L11000a.  v2:= temp @kind object;
  #L11000c.  v5:= v8 @kind object;
  #L11000e.  v6:= 1I;
  #L110010.  goto L11001c;
  #L110012.  call `z`(v8) @signature `Lbe/s;.z:()V` @kind virtual;
  #L110018.  v3:= v8 @kind object;
  #L11001a.  goto L10ffba;
  #L11001c.  v3:= `@@be.b.d` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L110020.  if v2 == v3 then goto L110042;
  #L110024.  v3:= instanceof @variable v2 @type ^`be.j` @kind boolean;
  #L110028.  if v3 != 0 then goto L110042;
  #L11002c.  v9.`be.d.size` @type ^`int` := v1;
  #L110030.  v3:= v9.`be.d.g` @type ^`java.lang.Object`[] @kind object;
  #L110034.  v8:= v9.`be.d.h` @type ^`int`;
  #L110038.  v8:= v8 + v1 @kind int;
  #L11003a.  v1:= length @variable v3;
  #L11003c.  v8:= v8 %% v1 @kind int;
  #L11003e.  v3[v8]:= v2 @kind object;
  #L110042.  v1:= v9.`be.d.h` @type ^`int`;
  #L110046.  v1:= v1 + v7 @kind int;
  #L110048.  v2:= v9.`be.d.g` @type ^`java.lang.Object`[] @kind object;
  #L11004c.  v2:= length @variable v2;
  #L11004e.  v1:= v1 %% v2 @kind int;
  #L110050.  v9.`be.d.h` @type ^`int` := v1;
  #L110054.  v1:= `@@od.t.a` @type ^`od.t` @kind object;
  #L110058.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L11005e.  if v6 == 0 then goto L11006e;
  #L110062.  call `c`(v5) @signature `Lkotlin/jvm/internal/k;.c:(Ljava/lang/Object;)V` @kind static;
  #L110068.  call `w`(v5) @signature `Lbe/s;.w:()V` @kind virtual;
  #L11006e.  return v4 @kind object;
  #L110070.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L110072.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L110078.  throw v1;
  catch `java.lang.Throwable` @[L10ff6e..L10ff86] goto L110070;
  catch `java.lang.Throwable` @[L10ff8e..L110058] goto L110070;
}
