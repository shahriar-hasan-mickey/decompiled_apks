record `be.m` @kind class @AccessFlag PUBLIC extends `be.a` @kind class {
  `java.util.concurrent.locks.ReentrantLock` `be.m.d` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `be.m.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`be.m` v0 @kind this, `wd.l` v1 @kind object) @signature `Lbe/m;.<init>:(Lwd/l;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L110bb0.  call `<init>`(v0, v1) @signature `Lbe/a;.<init>:(Lwd/l;)V` @kind direct;
  #L110bb6.  v1:= new `java.util.concurrent.locks.ReentrantLock`;
  #L110bba.  call `<init>`(v1) @signature `Ljava/util/concurrent/locks/ReentrantLock;.<init>:()V` @kind direct;
  #L110bc0.  v0.`be.m.d` @type ^`java.util.concurrent.locks.ReentrantLock` := v1 @kind object;
  #L110bc4.  v1:= `@@be.b.a` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L110bc8.  v0.`be.m.e` @type ^`java.lang.Object` := v1 @kind object;
  #L110bcc.  return @kind void;
}
procedure `kotlinx.coroutines.internal.n0` `x`(`be.m` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lbe/m;.x:(Ljava/lang/Object;)Lkotlinx/coroutines/internal/n0;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L110b78.  v0:= v4.`be.m.e` @type ^`java.lang.Object` @kind object;
  #L110b7c.  v1:= `@@be.b.a` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L110b80.  v2:= 0I;
  #L110b82.  if v0 != v1 then goto L110b88;
  #L110b86.  goto L110b9a;
  #L110b88.  v1:= v4.`be.c.b` @type ^`wd.l` @kind object;
  #L110b8c.  if v1 == 0 then goto L110b9a;
  #L110b90.  v3:= 2I;
  #L110b92.  call temp:= `d`(v1, v0, v2, v3, v2) @signature `Lkotlinx/coroutines/internal/z;.d:(Lwd/l;Ljava/lang/Object;Lkotlinx/coroutines/internal/n0;ILjava/lang/Object;)Lkotlinx/coroutines/internal/n0;` @kind static;
  #L110b98.  v2:= temp @kind object;
  #L110b9a.  v4.`be.m.e` @type ^`java.lang.Object` := v5 @kind object;
  #L110b9e.  return v2 @kind object;
}
procedure `java.lang.String` `c`(`be.m` v3 @kind this) @signature `Lbe/m;.c:()Ljava/lang/String;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L110b10.  v0:= v3.`be.m.d` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L110b14.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L110b1a.  v1:= new `java.lang.StringBuilder`;
  #L110b1e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L110b24.  v2:= "(value=" @kind object;
  #L110b28.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L110b2e.  v2:= v3.`be.m.e` @type ^`java.lang.Object` @kind object;
  #L110b32.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L110b38.  v2:= 41I;
  #L110b3c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L110b42.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L110b48.  v1:= temp @kind object;
  #L110b4a.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L110b50.  return v1 @kind object;
  #L110b52.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L110b54.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L110b5a.  throw v1;
  catch `java.lang.Throwable` @[L110b1a..L110b4a] goto L110b52;
}
procedure `java.lang.Object` `i`(`be.m` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lbe/m;.i:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1109a0.  v0:= v4.`be.m.d` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L1109a4.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L1109aa.  call temp:= `d`(v4) @signature `Lbe/c;.d:()Lbe/j;` @kind virtual;
  #L1109b0.  v1:= temp @kind object;
  #L1109b2.  if v1 == 0 then goto L1109be;
  #L1109b6.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L1109bc.  return v1 @kind object;
  #L1109be.  v1:= v4.`be.m.e` @type ^`java.lang.Object` @kind object;
  #L1109c2.  v2:= `@@be.b.a` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L1109c6.  if v1 != v2 then goto L110a42;
  #L1109ca.  call temp:= `l`(v4) @signature `Lbe/a;.l:()Lbe/q;` @kind virtual;
  #L1109d0.  v1:= temp @kind object;
  #L1109d2.  if v1 != 0 then goto L1109d8;
  #L1109d6.  goto L110a42;
  #L1109d8.  v2:= instanceof @variable v1 @type ^`be.j` @kind boolean;
  #L1109dc.  if v2 == 0 then goto L1109e8;
  #L1109e0.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L1109e6.  return v1 @kind object;
  #L1109e8.  call `c`(v1) @signature `Lkotlin/jvm/internal/k;.c:(Ljava/lang/Object;)V` @kind static;
  #L1109ee.  v2:= 0I;
  #L1109f0.  call temp:= `d`(v1, v5, v2) @signature `Lbe/q;.d:(Ljava/lang/Object;Lkotlinx/coroutines/internal/r$b;)Lkotlinx/coroutines/internal/f0;` @kind interface;
  #L1109f6.  v2:= temp @kind object;
  #L1109f8.  if v2 == 0 then goto L1109ca;
  #L1109fc.  call temp:= `a`() @signature `Lkotlinx/coroutines/q0;.a:()Z` @kind static;
  #L110a02.  v3:= temp;
  #L110a04.  if v3 == 0 then goto L110a28;
  #L110a08.  v3:= `@@kotlinx.coroutines.n.a` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L110a0c.  if v2 != v3 then goto L110a14;
  #L110a10.  v2:= 1I;
  #L110a12.  goto L110a16;
  #L110a14.  v2:= 0I;
  #L110a16.  if v2 == 0 then goto L110a1c;
  #L110a1a.  goto L110a28;
  #L110a1c.  v5:= new `java.lang.AssertionError`;
  #L110a20.  call `<init>`(v5) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L110a26.  throw v5;
  #L110a28.  v2:= `@@od.t.a` @type ^`od.t` @kind object;
  #L110a2c.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L110a32.  call `c`(v1, v5) @signature `Lbe/q;.c:(Ljava/lang/Object;)V` @kind interface;
  #L110a38.  call temp:= `a`(v1) @signature `Lbe/q;.a:()Ljava/lang/Object;` @kind interface;
  #L110a3e.  v5:= temp @kind object;
  #L110a40.  return v5 @kind object;
  #L110a42.  call temp:= `x`(v4, v5) @signature `Lbe/m;.x:(Ljava/lang/Object;)Lkotlinx/coroutines/internal/n0;` @kind direct;
  #L110a48.  v5:= temp @kind object;
  #L110a4a.  if v5 != 0 then goto L110a5a;
  #L110a4e.  v5:= `@@be.b.b` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L110a52.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L110a58.  return v5 @kind object;
  #L110a5a.  throw v5;
  #L110a5c.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L110a5e.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L110a64.  throw v5;
  catch `java.lang.Throwable` @[L1109aa..L1109b2] goto L110a5c;
  catch `java.lang.Throwable` @[L1109be..L1109dc] goto L110a5c;
  catch `java.lang.Throwable` @[L1109e8..L110a2c] goto L110a5c;
  catch `java.lang.Throwable` @[L110a42..L110a52] goto L110a5c;
  catch `java.lang.Throwable` @[L110a5a..L110a5c] goto L110a5c;
}
procedure `boolean` `q`(`be.m` v1 @kind this, `be.o` v2 @kind object) @signature `Lbe/m;.q:(Lbe/o;)Z` @AccessFlag PROTECTED {
    temp;
    v0;

  #L110900.  v0:= v1.`be.m.d` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L110904.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L11090a.  call temp:= `q`(v1, v2) @signature `Lbe/a;.q:(Lbe/o;)Z` @kind super;
  #L110910.  v2:= temp;
  #L110912.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L110918.  return v2;
  #L11091a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L11091c.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L110922.  throw v2;
  catch `java.lang.Throwable` @[L11090a..L110912] goto L11091a;
}
procedure `boolean` `r`(`be.m` v1 @kind this) @signature `Lbe/m;.r:()Z` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L110940.  v0:= 0I;
  #L110942.  return v0;
}
procedure `boolean` `s`(`be.m` v3 @kind this) @signature `Lbe/m;.s:()Z` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L110954.  v0:= v3.`be.m.d` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L110958.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L11095e.  v1:= v3.`be.m.e` @type ^`java.lang.Object` @kind object;
  #L110962.  v2:= `@@be.b.a` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L110966.  if v1 != v2 then goto L11096e;
  #L11096a.  v1:= 1I;
  #L11096c.  goto L110970;
  #L11096e.  v1:= 0I;
  #L110970.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L110976.  return v1;
  #L110978.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L11097a.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L110980.  throw v1;
  catch `java.lang.Throwable` @[L11095e..L110966] goto L110978;
}
procedure `java.lang.Object` `v`(`be.m` v3 @kind this) @signature `Lbe/m;.v:()Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L110aa4.  v0:= v3.`be.m.d` @type ^`java.util.concurrent.locks.ReentrantLock` @kind object;
  #L110aa8.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L110aae.  v1:= v3.`be.m.e` @type ^`java.lang.Object` @kind object;
  #L110ab2.  v2:= `@@be.b.a` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L110ab6.  if v1 != v2 then goto L110ad2;
  #L110aba.  call temp:= `d`(v3) @signature `Lbe/c;.d:()Lbe/j;` @kind virtual;
  #L110ac0.  v1:= temp @kind object;
  #L110ac2.  if v1 != 0 then goto L110aca;
  #L110ac6.  v1:= `@@be.b.d` @type ^`kotlinx.coroutines.internal.f0` @kind object;
  #L110aca.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L110ad0.  return v1 @kind object;
  #L110ad2.  v3.`be.m.e` @type ^`java.lang.Object` := v2 @kind object;
  #L110ad6.  v2:= `@@od.t.a` @type ^`od.t` @kind object;
  #L110ada.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L110ae0.  return v1 @kind object;
  #L110ae2.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L110ae4.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L110aea.  throw v1;
  catch `java.lang.Throwable` @[L110aae..L110aca] goto L110ae2;
  catch `java.lang.Throwable` @[L110ad2..L110ada] goto L110ae2;
}
