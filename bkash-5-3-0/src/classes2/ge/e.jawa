record `ge.e` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<clinit>`() @signature `Lge/e;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2b2ff4.  v0:= "\"\\" @kind object;
  #L2b2ff8.  call temp:= `encodeUtf8`(v0) @signature `Lokio/f;.encodeUtf8:(Ljava/lang/String;)Lokio/f;` @kind static;
  #L2b2ffe.  v0:= "\t ,=" @kind object;
  #L2b3002.  call temp:= `encodeUtf8`(v0) @signature `Lokio/f;.encodeUtf8:(Ljava/lang/String;)Lokio/f;` @kind static;
  #L2b3008.  return @kind void;
}
procedure `long` `a`(`okhttp3.w` v2 @kind object) @signature `Lge/e;.a:(Lokhttp3/w;)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2b2f74.  v0:= "Content-Length" @kind object;
  #L2b2f78.  call temp:= `c`(v2, v0) @signature `Lokhttp3/w;.c:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L2b2f7e.  v2:= temp @kind object;
  #L2b2f80.  call temp:= `h`(v2) @signature `Lge/e;.h:(Ljava/lang/String;)J` @kind static;
  #L2b2f86.  v0:= temp @kind wide;
  #L2b2f88.  return v0 @kind wide;
}
procedure `long` `b`(`okhttp3.g0` v2 @kind object) @signature `Lge/e;.b:(Lokhttp3/g0;)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2b2f9c.  call temp:= `w`(v2) @signature `Lokhttp3/g0;.w:()Lokhttp3/w;` @kind virtual;
  #L2b2fa2.  v2:= temp @kind object;
  #L2b2fa4.  call temp:= `a`(v2) @signature `Lge/e;.a:(Lokhttp3/w;)J` @kind static;
  #L2b2faa.  v0:= temp @kind wide;
  #L2b2fac.  return v0 @kind wide;
}
procedure `boolean` `c`(`okhttp3.g0` v8 @kind object) @signature `Lge/e;.c:(Lokhttp3/g0;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2b2e0c.  call temp:= `Y`(v8) @signature `Lokhttp3/g0;.Y:()Lokhttp3/e0;` @kind virtual;
  #L2b2e12.  v0:= temp @kind object;
  #L2b2e14.  call temp:= `f`(v0) @signature `Lokhttp3/e0;.f:()Ljava/lang/String;` @kind virtual;
  #L2b2e1a.  v0:= temp @kind object;
  #L2b2e1c.  v1:= "HEAD" @kind object;
  #L2b2e20.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2b2e26.  v0:= temp;
  #L2b2e28.  v1:= 0I;
  #L2b2e2a.  if v0 == 0 then goto L2b2e30;
  #L2b2e2e.  return v1;
  #L2b2e30.  call temp:= `k`(v8) @signature `Lokhttp3/g0;.k:()I` @kind virtual;
  #L2b2e36.  v0:= temp;
  #L2b2e38.  v2:= 100I;
  #L2b2e3c.  v3:= 1I;
  #L2b2e3e.  if v0 < v2 then goto L2b2e4a;
  #L2b2e42.  v2:= 200I;
  #L2b2e46.  if v0 < v2 then goto L2b2e5c;
  #L2b2e4a.  v2:= 204I;
  #L2b2e4e.  if v0 == v2 then goto L2b2e5c;
  #L2b2e52.  v2:= 304I;
  #L2b2e56.  if v0 == v2 then goto L2b2e5c;
  #L2b2e5a.  return v3;
  #L2b2e5c.  call temp:= `b`(v8) @signature `Lge/e;.b:(Lokhttp3/g0;)J` @kind static;
  #L2b2e62.  v4:= temp @kind wide;
  #L2b2e64.  v6:= -1L;
  #L2b2e68.  v0:= lcmp(v4, v6);
  #L2b2e6c.  if v0 != 0 then goto L2b2e90;
  #L2b2e70.  v0:= "Transfer-Encoding" @kind object;
  #L2b2e74.  call temp:= `s`(v8, v0) @signature `Lokhttp3/g0;.s:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L2b2e7a.  v8:= temp @kind object;
  #L2b2e7c.  v0:= "chunked" @kind object;
  #L2b2e80.  call temp:= `equalsIgnoreCase`(v0, v8) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L2b2e86.  v8:= temp;
  #L2b2e88.  if v8 == 0 then goto L2b2e8e;
  #L2b2e8c.  goto L2b2e90;
  #L2b2e8e.  return v1;
  #L2b2e90.  return v3;
}
procedure `int` `d`(`java.lang.String` v3 @kind object, `int` v4 ) @signature `Lge/e;.d:(Ljava/lang/String;I)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2b2ea4.  call temp:= `parseLong`(v3) @signature `Ljava/lang/Long;.parseLong:(Ljava/lang/String;)J` @kind static;
  #L2b2eaa.  v3:= temp @kind wide;
  #L2b2eac.  v0:= 2147483647L;
  #L2b2eb2.  v2:= lcmp(v3, v0);
  #L2b2eb6.  if v2 <= 0 then goto L2b2ec2;
  #L2b2eba.  v3:= 2147483647I;
  #L2b2ec0.  return v3;
  #L2b2ec2.  v0:= 0L;
  #L2b2ec6.  v2:= lcmp(v3, v0);
  #L2b2eca.  if v2 >= 0 then goto L2b2ed2;
  #L2b2ece.  v3:= 0I;
  #L2b2ed0.  return v3;
  #L2b2ed2.  v4:= (`int`) v3 @kind l2i;
  #L2b2ed4.  return v4;
  catch `java.lang.NumberFormatException` @[L2b2ea4..L2b2eac] goto L2b2ed4;
}
procedure `void` `e`(`okhttp3.o` v1 @kind object, `okhttp3.x` v2 @kind object, `okhttp3.w` v3 @kind object) @signature `Lge/e;.e:(Lokhttp3/o;Lokhttp3/x;Lokhttp3/w;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2b301c.  v0:= `@@okhttp3.o.a` @type ^`okhttp3.o` @kind object;
  #L2b3020.  if v1 != v0 then goto L2b3026;
  #L2b3024.  return @kind void;
  #L2b3026.  call temp:= `f`(v2, v3) @signature `Lokhttp3/n;.f:(Lokhttp3/x;Lokhttp3/w;)Ljava/util/List;` @kind static;
  #L2b302c.  v3:= temp @kind object;
  #L2b302e.  call temp:= `isEmpty`(v3) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L2b3034.  v0:= temp;
  #L2b3036.  if v0 == 0 then goto L2b303c;
  #L2b303a.  return @kind void;
  #L2b303c.  call `a`(v1, v2, v3) @signature `Lokhttp3/o;.a:(Lokhttp3/x;Ljava/util/List;)V` @kind interface;
  #L2b3042.  return @kind void;
}
procedure `int` `f`(`java.lang.String` v2 @kind object, `int` v3 , `java.lang.String` v4 @kind object) @signature `Lge/e;.f:(Ljava/lang/String;ILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2b2ef8.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2b2efe.  v0:= temp;
  #L2b2f00.  if v3 >= v0 then goto L2b2f22;
  #L2b2f04.  call temp:= `charAt`(v2, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2b2f0a.  v0:= temp;
  #L2b2f0c.  call temp:= `indexOf`(v4, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L2b2f12.  v0:= temp;
  #L2b2f14.  v1:= -1I;
  #L2b2f16.  if v0 == v1 then goto L2b2f1c;
  #L2b2f1a.  goto L2b2f22;
  #L2b2f1c.  v3:= v3 + 1;
  #L2b2f20.  goto L2b2ef8;
  #L2b2f22.  return v3;
}
procedure `int` `g`(`java.lang.String` v2 @kind object, `int` v3 ) @signature `Lge/e;.g:(Ljava/lang/String;I)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2b2f34.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2b2f3a.  v0:= temp;
  #L2b2f3c.  if v3 >= v0 then goto L2b2f60;
  #L2b2f40.  call temp:= `charAt`(v2, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2b2f46.  v0:= temp;
  #L2b2f48.  v1:= 32I;
  #L2b2f4c.  if v0 == v1 then goto L2b2f5a;
  #L2b2f50.  v1:= 9I;
  #L2b2f54.  if v0 == v1 then goto L2b2f5a;
  #L2b2f58.  goto L2b2f60;
  #L2b2f5a.  v3:= v3 + 1;
  #L2b2f5e.  goto L2b2f34;
  #L2b2f60.  return v3;
}
procedure `long` `h`(`java.lang.String` v2 @kind object) @signature `Lge/e;.h:(Ljava/lang/String;)J` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L2b2fc0.  v0:= -1L;
  #L2b2fc4.  if v2 != 0 then goto L2b2fca;
  #L2b2fc8.  return v0 @kind wide;
  #L2b2fca.  call temp:= `parseLong`(v2) @signature `Ljava/lang/Long;.parseLong:(Ljava/lang/String;)J` @kind static;
  #L2b2fd0.  v0:= temp @kind wide;
  #L2b2fd2.  return v0 @kind wide;
  catch `java.lang.NumberFormatException` @[L2b2fca..L2b2fd2] goto L2b2fd2;
}
