record `wb.c$h` @kind class @AccessFlag  extends `wb.c$d` @kind interface {
  `java.util.concurrent.ExecutorService` `wb.c$h.a` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.ConcurrentLinkedQueue` `wb.c$h.b` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `wb.c$h.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`wb.c$h` v1 @kind this, `java.util.concurrent.ExecutorService` v2 @kind object) @signature `Lwb/c$h;.<init>:(Ljava/util/concurrent/ExecutorService;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L383e34.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L383e3a.  v1.`wb.c$h.a` @type ^`java.util.concurrent.ExecutorService` := v2 @kind object;
  #L383e3e.  v2:= new `java.util.concurrent.ConcurrentLinkedQueue`;
  #L383e42.  call `<init>`(v2) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.<init>:()V` @kind direct;
  #L383e48.  v1.`wb.c$h.b` @type ^`java.util.concurrent.ConcurrentLinkedQueue` := v2 @kind object;
  #L383e4c.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L383e50.  v0:= 0I;
  #L383e52.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:(Z)V` @kind direct;
  #L383e58.  v1.`wb.c$h.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L383e5c.  return @kind void;
}
procedure `void` `b`(`wb.c$h` v0 @kind object) @signature `Lwb/c$h;.b:(Lwb/c$h;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L383e04.  call `e`(v0) @signature `Lwb/c$h;.e:()V` @kind direct;
  #L383e0a.  return @kind void;
}
procedure `void` `c`(`wb.c$h` v0 @kind object) @signature `Lwb/c$h;.c:(Lwb/c$h;)V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L383e1c.  call `f`(v0) @signature `Lwb/c$h;.f:()V` @kind direct;
  #L383e22.  return @kind void;
}
procedure `void` `d`(`wb.c$h` v3 @kind this) @signature `Lwb/c$h;.d:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L383ea0.  v0:= v3.`wb.c$h.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L383ea4.  v1:= 0I;
  #L383ea6.  v2:= 1I;
  #L383ea8.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L383eae.  v0:= temp;
  #L383eb0.  if v0 == 0 then goto L383f30;
  #L383eb4.  v0:= v3.`wb.c$h.b` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L383eb8.  call temp:= `poll`(v0) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L383ebe.  v0:= temp @kind object;
  #L383ec0.  v0:= (`java.lang.Runnable`) v0 @kind object;
  #L383ec4.  if v0 == 0 then goto L383ece;
  #L383ec8.  call `run`(v0) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L383ece.  v0:= v3.`wb.c$h.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L383ed2.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L383ed8.  v0:= v3.`wb.c$h.b` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L383edc.  call temp:= `isEmpty`(v0) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.isEmpty:()Z` @kind virtual;
  #L383ee2.  v0:= temp;
  #L383ee4.  if v0 != 0 then goto L383f30;
  #L383ee8.  v0:= v3.`wb.c$h.a` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L383eec.  v1:= new `wb.e`;
  #L383ef0.  call `<init>`(v1, v3) @signature `Lwb/e;.<init>:(Lwb/c$h;)V` @kind direct;
  #L383ef6.  call `execute`(v0, v1) @signature `Ljava/util/concurrent/ExecutorService;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L383efc.  goto L383f30;
  #L383efe.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L383f00.  v2:= v3.`wb.c$h.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L383f04.  call `set`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L383f0a.  v1:= v3.`wb.c$h.b` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L383f0e.  call temp:= `isEmpty`(v1) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.isEmpty:()Z` @kind virtual;
  #L383f14.  v1:= temp;
  #L383f16.  if v1 != 0 then goto L383f2e;
  #L383f1a.  v1:= v3.`wb.c$h.a` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L383f1e.  v2:= new `wb.e`;
  #L383f22.  call `<init>`(v2, v3) @signature `Lwb/e;.<init>:(Lwb/c$h;)V` @kind direct;
  #L383f28.  call `execute`(v1, v2) @signature `Ljava/util/concurrent/ExecutorService;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L383f2e.  throw v0;
  #L383f30.  return @kind void;
  catch `java.lang.Throwable` @[L383eb4..L383ece] goto L383efe;
}
procedure `void` `e`(`wb.c$h` v0 @kind this) @signature `Lwb/c$h;.e:()V` @AccessFlag PRIVATE_SYNTHETIC {
    temp;

  #L383f50.  call `d`(v0) @signature `Lwb/c$h;.d:()V` @kind direct;
  #L383f56.  return @kind void;
}
procedure `void` `f`(`wb.c$h` v0 @kind this) @signature `Lwb/c$h;.f:()V` @AccessFlag PRIVATE_SYNTHETIC {
    temp;

  #L383f68.  call `d`(v0) @signature `Lwb/c$h;.d:()V` @kind direct;
  #L383f6e.  return @kind void;
}
procedure `void` `a`(`wb.c$h` v1 @kind this, `java.lang.Runnable` v2 @kind object) @signature `Lwb/c$h;.a:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L383e70.  v0:= v1.`wb.c$h.b` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L383e74.  call temp:= `add`(v0, v2) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L383e7a.  v2:= v1.`wb.c$h.a` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L383e7e.  v0:= new `wb.d`;
  #L383e82.  call `<init>`(v0, v1) @signature `Lwb/d;.<init>:(Lwb/c$h;)V` @kind direct;
  #L383e88.  call `execute`(v2, v0) @signature `Ljava/util/concurrent/ExecutorService;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L383e8e.  return @kind void;
}
