record `xd.e` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `java.lang.String` `a`(`java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lxd/e;.a:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L3865fc.  v0:= "from" @kind object;
  #L386600.  call `f`(v2, v0) @signature `Lkotlin/jvm/internal/k;.f:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L386606.  v0:= "until" @kind object;
  #L38660a.  call `f`(v3, v0) @signature `Lkotlin/jvm/internal/k;.f:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L386610.  v0:= new `java.lang.StringBuilder`;
  #L386614.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L38661a.  v1:= "Random range is empty: [" @kind object;
  #L38661e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L386624.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L38662a.  v2:= ", " @kind object;
  #L38662e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L386634.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L38663a.  v2:= ")." @kind object;
  #L38663e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L386644.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L38664a.  v2:= temp @kind object;
  #L38664c.  return v2 @kind object;
}
procedure `void` `b`(`double` v1 , `double` v3 ) @signature `Lxd/e;.b:(DD)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L386660.  v0:= dcmpl(v3, v1);
  #L386664.  if v0 <= 0 then goto L38666c;
  #L386668.  v0:= 1I;
  #L38666a.  goto L38666e;
  #L38666c.  v0:= 0I;
  #L38666e.  if v0 == 0 then goto L386674;
  #L386672.  return @kind void;
  #L386674.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L38667a.  v1:= temp @kind object;
  #L38667c.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L386682.  v2:= temp @kind object;
  #L386684.  call temp:= `a`(v1, v2) @signature `Lxd/e;.a:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L38668a.  v1:= temp @kind object;
  #L38668c.  v2:= new `java.lang.IllegalArgumentException`;
  #L386690.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L386696.  v1:= temp @kind object;
  #L386698.  call `<init>`(v2, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L38669e.  throw v2;
}
procedure `void` `c`(`int` v1 , `int` v2 ) @signature `Lxd/e;.c:(II)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L3866b0.  if v2 <= v1 then goto L3866b8;
  #L3866b4.  v0:= 1I;
  #L3866b6.  goto L3866ba;
  #L3866b8.  v0:= 0I;
  #L3866ba.  if v0 == 0 then goto L3866c0;
  #L3866be.  return @kind void;
  #L3866c0.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3866c6.  v1:= temp @kind object;
  #L3866c8.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L3866ce.  v2:= temp @kind object;
  #L3866d0.  call temp:= `a`(v1, v2) @signature `Lxd/e;.a:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L3866d6.  v1:= temp @kind object;
  #L3866d8.  v2:= new `java.lang.IllegalArgumentException`;
  #L3866dc.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L3866e2.  v1:= temp @kind object;
  #L3866e4.  call `<init>`(v2, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3866ea.  throw v2;
}
procedure `void` `d`(`long` v1 , `long` v3 ) @signature `Lxd/e;.d:(JJ)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L3866fc.  v0:= lcmp(v3, v1);
  #L386700.  if v0 <= 0 then goto L386708;
  #L386704.  v0:= 1I;
  #L386706.  goto L38670a;
  #L386708.  v0:= 0I;
  #L38670a.  if v0 == 0 then goto L386710;
  #L38670e.  return @kind void;
  #L386710.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L386716.  v1:= temp @kind object;
  #L386718.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L38671e.  v2:= temp @kind object;
  #L386720.  call temp:= `a`(v1, v2) @signature `Lxd/e;.a:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L386726.  v1:= temp @kind object;
  #L386728.  v2:= new `java.lang.IllegalArgumentException`;
  #L38672c.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L386732.  v1:= temp @kind object;
  #L386734.  call `<init>`(v2, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L38673a.  throw v2;
}
procedure `int` `e`(`int` v0 ) @signature `Lxd/e;.e:(I)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L3865bc.  call temp:= `numberOfLeadingZeros`(v0) @signature `Ljava/lang/Integer;.numberOfLeadingZeros:(I)I` @kind static;
  #L3865c2.  v0:= temp;
  #L3865c4.  v0:= v0 - 31;
  #L3865c8.  return v0;
}
procedure `int` `f`(`int` v1 , `int` v2 ) @signature `Lxd/e;.f:(II)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L3865dc.  v0:= v2 - 32;
  #L3865e0.  v1:= v1 ^>> v0 @kind int;
  #L3865e2.  v2:= -v2 @kind int;
  #L3865e4.  v2:= v2 ^> 31;
  #L3865e8.  v1:= v1 ^& v2 @kind int;
  #L3865ea.  return v1;
}
