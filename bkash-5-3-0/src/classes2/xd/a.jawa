record `xd.a` @kind class @AccessFlag PUBLIC_ABSTRACT extends `xd.d` @kind class {
}
procedure `void` `<init>`(`xd.a` v0 @kind this) @signature `Lxd/a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L386214.  call `<init>`(v0) @signature `Lxd/d;.<init>:()V` @kind direct;
  #L38621a.  return @kind void;
}
procedure `java.util.Random` `getImpl`() @signature `Lxd/a;.getImpl:()Ljava/util/Random;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `nextBits`(`xd.a` v1 @kind this, `int` v2 ) @signature `Lxd/a;.nextBits:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L38617c.  call temp:= `getImpl`(v1) @signature `Lxd/a;.getImpl:()Ljava/util/Random;` @kind virtual;
  #L386182.  v0:= temp @kind object;
  #L386184.  call temp:= `nextInt`(v0) @signature `Ljava/util/Random;.nextInt:()I` @kind virtual;
  #L38618a.  v0:= temp;
  #L38618c.  call temp:= `f`(v0, v2) @signature `Lxd/e;.f:(II)I` @kind static;
  #L386192.  v2:= temp;
  #L386194.  return v2;
}
procedure `boolean` `nextBoolean`(`xd.a` v1 @kind this) @signature `Lxd/a;.nextBoolean:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3860e4.  call temp:= `getImpl`(v1) @signature `Lxd/a;.getImpl:()Ljava/util/Random;` @kind virtual;
  #L3860ea.  v0:= temp @kind object;
  #L3860ec.  call temp:= `nextBoolean`(v0) @signature `Ljava/util/Random;.nextBoolean:()Z` @kind virtual;
  #L3860f2.  v0:= temp;
  #L3860f4.  return v0;
}
procedure `byte`[] `nextBytes`(`xd.a` v1 @kind this, `byte`[] v2 @kind object) @signature `Lxd/a;.nextBytes:([B)[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L386108.  v0:= "array" @kind object;
  #L38610c.  call `f`(v2, v0) @signature `Lkotlin/jvm/internal/k;.f:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L386112.  call temp:= `getImpl`(v1) @signature `Lxd/a;.getImpl:()Ljava/util/Random;` @kind virtual;
  #L386118.  v0:= temp @kind object;
  #L38611a.  call `nextBytes`(v0, v2) @signature `Ljava/util/Random;.nextBytes:([B)V` @kind virtual;
  #L386120.  return v2 @kind object;
}
procedure `double` `nextDouble`(`xd.a` v2 @kind this) @signature `Lxd/a;.nextDouble:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L386134.  call temp:= `getImpl`(v2) @signature `Lxd/a;.getImpl:()Ljava/util/Random;` @kind virtual;
  #L38613a.  v0:= temp @kind object;
  #L38613c.  call temp:= `nextDouble`(v0) @signature `Ljava/util/Random;.nextDouble:()D` @kind virtual;
  #L386142.  v0:= temp @kind wide;
  #L386144.  return v0 @kind wide;
}
procedure `float` `nextFloat`(`xd.a` v1 @kind this) @signature `Lxd/a;.nextFloat:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L386158.  call temp:= `getImpl`(v1) @signature `Lxd/a;.getImpl:()Ljava/util/Random;` @kind virtual;
  #L38615e.  v0:= temp @kind object;
  #L386160.  call temp:= `nextFloat`(v0) @signature `Ljava/util/Random;.nextFloat:()F` @kind virtual;
  #L386166.  v0:= temp;
  #L386168.  return v0;
}
procedure `int` `nextInt`(`xd.a` v1 @kind this) @signature `Lxd/a;.nextInt:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3861a8.  call temp:= `getImpl`(v1) @signature `Lxd/a;.getImpl:()Ljava/util/Random;` @kind virtual;
  #L3861ae.  v0:= temp @kind object;
  #L3861b0.  call temp:= `nextInt`(v0) @signature `Ljava/util/Random;.nextInt:()I` @kind virtual;
  #L3861b6.  v0:= temp;
  #L3861b8.  return v0;
}
procedure `int` `nextInt`(`xd.a` v1 @kind this, `int` v2 ) @signature `Lxd/a;.nextInt:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3861cc.  call temp:= `getImpl`(v1) @signature `Lxd/a;.getImpl:()Ljava/util/Random;` @kind virtual;
  #L3861d2.  v0:= temp @kind object;
  #L3861d4.  call temp:= `nextInt`(v0, v2) @signature `Ljava/util/Random;.nextInt:(I)I` @kind virtual;
  #L3861da.  v2:= temp;
  #L3861dc.  return v2;
}
procedure `long` `nextLong`(`xd.a` v2 @kind this) @signature `Lxd/a;.nextLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3861f0.  call temp:= `getImpl`(v2) @signature `Lxd/a;.getImpl:()Ljava/util/Random;` @kind virtual;
  #L3861f6.  v0:= temp @kind object;
  #L3861f8.  call temp:= `nextLong`(v0) @signature `Ljava/util/Random;.nextLong:()J` @kind virtual;
  #L3861fe.  v0:= temp @kind wide;
  #L386200.  return v0 @kind wide;
}
