record `xd.d$a` @kind class @AccessFlag PUBLIC_FINAL extends `xd.d` @kind class, `java.io.Serializable` @kind interface {
}
procedure `void` `<init>`(`xd.d$a` v0 @kind this) @signature `Lxd/d$a;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L38658c.  call `<init>`(v0) @signature `Lxd/d;.<init>:()V` @kind direct;
  #L386592.  return @kind void;
}
procedure `void` `<init>`(`xd.d$a` v0 @kind this, `kotlin.jvm.internal.g` v1 @kind object) @signature `Lxd/d$a;.<init>:(Lkotlin/jvm/internal/g;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L3865a4.  call `<init>`(v0) @signature `Lxd/d$a;.<init>:()V` @kind direct;
  #L3865aa.  return @kind void;
}
procedure `java.lang.Object` `writeReplace`(`xd.d$a` v1 @kind this) @signature `Lxd/d$a;.writeReplace:()Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L386508.  v0:= `@@xd.d$a$a.INSTANCE` @type ^`xd.d$a$a` @kind object;
  #L38650c.  return v0 @kind object;
}
procedure `int` `nextBits`(`xd.d$a` v1 @kind this, `int` v2 ) @signature `Lxd/d$a;.nextBits:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L386478.  call temp:= `access$getDefaultRandom$cp`() @signature `Lxd/d;.access$getDefaultRandom$cp:()Lxd/d;` @kind static;
  #L38647e.  v0:= temp @kind object;
  #L386480.  call temp:= `nextBits`(v0, v2) @signature `Lxd/d;.nextBits:(I)I` @kind virtual;
  #L386486.  v2:= temp;
  #L386488.  return v2;
}
procedure `boolean` `nextBoolean`(`xd.d$a` v1 @kind this) @signature `Lxd/d$a;.nextBoolean:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L386348.  call temp:= `access$getDefaultRandom$cp`() @signature `Lxd/d;.access$getDefaultRandom$cp:()Lxd/d;` @kind static;
  #L38634e.  v0:= temp @kind object;
  #L386350.  call temp:= `nextBoolean`(v0) @signature `Lxd/d;.nextBoolean:()Z` @kind virtual;
  #L386356.  v0:= temp;
  #L386358.  return v0;
}
procedure `byte`[] `nextBytes`(`xd.d$a` v1 @kind this, `int` v2 ) @signature `Lxd/d$a;.nextBytes:(I)[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3863c4.  call temp:= `access$getDefaultRandom$cp`() @signature `Lxd/d;.access$getDefaultRandom$cp:()Lxd/d;` @kind static;
  #L3863ca.  v0:= temp @kind object;
  #L3863cc.  call temp:= `nextBytes`(v0, v2) @signature `Lxd/d;.nextBytes:(I)[B` @kind virtual;
  #L3863d2.  v2:= temp @kind object;
  #L3863d4.  return v2 @kind object;
}
procedure `byte`[] `nextBytes`(`xd.d$a` v1 @kind this, `byte`[] v2 @kind object) @signature `Lxd/d$a;.nextBytes:([B)[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L38636c.  v0:= "array" @kind object;
  #L386370.  call `f`(v2, v0) @signature `Lkotlin/jvm/internal/k;.f:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L386376.  call temp:= `access$getDefaultRandom$cp`() @signature `Lxd/d;.access$getDefaultRandom$cp:()Lxd/d;` @kind static;
  #L38637c.  v0:= temp @kind object;
  #L38637e.  call temp:= `nextBytes`(v0, v2) @signature `Lxd/d;.nextBytes:([B)[B` @kind virtual;
  #L386384.  v2:= temp @kind object;
  #L386386.  return v2 @kind object;
}
procedure `byte`[] `nextBytes`(`xd.d$a` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lxd/d$a;.nextBytes:([BII)[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L386398.  v0:= "array" @kind object;
  #L38639c.  call `f`(v2, v0) @signature `Lkotlin/jvm/internal/k;.f:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L3863a2.  call temp:= `access$getDefaultRandom$cp`() @signature `Lxd/d;.access$getDefaultRandom$cp:()Lxd/d;` @kind static;
  #L3863a8.  v0:= temp @kind object;
  #L3863aa.  call temp:= `nextBytes`(v0, v2, v3, v4) @signature `Lxd/d;.nextBytes:([BII)[B` @kind virtual;
  #L3863b0.  v2:= temp @kind object;
  #L3863b2.  return v2 @kind object;
}
procedure `double` `nextDouble`(`xd.d$a` v2 @kind this) @signature `Lxd/d$a;.nextDouble:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3863e8.  call temp:= `access$getDefaultRandom$cp`() @signature `Lxd/d;.access$getDefaultRandom$cp:()Lxd/d;` @kind static;
  #L3863ee.  v0:= temp @kind object;
  #L3863f0.  call temp:= `nextDouble`(v0) @signature `Lxd/d;.nextDouble:()D` @kind virtual;
  #L3863f6.  v0:= temp @kind wide;
  #L3863f8.  return v0 @kind wide;
}
procedure `double` `nextDouble`(`xd.d$a` v1 @kind this, `double` v2 ) @signature `Lxd/d$a;.nextDouble:(D)D` @AccessFlag PUBLIC {
    temp;
    v0;

  #L38640c.  call temp:= `access$getDefaultRandom$cp`() @signature `Lxd/d;.access$getDefaultRandom$cp:()Lxd/d;` @kind static;
  #L386412.  v0:= temp @kind object;
  #L386414.  call temp:= `nextDouble`(v0, v2) @signature `Lxd/d;.nextDouble:(D)D` @kind virtual;
  #L38641a.  v2:= temp @kind wide;
  #L38641c.  return v2 @kind wide;
}
procedure `double` `nextDouble`(`xd.d$a` v1 @kind this, `double` v2 , `double` v4 ) @signature `Lxd/d$a;.nextDouble:(DD)D` @AccessFlag PUBLIC {
    temp;
    v0;

  #L386430.  call temp:= `access$getDefaultRandom$cp`() @signature `Lxd/d;.access$getDefaultRandom$cp:()Lxd/d;` @kind static;
  #L386436.  v0:= temp @kind object;
  #L386438.  call temp:= `nextDouble`(v0, v2, v4) @signature `Lxd/d;.nextDouble:(DD)D` @kind virtual;
  #L38643e.  v2:= temp @kind wide;
  #L386440.  return v2 @kind wide;
}
procedure `float` `nextFloat`(`xd.d$a` v1 @kind this) @signature `Lxd/d$a;.nextFloat:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L386454.  call temp:= `access$getDefaultRandom$cp`() @signature `Lxd/d;.access$getDefaultRandom$cp:()Lxd/d;` @kind static;
  #L38645a.  v0:= temp @kind object;
  #L38645c.  call temp:= `nextFloat`(v0) @signature `Lxd/d;.nextFloat:()F` @kind virtual;
  #L386462.  v0:= temp;
  #L386464.  return v0;
}
procedure `int` `nextInt`(`xd.d$a` v1 @kind this) @signature `Lxd/d$a;.nextInt:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L38649c.  call temp:= `access$getDefaultRandom$cp`() @signature `Lxd/d;.access$getDefaultRandom$cp:()Lxd/d;` @kind static;
  #L3864a2.  v0:= temp @kind object;
  #L3864a4.  call temp:= `nextInt`(v0) @signature `Lxd/d;.nextInt:()I` @kind virtual;
  #L3864aa.  v0:= temp;
  #L3864ac.  return v0;
}
procedure `int` `nextInt`(`xd.d$a` v1 @kind this, `int` v2 ) @signature `Lxd/d$a;.nextInt:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3864c0.  call temp:= `access$getDefaultRandom$cp`() @signature `Lxd/d;.access$getDefaultRandom$cp:()Lxd/d;` @kind static;
  #L3864c6.  v0:= temp @kind object;
  #L3864c8.  call temp:= `nextInt`(v0, v2) @signature `Lxd/d;.nextInt:(I)I` @kind virtual;
  #L3864ce.  v2:= temp;
  #L3864d0.  return v2;
}
procedure `int` `nextInt`(`xd.d$a` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lxd/d$a;.nextInt:(II)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3864e4.  call temp:= `access$getDefaultRandom$cp`() @signature `Lxd/d;.access$getDefaultRandom$cp:()Lxd/d;` @kind static;
  #L3864ea.  v0:= temp @kind object;
  #L3864ec.  call temp:= `nextInt`(v0, v2, v3) @signature `Lxd/d;.nextInt:(II)I` @kind virtual;
  #L3864f2.  v2:= temp;
  #L3864f4.  return v2;
}
procedure `long` `nextLong`(`xd.d$a` v2 @kind this) @signature `Lxd/d$a;.nextLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L386520.  call temp:= `access$getDefaultRandom$cp`() @signature `Lxd/d;.access$getDefaultRandom$cp:()Lxd/d;` @kind static;
  #L386526.  v0:= temp @kind object;
  #L386528.  call temp:= `nextLong`(v0) @signature `Lxd/d;.nextLong:()J` @kind virtual;
  #L38652e.  v0:= temp @kind wide;
  #L386530.  return v0 @kind wide;
}
procedure `long` `nextLong`(`xd.d$a` v1 @kind this, `long` v2 ) @signature `Lxd/d$a;.nextLong:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L386544.  call temp:= `access$getDefaultRandom$cp`() @signature `Lxd/d;.access$getDefaultRandom$cp:()Lxd/d;` @kind static;
  #L38654a.  v0:= temp @kind object;
  #L38654c.  call temp:= `nextLong`(v0, v2) @signature `Lxd/d;.nextLong:(J)J` @kind virtual;
  #L386552.  v2:= temp @kind wide;
  #L386554.  return v2 @kind wide;
}
procedure `long` `nextLong`(`xd.d$a` v1 @kind this, `long` v2 , `long` v4 ) @signature `Lxd/d$a;.nextLong:(JJ)J` @AccessFlag PUBLIC {
    temp;
    v0;

  #L386568.  call temp:= `access$getDefaultRandom$cp`() @signature `Lxd/d;.access$getDefaultRandom$cp:()Lxd/d;` @kind static;
  #L38656e.  v0:= temp @kind object;
  #L386570.  call temp:= `nextLong`(v0, v2, v4) @signature `Lxd/d;.nextLong:(JJ)J` @kind virtual;
  #L386576.  v2:= temp @kind wide;
  #L386578.  return v2 @kind wide;
}
