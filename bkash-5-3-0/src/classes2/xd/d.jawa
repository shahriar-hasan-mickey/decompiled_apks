record `xd.d` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
global `xd.d$a` `@@xd.d.Default` @AccessFlag PUBLIC_STATIC_FINAL;
global `xd.d` `@@xd.d.g` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lxd/d;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L386ca4.  v0:= new `xd.d$a`;
  #L386ca8.  v1:= 0I;
  #L386caa.  call `<init>`(v0, v1) @signature `Lxd/d$a;.<init>:(Lkotlin/jvm/internal/g;)V` @kind direct;
  #L386cb0.  `@@xd.d.Default` @type ^`xd.d$a` := v0 @kind object;
  #L386cb4.  v0:= `@@rd.b.a` @type ^`rd.a` @kind object;
  #L386cb8.  call temp:= `b`(v0) @signature `Lrd/a;.b:()Lxd/d;` @kind virtual;
  #L386cbe.  v0:= temp @kind object;
  #L386cc0.  `@@xd.d.g` @type ^`xd.d` := v0 @kind object;
  #L386cc4.  return @kind void;
}
procedure `void` `<init>`(`xd.d` v0 @kind this) @signature `Lxd/d;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L386cd8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L386cde.  return @kind void;
}
procedure `xd.d` `access$getDefaultRandom$cp`() @signature `Lxd/d;.access$getDefaultRandom$cp:()Lxd/d;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L386cf0.  v0:= `@@xd.d.g` @type ^`xd.d` @kind object;
  #L386cf4.  return v0 @kind object;
}
procedure `byte`[] `nextBytes$default`(`xd.d` v0 @kind object, `byte`[] v1 @kind object, `int` v2 , `int` v3 , `int` v4 , `java.lang.Object` v5 @kind object) @signature `Lxd/d;.nextBytes$default:(Lxd/d;[BIIILjava/lang/Object;)[B` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L386770.  if v5 != 0 then goto L386792;
  #L386774.  v5:= v4 ^& 2;
  #L386778.  if v5 == 0 then goto L38677e;
  #L38677c.  v2:= 0I;
  #L38677e.  v4:= v4 ^& 4;
  #L386782.  if v4 == 0 then goto L386788;
  #L386786.  v3:= length @variable v1;
  #L386788.  call temp:= `nextBytes`(v0, v1, v2, v3) @signature `Lxd/d;.nextBytes:([BII)[B` @kind virtual;
  #L38678e.  v0:= temp @kind object;
  #L386790.  return v0 @kind object;
  #L386792.  v0:= new `java.lang.UnsupportedOperationException`;
  #L386796.  v1:= "Super calls with default arguments not supported in this target, function: nextBytes" @kind object;
  #L38679a.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3867a0.  throw v0;
}
procedure `int` `nextBits`(`int` v0 ) @signature `Lxd/d;.nextBits:(I)I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `nextBoolean`(`xd.d` v2 @kind this) @signature `Lxd/d;.nextBoolean:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L38674c.  v0:= 1I;
  #L38674e.  call temp:= `nextBits`(v2, v0) @signature `Lxd/d;.nextBits:(I)I` @kind virtual;
  #L386754.  v1:= temp;
  #L386756.  if v1 == 0 then goto L38675c;
  #L38675a.  goto L38675e;
  #L38675c.  v0:= 0I;
  #L38675e.  return v0;
}
procedure `byte`[] `nextBytes`(`xd.d` v0 @kind this, `int` v1 ) @signature `Lxd/d;.nextBytes:(I)[B` @AccessFlag PUBLIC {
    temp;

  #L38696c.  v1:= new `byte`[v1];
  #L386970.  call temp:= `nextBytes`(v0, v1) @signature `Lxd/d;.nextBytes:([B)[B` @kind virtual;
  #L386976.  v1:= temp @kind object;
  #L386978.  return v1 @kind object;
}
procedure `byte`[] `nextBytes`(`xd.d` v2 @kind this, `byte`[] v3 @kind object) @signature `Lxd/d;.nextBytes:([B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3867b4.  v0:= "array" @kind object;
  #L3867b8.  call `f`(v3, v0) @signature `Lkotlin/jvm/internal/k;.f:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L3867be.  v0:= length @variable v3;
  #L3867c0.  v1:= 0I;
  #L3867c2.  call temp:= `nextBytes`(v2, v3, v1, v0) @signature `Lxd/d;.nextBytes:([BII)[B` @kind virtual;
  #L3867c8.  v3:= temp @kind object;
  #L3867ca.  return v3 @kind object;
}
procedure `byte`[] `nextBytes`(`xd.d` v6 @kind this, `byte`[] v7 @kind object, `int` v8 , `int` v9 ) @signature `Lxd/d;.nextBytes:([BII)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3867dc.  v0:= "array" @kind object;
  #L3867e0.  call `f`(v7, v0) @signature `Lkotlin/jvm/internal/k;.f:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L3867e6.  v0:= new `kotlin.ranges.h`;
  #L3867ea.  v1:= length @variable v7;
  #L3867ec.  v2:= 0I;
  #L3867ee.  call `<init>`(v0, v2, v1) @signature `Lkotlin/ranges/h;.<init>:(II)V` @kind direct;
  #L3867f4.  call temp:= `l`(v0, v8) @signature `Lkotlin/ranges/h;.l:(I)Z` @kind virtual;
  #L3867fa.  v0:= temp;
  #L3867fc.  v1:= 1I;
  #L3867fe.  if v0 == 0 then goto L38681e;
  #L386802.  v0:= new `kotlin.ranges.h`;
  #L386806.  v3:= length @variable v7;
  #L386808.  call `<init>`(v0, v2, v3) @signature `Lkotlin/ranges/h;.<init>:(II)V` @kind direct;
  #L38680e.  call temp:= `l`(v0, v9) @signature `Lkotlin/ranges/h;.l:(I)Z` @kind virtual;
  #L386814.  v0:= temp;
  #L386816.  if v0 == 0 then goto L38681e;
  #L38681a.  v0:= 1I;
  #L38681c.  goto L386820;
  #L38681e.  v0:= 0I;
  #L386820.  v3:= "fromIndex (" @kind object;
  #L386824.  if v0 == 0 then goto L3868fc;
  #L386828.  if v8 > v9 then goto L38682e;
  #L38682c.  goto L386830;
  #L38682e.  v1:= 0I;
  #L386830.  if v1 == 0 then goto L3868b0;
  #L386834.  v0:= v9 - v8 @kind int;
  #L386838.  v0:= v0 / 4;
  #L38683c.  v1:= 0I;
  #L38683e.  if v1 >= v0 then goto L386884;
  #L386842.  call temp:= `nextInt`(v6) @signature `Lxd/d;.nextInt:()I` @kind virtual;
  #L386848.  v3:= temp;
  #L38684a.  v4:= (`byte`) v3 @kind i2b;
  #L38684c.  v7[v8]:= v4 @kind byte;
  #L386850.  v4:= v8 + 1;
  #L386854.  v5:= v3 ^>> 8;
  #L386858.  v5:= (`byte`) v5 @kind i2b;
  #L38685a.  v7[v4]:= v5 @kind byte;
  #L38685e.  v4:= v8 + 2;
  #L386862.  v5:= v3 ^>> 16;
  #L386866.  v5:= (`byte`) v5 @kind i2b;
  #L386868.  v7[v4]:= v5 @kind byte;
  #L38686c.  v4:= v8 + 3;
  #L386870.  v3:= v3 ^>> 24;
  #L386874.  v3:= (`byte`) v3 @kind i2b;
  #L386876.  v7[v4]:= v3 @kind byte;
  #L38687a.  v8:= v8 + 4;
  #L38687e.  v1:= v1 + 1;
  #L386882.  goto L38683e;
  #L386884.  v9:= v9 - v8 @kind int;
  #L386886.  v0:= v9 * 8;
  #L38688a.  call temp:= `nextBits`(v6, v0) @signature `Lxd/d;.nextBits:(I)I` @kind virtual;
  #L386890.  v0:= temp;
  #L386892.  if v2 >= v9 then goto L3868ae;
  #L386896.  v1:= v8 + v2 @kind int;
  #L38689a.  v3:= v2 * 8;
  #L38689e.  v3:= v0 ^>> v3 @kind int;
  #L3868a2.  v3:= (`byte`) v3 @kind i2b;
  #L3868a4.  v7[v1]:= v3 @kind byte;
  #L3868a8.  v2:= v2 + 1;
  #L3868ac.  goto L386892;
  #L3868ae.  return v7 @kind object;
  #L3868b0.  v7:= new `java.lang.StringBuilder`;
  #L3868b4.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3868ba.  call temp:= `append`(v7, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3868c0.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3868c6.  v8:= ") must be not greater than toIndex (" @kind object;
  #L3868ca.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3868d0.  call temp:= `append`(v7, v9) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3868d6.  v8:= ")." @kind object;
  #L3868da.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3868e0.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3868e6.  v7:= temp @kind object;
  #L3868e8.  v8:= new `java.lang.IllegalArgumentException`;
  #L3868ec.  call temp:= `toString`(v7) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L3868f2.  v7:= temp @kind object;
  #L3868f4.  call `<init>`(v8, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3868fa.  throw v8;
  #L3868fc.  v0:= new `java.lang.StringBuilder`;
  #L386900.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L386906.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L38690c.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L386912.  v8:= ") or toIndex (" @kind object;
  #L386916.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L38691c.  call temp:= `append`(v0, v9) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L386922.  v8:= ") are out of range: 0.." @kind object;
  #L386926.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L38692c.  v7:= length @variable v7;
  #L38692e.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L386934.  v7:= 46I;
  #L386938.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L38693e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L386944.  v7:= temp @kind object;
  #L386946.  v8:= new `java.lang.IllegalArgumentException`;
  #L38694a.  call temp:= `toString`(v7) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L386950.  v7:= temp @kind object;
  #L386952.  call `<init>`(v8, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L386958.  throw v8;
}
procedure `double` `nextDouble`(`xd.d` v2 @kind this) @signature `Lxd/d;.nextDouble:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L38698c.  v0:= 26I;
  #L386990.  call temp:= `nextBits`(v2, v0) @signature `Lxd/d;.nextBits:(I)I` @kind virtual;
  #L386996.  v0:= temp;
  #L386998.  v1:= 27I;
  #L38699c.  call temp:= `nextBits`(v2, v1) @signature `Lxd/d;.nextBits:(I)I` @kind virtual;
  #L3869a2.  v1:= temp;
  #L3869a4.  call temp:= `a`(v0, v1) @signature `Lxd/c;.a:(II)D` @kind static;
  #L3869aa.  v0:= temp @kind wide;
  #L3869ac.  return v0 @kind wide;
}
procedure `double` `nextDouble`(`xd.d` v2 @kind this, `double` v3 ) @signature `Lxd/d;.nextDouble:(D)D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3869c0.  v0:= 0L;
  #L3869c4.  call temp:= `nextDouble`(v2, v0, v3) @signature `Lxd/d;.nextDouble:(DD)D` @kind virtual;
  #L3869ca.  v3:= temp @kind wide;
  #L3869cc.  return v3 @kind wide;
}
procedure `double` `nextDouble`(`xd.d` v6 @kind this, `double` v7 , `double` v9 ) @signature `Lxd/d;.nextDouble:(DD)D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3869e0.  call `b`(v7, v9) @signature `Lxd/e;.b:(DD)V` @kind static;
  #L3869e6.  v0:= v9 - v7 @kind double;
  #L3869ea.  call temp:= `isInfinite`(v0) @signature `Ljava/lang/Double;.isInfinite:(D)Z` @kind static;
  #L3869f0.  v2:= temp;
  #L3869f2.  if v2 == 0 then goto L386a5c;
  #L3869f6.  call temp:= `isInfinite`(v7) @signature `Ljava/lang/Double;.isInfinite:(D)Z` @kind static;
  #L3869fc.  v2:= temp;
  #L3869fe.  v3:= 1I;
  #L386a00.  v4:= 0I;
  #L386a02.  if v2 != 0 then goto L386a16;
  #L386a06.  call temp:= `isNaN`(v7) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L386a0c.  v2:= temp;
  #L386a0e.  if v2 != 0 then goto L386a16;
  #L386a12.  v2:= 1I;
  #L386a14.  goto L386a18;
  #L386a16.  v2:= 0I;
  #L386a18.  if v2 == 0 then goto L386a5c;
  #L386a1c.  call temp:= `isInfinite`(v9) @signature `Ljava/lang/Double;.isInfinite:(D)Z` @kind static;
  #L386a22.  v2:= temp;
  #L386a24.  if v2 != 0 then goto L386a36;
  #L386a28.  call temp:= `isNaN`(v9) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L386a2e.  v2:= temp;
  #L386a30.  if v2 != 0 then goto L386a36;
  #L386a34.  goto L386a38;
  #L386a36.  v3:= 0I;
  #L386a38.  if v3 == 0 then goto L386a5c;
  #L386a3c.  call temp:= `nextDouble`(v6) @signature `Lxd/d;.nextDouble:()D` @kind virtual;
  #L386a42.  v0:= temp @kind wide;
  #L386a44.  v2:= 2I;
  #L386a46.  v2:= (`double`) v2 @kind i2d;
  #L386a48.  v4:= v9 / v2 @kind double;
  #L386a4c.  v2:= v7 / v2 @kind double;
  #L386a50.  v4:= v4 - v2 @kind double;
  #L386a52.  v0:= v0 * v4 @kind double;
  #L386a56.  v7:= v7 + v0 @kind double;
  #L386a58.  v7:= v7 + v0 @kind double;
  #L386a5a.  goto L386a6a;
  #L386a5c.  call temp:= `nextDouble`(v6) @signature `Lxd/d;.nextDouble:()D` @kind virtual;
  #L386a62.  v2:= temp @kind wide;
  #L386a64.  v2:= v2 * v0 @kind double;
  #L386a68.  v7:= v7 + v2 @kind double;
  #L386a6a.  v0:= dcmpl(v7, v9);
  #L386a6e.  if v0 < 0 then goto L386a7e;
  #L386a72.  v7:= -InfinityD;
  #L386a76.  call temp:= `nextAfter`(v9, v7) @signature `Ljava/lang/Math;.nextAfter:(DD)D` @kind static;
  #L386a7c.  v7:= temp @kind wide;
  #L386a7e.  return v7 @kind wide;
}
procedure `float` `nextFloat`(`xd.d` v2 @kind this) @signature `Lxd/d;.nextFloat:()F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L386a90.  v0:= 24I;
  #L386a94.  call temp:= `nextBits`(v2, v0) @signature `Lxd/d;.nextBits:(I)I` @kind virtual;
  #L386a9a.  v0:= temp;
  #L386a9c.  v0:= (`float`) v0 @kind i2f;
  #L386a9e.  v1:= 1.6777216E7F;
  #L386aa2.  v0:= v0 / v1 @kind float;
  #L386aa4.  return v0;
}
procedure `int` `nextInt`(`xd.d` v1 @kind this) @signature `Lxd/d;.nextInt:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L386ab8.  v0:= 32I;
  #L386abc.  call temp:= `nextBits`(v1, v0) @signature `Lxd/d;.nextBits:(I)I` @kind virtual;
  #L386ac2.  v0:= temp;
  #L386ac4.  return v0;
}
procedure `int` `nextInt`(`xd.d` v1 @kind this, `int` v2 ) @signature `Lxd/d;.nextInt:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L386ad8.  v0:= 0I;
  #L386ada.  call temp:= `nextInt`(v1, v0, v2) @signature `Lxd/d;.nextInt:(II)I` @kind virtual;
  #L386ae0.  v2:= temp;
  #L386ae2.  return v2;
}
procedure `int` `nextInt`(`xd.d` v4 @kind this, `int` v5 , `int` v6 ) @signature `Lxd/d;.nextInt:(II)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L386af4.  call `c`(v5, v6) @signature `Lxd/e;.c:(II)V` @kind static;
  #L386afa.  v0:= v6 - v5 @kind int;
  #L386afe.  v1:= 1I;
  #L386b00.  if v0 > 0 then goto L386b28;
  #L386b04.  v2:= -2147483648I;
  #L386b08.  if v0 != v2 then goto L386b0e;
  #L386b0c.  goto L386b28;
  #L386b0e.  call temp:= `nextInt`(v4) @signature `Lxd/d;.nextInt:()I` @kind virtual;
  #L386b14.  v0:= temp;
  #L386b16.  v2:= 0I;
  #L386b18.  if v5 > v0 then goto L386b22;
  #L386b1c.  if v0 >= v6 then goto L386b22;
  #L386b20.  v2:= 1I;
  #L386b22.  if v2 == 0 then goto L386b0e;
  #L386b26.  return v0;
  #L386b28.  v6:= -v0 @kind int;
  #L386b2a.  v6:= v6 ^& v0 @kind int;
  #L386b2c.  if v6 != v0 then goto L386b42;
  #L386b30.  call temp:= `e`(v0) @signature `Lxd/e;.e:(I)I` @kind static;
  #L386b36.  v6:= temp;
  #L386b38.  call temp:= `nextBits`(v4, v6) @signature `Lxd/d;.nextBits:(I)I` @kind virtual;
  #L386b3e.  v6:= temp;
  #L386b40.  goto L386b5e;
  #L386b42.  call temp:= `nextInt`(v4) @signature `Lxd/d;.nextInt:()I` @kind virtual;
  #L386b48.  v6:= temp;
  #L386b4a.  v6:= v6 ^>> v1 @kind int;
  #L386b4c.  v2:= v6 %% v0 @kind int;
  #L386b50.  v6:= v6 - v2 @kind int;
  #L386b52.  v3:= v0 + -1;
  #L386b56.  v6:= v6 + v3 @kind int;
  #L386b58.  if v6 < 0 then goto L386b42;
  #L386b5c.  v6:= v2;
  #L386b5e.  v5:= v5 + v6 @kind int;
  #L386b60.  return v5;
}
procedure `long` `nextLong`(`xd.d` v4 @kind this) @signature `Lxd/d;.nextLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L386b74.  call temp:= `nextInt`(v4) @signature `Lxd/d;.nextInt:()I` @kind virtual;
  #L386b7a.  v0:= temp;
  #L386b7c.  v0:= (`long`) v0 @kind i2l;
  #L386b7e.  v2:= 32I;
  #L386b82.  v0:= v0 ^< v2 @kind long;
  #L386b84.  call temp:= `nextInt`(v4) @signature `Lxd/d;.nextInt:()I` @kind virtual;
  #L386b8a.  v2:= temp;
  #L386b8c.  v2:= (`long`) v2 @kind i2l;
  #L386b8e.  v0:= v0 + v2 @kind long;
  #L386b90.  return v0 @kind wide;
}
procedure `long` `nextLong`(`xd.d` v2 @kind this, `long` v3 ) @signature `Lxd/d;.nextLong:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L386ba4.  v0:= 0L;
  #L386ba8.  call temp:= `nextLong`(v2, v0, v3) @signature `Lxd/d;.nextLong:(JJ)J` @kind virtual;
  #L386bae.  v3:= temp @kind wide;
  #L386bb0.  return v3 @kind wide;
}
procedure `long` `nextLong`(`xd.d` v9 @kind this, `long` v10 , `long` v12 ) @signature `Lxd/d;.nextLong:(JJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L386bc4.  call `d`(v10, v12) @signature `Lxd/e;.d:(JJ)V` @kind static;
  #L386bca.  v0:= v12 - v10 @kind long;
  #L386bce.  v2:= 0L;
  #L386bd2.  v4:= 1I;
  #L386bd4.  v5:= lcmp(v0, v2);
  #L386bd8.  if v5 <= 0 then goto L386c72;
  #L386bdc.  v12:= -v0 @kind long;
  #L386bde.  v12:= v12 ^& v0 @kind long;
  #L386be0.  v5:= lcmp(v12, v0);
  #L386be4.  if v5 != 0 then goto L386c4a;
  #L386be8.  v12:= (`int`) v0 @kind l2i;
  #L386bea.  v13:= 32I;
  #L386bee.  v0:= v0 ^>> v13 @kind long;
  #L386bf0.  v1:= (`int`) v0 @kind l2i;
  #L386bf2.  v2:= 4294967295L;
  #L386bfc.  if v12 == 0 then goto L386c16;
  #L386c00.  call temp:= `e`(v12) @signature `Lxd/e;.e:(I)I` @kind static;
  #L386c06.  v12:= temp;
  #L386c08.  call temp:= `nextBits`(v9, v12) @signature `Lxd/d;.nextBits:(I)I` @kind virtual;
  #L386c0e.  v12:= temp;
  #L386c10.  v12:= (`long`) v12 @kind i2l;
  #L386c12.  v12:= v12 ^& v2 @kind long;
  #L386c14.  goto L386c6e;
  #L386c16.  if v1 != v4 then goto L386c24;
  #L386c1a.  call temp:= `nextInt`(v9) @signature `Lxd/d;.nextInt:()I` @kind virtual;
  #L386c20.  v12:= temp;
  #L386c22.  goto L386c10;
  #L386c24.  call temp:= `e`(v1) @signature `Lxd/e;.e:(I)I` @kind static;
  #L386c2a.  v12:= temp;
  #L386c2c.  call temp:= `nextBits`(v9, v12) @signature `Lxd/d;.nextBits:(I)I` @kind virtual;
  #L386c32.  v12:= temp;
  #L386c34.  v0:= (`long`) v12 @kind i2l;
  #L386c36.  v12:= v0 ^< v13 @kind long;
  #L386c3a.  call temp:= `nextInt`(v9) @signature `Lxd/d;.nextInt:()I` @kind virtual;
  #L386c40.  v0:= temp;
  #L386c42.  v0:= (`long`) v0 @kind i2l;
  #L386c44.  v0:= v0 ^& v2 @kind long;
  #L386c46.  v12:= v12 + v0 @kind long;
  #L386c48.  goto L386c6e;
  #L386c4a.  call temp:= `nextLong`(v9) @signature `Lxd/d;.nextLong:()J` @kind virtual;
  #L386c50.  v12:= temp @kind wide;
  #L386c52.  v12:= v12 ^>> v4 @kind long;
  #L386c54.  v5:= v12 %% v0 @kind long;
  #L386c58.  v12:= v12 - v5 @kind long;
  #L386c5a.  v7:= 1L;
  #L386c5e.  v7:= v0 - v7 @kind long;
  #L386c62.  v12:= v12 + v7 @kind long;
  #L386c64.  v7:= lcmp(v12, v2);
  #L386c68.  if v7 < 0 then goto L386c4a;
  #L386c6c.  v12:= v5 @kind wide;
  #L386c6e.  v10:= v10 + v12 @kind long;
  #L386c70.  return v10 @kind wide;
  #L386c72.  call temp:= `nextLong`(v9) @signature `Lxd/d;.nextLong:()J` @kind virtual;
  #L386c78.  v0:= temp @kind wide;
  #L386c7a.  v2:= 0I;
  #L386c7c.  v3:= lcmp(v10, v0);
  #L386c80.  if v3 > 0 then goto L386c8e;
  #L386c84.  v3:= lcmp(v0, v12);
  #L386c88.  if v3 >= 0 then goto L386c8e;
  #L386c8c.  v2:= 1I;
  #L386c8e.  if v2 == 0 then goto L386c72;
  #L386c92.  return v0 @kind wide;
}
