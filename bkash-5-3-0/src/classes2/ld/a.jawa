record `ld.a` @kind class @AccessFlag PUBLIC_FINAL {
}
global `gd.c` `@@ld.a.a` @AccessFlag STATIC_VOLATILE;
global `gd.d` `@@ld.a.b` @AccessFlag STATIC_VOLATILE;
global `gd.d` `@@ld.a.c` @AccessFlag STATIC_VOLATILE;
global `gd.d` `@@ld.a.d` @AccessFlag STATIC_VOLATILE;
global `gd.d` `@@ld.a.e` @AccessFlag STATIC_VOLATILE;
global `gd.d` `@@ld.a.f` @AccessFlag STATIC_VOLATILE;
global `gd.d` `@@ld.a.g` @AccessFlag STATIC_VOLATILE;
global `gd.d` `@@ld.a.h` @AccessFlag STATIC_VOLATILE;
global `gd.b` `@@ld.a.i` @AccessFlag STATIC_VOLATILE;
procedure `java.lang.Object` `a`(`gd.b` v0 @kind object, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lld/a;.a:(Lgd/b;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag STATIC {
    temp;

  #L31df64.  call temp:= `a`(v0, v1, v2) @signature `Lgd/b;.a:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L31df6a.  v0:= temp @kind object;
  #L31df6c.  return v0 @kind object;
  #L31df6e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L31df70.  call temp:= `d`(v0) @signature `Lio/reactivex/rxjava3/internal/util/a;.d:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L31df76.  v0:= temp @kind object;
  #L31df78.  throw v0;
  catch `java.lang.Throwable` @[L31df64..L31df6c] goto L31df6e;
}
procedure `java.lang.Object` `b`(`gd.d` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lld/a;.b:(Lgd/d;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag STATIC {
    temp;

  #L31df98.  call temp:= `apply`(v0, v1) @signature `Lgd/d;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L31df9e.  v0:= temp @kind object;
  #L31dfa0.  return v0 @kind object;
  #L31dfa2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L31dfa4.  call temp:= `d`(v0) @signature `Lio/reactivex/rxjava3/internal/util/a;.d:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L31dfaa.  v0:= temp @kind object;
  #L31dfac.  throw v0;
  catch `java.lang.Throwable` @[L31df98..L31dfa0] goto L31dfa2;
}
procedure `fd.g` `c`(`gd.d` v0 @kind object, `gd.e` v1 @kind object) @signature `Lld/a;.c:(Lgd/d;Lgd/e;)Lfd/g;` @AccessFlag STATIC {
    temp;

  #L31ddf4.  call temp:= `b`(v0, v1) @signature `Lld/a;.b:(Lgd/d;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L31ddfa.  v0:= temp @kind object;
  #L31ddfc.  v1:= "Scheduler Supplier result can't be null" @kind object;
  #L31de00.  call temp:= `requireNonNull`(v0, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L31de06.  v0:= (`fd.g`) v0 @kind object;
  #L31de0a.  return v0 @kind object;
}
procedure `fd.g` `d`(`gd.e` v1 @kind object) @signature `Lld/a;.d:(Lgd/e;)Lfd/g;` @AccessFlag STATIC {
    temp;
    v0;

  #L31de1c.  call temp:= `get`(v1) @signature `Lgd/e;.get:()Ljava/lang/Object;` @kind interface;
  #L31de22.  v1:= temp @kind object;
  #L31de24.  v0:= "Scheduler Supplier result can't be null" @kind object;
  #L31de28.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L31de2e.  v1:= (`fd.g`) v1 @kind object;
  #L31de32.  return v1 @kind object;
  #L31de34.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L31de36.  call temp:= `d`(v1) @signature `Lio/reactivex/rxjava3/internal/util/a;.d:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L31de3c.  v1:= temp @kind object;
  #L31de3e.  throw v1;
  catch `java.lang.Throwable` @[L31de1c..L31de32] goto L31de34;
}
procedure `fd.g` `e`(`gd.e` v1 @kind object) @signature `Lld/a;.e:(Lgd/e;)Lfd/g;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L31de5c.  v0:= "Scheduler Supplier can't be null" @kind object;
  #L31de60.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L31de66.  v0:= `@@ld.a.c` @type ^`gd.d` @kind object;
  #L31de6a.  if v0 != 0 then goto L31de78;
  #L31de6e.  call temp:= `d`(v1) @signature `Lld/a;.d:(Lgd/e;)Lfd/g;` @kind static;
  #L31de74.  v1:= temp @kind object;
  #L31de76.  return v1 @kind object;
  #L31de78.  call temp:= `c`(v0, v1) @signature `Lld/a;.c:(Lgd/d;Lgd/e;)Lfd/g;` @kind static;
  #L31de7e.  v1:= temp @kind object;
  #L31de80.  return v1 @kind object;
}
procedure `fd.g` `f`(`gd.e` v1 @kind object) @signature `Lld/a;.f:(Lgd/e;)Lfd/g;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L31de94.  v0:= "Scheduler Supplier can't be null" @kind object;
  #L31de98.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L31de9e.  v0:= `@@ld.a.e` @type ^`gd.d` @kind object;
  #L31dea2.  if v0 != 0 then goto L31deb0;
  #L31dea6.  call temp:= `d`(v1) @signature `Lld/a;.d:(Lgd/e;)Lfd/g;` @kind static;
  #L31deac.  v1:= temp @kind object;
  #L31deae.  return v1 @kind object;
  #L31deb0.  call temp:= `c`(v0, v1) @signature `Lld/a;.c:(Lgd/d;Lgd/e;)Lfd/g;` @kind static;
  #L31deb6.  v1:= temp @kind object;
  #L31deb8.  return v1 @kind object;
}
procedure `fd.g` `g`(`gd.e` v1 @kind object) @signature `Lld/a;.g:(Lgd/e;)Lfd/g;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L31decc.  v0:= "Scheduler Supplier can't be null" @kind object;
  #L31ded0.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L31ded6.  v0:= `@@ld.a.f` @type ^`gd.d` @kind object;
  #L31deda.  if v0 != 0 then goto L31dee8;
  #L31dede.  call temp:= `d`(v1) @signature `Lld/a;.d:(Lgd/e;)Lfd/g;` @kind static;
  #L31dee4.  v1:= temp @kind object;
  #L31dee6.  return v1 @kind object;
  #L31dee8.  call temp:= `c`(v0, v1) @signature `Lld/a;.c:(Lgd/d;Lgd/e;)Lfd/g;` @kind static;
  #L31deee.  v1:= temp @kind object;
  #L31def0.  return v1 @kind object;
}
procedure `fd.g` `h`(`gd.e` v1 @kind object) @signature `Lld/a;.h:(Lgd/e;)Lfd/g;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L31df04.  v0:= "Scheduler Supplier can't be null" @kind object;
  #L31df08.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L31df0e.  v0:= `@@ld.a.d` @type ^`gd.d` @kind object;
  #L31df12.  if v0 != 0 then goto L31df20;
  #L31df16.  call temp:= `d`(v1) @signature `Lld/a;.d:(Lgd/e;)Lfd/g;` @kind static;
  #L31df1c.  v1:= temp @kind object;
  #L31df1e.  return v1 @kind object;
  #L31df20.  call temp:= `c`(v0, v1) @signature `Lld/a;.c:(Lgd/d;Lgd/e;)Lfd/g;` @kind static;
  #L31df26.  v1:= temp @kind object;
  #L31df28.  return v1 @kind object;
}
procedure `boolean` `i`(`java.lang.Throwable` v2 @kind object) @signature `Lld/a;.i:(Ljava/lang/Throwable;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L31dd50.  v0:= instanceof @variable v2 @type ^`io.reactivex.rxjava3.exceptions.d` @kind boolean;
  #L31dd54.  v1:= 1I;
  #L31dd56.  if v0 == 0 then goto L31dd5c;
  #L31dd5a.  return v1;
  #L31dd5c.  v0:= instanceof @variable v2 @type ^`io.reactivex.rxjava3.exceptions.c` @kind boolean;
  #L31dd60.  if v0 == 0 then goto L31dd66;
  #L31dd64.  return v1;
  #L31dd66.  v0:= instanceof @variable v2 @type ^`java.lang.IllegalStateException` @kind boolean;
  #L31dd6a.  if v0 == 0 then goto L31dd70;
  #L31dd6e.  return v1;
  #L31dd70.  v0:= instanceof @variable v2 @type ^`java.lang.NullPointerException` @kind boolean;
  #L31dd74.  if v0 == 0 then goto L31dd7a;
  #L31dd78.  return v1;
  #L31dd7a.  v0:= instanceof @variable v2 @type ^`java.lang.IllegalArgumentException` @kind boolean;
  #L31dd7e.  if v0 == 0 then goto L31dd84;
  #L31dd82.  return v1;
  #L31dd84.  v2:= instanceof @variable v2 @type ^`io.reactivex.rxjava3.exceptions.a` @kind boolean;
  #L31dd88.  if v2 == 0 then goto L31dd8e;
  #L31dd8c.  return v1;
  #L31dd8e.  v2:= 0I;
  #L31dd90.  return v2;
}
procedure `fd.d` `j`(`fd.d` v1 @kind object) @signature `Lld/a;.j:(Lfd/d;)Lfd/d;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L31dda4.  v0:= `@@ld.a.h` @type ^`gd.d` @kind object;
  #L31dda8.  if v0 == 0 then goto L31ddb8;
  #L31ddac.  call temp:= `b`(v0, v1) @signature `Lld/a;.b:(Lgd/d;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L31ddb2.  v1:= temp @kind object;
  #L31ddb4.  v1:= (`fd.d`) v1 @kind object;
  #L31ddb8.  return v1 @kind object;
}
procedure `void` `k`(`java.lang.Throwable` v2 @kind object) @signature `Lld/a;.k:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L31e000.  v0:= `@@ld.a.a` @type ^`gd.c` @kind object;
  #L31e004.  if v2 != 0 then goto L31e016;
  #L31e008.  v2:= "onError called with a null Throwable." @kind object;
  #L31e00c.  call temp:= `a`(v2) @signature `Lio/reactivex/rxjava3/internal/util/a;.a:(Ljava/lang/String;)Ljava/lang/NullPointerException;` @kind static;
  #L31e012.  v2:= temp @kind object;
  #L31e014.  goto L31e02e;
  #L31e016.  call temp:= `i`(v2) @signature `Lld/a;.i:(Ljava/lang/Throwable;)Z` @kind static;
  #L31e01c.  v1:= temp;
  #L31e01e.  if v1 != 0 then goto L31e02e;
  #L31e022.  v1:= new `io.reactivex.rxjava3.exceptions.f`;
  #L31e026.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/exceptions/f;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L31e02c.  v2:= v1 @kind object;
  #L31e02e.  if v0 == 0 then goto L31e048;
  #L31e032.  call `accept`(v0, v2) @signature `Lgd/c;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L31e038.  return @kind void;
  #L31e03a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L31e03c.  call `printStackTrace`(v0) @signature `Ljava/lang/Throwable;.printStackTrace:()V` @kind virtual;
  #L31e042.  call `o`(v0) @signature `Lld/a;.o:(Ljava/lang/Throwable;)V` @kind static;
  #L31e048.  call `printStackTrace`(v2) @signature `Ljava/lang/Throwable;.printStackTrace:()V` @kind virtual;
  #L31e04e.  call `o`(v2) @signature `Lld/a;.o:(Ljava/lang/Throwable;)V` @kind static;
  #L31e054.  return @kind void;
  catch `java.lang.Throwable` @[L31e032..L31e038] goto L31e03a;
}
procedure `fd.g` `l`(`fd.g` v1 @kind object) @signature `Lld/a;.l:(Lfd/g;)Lfd/g;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L31df3c.  v0:= `@@ld.a.g` @type ^`gd.d` @kind object;
  #L31df40.  if v0 != 0 then goto L31df46;
  #L31df44.  return v1 @kind object;
  #L31df46.  call temp:= `b`(v0, v1) @signature `Lld/a;.b:(Lgd/d;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L31df4c.  v1:= temp @kind object;
  #L31df4e.  v1:= (`fd.g`) v1 @kind object;
  #L31df52.  return v1 @kind object;
}
procedure `java.lang.Runnable` `m`(`java.lang.Runnable` v1 @kind object) @signature `Lld/a;.m:(Ljava/lang/Runnable;)Ljava/lang/Runnable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L31dfcc.  v0:= "run is null" @kind object;
  #L31dfd0.  call temp:= `requireNonNull`(v1, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L31dfd6.  v0:= `@@ld.a.b` @type ^`gd.d` @kind object;
  #L31dfda.  if v0 != 0 then goto L31dfe0;
  #L31dfde.  return v1 @kind object;
  #L31dfe0.  call temp:= `b`(v0, v1) @signature `Lld/a;.b:(Lgd/d;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L31dfe6.  v1:= temp @kind object;
  #L31dfe8.  v1:= (`java.lang.Runnable`) v1 @kind object;
  #L31dfec.  return v1 @kind object;
}
procedure `fd.f` `n`(`fd.d` v1 @kind object, `fd.f` v2 @kind object) @signature `Lld/a;.n:(Lfd/d;Lfd/f;)Lfd/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L31ddcc.  v0:= `@@ld.a.i` @type ^`gd.b` @kind object;
  #L31ddd0.  if v0 == 0 then goto L31dde2;
  #L31ddd4.  call temp:= `a`(v0, v1, v2) @signature `Lld/a;.a:(Lgd/b;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L31ddda.  v1:= temp @kind object;
  #L31dddc.  v1:= (`fd.f`) v1 @kind object;
  #L31dde0.  return v1 @kind object;
  #L31dde2.  return v2 @kind object;
}
procedure `void` `o`(`java.lang.Throwable` v2 @kind object) @signature `Lld/a;.o:(Ljava/lang/Throwable;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L31e074.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L31e07a.  v0:= temp @kind object;
  #L31e07c.  call temp:= `getUncaughtExceptionHandler`(v0) @signature `Ljava/lang/Thread;.getUncaughtExceptionHandler:()Ljava/lang/Thread$UncaughtExceptionHandler;` @kind virtual;
  #L31e082.  v1:= temp @kind object;
  #L31e084.  call `uncaughtException`(v1, v0, v2) @signature `Ljava/lang/Thread$UncaughtExceptionHandler;.uncaughtException:(Ljava/lang/Thread;Ljava/lang/Throwable;)V` @kind interface;
  #L31e08a.  return @kind void;
}
