record `sb.f` @kind class @AccessFlag PUBLIC_FINAL_SYNTHETIC extends `java.lang.Runnable` @kind interface {
}
global `sb.f` `@@sb.f.g` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lsb/f;.<clinit>:()V` @AccessFlag STATIC_SYNTHETIC_CONSTRUCTOR {
    temp;
    v0;

  #L376f40.  v0:= new `sb.f`;
  #L376f44.  call `<init>`(v0) @signature `Lsb/f;.<init>:()V` @kind direct;
  #L376f4a.  `@@sb.f.g` @type ^`sb.f` := v0 @kind object;
  #L376f4e.  return @kind void;
}
procedure `void` `<init>`(`sb.f` v0 @kind this) @signature `Lsb/f;.<init>:()V` @AccessFlag PRIVATE_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L376f60.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L376f66.  return @kind void;
}
procedure `void` `run`(`sb.f` v0 @kind this) @signature `Lsb/f;.run:()V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L376f78.  call `c`() @signature `Lsb/g;.c:()V` @kind static;
  #L376f7e.  return @kind void;
}
