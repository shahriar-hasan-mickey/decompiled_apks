record `hd.a` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class, `io.reactivex.rxjava3.disposables.c` @kind interface {
}
global `hd.a` `@@hd.a.DISPOSED` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `hd.a`[] `@@hd.a.g` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lhd/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L2b4ebc.  v0:= new `hd.a`;
  #L2b4ec0.  v1:= "DISPOSED" @kind object;
  #L2b4ec4.  v2:= 0I;
  #L2b4ec6.  call `<init>`(v0, v1, v2) @signature `Lhd/a;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L2b4ecc.  `@@hd.a.DISPOSED` @type ^`hd.a` := v0 @kind object;
  #L2b4ed0.  v1:= 1I;
  #L2b4ed2.  v1:= new `hd.a`[v1];
  #L2b4ed6.  v1[v2]:= v0 @kind object;
  #L2b4eda.  `@@hd.a.g` @type ^`hd.a`[] := v1 @kind object;
  #L2b4ede.  return @kind void;
}
procedure `void` `<init>`(`hd.a` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 ) @signature `Lhd/a;.<init>:(Ljava/lang/String;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L2b4ef0.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L2b4ef6.  return @kind void;
}
procedure `boolean` `dispose`(`java.util.concurrent.atomic.AtomicReference` v2 @kind object) @signature `Lhd/a;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2b4c9c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2b4ca2.  v0:= temp @kind object;
  #L2b4ca4.  v0:= (`io.reactivex.rxjava3.disposables.c`) v0 @kind object;
  #L2b4ca8.  v1:= `@@hd.a.DISPOSED` @type ^`hd.a` @kind object;
  #L2b4cac.  if v0 == v1 then goto L2b4cce;
  #L2b4cb0.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2b4cb6.  v2:= temp @kind object;
  #L2b4cb8.  v2:= (`io.reactivex.rxjava3.disposables.c`) v2 @kind object;
  #L2b4cbc.  if v2 == v1 then goto L2b4cce;
  #L2b4cc0.  if v2 == 0 then goto L2b4cca;
  #L2b4cc4.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/c;.dispose:()V` @kind interface;
  #L2b4cca.  v2:= 1I;
  #L2b4ccc.  return v2;
  #L2b4cce.  v2:= 0I;
  #L2b4cd0.  return v2;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.disposables.c` v1 @kind object) @signature `Lhd/a;.isDisposed:(Lio/reactivex/rxjava3/disposables/c;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2b4cf8.  v0:= `@@hd.a.DISPOSED` @type ^`hd.a` @kind object;
  #L2b4cfc.  if v1 != v0 then goto L2b4d04;
  #L2b4d00.  v1:= 1I;
  #L2b4d02.  goto L2b4d06;
  #L2b4d04.  v1:= 0I;
  #L2b4d06.  return v1;
}
procedure `boolean` `replace`(`java.util.concurrent.atomic.AtomicReference` v2 @kind object, `io.reactivex.rxjava3.disposables.c` v3 @kind object) @signature `Lhd/a;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/c;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2b4d18.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2b4d1e.  v0:= temp @kind object;
  #L2b4d20.  v0:= (`io.reactivex.rxjava3.disposables.c`) v0 @kind object;
  #L2b4d24.  v1:= `@@hd.a.DISPOSED` @type ^`hd.a` @kind object;
  #L2b4d28.  if v0 != v1 then goto L2b4d3a;
  #L2b4d2c.  if v3 == 0 then goto L2b4d36;
  #L2b4d30.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/c;.dispose:()V` @kind interface;
  #L2b4d36.  v2:= 0I;
  #L2b4d38.  return v2;
  #L2b4d3a.  call temp:= `compareAndSet`(v2, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2b4d40.  v0:= temp;
  #L2b4d42.  if v0 == 0 then goto L2b4d18;
  #L2b4d46.  v2:= 1I;
  #L2b4d48.  return v2;
}
procedure `void` `reportDisposableSet`() @signature `Lhd/a;.reportDisposableSet:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2b4f1c.  v0:= new `io.reactivex.rxjava3.exceptions.e`;
  #L2b4f20.  v1:= "Disposable already set!" @kind object;
  #L2b4f24.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/exceptions/e;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2b4f2a.  call `k`(v0) @signature `Lld/a;.k:(Ljava/lang/Throwable;)V` @kind static;
  #L2b4f30.  return @kind void;
}
procedure `boolean` `set`(`java.util.concurrent.atomic.AtomicReference` v2 @kind object, `io.reactivex.rxjava3.disposables.c` v3 @kind object) @signature `Lhd/a;.set:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/c;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2b4d5c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2b4d62.  v0:= temp @kind object;
  #L2b4d64.  v0:= (`io.reactivex.rxjava3.disposables.c`) v0 @kind object;
  #L2b4d68.  v1:= `@@hd.a.DISPOSED` @type ^`hd.a` @kind object;
  #L2b4d6c.  if v0 != v1 then goto L2b4d7e;
  #L2b4d70.  if v3 == 0 then goto L2b4d7a;
  #L2b4d74.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/c;.dispose:()V` @kind interface;
  #L2b4d7a.  v2:= 0I;
  #L2b4d7c.  return v2;
  #L2b4d7e.  call temp:= `compareAndSet`(v2, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2b4d84.  v1:= temp;
  #L2b4d86.  if v1 == 0 then goto L2b4d5c;
  #L2b4d8a.  if v0 == 0 then goto L2b4d94;
  #L2b4d8e.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/c;.dispose:()V` @kind interface;
  #L2b4d94.  v2:= 1I;
  #L2b4d96.  return v2;
}
procedure `boolean` `setOnce`(`java.util.concurrent.atomic.AtomicReference` v1 @kind object, `io.reactivex.rxjava3.disposables.c` v2 @kind object) @signature `Lhd/a;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/c;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2b4da8.  v0:= "d is null" @kind object;
  #L2b4dac.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2b4db2.  v0:= 0I;
  #L2b4db4.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2b4dba.  v0:= temp;
  #L2b4dbc.  if v0 != 0 then goto L2b4de0;
  #L2b4dc0.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/c;.dispose:()V` @kind interface;
  #L2b4dc6.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2b4dcc.  v1:= temp @kind object;
  #L2b4dce.  v2:= `@@hd.a.DISPOSED` @type ^`hd.a` @kind object;
  #L2b4dd2.  if v1 == v2 then goto L2b4ddc;
  #L2b4dd6.  call `reportDisposableSet`() @signature `Lhd/a;.reportDisposableSet:()V` @kind static;
  #L2b4ddc.  v1:= 0I;
  #L2b4dde.  return v1;
  #L2b4de0.  v1:= 1I;
  #L2b4de2.  return v1;
}
procedure `boolean` `trySet`(`java.util.concurrent.atomic.AtomicReference` v1 @kind object, `io.reactivex.rxjava3.disposables.c` v2 @kind object) @signature `Lhd/a;.trySet:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/c;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2b4df4.  v0:= 0I;
  #L2b4df6.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2b4dfc.  v0:= temp;
  #L2b4dfe.  if v0 != 0 then goto L2b4e1c;
  #L2b4e02.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2b4e08.  v1:= temp @kind object;
  #L2b4e0a.  v0:= `@@hd.a.DISPOSED` @type ^`hd.a` @kind object;
  #L2b4e0e.  if v1 != v0 then goto L2b4e18;
  #L2b4e12.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/c;.dispose:()V` @kind interface;
  #L2b4e18.  v1:= 0I;
  #L2b4e1a.  return v1;
  #L2b4e1c.  v1:= 1I;
  #L2b4e1e.  return v1;
}
procedure `boolean` `validate`(`io.reactivex.rxjava3.disposables.c` v1 @kind object, `io.reactivex.rxjava3.disposables.c` v2 @kind object) @signature `Lhd/a;.validate:(Lio/reactivex/rxjava3/disposables/c;Lio/reactivex/rxjava3/disposables/c;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2b4e30.  v0:= 0I;
  #L2b4e32.  if v2 != 0 then goto L2b4e4c;
  #L2b4e36.  v1:= new `java.lang.NullPointerException`;
  #L2b4e3a.  v2:= "next is null" @kind object;
  #L2b4e3e.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2b4e44.  call `k`(v1) @signature `Lld/a;.k:(Ljava/lang/Throwable;)V` @kind static;
  #L2b4e4a.  return v0;
  #L2b4e4c.  if v1 == 0 then goto L2b4e5e;
  #L2b4e50.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/c;.dispose:()V` @kind interface;
  #L2b4e56.  call `reportDisposableSet`() @signature `Lhd/a;.reportDisposableSet:()V` @kind static;
  #L2b4e5c.  return v0;
  #L2b4e5e.  v1:= 1I;
  #L2b4e60.  return v1;
}
procedure `hd.a` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lhd/a;.valueOf:(Ljava/lang/String;)Lhd/a;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2b4e74.  v0:= constclass @type ^`hd.a` @kind object;
  #L2b4e78.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L2b4e7e.  v1:= temp @kind object;
  #L2b4e80.  v1:= (`hd.a`) v1 @kind object;
  #L2b4e84.  return v1 @kind object;
}
procedure `hd.a`[] `values`() @signature `Lhd/a;.values:()[Lhd/a;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2b4e98.  v0:= `@@hd.a.g` @type ^`hd.a`[] @kind object;
  #L2b4e9c.  call temp:= `clone`(v0) @signature `[Lhd/a;.clone:()Ljava/lang/Object;` @kind virtual;
  #L2b4ea2.  v0:= temp @kind object;
  #L2b4ea4.  v0:= (`hd.a`[]) v0 @kind object;
  #L2b4ea8.  return v0 @kind object;
}
procedure `void` `dispose`(`hd.a` v0 @kind this) @signature `Lhd/a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L2b4f08.  return @kind void;
}
procedure `boolean` `isDisposed`(`hd.a` v1 @kind this) @signature `Lhd/a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b4ce4.  v0:= 1I;
  #L2b4ce6.  return v0;
}
