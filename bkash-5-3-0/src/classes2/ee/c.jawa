record `ee.c` @kind class @AccessFlag PUBLIC_FINAL_SYNTHETIC extends `java.util.Comparator` @kind interface {
}
global `ee.c` `@@ee.c.g` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lee/c;.<clinit>:()V` @AccessFlag STATIC_SYNTHETIC_CONSTRUCTOR {
    temp;
    v0;

  #L2ad4e4.  v0:= new `ee.c`;
  #L2ad4e8.  call `<init>`(v0) @signature `Lee/c;.<init>:()V` @kind direct;
  #L2ad4ee.  `@@ee.c.g` @type ^`ee.c` := v0 @kind object;
  #L2ad4f2.  return @kind void;
}
procedure `void` `<init>`(`ee.c` v0 @kind this) @signature `Lee/c;.<init>:()V` @AccessFlag PRIVATE_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L2ad504.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2ad50a.  return @kind void;
}
procedure `int` `compare`(`ee.c` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lee/c;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2ad4c0.  v1:= (`java.lang.String`) v1 @kind object;
  #L2ad4c4.  v2:= (`java.lang.String`) v2 @kind object;
  #L2ad4c8.  call temp:= `compareTo`(v1, v2) @signature `Ljava/lang/String;.compareTo:(Ljava/lang/String;)I` @kind virtual;
  #L2ad4ce.  v1:= temp;
  #L2ad4d0.  return v1;
}
