record `com.zoloz.dfp.Signer` @kind class @AccessFlag  {
}
global `java.lang.String` `@@com.zoloz.dfp.Signer.a` @AccessFlag PUBLIC_STATIC;
global `java.lang.String` `@@com.zoloz.dfp.Signer.b` @AccessFlag PUBLIC_STATIC;
procedure `void` `<clinit>`() @signature `Lcom/zoloz/dfp/Signer;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2a4c04.  v0:= "toyger" @kind object;
  #L2a4c08.  call `loadLibrary`(v0) @signature `Ljava/lang/System;.loadLibrary:(Ljava/lang/String;)V` @kind static;
  #L2a4c0e.  return @kind void;
}
procedure `byte`[] `a`(`byte`[] v2 @kind object) @signature `Lcom/zoloz/dfp/Signer;.a:([B)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2a4bb8.  call temp:= `checkSignature`(v2) @signature `Lcom/zoloz/dfp/Signer;.checkSignature:([B)Ljava/util/Map;` @kind static;
  #L2a4bbe.  v2:= temp @kind object;
  #L2a4bc0.  v0:= `@@com.zoloz.dfp.Signer.b` @type ^`java.lang.String` @kind object;
  #L2a4bc4.  call temp:= `get`(v2, v0) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2a4bca.  v0:= temp @kind object;
  #L2a4bcc.  v0:= (`byte`[]) v0 @kind object;
  #L2a4bd0.  v1:= `@@com.zoloz.dfp.Signer.a` @type ^`java.lang.String` @kind object;
  #L2a4bd4.  call temp:= `get`(v2, v1) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2a4bda.  v2:= temp @kind object;
  #L2a4bdc.  v2:= (`java.lang.Boolean`) v2 @kind object;
  #L2a4be0.  call temp:= `booleanValue`(v2) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L2a4be6.  v2:= temp;
  #L2a4be8.  if v2 != 0 then goto L2a4bee;
  #L2a4bec.  return v0 @kind object;
  #L2a4bee.  v2:= 0I;
  #L2a4bf0.  return v2 @kind object;
}
procedure `java.util.Map` `checkSignature`(`byte`[] v0 @kind object) @signature `Lcom/zoloz/dfp/Signer;.checkSignature:([B)Ljava/util/Map;` @AccessFlag PUBLIC_STATIC_NATIVE {

  # return;
}
procedure `byte`[] `sign`(`byte`[] v0 @kind object) @signature `Lcom/zoloz/dfp/Signer;.sign:([B)[B` @AccessFlag PUBLIC_STATIC_NATIVE {

  # return;
}
