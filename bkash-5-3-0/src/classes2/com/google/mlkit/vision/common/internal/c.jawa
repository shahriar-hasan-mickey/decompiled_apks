record `com.google.mlkit.vision.common.internal.c` @kind class @AccessFlag PUBLIC_FINAL_SYNTHETIC extends `java.util.concurrent.Callable` @kind interface {
  `com.google.mlkit.vision.common.internal.MobileVisionBase` `com.google.mlkit.vision.common.internal.c.g` @AccessFlag PUBLIC_FINAL_SYNTHETIC;
  `com.google.mlkit.vision.common.InputImage` `com.google.mlkit.vision.common.internal.c.h` @AccessFlag PUBLIC_FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.google.mlkit.vision.common.internal.c` v0 @kind this, `com.google.mlkit.vision.common.internal.MobileVisionBase` v1 @kind object, `com.google.mlkit.vision.common.InputImage` v2 @kind object) @signature `Lcom/google/mlkit/vision/common/internal/c;.<init>:(Lcom/google/mlkit/vision/common/internal/MobileVisionBase;Lcom/google/mlkit/vision/common/InputImage;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L23a9a0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L23a9a6.  v0.`com.google.mlkit.vision.common.internal.c.g` @type ^`com.google.mlkit.vision.common.internal.MobileVisionBase` := v1 @kind object;
  #L23a9aa.  v0.`com.google.mlkit.vision.common.internal.c.h` @type ^`com.google.mlkit.vision.common.InputImage` := v2 @kind object;
  #L23a9ae.  return @kind void;
}
procedure `java.lang.Object` `call`(`com.google.mlkit.vision.common.internal.c` v2 @kind this) @signature `Lcom/google/mlkit/vision/common/internal/c;.call:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L23a97c.  v0:= v2.`com.google.mlkit.vision.common.internal.c.g` @type ^`com.google.mlkit.vision.common.internal.MobileVisionBase` @kind object;
  #L23a980.  v1:= v2.`com.google.mlkit.vision.common.internal.c.h` @type ^`com.google.mlkit.vision.common.InputImage` @kind object;
  #L23a984.  call temp:= `w`(v0, v1) @signature `Lcom/google/mlkit/vision/common/internal/MobileVisionBase;.w:(Lcom/google/mlkit/vision/common/InputImage;)Ljava/lang/Object;` @kind virtual;
  #L23a98a.  v0:= temp @kind object;
  #L23a98c.  return v0 @kind object;
}
