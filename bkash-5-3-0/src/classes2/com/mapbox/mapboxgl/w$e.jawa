record `com.mapbox.mapboxgl.w$e` @kind class @AccessFlag  extends `com.mapbox.mapboxsdk.offline.OfflineManager$ListOfflineRegionsCallback` @kind interface {
  `long` `com.mapbox.mapboxgl.w$e.a` @AccessFlag FINAL_SYNTHETIC;
  `io.flutter.plugin.common.l$d` `com.mapbox.mapboxgl.w$e.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.mapbox.mapboxgl.w$e` v0 @kind this, `long` v1 , `io.flutter.plugin.common.l$d` v3 @kind object) @signature `Lcom/mapbox/mapboxgl/w$e;.<init>:(JLio/flutter/plugin/common/l$d;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2540d4.  v0.`com.mapbox.mapboxgl.w$e.a` @type ^`long` := v1 @kind wide;
  #L2540d8.  v0.`com.mapbox.mapboxgl.w$e.b` @type ^`io.flutter.plugin.common.l$d` := v3 @kind object;
  #L2540dc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2540e2.  return @kind void;
}
procedure `void` `onError`(`com.mapbox.mapboxgl.w$e` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lcom/mapbox/mapboxgl/w$e;.onError:(Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2540f4.  v0:= v3.`com.mapbox.mapboxgl.w$e.b` @type ^`io.flutter.plugin.common.l$d` @kind object;
  #L2540f8.  if v0 != 0 then goto L2540fe;
  #L2540fc.  return @kind void;
  #L2540fe.  v1:= 0I;
  #L254100.  v2:= "RegionListError" @kind object;
  #L254104.  call `error`(v0, v2, v4, v1) @signature `Lio/flutter/plugin/common/l$d;.error:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V` @kind interface;
  #L25410a.  return @kind void;
}
procedure `void` `onList`(`com.mapbox.mapboxgl.w$e` v8 @kind this, `com.mapbox.mapboxsdk.offline.OfflineRegion`[] v9 @kind object) @signature `Lcom/mapbox/mapboxgl/w$e;.onList:([Lcom/mapbox/mapboxsdk/offline/OfflineRegion;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L25411c.  v0:= length @variable v9;
  #L25411e.  v1:= 0I;
  #L254120.  if v1 >= v0 then goto L254154;
  #L254124.  v2:= v9[v1] @kind object;
  #L254128.  call temp:= `i`(v2) @signature `Lcom/mapbox/mapboxsdk/offline/OfflineRegion;.i:()J` @kind virtual;
  #L25412e.  v3:= temp @kind wide;
  #L254130.  v5:= v8.`com.mapbox.mapboxgl.w$e.a` @type ^`long` @kind wide;
  #L254134.  v7:= lcmp(v3, v5);
  #L254138.  if v7 == 0 then goto L254142;
  #L25413c.  v1:= v1 + 1;
  #L254140.  goto L254120;
  #L254142.  v9:= new `com.mapbox.mapboxgl.w$e$a`;
  #L254146.  call `<init>`(v9, v8) @signature `Lcom/mapbox/mapboxgl/w$e$a;.<init>:(Lcom/mapbox/mapboxgl/w$e;)V` @kind direct;
  #L25414c.  call `f`(v2, v9) @signature `Lcom/mapbox/mapboxsdk/offline/OfflineRegion;.f:(Lcom/mapbox/mapboxsdk/offline/OfflineRegion$OfflineRegionDeleteCallback;)V` @kind virtual;
  #L254152.  return @kind void;
  #L254154.  v9:= v8.`com.mapbox.mapboxgl.w$e.b` @type ^`io.flutter.plugin.common.l$d` @kind object;
  #L254158.  if v9 != 0 then goto L25415e;
  #L25415c.  return @kind void;
  #L25415e.  v0:= 0I;
  #L254160.  v1:= "DeleteRegionError" @kind object;
  #L254164.  v2:= "There is no region with given id to delete." @kind object;
  #L254168.  call `error`(v9, v1, v2, v0) @signature `Lio/flutter/plugin/common/l$d;.error:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V` @kind interface;
  #L25416e.  return @kind void;
}
