record `com.mapbox.android.telemetry.m` @kind class @AccessFlag  {
  `java.util.Queue` `com.mapbox.android.telemetry.m.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.mapbox.android.telemetry.m` v1 @kind this) @signature `Lcom/mapbox/android/telemetry/m;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2427c4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2427ca.  v0:= new `java.util.concurrent.ConcurrentLinkedQueue`;
  #L2427ce.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.<init>:()V` @kind direct;
  #L2427d4.  v1.`com.mapbox.android.telemetry.m.a` @type ^`java.util.Queue` := v0 @kind object;
  #L2427d8.  return @kind void;
}
procedure `boolean` `a`(`com.mapbox.android.telemetry.m` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/mapbox/android/telemetry/m;.a:(Ljava/lang/Object;)Z` @AccessFlag  {
    temp;
    v0;

  #L242710.  v0:= v1.`com.mapbox.android.telemetry.m.a` @type ^`java.util.Queue` @kind object;
  #L242714.  call temp:= `add`(v0, v2) @signature `Ljava/util/Queue;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L24271a.  v2:= temp;
  #L24271c.  return v2;
  #L24271e.  v2:= Exception @type ^`java.lang.Exception` @kind object;
  #L242720.  call temp:= `toString`(v2) @signature `Ljava/lang/Exception;.toString:()Ljava/lang/String;` @kind virtual;
  #L242726.  v2:= 0I;
  #L242728.  return v2;
  catch `java.lang.Exception` @[L242710..L24271c] goto L24271e;
}
procedure `java.util.List` `b`(`com.mapbox.android.telemetry.m` v2 @kind this) @signature `Lcom/mapbox/android/telemetry/m;.b:()Ljava/util/List;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L24276c.  v0:= new `java.util.ArrayList`;
  #L242770.  v1:= v2.`com.mapbox.android.telemetry.m.a` @type ^`java.util.Queue` @kind object;
  #L242774.  call temp:= `size`(v1) @signature `Ljava/util/Queue;.size:()I` @kind interface;
  #L24277a.  v1:= temp;
  #L24277c.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L242782.  v1:= v2.`com.mapbox.android.telemetry.m.a` @type ^`java.util.Queue` @kind object;
  #L242786.  call temp:= `addAll`(v0, v1) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L24278c.  v1:= v2.`com.mapbox.android.telemetry.m.a` @type ^`java.util.Queue` @kind object;
  #L242790.  call `clear`(v1) @signature `Ljava/util/Queue;.clear:()V` @kind interface;
  #L242796.  goto L2427a0;
  #L242798.  v1:= Exception @type ^`java.lang.Exception` @kind object;
  #L24279a.  call temp:= `toString`(v1) @signature `Ljava/lang/Exception;.toString:()Ljava/lang/String;` @kind virtual;
  #L2427a0.  return v0 @kind object;
  catch `java.lang.Exception` @[L242782..L242796] goto L242798;
}
procedure `int` `c`(`com.mapbox.android.telemetry.m` v1 @kind this) @signature `Lcom/mapbox/android/telemetry/m;.c:()I` @AccessFlag  {
    temp;
    v0;

  #L24274c.  v0:= v1.`com.mapbox.android.telemetry.m.a` @type ^`java.util.Queue` @kind object;
  #L242750.  call temp:= `size`(v0) @signature `Ljava/util/Queue;.size:()I` @kind interface;
  #L242756.  v0:= temp;
  #L242758.  return v0;
}
