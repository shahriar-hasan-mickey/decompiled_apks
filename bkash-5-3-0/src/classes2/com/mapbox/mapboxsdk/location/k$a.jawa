record `com.mapbox.mapboxsdk.location.k$a` @kind class @AccessFlag  extends `com.mapbox.mapboxsdk.location.z` @kind interface {
  `com.mapbox.mapboxsdk.location.k` `com.mapbox.mapboxsdk.location.k$a.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.mapbox.mapboxsdk.location.k$a` v0 @kind this, `com.mapbox.mapboxsdk.location.k` v1 @kind object) @signature `Lcom/mapbox/mapboxsdk/location/k$a;.<init>:(Lcom/mapbox/mapboxsdk/location/k;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L25e2f8.  v0.`com.mapbox.mapboxsdk.location.k$a.a` @type ^`com.mapbox.mapboxsdk.location.k` := v1 @kind object;
  #L25e2fc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L25e302.  return @kind void;
}
procedure `void` `a`(`com.mapbox.mapboxsdk.location.k$a` v2 @kind this, `com.mapbox.geojson.Point` v3 @kind object) @signature `Lcom/mapbox/mapboxsdk/location/k$a;.a:(Lcom/mapbox/geojson/Point;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L25e314.  v0:= v2.`com.mapbox.mapboxsdk.location.k$a.a` @type ^`com.mapbox.mapboxsdk.location.k` @kind object;
  #L25e318.  call temp:= `f`(v0) @signature `Lcom/mapbox/mapboxsdk/location/k;.f:(Lcom/mapbox/mapboxsdk/location/k;)Ljava/util/concurrent/CopyOnWriteArrayList;` @kind static;
  #L25e31e.  v0:= temp @kind object;
  #L25e320.  call temp:= `iterator`(v0) @signature `Ljava/util/concurrent/CopyOnWriteArrayList;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L25e326.  v0:= temp @kind object;
  #L25e328.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L25e32e.  v1:= temp;
  #L25e330.  if v1 == 0 then goto L25e348;
  #L25e334.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L25e33a.  v1:= temp @kind object;
  #L25e33c.  v1:= (`com.mapbox.mapboxsdk.location.z`) v1 @kind object;
  #L25e340.  call `a`(v1, v3) @signature `Lcom/mapbox/mapboxsdk/location/z;.a:(Lcom/mapbox/geojson/Point;)V` @kind interface;
  #L25e346.  goto L25e328;
  #L25e348.  return @kind void;
}
