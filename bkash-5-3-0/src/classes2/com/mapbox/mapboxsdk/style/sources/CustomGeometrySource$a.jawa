record `com.mapbox.mapboxsdk.style.sources.CustomGeometrySource$a` @kind class @AccessFlag  extends `java.util.concurrent.ThreadFactory` @kind interface {
  `java.util.concurrent.atomic.AtomicInteger` `com.mapbox.mapboxsdk.style.sources.CustomGeometrySource$a.g` @AccessFlag FINAL;
  `int` `com.mapbox.mapboxsdk.style.sources.CustomGeometrySource$a.h` @AccessFlag FINAL;
  `com.mapbox.mapboxsdk.style.sources.CustomGeometrySource` `com.mapbox.mapboxsdk.style.sources.CustomGeometrySource$a.i` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.mapbox.mapboxsdk.style.sources.CustomGeometrySource$a` v0 @kind this, `com.mapbox.mapboxsdk.style.sources.CustomGeometrySource` v1 @kind object) @signature `Lcom/mapbox/mapboxsdk/style/sources/CustomGeometrySource$a;.<init>:(Lcom/mapbox/mapboxsdk/style/sources/CustomGeometrySource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L27c904.  v0.`com.mapbox.mapboxsdk.style.sources.CustomGeometrySource$a.i` @type ^`com.mapbox.mapboxsdk.style.sources.CustomGeometrySource` := v1 @kind object;
  #L27c908.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L27c90e.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L27c912.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L27c918.  v0.`com.mapbox.mapboxsdk.style.sources.CustomGeometrySource$a.g` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L27c91c.  call temp:= `a`() @signature `Lcom/mapbox/mapboxsdk/style/sources/CustomGeometrySource;.a:()Ljava/util/concurrent/atomic/AtomicInteger;` @kind static;
  #L27c922.  v1:= temp @kind object;
  #L27c924.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L27c92a.  v1:= temp;
  #L27c92c.  v0.`com.mapbox.mapboxsdk.style.sources.CustomGeometrySource$a.h` @type ^`int` := v1;
  #L27c930.  return @kind void;
}
procedure `java.lang.Thread` `newThread`(`com.mapbox.mapboxsdk.style.sources.CustomGeometrySource$a` v5 @kind this, `java.lang.Runnable` v6 @kind object) @signature `Lcom/mapbox/mapboxsdk/style/sources/CustomGeometrySource$a;.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L27c89c.  v0:= new `java.lang.Thread`;
  #L27c8a0.  v1:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L27c8a4.  v2:= 3I;
  #L27c8a6.  v2:= new `java.lang.Object`[v2];
  #L27c8aa.  v3:= 0I;
  #L27c8ac.  v4:= "CustomGeom" @kind object;
  #L27c8b0.  v2[v3]:= v4 @kind object;
  #L27c8b4.  v3:= v5.`com.mapbox.mapboxsdk.style.sources.CustomGeometrySource$a.h` @type ^`int`;
  #L27c8b8.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L27c8be.  v3:= temp @kind object;
  #L27c8c0.  v4:= 1I;
  #L27c8c2.  v2[v4]:= v3 @kind object;
  #L27c8c6.  v3:= v5.`com.mapbox.mapboxsdk.style.sources.CustomGeometrySource$a.g` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L27c8ca.  call temp:= `getAndIncrement`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L27c8d0.  v3:= temp;
  #L27c8d2.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L27c8d8.  v3:= temp @kind object;
  #L27c8da.  v4:= 2I;
  #L27c8dc.  v2[v4]:= v3 @kind object;
  #L27c8e0.  v3:= "%s-%d-%d" @kind object;
  #L27c8e4.  call temp:= `format`(v1, v3, v2) @signature `Ljava/lang/String;.format:(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L27c8ea.  v1:= temp @kind object;
  #L27c8ec.  call `<init>`(v0, v6, v1) @signature `Ljava/lang/Thread;.<init>:(Ljava/lang/Runnable;Ljava/lang/String;)V` @kind direct;
  #L27c8f2.  return v0 @kind object;
}
