record `com.mapbox.mapboxsdk.offline.OfflineRegion$a$c` @kind class @AccessFlag  extends `java.lang.Runnable` @kind interface {
  `long` `com.mapbox.mapboxsdk.offline.OfflineRegion$a$c.g` @AccessFlag FINAL_SYNTHETIC;
  `com.mapbox.mapboxsdk.offline.OfflineRegion$a` `com.mapbox.mapboxsdk.offline.OfflineRegion$a$c.h` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.mapbox.mapboxsdk.offline.OfflineRegion$a$c` v0 @kind this, `com.mapbox.mapboxsdk.offline.OfflineRegion$a` v1 @kind object, `long` v2 ) @signature `Lcom/mapbox/mapboxsdk/offline/OfflineRegion$a$c;.<init>:(Lcom/mapbox/mapboxsdk/offline/OfflineRegion$a;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L276d0c.  v0.`com.mapbox.mapboxsdk.offline.OfflineRegion$a$c.h` @type ^`com.mapbox.mapboxsdk.offline.OfflineRegion$a` := v1 @kind object;
  #L276d10.  v0.`com.mapbox.mapboxsdk.offline.OfflineRegion$a$c.g` @type ^`long` := v2 @kind wide;
  #L276d14.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L276d1a.  return @kind void;
}
procedure `void` `run`(`com.mapbox.mapboxsdk.offline.OfflineRegion$a$c` v3 @kind this) @signature `Lcom/mapbox/mapboxsdk/offline/OfflineRegion$a$c;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L276d2c.  v0:= v3.`com.mapbox.mapboxsdk.offline.OfflineRegion$a$c.h` @type ^`com.mapbox.mapboxsdk.offline.OfflineRegion$a` @kind object;
  #L276d30.  v0:= v0.`com.mapbox.mapboxsdk.offline.OfflineRegion$a.a` @type ^`com.mapbox.mapboxsdk.offline.OfflineRegion$OfflineRegionObserver` @kind object;
  #L276d34.  if v0 == 0 then goto L276d42;
  #L276d38.  v1:= v3.`com.mapbox.mapboxsdk.offline.OfflineRegion$a$c.g` @type ^`long` @kind wide;
  #L276d3c.  call `mapboxTileCountLimitExceeded`(v0, v1) @signature `Lcom/mapbox/mapboxsdk/offline/OfflineRegion$OfflineRegionObserver;.mapboxTileCountLimitExceeded:(J)V` @kind interface;
  #L276d42.  return @kind void;
}
