record `com.mapbox.mapboxsdk.maps.Observer` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `int` `com.mapbox.mapboxsdk.maps.Observer.id` @AccessFlag PRIVATE_FINAL;
}
global `java.util.concurrent.atomic.AtomicInteger` `@@com.mapbox.mapboxsdk.maps.Observer.idCounter` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lcom/mapbox/mapboxsdk/maps/Observer;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L26e9a4.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L26e9a8.  v1:= 0I;
  #L26e9aa.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L26e9b0.  `@@com.mapbox.mapboxsdk.maps.Observer.idCounter` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L26e9b4.  return @kind void;
}
procedure `void` `<init>`(`com.mapbox.mapboxsdk.maps.Observer` v1 @kind this) @signature `Lcom/mapbox/mapboxsdk/maps/Observer;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L26e9c8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L26e9ce.  v0:= `@@com.mapbox.mapboxsdk.maps.Observer.idCounter` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L26e9d2.  call temp:= `incrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.incrementAndGet:()I` @kind virtual;
  #L26e9d8.  v0:= temp;
  #L26e9da.  v1.`com.mapbox.mapboxsdk.maps.Observer.id` @type ^`int` := v0;
  #L26e9de.  return @kind void;
}
procedure `int` `getId`(`com.mapbox.mapboxsdk.maps.Observer` v1 @kind this) @signature `Lcom/mapbox/mapboxsdk/maps/Observer;.getId:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L26e98c.  v0:= v1.`com.mapbox.mapboxsdk.maps.Observer.id` @type ^`int`;
  #L26e990.  return v0;
}
procedure `void` `notify`(`com.mapbox.mapboxsdk.maps.ObservableEvent` v0 @kind object) @signature `Lcom/mapbox/mapboxsdk/maps/Observer;.notify:(Lcom/mapbox/mapboxsdk/maps/ObservableEvent;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
