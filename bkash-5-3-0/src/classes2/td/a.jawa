record `td.a` @kind class @AccessFlag PUBLIC extends `sd.a` @kind class {
}
procedure `void` `<init>`(`td.a` v0 @kind this) @signature `Ltd/a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L37b73c.  call `<init>`(v0) @signature `Lsd/a;.<init>:()V` @kind direct;
  #L37b742.  return @kind void;
}
procedure `boolean` `c`(`td.a` v1 @kind this, `int` v2 ) @signature `Ltd/a;.c:(I)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L37b70c.  v0:= `@@td.a$a.a` @type ^`java.lang.Integer` @kind object;
  #L37b710.  if v0 == 0 then goto L37b726;
  #L37b714.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L37b71a.  v0:= temp;
  #L37b71c.  if v0 < v2 then goto L37b722;
  #L37b720.  goto L37b726;
  #L37b722.  v2:= 0I;
  #L37b724.  goto L37b728;
  #L37b726.  v2:= 1I;
  #L37b728.  return v2;
}
procedure `xd.d` `b`(`td.a` v1 @kind this) @signature `Ltd/a;.b:()Lxd/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L37b754.  v0:= 24I;
  #L37b758.  call temp:= `c`(v1, v0) @signature `Ltd/a;.c:(I)Z` @kind direct;
  #L37b75e.  v0:= temp;
  #L37b760.  if v0 == 0 then goto L37b770;
  #L37b764.  v0:= new `yd.a`;
  #L37b768.  call `<init>`(v0) @signature `Lyd/a;.<init>:()V` @kind direct;
  #L37b76e.  goto L37b778;
  #L37b770.  call temp:= `b`(v1) @signature `Lrd/a;.b:()Lxd/d;` @kind super;
  #L37b776.  v0:= temp @kind object;
  #L37b778.  return v0 @kind object;
}
