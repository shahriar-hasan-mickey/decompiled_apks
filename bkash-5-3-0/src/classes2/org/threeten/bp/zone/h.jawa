record `org.threeten.bp.zone.h` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
global `java.util.concurrent.atomic.AtomicBoolean` `@@org.threeten.bp.zone.h.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.atomic.AtomicReference` `@@org.threeten.bp.zone.h.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/threeten/bp/zone/h;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L368ffc.  v0:= new `org.threeten.bp.zone.h$a`;
  #L369000.  call `<init>`(v0) @signature `Lorg/threeten/bp/zone/h$a;.<init>:()V` @kind direct;
  #L369006.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L36900a.  v1:= 0I;
  #L36900c.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:(Z)V` @kind direct;
  #L369012.  `@@org.threeten.bp.zone.h.a` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L369016.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L36901a.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L369020.  `@@org.threeten.bp.zone.h.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L369024.  return @kind void;
}
procedure `void` `<init>`(`org.threeten.bp.zone.h` v0 @kind this) @signature `Lorg/threeten/bp/zone/h;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L369038.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L36903e.  return @kind void;
}
procedure `void` `a`() @signature `Lorg/threeten/bp/zone/h;.a:()V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L369050.  v0:= `@@org.threeten.bp.zone.h.a` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L369054.  v1:= 1I;
  #L369056.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.getAndSet:(Z)Z` @kind virtual;
  #L36905c.  v0:= temp;
  #L36905e.  if v0 != 0 then goto L36908c;
  #L369062.  v0:= `@@org.threeten.bp.zone.h.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L369066.  v1:= 0I;
  #L369068.  v2:= new `org.threeten.bp.zone.h$b`;
  #L36906c.  call `<init>`(v2) @signature `Lorg/threeten/bp/zone/h$b;.<init>:()V` @kind direct;
  #L369072.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L369078.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L36907e.  v0:= temp @kind object;
  #L369080.  v0:= (`org.threeten.bp.zone.h`) v0 @kind object;
  #L369084.  call `b`(v0) @signature `Lorg/threeten/bp/zone/h;.b:()V` @kind virtual;
  #L36908a.  return @kind void;
  #L36908c.  v0:= new `java.lang.IllegalStateException`;
  #L369090.  v1:= "Already initialized" @kind object;
  #L369094.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L36909a.  throw v0;
}
procedure `void` `c`(`org.threeten.bp.zone.h` v2 @kind object) @signature `Lorg/threeten/bp/zone/h;.c:(Lorg/threeten/bp/zone/h;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3690ac.  v0:= `@@org.threeten.bp.zone.h.a` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L3690b0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L3690b6.  v0:= temp;
  #L3690b8.  if v0 != 0 then goto L3690e0;
  #L3690bc.  v0:= `@@org.threeten.bp.zone.h.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3690c0.  v1:= 0I;
  #L3690c2.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3690c8.  v2:= temp;
  #L3690ca.  if v2 == 0 then goto L3690d0;
  #L3690ce.  return @kind void;
  #L3690d0.  v2:= new `java.lang.IllegalStateException`;
  #L3690d4.  v0:= "Initializer was already set, possibly with a default during initialization" @kind object;
  #L3690d8.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3690de.  throw v2;
  #L3690e0.  v2:= new `java.lang.IllegalStateException`;
  #L3690e4.  v0:= "Already initialized" @kind object;
  #L3690e8.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3690ee.  throw v2;
}
procedure `void` `b`() @signature `Lorg/threeten/bp/zone/h;.b:()V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
