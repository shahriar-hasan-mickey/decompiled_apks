record `org.threeten.bp.format.g$a` @kind class @AccessFlag  {
}
global `org.threeten.bp.format.g` `@@org.threeten.bp.format.g$a.a` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/threeten/bp/format/g$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L362ec8.  call temp:= `a`() @signature `Lorg/threeten/bp/format/g$a;.a:()Lorg/threeten/bp/format/g;` @kind static;
  #L362ece.  v0:= temp @kind object;
  #L362ed0.  `@@org.threeten.bp.format.g$a.a` @type ^`org.threeten.bp.format.g` := v0 @kind object;
  #L362ed4.  return @kind void;
}
procedure `org.threeten.bp.format.g` `a`() @signature `Lorg/threeten/bp/format/g$a;.a:()Lorg/threeten/bp/format/g;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L362e88.  call temp:= `a`() @signature `Lorg/threeten/bp/format/g;.a:()Ljava/util/concurrent/atomic/AtomicReference;` @kind static;
  #L362e8e.  v0:= temp @kind object;
  #L362e90.  v1:= new `org.threeten.bp.format.k`;
  #L362e94.  call `<init>`(v1) @signature `Lorg/threeten/bp/format/k;.<init>:()V` @kind direct;
  #L362e9a.  v2:= 0I;
  #L362e9c.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L362ea2.  call temp:= `a`() @signature `Lorg/threeten/bp/format/g;.a:()Ljava/util/concurrent/atomic/AtomicReference;` @kind static;
  #L362ea8.  v0:= temp @kind object;
  #L362eaa.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L362eb0.  v0:= temp @kind object;
  #L362eb2.  v0:= (`org.threeten.bp.format.g`) v0 @kind object;
  #L362eb6.  return v0 @kind object;
}
