record `f9.e` @kind class @AccessFlag PUBLIC_FINAL_SYNTHETIC extends `java.util.concurrent.ThreadFactory` @kind interface {
}
global `f9.e` `@@f9.e.g` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lf9/e;.<clinit>:()V` @AccessFlag STATIC_SYNTHETIC_CONSTRUCTOR {
    temp;
    v0;

  #L2ae8dc.  v0:= new `f9.e`;
  #L2ae8e0.  call `<init>`(v0) @signature `Lf9/e;.<init>:()V` @kind direct;
  #L2ae8e6.  `@@f9.e.g` @type ^`f9.e` := v0 @kind object;
  #L2ae8ea.  return @kind void;
}
procedure `void` `<init>`(`f9.e` v0 @kind this) @signature `Lf9/e;.<init>:()V` @AccessFlag PRIVATE_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L2ae8fc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2ae902.  return @kind void;
}
procedure `java.lang.Thread` `newThread`(`f9.e` v0 @kind this, `java.lang.Runnable` v1 @kind object) @signature `Lf9/e;.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2ae8c0.  call temp:= `f`(v1) @signature `Lf9/g;.f:(Ljava/lang/Runnable;)Ljava/lang/Thread;` @kind static;
  #L2ae8c6.  v1:= temp @kind object;
  #L2ae8c8.  return v1 @kind object;
}
