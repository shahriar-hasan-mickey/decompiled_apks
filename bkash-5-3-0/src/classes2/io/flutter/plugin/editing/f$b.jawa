record `io.flutter.plugin.editing.f$b` @kind class @AccessFlag  extends `io.flutter.plugin.editing.f$d` @kind interface {
  `boolean` `io.flutter.plugin.editing.f$b.a` @AccessFlag FINAL_SYNTHETIC;
  `double`[] `io.flutter.plugin.editing.f$b.b` @AccessFlag FINAL_SYNTHETIC;
  `double`[] `io.flutter.plugin.editing.f$b.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`io.flutter.plugin.editing.f$b` v0 @kind this, `io.flutter.plugin.editing.f` v1 @kind object, `boolean` v2 , `double`[] v3 @kind object, `double`[] v4 @kind object) @signature `Lio/flutter/plugin/editing/f$b;.<init>:(Lio/flutter/plugin/editing/f;Z[D[D)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2d9c8c.  v0.`io.flutter.plugin.editing.f$b.a` @type ^`boolean` := v2 @kind boolean;
  #L2d9c90.  v0.`io.flutter.plugin.editing.f$b.b` @type ^`double`[] := v3 @kind object;
  #L2d9c94.  v0.`io.flutter.plugin.editing.f$b.c` @type ^`double`[] := v4 @kind object;
  #L2d9c98.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2d9c9e.  return @kind void;
}
procedure `void` `a`(`io.flutter.plugin.editing.f$b` v10 @kind this, `double` v11 , `double` v13 ) @signature `Lio/flutter/plugin/editing/f$b;.a:(DD)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L2d9cb0.  v0:= v10.`io.flutter.plugin.editing.f$b.a` @type ^`boolean` @kind boolean;
  #L2d9cb4.  v1:= 1.0D;
  #L2d9cb8.  v3:= 3I;
  #L2d9cba.  if v0 == 0 then goto L2d9cc0;
  #L2d9cbe.  goto L2d9ce4;
  #L2d9cc0.  v0:= v10.`io.flutter.plugin.editing.f$b.b` @type ^`double`[] @kind object;
  #L2d9cc4.  v4:= v0[v3] @kind wide;
  #L2d9cc8.  v4:= v4 * v11 @kind double;
  #L2d9ccc.  v6:= 7I;
  #L2d9cce.  v6:= v0[v6] @kind wide;
  #L2d9cd2.  v6:= v6 * v13 @kind double;
  #L2d9cd6.  v4:= v4 + v6 @kind double;
  #L2d9cd8.  v6:= 15I;
  #L2d9cdc.  v6:= v0[v6] @kind wide;
  #L2d9ce0.  v4:= v4 + v6 @kind double;
  #L2d9ce2.  v1:= v1 / v4 @kind double;
  #L2d9ce4.  v0:= v10.`io.flutter.plugin.editing.f$b.b` @type ^`double`[] @kind object;
  #L2d9ce8.  v4:= 0I;
  #L2d9cea.  v5:= v0[v4] @kind wide;
  #L2d9cee.  v5:= v5 * v11 @kind double;
  #L2d9cf2.  v7:= 4I;
  #L2d9cf4.  v7:= v0[v7] @kind wide;
  #L2d9cf8.  v7:= v7 * v13 @kind double;
  #L2d9cfc.  v5:= v5 + v7 @kind double;
  #L2d9cfe.  v7:= 12I;
  #L2d9d02.  v7:= v0[v7] @kind wide;
  #L2d9d06.  v5:= v5 + v7 @kind double;
  #L2d9d08.  v5:= v5 * v1 @kind double;
  #L2d9d0c.  v7:= 1I;
  #L2d9d0e.  v8:= v0[v7] @kind wide;
  #L2d9d12.  v8:= v8 * v11 @kind double;
  #L2d9d16.  v11:= 5I;
  #L2d9d18.  v11:= v0[v11] @kind wide;
  #L2d9d1c.  v11:= v11 * v13 @kind double;
  #L2d9d20.  v8:= v8 + v11 @kind double;
  #L2d9d22.  v11:= 13I;
  #L2d9d26.  v11:= v0[v11] @kind wide;
  #L2d9d2a.  v8:= v8 + v11 @kind double;
  #L2d9d2c.  v8:= v8 * v1 @kind double;
  #L2d9d30.  v11:= v10.`io.flutter.plugin.editing.f$b.c` @type ^`double`[] @kind object;
  #L2d9d34.  v12:= v11[v4] @kind wide;
  #L2d9d38.  v14:= dcmpg(v5, v12);
  #L2d9d3c.  if v14 >= 0 then goto L2d9d46;
  #L2d9d40.  v11[v4]:= v5 @kind wide;
  #L2d9d44.  goto L2d9d56;
  #L2d9d46.  v12:= v11[v7] @kind wide;
  #L2d9d4a.  v14:= dcmpl(v5, v12);
  #L2d9d4e.  if v14 <= 0 then goto L2d9d56;
  #L2d9d52.  v11[v7]:= v5 @kind wide;
  #L2d9d56.  v12:= 2I;
  #L2d9d58.  v13:= v11[v12] @kind wide;
  #L2d9d5c.  v0:= dcmpg(v8, v13);
  #L2d9d60.  if v0 >= 0 then goto L2d9d6a;
  #L2d9d64.  v11[v12]:= v8 @kind wide;
  #L2d9d68.  goto L2d9d7a;
  #L2d9d6a.  v12:= v11[v3] @kind wide;
  #L2d9d6e.  v14:= dcmpl(v8, v12);
  #L2d9d72.  if v14 <= 0 then goto L2d9d7a;
  #L2d9d76.  v11[v3]:= v8 @kind wide;
  #L2d9d7a.  return @kind void;
}
