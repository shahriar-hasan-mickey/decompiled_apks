record `io.flutter.plugin.common.g` @kind class @AccessFlag PUBLIC_FINAL extends `io.flutter.plugin.common.j` @kind interface {
}
global `io.flutter.plugin.common.g` `@@io.flutter.plugin.common.g.a` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/flutter/plugin/common/g;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2d6060.  v0:= new `io.flutter.plugin.common.g`;
  #L2d6064.  call `<init>`(v0) @signature `Lio/flutter/plugin/common/g;.<init>:()V` @kind direct;
  #L2d606a.  `@@io.flutter.plugin.common.g.a` @type ^`io.flutter.plugin.common.g` := v0 @kind object;
  #L2d606e.  return @kind void;
}
procedure `void` `<init>`(`io.flutter.plugin.common.g` v0 @kind this) @signature `Lio/flutter/plugin/common/g;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L2d6080.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2d6086.  return @kind void;
}
procedure `java.nio.ByteBuffer` `a`(`io.flutter.plugin.common.g` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/flutter/plugin/common/g;.a:(Ljava/lang/Object;)Ljava/nio/ByteBuffer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2d6008.  if v2 != 0 then goto L2d6010;
  #L2d600c.  v2:= 0I;
  #L2d600e.  return v2 @kind object;
  #L2d6010.  call temp:= `a`(v2) @signature `Lio/flutter/plugin/common/i;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2d6016.  v2:= temp @kind object;
  #L2d6018.  v0:= instanceof @variable v2 @type ^`java.lang.String` @kind boolean;
  #L2d601c.  if v0 == 0 then goto L2d603a;
  #L2d6020.  v0:= `@@io.flutter.plugin.common.q.b` @type ^`io.flutter.plugin.common.q` @kind object;
  #L2d6024.  v2:= (`java.lang.String`) v2 @kind object;
  #L2d6028.  call temp:= `quote`(v2) @signature `Lorg/json/JSONObject;.quote:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L2d602e.  v2:= temp @kind object;
  #L2d6030.  call temp:= `d`(v0, v2) @signature `Lio/flutter/plugin/common/q;.d:(Ljava/lang/String;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L2d6036.  v2:= temp @kind object;
  #L2d6038.  return v2 @kind object;
  #L2d603a.  v0:= `@@io.flutter.plugin.common.q.b` @type ^`io.flutter.plugin.common.q` @kind object;
  #L2d603e.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2d6044.  v2:= temp @kind object;
  #L2d6046.  call temp:= `d`(v0, v2) @signature `Lio/flutter/plugin/common/q;.d:(Ljava/lang/String;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L2d604c.  v2:= temp @kind object;
  #L2d604e.  return v2 @kind object;
}
procedure `java.lang.Object` `b`(`io.flutter.plugin.common.g` v2 @kind this, `java.nio.ByteBuffer` v3 @kind object) @signature `Lio/flutter/plugin/common/g;.b:(Ljava/nio/ByteBuffer;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2d5f94.  v0:= "Invalid JSON" @kind object;
  #L2d5f98.  if v3 != 0 then goto L2d5fa0;
  #L2d5f9c.  v3:= 0I;
  #L2d5f9e.  return v3 @kind object;
  #L2d5fa0.  v1:= `@@io.flutter.plugin.common.q.b` @type ^`io.flutter.plugin.common.q` @kind object;
  #L2d5fa4.  call temp:= `c`(v1, v3) @signature `Lio/flutter/plugin/common/q;.c:(Ljava/nio/ByteBuffer;)Ljava/lang/String;` @kind virtual;
  #L2d5faa.  v3:= temp @kind object;
  #L2d5fac.  v1:= new `org.json.JSONTokener`;
  #L2d5fb0.  call `<init>`(v1, v3) @signature `Lorg/json/JSONTokener;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2d5fb6.  call temp:= `nextValue`(v1) @signature `Lorg/json/JSONTokener;.nextValue:()Ljava/lang/Object;` @kind virtual;
  #L2d5fbc.  v3:= temp @kind object;
  #L2d5fbe.  call temp:= `more`(v1) @signature `Lorg/json/JSONTokener;.more:()Z` @kind virtual;
  #L2d5fc4.  v1:= temp;
  #L2d5fc6.  if v1 != 0 then goto L2d5fcc;
  #L2d5fca.  return v3 @kind object;
  #L2d5fcc.  v3:= new `java.lang.IllegalArgumentException`;
  #L2d5fd0.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2d5fd6.  throw v3;
  #L2d5fd8.  v3:= Exception @type ^`org.json.JSONException` @kind object;
  #L2d5fda.  v1:= new `java.lang.IllegalArgumentException`;
  #L2d5fde.  call `<init>`(v1, v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L2d5fe4.  throw v1;
  catch `org.json.JSONException` @[L2d5fa0..L2d5fd8] goto L2d5fd8;
}
