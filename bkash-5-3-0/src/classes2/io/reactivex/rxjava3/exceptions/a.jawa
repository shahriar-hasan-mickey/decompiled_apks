record `io.reactivex.rxjava3.exceptions.a` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.RuntimeException` @kind class {
  `java.lang.Throwable` `io.reactivex.rxjava3.exceptions.a.cause` @AccessFlag PRIVATE;
  `java.util.List` `io.reactivex.rxjava3.exceptions.a.exceptions` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `io.reactivex.rxjava3.exceptions.a.message` @AccessFlag PRIVATE_FINAL;
}
global `long` `@@io.reactivex.rxjava3.exceptions.a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.exceptions.a` v3 @kind this, `java.lang.Iterable` v4 @kind object) @signature `Lio/reactivex/rxjava3/exceptions/a;.<init>:(Ljava/lang/Iterable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L2fe878.  call `<init>`(v3) @signature `Ljava/lang/RuntimeException;.<init>:()V` @kind direct;
  #L2fe87e.  v0:= new `java.util.LinkedHashSet`;
  #L2fe882.  call `<init>`(v0) @signature `Ljava/util/LinkedHashSet;.<init>:()V` @kind direct;
  #L2fe888.  if v4 == 0 then goto L2fe8ea;
  #L2fe88c.  call temp:= `iterator`(v4) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2fe892.  v4:= temp @kind object;
  #L2fe894.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2fe89a.  v1:= temp;
  #L2fe89c.  if v1 == 0 then goto L2fe8fe;
  #L2fe8a0.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2fe8a6.  v1:= temp @kind object;
  #L2fe8a8.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L2fe8ac.  v2:= instanceof @variable v1 @type ^`io.reactivex.rxjava3.exceptions.a` @kind boolean;
  #L2fe8b0.  if v2 == 0 then goto L2fe8c8;
  #L2fe8b4.  v1:= (`io.reactivex.rxjava3.exceptions.a`) v1 @kind object;
  #L2fe8b8.  call temp:= `getExceptions`(v1) @signature `Lio/reactivex/rxjava3/exceptions/a;.getExceptions:()Ljava/util/List;` @kind virtual;
  #L2fe8be.  v1:= temp @kind object;
  #L2fe8c0.  call temp:= `addAll`(v0, v1) @signature `Ljava/util/Set;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L2fe8c6.  goto L2fe894;
  #L2fe8c8.  if v1 == 0 then goto L2fe8d4;
  #L2fe8cc.  call temp:= `add`(v0, v1) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2fe8d2.  goto L2fe894;
  #L2fe8d4.  v1:= new `java.lang.NullPointerException`;
  #L2fe8d8.  v2:= "Throwable was null!" @kind object;
  #L2fe8dc.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2fe8e2.  call temp:= `add`(v0, v1) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2fe8e8.  goto L2fe894;
  #L2fe8ea.  v4:= new `java.lang.NullPointerException`;
  #L2fe8ee.  v1:= "errors was null" @kind object;
  #L2fe8f2.  call `<init>`(v4, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2fe8f8.  call temp:= `add`(v0, v4) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2fe8fe.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Set;.isEmpty:()Z` @kind interface;
  #L2fe904.  v4:= temp;
  #L2fe906.  if v4 != 0 then goto L2fe950;
  #L2fe90a.  v4:= new `java.util.ArrayList`;
  #L2fe90e.  call `<init>`(v4, v0) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L2fe914.  call temp:= `unmodifiableList`(v4) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L2fe91a.  v4:= temp @kind object;
  #L2fe91c.  v3.`io.reactivex.rxjava3.exceptions.a.exceptions` @type ^`java.util.List` := v4 @kind object;
  #L2fe920.  v0:= new `java.lang.StringBuilder`;
  #L2fe924.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2fe92a.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2fe930.  v4:= temp;
  #L2fe932.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fe938.  v4:= " exceptions occurred. " @kind object;
  #L2fe93c.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fe942.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2fe948.  v4:= temp @kind object;
  #L2fe94a.  v3.`io.reactivex.rxjava3.exceptions.a.message` @type ^`java.lang.String` := v4 @kind object;
  #L2fe94e.  return @kind void;
  #L2fe950.  v4:= new `java.lang.IllegalArgumentException`;
  #L2fe954.  v0:= "errors is empty" @kind object;
  #L2fe958.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2fe95e.  throw v4;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.exceptions.a` v1 @kind this, `java.lang.Throwable`[] v2 @kind object) @signature `Lio/reactivex/rxjava3/exceptions/a;.<init>:([Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2fe970.  if v2 != 0 then goto L2fe98c;
  #L2fe974.  v2:= new `java.lang.NullPointerException`;
  #L2fe978.  v0:= "exceptions was null" @kind object;
  #L2fe97c.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2fe982.  call temp:= `singletonList`(v2) @signature `Ljava/util/Collections;.singletonList:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L2fe988.  v2:= temp @kind object;
  #L2fe98a.  goto L2fe994;
  #L2fe98c.  call temp:= `asList`(v2) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L2fe992.  v2:= temp @kind object;
  #L2fe994.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/exceptions/a;.<init>:(Ljava/lang/Iterable;)V` @kind direct;
  #L2fe99a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.rxjava3.exceptions.a` v5 @kind this, `java.lang.StringBuilder` v6 @kind object, `java.lang.Throwable` v7 @kind object, `java.lang.String` v8 @kind object) @signature `Lio/reactivex/rxjava3/exceptions/a;.a:(Ljava/lang/StringBuilder;Ljava/lang/Throwable;Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2fe9ac.  call temp:= `append`(v6, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fe9b2.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fe9b8.  v8:= 10I;
  #L2fe9bc.  call temp:= `append`(v6, v8) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fe9c2.  call temp:= `getStackTrace`(v7) @signature `Ljava/lang/Throwable;.getStackTrace:()[Ljava/lang/StackTraceElement;` @kind virtual;
  #L2fe9c8.  v0:= temp @kind object;
  #L2fe9ca.  v1:= length @variable v0;
  #L2fe9cc.  v2:= 0I;
  #L2fe9ce.  if v2 >= v1 then goto L2fe9f2;
  #L2fe9d2.  v3:= v0[v2] @kind object;
  #L2fe9d6.  v4:= "\t\tat " @kind object;
  #L2fe9da.  call temp:= `append`(v6, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fe9e0.  call temp:= `append`(v6, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fe9e6.  call temp:= `append`(v6, v8) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fe9ec.  v2:= v2 + 1;
  #L2fe9f0.  goto L2fe9ce;
  #L2fe9f2.  call temp:= `getCause`(v7) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L2fe9f8.  v8:= temp @kind object;
  #L2fe9fa.  if v8 == 0 then goto L2fea1a;
  #L2fe9fe.  v8:= "\tCaused by: " @kind object;
  #L2fea02.  call temp:= `append`(v6, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fea08.  call temp:= `getCause`(v7) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L2fea0e.  v7:= temp @kind object;
  #L2fea10.  v8:= "" @kind object;
  #L2fea14.  call `a`(v5, v6, v7, v8) @signature `Lio/reactivex/rxjava3/exceptions/a;.a:(Ljava/lang/StringBuilder;Ljava/lang/Throwable;Ljava/lang/String;)V` @kind direct;
  #L2fea1a.  return @kind void;
}
procedure `void` `b`(`io.reactivex.rxjava3.exceptions.a` v7 @kind this, `io.reactivex.rxjava3.exceptions.a$b` v8 @kind object) @signature `Lio/reactivex/rxjava3/exceptions/a;.b:(Lio/reactivex/rxjava3/exceptions/a$b;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2fea48.  v0:= new `java.lang.StringBuilder`;
  #L2fea4c.  v1:= 128I;
  #L2fea50.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L2fea56.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fea5c.  v1:= 10I;
  #L2fea60.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fea66.  call temp:= `getStackTrace`(v7) @signature `Ljava/lang/RuntimeException;.getStackTrace:()[Ljava/lang/StackTraceElement;` @kind virtual;
  #L2fea6c.  v2:= temp @kind object;
  #L2fea6e.  v3:= length @variable v2;
  #L2fea70.  v4:= 0I;
  #L2fea72.  if v4 >= v3 then goto L2fea96;
  #L2fea76.  v5:= v2[v4] @kind object;
  #L2fea7a.  v6:= "\tat " @kind object;
  #L2fea7e.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fea84.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fea8a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fea90.  v4:= v4 + 1;
  #L2fea94.  goto L2fea72;
  #L2fea96.  v1:= v7.`io.reactivex.rxjava3.exceptions.a.exceptions` @type ^`java.util.List` @kind object;
  #L2fea9a.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2feaa0.  v1:= temp @kind object;
  #L2feaa2.  v2:= 1I;
  #L2feaa4.  v3:= 1I;
  #L2feaa6.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2feaac.  v4:= temp;
  #L2feaae.  if v4 == 0 then goto L2feae6;
  #L2feab2.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2feab8.  v4:= temp @kind object;
  #L2feaba.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L2feabe.  v5:= "  ComposedException " @kind object;
  #L2feac2.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2feac8.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2feace.  v5:= " :\n" @kind object;
  #L2fead2.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fead8.  v5:= "\t" @kind object;
  #L2feadc.  call `a`(v7, v0, v4, v5) @signature `Lio/reactivex/rxjava3/exceptions/a;.a:(Ljava/lang/StringBuilder;Ljava/lang/Throwable;Ljava/lang/String;)V` @kind direct;
  #L2feae2.  v3:= v3 + v2 @kind int;
  #L2feae4.  goto L2feaa6;
  #L2feae6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2feaec.  v0:= temp @kind object;
  #L2feaee.  call `a`(v8, v0) @signature `Lio/reactivex/rxjava3/exceptions/a$b;.a:(Ljava/lang/Object;)V` @kind virtual;
  #L2feaf4.  return @kind void;
}
procedure `java.lang.Throwable` `getCause`(`io.reactivex.rxjava3.exceptions.a` v13 @kind this) @signature `Lio/reactivex/rxjava3/exceptions/a;.getCause:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L2fe5ec.  @monitorenter v13
  #L2fe5ee.  v0:= v13.`io.reactivex.rxjava3.exceptions.a.cause` @type ^`java.lang.Throwable` @kind object;
  #L2fe5f2.  if v0 != 0 then goto L2fe834;
  #L2fe5f6.  v0:= "line.separator" @kind object;
  #L2fe5fa.  call temp:= `getProperty`(v0) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L2fe600.  v0:= temp @kind object;
  #L2fe602.  v1:= v13.`io.reactivex.rxjava3.exceptions.a.exceptions` @type ^`java.util.List` @kind object;
  #L2fe606.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2fe60c.  v1:= temp;
  #L2fe60e.  v2:= 1I;
  #L2fe610.  v3:= 0I;
  #L2fe612.  if v1 <= v2 then goto L2fe820;
  #L2fe616.  v1:= new `java.util.IdentityHashMap`;
  #L2fe61a.  call `<init>`(v1) @signature `Ljava/util/IdentityHashMap;.<init>:()V` @kind direct;
  #L2fe620.  v2:= new `java.lang.StringBuilder`;
  #L2fe624.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2fe62a.  v4:= "Multiple exceptions (" @kind object;
  #L2fe62e.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fe634.  v4:= v13.`io.reactivex.rxjava3.exceptions.a.exceptions` @type ^`java.util.List` @kind object;
  #L2fe638.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2fe63e.  v4:= temp;
  #L2fe640.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fe646.  v4:= ")" @kind object;
  #L2fe64a.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fe650.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fe656.  v4:= v13.`io.reactivex.rxjava3.exceptions.a.exceptions` @type ^`java.util.List` @kind object;
  #L2fe65a.  call temp:= `iterator`(v4) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2fe660.  v4:= temp @kind object;
  #L2fe662.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2fe668.  v5:= temp;
  #L2fe66a.  if v5 == 0 then goto L2fe800;
  #L2fe66e.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2fe674.  v5:= temp @kind object;
  #L2fe676.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L2fe67a.  v6:= 0I;
  #L2fe67c.  if v5 == 0 then goto L2fe662;
  #L2fe680.  v7:= 0I;
  #L2fe682.  if v7 >= v6 then goto L2fe696;
  #L2fe686.  v8:= "  " @kind object;
  #L2fe68a.  call temp:= `append`(v2, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fe690.  v7:= v7 + 1;
  #L2fe694.  goto L2fe682;
  #L2fe696.  v7:= "|-- " @kind object;
  #L2fe69a.  call temp:= `append`(v2, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fe6a0.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L2fe6a6.  v7:= temp @kind object;
  #L2fe6a8.  call temp:= `getCanonicalName`(v7) @signature `Ljava/lang/Class;.getCanonicalName:()Ljava/lang/String;` @kind virtual;
  #L2fe6ae.  v7:= temp @kind object;
  #L2fe6b0.  call temp:= `append`(v2, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fe6b6.  v7:= ": " @kind object;
  #L2fe6ba.  call temp:= `append`(v2, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fe6c0.  call temp:= `getMessage`(v5) @signature `Ljava/lang/Throwable;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L2fe6c6.  v7:= temp @kind object;
  #L2fe6c8.  if v7 == 0 then goto L2fe71e;
  #L2fe6cc.  call temp:= `contains`(v7, v0) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L2fe6d2.  v8:= temp;
  #L2fe6d4.  if v8 == 0 then goto L2fe71e;
  #L2fe6d8.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fe6de.  call temp:= `split`(v7, v0) @signature `Ljava/lang/String;.split:(Ljava/lang/String;)[Ljava/lang/String;` @kind virtual;
  #L2fe6e4.  v7:= temp @kind object;
  #L2fe6e6.  v8:= length @variable v7;
  #L2fe6e8.  v9:= 0I;
  #L2fe6ea.  if v9 >= v8 then goto L2fe72a;
  #L2fe6ee.  v10:= v7[v9] @kind object;
  #L2fe6f2.  v11:= 0I;
  #L2fe6f4.  v12:= v6 + 2;
  #L2fe6f8.  if v11 >= v12 then goto L2fe70c;
  #L2fe6fc.  v12:= "  " @kind object;
  #L2fe700.  call temp:= `append`(v2, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fe706.  v11:= v11 + 1;
  #L2fe70a.  goto L2fe6f4;
  #L2fe70c.  call temp:= `append`(v2, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fe712.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fe718.  v9:= v9 + 1;
  #L2fe71c.  goto L2fe6ea;
  #L2fe71e.  call temp:= `append`(v2, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fe724.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fe72a.  v7:= 0I;
  #L2fe72c.  v8:= v6 + 2;
  #L2fe730.  if v7 >= v8 then goto L2fe744;
  #L2fe734.  v8:= "  " @kind object;
  #L2fe738.  call temp:= `append`(v2, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fe73e.  v7:= v7 + 1;
  #L2fe742.  goto L2fe72c;
  #L2fe744.  call temp:= `getStackTrace`(v5) @signature `Ljava/lang/Throwable;.getStackTrace:()[Ljava/lang/StackTraceElement;` @kind virtual;
  #L2fe74a.  v7:= temp @kind object;
  #L2fe74c.  v9:= length @variable v7;
  #L2fe74e.  if v9 <= 0 then goto L2fe76c;
  #L2fe752.  v9:= "at " @kind object;
  #L2fe756.  call temp:= `append`(v2, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fe75c.  v7:= v7[v3] @kind object;
  #L2fe760.  call temp:= `append`(v2, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fe766.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fe76c.  call temp:= `containsKey`(v1, v5) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L2fe772.  v7:= temp;
  #L2fe774.  if v7 != 0 then goto L2fe792;
  #L2fe778.  v7:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L2fe77c.  call temp:= `put`(v1, v5, v7) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2fe782.  call temp:= `getCause`(v5) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L2fe788.  v5:= temp @kind object;
  #L2fe78a.  v6:= v6 + 1;
  #L2fe78e.  goto L2fe67c;
  #L2fe792.  call temp:= `getCause`(v5) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L2fe798.  v5:= temp @kind object;
  #L2fe79a.  if v5 == 0 then goto L2fe662;
  #L2fe79e.  v6:= 0I;
  #L2fe7a0.  if v6 >= v8 then goto L2fe7b4;
  #L2fe7a4.  v7:= "  " @kind object;
  #L2fe7a8.  call temp:= `append`(v2, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fe7ae.  v6:= v6 + 1;
  #L2fe7b2.  goto L2fe7a0;
  #L2fe7b4.  v6:= "|-- " @kind object;
  #L2fe7b8.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fe7be.  v6:= "(cause not expanded again) " @kind object;
  #L2fe7c2.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fe7c8.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L2fe7ce.  v6:= temp @kind object;
  #L2fe7d0.  call temp:= `getCanonicalName`(v6) @signature `Ljava/lang/Class;.getCanonicalName:()Ljava/lang/String;` @kind virtual;
  #L2fe7d6.  v6:= temp @kind object;
  #L2fe7d8.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fe7de.  v6:= ": " @kind object;
  #L2fe7e2.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fe7e8.  call temp:= `getMessage`(v5) @signature `Ljava/lang/Throwable;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L2fe7ee.  v5:= temp @kind object;
  #L2fe7f0.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fe7f6.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2fe7fc.  goto L2fe662;
  #L2fe800.  v0:= new `io.reactivex.rxjava3.exceptions.a$a`;
  #L2fe804.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2fe80a.  v1:= temp @kind object;
  #L2fe80c.  call temp:= `trim`(v1) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L2fe812.  v1:= temp @kind object;
  #L2fe814.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/exceptions/a$a;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2fe81a.  v13.`io.reactivex.rxjava3.exceptions.a.cause` @type ^`java.lang.Throwable` := v0 @kind object;
  #L2fe81e.  goto L2fe834;
  #L2fe820.  v0:= v13.`io.reactivex.rxjava3.exceptions.a.exceptions` @type ^`java.util.List` @kind object;
  #L2fe824.  call temp:= `get`(v0, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2fe82a.  v0:= temp @kind object;
  #L2fe82c.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L2fe830.  v13.`io.reactivex.rxjava3.exceptions.a.cause` @type ^`java.lang.Throwable` := v0 @kind object;
  #L2fe834.  v0:= v13.`io.reactivex.rxjava3.exceptions.a.cause` @type ^`java.lang.Throwable` @kind object;
  #L2fe838.  @monitorexit v13
  #L2fe83a.  return v0 @kind object;
  #L2fe83c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2fe83e.  @monitorexit v13
  #L2fe840.  throw v0;
  catch `java.lang.Throwable` @[L2fe5ee..L2fe838] goto L2fe83c;
}
procedure `java.util.List` `getExceptions`(`io.reactivex.rxjava3.exceptions.a` v1 @kind this) @signature `Lio/reactivex/rxjava3/exceptions/a;.getExceptions:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fe860.  v0:= v1.`io.reactivex.rxjava3.exceptions.a.exceptions` @type ^`java.util.List` @kind object;
  #L2fe864.  return v0 @kind object;
}
procedure `java.lang.String` `getMessage`(`io.reactivex.rxjava3.exceptions.a` v1 @kind this) @signature `Lio/reactivex/rxjava3/exceptions/a;.getMessage:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fe5d4.  v0:= v1.`io.reactivex.rxjava3.exceptions.a.message` @type ^`java.lang.String` @kind object;
  #L2fe5d8.  return v0 @kind object;
}
procedure `void` `printStackTrace`(`io.reactivex.rxjava3.exceptions.a` v1 @kind this) @signature `Lio/reactivex/rxjava3/exceptions/a;.printStackTrace:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fea2c.  v0:= `@@java.lang.System.err` @type ^`java.io.PrintStream` @kind object;
  #L2fea30.  call `printStackTrace`(v1, v0) @signature `Lio/reactivex/rxjava3/exceptions/a;.printStackTrace:(Ljava/io/PrintStream;)V` @kind virtual;
  #L2fea36.  return @kind void;
}
procedure `void` `printStackTrace`(`io.reactivex.rxjava3.exceptions.a` v1 @kind this, `java.io.PrintStream` v2 @kind object) @signature `Lio/reactivex/rxjava3/exceptions/a;.printStackTrace:(Ljava/io/PrintStream;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2feb08.  v0:= new `io.reactivex.rxjava3.exceptions.a$c`;
  #L2feb0c.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/exceptions/a$c;.<init>:(Ljava/io/PrintStream;)V` @kind direct;
  #L2feb12.  call `b`(v1, v0) @signature `Lio/reactivex/rxjava3/exceptions/a;.b:(Lio/reactivex/rxjava3/exceptions/a$b;)V` @kind direct;
  #L2feb18.  return @kind void;
}
procedure `void` `printStackTrace`(`io.reactivex.rxjava3.exceptions.a` v1 @kind this, `java.io.PrintWriter` v2 @kind object) @signature `Lio/reactivex/rxjava3/exceptions/a;.printStackTrace:(Ljava/io/PrintWriter;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2feb2c.  v0:= new `io.reactivex.rxjava3.exceptions.a$d`;
  #L2feb30.  call `<init>`(v0, v2) @signature `Lio/reactivex/rxjava3/exceptions/a$d;.<init>:(Ljava/io/PrintWriter;)V` @kind direct;
  #L2feb36.  call `b`(v1, v0) @signature `Lio/reactivex/rxjava3/exceptions/a;.b:(Lio/reactivex/rxjava3/exceptions/a$b;)V` @kind direct;
  #L2feb3c.  return @kind void;
}
procedure `int` `size`(`io.reactivex.rxjava3.exceptions.a` v1 @kind this) @signature `Lio/reactivex/rxjava3/exceptions/a;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fe5b4.  v0:= v1.`io.reactivex.rxjava3.exceptions.a.exceptions` @type ^`java.util.List` @kind object;
  #L2fe5b8.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2fe5be.  v0:= temp;
  #L2fe5c0.  return v0;
}
