record `io.reactivex.rxjava3.internal.schedulers.b$b` @kind class @AccessFlag FINAL {
  `int` `io.reactivex.rxjava3.internal.schedulers.b$b.a` @AccessFlag FINAL;
  `io.reactivex.rxjava3.internal.schedulers.b$c`[] `io.reactivex.rxjava3.internal.schedulers.b$b.b` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.schedulers.b$b.c` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.schedulers.b$b` v3 @kind this, `int` v4 , `java.util.concurrent.ThreadFactory` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/b$b;.<init>:(ILjava/util/concurrent/ThreadFactory;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L2ffaf8.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2ffafe.  v3.`io.reactivex.rxjava3.internal.schedulers.b$b.a` @type ^`int` := v4;
  #L2ffb02.  v0:= new `io.reactivex.rxjava3.internal.schedulers.b$c`[v4];
  #L2ffb06.  v3.`io.reactivex.rxjava3.internal.schedulers.b$b.b` @type ^`io.reactivex.rxjava3.internal.schedulers.b$c`[] := v0 @kind object;
  #L2ffb0a.  v0:= 0I;
  #L2ffb0c.  if v0 >= v4 then goto L2ffb28;
  #L2ffb10.  v1:= v3.`io.reactivex.rxjava3.internal.schedulers.b$b.b` @type ^`io.reactivex.rxjava3.internal.schedulers.b$c`[] @kind object;
  #L2ffb14.  v2:= new `io.reactivex.rxjava3.internal.schedulers.b$c`;
  #L2ffb18.  call `<init>`(v2, v5) @signature `Lio/reactivex/rxjava3/internal/schedulers/b$c;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L2ffb1e.  v1[v0]:= v2 @kind object;
  #L2ffb22.  v0:= v0 + 1;
  #L2ffb26.  goto L2ffb0c;
  #L2ffb28.  return @kind void;
}
procedure `io.reactivex.rxjava3.internal.schedulers.b$c` `a`(`io.reactivex.rxjava3.internal.schedulers.b$b` v6 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/b$b;.a:()Lio/reactivex/rxjava3/internal/schedulers/b$c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2ffabc.  v0:= v6.`io.reactivex.rxjava3.internal.schedulers.b$b.a` @type ^`int`;
  #L2ffac0.  if v0 != 0 then goto L2ffaca;
  #L2ffac4.  v0:= `@@io.reactivex.rxjava3.internal.schedulers.b.f` @type ^`io.reactivex.rxjava3.internal.schedulers.b$c` @kind object;
  #L2ffac8.  return v0 @kind object;
  #L2ffaca.  v1:= v6.`io.reactivex.rxjava3.internal.schedulers.b$b.b` @type ^`io.reactivex.rxjava3.internal.schedulers.b$c`[] @kind object;
  #L2fface.  v2:= v6.`io.reactivex.rxjava3.internal.schedulers.b$b.c` @type ^`long` @kind wide;
  #L2ffad2.  v4:= 1L;
  #L2ffad6.  v4:= v4 + v2 @kind long;
  #L2ffad8.  v6.`io.reactivex.rxjava3.internal.schedulers.b$b.c` @type ^`long` := v4 @kind wide;
  #L2ffadc.  v4:= (`long`) v0 @kind i2l;
  #L2ffade.  v2:= v2 %% v4 @kind long;
  #L2ffae0.  v0:= (`int`) v2 @kind l2i;
  #L2ffae2.  v0:= v1[v0] @kind object;
  #L2ffae6.  return v0 @kind object;
}
procedure `void` `b`(`io.reactivex.rxjava3.internal.schedulers.b$b` v4 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/b$b;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2ffb3c.  v0:= v4.`io.reactivex.rxjava3.internal.schedulers.b$b.b` @type ^`io.reactivex.rxjava3.internal.schedulers.b$c`[] @kind object;
  #L2ffb40.  v1:= length @variable v0;
  #L2ffb42.  v2:= 0I;
  #L2ffb44.  if v2 >= v1 then goto L2ffb58;
  #L2ffb48.  v3:= v0[v2] @kind object;
  #L2ffb4c.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/internal/schedulers/e;.dispose:()V` @kind virtual;
  #L2ffb52.  v2:= v2 + 1;
  #L2ffb56.  goto L2ffb44;
  #L2ffb58.  return @kind void;
}
