record `io.reactivex.rxjava3.internal.schedulers.b` @kind class @AccessFlag PUBLIC_FINAL extends `fd.g` @kind class {
  `java.util.concurrent.ThreadFactory` `io.reactivex.rxjava3.internal.schedulers.b.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.schedulers.b.b` @AccessFlag FINAL;
}
global `io.reactivex.rxjava3.internal.schedulers.b$b` `@@io.reactivex.rxjava3.internal.schedulers.b.c` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.internal.schedulers.f` `@@io.reactivex.rxjava3.internal.schedulers.b.d` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.rxjava3.internal.schedulers.b.e` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.internal.schedulers.b$c` `@@io.reactivex.rxjava3.internal.schedulers.b.f` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/schedulers/b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2ffc0c.  call temp:= `getRuntime`() @signature `Ljava/lang/Runtime;.getRuntime:()Ljava/lang/Runtime;` @kind static;
  #L2ffc12.  v0:= temp @kind object;
  #L2ffc14.  call temp:= `availableProcessors`(v0) @signature `Ljava/lang/Runtime;.availableProcessors:()I` @kind virtual;
  #L2ffc1a.  v0:= temp;
  #L2ffc1c.  v1:= "rx3.computation-threads" @kind object;
  #L2ffc20.  v2:= 0I;
  #L2ffc22.  call temp:= `getInteger`(v1, v2) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L2ffc28.  v1:= temp @kind object;
  #L2ffc2a.  call temp:= `intValue`(v1) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L2ffc30.  v1:= temp;
  #L2ffc32.  call temp:= `d`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/b;.d:(II)I` @kind static;
  #L2ffc38.  v0:= temp;
  #L2ffc3a.  `@@io.reactivex.rxjava3.internal.schedulers.b.e` @type ^`int` := v0;
  #L2ffc3e.  v0:= new `io.reactivex.rxjava3.internal.schedulers.b$c`;
  #L2ffc42.  v1:= new `io.reactivex.rxjava3.internal.schedulers.f`;
  #L2ffc46.  v3:= "RxComputationShutdown" @kind object;
  #L2ffc4a.  call `<init>`(v1, v3) @signature `Lio/reactivex/rxjava3/internal/schedulers/f;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ffc50.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/b$c;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L2ffc56.  `@@io.reactivex.rxjava3.internal.schedulers.b.f` @type ^`io.reactivex.rxjava3.internal.schedulers.b$c` := v0 @kind object;
  #L2ffc5a.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/e;.dispose:()V` @kind virtual;
  #L2ffc60.  v0:= "rx3.computation-priority" @kind object;
  #L2ffc64.  v1:= 5I;
  #L2ffc66.  call temp:= `getInteger`(v0, v1) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L2ffc6c.  v0:= temp @kind object;
  #L2ffc6e.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L2ffc74.  v0:= temp;
  #L2ffc76.  v1:= 10I;
  #L2ffc7a.  call temp:= `min`(v1, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L2ffc80.  v0:= temp;
  #L2ffc82.  v1:= 1I;
  #L2ffc84.  call temp:= `max`(v1, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L2ffc8a.  v0:= temp;
  #L2ffc8c.  v3:= new `io.reactivex.rxjava3.internal.schedulers.f`;
  #L2ffc90.  v4:= "RxComputationThreadPool" @kind object;
  #L2ffc94.  call `<init>`(v3, v4, v0, v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/f;.<init>:(Ljava/lang/String;IZ)V` @kind direct;
  #L2ffc9a.  `@@io.reactivex.rxjava3.internal.schedulers.b.d` @type ^`io.reactivex.rxjava3.internal.schedulers.f` := v3 @kind object;
  #L2ffc9e.  v0:= new `io.reactivex.rxjava3.internal.schedulers.b$b`;
  #L2ffca2.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/rxjava3/internal/schedulers/b$b;.<init>:(ILjava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L2ffca8.  `@@io.reactivex.rxjava3.internal.schedulers.b.c` @type ^`io.reactivex.rxjava3.internal.schedulers.b$b` := v0 @kind object;
  #L2ffcac.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/b$b;.b:()V` @kind virtual;
  #L2ffcb2.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.schedulers.b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2ffcc4.  v0:= `@@io.reactivex.rxjava3.internal.schedulers.b.d` @type ^`io.reactivex.rxjava3.internal.schedulers.f` @kind object;
  #L2ffcc8.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/b;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L2ffcce.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.schedulers.b` v1 @kind this, `java.util.concurrent.ThreadFactory` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/b;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2ffce0.  call `<init>`(v1) @signature `Lfd/g;.<init>:()V` @kind direct;
  #L2ffce6.  v1.`io.reactivex.rxjava3.internal.schedulers.b.a` @type ^`java.util.concurrent.ThreadFactory` := v2 @kind object;
  #L2ffcea.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L2ffcee.  v0:= `@@io.reactivex.rxjava3.internal.schedulers.b.c` @type ^`io.reactivex.rxjava3.internal.schedulers.b$b` @kind object;
  #L2ffcf2.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L2ffcf8.  v1.`io.reactivex.rxjava3.internal.schedulers.b.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L2ffcfc.  call `e`(v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/b;.e:()V` @kind virtual;
  #L2ffd02.  return @kind void;
}
procedure `int` `d`(`int` v0 , `int` v1 ) @signature `Lio/reactivex/rxjava3/internal/schedulers/b;.d:(II)I` @AccessFlag STATIC {
    temp;

  #L2ffbb8.  if v1 <= 0 then goto L2ffbc4;
  #L2ffbbc.  if v1 <= v0 then goto L2ffbc2;
  #L2ffbc0.  goto L2ffbc4;
  #L2ffbc2.  v0:= v1;
  #L2ffbc4.  return v0;
}
procedure `fd.g$b` `a`(`io.reactivex.rxjava3.internal.schedulers.b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/b;.a:()Lfd/g$b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2ffb84.  v0:= new `io.reactivex.rxjava3.internal.schedulers.b$a`;
  #L2ffb88.  v1:= v2.`io.reactivex.rxjava3.internal.schedulers.b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2ffb8c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2ffb92.  v1:= temp @kind object;
  #L2ffb94.  v1:= (`io.reactivex.rxjava3.internal.schedulers.b$b`) v1 @kind object;
  #L2ffb98.  call temp:= `a`(v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/b$b;.a:()Lio/reactivex/rxjava3/internal/schedulers/b$c;` @kind virtual;
  #L2ffb9e.  v1:= temp @kind object;
  #L2ffba0.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/b$a;.<init>:(Lio/reactivex/rxjava3/internal/schedulers/b$c;)V` @kind direct;
  #L2ffba6.  return v0 @kind object;
}
procedure `io.reactivex.rxjava3.disposables.c` `c`(`io.reactivex.rxjava3.internal.schedulers.b` v1 @kind this, `java.lang.Runnable` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/b;.c:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ffbd8.  v0:= v1.`io.reactivex.rxjava3.internal.schedulers.b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2ffbdc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2ffbe2.  v0:= temp @kind object;
  #L2ffbe4.  v0:= (`io.reactivex.rxjava3.internal.schedulers.b$b`) v0 @kind object;
  #L2ffbe8.  call temp:= `a`(v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/b$b;.a:()Lio/reactivex/rxjava3/internal/schedulers/b$c;` @kind virtual;
  #L2ffbee.  v0:= temp @kind object;
  #L2ffbf0.  call temp:= `e`(v0, v2, v3, v5) @signature `Lio/reactivex/rxjava3/internal/schedulers/e;.e:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/rxjava3/disposables/c;` @kind virtual;
  #L2ffbf6.  v2:= temp @kind object;
  #L2ffbf8.  return v2 @kind object;
}
procedure `void` `e`(`io.reactivex.rxjava3.internal.schedulers.b` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/b;.e:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2ffd14.  v0:= new `io.reactivex.rxjava3.internal.schedulers.b$b`;
  #L2ffd18.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.b.e` @type ^`int`;
  #L2ffd1c.  v2:= v3.`io.reactivex.rxjava3.internal.schedulers.b.a` @type ^`java.util.concurrent.ThreadFactory` @kind object;
  #L2ffd20.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/rxjava3/internal/schedulers/b$b;.<init>:(ILjava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L2ffd26.  v1:= v3.`io.reactivex.rxjava3.internal.schedulers.b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2ffd2a.  v2:= `@@io.reactivex.rxjava3.internal.schedulers.b.c` @type ^`io.reactivex.rxjava3.internal.schedulers.b$b` @kind object;
  #L2ffd2e.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2ffd34.  v1:= temp;
  #L2ffd36.  if v1 != 0 then goto L2ffd40;
  #L2ffd3a.  call `b`(v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/b$b;.b:()V` @kind virtual;
  #L2ffd40.  return @kind void;
}
