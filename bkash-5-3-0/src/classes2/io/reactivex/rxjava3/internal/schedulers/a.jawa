record `io.reactivex.rxjava3.internal.schedulers.a` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.rxjava3.disposables.c` @kind interface {
  `java.lang.Runnable` `io.reactivex.rxjava3.internal.schedulers.a.runnable` @AccessFlag PROTECTED_FINAL;
  `java.lang.Thread` `io.reactivex.rxjava3.internal.schedulers.a.runner` @AccessFlag PROTECTED;
}
global `java.util.concurrent.FutureTask` `@@io.reactivex.rxjava3.internal.schedulers.a.DISPOSED` @AccessFlag PROTECTED_STATIC_FINAL;
global `java.util.concurrent.FutureTask` `@@io.reactivex.rxjava3.internal.schedulers.a.FINISHED` @AccessFlag PROTECTED_STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.schedulers.a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/schedulers/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L2ff8c0.  v0:= new `java.util.concurrent.FutureTask`;
  #L2ff8c4.  v1:= `@@id.a.a` @type ^`java.lang.Runnable` @kind object;
  #L2ff8c8.  v2:= 0I;
  #L2ff8ca.  call `<init>`(v0, v1, v2) @signature `Ljava/util/concurrent/FutureTask;.<init>:(Ljava/lang/Runnable;Ljava/lang/Object;)V` @kind direct;
  #L2ff8d0.  `@@io.reactivex.rxjava3.internal.schedulers.a.FINISHED` @type ^`java.util.concurrent.FutureTask` := v0 @kind object;
  #L2ff8d4.  v0:= new `java.util.concurrent.FutureTask`;
  #L2ff8d8.  call `<init>`(v0, v1, v2) @signature `Ljava/util/concurrent/FutureTask;.<init>:(Ljava/lang/Runnable;Ljava/lang/Object;)V` @kind direct;
  #L2ff8de.  `@@io.reactivex.rxjava3.internal.schedulers.a.DISPOSED` @type ^`java.util.concurrent.FutureTask` := v0 @kind object;
  #L2ff8e2.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.schedulers.a` v0 @kind this, `java.lang.Runnable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/a;.<init>:(Ljava/lang/Runnable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2ff8f4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L2ff8fa.  v0.`io.reactivex.rxjava3.internal.schedulers.a.runnable` @type ^`java.lang.Runnable` := v1 @kind object;
  #L2ff8fe.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.schedulers.a` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/a;.dispose:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2ff910.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2ff916.  v0:= temp @kind object;
  #L2ff918.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L2ff91c.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.a.FINISHED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L2ff920.  if v0 == v1 then goto L2ff958;
  #L2ff924.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.a.DISPOSED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L2ff928.  if v0 == v1 then goto L2ff958;
  #L2ff92c.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2ff932.  v1:= temp;
  #L2ff934.  if v1 == 0 then goto L2ff958;
  #L2ff938.  if v0 == 0 then goto L2ff958;
  #L2ff93c.  v1:= v3.`io.reactivex.rxjava3.internal.schedulers.a.runner` @type ^`java.lang.Thread` @kind object;
  #L2ff940.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L2ff946.  v2:= temp @kind object;
  #L2ff948.  if v1 == v2 then goto L2ff950;
  #L2ff94c.  v1:= 1I;
  #L2ff94e.  goto L2ff952;
  #L2ff950.  v1:= 0I;
  #L2ff952.  call temp:= `cancel`(v0, v1) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L2ff958.  return @kind void;
}
procedure `java.lang.Runnable` `getWrappedRunnable`(`io.reactivex.rxjava3.internal.schedulers.a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/a;.getWrappedRunnable:()Ljava/lang/Runnable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ff8a8.  v0:= v1.`io.reactivex.rxjava3.internal.schedulers.a.runnable` @type ^`java.lang.Runnable` @kind object;
  #L2ff8ac.  return v0 @kind object;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.schedulers.a` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/a;.isDisposed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2ff870.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2ff876.  v0:= temp @kind object;
  #L2ff878.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L2ff87c.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.a.FINISHED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L2ff880.  if v0 == v1 then goto L2ff892;
  #L2ff884.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.a.DISPOSED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L2ff888.  if v0 != v1 then goto L2ff88e;
  #L2ff88c.  goto L2ff892;
  #L2ff88e.  v0:= 0I;
  #L2ff890.  goto L2ff894;
  #L2ff892.  v0:= 1I;
  #L2ff894.  return v0;
}
procedure `void` `setFuture`(`io.reactivex.rxjava3.internal.schedulers.a` v2 @kind this, `java.util.concurrent.Future` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/a;.setFuture:(Ljava/util/concurrent/Future;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2ff96c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2ff972.  v0:= temp @kind object;
  #L2ff974.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L2ff978.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.a.FINISHED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L2ff97c.  if v0 != v1 then goto L2ff982;
  #L2ff980.  goto L2ff9b4;
  #L2ff982.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.a.DISPOSED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L2ff986.  if v0 != v1 then goto L2ff9a8;
  #L2ff98a.  v0:= v2.`io.reactivex.rxjava3.internal.schedulers.a.runner` @type ^`java.lang.Thread` @kind object;
  #L2ff98e.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L2ff994.  v1:= temp @kind object;
  #L2ff996.  if v0 == v1 then goto L2ff99e;
  #L2ff99a.  v0:= 1I;
  #L2ff99c.  goto L2ff9a0;
  #L2ff99e.  v0:= 0I;
  #L2ff9a0.  call temp:= `cancel`(v3, v0) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L2ff9a6.  goto L2ff9b4;
  #L2ff9a8.  call temp:= `compareAndSet`(v2, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L2ff9ae.  v0:= temp;
  #L2ff9b0.  if v0 == 0 then goto L2ff96c;
  #L2ff9b4.  return @kind void;
}
