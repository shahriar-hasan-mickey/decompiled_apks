record `io.reactivex.rxjava3.internal.schedulers.c` @kind class @AccessFlag PUBLIC_FINAL extends `fd.g` @kind class {
  `java.util.concurrent.ThreadFactory` `io.reactivex.rxjava3.internal.schedulers.c.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.schedulers.c.b` @AccessFlag FINAL;
}
global `io.reactivex.rxjava3.internal.schedulers.f` `@@io.reactivex.rxjava3.internal.schedulers.c.c` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.internal.schedulers.f` `@@io.reactivex.rxjava3.internal.schedulers.c.d` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.schedulers.c.e` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.TimeUnit` `@@io.reactivex.rxjava3.internal.schedulers.c.f` @AccessFlag PRIVATE_STATIC_FINAL;
global `io.reactivex.rxjava3.internal.schedulers.c$c` `@@io.reactivex.rxjava3.internal.schedulers.c.g` @AccessFlag STATIC_FINAL;
global `io.reactivex.rxjava3.internal.schedulers.c$a` `@@io.reactivex.rxjava3.internal.schedulers.c.h` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/rxjava3/internal/schedulers/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L300094.  v0:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L300098.  `@@io.reactivex.rxjava3.internal.schedulers.c.f` @type ^`java.util.concurrent.TimeUnit` := v0 @kind object;
  #L30009c.  v0:= "rx3.io-keep-alive-time" @kind object;
  #L3000a0.  v1:= 60L;
  #L3000a4.  call temp:= `getLong`(v0, v1) @signature `Ljava/lang/Long;.getLong:(Ljava/lang/String;J)Ljava/lang/Long;` @kind static;
  #L3000aa.  v0:= temp @kind object;
  #L3000ac.  call temp:= `longValue`(v0) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L3000b2.  v0:= temp @kind wide;
  #L3000b4.  `@@io.reactivex.rxjava3.internal.schedulers.c.e` @type ^`long` := v0 @kind wide;
  #L3000b8.  v0:= new `io.reactivex.rxjava3.internal.schedulers.c$c`;
  #L3000bc.  v1:= new `io.reactivex.rxjava3.internal.schedulers.f`;
  #L3000c0.  v2:= "RxCachedThreadSchedulerShutdown" @kind object;
  #L3000c4.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/schedulers/f;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3000ca.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/c$c;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L3000d0.  `@@io.reactivex.rxjava3.internal.schedulers.c.g` @type ^`io.reactivex.rxjava3.internal.schedulers.c$c` := v0 @kind object;
  #L3000d4.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/e;.dispose:()V` @kind virtual;
  #L3000da.  v0:= "rx3.io-priority" @kind object;
  #L3000de.  v1:= 5I;
  #L3000e0.  call temp:= `getInteger`(v0, v1) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L3000e6.  v0:= temp @kind object;
  #L3000e8.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L3000ee.  v0:= temp;
  #L3000f0.  v1:= 10I;
  #L3000f4.  call temp:= `min`(v1, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3000fa.  v0:= temp;
  #L3000fc.  v1:= 1I;
  #L3000fe.  call temp:= `max`(v1, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L300104.  v0:= temp;
  #L300106.  v1:= new `io.reactivex.rxjava3.internal.schedulers.f`;
  #L30010a.  v2:= "RxCachedThreadScheduler" @kind object;
  #L30010e.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/f;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L300114.  `@@io.reactivex.rxjava3.internal.schedulers.c.c` @type ^`io.reactivex.rxjava3.internal.schedulers.f` := v1 @kind object;
  #L300118.  v2:= new `io.reactivex.rxjava3.internal.schedulers.f`;
  #L30011c.  v3:= "RxCachedWorkerPoolEvictor" @kind object;
  #L300120.  call `<init>`(v2, v3, v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/f;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L300126.  `@@io.reactivex.rxjava3.internal.schedulers.c.d` @type ^`io.reactivex.rxjava3.internal.schedulers.f` := v2 @kind object;
  #L30012a.  v0:= new `io.reactivex.rxjava3.internal.schedulers.c$a`;
  #L30012e.  v2:= 0L;
  #L300132.  v4:= 0I;
  #L300134.  call `<init>`(v0, v2, v4, v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/c$a;.<init>:(JLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L30013a.  `@@io.reactivex.rxjava3.internal.schedulers.c.h` @type ^`io.reactivex.rxjava3.internal.schedulers.c$a` := v0 @kind object;
  #L30013e.  call `e`(v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/c$a;.e:()V` @kind virtual;
  #L300144.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.schedulers.c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/c;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L300158.  v0:= `@@io.reactivex.rxjava3.internal.schedulers.c.c` @type ^`io.reactivex.rxjava3.internal.schedulers.f` @kind object;
  #L30015c.  call `<init>`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/c;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L300162.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.schedulers.c` v1 @kind this, `java.util.concurrent.ThreadFactory` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/c;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L300174.  call `<init>`(v1) @signature `Lfd/g;.<init>:()V` @kind direct;
  #L30017a.  v1.`io.reactivex.rxjava3.internal.schedulers.c.a` @type ^`java.util.concurrent.ThreadFactory` := v2 @kind object;
  #L30017e.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L300182.  v0:= `@@io.reactivex.rxjava3.internal.schedulers.c.h` @type ^`io.reactivex.rxjava3.internal.schedulers.c$a` @kind object;
  #L300186.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L30018c.  v1.`io.reactivex.rxjava3.internal.schedulers.c.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L300190.  call `d`(v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/c;.d:()V` @kind virtual;
  #L300196.  return @kind void;
}
procedure `fd.g$b` `a`(`io.reactivex.rxjava3.internal.schedulers.c` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/c;.a:()Lfd/g$b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L300068.  v0:= new `io.reactivex.rxjava3.internal.schedulers.c$b`;
  #L30006c.  v1:= v2.`io.reactivex.rxjava3.internal.schedulers.c.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L300070.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L300076.  v1:= temp @kind object;
  #L300078.  v1:= (`io.reactivex.rxjava3.internal.schedulers.c$a`) v1 @kind object;
  #L30007c.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/c$b;.<init>:(Lio/reactivex/rxjava3/internal/schedulers/c$a;)V` @kind direct;
  #L300082.  return v0 @kind object;
}
procedure `void` `d`(`io.reactivex.rxjava3.internal.schedulers.c` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/c;.d:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3001a8.  v0:= new `io.reactivex.rxjava3.internal.schedulers.c$a`;
  #L3001ac.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.c.e` @type ^`long` @kind wide;
  #L3001b0.  v3:= `@@io.reactivex.rxjava3.internal.schedulers.c.f` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L3001b4.  v4:= v5.`io.reactivex.rxjava3.internal.schedulers.c.a` @type ^`java.util.concurrent.ThreadFactory` @kind object;
  #L3001b8.  call `<init>`(v0, v1, v3, v4) @signature `Lio/reactivex/rxjava3/internal/schedulers/c$a;.<init>:(JLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L3001be.  v1:= v5.`io.reactivex.rxjava3.internal.schedulers.c.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L3001c2.  v2:= `@@io.reactivex.rxjava3.internal.schedulers.c.h` @type ^`io.reactivex.rxjava3.internal.schedulers.c$a` @kind object;
  #L3001c6.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L3001cc.  v1:= temp;
  #L3001ce.  if v1 != 0 then goto L3001d8;
  #L3001d2.  call `e`(v0) @signature `Lio/reactivex/rxjava3/internal/schedulers/c$a;.e:()V` @kind virtual;
  #L3001d8.  return @kind void;
}
