record `io.reactivex.rxjava3.internal.schedulers.k$a` @kind class @AccessFlag FINAL extends `java.lang.Runnable` @kind interface {
  `java.lang.Runnable` `io.reactivex.rxjava3.internal.schedulers.k$a.g` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.rxjava3.internal.schedulers.k$c` `io.reactivex.rxjava3.internal.schedulers.k$a.h` @AccessFlag PRIVATE_FINAL;
  `long` `io.reactivex.rxjava3.internal.schedulers.k$a.i` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.schedulers.k$a` v0 @kind this, `java.lang.Runnable` v1 @kind object, `io.reactivex.rxjava3.internal.schedulers.k$c` v2 @kind object, `long` v3 ) @signature `Lio/reactivex/rxjava3/internal/schedulers/k$a;.<init>:(Ljava/lang/Runnable;Lio/reactivex/rxjava3/internal/schedulers/k$c;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L300e1c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L300e22.  v0.`io.reactivex.rxjava3.internal.schedulers.k$a.g` @type ^`java.lang.Runnable` := v1 @kind object;
  #L300e26.  v0.`io.reactivex.rxjava3.internal.schedulers.k$a.h` @type ^`io.reactivex.rxjava3.internal.schedulers.k$c` := v2 @kind object;
  #L300e2a.  v0.`io.reactivex.rxjava3.internal.schedulers.k$a.i` @type ^`long` := v3 @kind wide;
  #L300e2e.  return @kind void;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.schedulers.k$a` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/k$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L300e40.  v0:= v5.`io.reactivex.rxjava3.internal.schedulers.k$a.h` @type ^`io.reactivex.rxjava3.internal.schedulers.k$c` @kind object;
  #L300e44.  v0:= v0.`io.reactivex.rxjava3.internal.schedulers.k$c.j` @type ^`boolean` @kind boolean;
  #L300e48.  if v0 != 0 then goto L300ea0;
  #L300e4c.  v0:= v5.`io.reactivex.rxjava3.internal.schedulers.k$a.h` @type ^`io.reactivex.rxjava3.internal.schedulers.k$c` @kind object;
  #L300e50.  v1:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L300e54.  call temp:= `a`(v0, v1) @signature `Lfd/g$b;.a:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L300e5a.  v0:= temp @kind wide;
  #L300e5c.  v2:= v5.`io.reactivex.rxjava3.internal.schedulers.k$a.i` @type ^`long` @kind wide;
  #L300e60.  v4:= lcmp(v2, v0);
  #L300e64.  if v4 <= 0 then goto L300e8a;
  #L300e68.  v2:= v2 - v0 @kind long;
  #L300e6a.  call `sleep`(v2) @signature `Ljava/lang/Thread;.sleep:(J)V` @kind static;
  #L300e70.  goto L300e8a;
  #L300e72.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L300e74.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L300e7a.  v1:= temp @kind object;
  #L300e7c.  call `interrupt`(v1) @signature `Ljava/lang/Thread;.interrupt:()V` @kind virtual;
  #L300e82.  call `k`(v0) @signature `Lld/a;.k:(Ljava/lang/Throwable;)V` @kind static;
  #L300e88.  return @kind void;
  #L300e8a.  v0:= v5.`io.reactivex.rxjava3.internal.schedulers.k$a.h` @type ^`io.reactivex.rxjava3.internal.schedulers.k$c` @kind object;
  #L300e8e.  v0:= v0.`io.reactivex.rxjava3.internal.schedulers.k$c.j` @type ^`boolean` @kind boolean;
  #L300e92.  if v0 != 0 then goto L300ea0;
  #L300e96.  v0:= v5.`io.reactivex.rxjava3.internal.schedulers.k$a.g` @type ^`java.lang.Runnable` @kind object;
  #L300e9a.  call `run`(v0) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L300ea0.  return @kind void;
  catch `java.lang.InterruptedException` @[L300e6a..L300e70] goto L300e72;
}
