record `io.reactivex.rxjava3.internal.schedulers.k$b` @kind class @AccessFlag FINAL extends `java.lang.Comparable` @kind interface {
  `java.lang.Runnable` `io.reactivex.rxjava3.internal.schedulers.k$b.g` @AccessFlag FINAL;
  `long` `io.reactivex.rxjava3.internal.schedulers.k$b.h` @AccessFlag FINAL;
  `int` `io.reactivex.rxjava3.internal.schedulers.k$b.i` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.schedulers.k$b.j` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.schedulers.k$b` v0 @kind this, `java.lang.Runnable` v1 @kind object, `java.lang.Long` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/rxjava3/internal/schedulers/k$b;.<init>:(Ljava/lang/Runnable;Ljava/lang/Long;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L300f1c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L300f22.  v0.`io.reactivex.rxjava3.internal.schedulers.k$b.g` @type ^`java.lang.Runnable` := v1 @kind object;
  #L300f26.  call temp:= `longValue`(v2) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L300f2c.  v1:= temp @kind wide;
  #L300f2e.  v0.`io.reactivex.rxjava3.internal.schedulers.k$b.h` @type ^`long` := v1 @kind wide;
  #L300f32.  v0.`io.reactivex.rxjava3.internal.schedulers.k$b.i` @type ^`int` := v3;
  #L300f36.  return @kind void;
}
procedure `int` `a`(`io.reactivex.rxjava3.internal.schedulers.k$b` v4 @kind this, `io.reactivex.rxjava3.internal.schedulers.k$b` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/k$b;.a:(Lio/reactivex/rxjava3/internal/schedulers/k$b;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L300ec4.  v0:= v4.`io.reactivex.rxjava3.internal.schedulers.k$b.h` @type ^`long` @kind wide;
  #L300ec8.  v2:= v5.`io.reactivex.rxjava3.internal.schedulers.k$b.h` @type ^`long` @kind wide;
  #L300ecc.  call temp:= `compare`(v0, v2) @signature `Ljava/lang/Long;.compare:(JJ)I` @kind static;
  #L300ed2.  v0:= temp;
  #L300ed4.  if v0 != 0 then goto L300eea;
  #L300ed8.  v0:= v4.`io.reactivex.rxjava3.internal.schedulers.k$b.i` @type ^`int`;
  #L300edc.  v5:= v5.`io.reactivex.rxjava3.internal.schedulers.k$b.i` @type ^`int`;
  #L300ee0.  call temp:= `compare`(v0, v5) @signature `Ljava/lang/Integer;.compare:(II)I` @kind static;
  #L300ee6.  v5:= temp;
  #L300ee8.  return v5;
  #L300eea.  return v0;
}
procedure `int` `compareTo`(`io.reactivex.rxjava3.internal.schedulers.k$b` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/k$b;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L300efc.  v1:= (`io.reactivex.rxjava3.internal.schedulers.k$b`) v1 @kind object;
  #L300f00.  call temp:= `a`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/k$b;.a:(Lio/reactivex/rxjava3/internal/schedulers/k$b;)I` @kind virtual;
  #L300f06.  v1:= temp;
  #L300f08.  return v1;
}
