record `io.reactivex.rxjava3.internal.schedulers.g` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.rxjava3.internal.schedulers.a` @kind class, `java.util.concurrent.Callable` @kind interface {
}
global `long` `@@io.reactivex.rxjava3.internal.schedulers.g.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.schedulers.g` v0 @kind this, `java.lang.Runnable` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/schedulers/g;.<init>:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L300614.  call `<init>`(v0, v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/a;.<init>:(Ljava/lang/Runnable;)V` @kind direct;
  #L30061a.  return @kind void;
}
procedure `java.lang.Object` `call`(`io.reactivex.rxjava3.internal.schedulers.g` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/g;.call:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L300584.  call temp:= `call`(v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/g;.call:()Ljava/lang/Void;` @kind virtual;
  #L30058a.  v0:= temp @kind object;
  #L30058c.  return v0 @kind object;
}
procedure `java.lang.Void` `call`(`io.reactivex.rxjava3.internal.schedulers.g` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/g;.call:()Ljava/lang/Void;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3005bc.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L3005c2.  v0:= temp @kind object;
  #L3005c4.  v3.`io.reactivex.rxjava3.internal.schedulers.a.runner` @type ^`java.lang.Thread` := v0 @kind object;
  #L3005c8.  v0:= 0I;
  #L3005ca.  v1:= v3.`io.reactivex.rxjava3.internal.schedulers.a.runnable` @type ^`java.lang.Runnable` @kind object;
  #L3005ce.  call `run`(v1) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L3005d4.  v1:= `@@io.reactivex.rxjava3.internal.schedulers.a.FINISHED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L3005d8.  call `lazySet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L3005de.  v3.`io.reactivex.rxjava3.internal.schedulers.a.runner` @type ^`java.lang.Thread` := v0 @kind object;
  #L3005e2.  return v0 @kind object;
  #L3005e4.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3005e6.  v2:= `@@io.reactivex.rxjava3.internal.schedulers.a.FINISHED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L3005ea.  call `lazySet`(v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L3005f0.  v3.`io.reactivex.rxjava3.internal.schedulers.a.runner` @type ^`java.lang.Thread` := v0 @kind object;
  #L3005f4.  throw v1;
  catch `java.lang.Throwable` @[L3005ca..L3005d4] goto L3005e4;
}
procedure `java.lang.Runnable` `getWrappedRunnable`(`io.reactivex.rxjava3.internal.schedulers.g` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/schedulers/g;.getWrappedRunnable:()Ljava/lang/Runnable;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L3005a0.  call temp:= `getWrappedRunnable`(v1) @signature `Lio/reactivex/rxjava3/internal/schedulers/a;.getWrappedRunnable:()Ljava/lang/Runnable;` @kind super;
  #L3005a6.  v0:= temp @kind object;
  #L3005a8.  return v0 @kind object;
}
