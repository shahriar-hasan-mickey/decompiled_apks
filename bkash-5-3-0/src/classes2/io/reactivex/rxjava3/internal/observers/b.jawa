record `io.reactivex.rxjava3.internal.observers.b` @kind class @AccessFlag PUBLIC extends `io.reactivex.rxjava3.internal.observers.a` @kind class {
  `fd.f` `io.reactivex.rxjava3.internal.observers.b.downstream` @AccessFlag PROTECTED_FINAL;
  `java.lang.Object` `io.reactivex.rxjava3.internal.observers.b.value` @AccessFlag PROTECTED;
}
global `int` `@@io.reactivex.rxjava3.internal.observers.b.DISPOSED` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.rxjava3.internal.observers.b.FUSED_CONSUMED` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.rxjava3.internal.observers.b.FUSED_EMPTY` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.rxjava3.internal.observers.b.FUSED_READY` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.rxjava3.internal.observers.b.TERMINATED` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.rxjava3.internal.observers.b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.observers.b` v0 @kind this, `fd.f` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/observers/b;.<init>:(Lfd/f;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2fedc0.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/observers/a;.<init>:()V` @kind direct;
  #L2fedc6.  v0.`io.reactivex.rxjava3.internal.observers.b.downstream` @type ^`fd.f` := v1 @kind object;
  #L2fedca.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.observers.b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/b;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2feddc.  v0:= 32I;
  #L2fede0.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L2fede6.  v0:= 0I;
  #L2fede8.  v1.`io.reactivex.rxjava3.internal.observers.b.value` @type ^`java.lang.Object` := v0 @kind object;
  #L2fedec.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.rxjava3.internal.observers.b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/b;.complete:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2fee00.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L2fee06.  v0:= temp;
  #L2fee08.  v0:= v0 ^& 54;
  #L2fee0c.  if v0 == 0 then goto L2fee12;
  #L2fee10.  return @kind void;
  #L2fee12.  v0:= 2I;
  #L2fee14.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L2fee1a.  v0:= v1.`io.reactivex.rxjava3.internal.observers.b.downstream` @type ^`fd.f` @kind object;
  #L2fee1e.  call `onComplete`(v0) @signature `Lfd/f;.onComplete:()V` @kind interface;
  #L2fee24.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.rxjava3.internal.observers.b` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/observers/b;.complete:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2fee38.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L2fee3e.  v0:= temp;
  #L2fee40.  v1:= v0 ^& 54;
  #L2fee44.  if v1 == 0 then goto L2fee4a;
  #L2fee48.  return @kind void;
  #L2fee4a.  v1:= v3.`io.reactivex.rxjava3.internal.observers.b.downstream` @type ^`fd.f` @kind object;
  #L2fee4e.  v2:= 8I;
  #L2fee52.  if v0 != v2 then goto L2fee6e;
  #L2fee56.  v3.`io.reactivex.rxjava3.internal.observers.b.value` @type ^`java.lang.Object` := v4 @kind object;
  #L2fee5a.  v4:= 16I;
  #L2fee5e.  call `lazySet`(v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L2fee64.  v4:= 0I;
  #L2fee66.  call `onNext`(v1, v4) @signature `Lfd/f;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L2fee6c.  goto L2fee7c;
  #L2fee6e.  v0:= 2I;
  #L2fee70.  call `lazySet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L2fee76.  call `onNext`(v1, v4) @signature `Lfd/f;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L2fee7c.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L2fee82.  v4:= temp;
  #L2fee84.  v0:= 4I;
  #L2fee86.  if v4 == v0 then goto L2fee90;
  #L2fee8a.  call `onComplete`(v1) @signature `Lfd/f;.onComplete:()V` @kind interface;
  #L2fee90.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.observers.b` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2feea4.  v0:= 4I;
  #L2feea6.  call `set`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L2feeac.  v0:= 0I;
  #L2feeae.  v1.`io.reactivex.rxjava3.internal.observers.b.value` @type ^`java.lang.Object` := v0 @kind object;
  #L2feeb2.  return @kind void;
}
procedure `void` `error`(`io.reactivex.rxjava3.internal.observers.b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/observers/b;.error:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2feec4.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L2feeca.  v0:= temp;
  #L2feecc.  v0:= v0 ^& 54;
  #L2feed0.  if v0 == 0 then goto L2feedc;
  #L2feed4.  call `k`(v2) @signature `Lld/a;.k:(Ljava/lang/Throwable;)V` @kind static;
  #L2feeda.  return @kind void;
  #L2feedc.  v0:= 2I;
  #L2feede.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L2feee4.  v0:= v1.`io.reactivex.rxjava3.internal.observers.b.downstream` @type ^`fd.f` @kind object;
  #L2feee8.  call `onError`(v0, v2) @signature `Lfd/f;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2feeee.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.observers.b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/b;.isDisposed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2fece8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L2fecee.  v0:= temp;
  #L2fecf0.  v1:= 4I;
  #L2fecf2.  if v0 != v1 then goto L2fecfa;
  #L2fecf6.  v0:= 1I;
  #L2fecf8.  goto L2fecfc;
  #L2fecfa.  v0:= 0I;
  #L2fecfc.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.observers.b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/b;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2fed10.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L2fed16.  v0:= temp;
  #L2fed18.  v1:= 16I;
  #L2fed1c.  if v0 == v1 then goto L2fed24;
  #L2fed20.  v0:= 1I;
  #L2fed22.  goto L2fed26;
  #L2fed24.  v0:= 0I;
  #L2fed26.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.observers.b` v3 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/b;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L2fed88.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L2fed8e.  v0:= temp;
  #L2fed90.  v1:= 0I;
  #L2fed92.  v2:= 16I;
  #L2fed96.  if v0 != v2 then goto L2fedae;
  #L2fed9a.  v0:= v3.`io.reactivex.rxjava3.internal.observers.b.value` @type ^`java.lang.Object` @kind object;
  #L2fed9e.  v3.`io.reactivex.rxjava3.internal.observers.b.value` @type ^`java.lang.Object` := v1 @kind object;
  #L2feda2.  v1:= 32I;
  #L2feda6.  call `lazySet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L2fedac.  return v0 @kind object;
  #L2fedae.  return v1 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.observers.b` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/observers/b;.requestFusion:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2fed60.  v0:= 2I;
  #L2fed62.  v2:= v2 ^& v0 @kind int;
  #L2fed64.  if v2 == 0 then goto L2fed74;
  #L2fed68.  v2:= 8I;
  #L2fed6c.  call `lazySet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L2fed72.  return v0;
  #L2fed74.  v2:= 0I;
  #L2fed76.  return v2;
}
procedure `boolean` `tryDispose`(`io.reactivex.rxjava3.internal.observers.b` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/b;.tryDispose:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L2fed38.  v0:= 4I;
  #L2fed3a.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L2fed40.  v1:= temp;
  #L2fed42.  if v1 == v0 then goto L2fed4a;
  #L2fed46.  v0:= 1I;
  #L2fed48.  goto L2fed4c;
  #L2fed4a.  v0:= 0I;
  #L2fed4c.  return v0;
}
