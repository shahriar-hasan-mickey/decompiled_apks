record `io.reactivex.rxjava3.internal.observers.c` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `fd.f` @kind interface, `io.reactivex.rxjava3.disposables.c` @kind interface {
  `gd.a` `io.reactivex.rxjava3.internal.observers.c.onComplete` @AccessFlag FINAL;
  `gd.c` `io.reactivex.rxjava3.internal.observers.c.onError` @AccessFlag FINAL;
  `gd.c` `io.reactivex.rxjava3.internal.observers.c.onNext` @AccessFlag FINAL;
  `gd.c` `io.reactivex.rxjava3.internal.observers.c.onSubscribe` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.observers.c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.observers.c` v0 @kind this, `gd.c` v1 @kind object, `gd.c` v2 @kind object, `gd.a` v3 @kind object, `gd.c` v4 @kind object) @signature `Lio/reactivex/rxjava3/internal/observers/c;.<init>:(Lgd/c;Lgd/c;Lgd/a;Lgd/c;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2fef4c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L2fef52.  v0.`io.reactivex.rxjava3.internal.observers.c.onNext` @type ^`gd.c` := v1 @kind object;
  #L2fef56.  v0.`io.reactivex.rxjava3.internal.observers.c.onError` @type ^`gd.c` := v2 @kind object;
  #L2fef5a.  v0.`io.reactivex.rxjava3.internal.observers.c.onComplete` @type ^`gd.a` := v3 @kind object;
  #L2fef5e.  v0.`io.reactivex.rxjava3.internal.observers.c.onSubscribe` @type ^`gd.c` := v4 @kind object;
  #L2fef62.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.observers.c` v0 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/c;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L2fef74.  call temp:= `dispose`(v0) @signature `Lhd/a;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L2fef7a.  return @kind void;
}
procedure `boolean` `hasCustomOnError`(`io.reactivex.rxjava3.internal.observers.c` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/c;.hasCustomOnError:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2fef00.  v0:= v2.`io.reactivex.rxjava3.internal.observers.c.onError` @type ^`gd.c` @kind object;
  #L2fef04.  v1:= `@@id.a.d` @type ^`gd.c` @kind object;
  #L2fef08.  if v0 == v1 then goto L2fef10;
  #L2fef0c.  v0:= 1I;
  #L2fef0e.  goto L2fef12;
  #L2fef10.  v0:= 0I;
  #L2fef12.  return v0;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.observers.c` v2 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/c;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2fef24.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2fef2a.  v0:= temp @kind object;
  #L2fef2c.  v1:= `@@hd.a.DISPOSED` @type ^`hd.a` @kind object;
  #L2fef30.  if v0 != v1 then goto L2fef38;
  #L2fef34.  v0:= 1I;
  #L2fef36.  goto L2fef3a;
  #L2fef38.  v0:= 0I;
  #L2fef3a.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.observers.c` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/observers/c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2fef8c.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/rxjava3/internal/observers/c;.isDisposed:()Z` @kind virtual;
  #L2fef92.  v0:= temp;
  #L2fef94.  if v0 != 0 then goto L2fefbc;
  #L2fef98.  v0:= `@@hd.a.DISPOSED` @type ^`hd.a` @kind object;
  #L2fef9c.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L2fefa2.  v0:= v1.`io.reactivex.rxjava3.internal.observers.c.onComplete` @type ^`gd.a` @kind object;
  #L2fefa6.  call `run`(v0) @signature `Lgd/a;.run:()V` @kind interface;
  #L2fefac.  goto L2fefbc;
  #L2fefae.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2fefb0.  call `b`(v0) @signature `Lio/reactivex/rxjava3/exceptions/b;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L2fefb6.  call `k`(v0) @signature `Lld/a;.k:(Ljava/lang/Throwable;)V` @kind static;
  #L2fefbc.  return @kind void;
  catch `java.lang.Throwable` @[L2fefa2..L2fefac] goto L2fefae;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.observers.c` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/observers/c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2fefdc.  call temp:= `isDisposed`(v4) @signature `Lio/reactivex/rxjava3/internal/observers/c;.isDisposed:()Z` @kind virtual;
  #L2fefe2.  v0:= temp;
  #L2fefe4.  if v0 != 0 then goto L2ff02a;
  #L2fefe8.  v0:= `@@hd.a.DISPOSED` @type ^`hd.a` @kind object;
  #L2fefec.  call `lazySet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L2feff2.  v0:= v4.`io.reactivex.rxjava3.internal.observers.c.onError` @type ^`gd.c` @kind object;
  #L2feff6.  call `accept`(v0, v5) @signature `Lgd/c;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L2feffc.  goto L2ff030;
  #L2feffe.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2ff000.  call `b`(v0) @signature `Lio/reactivex/rxjava3/exceptions/b;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L2ff006.  v1:= new `io.reactivex.rxjava3.exceptions.a`;
  #L2ff00a.  v2:= 2I;
  #L2ff00c.  v2:= new `java.lang.Throwable`[v2];
  #L2ff010.  v3:= 0I;
  #L2ff012.  v2[v3]:= v5 @kind object;
  #L2ff016.  v5:= 1I;
  #L2ff018.  v2[v5]:= v0 @kind object;
  #L2ff01c.  call `<init>`(v1, v2) @signature `Lio/reactivex/rxjava3/exceptions/a;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L2ff022.  call `k`(v1) @signature `Lld/a;.k:(Ljava/lang/Throwable;)V` @kind static;
  #L2ff028.  goto L2ff030;
  #L2ff02a.  call `k`(v5) @signature `Lld/a;.k:(Ljava/lang/Throwable;)V` @kind static;
  #L2ff030.  return @kind void;
  catch `java.lang.Throwable` @[L2feff2..L2feffc] goto L2feffe;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.observers.c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/observers/c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ff050.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/rxjava3/internal/observers/c;.isDisposed:()Z` @kind virtual;
  #L2ff056.  v0:= temp;
  #L2ff058.  if v0 != 0 then goto L2ff088;
  #L2ff05c.  v0:= v1.`io.reactivex.rxjava3.internal.observers.c.onNext` @type ^`gd.c` @kind object;
  #L2ff060.  call `accept`(v0, v2) @signature `Lgd/c;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L2ff066.  goto L2ff088;
  #L2ff068.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2ff06a.  call `b`(v2) @signature `Lio/reactivex/rxjava3/exceptions/b;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L2ff070.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2ff076.  v0:= temp @kind object;
  #L2ff078.  v0:= (`io.reactivex.rxjava3.disposables.c`) v0 @kind object;
  #L2ff07c.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/c;.dispose:()V` @kind interface;
  #L2ff082.  call `onError`(v1, v2) @signature `Lio/reactivex/rxjava3/internal/observers/c;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L2ff088.  return @kind void;
  catch `java.lang.Throwable` @[L2ff05c..L2ff066] goto L2ff068;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.observers.c` v1 @kind this, `io.reactivex.rxjava3.disposables.c` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/observers/c;.onSubscribe:(Lio/reactivex/rxjava3/disposables/c;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ff0a8.  call temp:= `setOnce`(v1, v2) @signature `Lhd/a;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/c;)Z` @kind static;
  #L2ff0ae.  v0:= temp;
  #L2ff0b0.  if v0 == 0 then goto L2ff0d4;
  #L2ff0b4.  v0:= v1.`io.reactivex.rxjava3.internal.observers.c.onSubscribe` @type ^`gd.c` @kind object;
  #L2ff0b8.  call `accept`(v0, v1) @signature `Lgd/c;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L2ff0be.  goto L2ff0d4;
  #L2ff0c0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2ff0c2.  call `b`(v0) @signature `Lio/reactivex/rxjava3/exceptions/b;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L2ff0c8.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/c;.dispose:()V` @kind interface;
  #L2ff0ce.  call `onError`(v1, v0) @signature `Lio/reactivex/rxjava3/internal/observers/c;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L2ff0d4.  return @kind void;
  catch `java.lang.Throwable` @[L2ff0b4..L2ff0be] goto L2ff0c0;
}
