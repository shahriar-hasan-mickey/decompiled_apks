record `io.reactivex.rxjava3.internal.operators.observable.d$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `fd.f` @kind interface, `io.reactivex.rxjava3.disposables.c` @kind interface {
  `fd.f` `io.reactivex.rxjava3.internal.operators.observable.d$a.downstream` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.rxjava3.internal.operators.observable.d$a.upstream` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.d$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.d$a` v0 @kind this, `fd.f` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/d$a;.<init>:(Lfd/f;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2ff6f8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L2ff6fe.  v0.`io.reactivex.rxjava3.internal.operators.observable.d$a.downstream` @type ^`fd.f` := v1 @kind object;
  #L2ff702.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L2ff706.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L2ff70c.  v0.`io.reactivex.rxjava3.internal.operators.observable.d$a.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L2ff710.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.d$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/d$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ff724.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.d$a.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2ff728.  call temp:= `dispose`(v0) @signature `Lhd/a;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L2ff72e.  call temp:= `dispose`(v1) @signature `Lhd/a;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L2ff734.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.d$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/d$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ff6d0.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2ff6d6.  v0:= temp @kind object;
  #L2ff6d8.  v0:= (`io.reactivex.rxjava3.disposables.c`) v0 @kind object;
  #L2ff6dc.  call temp:= `isDisposed`(v0) @signature `Lhd/a;.isDisposed:(Lio/reactivex/rxjava3/disposables/c;)Z` @kind static;
  #L2ff6e2.  v0:= temp;
  #L2ff6e4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.d$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/d$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ff748.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.d$a.downstream` @type ^`fd.f` @kind object;
  #L2ff74c.  call `onComplete`(v0) @signature `Lfd/f;.onComplete:()V` @kind interface;
  #L2ff752.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.d$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/d$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ff764.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.d$a.downstream` @type ^`fd.f` @kind object;
  #L2ff768.  call `onError`(v0, v2) @signature `Lfd/f;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2ff76e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.d$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/d$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ff780.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.d$a.downstream` @type ^`fd.f` @kind object;
  #L2ff784.  call `onNext`(v0, v2) @signature `Lfd/f;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L2ff78a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.d$a` v1 @kind this, `io.reactivex.rxjava3.disposables.c` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/d$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/c;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ff79c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.d$a.upstream` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L2ff7a0.  call temp:= `setOnce`(v0, v2) @signature `Lhd/a;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/c;)Z` @kind static;
  #L2ff7a6.  return @kind void;
}
procedure `void` `setDisposable`(`io.reactivex.rxjava3.internal.operators.observable.d$a` v0 @kind this, `io.reactivex.rxjava3.disposables.c` v1 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/d$a;.setDisposable:(Lio/reactivex/rxjava3/disposables/c;)V` @AccessFlag  {
    temp;

  #L2ff7b8.  call temp:= `setOnce`(v0, v1) @signature `Lhd/a;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/rxjava3/disposables/c;)Z` @kind static;
  #L2ff7be.  return @kind void;
}
