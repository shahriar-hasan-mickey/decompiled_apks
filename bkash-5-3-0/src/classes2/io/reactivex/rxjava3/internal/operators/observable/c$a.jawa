record `io.reactivex.rxjava3.internal.operators.observable.c$a` @kind class @AccessFlag FINAL extends `io.reactivex.rxjava3.internal.observers.a` @kind class, `fd.f` @kind interface, `java.lang.Runnable` @kind interface {
  `int` `io.reactivex.rxjava3.internal.operators.observable.c$a.bufferSize` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.c$a.delayError` @AccessFlag FINAL;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.c$a.disposed` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.c$a.done` @AccessFlag VOLATILE;
  `fd.f` `io.reactivex.rxjava3.internal.operators.observable.c$a.downstream` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.rxjava3.internal.operators.observable.c$a.error` @AccessFlag ;
  `boolean` `io.reactivex.rxjava3.internal.operators.observable.c$a.outputFused` @AccessFlag ;
  `jd.c` `io.reactivex.rxjava3.internal.operators.observable.c$a.queue` @AccessFlag ;
  `int` `io.reactivex.rxjava3.internal.operators.observable.c$a.sourceMode` @AccessFlag ;
  `io.reactivex.rxjava3.disposables.c` `io.reactivex.rxjava3.internal.operators.observable.c$a.upstream` @AccessFlag ;
  `fd.g$b` `io.reactivex.rxjava3.internal.operators.observable.c$a.worker` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.rxjava3.internal.operators.observable.c$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.rxjava3.internal.operators.observable.c$a` v0 @kind this, `fd.f` v1 @kind object, `fd.g$b` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/c$a;.<init>:(Lfd/f;Lfd/g$b;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2ff2f4.  call `<init>`(v0) @signature `Lio/reactivex/rxjava3/internal/observers/a;.<init>:()V` @kind direct;
  #L2ff2fa.  v0.`io.reactivex.rxjava3.internal.operators.observable.c$a.downstream` @type ^`fd.f` := v1 @kind object;
  #L2ff2fe.  v0.`io.reactivex.rxjava3.internal.operators.observable.c$a.worker` @type ^`fd.g$b` := v2 @kind object;
  #L2ff302.  v0.`io.reactivex.rxjava3.internal.operators.observable.c$a.delayError` @type ^`boolean` := v3 @kind boolean;
  #L2ff306.  v0.`io.reactivex.rxjava3.internal.operators.observable.c$a.bufferSize` @type ^`int` := v4;
  #L2ff30a.  return @kind void;
}
procedure `boolean` `checkTerminated`(`io.reactivex.rxjava3.internal.operators.observable.c$a` v2 @kind this, `boolean` v3 , `boolean` v4 , `fd.f` v5 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/c$a;.checkTerminated:(ZZLfd/f;)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2ff1d8.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.c$a.disposed` @type ^`boolean` @kind boolean;
  #L2ff1dc.  v1:= 1I;
  #L2ff1de.  if v0 == 0 then goto L2ff1ee;
  #L2ff1e2.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.c$a.queue` @type ^`jd.c` @kind object;
  #L2ff1e6.  call `clear`(v3) @signature `Ljd/c;.clear:()V` @kind interface;
  #L2ff1ec.  return v1;
  #L2ff1ee.  if v3 == 0 then goto L2ff262;
  #L2ff1f2.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.c$a.error` @type ^`java.lang.Throwable` @kind object;
  #L2ff1f6.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.c$a.delayError` @type ^`boolean` @kind boolean;
  #L2ff1fa.  if v0 == 0 then goto L2ff224;
  #L2ff1fe.  if v4 == 0 then goto L2ff262;
  #L2ff202.  v2.`io.reactivex.rxjava3.internal.operators.observable.c$a.disposed` @type ^`boolean` := v1 @kind boolean;
  #L2ff206.  if v3 == 0 then goto L2ff212;
  #L2ff20a.  call `onError`(v5, v3) @signature `Lfd/f;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2ff210.  goto L2ff218;
  #L2ff212.  call `onComplete`(v5) @signature `Lfd/f;.onComplete:()V` @kind interface;
  #L2ff218.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.c$a.worker` @type ^`fd.g$b` @kind object;
  #L2ff21c.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/c;.dispose:()V` @kind interface;
  #L2ff222.  return v1;
  #L2ff224.  if v3 == 0 then goto L2ff248;
  #L2ff228.  v2.`io.reactivex.rxjava3.internal.operators.observable.c$a.disposed` @type ^`boolean` := v1 @kind boolean;
  #L2ff22c.  v4:= v2.`io.reactivex.rxjava3.internal.operators.observable.c$a.queue` @type ^`jd.c` @kind object;
  #L2ff230.  call `clear`(v4) @signature `Ljd/c;.clear:()V` @kind interface;
  #L2ff236.  call `onError`(v5, v3) @signature `Lfd/f;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2ff23c.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.c$a.worker` @type ^`fd.g$b` @kind object;
  #L2ff240.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/c;.dispose:()V` @kind interface;
  #L2ff246.  return v1;
  #L2ff248.  if v4 == 0 then goto L2ff262;
  #L2ff24c.  v2.`io.reactivex.rxjava3.internal.operators.observable.c$a.disposed` @type ^`boolean` := v1 @kind boolean;
  #L2ff250.  call `onComplete`(v5) @signature `Lfd/f;.onComplete:()V` @kind interface;
  #L2ff256.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.c$a.worker` @type ^`fd.g$b` @kind object;
  #L2ff25a.  call `dispose`(v3) @signature `Lio/reactivex/rxjava3/disposables/c;.dispose:()V` @kind interface;
  #L2ff260.  return v1;
  #L2ff262.  v3:= 0I;
  #L2ff264.  return v3;
}
procedure `void` `clear`(`io.reactivex.rxjava3.internal.operators.observable.c$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/c$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ff31c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.c$a.queue` @type ^`jd.c` @kind object;
  #L2ff320.  call `clear`(v0) @signature `Ljd/c;.clear:()V` @kind interface;
  #L2ff326.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.rxjava3.internal.operators.observable.c$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/c$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ff338.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.c$a.disposed` @type ^`boolean` @kind boolean;
  #L2ff33c.  if v0 != 0 then goto L2ff378;
  #L2ff340.  v0:= 1I;
  #L2ff342.  v1.`io.reactivex.rxjava3.internal.operators.observable.c$a.disposed` @type ^`boolean` := v0 @kind boolean;
  #L2ff346.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.c$a.upstream` @type ^`io.reactivex.rxjava3.disposables.c` @kind object;
  #L2ff34a.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/c;.dispose:()V` @kind interface;
  #L2ff350.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.c$a.worker` @type ^`fd.g$b` @kind object;
  #L2ff354.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/c;.dispose:()V` @kind interface;
  #L2ff35a.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.c$a.outputFused` @type ^`boolean` @kind boolean;
  #L2ff35e.  if v0 != 0 then goto L2ff378;
  #L2ff362.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L2ff368.  v0:= temp;
  #L2ff36a.  if v0 != 0 then goto L2ff378;
  #L2ff36e.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.c$a.queue` @type ^`jd.c` @kind object;
  #L2ff372.  call `clear`(v0) @signature `Ljd/c;.clear:()V` @kind interface;
  #L2ff378.  return @kind void;
}
procedure `void` `drainFused`(`io.reactivex.rxjava3.internal.operators.observable.c$a` v5 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/c$a;.drainFused:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2ff38c.  v0:= 1I;
  #L2ff38e.  v1:= 1I;
  #L2ff390.  v2:= v5.`io.reactivex.rxjava3.internal.operators.observable.c$a.disposed` @type ^`boolean` @kind boolean;
  #L2ff394.  if v2 == 0 then goto L2ff39a;
  #L2ff398.  return @kind void;
  #L2ff39a.  v2:= v5.`io.reactivex.rxjava3.internal.operators.observable.c$a.done` @type ^`boolean` @kind boolean;
  #L2ff39e.  v3:= v5.`io.reactivex.rxjava3.internal.operators.observable.c$a.error` @type ^`java.lang.Throwable` @kind object;
  #L2ff3a2.  v4:= v5.`io.reactivex.rxjava3.internal.operators.observable.c$a.delayError` @type ^`boolean` @kind boolean;
  #L2ff3a6.  if v4 != 0 then goto L2ff3d0;
  #L2ff3aa.  if v2 == 0 then goto L2ff3d0;
  #L2ff3ae.  if v3 == 0 then goto L2ff3d0;
  #L2ff3b2.  v5.`io.reactivex.rxjava3.internal.operators.observable.c$a.disposed` @type ^`boolean` := v0 @kind boolean;
  #L2ff3b6.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.c$a.downstream` @type ^`fd.f` @kind object;
  #L2ff3ba.  v1:= v5.`io.reactivex.rxjava3.internal.operators.observable.c$a.error` @type ^`java.lang.Throwable` @kind object;
  #L2ff3be.  call `onError`(v0, v1) @signature `Lfd/f;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2ff3c4.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.c$a.worker` @type ^`fd.g$b` @kind object;
  #L2ff3c8.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/c;.dispose:()V` @kind interface;
  #L2ff3ce.  return @kind void;
  #L2ff3d0.  v3:= v5.`io.reactivex.rxjava3.internal.operators.observable.c$a.downstream` @type ^`fd.f` @kind object;
  #L2ff3d4.  v4:= 0I;
  #L2ff3d6.  call `onNext`(v3, v4) @signature `Lfd/f;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L2ff3dc.  if v2 == 0 then goto L2ff40e;
  #L2ff3e0.  v5.`io.reactivex.rxjava3.internal.operators.observable.c$a.disposed` @type ^`boolean` := v0 @kind boolean;
  #L2ff3e4.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.c$a.error` @type ^`java.lang.Throwable` @kind object;
  #L2ff3e8.  if v0 == 0 then goto L2ff3f8;
  #L2ff3ec.  v1:= v5.`io.reactivex.rxjava3.internal.operators.observable.c$a.downstream` @type ^`fd.f` @kind object;
  #L2ff3f0.  call `onError`(v1, v0) @signature `Lfd/f;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2ff3f6.  goto L2ff402;
  #L2ff3f8.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.c$a.downstream` @type ^`fd.f` @kind object;
  #L2ff3fc.  call `onComplete`(v0) @signature `Lfd/f;.onComplete:()V` @kind interface;
  #L2ff402.  v0:= v5.`io.reactivex.rxjava3.internal.operators.observable.c$a.worker` @type ^`fd.g$b` @kind object;
  #L2ff406.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/c;.dispose:()V` @kind interface;
  #L2ff40c.  return @kind void;
  #L2ff40e.  v1:= -v1 @kind int;
  #L2ff410.  call temp:= `addAndGet`(v5, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L2ff416.  v1:= temp;
  #L2ff418.  if v1 != 0 then goto L2ff390;
  #L2ff41c.  return @kind void;
}
procedure `void` `drainNormal`(`io.reactivex.rxjava3.internal.operators.observable.c$a` v7 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/c$a;.drainNormal:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2ff430.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.c$a.queue` @type ^`jd.c` @kind object;
  #L2ff434.  v1:= v7.`io.reactivex.rxjava3.internal.operators.observable.c$a.downstream` @type ^`fd.f` @kind object;
  #L2ff438.  v2:= 1I;
  #L2ff43a.  v3:= 1I;
  #L2ff43c.  v4:= v7.`io.reactivex.rxjava3.internal.operators.observable.c$a.done` @type ^`boolean` @kind boolean;
  #L2ff440.  call temp:= `isEmpty`(v0) @signature `Ljd/c;.isEmpty:()Z` @kind interface;
  #L2ff446.  v5:= temp;
  #L2ff448.  call temp:= `checkTerminated`(v7, v4, v5, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/c$a;.checkTerminated:(ZZLfd/f;)Z` @kind virtual;
  #L2ff44e.  v4:= temp;
  #L2ff450.  if v4 == 0 then goto L2ff456;
  #L2ff454.  return @kind void;
  #L2ff456.  v4:= v7.`io.reactivex.rxjava3.internal.operators.observable.c$a.done` @type ^`boolean` @kind boolean;
  #L2ff45a.  call temp:= `poll`(v0) @signature `Ljd/c;.poll:()Ljava/lang/Object;` @kind interface;
  #L2ff460.  v5:= temp @kind object;
  #L2ff462.  if v5 != 0 then goto L2ff46a;
  #L2ff466.  v6:= 1I;
  #L2ff468.  goto L2ff46c;
  #L2ff46a.  v6:= 0I;
  #L2ff46c.  call temp:= `checkTerminated`(v7, v4, v6, v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/c$a;.checkTerminated:(ZZLfd/f;)Z` @kind virtual;
  #L2ff472.  v4:= temp;
  #L2ff474.  if v4 == 0 then goto L2ff47a;
  #L2ff478.  return @kind void;
  #L2ff47a.  if v6 == 0 then goto L2ff48e;
  #L2ff47e.  v3:= -v3 @kind int;
  #L2ff480.  call temp:= `addAndGet`(v7, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L2ff486.  v3:= temp;
  #L2ff488.  if v3 != 0 then goto L2ff43c;
  #L2ff48c.  return @kind void;
  #L2ff48e.  call `onNext`(v1, v5) @signature `Lfd/f;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L2ff494.  goto L2ff456;
  #L2ff496.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2ff498.  call `b`(v3) @signature `Lio/reactivex/rxjava3/exceptions/b;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L2ff49e.  v7.`io.reactivex.rxjava3.internal.operators.observable.c$a.disposed` @type ^`boolean` := v2 @kind boolean;
  #L2ff4a2.  v2:= v7.`io.reactivex.rxjava3.internal.operators.observable.c$a.upstream` @type ^`io.reactivex.rxjava3.disposables.c` @kind object;
  #L2ff4a6.  call `dispose`(v2) @signature `Lio/reactivex/rxjava3/disposables/c;.dispose:()V` @kind interface;
  #L2ff4ac.  call `clear`(v0) @signature `Ljd/c;.clear:()V` @kind interface;
  #L2ff4b2.  call `onError`(v1, v3) @signature `Lfd/f;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L2ff4b8.  v0:= v7.`io.reactivex.rxjava3.internal.operators.observable.c$a.worker` @type ^`fd.g$b` @kind object;
  #L2ff4bc.  call `dispose`(v0) @signature `Lio/reactivex/rxjava3/disposables/c;.dispose:()V` @kind interface;
  #L2ff4c2.  return @kind void;
  catch `java.lang.Throwable` @[L2ff45a..L2ff462] goto L2ff496;
}
procedure `boolean` `isDisposed`(`io.reactivex.rxjava3.internal.operators.observable.c$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/c$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ff278.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.c$a.disposed` @type ^`boolean` @kind boolean;
  #L2ff27c.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.rxjava3.internal.operators.observable.c$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/c$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ff290.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.c$a.queue` @type ^`jd.c` @kind object;
  #L2ff294.  call temp:= `isEmpty`(v0) @signature `Ljd/c;.isEmpty:()Z` @kind interface;
  #L2ff29a.  v0:= temp;
  #L2ff29c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.rxjava3.internal.operators.observable.c$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/c$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ff4e0.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.c$a.done` @type ^`boolean` @kind boolean;
  #L2ff4e4.  if v0 == 0 then goto L2ff4ea;
  #L2ff4e8.  return @kind void;
  #L2ff4ea.  v0:= 1I;
  #L2ff4ec.  v1.`io.reactivex.rxjava3.internal.operators.observable.c$a.done` @type ^`boolean` := v0 @kind boolean;
  #L2ff4f0.  call `schedule`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/c$a;.schedule:()V` @kind virtual;
  #L2ff4f6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.rxjava3.internal.operators.observable.c$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/c$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ff508.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.c$a.done` @type ^`boolean` @kind boolean;
  #L2ff50c.  if v0 == 0 then goto L2ff518;
  #L2ff510.  call `k`(v2) @signature `Lld/a;.k:(Ljava/lang/Throwable;)V` @kind static;
  #L2ff516.  return @kind void;
  #L2ff518.  v1.`io.reactivex.rxjava3.internal.operators.observable.c$a.error` @type ^`java.lang.Throwable` := v2 @kind object;
  #L2ff51c.  v2:= 1I;
  #L2ff51e.  v1.`io.reactivex.rxjava3.internal.operators.observable.c$a.done` @type ^`boolean` := v2 @kind boolean;
  #L2ff522.  call `schedule`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/c$a;.schedule:()V` @kind virtual;
  #L2ff528.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.rxjava3.internal.operators.observable.c$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/c$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2ff53c.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.c$a.done` @type ^`boolean` @kind boolean;
  #L2ff540.  if v0 == 0 then goto L2ff546;
  #L2ff544.  return @kind void;
  #L2ff546.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.c$a.sourceMode` @type ^`int`;
  #L2ff54a.  v1:= 2I;
  #L2ff54c.  if v0 == v1 then goto L2ff55a;
  #L2ff550.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.c$a.queue` @type ^`jd.c` @kind object;
  #L2ff554.  call temp:= `offer`(v0, v3) @signature `Ljd/c;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L2ff55a.  call `schedule`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/c$a;.schedule:()V` @kind virtual;
  #L2ff560.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.rxjava3.internal.operators.observable.c$a` v2 @kind this, `io.reactivex.rxjava3.disposables.c` v3 @kind object) @signature `Lio/reactivex/rxjava3/internal/operators/observable/c$a;.onSubscribe:(Lio/reactivex/rxjava3/disposables/c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2ff574.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.c$a.upstream` @type ^`io.reactivex.rxjava3.disposables.c` @kind object;
  #L2ff578.  call temp:= `validate`(v0, v3) @signature `Lhd/a;.validate:(Lio/reactivex/rxjava3/disposables/c;Lio/reactivex/rxjava3/disposables/c;)Z` @kind static;
  #L2ff57e.  v0:= temp;
  #L2ff580.  if v0 == 0 then goto L2ff5f8;
  #L2ff584.  v2.`io.reactivex.rxjava3.internal.operators.observable.c$a.upstream` @type ^`io.reactivex.rxjava3.disposables.c` := v3 @kind object;
  #L2ff588.  v0:= instanceof @variable v3 @type ^`jd.a` @kind boolean;
  #L2ff58c.  if v0 == 0 then goto L2ff5dc;
  #L2ff590.  v3:= (`jd.a`) v3 @kind object;
  #L2ff594.  v0:= 7I;
  #L2ff596.  call temp:= `requestFusion`(v3, v0) @signature `Ljd/b;.requestFusion:(I)I` @kind interface;
  #L2ff59c.  v0:= temp;
  #L2ff59e.  v1:= 1I;
  #L2ff5a0.  if v0 != v1 then goto L2ff5c2;
  #L2ff5a4.  v2.`io.reactivex.rxjava3.internal.operators.observable.c$a.sourceMode` @type ^`int` := v0;
  #L2ff5a8.  v2.`io.reactivex.rxjava3.internal.operators.observable.c$a.queue` @type ^`jd.c` := v3 @kind object;
  #L2ff5ac.  v2.`io.reactivex.rxjava3.internal.operators.observable.c$a.done` @type ^`boolean` := v1 @kind boolean;
  #L2ff5b0.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.c$a.downstream` @type ^`fd.f` @kind object;
  #L2ff5b4.  call `onSubscribe`(v3, v2) @signature `Lfd/f;.onSubscribe:(Lio/reactivex/rxjava3/disposables/c;)V` @kind interface;
  #L2ff5ba.  call `schedule`(v2) @signature `Lio/reactivex/rxjava3/internal/operators/observable/c$a;.schedule:()V` @kind virtual;
  #L2ff5c0.  return @kind void;
  #L2ff5c2.  v1:= 2I;
  #L2ff5c4.  if v0 != v1 then goto L2ff5dc;
  #L2ff5c8.  v2.`io.reactivex.rxjava3.internal.operators.observable.c$a.sourceMode` @type ^`int` := v0;
  #L2ff5cc.  v2.`io.reactivex.rxjava3.internal.operators.observable.c$a.queue` @type ^`jd.c` := v3 @kind object;
  #L2ff5d0.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.c$a.downstream` @type ^`fd.f` @kind object;
  #L2ff5d4.  call `onSubscribe`(v3, v2) @signature `Lfd/f;.onSubscribe:(Lio/reactivex/rxjava3/disposables/c;)V` @kind interface;
  #L2ff5da.  return @kind void;
  #L2ff5dc.  v3:= new `kd.a`;
  #L2ff5e0.  v0:= v2.`io.reactivex.rxjava3.internal.operators.observable.c$a.bufferSize` @type ^`int`;
  #L2ff5e4.  call `<init>`(v3, v0) @signature `Lkd/a;.<init>:(I)V` @kind direct;
  #L2ff5ea.  v2.`io.reactivex.rxjava3.internal.operators.observable.c$a.queue` @type ^`jd.c` := v3 @kind object;
  #L2ff5ee.  v3:= v2.`io.reactivex.rxjava3.internal.operators.observable.c$a.downstream` @type ^`fd.f` @kind object;
  #L2ff5f2.  call `onSubscribe`(v3, v2) @signature `Lfd/f;.onSubscribe:(Lio/reactivex/rxjava3/disposables/c;)V` @kind interface;
  #L2ff5f8.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.rxjava3.internal.operators.observable.c$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/c$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ff2d4.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.c$a.queue` @type ^`jd.c` @kind object;
  #L2ff2d8.  call temp:= `poll`(v0) @signature `Ljd/c;.poll:()Ljava/lang/Object;` @kind interface;
  #L2ff2de.  v0:= temp @kind object;
  #L2ff2e0.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.rxjava3.internal.operators.observable.c$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/rxjava3/internal/operators/observable/c$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ff2b0.  v0:= 2I;
  #L2ff2b2.  v2:= v2 ^& v0 @kind int;
  #L2ff2b4.  if v2 == 0 then goto L2ff2c0;
  #L2ff2b8.  v2:= 1I;
  #L2ff2ba.  v1.`io.reactivex.rxjava3.internal.operators.observable.c$a.outputFused` @type ^`boolean` := v2 @kind boolean;
  #L2ff2be.  return v0;
  #L2ff2c0.  v2:= 0I;
  #L2ff2c2.  return v2;
}
procedure `void` `run`(`io.reactivex.rxjava3.internal.operators.observable.c$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/c$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ff60c.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.c$a.outputFused` @type ^`boolean` @kind boolean;
  #L2ff610.  if v0 == 0 then goto L2ff61c;
  #L2ff614.  call `drainFused`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/c$a;.drainFused:()V` @kind virtual;
  #L2ff61a.  goto L2ff622;
  #L2ff61c.  call `drainNormal`(v1) @signature `Lio/reactivex/rxjava3/internal/operators/observable/c$a;.drainNormal:()V` @kind virtual;
  #L2ff622.  return @kind void;
}
procedure `void` `schedule`(`io.reactivex.rxjava3.internal.operators.observable.c$a` v1 @kind this) @signature `Lio/reactivex/rxjava3/internal/operators/observable/c$a;.schedule:()V` @AccessFlag  {
    temp;
    v0;

  #L2ff634.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L2ff63a.  v0:= temp;
  #L2ff63c.  if v0 != 0 then goto L2ff64a;
  #L2ff640.  v0:= v1.`io.reactivex.rxjava3.internal.operators.observable.c$a.worker` @type ^`fd.g$b` @kind object;
  #L2ff644.  call temp:= `b`(v0, v1) @signature `Lfd/g$b;.b:(Ljava/lang/Runnable;)Lio/reactivex/rxjava3/disposables/c;` @kind virtual;
  #L2ff64a.  return @kind void;
}
