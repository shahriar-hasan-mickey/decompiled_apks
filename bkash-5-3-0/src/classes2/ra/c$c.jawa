record `ra.c$c` @kind class @AccessFlag  {
  `java.util.List` `ra.c$c.a` @AccessFlag PUBLIC;
}
procedure `void` `<init>`(`ra.c$c` v0 @kind this, `ra.c` v1 @kind object, `ra.c$d`[] v2 @kind object) @signature `Lra/c$c;.<init>:(Lra/c;[Lra/c$d;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L373438.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L37343e.  call temp:= `asList`(v2) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L373444.  v1:= temp @kind object;
  #L373446.  v0.`ra.c$c.a` @type ^`java.util.List` := v1 @kind object;
  #L37344a.  return @kind void;
}
procedure `ra.b` `a`(`ra.c$c` v3 @kind this, `ra.c` v4 @kind object) @signature `Lra/c$c;.a:(Lra/c;)Lra/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3733f4.  v0:= v3.`ra.c$c.a` @type ^`java.util.List` @kind object;
  #L3733f8.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3733fe.  v0:= temp @kind object;
  #L373400.  v1:= 0I;
  #L373402.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L373408.  v2:= temp;
  #L37340a.  if v2 == 0 then goto L373426;
  #L37340e.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L373414.  v1:= temp @kind object;
  #L373416.  v1:= (`ra.c$d`) v1 @kind object;
  #L37341a.  call temp:= `a`(v1, v4) @signature `Lra/c$d;.a:(Lra/c;)Lra/b;` @kind interface;
  #L373420.  v1:= temp @kind object;
  #L373422.  if v1 == 0 then goto L373402;
  #L373426.  return v1 @kind object;
}
