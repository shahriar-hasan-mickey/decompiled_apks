record `jc.b` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class {
  `java.lang.String` `jc.b.strValue` @AccessFlag PRIVATE_FINAL;
}
global `jc.b` `@@jc.b.auto` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `jc.b`[] `@@jc.b.g` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `jc.b` `@@jc.b.locked` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
procedure `void` `<clinit>`() @signature `Ljc/b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L302a6c.  v0:= new `jc.b`;
  #L302a70.  v1:= "auto" @kind object;
  #L302a74.  v2:= 0I;
  #L302a76.  call `<init>`(v0, v1, v2, v1) @signature `Ljc/b;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L302a7c.  `@@jc.b.auto` @type ^`jc.b` := v0 @kind object;
  #L302a80.  v1:= new `jc.b`;
  #L302a84.  v3:= "locked" @kind object;
  #L302a88.  v4:= 1I;
  #L302a8a.  call `<init>`(v1, v3, v4, v3) @signature `Ljc/b;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L302a90.  `@@jc.b.locked` @type ^`jc.b` := v1 @kind object;
  #L302a94.  v3:= 2I;
  #L302a96.  v3:= new `jc.b`[v3];
  #L302a9a.  v3[v2]:= v0 @kind object;
  #L302a9e.  v3[v4]:= v1 @kind object;
  #L302aa2.  `@@jc.b.g` @type ^`jc.b`[] := v3 @kind object;
  #L302aa6.  return @kind void;
}
procedure `void` `<init>`(`jc.b` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `java.lang.String` v3 @kind object) @signature `Ljc/b;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L302ab8.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L302abe.  v0.`jc.b.strValue` @type ^`java.lang.String` := v3 @kind object;
  #L302ac2.  return @kind void;
}
procedure `jc.b` `getValueForString`(`java.lang.String` v5 @kind object) @signature `Ljc/b;.getValueForString:(Ljava/lang/String;)Ljc/b;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3029e4.  call temp:= `values`() @signature `Ljc/b;.values:()[Ljc/b;` @kind static;
  #L3029ea.  v0:= temp @kind object;
  #L3029ec.  v1:= length @variable v0;
  #L3029ee.  v2:= 0I;
  #L3029f0.  if v2 >= v1 then goto L302a10;
  #L3029f4.  v3:= v0[v2] @kind object;
  #L3029f8.  v4:= v3.`jc.b.strValue` @type ^`java.lang.String` @kind object;
  #L3029fc.  call temp:= `equals`(v4, v5) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L302a02.  v4:= temp;
  #L302a04.  if v4 == 0 then goto L302a0a;
  #L302a08.  return v3 @kind object;
  #L302a0a.  v2:= v2 + 1;
  #L302a0e.  goto L3029f0;
  #L302a10.  v5:= 0I;
  #L302a12.  return v5 @kind object;
}
procedure `jc.b` `valueOf`(`java.lang.String` v1 @kind object) @signature `Ljc/b;.valueOf:(Ljava/lang/String;)Ljc/b;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L302a24.  v0:= constclass @type ^`jc.b` @kind object;
  #L302a28.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L302a2e.  v1:= temp @kind object;
  #L302a30.  v1:= (`jc.b`) v1 @kind object;
  #L302a34.  return v1 @kind object;
}
procedure `jc.b`[] `values`() @signature `Ljc/b;.values:()[Ljc/b;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L302a48.  v0:= `@@jc.b.g` @type ^`jc.b`[] @kind object;
  #L302a4c.  call temp:= `clone`(v0) @signature `[Ljc/b;.clone:()Ljava/lang/Object;` @kind virtual;
  #L302a52.  v0:= temp @kind object;
  #L302a54.  v0:= (`jc.b`[]) v0 @kind object;
  #L302a58.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`jc.b` v1 @kind this) @signature `Ljc/b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3029cc.  v0:= v1.`jc.b.strValue` @type ^`java.lang.String` @kind object;
  #L3029d0.  return v0 @kind object;
}
