record `okio.k` @kind class @AccessFlag PUBLIC_FINAL extends `okio.u` @kind interface {
  `okio.d` `okio.k.g` @AccessFlag PRIVATE_FINAL;
  `java.util.zip.Deflater` `okio.k.h` @AccessFlag PRIVATE_FINAL;
  `okio.g` `okio.k.i` @AccessFlag PRIVATE_FINAL;
  `boolean` `okio.k.j` @AccessFlag PRIVATE;
  `java.util.zip.CRC32` `okio.k.k` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okio.k` v3 @kind this, `okio.u` v4 @kind object) @signature `Lokio/k;.<init>:(Lokio/u;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L338cd8.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L338cde.  v0:= new `java.util.zip.CRC32`;
  #L338ce2.  call `<init>`(v0) @signature `Ljava/util/zip/CRC32;.<init>:()V` @kind direct;
  #L338ce8.  v3.`okio.k.k` @type ^`java.util.zip.CRC32` := v0 @kind object;
  #L338cec.  if v4 == 0 then goto L338d24;
  #L338cf0.  v0:= new `java.util.zip.Deflater`;
  #L338cf4.  v1:= -1I;
  #L338cf6.  v2:= 1I;
  #L338cf8.  call `<init>`(v0, v1, v2) @signature `Ljava/util/zip/Deflater;.<init>:(IZ)V` @kind direct;
  #L338cfe.  v3.`okio.k.h` @type ^`java.util.zip.Deflater` := v0 @kind object;
  #L338d02.  call temp:= `a`(v4) @signature `Lokio/n;.a:(Lokio/u;)Lokio/d;` @kind static;
  #L338d08.  v4:= temp @kind object;
  #L338d0a.  v3.`okio.k.g` @type ^`okio.d` := v4 @kind object;
  #L338d0e.  v1:= new `okio.g`;
  #L338d12.  call `<init>`(v1, v4, v0) @signature `Lokio/g;.<init>:(Lokio/d;Ljava/util/zip/Deflater;)V` @kind direct;
  #L338d18.  v3.`okio.k.i` @type ^`okio.g` := v1 @kind object;
  #L338d1c.  call `k`(v3) @signature `Lokio/k;.k:()V` @kind direct;
  #L338d22.  return @kind void;
  #L338d24.  v4:= new `java.lang.IllegalArgumentException`;
  #L338d28.  v0:= "sink == null" @kind object;
  #L338d2c.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L338d32.  throw v4;
}
procedure `void` `e`(`okio.k` v4 @kind this, `okio.c` v5 @kind object, `long` v6 ) @signature `Lokio/k;.e:(Lokio/c;J)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L338dec.  v5:= v5.`okio.c.g` @type ^`okio.r` @kind object;
  #L338df0.  v0:= 0L;
  #L338df4.  v2:= lcmp(v6, v0);
  #L338df8.  if v2 <= 0 then goto L338e2e;
  #L338dfc.  v0:= v5.`okio.r.c` @type ^`int`;
  #L338e00.  v1:= v5.`okio.r.b` @type ^`int`;
  #L338e04.  v0:= v0 - v1 @kind int;
  #L338e06.  v0:= (`long`) v0 @kind i2l;
  #L338e08.  call temp:= `min`(v6, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L338e0e.  v0:= temp @kind wide;
  #L338e10.  v1:= (`int`) v0 @kind l2i;
  #L338e12.  v0:= v4.`okio.k.k` @type ^`java.util.zip.CRC32` @kind object;
  #L338e16.  v2:= v5.`okio.r.a` @type ^`byte`[] @kind object;
  #L338e1a.  v3:= v5.`okio.r.b` @type ^`int`;
  #L338e1e.  call `update`(v0, v2, v3, v1) @signature `Ljava/util/zip/CRC32;.update:([BII)V` @kind virtual;
  #L338e24.  v0:= (`long`) v1 @kind i2l;
  #L338e26.  v6:= v6 - v0 @kind long;
  #L338e28.  v5:= v5.`okio.r.f` @type ^`okio.r` @kind object;
  #L338e2c.  goto L338df0;
  #L338e2e.  return @kind void;
}
procedure `void` `i`(`okio.k` v3 @kind this) @signature `Lokio/k;.i:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L338ea4.  v0:= v3.`okio.k.g` @type ^`okio.d` @kind object;
  #L338ea8.  v1:= v3.`okio.k.k` @type ^`java.util.zip.CRC32` @kind object;
  #L338eac.  call temp:= `getValue`(v1) @signature `Ljava/util/zip/CRC32;.getValue:()J` @kind virtual;
  #L338eb2.  v1:= temp @kind wide;
  #L338eb4.  v2:= (`int`) v1 @kind l2i;
  #L338eb6.  call temp:= `G`(v0, v2) @signature `Lokio/d;.G:(I)Lokio/d;` @kind interface;
  #L338ebc.  v0:= v3.`okio.k.g` @type ^`okio.d` @kind object;
  #L338ec0.  v1:= v3.`okio.k.h` @type ^`java.util.zip.Deflater` @kind object;
  #L338ec4.  call temp:= `getBytesRead`(v1) @signature `Ljava/util/zip/Deflater;.getBytesRead:()J` @kind virtual;
  #L338eca.  v1:= temp @kind wide;
  #L338ecc.  v2:= (`int`) v1 @kind l2i;
  #L338ece.  call temp:= `G`(v0, v2) @signature `Lokio/d;.G:(I)Lokio/d;` @kind interface;
  #L338ed4.  return @kind void;
}
procedure `void` `k`(`okio.k` v2 @kind this) @signature `Lokio/k;.k:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L338ee8.  v0:= v2.`okio.k.g` @type ^`okio.d` @kind object;
  #L338eec.  call temp:= `b`(v0) @signature `Lokio/d;.b:()Lokio/c;` @kind interface;
  #L338ef2.  v0:= temp @kind object;
  #L338ef4.  v1:= 8075I;
  #L338ef8.  call temp:= `Z0`(v0, v1) @signature `Lokio/c;.Z0:(I)Lokio/c;` @kind virtual;
  #L338efe.  v1:= 8I;
  #L338f02.  call temp:= `U0`(v0, v1) @signature `Lokio/c;.U0:(I)Lokio/c;` @kind virtual;
  #L338f08.  v1:= 0I;
  #L338f0a.  call temp:= `U0`(v0, v1) @signature `Lokio/c;.U0:(I)Lokio/c;` @kind virtual;
  #L338f10.  call temp:= `X0`(v0, v1) @signature `Lokio/c;.X0:(I)Lokio/c;` @kind virtual;
  #L338f16.  call temp:= `U0`(v0, v1) @signature `Lokio/c;.U0:(I)Lokio/c;` @kind virtual;
  #L338f1c.  call temp:= `U0`(v0, v1) @signature `Lokio/c;.U0:(I)Lokio/c;` @kind virtual;
  #L338f22.  return @kind void;
}
procedure `void` `close`(`okio.k` v2 @kind this) @signature `Lokio/k;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L338d44.  v0:= v2.`okio.k.j` @type ^`boolean` @kind boolean;
  #L338d48.  if v0 == 0 then goto L338d4e;
  #L338d4c.  return @kind void;
  #L338d4e.  v0:= 0I;
  #L338d50.  v1:= v2.`okio.k.i` @type ^`okio.g` @kind object;
  #L338d54.  call `i`(v1) @signature `Lokio/g;.i:()V` @kind virtual;
  #L338d5a.  call `i`(v2) @signature `Lokio/k;.i:()V` @kind direct;
  #L338d60.  goto L338d64;
  #L338d62.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L338d64.  v1:= v2.`okio.k.h` @type ^`java.util.zip.Deflater` @kind object;
  #L338d68.  call `end`(v1) @signature `Ljava/util/zip/Deflater;.end:()V` @kind virtual;
  #L338d6e.  goto L338d78;
  #L338d70.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L338d72.  if v0 != 0 then goto L338d78;
  #L338d76.  v0:= v1 @kind object;
  #L338d78.  v1:= v2.`okio.k.g` @type ^`okio.d` @kind object;
  #L338d7c.  call `close`(v1) @signature `Lokio/u;.close:()V` @kind interface;
  #L338d82.  goto L338d8c;
  #L338d84.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L338d86.  if v0 != 0 then goto L338d8c;
  #L338d8a.  v0:= v1 @kind object;
  #L338d8c.  v1:= 1I;
  #L338d8e.  v2.`okio.k.j` @type ^`boolean` := v1 @kind boolean;
  #L338d92.  if v0 == 0 then goto L338d9c;
  #L338d96.  call `e`(v0) @signature `Lokio/x;.e:(Ljava/lang/Throwable;)V` @kind static;
  #L338d9c.  return @kind void;
  catch `java.lang.Throwable` @[L338d50..L338d60] goto L338d62;
  catch `java.lang.Throwable` @[L338d64..L338d6e] goto L338d70;
  catch `java.lang.Throwable` @[L338d78..L338d82] goto L338d84;
}
procedure `void` `e0`(`okio.k` v3 @kind this, `okio.c` v4 @kind object, `long` v5 ) @signature `Lokio/k;.e0:(Lokio/c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L338e40.  v0:= 0L;
  #L338e44.  v2:= lcmp(v5, v0);
  #L338e48.  if v2 < 0 then goto L338e64;
  #L338e4c.  if v2 != 0 then goto L338e52;
  #L338e50.  return @kind void;
  #L338e52.  call `e`(v3, v4, v5) @signature `Lokio/k;.e:(Lokio/c;J)V` @kind direct;
  #L338e58.  v0:= v3.`okio.k.i` @type ^`okio.g` @kind object;
  #L338e5c.  call `e0`(v0, v4, v5) @signature `Lokio/g;.e0:(Lokio/c;J)V` @kind virtual;
  #L338e62.  return @kind void;
  #L338e64.  v4:= new `java.lang.IllegalArgumentException`;
  #L338e68.  v0:= new `java.lang.StringBuilder`;
  #L338e6c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L338e72.  v1:= "byteCount < 0: " @kind object;
  #L338e76.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L338e7c.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L338e82.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L338e88.  v5:= temp @kind object;
  #L338e8a.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L338e90.  throw v4;
}
procedure `void` `flush`(`okio.k` v1 @kind this) @signature `Lokio/k;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L338dd0.  v0:= v1.`okio.k.i` @type ^`okio.g` @kind object;
  #L338dd4.  call `flush`(v0) @signature `Lokio/g;.flush:()V` @kind virtual;
  #L338dda.  return @kind void;
}
procedure `okio.w` `timeout`(`okio.k` v1 @kind this) @signature `Lokio/k;.timeout:()Lokio/w;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L338cb8.  v0:= v1.`okio.k.g` @type ^`okio.d` @kind object;
  #L338cbc.  call temp:= `timeout`(v0) @signature `Lokio/u;.timeout:()Lokio/w;` @kind interface;
  #L338cc2.  v0:= temp @kind object;
  #L338cc4.  return v0 @kind object;
}
