record `okio.p` @kind class @AccessFlag FINAL extends `okio.d` @kind interface {
  `okio.c` `okio.p.g` @AccessFlag PUBLIC_FINAL;
  `okio.u` `okio.p.h` @AccessFlag PUBLIC_FINAL;
  `boolean` `okio.p.i` @AccessFlag ;
}
procedure `void` `<init>`(`okio.p` v1 @kind this, `okio.u` v2 @kind object) @signature `Lokio/p;.<init>:(Lokio/u;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L33a664.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L33a66a.  v0:= new `okio.c`;
  #L33a66e.  call `<init>`(v0) @signature `Lokio/c;.<init>:()V` @kind direct;
  #L33a674.  v1.`okio.p.g` @type ^`okio.c` := v0 @kind object;
  #L33a678.  v0:= "sink == null" @kind object;
  #L33a67c.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L33a682.  v1.`okio.p.h` @type ^`okio.u` := v2 @kind object;
  #L33a686.  return @kind void;
}
procedure `okio.d` `B`(`okio.p` v1 @kind this, `int` v2 ) @signature `Lokio/p;.B:(I)Lokio/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L33a554.  v0:= v1.`okio.p.i` @type ^`boolean` @kind boolean;
  #L33a558.  if v0 != 0 then goto L33a570;
  #L33a55c.  v0:= v1.`okio.p.g` @type ^`okio.c` @kind object;
  #L33a560.  call temp:= `X0`(v0, v2) @signature `Lokio/c;.X0:(I)Lokio/c;` @kind virtual;
  #L33a566.  call temp:= `L`(v1) @signature `Lokio/p;.L:()Lokio/d;` @kind virtual;
  #L33a56c.  v2:= temp @kind object;
  #L33a56e.  return v2 @kind object;
  #L33a570.  v2:= new `java.lang.IllegalStateException`;
  #L33a574.  v0:= "closed" @kind object;
  #L33a578.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L33a57e.  throw v2;
}
procedure `okio.d` `G`(`okio.p` v1 @kind this, `int` v2 ) @signature `Lokio/p;.G:(I)Lokio/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L33a590.  v0:= v1.`okio.p.i` @type ^`boolean` @kind boolean;
  #L33a594.  if v0 != 0 then goto L33a5ac;
  #L33a598.  v0:= v1.`okio.p.g` @type ^`okio.c` @kind object;
  #L33a59c.  call temp:= `Y0`(v0, v2) @signature `Lokio/c;.Y0:(I)Lokio/c;` @kind virtual;
  #L33a5a2.  call temp:= `L`(v1) @signature `Lokio/p;.L:()Lokio/d;` @kind virtual;
  #L33a5a8.  v2:= temp @kind object;
  #L33a5aa.  return v2 @kind object;
  #L33a5ac.  v2:= new `java.lang.IllegalStateException`;
  #L33a5b0.  v0:= "closed" @kind object;
  #L33a5b4.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L33a5ba.  throw v2;
}
procedure `okio.d` `I`(`okio.p` v1 @kind this, `int` v2 ) @signature `Lokio/p;.I:(I)Lokio/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L33a4a0.  v0:= v1.`okio.p.i` @type ^`boolean` @kind boolean;
  #L33a4a4.  if v0 != 0 then goto L33a4bc;
  #L33a4a8.  v0:= v1.`okio.p.g` @type ^`okio.c` @kind object;
  #L33a4ac.  call temp:= `U0`(v0, v2) @signature `Lokio/c;.U0:(I)Lokio/c;` @kind virtual;
  #L33a4b2.  call temp:= `L`(v1) @signature `Lokio/p;.L:()Lokio/d;` @kind virtual;
  #L33a4b8.  v2:= temp @kind object;
  #L33a4ba.  return v2 @kind object;
  #L33a4bc.  v2:= new `java.lang.IllegalStateException`;
  #L33a4c0.  v0:= "closed" @kind object;
  #L33a4c4.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L33a4ca.  throw v2;
}
procedure `okio.d` `I0`(`okio.p` v1 @kind this, `long` v2 ) @signature `Lokio/p;.I0:(J)Lokio/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L33a4dc.  v0:= v1.`okio.p.i` @type ^`boolean` @kind boolean;
  #L33a4e0.  if v0 != 0 then goto L33a4f8;
  #L33a4e4.  v0:= v1.`okio.p.g` @type ^`okio.c` @kind object;
  #L33a4e8.  call temp:= `V0`(v0, v2) @signature `Lokio/c;.V0:(J)Lokio/c;` @kind virtual;
  #L33a4ee.  call temp:= `L`(v1) @signature `Lokio/p;.L:()Lokio/d;` @kind virtual;
  #L33a4f4.  v2:= temp @kind object;
  #L33a4f6.  return v2 @kind object;
  #L33a4f8.  v2:= new `java.lang.IllegalStateException`;
  #L33a4fc.  v3:= "closed" @kind object;
  #L33a500.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L33a506.  throw v2;
}
procedure `okio.d` `L`(`okio.p` v5 @kind this) @signature `Lokio/p;.L:()Lokio/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L33a39c.  v0:= v5.`okio.p.i` @type ^`boolean` @kind boolean;
  #L33a3a0.  if v0 != 0 then goto L33a3cc;
  #L33a3a4.  v0:= v5.`okio.p.g` @type ^`okio.c` @kind object;
  #L33a3a8.  call temp:= `r`(v0) @signature `Lokio/c;.r:()J` @kind virtual;
  #L33a3ae.  v0:= temp @kind wide;
  #L33a3b0.  v2:= 0L;
  #L33a3b4.  v4:= lcmp(v0, v2);
  #L33a3b8.  if v4 <= 0 then goto L33a3ca;
  #L33a3bc.  v2:= v5.`okio.p.h` @type ^`okio.u` @kind object;
  #L33a3c0.  v3:= v5.`okio.p.g` @type ^`okio.c` @kind object;
  #L33a3c4.  call `e0`(v2, v3, v0) @signature `Lokio/u;.e0:(Lokio/c;J)V` @kind interface;
  #L33a3ca.  return v5 @kind object;
  #L33a3cc.  v0:= new `java.lang.IllegalStateException`;
  #L33a3d0.  v1:= "closed" @kind object;
  #L33a3d4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L33a3da.  throw v0;
}
procedure `okio.d` `T`(`okio.p` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokio/p;.T:(Ljava/lang/String;)Lokio/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L33a608.  v0:= v1.`okio.p.i` @type ^`boolean` @kind boolean;
  #L33a60c.  if v0 != 0 then goto L33a624;
  #L33a610.  v0:= v1.`okio.p.g` @type ^`okio.c` @kind object;
  #L33a614.  call temp:= `b1`(v0, v2) @signature `Lokio/c;.b1:(Ljava/lang/String;)Lokio/c;` @kind virtual;
  #L33a61a.  call temp:= `L`(v1) @signature `Lokio/p;.L:()Lokio/d;` @kind virtual;
  #L33a620.  v2:= temp @kind object;
  #L33a622.  return v2 @kind object;
  #L33a624.  v2:= new `java.lang.IllegalStateException`;
  #L33a628.  v0:= "closed" @kind object;
  #L33a62c.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L33a632.  throw v2;
}
procedure `okio.c` `b`(`okio.p` v1 @kind this) @signature `Lokio/p;.b:()Lokio/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L33a384.  v0:= v1.`okio.p.g` @type ^`okio.c` @kind object;
  #L33a388.  return v0 @kind object;
}
procedure `okio.d` `b0`(`okio.p` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lokio/p;.b0:([BII)Lokio/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L33a428.  v0:= v1.`okio.p.i` @type ^`boolean` @kind boolean;
  #L33a42c.  if v0 != 0 then goto L33a444;
  #L33a430.  v0:= v1.`okio.p.g` @type ^`okio.c` @kind object;
  #L33a434.  call temp:= `S0`(v0, v2, v3, v4) @signature `Lokio/c;.S0:([BII)Lokio/c;` @kind virtual;
  #L33a43a.  call temp:= `L`(v1) @signature `Lokio/p;.L:()Lokio/d;` @kind virtual;
  #L33a440.  v2:= temp @kind object;
  #L33a442.  return v2 @kind object;
  #L33a444.  v2:= new `java.lang.IllegalStateException`;
  #L33a448.  v3:= "closed" @kind object;
  #L33a44c.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L33a452.  throw v2;
}
procedure `void` `close`(`okio.p` v7 @kind this) @signature `Lokio/p;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L33a698.  v0:= v7.`okio.p.i` @type ^`boolean` @kind boolean;
  #L33a69c.  if v0 == 0 then goto L33a6a2;
  #L33a6a0.  return @kind void;
  #L33a6a2.  v0:= 0I;
  #L33a6a4.  v1:= v7.`okio.p.g` @type ^`okio.c` @kind object;
  #L33a6a8.  v2:= v1.`okio.c.h` @type ^`long` @kind wide;
  #L33a6ac.  v4:= 0L;
  #L33a6b0.  v6:= lcmp(v2, v4);
  #L33a6b4.  if v6 <= 0 then goto L33a6c6;
  #L33a6b8.  v4:= v7.`okio.p.h` @type ^`okio.u` @kind object;
  #L33a6bc.  call `e0`(v4, v1, v2) @signature `Lokio/u;.e0:(Lokio/c;J)V` @kind interface;
  #L33a6c2.  goto L33a6c6;
  #L33a6c4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L33a6c6.  v1:= v7.`okio.p.h` @type ^`okio.u` @kind object;
  #L33a6ca.  call `close`(v1) @signature `Lokio/u;.close:()V` @kind interface;
  #L33a6d0.  goto L33a6da;
  #L33a6d2.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L33a6d4.  if v0 != 0 then goto L33a6da;
  #L33a6d8.  v0:= v1 @kind object;
  #L33a6da.  v1:= 1I;
  #L33a6dc.  v7.`okio.p.i` @type ^`boolean` := v1 @kind boolean;
  #L33a6e0.  if v0 == 0 then goto L33a6ea;
  #L33a6e4.  call `e`(v0) @signature `Lokio/x;.e:(Ljava/lang/Throwable;)V` @kind static;
  #L33a6ea.  return @kind void;
  catch `java.lang.Throwable` @[L33a6a4..L33a6c2] goto L33a6c4;
  catch `java.lang.Throwable` @[L33a6c6..L33a6d0] goto L33a6d2;
}
procedure `void` `e0`(`okio.p` v1 @kind this, `okio.c` v2 @kind object, `long` v3 ) @signature `Lokio/p;.e0:(Lokio/c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L33a768.  v0:= v1.`okio.p.i` @type ^`boolean` @kind boolean;
  #L33a76c.  if v0 != 0 then goto L33a782;
  #L33a770.  v0:= v1.`okio.p.g` @type ^`okio.c` @kind object;
  #L33a774.  call `e0`(v0, v2, v3) @signature `Lokio/c;.e0:(Lokio/c;J)V` @kind virtual;
  #L33a77a.  call temp:= `L`(v1) @signature `Lokio/p;.L:()Lokio/d;` @kind virtual;
  #L33a780.  return @kind void;
  #L33a782.  v2:= new `java.lang.IllegalStateException`;
  #L33a786.  v3:= "closed" @kind object;
  #L33a78a.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L33a790.  throw v2;
}
procedure `okio.d` `f0`(`okio.p` v1 @kind this, `long` v2 ) @signature `Lokio/p;.f0:(J)Lokio/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L33a518.  v0:= v1.`okio.p.i` @type ^`boolean` @kind boolean;
  #L33a51c.  if v0 != 0 then goto L33a534;
  #L33a520.  v0:= v1.`okio.p.g` @type ^`okio.c` @kind object;
  #L33a524.  call temp:= `W0`(v0, v2) @signature `Lokio/c;.W0:(J)Lokio/c;` @kind virtual;
  #L33a52a.  call temp:= `L`(v1) @signature `Lokio/p;.L:()Lokio/d;` @kind virtual;
  #L33a530.  v2:= temp @kind object;
  #L33a532.  return v2 @kind object;
  #L33a534.  v2:= new `java.lang.IllegalStateException`;
  #L33a538.  v3:= "closed" @kind object;
  #L33a53c.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L33a542.  throw v2;
}
procedure `void` `flush`(`okio.p` v6 @kind this) @signature `Lokio/p;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L33a714.  v0:= v6.`okio.p.i` @type ^`boolean` @kind boolean;
  #L33a718.  if v0 != 0 then goto L33a746;
  #L33a71c.  v0:= v6.`okio.p.g` @type ^`okio.c` @kind object;
  #L33a720.  v1:= v0.`okio.c.h` @type ^`long` @kind wide;
  #L33a724.  v3:= 0L;
  #L33a728.  v5:= lcmp(v1, v3);
  #L33a72c.  if v5 <= 0 then goto L33a73a;
  #L33a730.  v3:= v6.`okio.p.h` @type ^`okio.u` @kind object;
  #L33a734.  call `e0`(v3, v0, v1) @signature `Lokio/u;.e0:(Lokio/c;J)V` @kind interface;
  #L33a73a.  v0:= v6.`okio.p.h` @type ^`okio.u` @kind object;
  #L33a73e.  call `flush`(v0) @signature `Lokio/u;.flush:()V` @kind interface;
  #L33a744.  return @kind void;
  #L33a746.  v0:= new `java.lang.IllegalStateException`;
  #L33a74a.  v1:= "closed" @kind object;
  #L33a74e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L33a754.  throw v0;
}
procedure `boolean` `isOpen`(`okio.p` v1 @kind this) @signature `Lokio/p;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L33a2e8.  v0:= v1.`okio.p.i` @type ^`boolean` @kind boolean;
  #L33a2ec.  v0:= v0 ^~ 1;
  #L33a2f0.  return v0;
}
procedure `okio.w` `timeout`(`okio.p` v1 @kind this) @signature `Lokio/p;.timeout:()Lokio/w;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L33a644.  v0:= v1.`okio.p.h` @type ^`okio.u` @kind object;
  #L33a648.  call temp:= `timeout`(v0) @signature `Lokio/u;.timeout:()Lokio/w;` @kind interface;
  #L33a64e.  v0:= temp @kind object;
  #L33a650.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okio.p` v2 @kind this) @signature `Lokio/p;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L33a340.  v0:= new `java.lang.StringBuilder`;
  #L33a344.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L33a34a.  v1:= "buffer(" @kind object;
  #L33a34e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L33a354.  v1:= v2.`okio.p.h` @type ^`okio.u` @kind object;
  #L33a358.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L33a35e.  v1:= ")" @kind object;
  #L33a362.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L33a368.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L33a36e.  v0:= temp @kind object;
  #L33a370.  return v0 @kind object;
}
procedure `okio.d` `u`(`okio.p` v1 @kind this, `int` v2 ) @signature `Lokio/p;.u:(I)Lokio/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L33a5cc.  v0:= v1.`okio.p.i` @type ^`boolean` @kind boolean;
  #L33a5d0.  if v0 != 0 then goto L33a5e8;
  #L33a5d4.  v0:= v1.`okio.p.g` @type ^`okio.c` @kind object;
  #L33a5d8.  call temp:= `Z0`(v0, v2) @signature `Lokio/c;.Z0:(I)Lokio/c;` @kind virtual;
  #L33a5de.  call temp:= `L`(v1) @signature `Lokio/p;.L:()Lokio/d;` @kind virtual;
  #L33a5e4.  v2:= temp @kind object;
  #L33a5e6.  return v2 @kind object;
  #L33a5e8.  v2:= new `java.lang.IllegalStateException`;
  #L33a5ec.  v0:= "closed" @kind object;
  #L33a5f0.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L33a5f6.  throw v2;
}
procedure `okio.d` `v0`(`okio.p` v1 @kind this, `byte`[] v2 @kind object) @signature `Lokio/p;.v0:([B)Lokio/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L33a3ec.  v0:= v1.`okio.p.i` @type ^`boolean` @kind boolean;
  #L33a3f0.  if v0 != 0 then goto L33a408;
  #L33a3f4.  v0:= v1.`okio.p.g` @type ^`okio.c` @kind object;
  #L33a3f8.  call temp:= `R0`(v0, v2) @signature `Lokio/c;.R0:([B)Lokio/c;` @kind virtual;
  #L33a3fe.  call temp:= `L`(v1) @signature `Lokio/p;.L:()Lokio/d;` @kind virtual;
  #L33a404.  v2:= temp @kind object;
  #L33a406.  return v2 @kind object;
  #L33a408.  v2:= new `java.lang.IllegalStateException`;
  #L33a40c.  v0:= "closed" @kind object;
  #L33a410.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L33a416.  throw v2;
}
procedure `okio.d` `w0`(`okio.p` v1 @kind this, `okio.f` v2 @kind object) @signature `Lokio/p;.w0:(Lokio/f;)Lokio/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L33a464.  v0:= v1.`okio.p.i` @type ^`boolean` @kind boolean;
  #L33a468.  if v0 != 0 then goto L33a480;
  #L33a46c.  v0:= v1.`okio.p.g` @type ^`okio.c` @kind object;
  #L33a470.  call temp:= `Q0`(v0, v2) @signature `Lokio/c;.Q0:(Lokio/f;)Lokio/c;` @kind virtual;
  #L33a476.  call temp:= `L`(v1) @signature `Lokio/p;.L:()Lokio/d;` @kind virtual;
  #L33a47c.  v2:= temp @kind object;
  #L33a47e.  return v2 @kind object;
  #L33a480.  v2:= new `java.lang.IllegalStateException`;
  #L33a484.  v0:= "closed" @kind object;
  #L33a488.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L33a48e.  throw v2;
}
procedure `int` `write`(`okio.p` v1 @kind this, `java.nio.ByteBuffer` v2 @kind object) @signature `Lokio/p;.write:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L33a304.  v0:= v1.`okio.p.i` @type ^`boolean` @kind boolean;
  #L33a308.  if v0 != 0 then goto L33a320;
  #L33a30c.  v0:= v1.`okio.p.g` @type ^`okio.c` @kind object;
  #L33a310.  call temp:= `write`(v0, v2) @signature `Lokio/c;.write:(Ljava/nio/ByteBuffer;)I` @kind virtual;
  #L33a316.  v2:= temp;
  #L33a318.  call temp:= `L`(v1) @signature `Lokio/p;.L:()Lokio/d;` @kind virtual;
  #L33a31e.  return v2;
  #L33a320.  v2:= new `java.lang.IllegalStateException`;
  #L33a324.  v0:= "closed" @kind object;
  #L33a328.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L33a32e.  throw v2;
}
