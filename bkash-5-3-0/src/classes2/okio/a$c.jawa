record `okio.a$c` @kind class @AccessFlag FINAL extends `java.lang.Thread` @kind class {
}
procedure `void` `<init>`(`okio.a$c` v1 @kind this) @signature `Lokio/a$c;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L334e14.  v0:= "Okio Watchdog" @kind object;
  #L334e18.  call `<init>`(v1, v0) @signature `Ljava/lang/Thread;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L334e1e.  v0:= 1I;
  #L334e20.  call `setDaemon`(v1, v0) @signature `Ljava/lang/Thread;.setDaemon:(Z)V` @kind virtual;
  #L334e26.  return @kind void;
}
procedure `void` `run`(`okio.a$c` v3 @kind this) @signature `Lokio/a$c;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L334e38.  v0:= constclass @type ^`okio.a` @kind object;
  #L334e3c.  @monitorenter v0
  #L334e3e.  call temp:= `i`() @signature `Lokio/a;.i:()Lokio/a;` @kind static;
  #L334e44.  v1:= temp @kind object;
  #L334e46.  if v1 != 0 then goto L334e4e;
  #L334e4a.  @monitorexit v0
  #L334e4c.  goto L334e38;
  #L334e4e.  v2:= `@@okio.a.j` @type ^`okio.a` @kind object;
  #L334e52.  if v1 != v2 then goto L334e60;
  #L334e56.  v1:= 0I;
  #L334e58.  `@@okio.a.j` @type ^`okio.a` := v1 @kind object;
  #L334e5c.  @monitorexit v0
  #L334e5e.  return @kind void;
  #L334e60.  @monitorexit v0
  #L334e62.  call `t`(v1) @signature `Lokio/a;.t:()V` @kind virtual;
  #L334e68.  goto L334e38;
  #L334e6a.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L334e6c.  @monitorexit v0
  #L334e6e.  throw v1;
  catch `java.lang.InterruptedException` @[L334e38..L334e3e] goto L334e38;
  catch `java.lang.Throwable` @[L334e3e..L334e62] goto L334e6a;
  catch `java.lang.InterruptedException` @[L334e62..L334e68] goto L334e38;
  catch `java.lang.Throwable` @[L334e6c..L334e6e] goto L334e6a;
  catch `java.lang.InterruptedException` @[L334e6e..L334e70] goto L334e38;
}
