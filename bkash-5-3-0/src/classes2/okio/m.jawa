record `okio.m` @kind class @AccessFlag PUBLIC_FINAL extends `okio.v` @kind interface {
  `okio.e` `okio.m.g` @AccessFlag PRIVATE_FINAL;
  `java.util.zip.Inflater` `okio.m.h` @AccessFlag PRIVATE_FINAL;
  `int` `okio.m.i` @AccessFlag PRIVATE;
  `boolean` `okio.m.j` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`okio.m` v0 @kind this, `okio.e` v1 @kind object, `java.util.zip.Inflater` v2 @kind object) @signature `Lokio/m;.<init>:(Lokio/e;Ljava/util/zip/Inflater;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3395dc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3395e2.  if v1 == 0 then goto L339604;
  #L3395e6.  if v2 == 0 then goto L3395f4;
  #L3395ea.  v0.`okio.m.g` @type ^`okio.e` := v1 @kind object;
  #L3395ee.  v0.`okio.m.h` @type ^`java.util.zip.Inflater` := v2 @kind object;
  #L3395f2.  return @kind void;
  #L3395f4.  v1:= new `java.lang.IllegalArgumentException`;
  #L3395f8.  v2:= "inflater == null" @kind object;
  #L3395fc.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L339602.  throw v1;
  #L339604.  v1:= new `java.lang.IllegalArgumentException`;
  #L339608.  v2:= "source == null" @kind object;
  #L33960c.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L339612.  throw v1;
}
procedure `void` `i`(`okio.m` v4 @kind this) @signature `Lokio/m;.i:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L33965c.  v0:= v4.`okio.m.i` @type ^`int`;
  #L339660.  if v0 != 0 then goto L339666;
  #L339664.  return @kind void;
  #L339666.  v1:= v4.`okio.m.h` @type ^`java.util.zip.Inflater` @kind object;
  #L33966a.  call temp:= `getRemaining`(v1) @signature `Ljava/util/zip/Inflater;.getRemaining:()I` @kind virtual;
  #L339670.  v1:= temp;
  #L339672.  v0:= v0 - v1 @kind int;
  #L339674.  v1:= v4.`okio.m.i` @type ^`int`;
  #L339678.  v1:= v1 - v0 @kind int;
  #L33967a.  v4.`okio.m.i` @type ^`int` := v1;
  #L33967e.  v1:= v4.`okio.m.g` @type ^`okio.e` @kind object;
  #L339682.  v2:= (`long`) v0 @kind i2l;
  #L339684.  call `h0`(v1, v2) @signature `Lokio/e;.h0:(J)V` @kind interface;
  #L33968a.  return @kind void;
}
procedure `void` `close`(`okio.m` v1 @kind this) @signature `Lokio/m;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L339624.  v0:= v1.`okio.m.j` @type ^`boolean` @kind boolean;
  #L339628.  if v0 == 0 then goto L33962e;
  #L33962c.  return @kind void;
  #L33962e.  v0:= v1.`okio.m.h` @type ^`java.util.zip.Inflater` @kind object;
  #L339632.  call `end`(v0) @signature `Ljava/util/zip/Inflater;.end:()V` @kind virtual;
  #L339638.  v0:= 1I;
  #L33963a.  v1.`okio.m.j` @type ^`boolean` := v0 @kind boolean;
  #L33963e.  v0:= v1.`okio.m.g` @type ^`okio.e` @kind object;
  #L339642.  call `close`(v0) @signature `Lokio/v;.close:()V` @kind interface;
  #L339648.  return @kind void;
}
procedure `boolean` `e`(`okio.m` v5 @kind this) @signature `Lokio/m;.e:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3393f0.  v0:= v5.`okio.m.h` @type ^`java.util.zip.Inflater` @kind object;
  #L3393f4.  call temp:= `needsInput`(v0) @signature `Ljava/util/zip/Inflater;.needsInput:()Z` @kind virtual;
  #L3393fa.  v0:= temp;
  #L3393fc.  v1:= 0I;
  #L3393fe.  if v0 != 0 then goto L339404;
  #L339402.  return v1;
  #L339404.  call `i`(v5) @signature `Lokio/m;.i:()V` @kind direct;
  #L33940a.  v0:= v5.`okio.m.h` @type ^`java.util.zip.Inflater` @kind object;
  #L33940e.  call temp:= `getRemaining`(v0) @signature `Ljava/util/zip/Inflater;.getRemaining:()I` @kind virtual;
  #L339414.  v0:= temp;
  #L339416.  if v0 != 0 then goto L33945c;
  #L33941a.  v0:= v5.`okio.m.g` @type ^`okio.e` @kind object;
  #L33941e.  call temp:= `H`(v0) @signature `Lokio/e;.H:()Z` @kind interface;
  #L339424.  v0:= temp;
  #L339426.  if v0 == 0 then goto L33942e;
  #L33942a.  v0:= 1I;
  #L33942c.  return v0;
  #L33942e.  v0:= v5.`okio.m.g` @type ^`okio.e` @kind object;
  #L339432.  call temp:= `b`(v0) @signature `Lokio/e;.b:()Lokio/c;` @kind interface;
  #L339438.  v0:= temp @kind object;
  #L33943a.  v0:= v0.`okio.c.g` @type ^`okio.r` @kind object;
  #L33943e.  v2:= v0.`okio.r.c` @type ^`int`;
  #L339442.  v3:= v0.`okio.r.b` @type ^`int`;
  #L339446.  v2:= v2 - v3 @kind int;
  #L339448.  v5.`okio.m.i` @type ^`int` := v2;
  #L33944c.  v4:= v5.`okio.m.h` @type ^`java.util.zip.Inflater` @kind object;
  #L339450.  v0:= v0.`okio.r.a` @type ^`byte`[] @kind object;
  #L339454.  call `setInput`(v4, v0, v3, v2) @signature `Ljava/util/zip/Inflater;.setInput:([BII)V` @kind virtual;
  #L33945a.  return v1;
  #L33945c.  v0:= new `java.lang.IllegalStateException`;
  #L339460.  v1:= "?" @kind object;
  #L339464.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L33946a.  throw v0;
}
procedure `okio.w` `timeout`(`okio.m` v1 @kind this) @signature `Lokio/m;.timeout:()Lokio/w;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3395bc.  v0:= v1.`okio.m.g` @type ^`okio.e` @kind object;
  #L3395c0.  call temp:= `timeout`(v0) @signature `Lokio/v;.timeout:()Lokio/w;` @kind interface;
  #L3395c6.  v0:= temp @kind object;
  #L3395c8.  return v0 @kind object;
}
procedure `long` `z0`(`okio.m` v6 @kind this, `okio.c` v7 @kind object, `long` v8 ) @signature `Lokio/m;.z0:(Lokio/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L33947c.  v0:= 0L;
  #L339480.  v2:= lcmp(v8, v0);
  #L339484.  if v2 < 0 then goto L33956c;
  #L339488.  v3:= v6.`okio.m.j` @type ^`boolean` @kind boolean;
  #L33948c.  if v3 != 0 then goto L33955c;
  #L339490.  if v2 != 0 then goto L339496;
  #L339494.  return v0 @kind wide;
  #L339496.  call temp:= `e`(v6) @signature `Lokio/m;.e:()Z` @kind virtual;
  #L33949c.  v0:= temp;
  #L33949e.  v1:= 1I;
  #L3394a0.  call temp:= `E0`(v7, v1) @signature `Lokio/c;.E0:(I)Lokio/r;` @kind virtual;
  #L3394a6.  v1:= temp @kind object;
  #L3394a8.  v2:= v1.`okio.r.c` @type ^`int`;
  #L3394ac.  v2:= v2 - 8192;
  #L3394b0.  v2:= (`long`) v2 @kind i2l;
  #L3394b2.  call temp:= `min`(v8, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3394b8.  v2:= temp @kind wide;
  #L3394ba.  v3:= (`int`) v2 @kind l2i;
  #L3394bc.  v2:= v6.`okio.m.h` @type ^`java.util.zip.Inflater` @kind object;
  #L3394c0.  v4:= v1.`okio.r.a` @type ^`byte`[] @kind object;
  #L3394c4.  v5:= v1.`okio.r.c` @type ^`int`;
  #L3394c8.  call temp:= `inflate`(v2, v4, v5, v3) @signature `Ljava/util/zip/Inflater;.inflate:([BII)I` @kind virtual;
  #L3394ce.  v2:= temp;
  #L3394d0.  if v2 <= 0 then goto L3394ec;
  #L3394d4.  v8:= v1.`okio.r.c` @type ^`int`;
  #L3394d8.  v8:= v8 + v2 @kind int;
  #L3394da.  v1.`okio.r.c` @type ^`int` := v8;
  #L3394de.  v8:= v7.`okio.c.h` @type ^`long` @kind wide;
  #L3394e2.  v0:= (`long`) v2 @kind i2l;
  #L3394e4.  v8:= v8 + v0 @kind long;
  #L3394e6.  v7.`okio.c.h` @type ^`long` := v8 @kind wide;
  #L3394ea.  return v0 @kind wide;
  #L3394ec.  v2:= v6.`okio.m.h` @type ^`java.util.zip.Inflater` @kind object;
  #L3394f0.  call temp:= `finished`(v2) @signature `Ljava/util/zip/Inflater;.finished:()Z` @kind virtual;
  #L3394f6.  v2:= temp;
  #L3394f8.  if v2 != 0 then goto L339524;
  #L3394fc.  v2:= v6.`okio.m.h` @type ^`java.util.zip.Inflater` @kind object;
  #L339500.  call temp:= `needsDictionary`(v2) @signature `Ljava/util/zip/Inflater;.needsDictionary:()Z` @kind virtual;
  #L339506.  v2:= temp;
  #L339508.  if v2 == 0 then goto L33950e;
  #L33950c.  goto L339524;
  #L33950e.  if v0 != 0 then goto L339514;
  #L339512.  goto L339496;
  #L339514.  v7:= new `java.io.EOFException`;
  #L339518.  v8:= "source exhausted prematurely" @kind object;
  #L33951c.  call `<init>`(v7, v8) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L339522.  throw v7;
  #L339524.  call `i`(v6) @signature `Lokio/m;.i:()V` @kind direct;
  #L33952a.  v8:= v1.`okio.r.b` @type ^`int`;
  #L33952e.  v9:= v1.`okio.r.c` @type ^`int`;
  #L339532.  if v8 != v9 then goto L339548;
  #L339536.  call temp:= `b`(v1) @signature `Lokio/r;.b:()Lokio/r;` @kind virtual;
  #L33953c.  v8:= temp @kind object;
  #L33953e.  v7.`okio.c.g` @type ^`okio.r` := v8 @kind object;
  #L339542.  call `a`(v1) @signature `Lokio/s;.a:(Lokio/r;)V` @kind static;
  #L339548.  v7:= -1L;
  #L33954c.  return v7 @kind wide;
  #L33954e.  v7:= Exception @type ^`java.util.zip.DataFormatException` @kind object;
  #L339550.  v8:= new `java.io.IOException`;
  #L339554.  call `<init>`(v8, v7) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L33955a.  throw v8;
  #L33955c.  v7:= new `java.lang.IllegalStateException`;
  #L339560.  v8:= "closed" @kind object;
  #L339564.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L33956a.  throw v7;
  #L33956c.  v7:= new `java.lang.IllegalArgumentException`;
  #L339570.  v0:= new `java.lang.StringBuilder`;
  #L339574.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L33957a.  v1:= "byteCount < 0: " @kind object;
  #L33957e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L339584.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L33958a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L339590.  v8:= temp @kind object;
  #L339592.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L339598.  throw v7;
  catch `java.util.zip.DataFormatException` @[L3394a0..L339548] goto L33954e;
}
