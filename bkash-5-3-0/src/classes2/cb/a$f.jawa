record `cb.a$f` @kind class @AccessFlag PUBLIC {
  `java.lang.Object` `cb.a$f.a` @AccessFlag PRIVATE;
  `java.lang.Object` `cb.a$f.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`cb.a$f` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lcb/a$f;.<init>:(Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L111e00.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L111e06.  v0.`cb.a$f.a` @type ^`java.lang.Object` := v1 @kind object;
  #L111e0a.  v0.`cb.a$f.b` @type ^`java.lang.Object` := v2 @kind object;
  #L111e0e.  return @kind void;
}
procedure `cb.a`[] `a`(`cb.a$f`[] v5 @kind object) @signature `Lcb/a$f;.a:([Lcb/a$f;)[Lcb/a;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L111d90.  v0:= length @variable v5;
  #L111d92.  v0:= v0 * 2;
  #L111d96.  v0:= new `cb.a`[v0];
  #L111d9a.  v1:= 0I;
  #L111d9c.  v2:= length @variable v5;
  #L111d9e.  if v1 >= v2 then goto L111dec;
  #L111da2.  v2:= v5[v1] @kind object;
  #L111da6.  v3:= v2.`cb.a$f.a` @type ^`java.lang.Object` @kind object;
  #L111daa.  v2:= v2.`cb.a$f.b` @type ^`java.lang.Object` @kind object;
  #L111dae.  v4:= instanceof @variable v3 @type ^`cb.a` @kind boolean;
  #L111db2.  if v4 != 0 then goto L111dbe;
  #L111db6.  call temp:= `j`(v3) @signature `Lcb/a;.j:(Ljava/lang/Object;)Lcb/a;` @kind static;
  #L111dbc.  v3:= temp @kind object;
  #L111dbe.  v4:= instanceof @variable v2 @type ^`cb.a` @kind boolean;
  #L111dc2.  if v4 != 0 then goto L111dce;
  #L111dc6.  call temp:= `j`(v2) @signature `Lcb/a;.j:(Ljava/lang/Object;)Lcb/a;` @kind static;
  #L111dcc.  v2:= temp @kind object;
  #L111dce.  v4:= v1 * 2;
  #L111dd2.  v3:= (`cb.a`) v3 @kind object;
  #L111dd6.  v0[v4]:= v3 @kind object;
  #L111dda.  v4:= v4 + 1;
  #L111dde.  v2:= (`cb.a`) v2 @kind object;
  #L111de2.  v0[v4]:= v2 @kind object;
  #L111de6.  v1:= v1 + 1;
  #L111dea.  goto L111d9c;
  #L111dec.  return v0 @kind object;
}
