record `cb.a$b` @kind class @AccessFlag PUBLIC extends `cb.a` @kind class, `cb.a$g` @kind interface {
  `java.lang.Object` `cb.a$b.c` @AccessFlag PROTECTED;
}
procedure `void` `<init>`(`cb.a$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcb/a$b;.<init>:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L111b34.  call `<init>`(v1) @signature `Lcb/a;.<init>:()V` @kind direct;
  #L111b3a.  v0:= instanceof @variable v2 @type ^`java.lang.String` @kind boolean;
  #L111b3e.  if v0 == 0 then goto L111b50;
  #L111b42.  v2:= (`java.lang.String`) v2 @kind object;
  #L111b46.  call temp:= `x`(v2) @signature `Lcb/a$b;.x:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L111b4c.  v2:= temp @kind object;
  #L111b4e.  goto L111b6c;
  #L111b50.  v0:= instanceof @variable v2 @type ^`java.lang.Number` @kind boolean;
  #L111b54.  if v0 == 0 then goto L111b6c;
  #L111b58.  v2:= (`java.lang.Number`) v2 @kind object;
  #L111b5c.  call temp:= `floatValue`(v2) @signature `Ljava/lang/Number;.floatValue:()F` @kind virtual;
  #L111b62.  v2:= temp;
  #L111b64.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L111b6a.  v2:= temp @kind object;
  #L111b6c.  v1.`cb.a$b.c` @type ^`java.lang.Object` := v2 @kind object;
  #L111b70.  return @kind void;
}
procedure `java.lang.String` `x`(`java.lang.String` v3 @kind object) @signature `Lcb/a$b;.x:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L111ad8.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L111ade.  v0:= temp;
  #L111ae0.  v1:= 1I;
  #L111ae2.  if v0 <= v1 then goto L111b20;
  #L111ae6.  v0:= 0I;
  #L111ae8.  call temp:= `charAt`(v3, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L111aee.  v0:= temp;
  #L111af0.  v2:= 34I;
  #L111af4.  if v0 != v2 then goto L111b20;
  #L111af8.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L111afe.  v0:= temp;
  #L111b00.  v0:= v0 - v1 @kind int;
  #L111b02.  call temp:= `charAt`(v3, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L111b08.  v0:= temp;
  #L111b0a.  if v0 != v2 then goto L111b20;
  #L111b0e.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L111b14.  v0:= temp;
  #L111b16.  v0:= v0 - v1 @kind int;
  #L111b18.  call temp:= `substring`(v3, v1, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L111b1e.  v3:= temp @kind object;
  #L111b20.  return v3 @kind object;
}
procedure `java.lang.Object` `a`(`cb.a$b` v2 @kind this) @signature `Lcb/a$b;.a:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L111a14.  v0:= v2.`cb.a$b.c` @type ^`java.lang.Object` @kind object;
  #L111a18.  v1:= instanceof @variable v0 @type ^`com.mapbox.mapboxsdk.style.layers.d` @kind boolean;
  #L111a1c.  if v1 != 0 then goto L111a36;
  #L111a20.  v1:= instanceof @variable v0 @type ^`cb.a$b` @kind boolean;
  #L111a24.  if v1 == 0 then goto L111a34;
  #L111a28.  v0:= (`cb.a$b`) v0 @kind object;
  #L111a2c.  call temp:= `a`(v0) @signature `Lcb/a$b;.a:()Ljava/lang/Object;` @kind virtual;
  #L111a32.  v0:= temp @kind object;
  #L111a34.  return v0 @kind object;
  #L111a36.  v0:= new `java.lang.IllegalArgumentException`;
  #L111a3a.  v1:= "PropertyValue are not allowed as an expression literal, use value instead." @kind object;
  #L111a3e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L111a44.  throw v0;
}
procedure `boolean` `equals`(`cb.a$b` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lcb/a$b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L111978.  v0:= 1I;
  #L11197a.  if v4 != v5 then goto L111980;
  #L11197e.  return v0;
  #L111980.  v1:= 0I;
  #L111982.  if v5 == 0 then goto L1119ce;
  #L111986.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L11198c.  v2:= temp @kind object;
  #L11198e.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L111994.  v3:= temp @kind object;
  #L111996.  if v2 == v3 then goto L11199c;
  #L11199a.  goto L1119ce;
  #L11199c.  call temp:= `equals`(v4, v5) @signature `Lcb/a;.equals:(Ljava/lang/Object;)Z` @kind super;
  #L1119a2.  v2:= temp;
  #L1119a4.  if v2 != 0 then goto L1119aa;
  #L1119a8.  return v1;
  #L1119aa.  v5:= (`cb.a$b`) v5 @kind object;
  #L1119ae.  v2:= v4.`cb.a$b.c` @type ^`java.lang.Object` @kind object;
  #L1119b2.  v5:= v5.`cb.a$b.c` @type ^`java.lang.Object` @kind object;
  #L1119b6.  if v2 == 0 then goto L1119c4;
  #L1119ba.  call temp:= `equals`(v2, v5) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1119c0.  v0:= temp;
  #L1119c2.  goto L1119cc;
  #L1119c4.  if v5 != 0 then goto L1119ca;
  #L1119c8.  goto L1119cc;
  #L1119ca.  v0:= 0I;
  #L1119cc.  return v0;
  #L1119ce.  return v1;
}
procedure `int` `hashCode`(`cb.a$b` v2 @kind this) @signature `Lcb/a$b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1119e0.  call temp:= `hashCode`(v2) @signature `Lcb/a;.hashCode:()I` @kind super;
  #L1119e6.  v0:= temp;
  #L1119e8.  v0:= v0 * 31;
  #L1119ec.  v1:= v2.`cb.a$b.c` @type ^`java.lang.Object` @kind object;
  #L1119f0.  if v1 == 0 then goto L1119fe;
  #L1119f4.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1119fa.  v1:= temp;
  #L1119fc.  goto L111a00;
  #L1119fe.  v1:= 0I;
  #L111a00.  v0:= v0 + v1 @kind int;
  #L111a02.  return v0;
}
procedure `java.lang.Object`[] `t`(`cb.a$b` v3 @kind this) @signature `Lcb/a$b;.t:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L111a58.  v0:= 2I;
  #L111a5a.  v0:= new `java.lang.Object`[v0];
  #L111a5e.  v1:= 0I;
  #L111a60.  v2:= "literal" @kind object;
  #L111a64.  v0[v1]:= v2 @kind object;
  #L111a68.  v1:= v3.`cb.a$b.c` @type ^`java.lang.Object` @kind object;
  #L111a6c.  v2:= 1I;
  #L111a6e.  v0[v2]:= v1 @kind object;
  #L111a72.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`cb.a$b` v3 @kind this) @signature `Lcb/a$b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L111a84.  v0:= v3.`cb.a$b.c` @type ^`java.lang.Object` @kind object;
  #L111a88.  v1:= instanceof @variable v0 @type ^`java.lang.String` @kind boolean;
  #L111a8c.  if v1 == 0 then goto L111abe;
  #L111a90.  v0:= new `java.lang.StringBuilder`;
  #L111a94.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L111a9a.  v1:= "\"" @kind object;
  #L111a9e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L111aa4.  v2:= v3.`cb.a$b.c` @type ^`java.lang.Object` @kind object;
  #L111aa8.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L111aae.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L111ab4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L111aba.  v0:= temp @kind object;
  #L111abc.  goto L111ac6;
  #L111abe.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L111ac4.  v0:= temp @kind object;
  #L111ac6.  return v0 @kind object;
}
