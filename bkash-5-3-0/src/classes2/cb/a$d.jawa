record `cb.a$d` @kind class @AccessFlag  extends `cb.a` @kind class, `cb.a$g` @kind interface {
  `java.util.Map` `cb.a$d.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`cb.a$d` v0 @kind this, `java.util.Map` v1 @kind object) @signature `Lcb/a$d;.<init>:(Ljava/util/Map;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L111d5c.  call `<init>`(v0) @signature `Lcb/a;.<init>:()V` @kind direct;
  #L111d62.  v0.`cb.a$d.c` @type ^`java.util.Map` := v1 @kind object;
  #L111d66.  return @kind void;
}
procedure `java.lang.Object` `a`(`cb.a$d` v5 @kind this) @signature `Lcb/a$d;.a:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L111c10.  v0:= new `java.util.HashMap`;
  #L111c14.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L111c1a.  v1:= v5.`cb.a$d.c` @type ^`java.util.Map` @kind object;
  #L111c1e.  call temp:= `keySet`(v1) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L111c24.  v1:= temp @kind object;
  #L111c26.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L111c2c.  v1:= temp @kind object;
  #L111c2e.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L111c34.  v2:= temp;
  #L111c36.  if v2 == 0 then goto L111c82;
  #L111c3a.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L111c40.  v2:= temp @kind object;
  #L111c42.  v2:= (`java.lang.String`) v2 @kind object;
  #L111c46.  v3:= v5.`cb.a$d.c` @type ^`java.util.Map` @kind object;
  #L111c4a.  call temp:= `get`(v3, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L111c50.  v3:= temp @kind object;
  #L111c52.  v3:= (`cb.a`) v3 @kind object;
  #L111c56.  v4:= instanceof @variable v3 @type ^`cb.a$g` @kind boolean;
  #L111c5a.  if v4 == 0 then goto L111c72;
  #L111c5e.  v3:= (`cb.a$g`) v3 @kind object;
  #L111c62.  call temp:= `a`(v3) @signature `Lcb/a$g;.a:()Ljava/lang/Object;` @kind interface;
  #L111c68.  v3:= temp @kind object;
  #L111c6a.  call temp:= `put`(v0, v2, v3) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L111c70.  goto L111c2e;
  #L111c72.  call temp:= `t`(v3) @signature `Lcb/a;.t:()[Ljava/lang/Object;` @kind virtual;
  #L111c78.  v3:= temp @kind object;
  #L111c7a.  call temp:= `put`(v0, v2, v3) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L111c80.  goto L111c2e;
  #L111c82.  return v0 @kind object;
}
procedure `boolean` `equals`(`cb.a$d` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lcb/a$d;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L111b84.  if v3 != v4 then goto L111b8c;
  #L111b88.  v4:= 1I;
  #L111b8a.  return v4;
  #L111b8c.  v0:= 0I;
  #L111b8e.  if v4 == 0 then goto L111bc8;
  #L111b92.  v1:= constclass @type ^`cb.a$d` @kind object;
  #L111b96.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L111b9c.  v2:= temp @kind object;
  #L111b9e.  if v1 == v2 then goto L111ba4;
  #L111ba2.  goto L111bc8;
  #L111ba4.  call temp:= `equals`(v3, v4) @signature `Lcb/a;.equals:(Ljava/lang/Object;)Z` @kind super;
  #L111baa.  v1:= temp;
  #L111bac.  if v1 != 0 then goto L111bb2;
  #L111bb0.  return v0;
  #L111bb2.  v4:= (`cb.a$d`) v4 @kind object;
  #L111bb6.  v0:= v3.`cb.a$d.c` @type ^`java.util.Map` @kind object;
  #L111bba.  v4:= v4.`cb.a$d.c` @type ^`java.util.Map` @kind object;
  #L111bbe.  call temp:= `equals`(v0, v4) @signature `Ljava/util/Map;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L111bc4.  v4:= temp;
  #L111bc6.  return v4;
  #L111bc8.  return v0;
}
procedure `int` `hashCode`(`cb.a$d` v2 @kind this) @signature `Lcb/a$d;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L111bdc.  call temp:= `hashCode`(v2) @signature `Lcb/a;.hashCode:()I` @kind super;
  #L111be2.  v0:= temp;
  #L111be4.  v0:= v0 * 31;
  #L111be8.  v1:= v2.`cb.a$d.c` @type ^`java.util.Map` @kind object;
  #L111bec.  if v1 != 0 then goto L111bf4;
  #L111bf0.  v1:= 0I;
  #L111bf2.  goto L111bfc;
  #L111bf4.  call temp:= `hashCode`(v1) @signature `Ljava/util/Map;.hashCode:()I` @kind interface;
  #L111bfa.  v1:= temp;
  #L111bfc.  v0:= v0 + v1 @kind int;
  #L111bfe.  return v0;
}
procedure `java.lang.String` `toString`(`cb.a$d` v4 @kind this) @signature `Lcb/a$d;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L111c94.  v0:= new `java.lang.StringBuilder`;
  #L111c98.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L111c9e.  v1:= "{" @kind object;
  #L111ca2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L111ca8.  v1:= v4.`cb.a$d.c` @type ^`java.util.Map` @kind object;
  #L111cac.  call temp:= `keySet`(v1) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L111cb2.  v1:= temp @kind object;
  #L111cb4.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L111cba.  v1:= temp @kind object;
  #L111cbc.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L111cc2.  v2:= temp;
  #L111cc4.  if v2 == 0 then goto L111d0c;
  #L111cc8.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L111cce.  v2:= temp @kind object;
  #L111cd0.  v2:= (`java.lang.String`) v2 @kind object;
  #L111cd4.  v3:= "\"" @kind object;
  #L111cd8.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L111cde.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L111ce4.  v3:= "\": " @kind object;
  #L111ce8.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L111cee.  v3:= v4.`cb.a$d.c` @type ^`java.util.Map` @kind object;
  #L111cf2.  call temp:= `get`(v3, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L111cf8.  v2:= temp @kind object;
  #L111cfa.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L111d00.  v2:= ", " @kind object;
  #L111d04.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L111d0a.  goto L111cbc;
  #L111d0c.  v1:= v4.`cb.a$d.c` @type ^`java.util.Map` @kind object;
  #L111d10.  call temp:= `size`(v1) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L111d16.  v1:= temp;
  #L111d18.  if v1 <= 0 then goto L111d36;
  #L111d1c.  call temp:= `length`(v0) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L111d22.  v1:= temp;
  #L111d24.  v1:= v1 + -2;
  #L111d28.  call temp:= `length`(v0) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L111d2e.  v2:= temp;
  #L111d30.  call temp:= `delete`(v0, v1, v2) @signature `Ljava/lang/StringBuilder;.delete:(II)Ljava/lang/StringBuilder;` @kind virtual;
  #L111d36.  v1:= "}" @kind object;
  #L111d3a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L111d40.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L111d46.  v0:= temp @kind object;
  #L111d48.  return v0 @kind object;
}
