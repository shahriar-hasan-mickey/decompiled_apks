record `cb.a$c` @kind class @AccessFlag  extends `cb.a$b` @kind class {
}
procedure `void` `<init>`(`cb.a$c` v0 @kind this, `java.lang.Object`[] v1 @kind object) @signature `Lcb/a$c;.<init>:([Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L111960.  call `<init>`(v0, v1) @signature `Lcb/a$b;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L111966.  return @kind void;
}
procedure `boolean` `equals`(`cb.a$c` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lcb/a$c;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L111888.  if v2 != v3 then goto L111890;
  #L11188c.  v3:= 1I;
  #L11188e.  return v3;
  #L111890.  if v3 == 0 then goto L1118c4;
  #L111894.  v0:= constclass @type ^`cb.a$c` @kind object;
  #L111898.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L11189e.  v1:= temp @kind object;
  #L1118a0.  if v0 == v1 then goto L1118a6;
  #L1118a4.  goto L1118c4;
  #L1118a6.  v3:= (`cb.a$c`) v3 @kind object;
  #L1118aa.  v0:= v2.`cb.a$b.c` @type ^`java.lang.Object` @kind object;
  #L1118ae.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L1118b2.  v3:= v3.`cb.a$b.c` @type ^`java.lang.Object` @kind object;
  #L1118b6.  v3:= (`java.lang.Object`[]) v3 @kind object;
  #L1118ba.  call temp:= `equals`(v0, v3) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L1118c0.  v3:= temp;
  #L1118c2.  return v3;
  #L1118c4.  v3:= 0I;
  #L1118c6.  return v3;
}
procedure `java.lang.String` `toString`(`cb.a$c` v5 @kind this) @signature `Lcb/a$c;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1118d8.  v0:= v5.`cb.a$b.c` @type ^`java.lang.Object` @kind object;
  #L1118dc.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L1118e0.  v1:= new `java.lang.StringBuilder`;
  #L1118e4.  v2:= "[" @kind object;
  #L1118e8.  call `<init>`(v1, v2) @signature `Ljava/lang/StringBuilder;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1118ee.  v2:= 0I;
  #L1118f0.  v3:= length @variable v0;
  #L1118f2.  if v2 >= v3 then goto L11193a;
  #L1118f6.  v3:= v0[v2] @kind object;
  #L1118fa.  v4:= instanceof @variable v3 @type ^`java.lang.String` @kind boolean;
  #L1118fe.  if v4 == 0 then goto L11191a;
  #L111902.  v4:= "\"" @kind object;
  #L111906.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11190c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L111912.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L111918.  goto L111920;
  #L11191a.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L111920.  v3:= length @variable v0;
  #L111922.  v3:= v3 + -1;
  #L111926.  if v2 == v3 then goto L111934;
  #L11192a.  v3:= ", " @kind object;
  #L11192e.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L111934.  v2:= v2 + 1;
  #L111938.  goto L1118f0;
  #L11193a.  v0:= "]" @kind object;
  #L11193e.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L111944.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11194a.  v0:= temp @kind object;
  #L11194c.  return v0 @kind object;
}
