record `okhttp3.g0` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.Closeable` @kind interface {
  `okhttp3.e0` `okhttp3.g0.g` @AccessFlag FINAL;
  `okhttp3.c0` `okhttp3.g0.h` @AccessFlag FINAL;
  `int` `okhttp3.g0.i` @AccessFlag FINAL;
  `java.lang.String` `okhttp3.g0.j` @AccessFlag FINAL;
  `okhttp3.v` `okhttp3.g0.k` @AccessFlag FINAL;
  `okhttp3.w` `okhttp3.g0.l` @AccessFlag FINAL;
  `okhttp3.h0` `okhttp3.g0.m` @AccessFlag FINAL;
  `okhttp3.g0` `okhttp3.g0.n` @AccessFlag FINAL;
  `okhttp3.g0` `okhttp3.g0.o` @AccessFlag FINAL;
  `okhttp3.g0` `okhttp3.g0.p` @AccessFlag FINAL;
  `long` `okhttp3.g0.q` @AccessFlag FINAL;
  `long` `okhttp3.g0.r` @AccessFlag FINAL;
  `okhttp3.internal.connection.c` `okhttp3.g0.s` @AccessFlag FINAL;
  `okhttp3.e` `okhttp3.g0.t` @AccessFlag PRIVATE_VOLATILE;
}
procedure `void` `<init>`(`okhttp3.g0` v2 @kind this, `okhttp3.g0$a` v3 @kind object) @signature `Lokhttp3/g0;.<init>:(Lokhttp3/g0$a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L32f540.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L32f546.  v0:= v3.`okhttp3.g0$a.a` @type ^`okhttp3.e0` @kind object;
  #L32f54a.  v2.`okhttp3.g0.g` @type ^`okhttp3.e0` := v0 @kind object;
  #L32f54e.  v0:= v3.`okhttp3.g0$a.b` @type ^`okhttp3.c0` @kind object;
  #L32f552.  v2.`okhttp3.g0.h` @type ^`okhttp3.c0` := v0 @kind object;
  #L32f556.  v0:= v3.`okhttp3.g0$a.c` @type ^`int`;
  #L32f55a.  v2.`okhttp3.g0.i` @type ^`int` := v0;
  #L32f55e.  v0:= v3.`okhttp3.g0$a.d` @type ^`java.lang.String` @kind object;
  #L32f562.  v2.`okhttp3.g0.j` @type ^`java.lang.String` := v0 @kind object;
  #L32f566.  v0:= v3.`okhttp3.g0$a.e` @type ^`okhttp3.v` @kind object;
  #L32f56a.  v2.`okhttp3.g0.k` @type ^`okhttp3.v` := v0 @kind object;
  #L32f56e.  v0:= v3.`okhttp3.g0$a.f` @type ^`okhttp3.w$a` @kind object;
  #L32f572.  call temp:= `e`(v0) @signature `Lokhttp3/w$a;.e:()Lokhttp3/w;` @kind virtual;
  #L32f578.  v0:= temp @kind object;
  #L32f57a.  v2.`okhttp3.g0.l` @type ^`okhttp3.w` := v0 @kind object;
  #L32f57e.  v0:= v3.`okhttp3.g0$a.g` @type ^`okhttp3.h0` @kind object;
  #L32f582.  v2.`okhttp3.g0.m` @type ^`okhttp3.h0` := v0 @kind object;
  #L32f586.  v0:= v3.`okhttp3.g0$a.h` @type ^`okhttp3.g0` @kind object;
  #L32f58a.  v2.`okhttp3.g0.n` @type ^`okhttp3.g0` := v0 @kind object;
  #L32f58e.  v0:= v3.`okhttp3.g0$a.i` @type ^`okhttp3.g0` @kind object;
  #L32f592.  v2.`okhttp3.g0.o` @type ^`okhttp3.g0` := v0 @kind object;
  #L32f596.  v0:= v3.`okhttp3.g0$a.j` @type ^`okhttp3.g0` @kind object;
  #L32f59a.  v2.`okhttp3.g0.p` @type ^`okhttp3.g0` := v0 @kind object;
  #L32f59e.  v0:= v3.`okhttp3.g0$a.k` @type ^`long` @kind wide;
  #L32f5a2.  v2.`okhttp3.g0.q` @type ^`long` := v0 @kind wide;
  #L32f5a6.  v0:= v3.`okhttp3.g0$a.l` @type ^`long` @kind wide;
  #L32f5aa.  v2.`okhttp3.g0.r` @type ^`long` := v0 @kind wide;
  #L32f5ae.  v3:= v3.`okhttp3.g0$a.m` @type ^`okhttp3.internal.connection.c` @kind object;
  #L32f5b2.  v2.`okhttp3.g0.s` @type ^`okhttp3.internal.connection.c` := v3 @kind object;
  #L32f5b6.  return @kind void;
}
procedure `java.lang.String` `C`(`okhttp3.g0` v1 @kind this) @signature `Lokhttp3/g0;.C:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32f3b0.  v0:= v1.`okhttp3.g0.j` @type ^`java.lang.String` @kind object;
  #L32f3b4.  return v0 @kind object;
}
procedure `okhttp3.g0$a` `J`(`okhttp3.g0` v1 @kind this) @signature `Lokhttp3/g0;.J:()Lokhttp3/g0$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32f50c.  v0:= new `okhttp3.g0$a`;
  #L32f510.  call `<init>`(v0, v1) @signature `Lokhttp3/g0$a;.<init>:(Lokhttp3/g0;)V` @kind direct;
  #L32f516.  return v0 @kind object;
}
procedure `okhttp3.g0` `Q`(`okhttp3.g0` v1 @kind this) @signature `Lokhttp3/g0;.Q:()Lokhttp3/g0;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32f4f4.  v0:= v1.`okhttp3.g0.p` @type ^`okhttp3.g0` @kind object;
  #L32f4f8.  return v0 @kind object;
}
procedure `long` `V`(`okhttp3.g0` v2 @kind this) @signature `Lokhttp3/g0;.V:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L32f450.  v0:= v2.`okhttp3.g0.r` @type ^`long` @kind wide;
  #L32f454.  return v0 @kind wide;
}
procedure `okhttp3.e0` `Y`(`okhttp3.g0` v1 @kind this) @signature `Lokhttp3/g0;.Y:()Lokhttp3/e0;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32f4dc.  v0:= v1.`okhttp3.g0.g` @type ^`okhttp3.e0` @kind object;
  #L32f4e0.  return v0 @kind object;
}
procedure `long` `Z`(`okhttp3.g0` v2 @kind this) @signature `Lokhttp3/g0;.Z:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L32f468.  v0:= v2.`okhttp3.g0.q` @type ^`long` @kind wide;
  #L32f46c.  return v0 @kind wide;
}
procedure `void` `close`(`okhttp3.g0` v2 @kind this) @signature `Lokhttp3/g0;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L32f5c8.  v0:= v2.`okhttp3.g0.m` @type ^`okhttp3.h0` @kind object;
  #L32f5cc.  if v0 == 0 then goto L32f5d8;
  #L32f5d0.  call `close`(v0) @signature `Lokhttp3/h0;.close:()V` @kind virtual;
  #L32f5d6.  return @kind void;
  #L32f5d8.  v0:= new `java.lang.IllegalStateException`;
  #L32f5dc.  v1:= "response is not eligible for a body and must not be closed" @kind object;
  #L32f5e0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32f5e6.  throw v0;
}
procedure `okhttp3.h0` `e`(`okhttp3.g0` v1 @kind this) @signature `Lokhttp3/g0;.e:()Lokhttp3/h0;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32f528.  v0:= v1.`okhttp3.g0.m` @type ^`okhttp3.h0` @kind object;
  #L32f52c.  return v0 @kind object;
}
procedure `okhttp3.e` `i`(`okhttp3.g0` v1 @kind this) @signature `Lokhttp3/g0;.i:()Lokhttp3/e;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32f480.  v0:= v1.`okhttp3.g0.t` @type ^`okhttp3.e` @kind object;
  #L32f484.  if v0 == 0 then goto L32f48a;
  #L32f488.  goto L32f49a;
  #L32f48a.  v0:= v1.`okhttp3.g0.l` @type ^`okhttp3.w` @kind object;
  #L32f48e.  call temp:= `k`(v0) @signature `Lokhttp3/e;.k:(Lokhttp3/w;)Lokhttp3/e;` @kind static;
  #L32f494.  v0:= temp @kind object;
  #L32f496.  v1.`okhttp3.g0.t` @type ^`okhttp3.e` := v0 @kind object;
  #L32f49a.  return v0 @kind object;
}
procedure `int` `k`(`okhttp3.g0` v1 @kind this) @signature `Lokhttp3/g0;.k:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32f358.  v0:= v1.`okhttp3.g0.i` @type ^`int`;
  #L32f35c.  return v0;
}
procedure `okhttp3.v` `r`(`okhttp3.g0` v1 @kind this) @signature `Lokhttp3/g0;.r:()Lokhttp3/v;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32f4ac.  v0:= v1.`okhttp3.g0.k` @type ^`okhttp3.v` @kind object;
  #L32f4b0.  return v0 @kind object;
}
procedure `java.lang.String` `s`(`okhttp3.g0` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokhttp3/g0;.s:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32f370.  v0:= 0I;
  #L32f372.  call temp:= `v`(v1, v2, v0) @signature `Lokhttp3/g0;.v:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L32f378.  v2:= temp @kind object;
  #L32f37a.  return v2 @kind object;
}
procedure `java.lang.String` `toString`(`okhttp3.g0` v2 @kind this) @signature `Lokhttp3/g0;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L32f3c8.  v0:= new `java.lang.StringBuilder`;
  #L32f3cc.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L32f3d2.  v1:= "Response{protocol=" @kind object;
  #L32f3d6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32f3dc.  v1:= v2.`okhttp3.g0.h` @type ^`okhttp3.c0` @kind object;
  #L32f3e0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32f3e6.  v1:= ", code=" @kind object;
  #L32f3ea.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32f3f0.  v1:= v2.`okhttp3.g0.i` @type ^`int`;
  #L32f3f4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L32f3fa.  v1:= ", message=" @kind object;
  #L32f3fe.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32f404.  v1:= v2.`okhttp3.g0.j` @type ^`java.lang.String` @kind object;
  #L32f408.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32f40e.  v1:= ", url=" @kind object;
  #L32f412.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32f418.  v1:= v2.`okhttp3.g0.g` @type ^`okhttp3.e0` @kind object;
  #L32f41c.  call temp:= `h`(v1) @signature `Lokhttp3/e0;.h:()Lokhttp3/x;` @kind virtual;
  #L32f422.  v1:= temp @kind object;
  #L32f424.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32f42a.  v1:= 125I;
  #L32f42e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L32f434.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L32f43a.  v0:= temp @kind object;
  #L32f43c.  return v0 @kind object;
}
procedure `java.lang.String` `v`(`okhttp3.g0` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lokhttp3/g0;.v:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32f38c.  v0:= v1.`okhttp3.g0.l` @type ^`okhttp3.w` @kind object;
  #L32f390.  call temp:= `c`(v0, v2) @signature `Lokhttp3/w;.c:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L32f396.  v2:= temp @kind object;
  #L32f398.  if v2 == 0 then goto L32f39e;
  #L32f39c.  v3:= v2 @kind object;
  #L32f39e.  return v3 @kind object;
}
procedure `okhttp3.w` `w`(`okhttp3.g0` v1 @kind this) @signature `Lokhttp3/g0;.w:()Lokhttp3/w;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32f4c4.  v0:= v1.`okhttp3.g0.l` @type ^`okhttp3.w` @kind object;
  #L32f4c8.  return v0 @kind object;
}
procedure `boolean` `y`(`okhttp3.g0` v2 @kind this) @signature `Lokhttp3/g0;.y:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L32f32c.  v0:= v2.`okhttp3.g0.i` @type ^`int`;
  #L32f330.  v1:= 200I;
  #L32f334.  if v0 < v1 then goto L32f344;
  #L32f338.  v1:= 300I;
  #L32f33c.  if v0 >= v1 then goto L32f344;
  #L32f340.  v0:= 1I;
  #L32f342.  goto L32f346;
  #L32f344.  v0:= 0I;
  #L32f346.  return v0;
}
