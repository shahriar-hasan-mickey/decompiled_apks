record `okhttp3.e0` @kind class @AccessFlag PUBLIC_FINAL {
  `okhttp3.x` `okhttp3.e0.a` @AccessFlag FINAL;
  `java.lang.String` `okhttp3.e0.b` @AccessFlag FINAL;
  `okhttp3.w` `okhttp3.e0.c` @AccessFlag FINAL;
  `okhttp3.f0` `okhttp3.e0.d` @AccessFlag FINAL;
  `java.util.Map` `okhttp3.e0.e` @AccessFlag FINAL;
  `okhttp3.e` `okhttp3.e0.f` @AccessFlag PRIVATE_VOLATILE;
}
procedure `void` `<init>`(`okhttp3.e0` v1 @kind this, `okhttp3.e0$a` v2 @kind object) @signature `Lokhttp3/e0;.<init>:(Lokhttp3/e0$a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L32ec08.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L32ec0e.  v0:= v2.`okhttp3.e0$a.a` @type ^`okhttp3.x` @kind object;
  #L32ec12.  v1.`okhttp3.e0.a` @type ^`okhttp3.x` := v0 @kind object;
  #L32ec16.  v0:= v2.`okhttp3.e0$a.b` @type ^`java.lang.String` @kind object;
  #L32ec1a.  v1.`okhttp3.e0.b` @type ^`java.lang.String` := v0 @kind object;
  #L32ec1e.  v0:= v2.`okhttp3.e0$a.c` @type ^`okhttp3.w$a` @kind object;
  #L32ec22.  call temp:= `e`(v0) @signature `Lokhttp3/w$a;.e:()Lokhttp3/w;` @kind virtual;
  #L32ec28.  v0:= temp @kind object;
  #L32ec2a.  v1.`okhttp3.e0.c` @type ^`okhttp3.w` := v0 @kind object;
  #L32ec2e.  v0:= v2.`okhttp3.e0$a.d` @type ^`okhttp3.f0` @kind object;
  #L32ec32.  v1.`okhttp3.e0.d` @type ^`okhttp3.f0` := v0 @kind object;
  #L32ec36.  v2:= v2.`okhttp3.e0$a.e` @type ^`java.util.Map` @kind object;
  #L32ec3a.  call temp:= `v`(v2) @signature `Lee/e;.v:(Ljava/util/Map;)Ljava/util/Map;` @kind static;
  #L32ec40.  v2:= temp @kind object;
  #L32ec42.  v1.`okhttp3.e0.e` @type ^`java.util.Map` := v2 @kind object;
  #L32ec46.  return @kind void;
}
procedure `okhttp3.f0` `a`(`okhttp3.e0` v1 @kind this) @signature `Lokhttp3/e0;.a:()Lokhttp3/f0;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32ebf0.  v0:= v1.`okhttp3.e0.d` @type ^`okhttp3.f0` @kind object;
  #L32ebf4.  return v0 @kind object;
}
procedure `okhttp3.e` `b`(`okhttp3.e0` v1 @kind this) @signature `Lokhttp3/e0;.b:()Lokhttp3/e;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32eb78.  v0:= v1.`okhttp3.e0.f` @type ^`okhttp3.e` @kind object;
  #L32eb7c.  if v0 == 0 then goto L32eb82;
  #L32eb80.  goto L32eb92;
  #L32eb82.  v0:= v1.`okhttp3.e0.c` @type ^`okhttp3.w` @kind object;
  #L32eb86.  call temp:= `k`(v0) @signature `Lokhttp3/e;.k:(Lokhttp3/w;)Lokhttp3/e;` @kind static;
  #L32eb8c.  v0:= temp @kind object;
  #L32eb8e.  v1.`okhttp3.e0.f` @type ^`okhttp3.e` := v0 @kind object;
  #L32eb92.  return v0 @kind object;
}
procedure `java.lang.String` `c`(`okhttp3.e0` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokhttp3/e0;.c:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32ead4.  v0:= v1.`okhttp3.e0.c` @type ^`okhttp3.w` @kind object;
  #L32ead8.  call temp:= `c`(v0, v2) @signature `Lokhttp3/w;.c:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L32eade.  v2:= temp @kind object;
  #L32eae0.  return v2 @kind object;
}
procedure `okhttp3.w` `d`(`okhttp3.e0` v1 @kind this) @signature `Lokhttp3/e0;.d:()Lokhttp3/w;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32eba4.  v0:= v1.`okhttp3.e0.c` @type ^`okhttp3.w` @kind object;
  #L32eba8.  return v0 @kind object;
}
procedure `boolean` `e`(`okhttp3.e0` v1 @kind this) @signature `Lokhttp3/e0;.e:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32eab4.  v0:= v1.`okhttp3.e0.a` @type ^`okhttp3.x` @kind object;
  #L32eab8.  call temp:= `m`(v0) @signature `Lokhttp3/x;.m:()Z` @kind virtual;
  #L32eabe.  v0:= temp;
  #L32eac0.  return v0;
}
procedure `java.lang.String` `f`(`okhttp3.e0` v1 @kind this) @signature `Lokhttp3/e0;.f:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32eaf4.  v0:= v1.`okhttp3.e0.b` @type ^`java.lang.String` @kind object;
  #L32eaf8.  return v0 @kind object;
}
procedure `okhttp3.e0$a` `g`(`okhttp3.e0` v1 @kind this) @signature `Lokhttp3/e0;.g:()Lokhttp3/e0$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32ebd4.  v0:= new `okhttp3.e0$a`;
  #L32ebd8.  call `<init>`(v0, v1) @signature `Lokhttp3/e0$a;.<init>:(Lokhttp3/e0;)V` @kind direct;
  #L32ebde.  return v0 @kind object;
}
procedure `okhttp3.x` `h`(`okhttp3.e0` v1 @kind this) @signature `Lokhttp3/e0;.h:()Lokhttp3/x;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32ebbc.  v0:= v1.`okhttp3.e0.a` @type ^`okhttp3.x` @kind object;
  #L32ebc0.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okhttp3.e0` v2 @kind this) @signature `Lokhttp3/e0;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L32eb0c.  v0:= new `java.lang.StringBuilder`;
  #L32eb10.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L32eb16.  v1:= "Request{method=" @kind object;
  #L32eb1a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32eb20.  v1:= v2.`okhttp3.e0.b` @type ^`java.lang.String` @kind object;
  #L32eb24.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32eb2a.  v1:= ", url=" @kind object;
  #L32eb2e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32eb34.  v1:= v2.`okhttp3.e0.a` @type ^`okhttp3.x` @kind object;
  #L32eb38.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32eb3e.  v1:= ", tags=" @kind object;
  #L32eb42.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32eb48.  v1:= v2.`okhttp3.e0.e` @type ^`java.util.Map` @kind object;
  #L32eb4c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32eb52.  v1:= 125I;
  #L32eb56.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L32eb5c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L32eb62.  v0:= temp @kind object;
  #L32eb64.  return v0 @kind object;
}
