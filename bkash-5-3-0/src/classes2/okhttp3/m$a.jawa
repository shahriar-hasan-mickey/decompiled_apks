record `okhttp3.m$a` @kind class @AccessFlag PUBLIC_FINAL {
  `boolean` `okhttp3.m$a.a` @AccessFlag ;
  `java.lang.String`[] `okhttp3.m$a.b` @AccessFlag ;
  `java.lang.String`[] `okhttp3.m$a.c` @AccessFlag ;
  `boolean` `okhttp3.m$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`okhttp3.m$a` v1 @kind this, `okhttp3.m` v2 @kind object) @signature `Lokhttp3/m$a;.<init>:(Lokhttp3/m;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L328d30.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L328d36.  v0:= v2.`okhttp3.m.a` @type ^`boolean` @kind boolean;
  #L328d3a.  v1.`okhttp3.m$a.a` @type ^`boolean` := v0 @kind boolean;
  #L328d3e.  v0:= v2.`okhttp3.m.c` @type ^`java.lang.String`[] @kind object;
  #L328d42.  v1.`okhttp3.m$a.b` @type ^`java.lang.String`[] := v0 @kind object;
  #L328d46.  v0:= v2.`okhttp3.m.d` @type ^`java.lang.String`[] @kind object;
  #L328d4a.  v1.`okhttp3.m$a.c` @type ^`java.lang.String`[] := v0 @kind object;
  #L328d4e.  v2:= v2.`okhttp3.m.b` @type ^`boolean` @kind boolean;
  #L328d52.  v1.`okhttp3.m$a.d` @type ^`boolean` := v2 @kind boolean;
  #L328d56.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.m$a` v0 @kind this, `boolean` v1 ) @signature `Lokhttp3/m$a;.<init>:(Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L328d14.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L328d1a.  v0.`okhttp3.m$a.a` @type ^`boolean` := v1 @kind boolean;
  #L328d1e.  return @kind void;
}
procedure `okhttp3.m` `a`(`okhttp3.m$a` v1 @kind this) @signature `Lokhttp3/m$a;.a:()Lokhttp3/m;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L328b80.  v0:= new `okhttp3.m`;
  #L328b84.  call `<init>`(v0, v1) @signature `Lokhttp3/m;.<init>:(Lokhttp3/m$a;)V` @kind direct;
  #L328b8a.  return v0 @kind object;
}
procedure `okhttp3.m$a` `b`(`okhttp3.m$a` v1 @kind this, `java.lang.String`[] v2 @kind object) @signature `Lokhttp3/m$a;.b:([Ljava/lang/String;)Lokhttp3/m$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L328b9c.  v0:= v1.`okhttp3.m$a.a` @type ^`boolean` @kind boolean;
  #L328ba0.  if v0 == 0 then goto L328bcc;
  #L328ba4.  v0:= length @variable v2;
  #L328ba6.  if v0 == 0 then goto L328bbc;
  #L328baa.  call temp:= `clone`(v2) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L328bb0.  v2:= temp @kind object;
  #L328bb2.  v2:= (`java.lang.String`[]) v2 @kind object;
  #L328bb6.  v1.`okhttp3.m$a.b` @type ^`java.lang.String`[] := v2 @kind object;
  #L328bba.  return v1 @kind object;
  #L328bbc.  v2:= new `java.lang.IllegalArgumentException`;
  #L328bc0.  v0:= "At least one cipher suite is required" @kind object;
  #L328bc4.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L328bca.  throw v2;
  #L328bcc.  v2:= new `java.lang.IllegalStateException`;
  #L328bd0.  v0:= "no cipher suites for cleartext connections" @kind object;
  #L328bd4.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L328bda.  throw v2;
}
procedure `okhttp3.m$a` `c`(`okhttp3.m$a` v3 @kind this, `okhttp3.j`[] v4 @kind object) @signature `Lokhttp3/m$a;.c:([Lokhttp3/j;)Lokhttp3/m$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L328bec.  v0:= v3.`okhttp3.m$a.a` @type ^`boolean` @kind boolean;
  #L328bf0.  if v0 == 0 then goto L328c1e;
  #L328bf4.  v0:= length @variable v4;
  #L328bf6.  v0:= new `java.lang.String`[v0];
  #L328bfa.  v1:= 0I;
  #L328bfc.  v2:= length @variable v4;
  #L328bfe.  if v1 >= v2 then goto L328c14;
  #L328c02.  v2:= v4[v1] @kind object;
  #L328c06.  v2:= v2.`okhttp3.j.a` @type ^`java.lang.String` @kind object;
  #L328c0a.  v0[v1]:= v2 @kind object;
  #L328c0e.  v1:= v1 + 1;
  #L328c12.  goto L328bfc;
  #L328c14.  call temp:= `b`(v3, v0) @signature `Lokhttp3/m$a;.b:([Ljava/lang/String;)Lokhttp3/m$a;` @kind virtual;
  #L328c1a.  v4:= temp @kind object;
  #L328c1c.  return v4 @kind object;
  #L328c1e.  v4:= new `java.lang.IllegalStateException`;
  #L328c22.  v0:= "no cipher suites for cleartext connections" @kind object;
  #L328c26.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L328c2c.  throw v4;
}
procedure `okhttp3.m$a` `d`(`okhttp3.m$a` v1 @kind this, `boolean` v2 ) @signature `Lokhttp3/m$a;.d:(Z)Lokhttp3/m$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L328c40.  v0:= v1.`okhttp3.m$a.a` @type ^`boolean` @kind boolean;
  #L328c44.  if v0 == 0 then goto L328c4e;
  #L328c48.  v1.`okhttp3.m$a.d` @type ^`boolean` := v2 @kind boolean;
  #L328c4c.  return v1 @kind object;
  #L328c4e.  v2:= new `java.lang.IllegalStateException`;
  #L328c52.  v0:= "no TLS extensions for cleartext connections" @kind object;
  #L328c56.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L328c5c.  throw v2;
}
procedure `okhttp3.m$a` `e`(`okhttp3.m$a` v1 @kind this, `java.lang.String`[] v2 @kind object) @signature `Lokhttp3/m$a;.e:([Ljava/lang/String;)Lokhttp3/m$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L328c70.  v0:= v1.`okhttp3.m$a.a` @type ^`boolean` @kind boolean;
  #L328c74.  if v0 == 0 then goto L328ca0;
  #L328c78.  v0:= length @variable v2;
  #L328c7a.  if v0 == 0 then goto L328c90;
  #L328c7e.  call temp:= `clone`(v2) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L328c84.  v2:= temp @kind object;
  #L328c86.  v2:= (`java.lang.String`[]) v2 @kind object;
  #L328c8a.  v1.`okhttp3.m$a.c` @type ^`java.lang.String`[] := v2 @kind object;
  #L328c8e.  return v1 @kind object;
  #L328c90.  v2:= new `java.lang.IllegalArgumentException`;
  #L328c94.  v0:= "At least one TLS version is required" @kind object;
  #L328c98.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L328c9e.  throw v2;
  #L328ca0.  v2:= new `java.lang.IllegalStateException`;
  #L328ca4.  v0:= "no TLS versions for cleartext connections" @kind object;
  #L328ca8.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L328cae.  throw v2;
}
procedure `okhttp3.m$a` `f`(`okhttp3.m$a` v3 @kind this, `okhttp3.j0`[] v4 @kind object) @signature `Lokhttp3/m$a;.f:([Lokhttp3/j0;)Lokhttp3/m$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L328cc0.  v0:= v3.`okhttp3.m$a.a` @type ^`boolean` @kind boolean;
  #L328cc4.  if v0 == 0 then goto L328cf2;
  #L328cc8.  v0:= length @variable v4;
  #L328cca.  v0:= new `java.lang.String`[v0];
  #L328cce.  v1:= 0I;
  #L328cd0.  v2:= length @variable v4;
  #L328cd2.  if v1 >= v2 then goto L328ce8;
  #L328cd6.  v2:= v4[v1] @kind object;
  #L328cda.  v2:= v2.`okhttp3.j0.javaName` @type ^`java.lang.String` @kind object;
  #L328cde.  v0[v1]:= v2 @kind object;
  #L328ce2.  v1:= v1 + 1;
  #L328ce6.  goto L328cd0;
  #L328ce8.  call temp:= `e`(v3, v0) @signature `Lokhttp3/m$a;.e:([Ljava/lang/String;)Lokhttp3/m$a;` @kind virtual;
  #L328cee.  v4:= temp @kind object;
  #L328cf0.  return v4 @kind object;
  #L328cf2.  v4:= new `java.lang.IllegalStateException`;
  #L328cf6.  v0:= "no TLS versions for cleartext connections" @kind object;
  #L328cfa.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L328d00.  throw v4;
}
