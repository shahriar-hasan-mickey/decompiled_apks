record `okhttp3.x` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String` `okhttp3.x.a` @AccessFlag FINAL;
  `java.lang.String` `okhttp3.x.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `okhttp3.x.c` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `okhttp3.x.d` @AccessFlag FINAL;
  `int` `okhttp3.x.e` @AccessFlag FINAL;
  `java.util.List` `okhttp3.x.f` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `okhttp3.x.g` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `okhttp3.x.h` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `okhttp3.x.i` @AccessFlag PRIVATE_FINAL;
}
global `char`[] `@@okhttp3.x.j` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/x;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L32c544.  v0:= 16I;
  #L32c548.  v0:= new `char`[v0];
  #L32c54c.  goto L32c558;
  #L32c552.  `@@okhttp3.x.j` @type ^`char`[] := v0 @kind object;
  #L32c556.  return @kind void;
  #L32c558.  v0:= (48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 65I, 66I, 67I, 68I, 69I, 70I) @kind object;
  #L32c57f.  goto L32c552;
}
procedure `void` `<init>`(`okhttp3.x` v4 @kind this, `okhttp3.x$a` v5 @kind object) @signature `Lokhttp3/x;.<init>:(Lokhttp3/x$a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L32c590.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L32c596.  v0:= v5.`okhttp3.x$a.a` @type ^`java.lang.String` @kind object;
  #L32c59a.  v4.`okhttp3.x.a` @type ^`java.lang.String` := v0 @kind object;
  #L32c59e.  v0:= v5.`okhttp3.x$a.b` @type ^`java.lang.String` @kind object;
  #L32c5a2.  v1:= 0I;
  #L32c5a4.  call temp:= `t`(v0, v1) @signature `Lokhttp3/x;.t:(Ljava/lang/String;Z)Ljava/lang/String;` @kind static;
  #L32c5aa.  v0:= temp @kind object;
  #L32c5ac.  v4.`okhttp3.x.b` @type ^`java.lang.String` := v0 @kind object;
  #L32c5b0.  v0:= v5.`okhttp3.x$a.c` @type ^`java.lang.String` @kind object;
  #L32c5b4.  call temp:= `t`(v0, v1) @signature `Lokhttp3/x;.t:(Ljava/lang/String;Z)Ljava/lang/String;` @kind static;
  #L32c5ba.  v0:= temp @kind object;
  #L32c5bc.  v4.`okhttp3.x.c` @type ^`java.lang.String` := v0 @kind object;
  #L32c5c0.  v0:= v5.`okhttp3.x$a.d` @type ^`java.lang.String` @kind object;
  #L32c5c4.  v4.`okhttp3.x.d` @type ^`java.lang.String` := v0 @kind object;
  #L32c5c8.  call temp:= `e`(v5) @signature `Lokhttp3/x$a;.e:()I` @kind virtual;
  #L32c5ce.  v0:= temp;
  #L32c5d0.  v4.`okhttp3.x.e` @type ^`int` := v0;
  #L32c5d4.  v0:= v5.`okhttp3.x$a.f` @type ^`java.util.List` @kind object;
  #L32c5d8.  call temp:= `u`(v4, v0, v1) @signature `Lokhttp3/x;.u:(Ljava/util/List;Z)Ljava/util/List;` @kind direct;
  #L32c5de.  v0:= temp @kind object;
  #L32c5e0.  v4.`okhttp3.x.f` @type ^`java.util.List` := v0 @kind object;
  #L32c5e4.  v0:= v5.`okhttp3.x$a.g` @type ^`java.util.List` @kind object;
  #L32c5e8.  v2:= 0I;
  #L32c5ea.  if v0 == 0 then goto L32c5fa;
  #L32c5ee.  v3:= 1I;
  #L32c5f0.  call temp:= `u`(v4, v0, v3) @signature `Lokhttp3/x;.u:(Ljava/util/List;Z)Ljava/util/List;` @kind direct;
  #L32c5f6.  v0:= temp @kind object;
  #L32c5f8.  goto L32c5fc;
  #L32c5fa.  v0:= v2 @kind object;
  #L32c5fc.  v4.`okhttp3.x.g` @type ^`java.util.List` := v0 @kind object;
  #L32c600.  v0:= v5.`okhttp3.x$a.h` @type ^`java.lang.String` @kind object;
  #L32c604.  if v0 == 0 then goto L32c610;
  #L32c608.  call temp:= `t`(v0, v1) @signature `Lokhttp3/x;.t:(Ljava/lang/String;Z)Ljava/lang/String;` @kind static;
  #L32c60e.  v2:= temp @kind object;
  #L32c610.  v4.`okhttp3.x.h` @type ^`java.lang.String` := v2 @kind object;
  #L32c614.  call temp:= `toString`(v5) @signature `Lokhttp3/x$a;.toString:()Ljava/lang/String;` @kind virtual;
  #L32c61a.  v5:= temp @kind object;
  #L32c61c.  v4.`okhttp3.x.i` @type ^`java.lang.String` := v5 @kind object;
  #L32c620.  return @kind void;
}
procedure `java.util.List` `A`(`java.lang.String` v5 @kind object) @signature `Lokhttp3/x;.A:(Ljava/lang/String;)Ljava/util/List;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L32c34c.  v0:= new `java.util.ArrayList`;
  #L32c350.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L32c356.  v1:= 0I;
  #L32c358.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L32c35e.  v2:= temp;
  #L32c360.  if v1 > v2 then goto L32c3d2;
  #L32c364.  v2:= 38I;
  #L32c368.  call temp:= `indexOf`(v5, v2, v1) @signature `Ljava/lang/String;.indexOf:(II)I` @kind virtual;
  #L32c36e.  v2:= temp;
  #L32c370.  v3:= -1I;
  #L32c372.  if v2 != v3 then goto L32c37e;
  #L32c376.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L32c37c.  v2:= temp;
  #L32c37e.  v4:= 61I;
  #L32c382.  call temp:= `indexOf`(v5, v4, v1) @signature `Ljava/lang/String;.indexOf:(II)I` @kind virtual;
  #L32c388.  v4:= temp;
  #L32c38a.  if v4 == v3 then goto L32c3b6;
  #L32c38e.  if v4 <= v2 then goto L32c394;
  #L32c392.  goto L32c3b6;
  #L32c394.  call temp:= `substring`(v5, v1, v4) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L32c39a.  v1:= temp @kind object;
  #L32c39c.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L32c3a2.  v4:= v4 + 1;
  #L32c3a6.  call temp:= `substring`(v5, v4, v2) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L32c3ac.  v1:= temp @kind object;
  #L32c3ae.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L32c3b4.  goto L32c3cc;
  #L32c3b6.  call temp:= `substring`(v5, v1, v2) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L32c3bc.  v1:= temp @kind object;
  #L32c3be.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L32c3c4.  v1:= 0I;
  #L32c3c6.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L32c3cc.  v1:= v2 + 1;
  #L32c3d0.  goto L32c358;
  #L32c3d2.  return v0 @kind object;
}
procedure `java.lang.String` `a`(`java.lang.String` v11 @kind object, `int` v12 , `int` v13 , `java.lang.String` v14 @kind object, `boolean` v15 , `boolean` v16 , `boolean` v17 , `boolean` v18 , `java.nio.charset.Charset` v19 @kind object) @signature `Lokhttp3/x;.a:(Ljava/lang/String;IILjava/lang/String;ZZZZLjava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L32bdf0.  v1:= v11 @kind object;
  #L32bdf2.  v3:= v13;
  #L32bdf4.  v2:= v12;
  #L32bdf6.  if v2 >= v3 then goto L32bea2;
  #L32bdfa.  call temp:= `codePointAt`(v11, v2) @signature `Ljava/lang/String;.codePointAt:(I)I` @kind virtual;
  #L32be00.  v0:= temp;
  #L32be02.  v4:= 32I;
  #L32be06.  if v0 < v4 then goto L32be64;
  #L32be0a.  v4:= 127I;
  #L32be0e.  if v0 == v4 then goto L32be64;
  #L32be12.  v4:= 128I;
  #L32be16.  if v0 < v4 then goto L32be1e;
  #L32be1a.  if v18 != 0 then goto L32be64;
  #L32be1e.  v4:= v14 @kind object;
  #L32be20.  call temp:= `indexOf`(v14, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L32be26.  v5:= temp;
  #L32be28.  v6:= -1I;
  #L32be2a.  if v5 != v6 then goto L32be66;
  #L32be2e.  v5:= 37I;
  #L32be32.  if v0 != v5 then goto L32be4a;
  #L32be36.  if v15 == 0 then goto L32be66;
  #L32be3a.  if v16 == 0 then goto L32be4a;
  #L32be3e.  call temp:= `w`(v11, v2, v13) @signature `Lokhttp3/x;.w:(Ljava/lang/String;II)Z` @kind static;
  #L32be44.  v5:= temp;
  #L32be46.  if v5 == 0 then goto L32be66;
  #L32be4a.  v5:= 43I;
  #L32be4e.  if v0 != v5 then goto L32be58;
  #L32be52.  if v17 == 0 then goto L32be58;
  #L32be56.  goto L32be66;
  #L32be58.  call temp:= `charCount`(v0) @signature `Ljava/lang/Character;.charCount:(I)I` @kind static;
  #L32be5e.  v0:= temp;
  #L32be60.  v2:= v2 + v0 @kind int;
  #L32be62.  goto L32bdf6;
  #L32be64.  v4:= v14 @kind object;
  #L32be66.  v10:= new `okio.c`;
  #L32be6a.  call `<init>`(v10) @signature `Lokio/c;.<init>:()V` @kind direct;
  #L32be70.  v0:= v12;
  #L32be72.  call temp:= `c1`(v10, v11, v12, v2) @signature `Lokio/c;.c1:(Ljava/lang/String;II)Lokio/c;` @kind virtual;
  #L32be78.  v0:= v10 @kind object;
  #L32be7a.  v1:= v11 @kind object;
  #L32be7c.  v3:= v13;
  #L32be7e.  v4:= v14 @kind object;
  #L32be80.  v5:= v15;
  #L32be82.  v6:= v16;
  #L32be86.  v7:= v17;
  #L32be8a.  v8:= v18;
  #L32be8e.  v9:= v19 @kind object;
  #L32be92.  call `c`(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) @signature `Lokhttp3/x;.c:(Lokio/c;Ljava/lang/String;IILjava/lang/String;ZZZZLjava/nio/charset/Charset;)V` @kind static;
  #L32be98.  call temp:= `i0`(v10) @signature `Lokio/c;.i0:()Ljava/lang/String;` @kind virtual;
  #L32be9e.  v0:= temp @kind object;
  #L32bea0.  return v0 @kind object;
  #L32bea2.  v0:= v12;
  #L32bea4.  call temp:= `substring`(v11, v12, v13) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L32beaa.  v0:= temp @kind object;
  #L32beac.  return v0 @kind object;
}
procedure `java.lang.String` `b`(`java.lang.String` v9 @kind object, `java.lang.String` v10 @kind object, `boolean` v11 , `boolean` v12 , `boolean` v13 , `boolean` v14 ) @signature `Lokhttp3/x;.b:(Ljava/lang/String;Ljava/lang/String;ZZZZ)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L32bec0.  call temp:= `length`(v9) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L32bec6.  v2:= temp;
  #L32bec8.  v1:= 0I;
  #L32beca.  v8:= 0I;
  #L32becc.  v0:= v9 @kind object;
  #L32bece.  v3:= v10 @kind object;
  #L32bed0.  v4:= v11;
  #L32bed2.  v5:= v12;
  #L32bed4.  v6:= v13;
  #L32bed6.  v7:= v14;
  #L32bed8.  call temp:= `a`(v0, v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lokhttp3/x;.a:(Ljava/lang/String;IILjava/lang/String;ZZZZLjava/nio/charset/Charset;)Ljava/lang/String;` @kind static;
  #L32bede.  v9:= temp @kind object;
  #L32bee0.  return v9 @kind object;
}
procedure `void` `c`(`okio.c` v6 @kind object, `java.lang.String` v7 @kind object, `int` v8 , `int` v9 , `java.lang.String` v10 @kind object, `boolean` v11 , `boolean` v12 , `boolean` v13 , `boolean` v14 , `java.nio.charset.Charset` v15 @kind object) @signature `Lokhttp3/x;.c:(Lokio/c;Ljava/lang/String;IILjava/lang/String;ZZZZLjava/nio/charset/Charset;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L32c634.  v0:= 0I;
  #L32c636.  if v8 >= v9 then goto L32c76c;
  #L32c63a.  call temp:= `codePointAt`(v7, v8) @signature `Ljava/lang/String;.codePointAt:(I)I` @kind virtual;
  #L32c640.  v1:= temp;
  #L32c642.  if v11 == 0 then goto L32c66a;
  #L32c646.  v2:= 9I;
  #L32c64a.  if v1 == v2 then goto L32c75e;
  #L32c64e.  v2:= 10I;
  #L32c652.  if v1 == v2 then goto L32c75e;
  #L32c656.  v2:= 12I;
  #L32c65a.  if v1 == v2 then goto L32c75e;
  #L32c65e.  v2:= 13I;
  #L32c662.  if v1 != v2 then goto L32c66a;
  #L32c666.  goto L32c75e;
  #L32c66a.  v2:= 43I;
  #L32c66e.  if v1 != v2 then goto L32c68e;
  #L32c672.  if v13 == 0 then goto L32c68e;
  #L32c676.  if v11 == 0 then goto L32c680;
  #L32c67a.  v2:= "+" @kind object;
  #L32c67e.  goto L32c684;
  #L32c680.  v2:= "%2B" @kind object;
  #L32c684.  call temp:= `b1`(v6, v2) @signature `Lokio/c;.b1:(Ljava/lang/String;)Lokio/c;` @kind virtual;
  #L32c68a.  goto L32c75e;
  #L32c68e.  v2:= 32I;
  #L32c692.  v3:= 37I;
  #L32c696.  if v1 < v2 then goto L32c6de;
  #L32c69a.  v2:= 127I;
  #L32c69e.  if v1 == v2 then goto L32c6de;
  #L32c6a2.  v2:= 128I;
  #L32c6a6.  if v1 < v2 then goto L32c6ae;
  #L32c6aa.  if v14 != 0 then goto L32c6de;
  #L32c6ae.  call temp:= `indexOf`(v10, v1) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L32c6b4.  v2:= temp;
  #L32c6b6.  v4:= -1I;
  #L32c6b8.  if v2 != v4 then goto L32c6de;
  #L32c6bc.  if v1 != v3 then goto L32c6d6;
  #L32c6c0.  if v11 == 0 then goto L32c6de;
  #L32c6c4.  if v12 == 0 then goto L32c6d6;
  #L32c6c8.  call temp:= `w`(v7, v8, v9) @signature `Lokhttp3/x;.w:(Ljava/lang/String;II)Z` @kind static;
  #L32c6ce.  v2:= temp;
  #L32c6d0.  if v2 != 0 then goto L32c6d6;
  #L32c6d4.  goto L32c6de;
  #L32c6d6.  call temp:= `d1`(v6, v1) @signature `Lokio/c;.d1:(I)Lokio/c;` @kind virtual;
  #L32c6dc.  goto L32c75e;
  #L32c6de.  if v0 != 0 then goto L32c6ec;
  #L32c6e2.  v0:= new `okio.c`;
  #L32c6e6.  call `<init>`(v0) @signature `Lokio/c;.<init>:()V` @kind direct;
  #L32c6ec.  if v15 == 0 then goto L32c714;
  #L32c6f0.  v2:= `@@java.nio.charset.StandardCharsets.UTF_8` @type ^`java.nio.charset.Charset` @kind object;
  #L32c6f4.  call temp:= `equals`(v15, v2) @signature `Ljava/nio/charset/Charset;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L32c6fa.  v2:= temp;
  #L32c6fc.  if v2 == 0 then goto L32c702;
  #L32c700.  goto L32c714;
  #L32c702.  call temp:= `charCount`(v1) @signature `Ljava/lang/Character;.charCount:(I)I` @kind static;
  #L32c708.  v2:= temp;
  #L32c70a.  v2:= v2 + v8 @kind int;
  #L32c70c.  call temp:= `a1`(v0, v7, v8, v2, v15) @signature `Lokio/c;.a1:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/c;` @kind virtual;
  #L32c712.  goto L32c71a;
  #L32c714.  call temp:= `d1`(v0, v1) @signature `Lokio/c;.d1:(I)Lokio/c;` @kind virtual;
  #L32c71a.  call temp:= `H`(v0) @signature `Lokio/c;.H:()Z` @kind virtual;
  #L32c720.  v2:= temp;
  #L32c722.  if v2 != 0 then goto L32c75e;
  #L32c726.  call temp:= `readByte`(v0) @signature `Lokio/c;.readByte:()B` @kind virtual;
  #L32c72c.  v2:= temp;
  #L32c72e.  v2:= v2 ^& 255;
  #L32c732.  call temp:= `U0`(v6, v3) @signature `Lokio/c;.U0:(I)Lokio/c;` @kind virtual;
  #L32c738.  v4:= `@@okhttp3.x.j` @type ^`char`[] @kind object;
  #L32c73c.  v5:= v2 ^> 4;
  #L32c740.  v5:= v5 ^& 15;
  #L32c744.  v5:= v4[v5] @kind char;
  #L32c748.  call temp:= `U0`(v6, v5) @signature `Lokio/c;.U0:(I)Lokio/c;` @kind virtual;
  #L32c74e.  v2:= v2 ^& 15;
  #L32c752.  v2:= v4[v2] @kind char;
  #L32c756.  call temp:= `U0`(v6, v2) @signature `Lokio/c;.U0:(I)Lokio/c;` @kind virtual;
  #L32c75c.  goto L32c71a;
  #L32c75e.  call temp:= `charCount`(v1) @signature `Ljava/lang/Character;.charCount:(I)I` @kind static;
  #L32c764.  v1:= temp;
  #L32c766.  v8:= v8 + v1 @kind int;
  #L32c768.  goto L32c636;
  #L32c76c.  return @kind void;
}
procedure `int` `d`(`java.lang.String` v1 @kind object) @signature `Lokhttp3/x;.d:(Ljava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L32bd4c.  v0:= "http" @kind object;
  #L32bd50.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L32bd56.  v0:= temp;
  #L32bd58.  if v0 == 0 then goto L32bd62;
  #L32bd5c.  v1:= 80I;
  #L32bd60.  return v1;
  #L32bd62.  v0:= "https" @kind object;
  #L32bd66.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L32bd6c.  v1:= temp;
  #L32bd6e.  if v1 == 0 then goto L32bd78;
  #L32bd72.  v1:= 443I;
  #L32bd76.  return v1;
  #L32bd78.  v1:= -1I;
  #L32bd7a.  return v1;
}
procedure `okhttp3.x` `k`(`java.lang.String` v2 @kind object) @signature `Lokhttp3/x;.k:(Ljava/lang/String;)Lokhttp3/x;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L32c3e4.  v0:= new `okhttp3.x$a`;
  #L32c3e8.  call `<init>`(v0) @signature `Lokhttp3/x$a;.<init>:()V` @kind direct;
  #L32c3ee.  v1:= 0I;
  #L32c3f0.  call temp:= `j`(v0, v1, v2) @signature `Lokhttp3/x$a;.j:(Lokhttp3/x;Ljava/lang/String;)Lokhttp3/x$a;` @kind virtual;
  #L32c3f6.  v2:= temp @kind object;
  #L32c3f8.  call temp:= `c`(v2) @signature `Lokhttp3/x$a;.c:()Lokhttp3/x;` @kind virtual;
  #L32c3fe.  v2:= temp @kind object;
  #L32c400.  return v2 @kind object;
}
procedure `void` `n`(`java.lang.StringBuilder` v5 @kind object, `java.util.List` v6 @kind object) @signature `Lokhttp3/x;.n:(Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L32c780.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L32c786.  v0:= temp;
  #L32c788.  v1:= 0I;
  #L32c78a.  if v1 >= v0 then goto L32c7d8;
  #L32c78e.  call temp:= `get`(v6, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L32c794.  v2:= temp @kind object;
  #L32c796.  v2:= (`java.lang.String`) v2 @kind object;
  #L32c79a.  v3:= v1 + 1;
  #L32c79e.  call temp:= `get`(v6, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L32c7a4.  v3:= temp @kind object;
  #L32c7a6.  v3:= (`java.lang.String`) v3 @kind object;
  #L32c7aa.  if v1 <= 0 then goto L32c7b8;
  #L32c7ae.  v4:= 38I;
  #L32c7b2.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L32c7b8.  call temp:= `append`(v5, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32c7be.  if v3 == 0 then goto L32c7d2;
  #L32c7c2.  v2:= 61I;
  #L32c7c6.  call temp:= `append`(v5, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L32c7cc.  call temp:= `append`(v5, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32c7d2.  v1:= v1 + 2;
  #L32c7d6.  goto L32c78a;
  #L32c7d8.  return @kind void;
}
procedure `okhttp3.x` `q`(`java.lang.String` v0 @kind object) @signature `Lokhttp3/x;.q:(Ljava/lang/String;)Lokhttp3/x;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L32c414.  call temp:= `k`(v0) @signature `Lokhttp3/x;.k:(Ljava/lang/String;)Lokhttp3/x;` @kind static;
  #L32c41a.  v0:= temp @kind object;
  #L32c41c.  return v0 @kind object;
  #L32c41e.  v0:= 0I;
  #L32c420.  return v0 @kind object;
  catch `java.lang.IllegalArgumentException` @[L32c414..L32c41c] goto L32c41e;
}
procedure `void` `r`(`java.lang.StringBuilder` v3 @kind object, `java.util.List` v4 @kind object) @signature `Lokhttp3/x;.r:(Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L32c7ec.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L32c7f2.  v0:= temp;
  #L32c7f4.  v1:= 0I;
  #L32c7f6.  if v1 >= v0 then goto L32c81c;
  #L32c7fa.  v2:= 47I;
  #L32c7fe.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L32c804.  call temp:= `get`(v4, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L32c80a.  v2:= temp @kind object;
  #L32c80c.  v2:= (`java.lang.String`) v2 @kind object;
  #L32c810.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32c816.  v1:= v1 + 1;
  #L32c81a.  goto L32c7f6;
  #L32c81c.  return @kind void;
}
procedure `java.lang.String` `s`(`java.lang.String` v3 @kind object, `int` v4 , `int` v5 , `boolean` v6 ) @signature `Lokhttp3/x;.s:(Ljava/lang/String;IIZ)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L32c0e4.  v0:= v4;
  #L32c0e6.  if v0 >= v5 then goto L32c12e;
  #L32c0ea.  call temp:= `charAt`(v3, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L32c0f0.  v1:= temp;
  #L32c0f2.  v2:= 37I;
  #L32c0f6.  if v1 == v2 then goto L32c10e;
  #L32c0fa.  v2:= 43I;
  #L32c0fe.  if v1 != v2 then goto L32c108;
  #L32c102.  if v6 == 0 then goto L32c108;
  #L32c106.  goto L32c10e;
  #L32c108.  v0:= v0 + 1;
  #L32c10c.  goto L32c0e6;
  #L32c10e.  v1:= new `okio.c`;
  #L32c112.  call `<init>`(v1) @signature `Lokio/c;.<init>:()V` @kind direct;
  #L32c118.  call temp:= `c1`(v1, v3, v4, v0) @signature `Lokio/c;.c1:(Ljava/lang/String;II)Lokio/c;` @kind virtual;
  #L32c11e.  call `v`(v1, v3, v0, v5, v6) @signature `Lokhttp3/x;.v:(Lokio/c;Ljava/lang/String;IIZ)V` @kind static;
  #L32c124.  call temp:= `i0`(v1) @signature `Lokio/c;.i0:()Ljava/lang/String;` @kind virtual;
  #L32c12a.  v3:= temp @kind object;
  #L32c12c.  return v3 @kind object;
  #L32c12e.  call temp:= `substring`(v3, v4, v5) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L32c134.  v3:= temp @kind object;
  #L32c136.  return v3 @kind object;
}
procedure `java.lang.String` `t`(`java.lang.String` v2 @kind object, `boolean` v3 ) @signature `Lokhttp3/x;.t:(Ljava/lang/String;Z)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L32c0c0.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L32c0c6.  v0:= temp;
  #L32c0c8.  v1:= 0I;
  #L32c0ca.  call temp:= `s`(v2, v1, v0, v3) @signature `Lokhttp3/x;.s:(Ljava/lang/String;IIZ)Ljava/lang/String;` @kind static;
  #L32c0d0.  v2:= temp @kind object;
  #L32c0d2.  return v2 @kind object;
}
procedure `java.util.List` `u`(`okhttp3.x` v4 @kind this, `java.util.List` v5 @kind object, `boolean` v6 ) @signature `Lokhttp3/x;.u:(Ljava/util/List;Z)Ljava/util/List;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L32c2f0.  call temp:= `size`(v5) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L32c2f6.  v0:= temp;
  #L32c2f8.  v1:= new `java.util.ArrayList`;
  #L32c2fc.  call `<init>`(v1, v0) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L32c302.  v2:= 0I;
  #L32c304.  if v2 >= v0 then goto L32c330;
  #L32c308.  call temp:= `get`(v5, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L32c30e.  v3:= temp @kind object;
  #L32c310.  v3:= (`java.lang.String`) v3 @kind object;
  #L32c314.  if v3 == 0 then goto L32c322;
  #L32c318.  call temp:= `t`(v3, v6) @signature `Lokhttp3/x;.t:(Ljava/lang/String;Z)Ljava/lang/String;` @kind static;
  #L32c31e.  v3:= temp @kind object;
  #L32c320.  goto L32c324;
  #L32c322.  v3:= 0I;
  #L32c324.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L32c32a.  v2:= v2 + 1;
  #L32c32e.  goto L32c304;
  #L32c330.  call temp:= `unmodifiableList`(v1) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L32c336.  v5:= temp @kind object;
  #L32c338.  return v5 @kind object;
}
procedure `void` `v`(`okio.c` v5 @kind object, `java.lang.String` v6 @kind object, `int` v7 , `int` v8 , `boolean` v9 ) @signature `Lokhttp3/x;.v:(Lokio/c;Ljava/lang/String;IIZ)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L32c830.  if v7 >= v8 then goto L32c8b4;
  #L32c834.  call temp:= `codePointAt`(v6, v7) @signature `Ljava/lang/String;.codePointAt:(I)I` @kind virtual;
  #L32c83a.  v0:= temp;
  #L32c83c.  v1:= 37I;
  #L32c840.  if v0 != v1 then goto L32c88a;
  #L32c844.  v1:= v7 + 2;
  #L32c848.  if v1 >= v8 then goto L32c88a;
  #L32c84c.  v2:= v7 + 1;
  #L32c850.  call temp:= `charAt`(v6, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L32c856.  v2:= temp;
  #L32c858.  call temp:= `k`(v2) @signature `Lee/e;.k:(C)I` @kind static;
  #L32c85e.  v2:= temp;
  #L32c860.  call temp:= `charAt`(v6, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L32c866.  v3:= temp;
  #L32c868.  call temp:= `k`(v3) @signature `Lee/e;.k:(C)I` @kind static;
  #L32c86e.  v3:= temp;
  #L32c870.  v4:= -1I;
  #L32c872.  if v2 == v4 then goto L32c8a2;
  #L32c876.  if v3 == v4 then goto L32c8a2;
  #L32c87a.  v7:= v2 ^< 4;
  #L32c87e.  v7:= v7 + v3 @kind int;
  #L32c880.  call temp:= `U0`(v5, v7) @signature `Lokio/c;.U0:(I)Lokio/c;` @kind virtual;
  #L32c886.  v7:= v1;
  #L32c888.  goto L32c8a8;
  #L32c88a.  v1:= 43I;
  #L32c88e.  if v0 != v1 then goto L32c8a2;
  #L32c892.  if v9 == 0 then goto L32c8a2;
  #L32c896.  v1:= 32I;
  #L32c89a.  call temp:= `U0`(v5, v1) @signature `Lokio/c;.U0:(I)Lokio/c;` @kind virtual;
  #L32c8a0.  goto L32c8a8;
  #L32c8a2.  call temp:= `d1`(v5, v0) @signature `Lokio/c;.d1:(I)Lokio/c;` @kind virtual;
  #L32c8a8.  call temp:= `charCount`(v0) @signature `Ljava/lang/Character;.charCount:(I)I` @kind static;
  #L32c8ae.  v0:= temp;
  #L32c8b0.  v7:= v7 + v0 @kind int;
  #L32c8b2.  goto L32c830;
  #L32c8b4.  return @kind void;
}
procedure `boolean` `w`(`java.lang.String` v3 @kind object, `int` v4 , `int` v5 ) @signature `Lokhttp3/x;.w:(Ljava/lang/String;II)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L32bcf0.  v0:= v4 + 2;
  #L32bcf4.  v1:= 1I;
  #L32bcf6.  if v0 >= v5 then goto L32bd38;
  #L32bcfa.  call temp:= `charAt`(v3, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L32bd00.  v5:= temp;
  #L32bd02.  v2:= 37I;
  #L32bd06.  if v5 != v2 then goto L32bd38;
  #L32bd0a.  v4:= v4 + v1 @kind int;
  #L32bd0c.  call temp:= `charAt`(v3, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L32bd12.  v4:= temp;
  #L32bd14.  call temp:= `k`(v4) @signature `Lee/e;.k:(C)I` @kind static;
  #L32bd1a.  v4:= temp;
  #L32bd1c.  v5:= -1I;
  #L32bd1e.  if v4 == v5 then goto L32bd38;
  #L32bd22.  call temp:= `charAt`(v3, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L32bd28.  v3:= temp;
  #L32bd2a.  call temp:= `k`(v3) @signature `Lee/e;.k:(C)I` @kind static;
  #L32bd30.  v3:= temp;
  #L32bd32.  if v3 == v5 then goto L32bd38;
  #L32bd36.  goto L32bd3a;
  #L32bd38.  v1:= 0I;
  #L32bd3a.  return v1;
}
procedure `java.lang.String` `B`(`okhttp3.x` v2 @kind this) @signature `Lokhttp3/x;.B:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L32c184.  v0:= "/..." @kind object;
  #L32c188.  call temp:= `p`(v2, v0) @signature `Lokhttp3/x;.p:(Ljava/lang/String;)Lokhttp3/x$a;` @kind virtual;
  #L32c18e.  v0:= temp @kind object;
  #L32c190.  v1:= "" @kind object;
  #L32c194.  call temp:= `v`(v0, v1) @signature `Lokhttp3/x$a;.v:(Ljava/lang/String;)Lokhttp3/x$a;` @kind virtual;
  #L32c19a.  v0:= temp @kind object;
  #L32c19c.  call temp:= `l`(v0, v1) @signature `Lokhttp3/x$a;.l:(Ljava/lang/String;)Lokhttp3/x$a;` @kind virtual;
  #L32c1a2.  v0:= temp @kind object;
  #L32c1a4.  call temp:= `c`(v0) @signature `Lokhttp3/x$a;.c:()Lokhttp3/x;` @kind virtual;
  #L32c1aa.  v0:= temp @kind object;
  #L32c1ac.  call temp:= `toString`(v0) @signature `Lokhttp3/x;.toString:()Ljava/lang/String;` @kind virtual;
  #L32c1b2.  v0:= temp @kind object;
  #L32c1b4.  return v0 @kind object;
}
procedure `okhttp3.x` `C`(`okhttp3.x` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lokhttp3/x;.C:(Ljava/lang/String;)Lokhttp3/x;` @AccessFlag PUBLIC {
    temp;

  #L32c444.  call temp:= `p`(v0, v1) @signature `Lokhttp3/x;.p:(Ljava/lang/String;)Lokhttp3/x$a;` @kind virtual;
  #L32c44a.  v1:= temp @kind object;
  #L32c44c.  if v1 == 0 then goto L32c45a;
  #L32c450.  call temp:= `c`(v1) @signature `Lokhttp3/x$a;.c:()Lokhttp3/x;` @kind virtual;
  #L32c456.  v1:= temp @kind object;
  #L32c458.  goto L32c45c;
  #L32c45a.  v1:= 0I;
  #L32c45c.  return v1 @kind object;
}
procedure `java.lang.String` `D`(`okhttp3.x` v1 @kind this) @signature `Lokhttp3/x;.D:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32c1c8.  v0:= v1.`okhttp3.x.a` @type ^`java.lang.String` @kind object;
  #L32c1cc.  return v0 @kind object;
}
procedure `java.net.URI` `E`(`okhttp3.x` v4 @kind this) @signature `Lokhttp3/x;.E:()Ljava/net/URI;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L32c1f8.  call temp:= `o`(v4) @signature `Lokhttp3/x;.o:()Lokhttp3/x$a;` @kind virtual;
  #L32c1fe.  v0:= temp @kind object;
  #L32c200.  call temp:= `q`(v0) @signature `Lokhttp3/x$a;.q:()Lokhttp3/x$a;` @kind virtual;
  #L32c206.  v0:= temp @kind object;
  #L32c208.  call temp:= `toString`(v0) @signature `Lokhttp3/x$a;.toString:()Ljava/lang/String;` @kind virtual;
  #L32c20e.  v0:= temp @kind object;
  #L32c210.  v1:= new `java.net.URI`;
  #L32c214.  call `<init>`(v1, v0) @signature `Ljava/net/URI;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32c21a.  return v1 @kind object;
  #L32c21c.  v1:= Exception @type ^`java.net.URISyntaxException` @kind object;
  #L32c21e.  v2:= "[\\u0000-\\u001F\\u007F-\\u009F\\p{javaWhitespace}]" @kind object;
  #L32c222.  v3:= "" @kind object;
  #L32c226.  call temp:= `replaceAll`(v0, v2, v3) @signature `Ljava/lang/String;.replaceAll:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L32c22c.  v0:= temp @kind object;
  #L32c22e.  call temp:= `create`(v0) @signature `Ljava/net/URI;.create:(Ljava/lang/String;)Ljava/net/URI;` @kind static;
  #L32c234.  v0:= temp @kind object;
  #L32c236.  return v0 @kind object;
  #L32c238.  v0:= new `java.lang.RuntimeException`;
  #L32c23c.  call `<init>`(v0, v1) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L32c242.  throw v0;
  catch `java.net.URISyntaxException` @[L32c210..L32c21a] goto L32c21c;
  catch `java.lang.Exception` @[L32c21e..L32c236] goto L32c238;
}
procedure `java.lang.String` `e`(`okhttp3.x` v2 @kind this) @signature `Lokhttp3/x;.e:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L32bef4.  v0:= v2.`okhttp3.x.h` @type ^`java.lang.String` @kind object;
  #L32bef8.  if v0 != 0 then goto L32bf00;
  #L32befc.  v0:= 0I;
  #L32befe.  return v0 @kind object;
  #L32bf00.  v0:= v2.`okhttp3.x.i` @type ^`java.lang.String` @kind object;
  #L32bf04.  v1:= 35I;
  #L32bf08.  call temp:= `indexOf`(v0, v1) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L32bf0e.  v0:= temp;
  #L32bf10.  v0:= v0 + 1;
  #L32bf14.  v1:= v2.`okhttp3.x.i` @type ^`java.lang.String` @kind object;
  #L32bf18.  call temp:= `substring`(v1, v0) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L32bf1e.  v0:= temp @kind object;
  #L32bf20.  return v0 @kind object;
}
procedure `boolean` `equals`(`okhttp3.x` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lokhttp3/x;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32bc94.  v0:= instanceof @variable v2 @type ^`okhttp3.x` @kind boolean;
  #L32bc98.  if v0 == 0 then goto L32bcb8;
  #L32bc9c.  v2:= (`okhttp3.x`) v2 @kind object;
  #L32bca0.  v2:= v2.`okhttp3.x.i` @type ^`java.lang.String` @kind object;
  #L32bca4.  v0:= v1.`okhttp3.x.i` @type ^`java.lang.String` @kind object;
  #L32bca8.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L32bcae.  v2:= temp;
  #L32bcb0.  if v2 == 0 then goto L32bcb8;
  #L32bcb4.  v2:= 1I;
  #L32bcb6.  goto L32bcba;
  #L32bcb8.  v2:= 0I;
  #L32bcba.  return v2;
}
procedure `java.lang.String` `f`(`okhttp3.x` v3 @kind this) @signature `Lokhttp3/x;.f:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L32bf34.  v0:= v3.`okhttp3.x.c` @type ^`java.lang.String` @kind object;
  #L32bf38.  call temp:= `isEmpty`(v0) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L32bf3e.  v0:= temp;
  #L32bf40.  if v0 == 0 then goto L32bf4a;
  #L32bf44.  v0:= "" @kind object;
  #L32bf48.  return v0 @kind object;
  #L32bf4a.  v0:= v3.`okhttp3.x.i` @type ^`java.lang.String` @kind object;
  #L32bf4e.  v1:= 58I;
  #L32bf52.  v2:= v3.`okhttp3.x.a` @type ^`java.lang.String` @kind object;
  #L32bf56.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L32bf5c.  v2:= temp;
  #L32bf5e.  v2:= v2 + 3;
  #L32bf62.  call temp:= `indexOf`(v0, v1, v2) @signature `Ljava/lang/String;.indexOf:(II)I` @kind virtual;
  #L32bf68.  v0:= temp;
  #L32bf6a.  v0:= v0 + 1;
  #L32bf6e.  v1:= v3.`okhttp3.x.i` @type ^`java.lang.String` @kind object;
  #L32bf72.  v2:= 64I;
  #L32bf76.  call temp:= `indexOf`(v1, v2) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L32bf7c.  v1:= temp;
  #L32bf7e.  v2:= v3.`okhttp3.x.i` @type ^`java.lang.String` @kind object;
  #L32bf82.  call temp:= `substring`(v2, v0, v1) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L32bf88.  v0:= temp @kind object;
  #L32bf8a.  return v0 @kind object;
}
procedure `java.lang.String` `g`(`okhttp3.x` v4 @kind this) @signature `Lokhttp3/x;.g:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L32bf9c.  v0:= v4.`okhttp3.x.i` @type ^`java.lang.String` @kind object;
  #L32bfa0.  v1:= v4.`okhttp3.x.a` @type ^`java.lang.String` @kind object;
  #L32bfa4.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L32bfaa.  v1:= temp;
  #L32bfac.  v1:= v1 + 3;
  #L32bfb0.  v2:= 47I;
  #L32bfb4.  call temp:= `indexOf`(v0, v2, v1) @signature `Ljava/lang/String;.indexOf:(II)I` @kind virtual;
  #L32bfba.  v0:= temp;
  #L32bfbc.  v1:= v4.`okhttp3.x.i` @type ^`java.lang.String` @kind object;
  #L32bfc0.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L32bfc6.  v2:= temp;
  #L32bfc8.  v3:= "?#" @kind object;
  #L32bfcc.  call temp:= `o`(v1, v0, v2, v3) @signature `Lee/e;.o:(Ljava/lang/String;IILjava/lang/String;)I` @kind static;
  #L32bfd2.  v1:= temp;
  #L32bfd4.  v2:= v4.`okhttp3.x.i` @type ^`java.lang.String` @kind object;
  #L32bfd8.  call temp:= `substring`(v2, v0, v1) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L32bfde.  v0:= temp @kind object;
  #L32bfe0.  return v0 @kind object;
}
procedure `java.util.List` `h`(`okhttp3.x` v6 @kind this) @signature `Lokhttp3/x;.h:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L32c270.  v0:= v6.`okhttp3.x.i` @type ^`java.lang.String` @kind object;
  #L32c274.  v1:= v6.`okhttp3.x.a` @type ^`java.lang.String` @kind object;
  #L32c278.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L32c27e.  v1:= temp;
  #L32c280.  v1:= v1 + 3;
  #L32c284.  v2:= 47I;
  #L32c288.  call temp:= `indexOf`(v0, v2, v1) @signature `Ljava/lang/String;.indexOf:(II)I` @kind virtual;
  #L32c28e.  v0:= temp;
  #L32c290.  v1:= v6.`okhttp3.x.i` @type ^`java.lang.String` @kind object;
  #L32c294.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L32c29a.  v3:= temp;
  #L32c29c.  v4:= "?#" @kind object;
  #L32c2a0.  call temp:= `o`(v1, v0, v3, v4) @signature `Lee/e;.o:(Ljava/lang/String;IILjava/lang/String;)I` @kind static;
  #L32c2a6.  v1:= temp;
  #L32c2a8.  v3:= new `java.util.ArrayList`;
  #L32c2ac.  call `<init>`(v3) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L32c2b2.  if v0 >= v1 then goto L32c2dc;
  #L32c2b6.  v0:= v0 + 1;
  #L32c2ba.  v4:= v6.`okhttp3.x.i` @type ^`java.lang.String` @kind object;
  #L32c2be.  call temp:= `n`(v4, v0, v1, v2) @signature `Lee/e;.n:(Ljava/lang/String;IIC)I` @kind static;
  #L32c2c4.  v4:= temp;
  #L32c2c6.  v5:= v6.`okhttp3.x.i` @type ^`java.lang.String` @kind object;
  #L32c2ca.  call temp:= `substring`(v5, v0, v4) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L32c2d0.  v0:= temp @kind object;
  #L32c2d2.  call temp:= `add`(v3, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L32c2d8.  v0:= v4;
  #L32c2da.  goto L32c2b2;
  #L32c2dc.  return v3 @kind object;
}
procedure `int` `hashCode`(`okhttp3.x` v1 @kind this) @signature `Lokhttp3/x;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32bd8c.  v0:= v1.`okhttp3.x.i` @type ^`java.lang.String` @kind object;
  #L32bd90.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L32bd96.  v0:= temp;
  #L32bd98.  return v0;
}
procedure `java.lang.String` `i`(`okhttp3.x` v4 @kind this) @signature `Lokhttp3/x;.i:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L32bff4.  v0:= v4.`okhttp3.x.g` @type ^`java.util.List` @kind object;
  #L32bff8.  if v0 != 0 then goto L32c000;
  #L32bffc.  v0:= 0I;
  #L32bffe.  return v0 @kind object;
  #L32c000.  v0:= v4.`okhttp3.x.i` @type ^`java.lang.String` @kind object;
  #L32c004.  v1:= 63I;
  #L32c008.  call temp:= `indexOf`(v0, v1) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L32c00e.  v0:= temp;
  #L32c010.  v0:= v0 + 1;
  #L32c014.  v1:= v4.`okhttp3.x.i` @type ^`java.lang.String` @kind object;
  #L32c018.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L32c01e.  v2:= temp;
  #L32c020.  v3:= 35I;
  #L32c024.  call temp:= `n`(v1, v0, v2, v3) @signature `Lee/e;.n:(Ljava/lang/String;IIC)I` @kind static;
  #L32c02a.  v1:= temp;
  #L32c02c.  v2:= v4.`okhttp3.x.i` @type ^`java.lang.String` @kind object;
  #L32c030.  call temp:= `substring`(v2, v0, v1) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L32c036.  v0:= temp @kind object;
  #L32c038.  return v0 @kind object;
}
procedure `java.lang.String` `j`(`okhttp3.x` v4 @kind this) @signature `Lokhttp3/x;.j:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L32c04c.  v0:= v4.`okhttp3.x.b` @type ^`java.lang.String` @kind object;
  #L32c050.  call temp:= `isEmpty`(v0) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L32c056.  v0:= temp;
  #L32c058.  if v0 == 0 then goto L32c062;
  #L32c05c.  v0:= "" @kind object;
  #L32c060.  return v0 @kind object;
  #L32c062.  v0:= v4.`okhttp3.x.a` @type ^`java.lang.String` @kind object;
  #L32c066.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L32c06c.  v0:= temp;
  #L32c06e.  v0:= v0 + 3;
  #L32c072.  v1:= v4.`okhttp3.x.i` @type ^`java.lang.String` @kind object;
  #L32c076.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L32c07c.  v2:= temp;
  #L32c07e.  v3:= ":@" @kind object;
  #L32c082.  call temp:= `o`(v1, v0, v2, v3) @signature `Lee/e;.o:(Ljava/lang/String;IILjava/lang/String;)I` @kind static;
  #L32c088.  v1:= temp;
  #L32c08a.  v2:= v4.`okhttp3.x.i` @type ^`java.lang.String` @kind object;
  #L32c08e.  call temp:= `substring`(v2, v0, v1) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L32c094.  v0:= temp @kind object;
  #L32c096.  return v0 @kind object;
}
procedure `java.lang.String` `l`(`okhttp3.x` v1 @kind this) @signature `Lokhttp3/x;.l:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32c0a8.  v0:= v1.`okhttp3.x.d` @type ^`java.lang.String` @kind object;
  #L32c0ac.  return v0 @kind object;
}
procedure `boolean` `m`(`okhttp3.x` v2 @kind this) @signature `Lokhttp3/x;.m:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L32bccc.  v0:= v2.`okhttp3.x.a` @type ^`java.lang.String` @kind object;
  #L32bcd0.  v1:= "https" @kind object;
  #L32bcd4.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L32bcda.  v0:= temp;
  #L32bcdc.  return v0;
}
procedure `okhttp3.x$a` `o`(`okhttp3.x` v3 @kind this) @signature `Lokhttp3/x;.o:()Lokhttp3/x$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L32c470.  v0:= new `okhttp3.x$a`;
  #L32c474.  call `<init>`(v0) @signature `Lokhttp3/x$a;.<init>:()V` @kind direct;
  #L32c47a.  v1:= v3.`okhttp3.x.a` @type ^`java.lang.String` @kind object;
  #L32c47e.  v0.`okhttp3.x$a.a` @type ^`java.lang.String` := v1 @kind object;
  #L32c482.  call temp:= `j`(v3) @signature `Lokhttp3/x;.j:()Ljava/lang/String;` @kind virtual;
  #L32c488.  v1:= temp @kind object;
  #L32c48a.  v0.`okhttp3.x$a.b` @type ^`java.lang.String` := v1 @kind object;
  #L32c48e.  call temp:= `f`(v3) @signature `Lokhttp3/x;.f:()Ljava/lang/String;` @kind virtual;
  #L32c494.  v1:= temp @kind object;
  #L32c496.  v0.`okhttp3.x$a.c` @type ^`java.lang.String` := v1 @kind object;
  #L32c49a.  v1:= v3.`okhttp3.x.d` @type ^`java.lang.String` @kind object;
  #L32c49e.  v0.`okhttp3.x$a.d` @type ^`java.lang.String` := v1 @kind object;
  #L32c4a2.  v1:= v3.`okhttp3.x.e` @type ^`int`;
  #L32c4a6.  v2:= v3.`okhttp3.x.a` @type ^`java.lang.String` @kind object;
  #L32c4aa.  call temp:= `d`(v2) @signature `Lokhttp3/x;.d:(Ljava/lang/String;)I` @kind static;
  #L32c4b0.  v2:= temp;
  #L32c4b2.  if v1 == v2 then goto L32c4bc;
  #L32c4b6.  v1:= v3.`okhttp3.x.e` @type ^`int`;
  #L32c4ba.  goto L32c4be;
  #L32c4bc.  v1:= -1I;
  #L32c4be.  v0.`okhttp3.x$a.e` @type ^`int` := v1;
  #L32c4c2.  v1:= v0.`okhttp3.x$a.f` @type ^`java.util.List` @kind object;
  #L32c4c6.  call `clear`(v1) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L32c4cc.  v1:= v0.`okhttp3.x$a.f` @type ^`java.util.List` @kind object;
  #L32c4d0.  call temp:= `h`(v3) @signature `Lokhttp3/x;.h:()Ljava/util/List;` @kind virtual;
  #L32c4d6.  v2:= temp @kind object;
  #L32c4d8.  call temp:= `addAll`(v1, v2) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L32c4de.  call temp:= `i`(v3) @signature `Lokhttp3/x;.i:()Ljava/lang/String;` @kind virtual;
  #L32c4e4.  v1:= temp @kind object;
  #L32c4e6.  call temp:= `f`(v0, v1) @signature `Lokhttp3/x$a;.f:(Ljava/lang/String;)Lokhttp3/x$a;` @kind virtual;
  #L32c4ec.  call temp:= `e`(v3) @signature `Lokhttp3/x;.e:()Ljava/lang/String;` @kind virtual;
  #L32c4f2.  v1:= temp @kind object;
  #L32c4f4.  v0.`okhttp3.x$a.h` @type ^`java.lang.String` := v1 @kind object;
  #L32c4f8.  return v0 @kind object;
}
procedure `okhttp3.x$a` `p`(`okhttp3.x` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokhttp3/x;.p:(Ljava/lang/String;)Lokhttp3/x$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32c50c.  v0:= new `okhttp3.x$a`;
  #L32c510.  call `<init>`(v0) @signature `Lokhttp3/x$a;.<init>:()V` @kind direct;
  #L32c516.  call temp:= `j`(v0, v1, v2) @signature `Lokhttp3/x$a;.j:(Lokhttp3/x;Ljava/lang/String;)Lokhttp3/x$a;` @kind virtual;
  #L32c51c.  v2:= temp @kind object;
  #L32c51e.  return v2 @kind object;
  #L32c520.  v2:= 0I;
  #L32c522.  return v2 @kind object;
  catch `java.lang.IllegalArgumentException` @[L32c50c..L32c51e] goto L32c520;
}
procedure `java.lang.String` `toString`(`okhttp3.x` v1 @kind this) @signature `Lokhttp3/x;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32c1e0.  v0:= v1.`okhttp3.x.i` @type ^`java.lang.String` @kind object;
  #L32c1e4.  return v0 @kind object;
}
procedure `int` `x`(`okhttp3.x` v1 @kind this) @signature `Lokhttp3/x;.x:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32bdac.  v0:= v1.`okhttp3.x.e` @type ^`int`;
  #L32bdb0.  return v0;
}
procedure `java.lang.String` `y`(`okhttp3.x` v2 @kind this) @signature `Lokhttp3/x;.y:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L32c148.  v0:= v2.`okhttp3.x.g` @type ^`java.util.List` @kind object;
  #L32c14c.  if v0 != 0 then goto L32c154;
  #L32c150.  v0:= 0I;
  #L32c152.  return v0 @kind object;
  #L32c154.  v0:= new `java.lang.StringBuilder`;
  #L32c158.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L32c15e.  v1:= v2.`okhttp3.x.g` @type ^`java.util.List` @kind object;
  #L32c162.  call `n`(v0, v1) @signature `Lokhttp3/x;.n:(Ljava/lang/StringBuilder;Ljava/util/List;)V` @kind static;
  #L32c168.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L32c16e.  v0:= temp @kind object;
  #L32c170.  return v0 @kind object;
}
procedure `int` `z`(`okhttp3.x` v1 @kind this) @signature `Lokhttp3/x;.z:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32bdc4.  v0:= v1.`okhttp3.x.g` @type ^`java.util.List` @kind object;
  #L32bdc8.  if v0 == 0 then goto L32bdda;
  #L32bdcc.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L32bdd2.  v0:= temp;
  #L32bdd4.  v0:= v0 / 2;
  #L32bdd8.  goto L32bddc;
  #L32bdda.  v0:= 0I;
  #L32bddc.  return v0;
}
