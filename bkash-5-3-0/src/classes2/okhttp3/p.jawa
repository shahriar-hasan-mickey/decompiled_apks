record `okhttp3.p` @kind class @AccessFlag PUBLIC_FINAL {
  `int` `okhttp3.p.a` @AccessFlag PRIVATE;
  `int` `okhttp3.p.b` @AccessFlag PRIVATE;
  `java.lang.Runnable` `okhttp3.p.c` @AccessFlag PRIVATE;
  `java.util.concurrent.ExecutorService` `okhttp3.p.d` @AccessFlag PRIVATE;
  `java.util.Deque` `okhttp3.p.e` @AccessFlag PRIVATE_FINAL;
  `java.util.Deque` `okhttp3.p.f` @AccessFlag PRIVATE_FINAL;
  `java.util.Deque` `okhttp3.p.g` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<clinit>`() @signature `Lokhttp3/p;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;

  #L329fb0.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.p` v1 @kind this) @signature `Lokhttp3/p;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L329fc4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L329fca.  v0:= 64I;
  #L329fce.  v1.`okhttp3.p.a` @type ^`int` := v0;
  #L329fd2.  v0:= 5I;
  #L329fd4.  v1.`okhttp3.p.b` @type ^`int` := v0;
  #L329fd8.  v0:= new `java.util.ArrayDeque`;
  #L329fdc.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L329fe2.  v1.`okhttp3.p.e` @type ^`java.util.Deque` := v0 @kind object;
  #L329fe6.  v0:= new `java.util.ArrayDeque`;
  #L329fea.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L329ff0.  v1.`okhttp3.p.f` @type ^`java.util.Deque` := v0 @kind object;
  #L329ff4.  v0:= new `java.util.ArrayDeque`;
  #L329ff8.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L329ffe.  v1.`okhttp3.p.g` @type ^`java.util.Deque` := v0 @kind object;
  #L32a002.  return @kind void;
}
procedure `okhttp3.d0$a` `d`(`okhttp3.p` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lokhttp3/p;.d:(Ljava/lang/String;)Lokhttp3/d0$a;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L329f28.  v0:= v3.`okhttp3.p.f` @type ^`java.util.Deque` @kind object;
  #L329f2c.  call temp:= `iterator`(v0) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L329f32.  v0:= temp @kind object;
  #L329f34.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L329f3a.  v1:= temp;
  #L329f3c.  if v1 == 0 then goto L329f62;
  #L329f40.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L329f46.  v1:= temp @kind object;
  #L329f48.  v1:= (`okhttp3.d0$a`) v1 @kind object;
  #L329f4c.  call temp:= `o`(v1) @signature `Lokhttp3/d0$a;.o:()Ljava/lang/String;` @kind virtual;
  #L329f52.  v2:= temp @kind object;
  #L329f54.  call temp:= `equals`(v2, v4) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L329f5a.  v2:= temp;
  #L329f5c.  if v2 == 0 then goto L329f34;
  #L329f60.  return v1 @kind object;
  #L329f62.  v0:= v3.`okhttp3.p.e` @type ^`java.util.Deque` @kind object;
  #L329f66.  call temp:= `iterator`(v0) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L329f6c.  v0:= temp @kind object;
  #L329f6e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L329f74.  v1:= temp;
  #L329f76.  if v1 == 0 then goto L329f9c;
  #L329f7a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L329f80.  v1:= temp @kind object;
  #L329f82.  v1:= (`okhttp3.d0$a`) v1 @kind object;
  #L329f86.  call temp:= `o`(v1) @signature `Lokhttp3/d0$a;.o:()Ljava/lang/String;` @kind virtual;
  #L329f8c.  v2:= temp @kind object;
  #L329f8e.  call temp:= `equals`(v2, v4) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L329f94.  v2:= temp;
  #L329f96.  if v2 == 0 then goto L329f6e;
  #L329f9a.  return v1 @kind object;
  #L329f9c.  v4:= 0I;
  #L329f9e.  return v4 @kind object;
}
procedure `void` `e`(`okhttp3.p` v0 @kind this, `java.util.Deque` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lokhttp3/p;.e:(Ljava/util/Deque;Ljava/lang/Object;)V` @AccessFlag PRIVATE {
    temp;

  #L32a0b4.  @monitorenter v0
  #L32a0b6.  call temp:= `remove`(v1, v2) @signature `Ljava/util/Deque;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L32a0bc.  v1:= temp;
  #L32a0be.  if v1 == 0 then goto L32a0e0;
  #L32a0c2.  v1:= v0.`okhttp3.p.c` @type ^`java.lang.Runnable` @kind object;
  #L32a0c6.  @monitorexit v0
  #L32a0c8.  call temp:= `h`(v0) @signature `Lokhttp3/p;.h:()Z` @kind direct;
  #L32a0ce.  v2:= temp;
  #L32a0d0.  if v2 != 0 then goto L32a0de;
  #L32a0d4.  if v1 == 0 then goto L32a0de;
  #L32a0d8.  call `run`(v1) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L32a0de.  return @kind void;
  #L32a0e0.  v1:= new `java.lang.AssertionError`;
  #L32a0e4.  v2:= "Call wasn't in-flight!" @kind object;
  #L32a0e8.  call `<init>`(v1, v2) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L32a0ee.  throw v1;
  #L32a0f0.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L32a0f2.  @monitorexit v0
  #L32a0f4.  throw v1;
  catch `java.lang.Throwable` @[L32a0b6..L32a0c8] goto L32a0f0;
  catch `java.lang.Throwable` @[L32a0e0..L32a0f4] goto L32a0f0;
}
procedure `boolean` `h`(`okhttp3.p` v6 @kind this) @signature `Lokhttp3/p;.h:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L329d84.  v0:= new `java.util.ArrayList`;
  #L329d88.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L329d8e.  @monitorenter v6
  #L329d90.  v1:= v6.`okhttp3.p.e` @type ^`java.util.Deque` @kind object;
  #L329d94.  call temp:= `iterator`(v1) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L329d9a.  v1:= temp @kind object;
  #L329d9c.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L329da2.  v2:= temp;
  #L329da4.  if v2 == 0 then goto L329e0a;
  #L329da8.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L329dae.  v2:= temp @kind object;
  #L329db0.  v2:= (`okhttp3.d0$a`) v2 @kind object;
  #L329db4.  v3:= v6.`okhttp3.p.f` @type ^`java.util.Deque` @kind object;
  #L329db8.  call temp:= `size`(v3) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #L329dbe.  v3:= temp;
  #L329dc0.  v4:= v6.`okhttp3.p.a` @type ^`int`;
  #L329dc4.  if v3 < v4 then goto L329dca;
  #L329dc8.  goto L329e0a;
  #L329dca.  call temp:= `l`(v2) @signature `Lokhttp3/d0$a;.l:()Ljava/util/concurrent/atomic/AtomicInteger;` @kind virtual;
  #L329dd0.  v3:= temp @kind object;
  #L329dd2.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L329dd8.  v3:= temp;
  #L329dda.  v4:= v6.`okhttp3.p.b` @type ^`int`;
  #L329dde.  if v3 < v4 then goto L329de4;
  #L329de2.  goto L329d9c;
  #L329de4.  call `remove`(v1) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L329dea.  call temp:= `l`(v2) @signature `Lokhttp3/d0$a;.l:()Ljava/util/concurrent/atomic/AtomicInteger;` @kind virtual;
  #L329df0.  v3:= temp @kind object;
  #L329df2.  call temp:= `incrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.incrementAndGet:()I` @kind virtual;
  #L329df8.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L329dfe.  v3:= v6.`okhttp3.p.f` @type ^`java.util.Deque` @kind object;
  #L329e02.  call temp:= `add`(v3, v2) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L329e08.  goto L329d9c;
  #L329e0a.  call temp:= `i`(v6) @signature `Lokhttp3/p;.i:()I` @kind virtual;
  #L329e10.  v1:= temp;
  #L329e12.  v2:= 0I;
  #L329e14.  if v1 <= 0 then goto L329e1c;
  #L329e18.  v1:= 1I;
  #L329e1a.  goto L329e1e;
  #L329e1c.  v1:= 0I;
  #L329e1e.  @monitorexit v6
  #L329e20.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L329e26.  v3:= temp;
  #L329e28.  if v2 >= v3 then goto L329e4c;
  #L329e2c.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L329e32.  v4:= temp @kind object;
  #L329e34.  v4:= (`okhttp3.d0$a`) v4 @kind object;
  #L329e38.  call temp:= `c`(v6) @signature `Lokhttp3/p;.c:()Ljava/util/concurrent/ExecutorService;` @kind virtual;
  #L329e3e.  v5:= temp @kind object;
  #L329e40.  call `m`(v4, v5) @signature `Lokhttp3/d0$a;.m:(Ljava/util/concurrent/ExecutorService;)V` @kind virtual;
  #L329e46.  v2:= v2 + 1;
  #L329e4a.  goto L329e28;
  #L329e4c.  return v1;
  #L329e4e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L329e50.  @monitorexit v6
  #L329e52.  throw v0;
  catch `java.lang.Throwable` @[L329d90..L329e20] goto L329e4e;
  catch `java.lang.Throwable` @[L329e50..L329e52] goto L329e4e;
}
procedure `void` `a`(`okhttp3.p` v1 @kind this, `okhttp3.d0$a` v2 @kind object) @signature `Lokhttp3/p;.a:(Lokhttp3/d0$a;)V` @AccessFlag  {
    temp;
    v0;

  #L32a014.  @monitorenter v1
  #L32a016.  v0:= v1.`okhttp3.p.e` @type ^`java.util.Deque` @kind object;
  #L32a01a.  call temp:= `add`(v0, v2) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L32a020.  call temp:= `n`(v2) @signature `Lokhttp3/d0$a;.n:()Lokhttp3/d0;` @kind virtual;
  #L32a026.  v0:= temp @kind object;
  #L32a028.  v0:= v0.`okhttp3.d0.j` @type ^`boolean` @kind boolean;
  #L32a02c.  if v0 != 0 then goto L32a04a;
  #L32a030.  call temp:= `o`(v2) @signature `Lokhttp3/d0$a;.o:()Ljava/lang/String;` @kind virtual;
  #L32a036.  v0:= temp @kind object;
  #L32a038.  call temp:= `d`(v1, v0) @signature `Lokhttp3/p;.d:(Ljava/lang/String;)Lokhttp3/d0$a;` @kind direct;
  #L32a03e.  v0:= temp @kind object;
  #L32a040.  if v0 == 0 then goto L32a04a;
  #L32a044.  call `p`(v2, v0) @signature `Lokhttp3/d0$a;.p:(Lokhttp3/d0$a;)V` @kind virtual;
  #L32a04a.  @monitorexit v1
  #L32a04c.  call temp:= `h`(v1) @signature `Lokhttp3/p;.h:()Z` @kind direct;
  #L32a052.  return @kind void;
  #L32a054.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L32a056.  @monitorexit v1
  #L32a058.  throw v2;
  catch `java.lang.Throwable` @[L32a016..L32a04c] goto L32a054;
  catch `java.lang.Throwable` @[L32a056..L32a058] goto L32a054;
}
procedure `void` `b`(`okhttp3.p` v1 @kind this, `okhttp3.d0` v2 @kind object) @signature `Lokhttp3/p;.b:(Lokhttp3/d0;)V` @AccessFlag  {
    temp;
    v0;

  #L32a080.  @monitorenter v1
  #L32a082.  v0:= v1.`okhttp3.p.g` @type ^`java.util.Deque` @kind object;
  #L32a086.  call temp:= `add`(v0, v2) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L32a08c.  @monitorexit v1
  #L32a08e.  return @kind void;
  #L32a090.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L32a092.  @monitorexit v1
  #L32a094.  throw v2;
  catch `java.lang.Throwable` @[L32a082..L32a08c] goto L32a090;
}
procedure `java.util.concurrent.ExecutorService` `c`(`okhttp3.p` v9 @kind this) @signature `Lokhttp3/p;.c:()Ljava/util/concurrent/ExecutorService;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L329ebc.  @monitorenter v9
  #L329ebe.  v0:= v9.`okhttp3.p.d` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L329ec2.  if v0 != 0 then goto L329efe;
  #L329ec6.  v0:= new `java.util.concurrent.ThreadPoolExecutor`;
  #L329eca.  v2:= 0I;
  #L329ecc.  v3:= 2147483647I;
  #L329ed2.  v4:= 60L;
  #L329ed6.  v6:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L329eda.  v7:= new `java.util.concurrent.SynchronousQueue`;
  #L329ede.  call `<init>`(v7) @signature `Ljava/util/concurrent/SynchronousQueue;.<init>:()V` @kind direct;
  #L329ee4.  v1:= "OkHttp Dispatcher" @kind object;
  #L329ee8.  v8:= 0I;
  #L329eea.  call temp:= `I`(v1, v8) @signature `Lee/e;.I:(Ljava/lang/String;Z)Ljava/util/concurrent/ThreadFactory;` @kind static;
  #L329ef0.  v8:= temp @kind object;
  #L329ef2.  v1:= v0 @kind object;
  #L329ef4.  call `<init>`(v1, v2, v3, v4, v6, v7, v8) @signature `Ljava/util/concurrent/ThreadPoolExecutor;.<init>:(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L329efa.  v9.`okhttp3.p.d` @type ^`java.util.concurrent.ExecutorService` := v0 @kind object;
  #L329efe.  v0:= v9.`okhttp3.p.d` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L329f02.  @monitorexit v9
  #L329f04.  return v0 @kind object;
  #L329f06.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L329f08.  @monitorexit v9
  #L329f0a.  throw v0;
  catch `java.lang.Throwable` @[L329ebe..L329f02] goto L329f06;
}
procedure `void` `f`(`okhttp3.p` v1 @kind this, `okhttp3.d0$a` v2 @kind object) @signature `Lokhttp3/p;.f:(Lokhttp3/d0$a;)V` @AccessFlag  {
    temp;
    v0;

  #L32a11c.  call temp:= `l`(v2) @signature `Lokhttp3/d0$a;.l:()Ljava/util/concurrent/atomic/AtomicInteger;` @kind virtual;
  #L32a122.  v0:= temp @kind object;
  #L32a124.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L32a12a.  v0:= v1.`okhttp3.p.f` @type ^`java.util.Deque` @kind object;
  #L32a12e.  call `e`(v1, v0, v2) @signature `Lokhttp3/p;.e:(Ljava/util/Deque;Ljava/lang/Object;)V` @kind direct;
  #L32a134.  return @kind void;
}
procedure `void` `g`(`okhttp3.p` v1 @kind this, `okhttp3.d0` v2 @kind object) @signature `Lokhttp3/p;.g:(Lokhttp3/d0;)V` @AccessFlag  {
    temp;
    v0;

  #L32a148.  v0:= v1.`okhttp3.p.g` @type ^`java.util.Deque` @kind object;
  #L32a14c.  call `e`(v1, v0, v2) @signature `Lokhttp3/p;.e:(Ljava/util/Deque;Ljava/lang/Object;)V` @kind direct;
  #L32a152.  return @kind void;
}
procedure `int` `i`(`okhttp3.p` v2 @kind this) @signature `Lokhttp3/p;.i:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L329e78.  @monitorenter v2
  #L329e7a.  v0:= v2.`okhttp3.p.f` @type ^`java.util.Deque` @kind object;
  #L329e7e.  call temp:= `size`(v0) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #L329e84.  v0:= temp;
  #L329e86.  v1:= v2.`okhttp3.p.g` @type ^`java.util.Deque` @kind object;
  #L329e8a.  call temp:= `size`(v1) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #L329e90.  v1:= temp;
  #L329e92.  v0:= v0 + v1 @kind int;
  #L329e94.  @monitorexit v2
  #L329e96.  return v0;
  #L329e98.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L329e9a.  @monitorexit v2
  #L329e9c.  throw v0;
  catch `java.lang.Throwable` @[L329e7a..L329e92] goto L329e98;
}
procedure `void` `j`(`okhttp3.p` v3 @kind this, `int` v4 ) @signature `Lokhttp3/p;.j:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L32a164.  v0:= 1I;
  #L32a166.  if v4 < v0 then goto L32a180;
  #L32a16a.  @monitorenter v3
  #L32a16c.  v3.`okhttp3.p.b` @type ^`int` := v4;
  #L32a170.  @monitorexit v3
  #L32a172.  call temp:= `h`(v3) @signature `Lokhttp3/p;.h:()Z` @kind direct;
  #L32a178.  return @kind void;
  #L32a17a.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L32a17c.  @monitorexit v3
  #L32a17e.  throw v4;
  #L32a180.  v0:= new `java.lang.IllegalArgumentException`;
  #L32a184.  v1:= new `java.lang.StringBuilder`;
  #L32a188.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L32a18e.  v2:= "max < 1: " @kind object;
  #L32a192.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32a198.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L32a19e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L32a1a4.  v4:= temp @kind object;
  #L32a1a6.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32a1ac.  throw v0;
  catch `java.lang.Throwable` @[L32a16c..L32a172] goto L32a17a;
  catch `java.lang.Throwable` @[L32a17c..L32a17e] goto L32a17a;
}
