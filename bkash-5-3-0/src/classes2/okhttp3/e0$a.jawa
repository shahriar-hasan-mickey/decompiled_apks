record `okhttp3.e0$a` @kind class @AccessFlag PUBLIC {
  `okhttp3.x` `okhttp3.e0$a.a` @AccessFlag ;
  `java.lang.String` `okhttp3.e0$a.b` @AccessFlag ;
  `okhttp3.w$a` `okhttp3.e0$a.c` @AccessFlag ;
  `okhttp3.f0` `okhttp3.e0$a.d` @AccessFlag ;
  `java.util.Map` `okhttp3.e0$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`okhttp3.e0$a` v1 @kind this) @signature `Lokhttp3/e0$a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L32e88c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L32e892.  call temp:= `emptyMap`() @signature `Ljava/util/Collections;.emptyMap:()Ljava/util/Map;` @kind static;
  #L32e898.  v0:= temp @kind object;
  #L32e89a.  v1.`okhttp3.e0$a.e` @type ^`java.util.Map` := v0 @kind object;
  #L32e89e.  v0:= "GET" @kind object;
  #L32e8a2.  v1.`okhttp3.e0$a.b` @type ^`java.lang.String` := v0 @kind object;
  #L32e8a6.  v0:= new `okhttp3.w$a`;
  #L32e8aa.  call `<init>`(v0) @signature `Lokhttp3/w$a;.<init>:()V` @kind direct;
  #L32e8b0.  v1.`okhttp3.e0$a.c` @type ^`okhttp3.w$a` := v0 @kind object;
  #L32e8b4.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.e0$a` v2 @kind this, `okhttp3.e0` v3 @kind object) @signature `Lokhttp3/e0$a;.<init>:(Lokhttp3/e0;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L32e8c8.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L32e8ce.  call temp:= `emptyMap`() @signature `Ljava/util/Collections;.emptyMap:()Ljava/util/Map;` @kind static;
  #L32e8d4.  v0:= temp @kind object;
  #L32e8d6.  v2.`okhttp3.e0$a.e` @type ^`java.util.Map` := v0 @kind object;
  #L32e8da.  v0:= v3.`okhttp3.e0.a` @type ^`okhttp3.x` @kind object;
  #L32e8de.  v2.`okhttp3.e0$a.a` @type ^`okhttp3.x` := v0 @kind object;
  #L32e8e2.  v0:= v3.`okhttp3.e0.b` @type ^`java.lang.String` @kind object;
  #L32e8e6.  v2.`okhttp3.e0$a.b` @type ^`java.lang.String` := v0 @kind object;
  #L32e8ea.  v0:= v3.`okhttp3.e0.d` @type ^`okhttp3.f0` @kind object;
  #L32e8ee.  v2.`okhttp3.e0$a.d` @type ^`okhttp3.f0` := v0 @kind object;
  #L32e8f2.  v0:= v3.`okhttp3.e0.e` @type ^`java.util.Map` @kind object;
  #L32e8f6.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L32e8fc.  v0:= temp;
  #L32e8fe.  if v0 == 0 then goto L32e90c;
  #L32e902.  call temp:= `emptyMap`() @signature `Ljava/util/Collections;.emptyMap:()Ljava/util/Map;` @kind static;
  #L32e908.  v0:= temp @kind object;
  #L32e90a.  goto L32e91a;
  #L32e90c.  v0:= new `java.util.LinkedHashMap`;
  #L32e910.  v1:= v3.`okhttp3.e0.e` @type ^`java.util.Map` @kind object;
  #L32e914.  call `<init>`(v0, v1) @signature `Ljava/util/LinkedHashMap;.<init>:(Ljava/util/Map;)V` @kind direct;
  #L32e91a.  v2.`okhttp3.e0$a.e` @type ^`java.util.Map` := v0 @kind object;
  #L32e91e.  v3:= v3.`okhttp3.e0.c` @type ^`okhttp3.w` @kind object;
  #L32e922.  call temp:= `f`(v3) @signature `Lokhttp3/w;.f:()Lokhttp3/w$a;` @kind virtual;
  #L32e928.  v3:= temp @kind object;
  #L32e92a.  v2.`okhttp3.e0$a.c` @type ^`okhttp3.w$a` := v3 @kind object;
  #L32e92e.  return @kind void;
}
procedure `okhttp3.e0$a` `a`(`okhttp3.e0$a` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lokhttp3/e0$a;.a:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/e0$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32e5b0.  v0:= v1.`okhttp3.e0$a.c` @type ^`okhttp3.w$a` @kind object;
  #L32e5b4.  call temp:= `a`(v0, v2, v3) @signature `Lokhttp3/w$a;.a:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/w$a;` @kind virtual;
  #L32e5ba.  return v1 @kind object;
}
procedure `okhttp3.e0` `b`(`okhttp3.e0$a` v2 @kind this) @signature `Lokhttp3/e0$a;.b:()Lokhttp3/e0;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L32e57c.  v0:= v2.`okhttp3.e0$a.a` @type ^`okhttp3.x` @kind object;
  #L32e580.  if v0 == 0 then goto L32e590;
  #L32e584.  v0:= new `okhttp3.e0`;
  #L32e588.  call `<init>`(v0, v2) @signature `Lokhttp3/e0;.<init>:(Lokhttp3/e0$a;)V` @kind direct;
  #L32e58e.  return v0 @kind object;
  #L32e590.  v0:= new `java.lang.IllegalStateException`;
  #L32e594.  v1:= "url == null" @kind object;
  #L32e598.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32e59e.  throw v0;
}
procedure `okhttp3.e0$a` `c`(`okhttp3.e0$a` v2 @kind this) @signature `Lokhttp3/e0$a;.c:()Lokhttp3/e0$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L32e5cc.  v0:= "HEAD" @kind object;
  #L32e5d0.  v1:= 0I;
  #L32e5d2.  call temp:= `f`(v2, v0, v1) @signature `Lokhttp3/e0$a;.f:(Ljava/lang/String;Lokhttp3/f0;)Lokhttp3/e0$a;` @kind virtual;
  #L32e5d8.  v0:= temp @kind object;
  #L32e5da.  return v0 @kind object;
}
procedure `okhttp3.e0$a` `d`(`okhttp3.e0$a` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lokhttp3/e0$a;.d:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/e0$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32e5ec.  v0:= v1.`okhttp3.e0$a.c` @type ^`okhttp3.w$a` @kind object;
  #L32e5f0.  call temp:= `g`(v0, v2, v3) @signature `Lokhttp3/w$a;.g:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/w$a;` @kind virtual;
  #L32e5f6.  return v1 @kind object;
}
procedure `okhttp3.e0$a` `e`(`okhttp3.e0$a` v0 @kind this, `okhttp3.w` v1 @kind object) @signature `Lokhttp3/e0$a;.e:(Lokhttp3/w;)Lokhttp3/e0$a;` @AccessFlag PUBLIC {
    temp;

  #L32e608.  call temp:= `f`(v1) @signature `Lokhttp3/w;.f:()Lokhttp3/w$a;` @kind virtual;
  #L32e60e.  v1:= temp @kind object;
  #L32e610.  v0.`okhttp3.e0$a.c` @type ^`okhttp3.w$a` := v1 @kind object;
  #L32e614.  return v0 @kind object;
}
procedure `okhttp3.e0$a` `f`(`okhttp3.e0$a` v2 @kind this, `java.lang.String` v3 @kind object, `okhttp3.f0` v4 @kind object) @signature `Lokhttp3/e0$a;.f:(Ljava/lang/String;Lokhttp3/f0;)Lokhttp3/e0$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L32e628.  v0:= "method == null" @kind object;
  #L32e62c.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L32e632.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L32e638.  v0:= temp;
  #L32e63a.  if v0 == 0 then goto L32e6d8;
  #L32e63e.  v0:= "method " @kind object;
  #L32e642.  if v4 == 0 then goto L32e688;
  #L32e646.  call temp:= `b`(v3) @signature `Lge/f;.b:(Ljava/lang/String;)Z` @kind static;
  #L32e64c.  v1:= temp;
  #L32e64e.  if v1 == 0 then goto L32e654;
  #L32e652.  goto L32e688;
  #L32e654.  v4:= new `java.lang.IllegalArgumentException`;
  #L32e658.  v1:= new `java.lang.StringBuilder`;
  #L32e65c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L32e662.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32e668.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32e66e.  v3:= " must not have a request body." @kind object;
  #L32e672.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32e678.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L32e67e.  v3:= temp @kind object;
  #L32e680.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32e686.  throw v4;
  #L32e688.  if v4 != 0 then goto L32e6ce;
  #L32e68c.  call temp:= `e`(v3) @signature `Lge/f;.e:(Ljava/lang/String;)Z` @kind static;
  #L32e692.  v1:= temp;
  #L32e694.  if v1 != 0 then goto L32e69a;
  #L32e698.  goto L32e6ce;
  #L32e69a.  v4:= new `java.lang.IllegalArgumentException`;
  #L32e69e.  v1:= new `java.lang.StringBuilder`;
  #L32e6a2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L32e6a8.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32e6ae.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32e6b4.  v3:= " must have a request body." @kind object;
  #L32e6b8.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32e6be.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L32e6c4.  v3:= temp @kind object;
  #L32e6c6.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32e6cc.  throw v4;
  #L32e6ce.  v2.`okhttp3.e0$a.b` @type ^`java.lang.String` := v3 @kind object;
  #L32e6d2.  v2.`okhttp3.e0$a.d` @type ^`okhttp3.f0` := v4 @kind object;
  #L32e6d6.  return v2 @kind object;
  #L32e6d8.  v3:= new `java.lang.IllegalArgumentException`;
  #L32e6dc.  v4:= "method.length() == 0" @kind object;
  #L32e6e0.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32e6e6.  throw v3;
}
procedure `okhttp3.e0$a` `g`(`okhttp3.e0$a` v1 @kind this, `okhttp3.f0` v2 @kind object) @signature `Lokhttp3/e0$a;.g:(Lokhttp3/f0;)Lokhttp3/e0$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32e6f8.  v0:= "POST" @kind object;
  #L32e6fc.  call temp:= `f`(v1, v0, v2) @signature `Lokhttp3/e0$a;.f:(Ljava/lang/String;Lokhttp3/f0;)Lokhttp3/e0$a;` @kind virtual;
  #L32e702.  v2:= temp @kind object;
  #L32e704.  return v2 @kind object;
}
procedure `okhttp3.e0$a` `h`(`okhttp3.e0$a` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokhttp3/e0$a;.h:(Ljava/lang/String;)Lokhttp3/e0$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32e718.  v0:= v1.`okhttp3.e0$a.c` @type ^`okhttp3.w$a` @kind object;
  #L32e71c.  call temp:= `f`(v0, v2) @signature `Lokhttp3/w$a;.f:(Ljava/lang/String;)Lokhttp3/w$a;` @kind virtual;
  #L32e722.  return v1 @kind object;
}
procedure `okhttp3.e0$a` `i`(`okhttp3.e0$a` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lokhttp3/e0$a;.i:(Ljava/lang/Class;Ljava/lang/Object;)Lokhttp3/e0$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32e734.  v0:= "type == null" @kind object;
  #L32e738.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L32e73e.  if v3 != 0 then goto L32e74e;
  #L32e742.  v3:= v1.`okhttp3.e0$a.e` @type ^`java.util.Map` @kind object;
  #L32e746.  call temp:= `remove`(v3, v2) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L32e74c.  goto L32e77e;
  #L32e74e.  v0:= v1.`okhttp3.e0$a.e` @type ^`java.util.Map` @kind object;
  #L32e752.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L32e758.  v0:= temp;
  #L32e75a.  if v0 == 0 then goto L32e76c;
  #L32e75e.  v0:= new `java.util.LinkedHashMap`;
  #L32e762.  call `<init>`(v0) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L32e768.  v1.`okhttp3.e0$a.e` @type ^`java.util.Map` := v0 @kind object;
  #L32e76c.  v0:= v1.`okhttp3.e0$a.e` @type ^`java.util.Map` @kind object;
  #L32e770.  call temp:= `cast`(v2, v3) @signature `Ljava/lang/Class;.cast:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L32e776.  v3:= temp @kind object;
  #L32e778.  call temp:= `put`(v0, v2, v3) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L32e77e.  return v1 @kind object;
}
procedure `okhttp3.e0$a` `j`(`okhttp3.e0$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lokhttp3/e0$a;.j:(Ljava/lang/Object;)Lokhttp3/e0$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32e790.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L32e794.  call temp:= `i`(v1, v0, v2) @signature `Lokhttp3/e0$a;.i:(Ljava/lang/Class;Ljava/lang/Object;)Lokhttp3/e0$a;` @kind virtual;
  #L32e79a.  v2:= temp @kind object;
  #L32e79c.  return v2 @kind object;
}
procedure `okhttp3.e0$a` `k`(`okhttp3.e0$a` v7 @kind this, `java.lang.String` v8 @kind object) @signature `Lokhttp3/e0$a;.k:(Ljava/lang/String;)Lokhttp3/e0$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L32e7b0.  v0:= "url == null" @kind object;
  #L32e7b4.  call temp:= `requireNonNull`(v8, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L32e7ba.  v2:= 1I;
  #L32e7bc.  v3:= 0I;
  #L32e7be.  v5:= 0I;
  #L32e7c0.  v6:= 3I;
  #L32e7c2.  v4:= "ws:" @kind object;
  #L32e7c6.  v1:= v8 @kind object;
  #L32e7c8.  call temp:= `regionMatches`(v1, v2, v3, v4, v5, v6) @signature `Ljava/lang/String;.regionMatches:(ZILjava/lang/String;II)Z` @kind virtual;
  #L32e7ce.  v0:= temp;
  #L32e7d0.  if v0 == 0 then goto L32e802;
  #L32e7d4.  v0:= new `java.lang.StringBuilder`;
  #L32e7d8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L32e7de.  v1:= "http:" @kind object;
  #L32e7e2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32e7e8.  v1:= 3I;
  #L32e7ea.  call temp:= `substring`(v8, v1) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L32e7f0.  v8:= temp @kind object;
  #L32e7f2.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32e7f8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L32e7fe.  v8:= temp @kind object;
  #L32e800.  goto L32e848;
  #L32e802.  v1:= 1I;
  #L32e804.  v2:= 0I;
  #L32e806.  v4:= 0I;
  #L32e808.  v5:= 4I;
  #L32e80a.  v3:= "wss:" @kind object;
  #L32e80e.  v0:= v8 @kind object;
  #L32e810.  call temp:= `regionMatches`(v0, v1, v2, v3, v4, v5) @signature `Ljava/lang/String;.regionMatches:(ZILjava/lang/String;II)Z` @kind virtual;
  #L32e816.  v0:= temp;
  #L32e818.  if v0 == 0 then goto L32e848;
  #L32e81c.  v0:= new `java.lang.StringBuilder`;
  #L32e820.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L32e826.  v1:= "https:" @kind object;
  #L32e82a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32e830.  v1:= 4I;
  #L32e832.  call temp:= `substring`(v8, v1) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L32e838.  v8:= temp @kind object;
  #L32e83a.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32e840.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L32e846.  v8:= temp @kind object;
  #L32e848.  call temp:= `k`(v8) @signature `Lokhttp3/x;.k:(Ljava/lang/String;)Lokhttp3/x;` @kind static;
  #L32e84e.  v8:= temp @kind object;
  #L32e850.  call temp:= `l`(v7, v8) @signature `Lokhttp3/e0$a;.l:(Lokhttp3/x;)Lokhttp3/e0$a;` @kind virtual;
  #L32e856.  v8:= temp @kind object;
  #L32e858.  return v8 @kind object;
}
procedure `okhttp3.e0$a` `l`(`okhttp3.e0$a` v1 @kind this, `okhttp3.x` v2 @kind object) @signature `Lokhttp3/e0$a;.l:(Lokhttp3/x;)Lokhttp3/e0$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32e86c.  v0:= "url == null" @kind object;
  #L32e870.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L32e876.  v1.`okhttp3.e0$a.a` @type ^`okhttp3.x` := v2 @kind object;
  #L32e87a.  return v1 @kind object;
}
