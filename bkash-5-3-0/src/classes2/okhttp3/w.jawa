record `okhttp3.w` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String`[] `okhttp3.w.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.w` v1 @kind this, `okhttp3.w$a` v2 @kind object) @signature `Lokhttp3/w;.<init>:(Lokhttp3/w$a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L32ad3c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L32ad42.  v2:= v2.`okhttp3.w$a.a` @type ^`java.util.List` @kind object;
  #L32ad46.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L32ad4c.  v0:= temp;
  #L32ad4e.  v0:= new `java.lang.String`[v0];
  #L32ad52.  call temp:= `toArray`(v2, v0) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L32ad58.  v2:= temp @kind object;
  #L32ad5a.  v2:= (`java.lang.String`[]) v2 @kind object;
  #L32ad5e.  v1.`okhttp3.w.a` @type ^`java.lang.String`[] := v2 @kind object;
  #L32ad62.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.w` v0 @kind this, `java.lang.String`[] v1 @kind object) @signature `Lokhttp3/w;.<init>:([Ljava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L32ad20.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L32ad26.  v0.`okhttp3.w.a` @type ^`java.lang.String`[] := v1 @kind object;
  #L32ad2a.  return @kind void;
}
procedure `void` `a`(`java.lang.String` v5 @kind object) @signature `Lokhttp3/w;.a:(Ljava/lang/String;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L32ad74.  v0:= "name == null" @kind object;
  #L32ad78.  call temp:= `requireNonNull`(v5, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L32ad7e.  call temp:= `isEmpty`(v5) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L32ad84.  v0:= temp;
  #L32ad86.  if v0 != 0 then goto L32adf8;
  #L32ad8a.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L32ad90.  v0:= temp;
  #L32ad92.  v1:= 0I;
  #L32ad94.  v2:= 0I;
  #L32ad96.  if v2 >= v0 then goto L32adf6;
  #L32ad9a.  call temp:= `charAt`(v5, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L32ada0.  v3:= temp;
  #L32ada2.  v4:= 32I;
  #L32ada6.  if v3 <= v4 then goto L32adb8;
  #L32adaa.  v4:= 127I;
  #L32adae.  if v3 >= v4 then goto L32adb8;
  #L32adb2.  v2:= v2 + 1;
  #L32adb6.  goto L32ad96;
  #L32adb8.  v0:= new `java.lang.IllegalArgumentException`;
  #L32adbc.  v4:= 3I;
  #L32adbe.  v4:= new `java.lang.Object`[v4];
  #L32adc2.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L32adc8.  v3:= temp @kind object;
  #L32adca.  v4[v1]:= v3 @kind object;
  #L32adce.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L32add4.  v1:= temp @kind object;
  #L32add6.  v2:= 1I;
  #L32add8.  v4[v2]:= v1 @kind object;
  #L32addc.  v1:= 2I;
  #L32adde.  v4[v1]:= v5 @kind object;
  #L32ade2.  v5:= "Unexpected char %#04x at %d in header name: %s" @kind object;
  #L32ade6.  call temp:= `q`(v5, v4) @signature `Lee/e;.q:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L32adec.  v5:= temp @kind object;
  #L32adee.  call `<init>`(v0, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32adf4.  throw v0;
  #L32adf6.  return @kind void;
  #L32adf8.  v5:= new `java.lang.IllegalArgumentException`;
  #L32adfc.  v0:= "name is empty" @kind object;
  #L32ae00.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32ae06.  throw v5;
}
procedure `void` `b`(`java.lang.String` v5 @kind object, `java.lang.String` v6 @kind object) @signature `Lokhttp3/w;.b:(Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L32ae18.  if v5 == 0 then goto L32ae98;
  #L32ae1c.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L32ae22.  v0:= temp;
  #L32ae24.  v1:= 0I;
  #L32ae26.  v2:= 0I;
  #L32ae28.  if v2 >= v0 then goto L32ae96;
  #L32ae2c.  call temp:= `charAt`(v5, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L32ae32.  v3:= temp;
  #L32ae34.  v4:= 31I;
  #L32ae38.  if v3 > v4 then goto L32ae44;
  #L32ae3c.  v4:= 9I;
  #L32ae40.  if v3 != v4 then goto L32ae52;
  #L32ae44.  v4:= 127I;
  #L32ae48.  if v3 >= v4 then goto L32ae52;
  #L32ae4c.  v2:= v2 + 1;
  #L32ae50.  goto L32ae28;
  #L32ae52.  v0:= new `java.lang.IllegalArgumentException`;
  #L32ae56.  v4:= 4I;
  #L32ae58.  v4:= new `java.lang.Object`[v4];
  #L32ae5c.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L32ae62.  v3:= temp @kind object;
  #L32ae64.  v4[v1]:= v3 @kind object;
  #L32ae68.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L32ae6e.  v1:= temp @kind object;
  #L32ae70.  v2:= 1I;
  #L32ae72.  v4[v2]:= v1 @kind object;
  #L32ae76.  v1:= 2I;
  #L32ae78.  v4[v1]:= v6 @kind object;
  #L32ae7c.  v6:= 3I;
  #L32ae7e.  v4[v6]:= v5 @kind object;
  #L32ae82.  v5:= "Unexpected char %#04x at %d in %s value: %s" @kind object;
  #L32ae86.  call temp:= `q`(v5, v4) @signature `Lee/e;.q:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L32ae8c.  v5:= temp @kind object;
  #L32ae8e.  call `<init>`(v0, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32ae94.  throw v0;
  #L32ae96.  return @kind void;
  #L32ae98.  v5:= new `java.lang.NullPointerException`;
  #L32ae9c.  v0:= new `java.lang.StringBuilder`;
  #L32aea0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L32aea6.  v1:= "value for name " @kind object;
  #L32aeaa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32aeb0.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32aeb6.  v6:= " == null" @kind object;
  #L32aeba.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32aec0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L32aec6.  v6:= temp @kind object;
  #L32aec8.  call `<init>`(v5, v6) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32aece.  throw v5;
}
procedure `java.lang.String` `d`(`java.lang.String`[] v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lokhttp3/w;.d:([Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L32aaf0.  v0:= length @variable v2;
  #L32aaf2.  v0:= v0 + -2;
  #L32aaf6.  if v0 < 0 then goto L32ab1a;
  #L32aafa.  v1:= v2[v0] @kind object;
  #L32aafe.  call temp:= `equalsIgnoreCase`(v3, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L32ab04.  v1:= temp;
  #L32ab06.  if v1 == 0 then goto L32ab14;
  #L32ab0a.  v0:= v0 + 1;
  #L32ab0e.  v2:= v2[v0] @kind object;
  #L32ab12.  return v2 @kind object;
  #L32ab14.  v0:= v0 + -2;
  #L32ab18.  goto L32aaf6;
  #L32ab1a.  v2:= 0I;
  #L32ab1c.  return v2 @kind object;
}
procedure `okhttp3.w` `g`(`java.lang.String`[] v3 @kind object) @signature `Lokhttp3/w;.g:([Ljava/lang/String;)Lokhttp3/w;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L32ac4c.  v0:= "namesAndValues == null" @kind object;
  #L32ac50.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L32ac56.  v0:= length @variable v3;
  #L32ac58.  v0:= v0 %% 2;
  #L32ac5c.  if v0 != 0 then goto L32acd4;
  #L32ac60.  call temp:= `clone`(v3) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L32ac66.  v3:= temp @kind object;
  #L32ac68.  v3:= (`java.lang.String`[]) v3 @kind object;
  #L32ac6c.  v0:= 0I;
  #L32ac6e.  v1:= 0I;
  #L32ac70.  v2:= length @variable v3;
  #L32ac72.  if v1 >= v2 then goto L32aca4;
  #L32ac76.  v2:= v3[v1] @kind object;
  #L32ac7a.  if v2 == 0 then goto L32ac94;
  #L32ac7e.  v2:= v3[v1] @kind object;
  #L32ac82.  call temp:= `trim`(v2) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L32ac88.  v2:= temp @kind object;
  #L32ac8a.  v3[v1]:= v2 @kind object;
  #L32ac8e.  v1:= v1 + 1;
  #L32ac92.  goto L32ac70;
  #L32ac94.  v3:= new `java.lang.IllegalArgumentException`;
  #L32ac98.  v0:= "Headers cannot be null" @kind object;
  #L32ac9c.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32aca2.  throw v3;
  #L32aca4.  v1:= length @variable v3;
  #L32aca6.  if v0 >= v1 then goto L32acc8;
  #L32acaa.  v1:= v3[v0] @kind object;
  #L32acae.  v2:= v0 + 1;
  #L32acb2.  v2:= v3[v2] @kind object;
  #L32acb6.  call `a`(v1) @signature `Lokhttp3/w;.a:(Ljava/lang/String;)V` @kind static;
  #L32acbc.  call `b`(v2, v1) @signature `Lokhttp3/w;.b:(Ljava/lang/String;Ljava/lang/String;)V` @kind static;
  #L32acc2.  v0:= v0 + 2;
  #L32acc6.  goto L32aca4;
  #L32acc8.  v0:= new `okhttp3.w`;
  #L32accc.  call `<init>`(v0, v3) @signature `Lokhttp3/w;.<init>:([Ljava/lang/String;)V` @kind direct;
  #L32acd2.  return v0 @kind object;
  #L32acd4.  v3:= new `java.lang.IllegalArgumentException`;
  #L32acd8.  v0:= "Expected alternating header names and values" @kind object;
  #L32acdc.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32ace2.  throw v3;
}
procedure `java.lang.String` `c`(`okhttp3.w` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokhttp3/w;.c:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32aad0.  v0:= v1.`okhttp3.w.a` @type ^`java.lang.String`[] @kind object;
  #L32aad4.  call temp:= `d`(v0, v2) @signature `Lokhttp3/w;.d:([Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L32aada.  v2:= temp @kind object;
  #L32aadc.  return v2 @kind object;
}
procedure `java.lang.String` `e`(`okhttp3.w` v1 @kind this, `int` v2 ) @signature `Lokhttp3/w;.e:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32ab30.  v0:= v1.`okhttp3.w.a` @type ^`java.lang.String`[] @kind object;
  #L32ab34.  v2:= v2 * 2;
  #L32ab38.  v2:= v0[v2] @kind object;
  #L32ab3c.  return v2 @kind object;
}
procedure `boolean` `equals`(`okhttp3.w` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lokhttp3/w;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32aa5c.  v0:= instanceof @variable v2 @type ^`okhttp3.w` @kind boolean;
  #L32aa60.  if v0 == 0 then goto L32aa80;
  #L32aa64.  v2:= (`okhttp3.w`) v2 @kind object;
  #L32aa68.  v2:= v2.`okhttp3.w.a` @type ^`java.lang.String`[] @kind object;
  #L32aa6c.  v0:= v1.`okhttp3.w.a` @type ^`java.lang.String`[] @kind object;
  #L32aa70.  call temp:= `equals`(v2, v0) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L32aa76.  v2:= temp;
  #L32aa78.  if v2 == 0 then goto L32aa80;
  #L32aa7c.  v2:= 1I;
  #L32aa7e.  goto L32aa82;
  #L32aa80.  v2:= 0I;
  #L32aa82.  return v2;
}
procedure `okhttp3.w$a` `f`(`okhttp3.w` v3 @kind this) @signature `Lokhttp3/w;.f:()Lokhttp3/w$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L32acf4.  v0:= new `okhttp3.w$a`;
  #L32acf8.  call `<init>`(v0) @signature `Lokhttp3/w$a;.<init>:()V` @kind direct;
  #L32acfe.  v1:= v0.`okhttp3.w$a.a` @type ^`java.util.List` @kind object;
  #L32ad02.  v2:= v3.`okhttp3.w.a` @type ^`java.lang.String`[] @kind object;
  #L32ad06.  call temp:= `addAll`(v1, v2) @signature `Ljava/util/Collections;.addAll:(Ljava/util/Collection;[Ljava/lang/Object;)Z` @kind static;
  #L32ad0c.  return v0 @kind object;
}
procedure `int` `h`(`okhttp3.w` v1 @kind this) @signature `Lokhttp3/w;.h:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32aab4.  v0:= v1.`okhttp3.w.a` @type ^`java.lang.String`[] @kind object;
  #L32aab8.  v0:= length @variable v0;
  #L32aaba.  v0:= v0 / 2;
  #L32aabe.  return v0;
}
procedure `int` `hashCode`(`okhttp3.w` v1 @kind this) @signature `Lokhttp3/w;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32aa94.  v0:= v1.`okhttp3.w.a` @type ^`java.lang.String`[] @kind object;
  #L32aa98.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L32aa9e.  v0:= temp;
  #L32aaa0.  return v0;
}
procedure `java.lang.String` `i`(`okhttp3.w` v1 @kind this, `int` v2 ) @signature `Lokhttp3/w;.i:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32abb8.  v0:= v1.`okhttp3.w.a` @type ^`java.lang.String`[] @kind object;
  #L32abbc.  v2:= v2 * 2;
  #L32abc0.  v2:= v2 + 1;
  #L32abc4.  v2:= v0[v2] @kind object;
  #L32abc8.  return v2 @kind object;
}
procedure `java.util.List` `j`(`okhttp3.w` v4 @kind this, `java.lang.String` v5 @kind object) @signature `Lokhttp3/w;.j:(Ljava/lang/String;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L32abdc.  call temp:= `h`(v4) @signature `Lokhttp3/w;.h:()I` @kind virtual;
  #L32abe2.  v0:= temp;
  #L32abe4.  v1:= 0I;
  #L32abe6.  v2:= 0I;
  #L32abe8.  if v2 >= v0 then goto L32ac24;
  #L32abec.  call temp:= `e`(v4, v2) @signature `Lokhttp3/w;.e:(I)Ljava/lang/String;` @kind virtual;
  #L32abf2.  v3:= temp @kind object;
  #L32abf4.  call temp:= `equalsIgnoreCase`(v5, v3) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L32abfa.  v3:= temp;
  #L32abfc.  if v3 == 0 then goto L32ac1e;
  #L32ac00.  if v1 != 0 then goto L32ac10;
  #L32ac04.  v1:= new `java.util.ArrayList`;
  #L32ac08.  v3:= 2I;
  #L32ac0a.  call `<init>`(v1, v3) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L32ac10.  call temp:= `i`(v4, v2) @signature `Lokhttp3/w;.i:(I)Ljava/lang/String;` @kind virtual;
  #L32ac16.  v3:= temp @kind object;
  #L32ac18.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L32ac1e.  v2:= v2 + 1;
  #L32ac22.  goto L32abe8;
  #L32ac24.  if v1 == 0 then goto L32ac32;
  #L32ac28.  call temp:= `unmodifiableList`(v1) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L32ac2e.  v5:= temp @kind object;
  #L32ac30.  goto L32ac3a;
  #L32ac32.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L32ac38.  v5:= temp @kind object;
  #L32ac3a.  return v5 @kind object;
}
procedure `java.lang.String` `toString`(`okhttp3.w` v4 @kind this) @signature `Lokhttp3/w;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L32ab50.  v0:= new `java.lang.StringBuilder`;
  #L32ab54.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L32ab5a.  call temp:= `h`(v4) @signature `Lokhttp3/w;.h:()I` @kind virtual;
  #L32ab60.  v1:= temp;
  #L32ab62.  v2:= 0I;
  #L32ab64.  if v2 >= v1 then goto L32ab9e;
  #L32ab68.  call temp:= `e`(v4, v2) @signature `Lokhttp3/w;.e:(I)Ljava/lang/String;` @kind virtual;
  #L32ab6e.  v3:= temp @kind object;
  #L32ab70.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32ab76.  v3:= ": " @kind object;
  #L32ab7a.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32ab80.  call temp:= `i`(v4, v2) @signature `Lokhttp3/w;.i:(I)Ljava/lang/String;` @kind virtual;
  #L32ab86.  v3:= temp @kind object;
  #L32ab88.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32ab8e.  v3:= "\n" @kind object;
  #L32ab92.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32ab98.  v2:= v2 + 1;
  #L32ab9c.  goto L32ab64;
  #L32ab9e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L32aba4.  v0:= temp @kind object;
  #L32aba6.  return v0 @kind object;
}
