record `okhttp3.g0$a` @kind class @AccessFlag PUBLIC {
  `okhttp3.e0` `okhttp3.g0$a.a` @AccessFlag ;
  `okhttp3.c0` `okhttp3.g0$a.b` @AccessFlag ;
  `int` `okhttp3.g0$a.c` @AccessFlag ;
  `java.lang.String` `okhttp3.g0$a.d` @AccessFlag ;
  `okhttp3.v` `okhttp3.g0$a.e` @AccessFlag ;
  `okhttp3.w$a` `okhttp3.g0$a.f` @AccessFlag ;
  `okhttp3.h0` `okhttp3.g0$a.g` @AccessFlag ;
  `okhttp3.g0` `okhttp3.g0$a.h` @AccessFlag ;
  `okhttp3.g0` `okhttp3.g0$a.i` @AccessFlag ;
  `okhttp3.g0` `okhttp3.g0$a.j` @AccessFlag ;
  `long` `okhttp3.g0$a.k` @AccessFlag ;
  `long` `okhttp3.g0$a.l` @AccessFlag ;
  `okhttp3.internal.connection.c` `okhttp3.g0$a.m` @AccessFlag ;
}
procedure `void` `<init>`(`okhttp3.g0$a` v1 @kind this) @signature `Lokhttp3/g0$a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L32ee78.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L32ee7e.  v0:= -1I;
  #L32ee80.  v1.`okhttp3.g0$a.c` @type ^`int` := v0;
  #L32ee84.  v0:= new `okhttp3.w$a`;
  #L32ee88.  call `<init>`(v0) @signature `Lokhttp3/w$a;.<init>:()V` @kind direct;
  #L32ee8e.  v1.`okhttp3.g0$a.f` @type ^`okhttp3.w$a` := v0 @kind object;
  #L32ee92.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.g0$a` v2 @kind this, `okhttp3.g0` v3 @kind object) @signature `Lokhttp3/g0$a;.<init>:(Lokhttp3/g0;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L32eea4.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L32eeaa.  v0:= -1I;
  #L32eeac.  v2.`okhttp3.g0$a.c` @type ^`int` := v0;
  #L32eeb0.  v0:= v3.`okhttp3.g0.g` @type ^`okhttp3.e0` @kind object;
  #L32eeb4.  v2.`okhttp3.g0$a.a` @type ^`okhttp3.e0` := v0 @kind object;
  #L32eeb8.  v0:= v3.`okhttp3.g0.h` @type ^`okhttp3.c0` @kind object;
  #L32eebc.  v2.`okhttp3.g0$a.b` @type ^`okhttp3.c0` := v0 @kind object;
  #L32eec0.  v0:= v3.`okhttp3.g0.i` @type ^`int`;
  #L32eec4.  v2.`okhttp3.g0$a.c` @type ^`int` := v0;
  #L32eec8.  v0:= v3.`okhttp3.g0.j` @type ^`java.lang.String` @kind object;
  #L32eecc.  v2.`okhttp3.g0$a.d` @type ^`java.lang.String` := v0 @kind object;
  #L32eed0.  v0:= v3.`okhttp3.g0.k` @type ^`okhttp3.v` @kind object;
  #L32eed4.  v2.`okhttp3.g0$a.e` @type ^`okhttp3.v` := v0 @kind object;
  #L32eed8.  v0:= v3.`okhttp3.g0.l` @type ^`okhttp3.w` @kind object;
  #L32eedc.  call temp:= `f`(v0) @signature `Lokhttp3/w;.f:()Lokhttp3/w$a;` @kind virtual;
  #L32eee2.  v0:= temp @kind object;
  #L32eee4.  v2.`okhttp3.g0$a.f` @type ^`okhttp3.w$a` := v0 @kind object;
  #L32eee8.  v0:= v3.`okhttp3.g0.m` @type ^`okhttp3.h0` @kind object;
  #L32eeec.  v2.`okhttp3.g0$a.g` @type ^`okhttp3.h0` := v0 @kind object;
  #L32eef0.  v0:= v3.`okhttp3.g0.n` @type ^`okhttp3.g0` @kind object;
  #L32eef4.  v2.`okhttp3.g0$a.h` @type ^`okhttp3.g0` := v0 @kind object;
  #L32eef8.  v0:= v3.`okhttp3.g0.o` @type ^`okhttp3.g0` @kind object;
  #L32eefc.  v2.`okhttp3.g0$a.i` @type ^`okhttp3.g0` := v0 @kind object;
  #L32ef00.  v0:= v3.`okhttp3.g0.p` @type ^`okhttp3.g0` @kind object;
  #L32ef04.  v2.`okhttp3.g0$a.j` @type ^`okhttp3.g0` := v0 @kind object;
  #L32ef08.  v0:= v3.`okhttp3.g0.q` @type ^`long` @kind wide;
  #L32ef0c.  v2.`okhttp3.g0$a.k` @type ^`long` := v0 @kind wide;
  #L32ef10.  v0:= v3.`okhttp3.g0.r` @type ^`long` @kind wide;
  #L32ef14.  v2.`okhttp3.g0$a.l` @type ^`long` := v0 @kind wide;
  #L32ef18.  v3:= v3.`okhttp3.g0.s` @type ^`okhttp3.internal.connection.c` @kind object;
  #L32ef1c.  v2.`okhttp3.g0$a.m` @type ^`okhttp3.internal.connection.c` := v3 @kind object;
  #L32ef20.  return @kind void;
}
procedure `void` `e`(`okhttp3.g0$a` v1 @kind this, `okhttp3.g0` v2 @kind object) @signature `Lokhttp3/g0$a;.e:(Lokhttp3/g0;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L32ef34.  v2:= v2.`okhttp3.g0.m` @type ^`okhttp3.h0` @kind object;
  #L32ef38.  if v2 != 0 then goto L32ef3e;
  #L32ef3c.  return @kind void;
  #L32ef3e.  v2:= new `java.lang.IllegalArgumentException`;
  #L32ef42.  v0:= "priorResponse.body != null" @kind object;
  #L32ef46.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32ef4c.  throw v2;
}
procedure `void` `f`(`okhttp3.g0$a` v1 @kind this, `java.lang.String` v2 @kind object, `okhttp3.g0` v3 @kind object) @signature `Lokhttp3/g0$a;.f:(Ljava/lang/String;Lokhttp3/g0;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L32ef60.  v0:= v3.`okhttp3.g0.m` @type ^`okhttp3.h0` @kind object;
  #L32ef64.  if v0 != 0 then goto L32f00c;
  #L32ef68.  v0:= v3.`okhttp3.g0.n` @type ^`okhttp3.g0` @kind object;
  #L32ef6c.  if v0 != 0 then goto L32efde;
  #L32ef70.  v0:= v3.`okhttp3.g0.o` @type ^`okhttp3.g0` @kind object;
  #L32ef74.  if v0 != 0 then goto L32efb0;
  #L32ef78.  v3:= v3.`okhttp3.g0.p` @type ^`okhttp3.g0` @kind object;
  #L32ef7c.  if v3 != 0 then goto L32ef82;
  #L32ef80.  return @kind void;
  #L32ef82.  v3:= new `java.lang.IllegalArgumentException`;
  #L32ef86.  v0:= new `java.lang.StringBuilder`;
  #L32ef8a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L32ef90.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32ef96.  v2:= ".priorResponse != null" @kind object;
  #L32ef9a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32efa0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L32efa6.  v2:= temp @kind object;
  #L32efa8.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32efae.  throw v3;
  #L32efb0.  v3:= new `java.lang.IllegalArgumentException`;
  #L32efb4.  v0:= new `java.lang.StringBuilder`;
  #L32efb8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L32efbe.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32efc4.  v2:= ".cacheResponse != null" @kind object;
  #L32efc8.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32efce.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L32efd4.  v2:= temp @kind object;
  #L32efd6.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32efdc.  throw v3;
  #L32efde.  v3:= new `java.lang.IllegalArgumentException`;
  #L32efe2.  v0:= new `java.lang.StringBuilder`;
  #L32efe6.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L32efec.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32eff2.  v2:= ".networkResponse != null" @kind object;
  #L32eff6.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32effc.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L32f002.  v2:= temp @kind object;
  #L32f004.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32f00a.  throw v3;
  #L32f00c.  v3:= new `java.lang.IllegalArgumentException`;
  #L32f010.  v0:= new `java.lang.StringBuilder`;
  #L32f014.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L32f01a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32f020.  v2:= ".body != null" @kind object;
  #L32f024.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32f02a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L32f030.  v2:= temp @kind object;
  #L32f032.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32f038.  throw v3;
}
procedure `okhttp3.g0$a` `a`(`okhttp3.g0$a` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lokhttp3/g0$a;.a:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/g0$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32ecf8.  v0:= v1.`okhttp3.g0$a.f` @type ^`okhttp3.w$a` @kind object;
  #L32ecfc.  call temp:= `a`(v0, v2, v3) @signature `Lokhttp3/w$a;.a:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/w$a;` @kind virtual;
  #L32ed02.  return v1 @kind object;
}
procedure `okhttp3.g0$a` `b`(`okhttp3.g0$a` v0 @kind this, `okhttp3.h0` v1 @kind object) @signature `Lokhttp3/g0$a;.b:(Lokhttp3/h0;)Lokhttp3/g0$a;` @AccessFlag PUBLIC {
    temp;

  #L32ed14.  v0.`okhttp3.g0$a.g` @type ^`okhttp3.h0` := v1 @kind object;
  #L32ed18.  return v0 @kind object;
}
procedure `okhttp3.g0` `c`(`okhttp3.g0$a` v3 @kind this) @signature `Lokhttp3/g0$a;.c:()Lokhttp3/g0;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L32ec58.  v0:= v3.`okhttp3.g0$a.a` @type ^`okhttp3.e0` @kind object;
  #L32ec5c.  if v0 == 0 then goto L32ecd6;
  #L32ec60.  v0:= v3.`okhttp3.g0$a.b` @type ^`okhttp3.c0` @kind object;
  #L32ec64.  if v0 == 0 then goto L32ecc6;
  #L32ec68.  v0:= v3.`okhttp3.g0$a.c` @type ^`int`;
  #L32ec6c.  if v0 < 0 then goto L32ec94;
  #L32ec70.  v0:= v3.`okhttp3.g0$a.d` @type ^`java.lang.String` @kind object;
  #L32ec74.  if v0 == 0 then goto L32ec84;
  #L32ec78.  v0:= new `okhttp3.g0`;
  #L32ec7c.  call `<init>`(v0, v3) @signature `Lokhttp3/g0;.<init>:(Lokhttp3/g0$a;)V` @kind direct;
  #L32ec82.  return v0 @kind object;
  #L32ec84.  v0:= new `java.lang.IllegalStateException`;
  #L32ec88.  v1:= "message == null" @kind object;
  #L32ec8c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32ec92.  throw v0;
  #L32ec94.  v0:= new `java.lang.IllegalStateException`;
  #L32ec98.  v1:= new `java.lang.StringBuilder`;
  #L32ec9c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L32eca2.  v2:= "code < 0: " @kind object;
  #L32eca6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32ecac.  v2:= v3.`okhttp3.g0$a.c` @type ^`int`;
  #L32ecb0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L32ecb6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L32ecbc.  v1:= temp @kind object;
  #L32ecbe.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32ecc4.  throw v0;
  #L32ecc6.  v0:= new `java.lang.IllegalStateException`;
  #L32ecca.  v1:= "protocol == null" @kind object;
  #L32ecce.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32ecd4.  throw v0;
  #L32ecd6.  v0:= new `java.lang.IllegalStateException`;
  #L32ecda.  v1:= "request == null" @kind object;
  #L32ecde.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32ece4.  throw v0;
}
procedure `okhttp3.g0$a` `d`(`okhttp3.g0$a` v1 @kind this, `okhttp3.g0` v2 @kind object) @signature `Lokhttp3/g0$a;.d:(Lokhttp3/g0;)Lokhttp3/g0$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32ed2c.  if v2 == 0 then goto L32ed3a;
  #L32ed30.  v0:= "cacheResponse" @kind object;
  #L32ed34.  call `f`(v1, v0, v2) @signature `Lokhttp3/g0$a;.f:(Ljava/lang/String;Lokhttp3/g0;)V` @kind direct;
  #L32ed3a.  v1.`okhttp3.g0$a.i` @type ^`okhttp3.g0` := v2 @kind object;
  #L32ed3e.  return v1 @kind object;
}
procedure `okhttp3.g0$a` `g`(`okhttp3.g0$a` v0 @kind this, `int` v1 ) @signature `Lokhttp3/g0$a;.g:(I)Lokhttp3/g0$a;` @AccessFlag PUBLIC {
    temp;

  #L32ed50.  v0.`okhttp3.g0$a.c` @type ^`int` := v1;
  #L32ed54.  return v0 @kind object;
}
procedure `okhttp3.g0$a` `h`(`okhttp3.g0$a` v0 @kind this, `okhttp3.v` v1 @kind object) @signature `Lokhttp3/g0$a;.h:(Lokhttp3/v;)Lokhttp3/g0$a;` @AccessFlag PUBLIC {
    temp;

  #L32ed68.  v0.`okhttp3.g0$a.e` @type ^`okhttp3.v` := v1 @kind object;
  #L32ed6c.  return v0 @kind object;
}
procedure `okhttp3.g0$a` `i`(`okhttp3.g0$a` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lokhttp3/g0$a;.i:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/g0$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32ed80.  v0:= v1.`okhttp3.g0$a.f` @type ^`okhttp3.w$a` @kind object;
  #L32ed84.  call temp:= `g`(v0, v2, v3) @signature `Lokhttp3/w$a;.g:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/w$a;` @kind virtual;
  #L32ed8a.  return v1 @kind object;
}
procedure `okhttp3.g0$a` `j`(`okhttp3.g0$a` v0 @kind this, `okhttp3.w` v1 @kind object) @signature `Lokhttp3/g0$a;.j:(Lokhttp3/w;)Lokhttp3/g0$a;` @AccessFlag PUBLIC {
    temp;

  #L32ed9c.  call temp:= `f`(v1) @signature `Lokhttp3/w;.f:()Lokhttp3/w$a;` @kind virtual;
  #L32eda2.  v1:= temp @kind object;
  #L32eda4.  v0.`okhttp3.g0$a.f` @type ^`okhttp3.w$a` := v1 @kind object;
  #L32eda8.  return v0 @kind object;
}
procedure `void` `k`(`okhttp3.g0$a` v0 @kind this, `okhttp3.internal.connection.c` v1 @kind object) @signature `Lokhttp3/g0$a;.k:(Lokhttp3/internal/connection/c;)V` @AccessFlag  {
    temp;

  #L32f04c.  v0.`okhttp3.g0$a.m` @type ^`okhttp3.internal.connection.c` := v1 @kind object;
  #L32f050.  return @kind void;
}
procedure `okhttp3.g0$a` `l`(`okhttp3.g0$a` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lokhttp3/g0$a;.l:(Ljava/lang/String;)Lokhttp3/g0$a;` @AccessFlag PUBLIC {
    temp;

  #L32edbc.  v0.`okhttp3.g0$a.d` @type ^`java.lang.String` := v1 @kind object;
  #L32edc0.  return v0 @kind object;
}
procedure `okhttp3.g0$a` `m`(`okhttp3.g0$a` v1 @kind this, `okhttp3.g0` v2 @kind object) @signature `Lokhttp3/g0$a;.m:(Lokhttp3/g0;)Lokhttp3/g0$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32edd4.  if v2 == 0 then goto L32ede2;
  #L32edd8.  v0:= "networkResponse" @kind object;
  #L32eddc.  call `f`(v1, v0, v2) @signature `Lokhttp3/g0$a;.f:(Ljava/lang/String;Lokhttp3/g0;)V` @kind direct;
  #L32ede2.  v1.`okhttp3.g0$a.h` @type ^`okhttp3.g0` := v2 @kind object;
  #L32ede6.  return v1 @kind object;
}
procedure `okhttp3.g0$a` `n`(`okhttp3.g0$a` v0 @kind this, `okhttp3.g0` v1 @kind object) @signature `Lokhttp3/g0$a;.n:(Lokhttp3/g0;)Lokhttp3/g0$a;` @AccessFlag PUBLIC {
    temp;

  #L32edf8.  if v1 == 0 then goto L32ee02;
  #L32edfc.  call `e`(v0, v1) @signature `Lokhttp3/g0$a;.e:(Lokhttp3/g0;)V` @kind direct;
  #L32ee02.  v0.`okhttp3.g0$a.j` @type ^`okhttp3.g0` := v1 @kind object;
  #L32ee06.  return v0 @kind object;
}
procedure `okhttp3.g0$a` `o`(`okhttp3.g0$a` v0 @kind this, `okhttp3.c0` v1 @kind object) @signature `Lokhttp3/g0$a;.o:(Lokhttp3/c0;)Lokhttp3/g0$a;` @AccessFlag PUBLIC {
    temp;

  #L32ee18.  v0.`okhttp3.g0$a.b` @type ^`okhttp3.c0` := v1 @kind object;
  #L32ee1c.  return v0 @kind object;
}
procedure `okhttp3.g0$a` `p`(`okhttp3.g0$a` v0 @kind this, `long` v1 ) @signature `Lokhttp3/g0$a;.p:(J)Lokhttp3/g0$a;` @AccessFlag PUBLIC {
    temp;

  #L32ee30.  v0.`okhttp3.g0$a.l` @type ^`long` := v1 @kind wide;
  #L32ee34.  return v0 @kind object;
}
procedure `okhttp3.g0$a` `q`(`okhttp3.g0$a` v0 @kind this, `okhttp3.e0` v1 @kind object) @signature `Lokhttp3/g0$a;.q:(Lokhttp3/e0;)Lokhttp3/g0$a;` @AccessFlag PUBLIC {
    temp;

  #L32ee48.  v0.`okhttp3.g0$a.a` @type ^`okhttp3.e0` := v1 @kind object;
  #L32ee4c.  return v0 @kind object;
}
procedure `okhttp3.g0$a` `r`(`okhttp3.g0$a` v0 @kind this, `long` v1 ) @signature `Lokhttp3/g0$a;.r:(J)Lokhttp3/g0$a;` @AccessFlag PUBLIC {
    temp;

  #L32ee60.  v0.`okhttp3.g0$a.k` @type ^`long` := v1 @kind wide;
  #L32ee64.  return v0 @kind object;
}
