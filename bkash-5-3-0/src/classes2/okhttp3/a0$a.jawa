record `okhttp3.a0$a` @kind class @AccessFlag PUBLIC_FINAL {
  `okio.f` `okhttp3.a0$a.a` @AccessFlag PRIVATE_FINAL;
  `okhttp3.z` `okhttp3.a0$a.b` @AccessFlag PRIVATE;
  `java.util.List` `okhttp3.a0$a.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.a0$a` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokhttp3/a0$a;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L32cd20.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L32cd26.  v0:= `@@okhttp3.a0.e` @type ^`okhttp3.z` @kind object;
  #L32cd2a.  v1.`okhttp3.a0$a.b` @type ^`okhttp3.z` := v0 @kind object;
  #L32cd2e.  v0:= new `java.util.ArrayList`;
  #L32cd32.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L32cd38.  v1.`okhttp3.a0$a.c` @type ^`java.util.List` := v0 @kind object;
  #L32cd3c.  call temp:= `encodeUtf8`(v2) @signature `Lokio/f;.encodeUtf8:(Ljava/lang/String;)Lokio/f;` @kind static;
  #L32cd42.  v2:= temp @kind object;
  #L32cd44.  v1.`okhttp3.a0$a.a` @type ^`okio.f` := v2 @kind object;
  #L32cd48.  return @kind void;
}
procedure `okhttp3.a0$a` `a`(`okhttp3.a0$a` v0 @kind this, `java.lang.String` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lokhttp3/a0$a;.a:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/a0$a;` @AccessFlag PUBLIC {
    temp;

  #L32cc6c.  call temp:= `b`(v1, v2) @signature `Lokhttp3/a0$b;.b:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/a0$b;` @kind static;
  #L32cc72.  v1:= temp @kind object;
  #L32cc74.  call temp:= `b`(v0, v1) @signature `Lokhttp3/a0$a;.b:(Lokhttp3/a0$b;)Lokhttp3/a0$a;` @kind virtual;
  #L32cc7a.  v1:= temp @kind object;
  #L32cc7c.  return v1 @kind object;
}
procedure `okhttp3.a0$a` `b`(`okhttp3.a0$a` v1 @kind this, `okhttp3.a0$b` v2 @kind object) @signature `Lokhttp3/a0$a;.b:(Lokhttp3/a0$b;)Lokhttp3/a0$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32cc90.  v0:= "part == null" @kind object;
  #L32cc94.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L32cc9a.  v0:= v1.`okhttp3.a0$a.c` @type ^`java.util.List` @kind object;
  #L32cc9e.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L32cca4.  return v1 @kind object;
}
procedure `okhttp3.a0` `c`(`okhttp3.a0$a` v4 @kind this) @signature `Lokhttp3/a0$a;.c:()Lokhttp3/a0;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L32cc24.  v0:= v4.`okhttp3.a0$a.c` @type ^`java.util.List` @kind object;
  #L32cc28.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L32cc2e.  v0:= temp;
  #L32cc30.  if v0 != 0 then goto L32cc4c;
  #L32cc34.  v0:= new `okhttp3.a0`;
  #L32cc38.  v1:= v4.`okhttp3.a0$a.a` @type ^`okio.f` @kind object;
  #L32cc3c.  v2:= v4.`okhttp3.a0$a.b` @type ^`okhttp3.z` @kind object;
  #L32cc40.  v3:= v4.`okhttp3.a0$a.c` @type ^`java.util.List` @kind object;
  #L32cc44.  call `<init>`(v0, v1, v2, v3) @signature `Lokhttp3/a0;.<init>:(Lokio/f;Lokhttp3/z;Ljava/util/List;)V` @kind direct;
  #L32cc4a.  return v0 @kind object;
  #L32cc4c.  v0:= new `java.lang.IllegalStateException`;
  #L32cc50.  v1:= "Multipart body must have at least one part." @kind object;
  #L32cc54.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32cc5a.  throw v0;
}
procedure `okhttp3.a0$a` `d`(`okhttp3.a0$a` v3 @kind this, `okhttp3.z` v4 @kind object) @signature `Lokhttp3/a0$a;.d:(Lokhttp3/z;)Lokhttp3/a0$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L32ccb8.  v0:= "type == null" @kind object;
  #L32ccbc.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L32ccc2.  call temp:= `e`(v4) @signature `Lokhttp3/z;.e:()Ljava/lang/String;` @kind virtual;
  #L32ccc8.  v0:= temp @kind object;
  #L32ccca.  v1:= "multipart" @kind object;
  #L32ccce.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L32ccd4.  v0:= temp;
  #L32ccd6.  if v0 == 0 then goto L32cce0;
  #L32ccda.  v3.`okhttp3.a0$a.b` @type ^`okhttp3.z` := v4 @kind object;
  #L32ccde.  return v3 @kind object;
  #L32cce0.  v0:= new `java.lang.IllegalArgumentException`;
  #L32cce4.  v1:= new `java.lang.StringBuilder`;
  #L32cce8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L32ccee.  v2:= "multipart != " @kind object;
  #L32ccf2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32ccf8.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32ccfe.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L32cd04.  v4:= temp @kind object;
  #L32cd06.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32cd0c.  throw v0;
}
