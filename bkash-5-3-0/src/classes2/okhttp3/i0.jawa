record `okhttp3.i0` @kind class @AccessFlag PUBLIC_FINAL {
  `okhttp3.a` `okhttp3.i0.a` @AccessFlag FINAL;
  `java.net.Proxy` `okhttp3.i0.b` @AccessFlag FINAL;
  `java.net.InetSocketAddress` `okhttp3.i0.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`okhttp3.i0` v1 @kind this, `okhttp3.a` v2 @kind object, `java.net.Proxy` v3 @kind object, `java.net.InetSocketAddress` v4 @kind object) @signature `Lokhttp3/i0;.<init>:(Lokhttp3/a;Ljava/net/Proxy;Ljava/net/InetSocketAddress;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L32f764.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L32f76a.  v0:= "address == null" @kind object;
  #L32f76e.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L32f774.  v0:= "proxy == null" @kind object;
  #L32f778.  call temp:= `requireNonNull`(v3, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L32f77e.  v0:= "inetSocketAddress == null" @kind object;
  #L32f782.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L32f788.  v1.`okhttp3.i0.a` @type ^`okhttp3.a` := v2 @kind object;
  #L32f78c.  v1.`okhttp3.i0.b` @type ^`java.net.Proxy` := v3 @kind object;
  #L32f790.  v1.`okhttp3.i0.c` @type ^`java.net.InetSocketAddress` := v4 @kind object;
  #L32f794.  return @kind void;
}
procedure `okhttp3.a` `a`(`okhttp3.i0` v1 @kind this) @signature `Lokhttp3/i0;.a:()Lokhttp3/a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32f74c.  v0:= v1.`okhttp3.i0.a` @type ^`okhttp3.a` @kind object;
  #L32f750.  return v0 @kind object;
}
procedure `java.net.Proxy` `b`(`okhttp3.i0` v1 @kind this) @signature `Lokhttp3/i0;.b:()Ljava/net/Proxy;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32f734.  v0:= v1.`okhttp3.i0.b` @type ^`java.net.Proxy` @kind object;
  #L32f738.  return v0 @kind object;
}
procedure `boolean` `c`(`okhttp3.i0` v2 @kind this) @signature `Lokhttp3/i0;.c:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L32f658.  v0:= v2.`okhttp3.i0.a` @type ^`okhttp3.a` @kind object;
  #L32f65c.  v0:= v0.`okhttp3.a.i` @type ^`javax.net.ssl.SSLSocketFactory` @kind object;
  #L32f660.  if v0 == 0 then goto L32f67c;
  #L32f664.  v0:= v2.`okhttp3.i0.b` @type ^`java.net.Proxy` @kind object;
  #L32f668.  call temp:= `type`(v0) @signature `Ljava/net/Proxy;.type:()Ljava/net/Proxy$Type;` @kind virtual;
  #L32f66e.  v0:= temp @kind object;
  #L32f670.  v1:= `@@java.net.Proxy$Type.HTTP` @type ^`java.net.Proxy$Type` @kind object;
  #L32f674.  if v0 != v1 then goto L32f67c;
  #L32f678.  v0:= 1I;
  #L32f67a.  goto L32f67e;
  #L32f67c.  v0:= 0I;
  #L32f67e.  return v0;
}
procedure `java.net.InetSocketAddress` `d`(`okhttp3.i0` v1 @kind this) @signature `Lokhttp3/i0;.d:()Ljava/net/InetSocketAddress;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32f71c.  v0:= v1.`okhttp3.i0.c` @type ^`java.net.InetSocketAddress` @kind object;
  #L32f720.  return v0 @kind object;
}
procedure `boolean` `equals`(`okhttp3.i0` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lokhttp3/i0;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L32f5f8.  v0:= instanceof @variable v3 @type ^`okhttp3.i0` @kind boolean;
  #L32f5fc.  if v0 == 0 then goto L32f644;
  #L32f600.  v3:= (`okhttp3.i0`) v3 @kind object;
  #L32f604.  v0:= v3.`okhttp3.i0.a` @type ^`okhttp3.a` @kind object;
  #L32f608.  v1:= v2.`okhttp3.i0.a` @type ^`okhttp3.a` @kind object;
  #L32f60c.  call temp:= `equals`(v0, v1) @signature `Lokhttp3/a;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L32f612.  v0:= temp;
  #L32f614.  if v0 == 0 then goto L32f644;
  #L32f618.  v0:= v3.`okhttp3.i0.b` @type ^`java.net.Proxy` @kind object;
  #L32f61c.  v1:= v2.`okhttp3.i0.b` @type ^`java.net.Proxy` @kind object;
  #L32f620.  call temp:= `equals`(v0, v1) @signature `Ljava/net/Proxy;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L32f626.  v0:= temp;
  #L32f628.  if v0 == 0 then goto L32f644;
  #L32f62c.  v3:= v3.`okhttp3.i0.c` @type ^`java.net.InetSocketAddress` @kind object;
  #L32f630.  v0:= v2.`okhttp3.i0.c` @type ^`java.net.InetSocketAddress` @kind object;
  #L32f634.  call temp:= `equals`(v3, v0) @signature `Ljava/net/InetSocketAddress;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L32f63a.  v3:= temp;
  #L32f63c.  if v3 == 0 then goto L32f644;
  #L32f640.  v3:= 1I;
  #L32f642.  goto L32f646;
  #L32f644.  v3:= 0I;
  #L32f646.  return v3;
}
procedure `int` `hashCode`(`okhttp3.i0` v2 @kind this) @signature `Lokhttp3/i0;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L32f690.  v0:= v2.`okhttp3.i0.a` @type ^`okhttp3.a` @kind object;
  #L32f694.  call temp:= `hashCode`(v0) @signature `Lokhttp3/a;.hashCode:()I` @kind virtual;
  #L32f69a.  v0:= temp;
  #L32f69c.  v1:= 527I;
  #L32f6a0.  v1:= v1 + v0 @kind int;
  #L32f6a2.  v1:= v1 * 31;
  #L32f6a6.  v0:= v2.`okhttp3.i0.b` @type ^`java.net.Proxy` @kind object;
  #L32f6aa.  call temp:= `hashCode`(v0) @signature `Ljava/net/Proxy;.hashCode:()I` @kind virtual;
  #L32f6b0.  v0:= temp;
  #L32f6b2.  v1:= v1 + v0 @kind int;
  #L32f6b4.  v1:= v1 * 31;
  #L32f6b8.  v0:= v2.`okhttp3.i0.c` @type ^`java.net.InetSocketAddress` @kind object;
  #L32f6bc.  call temp:= `hashCode`(v0) @signature `Ljava/net/InetSocketAddress;.hashCode:()I` @kind virtual;
  #L32f6c2.  v0:= temp;
  #L32f6c4.  v1:= v1 + v0 @kind int;
  #L32f6c6.  return v1;
}
procedure `java.lang.String` `toString`(`okhttp3.i0` v2 @kind this) @signature `Lokhttp3/i0;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L32f6d8.  v0:= new `java.lang.StringBuilder`;
  #L32f6dc.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L32f6e2.  v1:= "Route{" @kind object;
  #L32f6e6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32f6ec.  v1:= v2.`okhttp3.i0.c` @type ^`java.net.InetSocketAddress` @kind object;
  #L32f6f0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32f6f6.  v1:= "}" @kind object;
  #L32f6fa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32f700.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L32f706.  v0:= temp @kind object;
  #L32f708.  return v0 @kind object;
}
