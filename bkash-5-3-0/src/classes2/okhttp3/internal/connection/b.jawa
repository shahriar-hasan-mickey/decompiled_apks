record `okhttp3.internal.connection.b` @kind class @AccessFlag FINAL {
  `java.util.List` `okhttp3.internal.connection.b.a` @AccessFlag PRIVATE_FINAL;
  `int` `okhttp3.internal.connection.b.b` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.connection.b.c` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.connection.b.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`okhttp3.internal.connection.b` v1 @kind this, `java.util.List` v2 @kind object) @signature `Lokhttp3/internal/connection/b;.<init>:(Ljava/util/List;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L32fc34.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L32fc3a.  v0:= 0I;
  #L32fc3c.  v1.`okhttp3.internal.connection.b.b` @type ^`int` := v0;
  #L32fc40.  v1.`okhttp3.internal.connection.b.a` @type ^`java.util.List` := v2 @kind object;
  #L32fc44.  return @kind void;
}
procedure `boolean` `c`(`okhttp3.internal.connection.b` v2 @kind this, `javax.net.ssl.SSLSocket` v3 @kind object) @signature `Lokhttp3/internal/connection/b;.c:(Ljavax/net/ssl/SSLSocket;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L32fb0c.  v0:= v2.`okhttp3.internal.connection.b.b` @type ^`int`;
  #L32fb10.  v1:= v2.`okhttp3.internal.connection.b.a` @type ^`java.util.List` @kind object;
  #L32fb14.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L32fb1a.  v1:= temp;
  #L32fb1c.  if v0 >= v1 then goto L32fb46;
  #L32fb20.  v1:= v2.`okhttp3.internal.connection.b.a` @type ^`java.util.List` @kind object;
  #L32fb24.  call temp:= `get`(v1, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L32fb2a.  v1:= temp @kind object;
  #L32fb2c.  v1:= (`okhttp3.m`) v1 @kind object;
  #L32fb30.  call temp:= `c`(v1, v3) @signature `Lokhttp3/m;.c:(Ljavax/net/ssl/SSLSocket;)Z` @kind virtual;
  #L32fb36.  v1:= temp;
  #L32fb38.  if v1 == 0 then goto L32fb40;
  #L32fb3c.  v3:= 1I;
  #L32fb3e.  return v3;
  #L32fb40.  v0:= v0 + 1;
  #L32fb44.  goto L32fb10;
  #L32fb46.  v3:= 0I;
  #L32fb48.  return v3;
}
procedure `okhttp3.m` `a`(`okhttp3.internal.connection.b` v4 @kind this, `javax.net.ssl.SSLSocket` v5 @kind object) @signature `Lokhttp3/internal/connection/b;.a:(Ljavax/net/ssl/SSLSocket;)Lokhttp3/m;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L32fb5c.  v0:= v4.`okhttp3.internal.connection.b.b` @type ^`int`;
  #L32fb60.  v1:= v4.`okhttp3.internal.connection.b.a` @type ^`java.util.List` @kind object;
  #L32fb64.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L32fb6a.  v1:= temp;
  #L32fb6c.  if v0 >= v1 then goto L32fb9c;
  #L32fb70.  v2:= v4.`okhttp3.internal.connection.b.a` @type ^`java.util.List` @kind object;
  #L32fb74.  call temp:= `get`(v2, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L32fb7a.  v2:= temp @kind object;
  #L32fb7c.  v2:= (`okhttp3.m`) v2 @kind object;
  #L32fb80.  call temp:= `c`(v2, v5) @signature `Lokhttp3/m;.c:(Ljavax/net/ssl/SSLSocket;)Z` @kind virtual;
  #L32fb86.  v3:= temp;
  #L32fb88.  if v3 == 0 then goto L32fb96;
  #L32fb8c.  v0:= v0 + 1;
  #L32fb90.  v4.`okhttp3.internal.connection.b.b` @type ^`int` := v0;
  #L32fb94.  goto L32fb9e;
  #L32fb96.  v0:= v0 + 1;
  #L32fb9a.  goto L32fb6c;
  #L32fb9c.  v2:= 0I;
  #L32fb9e.  if v2 == 0 then goto L32fbbe;
  #L32fba2.  call temp:= `c`(v4, v5) @signature `Lokhttp3/internal/connection/b;.c:(Ljavax/net/ssl/SSLSocket;)Z` @kind direct;
  #L32fba8.  v0:= temp;
  #L32fbaa.  v4.`okhttp3.internal.connection.b.c` @type ^`boolean` := v0 @kind boolean;
  #L32fbae.  v0:= `@@ee.a.a` @type ^`ee.a` @kind object;
  #L32fbb2.  v1:= v4.`okhttp3.internal.connection.b.d` @type ^`boolean` @kind boolean;
  #L32fbb6.  call `c`(v0, v2, v5, v1) @signature `Lee/a;.c:(Lokhttp3/m;Ljavax/net/ssl/SSLSocket;Z)V` @kind virtual;
  #L32fbbc.  return v2 @kind object;
  #L32fbbe.  v0:= new `java.net.UnknownServiceException`;
  #L32fbc2.  v1:= new `java.lang.StringBuilder`;
  #L32fbc6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L32fbcc.  v2:= "Unable to find acceptable protocols. isFallback=" @kind object;
  #L32fbd0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32fbd6.  v2:= v4.`okhttp3.internal.connection.b.d` @type ^`boolean` @kind boolean;
  #L32fbda.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L32fbe0.  v2:= ", modes=" @kind object;
  #L32fbe4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32fbea.  v2:= v4.`okhttp3.internal.connection.b.a` @type ^`java.util.List` @kind object;
  #L32fbee.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32fbf4.  v2:= ", supported protocols=" @kind object;
  #L32fbf8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32fbfe.  call temp:= `getEnabledProtocols`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledProtocols:()[Ljava/lang/String;` @kind virtual;
  #L32fc04.  v5:= temp @kind object;
  #L32fc06.  call temp:= `toString`(v5) @signature `Ljava/util/Arrays;.toString:([Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L32fc0c.  v5:= temp @kind object;
  #L32fc0e.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32fc14.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L32fc1a.  v5:= temp @kind object;
  #L32fc1c.  call `<init>`(v0, v5) @signature `Ljava/net/UnknownServiceException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32fc22.  throw v0;
}
procedure `boolean` `b`(`okhttp3.internal.connection.b` v2 @kind this, `java.io.IOException` v3 @kind object) @signature `Lokhttp3/internal/connection/b;.b:(Ljava/io/IOException;)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L32faac.  v0:= 1I;
  #L32faae.  v2.`okhttp3.internal.connection.b.d` @type ^`boolean` := v0 @kind boolean;
  #L32fab2.  v0:= v2.`okhttp3.internal.connection.b.c` @type ^`boolean` @kind boolean;
  #L32fab6.  v1:= 0I;
  #L32fab8.  if v0 != 0 then goto L32fabe;
  #L32fabc.  return v1;
  #L32fabe.  v0:= instanceof @variable v3 @type ^`java.net.ProtocolException` @kind boolean;
  #L32fac2.  if v0 == 0 then goto L32fac8;
  #L32fac6.  return v1;
  #L32fac8.  v0:= instanceof @variable v3 @type ^`java.io.InterruptedIOException` @kind boolean;
  #L32facc.  if v0 == 0 then goto L32fad2;
  #L32fad0.  return v1;
  #L32fad2.  v0:= instanceof @variable v3 @type ^`javax.net.ssl.SSLHandshakeException` @kind boolean;
  #L32fad6.  if v0 == 0 then goto L32faec;
  #L32fada.  call temp:= `getCause`(v3) @signature `Ljava/io/IOException;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L32fae0.  v0:= temp @kind object;
  #L32fae2.  v0:= instanceof @variable v0 @type ^`java.security.cert.CertificateException` @kind boolean;
  #L32fae6.  if v0 == 0 then goto L32faec;
  #L32faea.  return v1;
  #L32faec.  v0:= instanceof @variable v3 @type ^`javax.net.ssl.SSLPeerUnverifiedException` @kind boolean;
  #L32faf0.  if v0 == 0 then goto L32faf6;
  #L32faf4.  return v1;
  #L32faf6.  v3:= instanceof @variable v3 @type ^`javax.net.ssl.SSLException` @kind boolean;
  #L32fafa.  return v3;
}
