record `okhttp3.internal.connection.c$a` @kind class @AccessFlag FINAL extends `okio.h` @kind class {
  `boolean` `okhttp3.internal.connection.c$a.h` @AccessFlag PRIVATE;
  `long` `okhttp3.internal.connection.c$a.i` @AccessFlag PRIVATE;
  `long` `okhttp3.internal.connection.c$a.j` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.connection.c$a.k` @AccessFlag PRIVATE;
  `okhttp3.internal.connection.c` `okhttp3.internal.connection.c$a.l` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okhttp3.internal.connection.c$a` v0 @kind this, `okhttp3.internal.connection.c` v1 @kind object, `okio.u` v2 @kind object, `long` v3 ) @signature `Lokhttp3/internal/connection/c$a;.<init>:(Lokhttp3/internal/connection/c;Lokio/u;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L32fc90.  v0.`okhttp3.internal.connection.c$a.l` @type ^`okhttp3.internal.connection.c` := v1 @kind object;
  #L32fc94.  call `<init>`(v0, v2) @signature `Lokio/h;.<init>:(Lokio/u;)V` @kind direct;
  #L32fc9a.  v0.`okhttp3.internal.connection.c$a.i` @type ^`long` := v3 @kind wide;
  #L32fc9e.  return @kind void;
}
procedure `java.io.IOException` `e`(`okhttp3.internal.connection.c$a` v7 @kind this, `java.io.IOException` v8 @kind object) @signature `Lokhttp3/internal/connection/c$a;.e:(Ljava/io/IOException;)Ljava/io/IOException;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L32fc58.  v0:= v7.`okhttp3.internal.connection.c$a.h` @type ^`boolean` @kind boolean;
  #L32fc5c.  if v0 == 0 then goto L32fc62;
  #L32fc60.  return v8 @kind object;
  #L32fc62.  v0:= 1I;
  #L32fc64.  v7.`okhttp3.internal.connection.c$a.h` @type ^`boolean` := v0 @kind boolean;
  #L32fc68.  v1:= v7.`okhttp3.internal.connection.c$a.l` @type ^`okhttp3.internal.connection.c` @kind object;
  #L32fc6c.  v2:= v7.`okhttp3.internal.connection.c$a.j` @type ^`long` @kind wide;
  #L32fc70.  v4:= 0I;
  #L32fc72.  v5:= 1I;
  #L32fc74.  v6:= v8 @kind object;
  #L32fc76.  call temp:= `a`(v1, v2, v4, v5, v6) @signature `Lokhttp3/internal/connection/c;.a:(JZZLjava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L32fc7c.  v8:= temp @kind object;
  #L32fc7e.  return v8 @kind object;
}
procedure `void` `close`(`okhttp3.internal.connection.c$a` v5 @kind this) @signature `Lokhttp3/internal/connection/c$a;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L32fcb0.  v0:= v5.`okhttp3.internal.connection.c$a.k` @type ^`boolean` @kind boolean;
  #L32fcb4.  if v0 == 0 then goto L32fcba;
  #L32fcb8.  return @kind void;
  #L32fcba.  v0:= 1I;
  #L32fcbc.  v5.`okhttp3.internal.connection.c$a.k` @type ^`boolean` := v0 @kind boolean;
  #L32fcc0.  v0:= v5.`okhttp3.internal.connection.c$a.i` @type ^`long` @kind wide;
  #L32fcc4.  v2:= -1L;
  #L32fcc8.  v4:= lcmp(v0, v2);
  #L32fccc.  if v4 == 0 then goto L32fcee;
  #L32fcd0.  v2:= v5.`okhttp3.internal.connection.c$a.j` @type ^`long` @kind wide;
  #L32fcd4.  v4:= lcmp(v2, v0);
  #L32fcd8.  if v4 != 0 then goto L32fcde;
  #L32fcdc.  goto L32fcee;
  #L32fcde.  v0:= new `java.net.ProtocolException`;
  #L32fce2.  v1:= "unexpected end of stream" @kind object;
  #L32fce6.  call `<init>`(v0, v1) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32fcec.  throw v0;
  #L32fcee.  call `close`(v5) @signature `Lokio/h;.close:()V` @kind super;
  #L32fcf4.  v0:= 0I;
  #L32fcf6.  call temp:= `e`(v5, v0) @signature `Lokhttp3/internal/connection/c$a;.e:(Ljava/io/IOException;)Ljava/io/IOException;` @kind direct;
  #L32fcfc.  return @kind void;
  #L32fcfe.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L32fd00.  call temp:= `e`(v5, v0) @signature `Lokhttp3/internal/connection/c$a;.e:(Ljava/io/IOException;)Ljava/io/IOException;` @kind direct;
  #L32fd06.  v0:= temp @kind object;
  #L32fd08.  throw v0;
  catch `java.io.IOException` @[L32fcee..L32fcfc] goto L32fcfe;
}
procedure `void` `e0`(`okhttp3.internal.connection.c$a` v5 @kind this, `okio.c` v6 @kind object, `long` v7 ) @signature `Lokhttp3/internal/connection/c$a;.e0:(Lokio/c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L32fd60.  v0:= v5.`okhttp3.internal.connection.c$a.k` @type ^`boolean` @kind boolean;
  #L32fd64.  if v0 != 0 then goto L32fdee;
  #L32fd68.  v0:= v5.`okhttp3.internal.connection.c$a.i` @type ^`long` @kind wide;
  #L32fd6c.  v2:= -1L;
  #L32fd70.  v4:= lcmp(v0, v2);
  #L32fd74.  if v4 == 0 then goto L32fdd0;
  #L32fd78.  v2:= v5.`okhttp3.internal.connection.c$a.j` @type ^`long` @kind wide;
  #L32fd7c.  v2:= v2 + v7 @kind long;
  #L32fd7e.  v4:= lcmp(v2, v0);
  #L32fd82.  if v4 > 0 then goto L32fd88;
  #L32fd86.  goto L32fdd0;
  #L32fd88.  v6:= new `java.net.ProtocolException`;
  #L32fd8c.  v0:= new `java.lang.StringBuilder`;
  #L32fd90.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L32fd96.  v1:= "expected " @kind object;
  #L32fd9a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32fda0.  v1:= v5.`okhttp3.internal.connection.c$a.i` @type ^`long` @kind wide;
  #L32fda4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L32fdaa.  v1:= " bytes but received " @kind object;
  #L32fdae.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L32fdb4.  v1:= v5.`okhttp3.internal.connection.c$a.j` @type ^`long` @kind wide;
  #L32fdb8.  v1:= v1 + v7 @kind long;
  #L32fdba.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L32fdc0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L32fdc6.  v7:= temp @kind object;
  #L32fdc8.  call `<init>`(v6, v7) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32fdce.  throw v6;
  #L32fdd0.  call `e0`(v5, v6, v7) @signature `Lokio/h;.e0:(Lokio/c;J)V` @kind super;
  #L32fdd6.  v0:= v5.`okhttp3.internal.connection.c$a.j` @type ^`long` @kind wide;
  #L32fdda.  v0:= v0 + v7 @kind long;
  #L32fddc.  v5.`okhttp3.internal.connection.c$a.j` @type ^`long` := v0 @kind wide;
  #L32fde0.  return @kind void;
  #L32fde2.  v6:= Exception @type ^`java.io.IOException` @kind object;
  #L32fde4.  call temp:= `e`(v5, v6) @signature `Lokhttp3/internal/connection/c$a;.e:(Ljava/io/IOException;)Ljava/io/IOException;` @kind direct;
  #L32fdea.  v6:= temp @kind object;
  #L32fdec.  throw v6;
  #L32fdee.  v6:= new `java.lang.IllegalStateException`;
  #L32fdf2.  v7:= "closed" @kind object;
  #L32fdf6.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32fdfc.  throw v6;
  catch `java.io.IOException` @[L32fdd0..L32fde0] goto L32fde2;
}
procedure `void` `flush`(`okhttp3.internal.connection.c$a` v1 @kind this) @signature `Lokhttp3/internal/connection/c$a;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32fd2c.  call `flush`(v1) @signature `Lokio/h;.flush:()V` @kind super;
  #L32fd32.  return @kind void;
  #L32fd34.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L32fd36.  call temp:= `e`(v1, v0) @signature `Lokhttp3/internal/connection/c$a;.e:(Ljava/io/IOException;)Ljava/io/IOException;` @kind direct;
  #L32fd3c.  v0:= temp @kind object;
  #L32fd3e.  throw v0;
  catch `java.io.IOException` @[L32fd2c..L32fd32] goto L32fd34;
}
