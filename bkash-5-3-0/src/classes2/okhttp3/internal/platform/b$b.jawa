record `okhttp3.internal.platform.b$b` @kind class @AccessFlag FINAL {
  `java.lang.reflect.Method` `okhttp3.internal.platform.b$b.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Method` `okhttp3.internal.platform.b$b.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Method` `okhttp3.internal.platform.b$b.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.platform.b$b` v0 @kind this, `java.lang.reflect.Method` v1 @kind object, `java.lang.reflect.Method` v2 @kind object, `java.lang.reflect.Method` v3 @kind object) @signature `Lokhttp3/internal/platform/b$b;.<init>:(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3331d0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3331d6.  v0.`okhttp3.internal.platform.b$b.a` @type ^`java.lang.reflect.Method` := v1 @kind object;
  #L3331da.  v0.`okhttp3.internal.platform.b$b.b` @type ^`java.lang.reflect.Method` := v2 @kind object;
  #L3331de.  v0.`okhttp3.internal.platform.b$b.c` @type ^`java.lang.reflect.Method` := v3 @kind object;
  #L3331e2.  return @kind void;
}
procedure `okhttp3.internal.platform.b$b` `b`() @signature `Lokhttp3/internal/platform/b$b;.b:()Lokhttp3/internal/platform/b$b;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L333150.  v0:= 0I;
  #L333152.  v1:= "dalvik.system.CloseGuard" @kind object;
  #L333156.  call temp:= `forName`(v1) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L33315c.  v1:= temp @kind object;
  #L33315e.  v2:= "get" @kind object;
  #L333162.  v3:= 0I;
  #L333164.  v4:= new `java.lang.Class`[v3];
  #L333168.  call temp:= `getMethod`(v1, v2, v4) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L33316e.  v2:= temp @kind object;
  #L333170.  v4:= "open" @kind object;
  #L333174.  v5:= 1I;
  #L333176.  v5:= new `java.lang.Class`[v5];
  #L33317a.  v6:= constclass @type ^`java.lang.String` @kind object;
  #L33317e.  v5[v3]:= v6 @kind object;
  #L333182.  call temp:= `getMethod`(v1, v4, v5) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L333188.  v4:= temp @kind object;
  #L33318a.  v5:= "warnIfOpen" @kind object;
  #L33318e.  v3:= new `java.lang.Class`[v3];
  #L333192.  call temp:= `getMethod`(v1, v5, v3) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L333198.  v0:= temp @kind object;
  #L33319a.  v1:= v0 @kind object;
  #L33319c.  v0:= v2 @kind object;
  #L33319e.  goto L3331a4;
  #L3331a0.  v1:= v0 @kind object;
  #L3331a2.  v4:= v1 @kind object;
  #L3331a4.  v2:= new `okhttp3.internal.platform.b$b`;
  #L3331a8.  call `<init>`(v2, v0, v4, v1) @signature `Lokhttp3/internal/platform/b$b;.<init>:(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;)V` @kind direct;
  #L3331ae.  return v2 @kind object;
  catch `java.lang.Exception` @[L333152..L33319a] goto L3331a0;
}
procedure `java.lang.Object` `a`(`okhttp3.internal.platform.b$b` v5 @kind this, `java.lang.String` v6 @kind object) @signature `Lokhttp3/internal/platform/b$b;.a:(Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L333100.  v0:= v5.`okhttp3.internal.platform.b$b.a` @type ^`java.lang.reflect.Method` @kind object;
  #L333104.  v1:= 0I;
  #L333106.  if v0 == 0 then goto L33312e;
  #L33310a.  v2:= 0I;
  #L33310c.  v3:= new `java.lang.Object`[v2];
  #L333110.  call temp:= `invoke`(v0, v1, v3) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L333116.  v0:= temp @kind object;
  #L333118.  v3:= v5.`okhttp3.internal.platform.b$b.b` @type ^`java.lang.reflect.Method` @kind object;
  #L33311c.  v4:= 1I;
  #L33311e.  v4:= new `java.lang.Object`[v4];
  #L333122.  v4[v2]:= v6 @kind object;
  #L333126.  call temp:= `invoke`(v3, v0, v4) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L33312c.  return v0 @kind object;
  #L33312e.  return v1 @kind object;
  catch `java.lang.Exception` @[L33310c..L33312c] goto L33312e;
}
procedure `boolean` `c`(`okhttp3.internal.platform.b$b` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lokhttp3/internal/platform/b$b;.c:(Ljava/lang/Object;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L3330c8.  v0:= 0I;
  #L3330ca.  if v4 == 0 then goto L3330de;
  #L3330ce.  v1:= v3.`okhttp3.internal.platform.b$b.c` @type ^`java.lang.reflect.Method` @kind object;
  #L3330d2.  v2:= new `java.lang.Object`[v0];
  #L3330d6.  call temp:= `invoke`(v1, v4, v2) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L3330dc.  v0:= 1I;
  #L3330de.  return v0;
  catch `java.lang.Exception` @[L3330ce..L3330dc] goto L3330de;
}
