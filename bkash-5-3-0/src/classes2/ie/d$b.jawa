record `ie.d$b` @kind class @AccessFlag FINAL {
  `okio.c` `ie.d$b.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `ie.d$b.b` @AccessFlag PRIVATE_FINAL;
  `int` `ie.d$b.c` @AccessFlag PRIVATE;
  `boolean` `ie.d$b.d` @AccessFlag PRIVATE;
  `int` `ie.d$b.e` @AccessFlag ;
  `ie.c`[] `ie.d$b.f` @AccessFlag ;
  `int` `ie.d$b.g` @AccessFlag ;
  `int` `ie.d$b.h` @AccessFlag ;
  `int` `ie.d$b.i` @AccessFlag ;
}
procedure `void` `<init>`(`ie.d$b` v1 @kind this, `int` v2 , `boolean` v3 , `okio.c` v4 @kind object) @signature `Lie/d$b;.<init>:(IZLokio/c;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2b80cc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2b80d2.  v0:= 2147483647I;
  #L2b80d8.  v1.`ie.d$b.c` @type ^`int` := v0;
  #L2b80dc.  v0:= 8I;
  #L2b80e0.  v0:= new `ie.c`[v0];
  #L2b80e4.  v1.`ie.d$b.f` @type ^`ie.c`[] := v0 @kind object;
  #L2b80e8.  v0:= length @variable v0;
  #L2b80ea.  v0:= v0 + -1;
  #L2b80ee.  v1.`ie.d$b.g` @type ^`int` := v0;
  #L2b80f2.  v0:= 0I;
  #L2b80f4.  v1.`ie.d$b.h` @type ^`int` := v0;
  #L2b80f8.  v1.`ie.d$b.i` @type ^`int` := v0;
  #L2b80fc.  v1.`ie.d$b.e` @type ^`int` := v2;
  #L2b8100.  v1.`ie.d$b.b` @type ^`boolean` := v3 @kind boolean;
  #L2b8104.  v1.`ie.d$b.a` @type ^`okio.c` := v4 @kind object;
  #L2b8108.  return @kind void;
}
procedure `void` `<init>`(`ie.d$b` v2 @kind this, `okio.c` v3 @kind object) @signature `Lie/d$b;.<init>:(Lokio/c;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2b811c.  v0:= 4096I;
  #L2b8120.  v1:= 1I;
  #L2b8122.  call `<init>`(v2, v0, v1, v3) @signature `Lie/d$b;.<init>:(IZLokio/c;)V` @kind direct;
  #L2b8128.  return @kind void;
}
procedure `void` `a`(`ie.d$b` v2 @kind this) @signature `Lie/d$b;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L2b813c.  v0:= v2.`ie.d$b.e` @type ^`int`;
  #L2b8140.  v1:= v2.`ie.d$b.i` @type ^`int`;
  #L2b8144.  if v0 >= v1 then goto L2b815c;
  #L2b8148.  if v0 != 0 then goto L2b8154;
  #L2b814c.  call `b`(v2) @signature `Lie/d$b;.b:()V` @kind direct;
  #L2b8152.  goto L2b815c;
  #L2b8154.  v1:= v1 - v0 @kind int;
  #L2b8156.  call temp:= `c`(v2, v1) @signature `Lie/d$b;.c:(I)I` @kind direct;
  #L2b815c.  return @kind void;
}
procedure `void` `b`(`ie.d$b` v2 @kind this) @signature `Lie/d$b;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L2b8170.  v0:= v2.`ie.d$b.f` @type ^`ie.c`[] @kind object;
  #L2b8174.  v1:= 0I;
  #L2b8176.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L2b817c.  v0:= v2.`ie.d$b.f` @type ^`ie.c`[] @kind object;
  #L2b8180.  v0:= length @variable v0;
  #L2b8182.  v0:= v0 + -1;
  #L2b8186.  v2.`ie.d$b.g` @type ^`int` := v0;
  #L2b818a.  v0:= 0I;
  #L2b818c.  v2.`ie.d$b.h` @type ^`int` := v0;
  #L2b8190.  v2.`ie.d$b.i` @type ^`int` := v0;
  #L2b8194.  return @kind void;
}
procedure `int` `c`(`ie.d$b` v4 @kind this, `int` v5 ) @signature `Lie/d$b;.c:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2b802c.  v0:= 0I;
  #L2b802e.  if v5 <= 0 then goto L2b80ba;
  #L2b8032.  v1:= v4.`ie.d$b.f` @type ^`ie.c`[] @kind object;
  #L2b8036.  v1:= length @variable v1;
  #L2b8038.  v1:= v1 + -1;
  #L2b803c.  v2:= v4.`ie.d$b.g` @type ^`int`;
  #L2b8040.  if v1 < v2 then goto L2b807e;
  #L2b8044.  if v5 <= 0 then goto L2b807e;
  #L2b8048.  v2:= v4.`ie.d$b.f` @type ^`ie.c`[] @kind object;
  #L2b804c.  v3:= v2[v1] @kind object;
  #L2b8050.  v3:= v3.`ie.c.c` @type ^`int`;
  #L2b8054.  v5:= v5 - v3 @kind int;
  #L2b8056.  v3:= v4.`ie.d$b.i` @type ^`int`;
  #L2b805a.  v2:= v2[v1] @kind object;
  #L2b805e.  v2:= v2.`ie.c.c` @type ^`int`;
  #L2b8062.  v3:= v3 - v2 @kind int;
  #L2b8064.  v4.`ie.d$b.i` @type ^`int` := v3;
  #L2b8068.  v2:= v4.`ie.d$b.h` @type ^`int`;
  #L2b806c.  v2:= v2 + -1;
  #L2b8070.  v4.`ie.d$b.h` @type ^`int` := v2;
  #L2b8074.  v0:= v0 + 1;
  #L2b8078.  v1:= v1 + -1;
  #L2b807c.  goto L2b803c;
  #L2b807e.  v5:= v4.`ie.d$b.f` @type ^`ie.c`[] @kind object;
  #L2b8082.  v1:= v2 + 1;
  #L2b8086.  v2:= v2 + 1;
  #L2b808a.  v2:= v2 + v0 @kind int;
  #L2b808c.  v3:= v4.`ie.d$b.h` @type ^`int`;
  #L2b8090.  call `arraycopy`(v5, v1, v5, v2, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2b8096.  v5:= v4.`ie.d$b.f` @type ^`ie.c`[] @kind object;
  #L2b809a.  v1:= v4.`ie.d$b.g` @type ^`int`;
  #L2b809e.  v2:= v1 + 1;
  #L2b80a2.  v1:= v1 + 1;
  #L2b80a6.  v1:= v1 + v0 @kind int;
  #L2b80a8.  v3:= 0I;
  #L2b80aa.  call `fill`(v5, v2, v1, v3) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;IILjava/lang/Object;)V` @kind static;
  #L2b80b0.  v5:= v4.`ie.d$b.g` @type ^`int`;
  #L2b80b4.  v5:= v5 + v0 @kind int;
  #L2b80b6.  v4.`ie.d$b.g` @type ^`int` := v5;
  #L2b80ba.  return v0;
}
procedure `void` `d`(`ie.d$b` v6 @kind this, `ie.c` v7 @kind object) @signature `Lie/d$b;.d:(Lie/c;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2b81a8.  v0:= v7.`ie.c.c` @type ^`int`;
  #L2b81ac.  v1:= v6.`ie.d$b.e` @type ^`int`;
  #L2b81b0.  if v0 <= v1 then goto L2b81bc;
  #L2b81b4.  call `b`(v6) @signature `Lie/d$b;.b:()V` @kind direct;
  #L2b81ba.  return @kind void;
  #L2b81bc.  v2:= v6.`ie.d$b.i` @type ^`int`;
  #L2b81c0.  v2:= v2 + v0 @kind int;
  #L2b81c2.  v2:= v2 - v1 @kind int;
  #L2b81c4.  call temp:= `c`(v6, v2) @signature `Lie/d$b;.c:(I)I` @kind direct;
  #L2b81ca.  v1:= v6.`ie.d$b.h` @type ^`int`;
  #L2b81ce.  v1:= v1 + 1;
  #L2b81d2.  v2:= v6.`ie.d$b.f` @type ^`ie.c`[] @kind object;
  #L2b81d6.  v3:= length @variable v2;
  #L2b81d8.  if v1 <= v3 then goto L2b8204;
  #L2b81dc.  v1:= length @variable v2;
  #L2b81de.  v1:= v1 * 2;
  #L2b81e2.  v1:= new `ie.c`[v1];
  #L2b81e6.  v3:= 0I;
  #L2b81e8.  v4:= length @variable v2;
  #L2b81ea.  v5:= length @variable v2;
  #L2b81ec.  call `arraycopy`(v2, v3, v1, v4, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2b81f2.  v2:= v6.`ie.d$b.f` @type ^`ie.c`[] @kind object;
  #L2b81f6.  v2:= length @variable v2;
  #L2b81f8.  v2:= v2 + -1;
  #L2b81fc.  v6.`ie.d$b.g` @type ^`int` := v2;
  #L2b8200.  v6.`ie.d$b.f` @type ^`ie.c`[] := v1 @kind object;
  #L2b8204.  v1:= v6.`ie.d$b.g` @type ^`int`;
  #L2b8208.  v2:= v1 + -1;
  #L2b820c.  v6.`ie.d$b.g` @type ^`int` := v2;
  #L2b8210.  v2:= v6.`ie.d$b.f` @type ^`ie.c`[] @kind object;
  #L2b8214.  v2[v1]:= v7 @kind object;
  #L2b8218.  v7:= v6.`ie.d$b.h` @type ^`int`;
  #L2b821c.  v7:= v7 + 1;
  #L2b8220.  v6.`ie.d$b.h` @type ^`int` := v7;
  #L2b8224.  v7:= v6.`ie.d$b.i` @type ^`int`;
  #L2b8228.  v7:= v7 + v0 @kind int;
  #L2b822a.  v6.`ie.d$b.i` @type ^`int` := v7;
  #L2b822e.  return @kind void;
}
procedure `void` `e`(`ie.d$b` v1 @kind this, `int` v2 ) @signature `Lie/d$b;.e:(I)V` @AccessFlag  {
    temp;
    v0;

  #L2b8240.  v0:= 16384I;
  #L2b8244.  call temp:= `min`(v2, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L2b824a.  v2:= temp;
  #L2b824c.  v0:= v1.`ie.d$b.e` @type ^`int`;
  #L2b8250.  if v0 != v2 then goto L2b8256;
  #L2b8254.  return @kind void;
  #L2b8256.  if v2 >= v0 then goto L2b826a;
  #L2b825a.  v0:= v1.`ie.d$b.c` @type ^`int`;
  #L2b825e.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L2b8264.  v0:= temp;
  #L2b8266.  v1.`ie.d$b.c` @type ^`int` := v0;
  #L2b826a.  v0:= 1I;
  #L2b826c.  v1.`ie.d$b.d` @type ^`boolean` := v0 @kind boolean;
  #L2b8270.  v1.`ie.d$b.e` @type ^`int` := v2;
  #L2b8274.  call `a`(v1) @signature `Lie/d$b;.a:()V` @kind direct;
  #L2b827a.  return @kind void;
}
procedure `void` `f`(`ie.d$b` v3 @kind this, `okio.f` v4 @kind object) @signature `Lie/d$b;.f:(Lokio/f;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L2b828c.  v0:= v3.`ie.d$b.b` @type ^`boolean` @kind boolean;
  #L2b8290.  v1:= 127I;
  #L2b8294.  if v0 == 0 then goto L2b82f2;
  #L2b8298.  call temp:= `f`() @signature `Lie/k;.f:()Lie/k;` @kind static;
  #L2b829e.  v0:= temp @kind object;
  #L2b82a0.  call temp:= `e`(v0, v4) @signature `Lie/k;.e:(Lokio/f;)I` @kind virtual;
  #L2b82a6.  v0:= temp;
  #L2b82a8.  call temp:= `size`(v4) @signature `Lokio/f;.size:()I` @kind virtual;
  #L2b82ae.  v2:= temp;
  #L2b82b0.  if v0 >= v2 then goto L2b82f2;
  #L2b82b4.  v0:= new `okio.c`;
  #L2b82b8.  call `<init>`(v0) @signature `Lokio/c;.<init>:()V` @kind direct;
  #L2b82be.  call temp:= `f`() @signature `Lie/k;.f:()Lie/k;` @kind static;
  #L2b82c4.  v2:= temp @kind object;
  #L2b82c6.  call `d`(v2, v4, v0) @signature `Lie/k;.d:(Lokio/f;Lokio/d;)V` @kind virtual;
  #L2b82cc.  call temp:= `Y`(v0) @signature `Lokio/c;.Y:()Lokio/f;` @kind virtual;
  #L2b82d2.  v4:= temp @kind object;
  #L2b82d4.  call temp:= `size`(v4) @signature `Lokio/f;.size:()I` @kind virtual;
  #L2b82da.  v0:= temp;
  #L2b82dc.  v2:= 128I;
  #L2b82e0.  call `h`(v3, v0, v1, v2) @signature `Lie/d$b;.h:(III)V` @kind virtual;
  #L2b82e6.  v0:= v3.`ie.d$b.a` @type ^`okio.c` @kind object;
  #L2b82ea.  call temp:= `Q0`(v0, v4) @signature `Lokio/c;.Q0:(Lokio/f;)Lokio/c;` @kind virtual;
  #L2b82f0.  goto L2b830c;
  #L2b82f2.  call temp:= `size`(v4) @signature `Lokio/f;.size:()I` @kind virtual;
  #L2b82f8.  v0:= temp;
  #L2b82fa.  v2:= 0I;
  #L2b82fc.  call `h`(v3, v0, v1, v2) @signature `Lie/d$b;.h:(III)V` @kind virtual;
  #L2b8302.  v0:= v3.`ie.d$b.a` @type ^`okio.c` @kind object;
  #L2b8306.  call temp:= `Q0`(v0, v4) @signature `Lokio/c;.Q0:(Lokio/f;)Lokio/c;` @kind virtual;
  #L2b830c.  return @kind void;
}
procedure `void` `g`(`ie.d$b` v13 @kind this, `java.util.List` v14 @kind object) @signature `Lie/d$b;.g:(Ljava/util/List;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L2b8320.  v0:= v13.`ie.d$b.d` @type ^`boolean` @kind boolean;
  #L2b8324.  v1:= 0I;
  #L2b8326.  if v0 == 0 then goto L2b835c;
  #L2b832a.  v0:= v13.`ie.d$b.c` @type ^`int`;
  #L2b832e.  v2:= v13.`ie.d$b.e` @type ^`int`;
  #L2b8332.  v3:= 32I;
  #L2b8336.  v4:= 31I;
  #L2b833a.  if v0 >= v2 then goto L2b8344;
  #L2b833e.  call `h`(v13, v0, v4, v3) @signature `Lie/d$b;.h:(III)V` @kind virtual;
  #L2b8344.  v13.`ie.d$b.d` @type ^`boolean` := v1 @kind boolean;
  #L2b8348.  v0:= 2147483647I;
  #L2b834e.  v13.`ie.d$b.c` @type ^`int` := v0;
  #L2b8352.  v0:= v13.`ie.d$b.e` @type ^`int`;
  #L2b8356.  call `h`(v13, v0, v4, v3) @signature `Lie/d$b;.h:(III)V` @kind virtual;
  #L2b835c.  call temp:= `size`(v14) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2b8362.  v0:= temp;
  #L2b8364.  v2:= 0I;
  #L2b8366.  if v2 >= v0 then goto L2b84f6;
  #L2b836a.  call temp:= `get`(v14, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2b8370.  v3:= temp @kind object;
  #L2b8372.  v3:= (`ie.c`) v3 @kind object;
  #L2b8376.  v4:= v3.`ie.c.a` @type ^`okio.f` @kind object;
  #L2b837a.  call temp:= `toAsciiLowercase`(v4) @signature `Lokio/f;.toAsciiLowercase:()Lokio/f;` @kind virtual;
  #L2b8380.  v4:= temp @kind object;
  #L2b8382.  v5:= v3.`ie.c.b` @type ^`okio.f` @kind object;
  #L2b8386.  v6:= `@@ie.d.b` @type ^`java.util.Map` @kind object;
  #L2b838a.  call temp:= `get`(v6, v4) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2b8390.  v6:= temp @kind object;
  #L2b8392.  v6:= (`java.lang.Integer`) v6 @kind object;
  #L2b8396.  v7:= -1I;
  #L2b8398.  v8:= 1I;
  #L2b839a.  if v6 == 0 then goto L2b83fa;
  #L2b839e.  call temp:= `intValue`(v6) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L2b83a4.  v6:= temp;
  #L2b83a6.  v6:= v6 + v8 @kind int;
  #L2b83a8.  if v6 <= v8 then goto L2b83f4;
  #L2b83ac.  v9:= 8I;
  #L2b83b0.  if v6 >= v9 then goto L2b83f4;
  #L2b83b4.  v9:= `@@ie.d.a` @type ^`ie.c`[] @kind object;
  #L2b83b8.  v10:= v6 + -1;
  #L2b83bc.  v10:= v9[v10] @kind object;
  #L2b83c0.  v10:= v10.`ie.c.b` @type ^`okio.f` @kind object;
  #L2b83c4.  call temp:= `equals`(v10, v5) @signature `Ljava/util/Objects;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2b83ca.  v10:= temp;
  #L2b83cc.  if v10 == 0 then goto L2b83d4;
  #L2b83d0.  v9:= v6;
  #L2b83d2.  goto L2b83fe;
  #L2b83d4.  v9:= v9[v6] @kind object;
  #L2b83d8.  v9:= v9.`ie.c.b` @type ^`okio.f` @kind object;
  #L2b83dc.  call temp:= `equals`(v9, v5) @signature `Ljava/util/Objects;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2b83e2.  v9:= temp;
  #L2b83e4.  if v9 == 0 then goto L2b83f4;
  #L2b83e8.  v9:= v6 + 1;
  #L2b83ec.  v12:= v9;
  #L2b83ee.  v9:= v6;
  #L2b83f0.  v6:= v12;
  #L2b83f2.  goto L2b83fe;
  #L2b83f4.  v9:= v6;
  #L2b83f6.  v6:= -1I;
  #L2b83f8.  goto L2b83fe;
  #L2b83fa.  v6:= -1I;
  #L2b83fc.  v9:= -1I;
  #L2b83fe.  if v6 != v7 then goto L2b846c;
  #L2b8402.  v10:= v13.`ie.d$b.g` @type ^`int`;
  #L2b8406.  v10:= v10 + v8 @kind int;
  #L2b8408.  v8:= v13.`ie.d$b.f` @type ^`ie.c`[] @kind object;
  #L2b840c.  v8:= length @variable v8;
  #L2b840e.  if v10 >= v8 then goto L2b846c;
  #L2b8412.  v11:= v13.`ie.d$b.f` @type ^`ie.c`[] @kind object;
  #L2b8416.  v11:= v11[v10] @kind object;
  #L2b841a.  v11:= v11.`ie.c.a` @type ^`okio.f` @kind object;
  #L2b841e.  call temp:= `equals`(v11, v4) @signature `Ljava/util/Objects;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2b8424.  v11:= temp;
  #L2b8426.  if v11 == 0 then goto L2b8466;
  #L2b842a.  v11:= v13.`ie.d$b.f` @type ^`ie.c`[] @kind object;
  #L2b842e.  v11:= v11[v10] @kind object;
  #L2b8432.  v11:= v11.`ie.c.b` @type ^`okio.f` @kind object;
  #L2b8436.  call temp:= `equals`(v11, v5) @signature `Ljava/util/Objects;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2b843c.  v11:= temp;
  #L2b843e.  if v11 == 0 then goto L2b8452;
  #L2b8442.  v6:= v13.`ie.d$b.g` @type ^`int`;
  #L2b8446.  v10:= v10 - v6 @kind int;
  #L2b8448.  v6:= `@@ie.d.a` @type ^`ie.c`[] @kind object;
  #L2b844c.  v6:= length @variable v6;
  #L2b844e.  v6:= v6 + v10 @kind int;
  #L2b8450.  goto L2b846c;
  #L2b8452.  if v9 != v7 then goto L2b8466;
  #L2b8456.  v9:= v13.`ie.d$b.g` @type ^`int`;
  #L2b845a.  v9:= v10 - v9 @kind int;
  #L2b845e.  v11:= `@@ie.d.a` @type ^`ie.c`[] @kind object;
  #L2b8462.  v11:= length @variable v11;
  #L2b8464.  v9:= v9 + v11 @kind int;
  #L2b8466.  v10:= v10 + 1;
  #L2b846a.  goto L2b840e;
  #L2b846c.  if v6 == v7 then goto L2b8480;
  #L2b8470.  v3:= 127I;
  #L2b8474.  v4:= 128I;
  #L2b8478.  call `h`(v13, v6, v3, v4) @signature `Lie/d$b;.h:(III)V` @kind virtual;
  #L2b847e.  goto L2b84ee;
  #L2b8480.  v6:= 64I;
  #L2b8484.  if v9 != v7 then goto L2b84a6;
  #L2b8488.  v7:= v13.`ie.d$b.a` @type ^`okio.c` @kind object;
  #L2b848c.  call temp:= `U0`(v7, v6) @signature `Lokio/c;.U0:(I)Lokio/c;` @kind virtual;
  #L2b8492.  call `f`(v13, v4) @signature `Lie/d$b;.f:(Lokio/f;)V` @kind virtual;
  #L2b8498.  call `f`(v13, v5) @signature `Lie/d$b;.f:(Lokio/f;)V` @kind virtual;
  #L2b849e.  call `d`(v13, v3) @signature `Lie/d$b;.d:(Lie/c;)V` @kind direct;
  #L2b84a4.  goto L2b84ee;
  #L2b84a6.  v7:= `@@ie.c.d` @type ^`okio.f` @kind object;
  #L2b84aa.  call temp:= `startsWith`(v4, v7) @signature `Lokio/f;.startsWith:(Lokio/f;)Z` @kind virtual;
  #L2b84b0.  v7:= temp;
  #L2b84b2.  if v7 == 0 then goto L2b84d8;
  #L2b84b6.  v7:= `@@ie.c.i` @type ^`okio.f` @kind object;
  #L2b84ba.  call temp:= `equals`(v7, v4) @signature `Lokio/f;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2b84c0.  v4:= temp;
  #L2b84c2.  if v4 != 0 then goto L2b84d8;
  #L2b84c6.  v3:= 15I;
  #L2b84ca.  call `h`(v13, v9, v3, v1) @signature `Lie/d$b;.h:(III)V` @kind virtual;
  #L2b84d0.  call `f`(v13, v5) @signature `Lie/d$b;.f:(Lokio/f;)V` @kind virtual;
  #L2b84d6.  goto L2b84ee;
  #L2b84d8.  v4:= 63I;
  #L2b84dc.  call `h`(v13, v9, v4, v6) @signature `Lie/d$b;.h:(III)V` @kind virtual;
  #L2b84e2.  call `f`(v13, v5) @signature `Lie/d$b;.f:(Lokio/f;)V` @kind virtual;
  #L2b84e8.  call `d`(v13, v3) @signature `Lie/d$b;.d:(Lie/c;)V` @kind direct;
  #L2b84ee.  v2:= v2 + 1;
  #L2b84f2.  goto L2b8366;
  #L2b84f6.  return @kind void;
}
procedure `void` `h`(`ie.d$b` v1 @kind this, `int` v2 , `int` v3 , `int` v4 ) @signature `Lie/d$b;.h:(III)V` @AccessFlag  {
    temp;
    v0;

  #L2b8508.  if v2 >= v3 then goto L2b851a;
  #L2b850c.  v3:= v1.`ie.d$b.a` @type ^`okio.c` @kind object;
  #L2b8510.  v2:= v2 ^| v4 @kind int;
  #L2b8512.  call temp:= `U0`(v3, v2) @signature `Lokio/c;.U0:(I)Lokio/c;` @kind virtual;
  #L2b8518.  return @kind void;
  #L2b851a.  v0:= v1.`ie.d$b.a` @type ^`okio.c` @kind object;
  #L2b851e.  v4:= v4 ^| v3 @kind int;
  #L2b8520.  call temp:= `U0`(v0, v4) @signature `Lokio/c;.U0:(I)Lokio/c;` @kind virtual;
  #L2b8526.  v2:= v2 - v3 @kind int;
  #L2b8528.  v3:= 128I;
  #L2b852c.  if v2 < v3 then goto L2b8546;
  #L2b8530.  v4:= v2 ^& 127;
  #L2b8534.  v0:= v1.`ie.d$b.a` @type ^`okio.c` @kind object;
  #L2b8538.  v3:= v3 ^| v4 @kind int;
  #L2b853a.  call temp:= `U0`(v0, v3) @signature `Lokio/c;.U0:(I)Lokio/c;` @kind virtual;
  #L2b8540.  v2:= v2 ^>> 7;
  #L2b8544.  goto L2b8528;
  #L2b8546.  v3:= v1.`ie.d$b.a` @type ^`okio.c` @kind object;
  #L2b854a.  call temp:= `U0`(v3, v2) @signature `Lokio/c;.U0:(I)Lokio/c;` @kind virtual;
  #L2b8550.  return @kind void;
}
