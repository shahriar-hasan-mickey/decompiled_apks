record `ie.e` @kind class @AccessFlag PUBLIC_FINAL {
}
global `okio.f` `@@ie.e.a` @AccessFlag STATIC_FINAL;
global `java.lang.String`[] `@@ie.e.b` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String`[] `@@ie.e.c` @AccessFlag STATIC_FINAL;
global `java.lang.String`[] `@@ie.e.d` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lie/e;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L2bd00c.  v0:= "PRI * HTTP/2.0\r\n\r\nSM\r\n\r\n" @kind object;
  #L2bd010.  call temp:= `encodeUtf8`(v0) @signature `Lokio/f;.encodeUtf8:(Ljava/lang/String;)Lokio/f;` @kind static;
  #L2bd016.  v0:= temp @kind object;
  #L2bd018.  `@@ie.e.a` @type ^`okio.f` := v0 @kind object;
  #L2bd01c.  v1:= "DATA" @kind object;
  #L2bd020.  v2:= "HEADERS" @kind object;
  #L2bd024.  v3:= "PRIORITY" @kind object;
  #L2bd028.  v4:= "RST_STREAM" @kind object;
  #L2bd02c.  v5:= "SETTINGS" @kind object;
  #L2bd030.  v6:= "PUSH_PROMISE" @kind object;
  #L2bd034.  v7:= "PING" @kind object;
  #L2bd038.  v8:= "GOAWAY" @kind object;
  #L2bd03c.  v9:= "WINDOW_UPDATE" @kind object;
  #L2bd040.  v10:= "CONTINUATION" @kind object;
  #L2bd044.  temp:= new `java.lang.String`[v1, v2, v3, v4, v5, v6, v7, v8, v9, v10];
  #L2bd04a.  v0:= temp @kind object;
  #L2bd04c.  `@@ie.e.b` @type ^`java.lang.String`[] := v0 @kind object;
  #L2bd050.  v0:= 64I;
  #L2bd054.  v0:= new `java.lang.String`[v0];
  #L2bd058.  `@@ie.e.c` @type ^`java.lang.String`[] := v0 @kind object;
  #L2bd05c.  v0:= 256I;
  #L2bd060.  v0:= new `java.lang.String`[v0];
  #L2bd064.  `@@ie.e.d` @type ^`java.lang.String`[] := v0 @kind object;
  #L2bd068.  v0:= 0I;
  #L2bd06a.  v1:= 0I;
  #L2bd06c.  v2:= `@@ie.e.d` @type ^`java.lang.String`[] @kind object;
  #L2bd070.  v3:= length @variable v2;
  #L2bd072.  v4:= 32I;
  #L2bd076.  v5:= 1I;
  #L2bd078.  if v1 >= v3 then goto L2bd0ae;
  #L2bd07c.  v3:= new `java.lang.Object`[v5];
  #L2bd080.  call temp:= `toBinaryString`(v1) @signature `Ljava/lang/Integer;.toBinaryString:(I)Ljava/lang/String;` @kind static;
  #L2bd086.  v5:= temp @kind object;
  #L2bd088.  v3[v0]:= v5 @kind object;
  #L2bd08c.  v5:= "%8s" @kind object;
  #L2bd090.  call temp:= `q`(v5, v3) @signature `Lee/e;.q:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2bd096.  v3:= temp @kind object;
  #L2bd098.  v5:= 48I;
  #L2bd09c.  call temp:= `replace`(v3, v4, v5) @signature `Ljava/lang/String;.replace:(CC)Ljava/lang/String;` @kind virtual;
  #L2bd0a2.  v3:= temp @kind object;
  #L2bd0a4.  v2[v1]:= v3 @kind object;
  #L2bd0a8.  v1:= v1 + 1;
  #L2bd0ac.  goto L2bd06c;
  #L2bd0ae.  v1:= `@@ie.e.c` @type ^`java.lang.String`[] @kind object;
  #L2bd0b2.  v2:= "" @kind object;
  #L2bd0b6.  v1[v0]:= v2 @kind object;
  #L2bd0ba.  v2:= "END_STREAM" @kind object;
  #L2bd0be.  v1[v5]:= v2 @kind object;
  #L2bd0c2.  v2:= new `int`[v5];
  #L2bd0c6.  v2[v0]:= v5;
  #L2bd0ca.  v3:= "PADDED" @kind object;
  #L2bd0ce.  v6:= 8I;
  #L2bd0d2.  v1[v6]:= v3 @kind object;
  #L2bd0d6.  v1:= 0I;
  #L2bd0d8.  v3:= "|PADDED" @kind object;
  #L2bd0dc.  if v1 >= v5 then goto L2bd118;
  #L2bd0e0.  v7:= v2[v1];
  #L2bd0e4.  v8:= `@@ie.e.c` @type ^`java.lang.String`[] @kind object;
  #L2bd0e8.  v9:= v7 ^| 8;
  #L2bd0ec.  v10:= new `java.lang.StringBuilder`;
  #L2bd0f0.  call `<init>`(v10) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2bd0f6.  v7:= v8[v7] @kind object;
  #L2bd0fa.  call temp:= `append`(v10, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bd100.  call temp:= `append`(v10, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bd106.  call temp:= `toString`(v10) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2bd10c.  v3:= temp @kind object;
  #L2bd10e.  v8[v9]:= v3 @kind object;
  #L2bd112.  v1:= v1 + 1;
  #L2bd116.  goto L2bd0d8;
  #L2bd118.  v1:= `@@ie.e.c` @type ^`java.lang.String`[] @kind object;
  #L2bd11c.  v7:= 4I;
  #L2bd11e.  v8:= "END_HEADERS" @kind object;
  #L2bd122.  v1[v7]:= v8 @kind object;
  #L2bd126.  v7:= "PRIORITY" @kind object;
  #L2bd12a.  v1[v4]:= v7 @kind object;
  #L2bd12e.  v4:= 36I;
  #L2bd132.  v7:= "END_HEADERS|PRIORITY" @kind object;
  #L2bd136.  v1[v4]:= v7 @kind object;
  #L2bd13a.  v1:= 3I;
  #L2bd13c.  v4:= new `int`[v1];
  #L2bd140.  goto L2bd200;
  #L2bd146.  v7:= 0I;
  #L2bd148.  if v7 >= v1 then goto L2bd1da;
  #L2bd14c.  v8:= v4[v7];
  #L2bd150.  v9:= 0I;
  #L2bd152.  if v9 >= v5 then goto L2bd1d4;
  #L2bd156.  v10:= v2[v9];
  #L2bd15a.  v11:= `@@ie.e.c` @type ^`java.lang.String`[] @kind object;
  #L2bd15e.  v12:= v10 ^| v8 @kind int;
  #L2bd162.  v13:= new `java.lang.StringBuilder`;
  #L2bd166.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2bd16c.  v14:= v11[v10] @kind object;
  #L2bd170.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bd176.  v14:= 124I;
  #L2bd17a.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bd180.  v15:= v11[v8] @kind object;
  #L2bd184.  call temp:= `append`(v13, v15) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bd18a.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2bd190.  v13:= temp @kind object;
  #L2bd192.  v11[v12]:= v13 @kind object;
  #L2bd196.  v12:= v12 ^| v6 @kind int;
  #L2bd198.  v13:= new `java.lang.StringBuilder`;
  #L2bd19c.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2bd1a2.  v10:= v11[v10] @kind object;
  #L2bd1a6.  call temp:= `append`(v13, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bd1ac.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bd1b2.  v10:= v11[v8] @kind object;
  #L2bd1b6.  call temp:= `append`(v13, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bd1bc.  call temp:= `append`(v13, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bd1c2.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2bd1c8.  v10:= temp @kind object;
  #L2bd1ca.  v11[v12]:= v10 @kind object;
  #L2bd1ce.  v9:= v9 + 1;
  #L2bd1d2.  goto L2bd152;
  #L2bd1d4.  v7:= v7 + 1;
  #L2bd1d8.  goto L2bd148;
  #L2bd1da.  v1:= `@@ie.e.c` @type ^`java.lang.String`[] @kind object;
  #L2bd1de.  v2:= length @variable v1;
  #L2bd1e0.  if v0 >= v2 then goto L2bd1fe;
  #L2bd1e4.  v2:= v1[v0] @kind object;
  #L2bd1e8.  if v2 != 0 then goto L2bd1f8;
  #L2bd1ec.  v2:= `@@ie.e.d` @type ^`java.lang.String`[] @kind object;
  #L2bd1f0.  v2:= v2[v0] @kind object;
  #L2bd1f4.  v1[v0]:= v2 @kind object;
  #L2bd1f8.  v0:= v0 + 1;
  #L2bd1fc.  goto L2bd1da;
  #L2bd1fe.  return @kind void;
  #L2bd200.  v4:= (4I, 32I, 36I) @kind object;
  #L2bd213.  goto L2bd146;
}
procedure `void` `<init>`(`ie.e` v0 @kind this) @signature `Lie/e;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L2bd224.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2bd22a.  return @kind void;
}
procedure `java.lang.String` `a`(`byte` v2 , `byte` v3 ) @signature `Lie/e;.a:(BB)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L2bcec0.  if v3 != 0 then goto L2bceca;
  #L2bcec4.  v2:= "" @kind object;
  #L2bcec8.  return v2 @kind object;
  #L2bceca.  v0:= 2I;
  #L2bcecc.  if v2 == v0 then goto L2bcf5e;
  #L2bced0.  v0:= 3I;
  #L2bced2.  if v2 == v0 then goto L2bcf5e;
  #L2bced6.  v0:= 4I;
  #L2bced8.  if v2 == v0 then goto L2bcf48;
  #L2bcedc.  v0:= 6I;
  #L2bcede.  if v2 == v0 then goto L2bcf48;
  #L2bcee2.  v0:= 7I;
  #L2bcee4.  if v2 == v0 then goto L2bcf5e;
  #L2bcee8.  v0:= 8I;
  #L2bceec.  if v2 == v0 then goto L2bcf5e;
  #L2bcef0.  v0:= `@@ie.e.c` @type ^`java.lang.String`[] @kind object;
  #L2bcef4.  v1:= length @variable v0;
  #L2bcef6.  if v3 >= v1 then goto L2bcf00;
  #L2bcefa.  v0:= v0[v3] @kind object;
  #L2bcefe.  goto L2bcf08;
  #L2bcf00.  v0:= `@@ie.e.d` @type ^`java.lang.String`[] @kind object;
  #L2bcf04.  v0:= v0[v3] @kind object;
  #L2bcf08.  v1:= 5I;
  #L2bcf0a.  if v2 != v1 then goto L2bcf28;
  #L2bcf0e.  v1:= v3 ^& 4;
  #L2bcf12.  if v1 == 0 then goto L2bcf28;
  #L2bcf16.  v2:= "HEADERS" @kind object;
  #L2bcf1a.  v3:= "PUSH_PROMISE" @kind object;
  #L2bcf1e.  call temp:= `replace`(v0, v2, v3) @signature `Ljava/lang/String;.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;` @kind virtual;
  #L2bcf24.  v2:= temp @kind object;
  #L2bcf26.  return v2 @kind object;
  #L2bcf28.  if v2 != 0 then goto L2bcf46;
  #L2bcf2c.  v2:= v3 ^& 32;
  #L2bcf30.  if v2 == 0 then goto L2bcf46;
  #L2bcf34.  v2:= "PRIORITY" @kind object;
  #L2bcf38.  v3:= "COMPRESSED" @kind object;
  #L2bcf3c.  call temp:= `replace`(v0, v2, v3) @signature `Ljava/lang/String;.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;` @kind virtual;
  #L2bcf42.  v2:= temp @kind object;
  #L2bcf44.  return v2 @kind object;
  #L2bcf46.  return v0 @kind object;
  #L2bcf48.  v2:= 1I;
  #L2bcf4a.  if v3 != v2 then goto L2bcf54;
  #L2bcf4e.  v2:= "ACK" @kind object;
  #L2bcf52.  goto L2bcf5c;
  #L2bcf54.  v2:= `@@ie.e.d` @type ^`java.lang.String`[] @kind object;
  #L2bcf58.  v2:= v2[v3] @kind object;
  #L2bcf5c.  return v2 @kind object;
  #L2bcf5e.  v2:= `@@ie.e.d` @type ^`java.lang.String`[] @kind object;
  #L2bcf62.  v2:= v2[v3] @kind object;
  #L2bcf66.  return v2 @kind object;
}
procedure `java.lang.String` `b`(`boolean` v4 , `int` v5 , `int` v6 , `byte` v7 , `byte` v8 ) @signature `Lie/e;.b:(ZIIBB)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2bcf78.  v0:= `@@ie.e.b` @type ^`java.lang.String`[] @kind object;
  #L2bcf7c.  v1:= length @variable v0;
  #L2bcf7e.  v2:= 0I;
  #L2bcf80.  v3:= 1I;
  #L2bcf82.  if v7 >= v1 then goto L2bcf8c;
  #L2bcf86.  v0:= v0[v7] @kind object;
  #L2bcf8a.  goto L2bcfa8;
  #L2bcf8c.  v0:= new `java.lang.Object`[v3];
  #L2bcf90.  call temp:= `valueOf`(v7) @signature `Ljava/lang/Byte;.valueOf:(B)Ljava/lang/Byte;` @kind static;
  #L2bcf96.  v1:= temp @kind object;
  #L2bcf98.  v0[v2]:= v1 @kind object;
  #L2bcf9c.  v1:= "0x%02x" @kind object;
  #L2bcfa0.  call temp:= `q`(v1, v0) @signature `Lee/e;.q:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2bcfa6.  v0:= temp @kind object;
  #L2bcfa8.  call temp:= `a`(v7, v8) @signature `Lie/e;.a:(BB)Ljava/lang/String;` @kind static;
  #L2bcfae.  v7:= temp @kind object;
  #L2bcfb0.  v8:= 5I;
  #L2bcfb2.  v8:= new `java.lang.Object`[v8];
  #L2bcfb6.  if v4 == 0 then goto L2bcfc0;
  #L2bcfba.  v4:= "<<" @kind object;
  #L2bcfbe.  goto L2bcfc4;
  #L2bcfc0.  v4:= ">>" @kind object;
  #L2bcfc4.  v8[v2]:= v4 @kind object;
  #L2bcfc8.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2bcfce.  v4:= temp @kind object;
  #L2bcfd0.  v8[v3]:= v4 @kind object;
  #L2bcfd4.  v4:= 2I;
  #L2bcfd6.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2bcfdc.  v5:= temp @kind object;
  #L2bcfde.  v8[v4]:= v5 @kind object;
  #L2bcfe2.  v4:= 3I;
  #L2bcfe4.  v8[v4]:= v0 @kind object;
  #L2bcfe8.  v4:= 4I;
  #L2bcfea.  v8[v4]:= v7 @kind object;
  #L2bcfee.  v4:= "%s 0x%08x %5d %-13s %s" @kind object;
  #L2bcff2.  call temp:= `q`(v4, v8) @signature `Lee/e;.q:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2bcff8.  v4:= temp @kind object;
  #L2bcffa.  return v4 @kind object;
}
procedure `java.lang.IllegalArgumentException` `c`(`java.lang.String` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Lie/e;.c:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalArgumentException;` @AccessFlag STATIC {
    temp;
    v0;

  #L2bce9c.  v0:= new `java.lang.IllegalArgumentException`;
  #L2bcea0.  call temp:= `q`(v1, v2) @signature `Lee/e;.q:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2bcea6.  v1:= temp @kind object;
  #L2bcea8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2bceae.  throw v0;
}
procedure `java.io.IOException` `d`(`java.lang.String` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Lie/e;.d:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @AccessFlag STATIC {
    temp;
    v0;

  #L2bce78.  v0:= new `java.io.IOException`;
  #L2bce7c.  call temp:= `q`(v1, v2) @signature `Lee/e;.q:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2bce82.  v1:= temp @kind object;
  #L2bce84.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2bce8a.  throw v0;
}
