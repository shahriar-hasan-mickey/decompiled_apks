record `ie.f$a` @kind class @AccessFlag  extends `ee.b` @kind class {
  `int` `ie.f$a.h` @AccessFlag FINAL_SYNTHETIC;
  `ie.b` `ie.f$a.i` @AccessFlag FINAL_SYNTHETIC;
  `ie.f` `ie.f$a.j` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`ie.f$a` v0 @kind this, `ie.f` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.Object`[] v3 @kind object, `int` v4 , `ie.b` v5 @kind object) @signature `Lie/f$a;.<init>:(Lie/f;Ljava/lang/String;[Ljava/lang/Object;ILie/b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2b8bb4.  v0.`ie.f$a.j` @type ^`ie.f` := v1 @kind object;
  #L2b8bb8.  v0.`ie.f$a.h` @type ^`int` := v4;
  #L2b8bbc.  v0.`ie.f$a.i` @type ^`ie.b` := v5 @kind object;
  #L2b8bc0.  call `<init>`(v0, v2, v3) @signature `Lee/b;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L2b8bc6.  return @kind void;
}
procedure `void` `k`(`ie.f$a` v3 @kind this) @signature `Lie/f$a;.k:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2b8bd8.  v0:= v3.`ie.f$a.j` @type ^`ie.f` @kind object;
  #L2b8bdc.  v1:= v3.`ie.f$a.h` @type ^`int`;
  #L2b8be0.  v2:= v3.`ie.f$a.i` @type ^`ie.b` @kind object;
  #L2b8be4.  call `W0`(v0, v1, v2) @signature `Lie/f;.W0:(ILie/b;)V` @kind virtual;
  #L2b8bea.  goto L2b8bf8;
  #L2b8bec.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L2b8bee.  v1:= v3.`ie.f$a.j` @type ^`ie.f` @kind object;
  #L2b8bf2.  call `e`(v1, v0) @signature `Lie/f;.e:(Lie/f;Ljava/io/IOException;)V` @kind static;
  #L2b8bf8.  return @kind void;
  catch `java.io.IOException` @[L2b8bd8..L2b8bea] goto L2b8bec;
}
