record `ie.m` @kind class @AccessFlag PUBLIC_FINAL {
  `int` `ie.m.a` @AccessFlag PRIVATE;
  `int`[] `ie.m.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`ie.m` v1 @kind this) @signature `Lie/m;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2bdc78.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2bdc7e.  v0:= 10I;
  #L2bdc82.  v0:= new `int`[v0];
  #L2bdc86.  v1.`ie.m.b` @type ^`int`[] := v0 @kind object;
  #L2bdc8a.  return @kind void;
}
procedure `void` `a`(`ie.m` v2 @kind this) @signature `Lie/m;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2bdc9c.  v0:= 0I;
  #L2bdc9e.  v2.`ie.m.a` @type ^`int` := v0;
  #L2bdca2.  v1:= v2.`ie.m.b` @type ^`int`[] @kind object;
  #L2bdca6.  call `fill`(v1, v0) @signature `Ljava/util/Arrays;.fill:([II)V` @kind static;
  #L2bdcac.  return @kind void;
}
procedure `int` `b`(`ie.m` v1 @kind this, `int` v2 ) @signature `Lie/m;.b:(I)I` @AccessFlag  {
    temp;
    v0;

  #L2bdb90.  v0:= v1.`ie.m.b` @type ^`int`[] @kind object;
  #L2bdb94.  v2:= v0[v2];
  #L2bdb98.  return v2;
}
procedure `int` `c`(`ie.m` v2 @kind this) @signature `Lie/m;.c:()I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2bdbac.  v0:= v2.`ie.m.a` @type ^`int`;
  #L2bdbb0.  v0:= v0 ^& 2;
  #L2bdbb4.  if v0 == 0 then goto L2bdbc4;
  #L2bdbb8.  v0:= v2.`ie.m.b` @type ^`int`[] @kind object;
  #L2bdbbc.  v1:= 1I;
  #L2bdbbe.  v0:= v0[v1];
  #L2bdbc2.  goto L2bdbc6;
  #L2bdbc4.  v0:= -1I;
  #L2bdbc6.  return v0;
}
procedure `int` `d`(`ie.m` v2 @kind this) @signature `Lie/m;.d:()I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2bdbd8.  v0:= v2.`ie.m.a` @type ^`int`;
  #L2bdbdc.  v0:= v0 ^& 128;
  #L2bdbe0.  if v0 == 0 then goto L2bdbf0;
  #L2bdbe4.  v0:= v2.`ie.m.b` @type ^`int`[] @kind object;
  #L2bdbe8.  v1:= 7I;
  #L2bdbea.  v0:= v0[v1];
  #L2bdbee.  goto L2bdbf6;
  #L2bdbf0.  v0:= 65535I;
  #L2bdbf6.  return v0;
}
procedure `int` `e`(`ie.m` v1 @kind this, `int` v2 ) @signature `Lie/m;.e:(I)I` @AccessFlag  {
    temp;
    v0;

  #L2bdc08.  v0:= v1.`ie.m.a` @type ^`int`;
  #L2bdc0c.  v0:= v0 ^& 16;
  #L2bdc10.  if v0 == 0 then goto L2bdc1e;
  #L2bdc14.  v2:= v1.`ie.m.b` @type ^`int`[] @kind object;
  #L2bdc18.  v0:= 4I;
  #L2bdc1a.  v2:= v2[v0];
  #L2bdc1e.  return v2;
}
procedure `int` `f`(`ie.m` v1 @kind this, `int` v2 ) @signature `Lie/m;.f:(I)I` @AccessFlag  {
    temp;
    v0;

  #L2bdc30.  v0:= v1.`ie.m.a` @type ^`int`;
  #L2bdc34.  v0:= v0 ^& 32;
  #L2bdc38.  if v0 == 0 then goto L2bdc46;
  #L2bdc3c.  v2:= v1.`ie.m.b` @type ^`int`[] @kind object;
  #L2bdc40.  v0:= 5I;
  #L2bdc42.  v2:= v2[v0];
  #L2bdc46.  return v2;
}
procedure `boolean` `g`(`ie.m` v2 @kind this, `int` v3 ) @signature `Lie/m;.g:(I)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2bdb34.  v0:= 1I;
  #L2bdb36.  v3:= v0 ^< v3 @kind int;
  #L2bdb3a.  v1:= v2.`ie.m.a` @type ^`int`;
  #L2bdb3e.  v3:= v3 ^& v1 @kind int;
  #L2bdb40.  if v3 == 0 then goto L2bdb46;
  #L2bdb44.  goto L2bdb48;
  #L2bdb46.  v0:= 0I;
  #L2bdb48.  return v0;
}
procedure `void` `h`(`ie.m` v2 @kind this, `ie.m` v3 @kind object) @signature `Lie/m;.h:(Lie/m;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2bdcc0.  v0:= 0I;
  #L2bdcc2.  v1:= 10I;
  #L2bdcc6.  if v0 >= v1 then goto L2bdcec;
  #L2bdcca.  call temp:= `g`(v3, v0) @signature `Lie/m;.g:(I)Z` @kind virtual;
  #L2bdcd0.  v1:= temp;
  #L2bdcd2.  if v1 != 0 then goto L2bdcd8;
  #L2bdcd6.  goto L2bdce6;
  #L2bdcd8.  call temp:= `b`(v3, v0) @signature `Lie/m;.b:(I)I` @kind virtual;
  #L2bdcde.  v1:= temp;
  #L2bdce0.  call temp:= `i`(v2, v0, v1) @signature `Lie/m;.i:(II)Lie/m;` @kind virtual;
  #L2bdce6.  v0:= v0 + 1;
  #L2bdcea.  goto L2bdcc2;
  #L2bdcec.  return @kind void;
}
procedure `ie.m` `i`(`ie.m` v3 @kind this, `int` v4 , `int` v5 ) @signature `Lie/m;.i:(II)Lie/m;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L2bdb5c.  if v4 < 0 then goto L2bdb7e;
  #L2bdb60.  v0:= v3.`ie.m.b` @type ^`int`[] @kind object;
  #L2bdb64.  v1:= length @variable v0;
  #L2bdb66.  if v4 < v1 then goto L2bdb6c;
  #L2bdb6a.  goto L2bdb7e;
  #L2bdb6c.  v1:= 1I;
  #L2bdb6e.  v1:= v1 ^< v4 @kind int;
  #L2bdb70.  v2:= v3.`ie.m.a` @type ^`int`;
  #L2bdb74.  v1:= v1 ^| v2 @kind int;
  #L2bdb76.  v3.`ie.m.a` @type ^`int` := v1;
  #L2bdb7a.  v0[v4]:= v5;
  #L2bdb7e.  return v3 @kind object;
}
procedure `int` `j`(`ie.m` v1 @kind this) @signature `Lie/m;.j:()I` @AccessFlag  {
    temp;
    v0;

  #L2bdc58.  v0:= v1.`ie.m.a` @type ^`int`;
  #L2bdc5c.  call temp:= `bitCount`(v0) @signature `Ljava/lang/Integer;.bitCount:(I)I` @kind static;
  #L2bdc62.  v0:= temp;
  #L2bdc64.  return v0;
}
