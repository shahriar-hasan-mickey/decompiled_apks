record `ie.j` @kind class @AccessFlag FINAL extends `java.io.Closeable` @kind interface {
  `okio.d` `ie.j.g` @AccessFlag PRIVATE_FINAL;
  `boolean` `ie.j.h` @AccessFlag PRIVATE_FINAL;
  `okio.c` `ie.j.i` @AccessFlag PRIVATE_FINAL;
  `int` `ie.j.j` @AccessFlag PRIVATE;
  `boolean` `ie.j.k` @AccessFlag PRIVATE;
  `ie.d$b` `ie.j.l` @AccessFlag FINAL;
}
global `java.util.logging.Logger` `@@ie.j.m` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lie/j;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2bc5e0.  v0:= constclass @type ^`ie.e` @kind object;
  #L2bc5e4.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L2bc5ea.  v0:= temp @kind object;
  #L2bc5ec.  call temp:= `getLogger`(v0) @signature `Ljava/util/logging/Logger;.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;` @kind static;
  #L2bc5f2.  v0:= temp @kind object;
  #L2bc5f4.  `@@ie.j.m` @type ^`java.util.logging.Logger` := v0 @kind object;
  #L2bc5f8.  return @kind void;
}
procedure `void` `<init>`(`ie.j` v0 @kind this, `okio.d` v1 @kind object, `boolean` v2 ) @signature `Lie/j;.<init>:(Lokio/d;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2bc60c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2bc612.  v0.`ie.j.g` @type ^`okio.d` := v1 @kind object;
  #L2bc616.  v0.`ie.j.h` @type ^`boolean` := v2 @kind boolean;
  #L2bc61a.  v1:= new `okio.c`;
  #L2bc61e.  call `<init>`(v1) @signature `Lokio/c;.<init>:()V` @kind direct;
  #L2bc624.  v0.`ie.j.i` @type ^`okio.c` := v1 @kind object;
  #L2bc628.  v2:= new `ie.d$b`;
  #L2bc62c.  call `<init>`(v2, v1) @signature `Lie/d$b;.<init>:(Lokio/c;)V` @kind direct;
  #L2bc632.  v0.`ie.j.l` @type ^`ie.d$b` := v2 @kind object;
  #L2bc636.  v1:= 16384I;
  #L2bc63a.  v0.`ie.j.j` @type ^`int` := v1;
  #L2bc63e.  return @kind void;
}
procedure `void` `Z`(`ie.j` v7 @kind this, `int` v8 , `long` v9 ) @signature `Lie/j;.Z:(IJ)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2bcde4.  v0:= 0L;
  #L2bcde8.  v2:= lcmp(v9, v0);
  #L2bcdec.  if v2 <= 0 then goto L2bce2c;
  #L2bcdf0.  v2:= v7.`ie.j.j` @type ^`int`;
  #L2bcdf4.  v2:= (`long`) v2 @kind i2l;
  #L2bcdf6.  call temp:= `min`(v2, v9) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2bcdfc.  v2:= temp @kind wide;
  #L2bcdfe.  v3:= (`int`) v2 @kind l2i;
  #L2bce00.  v4:= (`long`) v3 @kind i2l;
  #L2bce02.  v9:= v9 - v4 @kind long;
  #L2bce04.  v2:= 9I;
  #L2bce08.  v6:= lcmp(v9, v0);
  #L2bce0c.  if v6 != 0 then goto L2bce14;
  #L2bce10.  v0:= 4I;
  #L2bce12.  goto L2bce16;
  #L2bce14.  v0:= 0I;
  #L2bce16.  call `s`(v7, v8, v3, v2, v0) @signature `Lie/j;.s:(IIBB)V` @kind virtual;
  #L2bce1c.  v0:= v7.`ie.j.g` @type ^`okio.d` @kind object;
  #L2bce20.  v1:= v7.`ie.j.i` @type ^`okio.c` @kind object;
  #L2bce24.  call `e0`(v0, v1, v4) @signature `Lokio/u;.e0:(Lokio/c;J)V` @kind interface;
  #L2bce2a.  goto L2bcde4;
  #L2bce2c.  return @kind void;
}
procedure `void` `a0`(`okio.d` v1 @kind object, `int` v2 ) @signature `Lie/j;.a0:(Lokio/d;I)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L2bce40.  v0:= v2 ^>> 16;
  #L2bce44.  v0:= v0 ^& 255;
  #L2bce48.  call temp:= `I`(v1, v0) @signature `Lokio/d;.I:(I)Lokio/d;` @kind interface;
  #L2bce4e.  v0:= v2 ^>> 8;
  #L2bce52.  v0:= v0 ^& 255;
  #L2bce56.  call temp:= `I`(v1, v0) @signature `Lokio/d;.I:(I)Lokio/d;` @kind interface;
  #L2bce5c.  v2:= v2 ^& 255;
  #L2bce60.  call temp:= `I`(v1, v2) @signature `Lokio/d;.I:(I)Lokio/d;` @kind interface;
  #L2bce66.  return @kind void;
}
procedure `void` `C`(`ie.j` v3 @kind this, `boolean` v4 , `int` v5 , `int` v6 ) @signature `Lie/j;.C:(ZII)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2bcacc.  @monitorenter v3
  #L2bcace.  v0:= v3.`ie.j.k` @type ^`boolean` @kind boolean;
  #L2bcad2.  if v0 != 0 then goto L2bcb10;
  #L2bcad6.  v0:= 8I;
  #L2bcada.  v1:= 6I;
  #L2bcadc.  v2:= 0I;
  #L2bcade.  if v4 == 0 then goto L2bcae6;
  #L2bcae2.  v4:= 1I;
  #L2bcae4.  goto L2bcae8;
  #L2bcae6.  v4:= 0I;
  #L2bcae8.  call `s`(v3, v2, v0, v1, v4) @signature `Lie/j;.s:(IIBB)V` @kind virtual;
  #L2bcaee.  v4:= v3.`ie.j.g` @type ^`okio.d` @kind object;
  #L2bcaf2.  call temp:= `B`(v4, v5) @signature `Lokio/d;.B:(I)Lokio/d;` @kind interface;
  #L2bcaf8.  v4:= v3.`ie.j.g` @type ^`okio.d` @kind object;
  #L2bcafc.  call temp:= `B`(v4, v6) @signature `Lokio/d;.B:(I)Lokio/d;` @kind interface;
  #L2bcb02.  v4:= v3.`ie.j.g` @type ^`okio.d` @kind object;
  #L2bcb06.  call `flush`(v4) @signature `Lokio/d;.flush:()V` @kind interface;
  #L2bcb0c.  @monitorexit v3
  #L2bcb0e.  return @kind void;
  #L2bcb10.  v4:= new `java.io.IOException`;
  #L2bcb14.  v5:= "closed" @kind object;
  #L2bcb18.  call `<init>`(v4, v5) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2bcb1e.  throw v4;
  #L2bcb20.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2bcb22.  @monitorexit v3
  #L2bcb24.  throw v4;
  catch `java.lang.Throwable` @[L2bcace..L2bcb0c] goto L2bcb20;
  catch `java.lang.Throwable` @[L2bcb10..L2bcb20] goto L2bcb20;
}
procedure `void` `J`(`ie.j` v8 @kind this, `int` v9 , `int` v10 , `java.util.List` v11 @kind object) @signature `Lie/j;.J:(IILjava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2bcb4c.  @monitorenter v8
  #L2bcb4e.  v0:= v8.`ie.j.k` @type ^`boolean` @kind boolean;
  #L2bcb52.  if v0 != 0 then goto L2bcbca;
  #L2bcb56.  v0:= v8.`ie.j.l` @type ^`ie.d$b` @kind object;
  #L2bcb5a.  call `g`(v0, v11) @signature `Lie/d$b;.g:(Ljava/util/List;)V` @kind virtual;
  #L2bcb60.  v11:= v8.`ie.j.i` @type ^`okio.c` @kind object;
  #L2bcb64.  call temp:= `u0`(v11) @signature `Lokio/c;.u0:()J` @kind virtual;
  #L2bcb6a.  v0:= temp @kind wide;
  #L2bcb6c.  v11:= v8.`ie.j.j` @type ^`int`;
  #L2bcb70.  v2:= 4I;
  #L2bcb72.  v11:= v11 - v2 @kind int;
  #L2bcb74.  v3:= (`long`) v11 @kind i2l;
  #L2bcb76.  call temp:= `min`(v3, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2bcb7c.  v3:= temp @kind wide;
  #L2bcb7e.  v11:= (`int`) v3 @kind l2i;
  #L2bcb80.  v3:= 5I;
  #L2bcb82.  v4:= (`long`) v11 @kind i2l;
  #L2bcb84.  v6:= lcmp(v0, v4);
  #L2bcb88.  if v6 != 0 then goto L2bcb90;
  #L2bcb8c.  v7:= 4I;
  #L2bcb8e.  goto L2bcb92;
  #L2bcb90.  v7:= 0I;
  #L2bcb92.  v11:= v11 + v2 @kind int;
  #L2bcb94.  call `s`(v8, v9, v11, v3, v7) @signature `Lie/j;.s:(IIBB)V` @kind virtual;
  #L2bcb9a.  v11:= v8.`ie.j.g` @type ^`okio.d` @kind object;
  #L2bcb9e.  v2:= 2147483647I;
  #L2bcba4.  v10:= v10 ^& v2 @kind int;
  #L2bcba6.  call temp:= `B`(v11, v10) @signature `Lokio/d;.B:(I)Lokio/d;` @kind interface;
  #L2bcbac.  v10:= v8.`ie.j.g` @type ^`okio.d` @kind object;
  #L2bcbb0.  v11:= v8.`ie.j.i` @type ^`okio.c` @kind object;
  #L2bcbb4.  call `e0`(v10, v11, v4) @signature `Lokio/u;.e0:(Lokio/c;J)V` @kind interface;
  #L2bcbba.  if v6 <= 0 then goto L2bcbc6;
  #L2bcbbe.  v0:= v0 - v4 @kind long;
  #L2bcbc0.  call `Z`(v8, v9, v0) @signature `Lie/j;.Z:(IJ)V` @kind direct;
  #L2bcbc6.  @monitorexit v8
  #L2bcbc8.  return @kind void;
  #L2bcbca.  v9:= new `java.io.IOException`;
  #L2bcbce.  v10:= "closed" @kind object;
  #L2bcbd2.  call `<init>`(v9, v10) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2bcbd8.  throw v9;
  #L2bcbda.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2bcbdc.  @monitorexit v8
  #L2bcbde.  throw v9;
  catch `java.lang.Throwable` @[L2bcb4e..L2bcbc6] goto L2bcbda;
  catch `java.lang.Throwable` @[L2bcbca..L2bcbda] goto L2bcbda;
}
procedure `void` `Q`(`ie.j` v3 @kind this, `int` v4 , `ie.b` v5 @kind object) @signature `Lie/j;.Q:(ILie/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2bcc04.  @monitorenter v3
  #L2bcc06.  v0:= v3.`ie.j.k` @type ^`boolean` @kind boolean;
  #L2bcc0a.  if v0 != 0 then goto L2bcc4c;
  #L2bcc0e.  v0:= v5.`ie.b.httpCode` @type ^`int`;
  #L2bcc12.  v1:= -1I;
  #L2bcc14.  if v0 == v1 then goto L2bcc40;
  #L2bcc18.  v0:= 4I;
  #L2bcc1a.  v1:= 3I;
  #L2bcc1c.  v2:= 0I;
  #L2bcc1e.  call `s`(v3, v4, v0, v1, v2) @signature `Lie/j;.s:(IIBB)V` @kind virtual;
  #L2bcc24.  v4:= v3.`ie.j.g` @type ^`okio.d` @kind object;
  #L2bcc28.  v5:= v5.`ie.b.httpCode` @type ^`int`;
  #L2bcc2c.  call temp:= `B`(v4, v5) @signature `Lokio/d;.B:(I)Lokio/d;` @kind interface;
  #L2bcc32.  v4:= v3.`ie.j.g` @type ^`okio.d` @kind object;
  #L2bcc36.  call `flush`(v4) @signature `Lokio/d;.flush:()V` @kind interface;
  #L2bcc3c.  @monitorexit v3
  #L2bcc3e.  return @kind void;
  #L2bcc40.  v4:= new `java.lang.IllegalArgumentException`;
  #L2bcc44.  call `<init>`(v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L2bcc4a.  throw v4;
  #L2bcc4c.  v4:= new `java.io.IOException`;
  #L2bcc50.  v5:= "closed" @kind object;
  #L2bcc54.  call `<init>`(v4, v5) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2bcc5a.  throw v4;
  #L2bcc5c.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2bcc5e.  @monitorexit v3
  #L2bcc60.  throw v4;
  catch `java.lang.Throwable` @[L2bcc06..L2bcc3c] goto L2bcc5c;
  catch `java.lang.Throwable` @[L2bcc40..L2bcc5c] goto L2bcc5c;
}
procedure `void` `V`(`ie.j` v4 @kind this, `ie.m` v5 @kind object) @signature `Lie/j;.V:(Lie/m;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2bcc88.  @monitorenter v4
  #L2bcc8a.  v0:= v4.`ie.j.k` @type ^`boolean` @kind boolean;
  #L2bcc8e.  if v0 != 0 then goto L2bcd02;
  #L2bcc92.  call temp:= `j`(v5) @signature `Lie/m;.j:()I` @kind virtual;
  #L2bcc98.  v0:= temp;
  #L2bcc9a.  v0:= v0 * 6;
  #L2bcc9e.  v1:= 0I;
  #L2bcca0.  v2:= 4I;
  #L2bcca2.  call `s`(v4, v1, v0, v2, v1) @signature `Lie/j;.s:(IIBB)V` @kind virtual;
  #L2bcca8.  v0:= 10I;
  #L2bccac.  if v1 >= v0 then goto L2bccf4;
  #L2bccb0.  call temp:= `g`(v5, v1) @signature `Lie/m;.g:(I)Z` @kind virtual;
  #L2bccb6.  v0:= temp;
  #L2bccb8.  if v0 != 0 then goto L2bccbe;
  #L2bccbc.  goto L2bccee;
  #L2bccbe.  if v1 != v2 then goto L2bccc6;
  #L2bccc2.  v0:= 3I;
  #L2bccc4.  goto L2bccd2;
  #L2bccc6.  v0:= 7I;
  #L2bccc8.  if v1 != v0 then goto L2bccd0;
  #L2bcccc.  v0:= 4I;
  #L2bccce.  goto L2bccd2;
  #L2bccd0.  v0:= v1;
  #L2bccd2.  v3:= v4.`ie.j.g` @type ^`okio.d` @kind object;
  #L2bccd6.  call temp:= `u`(v3, v0) @signature `Lokio/d;.u:(I)Lokio/d;` @kind interface;
  #L2bccdc.  v0:= v4.`ie.j.g` @type ^`okio.d` @kind object;
  #L2bcce0.  call temp:= `b`(v5, v1) @signature `Lie/m;.b:(I)I` @kind virtual;
  #L2bcce6.  v3:= temp;
  #L2bcce8.  call temp:= `B`(v0, v3) @signature `Lokio/d;.B:(I)Lokio/d;` @kind interface;
  #L2bccee.  v1:= v1 + 1;
  #L2bccf2.  goto L2bcca8;
  #L2bccf4.  v5:= v4.`ie.j.g` @type ^`okio.d` @kind object;
  #L2bccf8.  call `flush`(v5) @signature `Lokio/d;.flush:()V` @kind interface;
  #L2bccfe.  @monitorexit v4
  #L2bcd00.  return @kind void;
  #L2bcd02.  v5:= new `java.io.IOException`;
  #L2bcd06.  v0:= "closed" @kind object;
  #L2bcd0a.  call `<init>`(v5, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2bcd10.  throw v5;
  #L2bcd12.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2bcd14.  @monitorexit v4
  #L2bcd16.  throw v5;
  catch `java.lang.Throwable` @[L2bcc8a..L2bccfe] goto L2bcd12;
  catch `java.lang.Throwable` @[L2bcd02..L2bcd12] goto L2bcd12;
}
procedure `void` `Y`(`ie.j` v4 @kind this, `int` v5 , `long` v6 ) @signature `Lie/j;.Y:(IJ)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2bcd3c.  @monitorenter v4
  #L2bcd3e.  v0:= v4.`ie.j.k` @type ^`boolean` @kind boolean;
  #L2bcd42.  if v0 != 0 then goto L2bcda8;
  #L2bcd46.  v0:= 0L;
  #L2bcd4a.  v2:= 0I;
  #L2bcd4c.  v3:= lcmp(v6, v0);
  #L2bcd50.  if v3 == 0 then goto L2bcd88;
  #L2bcd54.  v0:= 2147483647L;
  #L2bcd5a.  v3:= lcmp(v6, v0);
  #L2bcd5e.  if v3 > 0 then goto L2bcd88;
  #L2bcd62.  v0:= 4I;
  #L2bcd64.  v1:= 8I;
  #L2bcd68.  call `s`(v4, v5, v0, v1, v2) @signature `Lie/j;.s:(IIBB)V` @kind virtual;
  #L2bcd6e.  v5:= v4.`ie.j.g` @type ^`okio.d` @kind object;
  #L2bcd72.  v7:= (`int`) v6 @kind l2i;
  #L2bcd74.  call temp:= `B`(v5, v7) @signature `Lokio/d;.B:(I)Lokio/d;` @kind interface;
  #L2bcd7a.  v5:= v4.`ie.j.g` @type ^`okio.d` @kind object;
  #L2bcd7e.  call `flush`(v5) @signature `Lokio/d;.flush:()V` @kind interface;
  #L2bcd84.  @monitorexit v4
  #L2bcd86.  return @kind void;
  #L2bcd88.  v5:= "windowSizeIncrement == 0 || windowSizeIncrement > 0x7fffffffL: %s" @kind object;
  #L2bcd8c.  v0:= 1I;
  #L2bcd8e.  v0:= new `java.lang.Object`[v0];
  #L2bcd92.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L2bcd98.  v6:= temp @kind object;
  #L2bcd9a.  v0[v2]:= v6 @kind object;
  #L2bcd9e.  call temp:= `c`(v5, v0) @signature `Lie/e;.c:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalArgumentException;` @kind static;
  #L2bcda4.  v5:= temp @kind object;
  #L2bcda6.  throw v5;
  #L2bcda8.  v5:= new `java.io.IOException`;
  #L2bcdac.  v6:= "closed" @kind object;
  #L2bcdb0.  call `<init>`(v5, v6) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2bcdb6.  throw v5;
  #L2bcdb8.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2bcdba.  @monitorexit v4
  #L2bcdbc.  throw v5;
  catch `java.lang.Throwable` @[L2bcd3e..L2bcd84] goto L2bcdb8;
  catch `java.lang.Throwable` @[L2bcd88..L2bcdb8] goto L2bcdb8;
}
procedure `void` `close`(`ie.j` v1 @kind this) @signature `Lie/j;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bc6e0.  @monitorenter v1
  #L2bc6e2.  v0:= 1I;
  #L2bc6e4.  v1.`ie.j.k` @type ^`boolean` := v0 @kind boolean;
  #L2bc6e8.  v0:= v1.`ie.j.g` @type ^`okio.d` @kind object;
  #L2bc6ec.  call `close`(v0) @signature `Lokio/u;.close:()V` @kind interface;
  #L2bc6f2.  @monitorexit v1
  #L2bc6f4.  return @kind void;
  #L2bc6f6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2bc6f8.  @monitorexit v1
  #L2bc6fa.  throw v0;
  catch `java.lang.Throwable` @[L2bc6e4..L2bc6f2] goto L2bc6f6;
}
procedure `void` `e`(`ie.j` v2 @kind this, `ie.m` v3 @kind object) @signature `Lie/j;.e:(Lie/m;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2bc650.  @monitorenter v2
  #L2bc652.  v0:= v2.`ie.j.k` @type ^`boolean` @kind boolean;
  #L2bc656.  if v0 != 0 then goto L2bc6a4;
  #L2bc65a.  v0:= v2.`ie.j.j` @type ^`int`;
  #L2bc65e.  call temp:= `f`(v3, v0) @signature `Lie/m;.f:(I)I` @kind virtual;
  #L2bc664.  v0:= temp;
  #L2bc666.  v2.`ie.j.j` @type ^`int` := v0;
  #L2bc66a.  call temp:= `c`(v3) @signature `Lie/m;.c:()I` @kind virtual;
  #L2bc670.  v0:= temp;
  #L2bc672.  v1:= -1I;
  #L2bc674.  if v0 == v1 then goto L2bc68a;
  #L2bc678.  v0:= v2.`ie.j.l` @type ^`ie.d$b` @kind object;
  #L2bc67c.  call temp:= `c`(v3) @signature `Lie/m;.c:()I` @kind virtual;
  #L2bc682.  v3:= temp;
  #L2bc684.  call `e`(v0, v3) @signature `Lie/d$b;.e:(I)V` @kind virtual;
  #L2bc68a.  v3:= 4I;
  #L2bc68c.  v0:= 1I;
  #L2bc68e.  v1:= 0I;
  #L2bc690.  call `s`(v2, v1, v1, v3, v0) @signature `Lie/j;.s:(IIBB)V` @kind virtual;
  #L2bc696.  v3:= v2.`ie.j.g` @type ^`okio.d` @kind object;
  #L2bc69a.  call `flush`(v3) @signature `Lokio/d;.flush:()V` @kind interface;
  #L2bc6a0.  @monitorexit v2
  #L2bc6a2.  return @kind void;
  #L2bc6a4.  v3:= new `java.io.IOException`;
  #L2bc6a8.  v0:= "closed" @kind object;
  #L2bc6ac.  call `<init>`(v3, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2bc6b2.  throw v3;
  #L2bc6b4.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2bc6b6.  @monitorexit v2
  #L2bc6b8.  throw v3;
  catch `java.lang.Throwable` @[L2bc652..L2bc6a0] goto L2bc6b4;
  catch `java.lang.Throwable` @[L2bc6a4..L2bc6b4] goto L2bc6b4;
}
procedure `void` `flush`(`ie.j` v2 @kind this) @signature `Lie/j;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2bc858.  @monitorenter v2
  #L2bc85a.  v0:= v2.`ie.j.k` @type ^`boolean` @kind boolean;
  #L2bc85e.  if v0 != 0 then goto L2bc870;
  #L2bc862.  v0:= v2.`ie.j.g` @type ^`okio.d` @kind object;
  #L2bc866.  call `flush`(v0) @signature `Lokio/d;.flush:()V` @kind interface;
  #L2bc86c.  @monitorexit v2
  #L2bc86e.  return @kind void;
  #L2bc870.  v0:= new `java.io.IOException`;
  #L2bc874.  v1:= "closed" @kind object;
  #L2bc878.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2bc87e.  throw v0;
  #L2bc880.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2bc882.  @monitorexit v2
  #L2bc884.  throw v0;
  catch `java.lang.Throwable` @[L2bc85a..L2bc86c] goto L2bc880;
  catch `java.lang.Throwable` @[L2bc870..L2bc880] goto L2bc880;
}
procedure `void` `i`(`ie.j` v5 @kind this) @signature `Lie/j;.i:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2bc718.  @monitorenter v5
  #L2bc71a.  v0:= v5.`ie.j.k` @type ^`boolean` @kind boolean;
  #L2bc71e.  if v0 != 0 then goto L2bc790;
  #L2bc722.  v0:= v5.`ie.j.h` @type ^`boolean` @kind boolean;
  #L2bc726.  if v0 != 0 then goto L2bc72e;
  #L2bc72a.  @monitorexit v5
  #L2bc72c.  return @kind void;
  #L2bc72e.  v0:= `@@ie.j.m` @type ^`java.util.logging.Logger` @kind object;
  #L2bc732.  v1:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L2bc736.  call temp:= `isLoggable`(v0, v1) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L2bc73c.  v1:= temp;
  #L2bc73e.  if v1 == 0 then goto L2bc76c;
  #L2bc742.  v1:= ">> CONNECTION %s" @kind object;
  #L2bc746.  v2:= 1I;
  #L2bc748.  v2:= new `java.lang.Object`[v2];
  #L2bc74c.  v3:= 0I;
  #L2bc74e.  v4:= `@@ie.e.a` @type ^`okio.f` @kind object;
  #L2bc752.  call temp:= `hex`(v4) @signature `Lokio/f;.hex:()Ljava/lang/String;` @kind virtual;
  #L2bc758.  v4:= temp @kind object;
  #L2bc75a.  v2[v3]:= v4 @kind object;
  #L2bc75e.  call temp:= `q`(v1, v2) @signature `Lee/e;.q:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2bc764.  v1:= temp @kind object;
  #L2bc766.  call `fine`(v0, v1) @signature `Ljava/util/logging/Logger;.fine:(Ljava/lang/String;)V` @kind virtual;
  #L2bc76c.  v0:= v5.`ie.j.g` @type ^`okio.d` @kind object;
  #L2bc770.  v1:= `@@ie.e.a` @type ^`okio.f` @kind object;
  #L2bc774.  call temp:= `toByteArray`(v1) @signature `Lokio/f;.toByteArray:()[B` @kind virtual;
  #L2bc77a.  v1:= temp @kind object;
  #L2bc77c.  call temp:= `v0`(v0, v1) @signature `Lokio/d;.v0:([B)Lokio/d;` @kind interface;
  #L2bc782.  v0:= v5.`ie.j.g` @type ^`okio.d` @kind object;
  #L2bc786.  call `flush`(v0) @signature `Lokio/d;.flush:()V` @kind interface;
  #L2bc78c.  @monitorexit v5
  #L2bc78e.  return @kind void;
  #L2bc790.  v0:= new `java.io.IOException`;
  #L2bc794.  v1:= "closed" @kind object;
  #L2bc798.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2bc79e.  throw v0;
  #L2bc7a0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2bc7a2.  @monitorexit v5
  #L2bc7a4.  throw v0;
  catch `java.lang.Throwable` @[L2bc71a..L2bc726] goto L2bc7a0;
  catch `java.lang.Throwable` @[L2bc72e..L2bc78c] goto L2bc7a0;
  catch `java.lang.Throwable` @[L2bc790..L2bc7a0] goto L2bc7a0;
}
procedure `void` `k`(`ie.j` v1 @kind this, `boolean` v2 , `int` v3 , `okio.c` v4 @kind object, `int` v5 ) @signature `Lie/j;.k:(ZILokio/c;I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bc7d4.  @monitorenter v1
  #L2bc7d6.  v0:= v1.`ie.j.k` @type ^`boolean` @kind boolean;
  #L2bc7da.  if v0 != 0 then goto L2bc7f2;
  #L2bc7de.  v0:= 0I;
  #L2bc7e0.  if v2 == 0 then goto L2bc7e8;
  #L2bc7e4.  v2:= 1I;
  #L2bc7e6.  v0:= (`byte`) v2 @kind i2b;
  #L2bc7e8.  call `r`(v1, v3, v0, v4, v5) @signature `Lie/j;.r:(IBLokio/c;I)V` @kind virtual;
  #L2bc7ee.  @monitorexit v1
  #L2bc7f0.  return @kind void;
  #L2bc7f2.  v2:= new `java.io.IOException`;
  #L2bc7f6.  v3:= "closed" @kind object;
  #L2bc7fa.  call `<init>`(v2, v3) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2bc800.  throw v2;
  #L2bc802.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2bc804.  @monitorexit v1
  #L2bc806.  throw v2;
  catch `java.lang.Throwable` @[L2bc7d6..L2bc7ee] goto L2bc802;
  catch `java.lang.Throwable` @[L2bc7f2..L2bc802] goto L2bc802;
}
procedure `void` `r`(`ie.j` v2 @kind this, `int` v3 , `byte` v4 , `okio.c` v5 @kind object, `int` v6 ) @signature `Lie/j;.r:(IBLokio/c;I)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2bc82c.  v0:= 0I;
  #L2bc82e.  call `s`(v2, v3, v6, v0, v4) @signature `Lie/j;.s:(IIBB)V` @kind virtual;
  #L2bc834.  if v6 <= 0 then goto L2bc844;
  #L2bc838.  v3:= v2.`ie.j.g` @type ^`okio.d` @kind object;
  #L2bc83c.  v0:= (`long`) v6 @kind i2l;
  #L2bc83e.  call `e0`(v3, v5, v0) @signature `Lokio/u;.e0:(Lokio/c;J)V` @kind interface;
  #L2bc844.  return @kind void;
}
procedure `void` `s`(`ie.j` v3 @kind this, `int` v4 , `int` v5 , `byte` v6 , `byte` v7 ) @signature `Lie/j;.s:(IIBB)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2bc8ac.  v0:= `@@ie.j.m` @type ^`java.util.logging.Logger` @kind object;
  #L2bc8b0.  v1:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L2bc8b4.  call temp:= `isLoggable`(v0, v1) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L2bc8ba.  v1:= temp;
  #L2bc8bc.  v2:= 0I;
  #L2bc8be.  if v1 == 0 then goto L2bc8d0;
  #L2bc8c2.  call temp:= `b`(v2, v4, v5, v6, v7) @signature `Lie/e;.b:(ZIIBB)Ljava/lang/String;` @kind static;
  #L2bc8c8.  v1:= temp @kind object;
  #L2bc8ca.  call `fine`(v0, v1) @signature `Ljava/util/logging/Logger;.fine:(Ljava/lang/String;)V` @kind virtual;
  #L2bc8d0.  v0:= v3.`ie.j.j` @type ^`int`;
  #L2bc8d4.  v1:= 1I;
  #L2bc8d6.  if v5 > v0 then goto L2bc93c;
  #L2bc8da.  v0:= -2147483648I;
  #L2bc8de.  v0:= v0 ^& v4 @kind int;
  #L2bc8e0.  if v0 != 0 then goto L2bc91e;
  #L2bc8e4.  v0:= v3.`ie.j.g` @type ^`okio.d` @kind object;
  #L2bc8e8.  call `a0`(v0, v5) @signature `Lie/j;.a0:(Lokio/d;I)V` @kind static;
  #L2bc8ee.  v5:= v3.`ie.j.g` @type ^`okio.d` @kind object;
  #L2bc8f2.  v6:= v6 ^& 255;
  #L2bc8f6.  call temp:= `I`(v5, v6) @signature `Lokio/d;.I:(I)Lokio/d;` @kind interface;
  #L2bc8fc.  v5:= v3.`ie.j.g` @type ^`okio.d` @kind object;
  #L2bc900.  v6:= v7 ^& 255;
  #L2bc904.  call temp:= `I`(v5, v6) @signature `Lokio/d;.I:(I)Lokio/d;` @kind interface;
  #L2bc90a.  v5:= v3.`ie.j.g` @type ^`okio.d` @kind object;
  #L2bc90e.  v6:= 2147483647I;
  #L2bc914.  v4:= v4 ^& v6 @kind int;
  #L2bc916.  call temp:= `B`(v5, v4) @signature `Lokio/d;.B:(I)Lokio/d;` @kind interface;
  #L2bc91c.  return @kind void;
  #L2bc91e.  v5:= new `java.lang.Object`[v1];
  #L2bc922.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2bc928.  v4:= temp @kind object;
  #L2bc92a.  v5[v2]:= v4 @kind object;
  #L2bc92e.  v4:= "reserved bit set: %s" @kind object;
  #L2bc932.  call temp:= `c`(v4, v5) @signature `Lie/e;.c:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalArgumentException;` @kind static;
  #L2bc938.  v4:= temp @kind object;
  #L2bc93a.  throw v4;
  #L2bc93c.  v4:= 2I;
  #L2bc93e.  v4:= new `java.lang.Object`[v4];
  #L2bc942.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2bc948.  v6:= temp @kind object;
  #L2bc94a.  v4[v2]:= v6 @kind object;
  #L2bc94e.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2bc954.  v5:= temp @kind object;
  #L2bc956.  v4[v1]:= v5 @kind object;
  #L2bc95a.  v5:= "FRAME_SIZE_ERROR length > %d: %d" @kind object;
  #L2bc95e.  call temp:= `c`(v5, v4) @signature `Lie/e;.c:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalArgumentException;` @kind static;
  #L2bc964.  v4:= temp @kind object;
  #L2bc966.  throw v4;
}
procedure `void` `v`(`ie.j` v3 @kind this, `int` v4 , `ie.b` v5 @kind object, `byte`[] v6 @kind object) @signature `Lie/j;.v:(ILie/b;[B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2bc978.  @monitorenter v3
  #L2bc97a.  v0:= v3.`ie.j.k` @type ^`boolean` @kind boolean;
  #L2bc97e.  if v0 != 0 then goto L2bc9e4;
  #L2bc982.  v0:= v5.`ie.b.httpCode` @type ^`int`;
  #L2bc986.  v1:= -1I;
  #L2bc988.  v2:= 0I;
  #L2bc98a.  if v0 == v1 then goto L2bc9d2;
  #L2bc98e.  v0:= length @variable v6;
  #L2bc990.  v0:= v0 + 8;
  #L2bc994.  v1:= 7I;
  #L2bc996.  call `s`(v3, v2, v0, v1, v2) @signature `Lie/j;.s:(IIBB)V` @kind virtual;
  #L2bc99c.  v0:= v3.`ie.j.g` @type ^`okio.d` @kind object;
  #L2bc9a0.  call temp:= `B`(v0, v4) @signature `Lokio/d;.B:(I)Lokio/d;` @kind interface;
  #L2bc9a6.  v4:= v3.`ie.j.g` @type ^`okio.d` @kind object;
  #L2bc9aa.  v5:= v5.`ie.b.httpCode` @type ^`int`;
  #L2bc9ae.  call temp:= `B`(v4, v5) @signature `Lokio/d;.B:(I)Lokio/d;` @kind interface;
  #L2bc9b4.  v4:= length @variable v6;
  #L2bc9b6.  if v4 <= 0 then goto L2bc9c4;
  #L2bc9ba.  v4:= v3.`ie.j.g` @type ^`okio.d` @kind object;
  #L2bc9be.  call temp:= `v0`(v4, v6) @signature `Lokio/d;.v0:([B)Lokio/d;` @kind interface;
  #L2bc9c4.  v4:= v3.`ie.j.g` @type ^`okio.d` @kind object;
  #L2bc9c8.  call `flush`(v4) @signature `Lokio/d;.flush:()V` @kind interface;
  #L2bc9ce.  @monitorexit v3
  #L2bc9d0.  return @kind void;
  #L2bc9d2.  v4:= "errorCode.httpCode == -1" @kind object;
  #L2bc9d6.  v5:= new `java.lang.Object`[v2];
  #L2bc9da.  call temp:= `c`(v4, v5) @signature `Lie/e;.c:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalArgumentException;` @kind static;
  #L2bc9e0.  v4:= temp @kind object;
  #L2bc9e2.  throw v4;
  #L2bc9e4.  v4:= new `java.io.IOException`;
  #L2bc9e8.  v5:= "closed" @kind object;
  #L2bc9ec.  call `<init>`(v4, v5) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2bc9f2.  throw v4;
  #L2bc9f4.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2bc9f6.  @monitorexit v3
  #L2bc9f8.  throw v4;
  catch `java.lang.Throwable` @[L2bc97a..L2bc9ce] goto L2bc9f4;
  catch `java.lang.Throwable` @[L2bc9d2..L2bc9f4] goto L2bc9f4;
}
procedure `void` `w`(`ie.j` v6 @kind this, `boolean` v7 , `int` v8 , `java.util.List` v9 @kind object) @signature `Lie/j;.w:(ZILjava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2bca20.  @monitorenter v6
  #L2bca22.  v0:= v6.`ie.j.k` @type ^`boolean` @kind boolean;
  #L2bca26.  if v0 != 0 then goto L2bca90;
  #L2bca2a.  v0:= v6.`ie.j.l` @type ^`ie.d$b` @kind object;
  #L2bca2e.  call `g`(v0, v9) @signature `Lie/d$b;.g:(Ljava/util/List;)V` @kind virtual;
  #L2bca34.  v9:= v6.`ie.j.i` @type ^`okio.c` @kind object;
  #L2bca38.  call temp:= `u0`(v9) @signature `Lokio/c;.u0:()J` @kind virtual;
  #L2bca3e.  v0:= temp @kind wide;
  #L2bca40.  v9:= v6.`ie.j.j` @type ^`int`;
  #L2bca44.  v2:= (`long`) v9 @kind i2l;
  #L2bca46.  call temp:= `min`(v2, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2bca4c.  v2:= temp @kind wide;
  #L2bca4e.  v9:= (`int`) v2 @kind l2i;
  #L2bca50.  v2:= (`long`) v9 @kind i2l;
  #L2bca52.  v4:= lcmp(v0, v2);
  #L2bca56.  if v4 != 0 then goto L2bca5e;
  #L2bca5a.  v5:= 4I;
  #L2bca5c.  goto L2bca60;
  #L2bca5e.  v5:= 0I;
  #L2bca60.  if v7 == 0 then goto L2bca6a;
  #L2bca64.  v7:= v5 ^| 1;
  #L2bca68.  v5:= (`byte`) v7 @kind i2b;
  #L2bca6a.  v7:= 1I;
  #L2bca6c.  call `s`(v6, v8, v9, v7, v5) @signature `Lie/j;.s:(IIBB)V` @kind virtual;
  #L2bca72.  v7:= v6.`ie.j.g` @type ^`okio.d` @kind object;
  #L2bca76.  v9:= v6.`ie.j.i` @type ^`okio.c` @kind object;
  #L2bca7a.  call `e0`(v7, v9, v2) @signature `Lokio/u;.e0:(Lokio/c;J)V` @kind interface;
  #L2bca80.  if v4 <= 0 then goto L2bca8c;
  #L2bca84.  v0:= v0 - v2 @kind long;
  #L2bca86.  call `Z`(v6, v8, v0) @signature `Lie/j;.Z:(IJ)V` @kind direct;
  #L2bca8c.  @monitorexit v6
  #L2bca8e.  return @kind void;
  #L2bca90.  v7:= new `java.io.IOException`;
  #L2bca94.  v8:= "closed" @kind object;
  #L2bca98.  call `<init>`(v7, v8) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2bca9e.  throw v7;
  #L2bcaa0.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2bcaa2.  @monitorexit v6
  #L2bcaa4.  throw v7;
  catch `java.lang.Throwable` @[L2bca22..L2bca8c] goto L2bcaa0;
  catch `java.lang.Throwable` @[L2bca90..L2bcaa0] goto L2bcaa0;
}
procedure `int` `y`(`ie.j` v1 @kind this) @signature `Lie/j;.y:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bc5c8.  v0:= v1.`ie.j.j` @type ^`int`;
  #L2bc5cc.  return v0;
}
