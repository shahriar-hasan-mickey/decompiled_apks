record `ie.h$a` @kind class @AccessFlag FINAL extends `okio.v` @kind interface {
  `okio.e` `ie.h$a.g` @AccessFlag PRIVATE_FINAL;
  `int` `ie.h$a.h` @AccessFlag ;
  `byte` `ie.h$a.i` @AccessFlag ;
  `int` `ie.h$a.j` @AccessFlag ;
  `int` `ie.h$a.k` @AccessFlag ;
  `short` `ie.h$a.l` @AccessFlag ;
}
procedure `void` `<init>`(`ie.h$a` v0 @kind this, `okio.e` v1 @kind object) @signature `Lie/h$a;.<init>:(Lokio/e;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2bacf0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2bacf6.  v0.`ie.h$a.g` @type ^`okio.e` := v1 @kind object;
  #L2bacfa.  return @kind void;
}
procedure `void` `e`(`ie.h$a` v7 @kind this) @signature `Lie/h$a;.e:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2bad20.  v0:= v7.`ie.h$a.j` @type ^`int`;
  #L2bad24.  v1:= v7.`ie.h$a.g` @type ^`okio.e` @kind object;
  #L2bad28.  call temp:= `y`(v1) @signature `Lie/h;.y:(Lokio/e;)I` @kind static;
  #L2bad2e.  v1:= temp;
  #L2bad30.  v7.`ie.h$a.k` @type ^`int` := v1;
  #L2bad34.  v7.`ie.h$a.h` @type ^`int` := v1;
  #L2bad38.  v1:= v7.`ie.h$a.g` @type ^`okio.e` @kind object;
  #L2bad3c.  call temp:= `readByte`(v1) @signature `Lokio/e;.readByte:()B` @kind interface;
  #L2bad42.  v1:= temp;
  #L2bad44.  v1:= v1 ^& 255;
  #L2bad48.  v1:= (`byte`) v1 @kind i2b;
  #L2bad4a.  v2:= v7.`ie.h$a.g` @type ^`okio.e` @kind object;
  #L2bad4e.  call temp:= `readByte`(v2) @signature `Lokio/e;.readByte:()B` @kind interface;
  #L2bad54.  v2:= temp;
  #L2bad56.  v2:= v2 ^& 255;
  #L2bad5a.  v2:= (`byte`) v2 @kind i2b;
  #L2bad5c.  v7.`ie.h$a.i` @type ^`byte` := v2 @kind byte;
  #L2bad60.  v2:= `@@ie.h.k` @type ^`java.util.logging.Logger` @kind object;
  #L2bad64.  v3:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L2bad68.  call temp:= `isLoggable`(v2, v3) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L2bad6e.  v3:= temp;
  #L2bad70.  v4:= 1I;
  #L2bad72.  if v3 == 0 then goto L2bad90;
  #L2bad76.  v3:= v7.`ie.h$a.j` @type ^`int`;
  #L2bad7a.  v5:= v7.`ie.h$a.h` @type ^`int`;
  #L2bad7e.  v6:= v7.`ie.h$a.i` @type ^`byte` @kind byte;
  #L2bad82.  call temp:= `b`(v4, v3, v5, v1, v6) @signature `Lie/e;.b:(ZIIBB)Ljava/lang/String;` @kind static;
  #L2bad88.  v3:= temp @kind object;
  #L2bad8a.  call `fine`(v2, v3) @signature `Ljava/util/logging/Logger;.fine:(Ljava/lang/String;)V` @kind virtual;
  #L2bad90.  v2:= v7.`ie.h$a.g` @type ^`okio.e` @kind object;
  #L2bad94.  call temp:= `readInt`(v2) @signature `Lokio/e;.readInt:()I` @kind interface;
  #L2bad9a.  v2:= temp;
  #L2bad9c.  v3:= 2147483647I;
  #L2bada2.  v2:= v2 ^& v3 @kind int;
  #L2bada4.  v7.`ie.h$a.j` @type ^`int` := v2;
  #L2bada8.  v3:= 9I;
  #L2badac.  v5:= 0I;
  #L2badae.  if v1 != v3 then goto L2badca;
  #L2badb2.  if v2 != v0 then goto L2badb8;
  #L2badb6.  return @kind void;
  #L2badb8.  v0:= new `java.lang.Object`[v5];
  #L2badbc.  v1:= "TYPE_CONTINUATION streamId changed" @kind object;
  #L2badc0.  call temp:= `d`(v1, v0) @signature `Lie/e;.d:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L2badc6.  v0:= temp @kind object;
  #L2badc8.  throw v0;
  #L2badca.  v0:= new `java.lang.Object`[v4];
  #L2badce.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Byte;.valueOf:(B)Ljava/lang/Byte;` @kind static;
  #L2badd4.  v1:= temp @kind object;
  #L2badd6.  v0[v5]:= v1 @kind object;
  #L2badda.  v1:= "%s != TYPE_CONTINUATION" @kind object;
  #L2badde.  call temp:= `d`(v1, v0) @signature `Lie/e;.d:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L2bade4.  v0:= temp @kind object;
  #L2bade6.  throw v0;
}
procedure `void` `close`(`ie.h$a` v0 @kind this) @signature `Lie/h$a;.close:()V` @AccessFlag PUBLIC {
    temp;

  #L2bad0c.  return @kind void;
}
procedure `okio.w` `timeout`(`ie.h$a` v1 @kind this) @signature `Lie/h$a;.timeout:()Lokio/w;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bacd0.  v0:= v1.`ie.h$a.g` @type ^`okio.e` @kind object;
  #L2bacd4.  call temp:= `timeout`(v0) @signature `Lokio/v;.timeout:()Lokio/w;` @kind interface;
  #L2bacda.  v0:= temp @kind object;
  #L2bacdc.  return v0 @kind object;
}
procedure `long` `z0`(`ie.h$a` v6 @kind this, `okio.c` v7 @kind object, `long` v8 ) @signature `Lie/h$a;.z0:(Lokio/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2bac58.  v0:= v6.`ie.h$a.k` @type ^`int`;
  #L2bac5c.  v1:= -1L;
  #L2bac60.  if v0 != 0 then goto L2bac90;
  #L2bac64.  v0:= v6.`ie.h$a.g` @type ^`okio.e` @kind object;
  #L2bac68.  v3:= v6.`ie.h$a.l` @type ^`short` @kind short;
  #L2bac6c.  v3:= (`long`) v3 @kind i2l;
  #L2bac6e.  call `h0`(v0, v3) @signature `Lokio/e;.h0:(J)V` @kind interface;
  #L2bac74.  v0:= 0I;
  #L2bac76.  v6.`ie.h$a.l` @type ^`short` := v0 @kind char;
  #L2bac7a.  v0:= v6.`ie.h$a.i` @type ^`byte` @kind byte;
  #L2bac7e.  v0:= v0 ^& 4;
  #L2bac82.  if v0 == 0 then goto L2bac88;
  #L2bac86.  return v1 @kind wide;
  #L2bac88.  call `e`(v6) @signature `Lie/h$a;.e:()V` @kind direct;
  #L2bac8e.  goto L2bac58;
  #L2bac90.  v3:= v6.`ie.h$a.g` @type ^`okio.e` @kind object;
  #L2bac94.  v4:= (`long`) v0 @kind i2l;
  #L2bac96.  call temp:= `min`(v8, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2bac9c.  v8:= temp @kind wide;
  #L2bac9e.  call temp:= `z0`(v3, v7, v8) @signature `Lokio/v;.z0:(Lokio/c;J)J` @kind interface;
  #L2baca4.  v7:= temp @kind wide;
  #L2baca6.  v9:= lcmp(v7, v1);
  #L2bacaa.  if v9 != 0 then goto L2bacb0;
  #L2bacae.  return v1 @kind wide;
  #L2bacb0.  v9:= v6.`ie.h$a.k` @type ^`int`;
  #L2bacb4.  v0:= (`long`) v9 @kind i2l;
  #L2bacb6.  v0:= v0 - v7 @kind long;
  #L2bacb8.  v9:= (`int`) v0 @kind l2i;
  #L2bacba.  v6.`ie.h$a.k` @type ^`int` := v9;
  #L2bacbe.  return v7 @kind wide;
}
