record `ie.i` @kind class @AccessFlag PUBLIC_FINAL {
  `long` `ie.i.a` @AccessFlag ;
  `long` `ie.i.b` @AccessFlag ;
  `int` `ie.i.c` @AccessFlag FINAL;
  `ie.f` `ie.i.d` @AccessFlag FINAL;
  `java.util.Deque` `ie.i.e` @AccessFlag PRIVATE_FINAL;
  `boolean` `ie.i.f` @AccessFlag PRIVATE;
  `ie.i$b` `ie.i.g` @AccessFlag PRIVATE_FINAL;
  `ie.i$a` `ie.i.h` @AccessFlag FINAL;
  `ie.i$c` `ie.i.i` @AccessFlag FINAL;
  `ie.i$c` `ie.i.j` @AccessFlag FINAL;
  `ie.b` `ie.i.k` @AccessFlag ;
  `java.io.IOException` `ie.i.l` @AccessFlag ;
}
procedure `void` `<clinit>`() @signature `Lie/i;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;

  #L2bc218.  return @kind void;
}
procedure `void` `<init>`(`ie.i` v3 @kind this, `int` v4 , `ie.f` v5 @kind object, `boolean` v6 , `boolean` v7 , `okhttp3.w` v8 @kind object) @signature `Lie/i;.<init>:(ILie/f;ZZLokhttp3/w;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L2bc22c.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2bc232.  v0:= 0L;
  #L2bc236.  v3.`ie.i.a` @type ^`long` := v0 @kind wide;
  #L2bc23a.  v0:= new `java.util.ArrayDeque`;
  #L2bc23e.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L2bc244.  v3.`ie.i.e` @type ^`java.util.Deque` := v0 @kind object;
  #L2bc248.  v1:= new `ie.i$c`;
  #L2bc24c.  call `<init>`(v1, v3) @signature `Lie/i$c;.<init>:(Lie/i;)V` @kind direct;
  #L2bc252.  v3.`ie.i.i` @type ^`ie.i$c` := v1 @kind object;
  #L2bc256.  v1:= new `ie.i$c`;
  #L2bc25a.  call `<init>`(v1, v3) @signature `Lie/i$c;.<init>:(Lie/i;)V` @kind direct;
  #L2bc260.  v3.`ie.i.j` @type ^`ie.i$c` := v1 @kind object;
  #L2bc264.  v1:= "connection == null" @kind object;
  #L2bc268.  call temp:= `requireNonNull`(v5, v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L2bc26e.  v3.`ie.i.c` @type ^`int` := v4;
  #L2bc272.  v3.`ie.i.d` @type ^`ie.f` := v5 @kind object;
  #L2bc276.  v4:= v5.`ie.f.z` @type ^`ie.m` @kind object;
  #L2bc27a.  call temp:= `d`(v4) @signature `Lie/m;.d:()I` @kind virtual;
  #L2bc280.  v4:= temp;
  #L2bc282.  v1:= (`long`) v4 @kind i2l;
  #L2bc284.  v3.`ie.i.b` @type ^`long` := v1 @kind wide;
  #L2bc288.  v4:= new `ie.i$b`;
  #L2bc28c.  v5:= v5.`ie.f.y` @type ^`ie.m` @kind object;
  #L2bc290.  call temp:= `d`(v5) @signature `Lie/m;.d:()I` @kind virtual;
  #L2bc296.  v5:= temp;
  #L2bc298.  v1:= (`long`) v5 @kind i2l;
  #L2bc29a.  call `<init>`(v4, v3, v1) @signature `Lie/i$b;.<init>:(Lie/i;J)V` @kind direct;
  #L2bc2a0.  v3.`ie.i.g` @type ^`ie.i$b` := v4 @kind object;
  #L2bc2a4.  v5:= new `ie.i$a`;
  #L2bc2a8.  call `<init>`(v5, v3) @signature `Lie/i$a;.<init>:(Lie/i;)V` @kind direct;
  #L2bc2ae.  v3.`ie.i.h` @type ^`ie.i$a` := v5 @kind object;
  #L2bc2b2.  v4.`ie.i$b.l` @type ^`boolean` := v7 @kind boolean;
  #L2bc2b6.  v5.`ie.i$a.j` @type ^`boolean` := v6 @kind boolean;
  #L2bc2ba.  if v8 == 0 then goto L2bc2c4;
  #L2bc2be.  call temp:= `add`(v0, v8) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2bc2c4.  call temp:= `j`(v3) @signature `Lie/i;.j:()Z` @kind virtual;
  #L2bc2ca.  v4:= temp;
  #L2bc2cc.  if v4 == 0 then goto L2bc2e6;
  #L2bc2d0.  if v8 != 0 then goto L2bc2d6;
  #L2bc2d4.  goto L2bc2e6;
  #L2bc2d6.  v4:= new `java.lang.IllegalStateException`;
  #L2bc2da.  v5:= "locally-initiated streams shouldn't have headers yet" @kind object;
  #L2bc2de.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2bc2e4.  throw v4;
  #L2bc2e6.  call temp:= `j`(v3) @signature `Lie/i;.j:()Z` @kind virtual;
  #L2bc2ec.  v4:= temp;
  #L2bc2ee.  if v4 != 0 then goto L2bc308;
  #L2bc2f2.  if v8 == 0 then goto L2bc2f8;
  #L2bc2f6.  goto L2bc308;
  #L2bc2f8.  v4:= new `java.lang.IllegalStateException`;
  #L2bc2fc.  v5:= "remotely-initiated streams should have headers" @kind object;
  #L2bc300.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2bc306.  throw v4;
  #L2bc308.  return @kind void;
}
procedure `boolean` `e`(`ie.i` v2 @kind this, `ie.b` v3 @kind object, `java.io.IOException` v4 @kind object) @signature `Lie/i;.e:(Lie/b;Ljava/io/IOException;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L2bbf78.  @monitorenter v2
  #L2bbf7a.  v0:= v2.`ie.i.k` @type ^`ie.b` @kind object;
  #L2bbf7e.  v1:= 0I;
  #L2bbf80.  if v0 == 0 then goto L2bbf88;
  #L2bbf84.  @monitorexit v2
  #L2bbf86.  return v1;
  #L2bbf88.  v0:= v2.`ie.i.g` @type ^`ie.i$b` @kind object;
  #L2bbf8c.  v0:= v0.`ie.i$b.l` @type ^`boolean` @kind boolean;
  #L2bbf90.  if v0 == 0 then goto L2bbfa4;
  #L2bbf94.  v0:= v2.`ie.i.h` @type ^`ie.i$a` @kind object;
  #L2bbf98.  v0:= v0.`ie.i$a.j` @type ^`boolean` @kind boolean;
  #L2bbf9c.  if v0 == 0 then goto L2bbfa4;
  #L2bbfa0.  @monitorexit v2
  #L2bbfa2.  return v1;
  #L2bbfa4.  v2.`ie.i.k` @type ^`ie.b` := v3 @kind object;
  #L2bbfa8.  v2.`ie.i.l` @type ^`java.io.IOException` := v4 @kind object;
  #L2bbfac.  call `notifyAll`(v2) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L2bbfb2.  @monitorexit v2
  #L2bbfb4.  v3:= v2.`ie.i.d` @type ^`ie.f` @kind object;
  #L2bbfb8.  v4:= v2.`ie.i.c` @type ^`int`;
  #L2bbfbc.  call temp:= `B0`(v3, v4) @signature `Lie/f;.B0:(I)Lie/i;` @kind virtual;
  #L2bbfc2.  v3:= 1I;
  #L2bbfc4.  return v3;
  #L2bbfc6.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2bbfc8.  @monitorexit v2
  #L2bbfca.  throw v3;
  catch `java.lang.Throwable` @[L2bbf7a..L2bbfb4] goto L2bbfc6;
  catch `java.lang.Throwable` @[L2bbfc8..L2bbfca] goto L2bbfc6;
}
procedure `void` `a`(`ie.i` v3 @kind this, `long` v4 ) @signature `Lie/i;.a:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L2bc31c.  v0:= v3.`ie.i.b` @type ^`long` @kind wide;
  #L2bc320.  v0:= v0 + v4 @kind long;
  #L2bc322.  v3.`ie.i.b` @type ^`long` := v0 @kind wide;
  #L2bc326.  v0:= 0L;
  #L2bc32a.  v2:= lcmp(v4, v0);
  #L2bc32e.  if v2 <= 0 then goto L2bc338;
  #L2bc332.  call `notifyAll`(v3) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L2bc338.  return @kind void;
}
procedure `void` `b`(`ie.i` v2 @kind this) @signature `Lie/i;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2bc34c.  @monitorenter v2
  #L2bc34e.  v0:= v2.`ie.i.g` @type ^`ie.i$b` @kind object;
  #L2bc352.  v1:= v0.`ie.i$b.l` @type ^`boolean` @kind boolean;
  #L2bc356.  if v1 != 0 then goto L2bc37a;
  #L2bc35a.  v0:= v0.`ie.i$b.k` @type ^`boolean` @kind boolean;
  #L2bc35e.  if v0 == 0 then goto L2bc37a;
  #L2bc362.  v0:= v2.`ie.i.h` @type ^`ie.i$a` @kind object;
  #L2bc366.  v1:= v0.`ie.i$a.j` @type ^`boolean` @kind boolean;
  #L2bc36a.  if v1 != 0 then goto L2bc376;
  #L2bc36e.  v0:= v0.`ie.i$a.i` @type ^`boolean` @kind boolean;
  #L2bc372.  if v0 == 0 then goto L2bc37a;
  #L2bc376.  v0:= 1I;
  #L2bc378.  goto L2bc37c;
  #L2bc37a.  v0:= 0I;
  #L2bc37c.  call temp:= `k`(v2) @signature `Lie/i;.k:()Z` @kind virtual;
  #L2bc382.  v1:= temp;
  #L2bc384.  @monitorexit v2
  #L2bc386.  if v0 == 0 then goto L2bc398;
  #L2bc38a.  v0:= `@@ie.b.CANCEL` @type ^`ie.b` @kind object;
  #L2bc38e.  v1:= 0I;
  #L2bc390.  call `d`(v2, v0, v1) @signature `Lie/i;.d:(Lie/b;Ljava/io/IOException;)V` @kind virtual;
  #L2bc396.  goto L2bc3aa;
  #L2bc398.  if v1 != 0 then goto L2bc3aa;
  #L2bc39c.  v0:= v2.`ie.i.d` @type ^`ie.f` @kind object;
  #L2bc3a0.  v1:= v2.`ie.i.c` @type ^`int`;
  #L2bc3a4.  call temp:= `B0`(v0, v1) @signature `Lie/f;.B0:(I)Lie/i;` @kind virtual;
  #L2bc3aa.  return @kind void;
  #L2bc3ac.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2bc3ae.  @monitorexit v2
  #L2bc3b0.  throw v0;
  catch `java.lang.Throwable` @[L2bc34e..L2bc386] goto L2bc3ac;
  catch `java.lang.Throwable` @[L2bc3ae..L2bc3b0] goto L2bc3ac;
}
procedure `void` `c`(`ie.i` v2 @kind this) @signature `Lie/i;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2bc3d8.  v0:= v2.`ie.i.h` @type ^`ie.i$a` @kind object;
  #L2bc3dc.  v1:= v0.`ie.i$a.i` @type ^`boolean` @kind boolean;
  #L2bc3e0.  if v1 != 0 then goto L2bc420;
  #L2bc3e4.  v0:= v0.`ie.i$a.j` @type ^`boolean` @kind boolean;
  #L2bc3e8.  if v0 != 0 then goto L2bc410;
  #L2bc3ec.  v0:= v2.`ie.i.k` @type ^`ie.b` @kind object;
  #L2bc3f0.  if v0 == 0 then goto L2bc40e;
  #L2bc3f4.  v0:= v2.`ie.i.l` @type ^`java.io.IOException` @kind object;
  #L2bc3f8.  if v0 == 0 then goto L2bc3fe;
  #L2bc3fc.  goto L2bc40c;
  #L2bc3fe.  v0:= new `ie.n`;
  #L2bc402.  v1:= v2.`ie.i.k` @type ^`ie.b` @kind object;
  #L2bc406.  call `<init>`(v0, v1) @signature `Lie/n;.<init>:(Lie/b;)V` @kind direct;
  #L2bc40c.  throw v0;
  #L2bc40e.  return @kind void;
  #L2bc410.  v0:= new `java.io.IOException`;
  #L2bc414.  v1:= "stream finished" @kind object;
  #L2bc418.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2bc41e.  throw v0;
  #L2bc420.  v0:= new `java.io.IOException`;
  #L2bc424.  v1:= "stream closed" @kind object;
  #L2bc428.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2bc42e.  throw v0;
}
procedure `void` `d`(`ie.i` v1 @kind this, `ie.b` v2 @kind object, `java.io.IOException` v3 @kind object) @signature `Lie/i;.d:(Lie/b;Ljava/io/IOException;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bc440.  call temp:= `e`(v1, v2, v3) @signature `Lie/i;.e:(Lie/b;Ljava/io/IOException;)Z` @kind direct;
  #L2bc446.  v3:= temp;
  #L2bc448.  if v3 != 0 then goto L2bc44e;
  #L2bc44c.  return @kind void;
  #L2bc44e.  v3:= v1.`ie.i.d` @type ^`ie.f` @kind object;
  #L2bc452.  v0:= v1.`ie.i.c` @type ^`int`;
  #L2bc456.  call `W0`(v3, v0, v2) @signature `Lie/f;.W0:(ILie/b;)V` @kind virtual;
  #L2bc45c.  return @kind void;
}
procedure `void` `f`(`ie.i` v2 @kind this, `ie.b` v3 @kind object) @signature `Lie/i;.f:(Lie/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2bc470.  v0:= 0I;
  #L2bc472.  call temp:= `e`(v2, v3, v0) @signature `Lie/i;.e:(Lie/b;Ljava/io/IOException;)Z` @kind direct;
  #L2bc478.  v0:= temp;
  #L2bc47a.  if v0 != 0 then goto L2bc480;
  #L2bc47e.  return @kind void;
  #L2bc480.  v0:= v2.`ie.i.d` @type ^`ie.f` @kind object;
  #L2bc484.  v1:= v2.`ie.i.c` @type ^`int`;
  #L2bc488.  call `X0`(v0, v1, v3) @signature `Lie/f;.X0:(ILie/b;)V` @kind virtual;
  #L2bc48e.  return @kind void;
}
procedure `int` `g`(`ie.i` v1 @kind this) @signature `Lie/i;.g:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bc09c.  v0:= v1.`ie.i.c` @type ^`int`;
  #L2bc0a0.  return v0;
}
procedure `okio.u` `h`(`ie.i` v2 @kind this) @signature `Lie/i;.h:()Lokio/u;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2bc174.  @monitorenter v2
  #L2bc176.  v0:= v2.`ie.i.f` @type ^`boolean` @kind boolean;
  #L2bc17a.  if v0 != 0 then goto L2bc19c;
  #L2bc17e.  call temp:= `j`(v2) @signature `Lie/i;.j:()Z` @kind virtual;
  #L2bc184.  v0:= temp;
  #L2bc186.  if v0 == 0 then goto L2bc18c;
  #L2bc18a.  goto L2bc19c;
  #L2bc18c.  v0:= new `java.lang.IllegalStateException`;
  #L2bc190.  v1:= "reply before requesting the sink" @kind object;
  #L2bc194.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2bc19a.  throw v0;
  #L2bc19c.  @monitorexit v2
  #L2bc19e.  v0:= v2.`ie.i.h` @type ^`ie.i$a` @kind object;
  #L2bc1a2.  return v0 @kind object;
  #L2bc1a4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2bc1a6.  @monitorexit v2
  #L2bc1a8.  throw v0;
  catch `java.lang.Throwable` @[L2bc176..L2bc19e] goto L2bc1a4;
  catch `java.lang.Throwable` @[L2bc1a6..L2bc1a8] goto L2bc1a4;
}
procedure `okio.v` `i`(`ie.i` v1 @kind this) @signature `Lie/i;.i:()Lokio/v;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bc1d0.  v0:= v1.`ie.i.g` @type ^`ie.i$b` @kind object;
  #L2bc1d4.  return v0 @kind object;
}
procedure `boolean` `j`(`ie.i` v4 @kind this) @signature `Lie/i;.j:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2bbff0.  v0:= v4.`ie.i.c` @type ^`int`;
  #L2bbff4.  v1:= 1I;
  #L2bbff6.  v0:= v0 ^& v1 @kind int;
  #L2bbff8.  v2:= 0I;
  #L2bbffa.  if v0 != v1 then goto L2bc002;
  #L2bbffe.  v0:= 1I;
  #L2bc000.  goto L2bc004;
  #L2bc002.  v0:= 0I;
  #L2bc004.  v3:= v4.`ie.i.d` @type ^`ie.f` @kind object;
  #L2bc008.  v3:= v3.`ie.f.g` @type ^`boolean` @kind boolean;
  #L2bc00c.  if v3 != v0 then goto L2bc012;
  #L2bc010.  goto L2bc014;
  #L2bc012.  v1:= 0I;
  #L2bc014.  return v1;
}
procedure `boolean` `k`(`ie.i` v3 @kind this) @signature `Lie/i;.k:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2bc028.  @monitorenter v3
  #L2bc02a.  v0:= v3.`ie.i.k` @type ^`ie.b` @kind object;
  #L2bc02e.  v1:= 0I;
  #L2bc030.  if v0 == 0 then goto L2bc038;
  #L2bc034.  @monitorexit v3
  #L2bc036.  return v1;
  #L2bc038.  v0:= v3.`ie.i.g` @type ^`ie.i$b` @kind object;
  #L2bc03c.  v2:= v0.`ie.i$b.l` @type ^`boolean` @kind boolean;
  #L2bc040.  if v2 != 0 then goto L2bc04c;
  #L2bc044.  v0:= v0.`ie.i$b.k` @type ^`boolean` @kind boolean;
  #L2bc048.  if v0 == 0 then goto L2bc06c;
  #L2bc04c.  v0:= v3.`ie.i.h` @type ^`ie.i$a` @kind object;
  #L2bc050.  v2:= v0.`ie.i$a.j` @type ^`boolean` @kind boolean;
  #L2bc054.  if v2 != 0 then goto L2bc060;
  #L2bc058.  v0:= v0.`ie.i$a.i` @type ^`boolean` @kind boolean;
  #L2bc05c.  if v0 == 0 then goto L2bc06c;
  #L2bc060.  v0:= v3.`ie.i.f` @type ^`boolean` @kind boolean;
  #L2bc064.  if v0 == 0 then goto L2bc06c;
  #L2bc068.  @monitorexit v3
  #L2bc06a.  return v1;
  #L2bc06c.  v0:= 1I;
  #L2bc06e.  @monitorexit v3
  #L2bc070.  return v0;
  #L2bc072.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2bc074.  @monitorexit v3
  #L2bc076.  throw v0;
  catch `java.lang.Throwable` @[L2bc02a..L2bc02e] goto L2bc072;
  catch `java.lang.Throwable` @[L2bc038..L2bc064] goto L2bc072;
}
procedure `okio.w` `l`(`ie.i` v1 @kind this) @signature `Lie/i;.l:()Lokio/w;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bc1e8.  v0:= v1.`ie.i.i` @type ^`ie.i$c` @kind object;
  #L2bc1ec.  return v0 @kind object;
}
procedure `void` `m`(`ie.i` v3 @kind this, `okio.e` v4 @kind object, `int` v5 ) @signature `Lie/i;.m:(Lokio/e;I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L2bc4a0.  v0:= v3.`ie.i.g` @type ^`ie.i$b` @kind object;
  #L2bc4a4.  v1:= (`long`) v5 @kind i2l;
  #L2bc4a6.  call `i`(v0, v4, v1) @signature `Lie/i$b;.i:(Lokio/e;J)V` @kind virtual;
  #L2bc4ac.  return @kind void;
}
procedure `void` `n`(`ie.i` v2 @kind this, `okhttp3.w` v3 @kind object, `boolean` v4 ) @signature `Lie/i;.n:(Lokhttp3/w;Z)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2bc4c0.  @monitorenter v2
  #L2bc4c2.  v0:= v2.`ie.i.f` @type ^`boolean` @kind boolean;
  #L2bc4c6.  v1:= 1I;
  #L2bc4c8.  if v0 == 0 then goto L2bc4de;
  #L2bc4cc.  if v4 != 0 then goto L2bc4d2;
  #L2bc4d0.  goto L2bc4de;
  #L2bc4d2.  v0:= v2.`ie.i.g` @type ^`ie.i$b` @kind object;
  #L2bc4d6.  call temp:= `e`(v0, v3) @signature `Lie/i$b;.e:(Lie/i$b;Lokhttp3/w;)Lokhttp3/w;` @kind static;
  #L2bc4dc.  goto L2bc4ec;
  #L2bc4de.  v2.`ie.i.f` @type ^`boolean` := v1 @kind boolean;
  #L2bc4e2.  v0:= v2.`ie.i.e` @type ^`java.util.Deque` @kind object;
  #L2bc4e6.  call temp:= `add`(v0, v3) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2bc4ec.  if v4 == 0 then goto L2bc4f8;
  #L2bc4f0.  v3:= v2.`ie.i.g` @type ^`ie.i$b` @kind object;
  #L2bc4f4.  v3.`ie.i$b.l` @type ^`boolean` := v1 @kind boolean;
  #L2bc4f8.  call temp:= `k`(v2) @signature `Lie/i;.k:()Z` @kind virtual;
  #L2bc4fe.  v3:= temp;
  #L2bc500.  call `notifyAll`(v2) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L2bc506.  @monitorexit v2
  #L2bc508.  if v3 != 0 then goto L2bc51a;
  #L2bc50c.  v3:= v2.`ie.i.d` @type ^`ie.f` @kind object;
  #L2bc510.  v4:= v2.`ie.i.c` @type ^`int`;
  #L2bc514.  call temp:= `B0`(v3, v4) @signature `Lie/f;.B0:(I)Lie/i;` @kind virtual;
  #L2bc51a.  return @kind void;
  #L2bc51c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2bc51e.  @monitorexit v2
  #L2bc520.  throw v3;
  catch `java.lang.Throwable` @[L2bc4c2..L2bc508] goto L2bc51c;
  catch `java.lang.Throwable` @[L2bc51e..L2bc520] goto L2bc51c;
}
procedure `void` `o`(`ie.i` v1 @kind this, `ie.b` v2 @kind object) @signature `Lie/i;.o:(Lie/b;)V` @AccessFlag  {
    temp;
    v0;

  #L2bc548.  @monitorenter v1
  #L2bc54a.  v0:= v1.`ie.i.k` @type ^`ie.b` @kind object;
  #L2bc54e.  if v0 != 0 then goto L2bc55c;
  #L2bc552.  v1.`ie.i.k` @type ^`ie.b` := v2 @kind object;
  #L2bc556.  call `notifyAll`(v1) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L2bc55c.  @monitorexit v1
  #L2bc55e.  return @kind void;
  #L2bc560.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2bc562.  @monitorexit v1
  #L2bc564.  throw v2;
  catch `java.lang.Throwable` @[L2bc54a..L2bc55c] goto L2bc560;
}
procedure `okhttp3.w` `p`(`ie.i` v2 @kind this) @signature `Lie/i;.p:()Lokhttp3/w;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2bc0b4.  @monitorenter v2
  #L2bc0b6.  v0:= v2.`ie.i.i` @type ^`ie.i$c` @kind object;
  #L2bc0ba.  call `k`(v0) @signature `Lokio/a;.k:()V` @kind virtual;
  #L2bc0c0.  v0:= v2.`ie.i.e` @type ^`java.util.Deque` @kind object;
  #L2bc0c4.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Deque;.isEmpty:()Z` @kind interface;
  #L2bc0ca.  v0:= temp;
  #L2bc0cc.  if v0 == 0 then goto L2bc0e0;
  #L2bc0d0.  v0:= v2.`ie.i.k` @type ^`ie.b` @kind object;
  #L2bc0d4.  if v0 != 0 then goto L2bc0e0;
  #L2bc0d8.  call `q`(v2) @signature `Lie/i;.q:()V` @kind virtual;
  #L2bc0de.  goto L2bc0c0;
  #L2bc0e0.  v0:= v2.`ie.i.i` @type ^`ie.i$c` @kind object;
  #L2bc0e4.  call `u`(v0) @signature `Lie/i$c;.u:()V` @kind virtual;
  #L2bc0ea.  v0:= v2.`ie.i.e` @type ^`java.util.Deque` @kind object;
  #L2bc0ee.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Deque;.isEmpty:()Z` @kind interface;
  #L2bc0f4.  v0:= temp;
  #L2bc0f6.  if v0 != 0 then goto L2bc10e;
  #L2bc0fa.  v0:= v2.`ie.i.e` @type ^`java.util.Deque` @kind object;
  #L2bc0fe.  call temp:= `removeFirst`(v0) @signature `Ljava/util/Deque;.removeFirst:()Ljava/lang/Object;` @kind interface;
  #L2bc104.  v0:= temp @kind object;
  #L2bc106.  v0:= (`okhttp3.w`) v0 @kind object;
  #L2bc10a.  @monitorexit v2
  #L2bc10c.  return v0 @kind object;
  #L2bc10e.  v0:= v2.`ie.i.l` @type ^`java.io.IOException` @kind object;
  #L2bc112.  if v0 == 0 then goto L2bc118;
  #L2bc116.  goto L2bc126;
  #L2bc118.  v0:= new `ie.n`;
  #L2bc11c.  v1:= v2.`ie.i.k` @type ^`ie.b` @kind object;
  #L2bc120.  call `<init>`(v0, v1) @signature `Lie/n;.<init>:(Lie/b;)V` @kind direct;
  #L2bc126.  throw v0;
  #L2bc128.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2bc12a.  v1:= v2.`ie.i.i` @type ^`ie.i$c` @kind object;
  #L2bc12e.  call `u`(v1) @signature `Lie/i$c;.u:()V` @kind virtual;
  #L2bc134.  throw v0;
  #L2bc136.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2bc138.  @monitorexit v2
  #L2bc13a.  throw v0;
  catch `java.lang.Throwable` @[L2bc0b6..L2bc0c0] goto L2bc136;
  catch `java.lang.Throwable` @[L2bc0c0..L2bc0de] goto L2bc128;
  catch `java.lang.Throwable` @[L2bc0e0..L2bc10a] goto L2bc136;
  catch `java.lang.Throwable` @[L2bc10e..L2bc136] goto L2bc136;
}
procedure `void` `q`(`ie.i` v1 @kind this) @signature `Lie/i;.q:()V` @AccessFlag  {
    temp;
    v0;

  #L2bc584.  call `wait`(v1) @signature `Ljava/lang/Object;.wait:()V` @kind virtual;
  #L2bc58a.  return @kind void;
  #L2bc58c.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L2bc592.  v0:= temp @kind object;
  #L2bc594.  call `interrupt`(v0) @signature `Ljava/lang/Thread;.interrupt:()V` @kind virtual;
  #L2bc59a.  v0:= new `java.io.InterruptedIOException`;
  #L2bc59e.  call `<init>`(v0) @signature `Ljava/io/InterruptedIOException;.<init>:()V` @kind direct;
  #L2bc5a4.  throw v0;
  catch `java.lang.InterruptedException` @[L2bc584..L2bc58a] goto L2bc58c;
}
procedure `okio.w` `r`(`ie.i` v1 @kind this) @signature `Lie/i;.r:()Lokio/w;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bc200.  v0:= v1.`ie.i.j` @type ^`ie.i$c` @kind object;
  #L2bc204.  return v0 @kind object;
}
