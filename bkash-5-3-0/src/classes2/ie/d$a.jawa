record `ie.d$a` @kind class @AccessFlag FINAL {
  `java.util.List` `ie.d$a.a` @AccessFlag PRIVATE_FINAL;
  `okio.e` `ie.d$a.b` @AccessFlag PRIVATE_FINAL;
  `int` `ie.d$a.c` @AccessFlag PRIVATE_FINAL;
  `int` `ie.d$a.d` @AccessFlag PRIVATE;
  `ie.c`[] `ie.d$a.e` @AccessFlag ;
  `int` `ie.d$a.f` @AccessFlag ;
  `int` `ie.d$a.g` @AccessFlag ;
  `int` `ie.d$a.h` @AccessFlag ;
}
procedure `void` `<init>`(`ie.d$a` v1 @kind this, `int` v2 , `int` v3 , `okio.v` v4 @kind object) @signature `Lie/d$a;.<init>:(IILokio/v;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2b7bc8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2b7bce.  v0:= new `java.util.ArrayList`;
  #L2b7bd2.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2b7bd8.  v1.`ie.d$a.a` @type ^`java.util.List` := v0 @kind object;
  #L2b7bdc.  v0:= 8I;
  #L2b7be0.  v0:= new `ie.c`[v0];
  #L2b7be4.  v1.`ie.d$a.e` @type ^`ie.c`[] := v0 @kind object;
  #L2b7be8.  v0:= length @variable v0;
  #L2b7bea.  v0:= v0 + -1;
  #L2b7bee.  v1.`ie.d$a.f` @type ^`int` := v0;
  #L2b7bf2.  v0:= 0I;
  #L2b7bf4.  v1.`ie.d$a.g` @type ^`int` := v0;
  #L2b7bf8.  v1.`ie.d$a.h` @type ^`int` := v0;
  #L2b7bfc.  v1.`ie.d$a.c` @type ^`int` := v2;
  #L2b7c00.  v1.`ie.d$a.d` @type ^`int` := v3;
  #L2b7c04.  call temp:= `b`(v4) @signature `Lokio/n;.b:(Lokio/v;)Lokio/e;` @kind static;
  #L2b7c0a.  v2:= temp @kind object;
  #L2b7c0c.  v1.`ie.d$a.b` @type ^`okio.e` := v2 @kind object;
  #L2b7c10.  return @kind void;
}
procedure `void` `<init>`(`ie.d$a` v0 @kind this, `int` v1 , `okio.v` v2 @kind object) @signature `Lie/d$a;.<init>:(ILokio/v;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2b7c24.  call `<init>`(v0, v1, v1, v2) @signature `Lie/d$a;.<init>:(IILokio/v;)V` @kind direct;
  #L2b7c2a.  return @kind void;
}
procedure `void` `a`(`ie.d$a` v2 @kind this) @signature `Lie/d$a;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L2b7c3c.  v0:= v2.`ie.d$a.d` @type ^`int`;
  #L2b7c40.  v1:= v2.`ie.d$a.h` @type ^`int`;
  #L2b7c44.  if v0 >= v1 then goto L2b7c5c;
  #L2b7c48.  if v0 != 0 then goto L2b7c54;
  #L2b7c4c.  call `b`(v2) @signature `Lie/d$a;.b:()V` @kind direct;
  #L2b7c52.  goto L2b7c5c;
  #L2b7c54.  v1:= v1 - v0 @kind int;
  #L2b7c56.  call temp:= `d`(v2, v1) @signature `Lie/d$a;.d:(I)I` @kind direct;
  #L2b7c5c.  return @kind void;
}
procedure `void` `b`(`ie.d$a` v2 @kind this) @signature `Lie/d$a;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L2b7c70.  v0:= v2.`ie.d$a.e` @type ^`ie.c`[] @kind object;
  #L2b7c74.  v1:= 0I;
  #L2b7c76.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L2b7c7c.  v0:= v2.`ie.d$a.e` @type ^`ie.c`[] @kind object;
  #L2b7c80.  v0:= length @variable v0;
  #L2b7c82.  v0:= v0 + -1;
  #L2b7c86.  v2.`ie.d$a.f` @type ^`int` := v0;
  #L2b7c8a.  v0:= 0I;
  #L2b7c8c.  v2.`ie.d$a.g` @type ^`int` := v0;
  #L2b7c90.  v2.`ie.d$a.h` @type ^`int` := v0;
  #L2b7c94.  return @kind void;
}
procedure `int` `c`(`ie.d$a` v1 @kind this, `int` v2 ) @signature `Lie/d$a;.c:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L2b7998.  v0:= v1.`ie.d$a.f` @type ^`int`;
  #L2b799c.  v0:= v0 + 1;
  #L2b79a0.  v0:= v0 + v2 @kind int;
  #L2b79a2.  return v0;
}
procedure `int` `d`(`ie.d$a` v4 @kind this, `int` v5 ) @signature `Lie/d$a;.d:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2b79b4.  v0:= 0I;
  #L2b79b6.  if v5 <= 0 then goto L2b7a28;
  #L2b79ba.  v1:= v4.`ie.d$a.e` @type ^`ie.c`[] @kind object;
  #L2b79be.  v1:= length @variable v1;
  #L2b79c0.  v1:= v1 + -1;
  #L2b79c4.  v2:= v4.`ie.d$a.f` @type ^`int`;
  #L2b79c8.  if v1 < v2 then goto L2b7a06;
  #L2b79cc.  if v5 <= 0 then goto L2b7a06;
  #L2b79d0.  v2:= v4.`ie.d$a.e` @type ^`ie.c`[] @kind object;
  #L2b79d4.  v3:= v2[v1] @kind object;
  #L2b79d8.  v3:= v3.`ie.c.c` @type ^`int`;
  #L2b79dc.  v5:= v5 - v3 @kind int;
  #L2b79de.  v3:= v4.`ie.d$a.h` @type ^`int`;
  #L2b79e2.  v2:= v2[v1] @kind object;
  #L2b79e6.  v2:= v2.`ie.c.c` @type ^`int`;
  #L2b79ea.  v3:= v3 - v2 @kind int;
  #L2b79ec.  v4.`ie.d$a.h` @type ^`int` := v3;
  #L2b79f0.  v2:= v4.`ie.d$a.g` @type ^`int`;
  #L2b79f4.  v2:= v2 + -1;
  #L2b79f8.  v4.`ie.d$a.g` @type ^`int` := v2;
  #L2b79fc.  v0:= v0 + 1;
  #L2b7a00.  v1:= v1 + -1;
  #L2b7a04.  goto L2b79c4;
  #L2b7a06.  v5:= v4.`ie.d$a.e` @type ^`ie.c`[] @kind object;
  #L2b7a0a.  v1:= v2 + 1;
  #L2b7a0e.  v2:= v2 + 1;
  #L2b7a12.  v2:= v2 + v0 @kind int;
  #L2b7a14.  v3:= v4.`ie.d$a.g` @type ^`int`;
  #L2b7a18.  call `arraycopy`(v5, v1, v5, v2, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2b7a1e.  v5:= v4.`ie.d$a.f` @type ^`int`;
  #L2b7a22.  v5:= v5 + v0 @kind int;
  #L2b7a24.  v4.`ie.d$a.f` @type ^`int` := v5;
  #L2b7a28.  return v0;
}
procedure `okio.f` `f`(`ie.d$a` v3 @kind this, `int` v4 ) @signature `Lie/d$a;.f:(I)Lokio/f;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2b7acc.  call temp:= `h`(v3, v4) @signature `Lie/d$a;.h:(I)Z` @kind direct;
  #L2b7ad2.  v0:= temp;
  #L2b7ad4.  if v0 == 0 then goto L2b7ae6;
  #L2b7ad8.  v0:= `@@ie.d.a` @type ^`ie.c`[] @kind object;
  #L2b7adc.  v4:= v0[v4] @kind object;
  #L2b7ae0.  v4:= v4.`ie.c.a` @type ^`okio.f` @kind object;
  #L2b7ae4.  return v4 @kind object;
  #L2b7ae6.  v0:= `@@ie.d.a` @type ^`ie.c`[] @kind object;
  #L2b7aea.  v0:= length @variable v0;
  #L2b7aec.  v0:= v4 - v0 @kind int;
  #L2b7af0.  call temp:= `c`(v3, v0) @signature `Lie/d$a;.c:(I)I` @kind direct;
  #L2b7af6.  v0:= temp;
  #L2b7af8.  if v0 < 0 then goto L2b7b10;
  #L2b7afc.  v1:= v3.`ie.d$a.e` @type ^`ie.c`[] @kind object;
  #L2b7b00.  v2:= length @variable v1;
  #L2b7b02.  if v0 >= v2 then goto L2b7b10;
  #L2b7b06.  v4:= v1[v0] @kind object;
  #L2b7b0a.  v4:= v4.`ie.c.a` @type ^`okio.f` @kind object;
  #L2b7b0e.  return v4 @kind object;
  #L2b7b10.  v0:= new `java.io.IOException`;
  #L2b7b14.  v1:= new `java.lang.StringBuilder`;
  #L2b7b18.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2b7b1e.  v2:= "Header index too large " @kind object;
  #L2b7b22.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b7b28.  v4:= v4 + 1;
  #L2b7b2c.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b7b32.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2b7b38.  v4:= temp @kind object;
  #L2b7b3a.  call `<init>`(v0, v4) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2b7b40.  throw v0;
}
procedure `void` `g`(`ie.d$a` v5 @kind this, `int` v6 , `ie.c` v7 @kind object) @signature `Lie/d$a;.g:(ILie/c;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2b7ca8.  v0:= v5.`ie.d$a.a` @type ^`java.util.List` @kind object;
  #L2b7cac.  call temp:= `add`(v0, v7) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2b7cb2.  v0:= v7.`ie.c.c` @type ^`int`;
  #L2b7cb6.  v1:= -1I;
  #L2b7cb8.  if v6 == v1 then goto L2b7cd2;
  #L2b7cbc.  v2:= v5.`ie.d$a.e` @type ^`ie.c`[] @kind object;
  #L2b7cc0.  call temp:= `c`(v5, v6) @signature `Lie/d$a;.c:(I)I` @kind direct;
  #L2b7cc6.  v3:= temp;
  #L2b7cc8.  v2:= v2[v3] @kind object;
  #L2b7ccc.  v2:= v2.`ie.c.c` @type ^`int`;
  #L2b7cd0.  v0:= v0 - v2 @kind int;
  #L2b7cd2.  v2:= v5.`ie.d$a.d` @type ^`int`;
  #L2b7cd6.  if v0 <= v2 then goto L2b7ce2;
  #L2b7cda.  call `b`(v5) @signature `Lie/d$a;.b:()V` @kind direct;
  #L2b7ce0.  return @kind void;
  #L2b7ce2.  v3:= v5.`ie.d$a.h` @type ^`int`;
  #L2b7ce6.  v3:= v3 + v0 @kind int;
  #L2b7ce8.  v3:= v3 - v2 @kind int;
  #L2b7cea.  call temp:= `d`(v5, v3) @signature `Lie/d$a;.d:(I)I` @kind direct;
  #L2b7cf0.  v2:= temp;
  #L2b7cf2.  if v6 != v1 then goto L2b7d52;
  #L2b7cf6.  v6:= v5.`ie.d$a.g` @type ^`int`;
  #L2b7cfa.  v6:= v6 + 1;
  #L2b7cfe.  v1:= v5.`ie.d$a.e` @type ^`ie.c`[] @kind object;
  #L2b7d02.  v2:= length @variable v1;
  #L2b7d04.  if v6 <= v2 then goto L2b7d30;
  #L2b7d08.  v6:= length @variable v1;
  #L2b7d0a.  v6:= v6 * 2;
  #L2b7d0e.  v6:= new `ie.c`[v6];
  #L2b7d12.  v2:= 0I;
  #L2b7d14.  v3:= length @variable v1;
  #L2b7d16.  v4:= length @variable v1;
  #L2b7d18.  call `arraycopy`(v1, v2, v6, v3, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2b7d1e.  v1:= v5.`ie.d$a.e` @type ^`ie.c`[] @kind object;
  #L2b7d22.  v1:= length @variable v1;
  #L2b7d24.  v1:= v1 + -1;
  #L2b7d28.  v5.`ie.d$a.f` @type ^`int` := v1;
  #L2b7d2c.  v5.`ie.d$a.e` @type ^`ie.c`[] := v6 @kind object;
  #L2b7d30.  v6:= v5.`ie.d$a.f` @type ^`int`;
  #L2b7d34.  v1:= v6 + -1;
  #L2b7d38.  v5.`ie.d$a.f` @type ^`int` := v1;
  #L2b7d3c.  v1:= v5.`ie.d$a.e` @type ^`ie.c`[] @kind object;
  #L2b7d40.  v1[v6]:= v7 @kind object;
  #L2b7d44.  v6:= v5.`ie.d$a.g` @type ^`int`;
  #L2b7d48.  v6:= v6 + 1;
  #L2b7d4c.  v5.`ie.d$a.g` @type ^`int` := v6;
  #L2b7d50.  goto L2b7d66;
  #L2b7d52.  call temp:= `c`(v5, v6) @signature `Lie/d$a;.c:(I)I` @kind direct;
  #L2b7d58.  v1:= temp;
  #L2b7d5a.  v1:= v1 + v2 @kind int;
  #L2b7d5c.  v6:= v6 + v1 @kind int;
  #L2b7d5e.  v1:= v5.`ie.d$a.e` @type ^`ie.c`[] @kind object;
  #L2b7d62.  v1[v6]:= v7 @kind object;
  #L2b7d66.  v6:= v5.`ie.d$a.h` @type ^`int`;
  #L2b7d6a.  v6:= v6 + v0 @kind int;
  #L2b7d6c.  v5.`ie.d$a.h` @type ^`int` := v6;
  #L2b7d70.  return @kind void;
}
procedure `boolean` `h`(`ie.d$a` v2 @kind this, `int` v3 ) @signature `Lie/d$a;.h:(I)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L2b7970.  v0:= 1I;
  #L2b7972.  if v3 < 0 then goto L2b7984;
  #L2b7976.  v1:= `@@ie.d.a` @type ^`ie.c`[] @kind object;
  #L2b797a.  v1:= length @variable v1;
  #L2b797c.  v1:= v1 - v0 @kind int;
  #L2b797e.  if v3 > v1 then goto L2b7984;
  #L2b7982.  goto L2b7986;
  #L2b7984.  v0:= 0I;
  #L2b7986.  return v0;
}
procedure `int` `i`(`ie.d$a` v1 @kind this) @signature `Lie/d$a;.i:()I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L2b7a3c.  v0:= v1.`ie.d$a.b` @type ^`okio.e` @kind object;
  #L2b7a40.  call temp:= `readByte`(v0) @signature `Lokio/e;.readByte:()B` @kind interface;
  #L2b7a46.  v0:= temp;
  #L2b7a48.  v0:= v0 ^& 255;
  #L2b7a4c.  return v0;
}
procedure `void` `l`(`ie.d$a` v3 @kind this, `int` v4 ) @signature `Lie/d$a;.l:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2b7eb0.  call temp:= `h`(v3, v4) @signature `Lie/d$a;.h:(I)Z` @kind direct;
  #L2b7eb6.  v0:= temp;
  #L2b7eb8.  if v0 == 0 then goto L2b7ed0;
  #L2b7ebc.  v0:= `@@ie.d.a` @type ^`ie.c`[] @kind object;
  #L2b7ec0.  v4:= v0[v4] @kind object;
  #L2b7ec4.  v0:= v3.`ie.d$a.a` @type ^`java.util.List` @kind object;
  #L2b7ec8.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2b7ece.  goto L2b7efe;
  #L2b7ed0.  v0:= `@@ie.d.a` @type ^`ie.c`[] @kind object;
  #L2b7ed4.  v0:= length @variable v0;
  #L2b7ed6.  v0:= v4 - v0 @kind int;
  #L2b7eda.  call temp:= `c`(v3, v0) @signature `Lie/d$a;.c:(I)I` @kind direct;
  #L2b7ee0.  v0:= temp;
  #L2b7ee2.  if v0 < 0 then goto L2b7f00;
  #L2b7ee6.  v1:= v3.`ie.d$a.e` @type ^`ie.c`[] @kind object;
  #L2b7eea.  v2:= length @variable v1;
  #L2b7eec.  if v0 >= v2 then goto L2b7f00;
  #L2b7ef0.  v4:= v3.`ie.d$a.a` @type ^`java.util.List` @kind object;
  #L2b7ef4.  v0:= v1[v0] @kind object;
  #L2b7ef8.  call temp:= `add`(v4, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2b7efe.  return @kind void;
  #L2b7f00.  v0:= new `java.io.IOException`;
  #L2b7f04.  v1:= new `java.lang.StringBuilder`;
  #L2b7f08.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2b7f0e.  v2:= "Header index too large " @kind object;
  #L2b7f12.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b7f18.  v4:= v4 + 1;
  #L2b7f1c.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b7f22.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2b7f28.  v4:= temp @kind object;
  #L2b7f2a.  call `<init>`(v0, v4) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2b7f30.  throw v0;
}
procedure `void` `n`(`ie.d$a` v2 @kind this, `int` v3 ) @signature `Lie/d$a;.n:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L2b7f44.  call temp:= `f`(v2, v3) @signature `Lie/d$a;.f:(I)Lokio/f;` @kind direct;
  #L2b7f4a.  v3:= temp @kind object;
  #L2b7f4c.  call temp:= `j`(v2) @signature `Lie/d$a;.j:()Lokio/f;` @kind virtual;
  #L2b7f52.  v0:= temp @kind object;
  #L2b7f54.  v1:= new `ie.c`;
  #L2b7f58.  call `<init>`(v1, v3, v0) @signature `Lie/c;.<init>:(Lokio/f;Lokio/f;)V` @kind direct;
  #L2b7f5e.  v3:= -1I;
  #L2b7f60.  call `g`(v2, v3, v1) @signature `Lie/d$a;.g:(ILie/c;)V` @kind direct;
  #L2b7f66.  return @kind void;
}
procedure `void` `o`(`ie.d$a` v3 @kind this) @signature `Lie/d$a;.o:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2b7f78.  call temp:= `j`(v3) @signature `Lie/d$a;.j:()Lokio/f;` @kind virtual;
  #L2b7f7e.  v0:= temp @kind object;
  #L2b7f80.  call temp:= `a`(v0) @signature `Lie/d;.a:(Lokio/f;)Lokio/f;` @kind static;
  #L2b7f86.  v0:= temp @kind object;
  #L2b7f88.  call temp:= `j`(v3) @signature `Lie/d$a;.j:()Lokio/f;` @kind virtual;
  #L2b7f8e.  v1:= temp @kind object;
  #L2b7f90.  v2:= new `ie.c`;
  #L2b7f94.  call `<init>`(v2, v0, v1) @signature `Lie/c;.<init>:(Lokio/f;Lokio/f;)V` @kind direct;
  #L2b7f9a.  v0:= -1I;
  #L2b7f9c.  call `g`(v3, v0, v2) @signature `Lie/d$a;.g:(ILie/c;)V` @kind direct;
  #L2b7fa2.  return @kind void;
}
procedure `void` `p`(`ie.d$a` v3 @kind this, `int` v4 ) @signature `Lie/d$a;.p:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2b7fb4.  call temp:= `f`(v3, v4) @signature `Lie/d$a;.f:(I)Lokio/f;` @kind direct;
  #L2b7fba.  v4:= temp @kind object;
  #L2b7fbc.  call temp:= `j`(v3) @signature `Lie/d$a;.j:()Lokio/f;` @kind virtual;
  #L2b7fc2.  v0:= temp @kind object;
  #L2b7fc4.  v1:= v3.`ie.d$a.a` @type ^`java.util.List` @kind object;
  #L2b7fc8.  v2:= new `ie.c`;
  #L2b7fcc.  call `<init>`(v2, v4, v0) @signature `Lie/c;.<init>:(Lokio/f;Lokio/f;)V` @kind direct;
  #L2b7fd2.  call temp:= `add`(v1, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2b7fd8.  return @kind void;
}
procedure `void` `q`(`ie.d$a` v4 @kind this) @signature `Lie/d$a;.q:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2b7fec.  call temp:= `j`(v4) @signature `Lie/d$a;.j:()Lokio/f;` @kind virtual;
  #L2b7ff2.  v0:= temp @kind object;
  #L2b7ff4.  call temp:= `a`(v0) @signature `Lie/d;.a:(Lokio/f;)Lokio/f;` @kind static;
  #L2b7ffa.  v0:= temp @kind object;
  #L2b7ffc.  call temp:= `j`(v4) @signature `Lie/d$a;.j:()Lokio/f;` @kind virtual;
  #L2b8002.  v1:= temp @kind object;
  #L2b8004.  v2:= v4.`ie.d$a.a` @type ^`java.util.List` @kind object;
  #L2b8008.  v3:= new `ie.c`;
  #L2b800c.  call `<init>`(v3, v0, v1) @signature `Lie/c;.<init>:(Lokio/f;Lokio/f;)V` @kind direct;
  #L2b8012.  call temp:= `add`(v2, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2b8018.  return @kind void;
}
procedure `java.util.List` `e`(`ie.d$a` v2 @kind this) @signature `Lie/d$a;.e:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2b7aa0.  v0:= new `java.util.ArrayList`;
  #L2b7aa4.  v1:= v2.`ie.d$a.a` @type ^`java.util.List` @kind object;
  #L2b7aa8.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L2b7aae.  v1:= v2.`ie.d$a.a` @type ^`java.util.List` @kind object;
  #L2b7ab2.  call `clear`(v1) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L2b7ab8.  return v0 @kind object;
}
procedure `okio.f` `j`(`ie.d$a` v5 @kind this) @signature `Lie/d$a;.j:()Lokio/f;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2b7b54.  call temp:= `i`(v5) @signature `Lie/d$a;.i:()I` @kind direct;
  #L2b7b5a.  v0:= temp;
  #L2b7b5c.  v1:= v0 ^& 128;
  #L2b7b60.  v2:= 128I;
  #L2b7b64.  if v1 != v2 then goto L2b7b6c;
  #L2b7b68.  v1:= 1I;
  #L2b7b6a.  goto L2b7b6e;
  #L2b7b6c.  v1:= 0I;
  #L2b7b6e.  v2:= 127I;
  #L2b7b72.  call temp:= `m`(v5, v0, v2) @signature `Lie/d$a;.m:(II)I` @kind virtual;
  #L2b7b78.  v0:= temp;
  #L2b7b7a.  if v1 == 0 then goto L2b7ba6;
  #L2b7b7e.  call temp:= `f`() @signature `Lie/k;.f:()Lie/k;` @kind static;
  #L2b7b84.  v1:= temp @kind object;
  #L2b7b86.  v2:= v5.`ie.d$a.b` @type ^`okio.e` @kind object;
  #L2b7b8a.  v3:= (`long`) v0 @kind i2l;
  #L2b7b8c.  call temp:= `s0`(v2, v3) @signature `Lokio/e;.s0:(J)[B` @kind interface;
  #L2b7b92.  v0:= temp @kind object;
  #L2b7b94.  call temp:= `c`(v1, v0) @signature `Lie/k;.c:([B)[B` @kind virtual;
  #L2b7b9a.  v0:= temp @kind object;
  #L2b7b9c.  call temp:= `of`(v0) @signature `Lokio/f;.of:([B)Lokio/f;` @kind static;
  #L2b7ba2.  v0:= temp @kind object;
  #L2b7ba4.  return v0 @kind object;
  #L2b7ba6.  v1:= v5.`ie.d$a.b` @type ^`okio.e` @kind object;
  #L2b7baa.  v2:= (`long`) v0 @kind i2l;
  #L2b7bac.  call temp:= `o`(v1, v2) @signature `Lokio/e;.o:(J)Lokio/f;` @kind interface;
  #L2b7bb2.  v0:= temp @kind object;
  #L2b7bb4.  return v0 @kind object;
}
procedure `void` `k`(`ie.d$a` v3 @kind this) @signature `Lie/d$a;.k:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L2b7d84.  v0:= v3.`ie.d$a.b` @type ^`okio.e` @kind object;
  #L2b7d88.  call temp:= `H`(v0) @signature `Lokio/e;.H:()Z` @kind interface;
  #L2b7d8e.  v0:= temp;
  #L2b7d90.  if v0 != 0 then goto L2b7e9e;
  #L2b7d94.  v0:= v3.`ie.d$a.b` @type ^`okio.e` @kind object;
  #L2b7d98.  call temp:= `readByte`(v0) @signature `Lokio/e;.readByte:()B` @kind interface;
  #L2b7d9e.  v0:= temp;
  #L2b7da0.  v0:= v0 ^& 255;
  #L2b7da4.  v1:= 128I;
  #L2b7da8.  if v0 == v1 then goto L2b7e8e;
  #L2b7dac.  v2:= v0 ^& 128;
  #L2b7db0.  if v2 != v1 then goto L2b7dcc;
  #L2b7db4.  v1:= 127I;
  #L2b7db8.  call temp:= `m`(v3, v0, v1) @signature `Lie/d$a;.m:(II)I` @kind virtual;
  #L2b7dbe.  v0:= temp;
  #L2b7dc0.  v0:= v0 + -1;
  #L2b7dc4.  call `l`(v3, v0) @signature `Lie/d$a;.l:(I)V` @kind direct;
  #L2b7dca.  goto L2b7d84;
  #L2b7dcc.  v1:= 64I;
  #L2b7dd0.  if v0 != v1 then goto L2b7ddc;
  #L2b7dd4.  call `o`(v3) @signature `Lie/d$a;.o:()V` @kind direct;
  #L2b7dda.  goto L2b7d84;
  #L2b7ddc.  v2:= v0 ^& 64;
  #L2b7de0.  if v2 != v1 then goto L2b7dfc;
  #L2b7de4.  v1:= 63I;
  #L2b7de8.  call temp:= `m`(v3, v0, v1) @signature `Lie/d$a;.m:(II)I` @kind virtual;
  #L2b7dee.  v0:= temp;
  #L2b7df0.  v0:= v0 + -1;
  #L2b7df4.  call `n`(v3, v0) @signature `Lie/d$a;.n:(I)V` @kind direct;
  #L2b7dfa.  goto L2b7d84;
  #L2b7dfc.  v1:= v0 ^& 32;
  #L2b7e00.  v2:= 32I;
  #L2b7e04.  if v1 != v2 then goto L2b7e5e;
  #L2b7e08.  v1:= 31I;
  #L2b7e0c.  call temp:= `m`(v3, v0, v1) @signature `Lie/d$a;.m:(II)I` @kind virtual;
  #L2b7e12.  v0:= temp;
  #L2b7e14.  v3.`ie.d$a.d` @type ^`int` := v0;
  #L2b7e18.  if v0 < 0 then goto L2b7e2c;
  #L2b7e1c.  v1:= v3.`ie.d$a.c` @type ^`int`;
  #L2b7e20.  if v0 > v1 then goto L2b7e2c;
  #L2b7e24.  call `a`(v3) @signature `Lie/d$a;.a:()V` @kind direct;
  #L2b7e2a.  goto L2b7d84;
  #L2b7e2c.  v0:= new `java.io.IOException`;
  #L2b7e30.  v1:= new `java.lang.StringBuilder`;
  #L2b7e34.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2b7e3a.  v2:= "Invalid dynamic table size update " @kind object;
  #L2b7e3e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b7e44.  v2:= v3.`ie.d$a.d` @type ^`int`;
  #L2b7e48.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2b7e4e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2b7e54.  v1:= temp @kind object;
  #L2b7e56.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2b7e5c.  throw v0;
  #L2b7e5e.  v1:= 16I;
  #L2b7e62.  if v0 == v1 then goto L2b7e84;
  #L2b7e66.  if v0 != 0 then goto L2b7e6c;
  #L2b7e6a.  goto L2b7e84;
  #L2b7e6c.  v1:= 15I;
  #L2b7e70.  call temp:= `m`(v3, v0, v1) @signature `Lie/d$a;.m:(II)I` @kind virtual;
  #L2b7e76.  v0:= temp;
  #L2b7e78.  v0:= v0 + -1;
  #L2b7e7c.  call `p`(v3, v0) @signature `Lie/d$a;.p:(I)V` @kind direct;
  #L2b7e82.  goto L2b7d84;
  #L2b7e84.  call `q`(v3) @signature `Lie/d$a;.q:()V` @kind direct;
  #L2b7e8a.  goto L2b7d84;
  #L2b7e8e.  v0:= new `java.io.IOException`;
  #L2b7e92.  v1:= "index == 0" @kind object;
  #L2b7e96.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2b7e9c.  throw v0;
  #L2b7e9e.  return @kind void;
}
procedure `int` `m`(`ie.d$a` v2 @kind this, `int` v3 , `int` v4 ) @signature `Lie/d$a;.m:(II)I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2b7a60.  v3:= v3 ^& v4 @kind int;
  #L2b7a62.  if v3 >= v4 then goto L2b7a68;
  #L2b7a66.  return v3;
  #L2b7a68.  v3:= 0I;
  #L2b7a6a.  call temp:= `i`(v2) @signature `Lie/d$a;.i:()I` @kind direct;
  #L2b7a70.  v0:= temp;
  #L2b7a72.  v1:= v0 ^& 128;
  #L2b7a76.  if v1 == 0 then goto L2b7a88;
  #L2b7a7a.  v0:= v0 ^& 127;
  #L2b7a7e.  v0:= v0 ^< v3 @kind int;
  #L2b7a80.  v4:= v4 + v0 @kind int;
  #L2b7a82.  v3:= v3 + 7;
  #L2b7a86.  goto L2b7a6a;
  #L2b7a88.  v3:= v0 ^< v3 @kind int;
  #L2b7a8c.  v4:= v4 + v3 @kind int;
  #L2b7a8e.  return v4;
}
