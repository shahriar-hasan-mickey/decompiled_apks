record `ie.f` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.Closeable` @kind interface {
  `java.net.Socket` `ie.f.A` @AccessFlag FINAL;
  `ie.j` `ie.f.B` @AccessFlag FINAL;
  `ie.f$l` `ie.f.C` @AccessFlag FINAL;
  `java.util.Set` `ie.f.D` @AccessFlag FINAL;
  `boolean` `ie.f.g` @AccessFlag FINAL;
  `ie.f$j` `ie.f.h` @AccessFlag FINAL;
  `java.util.Map` `ie.f.i` @AccessFlag FINAL;
  `java.lang.String` `ie.f.j` @AccessFlag FINAL;
  `int` `ie.f.k` @AccessFlag ;
  `int` `ie.f.l` @AccessFlag ;
  `boolean` `ie.f.m` @AccessFlag PRIVATE;
  `java.util.concurrent.ScheduledExecutorService` `ie.f.n` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.ExecutorService` `ie.f.o` @AccessFlag PRIVATE_FINAL;
  `ie.l` `ie.f.p` @AccessFlag FINAL;
  `long` `ie.f.q` @AccessFlag PRIVATE;
  `long` `ie.f.r` @AccessFlag PRIVATE;
  `long` `ie.f.s` @AccessFlag PRIVATE;
  `long` `ie.f.t` @AccessFlag PRIVATE;
  `long` `ie.f.u` @AccessFlag PRIVATE;
  `long` `ie.f.v` @AccessFlag PRIVATE;
  `long` `ie.f.w` @AccessFlag ;
  `long` `ie.f.x` @AccessFlag ;
  `ie.m` `ie.f.y` @AccessFlag ;
  `ie.m` `ie.f.z` @AccessFlag FINAL;
}
global `java.util.concurrent.ExecutorService` `@@ie.f.E` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lie/f;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L2b9d90.  v0:= constclass @type ^`ie.f` @kind object;
  #L2b9d94.  v0:= new `java.util.concurrent.ThreadPoolExecutor`;
  #L2b9d98.  v2:= 0I;
  #L2b9d9a.  v3:= 2147483647I;
  #L2b9da0.  v4:= 60L;
  #L2b9da4.  v6:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L2b9da8.  v7:= new `java.util.concurrent.SynchronousQueue`;
  #L2b9dac.  call `<init>`(v7) @signature `Ljava/util/concurrent/SynchronousQueue;.<init>:()V` @kind direct;
  #L2b9db2.  v1:= 1I;
  #L2b9db4.  v8:= "OkHttp Http2Connection" @kind object;
  #L2b9db8.  call temp:= `I`(v8, v1) @signature `Lee/e;.I:(Ljava/lang/String;Z)Ljava/util/concurrent/ThreadFactory;` @kind static;
  #L2b9dbe.  v8:= temp @kind object;
  #L2b9dc0.  v1:= v0 @kind object;
  #L2b9dc2.  call `<init>`(v1, v2, v3, v4, v6, v7, v8) @signature `Ljava/util/concurrent/ThreadPoolExecutor;.<init>:(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L2b9dc8.  `@@ie.f.E` @type ^`java.util.concurrent.ExecutorService` := v0 @kind object;
  #L2b9dcc.  return @kind void;
}
procedure `void` `<init>`(`ie.f` v24 @kind this, `ie.f$h` v25 @kind object) @signature `Lie/f;.<init>:(Lie/f$h;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;
    v22;
    v23;

  #L2b9de0.  v0:= v24 @kind object;
  #L2b9de4.  v1:= v25 @kind object;
  #L2b9de8.  call `<init>`(v24) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2b9dee.  v2:= new `java.util.LinkedHashMap`;
  #L2b9df2.  call `<init>`(v2) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L2b9df8.  v0.`ie.f.i` @type ^`java.util.Map` := v2 @kind object;
  #L2b9dfc.  v2:= 0L;
  #L2b9e00.  v0.`ie.f.q` @type ^`long` := v2 @kind wide;
  #L2b9e04.  v0.`ie.f.r` @type ^`long` := v2 @kind wide;
  #L2b9e08.  v0.`ie.f.s` @type ^`long` := v2 @kind wide;
  #L2b9e0c.  v0.`ie.f.t` @type ^`long` := v2 @kind wide;
  #L2b9e10.  v0.`ie.f.u` @type ^`long` := v2 @kind wide;
  #L2b9e14.  v0.`ie.f.v` @type ^`long` := v2 @kind wide;
  #L2b9e18.  v0.`ie.f.w` @type ^`long` := v2 @kind wide;
  #L2b9e1c.  v2:= new `ie.m`;
  #L2b9e20.  call `<init>`(v2) @signature `Lie/m;.<init>:()V` @kind direct;
  #L2b9e26.  v0.`ie.f.y` @type ^`ie.m` := v2 @kind object;
  #L2b9e2a.  v2:= new `ie.m`;
  #L2b9e2e.  call `<init>`(v2) @signature `Lie/m;.<init>:()V` @kind direct;
  #L2b9e34.  v0.`ie.f.z` @type ^`ie.m` := v2 @kind object;
  #L2b9e38.  v3:= new `java.util.LinkedHashSet`;
  #L2b9e3c.  call `<init>`(v3) @signature `Ljava/util/LinkedHashSet;.<init>:()V` @kind direct;
  #L2b9e42.  v0.`ie.f.D` @type ^`java.util.Set` := v3 @kind object;
  #L2b9e46.  v3:= v1.`ie.f$h.f` @type ^`ie.l` @kind object;
  #L2b9e4a.  v0.`ie.f.p` @type ^`ie.l` := v3 @kind object;
  #L2b9e4e.  v3:= v1.`ie.f$h.g` @type ^`boolean` @kind boolean;
  #L2b9e52.  v0.`ie.f.g` @type ^`boolean` := v3 @kind boolean;
  #L2b9e56.  v4:= v1.`ie.f$h.e` @type ^`ie.f$j` @kind object;
  #L2b9e5a.  v0.`ie.f.h` @type ^`ie.f$j` := v4 @kind object;
  #L2b9e5e.  v4:= 2I;
  #L2b9e60.  v5:= 1I;
  #L2b9e62.  if v3 == 0 then goto L2b9e6a;
  #L2b9e66.  v6:= 1I;
  #L2b9e68.  goto L2b9e6c;
  #L2b9e6a.  v6:= 2I;
  #L2b9e6c.  v0.`ie.f.l` @type ^`int` := v6;
  #L2b9e70.  if v3 == 0 then goto L2b9e7a;
  #L2b9e74.  v6:= v6 + v4 @kind int;
  #L2b9e76.  v0.`ie.f.l` @type ^`int` := v6;
  #L2b9e7a.  v4:= 7I;
  #L2b9e7c.  if v3 == 0 then goto L2b9e8e;
  #L2b9e80.  v6:= v0.`ie.f.y` @type ^`ie.m` @kind object;
  #L2b9e84.  v7:= 16777216I;
  #L2b9e88.  call temp:= `i`(v6, v4, v7) @signature `Lie/m;.i:(II)Lie/m;` @kind virtual;
  #L2b9e8e.  v6:= v1.`ie.f$h.b` @type ^`java.lang.String` @kind object;
  #L2b9e92.  v0.`ie.f.j` @type ^`java.lang.String` := v6 @kind object;
  #L2b9e96.  v7:= new `java.util.concurrent.ScheduledThreadPoolExecutor`;
  #L2b9e9a.  v8:= new `java.lang.Object`[v5];
  #L2b9e9e.  v14:= 0I;
  #L2b9ea0.  v8[v14]:= v6 @kind object;
  #L2b9ea4.  v9:= "OkHttp %s Writer" @kind object;
  #L2b9ea8.  call temp:= `q`(v9, v8) @signature `Lee/e;.q:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2b9eae.  v8:= temp @kind object;
  #L2b9eb0.  call temp:= `I`(v8, v14) @signature `Lee/e;.I:(Ljava/lang/String;Z)Ljava/util/concurrent/ThreadFactory;` @kind static;
  #L2b9eb6.  v8:= temp @kind object;
  #L2b9eb8.  call `<init>`(v7, v5, v8) @signature `Ljava/util/concurrent/ScheduledThreadPoolExecutor;.<init>:(ILjava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L2b9ebe.  v0.`ie.f.n` @type ^`java.util.concurrent.ScheduledExecutorService` := v7 @kind object;
  #L2b9ec2.  v8:= v1.`ie.f$h.h` @type ^`int`;
  #L2b9ec6.  if v8 == 0 then goto L2b9eec;
  #L2b9eca.  v8:= new `ie.f$i`;
  #L2b9ece.  call `<init>`(v8, v0) @signature `Lie/f$i;.<init>:(Lie/f;)V` @kind direct;
  #L2b9ed4.  v9:= v1.`ie.f$h.h` @type ^`int`;
  #L2b9ed8.  v10:= (`long`) v9 @kind i2l;
  #L2b9eda.  v12:= (`long`) v9 @kind i2l;
  #L2b9edc.  v15:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L2b9ee0.  v9:= v10 @kind wide;
  #L2b9ee2.  v11:= v12 @kind wide;
  #L2b9ee4.  v13:= v15 @kind object;
  #L2b9ee6.  call temp:= `scheduleAtFixedRate`(v7, v8, v9, v11, v13) @signature `Ljava/util/concurrent/ScheduledExecutorService;.scheduleAtFixedRate:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;` @kind interface;
  #L2b9eec.  v7:= new `java.util.concurrent.ThreadPoolExecutor`;
  #L2b9ef0.  v17:= 0I;
  #L2b9ef4.  v18:= 1I;
  #L2b9ef8.  v19:= 60L;
  #L2b9efc.  v21:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L2b9f00.  v22:= new `java.util.concurrent.LinkedBlockingQueue`;
  #L2b9f04.  call `<init>`(v22) @signature `Ljava/util/concurrent/LinkedBlockingQueue;.<init>:()V` @kind direct;
  #L2b9f0a.  v8:= new `java.lang.Object`[v5];
  #L2b9f0e.  v8[v14]:= v6 @kind object;
  #L2b9f12.  v6:= "OkHttp %s Push Observer" @kind object;
  #L2b9f16.  call temp:= `q`(v6, v8) @signature `Lee/e;.q:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2b9f1c.  v6:= temp @kind object;
  #L2b9f1e.  call temp:= `I`(v6, v5) @signature `Lee/e;.I:(Ljava/lang/String;Z)Ljava/util/concurrent/ThreadFactory;` @kind static;
  #L2b9f24.  v23:= temp @kind object;
  #L2b9f26.  v16:= v7 @kind object;
  #L2b9f2a.  call `<init>`(v16, v17, v18, v19, v21, v22, v23) @signature `Ljava/util/concurrent/ThreadPoolExecutor;.<init>:(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L2b9f30.  v0.`ie.f.o` @type ^`java.util.concurrent.ExecutorService` := v7 @kind object;
  #L2b9f34.  v5:= 65535I;
  #L2b9f3a.  call temp:= `i`(v2, v4, v5) @signature `Lie/m;.i:(II)Lie/m;` @kind virtual;
  #L2b9f40.  v4:= 5I;
  #L2b9f42.  v5:= 16384I;
  #L2b9f46.  call temp:= `i`(v2, v4, v5) @signature `Lie/m;.i:(II)Lie/m;` @kind virtual;
  #L2b9f4c.  call temp:= `d`(v2) @signature `Lie/m;.d:()I` @kind virtual;
  #L2b9f52.  v2:= temp;
  #L2b9f54.  v4:= (`long`) v2 @kind i2l;
  #L2b9f56.  v0.`ie.f.x` @type ^`long` := v4 @kind wide;
  #L2b9f5a.  v2:= v1.`ie.f$h.a` @type ^`java.net.Socket` @kind object;
  #L2b9f5e.  v0.`ie.f.A` @type ^`java.net.Socket` := v2 @kind object;
  #L2b9f62.  v2:= new `ie.j`;
  #L2b9f66.  v4:= v1.`ie.f$h.d` @type ^`okio.d` @kind object;
  #L2b9f6a.  call `<init>`(v2, v4, v3) @signature `Lie/j;.<init>:(Lokio/d;Z)V` @kind direct;
  #L2b9f70.  v0.`ie.f.B` @type ^`ie.j` := v2 @kind object;
  #L2b9f74.  v2:= new `ie.f$l`;
  #L2b9f78.  v4:= new `ie.h`;
  #L2b9f7c.  v1:= v1.`ie.f$h.c` @type ^`okio.e` @kind object;
  #L2b9f80.  call `<init>`(v4, v1, v3) @signature `Lie/h;.<init>:(Lokio/e;Z)V` @kind direct;
  #L2b9f86.  call `<init>`(v2, v0, v4) @signature `Lie/f$l;.<init>:(Lie/f;Lie/h;)V` @kind direct;
  #L2b9f8c.  v0.`ie.f.C` @type ^`ie.f$l` := v2 @kind object;
  #L2b9f90.  return @kind void;
}
procedure `java.util.concurrent.ScheduledExecutorService` `C`(`ie.f` v0 @kind object) @signature `Lie/f;.C:(Lie/f;)Ljava/util/concurrent/ScheduledExecutorService;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L2b9cc8.  v0:= v0.`ie.f.n` @type ^`java.util.concurrent.ScheduledExecutorService` @kind object;
  #L2b9ccc.  return v0 @kind object;
}
procedure `long` `J`(`ie.f` v4 @kind object) @signature `Lie/f;.J:(Lie/f;)J` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2b9d50.  v0:= v4.`ie.f.t` @type ^`long` @kind wide;
  #L2b9d54.  v2:= 1L;
  #L2b9d58.  v2:= v2 + v0 @kind long;
  #L2b9d5a.  v4.`ie.f.t` @type ^`long` := v2 @kind wide;
  #L2b9d5e.  return v0 @kind wide;
}
procedure `long` `Q`(`ie.f` v4 @kind object) @signature `Lie/f;.Q:(Lie/f;)J` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2b9d70.  v0:= v4.`ie.f.u` @type ^`long` @kind wide;
  #L2b9d74.  v2:= 1L;
  #L2b9d78.  v2:= v2 + v0 @kind long;
  #L2b9d7a.  v4.`ie.f.u` @type ^`long` := v2 @kind wide;
  #L2b9d7e.  return v0 @kind wide;
}
procedure `void` `Y`(`ie.f` v1 @kind this, `java.io.IOException` v2 @kind object) @signature `Lie/f;.Y:(Ljava/io/IOException;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L2ba0d0.  v0:= `@@ie.b.PROTOCOL_ERROR` @type ^`ie.b` @kind object;
  #L2ba0d4.  call `V`(v1, v0, v0, v2) @signature `Lie/f;.V:(Lie/b;Lie/b;Ljava/io/IOException;)V` @kind virtual;
  #L2ba0da.  return @kind void;
}
procedure `void` `e`(`ie.f` v0 @kind object, `java.io.IOException` v1 @kind object) @signature `Lie/f;.e:(Lie/f;Ljava/io/IOException;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L2b9fa4.  call `Y`(v0, v1) @signature `Lie/f;.Y:(Ljava/io/IOException;)V` @kind direct;
  #L2b9faa.  return @kind void;
}
procedure `long` `i`(`ie.f` v2 @kind object) @signature `Lie/f;.i:(Lie/f;)J` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;
    v1;

  #L2b9ce0.  v0:= v2.`ie.f.r` @type ^`long` @kind wide;
  #L2b9ce4.  return v0 @kind wide;
}
procedure `ie.i` `i0`(`ie.f` v10 @kind this, `int` v11 , `java.util.List` v12 @kind object, `boolean` v13 ) @signature `Lie/f;.i0:(ILjava/util/List;Z)Lie/i;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L2b9ad4.  v6:= v13 ^~ 1;
  #L2b9ad8.  v4:= 0I;
  #L2b9ada.  v7:= v10.`ie.f.B` @type ^`ie.j` @kind object;
  #L2b9ade.  @monitorenter v7
  #L2b9ae0.  @monitorenter v10
  #L2b9ae2.  v0:= v10.`ie.f.l` @type ^`int`;
  #L2b9ae6.  v1:= 1073741823I;
  #L2b9aec.  if v0 <= v1 then goto L2b9afa;
  #L2b9af0.  v0:= `@@ie.b.REFUSED_STREAM` @type ^`ie.b` @kind object;
  #L2b9af4.  call `O0`(v10, v0) @signature `Lie/f;.O0:(Lie/b;)V` @kind virtual;
  #L2b9afa.  v0:= v10.`ie.f.m` @type ^`boolean` @kind boolean;
  #L2b9afe.  if v0 != 0 then goto L2b9bae;
  #L2b9b02.  v8:= v10.`ie.f.l` @type ^`int`;
  #L2b9b06.  v0:= v8 + 2;
  #L2b9b0a.  v10.`ie.f.l` @type ^`int` := v0;
  #L2b9b0e.  v9:= new `ie.i`;
  #L2b9b12.  v5:= 0I;
  #L2b9b14.  v0:= v9 @kind object;
  #L2b9b16.  v1:= v8;
  #L2b9b18.  v2:= v10 @kind object;
  #L2b9b1a.  v3:= v6;
  #L2b9b1c.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lie/i;.<init>:(ILie/f;ZZLokhttp3/w;)V` @kind direct;
  #L2b9b22.  if v13 == 0 then goto L2b9b48;
  #L2b9b26.  v0:= v10.`ie.f.x` @type ^`long` @kind wide;
  #L2b9b2a.  v2:= 0L;
  #L2b9b2e.  v13:= lcmp(v0, v2);
  #L2b9b32.  if v13 == 0 then goto L2b9b48;
  #L2b9b36.  v0:= v9.`ie.i.b` @type ^`long` @kind wide;
  #L2b9b3a.  v13:= lcmp(v0, v2);
  #L2b9b3e.  if v13 != 0 then goto L2b9b44;
  #L2b9b42.  goto L2b9b48;
  #L2b9b44.  v13:= 0I;
  #L2b9b46.  goto L2b9b4a;
  #L2b9b48.  v13:= 1I;
  #L2b9b4a.  call temp:= `k`(v9) @signature `Lie/i;.k:()Z` @kind virtual;
  #L2b9b50.  v0:= temp;
  #L2b9b52.  if v0 == 0 then goto L2b9b68;
  #L2b9b56.  v0:= v10.`ie.f.i` @type ^`java.util.Map` @kind object;
  #L2b9b5a.  call temp:= `valueOf`(v8) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2b9b60.  v1:= temp @kind object;
  #L2b9b62.  call temp:= `put`(v0, v1, v9) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2b9b68.  @monitorexit v10
  #L2b9b6a.  if v11 != 0 then goto L2b9b7a;
  #L2b9b6e.  v11:= v10.`ie.f.B` @type ^`ie.j` @kind object;
  #L2b9b72.  call `w`(v11, v6, v8, v12) @signature `Lie/j;.w:(ZILjava/util/List;)V` @kind virtual;
  #L2b9b78.  goto L2b9b8c;
  #L2b9b7a.  v0:= v10.`ie.f.g` @type ^`boolean` @kind boolean;
  #L2b9b7e.  if v0 != 0 then goto L2b9b9e;
  #L2b9b82.  v0:= v10.`ie.f.B` @type ^`ie.j` @kind object;
  #L2b9b86.  call `J`(v0, v11, v8, v12) @signature `Lie/j;.J:(IILjava/util/List;)V` @kind virtual;
  #L2b9b8c.  @monitorexit v7
  #L2b9b8e.  if v13 == 0 then goto L2b9b9c;
  #L2b9b92.  v11:= v10.`ie.f.B` @type ^`ie.j` @kind object;
  #L2b9b96.  call `flush`(v11) @signature `Lie/j;.flush:()V` @kind virtual;
  #L2b9b9c.  return v9 @kind object;
  #L2b9b9e.  v11:= new `java.lang.IllegalArgumentException`;
  #L2b9ba2.  v12:= "client streams shouldn't have associated stream IDs" @kind object;
  #L2b9ba6.  call `<init>`(v11, v12) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2b9bac.  throw v11;
  #L2b9bae.  v11:= new `ie.a`;
  #L2b9bb2.  call `<init>`(v11) @signature `Lie/a;.<init>:()V` @kind direct;
  #L2b9bb8.  throw v11;
  #L2b9bba.  v11:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2b9bbc.  @monitorexit v10
  #L2b9bbe.  throw v11;
  #L2b9bc0.  v11:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2b9bc2.  @monitorexit v7
  #L2b9bc4.  throw v11;
  catch `java.lang.Throwable` @[L2b9ae0..L2b9ae2] goto L2b9bc0;
  catch `java.lang.Throwable` @[L2b9ae2..L2b9b6a] goto L2b9bba;
  catch `java.lang.Throwable` @[L2b9b6e..L2b9b8e] goto L2b9bc0;
  catch `java.lang.Throwable` @[L2b9b9e..L2b9bae] goto L2b9bc0;
  catch `java.lang.Throwable` @[L2b9bae..L2b9bbe] goto L2b9bba;
  catch `java.lang.Throwable` @[L2b9bbe..L2b9bc4] goto L2b9bc0;
}
procedure `long` `k`(`ie.f` v4 @kind object) @signature `Lie/f;.k:(Lie/f;)J` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2b9cf8.  v0:= v4.`ie.f.r` @type ^`long` @kind wide;
  #L2b9cfc.  v2:= 1L;
  #L2b9d00.  v2:= v2 + v0 @kind long;
  #L2b9d02.  v4.`ie.f.r` @type ^`long` := v2 @kind wide;
  #L2b9d06.  return v0 @kind wide;
}
procedure `void` `l0`(`ie.f` v1 @kind this, `ee.b` v2 @kind object) @signature `Lie/f;.l0:(Lee/b;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L2ba1bc.  @monitorenter v1
  #L2ba1be.  v0:= v1.`ie.f.m` @type ^`boolean` @kind boolean;
  #L2ba1c2.  if v0 != 0 then goto L2ba1d0;
  #L2ba1c6.  v0:= v1.`ie.f.o` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L2ba1ca.  call `execute`(v0, v2) @signature `Ljava/util/concurrent/ExecutorService;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L2ba1d0.  @monitorexit v1
  #L2ba1d2.  return @kind void;
  #L2ba1d4.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2ba1d6.  @monitorexit v1
  #L2ba1d8.  throw v2;
  catch `java.lang.Throwable` @[L2ba1be..L2ba1d0] goto L2ba1d4;
}
procedure `long` `r`(`ie.f` v2 @kind object) @signature `Lie/f;.r:(Lie/f;)J` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;
    v1;

  #L2b9d18.  v0:= v2.`ie.f.q` @type ^`long` @kind wide;
  #L2b9d1c.  return v0 @kind wide;
}
procedure `long` `s`(`ie.f` v4 @kind object) @signature `Lie/f;.s:(Lie/f;)J` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2b9d30.  v0:= v4.`ie.f.q` @type ^`long` @kind wide;
  #L2b9d34.  v2:= 1L;
  #L2b9d38.  v2:= v2 + v0 @kind long;
  #L2b9d3a.  v4.`ie.f.q` @type ^`long` := v2 @kind wide;
  #L2b9d3e.  return v0 @kind wide;
}
procedure `boolean` `v`(`ie.f` v0 @kind object) @signature `Lie/f;.v:(Lie/f;)Z` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L2b99e0.  v0:= v0.`ie.f.m` @type ^`boolean` @kind boolean;
  #L2b99e4.  return v0;
}
procedure `boolean` `w`(`ie.f` v0 @kind object, `boolean` v1 ) @signature `Lie/f;.w:(Lie/f;Z)Z` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L2b99f8.  v0.`ie.f.m` @type ^`boolean` := v1 @kind boolean;
  #L2b99fc.  return v1;
}
procedure `java.util.concurrent.ExecutorService` `y`() @signature `Lie/f;.y:()Ljava/util/concurrent/ExecutorService;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L2b9cb0.  v0:= `@@ie.f.E` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L2b9cb4.  return v0 @kind object;
}
procedure `ie.i` `B0`(`ie.f` v1 @kind this, `int` v2 ) @signature `Lie/f;.B0:(I)Lie/i;` @AccessFlag  {
    temp;
    v0;

  #L2b9c2c.  @monitorenter v1
  #L2b9c2e.  v0:= v1.`ie.f.i` @type ^`java.util.Map` @kind object;
  #L2b9c32.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2b9c38.  v2:= temp @kind object;
  #L2b9c3a.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2b9c40.  v2:= temp @kind object;
  #L2b9c42.  v2:= (`ie.i`) v2 @kind object;
  #L2b9c46.  call `notifyAll`(v1) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L2b9c4c.  @monitorexit v1
  #L2b9c4e.  return v2 @kind object;
  #L2b9c50.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2b9c52.  @monitorexit v1
  #L2b9c54.  throw v2;
  catch `java.lang.Throwable` @[L2b9c2e..L2b9c4c] goto L2b9c50;
}
procedure `void` `E0`(`ie.f` v6 @kind this) @signature `Lie/f;.E0:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2ba354.  @monitorenter v6
  #L2ba356.  v0:= v6.`ie.f.t` @type ^`long` @kind wide;
  #L2ba35a.  v2:= v6.`ie.f.s` @type ^`long` @kind wide;
  #L2ba35e.  v4:= lcmp(v0, v2);
  #L2ba362.  if v4 >= 0 then goto L2ba36a;
  #L2ba366.  @monitorexit v6
  #L2ba368.  return @kind void;
  #L2ba36a.  v0:= 1L;
  #L2ba36e.  v2:= v2 + v0 @kind long;
  #L2ba370.  v6.`ie.f.s` @type ^`long` := v2 @kind wide;
  #L2ba374.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L2ba37a.  v0:= temp @kind wide;
  #L2ba37c.  v2:= 1000000000L;
  #L2ba382.  v0:= v0 + v2 @kind long;
  #L2ba384.  v6.`ie.f.v` @type ^`long` := v0 @kind wide;
  #L2ba388.  @monitorexit v6
  #L2ba38a.  v0:= v6.`ie.f.n` @type ^`java.util.concurrent.ScheduledExecutorService` @kind object;
  #L2ba38e.  v1:= new `ie.f$c`;
  #L2ba392.  v2:= "OkHttp %s ping" @kind object;
  #L2ba396.  v3:= 1I;
  #L2ba398.  v3:= new `java.lang.Object`[v3];
  #L2ba39c.  v4:= 0I;
  #L2ba39e.  v5:= v6.`ie.f.j` @type ^`java.lang.String` @kind object;
  #L2ba3a2.  v3[v4]:= v5 @kind object;
  #L2ba3a6.  call `<init>`(v1, v6, v2, v3) @signature `Lie/f$c;.<init>:(Lie/f;Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L2ba3ac.  call `execute`(v0, v1) @signature `Ljava/util/concurrent/ScheduledExecutorService;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L2ba3b2.  return @kind void;
  #L2ba3b4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2ba3b6.  @monitorexit v6
  #L2ba3b8.  throw v0;
  catch `java.lang.Throwable` @[L2ba356..L2ba38a] goto L2ba3b4;
  catch `java.util.concurrent.RejectedExecutionException` @[L2ba38a..L2ba3b2] goto L2ba3b2;
  catch `java.lang.Throwable` @[L2ba3b6..L2ba3b8] goto L2ba3b4;
}
procedure `void` `O0`(`ie.f` v4 @kind this, `ie.b` v5 @kind object) @signature `Lie/f;.O0:(Lie/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2ba3ec.  v0:= v4.`ie.f.B` @type ^`ie.j` @kind object;
  #L2ba3f0.  @monitorenter v0
  #L2ba3f2.  @monitorenter v4
  #L2ba3f4.  v1:= v4.`ie.f.m` @type ^`boolean` @kind boolean;
  #L2ba3f8.  if v1 == 0 then goto L2ba402;
  #L2ba3fc.  @monitorexit v4
  #L2ba3fe.  @monitorexit v0
  #L2ba400.  return @kind void;
  #L2ba402.  v1:= 1I;
  #L2ba404.  v4.`ie.f.m` @type ^`boolean` := v1 @kind boolean;
  #L2ba408.  v1:= v4.`ie.f.k` @type ^`int`;
  #L2ba40c.  @monitorexit v4
  #L2ba40e.  v2:= v4.`ie.f.B` @type ^`ie.j` @kind object;
  #L2ba412.  v3:= `@@ee.e.a` @type ^`byte`[] @kind object;
  #L2ba416.  call `v`(v2, v1, v5, v3) @signature `Lie/j;.v:(ILie/b;[B)V` @kind virtual;
  #L2ba41c.  @monitorexit v0
  #L2ba41e.  return @kind void;
  #L2ba420.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2ba422.  @monitorexit v4
  #L2ba424.  throw v5;
  #L2ba426.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2ba428.  @monitorexit v0
  #L2ba42a.  throw v5;
  catch `java.lang.Throwable` @[L2ba3f2..L2ba3f4] goto L2ba426;
  catch `java.lang.Throwable` @[L2ba3f4..L2ba3fe] goto L2ba420;
  catch `java.lang.Throwable` @[L2ba3fe..L2ba400] goto L2ba426;
  catch `java.lang.Throwable` @[L2ba404..L2ba40e] goto L2ba420;
  catch `java.lang.Throwable` @[L2ba40e..L2ba41e] goto L2ba426;
  catch `java.lang.Throwable` @[L2ba422..L2ba424] goto L2ba420;
  catch `java.lang.Throwable` @[L2ba424..L2ba42a] goto L2ba426;
}
procedure `void` `Q0`(`ie.f` v1 @kind this) @signature `Lie/f;.Q0:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ba47c.  v0:= 1I;
  #L2ba47e.  call `R0`(v1, v0) @signature `Lie/f;.R0:(Z)V` @kind virtual;
  #L2ba484.  return @kind void;
}
procedure `void` `R0`(`ie.f` v5 @kind this, `boolean` v6 ) @signature `Lie/f;.R0:(Z)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2ba498.  if v6 == 0 then goto L2ba4da;
  #L2ba49c.  v6:= v5.`ie.f.B` @type ^`ie.j` @kind object;
  #L2ba4a0.  call `i`(v6) @signature `Lie/j;.i:()V` @kind virtual;
  #L2ba4a6.  v6:= v5.`ie.f.B` @type ^`ie.j` @kind object;
  #L2ba4aa.  v0:= v5.`ie.f.y` @type ^`ie.m` @kind object;
  #L2ba4ae.  call `V`(v6, v0) @signature `Lie/j;.V:(Lie/m;)V` @kind virtual;
  #L2ba4b4.  v6:= v5.`ie.f.y` @type ^`ie.m` @kind object;
  #L2ba4b8.  call temp:= `d`(v6) @signature `Lie/m;.d:()I` @kind virtual;
  #L2ba4be.  v6:= temp;
  #L2ba4c0.  v0:= 65535I;
  #L2ba4c6.  if v6 == v0 then goto L2ba4da;
  #L2ba4ca.  v1:= v5.`ie.f.B` @type ^`ie.j` @kind object;
  #L2ba4ce.  v2:= 0I;
  #L2ba4d0.  v6:= v6 - v0 @kind int;
  #L2ba4d2.  v3:= (`long`) v6 @kind i2l;
  #L2ba4d4.  call `Y`(v1, v2, v3) @signature `Lie/j;.Y:(IJ)V` @kind virtual;
  #L2ba4da.  v6:= new `java.lang.Thread`;
  #L2ba4de.  v0:= v5.`ie.f.C` @type ^`ie.f$l` @kind object;
  #L2ba4e2.  call `<init>`(v6, v0) @signature `Ljava/lang/Thread;.<init>:(Ljava/lang/Runnable;)V` @kind direct;
  #L2ba4e8.  call `start`(v6) @signature `Ljava/lang/Thread;.start:()V` @kind virtual;
  #L2ba4ee.  return @kind void;
}
procedure `void` `S0`(`ie.f` v3 @kind this, `long` v4 ) @signature `Lie/f;.S0:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L2ba500.  @monitorenter v3
  #L2ba502.  v0:= v3.`ie.f.w` @type ^`long` @kind wide;
  #L2ba506.  v0:= v0 + v4 @kind long;
  #L2ba508.  v3.`ie.f.w` @type ^`long` := v0 @kind wide;
  #L2ba50c.  v4:= v3.`ie.f.y` @type ^`ie.m` @kind object;
  #L2ba510.  call temp:= `d`(v4) @signature `Lie/m;.d:()I` @kind virtual;
  #L2ba516.  v4:= temp;
  #L2ba518.  v4:= v4 / 2;
  #L2ba51c.  v4:= (`long`) v4 @kind i2l;
  #L2ba51e.  v2:= lcmp(v0, v4);
  #L2ba522.  if v2 < 0 then goto L2ba53a;
  #L2ba526.  v4:= 0I;
  #L2ba528.  v0:= v3.`ie.f.w` @type ^`long` @kind wide;
  #L2ba52c.  call `Y0`(v3, v4, v0) @signature `Lie/f;.Y0:(IJ)V` @kind virtual;
  #L2ba532.  v4:= 0L;
  #L2ba536.  v3.`ie.f.w` @type ^`long` := v4 @kind wide;
  #L2ba53a.  @monitorexit v3
  #L2ba53c.  return @kind void;
  #L2ba53e.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2ba540.  @monitorexit v3
  #L2ba542.  throw v4;
  catch `java.lang.Throwable` @[L2ba502..L2ba53a] goto L2ba53e;
}
procedure `void` `T0`(`ie.f` v8 @kind this, `int` v9 , `boolean` v10 , `okio.c` v11 @kind object, `long` v12 ) @signature `Lie/f;.T0:(IZLokio/c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2ba560.  v0:= 0I;
  #L2ba562.  v1:= 0L;
  #L2ba566.  v3:= lcmp(v12, v1);
  #L2ba56a.  if v3 != 0 then goto L2ba57a;
  #L2ba56e.  v12:= v8.`ie.f.B` @type ^`ie.j` @kind object;
  #L2ba572.  call `k`(v12, v10, v9, v11, v0) @signature `Lie/j;.k:(ZILokio/c;I)V` @kind virtual;
  #L2ba578.  return @kind void;
  #L2ba57a.  v3:= lcmp(v12, v1);
  #L2ba57e.  if v3 <= 0 then goto L2ba62e;
  #L2ba582.  @monitorenter v8
  #L2ba584.  v3:= v8.`ie.f.x` @type ^`long` @kind wide;
  #L2ba588.  v5:= lcmp(v3, v1);
  #L2ba58c.  if v5 > 0 then goto L2ba5c0;
  #L2ba590.  v3:= v8.`ie.f.i` @type ^`java.util.Map` @kind object;
  #L2ba594.  call temp:= `valueOf`(v9) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2ba59a.  v4:= temp @kind object;
  #L2ba59c.  call temp:= `containsKey`(v3, v4) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L2ba5a2.  v3:= temp;
  #L2ba5a4.  if v3 == 0 then goto L2ba5b0;
  #L2ba5a8.  call `wait`(v8) @signature `Ljava/lang/Object;.wait:()V` @kind virtual;
  #L2ba5ae.  goto L2ba584;
  #L2ba5b0.  v9:= new `java.io.IOException`;
  #L2ba5b4.  v10:= "stream closed" @kind object;
  #L2ba5b8.  call `<init>`(v9, v10) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ba5be.  throw v9;
  #L2ba5c0.  call temp:= `min`(v12, v3) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2ba5c6.  v3:= temp @kind wide;
  #L2ba5c8.  v4:= (`int`) v3 @kind l2i;
  #L2ba5ca.  v3:= v8.`ie.f.B` @type ^`ie.j` @kind object;
  #L2ba5ce.  call temp:= `y`(v3) @signature `Lie/j;.y:()I` @kind virtual;
  #L2ba5d4.  v3:= temp;
  #L2ba5d6.  call temp:= `min`(v4, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L2ba5dc.  v3:= temp;
  #L2ba5de.  v4:= v8.`ie.f.x` @type ^`long` @kind wide;
  #L2ba5e2.  v6:= (`long`) v3 @kind i2l;
  #L2ba5e4.  v4:= v4 - v6 @kind long;
  #L2ba5e6.  v8.`ie.f.x` @type ^`long` := v4 @kind wide;
  #L2ba5ea.  @monitorexit v8
  #L2ba5ec.  v12:= v12 - v6 @kind long;
  #L2ba5ee.  v4:= v8.`ie.f.B` @type ^`ie.j` @kind object;
  #L2ba5f2.  if v10 == 0 then goto L2ba602;
  #L2ba5f6.  v5:= lcmp(v12, v1);
  #L2ba5fa.  if v5 != 0 then goto L2ba602;
  #L2ba5fe.  v5:= 1I;
  #L2ba600.  goto L2ba604;
  #L2ba602.  v5:= 0I;
  #L2ba604.  call `k`(v4, v5, v9, v11, v3) @signature `Lie/j;.k:(ZILokio/c;I)V` @kind virtual;
  #L2ba60a.  goto L2ba57a;
  #L2ba60c.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2ba60e.  goto L2ba62a;
  #L2ba610.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L2ba616.  v9:= temp @kind object;
  #L2ba618.  call `interrupt`(v9) @signature `Ljava/lang/Thread;.interrupt:()V` @kind virtual;
  #L2ba61e.  v9:= new `java.io.InterruptedIOException`;
  #L2ba622.  call `<init>`(v9) @signature `Ljava/io/InterruptedIOException;.<init>:()V` @kind direct;
  #L2ba628.  throw v9;
  #L2ba62a.  @monitorexit v8
  #L2ba62c.  throw v9;
  #L2ba62e.  return @kind void;
  catch `java.lang.InterruptedException` @[L2ba584..L2ba5c0] goto L2ba610;
  catch `java.lang.Throwable` @[L2ba584..L2ba5c0] goto L2ba60c;
  catch `java.lang.Throwable` @[L2ba5c0..L2ba5ec] goto L2ba60c;
  catch `java.lang.Throwable` @[L2ba610..L2ba62c] goto L2ba60c;
}
procedure `void` `U0`(`ie.f` v1 @kind this, `int` v2 , `boolean` v3 , `java.util.List` v4 @kind object) @signature `Lie/f;.U0:(IZLjava/util/List;)V` @AccessFlag  {
    temp;
    v0;

  #L2ba660.  v0:= v1.`ie.f.B` @type ^`ie.j` @kind object;
  #L2ba664.  call `w`(v0, v3, v2, v4) @signature `Lie/j;.w:(ZILjava/util/List;)V` @kind virtual;
  #L2ba66a.  return @kind void;
}
procedure `void` `V`(`ie.f` v3 @kind this, `ie.b` v4 @kind object, `ie.b` v5 @kind object, `java.io.IOException` v6 @kind object) @signature `Lie/f;.V:(Lie/b;Lie/b;Ljava/io/IOException;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L2b9fe0.  call `O0`(v3, v4) @signature `Lie/f;.O0:(Lie/b;)V` @kind virtual;
  #L2b9fe6.  v4:= 0I;
  #L2b9fe8.  @monitorenter v3
  #L2b9fea.  v0:= v3.`ie.f.i` @type ^`java.util.Map` @kind object;
  #L2b9fee.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L2b9ff4.  v0:= temp;
  #L2b9ff6.  if v0 != 0 then goto L2ba02c;
  #L2b9ffa.  v4:= v3.`ie.f.i` @type ^`java.util.Map` @kind object;
  #L2b9ffe.  call temp:= `values`(v4) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L2ba004.  v4:= temp @kind object;
  #L2ba006.  v0:= v3.`ie.f.i` @type ^`java.util.Map` @kind object;
  #L2ba00a.  call temp:= `size`(v0) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L2ba010.  v0:= temp;
  #L2ba012.  v0:= new `ie.i`[v0];
  #L2ba016.  call temp:= `toArray`(v4, v0) @signature `Ljava/util/Collection;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L2ba01c.  v4:= temp @kind object;
  #L2ba01e.  v4:= (`ie.i`[]) v4 @kind object;
  #L2ba022.  v0:= v3.`ie.f.i` @type ^`java.util.Map` @kind object;
  #L2ba026.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L2ba02c.  @monitorexit v3
  #L2ba02e.  if v4 == 0 then goto L2ba04a;
  #L2ba032.  v0:= length @variable v4;
  #L2ba034.  v1:= 0I;
  #L2ba036.  if v1 >= v0 then goto L2ba04a;
  #L2ba03a.  v2:= v4[v1] @kind object;
  #L2ba03e.  call `d`(v2, v5, v6) @signature `Lie/i;.d:(Lie/b;Ljava/io/IOException;)V` @kind virtual;
  #L2ba044.  v1:= v1 + 1;
  #L2ba048.  goto L2ba036;
  #L2ba04a.  v4:= v3.`ie.f.B` @type ^`ie.j` @kind object;
  #L2ba04e.  call `close`(v4) @signature `Lie/j;.close:()V` @kind virtual;
  #L2ba054.  v4:= v3.`ie.f.A` @type ^`java.net.Socket` @kind object;
  #L2ba058.  call `close`(v4) @signature `Ljava/net/Socket;.close:()V` @kind virtual;
  #L2ba05e.  v4:= v3.`ie.f.n` @type ^`java.util.concurrent.ScheduledExecutorService` @kind object;
  #L2ba062.  call `shutdown`(v4) @signature `Ljava/util/concurrent/ScheduledExecutorService;.shutdown:()V` @kind interface;
  #L2ba068.  v4:= v3.`ie.f.o` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L2ba06c.  call `shutdown`(v4) @signature `Ljava/util/concurrent/ExecutorService;.shutdown:()V` @kind interface;
  #L2ba072.  return @kind void;
  #L2ba074.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2ba076.  @monitorexit v3
  #L2ba078.  throw v4;
  catch `java.io.IOException` @[L2b9fe0..L2b9fe6] goto L2b9fe6;
  catch `java.lang.Throwable` @[L2b9fea..L2ba02e] goto L2ba074;
  catch `java.io.IOException` @[L2ba03e..L2ba044] goto L2ba044;
  catch `java.io.IOException` @[L2ba04a..L2ba054] goto L2ba054;
  catch `java.io.IOException` @[L2ba054..L2ba05e] goto L2ba05e;
  catch `java.lang.Throwable` @[L2ba076..L2ba078] goto L2ba074;
}
procedure `void` `V0`(`ie.f` v1 @kind this, `boolean` v2 , `int` v3 , `int` v4 ) @signature `Lie/f;.V0:(ZII)V` @AccessFlag  {
    temp;
    v0;

  #L2ba67c.  v0:= v1.`ie.f.B` @type ^`ie.j` @kind object;
  #L2ba680.  call `C`(v0, v2, v3, v4) @signature `Lie/j;.C:(ZII)V` @kind virtual;
  #L2ba686.  goto L2ba690;
  #L2ba688.  v2:= Exception @type ^`java.io.IOException` @kind object;
  #L2ba68a.  call `Y`(v1, v2) @signature `Lie/f;.Y:(Ljava/io/IOException;)V` @kind direct;
  #L2ba690.  return @kind void;
  catch `java.io.IOException` @[L2ba67c..L2ba686] goto L2ba688;
}
procedure `void` `W0`(`ie.f` v1 @kind this, `int` v2 , `ie.b` v3 @kind object) @signature `Lie/f;.W0:(ILie/b;)V` @AccessFlag  {
    temp;
    v0;

  #L2ba6b4.  v0:= v1.`ie.f.B` @type ^`ie.j` @kind object;
  #L2ba6b8.  call `Q`(v0, v2, v3) @signature `Lie/j;.Q:(ILie/b;)V` @kind virtual;
  #L2ba6be.  return @kind void;
}
procedure `void` `X0`(`ie.f` v8 @kind this, `int` v9 , `ie.b` v10 @kind object) @signature `Lie/f;.X0:(ILie/b;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2ba6d0.  v0:= v8.`ie.f.n` @type ^`java.util.concurrent.ScheduledExecutorService` @kind object;
  #L2ba6d4.  v7:= new `ie.f$a`;
  #L2ba6d8.  v3:= "OkHttp %s stream %d" @kind object;
  #L2ba6dc.  v1:= 2I;
  #L2ba6de.  v4:= new `java.lang.Object`[v1];
  #L2ba6e2.  v1:= 0I;
  #L2ba6e4.  v2:= v8.`ie.f.j` @type ^`java.lang.String` @kind object;
  #L2ba6e8.  v4[v1]:= v2 @kind object;
  #L2ba6ec.  v1:= 1I;
  #L2ba6ee.  call temp:= `valueOf`(v9) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2ba6f4.  v2:= temp @kind object;
  #L2ba6f6.  v4[v1]:= v2 @kind object;
  #L2ba6fa.  v1:= v7 @kind object;
  #L2ba6fc.  v2:= v8 @kind object;
  #L2ba6fe.  v5:= v9;
  #L2ba700.  v6:= v10 @kind object;
  #L2ba702.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lie/f$a;.<init>:(Lie/f;Ljava/lang/String;[Ljava/lang/Object;ILie/b;)V` @kind direct;
  #L2ba708.  call `execute`(v0, v7) @signature `Ljava/util/concurrent/ScheduledExecutorService;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L2ba70e.  return @kind void;
  catch `java.util.concurrent.RejectedExecutionException` @[L2ba6d0..L2ba70e] goto L2ba70e;
}
procedure `void` `Y0`(`ie.f` v9 @kind this, `int` v10 , `long` v11 ) @signature `Lie/f;.Y0:(IJ)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L2ba730.  v0:= v9.`ie.f.n` @type ^`java.util.concurrent.ScheduledExecutorService` @kind object;
  #L2ba734.  v8:= new `ie.f$b`;
  #L2ba738.  v3:= "OkHttp Window Update %s stream %d" @kind object;
  #L2ba73c.  v1:= 2I;
  #L2ba73e.  v4:= new `java.lang.Object`[v1];
  #L2ba742.  v1:= 0I;
  #L2ba744.  v2:= v9.`ie.f.j` @type ^`java.lang.String` @kind object;
  #L2ba748.  v4[v1]:= v2 @kind object;
  #L2ba74c.  v1:= 1I;
  #L2ba74e.  call temp:= `valueOf`(v10) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2ba754.  v2:= temp @kind object;
  #L2ba756.  v4[v1]:= v2 @kind object;
  #L2ba75a.  v1:= v8 @kind object;
  #L2ba75c.  v2:= v9 @kind object;
  #L2ba75e.  v5:= v10;
  #L2ba760.  v6:= v11 @kind wide;
  #L2ba762.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lie/f$b;.<init>:(Lie/f;Ljava/lang/String;[Ljava/lang/Object;IJ)V` @kind direct;
  #L2ba768.  call `execute`(v0, v8) @signature `Ljava/util/concurrent/ScheduledExecutorService;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L2ba76e.  return @kind void;
  catch `java.util.concurrent.RejectedExecutionException` @[L2ba730..L2ba76e] goto L2ba76e;
}
procedure `ie.i` `Z`(`ie.f` v1 @kind this, `int` v2 ) @signature `Lie/f;.Z:(I)Lie/i;` @AccessFlag  {
    temp;
    v0;

  #L2b9a94.  @monitorenter v1
  #L2b9a96.  v0:= v1.`ie.f.i` @type ^`java.util.Map` @kind object;
  #L2b9a9a.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2b9aa0.  v2:= temp @kind object;
  #L2b9aa2.  call temp:= `get`(v0, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2b9aa8.  v2:= temp @kind object;
  #L2b9aaa.  v2:= (`ie.i`) v2 @kind object;
  #L2b9aae.  @monitorexit v1
  #L2b9ab0.  return v2 @kind object;
  #L2b9ab2.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2b9ab4.  @monitorexit v1
  #L2b9ab6.  throw v2;
  catch `java.lang.Throwable` @[L2b9a96..L2b9aae] goto L2b9ab2;
}
procedure `boolean` `a0`(`ie.f` v6 @kind this, `long` v7 ) @signature `Lie/f;.a0:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2b9a10.  @monitorenter v6
  #L2b9a12.  v0:= v6.`ie.f.m` @type ^`boolean` @kind boolean;
  #L2b9a16.  v1:= 0I;
  #L2b9a18.  if v0 == 0 then goto L2b9a20;
  #L2b9a1c.  @monitorexit v6
  #L2b9a1e.  return v1;
  #L2b9a20.  v2:= v6.`ie.f.t` @type ^`long` @kind wide;
  #L2b9a24.  v4:= v6.`ie.f.s` @type ^`long` @kind wide;
  #L2b9a28.  v0:= lcmp(v2, v4);
  #L2b9a2c.  if v0 >= 0 then goto L2b9a40;
  #L2b9a30.  v2:= v6.`ie.f.v` @type ^`long` @kind wide;
  #L2b9a34.  v0:= lcmp(v7, v2);
  #L2b9a38.  if v0 < 0 then goto L2b9a40;
  #L2b9a3c.  @monitorexit v6
  #L2b9a3e.  return v1;
  #L2b9a40.  v7:= 1I;
  #L2b9a42.  @monitorexit v6
  #L2b9a44.  return v7;
  #L2b9a46.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2b9a48.  @monitorexit v6
  #L2b9a4a.  throw v7;
  catch `java.lang.Throwable` @[L2b9a12..L2b9a16] goto L2b9a46;
  catch `java.lang.Throwable` @[L2b9a20..L2b9a34] goto L2b9a46;
}
procedure `void` `close`(`ie.f` v3 @kind this) @signature `Lie/f;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2b9fbc.  v0:= `@@ie.b.NO_ERROR` @type ^`ie.b` @kind object;
  #L2b9fc0.  v1:= `@@ie.b.CANCEL` @type ^`ie.b` @kind object;
  #L2b9fc4.  v2:= 0I;
  #L2b9fc6.  call `V`(v3, v0, v1, v2) @signature `Lie/f;.V:(Lie/b;Lie/b;Ljava/io/IOException;)V` @kind virtual;
  #L2b9fcc.  return @kind void;
}
procedure `int` `d0`(`ie.f` v2 @kind this) @signature `Lie/f;.d0:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2b9c74.  @monitorenter v2
  #L2b9c76.  v0:= v2.`ie.f.z` @type ^`ie.m` @kind object;
  #L2b9c7a.  v1:= 2147483647I;
  #L2b9c80.  call temp:= `e`(v0, v1) @signature `Lie/m;.e:(I)I` @kind virtual;
  #L2b9c86.  v0:= temp;
  #L2b9c88.  @monitorexit v2
  #L2b9c8a.  return v0;
  #L2b9c8c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2b9c8e.  @monitorexit v2
  #L2b9c90.  throw v0;
  catch `java.lang.Throwable` @[L2b9c76..L2b9c88] goto L2b9c8c;
}
procedure `void` `flush`(`ie.f` v1 @kind this) @signature `Lie/f;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2ba0ec.  v0:= v1.`ie.f.B` @type ^`ie.j` @kind object;
  #L2ba0f0.  call `flush`(v0) @signature `Lie/j;.flush:()V` @kind virtual;
  #L2ba0f6.  return @kind void;
}
procedure `ie.i` `j0`(`ie.f` v1 @kind this, `java.util.List` v2 @kind object, `boolean` v3 ) @signature `Lie/f;.j0:(Ljava/util/List;Z)Lie/i;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2b9c10.  v0:= 0I;
  #L2b9c12.  call temp:= `i0`(v1, v0, v2, v3) @signature `Lie/f;.i0:(ILjava/util/List;Z)Lie/i;` @kind direct;
  #L2b9c18.  v2:= temp @kind object;
  #L2b9c1a.  return v2 @kind object;
}
procedure `void` `k0`(`ie.f` v8 @kind this, `int` v9 , `okio.e` v10 @kind object, `int` v11 , `boolean` v12 ) @signature `Lie/f;.k0:(ILokio/e;IZ)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2ba108.  v5:= new `okio.c`;
  #L2ba10c.  call `<init>`(v5) @signature `Lokio/c;.<init>:()V` @kind direct;
  #L2ba112.  v0:= (`long`) v11 @kind i2l;
  #L2ba114.  call `F0`(v10, v0) @signature `Lokio/e;.F0:(J)V` @kind interface;
  #L2ba11a.  call temp:= `z0`(v10, v5, v0) @signature `Lokio/v;.z0:(Lokio/c;J)J` @kind interface;
  #L2ba120.  call temp:= `u0`(v5) @signature `Lokio/c;.u0:()J` @kind virtual;
  #L2ba126.  v2:= temp @kind wide;
  #L2ba128.  v10:= lcmp(v2, v0);
  #L2ba12c.  if v10 != 0 then goto L2ba16e;
  #L2ba130.  v10:= new `ie.f$f`;
  #L2ba134.  v0:= 2I;
  #L2ba136.  v3:= new `java.lang.Object`[v0];
  #L2ba13a.  v0:= 0I;
  #L2ba13c.  v1:= v8.`ie.f.j` @type ^`java.lang.String` @kind object;
  #L2ba140.  v3[v0]:= v1 @kind object;
  #L2ba144.  v0:= 1I;
  #L2ba146.  call temp:= `valueOf`(v9) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2ba14c.  v1:= temp @kind object;
  #L2ba14e.  v3[v0]:= v1 @kind object;
  #L2ba152.  v2:= "OkHttp %s Push Data[%s]" @kind object;
  #L2ba156.  v0:= v10 @kind object;
  #L2ba158.  v1:= v8 @kind object;
  #L2ba15a.  v4:= v9;
  #L2ba15c.  v6:= v11;
  #L2ba15e.  v7:= v12;
  #L2ba160.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lie/f$f;.<init>:(Lie/f;Ljava/lang/String;[Ljava/lang/Object;ILokio/c;IZ)V` @kind direct;
  #L2ba166.  call `l0`(v8, v10) @signature `Lie/f;.l0:(Lee/b;)V` @kind direct;
  #L2ba16c.  return @kind void;
  #L2ba16e.  v9:= new `java.io.IOException`;
  #L2ba172.  v10:= new `java.lang.StringBuilder`;
  #L2ba176.  call `<init>`(v10) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2ba17c.  call temp:= `u0`(v5) @signature `Lokio/c;.u0:()J` @kind virtual;
  #L2ba182.  v0:= temp @kind wide;
  #L2ba184.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ba18a.  v12:= " != " @kind object;
  #L2ba18e.  call temp:= `append`(v10, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ba194.  call temp:= `append`(v10, v11) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2ba19a.  call temp:= `toString`(v10) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2ba1a0.  v10:= temp @kind object;
  #L2ba1a2.  call `<init>`(v9, v10) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2ba1a8.  throw v9;
}
procedure `void` `n0`(`ie.f` v8 @kind this, `int` v9 , `java.util.List` v10 @kind object, `boolean` v11 ) @signature `Lie/f;.n0:(ILjava/util/List;Z)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2ba1f8.  v7:= new `ie.f$e`;
  #L2ba1fc.  v2:= "OkHttp %s Push Headers[%s]" @kind object;
  #L2ba200.  v0:= 2I;
  #L2ba202.  v3:= new `java.lang.Object`[v0];
  #L2ba206.  v0:= 0I;
  #L2ba208.  v1:= v8.`ie.f.j` @type ^`java.lang.String` @kind object;
  #L2ba20c.  v3[v0]:= v1 @kind object;
  #L2ba210.  v0:= 1I;
  #L2ba212.  call temp:= `valueOf`(v9) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2ba218.  v1:= temp @kind object;
  #L2ba21a.  v3[v0]:= v1 @kind object;
  #L2ba21e.  v0:= v7 @kind object;
  #L2ba220.  v1:= v8 @kind object;
  #L2ba222.  v4:= v9;
  #L2ba224.  v5:= v10 @kind object;
  #L2ba226.  v6:= v11;
  #L2ba228.  call `<init>`(v0, v1, v2, v3, v4, v5, v6) @signature `Lie/f$e;.<init>:(Lie/f;Ljava/lang/String;[Ljava/lang/Object;ILjava/util/List;Z)V` @kind direct;
  #L2ba22e.  call `l0`(v8, v7) @signature `Lie/f;.l0:(Lee/b;)V` @kind direct;
  #L2ba234.  return @kind void;
  catch `java.util.concurrent.RejectedExecutionException` @[L2ba1f8..L2ba234] goto L2ba234;
}
procedure `void` `q0`(`ie.f` v8 @kind this, `int` v9 , `java.util.List` v10 @kind object) @signature `Lie/f;.q0:(ILjava/util/List;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2ba258.  @monitorenter v8
  #L2ba25a.  v0:= v8.`ie.f.D` @type ^`java.util.Set` @kind object;
  #L2ba25e.  call temp:= `valueOf`(v9) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2ba264.  v1:= temp @kind object;
  #L2ba266.  call temp:= `contains`(v0, v1) @signature `Ljava/util/Set;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L2ba26c.  v0:= temp;
  #L2ba26e.  if v0 == 0 then goto L2ba280;
  #L2ba272.  v10:= `@@ie.b.PROTOCOL_ERROR` @type ^`ie.b` @kind object;
  #L2ba276.  call `X0`(v8, v9, v10) @signature `Lie/f;.X0:(ILie/b;)V` @kind virtual;
  #L2ba27c.  @monitorexit v8
  #L2ba27e.  return @kind void;
  #L2ba280.  v0:= v8.`ie.f.D` @type ^`java.util.Set` @kind object;
  #L2ba284.  call temp:= `valueOf`(v9) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2ba28a.  v1:= temp @kind object;
  #L2ba28c.  call temp:= `add`(v0, v1) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2ba292.  @monitorexit v8
  #L2ba294.  v0:= new `ie.f$d`;
  #L2ba298.  v4:= "OkHttp %s Push Request[%s]" @kind object;
  #L2ba29c.  v1:= 2I;
  #L2ba29e.  v5:= new `java.lang.Object`[v1];
  #L2ba2a2.  v1:= 0I;
  #L2ba2a4.  v2:= v8.`ie.f.j` @type ^`java.lang.String` @kind object;
  #L2ba2a8.  v5[v1]:= v2 @kind object;
  #L2ba2ac.  v1:= 1I;
  #L2ba2ae.  call temp:= `valueOf`(v9) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2ba2b4.  v2:= temp @kind object;
  #L2ba2b6.  v5[v1]:= v2 @kind object;
  #L2ba2ba.  v2:= v0 @kind object;
  #L2ba2bc.  v3:= v8 @kind object;
  #L2ba2be.  v6:= v9;
  #L2ba2c0.  v7:= v10 @kind object;
  #L2ba2c2.  call `<init>`(v2, v3, v4, v5, v6, v7) @signature `Lie/f$d;.<init>:(Lie/f;Ljava/lang/String;[Ljava/lang/Object;ILjava/util/List;)V` @kind direct;
  #L2ba2c8.  call `l0`(v8, v0) @signature `Lie/f;.l0:(Lee/b;)V` @kind direct;
  #L2ba2ce.  return @kind void;
  #L2ba2d0.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2ba2d2.  @monitorexit v8
  #L2ba2d4.  throw v9;
  catch `java.lang.Throwable` @[L2ba25a..L2ba294] goto L2ba2d0;
  catch `java.util.concurrent.RejectedExecutionException` @[L2ba294..L2ba2ce] goto L2ba2ce;
  catch `java.lang.Throwable` @[L2ba2d2..L2ba2d4] goto L2ba2d0;
}
procedure `void` `u0`(`ie.f` v7 @kind this, `int` v8 , `ie.b` v9 @kind object) @signature `Lie/f;.u0:(ILie/b;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2ba308.  v6:= new `ie.f$g`;
  #L2ba30c.  v0:= 2I;
  #L2ba30e.  v3:= new `java.lang.Object`[v0];
  #L2ba312.  v0:= v7.`ie.f.j` @type ^`java.lang.String` @kind object;
  #L2ba316.  v1:= 0I;
  #L2ba318.  v3[v1]:= v0 @kind object;
  #L2ba31c.  call temp:= `valueOf`(v8) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2ba322.  v0:= temp @kind object;
  #L2ba324.  v1:= 1I;
  #L2ba326.  v3[v1]:= v0 @kind object;
  #L2ba32a.  v2:= "OkHttp %s Push Reset[%s]" @kind object;
  #L2ba32e.  v0:= v6 @kind object;
  #L2ba330.  v1:= v7 @kind object;
  #L2ba332.  v4:= v8;
  #L2ba334.  v5:= v9 @kind object;
  #L2ba336.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lie/f$g;.<init>:(Lie/f;Ljava/lang/String;[Ljava/lang/Object;ILie/b;)V` @kind direct;
  #L2ba33c.  call `l0`(v7, v6) @signature `Lie/f;.l0:(Lee/b;)V` @kind direct;
  #L2ba342.  return @kind void;
}
procedure `boolean` `x0`(`ie.f` v1 @kind this, `int` v2 ) @signature `Lie/f;.x0:(I)Z` @AccessFlag  {
    temp;
    v0;

  #L2b9a70.  v0:= 1I;
  #L2b9a72.  if v2 == 0 then goto L2b9a7e;
  #L2b9a76.  v2:= v2 ^& v0 @kind int;
  #L2b9a78.  if v2 != 0 then goto L2b9a7e;
  #L2b9a7c.  goto L2b9a80;
  #L2b9a7e.  v0:= 0I;
  #L2b9a80.  return v0;
}
