record `ie.k` @kind class @AccessFlag  {
  `ie.k$a` `ie.k.a` @AccessFlag PRIVATE_FINAL;
}
global `int`[] `@@ie.k.b` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@ie.k.c` @AccessFlag PRIVATE_STATIC_FINAL;
global `ie.k` `@@ie.k.d` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lie/k;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2bd3d4.  v0:= 256I;
  #L2bd3d8.  v1:= new `int`[v0];
  #L2bd3dc.  goto L2bd404;
  #L2bd3e2.  `@@ie.k.b` @type ^`int`[] := v1 @kind object;
  #L2bd3e6.  v0:= new `byte`[v0];
  #L2bd3ea.  goto L2bd80c;
  #L2bd3f0.  `@@ie.k.c` @type ^`byte`[] := v0 @kind object;
  #L2bd3f4.  v0:= new `ie.k`;
  #L2bd3f8.  call `<init>`(v0) @signature `Lie/k;.<init>:()V` @kind direct;
  #L2bd3fe.  `@@ie.k.d` @type ^`ie.k` := v0 @kind object;
  #L2bd402.  return @kind void;
  #L2bd404.  v1:= (8184I, 8388568I, 268435426I, 268435427I, 268435428I, 268435429I, 268435430I, 268435431I, 268435432I, 16777194I, 1073741820I, 268435433I, 268435434I, 1073741821I, 268435435I, 268435436I, 268435437I, 268435438I, 268435439I, 268435440I, 268435441I, 268435442I, 1073741822I, 268435443I, 268435444I, 268435445I, 268435446I, 268435447I, 268435448I, 268435449I, 268435450I, 268435451I, 20I, 1016I, 1017I, 4090I, 8185I, 21I, 248I, 2042I, 1018I, 1019I, 249I, 2043I, 250I, 22I, 23I, 24I, 0I, 1I, 2I, 25I, 26I, 27I, 28I, 29I, 30I, 31I, 92I, 251I, 32764I, 32I, 4091I, 1020I, 8186I, 33I, 93I, 94I, 95I, 96I, 97I, 98I, 99I, 100I, 101I, 102I, 103I, 104I, 105I, 106I, 107I, 108I, 109I, 110I, 111I, 112I, 113I, 114I, 252I, 115I, 253I, 8187I, 524272I, 8188I, 16380I, 34I, 32765I, 3I, 35I, 4I, 36I, 5I, 37I, 38I, 39I, 6I, 116I, 117I, 40I, 41I, 42I, 7I, 43I, 118I, 44I, 8I, 9I, 45I, 119I, 120I, 121I, 122I, 123I, 32766I, 2044I, 16381I, 8189I, 268435452I, 1048550I, 4194258I, 1048551I, 1048552I, 4194259I, 4194260I, 4194261I, 8388569I, 4194262I, 8388570I, 8388571I, 8388572I, 8388573I, 8388574I, 16777195I, 8388575I, 16777196I, 16777197I, 4194263I, 8388576I, 16777198I, 8388577I, 8388578I, 8388579I, 8388580I, 2097116I, 4194264I, 8388581I, 4194265I, 8388582I, 8388583I, 16777199I, 4194266I, 2097117I, 1048553I, 4194267I, 4194268I, 8388584I, 8388585I, 2097118I, 8388586I, 4194269I, 4194270I, 16777200I, 2097119I, 4194271I, 8388587I, 8388588I, 2097120I, 2097121I, 4194272I, 2097122I, 8388589I, 4194273I, 8388590I, 8388591I, 1048554I, 4194274I, 4194275I, 4194276I, 8388592I, 4194277I, 4194278I, 8388593I, 67108832I, 67108833I, 1048555I, 524273I, 4194279I, 8388594I, 4194280I, 33554412I, 67108834I, 67108835I, 67108836I, 134217694I, 134217695I, 67108837I, 16777201I, 33554413I, 524274I, 2097123I, 67108838I, 134217696I, 134217697I, 67108839I, 134217698I, 16777202I, 2097124I, 2097125I, 67108840I, 67108841I, 268435453I, 134217699I, 134217700I, 134217701I, 1048556I, 16777203I, 1048557I, 2097126I, 4194281I, 2097127I, 2097128I, 8388595I, 4194282I, 4194283I, 33554414I, 33554415I, 16777204I, 16777205I, 67108842I, 8388596I, 67108843I, 134217702I, 67108844I, 67108845I, 134217703I, 134217704I, 134217705I, 134217706I, 134217707I, 268435454I, 134217708I, 134217709I, 134217710I, 134217711I, 134217712I, 67108846I) @kind object;
  #L2bd80b.  goto L2bd3e2;
  #L2bd80c.  v0:= (13I, 23I, 28I, 28I, 28I, 28I, 28I, 28I, 28I, 24I, 30I, 28I, 28I, 30I, 28I, 28I, 28I, 28I, 28I, 28I, 28I, 28I, 30I, 28I, 28I, 28I, 28I, 28I, 28I, 28I, 28I, 28I, 6I, 10I, 10I, 12I, 13I, 6I, 8I, 11I, 10I, 10I, 8I, 11I, 8I, 6I, 6I, 6I, 5I, 5I, 5I, 6I, 6I, 6I, 6I, 6I, 6I, 6I, 7I, 8I, 15I, 6I, 12I, 10I, 13I, 6I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 7I, 8I, 7I, 8I, 13I, 19I, 13I, 14I, 6I, 15I, 5I, 6I, 5I, 6I, 5I, 6I, 6I, 6I, 5I, 7I, 7I, 6I, 6I, 6I, 5I, 6I, 7I, 6I, 5I, 5I, 6I, 7I, 7I, 7I, 7I, 7I, 15I, 11I, 14I, 13I, 28I, 20I, 22I, 20I, 20I, 22I, 22I, 22I, 23I, 22I, 23I, 23I, 23I, 23I, 23I, 24I, 23I, 24I, 24I, 22I, 23I, 24I, 23I, 23I, 23I, 23I, 21I, 22I, 23I, 22I, 23I, 23I, 24I, 22I, 21I, 20I, 22I, 22I, 23I, 23I, 21I, 23I, 22I, 22I, 24I, 21I, 22I, 23I, 23I, 21I, 21I, 22I, 21I, 23I, 22I, 23I, 23I, 20I, 22I, 22I, 22I, 23I, 22I, 22I, 23I, 26I, 26I, 20I, 19I, 22I, 23I, 22I, 25I, 26I, 26I, 26I, 27I, 27I, 26I, 24I, 25I, 19I, 21I, 26I, 27I, 27I, 26I, 27I, 24I, 21I, 21I, 26I, 26I, 28I, 27I, 27I, 27I, 20I, 24I, 20I, 21I, 22I, 21I, 21I, 23I, 22I, 22I, 25I, 25I, 24I, 24I, 26I, 23I, 26I, 27I, 26I, 26I, 27I, 27I, 27I, 27I, 27I, 28I, 27I, 27I, 27I, 27I, 27I, 26I) @kind object;
  #L2bd913.  goto L2bd3f0;
}
procedure `void` `<init>`(`ie.k` v1 @kind this) @signature `Lie/k;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L2bd924.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2bd92a.  v0:= new `ie.k$a`;
  #L2bd92e.  call `<init>`(v0) @signature `Lie/k$a;.<init>:()V` @kind direct;
  #L2bd934.  v1.`ie.k.a` @type ^`ie.k$a` := v0 @kind object;
  #L2bd938.  call `b`(v1) @signature `Lie/k;.b:()V` @kind direct;
  #L2bd93e.  return @kind void;
}
procedure `void` `a`(`ie.k` v4 @kind this, `int` v5 , `int` v6 , `byte` v7 ) @signature `Lie/k;.a:(IIB)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2bd950.  v0:= new `ie.k$a`;
  #L2bd954.  call `<init>`(v0, v5, v7) @signature `Lie/k$a;.<init>:(II)V` @kind direct;
  #L2bd95a.  v5:= v4.`ie.k.a` @type ^`ie.k$a` @kind object;
  #L2bd95e.  v1:= 8I;
  #L2bd962.  if v7 <= v1 then goto L2bd9ac;
  #L2bd966.  v7:= v7 + -8;
  #L2bd96a.  v7:= (`byte`) v7 @kind i2b;
  #L2bd96c.  v1:= v6 ^>> v7 @kind int;
  #L2bd970.  v1:= v1 ^& 255;
  #L2bd974.  v2:= v5.`ie.k$a.a` @type ^`ie.k$a`[] @kind object;
  #L2bd978.  if v2 == 0 then goto L2bd99c;
  #L2bd97c.  v3:= v2[v1] @kind object;
  #L2bd980.  if v3 != 0 then goto L2bd992;
  #L2bd984.  v3:= new `ie.k$a`;
  #L2bd988.  call `<init>`(v3) @signature `Lie/k$a;.<init>:()V` @kind direct;
  #L2bd98e.  v2[v1]:= v3 @kind object;
  #L2bd992.  v5:= v5.`ie.k$a.a` @type ^`ie.k$a`[] @kind object;
  #L2bd996.  v5:= v5[v1] @kind object;
  #L2bd99a.  goto L2bd95e;
  #L2bd99c.  v5:= new `java.lang.IllegalStateException`;
  #L2bd9a0.  v6:= "invalid dictionary: prefix not unique" @kind object;
  #L2bd9a4.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2bd9aa.  throw v5;
  #L2bd9ac.  v1:= v1 - v7 @kind int;
  #L2bd9ae.  v6:= v6 ^< v1 @kind int;
  #L2bd9b0.  v6:= v6 ^& 255;
  #L2bd9b4.  v7:= 1I;
  #L2bd9b6.  v7:= v7 ^< v1 @kind int;
  #L2bd9b8.  v1:= v6;
  #L2bd9ba.  v2:= v6 + v7 @kind int;
  #L2bd9be.  if v1 >= v2 then goto L2bd9d0;
  #L2bd9c2.  v2:= v5.`ie.k$a.a` @type ^`ie.k$a`[] @kind object;
  #L2bd9c6.  v2[v1]:= v0 @kind object;
  #L2bd9ca.  v1:= v1 + 1;
  #L2bd9ce.  goto L2bd9ba;
  #L2bd9d0.  return @kind void;
}
procedure `void` `b`(`ie.k` v3 @kind this) @signature `Lie/k;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2bd9e4.  v0:= 0I;
  #L2bd9e6.  v1:= `@@ie.k.c` @type ^`byte`[] @kind object;
  #L2bd9ea.  v2:= length @variable v1;
  #L2bd9ec.  if v0 >= v2 then goto L2bda08;
  #L2bd9f0.  v2:= `@@ie.k.b` @type ^`int`[] @kind object;
  #L2bd9f4.  v2:= v2[v0];
  #L2bd9f8.  v1:= v1[v0] @kind byte;
  #L2bd9fc.  call `a`(v3, v0, v2, v1) @signature `Lie/k;.a:(IIB)V` @kind direct;
  #L2bda02.  v0:= v0 + 1;
  #L2bda06.  goto L2bd9e6;
  #L2bda08.  return @kind void;
}
procedure `ie.k` `f`() @signature `Lie/k;.f:()Lie/k;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2bd36c.  v0:= `@@ie.k.d` @type ^`ie.k` @kind object;
  #L2bd370.  return v0 @kind object;
}
procedure `byte`[] `c`(`ie.k` v6 @kind this, `byte`[] v7 @kind object) @signature `Lie/k;.c:([B)[B` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2bd2a0.  v0:= new `java.io.ByteArrayOutputStream`;
  #L2bd2a4.  call `<init>`(v0) @signature `Ljava/io/ByteArrayOutputStream;.<init>:()V` @kind direct;
  #L2bd2aa.  v1:= v6.`ie.k.a` @type ^`ie.k$a` @kind object;
  #L2bd2ae.  v2:= 0I;
  #L2bd2b0.  v3:= 0I;
  #L2bd2b2.  v4:= 0I;
  #L2bd2b4.  v5:= length @variable v7;
  #L2bd2b6.  if v2 >= v5 then goto L2bd312;
  #L2bd2ba.  v5:= v7[v2] @kind byte;
  #L2bd2be.  v5:= v5 ^& 255;
  #L2bd2c2.  v3:= v3 ^< 8;
  #L2bd2c6.  v3:= v3 ^| v5 @kind int;
  #L2bd2c8.  v4:= v4 + 8;
  #L2bd2cc.  v5:= 8I;
  #L2bd2d0.  if v4 < v5 then goto L2bd30c;
  #L2bd2d4.  v5:= v4 + -8;
  #L2bd2d8.  v5:= v3 ^>> v5 @kind int;
  #L2bd2dc.  v5:= v5 ^& 255;
  #L2bd2e0.  v1:= v1.`ie.k$a.a` @type ^`ie.k$a`[] @kind object;
  #L2bd2e4.  v1:= v1[v5] @kind object;
  #L2bd2e8.  v5:= v1.`ie.k$a.a` @type ^`ie.k$a`[] @kind object;
  #L2bd2ec.  if v5 != 0 then goto L2bd306;
  #L2bd2f0.  v5:= v1.`ie.k$a.b` @type ^`int`;
  #L2bd2f4.  call `write`(v0, v5) @signature `Ljava/io/ByteArrayOutputStream;.write:(I)V` @kind virtual;
  #L2bd2fa.  v1:= v1.`ie.k$a.c` @type ^`int`;
  #L2bd2fe.  v4:= v4 - v1 @kind int;
  #L2bd300.  v1:= v6.`ie.k.a` @type ^`ie.k$a` @kind object;
  #L2bd304.  goto L2bd2cc;
  #L2bd306.  v4:= v4 + -8;
  #L2bd30a.  goto L2bd2cc;
  #L2bd30c.  v2:= v2 + 1;
  #L2bd310.  goto L2bd2b4;
  #L2bd312.  if v4 <= 0 then goto L2bd352;
  #L2bd316.  v7:= v4 - 8;
  #L2bd31a.  v7:= v3 ^< v7 @kind int;
  #L2bd31e.  v7:= v7 ^& 255;
  #L2bd322.  v1:= v1.`ie.k$a.a` @type ^`ie.k$a`[] @kind object;
  #L2bd326.  v7:= v1[v7] @kind object;
  #L2bd32a.  v1:= v7.`ie.k$a.a` @type ^`ie.k$a`[] @kind object;
  #L2bd32e.  if v1 != 0 then goto L2bd352;
  #L2bd332.  v1:= v7.`ie.k$a.c` @type ^`int`;
  #L2bd336.  if v1 <= v4 then goto L2bd33c;
  #L2bd33a.  goto L2bd352;
  #L2bd33c.  v1:= v7.`ie.k$a.b` @type ^`int`;
  #L2bd340.  call `write`(v0, v1) @signature `Ljava/io/ByteArrayOutputStream;.write:(I)V` @kind virtual;
  #L2bd346.  v7:= v7.`ie.k$a.c` @type ^`int`;
  #L2bd34a.  v4:= v4 - v7 @kind int;
  #L2bd34c.  v1:= v6.`ie.k.a` @type ^`ie.k$a` @kind object;
  #L2bd350.  goto L2bd312;
  #L2bd352.  call temp:= `toByteArray`(v0) @signature `Ljava/io/ByteArrayOutputStream;.toByteArray:()[B` @kind virtual;
  #L2bd358.  v7:= temp @kind object;
  #L2bd35a.  return v7 @kind object;
}
procedure `void` `d`(`ie.k` v7 @kind this, `okio.f` v8 @kind object, `okio.d` v9 @kind object) @signature `Lie/k;.d:(Lokio/f;Lokio/d;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2bda1c.  v0:= 0I;
  #L2bda1e.  v1:= 0L;
  #L2bda22.  v2:= v1 @kind wide;
  #L2bda24.  v1:= 0I;
  #L2bda26.  call temp:= `size`(v8) @signature `Lokio/f;.size:()I` @kind virtual;
  #L2bda2c.  v4:= temp;
  #L2bda2e.  v5:= 255I;
  #L2bda32.  if v0 >= v4 then goto L2bda78;
  #L2bda36.  call temp:= `getByte`(v8, v0) @signature `Lokio/f;.getByte:(I)B` @kind virtual;
  #L2bda3c.  v4:= temp;
  #L2bda3e.  v4:= v4 ^& v5 @kind int;
  #L2bda40.  v5:= `@@ie.k.b` @type ^`int`[] @kind object;
  #L2bda44.  v5:= v5[v4];
  #L2bda48.  v6:= `@@ie.k.c` @type ^`byte`[] @kind object;
  #L2bda4c.  v4:= v6[v4] @kind byte;
  #L2bda50.  v2:= v2 ^< v4 @kind long;
  #L2bda52.  v5:= (`long`) v5 @kind i2l;
  #L2bda54.  v2:= v2 ^| v5 @kind long;
  #L2bda56.  v1:= v1 + v4 @kind int;
  #L2bda58.  v4:= 8I;
  #L2bda5c.  if v1 < v4 then goto L2bda72;
  #L2bda60.  v1:= v1 + -8;
  #L2bda64.  v4:= v2 ^> v1 @kind long;
  #L2bda68.  v5:= (`int`) v4 @kind l2i;
  #L2bda6a.  call temp:= `I`(v9, v5) @signature `Lokio/d;.I:(I)Lokio/d;` @kind interface;
  #L2bda70.  goto L2bda58;
  #L2bda72.  v0:= v0 + 1;
  #L2bda76.  goto L2bda26;
  #L2bda78.  if v1 <= 0 then goto L2bda92;
  #L2bda7c.  v8:= v1 - 8;
  #L2bda80.  v2:= v2 ^< v8 @kind long;
  #L2bda82.  v8:= v5 ^>> v1 @kind int;
  #L2bda86.  v0:= (`long`) v8 @kind i2l;
  #L2bda88.  v0:= v0 ^| v2 @kind long;
  #L2bda8a.  v8:= (`int`) v0 @kind l2i;
  #L2bda8c.  call temp:= `I`(v9, v8) @signature `Lokio/d;.I:(I)Lokio/d;` @kind interface;
  #L2bda92.  return @kind void;
}
procedure `int` `e`(`ie.k` v5 @kind this, `okio.f` v6 @kind object) @signature `Lie/k;.e:(Lokio/f;)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2bd384.  v0:= 0L;
  #L2bd388.  v2:= 0I;
  #L2bd38a.  call temp:= `size`(v6) @signature `Lokio/f;.size:()I` @kind virtual;
  #L2bd390.  v3:= temp;
  #L2bd392.  if v2 >= v3 then goto L2bd3b4;
  #L2bd396.  call temp:= `getByte`(v6, v2) @signature `Lokio/f;.getByte:(I)B` @kind virtual;
  #L2bd39c.  v3:= temp;
  #L2bd39e.  v3:= v3 ^& 255;
  #L2bd3a2.  v4:= `@@ie.k.c` @type ^`byte`[] @kind object;
  #L2bd3a6.  v3:= v4[v3] @kind byte;
  #L2bd3aa.  v3:= (`long`) v3 @kind i2l;
  #L2bd3ac.  v0:= v0 + v3 @kind long;
  #L2bd3ae.  v2:= v2 + 1;
  #L2bd3b2.  goto L2bd38a;
  #L2bd3b4.  v2:= 7L;
  #L2bd3b8.  v0:= v0 + v2 @kind long;
  #L2bd3ba.  v6:= 3I;
  #L2bd3bc.  v0:= v0 ^> v6 @kind long;
  #L2bd3be.  v6:= (`int`) v0 @kind l2i;
  #L2bd3c0.  return v6;
}
