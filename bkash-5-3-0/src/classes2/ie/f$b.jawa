record `ie.f$b` @kind class @AccessFlag  extends `ee.b` @kind class {
  `int` `ie.f$b.h` @AccessFlag FINAL_SYNTHETIC;
  `long` `ie.f$b.i` @AccessFlag FINAL_SYNTHETIC;
  `ie.f` `ie.f$b.j` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`ie.f$b` v0 @kind this, `ie.f` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.Object`[] v3 @kind object, `int` v4 , `long` v5 ) @signature `Lie/f$b;.<init>:(Lie/f;Ljava/lang/String;[Ljava/lang/Object;IJ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2b8c1c.  v0.`ie.f$b.j` @type ^`ie.f` := v1 @kind object;
  #L2b8c20.  v0.`ie.f$b.h` @type ^`int` := v4;
  #L2b8c24.  v0.`ie.f$b.i` @type ^`long` := v5 @kind wide;
  #L2b8c28.  call `<init>`(v0, v2, v3) @signature `Lee/b;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L2b8c2e.  return @kind void;
}
procedure `void` `k`(`ie.f$b` v4 @kind this) @signature `Lie/f$b;.k:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2b8c40.  v0:= v4.`ie.f$b.j` @type ^`ie.f` @kind object;
  #L2b8c44.  v0:= v0.`ie.f.B` @type ^`ie.j` @kind object;
  #L2b8c48.  v1:= v4.`ie.f$b.h` @type ^`int`;
  #L2b8c4c.  v2:= v4.`ie.f$b.i` @type ^`long` @kind wide;
  #L2b8c50.  call `Y`(v0, v1, v2) @signature `Lie/j;.Y:(IJ)V` @kind virtual;
  #L2b8c56.  goto L2b8c64;
  #L2b8c58.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L2b8c5a.  v1:= v4.`ie.f$b.j` @type ^`ie.f` @kind object;
  #L2b8c5e.  call `e`(v1, v0) @signature `Lie/f;.e:(Lie/f;Ljava/io/IOException;)V` @kind static;
  #L2b8c64.  return @kind void;
  catch `java.io.IOException` @[L2b8c40..L2b8c56] goto L2b8c58;
}
