record `kd.a` @kind class @AccessFlag PUBLIC_FINAL extends `jd.c` @kind interface {
  `java.util.concurrent.atomic.AtomicLong` `kd.a.g` @AccessFlag FINAL;
  `int` `kd.a.h` @AccessFlag ;
  `long` `kd.a.i` @AccessFlag ;
  `int` `kd.a.j` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReferenceArray` `kd.a.k` @AccessFlag ;
  `int` `kd.a.l` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReferenceArray` `kd.a.m` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `kd.a.n` @AccessFlag FINAL;
}
global `int` `@@kd.a.o` @AccessFlag STATIC_FINAL;
global `java.lang.Object` `@@kd.a.p` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkd/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L304744.  v0:= "jctools.spsc.max.lookahead.step" @kind object;
  #L304748.  v1:= 4096I;
  #L30474c.  call temp:= `getInteger`(v0, v1) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L304752.  v0:= temp @kind object;
  #L304754.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L30475a.  v0:= temp;
  #L30475c.  `@@kd.a.o` @type ^`int` := v0;
  #L304760.  v0:= new `java.lang.Object`;
  #L304764.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L30476a.  `@@kd.a.p` @type ^`java.lang.Object` := v0 @kind object;
  #L30476e.  return @kind void;
}
procedure `void` `<init>`(`kd.a` v3 @kind this, `int` v4 ) @signature `Lkd/a;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L304780.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L304786.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L30478a.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L304790.  v3.`kd.a.g` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L304794.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L304798.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L30479e.  v3.`kd.a.n` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L3047a2.  v0:= 8I;
  #L3047a6.  call temp:= `max`(v0, v4) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L3047ac.  v4:= temp;
  #L3047ae.  call temp:= `a`(v4) @signature `Lio/reactivex/rxjava3/internal/util/c;.a:(I)I` @kind static;
  #L3047b4.  v4:= temp;
  #L3047b6.  v0:= v4 + -1;
  #L3047ba.  v1:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L3047be.  v2:= v4 + 1;
  #L3047c2.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L3047c8.  v3.`kd.a.k` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v1 @kind object;
  #L3047cc.  v3.`kd.a.j` @type ^`int` := v0;
  #L3047d0.  call `a`(v3, v4) @signature `Lkd/a;.a:(I)V` @kind direct;
  #L3047d6.  v3.`kd.a.m` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v1 @kind object;
  #L3047da.  v3.`kd.a.l` @type ^`int` := v0;
  #L3047de.  v0:= v0 + -1;
  #L3047e2.  v0:= (`long`) v0 @kind i2l;
  #L3047e4.  v3.`kd.a.i` @type ^`long` := v0 @kind wide;
  #L3047e8.  v0:= 0L;
  #L3047ec.  call `o`(v3, v0) @signature `Lkd/a;.o:(J)V` @kind direct;
  #L3047f2.  return @kind void;
}
procedure `void` `a`(`kd.a` v1 @kind this, `int` v2 ) @signature `Lkd/a;.a:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L304804.  v2:= v2 / 4;
  #L304808.  v0:= `@@kd.a.o` @type ^`int`;
  #L30480c.  call temp:= `min`(v2, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L304812.  v2:= temp;
  #L304814.  v1.`kd.a.h` @type ^`int` := v2;
  #L304818.  return @kind void;
}
procedure `int` `b`(`int` v0 ) @signature `Lkd/a;.b:(I)I` @AccessFlag PRIVATE_STATIC {
    temp;

  #L30458c.  return v0;
}
procedure `int` `c`(`long` v0 , `int` v2 ) @signature `Lkd/a;.c:(JI)I` @AccessFlag PRIVATE_STATIC {
    temp;

  #L3045a0.  v1:= (`int`) v0 @kind l2i;
  #L3045a2.  v0:= v1 ^& v2 @kind int;
  #L3045a6.  call temp:= `b`(v0) @signature `Lkd/a;.b:(I)I` @kind static;
  #L3045ac.  v0:= temp;
  #L3045ae.  return v0;
}
procedure `long` `d`(`kd.a` v2 @kind this) @signature `Lkd/a;.d:()J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3046c4.  v0:= v2.`kd.a.n` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3046c8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L3046ce.  v0:= temp @kind wide;
  #L3046d0.  return v0 @kind wide;
}
procedure `long` `e`(`kd.a` v2 @kind this) @signature `Lkd/a;.e:()J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3046e4.  v0:= v2.`kd.a.g` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3046e8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L3046ee.  v0:= temp @kind wide;
  #L3046f0.  return v0 @kind wide;
}
procedure `long` `f`(`kd.a` v2 @kind this) @signature `Lkd/a;.f:()J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L304704.  v0:= v2.`kd.a.n` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L304708.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L30470e.  v0:= temp @kind wide;
  #L304710.  return v0 @kind wide;
}
procedure `java.lang.Object` `g`(`java.util.concurrent.atomic.AtomicReferenceArray` v0 @kind object, `int` v1 ) @signature `Lkd/a;.g:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;` @AccessFlag PRIVATE_STATIC {
    temp;

  #L3045c0.  call temp:= `get`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L3045c6.  v0:= temp @kind object;
  #L3045c8.  return v0 @kind object;
}
procedure `java.util.concurrent.atomic.AtomicReferenceArray` `h`(`kd.a` v2 @kind this, `java.util.concurrent.atomic.AtomicReferenceArray` v3 @kind object, `int` v4 ) @signature `Lkd/a;.h:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/util/concurrent/atomic/AtomicReferenceArray;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L304694.  call temp:= `b`(v4) @signature `Lkd/a;.b:(I)I` @kind static;
  #L30469a.  v4:= temp;
  #L30469c.  call temp:= `g`(v3, v4) @signature `Lkd/a;.g:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;` @kind static;
  #L3046a2.  v0:= temp @kind object;
  #L3046a4.  v0:= (`java.util.concurrent.atomic.AtomicReferenceArray`) v0 @kind object;
  #L3046a8.  v1:= 0I;
  #L3046aa.  call `m`(v3, v4, v1) @signature `Lkd/a;.m:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L3046b0.  return v0 @kind object;
}
procedure `long` `i`(`kd.a` v2 @kind this) @signature `Lkd/a;.i:()J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L304724.  v0:= v2.`kd.a.g` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L304728.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L30472e.  v0:= temp @kind wide;
  #L304730.  return v0 @kind wide;
}
procedure `java.lang.Object` `j`(`kd.a` v3 @kind this, `java.util.concurrent.atomic.AtomicReferenceArray` v4 @kind object, `long` v5 , `int` v7 ) @signature `Lkd/a;.j:(Ljava/util/concurrent/atomic/AtomicReferenceArray;JI)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3045dc.  v3.`kd.a.m` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v4 @kind object;
  #L3045e0.  call temp:= `c`(v5, v7) @signature `Lkd/a;.c:(JI)I` @kind static;
  #L3045e6.  v7:= temp;
  #L3045e8.  call temp:= `g`(v4, v7) @signature `Lkd/a;.g:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;` @kind static;
  #L3045ee.  v0:= temp @kind object;
  #L3045f0.  if v0 == 0 then goto L304608;
  #L3045f4.  v1:= 0I;
  #L3045f6.  call `m`(v4, v7, v1) @signature `Lkd/a;.m:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L3045fc.  v1:= 1L;
  #L304600.  v5:= v5 + v1 @kind long;
  #L304602.  call `l`(v3, v5) @signature `Lkd/a;.l:(J)V` @kind direct;
  #L304608.  return v0 @kind object;
}
procedure `void` `k`(`kd.a` v4 @kind this, `java.util.concurrent.atomic.AtomicReferenceArray` v5 @kind object, `long` v6 , `int` v8 , `java.lang.Object` v9 @kind object, `long` v10 ) @signature `Lkd/a;.k:(Ljava/util/concurrent/atomic/AtomicReferenceArray;JILjava/lang/Object;J)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L304858.  call temp:= `length`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L30485e.  v0:= temp;
  #L304860.  v1:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L304864.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L30486a.  v4.`kd.a.k` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v1 @kind object;
  #L30486e.  v10:= v10 + v6 @kind long;
  #L304870.  v2:= 1L;
  #L304874.  v10:= v10 - v2 @kind long;
  #L304876.  v4.`kd.a.i` @type ^`long` := v10 @kind wide;
  #L30487a.  call `m`(v1, v8, v9) @signature `Lkd/a;.m:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L304880.  call `n`(v4, v5, v1) @signature `Lkd/a;.n:(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/util/concurrent/atomic/AtomicReferenceArray;)V` @kind direct;
  #L304886.  v9:= `@@kd.a.p` @type ^`java.lang.Object` @kind object;
  #L30488a.  call `m`(v5, v8, v9) @signature `Lkd/a;.m:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L304890.  v6:= v6 + v2 @kind long;
  #L304892.  call `o`(v4, v6) @signature `Lkd/a;.o:(J)V` @kind direct;
  #L304898.  return @kind void;
}
procedure `void` `l`(`kd.a` v1 @kind this, `long` v2 ) @signature `Lkd/a;.l:(J)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3048ac.  v0:= v1.`kd.a.n` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L3048b0.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.lazySet:(J)V` @kind virtual;
  #L3048b6.  return @kind void;
}
procedure `void` `m`(`java.util.concurrent.atomic.AtomicReferenceArray` v0 @kind object, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Lkd/a;.m:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @AccessFlag PRIVATE_STATIC {
    temp;

  #L3048c8.  call `lazySet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L3048ce.  return @kind void;
}
procedure `void` `n`(`kd.a` v1 @kind this, `java.util.concurrent.atomic.AtomicReferenceArray` v2 @kind object, `java.util.concurrent.atomic.AtomicReferenceArray` v3 @kind object) @signature `Lkd/a;.n:(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/util/concurrent/atomic/AtomicReferenceArray;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L3048e0.  call temp:= `length`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L3048e6.  v0:= temp;
  #L3048e8.  v0:= v0 + -1;
  #L3048ec.  call temp:= `b`(v0) @signature `Lkd/a;.b:(I)I` @kind static;
  #L3048f2.  v0:= temp;
  #L3048f4.  call `m`(v2, v0, v3) @signature `Lkd/a;.m:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L3048fa.  return @kind void;
}
procedure `void` `o`(`kd.a` v1 @kind this, `long` v2 ) @signature `Lkd/a;.o:(J)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L30490c.  v0:= v1.`kd.a.g` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L304910.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.lazySet:(J)V` @kind virtual;
  #L304916.  return @kind void;
}
procedure `boolean` `p`(`kd.a` v0 @kind this, `java.util.concurrent.atomic.AtomicReferenceArray` v1 @kind object, `java.lang.Object` v2 @kind object, `long` v3 , `int` v5 ) @signature `Lkd/a;.p:(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/lang/Object;JI)Z` @AccessFlag PRIVATE {
    temp;

  #L304564.  call `m`(v1, v5, v2) @signature `Lkd/a;.m:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L30456a.  v1:= 1L;
  #L30456e.  v3:= v3 + v1 @kind long;
  #L304570.  call `o`(v0, v3) @signature `Lkd/a;.o:(J)V` @kind direct;
  #L304576.  v1:= 1I;
  #L304578.  return v1;
}
procedure `void` `clear`(`kd.a` v1 @kind this) @signature `Lkd/a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30482c.  call temp:= `poll`(v1) @signature `Lkd/a;.poll:()Ljava/lang/Object;` @kind virtual;
  #L304832.  v0:= temp @kind object;
  #L304834.  if v0 != 0 then goto L30482c;
  #L304838.  call temp:= `isEmpty`(v1) @signature `Lkd/a;.isEmpty:()Z` @kind virtual;
  #L30483e.  v0:= temp;
  #L304840.  if v0 != 0 then goto L304846;
  #L304844.  goto L30482c;
  #L304846.  return @kind void;
}
procedure `boolean` `isEmpty`(`kd.a` v5 @kind this) @signature `Lkd/a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L30447c.  call temp:= `i`(v5) @signature `Lkd/a;.i:()J` @kind direct;
  #L304482.  v0:= temp @kind wide;
  #L304484.  call temp:= `f`(v5) @signature `Lkd/a;.f:()J` @kind direct;
  #L30448a.  v2:= temp @kind wide;
  #L30448c.  v4:= lcmp(v0, v2);
  #L304490.  if v4 != 0 then goto L304498;
  #L304494.  v0:= 1I;
  #L304496.  goto L30449a;
  #L304498.  v0:= 0I;
  #L30449a.  return v0;
}
procedure `boolean` `offer`(`kd.a` v11 @kind this, `java.lang.Object` v12 @kind object) @signature `Lkd/a;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L3044ac.  v0:= "Null is not a valid element" @kind object;
  #L3044b0.  call temp:= `requireNonNull`(v12, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L3044b6.  v2:= v11.`kd.a.k` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L3044ba.  call temp:= `e`(v11) @signature `Lkd/a;.e:()J` @kind direct;
  #L3044c0.  v4:= temp @kind wide;
  #L3044c2.  v0:= v11.`kd.a.j` @type ^`int`;
  #L3044c6.  call temp:= `c`(v4, v0) @signature `Lkd/a;.c:(JI)I` @kind static;
  #L3044cc.  v6:= temp;
  #L3044ce.  v7:= v11.`kd.a.i` @type ^`long` @kind wide;
  #L3044d2.  v1:= lcmp(v4, v7);
  #L3044d6.  if v1 >= 0 then goto L3044e8;
  #L3044da.  v1:= v11 @kind object;
  #L3044dc.  v3:= v12 @kind object;
  #L3044de.  call temp:= `p`(v1, v2, v3, v4, v6) @signature `Lkd/a;.p:(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/lang/Object;JI)Z` @kind direct;
  #L3044e4.  v12:= temp;
  #L3044e6.  return v12;
  #L3044e8.  v1:= v11.`kd.a.h` @type ^`int`;
  #L3044ec.  v7:= (`long`) v1 @kind i2l;
  #L3044ee.  v7:= v7 + v4 @kind long;
  #L3044f0.  call temp:= `c`(v7, v0) @signature `Lkd/a;.c:(JI)I` @kind static;
  #L3044f6.  v1:= temp;
  #L3044f8.  call temp:= `g`(v2, v1) @signature `Lkd/a;.g:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;` @kind static;
  #L3044fe.  v1:= temp @kind object;
  #L304500.  v9:= 1L;
  #L304504.  if v1 != 0 then goto L30451c;
  #L304508.  v7:= v7 - v9 @kind long;
  #L30450a.  v11.`kd.a.i` @type ^`long` := v7 @kind wide;
  #L30450e.  v1:= v11 @kind object;
  #L304510.  v3:= v12 @kind object;
  #L304512.  call temp:= `p`(v1, v2, v3, v4, v6) @signature `Lkd/a;.p:(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/lang/Object;JI)Z` @kind direct;
  #L304518.  v12:= temp;
  #L30451a.  return v12;
  #L30451c.  v9:= v9 + v4 @kind long;
  #L30451e.  call temp:= `c`(v9, v0) @signature `Lkd/a;.c:(JI)I` @kind static;
  #L304524.  v1:= temp;
  #L304526.  call temp:= `g`(v2, v1) @signature `Lkd/a;.g:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;` @kind static;
  #L30452c.  v1:= temp @kind object;
  #L30452e.  if v1 != 0 then goto L304540;
  #L304532.  v1:= v11 @kind object;
  #L304534.  v3:= v12 @kind object;
  #L304536.  call temp:= `p`(v1, v2, v3, v4, v6) @signature `Lkd/a;.p:(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/lang/Object;JI)Z` @kind direct;
  #L30453c.  v12:= temp;
  #L30453e.  return v12;
  #L304540.  v7:= (`long`) v0 @kind i2l;
  #L304542.  v1:= v11 @kind object;
  #L304544.  v3:= v4 @kind wide;
  #L304546.  v5:= v6;
  #L304548.  v6:= v12 @kind object;
  #L30454a.  call `k`(v1, v2, v3, v5, v6, v7) @signature `Lkd/a;.k:(Ljava/util/concurrent/atomic/AtomicReferenceArray;JILjava/lang/Object;J)V` @kind direct;
  #L304550.  v12:= 1I;
  #L304552.  return v12;
}
procedure `java.lang.Object` `poll`(`kd.a` v8 @kind this) @signature `Lkd/a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L30461c.  v0:= v8.`kd.a.m` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L304620.  call temp:= `d`(v8) @signature `Lkd/a;.d:()J` @kind direct;
  #L304626.  v1:= temp @kind wide;
  #L304628.  v3:= v8.`kd.a.l` @type ^`int`;
  #L30462c.  call temp:= `c`(v1, v3) @signature `Lkd/a;.c:(JI)I` @kind static;
  #L304632.  v4:= temp;
  #L304634.  call temp:= `g`(v0, v4) @signature `Lkd/a;.g:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;` @kind static;
  #L30463a.  v5:= temp @kind object;
  #L30463c.  v6:= `@@kd.a.p` @type ^`java.lang.Object` @kind object;
  #L304640.  if v5 != v6 then goto L304648;
  #L304644.  v6:= 1I;
  #L304646.  goto L30464a;
  #L304648.  v6:= 0I;
  #L30464a.  v7:= 0I;
  #L30464c.  if v5 == 0 then goto L304668;
  #L304650.  if v6 != 0 then goto L304668;
  #L304654.  call `m`(v0, v4, v7) @signature `Lkd/a;.m:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L30465a.  v3:= 1L;
  #L30465e.  v1:= v1 + v3 @kind long;
  #L304660.  call `l`(v8, v1) @signature `Lkd/a;.l:(J)V` @kind direct;
  #L304666.  return v5 @kind object;
  #L304668.  if v6 == 0 then goto L304682;
  #L30466c.  v4:= v3 + 1;
  #L304670.  call temp:= `h`(v8, v0, v4) @signature `Lkd/a;.h:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/util/concurrent/atomic/AtomicReferenceArray;` @kind direct;
  #L304676.  v0:= temp @kind object;
  #L304678.  call temp:= `j`(v8, v0, v1, v3) @signature `Lkd/a;.j:(Ljava/util/concurrent/atomic/AtomicReferenceArray;JI)Ljava/lang/Object;` @kind direct;
  #L30467e.  v0:= temp @kind object;
  #L304680.  return v0 @kind object;
  #L304682.  return v7 @kind object;
}
