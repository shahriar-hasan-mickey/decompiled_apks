record `u9.c` @kind class @AccessFlag PUBLIC extends `java.io.Closeable` @kind interface, `java.io.Flushable` @kind interface {
  `java.io.Writer` `u9.c.g` @AccessFlag PRIVATE_FINAL;
  `int`[] `u9.c.h` @AccessFlag PRIVATE;
  `int` `u9.c.i` @AccessFlag PRIVATE;
  `java.lang.String` `u9.c.j` @AccessFlag PRIVATE;
  `java.lang.String` `u9.c.k` @AccessFlag PRIVATE;
  `boolean` `u9.c.l` @AccessFlag PRIVATE;
  `boolean` `u9.c.m` @AccessFlag PRIVATE;
  `java.lang.String` `u9.c.n` @AccessFlag PRIVATE;
  `boolean` `u9.c.o` @AccessFlag PRIVATE;
}
global `java.lang.String`[] `@@u9.c.p` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String`[] `@@u9.c.q` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lu9/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L37eb8c.  v0:= 128I;
  #L37eb90.  v0:= new `java.lang.String`[v0];
  #L37eb94.  `@@u9.c.p` @type ^`java.lang.String`[] := v0 @kind object;
  #L37eb98.  v0:= 0I;
  #L37eb9a.  v1:= 0I;
  #L37eb9c.  v2:= 31I;
  #L37eba0.  if v1 > v2 then goto L37ebd0;
  #L37eba4.  v2:= `@@u9.c.p` @type ^`java.lang.String`[] @kind object;
  #L37eba8.  v3:= 1I;
  #L37ebaa.  v3:= new `java.lang.Object`[v3];
  #L37ebae.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L37ebb4.  v4:= temp @kind object;
  #L37ebb6.  v3[v0]:= v4 @kind object;
  #L37ebba.  v4:= "\\u%04x" @kind object;
  #L37ebbe.  call temp:= `format`(v4, v3) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L37ebc4.  v3:= temp @kind object;
  #L37ebc6.  v2[v1]:= v3 @kind object;
  #L37ebca.  v1:= v1 + 1;
  #L37ebce.  goto L37eb9c;
  #L37ebd0.  v0:= `@@u9.c.p` @type ^`java.lang.String`[] @kind object;
  #L37ebd4.  v1:= 34I;
  #L37ebd8.  v2:= "\\\"" @kind object;
  #L37ebdc.  v0[v1]:= v2 @kind object;
  #L37ebe0.  v1:= 92I;
  #L37ebe4.  v2:= "\\\\" @kind object;
  #L37ebe8.  v0[v1]:= v2 @kind object;
  #L37ebec.  v1:= 9I;
  #L37ebf0.  v2:= "\\t" @kind object;
  #L37ebf4.  v0[v1]:= v2 @kind object;
  #L37ebf8.  v1:= 8I;
  #L37ebfc.  v2:= "\\b" @kind object;
  #L37ec00.  v0[v1]:= v2 @kind object;
  #L37ec04.  v1:= 10I;
  #L37ec08.  v2:= "\\n" @kind object;
  #L37ec0c.  v0[v1]:= v2 @kind object;
  #L37ec10.  v1:= 13I;
  #L37ec14.  v2:= "\\r" @kind object;
  #L37ec18.  v0[v1]:= v2 @kind object;
  #L37ec1c.  v1:= 12I;
  #L37ec20.  v2:= "\\f" @kind object;
  #L37ec24.  v0[v1]:= v2 @kind object;
  #L37ec28.  call temp:= `clone`(v0) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L37ec2e.  v0:= temp @kind object;
  #L37ec30.  v0:= (`java.lang.String`[]) v0 @kind object;
  #L37ec34.  `@@u9.c.q` @type ^`java.lang.String`[] := v0 @kind object;
  #L37ec38.  v1:= 60I;
  #L37ec3c.  v2:= "\\u003c" @kind object;
  #L37ec40.  v0[v1]:= v2 @kind object;
  #L37ec44.  v1:= 62I;
  #L37ec48.  v2:= "\\u003e" @kind object;
  #L37ec4c.  v0[v1]:= v2 @kind object;
  #L37ec50.  v1:= 38I;
  #L37ec54.  v2:= "\\u0026" @kind object;
  #L37ec58.  v0[v1]:= v2 @kind object;
  #L37ec5c.  v1:= 61I;
  #L37ec60.  v2:= "\\u003d" @kind object;
  #L37ec64.  v0[v1]:= v2 @kind object;
  #L37ec68.  v1:= 39I;
  #L37ec6c.  v2:= "\\u0027" @kind object;
  #L37ec70.  v0[v1]:= v2 @kind object;
  #L37ec74.  return @kind void;
}
procedure `void` `<init>`(`u9.c` v1 @kind this, `java.io.Writer` v2 @kind object) @signature `Lu9/c;.<init>:(Ljava/io/Writer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L37ec88.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L37ec8e.  v0:= 32I;
  #L37ec92.  v0:= new `int`[v0];
  #L37ec96.  v1.`u9.c.h` @type ^`int`[] := v0 @kind object;
  #L37ec9a.  v0:= 0I;
  #L37ec9c.  v1.`u9.c.i` @type ^`int` := v0;
  #L37eca0.  v0:= 6I;
  #L37eca2.  call `d0`(v1, v0) @signature `Lu9/c;.d0:(I)V` @kind direct;
  #L37eca8.  v0:= ":" @kind object;
  #L37ecac.  v1.`u9.c.k` @type ^`java.lang.String` := v0 @kind object;
  #L37ecb0.  v0:= 1I;
  #L37ecb2.  v1.`u9.c.o` @type ^`boolean` := v0 @kind boolean;
  #L37ecb6.  v0:= "out == null" @kind object;
  #L37ecba.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L37ecc0.  v1.`u9.c.g` @type ^`java.io.Writer` := v2 @kind object;
  #L37ecc4.  return @kind void;
}
procedure `void` `R0`(`u9.c` v1 @kind this) @signature `Lu9/c;.R0:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L37f040.  v0:= v1.`u9.c.n` @type ^`java.lang.String` @kind object;
  #L37f044.  if v0 == 0 then goto L37f05e;
  #L37f048.  call `e`(v1) @signature `Lu9/c;.e:()V` @kind direct;
  #L37f04e.  v0:= v1.`u9.c.n` @type ^`java.lang.String` @kind object;
  #L37f052.  call `q0`(v1, v0) @signature `Lu9/c;.q0:(Ljava/lang/String;)V` @kind direct;
  #L37f058.  v0:= 0I;
  #L37f05a.  v1.`u9.c.n` @type ^`java.lang.String` := v0 @kind object;
  #L37f05e.  return @kind void;
}
procedure `void` `V`(`u9.c` v4 @kind this) @signature `Lu9/c;.V:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L37ee54.  v0:= v4.`u9.c.j` @type ^`java.lang.String` @kind object;
  #L37ee58.  if v0 != 0 then goto L37ee5e;
  #L37ee5c.  return @kind void;
  #L37ee5e.  v0:= v4.`u9.c.g` @type ^`java.io.Writer` @kind object;
  #L37ee62.  v1:= 10I;
  #L37ee66.  call `write`(v0, v1) @signature `Ljava/io/Writer;.write:(I)V` @kind virtual;
  #L37ee6c.  v0:= v4.`u9.c.i` @type ^`int`;
  #L37ee70.  v1:= 1I;
  #L37ee72.  if v1 >= v0 then goto L37ee8a;
  #L37ee76.  v2:= v4.`u9.c.g` @type ^`java.io.Writer` @kind object;
  #L37ee7a.  v3:= v4.`u9.c.j` @type ^`java.lang.String` @kind object;
  #L37ee7e.  call `write`(v2, v3) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L37ee84.  v1:= v1 + 1;
  #L37ee88.  goto L37ee72;
  #L37ee8a.  return @kind void;
}
procedure `u9.c` `Z`(`u9.c` v0 @kind this, `int` v1 , `char` v2 ) @signature `Lu9/c;.Z:(IC)Lu9/c;` @AccessFlag PRIVATE {
    temp;

  #L37e954.  call `i`(v0) @signature `Lu9/c;.i:()V` @kind direct;
  #L37e95a.  call `d0`(v0, v1) @signature `Lu9/c;.d0:(I)V` @kind direct;
  #L37e960.  v1:= v0.`u9.c.g` @type ^`java.io.Writer` @kind object;
  #L37e964.  call `write`(v1, v2) @signature `Ljava/io/Writer;.write:(I)V` @kind virtual;
  #L37e96a.  return v0 @kind object;
}
procedure `int` `a0`(`u9.c` v2 @kind this) @signature `Lu9/c;.a0:()I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L37e760.  v0:= v2.`u9.c.i` @type ^`int`;
  #L37e764.  if v0 == 0 then goto L37e776;
  #L37e768.  v1:= v2.`u9.c.h` @type ^`int`[] @kind object;
  #L37e76c.  v0:= v0 + -1;
  #L37e770.  v0:= v1[v0];
  #L37e774.  return v0;
  #L37e776.  v0:= new `java.lang.IllegalStateException`;
  #L37e77a.  v1:= "JsonWriter is closed." @kind object;
  #L37e77e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37e784.  throw v0;
}
procedure `void` `d0`(`u9.c` v3 @kind this, `int` v4 ) @signature `Lu9/c;.d0:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L37ee9c.  v0:= v3.`u9.c.i` @type ^`int`;
  #L37eea0.  v1:= v3.`u9.c.h` @type ^`int`[] @kind object;
  #L37eea4.  v2:= length @variable v1;
  #L37eea6.  if v0 != v2 then goto L37eeba;
  #L37eeaa.  v0:= v0 * 2;
  #L37eeae.  call temp:= `copyOf`(v1, v0) @signature `Ljava/util/Arrays;.copyOf:([II)[I` @kind static;
  #L37eeb4.  v0:= temp @kind object;
  #L37eeb6.  v3.`u9.c.h` @type ^`int`[] := v0 @kind object;
  #L37eeba.  v0:= v3.`u9.c.h` @type ^`int`[] @kind object;
  #L37eebe.  v1:= v3.`u9.c.i` @type ^`int`;
  #L37eec2.  v2:= v1 + 1;
  #L37eec6.  v3.`u9.c.i` @type ^`int` := v2;
  #L37eeca.  v0[v1]:= v4;
  #L37eece.  return @kind void;
}
procedure `void` `e`(`u9.c` v2 @kind this) @signature `Lu9/c;.e:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L37ecd8.  call temp:= `a0`(v2) @signature `Lu9/c;.a0:()I` @kind direct;
  #L37ecde.  v0:= temp;
  #L37ece0.  v1:= 5I;
  #L37ece2.  if v0 != v1 then goto L37ecf6;
  #L37ece6.  v0:= v2.`u9.c.g` @type ^`java.io.Writer` @kind object;
  #L37ecea.  v1:= 44I;
  #L37ecee.  call `write`(v0, v1) @signature `Ljava/io/Writer;.write:(I)V` @kind virtual;
  #L37ecf4.  goto L37ecfc;
  #L37ecf6.  v1:= 3I;
  #L37ecf8.  if v0 != v1 then goto L37ed0c;
  #L37ecfc.  call `V`(v2) @signature `Lu9/c;.V:()V` @kind direct;
  #L37ed02.  v0:= 4I;
  #L37ed04.  call `i0`(v2, v0) @signature `Lu9/c;.i0:(I)V` @kind direct;
  #L37ed0a.  return @kind void;
  #L37ed0c.  v0:= new `java.lang.IllegalStateException`;
  #L37ed10.  v1:= "Nesting problem." @kind object;
  #L37ed14.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37ed1a.  throw v0;
}
procedure `void` `i`(`u9.c` v3 @kind this) @signature `Lu9/c;.i:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L37ed2c.  call temp:= `a0`(v3) @signature `Lu9/c;.a0:()I` @kind direct;
  #L37ed32.  v0:= temp;
  #L37ed34.  v1:= 1I;
  #L37ed36.  v2:= 2I;
  #L37ed38.  if v0 == v1 then goto L37edb2;
  #L37ed3c.  if v0 == v2 then goto L37ed9c;
  #L37ed40.  v1:= 4I;
  #L37ed42.  if v0 == v1 then goto L37ed84;
  #L37ed46.  v1:= 6I;
  #L37ed48.  v2:= 7I;
  #L37ed4a.  if v0 == v1 then goto L37ed7c;
  #L37ed4e.  if v0 != v2 then goto L37ed6c;
  #L37ed52.  v0:= v3.`u9.c.l` @type ^`boolean` @kind boolean;
  #L37ed56.  if v0 == 0 then goto L37ed5c;
  #L37ed5a.  goto L37ed7c;
  #L37ed5c.  v0:= new `java.lang.IllegalStateException`;
  #L37ed60.  v1:= "JSON must have only one top-level value." @kind object;
  #L37ed64.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37ed6a.  throw v0;
  #L37ed6c.  v0:= new `java.lang.IllegalStateException`;
  #L37ed70.  v1:= "Nesting problem." @kind object;
  #L37ed74.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37ed7a.  throw v0;
  #L37ed7c.  call `i0`(v3, v2) @signature `Lu9/c;.i0:(I)V` @kind direct;
  #L37ed82.  goto L37edbe;
  #L37ed84.  v0:= v3.`u9.c.g` @type ^`java.io.Writer` @kind object;
  #L37ed88.  v1:= v3.`u9.c.k` @type ^`java.lang.String` @kind object;
  #L37ed8c.  call temp:= `append`(v0, v1) @signature `Ljava/io/Writer;.append:(Ljava/lang/CharSequence;)Ljava/io/Writer;` @kind virtual;
  #L37ed92.  v0:= 5I;
  #L37ed94.  call `i0`(v3, v0) @signature `Lu9/c;.i0:(I)V` @kind direct;
  #L37ed9a.  goto L37edbe;
  #L37ed9c.  v0:= v3.`u9.c.g` @type ^`java.io.Writer` @kind object;
  #L37eda0.  v1:= 44I;
  #L37eda4.  call temp:= `append`(v0, v1) @signature `Ljava/io/Writer;.append:(C)Ljava/io/Writer;` @kind virtual;
  #L37edaa.  call `V`(v3) @signature `Lu9/c;.V:()V` @kind direct;
  #L37edb0.  goto L37edbe;
  #L37edb2.  call `i0`(v3, v2) @signature `Lu9/c;.i0:(I)V` @kind direct;
  #L37edb8.  call `V`(v3) @signature `Lu9/c;.V:()V` @kind direct;
  #L37edbe.  return @kind void;
}
procedure `void` `i0`(`u9.c` v2 @kind this, `int` v3 ) @signature `Lu9/c;.i0:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L37eee0.  v0:= v2.`u9.c.h` @type ^`int`[] @kind object;
  #L37eee4.  v1:= v2.`u9.c.i` @type ^`int`;
  #L37eee8.  v1:= v1 + -1;
  #L37eeec.  v0[v1]:= v3;
  #L37eef0.  return @kind void;
}
procedure `void` `q0`(`u9.c` v8 @kind this, `java.lang.String` v9 @kind object) @signature `Lu9/c;.q0:(Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L37ef88.  v0:= v8.`u9.c.m` @type ^`boolean` @kind boolean;
  #L37ef8c.  if v0 == 0 then goto L37ef96;
  #L37ef90.  v0:= `@@u9.c.q` @type ^`java.lang.String`[] @kind object;
  #L37ef94.  goto L37ef9a;
  #L37ef96.  v0:= `@@u9.c.p` @type ^`java.lang.String`[] @kind object;
  #L37ef9a.  v1:= v8.`u9.c.g` @type ^`java.io.Writer` @kind object;
  #L37ef9e.  v2:= 34I;
  #L37efa2.  call `write`(v1, v2) @signature `Ljava/io/Writer;.write:(I)V` @kind virtual;
  #L37efa8.  call temp:= `length`(v9) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L37efae.  v1:= temp;
  #L37efb0.  v3:= 0I;
  #L37efb2.  v4:= 0I;
  #L37efb4.  if v3 >= v1 then goto L37f012;
  #L37efb8.  call temp:= `charAt`(v9, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L37efbe.  v5:= temp;
  #L37efc0.  v6:= 128I;
  #L37efc4.  if v5 >= v6 then goto L37efd2;
  #L37efc8.  v5:= v0[v5] @kind object;
  #L37efcc.  if v5 != 0 then goto L37efec;
  #L37efd0.  goto L37f00c;
  #L37efd2.  v6:= 8232I;
  #L37efd6.  if v5 != v6 then goto L37efe0;
  #L37efda.  v5:= "\\u2028" @kind object;
  #L37efde.  goto L37efec;
  #L37efe0.  v6:= 8233I;
  #L37efe4.  if v5 != v6 then goto L37f00c;
  #L37efe8.  v5:= "\\u2029" @kind object;
  #L37efec.  if v4 >= v3 then goto L37effe;
  #L37eff0.  v6:= v8.`u9.c.g` @type ^`java.io.Writer` @kind object;
  #L37eff4.  v7:= v3 - v4 @kind int;
  #L37eff8.  call `write`(v6, v9, v4, v7) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;II)V` @kind virtual;
  #L37effe.  v4:= v8.`u9.c.g` @type ^`java.io.Writer` @kind object;
  #L37f002.  call `write`(v4, v5) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L37f008.  v4:= v3 + 1;
  #L37f00c.  v3:= v3 + 1;
  #L37f010.  goto L37efb4;
  #L37f012.  if v4 >= v1 then goto L37f022;
  #L37f016.  v0:= v8.`u9.c.g` @type ^`java.io.Writer` @kind object;
  #L37f01a.  v1:= v1 - v4 @kind int;
  #L37f01c.  call `write`(v0, v9, v4, v1) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;II)V` @kind virtual;
  #L37f022.  v9:= v8.`u9.c.g` @type ^`java.io.Writer` @kind object;
  #L37f026.  call `write`(v9, v2) @signature `Ljava/io/Writer;.write:(I)V` @kind virtual;
  #L37f02c.  return @kind void;
}
procedure `u9.c` `s`(`u9.c` v1 @kind this, `int` v2 , `int` v3 , `char` v4 ) @signature `Lu9/c;.s:(IIC)Lu9/c;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L37e7e8.  call temp:= `a0`(v1) @signature `Lu9/c;.a0:()I` @kind direct;
  #L37e7ee.  v0:= temp;
  #L37e7f0.  if v0 == v3 then goto L37e80a;
  #L37e7f4.  if v0 != v2 then goto L37e7fa;
  #L37e7f8.  goto L37e80a;
  #L37e7fa.  v2:= new `java.lang.IllegalStateException`;
  #L37e7fe.  v3:= "Nesting problem." @kind object;
  #L37e802.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37e808.  throw v2;
  #L37e80a.  v2:= v1.`u9.c.n` @type ^`java.lang.String` @kind object;
  #L37e80e.  if v2 != 0 then goto L37e834;
  #L37e812.  v2:= v1.`u9.c.i` @type ^`int`;
  #L37e816.  v2:= v2 + -1;
  #L37e81a.  v1.`u9.c.i` @type ^`int` := v2;
  #L37e81e.  if v0 != v3 then goto L37e828;
  #L37e822.  call `V`(v1) @signature `Lu9/c;.V:()V` @kind direct;
  #L37e828.  v2:= v1.`u9.c.g` @type ^`java.io.Writer` @kind object;
  #L37e82c.  call `write`(v2, v4) @signature `Ljava/io/Writer;.write:(I)V` @kind virtual;
  #L37e832.  return v1 @kind object;
  #L37e834.  v2:= new `java.lang.IllegalStateException`;
  #L37e838.  v3:= new `java.lang.StringBuilder`;
  #L37e83c.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37e842.  v4:= "Dangling name: " @kind object;
  #L37e846.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37e84c.  v4:= v1.`u9.c.n` @type ^`java.lang.String` @kind object;
  #L37e850.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37e856.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37e85c.  v3:= temp @kind object;
  #L37e85e.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37e864.  throw v2;
}
procedure `u9.c` `B0`(`u9.c` v1 @kind this, `java.lang.Boolean` v2 @kind object) @signature `Lu9/c;.B0:(Ljava/lang/Boolean;)Lu9/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L37ea34.  if v2 != 0 then goto L37ea42;
  #L37ea38.  call temp:= `Y`(v1) @signature `Lu9/c;.Y:()Lu9/c;` @kind virtual;
  #L37ea3e.  v2:= temp @kind object;
  #L37ea40.  return v2 @kind object;
  #L37ea42.  call `R0`(v1) @signature `Lu9/c;.R0:()V` @kind direct;
  #L37ea48.  call `i`(v1) @signature `Lu9/c;.i:()V` @kind direct;
  #L37ea4e.  v0:= v1.`u9.c.g` @type ^`java.io.Writer` @kind object;
  #L37ea52.  call temp:= `booleanValue`(v2) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L37ea58.  v2:= temp;
  #L37ea5a.  if v2 == 0 then goto L37ea64;
  #L37ea5e.  v2:= "true" @kind object;
  #L37ea62.  goto L37ea68;
  #L37ea64.  v2:= "false" @kind object;
  #L37ea68.  call `write`(v0, v2) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L37ea6e.  return v1 @kind object;
}
procedure `boolean` `C`(`u9.c` v1 @kind this) @signature `Lu9/c;.C:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L37e730.  v0:= v1.`u9.c.m` @type ^`boolean` @kind boolean;
  #L37e734.  return v0;
}
procedure `u9.c` `E0`(`u9.c` v3 @kind this, `java.lang.Number` v4 @kind object) @signature `Lu9/c;.E0:(Ljava/lang/Number;)Lu9/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L37ea80.  if v4 != 0 then goto L37ea8e;
  #L37ea84.  call temp:= `Y`(v3) @signature `Lu9/c;.Y:()Lu9/c;` @kind virtual;
  #L37ea8a.  v4:= temp @kind object;
  #L37ea8c.  return v4 @kind object;
  #L37ea8e.  call `R0`(v3) @signature `Lu9/c;.R0:()V` @kind direct;
  #L37ea94.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L37ea9a.  v0:= temp @kind object;
  #L37ea9c.  v1:= v3.`u9.c.l` @type ^`boolean` @kind boolean;
  #L37eaa0.  if v1 != 0 then goto L37eb04;
  #L37eaa4.  v1:= "-Infinity" @kind object;
  #L37eaa8.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L37eaae.  v1:= temp;
  #L37eab0.  if v1 != 0 then goto L37ead6;
  #L37eab4.  v1:= "Infinity" @kind object;
  #L37eab8.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L37eabe.  v1:= temp;
  #L37eac0.  if v1 != 0 then goto L37ead6;
  #L37eac4.  v1:= "NaN" @kind object;
  #L37eac8.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L37eace.  v1:= temp;
  #L37ead0.  if v1 != 0 then goto L37ead6;
  #L37ead4.  goto L37eb04;
  #L37ead6.  v0:= new `java.lang.IllegalArgumentException`;
  #L37eada.  v1:= new `java.lang.StringBuilder`;
  #L37eade.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37eae4.  v2:= "Numeric values must be finite, but was " @kind object;
  #L37eae8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37eaee.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37eaf4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37eafa.  v4:= temp @kind object;
  #L37eafc.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37eb02.  throw v0;
  #L37eb04.  call `i`(v3) @signature `Lu9/c;.i:()V` @kind direct;
  #L37eb0a.  v4:= v3.`u9.c.g` @type ^`java.io.Writer` @kind object;
  #L37eb0e.  call temp:= `append`(v4, v0) @signature `Ljava/io/Writer;.append:(Ljava/lang/CharSequence;)Ljava/io/Writer;` @kind virtual;
  #L37eb14.  return v3 @kind object;
}
procedure `boolean` `J`(`u9.c` v1 @kind this) @signature `Lu9/c;.J:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L37e748.  v0:= v1.`u9.c.l` @type ^`boolean` @kind boolean;
  #L37e74c.  return v0;
}
procedure `u9.c` `O0`(`u9.c` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lu9/c;.O0:(Ljava/lang/String;)Lu9/c;` @AccessFlag PUBLIC {
    temp;

  #L37eb28.  if v1 != 0 then goto L37eb36;
  #L37eb2c.  call temp:= `Y`(v0) @signature `Lu9/c;.Y:()Lu9/c;` @kind virtual;
  #L37eb32.  v1:= temp @kind object;
  #L37eb34.  return v1 @kind object;
  #L37eb36.  call `R0`(v0) @signature `Lu9/c;.R0:()V` @kind direct;
  #L37eb3c.  call `i`(v0) @signature `Lu9/c;.i:()V` @kind direct;
  #L37eb42.  call `q0`(v0, v1) @signature `Lu9/c;.q0:(Ljava/lang/String;)V` @kind direct;
  #L37eb48.  return v0 @kind object;
}
procedure `u9.c` `Q`(`u9.c` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lu9/c;.Q:(Ljava/lang/String;)Lu9/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L37e8c0.  v0:= "name == null" @kind object;
  #L37e8c4.  call temp:= `requireNonNull`(v2, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L37e8ca.  v0:= v1.`u9.c.n` @type ^`java.lang.String` @kind object;
  #L37e8ce.  if v0 != 0 then goto L37e8f0;
  #L37e8d2.  v0:= v1.`u9.c.i` @type ^`int`;
  #L37e8d6.  if v0 == 0 then goto L37e8e0;
  #L37e8da.  v1.`u9.c.n` @type ^`java.lang.String` := v2 @kind object;
  #L37e8de.  return v1 @kind object;
  #L37e8e0.  v2:= new `java.lang.IllegalStateException`;
  #L37e8e4.  v0:= "JsonWriter is closed." @kind object;
  #L37e8e8.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37e8ee.  throw v2;
  #L37e8f0.  v2:= new `java.lang.IllegalStateException`;
  #L37e8f4.  call `<init>`(v2) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L37e8fa.  throw v2;
}
procedure `u9.c` `Q0`(`u9.c` v1 @kind this, `boolean` v2 ) @signature `Lu9/c;.Q0:(Z)Lu9/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L37e97c.  call `R0`(v1) @signature `Lu9/c;.R0:()V` @kind direct;
  #L37e982.  call `i`(v1) @signature `Lu9/c;.i:()V` @kind direct;
  #L37e988.  v0:= v1.`u9.c.g` @type ^`java.io.Writer` @kind object;
  #L37e98c.  if v2 == 0 then goto L37e996;
  #L37e990.  v2:= "true" @kind object;
  #L37e994.  goto L37e99a;
  #L37e996.  v2:= "false" @kind object;
  #L37e99a.  call `write`(v0, v2) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L37e9a0.  return v1 @kind object;
}
procedure `u9.c` `Y`(`u9.c` v2 @kind this) @signature `Lu9/c;.Y:()Lu9/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L37e90c.  v0:= v2.`u9.c.n` @type ^`java.lang.String` @kind object;
  #L37e910.  if v0 == 0 then goto L37e92c;
  #L37e914.  v0:= v2.`u9.c.o` @type ^`boolean` @kind boolean;
  #L37e918.  if v0 == 0 then goto L37e924;
  #L37e91c.  call `R0`(v2) @signature `Lu9/c;.R0:()V` @kind direct;
  #L37e922.  goto L37e92c;
  #L37e924.  v0:= 0I;
  #L37e926.  v2.`u9.c.n` @type ^`java.lang.String` := v0 @kind object;
  #L37e92a.  return v2 @kind object;
  #L37e92c.  call `i`(v2) @signature `Lu9/c;.i:()V` @kind direct;
  #L37e932.  v0:= v2.`u9.c.g` @type ^`java.io.Writer` @kind object;
  #L37e936.  v1:= "null" @kind object;
  #L37e93a.  call `write`(v0, v1) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L37e940.  return v2 @kind object;
}
procedure `void` `close`(`u9.c` v3 @kind this) @signature `Lu9/c;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L37edd0.  v0:= v3.`u9.c.g` @type ^`java.io.Writer` @kind object;
  #L37edd4.  call `close`(v0) @signature `Ljava/io/Writer;.close:()V` @kind virtual;
  #L37edda.  v0:= v3.`u9.c.i` @type ^`int`;
  #L37edde.  v1:= 1I;
  #L37ede0.  if v0 > v1 then goto L37ee00;
  #L37ede4.  if v0 != v1 then goto L37edf8;
  #L37ede8.  v2:= v3.`u9.c.h` @type ^`int`[] @kind object;
  #L37edec.  v0:= v0 - v1 @kind int;
  #L37edee.  v0:= v2[v0];
  #L37edf2.  v1:= 7I;
  #L37edf4.  if v0 != v1 then goto L37ee00;
  #L37edf8.  v0:= 0I;
  #L37edfa.  v3.`u9.c.i` @type ^`int` := v0;
  #L37edfe.  return @kind void;
  #L37ee00.  v0:= new `java.io.IOException`;
  #L37ee04.  v1:= "Incomplete document" @kind object;
  #L37ee08.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37ee0e.  throw v0;
}
procedure `void` `flush`(`u9.c` v2 @kind this) @signature `Lu9/c;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L37ee20.  v0:= v2.`u9.c.i` @type ^`int`;
  #L37ee24.  if v0 == 0 then goto L37ee34;
  #L37ee28.  v0:= v2.`u9.c.g` @type ^`java.io.Writer` @kind object;
  #L37ee2c.  call `flush`(v0) @signature `Ljava/io/Writer;.flush:()V` @kind virtual;
  #L37ee32.  return @kind void;
  #L37ee34.  v0:= new `java.lang.IllegalStateException`;
  #L37ee38.  v1:= "JsonWriter is closed." @kind object;
  #L37ee3c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37ee42.  throw v0;
}
procedure `void` `j0`(`u9.c` v0 @kind this, `boolean` v1 ) @signature `Lu9/c;.j0:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L37ef04.  v0.`u9.c.m` @type ^`boolean` := v1 @kind boolean;
  #L37ef08.  return @kind void;
}
procedure `u9.c` `k`(`u9.c` v2 @kind this) @signature `Lu9/c;.k:()Lu9/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L37e798.  call `R0`(v2) @signature `Lu9/c;.R0:()V` @kind direct;
  #L37e79e.  v0:= 1I;
  #L37e7a0.  v1:= 91I;
  #L37e7a4.  call temp:= `Z`(v2, v0, v1) @signature `Lu9/c;.Z:(IC)Lu9/c;` @kind direct;
  #L37e7aa.  v0:= temp @kind object;
  #L37e7ac.  return v0 @kind object;
}
procedure `void` `k0`(`u9.c` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lu9/c;.k0:(Ljava/lang/String;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L37ef1c.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L37ef22.  v0:= temp;
  #L37ef24.  if v0 != 0 then goto L37ef38;
  #L37ef28.  v2:= 0I;
  #L37ef2a.  v1.`u9.c.j` @type ^`java.lang.String` := v2 @kind object;
  #L37ef2e.  v2:= ":" @kind object;
  #L37ef32.  v1.`u9.c.k` @type ^`java.lang.String` := v2 @kind object;
  #L37ef36.  goto L37ef44;
  #L37ef38.  v1.`u9.c.j` @type ^`java.lang.String` := v2 @kind object;
  #L37ef3c.  v2:= ": " @kind object;
  #L37ef40.  v1.`u9.c.k` @type ^`java.lang.String` := v2 @kind object;
  #L37ef44.  return @kind void;
}
procedure `void` `l0`(`u9.c` v0 @kind this, `boolean` v1 ) @signature `Lu9/c;.l0:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L37ef58.  v0.`u9.c.l` @type ^`boolean` := v1 @kind boolean;
  #L37ef5c.  return @kind void;
}
procedure `void` `n0`(`u9.c` v0 @kind this, `boolean` v1 ) @signature `Lu9/c;.n0:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L37ef70.  v0.`u9.c.o` @type ^`boolean` := v1 @kind boolean;
  #L37ef74.  return @kind void;
}
procedure `u9.c` `r`(`u9.c` v2 @kind this) @signature `Lu9/c;.r:()Lu9/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L37e7c0.  call `R0`(v2) @signature `Lu9/c;.R0:()V` @kind direct;
  #L37e7c6.  v0:= 3I;
  #L37e7c8.  v1:= 123I;
  #L37e7cc.  call temp:= `Z`(v2, v0, v1) @signature `Lu9/c;.Z:(IC)Lu9/c;` @kind direct;
  #L37e7d2.  v0:= temp @kind object;
  #L37e7d4.  return v0 @kind object;
}
procedure `u9.c` `u0`(`u9.c` v3 @kind this, `double` v4 ) @signature `Lu9/c;.u0:(D)Lu9/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L37e9b4.  call `R0`(v3) @signature `Lu9/c;.R0:()V` @kind direct;
  #L37e9ba.  v0:= v3.`u9.c.l` @type ^`boolean` @kind boolean;
  #L37e9be.  if v0 != 0 then goto L37ea0a;
  #L37e9c2.  call temp:= `isNaN`(v4) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L37e9c8.  v0:= temp;
  #L37e9ca.  if v0 != 0 then goto L37e9dc;
  #L37e9ce.  call temp:= `isInfinite`(v4) @signature `Ljava/lang/Double;.isInfinite:(D)Z` @kind static;
  #L37e9d4.  v0:= temp;
  #L37e9d6.  if v0 != 0 then goto L37e9dc;
  #L37e9da.  goto L37ea0a;
  #L37e9dc.  v0:= new `java.lang.IllegalArgumentException`;
  #L37e9e0.  v1:= new `java.lang.StringBuilder`;
  #L37e9e4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37e9ea.  v2:= "Numeric values must be finite, but was " @kind object;
  #L37e9ee.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37e9f4.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(D)Ljava/lang/StringBuilder;` @kind virtual;
  #L37e9fa.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37ea00.  v4:= temp @kind object;
  #L37ea02.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37ea08.  throw v0;
  #L37ea0a.  call `i`(v3) @signature `Lu9/c;.i:()V` @kind direct;
  #L37ea10.  v0:= v3.`u9.c.g` @type ^`java.io.Writer` @kind object;
  #L37ea14.  call temp:= `toString`(v4) @signature `Ljava/lang/Double;.toString:(D)Ljava/lang/String;` @kind static;
  #L37ea1a.  v4:= temp @kind object;
  #L37ea1c.  call temp:= `append`(v0, v4) @signature `Ljava/io/Writer;.append:(Ljava/lang/CharSequence;)Ljava/io/Writer;` @kind virtual;
  #L37ea22.  return v3 @kind object;
}
procedure `u9.c` `v`(`u9.c` v3 @kind this) @signature `Lu9/c;.v:()Lu9/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L37e878.  v0:= 1I;
  #L37e87a.  v1:= 2I;
  #L37e87c.  v2:= 93I;
  #L37e880.  call temp:= `s`(v3, v0, v1, v2) @signature `Lu9/c;.s:(IIC)Lu9/c;` @kind direct;
  #L37e886.  v0:= temp @kind object;
  #L37e888.  return v0 @kind object;
}
procedure `u9.c` `w`(`u9.c` v3 @kind this) @signature `Lu9/c;.w:()Lu9/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L37e89c.  v0:= 3I;
  #L37e89e.  v1:= 5I;
  #L37e8a0.  v2:= 125I;
  #L37e8a4.  call temp:= `s`(v3, v0, v1, v2) @signature `Lu9/c;.s:(IIC)Lu9/c;` @kind direct;
  #L37e8aa.  v0:= temp @kind object;
  #L37e8ac.  return v0 @kind object;
}
procedure `u9.c` `x0`(`u9.c` v1 @kind this, `long` v2 ) @signature `Lu9/c;.x0:(J)Lu9/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L37eb5c.  call `R0`(v1) @signature `Lu9/c;.R0:()V` @kind direct;
  #L37eb62.  call `i`(v1) @signature `Lu9/c;.i:()V` @kind direct;
  #L37eb68.  v0:= v1.`u9.c.g` @type ^`java.io.Writer` @kind object;
  #L37eb6c.  call temp:= `toString`(v2) @signature `Ljava/lang/Long;.toString:(J)Ljava/lang/String;` @kind static;
  #L37eb72.  v2:= temp @kind object;
  #L37eb74.  call `write`(v0, v2) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L37eb7a.  return v1 @kind object;
}
procedure `boolean` `y`(`u9.c` v1 @kind this) @signature `Lu9/c;.y:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L37e718.  v0:= v1.`u9.c.o` @type ^`boolean` @kind boolean;
  #L37e71c.  return v0;
}
