record `u9.a` @kind class @AccessFlag PUBLIC extends `java.io.Closeable` @kind interface {
  `java.io.Reader` `u9.a.g` @AccessFlag PRIVATE_FINAL;
  `boolean` `u9.a.h` @AccessFlag PRIVATE;
  `char`[] `u9.a.i` @AccessFlag PRIVATE_FINAL;
  `int` `u9.a.j` @AccessFlag PRIVATE;
  `int` `u9.a.k` @AccessFlag PRIVATE;
  `int` `u9.a.l` @AccessFlag PRIVATE;
  `int` `u9.a.m` @AccessFlag PRIVATE;
  `int` `u9.a.n` @AccessFlag ;
  `long` `u9.a.o` @AccessFlag PRIVATE;
  `int` `u9.a.p` @AccessFlag PRIVATE;
  `java.lang.String` `u9.a.q` @AccessFlag PRIVATE;
  `int`[] `u9.a.r` @AccessFlag PRIVATE;
  `int` `u9.a.s` @AccessFlag PRIVATE;
  `java.lang.String`[] `u9.a.t` @AccessFlag PRIVATE;
  `int`[] `u9.a.u` @AccessFlag PRIVATE;
}
procedure `void` `<clinit>`() @signature `Lu9/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L37ddf4.  v0:= new `u9.a$a`;
  #L37ddf8.  call `<init>`(v0) @signature `Lu9/a$a;.<init>:()V` @kind direct;
  #L37ddfe.  `@@com.google.gson.internal.e.a` @type ^`com.google.gson.internal.e` := v0 @kind object;
  #L37de02.  return @kind void;
}
procedure `void` `<init>`(`u9.a` v4 @kind this, `java.io.Reader` v5 @kind object) @signature `Lu9/a;.<init>:(Ljava/io/Reader;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L37de14.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L37de1a.  v0:= 0I;
  #L37de1c.  v4.`u9.a.h` @type ^`boolean` := v0 @kind boolean;
  #L37de20.  v1:= 1024I;
  #L37de24.  v1:= new `char`[v1];
  #L37de28.  v4.`u9.a.i` @type ^`char`[] := v1 @kind object;
  #L37de2c.  v4.`u9.a.j` @type ^`int` := v0;
  #L37de30.  v4.`u9.a.k` @type ^`int` := v0;
  #L37de34.  v4.`u9.a.l` @type ^`int` := v0;
  #L37de38.  v4.`u9.a.m` @type ^`int` := v0;
  #L37de3c.  v4.`u9.a.n` @type ^`int` := v0;
  #L37de40.  v1:= 32I;
  #L37de44.  v2:= new `int`[v1];
  #L37de48.  v4.`u9.a.r` @type ^`int`[] := v2 @kind object;
  #L37de4c.  v4.`u9.a.s` @type ^`int` := v0;
  #L37de50.  v3:= v0 + 1;
  #L37de54.  v4.`u9.a.s` @type ^`int` := v3;
  #L37de58.  v3:= 6I;
  #L37de5a.  v2[v0]:= v3;
  #L37de5e.  v0:= new `java.lang.String`[v1];
  #L37de62.  v4.`u9.a.t` @type ^`java.lang.String`[] := v0 @kind object;
  #L37de66.  v0:= new `int`[v1];
  #L37de6a.  v4.`u9.a.u` @type ^`int`[] := v0 @kind object;
  #L37de6e.  v0:= "in == null" @kind object;
  #L37de72.  call temp:= `requireNonNull`(v5, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L37de78.  v4.`u9.a.g` @type ^`java.io.Reader` := v5 @kind object;
  #L37de7c.  return @kind void;
}
procedure `int` `B0`(`u9.a` v18 @kind this) @signature `Lu9/a;.B0:()I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L37d380.  v0:= v18 @kind object;
  #L37d384.  v1:= v0.`u9.a.i` @type ^`char`[] @kind object;
  #L37d388.  v2:= v0.`u9.a.j` @type ^`int`;
  #L37d38c.  v3:= v0.`u9.a.k` @type ^`int`;
  #L37d390.  v6:= 1I;
  #L37d392.  v7:= 0I;
  #L37d394.  v8:= 0I;
  #L37d396.  v9:= 0I;
  #L37d398.  v10:= 1I;
  #L37d39a.  v11:= 0L;
  #L37d39e.  v13:= 0I;
  #L37d3a0.  v14:= v2 + v8 @kind int;
  #L37d3a4.  v15:= 2I;
  #L37d3a6.  if v14 != v3 then goto L37d3ce;
  #L37d3aa.  v2:= length @variable v1;
  #L37d3ac.  if v8 != v2 then goto L37d3b2;
  #L37d3b0.  return v7;
  #L37d3b2.  v2:= v8 + 1;
  #L37d3b6.  call temp:= `y`(v0, v2) @signature `Lu9/a;.y:(I)Z` @kind direct;
  #L37d3bc.  v2:= temp;
  #L37d3be.  if v2 != 0 then goto L37d3c6;
  #L37d3c2.  goto L37d4ae;
  #L37d3c6.  v2:= v0.`u9.a.j` @type ^`int`;
  #L37d3ca.  v3:= v0.`u9.a.k` @type ^`int`;
  #L37d3ce.  v14:= v2 + v8 @kind int;
  #L37d3d2.  v14:= v1[v14] @kind char;
  #L37d3d6.  v7:= 43I;
  #L37d3da.  v4:= 3I;
  #L37d3dc.  v5:= 5I;
  #L37d3de.  if v14 == v7 then goto L37d560;
  #L37d3e2.  v7:= 69I;
  #L37d3e6.  if v14 == v7 then goto L37d548;
  #L37d3ea.  v7:= 101I;
  #L37d3ee.  if v14 == v7 then goto L37d548;
  #L37d3f2.  v7:= 45I;
  #L37d3f6.  if v14 == v7 then goto L37d52e;
  #L37d3fa.  v7:= 46I;
  #L37d3fe.  if v14 == v7 then goto L37d51e;
  #L37d402.  v7:= 48I;
  #L37d406.  if v14 < v7 then goto L37d4a2;
  #L37d40a.  v7:= 57I;
  #L37d40e.  if v14 <= v7 then goto L37d414;
  #L37d412.  goto L37d4a2;
  #L37d414.  if v9 == v6 then goto L37d48e;
  #L37d418.  if v9 != 0 then goto L37d41e;
  #L37d41c.  goto L37d48e;
  #L37d41e.  if v9 != v15 then goto L37d46e;
  #L37d422.  v16:= 0L;
  #L37d426.  v4:= lcmp(v11, v16);
  #L37d42a.  if v4 != 0 then goto L37d432;
  #L37d42e.  v4:= 0I;
  #L37d430.  return v4;
  #L37d432.  v4:= 10L;
  #L37d436.  v4:= v4 * v11 @kind long;
  #L37d43a.  v14:= v14 + -48;
  #L37d43e.  v14:= (`long`) v14 @kind i2l;
  #L37d440.  v4:= v4 - v14 @kind long;
  #L37d442.  v14:= -922337203685477580L;
  #L37d44c.  v7:= lcmp(v11, v14);
  #L37d450.  if v7 > 0 then goto L37d466;
  #L37d454.  if v7 != 0 then goto L37d462;
  #L37d458.  v7:= lcmp(v4, v11);
  #L37d45c.  if v7 >= 0 then goto L37d462;
  #L37d460.  goto L37d466;
  #L37d462.  v7:= 0I;
  #L37d464.  goto L37d468;
  #L37d466.  v7:= 1I;
  #L37d468.  v10:= v10 ^& v7 @kind int;
  #L37d46a.  v11:= v4 @kind wide;
  #L37d46c.  goto L37d484;
  #L37d46e.  if v9 != v4 then goto L37d478;
  #L37d472.  v7:= 0I;
  #L37d474.  v9:= 4I;
  #L37d476.  goto L37d49a;
  #L37d478.  if v9 == v5 then goto L37d488;
  #L37d47c.  v4:= 6I;
  #L37d47e.  if v9 != v4 then goto L37d484;
  #L37d482.  goto L37d488;
  #L37d484.  v7:= 0I;
  #L37d486.  goto L37d49a;
  #L37d488.  v7:= 0I;
  #L37d48a.  v9:= 7I;
  #L37d48c.  goto L37d49a;
  #L37d48e.  v14:= v14 + -48;
  #L37d492.  v4:= -v14 @kind int;
  #L37d494.  v11:= (`long`) v4 @kind i2l;
  #L37d496.  v7:= 0I;
  #L37d498.  v9:= 2I;
  #L37d49a.  v16:= 0L;
  #L37d49e.  goto L37d56e;
  #L37d4a2.  call temp:= `Q`(v0, v14) @signature `Lu9/a;.Q:(C)Z` @kind direct;
  #L37d4a8.  v1:= temp;
  #L37d4aa.  if v1 != 0 then goto L37d51a;
  #L37d4ae.  if v9 != v15 then goto L37d4f6;
  #L37d4b2.  if v10 == 0 then goto L37d4f6;
  #L37d4b6.  v1:= -9223372036854775808L;
  #L37d4ba.  v3:= lcmp(v11, v1);
  #L37d4be.  if v3 != 0 then goto L37d4c6;
  #L37d4c2.  if v13 == 0 then goto L37d4f6;
  #L37d4c6.  v16:= 0L;
  #L37d4ca.  v1:= lcmp(v11, v16);
  #L37d4ce.  if v1 != 0 then goto L37d4d6;
  #L37d4d2.  if v13 != 0 then goto L37d4f6;
  #L37d4d6.  if v13 == 0 then goto L37d4dc;
  #L37d4da.  goto L37d4de;
  #L37d4dc.  v11:= -v11 @kind long;
  #L37d4de.  v0.`u9.a.o` @type ^`long` := v11 @kind wide;
  #L37d4e2.  v1:= v0.`u9.a.j` @type ^`int`;
  #L37d4e6.  v1:= v1 + v8 @kind int;
  #L37d4e8.  v0.`u9.a.j` @type ^`int` := v1;
  #L37d4ec.  v1:= 15I;
  #L37d4f0.  v0.`u9.a.n` @type ^`int` := v1;
  #L37d4f4.  return v1;
  #L37d4f6.  if v9 == v15 then goto L37d50c;
  #L37d4fa.  v1:= 4I;
  #L37d4fc.  if v9 == v1 then goto L37d50c;
  #L37d500.  v1:= 7I;
  #L37d502.  if v9 != v1 then goto L37d508;
  #L37d506.  goto L37d50c;
  #L37d508.  v7:= 0I;
  #L37d50a.  return v7;
  #L37d50c.  v0.`u9.a.p` @type ^`int` := v8;
  #L37d510.  v1:= 16I;
  #L37d514.  v0.`u9.a.n` @type ^`int` := v1;
  #L37d518.  return v1;
  #L37d51a.  v7:= 0I;
  #L37d51c.  return v7;
  #L37d51e.  v7:= 0I;
  #L37d520.  v16:= 0L;
  #L37d524.  if v9 != v15 then goto L37d52c;
  #L37d528.  v9:= 3I;
  #L37d52a.  goto L37d56e;
  #L37d52c.  return v7;
  #L37d52e.  v4:= 6I;
  #L37d530.  v7:= 0I;
  #L37d532.  v16:= 0L;
  #L37d536.  if v9 != 0 then goto L37d540;
  #L37d53a.  v9:= 1I;
  #L37d53c.  v13:= 1I;
  #L37d53e.  goto L37d56e;
  #L37d540.  if v9 != v5 then goto L37d546;
  #L37d544.  goto L37d56c;
  #L37d546.  return v7;
  #L37d548.  v7:= 0I;
  #L37d54a.  v16:= 0L;
  #L37d54e.  if v9 == v15 then goto L37d55c;
  #L37d552.  v4:= 4I;
  #L37d554.  if v9 != v4 then goto L37d55a;
  #L37d558.  goto L37d55c;
  #L37d55a.  return v7;
  #L37d55c.  v9:= 5I;
  #L37d55e.  goto L37d56e;
  #L37d560.  v4:= 6I;
  #L37d562.  v7:= 0I;
  #L37d564.  v16:= 0L;
  #L37d568.  if v9 != v5 then goto L37d576;
  #L37d56c.  v9:= 6I;
  #L37d56e.  v8:= v8 + 1;
  #L37d572.  goto L37d3a0;
  #L37d576.  return v7;
}
procedure `void` `E0`(`u9.a` v3 @kind this, `int` v4 ) @signature `Lu9/a;.E0:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L37e248.  v0:= v3.`u9.a.s` @type ^`int`;
  #L37e24c.  v1:= v3.`u9.a.r` @type ^`int`[] @kind object;
  #L37e250.  v2:= length @variable v1;
  #L37e252.  if v0 != v2 then goto L37e28a;
  #L37e256.  v0:= v0 * 2;
  #L37e25a.  call temp:= `copyOf`(v1, v0) @signature `Ljava/util/Arrays;.copyOf:([II)[I` @kind static;
  #L37e260.  v1:= temp @kind object;
  #L37e262.  v3.`u9.a.r` @type ^`int`[] := v1 @kind object;
  #L37e266.  v1:= v3.`u9.a.u` @type ^`int`[] @kind object;
  #L37e26a.  call temp:= `copyOf`(v1, v0) @signature `Ljava/util/Arrays;.copyOf:([II)[I` @kind static;
  #L37e270.  v1:= temp @kind object;
  #L37e272.  v3.`u9.a.u` @type ^`int`[] := v1 @kind object;
  #L37e276.  v1:= v3.`u9.a.t` @type ^`java.lang.String`[] @kind object;
  #L37e27a.  call temp:= `copyOf`(v1, v0) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L37e280.  v0:= temp @kind object;
  #L37e282.  v0:= (`java.lang.String`[]) v0 @kind object;
  #L37e286.  v3.`u9.a.t` @type ^`java.lang.String`[] := v0 @kind object;
  #L37e28a.  v0:= v3.`u9.a.r` @type ^`int`[] @kind object;
  #L37e28e.  v1:= v3.`u9.a.s` @type ^`int`;
  #L37e292.  v2:= v1 + 1;
  #L37e296.  v3.`u9.a.s` @type ^`int` := v2;
  #L37e29a.  v0[v1]:= v4;
  #L37e29e.  return @kind void;
}
procedure `char` `O0`(`u9.a` v8 @kind this) @signature `Lu9/a;.O0:()C` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L37c880.  v0:= v8.`u9.a.j` @type ^`int`;
  #L37c884.  v1:= v8.`u9.a.k` @type ^`int`;
  #L37c888.  v2:= "Unterminated escape sequence" @kind object;
  #L37c88c.  v3:= 1I;
  #L37c88e.  if v0 != v1 then goto L37c8aa;
  #L37c892.  call temp:= `y`(v8, v3) @signature `Lu9/a;.y:(I)Z` @kind direct;
  #L37c898.  v0:= temp;
  #L37c89a.  if v0 == 0 then goto L37c8a0;
  #L37c89e.  goto L37c8aa;
  #L37c8a0.  call temp:= `W0`(v8, v2) @signature `Lu9/a;.W0:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L37c8a6.  v0:= temp @kind object;
  #L37c8a8.  throw v0;
  #L37c8aa.  v0:= v8.`u9.a.i` @type ^`char`[] @kind object;
  #L37c8ae.  v1:= v8.`u9.a.j` @type ^`int`;
  #L37c8b2.  v4:= v1 + 1;
  #L37c8b6.  v8.`u9.a.j` @type ^`int` := v4;
  #L37c8ba.  v0:= v0[v1] @kind char;
  #L37c8be.  v1:= 10I;
  #L37c8c2.  if v0 == v1 then goto L37ca14;
  #L37c8c6.  v3:= 34I;
  #L37c8ca.  if v0 == v3 then goto L37ca22;
  #L37c8ce.  v3:= 39I;
  #L37c8d2.  if v0 == v3 then goto L37ca22;
  #L37c8d6.  v3:= 47I;
  #L37c8da.  if v0 == v3 then goto L37ca22;
  #L37c8de.  v3:= 92I;
  #L37c8e2.  if v0 == v3 then goto L37ca22;
  #L37c8e6.  v3:= 98I;
  #L37c8ea.  if v0 == v3 then goto L37ca0e;
  #L37c8ee.  v3:= 102I;
  #L37c8f2.  if v0 == v3 then goto L37ca08;
  #L37c8f6.  v5:= 110I;
  #L37c8fa.  if v0 == v5 then goto L37ca06;
  #L37c8fe.  v5:= 114I;
  #L37c902.  if v0 == v5 then goto L37ca00;
  #L37c906.  v5:= 116I;
  #L37c90a.  if v0 == v5 then goto L37c9fa;
  #L37c90e.  v5:= 117I;
  #L37c912.  if v0 != v5 then goto L37c9ec;
  #L37c916.  v0:= 4I;
  #L37c918.  v4:= v4 + v0 @kind int;
  #L37c91a.  v5:= v8.`u9.a.k` @type ^`int`;
  #L37c91e.  if v4 <= v5 then goto L37c93a;
  #L37c922.  call temp:= `y`(v8, v0) @signature `Lu9/a;.y:(I)Z` @kind direct;
  #L37c928.  v4:= temp;
  #L37c92a.  if v4 == 0 then goto L37c930;
  #L37c92e.  goto L37c93a;
  #L37c930.  call temp:= `W0`(v8, v2) @signature `Lu9/a;.W0:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L37c936.  v0:= temp @kind object;
  #L37c938.  throw v0;
  #L37c93a.  v2:= 0I;
  #L37c93c.  v4:= v8.`u9.a.j` @type ^`int`;
  #L37c940.  v5:= v4 + 4;
  #L37c944.  if v4 >= v5 then goto L37c9e0;
  #L37c948.  v6:= v8.`u9.a.i` @type ^`char`[] @kind object;
  #L37c94c.  v6:= v6[v4] @kind char;
  #L37c950.  v2:= v2 ^< 4;
  #L37c954.  v2:= (`char`) v2 @kind i2c;
  #L37c956.  v7:= 48I;
  #L37c95a.  if v6 < v7 then goto L37c970;
  #L37c95e.  v7:= 57I;
  #L37c962.  if v6 > v7 then goto L37c970;
  #L37c966.  v6:= v6 + -48;
  #L37c96a.  v2:= v2 + v6 @kind int;
  #L37c96c.  v2:= (`char`) v2 @kind i2c;
  #L37c96e.  goto L37c99a;
  #L37c970.  v7:= 97I;
  #L37c974.  if v6 < v7 then goto L37c984;
  #L37c978.  if v6 > v3 then goto L37c984;
  #L37c97c.  v6:= v6 + -97;
  #L37c980.  v6:= v6 + v1 @kind int;
  #L37c982.  goto L37c96a;
  #L37c984.  v7:= 65I;
  #L37c988.  if v6 < v7 then goto L37c9a0;
  #L37c98c.  v7:= 70I;
  #L37c990.  if v6 > v7 then goto L37c9a0;
  #L37c994.  v6:= v6 + -65;
  #L37c998.  goto L37c980;
  #L37c99a.  v4:= v4 + 1;
  #L37c99e.  goto L37c944;
  #L37c9a0.  v1:= new `java.lang.NumberFormatException`;
  #L37c9a4.  v2:= new `java.lang.StringBuilder`;
  #L37c9a8.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37c9ae.  v3:= "\\u" @kind object;
  #L37c9b2.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37c9b8.  v3:= new `java.lang.String`;
  #L37c9bc.  v4:= v8.`u9.a.i` @type ^`char`[] @kind object;
  #L37c9c0.  v5:= v8.`u9.a.j` @type ^`int`;
  #L37c9c4.  call `<init>`(v3, v4, v5, v0) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L37c9ca.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37c9d0.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37c9d6.  v0:= temp @kind object;
  #L37c9d8.  call `<init>`(v1, v0) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37c9de.  throw v1;
  #L37c9e0.  v1:= v8.`u9.a.j` @type ^`int`;
  #L37c9e4.  v1:= v1 + v0 @kind int;
  #L37c9e6.  v8.`u9.a.j` @type ^`int` := v1;
  #L37c9ea.  return v2;
  #L37c9ec.  v0:= "Invalid escape sequence" @kind object;
  #L37c9f0.  call temp:= `W0`(v8, v0) @signature `Lu9/a;.W0:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L37c9f6.  v0:= temp @kind object;
  #L37c9f8.  throw v0;
  #L37c9fa.  v0:= 9I;
  #L37c9fe.  return v0;
  #L37ca00.  v0:= 13I;
  #L37ca04.  return v0;
  #L37ca06.  return v1;
  #L37ca08.  v0:= 12I;
  #L37ca0c.  return v0;
  #L37ca0e.  v0:= 8I;
  #L37ca12.  return v0;
  #L37ca14.  v1:= v8.`u9.a.l` @type ^`int`;
  #L37ca18.  v1:= v1 + v3 @kind int;
  #L37ca1a.  v8.`u9.a.l` @type ^`int` := v1;
  #L37ca1e.  v8.`u9.a.m` @type ^`int` := v4;
  #L37ca22.  return v0;
}
procedure `boolean` `Q`(`u9.a` v1 @kind this, `char` v2 ) @signature `Lu9/a;.Q:(C)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L37c6a4.  v0:= 9I;
  #L37c6a8.  if v2 == v0 then goto L37c71c;
  #L37c6ac.  v0:= 10I;
  #L37c6b0.  if v2 == v0 then goto L37c71c;
  #L37c6b4.  v0:= 12I;
  #L37c6b8.  if v2 == v0 then goto L37c71c;
  #L37c6bc.  v0:= 13I;
  #L37c6c0.  if v2 == v0 then goto L37c71c;
  #L37c6c4.  v0:= 32I;
  #L37c6c8.  if v2 == v0 then goto L37c71c;
  #L37c6cc.  v0:= 35I;
  #L37c6d0.  if v2 == v0 then goto L37c716;
  #L37c6d4.  v0:= 44I;
  #L37c6d8.  if v2 == v0 then goto L37c71c;
  #L37c6dc.  v0:= 47I;
  #L37c6e0.  if v2 == v0 then goto L37c716;
  #L37c6e4.  v0:= 61I;
  #L37c6e8.  if v2 == v0 then goto L37c716;
  #L37c6ec.  v0:= 123I;
  #L37c6f0.  if v2 == v0 then goto L37c71c;
  #L37c6f4.  v0:= 125I;
  #L37c6f8.  if v2 == v0 then goto L37c71c;
  #L37c6fc.  v0:= 58I;
  #L37c700.  if v2 == v0 then goto L37c71c;
  #L37c704.  v0:= 59I;
  #L37c708.  if v2 == v0 then goto L37c716;
  #L37c70c.  goto L37c720;
  #L37c712.  v2:= 1I;
  #L37c714.  return v2;
  #L37c716.  call `k`(v1) @signature `Lu9/a;.k:()V` @kind direct;
  #L37c71c.  v2:= 0I;
  #L37c71e.  return v2;
  #L37c720.  switch v2
                  | 91 => goto L37c71c
                  | 92 => goto L37c716
                  | 93 => goto L37c71c
                  | else => goto L37c712;
}
procedure `void` `R0`(`u9.a` v6 @kind this, `char` v7 ) @signature `Lu9/a;.R0:(C)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L37e2c8.  v0:= v6.`u9.a.i` @type ^`char`[] @kind object;
  #L37e2cc.  v1:= v6.`u9.a.j` @type ^`int`;
  #L37e2d0.  v2:= v6.`u9.a.k` @type ^`int`;
  #L37e2d4.  v3:= 1I;
  #L37e2d6.  if v1 >= v2 then goto L37e322;
  #L37e2da.  v4:= v1 + 1;
  #L37e2de.  v1:= v0[v1] @kind char;
  #L37e2e2.  if v1 != v7 then goto L37e2ec;
  #L37e2e6.  v6.`u9.a.j` @type ^`int` := v4;
  #L37e2ea.  return @kind void;
  #L37e2ec.  v5:= 92I;
  #L37e2f0.  if v1 != v5 then goto L37e308;
  #L37e2f4.  v6.`u9.a.j` @type ^`int` := v4;
  #L37e2f8.  call temp:= `O0`(v6) @signature `Lu9/a;.O0:()C` @kind direct;
  #L37e2fe.  v1:= v6.`u9.a.j` @type ^`int`;
  #L37e302.  v2:= v6.`u9.a.k` @type ^`int`;
  #L37e306.  goto L37e2d4;
  #L37e308.  v5:= 10I;
  #L37e30c.  if v1 != v5 then goto L37e31e;
  #L37e310.  v1:= v6.`u9.a.l` @type ^`int`;
  #L37e314.  v1:= v1 + v3 @kind int;
  #L37e316.  v6.`u9.a.l` @type ^`int` := v1;
  #L37e31a.  v6.`u9.a.m` @type ^`int` := v4;
  #L37e31e.  v1:= v4;
  #L37e320.  goto L37e2d4;
  #L37e322.  v6.`u9.a.j` @type ^`int` := v1;
  #L37e326.  call temp:= `y`(v6, v3) @signature `Lu9/a;.y:(I)Z` @kind direct;
  #L37e32c.  v1:= temp;
  #L37e32e.  if v1 == 0 then goto L37e334;
  #L37e332.  goto L37e2cc;
  #L37e334.  v7:= "Unterminated string" @kind object;
  #L37e338.  call temp:= `W0`(v6, v7) @signature `Lu9/a;.W0:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L37e33e.  v7:= temp @kind object;
  #L37e340.  throw v7;
}
procedure `boolean` `S0`(`u9.a` v6 @kind this, `java.lang.String` v7 @kind object) @signature `Lu9/a;.S0:(Ljava/lang/String;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L37c7ec.  call temp:= `length`(v7) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L37c7f2.  v0:= temp;
  #L37c7f4.  v1:= v6.`u9.a.j` @type ^`int`;
  #L37c7f8.  v1:= v1 + v0 @kind int;
  #L37c7fa.  v2:= v6.`u9.a.k` @type ^`int`;
  #L37c7fe.  v3:= 0I;
  #L37c800.  if v1 <= v2 then goto L37c814;
  #L37c804.  call temp:= `y`(v6, v0) @signature `Lu9/a;.y:(I)Z` @kind direct;
  #L37c80a.  v1:= temp;
  #L37c80c.  if v1 == 0 then goto L37c812;
  #L37c810.  goto L37c814;
  #L37c812.  return v3;
  #L37c814.  v1:= v6.`u9.a.i` @type ^`char`[] @kind object;
  #L37c818.  v2:= v6.`u9.a.j` @type ^`int`;
  #L37c81c.  v1:= v1[v2] @kind char;
  #L37c820.  v4:= 10I;
  #L37c824.  v5:= 1I;
  #L37c826.  if v1 != v4 then goto L37c83e;
  #L37c82a.  v1:= v6.`u9.a.l` @type ^`int`;
  #L37c82e.  v1:= v1 + v5 @kind int;
  #L37c830.  v6.`u9.a.l` @type ^`int` := v1;
  #L37c834.  v2:= v2 + 1;
  #L37c838.  v6.`u9.a.m` @type ^`int` := v2;
  #L37c83c.  goto L37c85c;
  #L37c83e.  if v3 >= v0 then goto L37c86e;
  #L37c842.  v1:= v6.`u9.a.i` @type ^`char`[] @kind object;
  #L37c846.  v2:= v6.`u9.a.j` @type ^`int`;
  #L37c84a.  v2:= v2 + v3 @kind int;
  #L37c84c.  v1:= v1[v2] @kind char;
  #L37c850.  call temp:= `charAt`(v7, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L37c856.  v2:= temp;
  #L37c858.  if v1 == v2 then goto L37c868;
  #L37c85c.  v1:= v6.`u9.a.j` @type ^`int`;
  #L37c860.  v1:= v1 + v5 @kind int;
  #L37c862.  v6.`u9.a.j` @type ^`int` := v1;
  #L37c866.  goto L37c7f4;
  #L37c868.  v3:= v3 + 1;
  #L37c86c.  goto L37c83e;
  #L37c86e.  return v5;
}
procedure `void` `T0`(`u9.a` v4 @kind this) @signature `Lu9/a;.T0:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L37e354.  v0:= v4.`u9.a.j` @type ^`int`;
  #L37e358.  v1:= v4.`u9.a.k` @type ^`int`;
  #L37e35c.  v2:= 1I;
  #L37e35e.  if v0 < v1 then goto L37e36e;
  #L37e362.  call temp:= `y`(v4, v2) @signature `Lu9/a;.y:(I)Z` @kind direct;
  #L37e368.  v0:= temp;
  #L37e36a.  if v0 == 0 then goto L37e3a2;
  #L37e36e.  v0:= v4.`u9.a.i` @type ^`char`[] @kind object;
  #L37e372.  v1:= v4.`u9.a.j` @type ^`int`;
  #L37e376.  v3:= v1 + 1;
  #L37e37a.  v4.`u9.a.j` @type ^`int` := v3;
  #L37e37e.  v0:= v0[v1] @kind char;
  #L37e382.  v1:= 10I;
  #L37e386.  if v0 != v1 then goto L37e39a;
  #L37e38a.  v0:= v4.`u9.a.l` @type ^`int`;
  #L37e38e.  v0:= v0 + v2 @kind int;
  #L37e390.  v4.`u9.a.l` @type ^`int` := v0;
  #L37e394.  v4.`u9.a.m` @type ^`int` := v3;
  #L37e398.  goto L37e3a2;
  #L37e39a.  v1:= 13I;
  #L37e39e.  if v0 != v1 then goto L37e354;
  #L37e3a2.  return @kind void;
}
procedure `void` `U0`(`u9.a` v4 @kind this) @signature `Lu9/a;.U0:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L37e3b4.  v0:= 0I;
  #L37e3b6.  v1:= v4.`u9.a.j` @type ^`int`;
  #L37e3ba.  v2:= v1 + v0 @kind int;
  #L37e3be.  v3:= v4.`u9.a.k` @type ^`int`;
  #L37e3c2.  if v2 >= v3 then goto L37e456;
  #L37e3c6.  v2:= v4.`u9.a.i` @type ^`char`[] @kind object;
  #L37e3ca.  v1:= v1 + v0 @kind int;
  #L37e3cc.  v1:= v2[v1] @kind char;
  #L37e3d0.  v2:= 9I;
  #L37e3d4.  if v1 == v2 then goto L37e44a;
  #L37e3d8.  v2:= 10I;
  #L37e3dc.  if v1 == v2 then goto L37e44a;
  #L37e3e0.  v2:= 12I;
  #L37e3e4.  if v1 == v2 then goto L37e44a;
  #L37e3e8.  v2:= 13I;
  #L37e3ec.  if v1 == v2 then goto L37e44a;
  #L37e3f0.  v2:= 32I;
  #L37e3f4.  if v1 == v2 then goto L37e44a;
  #L37e3f8.  v2:= 35I;
  #L37e3fc.  if v1 == v2 then goto L37e444;
  #L37e400.  v2:= 44I;
  #L37e404.  if v1 == v2 then goto L37e44a;
  #L37e408.  v2:= 47I;
  #L37e40c.  if v1 == v2 then goto L37e444;
  #L37e410.  v2:= 61I;
  #L37e414.  if v1 == v2 then goto L37e444;
  #L37e418.  v2:= 123I;
  #L37e41c.  if v1 == v2 then goto L37e44a;
  #L37e420.  v2:= 125I;
  #L37e424.  if v1 == v2 then goto L37e44a;
  #L37e428.  v2:= 58I;
  #L37e42c.  if v1 == v2 then goto L37e44a;
  #L37e430.  v2:= 59I;
  #L37e434.  if v1 == v2 then goto L37e444;
  #L37e438.  goto L37e46c;
  #L37e43e.  v0:= v0 + 1;
  #L37e442.  goto L37e3b6;
  #L37e444.  call `k`(v4) @signature `Lu9/a;.k:()V` @kind direct;
  #L37e44a.  v1:= v4.`u9.a.j` @type ^`int`;
  #L37e44e.  v1:= v1 + v0 @kind int;
  #L37e450.  v4.`u9.a.j` @type ^`int` := v1;
  #L37e454.  return @kind void;
  #L37e456.  v1:= v1 + v0 @kind int;
  #L37e458.  v4.`u9.a.j` @type ^`int` := v1;
  #L37e45c.  v0:= 1I;
  #L37e45e.  call temp:= `y`(v4, v0) @signature `Lu9/a;.y:(I)Z` @kind direct;
  #L37e464.  v0:= temp;
  #L37e466.  if v0 != 0 then goto L37e3b4;
  #L37e46a.  return @kind void;
  #L37e46c.  switch v1
                  | 91 => goto L37e44a
                  | 92 => goto L37e444
                  | 93 => goto L37e44a
                  | else => goto L37e43e;
}
procedure `java.io.IOException` `W0`(`u9.a` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lu9/a;.W0:(Ljava/lang/String;)Ljava/io/IOException;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L37d588.  v0:= new `u9.d`;
  #L37d58c.  v1:= new `java.lang.StringBuilder`;
  #L37d590.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37d596.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37d59c.  call temp:= `V`(v2) @signature `Lu9/a;.V:()Ljava/lang/String;` @kind virtual;
  #L37d5a2.  v3:= temp @kind object;
  #L37d5a4.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37d5aa.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37d5b0.  v3:= temp @kind object;
  #L37d5b2.  call `<init>`(v0, v3) @signature `Lu9/d;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37d5b8.  throw v0;
}
procedure `int` `j0`(`u9.a` v7 @kind this, `boolean` v8 ) @signature `Lu9/a;.j0:(Z)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L37d0e0.  v0:= v7.`u9.a.i` @type ^`char`[] @kind object;
  #L37d0e4.  v1:= v7.`u9.a.j` @type ^`int`;
  #L37d0e8.  v2:= v7.`u9.a.k` @type ^`int`;
  #L37d0ec.  v3:= 1I;
  #L37d0ee.  if v1 != v2 then goto L37d148;
  #L37d0f2.  v7.`u9.a.j` @type ^`int` := v1;
  #L37d0f6.  call temp:= `y`(v7, v3) @signature `Lu9/a;.y:(I)Z` @kind direct;
  #L37d0fc.  v1:= temp;
  #L37d0fe.  if v1 != 0 then goto L37d140;
  #L37d102.  if v8 != 0 then goto L37d10a;
  #L37d106.  v8:= -1I;
  #L37d108.  return v8;
  #L37d10a.  v8:= new `java.io.EOFException`;
  #L37d10e.  v0:= new `java.lang.StringBuilder`;
  #L37d112.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37d118.  v1:= "End of input" @kind object;
  #L37d11c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37d122.  call temp:= `V`(v7) @signature `Lu9/a;.V:()Ljava/lang/String;` @kind virtual;
  #L37d128.  v1:= temp @kind object;
  #L37d12a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37d130.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37d136.  v0:= temp @kind object;
  #L37d138.  call `<init>`(v8, v0) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37d13e.  throw v8;
  #L37d140.  v1:= v7.`u9.a.j` @type ^`int`;
  #L37d144.  v2:= v7.`u9.a.k` @type ^`int`;
  #L37d148.  v4:= v1 + 1;
  #L37d14c.  v1:= v0[v1] @kind char;
  #L37d150.  v5:= 10I;
  #L37d154.  if v1 != v5 then goto L37d16a;
  #L37d158.  v1:= v7.`u9.a.l` @type ^`int`;
  #L37d15c.  v1:= v1 + v3 @kind int;
  #L37d15e.  v7.`u9.a.l` @type ^`int` := v1;
  #L37d162.  v7.`u9.a.m` @type ^`int` := v4;
  #L37d166.  goto L37d248;
  #L37d16a.  v5:= 32I;
  #L37d16e.  if v1 == v5 then goto L37d248;
  #L37d172.  v5:= 13I;
  #L37d176.  if v1 == v5 then goto L37d248;
  #L37d17a.  v5:= 9I;
  #L37d17e.  if v1 != v5 then goto L37d184;
  #L37d182.  goto L37d248;
  #L37d184.  v5:= 47I;
  #L37d188.  if v1 != v5 then goto L37d21e;
  #L37d18c.  v7.`u9.a.j` @type ^`int` := v4;
  #L37d190.  v6:= 2I;
  #L37d192.  if v4 != v2 then goto L37d1b6;
  #L37d196.  v4:= v4 + -1;
  #L37d19a.  v7.`u9.a.j` @type ^`int` := v4;
  #L37d19e.  call temp:= `y`(v7, v6) @signature `Lu9/a;.y:(I)Z` @kind direct;
  #L37d1a4.  v2:= temp;
  #L37d1a6.  v4:= v7.`u9.a.j` @type ^`int`;
  #L37d1aa.  v4:= v4 + v3 @kind int;
  #L37d1ac.  v7.`u9.a.j` @type ^`int` := v4;
  #L37d1b0.  if v2 != 0 then goto L37d1b6;
  #L37d1b4.  return v1;
  #L37d1b6.  call `k`(v7) @signature `Lu9/a;.k:()V` @kind direct;
  #L37d1bc.  v2:= v7.`u9.a.j` @type ^`int`;
  #L37d1c0.  v3:= v0[v2] @kind char;
  #L37d1c4.  v4:= 42I;
  #L37d1c8.  if v3 == v4 then goto L37d1ea;
  #L37d1cc.  if v3 == v5 then goto L37d1d2;
  #L37d1d0.  return v1;
  #L37d1d2.  v2:= v2 + 1;
  #L37d1d6.  v7.`u9.a.j` @type ^`int` := v2;
  #L37d1da.  call `T0`(v7) @signature `Lu9/a;.T0:()V` @kind direct;
  #L37d1e0.  v1:= v7.`u9.a.j` @type ^`int`;
  #L37d1e4.  v2:= v7.`u9.a.k` @type ^`int`;
  #L37d1e8.  goto L37d0ec;
  #L37d1ea.  v2:= v2 + 1;
  #L37d1ee.  v7.`u9.a.j` @type ^`int` := v2;
  #L37d1f2.  v1:= "*/" @kind object;
  #L37d1f6.  call temp:= `S0`(v7, v1) @signature `Lu9/a;.S0:(Ljava/lang/String;)Z` @kind direct;
  #L37d1fc.  v1:= temp;
  #L37d1fe.  if v1 == 0 then goto L37d210;
  #L37d202.  v1:= v7.`u9.a.j` @type ^`int`;
  #L37d206.  v1:= v1 + v6 @kind int;
  #L37d208.  v2:= v7.`u9.a.k` @type ^`int`;
  #L37d20c.  goto L37d0ec;
  #L37d210.  v8:= "Unterminated comment" @kind object;
  #L37d214.  call temp:= `W0`(v7, v8) @signature `Lu9/a;.W0:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L37d21a.  v8:= temp @kind object;
  #L37d21c.  throw v8;
  #L37d21e.  v2:= 35I;
  #L37d222.  if v1 != v2 then goto L37d242;
  #L37d226.  v7.`u9.a.j` @type ^`int` := v4;
  #L37d22a.  call `k`(v7) @signature `Lu9/a;.k:()V` @kind direct;
  #L37d230.  call `T0`(v7) @signature `Lu9/a;.T0:()V` @kind direct;
  #L37d236.  v1:= v7.`u9.a.j` @type ^`int`;
  #L37d23a.  v2:= v7.`u9.a.k` @type ^`int`;
  #L37d23e.  goto L37d0ec;
  #L37d242.  v7.`u9.a.j` @type ^`int` := v4;
  #L37d246.  return v1;
  #L37d248.  v1:= v4;
  #L37d24a.  goto L37d0ec;
}
procedure `void` `k`(`u9.a` v1 @kind this) @signature `Lu9/a;.k:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L37df94.  v0:= v1.`u9.a.h` @type ^`boolean` @kind boolean;
  #L37df98.  if v0 == 0 then goto L37df9e;
  #L37df9c.  return @kind void;
  #L37df9e.  v0:= "Use JsonReader.setLenient(true) to accept malformed JSON" @kind object;
  #L37dfa2.  call temp:= `W0`(v1, v0) @signature `Lu9/a;.W0:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L37dfa8.  v0:= temp @kind object;
  #L37dfaa.  throw v0;
}
procedure `java.lang.String` `l0`(`u9.a` v9 @kind this, `char` v10 ) @signature `Lu9/a;.l0:(C)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L37d7a4.  v0:= v9.`u9.a.i` @type ^`char`[] @kind object;
  #L37d7a8.  v1:= 0I;
  #L37d7aa.  v2:= v9.`u9.a.j` @type ^`int`;
  #L37d7ae.  v3:= v9.`u9.a.k` @type ^`int`;
  #L37d7b2.  v4:= v3;
  #L37d7b4.  v3:= v2;
  #L37d7b6.  v5:= 16I;
  #L37d7ba.  v6:= 1I;
  #L37d7bc.  if v2 >= v4 then goto L37d85c;
  #L37d7c0.  v7:= v2 + 1;
  #L37d7c4.  v2:= v0[v2] @kind char;
  #L37d7c8.  if v2 != v10 then goto L37d7f4;
  #L37d7cc.  v9.`u9.a.j` @type ^`int` := v7;
  #L37d7d0.  v7:= v7 - v3 @kind int;
  #L37d7d2.  v7:= v7 - v6 @kind int;
  #L37d7d4.  if v1 != 0 then goto L37d7e4;
  #L37d7d8.  v10:= new `java.lang.String`;
  #L37d7dc.  call `<init>`(v10, v0, v3, v7) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L37d7e2.  return v10 @kind object;
  #L37d7e4.  call temp:= `append`(v1, v0, v3, v7) @signature `Ljava/lang/StringBuilder;.append:([CII)Ljava/lang/StringBuilder;` @kind virtual;
  #L37d7ea.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37d7f0.  v10:= temp @kind object;
  #L37d7f2.  return v10 @kind object;
  #L37d7f4.  v8:= 92I;
  #L37d7f8.  if v2 != v8 then goto L37d842;
  #L37d7fc.  v9.`u9.a.j` @type ^`int` := v7;
  #L37d800.  v7:= v7 - v3 @kind int;
  #L37d802.  v7:= v7 - v6 @kind int;
  #L37d804.  if v1 != 0 then goto L37d824;
  #L37d808.  v1:= v7 + 1;
  #L37d80c.  v1:= v1 * 2;
  #L37d810.  v2:= new `java.lang.StringBuilder`;
  #L37d814.  call temp:= `max`(v1, v5) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L37d81a.  v1:= temp;
  #L37d81c.  call `<init>`(v2, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L37d822.  v1:= v2 @kind object;
  #L37d824.  call temp:= `append`(v1, v0, v3, v7) @signature `Ljava/lang/StringBuilder;.append:([CII)Ljava/lang/StringBuilder;` @kind virtual;
  #L37d82a.  call temp:= `O0`(v9) @signature `Lu9/a;.O0:()C` @kind direct;
  #L37d830.  v2:= temp;
  #L37d832.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L37d838.  v2:= v9.`u9.a.j` @type ^`int`;
  #L37d83c.  v3:= v9.`u9.a.k` @type ^`int`;
  #L37d840.  goto L37d7b2;
  #L37d842.  v5:= 10I;
  #L37d846.  if v2 != v5 then goto L37d858;
  #L37d84a.  v2:= v9.`u9.a.l` @type ^`int`;
  #L37d84e.  v2:= v2 + v6 @kind int;
  #L37d850.  v9.`u9.a.l` @type ^`int` := v2;
  #L37d854.  v9.`u9.a.m` @type ^`int` := v7;
  #L37d858.  v2:= v7;
  #L37d85a.  goto L37d7b6;
  #L37d85c.  if v1 != 0 then goto L37d87c;
  #L37d860.  v1:= v2 - v3 @kind int;
  #L37d864.  v1:= v1 * 2;
  #L37d868.  v4:= new `java.lang.StringBuilder`;
  #L37d86c.  call temp:= `max`(v1, v5) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L37d872.  v1:= temp;
  #L37d874.  call `<init>`(v4, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L37d87a.  v1:= v4 @kind object;
  #L37d87c.  v4:= v2 - v3 @kind int;
  #L37d880.  call temp:= `append`(v1, v0, v3, v4) @signature `Ljava/lang/StringBuilder;.append:([CII)Ljava/lang/StringBuilder;` @kind virtual;
  #L37d886.  v9.`u9.a.j` @type ^`int` := v2;
  #L37d88a.  call temp:= `y`(v9, v6) @signature `Lu9/a;.y:(I)Z` @kind direct;
  #L37d890.  v2:= temp;
  #L37d892.  if v2 == 0 then goto L37d898;
  #L37d896.  goto L37d7aa;
  #L37d898.  v10:= "Unterminated string" @kind object;
  #L37d89c.  call temp:= `W0`(v9, v10) @signature `Lu9/a;.W0:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L37d8a2.  v10:= temp @kind object;
  #L37d8a4.  throw v10;
}
procedure `java.lang.String` `q0`(`u9.a` v6 @kind this) @signature `Lu9/a;.q0:()Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L37d9d0.  v0:= 0I;
  #L37d9d2.  v1:= 0I;
  #L37d9d4.  v2:= 0I;
  #L37d9d6.  v3:= v6.`u9.a.j` @type ^`int`;
  #L37d9da.  v4:= v3 + v2 @kind int;
  #L37d9de.  v5:= v6.`u9.a.k` @type ^`int`;
  #L37d9e2.  if v4 >= v5 then goto L37da6c;
  #L37d9e6.  v4:= v6.`u9.a.i` @type ^`char`[] @kind object;
  #L37d9ea.  v3:= v3 + v2 @kind int;
  #L37d9ec.  v3:= v4[v3] @kind char;
  #L37d9f0.  v4:= 9I;
  #L37d9f4.  if v3 == v4 then goto L37da88;
  #L37d9f8.  v4:= 10I;
  #L37d9fc.  if v3 == v4 then goto L37da88;
  #L37da00.  v4:= 12I;
  #L37da04.  if v3 == v4 then goto L37da88;
  #L37da08.  v4:= 13I;
  #L37da0c.  if v3 == v4 then goto L37da88;
  #L37da10.  v4:= 32I;
  #L37da14.  if v3 == v4 then goto L37da88;
  #L37da18.  v4:= 35I;
  #L37da1c.  if v3 == v4 then goto L37da64;
  #L37da20.  v4:= 44I;
  #L37da24.  if v3 == v4 then goto L37da88;
  #L37da28.  v4:= 47I;
  #L37da2c.  if v3 == v4 then goto L37da64;
  #L37da30.  v4:= 61I;
  #L37da34.  if v3 == v4 then goto L37da64;
  #L37da38.  v4:= 123I;
  #L37da3c.  if v3 == v4 then goto L37da88;
  #L37da40.  v4:= 125I;
  #L37da44.  if v3 == v4 then goto L37da88;
  #L37da48.  v4:= 58I;
  #L37da4c.  if v3 == v4 then goto L37da88;
  #L37da50.  v4:= 59I;
  #L37da54.  if v3 == v4 then goto L37da64;
  #L37da58.  goto L37db08;
  #L37da5e.  v2:= v2 + 1;
  #L37da62.  goto L37d9d6;
  #L37da64.  call `k`(v6) @signature `Lu9/a;.k:()V` @kind direct;
  #L37da6a.  goto L37da88;
  #L37da6c.  v3:= v6.`u9.a.i` @type ^`char`[] @kind object;
  #L37da70.  v3:= length @variable v3;
  #L37da72.  if v2 >= v3 then goto L37da8c;
  #L37da76.  v3:= v2 + 1;
  #L37da7a.  call temp:= `y`(v6, v3) @signature `Lu9/a;.y:(I)Z` @kind direct;
  #L37da80.  v3:= temp;
  #L37da82.  if v3 == 0 then goto L37da88;
  #L37da86.  goto L37d9d6;
  #L37da88.  v0:= v2;
  #L37da8a.  goto L37dacc;
  #L37da8c.  if v1 != 0 then goto L37daa6;
  #L37da90.  v1:= new `java.lang.StringBuilder`;
  #L37da94.  v3:= 16I;
  #L37da98.  call temp:= `max`(v2, v3) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L37da9e.  v3:= temp;
  #L37daa0.  call `<init>`(v1, v3) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L37daa6.  v3:= v6.`u9.a.i` @type ^`char`[] @kind object;
  #L37daaa.  v4:= v6.`u9.a.j` @type ^`int`;
  #L37daae.  call temp:= `append`(v1, v3, v4, v2) @signature `Ljava/lang/StringBuilder;.append:([CII)Ljava/lang/StringBuilder;` @kind virtual;
  #L37dab4.  v3:= v6.`u9.a.j` @type ^`int`;
  #L37dab8.  v3:= v3 + v2 @kind int;
  #L37daba.  v6.`u9.a.j` @type ^`int` := v3;
  #L37dabe.  v2:= 1I;
  #L37dac0.  call temp:= `y`(v6, v2) @signature `Lu9/a;.y:(I)Z` @kind direct;
  #L37dac6.  v2:= temp;
  #L37dac8.  if v2 != 0 then goto L37d9d4;
  #L37dacc.  if v1 != 0 then goto L37dae4;
  #L37dad0.  v1:= new `java.lang.String`;
  #L37dad4.  v2:= v6.`u9.a.i` @type ^`char`[] @kind object;
  #L37dad8.  v3:= v6.`u9.a.j` @type ^`int`;
  #L37dadc.  call `<init>`(v1, v2, v3, v0) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L37dae2.  goto L37dafa;
  #L37dae4.  v2:= v6.`u9.a.i` @type ^`char`[] @kind object;
  #L37dae8.  v3:= v6.`u9.a.j` @type ^`int`;
  #L37daec.  call temp:= `append`(v1, v2, v3, v0) @signature `Ljava/lang/StringBuilder;.append:([CII)Ljava/lang/StringBuilder;` @kind virtual;
  #L37daf2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37daf8.  v1:= temp @kind object;
  #L37dafa.  v2:= v6.`u9.a.j` @type ^`int`;
  #L37dafe.  v2:= v2 + v0 @kind int;
  #L37db00.  v6.`u9.a.j` @type ^`int` := v2;
  #L37db04.  return v1 @kind object;
  #L37db06.  
  #L37db08.  switch v3
                  | 91 => goto L37da88
                  | 92 => goto L37da64
                  | 93 => goto L37da88
                  | else => goto L37da5e;
}
procedure `void` `r`(`u9.a` v5 @kind this) @signature `Lu9/a;.r:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L37dff0.  v0:= 1I;
  #L37dff2.  call temp:= `j0`(v5, v0) @signature `Lu9/a;.j0:(Z)I` @kind direct;
  #L37dff8.  v1:= v5.`u9.a.j` @type ^`int`;
  #L37dffc.  v1:= v1 - v0 @kind int;
  #L37dffe.  v5.`u9.a.j` @type ^`int` := v1;
  #L37e002.  v0:= v1 + 5;
  #L37e006.  v2:= v5.`u9.a.k` @type ^`int`;
  #L37e00a.  v3:= 5I;
  #L37e00c.  if v0 <= v2 then goto L37e01e;
  #L37e010.  call temp:= `y`(v5, v3) @signature `Lu9/a;.y:(I)Z` @kind direct;
  #L37e016.  v0:= temp;
  #L37e018.  if v0 != 0 then goto L37e01e;
  #L37e01c.  return @kind void;
  #L37e01e.  v0:= v5.`u9.a.i` @type ^`char`[] @kind object;
  #L37e022.  v2:= v0[v1] @kind char;
  #L37e026.  v4:= 41I;
  #L37e02a.  if v2 != v4 then goto L37e07a;
  #L37e02e.  v2:= v1 + 1;
  #L37e032.  v2:= v0[v2] @kind char;
  #L37e036.  v4:= 93I;
  #L37e03a.  if v2 != v4 then goto L37e07a;
  #L37e03e.  v2:= v1 + 2;
  #L37e042.  v2:= v0[v2] @kind char;
  #L37e046.  v4:= 125I;
  #L37e04a.  if v2 != v4 then goto L37e07a;
  #L37e04e.  v2:= v1 + 3;
  #L37e052.  v2:= v0[v2] @kind char;
  #L37e056.  v4:= 39I;
  #L37e05a.  if v2 != v4 then goto L37e07a;
  #L37e05e.  v1:= v1 + 4;
  #L37e062.  v0:= v0[v1] @kind char;
  #L37e066.  v1:= 10I;
  #L37e06a.  if v0 == v1 then goto L37e070;
  #L37e06e.  goto L37e07a;
  #L37e070.  v0:= v5.`u9.a.j` @type ^`int`;
  #L37e074.  v0:= v0 + v3 @kind int;
  #L37e076.  v5.`u9.a.j` @type ^`int` := v0;
  #L37e07a.  return @kind void;
}
procedure `int` `x0`(`u9.a` v8 @kind this) @signature `Lu9/a;.x0:()I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L37d260.  v0:= v8.`u9.a.i` @type ^`char`[] @kind object;
  #L37d264.  v1:= v8.`u9.a.j` @type ^`int`;
  #L37d268.  v0:= v0[v1] @kind char;
  #L37d26c.  v1:= 0I;
  #L37d26e.  v2:= 116I;
  #L37d272.  if v0 == v2 then goto L37d2be;
  #L37d276.  v2:= 84I;
  #L37d27a.  if v0 != v2 then goto L37d280;
  #L37d27e.  goto L37d2be;
  #L37d280.  v2:= 102I;
  #L37d284.  if v0 == v2 then goto L37d2b2;
  #L37d288.  v2:= 70I;
  #L37d28c.  if v0 != v2 then goto L37d292;
  #L37d290.  goto L37d2b2;
  #L37d292.  v2:= 110I;
  #L37d296.  if v0 == v2 then goto L37d2a6;
  #L37d29a.  v2:= 78I;
  #L37d29e.  if v0 != v2 then goto L37d2a4;
  #L37d2a2.  goto L37d2a6;
  #L37d2a4.  return v1;
  #L37d2a6.  v0:= 7I;
  #L37d2a8.  v2:= "null" @kind object;
  #L37d2ac.  v3:= "NULL" @kind object;
  #L37d2b0.  goto L37d2c8;
  #L37d2b2.  v0:= 6I;
  #L37d2b4.  v2:= "false" @kind object;
  #L37d2b8.  v3:= "FALSE" @kind object;
  #L37d2bc.  goto L37d2c8;
  #L37d2be.  v0:= 5I;
  #L37d2c0.  v2:= "true" @kind object;
  #L37d2c4.  v3:= "TRUE" @kind object;
  #L37d2c8.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L37d2ce.  v4:= temp;
  #L37d2d0.  v5:= 1I;
  #L37d2d2.  if v5 >= v4 then goto L37d324;
  #L37d2d6.  v6:= v8.`u9.a.j` @type ^`int`;
  #L37d2da.  v6:= v6 + v5 @kind int;
  #L37d2dc.  v7:= v8.`u9.a.k` @type ^`int`;
  #L37d2e0.  if v6 < v7 then goto L37d2f6;
  #L37d2e4.  v6:= v5 + 1;
  #L37d2e8.  call temp:= `y`(v8, v6) @signature `Lu9/a;.y:(I)Z` @kind direct;
  #L37d2ee.  v6:= temp;
  #L37d2f0.  if v6 != 0 then goto L37d2f6;
  #L37d2f4.  return v1;
  #L37d2f6.  v6:= v8.`u9.a.i` @type ^`char`[] @kind object;
  #L37d2fa.  v7:= v8.`u9.a.j` @type ^`int`;
  #L37d2fe.  v7:= v7 + v5 @kind int;
  #L37d300.  v6:= v6[v7] @kind char;
  #L37d304.  call temp:= `charAt`(v2, v5) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L37d30a.  v7:= temp;
  #L37d30c.  if v6 == v7 then goto L37d31e;
  #L37d310.  call temp:= `charAt`(v3, v5) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L37d316.  v7:= temp;
  #L37d318.  if v6 == v7 then goto L37d31e;
  #L37d31c.  return v1;
  #L37d31e.  v5:= v5 + 1;
  #L37d322.  goto L37d2d2;
  #L37d324.  v2:= v8.`u9.a.j` @type ^`int`;
  #L37d328.  v2:= v2 + v4 @kind int;
  #L37d32a.  v3:= v8.`u9.a.k` @type ^`int`;
  #L37d32e.  if v2 < v3 then goto L37d342;
  #L37d332.  v2:= v4 + 1;
  #L37d336.  call temp:= `y`(v8, v2) @signature `Lu9/a;.y:(I)Z` @kind direct;
  #L37d33c.  v2:= temp;
  #L37d33e.  if v2 == 0 then goto L37d35e;
  #L37d342.  v2:= v8.`u9.a.i` @type ^`char`[] @kind object;
  #L37d346.  v3:= v8.`u9.a.j` @type ^`int`;
  #L37d34a.  v3:= v3 + v4 @kind int;
  #L37d34c.  v2:= v2[v3] @kind char;
  #L37d350.  call temp:= `Q`(v8, v2) @signature `Lu9/a;.Q:(C)Z` @kind direct;
  #L37d356.  v2:= temp;
  #L37d358.  if v2 == 0 then goto L37d35e;
  #L37d35c.  return v1;
  #L37d35e.  v1:= v8.`u9.a.j` @type ^`int`;
  #L37d362.  v1:= v1 + v4 @kind int;
  #L37d364.  v8.`u9.a.j` @type ^`int` := v1;
  #L37d368.  v8.`u9.a.n` @type ^`int` := v0;
  #L37d36c.  return v0;
}
procedure `boolean` `y`(`u9.a` v7 @kind this, `int` v8 ) @signature `Lu9/a;.y:(I)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L37c5b0.  v0:= v7.`u9.a.i` @type ^`char`[] @kind object;
  #L37c5b4.  v1:= v7.`u9.a.m` @type ^`int`;
  #L37c5b8.  v2:= v7.`u9.a.j` @type ^`int`;
  #L37c5bc.  v1:= v1 - v2 @kind int;
  #L37c5be.  v7.`u9.a.m` @type ^`int` := v1;
  #L37c5c2.  v1:= v7.`u9.a.k` @type ^`int`;
  #L37c5c6.  v3:= 0I;
  #L37c5c8.  if v1 == v2 then goto L37c5da;
  #L37c5cc.  v1:= v1 - v2 @kind int;
  #L37c5ce.  v7.`u9.a.k` @type ^`int` := v1;
  #L37c5d2.  call `arraycopy`(v0, v2, v0, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L37c5d8.  goto L37c5de;
  #L37c5da.  v7.`u9.a.k` @type ^`int` := v3;
  #L37c5de.  v7.`u9.a.j` @type ^`int` := v3;
  #L37c5e2.  v1:= v7.`u9.a.g` @type ^`java.io.Reader` @kind object;
  #L37c5e6.  v2:= v7.`u9.a.k` @type ^`int`;
  #L37c5ea.  v4:= length @variable v0;
  #L37c5ec.  v4:= v4 - v2 @kind int;
  #L37c5ee.  call temp:= `read`(v1, v0, v2, v4) @signature `Ljava/io/Reader;.read:([CII)I` @kind virtual;
  #L37c5f4.  v1:= temp;
  #L37c5f6.  v2:= -1I;
  #L37c5f8.  if v1 == v2 then goto L37c646;
  #L37c5fc.  v2:= v7.`u9.a.k` @type ^`int`;
  #L37c600.  v2:= v2 + v1 @kind int;
  #L37c602.  v7.`u9.a.k` @type ^`int` := v2;
  #L37c606.  v1:= v7.`u9.a.l` @type ^`int`;
  #L37c60a.  v4:= 1I;
  #L37c60c.  if v1 != 0 then goto L37c640;
  #L37c610.  v1:= v7.`u9.a.m` @type ^`int`;
  #L37c614.  if v1 != 0 then goto L37c640;
  #L37c618.  if v2 <= 0 then goto L37c640;
  #L37c61c.  v5:= v0[v3] @kind char;
  #L37c620.  v6:= 65279I;
  #L37c626.  if v5 != v6 then goto L37c640;
  #L37c62a.  v5:= v7.`u9.a.j` @type ^`int`;
  #L37c62e.  v5:= v5 + v4 @kind int;
  #L37c630.  v7.`u9.a.j` @type ^`int` := v5;
  #L37c634.  v1:= v1 + 1;
  #L37c638.  v7.`u9.a.m` @type ^`int` := v1;
  #L37c63c.  v8:= v8 + 1;
  #L37c640.  if v2 < v8 then goto L37c5e2;
  #L37c644.  return v4;
  #L37c646.  return v3;
}
procedure `boolean` `C`(`u9.a` v2 @kind this) @signature `Lu9/a;.C:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L37c658.  v0:= v2.`u9.a.n` @type ^`int`;
  #L37c65c.  if v0 != 0 then goto L37c668;
  #L37c660.  call temp:= `s`(v2) @signature `Lu9/a;.s:()I` @kind virtual;
  #L37c666.  v0:= temp;
  #L37c668.  v1:= 2I;
  #L37c66a.  if v0 == v1 then goto L37c678;
  #L37c66e.  v1:= 4I;
  #L37c670.  if v0 == v1 then goto L37c678;
  #L37c674.  v0:= 1I;
  #L37c676.  goto L37c67a;
  #L37c678.  v0:= 0I;
  #L37c67a.  return v0;
}
procedure `boolean` `J`(`u9.a` v1 @kind this) @signature `Lu9/a;.J:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L37c68c.  v0:= v1.`u9.a.h` @type ^`boolean` @kind boolean;
  #L37c690.  return v0;
}
procedure `void` `Q0`(`u9.a` v0 @kind this, `boolean` v1 ) @signature `Lu9/a;.Q0:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L37e2b0.  v0.`u9.a.h` @type ^`boolean` := v1 @kind boolean;
  #L37e2b4.  return @kind void;
}
procedure `java.lang.String` `V`(`u9.a` v4 @kind this) @signature `Lu9/a;.V:()Ljava/lang/String;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L37d678.  v0:= v4.`u9.a.l` @type ^`int`;
  #L37d67c.  v0:= v0 + 1;
  #L37d680.  v1:= v4.`u9.a.j` @type ^`int`;
  #L37d684.  v2:= v4.`u9.a.m` @type ^`int`;
  #L37d688.  v1:= v1 - v2 @kind int;
  #L37d68a.  v1:= v1 + 1;
  #L37d68e.  v2:= new `java.lang.StringBuilder`;
  #L37d692.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37d698.  v3:= " at line " @kind object;
  #L37d69c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37d6a2.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L37d6a8.  v0:= " column " @kind object;
  #L37d6ac.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37d6b2.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L37d6b8.  v0:= " path " @kind object;
  #L37d6bc.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37d6c2.  call temp:= `r0`(v4) @signature `Lu9/a;.r0:()Ljava/lang/String;` @kind virtual;
  #L37d6c8.  v0:= temp @kind object;
  #L37d6ca.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37d6d0.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37d6d6.  v0:= temp @kind object;
  #L37d6d8.  return v0 @kind object;
}
procedure `void` `V0`(`u9.a` v5 @kind this) @signature `Lu9/a;.V0:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L37e490.  v0:= 0I;
  #L37e492.  v1:= 0I;
  #L37e494.  v2:= v5.`u9.a.n` @type ^`int`;
  #L37e498.  if v2 != 0 then goto L37e4a4;
  #L37e49c.  call temp:= `s`(v5) @signature `Lu9/a;.s:()I` @kind virtual;
  #L37e4a2.  v2:= temp;
  #L37e4a4.  v3:= 3I;
  #L37e4a6.  v4:= 1I;
  #L37e4a8.  if v2 != v3 then goto L37e4b8;
  #L37e4ac.  call `E0`(v5, v4) @signature `Lu9/a;.E0:(I)V` @kind direct;
  #L37e4b2.  v1:= v1 + 1;
  #L37e4b6.  goto L37e558;
  #L37e4b8.  if v2 != v4 then goto L37e4c4;
  #L37e4bc.  call `E0`(v5, v3) @signature `Lu9/a;.E0:(I)V` @kind direct;
  #L37e4c2.  goto L37e4b2;
  #L37e4c4.  v3:= 4I;
  #L37e4c6.  if v2 != v3 then goto L37e4da;
  #L37e4ca.  v2:= v5.`u9.a.s` @type ^`int`;
  #L37e4ce.  v2:= v2 - v4 @kind int;
  #L37e4d0.  v5.`u9.a.s` @type ^`int` := v2;
  #L37e4d4.  v1:= v1 + -1;
  #L37e4d8.  goto L37e558;
  #L37e4da.  v3:= 2I;
  #L37e4dc.  if v2 != v3 then goto L37e4ec;
  #L37e4e0.  v2:= v5.`u9.a.s` @type ^`int`;
  #L37e4e4.  v2:= v2 - v4 @kind int;
  #L37e4e6.  v5.`u9.a.s` @type ^`int` := v2;
  #L37e4ea.  goto L37e4d4;
  #L37e4ec.  v3:= 14I;
  #L37e4f0.  if v2 == v3 then goto L37e552;
  #L37e4f4.  v3:= 10I;
  #L37e4f8.  if v2 != v3 then goto L37e4fe;
  #L37e4fc.  goto L37e552;
  #L37e4fe.  v3:= 8I;
  #L37e502.  if v2 == v3 then goto L37e546;
  #L37e506.  v3:= 12I;
  #L37e50a.  if v2 != v3 then goto L37e510;
  #L37e50e.  goto L37e546;
  #L37e510.  v3:= 9I;
  #L37e514.  if v2 == v3 then goto L37e53a;
  #L37e518.  v3:= 13I;
  #L37e51c.  if v2 != v3 then goto L37e522;
  #L37e520.  goto L37e53a;
  #L37e522.  v3:= 16I;
  #L37e526.  if v2 != v3 then goto L37e558;
  #L37e52a.  v2:= v5.`u9.a.j` @type ^`int`;
  #L37e52e.  v3:= v5.`u9.a.p` @type ^`int`;
  #L37e532.  v2:= v2 + v3 @kind int;
  #L37e534.  v5.`u9.a.j` @type ^`int` := v2;
  #L37e538.  goto L37e558;
  #L37e53a.  v2:= 34I;
  #L37e53e.  call `R0`(v5, v2) @signature `Lu9/a;.R0:(C)V` @kind direct;
  #L37e544.  goto L37e558;
  #L37e546.  v2:= 39I;
  #L37e54a.  call `R0`(v5, v2) @signature `Lu9/a;.R0:(C)V` @kind direct;
  #L37e550.  goto L37e558;
  #L37e552.  call `U0`(v5) @signature `Lu9/a;.U0:()V` @kind direct;
  #L37e558.  v5.`u9.a.n` @type ^`int` := v0;
  #L37e55c.  if v1 != 0 then goto L37e494;
  #L37e560.  v0:= v5.`u9.a.u` @type ^`int`[] @kind object;
  #L37e564.  v1:= v5.`u9.a.s` @type ^`int`;
  #L37e568.  v2:= v1 + -1;
  #L37e56c.  v3:= v0[v2];
  #L37e570.  v3:= v3 + v4 @kind int;
  #L37e572.  v0[v2]:= v3;
  #L37e576.  v0:= v5.`u9.a.t` @type ^`java.lang.String`[] @kind object;
  #L37e57a.  v1:= v1 - v4 @kind int;
  #L37e57c.  v2:= "null" @kind object;
  #L37e580.  v0[v1]:= v2 @kind object;
  #L37e584.  return @kind void;
}
procedure `boolean` `Y`(`u9.a` v5 @kind this) @signature `Lu9/a;.Y:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L37c744.  v0:= v5.`u9.a.n` @type ^`int`;
  #L37c748.  if v0 != 0 then goto L37c754;
  #L37c74c.  call temp:= `s`(v5) @signature `Lu9/a;.s:()I` @kind virtual;
  #L37c752.  v0:= temp;
  #L37c754.  v1:= 5I;
  #L37c756.  v2:= 0I;
  #L37c758.  v3:= 1I;
  #L37c75a.  if v0 != v1 then goto L37c778;
  #L37c75e.  v5.`u9.a.n` @type ^`int` := v2;
  #L37c762.  v0:= v5.`u9.a.u` @type ^`int`[] @kind object;
  #L37c766.  v1:= v5.`u9.a.s` @type ^`int`;
  #L37c76a.  v1:= v1 - v3 @kind int;
  #L37c76c.  v2:= v0[v1];
  #L37c770.  v2:= v2 + v3 @kind int;
  #L37c772.  v0[v1]:= v2;
  #L37c776.  return v3;
  #L37c778.  v1:= 6I;
  #L37c77a.  if v0 != v1 then goto L37c798;
  #L37c77e.  v5.`u9.a.n` @type ^`int` := v2;
  #L37c782.  v0:= v5.`u9.a.u` @type ^`int`[] @kind object;
  #L37c786.  v1:= v5.`u9.a.s` @type ^`int`;
  #L37c78a.  v1:= v1 - v3 @kind int;
  #L37c78c.  v4:= v0[v1];
  #L37c790.  v4:= v4 + v3 @kind int;
  #L37c792.  v0[v1]:= v4;
  #L37c796.  return v2;
  #L37c798.  v0:= new `java.lang.IllegalStateException`;
  #L37c79c.  v1:= new `java.lang.StringBuilder`;
  #L37c7a0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37c7a6.  v2:= "Expected a boolean but was " @kind object;
  #L37c7aa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37c7b0.  call temp:= `u0`(v5) @signature `Lu9/a;.u0:()Lu9/b;` @kind virtual;
  #L37c7b6.  v2:= temp @kind object;
  #L37c7b8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37c7be.  call temp:= `V`(v5) @signature `Lu9/a;.V:()Ljava/lang/String;` @kind virtual;
  #L37c7c4.  v2:= temp @kind object;
  #L37c7c6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37c7cc.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37c7d2.  v1:= temp @kind object;
  #L37c7d4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37c7da.  throw v0;
}
procedure `double` `Z`(`u9.a` v6 @kind this) @signature `Lu9/a;.Z:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L37ca34.  v0:= v6.`u9.a.n` @type ^`int`;
  #L37ca38.  if v0 != 0 then goto L37ca44;
  #L37ca3c.  call temp:= `s`(v6) @signature `Lu9/a;.s:()I` @kind virtual;
  #L37ca42.  v0:= temp;
  #L37ca44.  v1:= 15I;
  #L37ca48.  v2:= 0I;
  #L37ca4a.  if v0 != v1 then goto L37ca72;
  #L37ca4e.  v6.`u9.a.n` @type ^`int` := v2;
  #L37ca52.  v0:= v6.`u9.a.u` @type ^`int`[] @kind object;
  #L37ca56.  v1:= v6.`u9.a.s` @type ^`int`;
  #L37ca5a.  v1:= v1 + -1;
  #L37ca5e.  v2:= v0[v1];
  #L37ca62.  v2:= v2 + 1;
  #L37ca66.  v0[v1]:= v2;
  #L37ca6a.  v0:= v6.`u9.a.o` @type ^`long` @kind wide;
  #L37ca6e.  v0:= (`double`) v0 @kind l2d;
  #L37ca70.  return v0 @kind wide;
  #L37ca72.  v1:= 16I;
  #L37ca76.  v3:= 11I;
  #L37ca7a.  if v0 != v1 then goto L37caa8;
  #L37ca7e.  v0:= new `java.lang.String`;
  #L37ca82.  v1:= v6.`u9.a.i` @type ^`char`[] @kind object;
  #L37ca86.  v4:= v6.`u9.a.j` @type ^`int`;
  #L37ca8a.  v5:= v6.`u9.a.p` @type ^`int`;
  #L37ca8e.  call `<init>`(v0, v1, v4, v5) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L37ca94.  v6.`u9.a.q` @type ^`java.lang.String` := v0 @kind object;
  #L37ca98.  v0:= v6.`u9.a.j` @type ^`int`;
  #L37ca9c.  v1:= v6.`u9.a.p` @type ^`int`;
  #L37caa0.  v0:= v0 + v1 @kind int;
  #L37caa2.  v6.`u9.a.j` @type ^`int` := v0;
  #L37caa6.  goto L37cb34;
  #L37caa8.  v1:= 8I;
  #L37caac.  if v0 == v1 then goto L37cb1a;
  #L37cab0.  v4:= 9I;
  #L37cab4.  if v0 != v4 then goto L37caba;
  #L37cab8.  goto L37cb1a;
  #L37caba.  v1:= 10I;
  #L37cabe.  if v0 != v1 then goto L37cad0;
  #L37cac2.  call temp:= `q0`(v6) @signature `Lu9/a;.q0:()Ljava/lang/String;` @kind direct;
  #L37cac8.  v0:= temp @kind object;
  #L37caca.  v6.`u9.a.q` @type ^`java.lang.String` := v0 @kind object;
  #L37cace.  goto L37cb34;
  #L37cad0.  if v0 != v3 then goto L37cad6;
  #L37cad4.  goto L37cb34;
  #L37cad6.  v0:= new `java.lang.IllegalStateException`;
  #L37cada.  v1:= new `java.lang.StringBuilder`;
  #L37cade.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37cae4.  v2:= "Expected a double but was " @kind object;
  #L37cae8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37caee.  call temp:= `u0`(v6) @signature `Lu9/a;.u0:()Lu9/b;` @kind virtual;
  #L37caf4.  v2:= temp @kind object;
  #L37caf6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37cafc.  call temp:= `V`(v6) @signature `Lu9/a;.V:()Ljava/lang/String;` @kind virtual;
  #L37cb02.  v2:= temp @kind object;
  #L37cb04.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37cb0a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37cb10.  v1:= temp @kind object;
  #L37cb12.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37cb18.  throw v0;
  #L37cb1a.  if v0 != v1 then goto L37cb24;
  #L37cb1e.  v0:= 39I;
  #L37cb22.  goto L37cb28;
  #L37cb24.  v0:= 34I;
  #L37cb28.  call temp:= `l0`(v6, v0) @signature `Lu9/a;.l0:(C)Ljava/lang/String;` @kind direct;
  #L37cb2e.  v0:= temp @kind object;
  #L37cb30.  v6.`u9.a.q` @type ^`java.lang.String` := v0 @kind object;
  #L37cb34.  v6.`u9.a.n` @type ^`int` := v3;
  #L37cb38.  v0:= v6.`u9.a.q` @type ^`java.lang.String` @kind object;
  #L37cb3c.  call temp:= `parseDouble`(v0) @signature `Ljava/lang/Double;.parseDouble:(Ljava/lang/String;)D` @kind static;
  #L37cb42.  v0:= temp @kind wide;
  #L37cb44.  v3:= v6.`u9.a.h` @type ^`boolean` @kind boolean;
  #L37cb48.  if v3 != 0 then goto L37cba2;
  #L37cb4c.  call temp:= `isNaN`(v0) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L37cb52.  v3:= temp;
  #L37cb54.  if v3 != 0 then goto L37cb66;
  #L37cb58.  call temp:= `isInfinite`(v0) @signature `Ljava/lang/Double;.isInfinite:(D)Z` @kind static;
  #L37cb5e.  v3:= temp;
  #L37cb60.  if v3 != 0 then goto L37cb66;
  #L37cb64.  goto L37cba2;
  #L37cb66.  v2:= new `u9.d`;
  #L37cb6a.  v3:= new `java.lang.StringBuilder`;
  #L37cb6e.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37cb74.  v4:= "JSON forbids NaN and infinities: " @kind object;
  #L37cb78.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37cb7e.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(D)Ljava/lang/StringBuilder;` @kind virtual;
  #L37cb84.  call temp:= `V`(v6) @signature `Lu9/a;.V:()Ljava/lang/String;` @kind virtual;
  #L37cb8a.  v0:= temp @kind object;
  #L37cb8c.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37cb92.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37cb98.  v0:= temp @kind object;
  #L37cb9a.  call `<init>`(v2, v0) @signature `Lu9/d;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37cba0.  throw v2;
  #L37cba2.  v3:= 0I;
  #L37cba4.  v6.`u9.a.q` @type ^`java.lang.String` := v3 @kind object;
  #L37cba8.  v6.`u9.a.n` @type ^`int` := v2;
  #L37cbac.  v2:= v6.`u9.a.u` @type ^`int`[] @kind object;
  #L37cbb0.  v3:= v6.`u9.a.s` @type ^`int`;
  #L37cbb4.  v3:= v3 + -1;
  #L37cbb8.  v4:= v2[v3];
  #L37cbbc.  v4:= v4 + 1;
  #L37cbc0.  v2[v3]:= v4;
  #L37cbc4.  return v0 @kind wide;
}
procedure `int` `a0`(`u9.a` v8 @kind this) @signature `Lu9/a;.a0:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L37ced4.  v0:= v8.`u9.a.n` @type ^`int`;
  #L37ced8.  if v0 != 0 then goto L37cee4;
  #L37cedc.  call temp:= `s`(v8) @signature `Lu9/a;.s:()I` @kind virtual;
  #L37cee2.  v0:= temp;
  #L37cee4.  v1:= 15I;
  #L37cee8.  v2:= "Expected an int but was " @kind object;
  #L37ceec.  v3:= 0I;
  #L37ceee.  if v0 != v1 then goto L37cf5c;
  #L37cef2.  v0:= v8.`u9.a.o` @type ^`long` @kind wide;
  #L37cef6.  v4:= (`int`) v0 @kind l2i;
  #L37cef8.  v5:= (`long`) v4 @kind i2l;
  #L37cefa.  v7:= lcmp(v0, v5);
  #L37cefe.  if v7 != 0 then goto L37cf20;
  #L37cf02.  v8.`u9.a.n` @type ^`int` := v3;
  #L37cf06.  v0:= v8.`u9.a.u` @type ^`int`[] @kind object;
  #L37cf0a.  v1:= v8.`u9.a.s` @type ^`int`;
  #L37cf0e.  v1:= v1 + -1;
  #L37cf12.  v2:= v0[v1];
  #L37cf16.  v2:= v2 + 1;
  #L37cf1a.  v0[v1]:= v2;
  #L37cf1e.  return v4;
  #L37cf20.  v0:= new `java.lang.NumberFormatException`;
  #L37cf24.  v1:= new `java.lang.StringBuilder`;
  #L37cf28.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37cf2e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37cf34.  v2:= v8.`u9.a.o` @type ^`long` @kind wide;
  #L37cf38.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L37cf3e.  call temp:= `V`(v8) @signature `Lu9/a;.V:()Ljava/lang/String;` @kind virtual;
  #L37cf44.  v2:= temp @kind object;
  #L37cf46.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37cf4c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37cf52.  v1:= temp @kind object;
  #L37cf54.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37cf5a.  throw v0;
  #L37cf5c.  v1:= 16I;
  #L37cf60.  if v0 != v1 then goto L37cf8e;
  #L37cf64.  v0:= new `java.lang.String`;
  #L37cf68.  v1:= v8.`u9.a.i` @type ^`char`[] @kind object;
  #L37cf6c.  v4:= v8.`u9.a.j` @type ^`int`;
  #L37cf70.  v5:= v8.`u9.a.p` @type ^`int`;
  #L37cf74.  call `<init>`(v0, v1, v4, v5) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L37cf7a.  v8.`u9.a.q` @type ^`java.lang.String` := v0 @kind object;
  #L37cf7e.  v0:= v8.`u9.a.j` @type ^`int`;
  #L37cf82.  v1:= v8.`u9.a.p` @type ^`int`;
  #L37cf86.  v0:= v0 + v1 @kind int;
  #L37cf88.  v8.`u9.a.j` @type ^`int` := v0;
  #L37cf8c.  goto L37d040;
  #L37cf8e.  v1:= 10I;
  #L37cf92.  v4:= 8I;
  #L37cf96.  if v0 == v4 then goto L37cfe8;
  #L37cf9a.  v5:= 9I;
  #L37cf9e.  if v0 == v5 then goto L37cfe8;
  #L37cfa2.  if v0 != v1 then goto L37cfa8;
  #L37cfa6.  goto L37cfe8;
  #L37cfa8.  v0:= new `java.lang.IllegalStateException`;
  #L37cfac.  v1:= new `java.lang.StringBuilder`;
  #L37cfb0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37cfb6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37cfbc.  call temp:= `u0`(v8) @signature `Lu9/a;.u0:()Lu9/b;` @kind virtual;
  #L37cfc2.  v2:= temp @kind object;
  #L37cfc4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37cfca.  call temp:= `V`(v8) @signature `Lu9/a;.V:()Ljava/lang/String;` @kind virtual;
  #L37cfd0.  v2:= temp @kind object;
  #L37cfd2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37cfd8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37cfde.  v1:= temp @kind object;
  #L37cfe0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37cfe6.  throw v0;
  #L37cfe8.  if v0 != v1 then goto L37cffa;
  #L37cfec.  call temp:= `q0`(v8) @signature `Lu9/a;.q0:()Ljava/lang/String;` @kind direct;
  #L37cff2.  v0:= temp @kind object;
  #L37cff4.  v8.`u9.a.q` @type ^`java.lang.String` := v0 @kind object;
  #L37cff8.  goto L37d014;
  #L37cffa.  if v0 != v4 then goto L37d004;
  #L37cffe.  v0:= 39I;
  #L37d002.  goto L37d008;
  #L37d004.  v0:= 34I;
  #L37d008.  call temp:= `l0`(v8, v0) @signature `Lu9/a;.l0:(C)Ljava/lang/String;` @kind direct;
  #L37d00e.  v0:= temp @kind object;
  #L37d010.  v8.`u9.a.q` @type ^`java.lang.String` := v0 @kind object;
  #L37d014.  v0:= v8.`u9.a.q` @type ^`java.lang.String` @kind object;
  #L37d018.  call temp:= `parseInt`(v0) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L37d01e.  v0:= temp;
  #L37d020.  v8.`u9.a.n` @type ^`int` := v3;
  #L37d024.  v1:= v8.`u9.a.u` @type ^`int`[] @kind object;
  #L37d028.  v4:= v8.`u9.a.s` @type ^`int`;
  #L37d02c.  v4:= v4 + -1;
  #L37d030.  v5:= v1[v4];
  #L37d034.  v5:= v5 + 1;
  #L37d038.  v1[v4]:= v5;
  #L37d03c.  return v0;
  #L37d03e.  
  #L37d040.  v0:= 11I;
  #L37d044.  v8.`u9.a.n` @type ^`int` := v0;
  #L37d048.  v0:= v8.`u9.a.q` @type ^`java.lang.String` @kind object;
  #L37d04c.  call temp:= `parseDouble`(v0) @signature `Ljava/lang/Double;.parseDouble:(Ljava/lang/String;)D` @kind static;
  #L37d052.  v0:= temp @kind wide;
  #L37d054.  v4:= (`int`) v0 @kind d2i;
  #L37d056.  v5:= (`double`) v4 @kind i2d;
  #L37d058.  v7:= dcmpl(v5, v0);
  #L37d05c.  if v7 != 0 then goto L37d084;
  #L37d060.  v0:= 0I;
  #L37d062.  v8.`u9.a.q` @type ^`java.lang.String` := v0 @kind object;
  #L37d066.  v8.`u9.a.n` @type ^`int` := v3;
  #L37d06a.  v0:= v8.`u9.a.u` @type ^`int`[] @kind object;
  #L37d06e.  v1:= v8.`u9.a.s` @type ^`int`;
  #L37d072.  v1:= v1 + -1;
  #L37d076.  v2:= v0[v1];
  #L37d07a.  v2:= v2 + 1;
  #L37d07e.  v0[v1]:= v2;
  #L37d082.  return v4;
  #L37d084.  v0:= new `java.lang.NumberFormatException`;
  #L37d088.  v1:= new `java.lang.StringBuilder`;
  #L37d08c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37d092.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37d098.  v2:= v8.`u9.a.q` @type ^`java.lang.String` @kind object;
  #L37d09c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37d0a2.  call temp:= `V`(v8) @signature `Lu9/a;.V:()Ljava/lang/String;` @kind virtual;
  #L37d0a8.  v2:= temp @kind object;
  #L37d0aa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37d0b0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37d0b6.  v1:= temp @kind object;
  #L37d0b8.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37d0be.  throw v0;
  catch `java.lang.NumberFormatException` @[L37d014..L37d03c] goto L37d03e;
}
procedure `void` `close`(`u9.a` v3 @kind this) @signature `Lu9/a;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L37dfbc.  v0:= 0I;
  #L37dfbe.  v3.`u9.a.n` @type ^`int` := v0;
  #L37dfc2.  v1:= v3.`u9.a.r` @type ^`int`[] @kind object;
  #L37dfc6.  v2:= 8I;
  #L37dfca.  v1[v0]:= v2;
  #L37dfce.  v0:= 1I;
  #L37dfd0.  v3.`u9.a.s` @type ^`int` := v0;
  #L37dfd4.  v0:= v3.`u9.a.g` @type ^`java.io.Reader` @kind object;
  #L37dfd8.  call `close`(v0) @signature `Ljava/io/Reader;.close:()V` @kind virtual;
  #L37dfde.  return @kind void;
}
procedure `long` `d0`(`u9.a` v9 @kind this) @signature `Lu9/a;.d0:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L37db74.  v0:= v9.`u9.a.n` @type ^`int`;
  #L37db78.  if v0 != 0 then goto L37db84;
  #L37db7c.  call temp:= `s`(v9) @signature `Lu9/a;.s:()I` @kind virtual;
  #L37db82.  v0:= temp;
  #L37db84.  v1:= 15I;
  #L37db88.  v2:= 0I;
  #L37db8a.  if v0 != v1 then goto L37dbb0;
  #L37db8e.  v9.`u9.a.n` @type ^`int` := v2;
  #L37db92.  v0:= v9.`u9.a.u` @type ^`int`[] @kind object;
  #L37db96.  v1:= v9.`u9.a.s` @type ^`int`;
  #L37db9a.  v1:= v1 + -1;
  #L37db9e.  v2:= v0[v1];
  #L37dba2.  v2:= v2 + 1;
  #L37dba6.  v0[v1]:= v2;
  #L37dbaa.  v0:= v9.`u9.a.o` @type ^`long` @kind wide;
  #L37dbae.  return v0 @kind wide;
  #L37dbb0.  v1:= 16I;
  #L37dbb4.  v3:= "Expected a long but was " @kind object;
  #L37dbb8.  if v0 != v1 then goto L37dbe6;
  #L37dbbc.  v0:= new `java.lang.String`;
  #L37dbc0.  v1:= v9.`u9.a.i` @type ^`char`[] @kind object;
  #L37dbc4.  v4:= v9.`u9.a.j` @type ^`int`;
  #L37dbc8.  v5:= v9.`u9.a.p` @type ^`int`;
  #L37dbcc.  call `<init>`(v0, v1, v4, v5) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L37dbd2.  v9.`u9.a.q` @type ^`java.lang.String` := v0 @kind object;
  #L37dbd6.  v0:= v9.`u9.a.j` @type ^`int`;
  #L37dbda.  v1:= v9.`u9.a.p` @type ^`int`;
  #L37dbde.  v0:= v0 + v1 @kind int;
  #L37dbe0.  v9.`u9.a.j` @type ^`int` := v0;
  #L37dbe4.  goto L37dc98;
  #L37dbe6.  v1:= 10I;
  #L37dbea.  v4:= 8I;
  #L37dbee.  if v0 == v4 then goto L37dc40;
  #L37dbf2.  v5:= 9I;
  #L37dbf6.  if v0 == v5 then goto L37dc40;
  #L37dbfa.  if v0 != v1 then goto L37dc00;
  #L37dbfe.  goto L37dc40;
  #L37dc00.  v0:= new `java.lang.IllegalStateException`;
  #L37dc04.  v1:= new `java.lang.StringBuilder`;
  #L37dc08.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37dc0e.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37dc14.  call temp:= `u0`(v9) @signature `Lu9/a;.u0:()Lu9/b;` @kind virtual;
  #L37dc1a.  v2:= temp @kind object;
  #L37dc1c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37dc22.  call temp:= `V`(v9) @signature `Lu9/a;.V:()Ljava/lang/String;` @kind virtual;
  #L37dc28.  v2:= temp @kind object;
  #L37dc2a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37dc30.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37dc36.  v1:= temp @kind object;
  #L37dc38.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37dc3e.  throw v0;
  #L37dc40.  if v0 != v1 then goto L37dc52;
  #L37dc44.  call temp:= `q0`(v9) @signature `Lu9/a;.q0:()Ljava/lang/String;` @kind direct;
  #L37dc4a.  v0:= temp @kind object;
  #L37dc4c.  v9.`u9.a.q` @type ^`java.lang.String` := v0 @kind object;
  #L37dc50.  goto L37dc6c;
  #L37dc52.  if v0 != v4 then goto L37dc5c;
  #L37dc56.  v0:= 39I;
  #L37dc5a.  goto L37dc60;
  #L37dc5c.  v0:= 34I;
  #L37dc60.  call temp:= `l0`(v9, v0) @signature `Lu9/a;.l0:(C)Ljava/lang/String;` @kind direct;
  #L37dc66.  v0:= temp @kind object;
  #L37dc68.  v9.`u9.a.q` @type ^`java.lang.String` := v0 @kind object;
  #L37dc6c.  v0:= v9.`u9.a.q` @type ^`java.lang.String` @kind object;
  #L37dc70.  call temp:= `parseLong`(v0) @signature `Ljava/lang/Long;.parseLong:(Ljava/lang/String;)J` @kind static;
  #L37dc76.  v0:= temp @kind wide;
  #L37dc78.  v9.`u9.a.n` @type ^`int` := v2;
  #L37dc7c.  v4:= v9.`u9.a.u` @type ^`int`[] @kind object;
  #L37dc80.  v5:= v9.`u9.a.s` @type ^`int`;
  #L37dc84.  v5:= v5 + -1;
  #L37dc88.  v6:= v4[v5];
  #L37dc8c.  v6:= v6 + 1;
  #L37dc90.  v4[v5]:= v6;
  #L37dc94.  return v0 @kind wide;
  #L37dc96.  
  #L37dc98.  v0:= 11I;
  #L37dc9c.  v9.`u9.a.n` @type ^`int` := v0;
  #L37dca0.  v0:= v9.`u9.a.q` @type ^`java.lang.String` @kind object;
  #L37dca4.  call temp:= `parseDouble`(v0) @signature `Ljava/lang/Double;.parseDouble:(Ljava/lang/String;)D` @kind static;
  #L37dcaa.  v0:= temp @kind wide;
  #L37dcac.  v4:= (`long`) v0 @kind d2l;
  #L37dcae.  v6:= (`double`) v4 @kind l2d;
  #L37dcb0.  v8:= dcmpl(v6, v0);
  #L37dcb4.  if v8 != 0 then goto L37dcdc;
  #L37dcb8.  v0:= 0I;
  #L37dcba.  v9.`u9.a.q` @type ^`java.lang.String` := v0 @kind object;
  #L37dcbe.  v9.`u9.a.n` @type ^`int` := v2;
  #L37dcc2.  v0:= v9.`u9.a.u` @type ^`int`[] @kind object;
  #L37dcc6.  v1:= v9.`u9.a.s` @type ^`int`;
  #L37dcca.  v1:= v1 + -1;
  #L37dcce.  v2:= v0[v1];
  #L37dcd2.  v2:= v2 + 1;
  #L37dcd6.  v0[v1]:= v2;
  #L37dcda.  return v4 @kind wide;
  #L37dcdc.  v0:= new `java.lang.NumberFormatException`;
  #L37dce0.  v1:= new `java.lang.StringBuilder`;
  #L37dce4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37dcea.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37dcf0.  v2:= v9.`u9.a.q` @type ^`java.lang.String` @kind object;
  #L37dcf4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37dcfa.  call temp:= `V`(v9) @signature `Lu9/a;.V:()Ljava/lang/String;` @kind virtual;
  #L37dd00.  v2:= temp @kind object;
  #L37dd02.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37dd08.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37dd0e.  v1:= temp @kind object;
  #L37dd10.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37dd16.  throw v0;
  catch `java.lang.NumberFormatException` @[L37dc6c..L37dc94] goto L37dc96;
}
procedure `void` `e`(`u9.a` v3 @kind this) @signature `Lu9/a;.e:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L37de90.  v0:= v3.`u9.a.n` @type ^`int`;
  #L37de94.  if v0 != 0 then goto L37dea0;
  #L37de98.  call temp:= `s`(v3) @signature `Lu9/a;.s:()I` @kind virtual;
  #L37de9e.  v0:= temp;
  #L37dea0.  v1:= 3I;
  #L37dea2.  if v0 != v1 then goto L37dec4;
  #L37dea6.  v0:= 1I;
  #L37dea8.  call `E0`(v3, v0) @signature `Lu9/a;.E0:(I)V` @kind direct;
  #L37deae.  v1:= v3.`u9.a.u` @type ^`int`[] @kind object;
  #L37deb2.  v2:= v3.`u9.a.s` @type ^`int`;
  #L37deb6.  v2:= v2 - v0 @kind int;
  #L37deb8.  v0:= 0I;
  #L37deba.  v1[v2]:= v0;
  #L37debe.  v3.`u9.a.n` @type ^`int` := v0;
  #L37dec2.  return @kind void;
  #L37dec4.  v0:= new `java.lang.IllegalStateException`;
  #L37dec8.  v1:= new `java.lang.StringBuilder`;
  #L37decc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37ded2.  v2:= "Expected BEGIN_ARRAY but was " @kind object;
  #L37ded6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37dedc.  call temp:= `u0`(v3) @signature `Lu9/a;.u0:()Lu9/b;` @kind virtual;
  #L37dee2.  v2:= temp @kind object;
  #L37dee4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37deea.  call temp:= `V`(v3) @signature `Lu9/a;.V:()Ljava/lang/String;` @kind virtual;
  #L37def0.  v2:= temp @kind object;
  #L37def2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37def8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37defe.  v1:= temp @kind object;
  #L37df00.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37df06.  throw v0;
}
procedure `void` `i`(`u9.a` v3 @kind this) @signature `Lu9/a;.i:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L37df18.  v0:= v3.`u9.a.n` @type ^`int`;
  #L37df1c.  if v0 != 0 then goto L37df28;
  #L37df20.  call temp:= `s`(v3) @signature `Lu9/a;.s:()I` @kind virtual;
  #L37df26.  v0:= temp;
  #L37df28.  v1:= 1I;
  #L37df2a.  if v0 != v1 then goto L37df3e;
  #L37df2e.  v0:= 3I;
  #L37df30.  call `E0`(v3, v0) @signature `Lu9/a;.E0:(I)V` @kind direct;
  #L37df36.  v0:= 0I;
  #L37df38.  v3.`u9.a.n` @type ^`int` := v0;
  #L37df3c.  return @kind void;
  #L37df3e.  v0:= new `java.lang.IllegalStateException`;
  #L37df42.  v1:= new `java.lang.StringBuilder`;
  #L37df46.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37df4c.  v2:= "Expected BEGIN_OBJECT but was " @kind object;
  #L37df50.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37df56.  call temp:= `u0`(v3) @signature `Lu9/a;.u0:()Lu9/b;` @kind virtual;
  #L37df5c.  v2:= temp @kind object;
  #L37df5e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37df64.  call temp:= `V`(v3) @signature `Lu9/a;.V:()Ljava/lang/String;` @kind virtual;
  #L37df6a.  v2:= temp @kind object;
  #L37df6c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37df72.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37df78.  v1:= temp @kind object;
  #L37df7a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37df80.  throw v0;
}
procedure `java.lang.String` `i0`(`u9.a` v3 @kind this) @signature `Lu9/a;.i0:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L37d6ec.  v0:= v3.`u9.a.n` @type ^`int`;
  #L37d6f0.  if v0 != 0 then goto L37d6fc;
  #L37d6f4.  call temp:= `s`(v3) @signature `Lu9/a;.s:()I` @kind virtual;
  #L37d6fa.  v0:= temp;
  #L37d6fc.  v1:= 14I;
  #L37d700.  if v0 != v1 then goto L37d70e;
  #L37d704.  call temp:= `q0`(v3) @signature `Lu9/a;.q0:()Ljava/lang/String;` @kind direct;
  #L37d70a.  v0:= temp @kind object;
  #L37d70c.  goto L37d738;
  #L37d70e.  v1:= 12I;
  #L37d712.  if v0 != v1 then goto L37d724;
  #L37d716.  v0:= 39I;
  #L37d71a.  call temp:= `l0`(v3, v0) @signature `Lu9/a;.l0:(C)Ljava/lang/String;` @kind direct;
  #L37d720.  v0:= temp @kind object;
  #L37d722.  goto L37d738;
  #L37d724.  v1:= 13I;
  #L37d728.  if v0 != v1 then goto L37d750;
  #L37d72c.  v0:= 34I;
  #L37d730.  call temp:= `l0`(v3, v0) @signature `Lu9/a;.l0:(C)Ljava/lang/String;` @kind direct;
  #L37d736.  v0:= temp @kind object;
  #L37d738.  v1:= 0I;
  #L37d73a.  v3.`u9.a.n` @type ^`int` := v1;
  #L37d73e.  v1:= v3.`u9.a.t` @type ^`java.lang.String`[] @kind object;
  #L37d742.  v2:= v3.`u9.a.s` @type ^`int`;
  #L37d746.  v2:= v2 + -1;
  #L37d74a.  v1[v2]:= v0 @kind object;
  #L37d74e.  return v0 @kind object;
  #L37d750.  v0:= new `java.lang.IllegalStateException`;
  #L37d754.  v1:= new `java.lang.StringBuilder`;
  #L37d758.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37d75e.  v2:= "Expected a name but was " @kind object;
  #L37d762.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37d768.  call temp:= `u0`(v3) @signature `Lu9/a;.u0:()Lu9/b;` @kind virtual;
  #L37d76e.  v2:= temp @kind object;
  #L37d770.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37d776.  call temp:= `V`(v3) @signature `Lu9/a;.V:()Ljava/lang/String;` @kind virtual;
  #L37d77c.  v2:= temp @kind object;
  #L37d77e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37d784.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37d78a.  v1:= temp @kind object;
  #L37d78c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37d792.  throw v0;
}
procedure `void` `k0`(`u9.a` v3 @kind this) @signature `Lu9/a;.k0:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L37e1bc.  v0:= v3.`u9.a.n` @type ^`int`;
  #L37e1c0.  if v0 != 0 then goto L37e1cc;
  #L37e1c4.  call temp:= `s`(v3) @signature `Lu9/a;.s:()I` @kind virtual;
  #L37e1ca.  v0:= temp;
  #L37e1cc.  v1:= 7I;
  #L37e1ce.  if v0 != v1 then goto L37e1f2;
  #L37e1d2.  v0:= 0I;
  #L37e1d4.  v3.`u9.a.n` @type ^`int` := v0;
  #L37e1d8.  v0:= v3.`u9.a.u` @type ^`int`[] @kind object;
  #L37e1dc.  v1:= v3.`u9.a.s` @type ^`int`;
  #L37e1e0.  v1:= v1 + -1;
  #L37e1e4.  v2:= v0[v1];
  #L37e1e8.  v2:= v2 + 1;
  #L37e1ec.  v0[v1]:= v2;
  #L37e1f0.  return @kind void;
  #L37e1f2.  v0:= new `java.lang.IllegalStateException`;
  #L37e1f6.  v1:= new `java.lang.StringBuilder`;
  #L37e1fa.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37e200.  v2:= "Expected null but was " @kind object;
  #L37e204.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37e20a.  call temp:= `u0`(v3) @signature `Lu9/a;.u0:()Lu9/b;` @kind virtual;
  #L37e210.  v2:= temp @kind object;
  #L37e212.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37e218.  call temp:= `V`(v3) @signature `Lu9/a;.V:()Ljava/lang/String;` @kind virtual;
  #L37e21e.  v2:= temp @kind object;
  #L37e220.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37e226.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37e22c.  v1:= temp @kind object;
  #L37e22e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37e234.  throw v0;
}
procedure `java.lang.String` `n0`(`u9.a` v4 @kind this) @signature `Lu9/a;.n0:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L37d8b8.  v0:= v4.`u9.a.n` @type ^`int`;
  #L37d8bc.  if v0 != 0 then goto L37d8c8;
  #L37d8c0.  call temp:= `s`(v4) @signature `Lu9/a;.s:()I` @kind virtual;
  #L37d8c6.  v0:= temp;
  #L37d8c8.  v1:= 10I;
  #L37d8cc.  if v0 != v1 then goto L37d8da;
  #L37d8d0.  call temp:= `q0`(v4) @signature `Lu9/a;.q0:()Ljava/lang/String;` @kind direct;
  #L37d8d6.  v0:= temp @kind object;
  #L37d8d8.  goto L37d95c;
  #L37d8da.  v1:= 8I;
  #L37d8de.  if v0 != v1 then goto L37d8f0;
  #L37d8e2.  v0:= 39I;
  #L37d8e6.  call temp:= `l0`(v4, v0) @signature `Lu9/a;.l0:(C)Ljava/lang/String;` @kind direct;
  #L37d8ec.  v0:= temp @kind object;
  #L37d8ee.  goto L37d95c;
  #L37d8f0.  v1:= 9I;
  #L37d8f4.  if v0 != v1 then goto L37d906;
  #L37d8f8.  v0:= 34I;
  #L37d8fc.  call temp:= `l0`(v4, v0) @signature `Lu9/a;.l0:(C)Ljava/lang/String;` @kind direct;
  #L37d902.  v0:= temp @kind object;
  #L37d904.  goto L37d95c;
  #L37d906.  v1:= 11I;
  #L37d90a.  if v0 != v1 then goto L37d91a;
  #L37d90e.  v0:= v4.`u9.a.q` @type ^`java.lang.String` @kind object;
  #L37d912.  v1:= 0I;
  #L37d914.  v4.`u9.a.q` @type ^`java.lang.String` := v1 @kind object;
  #L37d918.  goto L37d95c;
  #L37d91a.  v1:= 15I;
  #L37d91e.  if v0 != v1 then goto L37d930;
  #L37d922.  v0:= v4.`u9.a.o` @type ^`long` @kind wide;
  #L37d926.  call temp:= `toString`(v0) @signature `Ljava/lang/Long;.toString:(J)Ljava/lang/String;` @kind static;
  #L37d92c.  v0:= temp @kind object;
  #L37d92e.  goto L37d95c;
  #L37d930.  v1:= 16I;
  #L37d934.  if v0 != v1 then goto L37d97c;
  #L37d938.  v0:= new `java.lang.String`;
  #L37d93c.  v1:= v4.`u9.a.i` @type ^`char`[] @kind object;
  #L37d940.  v2:= v4.`u9.a.j` @type ^`int`;
  #L37d944.  v3:= v4.`u9.a.p` @type ^`int`;
  #L37d948.  call `<init>`(v0, v1, v2, v3) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L37d94e.  v1:= v4.`u9.a.j` @type ^`int`;
  #L37d952.  v2:= v4.`u9.a.p` @type ^`int`;
  #L37d956.  v1:= v1 + v2 @kind int;
  #L37d958.  v4.`u9.a.j` @type ^`int` := v1;
  #L37d95c.  v1:= 0I;
  #L37d95e.  v4.`u9.a.n` @type ^`int` := v1;
  #L37d962.  v1:= v4.`u9.a.u` @type ^`int`[] @kind object;
  #L37d966.  v2:= v4.`u9.a.s` @type ^`int`;
  #L37d96a.  v2:= v2 + -1;
  #L37d96e.  v3:= v1[v2];
  #L37d972.  v3:= v3 + 1;
  #L37d976.  v1[v2]:= v3;
  #L37d97a.  return v0 @kind object;
  #L37d97c.  v0:= new `java.lang.IllegalStateException`;
  #L37d980.  v1:= new `java.lang.StringBuilder`;
  #L37d984.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37d98a.  v2:= "Expected a string but was " @kind object;
  #L37d98e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37d994.  call temp:= `u0`(v4) @signature `Lu9/a;.u0:()Lu9/b;` @kind virtual;
  #L37d99a.  v2:= temp @kind object;
  #L37d99c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37d9a2.  call temp:= `V`(v4) @signature `Lu9/a;.V:()Ljava/lang/String;` @kind virtual;
  #L37d9a8.  v2:= temp @kind object;
  #L37d9aa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37d9b0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37d9b6.  v1:= temp @kind object;
  #L37d9b8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37d9be.  throw v0;
}
procedure `java.lang.String` `r0`(`u9.a` v5 @kind this) @signature `Lu9/a;.r0:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L37d5cc.  v0:= new `java.lang.StringBuilder`;
  #L37d5d0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37d5d6.  v1:= 36I;
  #L37d5da.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L37d5e0.  v1:= v5.`u9.a.s` @type ^`int`;
  #L37d5e4.  v2:= 0I;
  #L37d5e6.  if v2 >= v1 then goto L37d65c;
  #L37d5ea.  v3:= v5.`u9.a.r` @type ^`int`[] @kind object;
  #L37d5ee.  v3:= v3[v2];
  #L37d5f2.  v4:= 1I;
  #L37d5f4.  if v3 == v4 then goto L37d634;
  #L37d5f8.  v4:= 2I;
  #L37d5fa.  if v3 == v4 then goto L37d634;
  #L37d5fe.  v4:= 3I;
  #L37d600.  if v3 == v4 then goto L37d612;
  #L37d604.  v4:= 4I;
  #L37d606.  if v3 == v4 then goto L37d612;
  #L37d60a.  v4:= 5I;
  #L37d60c.  if v3 == v4 then goto L37d612;
  #L37d610.  goto L37d656;
  #L37d612.  v3:= 46I;
  #L37d616.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L37d61c.  v3:= v5.`u9.a.t` @type ^`java.lang.String`[] @kind object;
  #L37d620.  v4:= v3[v2] @kind object;
  #L37d624.  if v4 == 0 then goto L37d656;
  #L37d628.  v3:= v3[v2] @kind object;
  #L37d62c.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37d632.  goto L37d656;
  #L37d634.  v3:= 91I;
  #L37d638.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L37d63e.  v3:= v5.`u9.a.u` @type ^`int`[] @kind object;
  #L37d642.  v3:= v3[v2];
  #L37d646.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L37d64c.  v3:= 93I;
  #L37d650.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L37d656.  v2:= v2 + 1;
  #L37d65a.  goto L37d5e6;
  #L37d65c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37d662.  v0:= temp @kind object;
  #L37d664.  return v0 @kind object;
}
procedure `int` `s`(`u9.a` v15 @kind this) @signature `Lu9/a;.s:()I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L37cbd8.  v0:= v15.`u9.a.r` @type ^`int`[] @kind object;
  #L37cbdc.  v1:= v15.`u9.a.s` @type ^`int`;
  #L37cbe0.  v2:= v1 + -1;
  #L37cbe4.  v2:= v0[v2];
  #L37cbe8.  v3:= 8I;
  #L37cbec.  v4:= 39I;
  #L37cbf0.  v5:= 34I;
  #L37cbf4.  v6:= 93I;
  #L37cbf8.  v7:= 3I;
  #L37cbfa.  v8:= 7I;
  #L37cbfc.  v9:= 59I;
  #L37cc00.  v10:= 44I;
  #L37cc04.  v11:= 4I;
  #L37cc06.  v12:= 2I;
  #L37cc08.  v13:= 1I;
  #L37cc0a.  if v2 != v13 then goto L37cc18;
  #L37cc0e.  v1:= v1 - v13 @kind int;
  #L37cc10.  v0[v1]:= v12;
  #L37cc14.  goto L37cd1c;
  #L37cc18.  if v2 != v12 then goto L37cc4c;
  #L37cc1c.  call temp:= `j0`(v15, v13) @signature `Lu9/a;.j0:(Z)I` @kind direct;
  #L37cc22.  v0:= temp;
  #L37cc24.  if v0 == v10 then goto L37cd1c;
  #L37cc28.  if v0 == v9 then goto L37cc44;
  #L37cc2c.  if v0 != v6 then goto L37cc36;
  #L37cc30.  v15.`u9.a.n` @type ^`int` := v11;
  #L37cc34.  return v11;
  #L37cc36.  v0:= "Unterminated array" @kind object;
  #L37cc3a.  call temp:= `W0`(v15, v0) @signature `Lu9/a;.W0:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L37cc40.  v0:= temp @kind object;
  #L37cc42.  throw v0;
  #L37cc44.  call `k`(v15) @signature `Lu9/a;.k:()V` @kind direct;
  #L37cc4a.  goto L37cd1c;
  #L37cc4c.  v14:= 5I;
  #L37cc4e.  if v2 == v7 then goto L37ce0e;
  #L37cc52.  if v2 != v14 then goto L37cc5a;
  #L37cc56.  goto L37ce0e;
  #L37cc5a.  if v2 != v11 then goto L37ccc4;
  #L37cc5e.  v1:= v1 - v13 @kind int;
  #L37cc60.  v0[v1]:= v14;
  #L37cc64.  call temp:= `j0`(v15, v13) @signature `Lu9/a;.j0:(Z)I` @kind direct;
  #L37cc6a.  v0:= temp;
  #L37cc6c.  v1:= 58I;
  #L37cc70.  if v0 == v1 then goto L37cd1c;
  #L37cc74.  v1:= 61I;
  #L37cc78.  if v0 != v1 then goto L37ccb6;
  #L37cc7c.  call `k`(v15) @signature `Lu9/a;.k:()V` @kind direct;
  #L37cc82.  v0:= v15.`u9.a.j` @type ^`int`;
  #L37cc86.  v1:= v15.`u9.a.k` @type ^`int`;
  #L37cc8a.  if v0 < v1 then goto L37cc9a;
  #L37cc8e.  call temp:= `y`(v15, v13) @signature `Lu9/a;.y:(I)Z` @kind direct;
  #L37cc94.  v0:= temp;
  #L37cc96.  if v0 == 0 then goto L37cd1c;
  #L37cc9a.  v0:= v15.`u9.a.i` @type ^`char`[] @kind object;
  #L37cc9e.  v1:= v15.`u9.a.j` @type ^`int`;
  #L37cca2.  v0:= v0[v1] @kind char;
  #L37cca6.  v14:= 62I;
  #L37ccaa.  if v0 != v14 then goto L37cd1c;
  #L37ccae.  v1:= v1 + v13 @kind int;
  #L37ccb0.  v15.`u9.a.j` @type ^`int` := v1;
  #L37ccb4.  goto L37cd1c;
  #L37ccb6.  v0:= "Expected ':'" @kind object;
  #L37ccba.  call temp:= `W0`(v15, v0) @signature `Lu9/a;.W0:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L37ccc0.  v0:= temp @kind object;
  #L37ccc2.  throw v0;
  #L37ccc4.  v0:= 6I;
  #L37ccc6.  if v2 != v0 then goto L37cce8;
  #L37ccca.  v0:= v15.`u9.a.h` @type ^`boolean` @kind boolean;
  #L37ccce.  if v0 == 0 then goto L37ccd8;
  #L37ccd2.  call `r`(v15) @signature `Lu9/a;.r:()V` @kind direct;
  #L37ccd8.  v0:= v15.`u9.a.r` @type ^`int`[] @kind object;
  #L37ccdc.  v1:= v15.`u9.a.s` @type ^`int`;
  #L37cce0.  v1:= v1 - v13 @kind int;
  #L37cce2.  v0[v1]:= v8;
  #L37cce6.  goto L37cd1c;
  #L37cce8.  if v2 != v8 then goto L37cd18;
  #L37ccec.  v0:= 0I;
  #L37ccee.  call temp:= `j0`(v15, v0) @signature `Lu9/a;.j0:(Z)I` @kind direct;
  #L37ccf4.  v0:= temp;
  #L37ccf6.  v1:= -1I;
  #L37ccf8.  if v0 != v1 then goto L37cd06;
  #L37ccfc.  v0:= 17I;
  #L37cd00.  v15.`u9.a.n` @type ^`int` := v0;
  #L37cd04.  return v0;
  #L37cd06.  call `k`(v15) @signature `Lu9/a;.k:()V` @kind direct;
  #L37cd0c.  v0:= v15.`u9.a.j` @type ^`int`;
  #L37cd10.  v0:= v0 - v13 @kind int;
  #L37cd12.  v15.`u9.a.j` @type ^`int` := v0;
  #L37cd16.  goto L37cd1c;
  #L37cd18.  if v2 == v3 then goto L37cdfe;
  #L37cd1c.  call temp:= `j0`(v15, v13) @signature `Lu9/a;.j0:(Z)I` @kind direct;
  #L37cd22.  v0:= temp;
  #L37cd24.  if v0 == v5 then goto L37cdf4;
  #L37cd28.  if v0 == v4 then goto L37cde8;
  #L37cd2c.  if v0 == v10 then goto L37cdba;
  #L37cd30.  if v0 == v9 then goto L37cdba;
  #L37cd34.  v1:= 91I;
  #L37cd38.  if v0 == v1 then goto L37cdb4;
  #L37cd3c.  if v0 == v6 then goto L37cdaa;
  #L37cd40.  v1:= 123I;
  #L37cd44.  if v0 == v1 then goto L37cda4;
  #L37cd48.  v0:= v15.`u9.a.j` @type ^`int`;
  #L37cd4c.  v0:= v0 - v13 @kind int;
  #L37cd4e.  v15.`u9.a.j` @type ^`int` := v0;
  #L37cd52.  call temp:= `x0`(v15) @signature `Lu9/a;.x0:()I` @kind direct;
  #L37cd58.  v0:= temp;
  #L37cd5a.  if v0 == 0 then goto L37cd60;
  #L37cd5e.  return v0;
  #L37cd60.  call temp:= `B0`(v15) @signature `Lu9/a;.B0:()I` @kind direct;
  #L37cd66.  v0:= temp;
  #L37cd68.  if v0 == 0 then goto L37cd6e;
  #L37cd6c.  return v0;
  #L37cd6e.  v0:= v15.`u9.a.i` @type ^`char`[] @kind object;
  #L37cd72.  v1:= v15.`u9.a.j` @type ^`int`;
  #L37cd76.  v0:= v0[v1] @kind char;
  #L37cd7a.  call temp:= `Q`(v15, v0) @signature `Lu9/a;.Q:(C)Z` @kind direct;
  #L37cd80.  v0:= temp;
  #L37cd82.  if v0 == 0 then goto L37cd96;
  #L37cd86.  call `k`(v15) @signature `Lu9/a;.k:()V` @kind direct;
  #L37cd8c.  v0:= 10I;
  #L37cd90.  v15.`u9.a.n` @type ^`int` := v0;
  #L37cd94.  return v0;
  #L37cd96.  v0:= "Expected value" @kind object;
  #L37cd9a.  call temp:= `W0`(v15, v0) @signature `Lu9/a;.W0:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L37cda0.  v0:= temp @kind object;
  #L37cda2.  throw v0;
  #L37cda4.  v15.`u9.a.n` @type ^`int` := v13;
  #L37cda8.  return v13;
  #L37cdaa.  if v2 != v13 then goto L37cdba;
  #L37cdae.  v15.`u9.a.n` @type ^`int` := v11;
  #L37cdb2.  return v11;
  #L37cdb4.  v15.`u9.a.n` @type ^`int` := v7;
  #L37cdb8.  return v7;
  #L37cdba.  if v2 == v13 then goto L37cdd2;
  #L37cdbe.  if v2 != v12 then goto L37cdc4;
  #L37cdc2.  goto L37cdd2;
  #L37cdc4.  v0:= "Unexpected value" @kind object;
  #L37cdc8.  call temp:= `W0`(v15, v0) @signature `Lu9/a;.W0:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L37cdce.  v0:= temp @kind object;
  #L37cdd0.  throw v0;
  #L37cdd2.  call `k`(v15) @signature `Lu9/a;.k:()V` @kind direct;
  #L37cdd8.  v0:= v15.`u9.a.j` @type ^`int`;
  #L37cddc.  v0:= v0 - v13 @kind int;
  #L37cdde.  v15.`u9.a.j` @type ^`int` := v0;
  #L37cde2.  v15.`u9.a.n` @type ^`int` := v8;
  #L37cde6.  return v8;
  #L37cde8.  call `k`(v15) @signature `Lu9/a;.k:()V` @kind direct;
  #L37cdee.  v15.`u9.a.n` @type ^`int` := v3;
  #L37cdf2.  return v3;
  #L37cdf4.  v0:= 9I;
  #L37cdf8.  v15.`u9.a.n` @type ^`int` := v0;
  #L37cdfc.  return v0;
  #L37cdfe.  v0:= new `java.lang.IllegalStateException`;
  #L37ce02.  v1:= "JsonReader is closed" @kind object;
  #L37ce06.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37ce0c.  throw v0;
  #L37ce0e.  v1:= v1 - v13 @kind int;
  #L37ce10.  v0[v1]:= v11;
  #L37ce14.  v0:= 125I;
  #L37ce18.  if v2 != v14 then goto L37ce4a;
  #L37ce1c.  call temp:= `j0`(v15, v13) @signature `Lu9/a;.j0:(Z)I` @kind direct;
  #L37ce22.  v1:= temp;
  #L37ce24.  if v1 == v10 then goto L37ce4a;
  #L37ce28.  if v1 == v9 then goto L37ce44;
  #L37ce2c.  if v1 != v0 then goto L37ce36;
  #L37ce30.  v15.`u9.a.n` @type ^`int` := v12;
  #L37ce34.  return v12;
  #L37ce36.  v0:= "Unterminated object" @kind object;
  #L37ce3a.  call temp:= `W0`(v15, v0) @signature `Lu9/a;.W0:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L37ce40.  v0:= temp @kind object;
  #L37ce42.  throw v0;
  #L37ce44.  call `k`(v15) @signature `Lu9/a;.k:()V` @kind direct;
  #L37ce4a.  call temp:= `j0`(v15, v13) @signature `Lu9/a;.j0:(Z)I` @kind direct;
  #L37ce50.  v1:= temp;
  #L37ce52.  if v1 == v5 then goto L37ceb8;
  #L37ce56.  if v1 == v4 then goto L37cea8;
  #L37ce5a.  v3:= "Expected name" @kind object;
  #L37ce5e.  if v1 == v0 then goto L37ce94;
  #L37ce62.  call `k`(v15) @signature `Lu9/a;.k:()V` @kind direct;
  #L37ce68.  v0:= v15.`u9.a.j` @type ^`int`;
  #L37ce6c.  v0:= v0 - v13 @kind int;
  #L37ce6e.  v15.`u9.a.j` @type ^`int` := v0;
  #L37ce72.  v0:= (`char`) v1 @kind i2c;
  #L37ce74.  call temp:= `Q`(v15, v0) @signature `Lu9/a;.Q:(C)Z` @kind direct;
  #L37ce7a.  v0:= temp;
  #L37ce7c.  if v0 == 0 then goto L37ce8a;
  #L37ce80.  v0:= 14I;
  #L37ce84.  v15.`u9.a.n` @type ^`int` := v0;
  #L37ce88.  return v0;
  #L37ce8a.  call temp:= `W0`(v15, v3) @signature `Lu9/a;.W0:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L37ce90.  v0:= temp @kind object;
  #L37ce92.  throw v0;
  #L37ce94.  if v2 == v14 then goto L37ce9e;
  #L37ce98.  v15.`u9.a.n` @type ^`int` := v12;
  #L37ce9c.  return v12;
  #L37ce9e.  call temp:= `W0`(v15, v3) @signature `Lu9/a;.W0:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L37cea4.  v0:= temp @kind object;
  #L37cea6.  throw v0;
  #L37cea8.  call `k`(v15) @signature `Lu9/a;.k:()V` @kind direct;
  #L37ceae.  v0:= 12I;
  #L37ceb2.  v15.`u9.a.n` @type ^`int` := v0;
  #L37ceb6.  return v0;
  #L37ceb8.  v0:= 13I;
  #L37cebc.  v15.`u9.a.n` @type ^`int` := v0;
  #L37cec0.  return v0;
}
procedure `java.lang.String` `toString`(`u9.a` v2 @kind this) @signature `Lu9/a;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L37db2c.  v0:= new `java.lang.StringBuilder`;
  #L37db30.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37db36.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L37db3c.  v1:= temp @kind object;
  #L37db3e.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L37db44.  v1:= temp @kind object;
  #L37db46.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37db4c.  call temp:= `V`(v2) @signature `Lu9/a;.V:()Ljava/lang/String;` @kind virtual;
  #L37db52.  v1:= temp @kind object;
  #L37db54.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37db5a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37db60.  v0:= temp @kind object;
  #L37db62.  return v0 @kind object;
}
procedure `u9.b` `u0`(`u9.a` v1 @kind this) @signature `Lu9/a;.u0:()Lu9/b;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L37dd38.  v0:= v1.`u9.a.n` @type ^`int`;
  #L37dd3c.  if v0 != 0 then goto L37dd48;
  #L37dd40.  call temp:= `s`(v1) @signature `Lu9/a;.s:()I` @kind virtual;
  #L37dd46.  v0:= temp;
  #L37dd48.  goto L37dd98;
  #L37dd4e.  v0:= new `java.lang.AssertionError`;
  #L37dd52.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L37dd58.  throw v0;
  #L37dd5a.  v0:= `@@u9.b.END_DOCUMENT` @type ^`u9.b` @kind object;
  #L37dd5e.  return v0 @kind object;
  #L37dd60.  v0:= `@@u9.b.NUMBER` @type ^`u9.b` @kind object;
  #L37dd64.  return v0 @kind object;
  #L37dd66.  v0:= `@@u9.b.NAME` @type ^`u9.b` @kind object;
  #L37dd6a.  return v0 @kind object;
  #L37dd6c.  v0:= `@@u9.b.STRING` @type ^`u9.b` @kind object;
  #L37dd70.  return v0 @kind object;
  #L37dd72.  v0:= `@@u9.b.NULL` @type ^`u9.b` @kind object;
  #L37dd76.  return v0 @kind object;
  #L37dd78.  v0:= `@@u9.b.BOOLEAN` @type ^`u9.b` @kind object;
  #L37dd7c.  return v0 @kind object;
  #L37dd7e.  v0:= `@@u9.b.END_ARRAY` @type ^`u9.b` @kind object;
  #L37dd82.  return v0 @kind object;
  #L37dd84.  v0:= `@@u9.b.BEGIN_ARRAY` @type ^`u9.b` @kind object;
  #L37dd88.  return v0 @kind object;
  #L37dd8a.  v0:= `@@u9.b.END_OBJECT` @type ^`u9.b` @kind object;
  #L37dd8e.  return v0 @kind object;
  #L37dd90.  v0:= `@@u9.b.BEGIN_OBJECT` @type ^`u9.b` @kind object;
  #L37dd94.  return v0 @kind object;
  #L37dd96.  
  #L37dd98.  switch v0
                  | 1 => goto L37dd90
                  | 2 => goto L37dd8a
                  | 3 => goto L37dd84
                  | 4 => goto L37dd7e
                  | 5 => goto L37dd78
                  | 6 => goto L37dd78
                  | 7 => goto L37dd72
                  | 8 => goto L37dd6c
                  | 9 => goto L37dd6c
                  | 10 => goto L37dd6c
                  | 11 => goto L37dd6c
                  | 12 => goto L37dd66
                  | 13 => goto L37dd66
                  | 14 => goto L37dd66
                  | 15 => goto L37dd60
                  | 16 => goto L37dd60
                  | 17 => goto L37dd5a
                  | else => goto L37dd4e;
}
procedure `void` `v`(`u9.a` v3 @kind this) @signature `Lu9/a;.v:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L37e08c.  v0:= v3.`u9.a.n` @type ^`int`;
  #L37e090.  if v0 != 0 then goto L37e09c;
  #L37e094.  call temp:= `s`(v3) @signature `Lu9/a;.s:()I` @kind virtual;
  #L37e09a.  v0:= temp;
  #L37e09c.  v1:= 4I;
  #L37e09e.  if v0 != v1 then goto L37e0ca;
  #L37e0a2.  v0:= v3.`u9.a.s` @type ^`int`;
  #L37e0a6.  v0:= v0 + -1;
  #L37e0aa.  v3.`u9.a.s` @type ^`int` := v0;
  #L37e0ae.  v1:= v3.`u9.a.u` @type ^`int`[] @kind object;
  #L37e0b2.  v0:= v0 + -1;
  #L37e0b6.  v2:= v1[v0];
  #L37e0ba.  v2:= v2 + 1;
  #L37e0be.  v1[v0]:= v2;
  #L37e0c2.  v0:= 0I;
  #L37e0c4.  v3.`u9.a.n` @type ^`int` := v0;
  #L37e0c8.  return @kind void;
  #L37e0ca.  v0:= new `java.lang.IllegalStateException`;
  #L37e0ce.  v1:= new `java.lang.StringBuilder`;
  #L37e0d2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37e0d8.  v2:= "Expected END_ARRAY but was " @kind object;
  #L37e0dc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37e0e2.  call temp:= `u0`(v3) @signature `Lu9/a;.u0:()Lu9/b;` @kind virtual;
  #L37e0e8.  v2:= temp @kind object;
  #L37e0ea.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37e0f0.  call temp:= `V`(v3) @signature `Lu9/a;.V:()Ljava/lang/String;` @kind virtual;
  #L37e0f6.  v2:= temp @kind object;
  #L37e0f8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37e0fe.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37e104.  v1:= temp @kind object;
  #L37e106.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37e10c.  throw v0;
}
procedure `void` `w`(`u9.a` v3 @kind this) @signature `Lu9/a;.w:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L37e120.  v0:= v3.`u9.a.n` @type ^`int`;
  #L37e124.  if v0 != 0 then goto L37e130;
  #L37e128.  call temp:= `s`(v3) @signature `Lu9/a;.s:()I` @kind virtual;
  #L37e12e.  v0:= temp;
  #L37e130.  v1:= 2I;
  #L37e132.  if v0 != v1 then goto L37e168;
  #L37e136.  v0:= v3.`u9.a.s` @type ^`int`;
  #L37e13a.  v0:= v0 + -1;
  #L37e13e.  v3.`u9.a.s` @type ^`int` := v0;
  #L37e142.  v1:= v3.`u9.a.t` @type ^`java.lang.String`[] @kind object;
  #L37e146.  v2:= 0I;
  #L37e148.  v1[v0]:= v2 @kind object;
  #L37e14c.  v1:= v3.`u9.a.u` @type ^`int`[] @kind object;
  #L37e150.  v0:= v0 + -1;
  #L37e154.  v2:= v1[v0];
  #L37e158.  v2:= v2 + 1;
  #L37e15c.  v1[v0]:= v2;
  #L37e160.  v0:= 0I;
  #L37e162.  v3.`u9.a.n` @type ^`int` := v0;
  #L37e166.  return @kind void;
  #L37e168.  v0:= new `java.lang.IllegalStateException`;
  #L37e16c.  v1:= new `java.lang.StringBuilder`;
  #L37e170.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37e176.  v2:= "Expected END_OBJECT but was " @kind object;
  #L37e17a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37e180.  call temp:= `u0`(v3) @signature `Lu9/a;.u0:()Lu9/b;` @kind virtual;
  #L37e186.  v2:= temp @kind object;
  #L37e188.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37e18e.  call temp:= `V`(v3) @signature `Lu9/a;.V:()Ljava/lang/String;` @kind virtual;
  #L37e194.  v2:= temp @kind object;
  #L37e196.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37e19c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37e1a2.  v1:= temp @kind object;
  #L37e1a4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37e1aa.  throw v0;
}
