record `te.d` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `int` `a`(`int` v0 , `int` v1 ) @signature `Lte/d;.a:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L37bb34.  if v0 >= v1 then goto L37bb3c;
  #L37bb38.  v0:= -1I;
  #L37bb3a.  return v0;
  #L37bb3c.  if v0 <= v1 then goto L37bb44;
  #L37bb40.  v0:= 1I;
  #L37bb42.  return v0;
  #L37bb44.  v0:= 0I;
  #L37bb46.  return v0;
}
procedure `int` `b`(`long` v1 , `long` v3 ) @signature `Lte/d;.b:(JJ)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L37bb58.  v0:= lcmp(v1, v3);
  #L37bb5c.  if v0 >= 0 then goto L37bb64;
  #L37bb60.  v1:= -1I;
  #L37bb62.  return v1;
  #L37bb64.  if v0 <= 0 then goto L37bb6c;
  #L37bb68.  v1:= 1I;
  #L37bb6a.  return v1;
  #L37bb6c.  v1:= 0I;
  #L37bb6e.  return v1;
}
procedure `boolean` `c`(`java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lte/d;.c:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L37bb04.  v0:= 0I;
  #L37bb06.  if v1 != 0 then goto L37bb12;
  #L37bb0a.  if v2 != 0 then goto L37bb10;
  #L37bb0e.  v0:= 1I;
  #L37bb10.  return v0;
  #L37bb12.  if v2 != 0 then goto L37bb18;
  #L37bb16.  return v0;
  #L37bb18.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L37bb1e.  v1:= temp;
  #L37bb20.  return v1;
}
procedure `int` `d`(`int` v0 , `int` v1 ) @signature `Lte/d;.d:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L37bb80.  if v0 < 0 then goto L37bb88;
  #L37bb84.  v0:= v0 / v1 @kind int;
  #L37bb86.  goto L37bb92;
  #L37bb88.  v0:= v0 + 1;
  #L37bb8c.  v0:= v0 / v1 @kind int;
  #L37bb8e.  v0:= v0 + -1;
  #L37bb92.  return v0;
}
procedure `long` `e`(`long` v3 , `long` v5 ) @signature `Lte/d;.e:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L37bdc4.  v0:= 0L;
  #L37bdc8.  v2:= lcmp(v3, v0);
  #L37bdcc.  if v2 < 0 then goto L37bdd4;
  #L37bdd0.  v3:= v3 / v5 @kind long;
  #L37bdd2.  goto L37bdde;
  #L37bdd4.  v0:= 1L;
  #L37bdd8.  v3:= v3 + v0 @kind long;
  #L37bdda.  v3:= v3 / v5 @kind long;
  #L37bddc.  v3:= v3 - v0 @kind long;
  #L37bdde.  return v3 @kind wide;
}
procedure `int` `f`(`int` v0 , `int` v1 ) @signature `Lte/d;.f:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L37bba4.  v0:= v0 %% v1 @kind int;
  #L37bba6.  v0:= v0 + v1 @kind int;
  #L37bba8.  v0:= v0 %% v1 @kind int;
  #L37bbaa.  return v0;
}
procedure `int` `g`(`long` v2 , `int` v4 ) @signature `Lte/d;.g:(JI)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L37bbbc.  v0:= (`long`) v4 @kind i2l;
  #L37bbbe.  v2:= v2 %% v0 @kind long;
  #L37bbc0.  v2:= v2 + v0 @kind long;
  #L37bbc2.  v2:= v2 %% v0 @kind long;
  #L37bbc4.  v3:= (`int`) v2 @kind l2i;
  #L37bbc6.  return v3;
}
procedure `long` `h`(`long` v0 , `long` v2 ) @signature `Lte/d;.h:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;

  #L37bdf0.  v0:= v0 %% v2 @kind long;
  #L37bdf2.  v0:= v0 + v2 @kind long;
  #L37bdf4.  v0:= v0 %% v2 @kind long;
  #L37bdf6.  return v0 @kind wide;
}
procedure `java.lang.Object` `i`(`java.lang.Object` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lte/d;.i:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L37bd80.  if v1 == 0 then goto L37bd86;
  #L37bd84.  return v1 @kind object;
  #L37bd86.  v1:= new `java.lang.NullPointerException`;
  #L37bd8a.  v0:= new `java.lang.StringBuilder`;
  #L37bd8e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37bd94.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37bd9a.  v2:= " must not be null" @kind object;
  #L37bd9e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37bda4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37bdaa.  v2:= temp @kind object;
  #L37bdac.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37bdb2.  throw v1;
}
procedure `int` `j`(`int` v3 , `int` v4 ) @signature `Lte/d;.j:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L37bbd8.  v0:= v3 + v4 @kind int;
  #L37bbdc.  v1:= v3 ^~ v0 @kind int;
  #L37bbe0.  if v1 >= 0 then goto L37bc2c;
  #L37bbe4.  v1:= v3 ^~ v4 @kind int;
  #L37bbe8.  if v1 >= 0 then goto L37bbee;
  #L37bbec.  goto L37bc2c;
  #L37bbee.  v0:= new `java.lang.ArithmeticException`;
  #L37bbf2.  v1:= new `java.lang.StringBuilder`;
  #L37bbf6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37bbfc.  v2:= "Addition overflows an int: " @kind object;
  #L37bc00.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37bc06.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L37bc0c.  v3:= " + " @kind object;
  #L37bc10.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37bc16.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L37bc1c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37bc22.  v3:= temp @kind object;
  #L37bc24.  call `<init>`(v0, v3) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37bc2a.  throw v0;
  #L37bc2c.  return v0;
}
procedure `long` `k`(`long` v7 , `long` v9 ) @signature `Lte/d;.k:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L37be08.  v0:= v7 + v9 @kind long;
  #L37be0c.  v2:= v7 ^~ v0 @kind long;
  #L37be10.  v4:= 0L;
  #L37be14.  v6:= lcmp(v2, v4);
  #L37be18.  if v6 >= 0 then goto L37be68;
  #L37be1c.  v2:= v7 ^~ v9 @kind long;
  #L37be20.  v6:= lcmp(v2, v4);
  #L37be24.  if v6 >= 0 then goto L37be2a;
  #L37be28.  goto L37be68;
  #L37be2a.  v0:= new `java.lang.ArithmeticException`;
  #L37be2e.  v1:= new `java.lang.StringBuilder`;
  #L37be32.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37be38.  v2:= "Addition overflows a long: " @kind object;
  #L37be3c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37be42.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L37be48.  v7:= " + " @kind object;
  #L37be4c.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37be52.  call temp:= `append`(v1, v9) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L37be58.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37be5e.  v7:= temp @kind object;
  #L37be60.  call `<init>`(v0, v7) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37be66.  throw v0;
  #L37be68.  return v0 @kind wide;
}
procedure `int` `l`(`int` v5 , `int` v6 ) @signature `Lte/d;.l:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L37bc40.  v0:= (`long`) v5 @kind i2l;
  #L37bc42.  v2:= (`long`) v6 @kind i2l;
  #L37bc44.  v0:= v0 * v2 @kind long;
  #L37bc48.  v2:= -2147483648L;
  #L37bc4e.  v4:= lcmp(v0, v2);
  #L37bc52.  if v4 < 0 then goto L37bc68;
  #L37bc56.  v2:= 2147483647L;
  #L37bc5c.  v4:= lcmp(v0, v2);
  #L37bc60.  if v4 > 0 then goto L37bc68;
  #L37bc64.  v5:= (`int`) v0 @kind l2i;
  #L37bc66.  return v5;
  #L37bc68.  v0:= new `java.lang.ArithmeticException`;
  #L37bc6c.  v1:= new `java.lang.StringBuilder`;
  #L37bc70.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37bc76.  v2:= "Multiplication overflows an int: " @kind object;
  #L37bc7a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37bc80.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L37bc86.  v5:= " * " @kind object;
  #L37bc8a.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37bc90.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L37bc96.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37bc9c.  v5:= temp @kind object;
  #L37bc9e.  call `<init>`(v0, v5) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37bca4.  throw v0;
}
procedure `long` `m`(`long` v7 , `int` v9 ) @signature `Lte/d;.m:(JI)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L37be7c.  v0:= -1I;
  #L37be7e.  v1:= " * " @kind object;
  #L37be82.  v2:= "Multiplication overflows a long: " @kind object;
  #L37be86.  if v9 == v0 then goto L37bee6;
  #L37be8a.  if v9 == 0 then goto L37bee0;
  #L37be8e.  v0:= 1I;
  #L37be90.  if v9 == v0 then goto L37bede;
  #L37be94.  v3:= (`long`) v9 @kind i2l;
  #L37be96.  v5:= v7 * v3 @kind long;
  #L37be9a.  v3:= v5 / v3 @kind long;
  #L37be9e.  v0:= lcmp(v3, v7);
  #L37bea2.  if v0 != 0 then goto L37bea8;
  #L37bea6.  return v5 @kind wide;
  #L37bea8.  v0:= new `java.lang.ArithmeticException`;
  #L37beac.  v3:= new `java.lang.StringBuilder`;
  #L37beb0.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37beb6.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37bebc.  call temp:= `append`(v3, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L37bec2.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37bec8.  call temp:= `append`(v3, v9) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L37bece.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37bed4.  v7:= temp @kind object;
  #L37bed6.  call `<init>`(v0, v7) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37bedc.  throw v0;
  #L37bede.  return v7 @kind wide;
  #L37bee0.  v7:= 0L;
  #L37bee4.  return v7 @kind wide;
  #L37bee6.  v3:= -9223372036854775808L;
  #L37beea.  v0:= lcmp(v7, v3);
  #L37beee.  if v0 == 0 then goto L37bef6;
  #L37bef2.  v7:= -v7 @kind long;
  #L37bef4.  return v7 @kind wide;
  #L37bef6.  v0:= new `java.lang.ArithmeticException`;
  #L37befa.  v3:= new `java.lang.StringBuilder`;
  #L37befe.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37bf04.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37bf0a.  call temp:= `append`(v3, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L37bf10.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37bf16.  call temp:= `append`(v3, v9) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L37bf1c.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37bf22.  v7:= temp @kind object;
  #L37bf24.  call `<init>`(v0, v7) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37bf2a.  throw v0;
}
procedure `long` `n`(`long` v7 , `long` v9 ) @signature `Lte/d;.n:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L37bf3c.  v0:= 1L;
  #L37bf40.  v2:= lcmp(v9, v0);
  #L37bf44.  if v2 != 0 then goto L37bf4a;
  #L37bf48.  return v7 @kind wide;
  #L37bf4a.  v2:= lcmp(v7, v0);
  #L37bf4e.  if v2 != 0 then goto L37bf54;
  #L37bf52.  return v9 @kind wide;
  #L37bf54.  v0:= 0L;
  #L37bf58.  v2:= lcmp(v7, v0);
  #L37bf5c.  if v2 == 0 then goto L37bfe2;
  #L37bf60.  v2:= lcmp(v9, v0);
  #L37bf64.  if v2 != 0 then goto L37bf6a;
  #L37bf68.  goto L37bfe2;
  #L37bf6a.  v0:= v7 * v9 @kind long;
  #L37bf6e.  v2:= v0 / v9 @kind long;
  #L37bf72.  v4:= lcmp(v2, v7);
  #L37bf76.  if v4 != 0 then goto L37bfa4;
  #L37bf7a.  v2:= -1L;
  #L37bf7e.  v4:= -9223372036854775808L;
  #L37bf82.  v6:= lcmp(v7, v4);
  #L37bf86.  if v6 != 0 then goto L37bf92;
  #L37bf8a.  v6:= lcmp(v9, v2);
  #L37bf8e.  if v6 == 0 then goto L37bfa4;
  #L37bf92.  v6:= lcmp(v9, v4);
  #L37bf96.  if v6 != 0 then goto L37bfa2;
  #L37bf9a.  v4:= lcmp(v7, v2);
  #L37bf9e.  if v4 == 0 then goto L37bfa4;
  #L37bfa2.  return v0 @kind wide;
  #L37bfa4.  v0:= new `java.lang.ArithmeticException`;
  #L37bfa8.  v1:= new `java.lang.StringBuilder`;
  #L37bfac.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37bfb2.  v2:= "Multiplication overflows a long: " @kind object;
  #L37bfb6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37bfbc.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L37bfc2.  v7:= " * " @kind object;
  #L37bfc6.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37bfcc.  call temp:= `append`(v1, v9) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L37bfd2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37bfd8.  v7:= temp @kind object;
  #L37bfda.  call `<init>`(v0, v7) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37bfe0.  throw v0;
  #L37bfe2.  return v0 @kind wide;
}
procedure `int` `o`(`int` v3 , `int` v4 ) @signature `Lte/d;.o:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L37bcb8.  v0:= v3 - v4 @kind int;
  #L37bcbc.  v1:= v3 ^~ v0 @kind int;
  #L37bcc0.  if v1 >= 0 then goto L37bd0c;
  #L37bcc4.  v1:= v3 ^~ v4 @kind int;
  #L37bcc8.  if v1 < 0 then goto L37bcce;
  #L37bccc.  goto L37bd0c;
  #L37bcce.  v0:= new `java.lang.ArithmeticException`;
  #L37bcd2.  v1:= new `java.lang.StringBuilder`;
  #L37bcd6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37bcdc.  v2:= "Subtraction overflows an int: " @kind object;
  #L37bce0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37bce6.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L37bcec.  v3:= " - " @kind object;
  #L37bcf0.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37bcf6.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L37bcfc.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37bd02.  v3:= temp @kind object;
  #L37bd04.  call `<init>`(v0, v3) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37bd0a.  throw v0;
  #L37bd0c.  return v0;
}
procedure `long` `p`(`long` v7 , `long` v9 ) @signature `Lte/d;.p:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L37bff4.  v0:= v7 - v9 @kind long;
  #L37bff8.  v2:= v7 ^~ v0 @kind long;
  #L37bffc.  v4:= 0L;
  #L37c000.  v6:= lcmp(v2, v4);
  #L37c004.  if v6 >= 0 then goto L37c054;
  #L37c008.  v2:= v7 ^~ v9 @kind long;
  #L37c00c.  v6:= lcmp(v2, v4);
  #L37c010.  if v6 < 0 then goto L37c016;
  #L37c014.  goto L37c054;
  #L37c016.  v0:= new `java.lang.ArithmeticException`;
  #L37c01a.  v1:= new `java.lang.StringBuilder`;
  #L37c01e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37c024.  v2:= "Subtraction overflows a long: " @kind object;
  #L37c028.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37c02e.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L37c034.  v7:= " - " @kind object;
  #L37c038.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37c03e.  call temp:= `append`(v1, v9) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L37c044.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37c04a.  v7:= temp @kind object;
  #L37c04c.  call `<init>`(v0, v7) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37c052.  throw v0;
  #L37c054.  return v0 @kind wide;
}
procedure `int` `q`(`long` v3 ) @signature `Lte/d;.q:(J)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L37bd20.  v0:= 2147483647L;
  #L37bd26.  v2:= lcmp(v3, v0);
  #L37bd2a.  if v2 > 0 then goto L37bd40;
  #L37bd2e.  v0:= -2147483648L;
  #L37bd34.  v2:= lcmp(v3, v0);
  #L37bd38.  if v2 < 0 then goto L37bd40;
  #L37bd3c.  v4:= (`int`) v3 @kind l2i;
  #L37bd3e.  return v4;
  #L37bd40.  v0:= new `java.lang.ArithmeticException`;
  #L37bd44.  v1:= new `java.lang.StringBuilder`;
  #L37bd48.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L37bd4e.  v2:= "Calculation overflows an int: " @kind object;
  #L37bd52.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L37bd58.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L37bd5e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L37bd64.  v3:= temp @kind object;
  #L37bd66.  call `<init>`(v0, v3) @signature `Ljava/lang/ArithmeticException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L37bd6c.  throw v0;
}
