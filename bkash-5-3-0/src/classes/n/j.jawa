record `n.j` @kind class @AccessFlag PUBLIC extends `n.b$a` @kind interface {
  `int` `n.j.a` @AccessFlag PRIVATE;
  `int` `n.j.b` @AccessFlag PRIVATE;
  `int`[] `n.j.c` @AccessFlag ;
  `int`[] `n.j.d` @AccessFlag ;
  `int`[] `n.j.e` @AccessFlag ;
  `float`[] `n.j.f` @AccessFlag ;
  `int`[] `n.j.g` @AccessFlag ;
  `int`[] `n.j.h` @AccessFlag ;
  `int` `n.j.i` @AccessFlag ;
  `int` `n.j.j` @AccessFlag ;
  `n.b` `n.j.k` @AccessFlag PRIVATE_FINAL;
  `n.c` `n.j.l` @AccessFlag PROTECTED_FINAL;
}
global `float` `@@n.j.m` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Ln/j;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;

  #L536678.  return @kind void;
}
procedure `void` `<init>`(`n.j` v2 @kind this, `n.b` v3 @kind object, `n.c` v4 @kind object) @signature `Ln/j;.<init>:(Ln/b;Ln/c;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L53668c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L536692.  v0:= 16I;
  #L536696.  v2.`n.j.a` @type ^`int` := v0;
  #L53669a.  v2.`n.j.b` @type ^`int` := v0;
  #L53669e.  v1:= new `int`[v0];
  #L5366a2.  v2.`n.j.c` @type ^`int`[] := v1 @kind object;
  #L5366a6.  v1:= new `int`[v0];
  #L5366aa.  v2.`n.j.d` @type ^`int`[] := v1 @kind object;
  #L5366ae.  v1:= new `int`[v0];
  #L5366b2.  v2.`n.j.e` @type ^`int`[] := v1 @kind object;
  #L5366b6.  v1:= new `float`[v0];
  #L5366ba.  v2.`n.j.f` @type ^`float`[] := v1 @kind object;
  #L5366be.  v1:= new `int`[v0];
  #L5366c2.  v2.`n.j.g` @type ^`int`[] := v1 @kind object;
  #L5366c6.  v0:= new `int`[v0];
  #L5366ca.  v2.`n.j.h` @type ^`int`[] := v0 @kind object;
  #L5366ce.  v0:= 0I;
  #L5366d0.  v2.`n.j.i` @type ^`int` := v0;
  #L5366d4.  v0:= -1I;
  #L5366d6.  v2.`n.j.j` @type ^`int` := v0;
  #L5366da.  v2.`n.j.k` @type ^`n.b` := v3 @kind object;
  #L5366de.  v2.`n.j.l` @type ^`n.c` := v4 @kind object;
  #L5366e2.  call `clear`(v2) @signature `Ln/j;.clear:()V` @kind virtual;
  #L5366e8.  return @kind void;
}
procedure `void` `l`(`n.j` v3 @kind this, `n.i` v4 @kind object, `int` v5 ) @signature `Ln/j;.l:(Ln/i;I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L536774.  v4:= v4.`n.i.i` @type ^`int`;
  #L536778.  v0:= v3.`n.j.b` @type ^`int`;
  #L53677c.  v4:= v4 %% v0 @kind int;
  #L53677e.  v0:= v3.`n.j.c` @type ^`int`[] @kind object;
  #L536782.  v1:= v0[v4];
  #L536786.  v2:= -1I;
  #L536788.  if v1 != v2 then goto L536792;
  #L53678c.  v0[v4]:= v5;
  #L536790.  goto L5367a8;
  #L536792.  v4:= v3.`n.j.d` @type ^`int`[] @kind object;
  #L536796.  v0:= v4[v1];
  #L53679a.  if v0 == v2 then goto L5367a4;
  #L53679e.  v1:= v4[v1];
  #L5367a2.  goto L536792;
  #L5367a4.  v4[v1]:= v5;
  #L5367a8.  v4:= v3.`n.j.d` @type ^`int`[] @kind object;
  #L5367ac.  v4[v5]:= v2;
  #L5367b0.  return @kind void;
}
procedure `void` `m`(`n.j` v2 @kind this, `int` v3 , `n.i` v4 @kind object, `float` v5 ) @signature `Ln/j;.m:(ILn/i;F)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L5367c4.  v0:= v2.`n.j.e` @type ^`int`[] @kind object;
  #L5367c8.  v1:= v4.`n.i.i` @type ^`int`;
  #L5367cc.  v0[v3]:= v1;
  #L5367d0.  v0:= v2.`n.j.f` @type ^`float`[] @kind object;
  #L5367d4.  v0[v3]:= v5;
  #L5367d8.  v5:= v2.`n.j.g` @type ^`int`[] @kind object;
  #L5367dc.  v0:= -1I;
  #L5367de.  v5[v3]:= v0;
  #L5367e2.  v5:= v2.`n.j.h` @type ^`int`[] @kind object;
  #L5367e6.  v5[v3]:= v0;
  #L5367ea.  v3:= v2.`n.j.k` @type ^`n.b` @kind object;
  #L5367ee.  call `a`(v4, v3) @signature `Ln/i;.a:(Ln/b;)V` @kind virtual;
  #L5367f4.  v3:= v4.`n.i.s` @type ^`int`;
  #L5367f8.  v3:= v3 + 1;
  #L5367fc.  v4.`n.i.s` @type ^`int` := v3;
  #L536800.  v3:= v2.`n.j.i` @type ^`int`;
  #L536804.  v3:= v3 + 1;
  #L536808.  v2.`n.j.i` @type ^`int` := v3;
  #L53680c.  return @kind void;
}
procedure `int` `n`(`n.j` v3 @kind this) @signature `Ln/j;.n:()I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L536344.  v0:= 0I;
  #L536346.  v1:= v3.`n.j.a` @type ^`int`;
  #L53634a.  v2:= -1I;
  #L53634c.  if v0 >= v1 then goto L536364;
  #L536350.  v1:= v3.`n.j.e` @type ^`int`[] @kind object;
  #L536354.  v1:= v1[v0];
  #L536358.  if v1 != v2 then goto L53635e;
  #L53635c.  return v0;
  #L53635e.  v0:= v0 + 1;
  #L536362.  goto L536346;
  #L536364.  return v2;
}
procedure `void` `o`(`n.j` v4 @kind this) @signature `Ln/j;.o:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L5368e0.  v0:= v4.`n.j.a` @type ^`int`;
  #L5368e4.  v0:= v0 * 2;
  #L5368e8.  v1:= v4.`n.j.e` @type ^`int`[] @kind object;
  #L5368ec.  call temp:= `copyOf`(v1, v0) @signature `Ljava/util/Arrays;.copyOf:([II)[I` @kind static;
  #L5368f2.  v1:= temp @kind object;
  #L5368f4.  v4.`n.j.e` @type ^`int`[] := v1 @kind object;
  #L5368f8.  v1:= v4.`n.j.f` @type ^`float`[] @kind object;
  #L5368fc.  call temp:= `copyOf`(v1, v0) @signature `Ljava/util/Arrays;.copyOf:([FI)[F` @kind static;
  #L536902.  v1:= temp @kind object;
  #L536904.  v4.`n.j.f` @type ^`float`[] := v1 @kind object;
  #L536908.  v1:= v4.`n.j.g` @type ^`int`[] @kind object;
  #L53690c.  call temp:= `copyOf`(v1, v0) @signature `Ljava/util/Arrays;.copyOf:([II)[I` @kind static;
  #L536912.  v1:= temp @kind object;
  #L536914.  v4.`n.j.g` @type ^`int`[] := v1 @kind object;
  #L536918.  v1:= v4.`n.j.h` @type ^`int`[] @kind object;
  #L53691c.  call temp:= `copyOf`(v1, v0) @signature `Ljava/util/Arrays;.copyOf:([II)[I` @kind static;
  #L536922.  v1:= temp @kind object;
  #L536924.  v4.`n.j.h` @type ^`int`[] := v1 @kind object;
  #L536928.  v1:= v4.`n.j.d` @type ^`int`[] @kind object;
  #L53692c.  call temp:= `copyOf`(v1, v0) @signature `Ljava/util/Arrays;.copyOf:([II)[I` @kind static;
  #L536932.  v1:= temp @kind object;
  #L536934.  v4.`n.j.d` @type ^`int`[] := v1 @kind object;
  #L536938.  v1:= v4.`n.j.a` @type ^`int`;
  #L53693c.  if v1 >= v0 then goto L536958;
  #L536940.  v2:= v4.`n.j.e` @type ^`int`[] @kind object;
  #L536944.  v3:= -1I;
  #L536946.  v2[v1]:= v3;
  #L53694a.  v2:= v4.`n.j.d` @type ^`int`[] @kind object;
  #L53694e.  v2[v1]:= v3;
  #L536952.  v1:= v1 + 1;
  #L536956.  goto L53693c;
  #L536958.  v4.`n.j.a` @type ^`int` := v0;
  #L53695c.  return @kind void;
}
procedure `void` `q`(`n.j` v3 @kind this, `int` v4 , `n.i` v5 @kind object, `float` v6 ) @signature `Ln/j;.q:(ILn/i;F)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L536970.  call temp:= `n`(v3) @signature `Ln/j;.n:()I` @kind direct;
  #L536976.  v0:= temp;
  #L536978.  call `m`(v3, v0, v5, v6) @signature `Ln/j;.m:(ILn/i;F)V` @kind direct;
  #L53697e.  v6:= -1I;
  #L536980.  if v4 == v6 then goto L53699e;
  #L536984.  v1:= v3.`n.j.g` @type ^`int`[] @kind object;
  #L536988.  v1[v0]:= v4;
  #L53698c.  v1:= v3.`n.j.h` @type ^`int`[] @kind object;
  #L536990.  v2:= v1[v4];
  #L536994.  v1[v0]:= v2;
  #L536998.  v1[v4]:= v0;
  #L53699c.  goto L5369c8;
  #L53699e.  v4:= v3.`n.j.g` @type ^`int`[] @kind object;
  #L5369a2.  v4[v0]:= v6;
  #L5369a6.  v4:= v3.`n.j.i` @type ^`int`;
  #L5369aa.  if v4 <= 0 then goto L5369c0;
  #L5369ae.  v4:= v3.`n.j.h` @type ^`int`[] @kind object;
  #L5369b2.  v1:= v3.`n.j.j` @type ^`int`;
  #L5369b6.  v4[v0]:= v1;
  #L5369ba.  v3.`n.j.j` @type ^`int` := v0;
  #L5369be.  goto L5369c8;
  #L5369c0.  v4:= v3.`n.j.h` @type ^`int`[] @kind object;
  #L5369c4.  v4[v0]:= v6;
  #L5369c8.  v4:= v3.`n.j.h` @type ^`int`[] @kind object;
  #L5369cc.  v1:= v4[v0];
  #L5369d0.  if v1 == v6 then goto L5369e0;
  #L5369d4.  v6:= v3.`n.j.g` @type ^`int`[] @kind object;
  #L5369d8.  v4:= v4[v0];
  #L5369dc.  v6[v4]:= v0;
  #L5369e0.  call `l`(v3, v5, v0) @signature `Ln/j;.l:(Ln/i;I)V` @kind direct;
  #L5369e6.  return @kind void;
}
procedure `void` `r`(`n.j` v5 @kind this, `n.i` v6 @kind object) @signature `Ln/j;.r:(Ln/i;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L536b0c.  v6:= v6.`n.i.i` @type ^`int`;
  #L536b10.  v0:= v5.`n.j.b` @type ^`int`;
  #L536b14.  v0:= v6 %% v0 @kind int;
  #L536b18.  v1:= v5.`n.j.c` @type ^`int`[] @kind object;
  #L536b1c.  v2:= v1[v0];
  #L536b20.  v3:= -1I;
  #L536b22.  if v2 != v3 then goto L536b28;
  #L536b26.  return @kind void;
  #L536b28.  v4:= v5.`n.j.e` @type ^`int`[] @kind object;
  #L536b2c.  v4:= v4[v2];
  #L536b30.  if v4 != v6 then goto L536b46;
  #L536b34.  v6:= v5.`n.j.d` @type ^`int`[] @kind object;
  #L536b38.  v4:= v6[v2];
  #L536b3c.  v1[v0]:= v4;
  #L536b40.  v6[v2]:= v3;
  #L536b44.  goto L536b88;
  #L536b46.  v0:= v5.`n.j.d` @type ^`int`[] @kind object;
  #L536b4a.  v1:= v0[v2];
  #L536b4e.  if v1 == v3 then goto L536b68;
  #L536b52.  v1:= v5.`n.j.e` @type ^`int`[] @kind object;
  #L536b56.  v4:= v0[v2];
  #L536b5a.  v1:= v1[v4];
  #L536b5e.  if v1 == v6 then goto L536b68;
  #L536b62.  v2:= v0[v2];
  #L536b66.  goto L536b46;
  #L536b68.  v1:= v0[v2];
  #L536b6c.  if v1 == v3 then goto L536b88;
  #L536b70.  v4:= v5.`n.j.e` @type ^`int`[] @kind object;
  #L536b74.  v4:= v4[v1];
  #L536b78.  if v4 != v6 then goto L536b88;
  #L536b7c.  v6:= v0[v1];
  #L536b80.  v0[v2]:= v6;
  #L536b84.  v0[v1]:= v3;
  #L536b88.  return @kind void;
}
procedure `void` `a`(`n.j` v4 @kind this, `n.i` v5 @kind object, `float` v6 , `boolean` v7 ) @signature `Ln/j;.a:(Ln/i;FZ)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L5366fc.  v0:= `@@n.j.m` @type ^`float`;
  #L536700.  v1:= -v0 @kind float;
  #L536702.  v1:= fcmpl(v6, v1);
  #L536706.  if v1 <= 0 then goto L536714;
  #L53670a.  v0:= fcmpg(v6, v0);
  #L53670e.  if v0 >= 0 then goto L536714;
  #L536712.  return @kind void;
  #L536714.  call temp:= `p`(v4, v5) @signature `Ln/j;.p:(Ln/i;)I` @kind virtual;
  #L53671a.  v0:= temp;
  #L53671c.  v1:= -1I;
  #L53671e.  if v0 != v1 then goto L53672a;
  #L536722.  call `c`(v4, v5, v6) @signature `Ln/j;.c:(Ln/i;F)V` @kind virtual;
  #L536728.  goto L536762;
  #L53672a.  v1:= v4.`n.j.f` @type ^`float`[] @kind object;
  #L53672e.  v2:= v1[v0];
  #L536732.  v2:= v2 + v6 @kind float;
  #L536734.  v1[v0]:= v2;
  #L536738.  v6:= v1[v0];
  #L53673c.  v2:= `@@n.j.m` @type ^`float`;
  #L536740.  v3:= -v2 @kind float;
  #L536742.  v6:= fcmpl(v6, v3);
  #L536746.  if v6 <= 0 then goto L536762;
  #L53674a.  v6:= v1[v0];
  #L53674e.  v6:= fcmpg(v6, v2);
  #L536752.  if v6 >= 0 then goto L536762;
  #L536756.  v6:= 0I;
  #L536758.  v1[v0]:= v6;
  #L53675c.  call temp:= `k`(v4, v5, v7) @signature `Ln/j;.k:(Ln/i;Z)F` @kind virtual;
  #L536762.  return @kind void;
}
procedure `float` `b`(`n.j` v7 @kind this, `n.b` v8 @kind object, `boolean` v9 ) @signature `Ln/j;.b:(Ln/b;Z)F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L5362c8.  v0:= v8.`n.b.a` @type ^`n.i` @kind object;
  #L5362cc.  call temp:= `e`(v7, v0) @signature `Ln/j;.e:(Ln/i;)F` @kind virtual;
  #L5362d2.  v0:= temp;
  #L5362d4.  v1:= v8.`n.b.a` @type ^`n.i` @kind object;
  #L5362d8.  call temp:= `k`(v7, v1, v9) @signature `Ln/j;.k:(Ln/i;Z)F` @kind virtual;
  #L5362de.  v8:= v8.`n.b.e` @type ^`n.b$a` @kind object;
  #L5362e2.  v8:= (`n.j`) v8 @kind object;
  #L5362e6.  call temp:= `d`(v8) @signature `Ln/j;.d:()I` @kind virtual;
  #L5362ec.  v1:= temp;
  #L5362ee.  v2:= 0I;
  #L5362f0.  v3:= 0I;
  #L5362f2.  if v2 >= v1 then goto L536330;
  #L5362f6.  v4:= v8.`n.j.e` @type ^`int`[] @kind object;
  #L5362fa.  v5:= v4[v3];
  #L5362fe.  v6:= -1I;
  #L536300.  if v5 == v6 then goto L53632a;
  #L536304.  v5:= v8.`n.j.f` @type ^`float`[] @kind object;
  #L536308.  v5:= v5[v3];
  #L53630c.  v6:= v7.`n.j.l` @type ^`n.c` @kind object;
  #L536310.  v6:= v6.`n.c.d` @type ^`n.i`[] @kind object;
  #L536314.  v4:= v4[v3];
  #L536318.  v4:= v6[v4] @kind object;
  #L53631c.  v5:= v5 * v0 @kind float;
  #L536320.  call `a`(v7, v4, v5, v9) @signature `Ln/j;.a:(Ln/i;FZ)V` @kind virtual;
  #L536326.  v2:= v2 + 1;
  #L53632a.  v3:= v3 + 1;
  #L53632e.  goto L5362f2;
  #L536330.  return v0;
}
procedure `void` `c`(`n.j` v8 @kind this, `n.i` v9 @kind object, `float` v10 ) @signature `Ln/j;.c:(Ln/i;F)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L536a44.  v0:= `@@n.j.m` @type ^`float`;
  #L536a48.  v1:= -v0 @kind float;
  #L536a4a.  v2:= 1I;
  #L536a4c.  v1:= fcmpl(v10, v1);
  #L536a50.  if v1 <= 0 then goto L536a64;
  #L536a54.  v0:= fcmpg(v10, v0);
  #L536a58.  if v0 >= 0 then goto L536a64;
  #L536a5c.  call temp:= `k`(v8, v9, v2) @signature `Ln/j;.k:(Ln/i;Z)F` @kind virtual;
  #L536a62.  return @kind void;
  #L536a64.  v0:= v8.`n.j.i` @type ^`int`;
  #L536a68.  v1:= 0I;
  #L536a6a.  if v0 != 0 then goto L536a80;
  #L536a6e.  call `m`(v8, v1, v9, v10) @signature `Ln/j;.m:(ILn/i;F)V` @kind direct;
  #L536a74.  call `l`(v8, v9, v1) @signature `Ln/j;.l:(Ln/i;I)V` @kind direct;
  #L536a7a.  v8.`n.j.j` @type ^`int` := v1;
  #L536a7e.  goto L536af8;
  #L536a80.  call temp:= `p`(v8, v9) @signature `Ln/j;.p:(Ln/i;)I` @kind virtual;
  #L536a86.  v0:= temp;
  #L536a88.  v3:= -1I;
  #L536a8a.  if v0 == v3 then goto L536a98;
  #L536a8e.  v9:= v8.`n.j.f` @type ^`float`[] @kind object;
  #L536a92.  v9[v0]:= v10;
  #L536a96.  goto L536af8;
  #L536a98.  v0:= v8.`n.j.i` @type ^`int`;
  #L536a9c.  v0:= v0 + v2 @kind int;
  #L536a9e.  v2:= v8.`n.j.a` @type ^`int`;
  #L536aa2.  if v0 < v2 then goto L536aac;
  #L536aa6.  call `o`(v8) @signature `Ln/j;.o:()V` @kind direct;
  #L536aac.  v0:= v8.`n.j.i` @type ^`int`;
  #L536ab0.  v2:= v8.`n.j.j` @type ^`int`;
  #L536ab4.  v4:= -1I;
  #L536ab6.  if v1 >= v0 then goto L536af2;
  #L536aba.  v5:= v8.`n.j.e` @type ^`int`[] @kind object;
  #L536abe.  v6:= v5[v2];
  #L536ac2.  v7:= v9.`n.i.i` @type ^`int`;
  #L536ac6.  if v6 != v7 then goto L536ad4;
  #L536aca.  v9:= v8.`n.j.f` @type ^`float`[] @kind object;
  #L536ace.  v9[v2]:= v10;
  #L536ad2.  return @kind void;
  #L536ad4.  v5:= v5[v2];
  #L536ad8.  if v5 >= v7 then goto L536ade;
  #L536adc.  v4:= v2;
  #L536ade.  v5:= v8.`n.j.h` @type ^`int`[] @kind object;
  #L536ae2.  v2:= v5[v2];
  #L536ae6.  if v2 != v3 then goto L536aec;
  #L536aea.  goto L536af2;
  #L536aec.  v1:= v1 + 1;
  #L536af0.  goto L536ab6;
  #L536af2.  call `q`(v8, v4, v9, v10) @signature `Ln/j;.q:(ILn/i;F)V` @kind direct;
  #L536af8.  return @kind void;
}
procedure `void` `clear`(`n.j` v5 @kind this) @signature `Ln/j;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L536820.  v0:= v5.`n.j.i` @type ^`int`;
  #L536824.  v1:= 0I;
  #L536826.  v2:= 0I;
  #L536828.  if v2 >= v0 then goto L536848;
  #L53682c.  call temp:= `f`(v5, v2) @signature `Ln/j;.f:(I)Ln/i;` @kind virtual;
  #L536832.  v3:= temp @kind object;
  #L536834.  if v3 == 0 then goto L536842;
  #L536838.  v4:= v5.`n.j.k` @type ^`n.b` @kind object;
  #L53683c.  call `d`(v3, v4) @signature `Ln/i;.d:(Ln/b;)V` @kind virtual;
  #L536842.  v2:= v2 + 1;
  #L536846.  goto L536828;
  #L536848.  v0:= 0I;
  #L53684a.  v2:= v5.`n.j.a` @type ^`int`;
  #L53684e.  v3:= -1I;
  #L536850.  if v0 >= v2 then goto L53686a;
  #L536854.  v2:= v5.`n.j.e` @type ^`int`[] @kind object;
  #L536858.  v2[v0]:= v3;
  #L53685c.  v2:= v5.`n.j.d` @type ^`int`[] @kind object;
  #L536860.  v2[v0]:= v3;
  #L536864.  v0:= v0 + 1;
  #L536868.  goto L53684a;
  #L53686a.  v0:= 0I;
  #L53686c.  v2:= v5.`n.j.b` @type ^`int`;
  #L536870.  if v0 >= v2 then goto L536882;
  #L536874.  v2:= v5.`n.j.c` @type ^`int`[] @kind object;
  #L536878.  v2[v0]:= v3;
  #L53687c.  v0:= v0 + 1;
  #L536880.  goto L53686c;
  #L536882.  v5.`n.j.i` @type ^`int` := v1;
  #L536886.  v5.`n.j.j` @type ^`int` := v3;
  #L53688a.  return @kind void;
}
procedure `int` `d`(`n.j` v1 @kind this) @signature `Ln/j;.d:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L536378.  v0:= v1.`n.j.i` @type ^`int`;
  #L53637c.  return v0;
}
procedure `float` `e`(`n.j` v1 @kind this, `n.i` v2 @kind object) @signature `Ln/j;.e:(Ln/i;)F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5361ac.  call temp:= `p`(v1, v2) @signature `Ln/j;.p:(Ln/i;)I` @kind virtual;
  #L5361b2.  v2:= temp;
  #L5361b4.  v0:= -1I;
  #L5361b6.  if v2 == v0 then goto L5361c4;
  #L5361ba.  v0:= v1.`n.j.f` @type ^`float`[] @kind object;
  #L5361be.  v2:= v0[v2];
  #L5361c2.  return v2;
  #L5361c4.  v2:= 0I;
  #L5361c6.  return v2;
}
procedure `n.i` `f`(`n.j` v6 @kind this, `int` v7 ) @signature `Ln/j;.f:(I)Ln/i;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L53661c.  v0:= v6.`n.j.i` @type ^`int`;
  #L536620.  v1:= 0I;
  #L536622.  if v0 != 0 then goto L536628;
  #L536626.  return v1 @kind object;
  #L536628.  v2:= v6.`n.j.j` @type ^`int`;
  #L53662c.  v3:= 0I;
  #L53662e.  if v3 >= v0 then goto L536666;
  #L536632.  v4:= -1I;
  #L536634.  if v3 != v7 then goto L536652;
  #L536638.  if v2 == v4 then goto L536652;
  #L53663c.  v7:= v6.`n.j.l` @type ^`n.c` @kind object;
  #L536640.  v7:= v7.`n.c.d` @type ^`n.i`[] @kind object;
  #L536644.  v0:= v6.`n.j.e` @type ^`int`[] @kind object;
  #L536648.  v0:= v0[v2];
  #L53664c.  v7:= v7[v0] @kind object;
  #L536650.  return v7 @kind object;
  #L536652.  v5:= v6.`n.j.h` @type ^`int`[] @kind object;
  #L536656.  v2:= v5[v2];
  #L53665a.  if v2 != v4 then goto L536660;
  #L53665e.  goto L536666;
  #L536660.  v3:= v3 + 1;
  #L536664.  goto L53662e;
  #L536666.  return v1 @kind object;
}
procedure `void` `g`(`n.j` v6 @kind this) @signature `Ln/j;.g:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L5369f8.  v0:= v6.`n.j.i` @type ^`int`;
  #L5369fc.  v1:= v6.`n.j.j` @type ^`int`;
  #L536a00.  v2:= 0I;
  #L536a02.  if v2 >= v0 then goto L536a30;
  #L536a06.  v3:= v6.`n.j.f` @type ^`float`[] @kind object;
  #L536a0a.  v4:= v3[v1];
  #L536a0e.  v5:= -1.0F;
  #L536a12.  v4:= v4 * v5 @kind float;
  #L536a16.  v3[v1]:= v4;
  #L536a1a.  v3:= v6.`n.j.h` @type ^`int`[] @kind object;
  #L536a1e.  v1:= v3[v1];
  #L536a22.  v3:= -1I;
  #L536a24.  if v1 != v3 then goto L536a2a;
  #L536a28.  goto L536a30;
  #L536a2a.  v2:= v2 + 1;
  #L536a2e.  goto L536a02;
  #L536a30.  return @kind void;
}
procedure `float` `h`(`n.j` v4 @kind this, `int` v5 ) @signature `Ln/j;.h:(I)F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L5361d8.  v0:= v4.`n.j.i` @type ^`int`;
  #L5361dc.  v1:= v4.`n.j.j` @type ^`int`;
  #L5361e0.  v2:= 0I;
  #L5361e2.  if v2 >= v0 then goto L53620a;
  #L5361e6.  if v2 != v5 then goto L5361f4;
  #L5361ea.  v5:= v4.`n.j.f` @type ^`float`[] @kind object;
  #L5361ee.  v5:= v5[v1];
  #L5361f2.  return v5;
  #L5361f4.  v3:= v4.`n.j.h` @type ^`int`[] @kind object;
  #L5361f8.  v1:= v3[v1];
  #L5361fc.  v3:= -1I;
  #L5361fe.  if v1 != v3 then goto L536204;
  #L536202.  goto L53620a;
  #L536204.  v2:= v2 + 1;
  #L536208.  goto L5361e2;
  #L53620a.  v5:= 0I;
  #L53620c.  return v5;
}
procedure `boolean` `i`(`n.j` v1 @kind this, `n.i` v2 @kind object) @signature `Ln/j;.i:(Ln/i;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L536184.  call temp:= `p`(v1, v2) @signature `Ln/j;.p:(Ln/i;)I` @kind virtual;
  #L53618a.  v2:= temp;
  #L53618c.  v0:= -1I;
  #L53618e.  if v2 == v0 then goto L536196;
  #L536192.  v2:= 1I;
  #L536194.  goto L536198;
  #L536196.  v2:= 0I;
  #L536198.  return v2;
}
procedure `void` `j`(`n.j` v5 @kind this, `float` v6 ) @signature `Ln/j;.j:(F)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L53689c.  v0:= v5.`n.j.i` @type ^`int`;
  #L5368a0.  v1:= v5.`n.j.j` @type ^`int`;
  #L5368a4.  v2:= 0I;
  #L5368a6.  if v2 >= v0 then goto L5368ce;
  #L5368aa.  v3:= v5.`n.j.f` @type ^`float`[] @kind object;
  #L5368ae.  v4:= v3[v1];
  #L5368b2.  v4:= v4 / v6 @kind float;
  #L5368b4.  v3[v1]:= v4;
  #L5368b8.  v3:= v5.`n.j.h` @type ^`int`[] @kind object;
  #L5368bc.  v1:= v3[v1];
  #L5368c0.  v3:= -1I;
  #L5368c2.  if v1 != v3 then goto L5368c8;
  #L5368c6.  goto L5368ce;
  #L5368c8.  v2:= v2 + 1;
  #L5368cc.  goto L5368a6;
  #L5368ce.  return @kind void;
}
procedure `float` `k`(`n.j` v7 @kind this, `n.i` v8 @kind object, `boolean` v9 ) @signature `Ln/j;.k:(Ln/i;Z)F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L536220.  call temp:= `p`(v7, v8) @signature `Ln/j;.p:(Ln/i;)I` @kind virtual;
  #L536226.  v0:= temp;
  #L536228.  v1:= -1I;
  #L53622a.  if v0 != v1 then goto L536232;
  #L53622e.  v8:= 0I;
  #L536230.  return v8;
  #L536232.  call `r`(v7, v8) @signature `Ln/j;.r:(Ln/i;)V` @kind direct;
  #L536238.  v2:= v7.`n.j.f` @type ^`float`[] @kind object;
  #L53623c.  v2:= v2[v0];
  #L536240.  v3:= v7.`n.j.j` @type ^`int`;
  #L536244.  if v3 != v0 then goto L536254;
  #L536248.  v3:= v7.`n.j.h` @type ^`int`[] @kind object;
  #L53624c.  v3:= v3[v0];
  #L536250.  v7.`n.j.j` @type ^`int` := v3;
  #L536254.  v3:= v7.`n.j.e` @type ^`int`[] @kind object;
  #L536258.  v3[v0]:= v1;
  #L53625c.  v3:= v7.`n.j.g` @type ^`int`[] @kind object;
  #L536260.  v4:= v3[v0];
  #L536264.  if v4 == v1 then goto L536278;
  #L536268.  v4:= v7.`n.j.h` @type ^`int`[] @kind object;
  #L53626c.  v5:= v3[v0];
  #L536270.  v6:= v4[v0];
  #L536274.  v4[v5]:= v6;
  #L536278.  v4:= v7.`n.j.h` @type ^`int`[] @kind object;
  #L53627c.  v5:= v4[v0];
  #L536280.  if v5 == v1 then goto L536290;
  #L536284.  v1:= v4[v0];
  #L536288.  v0:= v3[v0];
  #L53628c.  v3[v1]:= v0;
  #L536290.  v0:= v7.`n.j.i` @type ^`int`;
  #L536294.  v0:= v0 + -1;
  #L536298.  v7.`n.j.i` @type ^`int` := v0;
  #L53629c.  v0:= v8.`n.i.s` @type ^`int`;
  #L5362a0.  v0:= v0 + -1;
  #L5362a4.  v8.`n.i.s` @type ^`int` := v0;
  #L5362a8.  if v9 == 0 then goto L5362b6;
  #L5362ac.  v9:= v7.`n.j.k` @type ^`n.b` @kind object;
  #L5362b0.  call `d`(v8, v9) @signature `Ln/i;.d:(Ln/b;)V` @kind virtual;
  #L5362b6.  return v2;
}
procedure `int` `p`(`n.j` v5 @kind this, `n.i` v6 @kind object) @signature `Ln/j;.p:(Ln/i;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L536390.  v0:= v5.`n.j.i` @type ^`int`;
  #L536394.  v1:= -1I;
  #L536396.  if v0 == 0 then goto L53640a;
  #L53639a.  if v6 != 0 then goto L5363a0;
  #L53639e.  goto L53640a;
  #L5363a0.  v6:= v6.`n.i.i` @type ^`int`;
  #L5363a4.  v0:= v5.`n.j.b` @type ^`int`;
  #L5363a8.  v0:= v6 %% v0 @kind int;
  #L5363ac.  v2:= v5.`n.j.c` @type ^`int`[] @kind object;
  #L5363b0.  v0:= v2[v0];
  #L5363b4.  if v0 != v1 then goto L5363ba;
  #L5363b8.  return v1;
  #L5363ba.  v2:= v5.`n.j.e` @type ^`int`[] @kind object;
  #L5363be.  v2:= v2[v0];
  #L5363c2.  if v2 != v6 then goto L5363c8;
  #L5363c6.  return v0;
  #L5363c8.  v2:= v5.`n.j.d` @type ^`int`[] @kind object;
  #L5363cc.  v3:= v2[v0];
  #L5363d0.  if v3 == v1 then goto L5363ea;
  #L5363d4.  v3:= v5.`n.j.e` @type ^`int`[] @kind object;
  #L5363d8.  v4:= v2[v0];
  #L5363dc.  v3:= v3[v4];
  #L5363e0.  if v3 == v6 then goto L5363ea;
  #L5363e4.  v0:= v2[v0];
  #L5363e8.  goto L5363c8;
  #L5363ea.  v3:= v2[v0];
  #L5363ee.  if v3 != v1 then goto L5363f4;
  #L5363f2.  return v1;
  #L5363f4.  v3:= v5.`n.j.e` @type ^`int`[] @kind object;
  #L5363f8.  v4:= v2[v0];
  #L5363fc.  v3:= v3[v4];
  #L536400.  if v3 != v6 then goto L53640a;
  #L536404.  v6:= v2[v0];
  #L536408.  return v6;
  #L53640a.  return v1;
}
procedure `java.lang.String` `toString`(`n.j` v9 @kind this) @signature `Ln/j;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L53641c.  v0:= new `java.lang.StringBuilder`;
  #L536420.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L536426.  call temp:= `hashCode`(v9) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L53642c.  v1:= temp;
  #L53642e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L536434.  v1:= " { " @kind object;
  #L536438.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L53643e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L536444.  v0:= temp @kind object;
  #L536446.  v1:= v9.`n.j.i` @type ^`int`;
  #L53644a.  v2:= 0I;
  #L53644c.  if v2 >= v1 then goto L5365e8;
  #L536450.  call temp:= `f`(v9, v2) @signature `Ln/j;.f:(I)Ln/i;` @kind virtual;
  #L536456.  v3:= temp @kind object;
  #L536458.  if v3 != 0 then goto L536460;
  #L53645c.  goto L5365e0;
  #L536460.  v4:= new `java.lang.StringBuilder`;
  #L536464.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L53646a.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L536470.  call temp:= `append`(v4, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L536476.  v0:= " = " @kind object;
  #L53647a.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L536480.  call temp:= `h`(v9, v2) @signature `Ln/j;.h:(I)F` @kind virtual;
  #L536486.  v0:= temp;
  #L536488.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(F)Ljava/lang/StringBuilder;` @kind virtual;
  #L53648e.  v0:= " " @kind object;
  #L536492.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L536498.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L53649e.  v0:= temp @kind object;
  #L5364a0.  call temp:= `p`(v9, v3) @signature `Ln/j;.p:(Ln/i;)I` @kind virtual;
  #L5364a6.  v3:= temp;
  #L5364a8.  v4:= new `java.lang.StringBuilder`;
  #L5364ac.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L5364b2.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L5364b8.  v0:= "[p: " @kind object;
  #L5364bc.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L5364c2.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L5364c8.  v0:= temp @kind object;
  #L5364ca.  v4:= v9.`n.j.g` @type ^`int`[] @kind object;
  #L5364ce.  v4:= v4[v3];
  #L5364d2.  v5:= "none" @kind object;
  #L5364d6.  v6:= -1I;
  #L5364d8.  if v4 == v6 then goto L536518;
  #L5364dc.  v4:= new `java.lang.StringBuilder`;
  #L5364e0.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L5364e6.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L5364ec.  v0:= v9.`n.j.l` @type ^`n.c` @kind object;
  #L5364f0.  v0:= v0.`n.c.d` @type ^`n.i`[] @kind object;
  #L5364f4.  v7:= v9.`n.j.e` @type ^`int`[] @kind object;
  #L5364f8.  v8:= v9.`n.j.g` @type ^`int`[] @kind object;
  #L5364fc.  v8:= v8[v3];
  #L536500.  v7:= v7[v8];
  #L536504.  v0:= v0[v7] @kind object;
  #L536508.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L53650e.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L536514.  v0:= temp @kind object;
  #L536516.  goto L536536;
  #L536518.  v4:= new `java.lang.StringBuilder`;
  #L53651c.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L536522.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L536528.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L53652e.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L536534.  v0:= temp @kind object;
  #L536536.  v4:= new `java.lang.StringBuilder`;
  #L53653a.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L536540.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L536546.  v0:= ", n: " @kind object;
  #L53654a.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L536550.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L536556.  v0:= temp @kind object;
  #L536558.  v4:= v9.`n.j.h` @type ^`int`[] @kind object;
  #L53655c.  v4:= v4[v3];
  #L536560.  if v4 == v6 then goto L5365a0;
  #L536564.  v4:= new `java.lang.StringBuilder`;
  #L536568.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L53656e.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L536574.  v0:= v9.`n.j.l` @type ^`n.c` @kind object;
  #L536578.  v0:= v0.`n.c.d` @type ^`n.i`[] @kind object;
  #L53657c.  v5:= v9.`n.j.e` @type ^`int`[] @kind object;
  #L536580.  v6:= v9.`n.j.h` @type ^`int`[] @kind object;
  #L536584.  v3:= v6[v3];
  #L536588.  v3:= v5[v3];
  #L53658c.  v0:= v0[v3] @kind object;
  #L536590.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L536596.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L53659c.  v0:= temp @kind object;
  #L53659e.  goto L5365be;
  #L5365a0.  v3:= new `java.lang.StringBuilder`;
  #L5365a4.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L5365aa.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L5365b0.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L5365b6.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L5365bc.  v0:= temp @kind object;
  #L5365be.  v3:= new `java.lang.StringBuilder`;
  #L5365c2.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L5365c8.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L5365ce.  v0:= "]" @kind object;
  #L5365d2.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L5365d8.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L5365de.  v0:= temp @kind object;
  #L5365e0.  v2:= v2 + 1;
  #L5365e4.  goto L53644c;
  #L5365e8.  v1:= new `java.lang.StringBuilder`;
  #L5365ec.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L5365f2.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L5365f8.  v0:= " }" @kind object;
  #L5365fc.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L536602.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L536608.  v0:= temp @kind object;
  #L53660a.  return v0 @kind object;
}
