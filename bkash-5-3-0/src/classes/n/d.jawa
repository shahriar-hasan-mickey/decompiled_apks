record `n.d` @kind class @AccessFlag PUBLIC {
  `boolean` `n.d.a` @AccessFlag PUBLIC;
  `int` `n.d.b` @AccessFlag ;
  `java.util.HashMap` `n.d.c` @AccessFlag PRIVATE;
  `n.d$a` `n.d.d` @AccessFlag PRIVATE;
  `int` `n.d.e` @AccessFlag PRIVATE;
  `int` `n.d.f` @AccessFlag PRIVATE;
  `n.b`[] `n.d.g` @AccessFlag ;
  `boolean` `n.d.h` @AccessFlag PUBLIC;
  `boolean` `n.d.i` @AccessFlag PUBLIC;
  `boolean`[] `n.d.j` @AccessFlag PRIVATE;
  `int` `n.d.k` @AccessFlag ;
  `int` `n.d.l` @AccessFlag ;
  `int` `n.d.m` @AccessFlag PRIVATE;
  `n.c` `n.d.n` @AccessFlag FINAL;
  `n.i`[] `n.d.o` @AccessFlag PRIVATE;
  `int` `n.d.p` @AccessFlag PRIVATE;
  `n.d$a` `n.d.q` @AccessFlag PRIVATE;
}
global `boolean` `@@n.d.r` @AccessFlag PUBLIC_STATIC;
global `boolean` `@@n.d.s` @AccessFlag PUBLIC_STATIC;
global `boolean` `@@n.d.t` @AccessFlag PUBLIC_STATIC;
global `boolean` `@@n.d.u` @AccessFlag PUBLIC_STATIC;
global `boolean` `@@n.d.v` @AccessFlag PUBLIC_STATIC;
global `int` `@@n.d.w` @AccessFlag PRIVATE_STATIC;
global `n.e` `@@n.d.x` @AccessFlag PUBLIC_STATIC;
global `long` `@@n.d.y` @AccessFlag PUBLIC_STATIC;
global `long` `@@n.d.z` @AccessFlag PUBLIC_STATIC;
procedure `void` `<clinit>`() @signature `Ln/d;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;

  #L534fa4.  return @kind void;
}
procedure `void` `<init>`(`n.d` v3 @kind this) @signature `Ln/d;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L534fb8.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L534fbe.  v0:= 0I;
  #L534fc0.  v3.`n.d.a` @type ^`boolean` := v0 @kind boolean;
  #L534fc4.  v3.`n.d.b` @type ^`int` := v0;
  #L534fc8.  v1:= 0I;
  #L534fca.  v3.`n.d.c` @type ^`java.util.HashMap` := v1 @kind object;
  #L534fce.  v2:= 32I;
  #L534fd2.  v3.`n.d.e` @type ^`int` := v2;
  #L534fd6.  v3.`n.d.f` @type ^`int` := v2;
  #L534fda.  v3.`n.d.g` @type ^`n.b`[] := v1 @kind object;
  #L534fde.  v3.`n.d.h` @type ^`boolean` := v0 @kind boolean;
  #L534fe2.  v3.`n.d.i` @type ^`boolean` := v0 @kind boolean;
  #L534fe6.  v1:= new `boolean`[v2];
  #L534fea.  v3.`n.d.j` @type ^`boolean`[] := v1 @kind object;
  #L534fee.  v1:= 1I;
  #L534ff0.  v3.`n.d.k` @type ^`int` := v1;
  #L534ff4.  v3.`n.d.l` @type ^`int` := v0;
  #L534ff8.  v3.`n.d.m` @type ^`int` := v2;
  #L534ffc.  v1:= `@@n.d.w` @type ^`int`;
  #L535000.  v1:= new `n.i`[v1];
  #L535004.  v3.`n.d.o` @type ^`n.i`[] := v1 @kind object;
  #L535008.  v3.`n.d.p` @type ^`int` := v0;
  #L53500c.  v0:= new `n.b`[v2];
  #L535010.  v3.`n.d.g` @type ^`n.b`[] := v0 @kind object;
  #L535014.  call `D`(v3) @signature `Ln/d;.D:()V` @kind direct;
  #L53501a.  v0:= new `n.c`;
  #L53501e.  call `<init>`(v0) @signature `Ln/c;.<init>:()V` @kind direct;
  #L535024.  v3.`n.d.n` @type ^`n.c` := v0 @kind object;
  #L535028.  v1:= new `n.h`;
  #L53502c.  call `<init>`(v1, v0) @signature `Ln/h;.<init>:(Ln/c;)V` @kind direct;
  #L535032.  v3.`n.d.d` @type ^`n.d$a` := v1 @kind object;
  #L535036.  v1:= `@@n.d.v` @type ^`boolean` @kind boolean;
  #L53503a.  if v1 == 0 then goto L53504e;
  #L53503e.  v1:= new `n.d$b`;
  #L535042.  call `<init>`(v1, v3, v0) @signature `Ln/d$b;.<init>:(Ln/d;Ln/c;)V` @kind direct;
  #L535048.  v3.`n.d.q` @type ^`n.d$a` := v1 @kind object;
  #L53504c.  goto L53505c;
  #L53504e.  v1:= new `n.b`;
  #L535052.  call `<init>`(v1, v0) @signature `Ln/b;.<init>:(Ln/c;)V` @kind direct;
  #L535058.  v3.`n.d.q` @type ^`n.d$a` := v1 @kind object;
  #L53505c.  return @kind void;
}
procedure `int` `C`(`n.d` v10 @kind this, `n.d$a` v11 @kind object, `boolean` v12 ) @signature `Ln/d;.C:(Ln/d$a;Z)I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L534ab4.  v12:= 0I;
  #L534ab6.  v0:= 0I;
  #L534ab8.  v1:= v10.`n.d.k` @type ^`int`;
  #L534abc.  if v0 >= v1 then goto L534ace;
  #L534ac0.  v1:= v10.`n.d.j` @type ^`boolean`[] @kind object;
  #L534ac4.  v1[v0]:= v12 @kind boolean;
  #L534ac8.  v0:= v0 + 1;
  #L534acc.  goto L534ab8;
  #L534ace.  v0:= 0I;
  #L534ad0.  v1:= 0I;
  #L534ad2.  if v0 != 0 then goto L534bd8;
  #L534ad6.  v1:= v1 + 1;
  #L534ada.  v2:= v10.`n.d.k` @type ^`int`;
  #L534ade.  v2:= v2 * 2;
  #L534ae2.  if v1 < v2 then goto L534ae8;
  #L534ae6.  return v1;
  #L534ae8.  call temp:= `getKey`(v11) @signature `Ln/d$a;.getKey:()Ln/i;` @kind interface;
  #L534aee.  v2:= temp @kind object;
  #L534af0.  v3:= 1I;
  #L534af2.  if v2 == 0 then goto L534b0a;
  #L534af6.  v2:= v10.`n.d.j` @type ^`boolean`[] @kind object;
  #L534afa.  call temp:= `getKey`(v11) @signature `Ln/d$a;.getKey:()Ln/i;` @kind interface;
  #L534b00.  v4:= temp @kind object;
  #L534b02.  v4:= v4.`n.i.i` @type ^`int`;
  #L534b06.  v2[v4]:= v3 @kind boolean;
  #L534b0a.  v2:= v10.`n.d.j` @type ^`boolean`[] @kind object;
  #L534b0e.  call temp:= `b`(v11, v10, v2) @signature `Ln/d$a;.b:(Ln/d;[Z)Ln/i;` @kind interface;
  #L534b14.  v2:= temp @kind object;
  #L534b16.  if v2 == 0 then goto L534b30;
  #L534b1a.  v4:= v10.`n.d.j` @type ^`boolean`[] @kind object;
  #L534b1e.  v5:= v2.`n.i.i` @type ^`int`;
  #L534b22.  v6:= v4[v5] @kind boolean;
  #L534b26.  if v6 == 0 then goto L534b2c;
  #L534b2a.  return v1;
  #L534b2c.  v4[v5]:= v3 @kind boolean;
  #L534b30.  if v2 == 0 then goto L534bd2;
  #L534b34.  v3:= 2139095039I;
  #L534b3a.  v4:= -1I;
  #L534b3c.  v5:= 0I;
  #L534b3e.  v6:= -1I;
  #L534b40.  v7:= v10.`n.d.l` @type ^`int`;
  #L534b44.  if v5 >= v7 then goto L534ba8;
  #L534b48.  v7:= v10.`n.d.g` @type ^`n.b`[] @kind object;
  #L534b4c.  v7:= v7[v5] @kind object;
  #L534b50.  v8:= v7.`n.b.a` @type ^`n.i` @kind object;
  #L534b54.  v8:= v8.`n.i.p` @type ^`n.i$a` @kind object;
  #L534b58.  v9:= `@@n.i$a.UNRESTRICTED` @type ^`n.i$a` @kind object;
  #L534b5c.  if v8 != v9 then goto L534b62;
  #L534b60.  goto L534ba2;
  #L534b62.  v8:= v7.`n.b.f` @type ^`boolean` @kind boolean;
  #L534b66.  if v8 == 0 then goto L534b6c;
  #L534b6a.  goto L534ba2;
  #L534b6c.  call temp:= `t`(v7, v2) @signature `Ln/b;.t:(Ln/i;)Z` @kind virtual;
  #L534b72.  v8:= temp;
  #L534b74.  if v8 == 0 then goto L534ba2;
  #L534b78.  v8:= v7.`n.b.e` @type ^`n.b$a` @kind object;
  #L534b7c.  call temp:= `e`(v8, v2) @signature `Ln/b$a;.e:(Ln/i;)F` @kind interface;
  #L534b82.  v8:= temp;
  #L534b84.  v9:= 0I;
  #L534b86.  v9:= fcmpg(v8, v9);
  #L534b8a.  if v9 >= 0 then goto L534ba2;
  #L534b8e.  v7:= v7.`n.b.b` @type ^`float`;
  #L534b92.  v7:= -v7 @kind float;
  #L534b94.  v7:= v7 / v8 @kind float;
  #L534b96.  v8:= fcmpg(v7, v3);
  #L534b9a.  if v8 >= 0 then goto L534ba2;
  #L534b9e.  v6:= v5;
  #L534ba0.  v3:= v7;
  #L534ba2.  v5:= v5 + 1;
  #L534ba6.  goto L534b40;
  #L534ba8.  if v6 <= v4 then goto L534ad2;
  #L534bac.  v3:= v10.`n.d.g` @type ^`n.b`[] @kind object;
  #L534bb0.  v3:= v3[v6] @kind object;
  #L534bb4.  v5:= v3.`n.b.a` @type ^`n.i` @kind object;
  #L534bb8.  v5.`n.i.j` @type ^`int` := v4;
  #L534bbc.  call `x`(v3, v2) @signature `Ln/b;.x:(Ln/i;)V` @kind virtual;
  #L534bc2.  v2:= v3.`n.b.a` @type ^`n.i` @kind object;
  #L534bc6.  v2.`n.i.j` @type ^`int` := v6;
  #L534bca.  call `j`(v2, v10, v3) @signature `Ln/i;.j:(Ln/d;Ln/b;)V` @kind virtual;
  #L534bd0.  goto L534ad2;
  #L534bd2.  v0:= 1I;
  #L534bd4.  goto L534ad2;
  #L534bd8.  return v1;
}
procedure `void` `D`(`n.d` v4 @kind this) @signature `Ln/d;.D:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L5357f4.  v0:= `@@n.d.v` @type ^`boolean` @kind boolean;
  #L5357f8.  v1:= 0I;
  #L5357fa.  v2:= 0I;
  #L5357fc.  if v0 == 0 then goto L535830;
  #L535800.  v0:= v4.`n.d.l` @type ^`int`;
  #L535804.  if v2 >= v0 then goto L535860;
  #L535808.  v0:= v4.`n.d.g` @type ^`n.b`[] @kind object;
  #L53580c.  v0:= v0[v2] @kind object;
  #L535810.  if v0 == 0 then goto L535822;
  #L535814.  v3:= v4.`n.d.n` @type ^`n.c` @kind object;
  #L535818.  v3:= v3.`n.c.a` @type ^`n.f` @kind object;
  #L53581c.  call temp:= `a`(v3, v0) @signature `Ln/f;.a:(Ljava/lang/Object;)Z` @kind interface;
  #L535822.  v0:= v4.`n.d.g` @type ^`n.b`[] @kind object;
  #L535826.  v0[v2]:= v1 @kind object;
  #L53582a.  v2:= v2 + 1;
  #L53582e.  goto L535800;
  #L535830.  v0:= v4.`n.d.l` @type ^`int`;
  #L535834.  if v2 >= v0 then goto L535860;
  #L535838.  v0:= v4.`n.d.g` @type ^`n.b`[] @kind object;
  #L53583c.  v0:= v0[v2] @kind object;
  #L535840.  if v0 == 0 then goto L535852;
  #L535844.  v3:= v4.`n.d.n` @type ^`n.c` @kind object;
  #L535848.  v3:= v3.`n.c.b` @type ^`n.f` @kind object;
  #L53584c.  call temp:= `a`(v3, v0) @signature `Ln/f;.a:(Ljava/lang/Object;)Z` @kind interface;
  #L535852.  v0:= v4.`n.d.g` @type ^`n.b`[] @kind object;
  #L535856.  v0[v2]:= v1 @kind object;
  #L53585a.  v2:= v2 + 1;
  #L53585e.  goto L535830;
  #L535860.  return @kind void;
}
procedure `n.i` `a`(`n.d` v2 @kind this, `n.i$a` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Ln/d;.a:(Ln/i$a;Ljava/lang/String;)Ln/i;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L534d3c.  v0:= v2.`n.d.n` @type ^`n.c` @kind object;
  #L534d40.  v0:= v0.`n.c.c` @type ^`n.f` @kind object;
  #L534d44.  call temp:= `b`(v0) @signature `Ln/f;.b:()Ljava/lang/Object;` @kind interface;
  #L534d4a.  v0:= temp @kind object;
  #L534d4c.  v0:= (`n.i`) v0 @kind object;
  #L534d50.  if v0 != 0 then goto L534d66;
  #L534d54.  v0:= new `n.i`;
  #L534d58.  call `<init>`(v0, v3, v4) @signature `Ln/i;.<init>:(Ln/i$a;Ljava/lang/String;)V` @kind direct;
  #L534d5e.  call `h`(v0, v3, v4) @signature `Ln/i;.h:(Ln/i$a;Ljava/lang/String;)V` @kind virtual;
  #L534d64.  goto L534d72;
  #L534d66.  call `f`(v0) @signature `Ln/i;.f:()V` @kind virtual;
  #L534d6c.  call `h`(v0, v3, v4) @signature `Ln/i;.h:(Ln/i$a;Ljava/lang/String;)V` @kind virtual;
  #L534d72.  v3:= v2.`n.d.p` @type ^`int`;
  #L534d76.  v4:= `@@n.d.w` @type ^`int`;
  #L534d7a.  if v3 < v4 then goto L534d9a;
  #L534d7e.  v4:= v4 * 2;
  #L534d82.  `@@n.d.w` @type ^`int` := v4;
  #L534d86.  v3:= v2.`n.d.o` @type ^`n.i`[] @kind object;
  #L534d8a.  call temp:= `copyOf`(v3, v4) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L534d90.  v3:= temp @kind object;
  #L534d92.  v3:= (`n.i`[]) v3 @kind object;
  #L534d96.  v2.`n.d.o` @type ^`n.i`[] := v3 @kind object;
  #L534d9a.  v3:= v2.`n.d.o` @type ^`n.i`[] @kind object;
  #L534d9e.  v4:= v2.`n.d.p` @type ^`int`;
  #L534da2.  v1:= v4 + 1;
  #L534da6.  v2.`n.d.p` @type ^`int` := v1;
  #L534daa.  v3[v4]:= v0 @kind object;
  #L534dae.  return v0 @kind object;
}
procedure `void` `l`(`n.d` v7 @kind this, `n.b` v8 @kind object) @signature `Ln/d;.l:(Ln/b;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L535528.  v0:= `@@n.d.t` @type ^`boolean` @kind boolean;
  #L53552c.  if v0 == 0 then goto L535548;
  #L535530.  v0:= v8.`n.b.f` @type ^`boolean` @kind boolean;
  #L535534.  if v0 == 0 then goto L535548;
  #L535538.  v0:= v8.`n.b.a` @type ^`n.i` @kind object;
  #L53553c.  v8:= v8.`n.b.b` @type ^`float`;
  #L535540.  call `g`(v0, v7, v8) @signature `Ln/i;.g:(Ln/d;F)V` @kind virtual;
  #L535546.  goto L53556a;
  #L535548.  v0:= v7.`n.d.g` @type ^`n.b`[] @kind object;
  #L53554c.  v1:= v7.`n.d.l` @type ^`int`;
  #L535550.  v0[v1]:= v8 @kind object;
  #L535554.  v0:= v8.`n.b.a` @type ^`n.i` @kind object;
  #L535558.  v0.`n.i.j` @type ^`int` := v1;
  #L53555c.  v1:= v1 + 1;
  #L535560.  v7.`n.d.l` @type ^`int` := v1;
  #L535564.  call `j`(v0, v7, v8) @signature `Ln/i;.j:(Ln/d;Ln/b;)V` @kind virtual;
  #L53556a.  v8:= `@@n.d.t` @type ^`boolean` @kind boolean;
  #L53556e.  if v8 == 0 then goto L535662;
  #L535572.  v8:= v7.`n.d.a` @type ^`boolean` @kind boolean;
  #L535576.  if v8 == 0 then goto L535662;
  #L53557a.  v8:= 0I;
  #L53557c.  v0:= 0I;
  #L53557e.  v1:= v7.`n.d.l` @type ^`int`;
  #L535582.  if v0 >= v1 then goto L53565e;
  #L535586.  v1:= v7.`n.d.g` @type ^`n.b`[] @kind object;
  #L53558a.  v1:= v1[v0] @kind object;
  #L53558e.  if v1 != 0 then goto L5355a0;
  #L535592.  v1:= `@@java.lang.System.out` @type ^`java.io.PrintStream` @kind object;
  #L535596.  v2:= "WTF" @kind object;
  #L53559a.  call `println`(v1, v2) @signature `Ljava/io/PrintStream;.println:(Ljava/lang/String;)V` @kind virtual;
  #L5355a0.  v1:= v7.`n.d.g` @type ^`n.b`[] @kind object;
  #L5355a4.  v2:= v1[v0] @kind object;
  #L5355a8.  if v2 == 0 then goto L535658;
  #L5355ac.  v2:= v1[v0] @kind object;
  #L5355b0.  v2:= v2.`n.b.f` @type ^`boolean` @kind boolean;
  #L5355b4.  if v2 == 0 then goto L535658;
  #L5355b8.  v1:= v1[v0] @kind object;
  #L5355bc.  v2:= v1.`n.b.a` @type ^`n.i` @kind object;
  #L5355c0.  v3:= v1.`n.b.b` @type ^`float`;
  #L5355c4.  call `g`(v2, v7, v3) @signature `Ln/i;.g:(Ln/d;F)V` @kind virtual;
  #L5355ca.  v2:= `@@n.d.v` @type ^`boolean` @kind boolean;
  #L5355ce.  if v2 == 0 then goto L5355e2;
  #L5355d2.  v2:= v7.`n.d.n` @type ^`n.c` @kind object;
  #L5355d6.  v2:= v2.`n.c.a` @type ^`n.f` @kind object;
  #L5355da.  call temp:= `a`(v2, v1) @signature `Ln/f;.a:(Ljava/lang/Object;)Z` @kind interface;
  #L5355e0.  goto L5355f0;
  #L5355e2.  v2:= v7.`n.d.n` @type ^`n.c` @kind object;
  #L5355e6.  v2:= v2.`n.c.b` @type ^`n.f` @kind object;
  #L5355ea.  call temp:= `a`(v2, v1) @signature `Ln/f;.a:(Ljava/lang/Object;)Z` @kind interface;
  #L5355f0.  v1:= v7.`n.d.g` @type ^`n.b`[] @kind object;
  #L5355f4.  v2:= 0I;
  #L5355f6.  v1[v0]:= v2 @kind object;
  #L5355fa.  v1:= v0 + 1;
  #L5355fe.  v3:= v1;
  #L535600.  v4:= v7.`n.d.l` @type ^`int`;
  #L535604.  if v1 >= v4 then goto L535640;
  #L535608.  v3:= v7.`n.d.g` @type ^`n.b`[] @kind object;
  #L53560c.  v4:= v1 + -1;
  #L535610.  v5:= v3[v1] @kind object;
  #L535614.  v3[v4]:= v5 @kind object;
  #L535618.  v5:= v3[v4] @kind object;
  #L53561c.  v5:= v5.`n.b.a` @type ^`n.i` @kind object;
  #L535620.  v5:= v5.`n.i.j` @type ^`int`;
  #L535624.  if v5 != v1 then goto L535634;
  #L535628.  v3:= v3[v4] @kind object;
  #L53562c.  v3:= v3.`n.b.a` @type ^`n.i` @kind object;
  #L535630.  v3.`n.i.j` @type ^`int` := v4;
  #L535634.  v3:= v1 + 1;
  #L535638.  v6:= v3;
  #L53563a.  v3:= v1;
  #L53563c.  v1:= v6;
  #L53563e.  goto L535600;
  #L535640.  if v3 >= v4 then goto L53564c;
  #L535644.  v1:= v7.`n.d.g` @type ^`n.b`[] @kind object;
  #L535648.  v1[v3]:= v2 @kind object;
  #L53564c.  v4:= v4 + -1;
  #L535650.  v7.`n.d.l` @type ^`int` := v4;
  #L535654.  v0:= v0 + -1;
  #L535658.  v0:= v0 + 1;
  #L53565c.  goto L53557e;
  #L53565e.  v7.`n.d.a` @type ^`boolean` := v8 @kind boolean;
  #L535662.  return @kind void;
}
procedure `void` `n`(`n.d` v3 @kind this) @signature `Ln/d;.n:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L535698.  v0:= 0I;
  #L53569a.  v1:= v3.`n.d.l` @type ^`int`;
  #L53569e.  if v0 >= v1 then goto L5356bc;
  #L5356a2.  v1:= v3.`n.d.g` @type ^`n.b`[] @kind object;
  #L5356a6.  v1:= v1[v0] @kind object;
  #L5356aa.  v2:= v1.`n.b.a` @type ^`n.i` @kind object;
  #L5356ae.  v1:= v1.`n.b.b` @type ^`float`;
  #L5356b2.  v2.`n.i.l` @type ^`float` := v1;
  #L5356b6.  v0:= v0 + 1;
  #L5356ba.  goto L53569a;
  #L5356bc.  return @kind void;
}
procedure `n.b` `s`(`n.d` v0 @kind object, `n.i` v1 @kind object, `n.i` v2 @kind object, `float` v3 ) @signature `Ln/d;.s:(Ln/d;Ln/i;Ln/i;F)Ln/b;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L534ce8.  call temp:= `r`(v0) @signature `Ln/d;.r:()Ln/b;` @kind virtual;
  #L534cee.  v0:= temp @kind object;
  #L534cf0.  call temp:= `j`(v0, v1, v2, v3) @signature `Ln/b;.j:(Ln/i;Ln/i;F)Ln/b;` @kind virtual;
  #L534cf6.  v0:= temp @kind object;
  #L534cf8.  return v0 @kind object;
}
procedure `int` `u`(`n.d` v19 @kind this, `n.d$a` v20 @kind object) @signature `Ln/d;.u:(Ln/d$a;)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;

  #L53488c.  v0:= v19 @kind object;
  #L534890.  v2:= 0I;
  #L534892.  v3:= v0.`n.d.l` @type ^`int`;
  #L534896.  v4:= 0I;
  #L534898.  if v2 >= v3 then goto L5348d0;
  #L53489c.  v3:= v0.`n.d.g` @type ^`n.b`[] @kind object;
  #L5348a0.  v6:= v3[v2] @kind object;
  #L5348a4.  v6:= v6.`n.b.a` @type ^`n.i` @kind object;
  #L5348a8.  v6:= v6.`n.i.p` @type ^`n.i$a` @kind object;
  #L5348ac.  v7:= `@@n.i$a.UNRESTRICTED` @type ^`n.i$a` @kind object;
  #L5348b0.  if v6 != v7 then goto L5348b6;
  #L5348b4.  goto L5348ca;
  #L5348b6.  v3:= v3[v2] @kind object;
  #L5348ba.  v3:= v3.`n.b.b` @type ^`float`;
  #L5348be.  v3:= fcmpg(v3, v4);
  #L5348c2.  if v3 >= 0 then goto L5348ca;
  #L5348c6.  v2:= 1I;
  #L5348c8.  goto L5348d2;
  #L5348ca.  v2:= v2 + 1;
  #L5348ce.  goto L534892;
  #L5348d0.  v2:= 0I;
  #L5348d2.  if v2 == 0 then goto L534a6a;
  #L5348d6.  v2:= 0I;
  #L5348d8.  v3:= 0I;
  #L5348da.  if v2 != 0 then goto L534a66;
  #L5348de.  v3:= v3 + 1;
  #L5348e2.  v6:= 2139095039I;
  #L5348e8.  v8:= 0I;
  #L5348ea.  v9:= -1I;
  #L5348ec.  v10:= -1I;
  #L5348ee.  v11:= 0I;
  #L5348f0.  v12:= v0.`n.d.l` @type ^`int`;
  #L5348f4.  if v8 >= v12 then goto L534a1a;
  #L5348f8.  v12:= v0.`n.d.g` @type ^`n.b`[] @kind object;
  #L5348fc.  v12:= v12[v8] @kind object;
  #L534900.  v13:= v12.`n.b.a` @type ^`n.i` @kind object;
  #L534904.  v13:= v13.`n.i.p` @type ^`n.i$a` @kind object;
  #L534908.  v14:= `@@n.i$a.UNRESTRICTED` @type ^`n.i$a` @kind object;
  #L53490c.  if v13 != v14 then goto L534914;
  #L534910.  goto L534a12;
  #L534914.  v13:= v12.`n.b.f` @type ^`boolean` @kind boolean;
  #L534918.  if v13 == 0 then goto L534920;
  #L53491c.  goto L534a12;
  #L534920.  v13:= v12.`n.b.b` @type ^`float`;
  #L534924.  v13:= fcmpg(v13, v4);
  #L534928.  if v13 >= 0 then goto L534a12;
  #L53492c.  v13:= `@@n.d.u` @type ^`boolean` @kind boolean;
  #L534930.  v14:= 9I;
  #L534934.  if v13 == 0 then goto L5349aa;
  #L534938.  v13:= v12.`n.b.e` @type ^`n.b$a` @kind object;
  #L53493c.  call temp:= `d`(v13) @signature `Ln/b$a;.d:()I` @kind interface;
  #L534942.  v13:= temp;
  #L534944.  v15:= 0I;
  #L534946.  if v15 >= v13 then goto L534a12;
  #L53494a.  v1:= v12.`n.b.e` @type ^`n.b$a` @kind object;
  #L53494e.  call temp:= `f`(v1, v15) @signature `Ln/b$a;.f:(I)Ln/i;` @kind interface;
  #L534954.  v1:= temp @kind object;
  #L534956.  v5:= v12.`n.b.e` @type ^`n.b$a` @kind object;
  #L53495a.  call temp:= `e`(v5, v1) @signature `Ln/b$a;.e:(Ln/i;)F` @kind interface;
  #L534960.  v5:= temp;
  #L534962.  v16:= fcmpg(v5, v4);
  #L534966.  if v16 > 0 then goto L53496c;
  #L53496a.  goto L5349a0;
  #L53496c.  v7:= 0I;
  #L53496e.  if v7 >= v14 then goto L5349a0;
  #L534972.  v14:= v1.`n.i.n` @type ^`float`[] @kind object;
  #L534976.  v14:= v14[v7];
  #L53497a.  v14:= v14 / v5 @kind float;
  #L53497c.  v18:= fcmpg(v14, v6);
  #L534980.  if v18 >= 0 then goto L534988;
  #L534984.  if v7 == v11 then goto L53498c;
  #L534988.  if v7 <= v11 then goto L534996;
  #L53498c.  v10:= v1.`n.i.i` @type ^`int`;
  #L534990.  v11:= v7;
  #L534992.  v9:= v8;
  #L534994.  v6:= v14;
  #L534996.  v7:= v7 + 1;
  #L53499a.  v14:= 9I;
  #L53499e.  goto L53496e;
  #L5349a0.  v15:= v15 + 1;
  #L5349a4.  v14:= 9I;
  #L5349a8.  goto L534946;
  #L5349aa.  v1:= 1I;
  #L5349ac.  v5:= v0.`n.d.k` @type ^`int`;
  #L5349b0.  if v1 >= v5 then goto L534a12;
  #L5349b4.  v5:= v0.`n.d.n` @type ^`n.c` @kind object;
  #L5349b8.  v5:= v5.`n.c.d` @type ^`n.i`[] @kind object;
  #L5349bc.  v5:= v5[v1] @kind object;
  #L5349c0.  v7:= v12.`n.b.e` @type ^`n.b$a` @kind object;
  #L5349c4.  call temp:= `e`(v7, v5) @signature `Ln/b$a;.e:(Ln/i;)F` @kind interface;
  #L5349ca.  v7:= temp;
  #L5349cc.  v13:= fcmpg(v7, v4);
  #L5349d0.  if v13 > 0 then goto L5349da;
  #L5349d4.  v14:= 9I;
  #L5349d8.  goto L534a0c;
  #L5349da.  v13:= 0I;
  #L5349dc.  v14:= 9I;
  #L5349e0.  if v13 >= v14 then goto L534a0c;
  #L5349e4.  v15:= v5.`n.i.n` @type ^`float`[] @kind object;
  #L5349e8.  v15:= v15[v13];
  #L5349ec.  v15:= v15 / v7 @kind float;
  #L5349ee.  v17:= fcmpg(v15, v6);
  #L5349f2.  if v17 >= 0 then goto L5349fa;
  #L5349f6.  if v13 == v11 then goto L5349fe;
  #L5349fa.  if v13 <= v11 then goto L534a06;
  #L5349fe.  v10:= v1;
  #L534a00.  v9:= v8;
  #L534a02.  v11:= v13;
  #L534a04.  v6:= v15;
  #L534a06.  v13:= v13 + 1;
  #L534a0a.  goto L5349e0;
  #L534a0c.  v1:= v1 + 1;
  #L534a10.  goto L5349ac;
  #L534a12.  v8:= v8 + 1;
  #L534a16.  goto L5348f0;
  #L534a1a.  v1:= -1I;
  #L534a1c.  if v9 == v1 then goto L534a52;
  #L534a20.  v5:= v0.`n.d.g` @type ^`n.b`[] @kind object;
  #L534a24.  v5:= v5[v9] @kind object;
  #L534a28.  v6:= v5.`n.b.a` @type ^`n.i` @kind object;
  #L534a2c.  v6.`n.i.j` @type ^`int` := v1;
  #L534a30.  v1:= v0.`n.d.n` @type ^`n.c` @kind object;
  #L534a34.  v1:= v1.`n.c.d` @type ^`n.i`[] @kind object;
  #L534a38.  v1:= v1[v10] @kind object;
  #L534a3c.  call `x`(v5, v1) @signature `Ln/b;.x:(Ln/i;)V` @kind virtual;
  #L534a42.  v1:= v5.`n.b.a` @type ^`n.i` @kind object;
  #L534a46.  v1.`n.i.j` @type ^`int` := v9;
  #L534a4a.  call `j`(v1, v0, v5) @signature `Ln/i;.j:(Ln/d;Ln/b;)V` @kind virtual;
  #L534a50.  goto L534a54;
  #L534a52.  v2:= 1I;
  #L534a54.  v1:= v0.`n.d.k` @type ^`int`;
  #L534a58.  v1:= v1 / 2;
  #L534a5c.  if v3 <= v1 then goto L5348da;
  #L534a60.  v2:= 1I;
  #L534a62.  goto L5348da;
  #L534a66.  v1:= v3;
  #L534a68.  goto L534a6c;
  #L534a6a.  v1:= 0I;
  #L534a6c.  return v1;
}
procedure `n.e` `x`() @signature `Ln/d;.x:()Ln/e;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L534d24.  v0:= `@@n.d.x` @type ^`n.e` @kind object;
  #L534d28.  return v0 @kind object;
}
procedure `void` `z`(`n.d` v3 @kind this) @signature `Ln/d;.z:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L5356e4.  v0:= v3.`n.d.e` @type ^`int`;
  #L5356e8.  v0:= v0 * 2;
  #L5356ec.  v3.`n.d.e` @type ^`int` := v0;
  #L5356f0.  v1:= v3.`n.d.g` @type ^`n.b`[] @kind object;
  #L5356f4.  call temp:= `copyOf`(v1, v0) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L5356fa.  v0:= temp @kind object;
  #L5356fc.  v0:= (`n.b`[]) v0 @kind object;
  #L535700.  v3.`n.d.g` @type ^`n.b`[] := v0 @kind object;
  #L535704.  v0:= v3.`n.d.n` @type ^`n.c` @kind object;
  #L535708.  v1:= v0.`n.c.d` @type ^`n.i`[] @kind object;
  #L53570c.  v2:= v3.`n.d.e` @type ^`int`;
  #L535710.  call temp:= `copyOf`(v1, v2) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L535716.  v1:= temp @kind object;
  #L535718.  v1:= (`n.i`[]) v1 @kind object;
  #L53571c.  v0.`n.c.d` @type ^`n.i`[] := v1 @kind object;
  #L535720.  v0:= v3.`n.d.e` @type ^`int`;
  #L535724.  v1:= new `boolean`[v0];
  #L535728.  v3.`n.d.j` @type ^`boolean`[] := v1 @kind object;
  #L53572c.  v3.`n.d.f` @type ^`int` := v0;
  #L535730.  v3.`n.d.m` @type ^`int` := v0;
  #L535734.  return @kind void;
}
procedure `void` `A`(`n.d` v3 @kind this) @signature `Ln/d;.A:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L535748.  v0:= v3.`n.d.d` @type ^`n.d$a` @kind object;
  #L53574c.  call temp:= `isEmpty`(v0) @signature `Ln/d$a;.isEmpty:()Z` @kind interface;
  #L535752.  v0:= temp;
  #L535754.  if v0 == 0 then goto L535760;
  #L535758.  call `n`(v3) @signature `Ln/d;.n:()V` @kind direct;
  #L53575e.  return @kind void;
  #L535760.  v0:= v3.`n.d.h` @type ^`boolean` @kind boolean;
  #L535764.  if v0 != 0 then goto L53577e;
  #L535768.  v0:= v3.`n.d.i` @type ^`boolean` @kind boolean;
  #L53576c.  if v0 == 0 then goto L535772;
  #L535770.  goto L53577e;
  #L535772.  v0:= v3.`n.d.d` @type ^`n.d$a` @kind object;
  #L535776.  call `B`(v3, v0) @signature `Ln/d;.B:(Ln/d$a;)V` @kind virtual;
  #L53577c.  goto L5357ba;
  #L53577e.  v0:= 0I;
  #L535780.  v1:= 0I;
  #L535782.  v2:= v3.`n.d.l` @type ^`int`;
  #L535786.  if v1 >= v2 then goto L5357a2;
  #L53578a.  v2:= v3.`n.d.g` @type ^`n.b`[] @kind object;
  #L53578e.  v2:= v2[v1] @kind object;
  #L535792.  v2:= v2.`n.b.f` @type ^`boolean` @kind boolean;
  #L535796.  if v2 != 0 then goto L53579c;
  #L53579a.  goto L5357a4;
  #L53579c.  v1:= v1 + 1;
  #L5357a0.  goto L535782;
  #L5357a2.  v0:= 1I;
  #L5357a4.  if v0 != 0 then goto L5357b4;
  #L5357a8.  v0:= v3.`n.d.d` @type ^`n.d$a` @kind object;
  #L5357ac.  call `B`(v3, v0) @signature `Ln/d;.B:(Ln/d$a;)V` @kind virtual;
  #L5357b2.  goto L5357ba;
  #L5357b4.  call `n`(v3) @signature `Ln/d;.n:()V` @kind direct;
  #L5357ba.  return @kind void;
}
procedure `void` `B`(`n.d` v1 @kind this, `n.d$a` v2 @kind object) @signature `Ln/d;.B:(Ln/d$a;)V` @AccessFlag  {
    temp;
    v0;

  #L5357cc.  call temp:= `u`(v1, v2) @signature `Ln/d;.u:(Ln/d$a;)I` @kind direct;
  #L5357d2.  v0:= 0I;
  #L5357d4.  call temp:= `C`(v1, v2, v0) @signature `Ln/d;.C:(Ln/d$a;Z)I` @kind direct;
  #L5357da.  call `n`(v1) @signature `Ln/d;.n:()V` @kind direct;
  #L5357e0.  return @kind void;
}
procedure `void` `E`(`n.d` v5 @kind this) @signature `Ln/d;.E:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L535874.  v0:= 0I;
  #L535876.  v1:= 0I;
  #L535878.  v2:= v5.`n.d.n` @type ^`n.c` @kind object;
  #L53587c.  v3:= v2.`n.c.d` @type ^`n.i`[] @kind object;
  #L535880.  v4:= length @variable v3;
  #L535882.  if v1 >= v4 then goto L53589a;
  #L535886.  v2:= v3[v1] @kind object;
  #L53588a.  if v2 == 0 then goto L535894;
  #L53588e.  call `f`(v2) @signature `Ln/i;.f:()V` @kind virtual;
  #L535894.  v1:= v1 + 1;
  #L535898.  goto L535878;
  #L53589a.  v1:= v2.`n.c.c` @type ^`n.f` @kind object;
  #L53589e.  v2:= v5.`n.d.o` @type ^`n.i`[] @kind object;
  #L5358a2.  v3:= v5.`n.d.p` @type ^`int`;
  #L5358a6.  call `c`(v1, v2, v3) @signature `Ln/f;.c:([Ljava/lang/Object;I)V` @kind interface;
  #L5358ac.  v5.`n.d.p` @type ^`int` := v0;
  #L5358b0.  v1:= v5.`n.d.n` @type ^`n.c` @kind object;
  #L5358b4.  v1:= v1.`n.c.d` @type ^`n.i`[] @kind object;
  #L5358b8.  v2:= 0I;
  #L5358ba.  call `fill`(v1, v2) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L5358c0.  v1:= v5.`n.d.c` @type ^`java.util.HashMap` @kind object;
  #L5358c4.  if v1 == 0 then goto L5358ce;
  #L5358c8.  call `clear`(v1) @signature `Ljava/util/HashMap;.clear:()V` @kind virtual;
  #L5358ce.  v5.`n.d.b` @type ^`int` := v0;
  #L5358d2.  v1:= v5.`n.d.d` @type ^`n.d$a` @kind object;
  #L5358d6.  call `clear`(v1) @signature `Ln/d$a;.clear:()V` @kind interface;
  #L5358dc.  v1:= 1I;
  #L5358de.  v5.`n.d.k` @type ^`int` := v1;
  #L5358e2.  v1:= 0I;
  #L5358e4.  v2:= v5.`n.d.l` @type ^`int`;
  #L5358e8.  if v1 >= v2 then goto L535906;
  #L5358ec.  v2:= v5.`n.d.g` @type ^`n.b`[] @kind object;
  #L5358f0.  v3:= v2[v1] @kind object;
  #L5358f4.  if v3 == 0 then goto L535900;
  #L5358f8.  v2:= v2[v1] @kind object;
  #L5358fc.  v2.`n.b.c` @type ^`boolean` := v0 @kind boolean;
  #L535900.  v1:= v1 + 1;
  #L535904.  goto L5358e4;
  #L535906.  call `D`(v5) @signature `Ln/d;.D:()V` @kind direct;
  #L53590c.  v5.`n.d.l` @type ^`int` := v0;
  #L535910.  v0:= `@@n.d.v` @type ^`boolean` @kind boolean;
  #L535914.  if v0 == 0 then goto L53592c;
  #L535918.  v0:= new `n.d$b`;
  #L53591c.  v1:= v5.`n.d.n` @type ^`n.c` @kind object;
  #L535920.  call `<init>`(v0, v5, v1) @signature `Ln/d$b;.<init>:(Ln/d;Ln/c;)V` @kind direct;
  #L535926.  v5.`n.d.q` @type ^`n.d$a` := v0 @kind object;
  #L53592a.  goto L53593e;
  #L53592c.  v0:= new `n.b`;
  #L535930.  v1:= v5.`n.d.n` @type ^`n.c` @kind object;
  #L535934.  call `<init>`(v0, v1) @signature `Ln/b;.<init>:(Ln/c;)V` @kind direct;
  #L53593a.  v5.`n.d.q` @type ^`n.d$a` := v0 @kind object;
  #L53593e.  return @kind void;
}
procedure `void` `b`(`n.d` v16 @kind this, `q.e` v17 @kind object, `q.e` v18 @kind object, `float` v19 , `int` v20 ) @signature `Ln/d;.b:(Lq/e;Lq/e;FI)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L535070.  v0:= v16 @kind object;
  #L535074.  v1:= v17 @kind object;
  #L535078.  v2:= v18 @kind object;
  #L53507c.  v3:= `@@q.d$b.LEFT` @type ^`q.d$b` @kind object;
  #L535080.  call temp:= `q`(v1, v3) @signature `Lq/e;.q:(Lq/d$b;)Lq/d;` @kind virtual;
  #L535086.  v4:= temp @kind object;
  #L535088.  call temp:= `q`(v0, v4) @signature `Ln/d;.q:(Ljava/lang/Object;)Ln/i;` @kind virtual;
  #L53508e.  v6:= temp @kind object;
  #L535090.  v4:= `@@q.d$b.TOP` @type ^`q.d$b` @kind object;
  #L535094.  call temp:= `q`(v1, v4) @signature `Lq/e;.q:(Lq/d$b;)Lq/d;` @kind virtual;
  #L53509a.  v5:= temp @kind object;
  #L53509c.  call temp:= `q`(v0, v5) @signature `Ln/d;.q:(Ljava/lang/Object;)Ln/i;` @kind virtual;
  #L5350a2.  v8:= temp @kind object;
  #L5350a4.  v5:= `@@q.d$b.RIGHT` @type ^`q.d$b` @kind object;
  #L5350a8.  call temp:= `q`(v1, v5) @signature `Lq/e;.q:(Lq/d$b;)Lq/d;` @kind virtual;
  #L5350ae.  v7:= temp @kind object;
  #L5350b0.  call temp:= `q`(v0, v7) @signature `Ln/d;.q:(Ljava/lang/Object;)Ln/i;` @kind virtual;
  #L5350b6.  v13:= temp @kind object;
  #L5350b8.  v7:= `@@q.d$b.BOTTOM` @type ^`q.d$b` @kind object;
  #L5350bc.  call temp:= `q`(v1, v7) @signature `Lq/e;.q:(Lq/d$b;)Lq/d;` @kind virtual;
  #L5350c2.  v1:= temp @kind object;
  #L5350c4.  call temp:= `q`(v0, v1) @signature `Ln/d;.q:(Ljava/lang/Object;)Ln/i;` @kind virtual;
  #L5350ca.  v9:= temp @kind object;
  #L5350cc.  call temp:= `q`(v2, v3) @signature `Lq/e;.q:(Lq/d$b;)Lq/d;` @kind virtual;
  #L5350d2.  v1:= temp @kind object;
  #L5350d4.  call temp:= `q`(v0, v1) @signature `Ln/d;.q:(Ljava/lang/Object;)Ln/i;` @kind virtual;
  #L5350da.  v1:= temp @kind object;
  #L5350dc.  call temp:= `q`(v2, v4) @signature `Lq/e;.q:(Lq/d$b;)Lq/d;` @kind virtual;
  #L5350e2.  v3:= temp @kind object;
  #L5350e4.  call temp:= `q`(v0, v3) @signature `Ln/d;.q:(Ljava/lang/Object;)Ln/i;` @kind virtual;
  #L5350ea.  v10:= temp @kind object;
  #L5350ec.  call temp:= `q`(v2, v5) @signature `Lq/e;.q:(Lq/d$b;)Lq/d;` @kind virtual;
  #L5350f2.  v3:= temp @kind object;
  #L5350f4.  call temp:= `q`(v0, v3) @signature `Ln/d;.q:(Ljava/lang/Object;)Ln/i;` @kind virtual;
  #L5350fa.  v3:= temp @kind object;
  #L5350fc.  call temp:= `q`(v2, v7) @signature `Lq/e;.q:(Lq/d$b;)Lq/d;` @kind virtual;
  #L535102.  v2:= temp @kind object;
  #L535104.  call temp:= `q`(v0, v2) @signature `Ln/d;.q:(Ljava/lang/Object;)Ln/i;` @kind virtual;
  #L53510a.  v11:= temp @kind object;
  #L53510c.  call temp:= `r`(v16) @signature `Ln/d;.r:()Ln/b;` @kind virtual;
  #L535112.  v2:= temp @kind object;
  #L535114.  v4:= v19;
  #L535118.  v4:= (`double`) v4 @kind f2d;
  #L53511a.  call temp:= `sin`(v4) @signature `Ljava/lang/Math;.sin:(D)D` @kind static;
  #L535120.  v14:= temp @kind wide;
  #L535122.  v7:= v20;
  #L535126.  v17:= v3 @kind object;
  #L53512a.  v18:= v4 @kind wide;
  #L53512e.  v3:= (`double`) v7 @kind i2d;
  #L535130.  v14:= v14 * v3 @kind double;
  #L535134.  v12:= (`float`) v14 @kind d2f;
  #L535136.  v7:= v2 @kind object;
  #L535138.  call temp:= `q`(v7, v8, v9, v10, v11, v12) @signature `Ln/b;.q:(Ln/i;Ln/i;Ln/i;Ln/i;F)Ln/b;` @kind virtual;
  #L53513e.  call `d`(v0, v2) @signature `Ln/d;.d:(Ln/b;)V` @kind virtual;
  #L535144.  call temp:= `r`(v16) @signature `Ln/d;.r:()Ln/b;` @kind virtual;
  #L53514a.  v2:= temp @kind object;
  #L53514c.  call temp:= `cos`(v18) @signature `Ljava/lang/Math;.cos:(D)D` @kind static;
  #L535152.  v7:= temp @kind wide;
  #L535154.  v7:= v7 * v3 @kind double;
  #L535158.  v10:= (`float`) v7 @kind d2f;
  #L53515a.  v5:= v2 @kind object;
  #L53515c.  v7:= v13 @kind object;
  #L53515e.  v8:= v1 @kind object;
  #L535160.  v9:= v17 @kind object;
  #L535164.  call temp:= `q`(v5, v6, v7, v8, v9, v10) @signature `Ln/b;.q:(Ln/i;Ln/i;Ln/i;Ln/i;F)Ln/b;` @kind virtual;
  #L53516a.  call `d`(v0, v2) @signature `Ln/d;.d:(Ln/b;)V` @kind virtual;
  #L535170.  return @kind void;
}
procedure `void` `c`(`n.d` v11 @kind this, `n.i` v12 @kind object, `n.i` v13 @kind object, `int` v14 , `float` v15 , `n.i` v16 @kind object, `n.i` v17 @kind object, `int` v18 , `int` v19 ) @signature `Ln/d;.c:(Ln/i;Ln/i;IFLn/i;Ln/i;II)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L535184.  v0:= v11 @kind object;
  #L535186.  v1:= v19;
  #L53518a.  call temp:= `r`(v11) @signature `Ln/d;.r:()Ln/b;` @kind virtual;
  #L535190.  v10:= temp @kind object;
  #L535192.  v2:= v10 @kind object;
  #L535194.  v3:= v12 @kind object;
  #L535196.  v4:= v13 @kind object;
  #L535198.  v5:= v14;
  #L53519a.  v6:= v15;
  #L53519c.  v7:= v16 @kind object;
  #L5351a0.  v8:= v17 @kind object;
  #L5351a4.  v9:= v18;
  #L5351a8.  call temp:= `h`(v2, v3, v4, v5, v6, v7, v8, v9) @signature `Ln/b;.h:(Ln/i;Ln/i;IFLn/i;Ln/i;I)Ln/b;` @kind virtual;
  #L5351ae.  v2:= 8I;
  #L5351b2.  if v1 == v2 then goto L5351bc;
  #L5351b6.  call temp:= `d`(v10, v11, v1) @signature `Ln/b;.d:(Ln/d;I)Ln/b;` @kind virtual;
  #L5351bc.  call `d`(v11, v10) @signature `Ln/d;.d:(Ln/b;)V` @kind virtual;
  #L5351c2.  return @kind void;
}
procedure `void` `d`(`n.d` v5 @kind this, `n.b` v6 @kind object) @signature `Ln/d;.d:(Ln/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L5351d4.  if v6 != 0 then goto L5351da;
  #L5351d8.  return @kind void;
  #L5351da.  v0:= v5.`n.d.l` @type ^`int`;
  #L5351de.  v1:= 1I;
  #L5351e0.  v0:= v0 + v1 @kind int;
  #L5351e2.  v2:= v5.`n.d.m` @type ^`int`;
  #L5351e6.  if v0 >= v2 then goto L5351f8;
  #L5351ea.  v0:= v5.`n.d.k` @type ^`int`;
  #L5351ee.  v0:= v0 + v1 @kind int;
  #L5351f0.  v2:= v5.`n.d.f` @type ^`int`;
  #L5351f4.  if v0 < v2 then goto L5351fe;
  #L5351f8.  call `z`(v5) @signature `Ln/d;.z:()V` @kind direct;
  #L5351fe.  v0:= 0I;
  #L535200.  v2:= v6.`n.b.f` @type ^`boolean` @kind boolean;
  #L535204.  if v2 != 0 then goto L5352dc;
  #L535208.  call `D`(v6, v5) @signature `Ln/b;.D:(Ln/d;)V` @kind virtual;
  #L53520e.  call temp:= `isEmpty`(v6) @signature `Ln/b;.isEmpty:()Z` @kind virtual;
  #L535214.  v2:= temp;
  #L535216.  if v2 == 0 then goto L53521c;
  #L53521a.  return @kind void;
  #L53521c.  call `r`(v6) @signature `Ln/b;.r:()V` @kind virtual;
  #L535222.  call temp:= `f`(v6, v5) @signature `Ln/b;.f:(Ln/d;)Z` @kind virtual;
  #L535228.  v2:= temp;
  #L53522a.  if v2 == 0 then goto L5352ca;
  #L53522e.  call temp:= `p`(v5) @signature `Ln/d;.p:()Ln/i;` @kind virtual;
  #L535234.  v2:= temp @kind object;
  #L535236.  v6.`n.b.a` @type ^`n.i` := v2 @kind object;
  #L53523a.  v3:= v5.`n.d.l` @type ^`int`;
  #L53523e.  call `l`(v5, v6) @signature `Ln/d;.l:(Ln/b;)V` @kind direct;
  #L535244.  v4:= v5.`n.d.l` @type ^`int`;
  #L535248.  v3:= v3 + v1 @kind int;
  #L53524a.  if v4 != v3 then goto L5352ca;
  #L53524e.  v0:= v5.`n.d.q` @type ^`n.d$a` @kind object;
  #L535252.  call `c`(v0, v6) @signature `Ln/d$a;.c:(Ln/d$a;)V` @kind interface;
  #L535258.  v0:= v5.`n.d.q` @type ^`n.d$a` @kind object;
  #L53525c.  call temp:= `C`(v5, v0, v1) @signature `Ln/d;.C:(Ln/d$a;Z)I` @kind direct;
  #L535262.  v0:= v2.`n.i.j` @type ^`int`;
  #L535266.  v3:= -1I;
  #L535268.  if v0 != v3 then goto L5352cc;
  #L53526c.  v0:= v6.`n.b.a` @type ^`n.i` @kind object;
  #L535270.  if v0 != v2 then goto L535286;
  #L535274.  call temp:= `v`(v6, v2) @signature `Ln/b;.v:(Ln/i;)Ln/i;` @kind virtual;
  #L53527a.  v0:= temp @kind object;
  #L53527c.  if v0 == 0 then goto L535286;
  #L535280.  call `x`(v6, v0) @signature `Ln/b;.x:(Ln/i;)V` @kind virtual;
  #L535286.  v0:= v6.`n.b.f` @type ^`boolean` @kind boolean;
  #L53528a.  if v0 != 0 then goto L535298;
  #L53528e.  v0:= v6.`n.b.a` @type ^`n.i` @kind object;
  #L535292.  call `j`(v0, v5, v6) @signature `Ln/i;.j:(Ln/d;Ln/b;)V` @kind virtual;
  #L535298.  v0:= `@@n.d.v` @type ^`boolean` @kind boolean;
  #L53529c.  if v0 == 0 then goto L5352b0;
  #L5352a0.  v0:= v5.`n.d.n` @type ^`n.c` @kind object;
  #L5352a4.  v0:= v0.`n.c.a` @type ^`n.f` @kind object;
  #L5352a8.  call temp:= `a`(v0, v6) @signature `Ln/f;.a:(Ljava/lang/Object;)Z` @kind interface;
  #L5352ae.  goto L5352be;
  #L5352b0.  v0:= v5.`n.d.n` @type ^`n.c` @kind object;
  #L5352b4.  v0:= v0.`n.c.b` @type ^`n.f` @kind object;
  #L5352b8.  call temp:= `a`(v0, v6) @signature `Ln/f;.a:(Ljava/lang/Object;)Z` @kind interface;
  #L5352be.  v0:= v5.`n.d.l` @type ^`int`;
  #L5352c2.  v0:= v0 - v1 @kind int;
  #L5352c4.  v5.`n.d.l` @type ^`int` := v0;
  #L5352c8.  goto L5352cc;
  #L5352ca.  v1:= 0I;
  #L5352cc.  call temp:= `s`(v6) @signature `Ln/b;.s:()Z` @kind virtual;
  #L5352d2.  v0:= temp;
  #L5352d4.  if v0 != 0 then goto L5352da;
  #L5352d8.  return @kind void;
  #L5352da.  v0:= v1;
  #L5352dc.  if v0 != 0 then goto L5352e6;
  #L5352e0.  call `l`(v5, v6) @signature `Ln/d;.l:(Ln/b;)V` @kind direct;
  #L5352e6.  return @kind void;
}
procedure `n.b` `e`(`n.d` v3 @kind this, `n.i` v4 @kind object, `n.i` v5 @kind object, `int` v6 , `int` v7 ) @signature `Ln/d;.e:(Ln/i;Ln/i;II)Ln/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L534bec.  v0:= `@@n.d.s` @type ^`boolean` @kind boolean;
  #L534bf0.  v1:= 8I;
  #L534bf4.  if v0 == 0 then goto L534c20;
  #L534bf8.  if v7 != v1 then goto L534c20;
  #L534bfc.  v0:= v5.`n.i.m` @type ^`boolean` @kind boolean;
  #L534c00.  if v0 == 0 then goto L534c20;
  #L534c04.  v0:= v4.`n.i.j` @type ^`int`;
  #L534c08.  v2:= -1I;
  #L534c0a.  if v0 != v2 then goto L534c20;
  #L534c0e.  v5:= v5.`n.i.l` @type ^`float`;
  #L534c12.  v6:= (`float`) v6 @kind i2f;
  #L534c14.  v5:= v5 + v6 @kind float;
  #L534c16.  call `g`(v4, v3, v5) @signature `Ln/i;.g:(Ln/d;F)V` @kind virtual;
  #L534c1c.  v4:= 0I;
  #L534c1e.  return v4 @kind object;
  #L534c20.  call temp:= `r`(v3) @signature `Ln/d;.r:()Ln/b;` @kind virtual;
  #L534c26.  v0:= temp @kind object;
  #L534c28.  call temp:= `n`(v0, v4, v5, v6) @signature `Ln/b;.n:(Ln/i;Ln/i;I)Ln/b;` @kind virtual;
  #L534c2e.  if v7 == v1 then goto L534c38;
  #L534c32.  call temp:= `d`(v0, v3, v7) @signature `Ln/b;.d:(Ln/d;I)Ln/b;` @kind virtual;
  #L534c38.  call `d`(v3, v0) @signature `Ln/d;.d:(Ln/b;)V` @kind virtual;
  #L534c3e.  return v0 @kind object;
}
procedure `void` `f`(`n.d` v5 @kind this, `n.i` v6 @kind object, `int` v7 ) @signature `Ln/d;.f:(Ln/i;I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L5352f8.  v0:= `@@n.d.s` @type ^`boolean` @kind boolean;
  #L5352fc.  v1:= -1I;
  #L5352fe.  v2:= 1I;
  #L535300.  if v0 == 0 then goto L535358;
  #L535304.  v0:= v6.`n.i.j` @type ^`int`;
  #L535308.  if v0 != v1 then goto L535358;
  #L53530c.  v7:= (`float`) v7 @kind i2f;
  #L53530e.  call `g`(v6, v5, v7) @signature `Ln/i;.g:(Ln/d;F)V` @kind virtual;
  #L535314.  v0:= 0I;
  #L535316.  v1:= v5.`n.d.b` @type ^`int`;
  #L53531a.  v1:= v1 + v2 @kind int;
  #L53531c.  if v0 >= v1 then goto L535356;
  #L535320.  v1:= v5.`n.d.n` @type ^`n.c` @kind object;
  #L535324.  v1:= v1.`n.c.d` @type ^`n.i`[] @kind object;
  #L535328.  v1:= v1[v0] @kind object;
  #L53532c.  if v1 == 0 then goto L535350;
  #L535330.  v3:= v1.`n.i.t` @type ^`boolean` @kind boolean;
  #L535334.  if v3 == 0 then goto L535350;
  #L535338.  v3:= v1.`n.i.u` @type ^`int`;
  #L53533c.  v4:= v6.`n.i.i` @type ^`int`;
  #L535340.  if v3 != v4 then goto L535350;
  #L535344.  v3:= v1.`n.i.v` @type ^`float`;
  #L535348.  v3:= v3 + v7 @kind float;
  #L53534a.  call `g`(v1, v5, v3) @signature `Ln/i;.g:(Ln/d;F)V` @kind virtual;
  #L535350.  v0:= v0 + 1;
  #L535354.  goto L535316;
  #L535356.  return @kind void;
  #L535358.  v0:= v6.`n.i.j` @type ^`int`;
  #L53535c.  if v0 == v1 then goto L5353aa;
  #L535360.  v1:= v5.`n.d.g` @type ^`n.b`[] @kind object;
  #L535364.  v0:= v1[v0] @kind object;
  #L535368.  v1:= v0.`n.b.f` @type ^`boolean` @kind boolean;
  #L53536c.  if v1 == 0 then goto L535378;
  #L535370.  v6:= (`float`) v7 @kind i2f;
  #L535372.  v0.`n.b.b` @type ^`float` := v6;
  #L535376.  goto L5353be;
  #L535378.  v1:= v0.`n.b.e` @type ^`n.b$a` @kind object;
  #L53537c.  call temp:= `d`(v1) @signature `Ln/b$a;.d:()I` @kind interface;
  #L535382.  v1:= temp;
  #L535384.  if v1 != 0 then goto L535394;
  #L535388.  v0.`n.b.f` @type ^`boolean` := v2 @kind boolean;
  #L53538c.  v6:= (`float`) v7 @kind i2f;
  #L53538e.  v0.`n.b.b` @type ^`float` := v6;
  #L535392.  goto L5353be;
  #L535394.  call temp:= `r`(v5) @signature `Ln/d;.r:()Ln/b;` @kind virtual;
  #L53539a.  v0:= temp @kind object;
  #L53539c.  call temp:= `m`(v0, v6, v7) @signature `Ln/b;.m:(Ln/i;I)Ln/b;` @kind virtual;
  #L5353a2.  call `d`(v5, v0) @signature `Ln/d;.d:(Ln/b;)V` @kind virtual;
  #L5353a8.  goto L5353be;
  #L5353aa.  call temp:= `r`(v5) @signature `Ln/d;.r:()Ln/b;` @kind virtual;
  #L5353b0.  v0:= temp @kind object;
  #L5353b2.  call temp:= `i`(v0, v6, v7) @signature `Ln/b;.i:(Ln/i;I)Ln/b;` @kind virtual;
  #L5353b8.  call `d`(v5, v0) @signature `Ln/d;.d:(Ln/b;)V` @kind virtual;
  #L5353be.  return @kind void;
}
procedure `void` `g`(`n.d` v2 @kind this, `n.i` v3 @kind object, `n.i` v4 @kind object, `int` v5 , `boolean` v6 ) @signature `Ln/d;.g:(Ln/i;Ln/i;IZ)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5353d0.  call temp:= `r`(v2) @signature `Ln/d;.r:()Ln/b;` @kind virtual;
  #L5353d6.  v6:= temp @kind object;
  #L5353d8.  call temp:= `t`(v2) @signature `Ln/d;.t:()Ln/i;` @kind virtual;
  #L5353de.  v0:= temp @kind object;
  #L5353e0.  v1:= 0I;
  #L5353e2.  v0.`n.i.k` @type ^`int` := v1;
  #L5353e6.  call temp:= `o`(v6, v3, v4, v0, v5) @signature `Ln/b;.o:(Ln/i;Ln/i;Ln/i;I)Ln/b;` @kind virtual;
  #L5353ec.  call `d`(v2, v6) @signature `Ln/d;.d:(Ln/b;)V` @kind virtual;
  #L5353f2.  return @kind void;
}
procedure `void` `h`(`n.d` v3 @kind this, `n.i` v4 @kind object, `n.i` v5 @kind object, `int` v6 , `int` v7 ) @signature `Ln/d;.h:(Ln/i;Ln/i;II)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L535404.  call temp:= `r`(v3) @signature `Ln/d;.r:()Ln/b;` @kind virtual;
  #L53540a.  v0:= temp @kind object;
  #L53540c.  call temp:= `t`(v3) @signature `Ln/d;.t:()Ln/i;` @kind virtual;
  #L535412.  v1:= temp @kind object;
  #L535414.  v2:= 0I;
  #L535416.  v1.`n.i.k` @type ^`int` := v2;
  #L53541a.  call temp:= `o`(v0, v4, v5, v1, v6) @signature `Ln/b;.o:(Ln/i;Ln/i;Ln/i;I)Ln/b;` @kind virtual;
  #L535420.  v4:= 8I;
  #L535424.  if v7 == v4 then goto L535444;
  #L535428.  v4:= v0.`n.b.e` @type ^`n.b$a` @kind object;
  #L53542c.  call temp:= `e`(v4, v1) @signature `Ln/b$a;.e:(Ln/i;)F` @kind interface;
  #L535432.  v4:= temp;
  #L535434.  v5:= -1.0F;
  #L535438.  v4:= v4 * v5 @kind float;
  #L53543c.  v4:= (`int`) v4 @kind f2i;
  #L53543e.  call `m`(v3, v0, v4, v7) @signature `Ln/d;.m:(Ln/b;II)V` @kind virtual;
  #L535444.  call `d`(v3, v0) @signature `Ln/d;.d:(Ln/b;)V` @kind virtual;
  #L53544a.  return @kind void;
}
procedure `void` `i`(`n.d` v2 @kind this, `n.i` v3 @kind object, `n.i` v4 @kind object, `int` v5 , `boolean` v6 ) @signature `Ln/d;.i:(Ln/i;Ln/i;IZ)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L53545c.  call temp:= `r`(v2) @signature `Ln/d;.r:()Ln/b;` @kind virtual;
  #L535462.  v6:= temp @kind object;
  #L535464.  call temp:= `t`(v2) @signature `Ln/d;.t:()Ln/i;` @kind virtual;
  #L53546a.  v0:= temp @kind object;
  #L53546c.  v1:= 0I;
  #L53546e.  v0.`n.i.k` @type ^`int` := v1;
  #L535472.  call temp:= `p`(v6, v3, v4, v0, v5) @signature `Ln/b;.p:(Ln/i;Ln/i;Ln/i;I)Ln/b;` @kind virtual;
  #L535478.  call `d`(v2, v6) @signature `Ln/d;.d:(Ln/b;)V` @kind virtual;
  #L53547e.  return @kind void;
}
procedure `void` `j`(`n.d` v3 @kind this, `n.i` v4 @kind object, `n.i` v5 @kind object, `int` v6 , `int` v7 ) @signature `Ln/d;.j:(Ln/i;Ln/i;II)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L535490.  call temp:= `r`(v3) @signature `Ln/d;.r:()Ln/b;` @kind virtual;
  #L535496.  v0:= temp @kind object;
  #L535498.  call temp:= `t`(v3) @signature `Ln/d;.t:()Ln/i;` @kind virtual;
  #L53549e.  v1:= temp @kind object;
  #L5354a0.  v2:= 0I;
  #L5354a2.  v1.`n.i.k` @type ^`int` := v2;
  #L5354a6.  call temp:= `p`(v0, v4, v5, v1, v6) @signature `Ln/b;.p:(Ln/i;Ln/i;Ln/i;I)Ln/b;` @kind virtual;
  #L5354ac.  v4:= 8I;
  #L5354b0.  if v7 == v4 then goto L5354d0;
  #L5354b4.  v4:= v0.`n.b.e` @type ^`n.b$a` @kind object;
  #L5354b8.  call temp:= `e`(v4, v1) @signature `Ln/b$a;.e:(Ln/i;)F` @kind interface;
  #L5354be.  v4:= temp;
  #L5354c0.  v5:= -1.0F;
  #L5354c4.  v4:= v4 * v5 @kind float;
  #L5354c8.  v4:= (`int`) v4 @kind f2i;
  #L5354ca.  call `m`(v3, v0, v4, v7) @signature `Ln/d;.m:(Ln/b;II)V` @kind virtual;
  #L5354d0.  call `d`(v3, v0) @signature `Ln/d;.d:(Ln/b;)V` @kind virtual;
  #L5354d6.  return @kind void;
}
procedure `void` `k`(`n.d` v7 @kind this, `n.i` v8 @kind object, `n.i` v9 @kind object, `n.i` v10 @kind object, `n.i` v11 @kind object, `float` v12 , `int` v13 ) @signature `Ln/d;.k:(Ln/i;Ln/i;Ln/i;Ln/i;FI)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L5354e8.  call temp:= `r`(v7) @signature `Ln/d;.r:()Ln/b;` @kind virtual;
  #L5354ee.  v6:= temp @kind object;
  #L5354f0.  v0:= v6 @kind object;
  #L5354f2.  v1:= v8 @kind object;
  #L5354f4.  v2:= v9 @kind object;
  #L5354f6.  v3:= v10 @kind object;
  #L5354f8.  v4:= v11 @kind object;
  #L5354fa.  v5:= v12;
  #L5354fc.  call temp:= `k`(v0, v1, v2, v3, v4, v5) @signature `Ln/b;.k:(Ln/i;Ln/i;Ln/i;Ln/i;F)Ln/b;` @kind virtual;
  #L535502.  v8:= 8I;
  #L535506.  if v13 == v8 then goto L535510;
  #L53550a.  call temp:= `d`(v6, v7, v13) @signature `Ln/b;.d:(Ln/d;I)Ln/b;` @kind virtual;
  #L535510.  call `d`(v7, v6) @signature `Ln/d;.d:(Ln/b;)V` @kind virtual;
  #L535516.  return @kind void;
}
procedure `void` `m`(`n.d` v1 @kind this, `n.b` v2 @kind object, `int` v3 , `int` v4 ) @signature `Ln/d;.m:(Ln/b;II)V` @AccessFlag  {
    temp;
    v0;

  #L535674.  v0:= 0I;
  #L535676.  call temp:= `o`(v1, v4, v0) @signature `Ln/d;.o:(ILjava/lang/String;)Ln/i;` @kind virtual;
  #L53567c.  v4:= temp @kind object;
  #L53567e.  call temp:= `e`(v2, v4, v3) @signature `Ln/b;.e:(Ln/i;I)Ln/b;` @kind virtual;
  #L535684.  return @kind void;
}
procedure `n.i` `o`(`n.d` v2 @kind this, `int` v3 , `java.lang.String` v4 @kind object) @signature `Ln/d;.o:(ILjava/lang/String;)Ln/i;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L534dc0.  v0:= v2.`n.d.k` @type ^`int`;
  #L534dc4.  v0:= v0 + 1;
  #L534dc8.  v1:= v2.`n.d.f` @type ^`int`;
  #L534dcc.  if v0 < v1 then goto L534dd6;
  #L534dd0.  call `z`(v2) @signature `Ln/d;.z:()V` @kind direct;
  #L534dd6.  v0:= `@@n.i$a.ERROR` @type ^`n.i$a` @kind object;
  #L534dda.  call temp:= `a`(v2, v0, v4) @signature `Ln/d;.a:(Ln/i$a;Ljava/lang/String;)Ln/i;` @kind direct;
  #L534de0.  v4:= temp @kind object;
  #L534de2.  v0:= v2.`n.d.b` @type ^`int`;
  #L534de6.  v0:= v0 + 1;
  #L534dea.  v2.`n.d.b` @type ^`int` := v0;
  #L534dee.  v1:= v2.`n.d.k` @type ^`int`;
  #L534df2.  v1:= v1 + 1;
  #L534df6.  v2.`n.d.k` @type ^`int` := v1;
  #L534dfa.  v4.`n.i.i` @type ^`int` := v0;
  #L534dfe.  v4.`n.i.k` @type ^`int` := v3;
  #L534e02.  v3:= v2.`n.d.n` @type ^`n.c` @kind object;
  #L534e06.  v3:= v3.`n.c.d` @type ^`n.i`[] @kind object;
  #L534e0a.  v3[v0]:= v4 @kind object;
  #L534e0e.  v3:= v2.`n.d.d` @type ^`n.d$a` @kind object;
  #L534e12.  call `a`(v3, v4) @signature `Ln/d$a;.a:(Ln/i;)V` @kind interface;
  #L534e18.  return v4 @kind object;
}
procedure `n.i` `p`(`n.d` v3 @kind this) @signature `Ln/d;.p:()Ln/i;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L534e2c.  v0:= v3.`n.d.k` @type ^`int`;
  #L534e30.  v0:= v0 + 1;
  #L534e34.  v1:= v3.`n.d.f` @type ^`int`;
  #L534e38.  if v0 < v1 then goto L534e42;
  #L534e3c.  call `z`(v3) @signature `Ln/d;.z:()V` @kind direct;
  #L534e42.  v0:= `@@n.i$a.SLACK` @type ^`n.i$a` @kind object;
  #L534e46.  v1:= 0I;
  #L534e48.  call temp:= `a`(v3, v0, v1) @signature `Ln/d;.a:(Ln/i$a;Ljava/lang/String;)Ln/i;` @kind direct;
  #L534e4e.  v0:= temp @kind object;
  #L534e50.  v1:= v3.`n.d.b` @type ^`int`;
  #L534e54.  v1:= v1 + 1;
  #L534e58.  v3.`n.d.b` @type ^`int` := v1;
  #L534e5c.  v2:= v3.`n.d.k` @type ^`int`;
  #L534e60.  v2:= v2 + 1;
  #L534e64.  v3.`n.d.k` @type ^`int` := v2;
  #L534e68.  v0.`n.i.i` @type ^`int` := v1;
  #L534e6c.  v2:= v3.`n.d.n` @type ^`n.c` @kind object;
  #L534e70.  v2:= v2.`n.c.d` @type ^`n.i`[] @kind object;
  #L534e74.  v2[v1]:= v0 @kind object;
  #L534e78.  return v0 @kind object;
}
procedure `n.i` `q`(`n.d` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Ln/d;.q:(Ljava/lang/Object;)Ln/i;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L534e8c.  v0:= 0I;
  #L534e8e.  if v4 != 0 then goto L534e94;
  #L534e92.  return v0 @kind object;
  #L534e94.  v1:= v3.`n.d.k` @type ^`int`;
  #L534e98.  v1:= v1 + 1;
  #L534e9c.  v2:= v3.`n.d.f` @type ^`int`;
  #L534ea0.  if v1 < v2 then goto L534eaa;
  #L534ea4.  call `z`(v3) @signature `Ln/d;.z:()V` @kind direct;
  #L534eaa.  v1:= instanceof @variable v4 @type ^`q.d` @kind boolean;
  #L534eae.  if v1 == 0 then goto L534f32;
  #L534eb2.  v4:= (`q.d`) v4 @kind object;
  #L534eb6.  call temp:= `i`(v4) @signature `Lq/d;.i:()Ln/i;` @kind virtual;
  #L534ebc.  v0:= temp @kind object;
  #L534ebe.  if v0 != 0 then goto L534ed6;
  #L534ec2.  v0:= v3.`n.d.n` @type ^`n.c` @kind object;
  #L534ec6.  call `s`(v4, v0) @signature `Lq/d;.s:(Ln/c;)V` @kind virtual;
  #L534ecc.  call temp:= `i`(v4) @signature `Lq/d;.i:()Ln/i;` @kind virtual;
  #L534ed2.  v4:= temp @kind object;
  #L534ed4.  v0:= v4 @kind object;
  #L534ed6.  v4:= v0.`n.i.i` @type ^`int`;
  #L534eda.  v1:= -1I;
  #L534edc.  if v4 == v1 then goto L534ef8;
  #L534ee0.  v2:= v3.`n.d.b` @type ^`int`;
  #L534ee4.  if v4 > v2 then goto L534ef8;
  #L534ee8.  v2:= v3.`n.d.n` @type ^`n.c` @kind object;
  #L534eec.  v2:= v2.`n.c.d` @type ^`n.i`[] @kind object;
  #L534ef0.  v2:= v2[v4] @kind object;
  #L534ef4.  if v2 != 0 then goto L534f32;
  #L534ef8.  if v4 == v1 then goto L534f02;
  #L534efc.  call `f`(v0) @signature `Ln/i;.f:()V` @kind virtual;
  #L534f02.  v4:= v3.`n.d.b` @type ^`int`;
  #L534f06.  v4:= v4 + 1;
  #L534f0a.  v3.`n.d.b` @type ^`int` := v4;
  #L534f0e.  v1:= v3.`n.d.k` @type ^`int`;
  #L534f12.  v1:= v1 + 1;
  #L534f16.  v3.`n.d.k` @type ^`int` := v1;
  #L534f1a.  v0.`n.i.i` @type ^`int` := v4;
  #L534f1e.  v1:= `@@n.i$a.UNRESTRICTED` @type ^`n.i$a` @kind object;
  #L534f22.  v0.`n.i.p` @type ^`n.i$a` := v1 @kind object;
  #L534f26.  v1:= v3.`n.d.n` @type ^`n.c` @kind object;
  #L534f2a.  v1:= v1.`n.c.d` @type ^`n.i`[] @kind object;
  #L534f2e.  v1[v4]:= v0 @kind object;
  #L534f32.  return v0 @kind object;
}
procedure `n.b` `r`(`n.d` v5 @kind this) @signature `Ln/d;.r:()Ln/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L534c50.  v0:= `@@n.d.v` @type ^`boolean` @kind boolean;
  #L534c54.  v1:= 1L;
  #L534c58.  if v0 == 0 then goto L534c96;
  #L534c5c.  v0:= v5.`n.d.n` @type ^`n.c` @kind object;
  #L534c60.  v0:= v0.`n.c.a` @type ^`n.f` @kind object;
  #L534c64.  call temp:= `b`(v0) @signature `Ln/f;.b:()Ljava/lang/Object;` @kind interface;
  #L534c6a.  v0:= temp @kind object;
  #L534c6c.  v0:= (`n.b`) v0 @kind object;
  #L534c70.  if v0 != 0 then goto L534c8e;
  #L534c74.  v0:= new `n.d$b`;
  #L534c78.  v3:= v5.`n.d.n` @type ^`n.c` @kind object;
  #L534c7c.  call `<init>`(v0, v5, v3) @signature `Ln/d$b;.<init>:(Ln/d;Ln/c;)V` @kind direct;
  #L534c82.  v3:= `@@n.d.z` @type ^`long` @kind wide;
  #L534c86.  v3:= v3 + v1 @kind long;
  #L534c88.  `@@n.d.z` @type ^`long` := v3 @kind wide;
  #L534c8c.  goto L534cce;
  #L534c8e.  call `y`(v0) @signature `Ln/b;.y:()V` @kind virtual;
  #L534c94.  goto L534cce;
  #L534c96.  v0:= v5.`n.d.n` @type ^`n.c` @kind object;
  #L534c9a.  v0:= v0.`n.c.b` @type ^`n.f` @kind object;
  #L534c9e.  call temp:= `b`(v0) @signature `Ln/f;.b:()Ljava/lang/Object;` @kind interface;
  #L534ca4.  v0:= temp @kind object;
  #L534ca6.  v0:= (`n.b`) v0 @kind object;
  #L534caa.  if v0 != 0 then goto L534cc8;
  #L534cae.  v0:= new `n.b`;
  #L534cb2.  v3:= v5.`n.d.n` @type ^`n.c` @kind object;
  #L534cb6.  call `<init>`(v0, v3) @signature `Ln/b;.<init>:(Ln/c;)V` @kind direct;
  #L534cbc.  v3:= `@@n.d.y` @type ^`long` @kind wide;
  #L534cc0.  v3:= v3 + v1 @kind long;
  #L534cc2.  `@@n.d.y` @type ^`long` := v3 @kind wide;
  #L534cc6.  goto L534cce;
  #L534cc8.  call `y`(v0) @signature `Ln/b;.y:()V` @kind virtual;
  #L534cce.  call `c`() @signature `Ln/i;.c:()V` @kind static;
  #L534cd4.  return v0 @kind object;
}
procedure `n.i` `t`(`n.d` v3 @kind this) @signature `Ln/d;.t:()Ln/i;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L534f44.  v0:= v3.`n.d.k` @type ^`int`;
  #L534f48.  v0:= v0 + 1;
  #L534f4c.  v1:= v3.`n.d.f` @type ^`int`;
  #L534f50.  if v0 < v1 then goto L534f5a;
  #L534f54.  call `z`(v3) @signature `Ln/d;.z:()V` @kind direct;
  #L534f5a.  v0:= `@@n.i$a.SLACK` @type ^`n.i$a` @kind object;
  #L534f5e.  v1:= 0I;
  #L534f60.  call temp:= `a`(v3, v0, v1) @signature `Ln/d;.a:(Ln/i$a;Ljava/lang/String;)Ln/i;` @kind direct;
  #L534f66.  v0:= temp @kind object;
  #L534f68.  v1:= v3.`n.d.b` @type ^`int`;
  #L534f6c.  v1:= v1 + 1;
  #L534f70.  v3.`n.d.b` @type ^`int` := v1;
  #L534f74.  v2:= v3.`n.d.k` @type ^`int`;
  #L534f78.  v2:= v2 + 1;
  #L534f7c.  v3.`n.d.k` @type ^`int` := v2;
  #L534f80.  v0.`n.i.i` @type ^`int` := v1;
  #L534f84.  v2:= v3.`n.d.n` @type ^`n.c` @kind object;
  #L534f88.  v2:= v2.`n.c.d` @type ^`n.i`[] @kind object;
  #L534f8c.  v2[v1]:= v0 @kind object;
  #L534f90.  return v0 @kind object;
}
procedure `void` `v`(`n.d` v0 @kind this, `n.e` v1 @kind object) @signature `Ln/d;.v:(Ln/e;)V` @AccessFlag PUBLIC {
    temp;

  #L5356d0.  return @kind void;
}
procedure `n.c` `w`(`n.d` v1 @kind this) @signature `Ln/d;.w:()Ln/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L534d0c.  v0:= v1.`n.d.n` @type ^`n.c` @kind object;
  #L534d10.  return v0 @kind object;
}
procedure `int` `y`(`n.d` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Ln/d;.y:(Ljava/lang/Object;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L534a80.  v2:= (`q.d`) v2 @kind object;
  #L534a84.  call temp:= `i`(v2) @signature `Lq/d;.i:()Ln/i;` @kind virtual;
  #L534a8a.  v2:= temp @kind object;
  #L534a8c.  if v2 == 0 then goto L534a9e;
  #L534a90.  v2:= v2.`n.i.l` @type ^`float`;
  #L534a94.  v0:= 0.5F;
  #L534a98.  v2:= v2 + v0 @kind float;
  #L534a9a.  v2:= (`int`) v2 @kind f2i;
  #L534a9c.  return v2;
  #L534a9e.  v2:= 0I;
  #L534aa0.  return v2;
}
