record `n.h$b` @kind class @AccessFlag  {
  `n.i` `n.h$b.a` @AccessFlag ;
  `n.h` `n.h$b.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`n.h$b` v0 @kind this, `n.h` v1 @kind object, `n.h` v2 @kind object) @signature `Ln/h$b;.<init>:(Ln/h;Ln/h;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L535c88.  v0.`n.h$b.b` @type ^`n.h` := v1 @kind object;
  #L535c8c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L535c92.  return @kind void;
}
procedure `boolean` `a`(`n.h$b` v9 @kind this, `n.i` v10 @kind object, `float` v11 ) @signature `Ln/h$b;.a:(Ln/i;F)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L535a88.  v0:= v9.`n.h$b.a` @type ^`n.i` @kind object;
  #L535a8c.  v0:= v0.`n.i.g` @type ^`boolean` @kind boolean;
  #L535a90.  v1:= 953267991I;
  #L535a96.  v2:= 9I;
  #L535a9a.  v3:= 0I;
  #L535a9c.  v4:= 1I;
  #L535a9e.  v5:= 0I;
  #L535aa0.  if v0 == 0 then goto L535b06;
  #L535aa4.  v0:= 0I;
  #L535aa6.  if v0 >= v2 then goto L535af2;
  #L535aaa.  v6:= v9.`n.h$b.a` @type ^`n.i` @kind object;
  #L535aae.  v6:= v6.`n.i.o` @type ^`float`[] @kind object;
  #L535ab2.  v7:= v6[v0];
  #L535ab6.  v8:= v10.`n.i.o` @type ^`float`[] @kind object;
  #L535aba.  v8:= v8[v0];
  #L535abe.  v8:= v8 * v11 @kind float;
  #L535ac2.  v7:= v7 + v8 @kind float;
  #L535ac4.  v6[v0]:= v7;
  #L535ac8.  v6:= v6[v0];
  #L535acc.  call temp:= `abs`(v6) @signature `Ljava/lang/Math;.abs:(F)F` @kind static;
  #L535ad2.  v6:= temp;
  #L535ad4.  v6:= fcmpg(v6, v1);
  #L535ad8.  if v6 >= 0 then goto L535aea;
  #L535adc.  v6:= v9.`n.h$b.a` @type ^`n.i` @kind object;
  #L535ae0.  v6:= v6.`n.i.o` @type ^`float`[] @kind object;
  #L535ae4.  v6[v0]:= v3;
  #L535ae8.  goto L535aec;
  #L535aea.  v4:= 0I;
  #L535aec.  v0:= v0 + 1;
  #L535af0.  goto L535aa6;
  #L535af2.  if v4 == 0 then goto L535b04;
  #L535af6.  v10:= v9.`n.h$b.b` @type ^`n.h` @kind object;
  #L535afa.  v11:= v9.`n.h$b.a` @type ^`n.i` @kind object;
  #L535afe.  call `E`(v10, v11) @signature `Ln/h;.E:(Ln/h;Ln/i;)V` @kind static;
  #L535b04.  return v5;
  #L535b06.  if v5 >= v2 then goto L535b50;
  #L535b0a.  v0:= v10.`n.i.o` @type ^`float`[] @kind object;
  #L535b0e.  v0:= v0[v5];
  #L535b12.  v6:= fcmpl(v0, v3);
  #L535b16.  if v6 == 0 then goto L535b3e;
  #L535b1a.  v0:= v0 * v11 @kind float;
  #L535b1e.  call temp:= `abs`(v0) @signature `Ljava/lang/Math;.abs:(F)F` @kind static;
  #L535b24.  v6:= temp;
  #L535b26.  v6:= fcmpg(v6, v1);
  #L535b2a.  if v6 >= 0 then goto L535b30;
  #L535b2e.  v0:= 0I;
  #L535b30.  v6:= v9.`n.h$b.a` @type ^`n.i` @kind object;
  #L535b34.  v6:= v6.`n.i.o` @type ^`float`[] @kind object;
  #L535b38.  v6[v5]:= v0;
  #L535b3c.  goto L535b4a;
  #L535b3e.  v0:= v9.`n.h$b.a` @type ^`n.i` @kind object;
  #L535b42.  v0:= v0.`n.i.o` @type ^`float`[] @kind object;
  #L535b46.  v0[v5]:= v3;
  #L535b4a.  v5:= v5 + 1;
  #L535b4e.  goto L535b06;
  #L535b50.  return v4;
}
procedure `void` `b`(`n.h$b` v0 @kind this, `n.i` v1 @kind object) @signature `Ln/h$b;.b:(Ln/i;)V` @AccessFlag PUBLIC {
    temp;

  #L535ca4.  v0.`n.h$b.a` @type ^`n.i` := v1 @kind object;
  #L535ca8.  return @kind void;
}
procedure `boolean` `c`(`n.h$b` v5 @kind this) @signature `Ln/h$b;.c:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L535b64.  v0:= 8I;
  #L535b68.  v1:= 0I;
  #L535b6a.  if v0 < 0 then goto L535b98;
  #L535b6e.  v2:= v5.`n.h$b.a` @type ^`n.i` @kind object;
  #L535b72.  v2:= v2.`n.i.o` @type ^`float`[] @kind object;
  #L535b76.  v2:= v2[v0];
  #L535b7a.  v3:= 0I;
  #L535b7c.  v4:= fcmpl(v2, v3);
  #L535b80.  if v4 <= 0 then goto L535b86;
  #L535b84.  return v1;
  #L535b86.  v1:= fcmpg(v2, v3);
  #L535b8a.  if v1 >= 0 then goto L535b92;
  #L535b8e.  v0:= 1I;
  #L535b90.  return v0;
  #L535b92.  v0:= v0 + -1;
  #L535b96.  goto L535b68;
  #L535b98.  return v1;
}
procedure `boolean` `d`(`n.h$b` v5 @kind this, `n.i` v6 @kind object) @signature `Ln/h$b;.d:(Ln/i;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L535bac.  v0:= 8I;
  #L535bb0.  v1:= 0I;
  #L535bb2.  if v0 < 0 then goto L535be4;
  #L535bb6.  v2:= v6.`n.i.o` @type ^`float`[] @kind object;
  #L535bba.  v2:= v2[v0];
  #L535bbe.  v3:= v5.`n.h$b.a` @type ^`n.i` @kind object;
  #L535bc2.  v3:= v3.`n.i.o` @type ^`float`[] @kind object;
  #L535bc6.  v3:= v3[v0];
  #L535bca.  v4:= fcmpl(v3, v2);
  #L535bce.  if v4 != 0 then goto L535bd8;
  #L535bd2.  v0:= v0 + -1;
  #L535bd6.  goto L535bb0;
  #L535bd8.  v6:= fcmpg(v3, v2);
  #L535bdc.  if v6 >= 0 then goto L535be4;
  #L535be0.  v6:= 1I;
  #L535be2.  return v6;
  #L535be4.  return v1;
}
procedure `void` `e`(`n.h$b` v2 @kind this) @signature `Ln/h$b;.e:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L535cbc.  v0:= v2.`n.h$b.a` @type ^`n.i` @kind object;
  #L535cc0.  v0:= v0.`n.i.o` @type ^`float`[] @kind object;
  #L535cc4.  v1:= 0I;
  #L535cc6.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([FF)V` @kind static;
  #L535ccc.  return @kind void;
}
procedure `java.lang.String` `toString`(`n.h$b` v3 @kind this) @signature `Ln/h$b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L535bf8.  v0:= v3.`n.h$b.a` @type ^`n.i` @kind object;
  #L535bfc.  v1:= "[ " @kind object;
  #L535c00.  if v0 == 0 then goto L535c48;
  #L535c04.  v0:= 0I;
  #L535c06.  v2:= 9I;
  #L535c0a.  if v0 >= v2 then goto L535c48;
  #L535c0e.  v2:= new `java.lang.StringBuilder`;
  #L535c12.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L535c18.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L535c1e.  v1:= v3.`n.h$b.a` @type ^`n.i` @kind object;
  #L535c22.  v1:= v1.`n.i.o` @type ^`float`[] @kind object;
  #L535c26.  v1:= v1[v0];
  #L535c2a.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(F)Ljava/lang/StringBuilder;` @kind virtual;
  #L535c30.  v1:= " " @kind object;
  #L535c34.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L535c3a.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L535c40.  v1:= temp @kind object;
  #L535c42.  v0:= v0 + 1;
  #L535c46.  goto L535c06;
  #L535c48.  v0:= new `java.lang.StringBuilder`;
  #L535c4c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L535c52.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L535c58.  v1:= "] " @kind object;
  #L535c5c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L535c62.  v1:= v3.`n.h$b.a` @type ^`n.i` @kind object;
  #L535c66.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L535c6c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L535c72.  v0:= temp @kind object;
  #L535c74.  return v0 @kind object;
}
