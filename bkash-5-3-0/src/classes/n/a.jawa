record `n.a` @kind class @AccessFlag PUBLIC extends `n.b$a` @kind interface {
  `int` `n.a.a` @AccessFlag ;
  `n.b` `n.a.b` @AccessFlag PRIVATE_FINAL;
  `n.c` `n.a.c` @AccessFlag PROTECTED_FINAL;
  `int` `n.a.d` @AccessFlag PRIVATE;
  `n.i` `n.a.e` @AccessFlag PRIVATE;
  `int`[] `n.a.f` @AccessFlag PRIVATE;
  `int`[] `n.a.g` @AccessFlag PRIVATE;
  `float`[] `n.a.h` @AccessFlag PRIVATE;
  `int` `n.a.i` @AccessFlag PRIVATE;
  `int` `n.a.j` @AccessFlag PRIVATE;
  `boolean` `n.a.k` @AccessFlag PRIVATE;
}
global `float` `@@n.a.l` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Ln/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;

  #L53338c.  return @kind void;
}
procedure `void` `<init>`(`n.a` v3 @kind this, `n.b` v4 @kind object, `n.c` v5 @kind object) @signature `Ln/a;.<init>:(Ln/b;Ln/c;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L5333a0.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L5333a6.  v0:= 0I;
  #L5333a8.  v3.`n.a.a` @type ^`int` := v0;
  #L5333ac.  v1:= 8I;
  #L5333b0.  v3.`n.a.d` @type ^`int` := v1;
  #L5333b4.  v2:= 0I;
  #L5333b6.  v3.`n.a.e` @type ^`n.i` := v2 @kind object;
  #L5333ba.  v2:= new `int`[v1];
  #L5333be.  v3.`n.a.f` @type ^`int`[] := v2 @kind object;
  #L5333c2.  v2:= new `int`[v1];
  #L5333c6.  v3.`n.a.g` @type ^`int`[] := v2 @kind object;
  #L5333ca.  v1:= new `float`[v1];
  #L5333ce.  v3.`n.a.h` @type ^`float`[] := v1 @kind object;
  #L5333d2.  v1:= -1I;
  #L5333d4.  v3.`n.a.i` @type ^`int` := v1;
  #L5333d8.  v3.`n.a.j` @type ^`int` := v1;
  #L5333dc.  v3.`n.a.k` @type ^`boolean` := v0 @kind boolean;
  #L5333e0.  v3.`n.a.b` @type ^`n.b` := v4 @kind object;
  #L5333e4.  v3.`n.a.c` @type ^`n.c` := v5 @kind object;
  #L5333e8.  return @kind void;
}
procedure `void` `a`(`n.a` v9 @kind this, `n.i` v10 @kind object, `float` v11 , `boolean` v12 ) @signature `Ln/a;.a:(Ln/i;FZ)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L5333fc.  v0:= `@@n.a.l` @type ^`float`;
  #L533400.  v1:= -v0 @kind float;
  #L533402.  v1:= fcmpl(v11, v1);
  #L533406.  if v1 <= 0 then goto L533414;
  #L53340a.  v0:= fcmpg(v11, v0);
  #L53340e.  if v0 >= 0 then goto L533414;
  #L533412.  return @kind void;
  #L533414.  v0:= v9.`n.a.i` @type ^`int`;
  #L533418.  v1:= 0I;
  #L53341a.  v2:= -1I;
  #L53341c.  v3:= 1I;
  #L53341e.  if v0 != v2 then goto L53348a;
  #L533422.  v9.`n.a.i` @type ^`int` := v1;
  #L533426.  v12:= v9.`n.a.h` @type ^`float`[] @kind object;
  #L53342a.  v12[v1]:= v11;
  #L53342e.  v11:= v9.`n.a.f` @type ^`int`[] @kind object;
  #L533432.  v12:= v10.`n.i.i` @type ^`int`;
  #L533436.  v11[v1]:= v12;
  #L53343a.  v11:= v9.`n.a.g` @type ^`int`[] @kind object;
  #L53343e.  v11[v1]:= v2;
  #L533442.  v11:= v10.`n.i.s` @type ^`int`;
  #L533446.  v11:= v11 + v3 @kind int;
  #L533448.  v10.`n.i.s` @type ^`int` := v11;
  #L53344c.  v11:= v9.`n.a.b` @type ^`n.b` @kind object;
  #L533450.  call `a`(v10, v11) @signature `Ln/i;.a:(Ln/b;)V` @kind virtual;
  #L533456.  v10:= v9.`n.a.a` @type ^`int`;
  #L53345a.  v10:= v10 + v3 @kind int;
  #L53345c.  v9.`n.a.a` @type ^`int` := v10;
  #L533460.  v10:= v9.`n.a.k` @type ^`boolean` @kind boolean;
  #L533464.  if v10 != 0 then goto L533488;
  #L533468.  v10:= v9.`n.a.j` @type ^`int`;
  #L53346c.  v10:= v10 + v3 @kind int;
  #L53346e.  v9.`n.a.j` @type ^`int` := v10;
  #L533472.  v11:= v9.`n.a.f` @type ^`int`[] @kind object;
  #L533476.  v12:= length @variable v11;
  #L533478.  if v10 < v12 then goto L533488;
  #L53347c.  v9.`n.a.k` @type ^`boolean` := v3 @kind boolean;
  #L533480.  v10:= length @variable v11;
  #L533482.  v10:= v10 - v3 @kind int;
  #L533484.  v9.`n.a.j` @type ^`int` := v10;
  #L533488.  return @kind void;
  #L53348a.  v4:= 0I;
  #L53348c.  v5:= -1I;
  #L53348e.  if v0 == v2 then goto L533544;
  #L533492.  v6:= v9.`n.a.a` @type ^`int`;
  #L533496.  if v4 >= v6 then goto L533544;
  #L53349a.  v6:= v9.`n.a.f` @type ^`int`[] @kind object;
  #L53349e.  v7:= v6[v0];
  #L5334a2.  v8:= v10.`n.i.i` @type ^`int`;
  #L5334a6.  if v7 != v8 then goto L53352c;
  #L5334aa.  v1:= v9.`n.a.h` @type ^`float`[] @kind object;
  #L5334ae.  v2:= v1[v0];
  #L5334b2.  v2:= v2 + v11 @kind float;
  #L5334b4.  v11:= `@@n.a.l` @type ^`float`;
  #L5334b8.  v4:= -v11 @kind float;
  #L5334ba.  v6:= 0I;
  #L5334bc.  v4:= fcmpl(v2, v4);
  #L5334c0.  if v4 <= 0 then goto L5334ce;
  #L5334c4.  v11:= fcmpg(v2, v11);
  #L5334c8.  if v11 >= 0 then goto L5334ce;
  #L5334cc.  v2:= 0I;
  #L5334ce.  v1[v0]:= v2;
  #L5334d2.  v11:= fcmpl(v2, v6);
  #L5334d6.  if v11 != 0 then goto L53352a;
  #L5334da.  v11:= v9.`n.a.i` @type ^`int`;
  #L5334de.  if v0 != v11 then goto L5334f0;
  #L5334e2.  v11:= v9.`n.a.g` @type ^`int`[] @kind object;
  #L5334e6.  v11:= v11[v0];
  #L5334ea.  v9.`n.a.i` @type ^`int` := v11;
  #L5334ee.  goto L5334fc;
  #L5334f0.  v11:= v9.`n.a.g` @type ^`int`[] @kind object;
  #L5334f4.  v1:= v11[v0];
  #L5334f8.  v11[v5]:= v1;
  #L5334fc.  if v12 == 0 then goto L53350a;
  #L533500.  v11:= v9.`n.a.b` @type ^`n.b` @kind object;
  #L533504.  call `d`(v10, v11) @signature `Ln/i;.d:(Ln/b;)V` @kind virtual;
  #L53350a.  v11:= v9.`n.a.k` @type ^`boolean` @kind boolean;
  #L53350e.  if v11 == 0 then goto L533516;
  #L533512.  v9.`n.a.j` @type ^`int` := v0;
  #L533516.  v11:= v10.`n.i.s` @type ^`int`;
  #L53351a.  v11:= v11 - v3 @kind int;
  #L53351c.  v10.`n.i.s` @type ^`int` := v11;
  #L533520.  v10:= v9.`n.a.a` @type ^`int`;
  #L533524.  v10:= v10 - v3 @kind int;
  #L533526.  v9.`n.a.a` @type ^`int` := v10;
  #L53352a.  return @kind void;
  #L53352c.  v6:= v6[v0];
  #L533530.  if v6 >= v8 then goto L533536;
  #L533534.  v5:= v0;
  #L533536.  v6:= v9.`n.a.g` @type ^`int`[] @kind object;
  #L53353a.  v0:= v6[v0];
  #L53353e.  v4:= v4 + 1;
  #L533542.  goto L53348e;
  #L533544.  v12:= v9.`n.a.j` @type ^`int`;
  #L533548.  v0:= v12 + 1;
  #L53354c.  v4:= v9.`n.a.k` @type ^`boolean` @kind boolean;
  #L533550.  if v4 == 0 then goto L533566;
  #L533554.  v0:= v9.`n.a.f` @type ^`int`[] @kind object;
  #L533558.  v4:= v0[v12];
  #L53355c.  if v4 != v2 then goto L533562;
  #L533560.  goto L533568;
  #L533562.  v12:= length @variable v0;
  #L533564.  goto L533568;
  #L533566.  v12:= v0;
  #L533568.  v0:= v9.`n.a.f` @type ^`int`[] @kind object;
  #L53356c.  v4:= length @variable v0;
  #L53356e.  if v12 < v4 then goto L53359a;
  #L533572.  v4:= v9.`n.a.a` @type ^`int`;
  #L533576.  v0:= length @variable v0;
  #L533578.  if v4 >= v0 then goto L53359a;
  #L53357c.  v0:= 0I;
  #L53357e.  v4:= v9.`n.a.f` @type ^`int`[] @kind object;
  #L533582.  v6:= length @variable v4;
  #L533584.  if v0 >= v6 then goto L53359a;
  #L533588.  v4:= v4[v0];
  #L53358c.  if v4 != v2 then goto L533594;
  #L533590.  v12:= v0;
  #L533592.  goto L53359a;
  #L533594.  v0:= v0 + 1;
  #L533598.  goto L53357e;
  #L53359a.  v0:= v9.`n.a.f` @type ^`int`[] @kind object;
  #L53359e.  v4:= length @variable v0;
  #L5335a0.  if v12 < v4 then goto L5335f6;
  #L5335a4.  v12:= length @variable v0;
  #L5335a6.  v0:= v9.`n.a.d` @type ^`int`;
  #L5335aa.  v0:= v0 * 2;
  #L5335ae.  v9.`n.a.d` @type ^`int` := v0;
  #L5335b2.  v9.`n.a.k` @type ^`boolean` := v1 @kind boolean;
  #L5335b6.  v1:= v12 + -1;
  #L5335ba.  v9.`n.a.j` @type ^`int` := v1;
  #L5335be.  v1:= v9.`n.a.h` @type ^`float`[] @kind object;
  #L5335c2.  call temp:= `copyOf`(v1, v0) @signature `Ljava/util/Arrays;.copyOf:([FI)[F` @kind static;
  #L5335c8.  v0:= temp @kind object;
  #L5335ca.  v9.`n.a.h` @type ^`float`[] := v0 @kind object;
  #L5335ce.  v0:= v9.`n.a.f` @type ^`int`[] @kind object;
  #L5335d2.  v1:= v9.`n.a.d` @type ^`int`;
  #L5335d6.  call temp:= `copyOf`(v0, v1) @signature `Ljava/util/Arrays;.copyOf:([II)[I` @kind static;
  #L5335dc.  v0:= temp @kind object;
  #L5335de.  v9.`n.a.f` @type ^`int`[] := v0 @kind object;
  #L5335e2.  v0:= v9.`n.a.g` @type ^`int`[] @kind object;
  #L5335e6.  v1:= v9.`n.a.d` @type ^`int`;
  #L5335ea.  call temp:= `copyOf`(v0, v1) @signature `Ljava/util/Arrays;.copyOf:([II)[I` @kind static;
  #L5335f0.  v0:= temp @kind object;
  #L5335f2.  v9.`n.a.g` @type ^`int`[] := v0 @kind object;
  #L5335f6.  v0:= v9.`n.a.f` @type ^`int`[] @kind object;
  #L5335fa.  v1:= v10.`n.i.i` @type ^`int`;
  #L5335fe.  v0[v12]:= v1;
  #L533602.  v0:= v9.`n.a.h` @type ^`float`[] @kind object;
  #L533606.  v0[v12]:= v11;
  #L53360a.  if v5 == v2 then goto L533620;
  #L53360e.  v11:= v9.`n.a.g` @type ^`int`[] @kind object;
  #L533612.  v0:= v11[v5];
  #L533616.  v11[v12]:= v0;
  #L53361a.  v11[v5]:= v12;
  #L53361e.  goto L533630;
  #L533620.  v11:= v9.`n.a.g` @type ^`int`[] @kind object;
  #L533624.  v0:= v9.`n.a.i` @type ^`int`;
  #L533628.  v11[v12]:= v0;
  #L53362c.  v9.`n.a.i` @type ^`int` := v12;
  #L533630.  v11:= v10.`n.i.s` @type ^`int`;
  #L533634.  v11:= v11 + v3 @kind int;
  #L533636.  v10.`n.i.s` @type ^`int` := v11;
  #L53363a.  v11:= v9.`n.a.b` @type ^`n.b` @kind object;
  #L53363e.  call `a`(v10, v11) @signature `Ln/i;.a:(Ln/b;)V` @kind virtual;
  #L533644.  v10:= v9.`n.a.a` @type ^`int`;
  #L533648.  v10:= v10 + v3 @kind int;
  #L53364a.  v9.`n.a.a` @type ^`int` := v10;
  #L53364e.  v10:= v9.`n.a.k` @type ^`boolean` @kind boolean;
  #L533652.  if v10 != 0 then goto L533660;
  #L533656.  v10:= v9.`n.a.j` @type ^`int`;
  #L53365a.  v10:= v10 + v3 @kind int;
  #L53365c.  v9.`n.a.j` @type ^`int` := v10;
  #L533660.  v10:= v9.`n.a.j` @type ^`int`;
  #L533664.  v11:= v9.`n.a.f` @type ^`int`[] @kind object;
  #L533668.  v12:= length @variable v11;
  #L53366a.  if v10 < v12 then goto L53367a;
  #L53366e.  v9.`n.a.k` @type ^`boolean` := v3 @kind boolean;
  #L533672.  v10:= length @variable v11;
  #L533674.  v10:= v10 - v3 @kind int;
  #L533676.  v9.`n.a.j` @type ^`int` := v10;
  #L53367a.  return @kind void;
}
procedure `float` `b`(`n.a` v5 @kind this, `n.b` v6 @kind object, `boolean` v7 ) @signature `Ln/a;.b:(Ln/b;Z)F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L53320c.  v0:= v6.`n.b.a` @type ^`n.i` @kind object;
  #L533210.  call temp:= `e`(v5, v0) @signature `Ln/a;.e:(Ln/i;)F` @kind virtual;
  #L533216.  v0:= temp;
  #L533218.  v1:= v6.`n.b.a` @type ^`n.i` @kind object;
  #L53321c.  call temp:= `k`(v5, v1, v7) @signature `Ln/a;.k:(Ln/i;Z)F` @kind virtual;
  #L533222.  v6:= v6.`n.b.e` @type ^`n.b$a` @kind object;
  #L533226.  call temp:= `d`(v6) @signature `Ln/b$a;.d:()I` @kind interface;
  #L53322c.  v1:= temp;
  #L53322e.  v2:= 0I;
  #L533230.  if v2 >= v1 then goto L533254;
  #L533234.  call temp:= `f`(v6, v2) @signature `Ln/b$a;.f:(I)Ln/i;` @kind interface;
  #L53323a.  v3:= temp @kind object;
  #L53323c.  call temp:= `e`(v6, v3) @signature `Ln/b$a;.e:(Ln/i;)F` @kind interface;
  #L533242.  v4:= temp;
  #L533244.  v4:= v4 * v0 @kind float;
  #L533248.  call `a`(v5, v3, v4, v7) @signature `Ln/a;.a:(Ln/i;FZ)V` @kind virtual;
  #L53324e.  v2:= v2 + 1;
  #L533252.  goto L533230;
  #L533254.  return v0;
}
procedure `void` `c`(`n.a` v9 @kind this, `n.i` v10 @kind object, `float` v11 ) @signature `Ln/a;.c:(Ln/i;F)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L533780.  v0:= 1I;
  #L533782.  v1:= 0I;
  #L533784.  v1:= fcmpl(v11, v1);
  #L533788.  if v1 != 0 then goto L533794;
  #L53378c.  call temp:= `k`(v9, v10, v0) @signature `Ln/a;.k:(Ln/i;Z)F` @kind virtual;
  #L533792.  return @kind void;
  #L533794.  v1:= v9.`n.a.i` @type ^`int`;
  #L533798.  v2:= 0I;
  #L53379a.  v3:= -1I;
  #L53379c.  if v1 != v3 then goto L533808;
  #L5337a0.  v9.`n.a.i` @type ^`int` := v2;
  #L5337a4.  v1:= v9.`n.a.h` @type ^`float`[] @kind object;
  #L5337a8.  v1[v2]:= v11;
  #L5337ac.  v11:= v9.`n.a.f` @type ^`int`[] @kind object;
  #L5337b0.  v1:= v10.`n.i.i` @type ^`int`;
  #L5337b4.  v11[v2]:= v1;
  #L5337b8.  v11:= v9.`n.a.g` @type ^`int`[] @kind object;
  #L5337bc.  v11[v2]:= v3;
  #L5337c0.  v11:= v10.`n.i.s` @type ^`int`;
  #L5337c4.  v11:= v11 + v0 @kind int;
  #L5337c6.  v10.`n.i.s` @type ^`int` := v11;
  #L5337ca.  v11:= v9.`n.a.b` @type ^`n.b` @kind object;
  #L5337ce.  call `a`(v10, v11) @signature `Ln/i;.a:(Ln/b;)V` @kind virtual;
  #L5337d4.  v10:= v9.`n.a.a` @type ^`int`;
  #L5337d8.  v10:= v10 + v0 @kind int;
  #L5337da.  v9.`n.a.a` @type ^`int` := v10;
  #L5337de.  v10:= v9.`n.a.k` @type ^`boolean` @kind boolean;
  #L5337e2.  if v10 != 0 then goto L533806;
  #L5337e6.  v10:= v9.`n.a.j` @type ^`int`;
  #L5337ea.  v10:= v10 + v0 @kind int;
  #L5337ec.  v9.`n.a.j` @type ^`int` := v10;
  #L5337f0.  v11:= v9.`n.a.f` @type ^`int`[] @kind object;
  #L5337f4.  v1:= length @variable v11;
  #L5337f6.  if v10 < v1 then goto L533806;
  #L5337fa.  v9.`n.a.k` @type ^`boolean` := v0 @kind boolean;
  #L5337fe.  v10:= length @variable v11;
  #L533800.  v10:= v10 - v0 @kind int;
  #L533802.  v9.`n.a.j` @type ^`int` := v10;
  #L533806.  return @kind void;
  #L533808.  v4:= 0I;
  #L53380a.  v5:= -1I;
  #L53380c.  if v1 == v3 then goto L53384a;
  #L533810.  v6:= v9.`n.a.a` @type ^`int`;
  #L533814.  if v4 >= v6 then goto L53384a;
  #L533818.  v6:= v9.`n.a.f` @type ^`int`[] @kind object;
  #L53381c.  v7:= v6[v1];
  #L533820.  v8:= v10.`n.i.i` @type ^`int`;
  #L533824.  if v7 != v8 then goto L533832;
  #L533828.  v10:= v9.`n.a.h` @type ^`float`[] @kind object;
  #L53382c.  v10[v1]:= v11;
  #L533830.  return @kind void;
  #L533832.  v6:= v6[v1];
  #L533836.  if v6 >= v8 then goto L53383c;
  #L53383a.  v5:= v1;
  #L53383c.  v6:= v9.`n.a.g` @type ^`int`[] @kind object;
  #L533840.  v1:= v6[v1];
  #L533844.  v4:= v4 + 1;
  #L533848.  goto L53380c;
  #L53384a.  v1:= v9.`n.a.j` @type ^`int`;
  #L53384e.  v4:= v1 + 1;
  #L533852.  v6:= v9.`n.a.k` @type ^`boolean` @kind boolean;
  #L533856.  if v6 == 0 then goto L53386c;
  #L53385a.  v4:= v9.`n.a.f` @type ^`int`[] @kind object;
  #L53385e.  v6:= v4[v1];
  #L533862.  if v6 != v3 then goto L533868;
  #L533866.  goto L53386e;
  #L533868.  v1:= length @variable v4;
  #L53386a.  goto L53386e;
  #L53386c.  v1:= v4;
  #L53386e.  v4:= v9.`n.a.f` @type ^`int`[] @kind object;
  #L533872.  v6:= length @variable v4;
  #L533874.  if v1 < v6 then goto L5338a0;
  #L533878.  v6:= v9.`n.a.a` @type ^`int`;
  #L53387c.  v4:= length @variable v4;
  #L53387e.  if v6 >= v4 then goto L5338a0;
  #L533882.  v4:= 0I;
  #L533884.  v6:= v9.`n.a.f` @type ^`int`[] @kind object;
  #L533888.  v7:= length @variable v6;
  #L53388a.  if v4 >= v7 then goto L5338a0;
  #L53388e.  v6:= v6[v4];
  #L533892.  if v6 != v3 then goto L53389a;
  #L533896.  v1:= v4;
  #L533898.  goto L5338a0;
  #L53389a.  v4:= v4 + 1;
  #L53389e.  goto L533884;
  #L5338a0.  v4:= v9.`n.a.f` @type ^`int`[] @kind object;
  #L5338a4.  v6:= length @variable v4;
  #L5338a6.  if v1 < v6 then goto L5338fc;
  #L5338aa.  v1:= length @variable v4;
  #L5338ac.  v4:= v9.`n.a.d` @type ^`int`;
  #L5338b0.  v4:= v4 * 2;
  #L5338b4.  v9.`n.a.d` @type ^`int` := v4;
  #L5338b8.  v9.`n.a.k` @type ^`boolean` := v2 @kind boolean;
  #L5338bc.  v2:= v1 + -1;
  #L5338c0.  v9.`n.a.j` @type ^`int` := v2;
  #L5338c4.  v2:= v9.`n.a.h` @type ^`float`[] @kind object;
  #L5338c8.  call temp:= `copyOf`(v2, v4) @signature `Ljava/util/Arrays;.copyOf:([FI)[F` @kind static;
  #L5338ce.  v2:= temp @kind object;
  #L5338d0.  v9.`n.a.h` @type ^`float`[] := v2 @kind object;
  #L5338d4.  v2:= v9.`n.a.f` @type ^`int`[] @kind object;
  #L5338d8.  v4:= v9.`n.a.d` @type ^`int`;
  #L5338dc.  call temp:= `copyOf`(v2, v4) @signature `Ljava/util/Arrays;.copyOf:([II)[I` @kind static;
  #L5338e2.  v2:= temp @kind object;
  #L5338e4.  v9.`n.a.f` @type ^`int`[] := v2 @kind object;
  #L5338e8.  v2:= v9.`n.a.g` @type ^`int`[] @kind object;
  #L5338ec.  v4:= v9.`n.a.d` @type ^`int`;
  #L5338f0.  call temp:= `copyOf`(v2, v4) @signature `Ljava/util/Arrays;.copyOf:([II)[I` @kind static;
  #L5338f6.  v2:= temp @kind object;
  #L5338f8.  v9.`n.a.g` @type ^`int`[] := v2 @kind object;
  #L5338fc.  v2:= v9.`n.a.f` @type ^`int`[] @kind object;
  #L533900.  v4:= v10.`n.i.i` @type ^`int`;
  #L533904.  v2[v1]:= v4;
  #L533908.  v2:= v9.`n.a.h` @type ^`float`[] @kind object;
  #L53390c.  v2[v1]:= v11;
  #L533910.  if v5 == v3 then goto L533926;
  #L533914.  v11:= v9.`n.a.g` @type ^`int`[] @kind object;
  #L533918.  v2:= v11[v5];
  #L53391c.  v11[v1]:= v2;
  #L533920.  v11[v5]:= v1;
  #L533924.  goto L533936;
  #L533926.  v11:= v9.`n.a.g` @type ^`int`[] @kind object;
  #L53392a.  v2:= v9.`n.a.i` @type ^`int`;
  #L53392e.  v11[v1]:= v2;
  #L533932.  v9.`n.a.i` @type ^`int` := v1;
  #L533936.  v11:= v10.`n.i.s` @type ^`int`;
  #L53393a.  v11:= v11 + v0 @kind int;
  #L53393c.  v10.`n.i.s` @type ^`int` := v11;
  #L533940.  v11:= v9.`n.a.b` @type ^`n.b` @kind object;
  #L533944.  call `a`(v10, v11) @signature `Ln/i;.a:(Ln/b;)V` @kind virtual;
  #L53394a.  v10:= v9.`n.a.a` @type ^`int`;
  #L53394e.  v10:= v10 + v0 @kind int;
  #L533950.  v9.`n.a.a` @type ^`int` := v10;
  #L533954.  v11:= v9.`n.a.k` @type ^`boolean` @kind boolean;
  #L533958.  if v11 != 0 then goto L533966;
  #L53395c.  v11:= v9.`n.a.j` @type ^`int`;
  #L533960.  v11:= v11 + v0 @kind int;
  #L533962.  v9.`n.a.j` @type ^`int` := v11;
  #L533966.  v11:= v9.`n.a.f` @type ^`int`[] @kind object;
  #L53396a.  v1:= length @variable v11;
  #L53396c.  if v10 < v1 then goto L533974;
  #L533970.  v9.`n.a.k` @type ^`boolean` := v0 @kind boolean;
  #L533974.  v10:= v9.`n.a.j` @type ^`int`;
  #L533978.  v1:= length @variable v11;
  #L53397a.  if v10 < v1 then goto L53398a;
  #L53397e.  v9.`n.a.k` @type ^`boolean` := v0 @kind boolean;
  #L533982.  v10:= length @variable v11;
  #L533984.  v10:= v10 - v0 @kind int;
  #L533986.  v9.`n.a.j` @type ^`int` := v10;
  #L53398a.  return @kind void;
}
procedure `void` `clear`(`n.a` v5 @kind this) @signature `Ln/a;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L53368c.  v0:= v5.`n.a.i` @type ^`int`;
  #L533690.  v1:= 0I;
  #L533692.  v2:= 0I;
  #L533694.  v3:= -1I;
  #L533696.  if v0 == v3 then goto L5336d2;
  #L53369a.  v4:= v5.`n.a.a` @type ^`int`;
  #L53369e.  if v2 >= v4 then goto L5336d2;
  #L5336a2.  v3:= v5.`n.a.c` @type ^`n.c` @kind object;
  #L5336a6.  v3:= v3.`n.c.d` @type ^`n.i`[] @kind object;
  #L5336aa.  v4:= v5.`n.a.f` @type ^`int`[] @kind object;
  #L5336ae.  v4:= v4[v0];
  #L5336b2.  v3:= v3[v4] @kind object;
  #L5336b6.  if v3 == 0 then goto L5336c4;
  #L5336ba.  v4:= v5.`n.a.b` @type ^`n.b` @kind object;
  #L5336be.  call `d`(v3, v4) @signature `Ln/i;.d:(Ln/b;)V` @kind virtual;
  #L5336c4.  v3:= v5.`n.a.g` @type ^`int`[] @kind object;
  #L5336c8.  v0:= v3[v0];
  #L5336cc.  v2:= v2 + 1;
  #L5336d0.  goto L533694;
  #L5336d2.  v5.`n.a.i` @type ^`int` := v3;
  #L5336d6.  v5.`n.a.j` @type ^`int` := v3;
  #L5336da.  v5.`n.a.k` @type ^`boolean` := v1 @kind boolean;
  #L5336de.  v5.`n.a.a` @type ^`int` := v1;
  #L5336e2.  return @kind void;
}
procedure `int` `d`(`n.a` v1 @kind this) @signature `Ln/a;.d:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L533268.  v0:= v1.`n.a.a` @type ^`int`;
  #L53326c.  return v0;
}
procedure `float` `e`(`n.a` v4 @kind this, `n.i` v5 @kind object) @signature `Ln/a;.e:(Ln/i;)F` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L5330b0.  v0:= v4.`n.a.i` @type ^`int`;
  #L5330b4.  v1:= 0I;
  #L5330b6.  v2:= -1I;
  #L5330b8.  if v0 == v2 then goto L5330ec;
  #L5330bc.  v2:= v4.`n.a.a` @type ^`int`;
  #L5330c0.  if v1 >= v2 then goto L5330ec;
  #L5330c4.  v2:= v4.`n.a.f` @type ^`int`[] @kind object;
  #L5330c8.  v2:= v2[v0];
  #L5330cc.  v3:= v5.`n.i.i` @type ^`int`;
  #L5330d0.  if v2 != v3 then goto L5330de;
  #L5330d4.  v5:= v4.`n.a.h` @type ^`float`[] @kind object;
  #L5330d8.  v5:= v5[v0];
  #L5330dc.  return v5;
  #L5330de.  v2:= v4.`n.a.g` @type ^`int`[] @kind object;
  #L5330e2.  v0:= v2[v0];
  #L5330e6.  v1:= v1 + 1;
  #L5330ea.  goto L5330b6;
  #L5330ec.  v5:= 0I;
  #L5330ee.  return v5;
}
procedure `n.i` `f`(`n.a` v3 @kind this, `int` v4 ) @signature `Ln/a;.f:(I)Ln/i;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L53333c.  v0:= v3.`n.a.i` @type ^`int`;
  #L533340.  v1:= 0I;
  #L533342.  v2:= -1I;
  #L533344.  if v0 == v2 then goto L533378;
  #L533348.  v2:= v3.`n.a.a` @type ^`int`;
  #L53334c.  if v1 >= v2 then goto L533378;
  #L533350.  if v1 != v4 then goto L53336a;
  #L533354.  v4:= v3.`n.a.c` @type ^`n.c` @kind object;
  #L533358.  v4:= v4.`n.c.d` @type ^`n.i`[] @kind object;
  #L53335c.  v1:= v3.`n.a.f` @type ^`int`[] @kind object;
  #L533360.  v0:= v1[v0];
  #L533364.  v4:= v4[v0] @kind object;
  #L533368.  return v4 @kind object;
  #L53336a.  v2:= v3.`n.a.g` @type ^`int`[] @kind object;
  #L53336e.  v0:= v2[v0];
  #L533372.  v1:= v1 + 1;
  #L533376.  goto L533342;
  #L533378.  v4:= 0I;
  #L53337a.  return v4 @kind object;
}
procedure `void` `g`(`n.a` v5 @kind this) @signature `Ln/a;.g:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L533738.  v0:= v5.`n.a.i` @type ^`int`;
  #L53373c.  v1:= 0I;
  #L53373e.  v2:= -1I;
  #L533740.  if v0 == v2 then goto L53376e;
  #L533744.  v2:= v5.`n.a.a` @type ^`int`;
  #L533748.  if v1 >= v2 then goto L53376e;
  #L53374c.  v2:= v5.`n.a.h` @type ^`float`[] @kind object;
  #L533750.  v3:= v2[v0];
  #L533754.  v4:= -1.0F;
  #L533758.  v3:= v3 * v4 @kind float;
  #L53375c.  v2[v0]:= v3;
  #L533760.  v2:= v5.`n.a.g` @type ^`int`[] @kind object;
  #L533764.  v0:= v2[v0];
  #L533768.  v1:= v1 + 1;
  #L53376c.  goto L53373e;
  #L53376e.  return @kind void;
}
procedure `float` `h`(`n.a` v3 @kind this, `int` v4 ) @signature `Ln/a;.h:(I)F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L533100.  v0:= v3.`n.a.i` @type ^`int`;
  #L533104.  v1:= 0I;
  #L533106.  v2:= -1I;
  #L533108.  if v0 == v2 then goto L533130;
  #L53310c.  v2:= v3.`n.a.a` @type ^`int`;
  #L533110.  if v1 >= v2 then goto L533130;
  #L533114.  if v1 != v4 then goto L533122;
  #L533118.  v4:= v3.`n.a.h` @type ^`float`[] @kind object;
  #L53311c.  v4:= v4[v0];
  #L533120.  return v4;
  #L533122.  v2:= v3.`n.a.g` @type ^`int`[] @kind object;
  #L533126.  v0:= v2[v0];
  #L53312a.  v1:= v1 + 1;
  #L53312e.  goto L533106;
  #L533130.  v4:= 0I;
  #L533132.  return v4;
}
procedure `boolean` `i`(`n.a` v6 @kind this, `n.i` v7 @kind object) @signature `Ln/a;.i:(Ln/i;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L533060.  v0:= v6.`n.a.i` @type ^`int`;
  #L533064.  v1:= -1I;
  #L533066.  v2:= 0I;
  #L533068.  if v0 != v1 then goto L53306e;
  #L53306c.  return v2;
  #L53306e.  v3:= 0I;
  #L533070.  if v0 == v1 then goto L53309e;
  #L533074.  v4:= v6.`n.a.a` @type ^`int`;
  #L533078.  if v3 >= v4 then goto L53309e;
  #L53307c.  v4:= v6.`n.a.f` @type ^`int`[] @kind object;
  #L533080.  v4:= v4[v0];
  #L533084.  v5:= v7.`n.i.i` @type ^`int`;
  #L533088.  if v4 != v5 then goto L533090;
  #L53308c.  v7:= 1I;
  #L53308e.  return v7;
  #L533090.  v4:= v6.`n.a.g` @type ^`int`[] @kind object;
  #L533094.  v0:= v4[v0];
  #L533098.  v3:= v3 + 1;
  #L53309c.  goto L533070;
  #L53309e.  return v2;
}
procedure `void` `j`(`n.a` v4 @kind this, `float` v5 ) @signature `Ln/a;.j:(F)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L5336f4.  v0:= v4.`n.a.i` @type ^`int`;
  #L5336f8.  v1:= 0I;
  #L5336fa.  v2:= -1I;
  #L5336fc.  if v0 == v2 then goto L533724;
  #L533700.  v2:= v4.`n.a.a` @type ^`int`;
  #L533704.  if v1 >= v2 then goto L533724;
  #L533708.  v2:= v4.`n.a.h` @type ^`float`[] @kind object;
  #L53370c.  v3:= v2[v0];
  #L533710.  v3:= v3 / v5 @kind float;
  #L533712.  v2[v0]:= v3;
  #L533716.  v2:= v4.`n.a.g` @type ^`int`[] @kind object;
  #L53371a.  v0:= v2[v0];
  #L53371e.  v1:= v1 + 1;
  #L533722.  goto L5336fa;
  #L533724.  return @kind void;
}
procedure `float` `k`(`n.a` v8 @kind this, `n.i` v9 @kind object, `boolean` v10 ) @signature `Ln/a;.k:(Ln/i;Z)F` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L533144.  v0:= v8.`n.a.e` @type ^`n.i` @kind object;
  #L533148.  if v0 != v9 then goto L533152;
  #L53314c.  v0:= 0I;
  #L53314e.  v8.`n.a.e` @type ^`n.i` := v0 @kind object;
  #L533152.  v0:= v8.`n.a.i` @type ^`int`;
  #L533156.  v1:= 0I;
  #L533158.  v2:= -1I;
  #L53315a.  if v0 != v2 then goto L533160;
  #L53315e.  return v1;
  #L533160.  v3:= 0I;
  #L533162.  v4:= -1I;
  #L533164.  if v0 == v2 then goto L5331fa;
  #L533168.  v5:= v8.`n.a.a` @type ^`int`;
  #L53316c.  if v3 >= v5 then goto L5331fa;
  #L533170.  v5:= v8.`n.a.f` @type ^`int`[] @kind object;
  #L533174.  v5:= v5[v0];
  #L533178.  v6:= v9.`n.i.i` @type ^`int`;
  #L53317c.  if v5 != v6 then goto L5331e6;
  #L533180.  v1:= v8.`n.a.i` @type ^`int`;
  #L533184.  if v0 != v1 then goto L533196;
  #L533188.  v1:= v8.`n.a.g` @type ^`int`[] @kind object;
  #L53318c.  v1:= v1[v0];
  #L533190.  v8.`n.a.i` @type ^`int` := v1;
  #L533194.  goto L5331a2;
  #L533196.  v1:= v8.`n.a.g` @type ^`int`[] @kind object;
  #L53319a.  v3:= v1[v0];
  #L53319e.  v1[v4]:= v3;
  #L5331a2.  if v10 == 0 then goto L5331b0;
  #L5331a6.  v10:= v8.`n.a.b` @type ^`n.b` @kind object;
  #L5331aa.  call `d`(v9, v10) @signature `Ln/i;.d:(Ln/b;)V` @kind virtual;
  #L5331b0.  v10:= v9.`n.i.s` @type ^`int`;
  #L5331b4.  v10:= v10 + -1;
  #L5331b8.  v9.`n.i.s` @type ^`int` := v10;
  #L5331bc.  v9:= v8.`n.a.a` @type ^`int`;
  #L5331c0.  v9:= v9 + -1;
  #L5331c4.  v8.`n.a.a` @type ^`int` := v9;
  #L5331c8.  v9:= v8.`n.a.f` @type ^`int`[] @kind object;
  #L5331cc.  v9[v0]:= v2;
  #L5331d0.  v9:= v8.`n.a.k` @type ^`boolean` @kind boolean;
  #L5331d4.  if v9 == 0 then goto L5331dc;
  #L5331d8.  v8.`n.a.j` @type ^`int` := v0;
  #L5331dc.  v9:= v8.`n.a.h` @type ^`float`[] @kind object;
  #L5331e0.  v9:= v9[v0];
  #L5331e4.  return v9;
  #L5331e6.  v4:= v8.`n.a.g` @type ^`int`[] @kind object;
  #L5331ea.  v4:= v4[v0];
  #L5331ee.  v3:= v3 + 1;
  #L5331f2.  v7:= v4;
  #L5331f4.  v4:= v0;
  #L5331f6.  v0:= v7;
  #L5331f8.  goto L533164;
  #L5331fa.  return v1;
}
procedure `java.lang.String` `toString`(`n.a` v5 @kind this) @signature `Ln/a;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L533280.  v0:= v5.`n.a.i` @type ^`int`;
  #L533284.  v1:= "" @kind object;
  #L533288.  v2:= 0I;
  #L53328a.  v3:= -1I;
  #L53328c.  if v0 == v3 then goto L53332a;
  #L533290.  v3:= v5.`n.a.a` @type ^`int`;
  #L533294.  if v2 >= v3 then goto L53332a;
  #L533298.  v3:= new `java.lang.StringBuilder`;
  #L53329c.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L5332a2.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L5332a8.  v1:= " -> " @kind object;
  #L5332ac.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L5332b2.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L5332b8.  v1:= temp @kind object;
  #L5332ba.  v3:= new `java.lang.StringBuilder`;
  #L5332be.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L5332c4.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L5332ca.  v1:= v5.`n.a.h` @type ^`float`[] @kind object;
  #L5332ce.  v1:= v1[v0];
  #L5332d2.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(F)Ljava/lang/StringBuilder;` @kind virtual;
  #L5332d8.  v1:= " : " @kind object;
  #L5332dc.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L5332e2.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L5332e8.  v1:= temp @kind object;
  #L5332ea.  v3:= new `java.lang.StringBuilder`;
  #L5332ee.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L5332f4.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L5332fa.  v1:= v5.`n.a.c` @type ^`n.c` @kind object;
  #L5332fe.  v1:= v1.`n.c.d` @type ^`n.i`[] @kind object;
  #L533302.  v4:= v5.`n.a.f` @type ^`int`[] @kind object;
  #L533306.  v4:= v4[v0];
  #L53330a.  v1:= v1[v4] @kind object;
  #L53330e.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L533314.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L53331a.  v1:= temp @kind object;
  #L53331c.  v3:= v5.`n.a.g` @type ^`int`[] @kind object;
  #L533320.  v0:= v3[v0];
  #L533324.  v2:= v2 + 1;
  #L533328.  goto L53328a;
  #L53332a.  return v1 @kind object;
}
