record `n.g` @kind class @AccessFlag  extends `n.f` @kind interface {
  `java.lang.Object`[] `n.g.a` @AccessFlag PRIVATE_FINAL;
  `int` `n.g.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`n.g` v1 @kind this, `int` v2 ) @signature `Ln/g;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L5359b8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L5359be.  if v2 <= 0 then goto L5359cc;
  #L5359c2.  v2:= new `java.lang.Object`[v2];
  #L5359c6.  v1.`n.g.a` @type ^`java.lang.Object`[] := v2 @kind object;
  #L5359ca.  return @kind void;
  #L5359cc.  v2:= new `java.lang.IllegalArgumentException`;
  #L5359d0.  v0:= "The max pool size must be > 0" @kind object;
  #L5359d4.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5359da.  throw v2;
}
procedure `boolean` `a`(`n.g` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Ln/g;.a:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L535950.  v0:= v3.`n.g.b` @type ^`int`;
  #L535954.  v1:= v3.`n.g.a` @type ^`java.lang.Object`[] @kind object;
  #L535958.  v2:= length @variable v1;
  #L53595a.  if v0 >= v2 then goto L53596c;
  #L53595e.  v1[v0]:= v4 @kind object;
  #L535962.  v4:= 1I;
  #L535964.  v0:= v0 + v4 @kind int;
  #L535966.  v3.`n.g.b` @type ^`int` := v0;
  #L53596a.  return v4;
  #L53596c.  v4:= 0I;
  #L53596e.  return v4;
}
procedure `java.lang.Object` `b`(`n.g` v5 @kind this) @signature `Ln/g;.b:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L535980.  v0:= v5.`n.g.b` @type ^`int`;
  #L535984.  v1:= 0I;
  #L535986.  if v0 <= 0 then goto L5359a4;
  #L53598a.  v2:= v0 + -1;
  #L53598e.  v3:= v5.`n.g.a` @type ^`java.lang.Object`[] @kind object;
  #L535992.  v4:= v3[v2] @kind object;
  #L535996.  v3[v2]:= v1 @kind object;
  #L53599a.  v0:= v0 + -1;
  #L53599e.  v5.`n.g.b` @type ^`int` := v0;
  #L5359a2.  return v4 @kind object;
  #L5359a4.  return v1 @kind object;
}
procedure `void` `c`(`n.g` v5 @kind this, `java.lang.Object`[] v6 @kind object, `int` v7 ) @signature `Ln/g;.c:([Ljava/lang/Object;I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L5359ec.  v0:= length @variable v6;
  #L5359ee.  if v7 <= v0 then goto L5359f4;
  #L5359f2.  v7:= length @variable v6;
  #L5359f4.  v0:= 0I;
  #L5359f6.  if v0 >= v7 then goto L535a1e;
  #L5359fa.  v1:= v6[v0] @kind object;
  #L5359fe.  v2:= v5.`n.g.b` @type ^`int`;
  #L535a02.  v3:= v5.`n.g.a` @type ^`java.lang.Object`[] @kind object;
  #L535a06.  v4:= length @variable v3;
  #L535a08.  if v2 >= v4 then goto L535a18;
  #L535a0c.  v3[v2]:= v1 @kind object;
  #L535a10.  v2:= v2 + 1;
  #L535a14.  v5.`n.g.b` @type ^`int` := v2;
  #L535a18.  v0:= v0 + 1;
  #L535a1c.  goto L5359f6;
  #L535a1e.  return @kind void;
}
