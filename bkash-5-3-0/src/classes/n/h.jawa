record `n.h` @kind class @AccessFlag PUBLIC extends `n.b` @kind class {
  `int` `n.h.g` @AccessFlag PRIVATE;
  `n.i`[] `n.h.h` @AccessFlag PRIVATE;
  `n.i`[] `n.h.i` @AccessFlag PRIVATE;
  `int` `n.h.j` @AccessFlag PRIVATE;
  `n.h$b` `n.h.k` @AccessFlag ;
}
procedure `void` `<init>`(`n.h` v1 @kind this, `n.c` v2 @kind object) @signature `Ln/h;.<init>:(Ln/c;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L535e24.  call `<init>`(v1, v2) @signature `Ln/b;.<init>:(Ln/c;)V` @kind direct;
  #L535e2a.  v2:= 128I;
  #L535e2e.  v1.`n.h.g` @type ^`int` := v2;
  #L535e32.  v0:= new `n.i`[v2];
  #L535e36.  v1.`n.h.h` @type ^`n.i`[] := v0 @kind object;
  #L535e3a.  v2:= new `n.i`[v2];
  #L535e3e.  v1.`n.h.i` @type ^`n.i`[] := v2 @kind object;
  #L535e42.  v2:= 0I;
  #L535e44.  v1.`n.h.j` @type ^`int` := v2;
  #L535e48.  v2:= new `n.h$b`;
  #L535e4c.  call `<init>`(v2, v1, v1) @signature `Ln/h$b;.<init>:(Ln/h;Ln/h;)V` @kind direct;
  #L535e52.  v1.`n.h.k` @type ^`n.h$b` := v2 @kind object;
  #L535e56.  return @kind void;
}
procedure `void` `E`(`n.h` v0 @kind object, `n.i` v1 @kind object) @signature `Ln/h;.E:(Ln/h;Ln/i;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L535e68.  call `G`(v0, v1) @signature `Ln/h;.G:(Ln/i;)V` @kind direct;
  #L535e6e.  return @kind void;
}
procedure `void` `F`(`n.h` v5 @kind this, `n.i` v6 @kind object) @signature `Ln/h;.F:(Ln/i;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L535ebc.  v0:= v5.`n.h.j` @type ^`int`;
  #L535ec0.  v1:= 1I;
  #L535ec2.  v0:= v0 + v1 @kind int;
  #L535ec4.  v2:= v5.`n.h.h` @type ^`n.i`[] @kind object;
  #L535ec8.  v3:= length @variable v2;
  #L535eca.  if v0 <= v3 then goto L535efa;
  #L535ece.  v0:= length @variable v2;
  #L535ed0.  v0:= v0 * 2;
  #L535ed4.  call temp:= `copyOf`(v2, v0) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L535eda.  v0:= temp @kind object;
  #L535edc.  v0:= (`n.i`[]) v0 @kind object;
  #L535ee0.  v5.`n.h.h` @type ^`n.i`[] := v0 @kind object;
  #L535ee4.  v2:= length @variable v0;
  #L535ee6.  v2:= v2 * 2;
  #L535eea.  call temp:= `copyOf`(v0, v2) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L535ef0.  v0:= temp @kind object;
  #L535ef2.  v0:= (`n.i`[]) v0 @kind object;
  #L535ef6.  v5.`n.h.i` @type ^`n.i`[] := v0 @kind object;
  #L535efa.  v0:= v5.`n.h.h` @type ^`n.i`[] @kind object;
  #L535efe.  v2:= v5.`n.h.j` @type ^`int`;
  #L535f02.  v0[v2]:= v6 @kind object;
  #L535f06.  v2:= v2 + v1 @kind int;
  #L535f08.  v5.`n.h.j` @type ^`int` := v2;
  #L535f0c.  if v2 <= v1 then goto L535f76;
  #L535f10.  v2:= v2 - v1 @kind int;
  #L535f12.  v0:= v0[v2] @kind object;
  #L535f16.  v0:= v0.`n.i.i` @type ^`int`;
  #L535f1a.  v2:= v6.`n.i.i` @type ^`int`;
  #L535f1e.  if v0 <= v2 then goto L535f76;
  #L535f22.  v0:= 0I;
  #L535f24.  v2:= 0I;
  #L535f26.  v3:= v5.`n.h.j` @type ^`int`;
  #L535f2a.  if v2 >= v3 then goto L535f44;
  #L535f2e.  v3:= v5.`n.h.i` @type ^`n.i`[] @kind object;
  #L535f32.  v4:= v5.`n.h.h` @type ^`n.i`[] @kind object;
  #L535f36.  v4:= v4[v2] @kind object;
  #L535f3a.  v3[v2]:= v4 @kind object;
  #L535f3e.  v2:= v2 + 1;
  #L535f42.  goto L535f26;
  #L535f44.  v2:= v5.`n.h.i` @type ^`n.i`[] @kind object;
  #L535f48.  v4:= new `n.h$a`;
  #L535f4c.  call `<init>`(v4, v5) @signature `Ln/h$a;.<init>:(Ln/h;)V` @kind direct;
  #L535f52.  call `sort`(v2, v0, v3, v4) @signature `Ljava/util/Arrays;.sort:([Ljava/lang/Object;IILjava/util/Comparator;)V` @kind static;
  #L535f58.  v2:= v5.`n.h.j` @type ^`int`;
  #L535f5c.  if v0 >= v2 then goto L535f76;
  #L535f60.  v2:= v5.`n.h.h` @type ^`n.i`[] @kind object;
  #L535f64.  v3:= v5.`n.h.i` @type ^`n.i`[] @kind object;
  #L535f68.  v3:= v3[v0] @kind object;
  #L535f6c.  v2[v0]:= v3 @kind object;
  #L535f70.  v0:= v0 + 1;
  #L535f74.  goto L535f58;
  #L535f76.  v6.`n.i.g` @type ^`boolean` := v1 @kind boolean;
  #L535f7a.  call `a`(v6, v5) @signature `Ln/i;.a:(Ln/b;)V` @kind virtual;
  #L535f80.  return @kind void;
}
procedure `void` `G`(`n.h` v5 @kind this, `n.i` v6 @kind object) @signature `Ln/h;.G:(Ln/i;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L535fb4.  v0:= 0I;
  #L535fb6.  v1:= 0I;
  #L535fb8.  v2:= v5.`n.h.j` @type ^`int`;
  #L535fbc.  if v1 >= v2 then goto L536000;
  #L535fc0.  v2:= v5.`n.h.h` @type ^`n.i`[] @kind object;
  #L535fc4.  v2:= v2[v1] @kind object;
  #L535fc8.  if v2 != v6 then goto L535ffa;
  #L535fcc.  v2:= v5.`n.h.j` @type ^`int`;
  #L535fd0.  v3:= v2 + -1;
  #L535fd4.  if v1 >= v3 then goto L535fec;
  #L535fd8.  v2:= v5.`n.h.h` @type ^`n.i`[] @kind object;
  #L535fdc.  v3:= v1 + 1;
  #L535fe0.  v4:= v2[v3] @kind object;
  #L535fe4.  v2[v1]:= v4 @kind object;
  #L535fe8.  v1:= v3;
  #L535fea.  goto L535fcc;
  #L535fec.  v2:= v2 + -1;
  #L535ff0.  v5.`n.h.j` @type ^`int` := v2;
  #L535ff4.  v6.`n.i.g` @type ^`boolean` := v0 @kind boolean;
  #L535ff8.  return @kind void;
  #L535ffa.  v1:= v1 + 1;
  #L535ffe.  goto L535fb8;
  #L536000.  return @kind void;
}
procedure `void` `B`(`n.h` v5 @kind this, `n.d` v6 @kind object, `n.b` v7 @kind object, `boolean` v8 ) @signature `Ln/h;.B:(Ln/d;Ln/b;Z)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L536014.  v6:= v7.`n.b.a` @type ^`n.i` @kind object;
  #L536018.  if v6 != 0 then goto L53601e;
  #L53601c.  return @kind void;
  #L53601e.  v8:= v7.`n.b.e` @type ^`n.b$a` @kind object;
  #L536022.  call temp:= `d`(v8) @signature `Ln/b$a;.d:()I` @kind interface;
  #L536028.  v0:= temp;
  #L53602a.  v1:= 0I;
  #L53602c.  if v1 >= v0 then goto L536078;
  #L536030.  call temp:= `f`(v8, v1) @signature `Ln/b$a;.f:(I)Ln/i;` @kind interface;
  #L536036.  v2:= temp @kind object;
  #L536038.  call temp:= `h`(v8, v1) @signature `Ln/b$a;.h:(I)F` @kind interface;
  #L53603e.  v3:= temp;
  #L536040.  v4:= v5.`n.h.k` @type ^`n.h$b` @kind object;
  #L536044.  call `b`(v4, v2) @signature `Ln/h$b;.b:(Ln/i;)V` @kind virtual;
  #L53604a.  v4:= v5.`n.h.k` @type ^`n.h$b` @kind object;
  #L53604e.  call temp:= `a`(v4, v6, v3) @signature `Ln/h$b;.a:(Ln/i;F)Z` @kind virtual;
  #L536054.  v4:= temp;
  #L536056.  if v4 == 0 then goto L536060;
  #L53605a.  call `F`(v5, v2) @signature `Ln/h;.F:(Ln/i;)V` @kind direct;
  #L536060.  v2:= v5.`n.b.b` @type ^`float`;
  #L536064.  v4:= v7.`n.b.b` @type ^`float`;
  #L536068.  v4:= v4 * v3 @kind float;
  #L53606c.  v2:= v2 + v4 @kind float;
  #L53606e.  v5.`n.b.b` @type ^`float` := v2;
  #L536072.  v1:= v1 + 1;
  #L536076.  goto L53602c;
  #L536078.  call `G`(v5, v6) @signature `Ln/h;.G:(Ln/i;)V` @kind direct;
  #L53607e.  return @kind void;
}
procedure `void` `a`(`n.h` v3 @kind this, `n.i` v4 @kind object) @signature `Ln/h;.a:(Ln/i;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L535e80.  v0:= v3.`n.h.k` @type ^`n.h$b` @kind object;
  #L535e84.  call `b`(v0, v4) @signature `Ln/h$b;.b:(Ln/i;)V` @kind virtual;
  #L535e8a.  v0:= v3.`n.h.k` @type ^`n.h$b` @kind object;
  #L535e8e.  call `e`(v0) @signature `Ln/h$b;.e:()V` @kind virtual;
  #L535e94.  v0:= v4.`n.i.o` @type ^`float`[] @kind object;
  #L535e98.  v1:= v4.`n.i.k` @type ^`int`;
  #L535e9c.  v2:= 1.0F;
  #L535ea0.  v0[v1]:= v2;
  #L535ea4.  call `F`(v3, v4) @signature `Ln/h;.F:(Ln/i;)V` @kind direct;
  #L535eaa.  return @kind void;
}
procedure `n.i` `b`(`n.h` v4 @kind this, `n.d` v5 @kind object, `boolean`[] v6 @kind object) @signature `Ln/h;.b:(Ln/d;[Z)Ln/i;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L535d9c.  v5:= -1I;
  #L535d9e.  v0:= 0I;
  #L535da0.  v1:= -1I;
  #L535da2.  v2:= v4.`n.h.j` @type ^`int`;
  #L535da6.  if v0 >= v2 then goto L535e00;
  #L535daa.  v2:= v4.`n.h.h` @type ^`n.i`[] @kind object;
  #L535dae.  v2:= v2[v0] @kind object;
  #L535db2.  v3:= v2.`n.i.i` @type ^`int`;
  #L535db6.  v3:= v6[v3] @kind boolean;
  #L535dba.  if v3 == 0 then goto L535dc0;
  #L535dbe.  goto L535dfa;
  #L535dc0.  v3:= v4.`n.h.k` @type ^`n.h$b` @kind object;
  #L535dc4.  call `b`(v3, v2) @signature `Ln/h$b;.b:(Ln/i;)V` @kind virtual;
  #L535dca.  if v1 != v5 then goto L535de0;
  #L535dce.  v2:= v4.`n.h.k` @type ^`n.h$b` @kind object;
  #L535dd2.  call temp:= `c`(v2) @signature `Ln/h$b;.c:()Z` @kind virtual;
  #L535dd8.  v2:= temp;
  #L535dda.  if v2 == 0 then goto L535dfa;
  #L535dde.  goto L535df8;
  #L535de0.  v2:= v4.`n.h.k` @type ^`n.h$b` @kind object;
  #L535de4.  v3:= v4.`n.h.h` @type ^`n.i`[] @kind object;
  #L535de8.  v3:= v3[v1] @kind object;
  #L535dec.  call temp:= `d`(v2, v3) @signature `Ln/h$b;.d:(Ln/i;)Z` @kind virtual;
  #L535df2.  v2:= temp;
  #L535df4.  if v2 == 0 then goto L535dfa;
  #L535df8.  v1:= v0;
  #L535dfa.  v0:= v0 + 1;
  #L535dfe.  goto L535da2;
  #L535e00.  if v1 != v5 then goto L535e08;
  #L535e04.  v5:= 0I;
  #L535e06.  return v5 @kind object;
  #L535e08.  v5:= v4.`n.h.h` @type ^`n.i`[] @kind object;
  #L535e0c.  v5:= v5[v1] @kind object;
  #L535e10.  return v5 @kind object;
}
procedure `void` `clear`(`n.h` v1 @kind this) @signature `Ln/h;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L535f94.  v0:= 0I;
  #L535f96.  v1.`n.h.j` @type ^`int` := v0;
  #L535f9a.  v0:= 0I;
  #L535f9c.  v1.`n.b.b` @type ^`float` := v0;
  #L535fa0.  return @kind void;
}
procedure `boolean` `isEmpty`(`n.h` v1 @kind this) @signature `Ln/h;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L535ce0.  v0:= v1.`n.h.j` @type ^`int`;
  #L535ce4.  if v0 != 0 then goto L535cec;
  #L535ce8.  v0:= 1I;
  #L535cea.  goto L535cee;
  #L535cec.  v0:= 0I;
  #L535cee.  return v0;
}
procedure `java.lang.String` `toString`(`n.h` v4 @kind this) @signature `Ln/h;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L535d00.  v0:= new `java.lang.StringBuilder`;
  #L535d04.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L535d0a.  v1:= "" @kind object;
  #L535d0e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L535d14.  v1:= " goal -> (" @kind object;
  #L535d18.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L535d1e.  v1:= v4.`n.b.b` @type ^`float`;
  #L535d22.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(F)Ljava/lang/StringBuilder;` @kind virtual;
  #L535d28.  v1:= ") : " @kind object;
  #L535d2c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L535d32.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L535d38.  v0:= temp @kind object;
  #L535d3a.  v1:= 0I;
  #L535d3c.  v2:= v4.`n.h.j` @type ^`int`;
  #L535d40.  if v1 >= v2 then goto L535d88;
  #L535d44.  v2:= v4.`n.h.h` @type ^`n.i`[] @kind object;
  #L535d48.  v2:= v2[v1] @kind object;
  #L535d4c.  v3:= v4.`n.h.k` @type ^`n.h$b` @kind object;
  #L535d50.  call `b`(v3, v2) @signature `Ln/h$b;.b:(Ln/i;)V` @kind virtual;
  #L535d56.  v2:= new `java.lang.StringBuilder`;
  #L535d5a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L535d60.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L535d66.  v0:= v4.`n.h.k` @type ^`n.h$b` @kind object;
  #L535d6a.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L535d70.  v0:= " " @kind object;
  #L535d74.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L535d7a.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L535d80.  v0:= temp @kind object;
  #L535d82.  v1:= v1 + 1;
  #L535d86.  goto L535d3c;
  #L535d88.  return v0 @kind object;
}
