record `n.b` @kind class @AccessFlag PUBLIC extends `n.d$a` @kind interface {
  `n.i` `n.b.a` @AccessFlag ;
  `float` `n.b.b` @AccessFlag ;
  `boolean` `n.b.c` @AccessFlag ;
  `java.util.ArrayList` `n.b.d` @AccessFlag ;
  `n.b$a` `n.b.e` @AccessFlag PUBLIC;
  `boolean` `n.b.f` @AccessFlag ;
}
procedure `void` `<init>`(`n.b` v1 @kind this) @signature `Ln/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L534350.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L534356.  v0:= 0I;
  #L534358.  v1.`n.b.a` @type ^`n.i` := v0 @kind object;
  #L53435c.  v0:= 0I;
  #L53435e.  v1.`n.b.b` @type ^`float` := v0;
  #L534362.  v0:= new `java.util.ArrayList`;
  #L534366.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L53436c.  v1.`n.b.d` @type ^`java.util.ArrayList` := v0 @kind object;
  #L534370.  v0:= 0I;
  #L534372.  v1.`n.b.f` @type ^`boolean` := v0 @kind boolean;
  #L534376.  return @kind void;
}
procedure `void` `<init>`(`n.b` v1 @kind this, `n.c` v2 @kind object) @signature `Ln/b;.<init>:(Ln/c;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L534388.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L53438e.  v0:= 0I;
  #L534390.  v1.`n.b.a` @type ^`n.i` := v0 @kind object;
  #L534394.  v0:= 0I;
  #L534396.  v1.`n.b.b` @type ^`float` := v0;
  #L53439a.  v0:= new `java.util.ArrayList`;
  #L53439e.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L5343a4.  v1.`n.b.d` @type ^`java.util.ArrayList` := v0 @kind object;
  #L5343a8.  v0:= 0I;
  #L5343aa.  v1.`n.b.f` @type ^`boolean` := v0 @kind boolean;
  #L5343ae.  v0:= new `n.a`;
  #L5343b2.  call `<init>`(v0, v1, v2) @signature `Ln/a;.<init>:(Ln/b;Ln/c;)V` @kind direct;
  #L5343b8.  v1.`n.b.e` @type ^`n.b$a` := v0 @kind object;
  #L5343bc.  return @kind void;
}
procedure `boolean` `u`(`n.b` v0 @kind this, `n.i` v1 @kind object, `n.d` v2 @kind object) @signature `Ln/b;.u:(Ln/i;Ln/d;)Z` @AccessFlag PRIVATE {
    temp;

  #L533a78.  v1:= v1.`n.i.s` @type ^`int`;
  #L533a7c.  v2:= 1I;
  #L533a7e.  if v1 > v2 then goto L533a84;
  #L533a82.  goto L533a86;
  #L533a84.  v2:= 0I;
  #L533a86.  return v2;
}
procedure `n.i` `w`(`n.b` v9 @kind this, `boolean`[] v10 @kind object, `n.i` v11 @kind object) @signature `Ln/b;.w:([ZLn/i;)Ln/i;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L5342cc.  v0:= v9.`n.b.e` @type ^`n.b$a` @kind object;
  #L5342d0.  call temp:= `d`(v0) @signature `Ln/b$a;.d:()I` @kind interface;
  #L5342d6.  v0:= temp;
  #L5342d8.  v1:= 0I;
  #L5342da.  v2:= 0I;
  #L5342dc.  v3:= 0I;
  #L5342de.  v4:= 0I;
  #L5342e0.  if v3 >= v0 then goto L53433e;
  #L5342e4.  v5:= v9.`n.b.e` @type ^`n.b$a` @kind object;
  #L5342e8.  call temp:= `h`(v5, v3) @signature `Ln/b$a;.h:(I)F` @kind interface;
  #L5342ee.  v5:= temp;
  #L5342f0.  v6:= fcmpg(v5, v1);
  #L5342f4.  if v6 >= 0 then goto L534338;
  #L5342f8.  v6:= v9.`n.b.e` @type ^`n.b$a` @kind object;
  #L5342fc.  call temp:= `f`(v6, v3) @signature `Ln/b$a;.f:(I)Ln/i;` @kind interface;
  #L534302.  v6:= temp @kind object;
  #L534304.  if v10 == 0 then goto L534314;
  #L534308.  v7:= v6.`n.i.i` @type ^`int`;
  #L53430c.  v7:= v10[v7] @kind boolean;
  #L534310.  if v7 != 0 then goto L534338;
  #L534314.  if v6 == v11 then goto L534338;
  #L534318.  v7:= v6.`n.i.p` @type ^`n.i$a` @kind object;
  #L53431c.  v8:= `@@n.i$a.SLACK` @type ^`n.i$a` @kind object;
  #L534320.  if v7 == v8 then goto L53432c;
  #L534324.  v8:= `@@n.i$a.ERROR` @type ^`n.i$a` @kind object;
  #L534328.  if v7 != v8 then goto L534338;
  #L53432c.  v7:= fcmpg(v5, v4);
  #L534330.  if v7 >= 0 then goto L534338;
  #L534334.  v4:= v5;
  #L534336.  v2:= v6 @kind object;
  #L534338.  v3:= v3 + 1;
  #L53433c.  goto L5342e0;
  #L53433e.  return v2 @kind object;
}
procedure `void` `A`(`n.b` v3 @kind this, `n.d` v4 @kind object, `n.i` v5 @kind object, `boolean` v6 ) @signature `Ln/b;.A:(Ln/d;Ln/i;Z)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L53459c.  if v5 == 0 then goto L5345fe;
  #L5345a0.  v0:= v5.`n.i.m` @type ^`boolean` @kind boolean;
  #L5345a4.  if v0 != 0 then goto L5345aa;
  #L5345a8.  goto L5345fe;
  #L5345aa.  v0:= v3.`n.b.e` @type ^`n.b$a` @kind object;
  #L5345ae.  call temp:= `e`(v0, v5) @signature `Ln/b$a;.e:(Ln/i;)F` @kind interface;
  #L5345b4.  v0:= temp;
  #L5345b6.  v1:= v3.`n.b.b` @type ^`float`;
  #L5345ba.  v2:= v5.`n.i.l` @type ^`float`;
  #L5345be.  v2:= v2 * v0 @kind float;
  #L5345c2.  v1:= v1 + v2 @kind float;
  #L5345c4.  v3.`n.b.b` @type ^`float` := v1;
  #L5345c8.  v0:= v3.`n.b.e` @type ^`n.b$a` @kind object;
  #L5345cc.  call temp:= `k`(v0, v5, v6) @signature `Ln/b$a;.k:(Ln/i;Z)F` @kind interface;
  #L5345d2.  if v6 == 0 then goto L5345dc;
  #L5345d6.  call `d`(v5, v3) @signature `Ln/i;.d:(Ln/b;)V` @kind virtual;
  #L5345dc.  v5:= `@@n.d.t` @type ^`boolean` @kind boolean;
  #L5345e0.  if v5 == 0 then goto L5345fe;
  #L5345e4.  v5:= v3.`n.b.e` @type ^`n.b$a` @kind object;
  #L5345e8.  call temp:= `d`(v5) @signature `Ln/b$a;.d:()I` @kind interface;
  #L5345ee.  v5:= temp;
  #L5345f0.  if v5 != 0 then goto L5345fe;
  #L5345f4.  v5:= 1I;
  #L5345f6.  v3.`n.b.f` @type ^`boolean` := v5 @kind boolean;
  #L5345fa.  v4.`n.d.a` @type ^`boolean` := v5 @kind boolean;
  #L5345fe.  return @kind void;
}
procedure `void` `B`(`n.b` v3 @kind this, `n.d` v4 @kind object, `n.b` v5 @kind object, `boolean` v6 ) @signature `Ln/b;.B:(Ln/d;Ln/b;Z)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L534610.  v0:= v3.`n.b.e` @type ^`n.b$a` @kind object;
  #L534614.  call temp:= `b`(v0, v5, v6) @signature `Ln/b$a;.b:(Ln/b;Z)F` @kind interface;
  #L53461a.  v0:= temp;
  #L53461c.  v1:= v3.`n.b.b` @type ^`float`;
  #L534620.  v2:= v5.`n.b.b` @type ^`float`;
  #L534624.  v2:= v2 * v0 @kind float;
  #L534628.  v1:= v1 + v2 @kind float;
  #L53462a.  v3.`n.b.b` @type ^`float` := v1;
  #L53462e.  if v6 == 0 then goto L53463c;
  #L534632.  v5:= v5.`n.b.a` @type ^`n.i` @kind object;
  #L534636.  call `d`(v5, v3) @signature `Ln/i;.d:(Ln/b;)V` @kind virtual;
  #L53463c.  v5:= `@@n.d.t` @type ^`boolean` @kind boolean;
  #L534640.  if v5 == 0 then goto L534666;
  #L534644.  v5:= v3.`n.b.a` @type ^`n.i` @kind object;
  #L534648.  if v5 == 0 then goto L534666;
  #L53464c.  v5:= v3.`n.b.e` @type ^`n.b$a` @kind object;
  #L534650.  call temp:= `d`(v5) @signature `Ln/b$a;.d:()I` @kind interface;
  #L534656.  v5:= temp;
  #L534658.  if v5 != 0 then goto L534666;
  #L53465c.  v5:= 1I;
  #L53465e.  v3.`n.b.f` @type ^`boolean` := v5 @kind boolean;
  #L534662.  v4.`n.d.a` @type ^`boolean` := v5 @kind boolean;
  #L534666.  return @kind void;
}
procedure `void` `C`(`n.b` v3 @kind this, `n.d` v4 @kind object, `n.i` v5 @kind object, `boolean` v6 ) @signature `Ln/b;.C:(Ln/d;Ln/i;Z)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L534678.  if v5 == 0 then goto L5346f4;
  #L53467c.  v0:= v5.`n.i.t` @type ^`boolean` @kind boolean;
  #L534680.  if v0 != 0 then goto L534686;
  #L534684.  goto L5346f4;
  #L534686.  v0:= v3.`n.b.e` @type ^`n.b$a` @kind object;
  #L53468a.  call temp:= `e`(v0, v5) @signature `Ln/b$a;.e:(Ln/i;)F` @kind interface;
  #L534690.  v0:= temp;
  #L534692.  v1:= v3.`n.b.b` @type ^`float`;
  #L534696.  v2:= v5.`n.i.v` @type ^`float`;
  #L53469a.  v2:= v2 * v0 @kind float;
  #L53469e.  v1:= v1 + v2 @kind float;
  #L5346a0.  v3.`n.b.b` @type ^`float` := v1;
  #L5346a4.  v1:= v3.`n.b.e` @type ^`n.b$a` @kind object;
  #L5346a8.  call temp:= `k`(v1, v5, v6) @signature `Ln/b$a;.k:(Ln/i;Z)F` @kind interface;
  #L5346ae.  if v6 == 0 then goto L5346b8;
  #L5346b2.  call `d`(v5, v3) @signature `Ln/i;.d:(Ln/b;)V` @kind virtual;
  #L5346b8.  v1:= v3.`n.b.e` @type ^`n.b$a` @kind object;
  #L5346bc.  v2:= v4.`n.d.n` @type ^`n.c` @kind object;
  #L5346c0.  v2:= v2.`n.c.d` @type ^`n.i`[] @kind object;
  #L5346c4.  v5:= v5.`n.i.u` @type ^`int`;
  #L5346c8.  v5:= v2[v5] @kind object;
  #L5346cc.  call `a`(v1, v5, v0, v6) @signature `Ln/b$a;.a:(Ln/i;FZ)V` @kind interface;
  #L5346d2.  v5:= `@@n.d.t` @type ^`boolean` @kind boolean;
  #L5346d6.  if v5 == 0 then goto L5346f4;
  #L5346da.  v5:= v3.`n.b.e` @type ^`n.b$a` @kind object;
  #L5346de.  call temp:= `d`(v5) @signature `Ln/b$a;.d:()I` @kind interface;
  #L5346e4.  v5:= temp;
  #L5346e6.  if v5 != 0 then goto L5346f4;
  #L5346ea.  v5:= 1I;
  #L5346ec.  v3.`n.b.f` @type ^`boolean` := v5 @kind boolean;
  #L5346f0.  v4.`n.d.a` @type ^`boolean` := v5 @kind boolean;
  #L5346f4.  return @kind void;
}
procedure `void` `D`(`n.b` v8 @kind this, `n.d` v9 @kind object) @signature `Ln/b;.D:(Ln/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L534708.  v0:= v9.`n.d.g` @type ^`n.b`[] @kind object;
  #L53470c.  v0:= length @variable v0;
  #L53470e.  if v0 != 0 then goto L534714;
  #L534712.  return @kind void;
  #L534714.  v0:= 0I;
  #L534716.  v1:= 0I;
  #L534718.  v2:= 1I;
  #L53471a.  if v1 != 0 then goto L5347d4;
  #L53471e.  v3:= v8.`n.b.e` @type ^`n.b$a` @kind object;
  #L534722.  call temp:= `d`(v3) @signature `Ln/b$a;.d:()I` @kind interface;
  #L534728.  v3:= temp;
  #L53472a.  v4:= 0I;
  #L53472c.  if v4 >= v3 then goto L534766;
  #L534730.  v5:= v8.`n.b.e` @type ^`n.b$a` @kind object;
  #L534734.  call temp:= `f`(v5, v4) @signature `Ln/b$a;.f:(I)Ln/i;` @kind interface;
  #L53473a.  v5:= temp @kind object;
  #L53473c.  v6:= v5.`n.i.j` @type ^`int`;
  #L534740.  v7:= -1I;
  #L534742.  if v6 != v7 then goto L534756;
  #L534746.  v6:= v5.`n.i.m` @type ^`boolean` @kind boolean;
  #L53474a.  if v6 != 0 then goto L534756;
  #L53474e.  v6:= v5.`n.i.t` @type ^`boolean` @kind boolean;
  #L534752.  if v6 == 0 then goto L534760;
  #L534756.  v6:= v8.`n.b.d` @type ^`java.util.ArrayList` @kind object;
  #L53475a.  call temp:= `add`(v6, v5) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L534760.  v4:= v4 + 1;
  #L534764.  goto L53472c;
  #L534766.  v3:= v8.`n.b.d` @type ^`java.util.ArrayList` @kind object;
  #L53476a.  call temp:= `size`(v3) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L534770.  v3:= temp;
  #L534772.  if v3 <= 0 then goto L5347d0;
  #L534776.  v4:= 0I;
  #L534778.  if v4 >= v3 then goto L5347c4;
  #L53477c.  v5:= v8.`n.b.d` @type ^`java.util.ArrayList` @kind object;
  #L534780.  call temp:= `get`(v5, v4) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L534786.  v5:= temp @kind object;
  #L534788.  v5:= (`n.i`) v5 @kind object;
  #L53478c.  v6:= v5.`n.i.m` @type ^`boolean` @kind boolean;
  #L534790.  if v6 == 0 then goto L53479c;
  #L534794.  call `A`(v8, v9, v5, v2) @signature `Ln/b;.A:(Ln/d;Ln/i;Z)V` @kind virtual;
  #L53479a.  goto L5347be;
  #L53479c.  v6:= v5.`n.i.t` @type ^`boolean` @kind boolean;
  #L5347a0.  if v6 == 0 then goto L5347ac;
  #L5347a4.  call `C`(v8, v9, v5, v2) @signature `Ln/b;.C:(Ln/d;Ln/i;Z)V` @kind virtual;
  #L5347aa.  goto L5347be;
  #L5347ac.  v6:= v9.`n.d.g` @type ^`n.b`[] @kind object;
  #L5347b0.  v5:= v5.`n.i.j` @type ^`int`;
  #L5347b4.  v5:= v6[v5] @kind object;
  #L5347b8.  call `B`(v8, v9, v5, v2) @signature `Ln/b;.B:(Ln/d;Ln/b;Z)V` @kind virtual;
  #L5347be.  v4:= v4 + 1;
  #L5347c2.  goto L534778;
  #L5347c4.  v2:= v8.`n.b.d` @type ^`java.util.ArrayList` @kind object;
  #L5347c8.  call `clear`(v2) @signature `Ljava/util/ArrayList;.clear:()V` @kind virtual;
  #L5347ce.  goto L534718;
  #L5347d0.  v1:= 1I;
  #L5347d2.  goto L534718;
  #L5347d4.  v0:= `@@n.d.t` @type ^`boolean` @kind boolean;
  #L5347d8.  if v0 == 0 then goto L5347fc;
  #L5347dc.  v0:= v8.`n.b.a` @type ^`n.i` @kind object;
  #L5347e0.  if v0 == 0 then goto L5347fc;
  #L5347e4.  v0:= v8.`n.b.e` @type ^`n.b$a` @kind object;
  #L5347e8.  call temp:= `d`(v0) @signature `Ln/b$a;.d:()I` @kind interface;
  #L5347ee.  v0:= temp;
  #L5347f0.  if v0 != 0 then goto L5347fc;
  #L5347f4.  v8.`n.b.f` @type ^`boolean` := v2 @kind boolean;
  #L5347f8.  v9.`n.d.a` @type ^`boolean` := v2 @kind boolean;
  #L5347fc.  return @kind void;
}
procedure `void` `a`(`n.b` v3 @kind this, `n.i` v4 @kind object) @signature `Ln/b;.a:(Ln/i;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L5343d0.  v0:= v4.`n.i.k` @type ^`int`;
  #L5343d4.  v1:= 1.0F;
  #L5343d8.  v2:= 1I;
  #L5343da.  if v0 != v2 then goto L5343e0;
  #L5343de.  goto L534414;
  #L5343e0.  v2:= 2I;
  #L5343e2.  if v0 != v2 then goto L5343ec;
  #L5343e6.  v1:= 1000.0F;
  #L5343ea.  goto L534414;
  #L5343ec.  v2:= 3I;
  #L5343ee.  if v0 != v2 then goto L5343fa;
  #L5343f2.  v1:= 1232348160I;
  #L5343f8.  goto L534414;
  #L5343fa.  v2:= 4I;
  #L5343fc.  if v0 != v2 then goto L534408;
  #L534400.  v1:= 1315859240I;
  #L534406.  goto L534414;
  #L534408.  v2:= 5I;
  #L53440a.  if v0 != v2 then goto L534414;
  #L53440e.  v1:= 1399379109I;
  #L534414.  v0:= v3.`n.b.e` @type ^`n.b$a` @kind object;
  #L534418.  call `c`(v0, v4, v1) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L53441e.  return @kind void;
}
procedure `n.i` `b`(`n.b` v0 @kind this, `n.d` v1 @kind object, `boolean`[] v2 @kind object) @signature `Ln/b;.b:(Ln/d;[Z)Ln/i;` @AccessFlag PUBLIC {
    temp;

  #L534294.  v1:= 0I;
  #L534296.  call temp:= `w`(v0, v2, v1) @signature `Ln/b;.w:([ZLn/i;)Ln/i;` @kind direct;
  #L53429c.  v1:= temp @kind object;
  #L53429e.  return v1 @kind object;
}
procedure `void` `c`(`n.b` v5 @kind this, `n.d$a` v6 @kind object) @signature `Ln/b;.c:(Ln/d$a;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L534490.  v0:= instanceof @variable v6 @type ^`n.b` @kind boolean;
  #L534494.  if v0 == 0 then goto L5344e8;
  #L534498.  v6:= (`n.b`) v6 @kind object;
  #L53449c.  v0:= 0I;
  #L53449e.  v5.`n.b.a` @type ^`n.i` := v0 @kind object;
  #L5344a2.  v0:= v5.`n.b.e` @type ^`n.b$a` @kind object;
  #L5344a6.  call `clear`(v0) @signature `Ln/b$a;.clear:()V` @kind interface;
  #L5344ac.  v0:= 0I;
  #L5344ae.  v1:= v6.`n.b.e` @type ^`n.b$a` @kind object;
  #L5344b2.  call temp:= `d`(v1) @signature `Ln/b$a;.d:()I` @kind interface;
  #L5344b8.  v1:= temp;
  #L5344ba.  if v0 >= v1 then goto L5344e8;
  #L5344be.  v1:= v6.`n.b.e` @type ^`n.b$a` @kind object;
  #L5344c2.  call temp:= `f`(v1, v0) @signature `Ln/b$a;.f:(I)Ln/i;` @kind interface;
  #L5344c8.  v1:= temp @kind object;
  #L5344ca.  v2:= v6.`n.b.e` @type ^`n.b$a` @kind object;
  #L5344ce.  call temp:= `h`(v2, v0) @signature `Ln/b$a;.h:(I)F` @kind interface;
  #L5344d4.  v2:= temp;
  #L5344d6.  v3:= v5.`n.b.e` @type ^`n.b$a` @kind object;
  #L5344da.  v4:= 1I;
  #L5344dc.  call `a`(v3, v1, v2, v4) @signature `Ln/b$a;.a:(Ln/i;FZ)V` @kind interface;
  #L5344e2.  v0:= v0 + 1;
  #L5344e6.  goto L5344ae;
  #L5344e8.  return @kind void;
}
procedure `void` `clear`(`n.b` v1 @kind this) @signature `Ln/b;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L534430.  v0:= v1.`n.b.e` @type ^`n.b$a` @kind object;
  #L534434.  call `clear`(v0) @signature `Ln/b$a;.clear:()V` @kind interface;
  #L53443a.  v0:= 0I;
  #L53443c.  v1.`n.b.a` @type ^`n.i` := v0 @kind object;
  #L534440.  v0:= 0I;
  #L534442.  v1.`n.b.b` @type ^`float` := v0;
  #L534446.  return @kind void;
}
procedure `n.b` `d`(`n.b` v3 @kind this, `n.d` v4 @kind object, `int` v5 ) @signature `Ln/b;.d:(Ln/d;I)Ln/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L533cc4.  v0:= v3.`n.b.e` @type ^`n.b$a` @kind object;
  #L533cc8.  v1:= "ep" @kind object;
  #L533ccc.  call temp:= `o`(v4, v5, v1) @signature `Ln/d;.o:(ILjava/lang/String;)Ln/i;` @kind virtual;
  #L533cd2.  v1:= temp @kind object;
  #L533cd4.  v2:= 1.0F;
  #L533cd8.  call `c`(v0, v1, v2) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L533cde.  v0:= v3.`n.b.e` @type ^`n.b$a` @kind object;
  #L533ce2.  v1:= "em" @kind object;
  #L533ce6.  call temp:= `o`(v4, v5, v1) @signature `Ln/d;.o:(ILjava/lang/String;)Ln/i;` @kind virtual;
  #L533cec.  v4:= temp @kind object;
  #L533cee.  v5:= -1.0F;
  #L533cf2.  call `c`(v0, v4, v5) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L533cf8.  return v3 @kind object;
}
procedure `n.b` `e`(`n.b` v1 @kind this, `n.i` v2 @kind object, `int` v3 ) @signature `Ln/b;.e:(Ln/i;I)Ln/b;` @AccessFlag  {
    temp;
    v0;

  #L533d0c.  v0:= v1.`n.b.e` @type ^`n.b$a` @kind object;
  #L533d10.  v3:= (`float`) v3 @kind i2f;
  #L533d12.  call `c`(v0, v2, v3) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L533d18.  return v1 @kind object;
}
procedure `boolean` `f`(`n.b` v2 @kind this, `n.d` v3 @kind object) @signature `Ln/b;.f:(Ln/d;)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L53399c.  call temp:= `g`(v2, v3) @signature `Ln/b;.g:(Ln/d;)Ln/i;` @kind virtual;
  #L5339a2.  v3:= temp @kind object;
  #L5339a4.  v0:= 1I;
  #L5339a6.  if v3 != 0 then goto L5339ae;
  #L5339aa.  v3:= 1I;
  #L5339ac.  goto L5339b6;
  #L5339ae.  call `x`(v2, v3) @signature `Ln/b;.x:(Ln/i;)V` @kind virtual;
  #L5339b4.  v3:= 0I;
  #L5339b6.  v1:= v2.`n.b.e` @type ^`n.b$a` @kind object;
  #L5339ba.  call temp:= `d`(v1) @signature `Ln/b$a;.d:()I` @kind interface;
  #L5339c0.  v1:= temp;
  #L5339c2.  if v1 != 0 then goto L5339ca;
  #L5339c6.  v2.`n.b.f` @type ^`boolean` := v0 @kind boolean;
  #L5339ca.  return v3;
}
procedure `n.i` `g`(`n.b` v14 @kind this, `n.d` v15 @kind object) @signature `Ln/b;.g:(Ln/d;)Ln/i;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L534190.  v0:= v14.`n.b.e` @type ^`n.b$a` @kind object;
  #L534194.  call temp:= `d`(v0) @signature `Ln/b$a;.d:()I` @kind interface;
  #L53419a.  v0:= temp;
  #L53419c.  v1:= 0I;
  #L53419e.  v2:= 0I;
  #L5341a0.  v3:= 0I;
  #L5341a2.  v2:= v1 @kind object;
  #L5341a4.  v4:= 0I;
  #L5341a6.  v5:= 0I;
  #L5341a8.  v6:= 0I;
  #L5341aa.  v7:= 0I;
  #L5341ac.  v8:= 0I;
  #L5341ae.  if v4 >= v0 then goto L534264;
  #L5341b2.  v9:= v14.`n.b.e` @type ^`n.b$a` @kind object;
  #L5341b6.  call temp:= `h`(v9, v4) @signature `Ln/b$a;.h:(I)F` @kind interface;
  #L5341bc.  v9:= temp;
  #L5341be.  v10:= v14.`n.b.e` @type ^`n.b$a` @kind object;
  #L5341c2.  call temp:= `f`(v10, v4) @signature `Ln/b$a;.f:(I)Ln/i;` @kind interface;
  #L5341c8.  v10:= temp @kind object;
  #L5341ca.  v11:= v10.`n.i.p` @type ^`n.i$a` @kind object;
  #L5341ce.  v12:= `@@n.i$a.UNRESTRICTED` @type ^`n.i$a` @kind object;
  #L5341d2.  v13:= 1I;
  #L5341d4.  if v11 != v12 then goto L534216;
  #L5341d8.  if v1 != 0 then goto L5341ec;
  #L5341dc.  call temp:= `u`(v14, v10, v15) @signature `Ln/b;.u:(Ln/i;Ln/d;)Z` @kind direct;
  #L5341e2.  v1:= temp;
  #L5341e4.  v5:= v1;
  #L5341e6.  v7:= v9;
  #L5341e8.  v1:= v10 @kind object;
  #L5341ea.  goto L53425e;
  #L5341ec.  v11:= fcmpl(v7, v9);
  #L5341f0.  if v11 <= 0 then goto L5341fe;
  #L5341f4.  call temp:= `u`(v14, v10, v15) @signature `Ln/b;.u:(Ln/i;Ln/d;)Z` @kind direct;
  #L5341fa.  v1:= temp;
  #L5341fc.  goto L5341e4;
  #L5341fe.  if v5 != 0 then goto L53425e;
  #L534202.  call temp:= `u`(v14, v10, v15) @signature `Ln/b;.u:(Ln/i;Ln/d;)Z` @kind direct;
  #L534208.  v11:= temp;
  #L53420a.  if v11 == 0 then goto L53425e;
  #L53420e.  v7:= v9;
  #L534210.  v1:= v10 @kind object;
  #L534212.  v5:= 1I;
  #L534214.  goto L53425e;
  #L534216.  if v1 != 0 then goto L53425e;
  #L53421a.  v11:= fcmpg(v9, v3);
  #L53421e.  if v11 >= 0 then goto L53425e;
  #L534222.  if v2 != 0 then goto L534236;
  #L534226.  call temp:= `u`(v14, v10, v15) @signature `Ln/b;.u:(Ln/i;Ln/d;)Z` @kind direct;
  #L53422c.  v2:= temp;
  #L53422e.  v6:= v2;
  #L534230.  v8:= v9;
  #L534232.  v2:= v10 @kind object;
  #L534234.  goto L53425e;
  #L534236.  v11:= fcmpl(v8, v9);
  #L53423a.  if v11 <= 0 then goto L534248;
  #L53423e.  call temp:= `u`(v14, v10, v15) @signature `Ln/b;.u:(Ln/i;Ln/d;)Z` @kind direct;
  #L534244.  v2:= temp;
  #L534246.  goto L53422e;
  #L534248.  if v6 != 0 then goto L53425e;
  #L53424c.  call temp:= `u`(v14, v10, v15) @signature `Ln/b;.u:(Ln/i;Ln/d;)Z` @kind direct;
  #L534252.  v11:= temp;
  #L534254.  if v11 == 0 then goto L53425e;
  #L534258.  v8:= v9;
  #L53425a.  v2:= v10 @kind object;
  #L53425c.  v6:= 1I;
  #L53425e.  v4:= v4 + 1;
  #L534262.  goto L5341ae;
  #L534264.  if v1 == 0 then goto L53426a;
  #L534268.  return v1 @kind object;
  #L53426a.  return v2 @kind object;
}
procedure `n.i` `getKey`(`n.b` v1 @kind this) @signature `Ln/b;.getKey:()Ln/i;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L53427c.  v0:= v1.`n.b.a` @type ^`n.i` @kind object;
  #L534280.  return v0 @kind object;
}
procedure `n.b` `h`(`n.b` v5 @kind this, `n.i` v6 @kind object, `n.i` v7 @kind object, `int` v8 , `float` v9 , `n.i` v10 @kind object, `n.i` v11 @kind object, `int` v12 ) @signature `Ln/b;.h:(Ln/i;Ln/i;IFLn/i;Ln/i;I)Ln/b;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L533d2c.  v0:= 1.0F;
  #L533d30.  if v7 != v10 then goto L533d58;
  #L533d34.  v8:= v5.`n.b.e` @type ^`n.b$a` @kind object;
  #L533d38.  call `c`(v8, v6, v0) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L533d3e.  v6:= v5.`n.b.e` @type ^`n.b$a` @kind object;
  #L533d42.  call `c`(v6, v11, v0) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L533d48.  v6:= v5.`n.b.e` @type ^`n.b$a` @kind object;
  #L533d4c.  v8:= -2.0F;
  #L533d50.  call `c`(v6, v7, v8) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L533d56.  return v5 @kind object;
  #L533d58.  v1:= 0.5F;
  #L533d5c.  v2:= -1.0F;
  #L533d60.  v1:= fcmpl(v9, v1);
  #L533d64.  if v1 != 0 then goto L533da4;
  #L533d68.  v9:= v5.`n.b.e` @type ^`n.b$a` @kind object;
  #L533d6c.  call `c`(v9, v6, v0) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L533d72.  v6:= v5.`n.b.e` @type ^`n.b$a` @kind object;
  #L533d76.  call `c`(v6, v7, v2) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L533d7c.  v6:= v5.`n.b.e` @type ^`n.b$a` @kind object;
  #L533d80.  call `c`(v6, v10, v2) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L533d86.  v6:= v5.`n.b.e` @type ^`n.b$a` @kind object;
  #L533d8a.  call `c`(v6, v11, v0) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L533d90.  if v8 > 0 then goto L533d98;
  #L533d94.  if v12 <= 0 then goto L533e48;
  #L533d98.  v6:= -v8 @kind int;
  #L533d9a.  v6:= v6 + v12 @kind int;
  #L533d9c.  v6:= (`float`) v6 @kind i2f;
  #L533d9e.  v5.`n.b.b` @type ^`float` := v6;
  #L533da2.  goto L533e48;
  #L533da4.  v1:= 0I;
  #L533da6.  v1:= fcmpg(v9, v1);
  #L533daa.  if v1 > 0 then goto L533dca;
  #L533dae.  v9:= v5.`n.b.e` @type ^`n.b$a` @kind object;
  #L533db2.  call `c`(v9, v6, v2) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L533db8.  v6:= v5.`n.b.e` @type ^`n.b$a` @kind object;
  #L533dbc.  call `c`(v6, v7, v0) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L533dc2.  v6:= (`float`) v8 @kind i2f;
  #L533dc4.  v5.`n.b.b` @type ^`float` := v6;
  #L533dc8.  goto L533e48;
  #L533dca.  v1:= fcmpl(v9, v0);
  #L533dce.  if v1 < 0 then goto L533df0;
  #L533dd2.  v6:= v5.`n.b.e` @type ^`n.b$a` @kind object;
  #L533dd6.  call `c`(v6, v11, v2) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L533ddc.  v6:= v5.`n.b.e` @type ^`n.b$a` @kind object;
  #L533de0.  call `c`(v6, v10, v0) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L533de6.  v6:= -v12 @kind int;
  #L533de8.  v6:= (`float`) v6 @kind i2f;
  #L533dea.  v5.`n.b.b` @type ^`float` := v6;
  #L533dee.  goto L533e48;
  #L533df0.  v1:= v5.`n.b.e` @type ^`n.b$a` @kind object;
  #L533df4.  v3:= v0 - v9 @kind float;
  #L533df8.  v4:= v3 * v0 @kind float;
  #L533dfc.  call `c`(v1, v6, v4) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L533e02.  v6:= v5.`n.b.e` @type ^`n.b$a` @kind object;
  #L533e06.  v1:= v3 * v2 @kind float;
  #L533e0a.  call `c`(v6, v7, v1) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L533e10.  v6:= v5.`n.b.e` @type ^`n.b$a` @kind object;
  #L533e14.  v2:= v2 * v9 @kind float;
  #L533e18.  call `c`(v6, v10, v2) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L533e1e.  v6:= v5.`n.b.e` @type ^`n.b$a` @kind object;
  #L533e22.  v0:= v0 * v9 @kind float;
  #L533e26.  call `c`(v6, v11, v0) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L533e2c.  if v8 > 0 then goto L533e34;
  #L533e30.  if v12 <= 0 then goto L533e48;
  #L533e34.  v6:= -v8 @kind int;
  #L533e36.  v6:= (`float`) v6 @kind i2f;
  #L533e38.  v6:= v6 * v3 @kind float;
  #L533e3c.  v7:= (`float`) v12 @kind i2f;
  #L533e3e.  v7:= v7 * v9 @kind float;
  #L533e42.  v6:= v6 + v7 @kind float;
  #L533e44.  v5.`n.b.b` @type ^`float` := v6;
  #L533e48.  return v5 @kind object;
}
procedure `n.b` `i`(`n.b` v0 @kind this, `n.i` v1 @kind object, `int` v2 ) @signature `Ln/b;.i:(Ln/i;I)Ln/b;` @AccessFlag  {
    temp;

  #L533e5c.  v0.`n.b.a` @type ^`n.i` := v1 @kind object;
  #L533e60.  v2:= (`float`) v2 @kind i2f;
  #L533e62.  v1.`n.i.l` @type ^`float` := v2;
  #L533e66.  v0.`n.b.b` @type ^`float` := v2;
  #L533e6a.  v1:= 1I;
  #L533e6c.  v0.`n.b.f` @type ^`boolean` := v1 @kind boolean;
  #L533e70.  return v0 @kind object;
}
procedure `boolean` `isEmpty`(`n.b` v2 @kind this) @signature `Ln/b;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L533a38.  v0:= v2.`n.b.a` @type ^`n.i` @kind object;
  #L533a3c.  if v0 != 0 then goto L533a62;
  #L533a40.  v0:= v2.`n.b.b` @type ^`float`;
  #L533a44.  v1:= 0I;
  #L533a46.  v0:= fcmpl(v0, v1);
  #L533a4a.  if v0 != 0 then goto L533a62;
  #L533a4e.  v0:= v2.`n.b.e` @type ^`n.b$a` @kind object;
  #L533a52.  call temp:= `d`(v0) @signature `Ln/b$a;.d:()I` @kind interface;
  #L533a58.  v0:= temp;
  #L533a5a.  if v0 != 0 then goto L533a62;
  #L533a5e.  v0:= 1I;
  #L533a60.  goto L533a64;
  #L533a62.  v0:= 0I;
  #L533a64.  return v0;
}
procedure `n.b` `j`(`n.b` v2 @kind this, `n.i` v3 @kind object, `n.i` v4 @kind object, `float` v5 ) @signature `Ln/b;.j:(Ln/i;Ln/i;F)Ln/b;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L533e84.  v0:= v2.`n.b.e` @type ^`n.b$a` @kind object;
  #L533e88.  v1:= -1.0F;
  #L533e8c.  call `c`(v0, v3, v1) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L533e92.  v3:= v2.`n.b.e` @type ^`n.b$a` @kind object;
  #L533e96.  call `c`(v3, v4, v5) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L533e9c.  return v2 @kind object;
}
procedure `n.b` `k`(`n.b` v2 @kind this, `n.i` v3 @kind object, `n.i` v4 @kind object, `n.i` v5 @kind object, `n.i` v6 @kind object, `float` v7 ) @signature `Ln/b;.k:(Ln/i;Ln/i;Ln/i;Ln/i;F)Ln/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L533eb0.  v0:= v2.`n.b.e` @type ^`n.b$a` @kind object;
  #L533eb4.  v1:= -1.0F;
  #L533eb8.  call `c`(v0, v3, v1) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L533ebe.  v3:= v2.`n.b.e` @type ^`n.b$a` @kind object;
  #L533ec2.  v0:= 1.0F;
  #L533ec6.  call `c`(v3, v4, v0) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L533ecc.  v3:= v2.`n.b.e` @type ^`n.b$a` @kind object;
  #L533ed0.  call `c`(v3, v5, v7) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L533ed6.  v3:= v2.`n.b.e` @type ^`n.b$a` @kind object;
  #L533eda.  v4:= -v7 @kind float;
  #L533edc.  call `c`(v3, v6, v4) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L533ee2.  return v2 @kind object;
}
procedure `n.b` `l`(`n.b` v4 @kind this, `float` v5 , `float` v6 , `float` v7 , `n.i` v8 @kind object, `n.i` v9 @kind object, `n.i` v10 @kind object, `n.i` v11 @kind object) @signature `Ln/b;.l:(FFFLn/i;Ln/i;Ln/i;Ln/i;)Ln/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L533ef4.  v0:= 0I;
  #L533ef6.  v4.`n.b.b` @type ^`float` := v0;
  #L533efa.  v1:= -1.0F;
  #L533efe.  v2:= 1.0F;
  #L533f02.  v3:= fcmpl(v6, v0);
  #L533f06.  if v3 == 0 then goto L533f82;
  #L533f0a.  v3:= fcmpl(v5, v7);
  #L533f0e.  if v3 != 0 then goto L533f14;
  #L533f12.  goto L533f82;
  #L533f14.  v3:= fcmpl(v5, v0);
  #L533f18.  if v3 != 0 then goto L533f32;
  #L533f1c.  v5:= v4.`n.b.e` @type ^`n.b$a` @kind object;
  #L533f20.  call `c`(v5, v8, v2) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L533f26.  v5:= v4.`n.b.e` @type ^`n.b$a` @kind object;
  #L533f2a.  call `c`(v5, v9, v1) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L533f30.  goto L533faa;
  #L533f32.  v0:= fcmpl(v7, v0);
  #L533f36.  if v0 != 0 then goto L533f50;
  #L533f3a.  v5:= v4.`n.b.e` @type ^`n.b$a` @kind object;
  #L533f3e.  call `c`(v5, v10, v2) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L533f44.  v5:= v4.`n.b.e` @type ^`n.b$a` @kind object;
  #L533f48.  call `c`(v5, v11, v1) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L533f4e.  goto L533faa;
  #L533f50.  v5:= v5 / v6 @kind float;
  #L533f52.  v7:= v7 / v6 @kind float;
  #L533f54.  v5:= v5 / v7 @kind float;
  #L533f56.  v6:= v4.`n.b.e` @type ^`n.b$a` @kind object;
  #L533f5a.  call `c`(v6, v8, v2) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L533f60.  v6:= v4.`n.b.e` @type ^`n.b$a` @kind object;
  #L533f64.  call `c`(v6, v9, v1) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L533f6a.  v6:= v4.`n.b.e` @type ^`n.b$a` @kind object;
  #L533f6e.  call `c`(v6, v11, v5) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L533f74.  v6:= v4.`n.b.e` @type ^`n.b$a` @kind object;
  #L533f78.  v5:= -v5 @kind float;
  #L533f7a.  call `c`(v6, v10, v5) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L533f80.  goto L533faa;
  #L533f82.  v5:= v4.`n.b.e` @type ^`n.b$a` @kind object;
  #L533f86.  call `c`(v5, v8, v2) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L533f8c.  v5:= v4.`n.b.e` @type ^`n.b$a` @kind object;
  #L533f90.  call `c`(v5, v9, v1) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L533f96.  v5:= v4.`n.b.e` @type ^`n.b$a` @kind object;
  #L533f9a.  call `c`(v5, v11, v2) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L533fa0.  v5:= v4.`n.b.e` @type ^`n.b$a` @kind object;
  #L533fa4.  call `c`(v5, v10, v1) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L533faa.  return v4 @kind object;
}
procedure `n.b` `m`(`n.b` v1 @kind this, `n.i` v2 @kind object, `int` v3 ) @signature `Ln/b;.m:(Ln/i;I)Ln/b;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L533fbc.  if v3 >= 0 then goto L533fda;
  #L533fc0.  v3:= v3 * -1;
  #L533fc4.  v3:= (`float`) v3 @kind i2f;
  #L533fc6.  v1.`n.b.b` @type ^`float` := v3;
  #L533fca.  v3:= v1.`n.b.e` @type ^`n.b$a` @kind object;
  #L533fce.  v0:= 1.0F;
  #L533fd2.  call `c`(v3, v2, v0) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L533fd8.  goto L533fee;
  #L533fda.  v3:= (`float`) v3 @kind i2f;
  #L533fdc.  v1.`n.b.b` @type ^`float` := v3;
  #L533fe0.  v3:= v1.`n.b.e` @type ^`n.b$a` @kind object;
  #L533fe4.  v0:= -1.0F;
  #L533fe8.  call `c`(v3, v2, v0) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L533fee.  return v1 @kind object;
}
procedure `n.b` `n`(`n.b` v2 @kind this, `n.i` v3 @kind object, `n.i` v4 @kind object, `int` v5 ) @signature `Ln/b;.n:(Ln/i;Ln/i;I)Ln/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L534000.  v0:= 0I;
  #L534002.  if v5 == 0 then goto L534016;
  #L534006.  if v5 >= 0 then goto L534010;
  #L53400a.  v5:= v5 * -1;
  #L53400e.  v0:= 1I;
  #L534010.  v5:= (`float`) v5 @kind i2f;
  #L534012.  v2.`n.b.b` @type ^`float` := v5;
  #L534016.  v5:= -1.0F;
  #L53401a.  v1:= 1.0F;
  #L53401e.  if v0 != 0 then goto L534038;
  #L534022.  v0:= v2.`n.b.e` @type ^`n.b$a` @kind object;
  #L534026.  call `c`(v0, v3, v5) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L53402c.  v3:= v2.`n.b.e` @type ^`n.b$a` @kind object;
  #L534030.  call `c`(v3, v4, v1) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L534036.  goto L53404c;
  #L534038.  v0:= v2.`n.b.e` @type ^`n.b$a` @kind object;
  #L53403c.  call `c`(v0, v3, v1) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L534042.  v3:= v2.`n.b.e` @type ^`n.b$a` @kind object;
  #L534046.  call `c`(v3, v4, v5) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L53404c.  return v2 @kind object;
}
procedure `n.b` `o`(`n.b` v2 @kind this, `n.i` v3 @kind object, `n.i` v4 @kind object, `n.i` v5 @kind object, `int` v6 ) @signature `Ln/b;.o:(Ln/i;Ln/i;Ln/i;I)Ln/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L534060.  v0:= 0I;
  #L534062.  if v6 == 0 then goto L534076;
  #L534066.  if v6 >= 0 then goto L534070;
  #L53406a.  v6:= v6 * -1;
  #L53406e.  v0:= 1I;
  #L534070.  v6:= (`float`) v6 @kind i2f;
  #L534072.  v2.`n.b.b` @type ^`float` := v6;
  #L534076.  v6:= -1.0F;
  #L53407a.  v1:= 1.0F;
  #L53407e.  if v0 != 0 then goto L5340a2;
  #L534082.  v0:= v2.`n.b.e` @type ^`n.b$a` @kind object;
  #L534086.  call `c`(v0, v3, v6) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L53408c.  v3:= v2.`n.b.e` @type ^`n.b$a` @kind object;
  #L534090.  call `c`(v3, v4, v1) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L534096.  v3:= v2.`n.b.e` @type ^`n.b$a` @kind object;
  #L53409a.  call `c`(v3, v5, v1) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L5340a0.  goto L5340c0;
  #L5340a2.  v0:= v2.`n.b.e` @type ^`n.b$a` @kind object;
  #L5340a6.  call `c`(v0, v3, v1) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L5340ac.  v3:= v2.`n.b.e` @type ^`n.b$a` @kind object;
  #L5340b0.  call `c`(v3, v4, v6) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L5340b6.  v3:= v2.`n.b.e` @type ^`n.b$a` @kind object;
  #L5340ba.  call `c`(v3, v5, v6) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L5340c0.  return v2 @kind object;
}
procedure `n.b` `p`(`n.b` v2 @kind this, `n.i` v3 @kind object, `n.i` v4 @kind object, `n.i` v5 @kind object, `int` v6 ) @signature `Ln/b;.p:(Ln/i;Ln/i;Ln/i;I)Ln/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5340d4.  v0:= 0I;
  #L5340d6.  if v6 == 0 then goto L5340ea;
  #L5340da.  if v6 >= 0 then goto L5340e4;
  #L5340de.  v6:= v6 * -1;
  #L5340e2.  v0:= 1I;
  #L5340e4.  v6:= (`float`) v6 @kind i2f;
  #L5340e6.  v2.`n.b.b` @type ^`float` := v6;
  #L5340ea.  v6:= -1.0F;
  #L5340ee.  v1:= 1.0F;
  #L5340f2.  if v0 != 0 then goto L534116;
  #L5340f6.  v0:= v2.`n.b.e` @type ^`n.b$a` @kind object;
  #L5340fa.  call `c`(v0, v3, v6) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L534100.  v3:= v2.`n.b.e` @type ^`n.b$a` @kind object;
  #L534104.  call `c`(v3, v4, v1) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L53410a.  v3:= v2.`n.b.e` @type ^`n.b$a` @kind object;
  #L53410e.  call `c`(v3, v5, v6) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L534114.  goto L534134;
  #L534116.  v0:= v2.`n.b.e` @type ^`n.b$a` @kind object;
  #L53411a.  call `c`(v0, v3, v1) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L534120.  v3:= v2.`n.b.e` @type ^`n.b$a` @kind object;
  #L534124.  call `c`(v3, v4, v6) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L53412a.  v3:= v2.`n.b.e` @type ^`n.b$a` @kind object;
  #L53412e.  call `c`(v3, v5, v1) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L534134.  return v2 @kind object;
}
procedure `n.b` `q`(`n.b` v2 @kind this, `n.i` v3 @kind object, `n.i` v4 @kind object, `n.i` v5 @kind object, `n.i` v6 @kind object, `float` v7 ) @signature `Ln/b;.q:(Ln/i;Ln/i;Ln/i;Ln/i;F)Ln/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L534148.  v0:= v2.`n.b.e` @type ^`n.b$a` @kind object;
  #L53414c.  v1:= 0.5F;
  #L534150.  call `c`(v0, v5, v1) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L534156.  v5:= v2.`n.b.e` @type ^`n.b$a` @kind object;
  #L53415a.  call `c`(v5, v6, v1) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L534160.  v5:= v2.`n.b.e` @type ^`n.b$a` @kind object;
  #L534164.  v6:= -0.5F;
  #L534168.  call `c`(v5, v3, v6) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L53416e.  v3:= v2.`n.b.e` @type ^`n.b$a` @kind object;
  #L534172.  call `c`(v3, v4, v6) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L534178.  v3:= -v7 @kind float;
  #L53417a.  v2.`n.b.b` @type ^`float` := v3;
  #L53417e.  return v2 @kind object;
}
procedure `void` `r`(`n.b` v2 @kind this) @signature `Ln/b;.r:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L534458.  v0:= v2.`n.b.b` @type ^`float`;
  #L53445c.  v1:= 0I;
  #L53445e.  v1:= fcmpg(v0, v1);
  #L534462.  if v1 >= 0 then goto L53447c;
  #L534466.  v1:= -1.0F;
  #L53446a.  v0:= v0 * v1 @kind float;
  #L53446e.  v2.`n.b.b` @type ^`float` := v0;
  #L534472.  v0:= v2.`n.b.e` @type ^`n.b$a` @kind object;
  #L534476.  call `g`(v0) @signature `Ln/b$a;.g:()V` @kind interface;
  #L53447c.  return @kind void;
}
procedure `boolean` `s`(`n.b` v2 @kind this) @signature `Ln/b;.s:()Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L5339dc.  v0:= v2.`n.b.a` @type ^`n.i` @kind object;
  #L5339e0.  if v0 == 0 then goto L533a02;
  #L5339e4.  v0:= v0.`n.i.p` @type ^`n.i$a` @kind object;
  #L5339e8.  v1:= `@@n.i$a.UNRESTRICTED` @type ^`n.i$a` @kind object;
  #L5339ec.  if v0 == v1 then goto L5339fe;
  #L5339f0.  v0:= v2.`n.b.b` @type ^`float`;
  #L5339f4.  v1:= 0I;
  #L5339f6.  v0:= fcmpg(v0, v1);
  #L5339fa.  if v0 < 0 then goto L533a02;
  #L5339fe.  v0:= 1I;
  #L533a00.  goto L533a04;
  #L533a02.  v0:= 0I;
  #L533a04.  return v0;
}
procedure `boolean` `t`(`n.b` v1 @kind this, `n.i` v2 @kind object) @signature `Ln/b;.t:(Ln/i;)Z` @AccessFlag  {
    temp;
    v0;

  #L533a18.  v0:= v1.`n.b.e` @type ^`n.b$a` @kind object;
  #L533a1c.  call temp:= `i`(v0, v2) @signature `Ln/b$a;.i:(Ln/i;)Z` @kind interface;
  #L533a22.  v2:= temp;
  #L533a24.  return v2;
}
procedure `java.lang.String` `toString`(`n.b` v1 @kind this) @signature `Ln/b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L533ca8.  call temp:= `z`(v1) @signature `Ln/b;.z:()Ljava/lang/String;` @kind virtual;
  #L533cae.  v0:= temp @kind object;
  #L533cb0.  return v0 @kind object;
}
procedure `n.i` `v`(`n.b` v1 @kind this, `n.i` v2 @kind object) @signature `Ln/b;.v:(Ln/i;)Ln/i;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5342b0.  v0:= 0I;
  #L5342b2.  call temp:= `w`(v1, v0, v2) @signature `Ln/b;.w:([ZLn/i;)Ln/i;` @kind direct;
  #L5342b8.  v2:= temp @kind object;
  #L5342ba.  return v2 @kind object;
}
procedure `void` `x`(`n.b` v3 @kind this, `n.i` v4 @kind object) @signature `Ln/b;.x:(Ln/i;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L5344fc.  v0:= v3.`n.b.a` @type ^`n.i` @kind object;
  #L534500.  v1:= -1.0F;
  #L534504.  if v0 == 0 then goto L534522;
  #L534508.  v2:= v3.`n.b.e` @type ^`n.b$a` @kind object;
  #L53450c.  call `c`(v2, v0, v1) @signature `Ln/b$a;.c:(Ln/i;F)V` @kind interface;
  #L534512.  v0:= v3.`n.b.a` @type ^`n.i` @kind object;
  #L534516.  v2:= -1I;
  #L534518.  v0.`n.i.j` @type ^`int` := v2;
  #L53451c.  v0:= 0I;
  #L53451e.  v3.`n.b.a` @type ^`n.i` := v0 @kind object;
  #L534522.  v0:= v3.`n.b.e` @type ^`n.b$a` @kind object;
  #L534526.  v2:= 1I;
  #L534528.  call temp:= `k`(v0, v4, v2) @signature `Ln/b$a;.k:(Ln/i;Z)F` @kind interface;
  #L53452e.  v0:= temp;
  #L534530.  v0:= v0 * v1 @kind float;
  #L534534.  v3.`n.b.a` @type ^`n.i` := v4 @kind object;
  #L534538.  v4:= 1.0F;
  #L53453c.  v4:= fcmpl(v0, v4);
  #L534540.  if v4 != 0 then goto L534546;
  #L534544.  return @kind void;
  #L534546.  v4:= v3.`n.b.b` @type ^`float`;
  #L53454a.  v4:= v4 / v0 @kind float;
  #L53454c.  v3.`n.b.b` @type ^`float` := v4;
  #L534550.  v4:= v3.`n.b.e` @type ^`n.b$a` @kind object;
  #L534554.  call `j`(v4, v0) @signature `Ln/b$a;.j:(F)V` @kind interface;
  #L53455a.  return @kind void;
}
procedure `void` `y`(`n.b` v1 @kind this) @signature `Ln/b;.y:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L53456c.  v0:= 0I;
  #L53456e.  v1.`n.b.a` @type ^`n.i` := v0 @kind object;
  #L534572.  v0:= v1.`n.b.e` @type ^`n.b$a` @kind object;
  #L534576.  call `clear`(v0) @signature `Ln/b$a;.clear:()V` @kind interface;
  #L53457c.  v0:= 0I;
  #L53457e.  v1.`n.b.b` @type ^`float` := v0;
  #L534582.  v0:= 0I;
  #L534584.  v1.`n.b.f` @type ^`boolean` := v0 @kind boolean;
  #L534588.  return @kind void;
}
procedure `java.lang.String` `z`(`n.b` v10 @kind this) @signature `Ln/b;.z:()Ljava/lang/String;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L533a98.  v0:= v10.`n.b.a` @type ^`n.i` @kind object;
  #L533a9c.  v1:= "" @kind object;
  #L533aa0.  if v0 != 0 then goto L533ac8;
  #L533aa4.  v0:= new `java.lang.StringBuilder`;
  #L533aa8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L533aae.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L533ab4.  v1:= "0" @kind object;
  #L533ab8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L533abe.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L533ac4.  v0:= temp @kind object;
  #L533ac6.  goto L533aea;
  #L533ac8.  v0:= new `java.lang.StringBuilder`;
  #L533acc.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L533ad2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L533ad8.  v1:= v10.`n.b.a` @type ^`n.i` @kind object;
  #L533adc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L533ae2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L533ae8.  v0:= temp @kind object;
  #L533aea.  v1:= new `java.lang.StringBuilder`;
  #L533aee.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L533af4.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L533afa.  v0:= " = " @kind object;
  #L533afe.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L533b04.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L533b0a.  v0:= temp @kind object;
  #L533b0c.  v1:= v10.`n.b.b` @type ^`float`;
  #L533b10.  v2:= 0I;
  #L533b12.  v3:= 1I;
  #L533b14.  v4:= 0I;
  #L533b16.  v1:= fcmpl(v1, v4);
  #L533b1a.  if v1 == 0 then goto L533b44;
  #L533b1e.  v1:= new `java.lang.StringBuilder`;
  #L533b22.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L533b28.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L533b2e.  v0:= v10.`n.b.b` @type ^`float`;
  #L533b32.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(F)Ljava/lang/StringBuilder;` @kind virtual;
  #L533b38.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L533b3e.  v0:= temp @kind object;
  #L533b40.  v1:= 1I;
  #L533b42.  goto L533b46;
  #L533b44.  v1:= 0I;
  #L533b46.  v5:= v10.`n.b.e` @type ^`n.b$a` @kind object;
  #L533b4a.  call temp:= `d`(v5) @signature `Ln/b$a;.d:()I` @kind interface;
  #L533b50.  v5:= temp;
  #L533b52.  if v2 >= v5 then goto L533c70;
  #L533b56.  v6:= v10.`n.b.e` @type ^`n.b$a` @kind object;
  #L533b5a.  call temp:= `f`(v6, v2) @signature `Ln/b$a;.f:(I)Ln/i;` @kind interface;
  #L533b60.  v6:= temp @kind object;
  #L533b62.  if v6 != 0 then goto L533b6a;
  #L533b66.  goto L533c68;
  #L533b6a.  v7:= v10.`n.b.e` @type ^`n.b$a` @kind object;
  #L533b6e.  call temp:= `h`(v7, v2) @signature `Ln/b$a;.h:(I)F` @kind interface;
  #L533b74.  v7:= temp;
  #L533b76.  v8:= fcmpl(v7, v4);
  #L533b7a.  if v8 != 0 then goto L533b82;
  #L533b7e.  goto L533c68;
  #L533b82.  call temp:= `toString`(v6) @signature `Ln/i;.toString:()Ljava/lang/String;` @kind virtual;
  #L533b88.  v6:= temp @kind object;
  #L533b8a.  v9:= -1.0F;
  #L533b8e.  if v1 != 0 then goto L533bbe;
  #L533b92.  v1:= fcmpg(v7, v4);
  #L533b96.  if v1 >= 0 then goto L533c0c;
  #L533b9a.  v1:= new `java.lang.StringBuilder`;
  #L533b9e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L533ba4.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L533baa.  v0:= "- " @kind object;
  #L533bae.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L533bb4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L533bba.  v0:= temp @kind object;
  #L533bbc.  goto L533c08;
  #L533bbe.  if v8 <= 0 then goto L533be6;
  #L533bc2.  v1:= new `java.lang.StringBuilder`;
  #L533bc6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L533bcc.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L533bd2.  v0:= " + " @kind object;
  #L533bd6.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L533bdc.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L533be2.  v0:= temp @kind object;
  #L533be4.  goto L533c0c;
  #L533be6.  v1:= new `java.lang.StringBuilder`;
  #L533bea.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L533bf0.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L533bf6.  v0:= " - " @kind object;
  #L533bfa.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L533c00.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L533c06.  v0:= temp @kind object;
  #L533c08.  v7:= v7 * v9 @kind float;
  #L533c0c.  v1:= 1.0F;
  #L533c10.  v1:= fcmpl(v7, v1);
  #L533c14.  if v1 != 0 then goto L533c38;
  #L533c18.  v1:= new `java.lang.StringBuilder`;
  #L533c1c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L533c22.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L533c28.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L533c2e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L533c34.  v0:= temp @kind object;
  #L533c36.  goto L533c66;
  #L533c38.  v1:= new `java.lang.StringBuilder`;
  #L533c3c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L533c42.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L533c48.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(F)Ljava/lang/StringBuilder;` @kind virtual;
  #L533c4e.  v0:= " " @kind object;
  #L533c52.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L533c58.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L533c5e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L533c64.  v0:= temp @kind object;
  #L533c66.  v1:= 1I;
  #L533c68.  v2:= v2 + 1;
  #L533c6c.  goto L533b52;
  #L533c70.  if v1 != 0 then goto L533c96;
  #L533c74.  v1:= new `java.lang.StringBuilder`;
  #L533c78.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L533c7e.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L533c84.  v0:= "0.0" @kind object;
  #L533c88.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L533c8e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L533c94.  v0:= temp @kind object;
  #L533c96.  return v0 @kind object;
}
