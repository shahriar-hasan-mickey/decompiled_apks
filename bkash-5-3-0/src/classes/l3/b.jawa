record `l3.b` @kind class @AccessFlag PUBLIC {
  `java.lang.ref.SoftReference` `l3.b.a` @AccessFlag ;
  `java.lang.ref.SoftReference` `l3.b.b` @AccessFlag ;
  `java.lang.ref.SoftReference` `l3.b.c` @AccessFlag ;
}
procedure `void` `<init>`(`l3.b` v1 @kind this) @signature `Ll3/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L5269d4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L5269da.  v0:= 0I;
  #L5269dc.  v1.`l3.b.a` @type ^`java.lang.ref.SoftReference` := v0 @kind object;
  #L5269e0.  v1.`l3.b.b` @type ^`java.lang.ref.SoftReference` := v0 @kind object;
  #L5269e4.  v1.`l3.b.c` @type ^`java.lang.ref.SoftReference` := v0 @kind object;
  #L5269e8.  return @kind void;
}
procedure `void` `a`(`l3.b` v2 @kind this) @signature `Ll3/b;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5269fc.  v0:= v2.`l3.b.a` @type ^`java.lang.ref.SoftReference` @kind object;
  #L526a00.  v1:= 0I;
  #L526a02.  if v0 == 0 then goto L526a10;
  #L526a06.  call `clear`(v0) @signature `Ljava/lang/ref/SoftReference;.clear:()V` @kind virtual;
  #L526a0c.  v2.`l3.b.a` @type ^`java.lang.ref.SoftReference` := v1 @kind object;
  #L526a10.  v0:= v2.`l3.b.b` @type ^`java.lang.ref.SoftReference` @kind object;
  #L526a14.  if v0 == 0 then goto L526a22;
  #L526a18.  call `clear`(v0) @signature `Ljava/lang/ref/SoftReference;.clear:()V` @kind virtual;
  #L526a1e.  v2.`l3.b.b` @type ^`java.lang.ref.SoftReference` := v1 @kind object;
  #L526a22.  v0:= v2.`l3.b.c` @type ^`java.lang.ref.SoftReference` @kind object;
  #L526a26.  if v0 == 0 then goto L526a34;
  #L526a2a.  call `clear`(v0) @signature `Ljava/lang/ref/SoftReference;.clear:()V` @kind virtual;
  #L526a30.  v2.`l3.b.c` @type ^`java.lang.ref.SoftReference` := v1 @kind object;
  #L526a34.  return @kind void;
}
procedure `java.lang.Object` `b`(`l3.b` v1 @kind this) @signature `Ll3/b;.b:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5269ac.  v0:= v1.`l3.b.a` @type ^`java.lang.ref.SoftReference` @kind object;
  #L5269b0.  if v0 != 0 then goto L5269b8;
  #L5269b4.  v0:= 0I;
  #L5269b6.  goto L5269c0;
  #L5269b8.  call temp:= `get`(v0) @signature `Ljava/lang/ref/SoftReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5269be.  v0:= temp @kind object;
  #L5269c0.  return v0 @kind object;
}
procedure `void` `c`(`l3.b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Ll3/b;.c:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L526a48.  v0:= new `java.lang.ref.SoftReference`;
  #L526a4c.  call `<init>`(v0, v2) @signature `Ljava/lang/ref/SoftReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L526a52.  v1.`l3.b.a` @type ^`java.lang.ref.SoftReference` := v0 @kind object;
  #L526a56.  v0:= new `java.lang.ref.SoftReference`;
  #L526a5a.  call `<init>`(v0, v2) @signature `Ljava/lang/ref/SoftReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L526a60.  v1.`l3.b.b` @type ^`java.lang.ref.SoftReference` := v0 @kind object;
  #L526a64.  v0:= new `java.lang.ref.SoftReference`;
  #L526a68.  call `<init>`(v0, v2) @signature `Ljava/lang/ref/SoftReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L526a6e.  v1.`l3.b.c` @type ^`java.lang.ref.SoftReference` := v0 @kind object;
  #L526a72.  return @kind void;
}
