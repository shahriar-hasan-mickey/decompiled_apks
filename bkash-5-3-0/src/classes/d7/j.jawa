record `d7.j` @kind class @AccessFlag PUBLIC {
}
global `char`[] `@@d7.j.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `char`[] `@@d7.j.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ld7/j;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4f8e90.  v0:= 16I;
  #L4f8e94.  v1:= new `char`[v0];
  #L4f8e98.  goto L4f8eb4;
  #L4f8e9e.  `@@d7.j.a` @type ^`char`[] := v1 @kind object;
  #L4f8ea2.  v0:= new `char`[v0];
  #L4f8ea6.  goto L4f8edc;
  #L4f8eac.  `@@d7.j.b` @type ^`char`[] := v0 @kind object;
  #L4f8eb0.  return @kind void;
  #L4f8eb2.  
  #L4f8eb4.  v1:= (48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 65I, 66I, 67I, 68I, 69I, 70I) @kind object;
  #L4f8edb.  goto L4f8e9e;
  #L4f8edc.  v0:= (48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 97I, 98I, 99I, 100I, 101I, 102I) @kind object;
  #L4f8f03.  goto L4f8eac;
}
procedure `java.lang.String` `a`(`byte`[] v7 @kind object) @signature `Ld7/j;.a:([B)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4f8db4.  v0:= length @variable v7;
  #L4f8db6.  v0:= v0 + v0 @kind int;
  #L4f8db8.  v0:= new `char`[v0];
  #L4f8dbc.  v1:= 0I;
  #L4f8dbe.  v2:= 0I;
  #L4f8dc0.  v3:= length @variable v7;
  #L4f8dc2.  if v1 >= v3 then goto L4f8df8;
  #L4f8dc6.  v3:= v7[v1] @kind byte;
  #L4f8dca.  v3:= v3 ^& 255;
  #L4f8dce.  v4:= v2 + 1;
  #L4f8dd2.  v5:= `@@d7.j.b` @type ^`char`[] @kind object;
  #L4f8dd6.  v6:= v3 ^>> 4;
  #L4f8dda.  v6:= v5[v6] @kind char;
  #L4f8dde.  v0[v2]:= v6 @kind char;
  #L4f8de2.  v2:= v4 + 1;
  #L4f8de6.  v3:= v3 ^& 15;
  #L4f8dea.  v3:= v5[v3] @kind char;
  #L4f8dee.  v0[v4]:= v3 @kind char;
  #L4f8df2.  v1:= v1 + 1;
  #L4f8df6.  goto L4f8dc0;
  #L4f8df8.  v7:= new `java.lang.String`;
  #L4f8dfc.  call `<init>`(v7, v0) @signature `Ljava/lang/String;.<init>:([C)V` @kind direct;
  #L4f8e02.  return v7 @kind object;
}
procedure `java.lang.String` `b`(`byte`[] v5 @kind object, `boolean` v6 ) @signature `Ld7/j;.b:([BZ)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4f8e14.  v0:= length @variable v5;
  #L4f8e16.  v1:= new `java.lang.StringBuilder`;
  #L4f8e1a.  v2:= v0 + v0 @kind int;
  #L4f8e1e.  call `<init>`(v1, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L4f8e24.  v2:= 0I;
  #L4f8e26.  if v2 >= v0 then goto L4f8e74;
  #L4f8e2a.  if v6 == 0 then goto L4f8e42;
  #L4f8e2e.  v3:= v0 + -1;
  #L4f8e32.  if v2 != v3 then goto L4f8e42;
  #L4f8e36.  v3:= v5[v2] @kind byte;
  #L4f8e3a.  v3:= v3 ^& 255;
  #L4f8e3e.  if v3 == 0 then goto L4f8e74;
  #L4f8e42.  v3:= `@@d7.j.a` @type ^`char`[] @kind object;
  #L4f8e46.  v4:= v5[v2] @kind byte;
  #L4f8e4a.  v4:= v4 ^& 240;
  #L4f8e4e.  v4:= v4 ^>> 4;
  #L4f8e52.  v4:= v3[v4] @kind char;
  #L4f8e56.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f8e5c.  v4:= v5[v2] @kind byte;
  #L4f8e60.  v4:= v4 ^& 15;
  #L4f8e64.  v3:= v3[v4] @kind char;
  #L4f8e68.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4f8e6e.  v2:= v2 + 1;
  #L4f8e72.  goto L4f8e26;
  #L4f8e74.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4f8e7a.  v5:= temp @kind object;
  #L4f8e7c.  return v5 @kind object;
}
procedure `byte`[] `c`(`java.lang.String` v6 @kind object) @signature `Ld7/j;.c:(Ljava/lang/String;)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4f8d4c.  call temp:= `length`(v6) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4f8d52.  v0:= temp;
  #L4f8d54.  v1:= v0 %% 2;
  #L4f8d58.  if v1 != 0 then goto L4f8d92;
  #L4f8d5c.  v1:= v0 / 2;
  #L4f8d60.  v1:= new `byte`[v1];
  #L4f8d64.  v2:= 0I;
  #L4f8d66.  if v2 >= v0 then goto L4f8d90;
  #L4f8d6a.  v3:= v2 + 2;
  #L4f8d6e.  v4:= v2 / 2;
  #L4f8d72.  call temp:= `substring`(v6, v2, v3) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L4f8d78.  v2:= temp @kind object;
  #L4f8d7a.  v5:= 16I;
  #L4f8d7e.  call temp:= `parseInt`(v2, v5) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;I)I` @kind static;
  #L4f8d84.  v2:= temp;
  #L4f8d86.  v2:= (`byte`) v2 @kind i2b;
  #L4f8d88.  v1[v4]:= v2 @kind byte;
  #L4f8d8c.  v2:= v3;
  #L4f8d8e.  goto L4f8d66;
  #L4f8d90.  return v1 @kind object;
  #L4f8d92.  v6:= new `java.lang.IllegalArgumentException`;
  #L4f8d96.  v0:= "Hex string has odd number of characters" @kind object;
  #L4f8d9a.  call `<init>`(v6, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f8da0.  throw v6;
}
