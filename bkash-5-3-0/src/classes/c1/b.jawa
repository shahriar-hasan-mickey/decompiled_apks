record `c1.b` @kind class @AccessFlag PUBLIC {
  `boolean` `c1.b.a` @AccessFlag PRIVATE;
  `boolean` `c1.b.b` @AccessFlag PRIVATE;
  `boolean` `c1.b.c` @AccessFlag PRIVATE;
  `boolean` `c1.b.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`c1.b` v0 @kind this, `boolean` v1 , `boolean` v2 , `boolean` v3 , `boolean` v4 ) @signature `Lc1/b;.<init>:(ZZZZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2a4af4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2a4afa.  v0.`c1.b.a` @type ^`boolean` := v1 @kind boolean;
  #L2a4afe.  v0.`c1.b.b` @type ^`boolean` := v2 @kind boolean;
  #L2a4b02.  v0.`c1.b.c` @type ^`boolean` := v3 @kind boolean;
  #L2a4b06.  v0.`c1.b.d` @type ^`boolean` := v4 @kind boolean;
  #L2a4b0a.  return @kind void;
}
procedure `boolean` `a`(`c1.b` v1 @kind this) @signature `Lc1/b;.a:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a49ec.  v0:= v1.`c1.b.a` @type ^`boolean` @kind boolean;
  #L2a49f0.  return v0;
}
procedure `boolean` `b`(`c1.b` v1 @kind this) @signature `Lc1/b;.b:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a4a04.  v0:= v1.`c1.b.c` @type ^`boolean` @kind boolean;
  #L2a4a08.  return v0;
}
procedure `boolean` `c`(`c1.b` v1 @kind this) @signature `Lc1/b;.c:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a4a1c.  v0:= v1.`c1.b.d` @type ^`boolean` @kind boolean;
  #L2a4a20.  return v0;
}
procedure `boolean` `d`(`c1.b` v1 @kind this) @signature `Lc1/b;.d:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a4a34.  v0:= v1.`c1.b.b` @type ^`boolean` @kind boolean;
  #L2a4a38.  return v0;
}
procedure `boolean` `equals`(`c1.b` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lc1/b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2a498c.  v0:= 1I;
  #L2a498e.  if v4 != v5 then goto L2a4994;
  #L2a4992.  return v0;
  #L2a4994.  v1:= instanceof @variable v5 @type ^`c1.b` @kind boolean;
  #L2a4998.  v2:= 0I;
  #L2a499a.  if v1 != 0 then goto L2a49a0;
  #L2a499e.  return v2;
  #L2a49a0.  v5:= (`c1.b`) v5 @kind object;
  #L2a49a4.  v1:= v4.`c1.b.a` @type ^`boolean` @kind boolean;
  #L2a49a8.  v3:= v5.`c1.b.a` @type ^`boolean` @kind boolean;
  #L2a49ac.  if v1 != v3 then goto L2a49d6;
  #L2a49b0.  v1:= v4.`c1.b.b` @type ^`boolean` @kind boolean;
  #L2a49b4.  v3:= v5.`c1.b.b` @type ^`boolean` @kind boolean;
  #L2a49b8.  if v1 != v3 then goto L2a49d6;
  #L2a49bc.  v1:= v4.`c1.b.c` @type ^`boolean` @kind boolean;
  #L2a49c0.  v3:= v5.`c1.b.c` @type ^`boolean` @kind boolean;
  #L2a49c4.  if v1 != v3 then goto L2a49d6;
  #L2a49c8.  v1:= v4.`c1.b.d` @type ^`boolean` @kind boolean;
  #L2a49cc.  v5:= v5.`c1.b.d` @type ^`boolean` @kind boolean;
  #L2a49d0.  if v1 != v5 then goto L2a49d6;
  #L2a49d4.  goto L2a49d8;
  #L2a49d6.  v0:= 0I;
  #L2a49d8.  return v0;
}
procedure `int` `hashCode`(`c1.b` v2 @kind this) @signature `Lc1/b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2a4a4c.  v0:= v2.`c1.b.a` @type ^`boolean` @kind boolean;
  #L2a4a50.  v1:= v2.`c1.b.b` @type ^`boolean` @kind boolean;
  #L2a4a54.  if v1 == 0 then goto L2a4a5c;
  #L2a4a58.  v0:= v0 + 16;
  #L2a4a5c.  v1:= v2.`c1.b.c` @type ^`boolean` @kind boolean;
  #L2a4a60.  if v1 == 0 then goto L2a4a68;
  #L2a4a64.  v0:= v0 + 256;
  #L2a4a68.  v1:= v2.`c1.b.d` @type ^`boolean` @kind boolean;
  #L2a4a6c.  if v1 == 0 then goto L2a4a74;
  #L2a4a70.  v0:= v0 + 4096;
  #L2a4a74.  return v0;
}
procedure `java.lang.String` `toString`(`c1.b` v3 @kind this) @signature `Lc1/b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2a4a88.  v0:= 4I;
  #L2a4a8a.  v0:= new `java.lang.Object`[v0];
  #L2a4a8e.  v1:= v3.`c1.b.a` @type ^`boolean` @kind boolean;
  #L2a4a92.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L2a4a98.  v1:= temp @kind object;
  #L2a4a9a.  v2:= 0I;
  #L2a4a9c.  v0[v2]:= v1 @kind object;
  #L2a4aa0.  v1:= v3.`c1.b.b` @type ^`boolean` @kind boolean;
  #L2a4aa4.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L2a4aaa.  v1:= temp @kind object;
  #L2a4aac.  v2:= 1I;
  #L2a4aae.  v0[v2]:= v1 @kind object;
  #L2a4ab2.  v1:= v3.`c1.b.c` @type ^`boolean` @kind boolean;
  #L2a4ab6.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L2a4abc.  v1:= temp @kind object;
  #L2a4abe.  v2:= 2I;
  #L2a4ac0.  v0[v2]:= v1 @kind object;
  #L2a4ac4.  v1:= v3.`c1.b.d` @type ^`boolean` @kind boolean;
  #L2a4ac8.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L2a4ace.  v1:= temp @kind object;
  #L2a4ad0.  v2:= 3I;
  #L2a4ad2.  v0[v2]:= v1 @kind object;
  #L2a4ad6.  v1:= "[ Connected=%b Validated=%b Metered=%b NotRoaming=%b ]" @kind object;
  #L2a4ada.  call temp:= `format`(v1, v0) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2a4ae0.  v0:= temp @kind object;
  #L2a4ae2.  return v0 @kind object;
}
