record `m.f$e` @kind class @AccessFlag FINAL extends `java.util.Collection` @kind interface {
  `m.f` `m.f$e.g` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`m.f$e` v0 @kind this, `m.f` v1 @kind object) @signature `Lm/f$e;.<init>:(Lm/f;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L529860.  v0.`m.f$e.g` @type ^`m.f` := v1 @kind object;
  #L529864.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L52986a.  return @kind void;
}
procedure `boolean` `add`(`m.f$e` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lm/f$e;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L529630.  v1:= new `java.lang.UnsupportedOperationException`;
  #L529634.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L52963a.  throw v1;
}
procedure `boolean` `addAll`(`m.f$e` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lm/f$e;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L52964c.  v1:= new `java.lang.UnsupportedOperationException`;
  #L529650.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L529656.  throw v1;
}
procedure `void` `clear`(`m.f$e` v1 @kind this) @signature `Lm/f$e;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52987c.  v0:= v1.`m.f$e.g` @type ^`m.f` @kind object;
  #L529880.  call `a`(v0) @signature `Lm/f;.a:()V` @kind virtual;
  #L529886.  return @kind void;
}
procedure `boolean` `contains`(`m.f$e` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lm/f$e;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L529668.  v0:= v1.`m.f$e.g` @type ^`m.f` @kind object;
  #L52966c.  call temp:= `f`(v0, v2) @signature `Lm/f;.f:(Ljava/lang/Object;)I` @kind virtual;
  #L529672.  v2:= temp;
  #L529674.  if v2 < 0 then goto L52967c;
  #L529678.  v2:= 1I;
  #L52967a.  goto L52967e;
  #L52967c.  v2:= 0I;
  #L52967e.  return v2;
}
procedure `boolean` `containsAll`(`m.f$e` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lm/f$e;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L529690.  call temp:= `iterator`(v2) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L529696.  v2:= temp @kind object;
  #L529698.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L52969e.  v0:= temp;
  #L5296a0.  if v0 == 0 then goto L5296bc;
  #L5296a4.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L5296aa.  v0:= temp @kind object;
  #L5296ac.  call temp:= `contains`(v1, v0) @signature `Lm/f$e;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L5296b2.  v0:= temp;
  #L5296b4.  if v0 != 0 then goto L529698;
  #L5296b8.  v2:= 0I;
  #L5296ba.  return v2;
  #L5296bc.  v2:= 1I;
  #L5296be.  return v2;
}
procedure `boolean` `isEmpty`(`m.f$e` v1 @kind this) @signature `Lm/f$e;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5296d0.  v0:= v1.`m.f$e.g` @type ^`m.f` @kind object;
  #L5296d4.  call temp:= `d`(v0) @signature `Lm/f;.d:()I` @kind virtual;
  #L5296da.  v0:= temp;
  #L5296dc.  if v0 != 0 then goto L5296e4;
  #L5296e0.  v0:= 1I;
  #L5296e2.  goto L5296e6;
  #L5296e4.  v0:= 0I;
  #L5296e6.  return v0;
}
procedure `java.util.Iterator` `iterator`(`m.f$e` v3 @kind this) @signature `Lm/f$e;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L52983c.  v0:= new `m.f$a`;
  #L529840.  v1:= v3.`m.f$e.g` @type ^`m.f` @kind object;
  #L529844.  v2:= 1I;
  #L529846.  call `<init>`(v0, v1, v2) @signature `Lm/f$a;.<init>:(Lm/f;I)V` @kind direct;
  #L52984c.  return v0 @kind object;
}
procedure `boolean` `remove`(`m.f$e` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lm/f$e;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5296f8.  v0:= v1.`m.f$e.g` @type ^`m.f` @kind object;
  #L5296fc.  call temp:= `f`(v0, v2) @signature `Lm/f;.f:(Ljava/lang/Object;)I` @kind virtual;
  #L529702.  v2:= temp;
  #L529704.  if v2 < 0 then goto L529716;
  #L529708.  v0:= v1.`m.f$e.g` @type ^`m.f` @kind object;
  #L52970c.  call `h`(v0, v2) @signature `Lm/f;.h:(I)V` @kind virtual;
  #L529712.  v2:= 1I;
  #L529714.  return v2;
  #L529716.  v2:= 0I;
  #L529718.  return v2;
}
procedure `boolean` `removeAll`(`m.f$e` v5 @kind this, `java.util.Collection` v6 @kind object) @signature `Lm/f$e;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L52972c.  v0:= v5.`m.f$e.g` @type ^`m.f` @kind object;
  #L529730.  call temp:= `d`(v0) @signature `Lm/f;.d:()I` @kind virtual;
  #L529736.  v0:= temp;
  #L529738.  v1:= 0I;
  #L52973a.  v2:= 0I;
  #L52973c.  if v1 >= v0 then goto L529772;
  #L529740.  v3:= v5.`m.f$e.g` @type ^`m.f` @kind object;
  #L529744.  v4:= 1I;
  #L529746.  call temp:= `b`(v3, v1, v4) @signature `Lm/f;.b:(II)Ljava/lang/Object;` @kind virtual;
  #L52974c.  v3:= temp @kind object;
  #L52974e.  call temp:= `contains`(v6, v3) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L529754.  v3:= temp;
  #L529756.  if v3 == 0 then goto L52976e;
  #L52975a.  v2:= v5.`m.f$e.g` @type ^`m.f` @kind object;
  #L52975e.  call `h`(v2, v1) @signature `Lm/f;.h:(I)V` @kind virtual;
  #L529764.  v1:= v1 + -1;
  #L529768.  v0:= v0 + -1;
  #L52976c.  v2:= 1I;
  #L52976e.  v1:= v1 + v4 @kind int;
  #L529770.  goto L52973c;
  #L529772.  return v2;
}
procedure `boolean` `retainAll`(`m.f$e` v5 @kind this, `java.util.Collection` v6 @kind object) @signature `Lm/f$e;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L529784.  v0:= v5.`m.f$e.g` @type ^`m.f` @kind object;
  #L529788.  call temp:= `d`(v0) @signature `Lm/f;.d:()I` @kind virtual;
  #L52978e.  v0:= temp;
  #L529790.  v1:= 0I;
  #L529792.  v2:= 0I;
  #L529794.  if v1 >= v0 then goto L5297ca;
  #L529798.  v3:= v5.`m.f$e.g` @type ^`m.f` @kind object;
  #L52979c.  v4:= 1I;
  #L52979e.  call temp:= `b`(v3, v1, v4) @signature `Lm/f;.b:(II)Ljava/lang/Object;` @kind virtual;
  #L5297a4.  v3:= temp @kind object;
  #L5297a6.  call temp:= `contains`(v6, v3) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L5297ac.  v3:= temp;
  #L5297ae.  if v3 != 0 then goto L5297c6;
  #L5297b2.  v2:= v5.`m.f$e.g` @type ^`m.f` @kind object;
  #L5297b6.  call `h`(v2, v1) @signature `Lm/f;.h:(I)V` @kind virtual;
  #L5297bc.  v1:= v1 + -1;
  #L5297c0.  v0:= v0 + -1;
  #L5297c4.  v2:= 1I;
  #L5297c6.  v1:= v1 + v4 @kind int;
  #L5297c8.  goto L529794;
  #L5297ca.  return v2;
}
procedure `int` `size`(`m.f$e` v1 @kind this) @signature `Lm/f$e;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5297dc.  v0:= v1.`m.f$e.g` @type ^`m.f` @kind object;
  #L5297e0.  call temp:= `d`(v0) @signature `Lm/f;.d:()I` @kind virtual;
  #L5297e6.  v0:= temp;
  #L5297e8.  return v0;
}
procedure `java.lang.Object`[] `toArray`(`m.f$e` v2 @kind this) @signature `Lm/f$e;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5297fc.  v0:= v2.`m.f$e.g` @type ^`m.f` @kind object;
  #L529800.  v1:= 1I;
  #L529802.  call temp:= `q`(v0, v1) @signature `Lm/f;.q:(I)[Ljava/lang/Object;` @kind virtual;
  #L529808.  v0:= temp @kind object;
  #L52980a.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`m.f$e` v2 @kind this, `java.lang.Object`[] v3 @kind object) @signature `Lm/f$e;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L52981c.  v0:= v2.`m.f$e.g` @type ^`m.f` @kind object;
  #L529820.  v1:= 1I;
  #L529822.  call temp:= `r`(v0, v3, v1) @signature `Lm/f;.r:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind virtual;
  #L529828.  v3:= temp @kind object;
  #L52982a.  return v3 @kind object;
}
