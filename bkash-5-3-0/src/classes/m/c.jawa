record `m.c` @kind class @AccessFlag  {
}
global `int`[] `@@m.c.a` @AccessFlag STATIC_FINAL;
global `long`[] `@@m.c.b` @AccessFlag STATIC_FINAL;
global `java.lang.Object`[] `@@m.c.c` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lm/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L5282ac.  v0:= 0I;
  #L5282ae.  v1:= new `int`[v0];
  #L5282b2.  `@@m.c.a` @type ^`int`[] := v1 @kind object;
  #L5282b6.  v1:= new `long`[v0];
  #L5282ba.  `@@m.c.b` @type ^`long`[] := v1 @kind object;
  #L5282be.  v0:= new `java.lang.Object`[v0];
  #L5282c2.  `@@m.c.c` @type ^`java.lang.Object`[] := v0 @kind object;
  #L5282c6.  return @kind void;
}
procedure `int` `a`(`int`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lm/c;.a:([III)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L5281a8.  v4:= v4 + -1;
  #L5281ac.  v0:= 0I;
  #L5281ae.  if v0 > v4 then goto L5281d8;
  #L5281b2.  v1:= v0 + v4 @kind int;
  #L5281b6.  v1:= v1 ^>> 1;
  #L5281ba.  v2:= v3[v1];
  #L5281be.  if v2 >= v5 then goto L5281ca;
  #L5281c2.  v1:= v1 + 1;
  #L5281c6.  v0:= v1;
  #L5281c8.  goto L5281ae;
  #L5281ca.  if v2 <= v5 then goto L5281d6;
  #L5281ce.  v1:= v1 + -1;
  #L5281d2.  v4:= v1;
  #L5281d4.  goto L5281ae;
  #L5281d6.  return v1;
  #L5281d8.  v3:= ~v0 @kind int;
  #L5281da.  return v3;
}
procedure `int` `b`(`long`[] v5 @kind object, `int` v6 , `long` v7 ) @signature `Lm/c;.b:([JIJ)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L5281ec.  v6:= v6 + -1;
  #L5281f0.  v0:= 0I;
  #L5281f2.  if v0 > v6 then goto L528220;
  #L5281f6.  v1:= v0 + v6 @kind int;
  #L5281fa.  v1:= v1 ^>> 1;
  #L5281fe.  v2:= v5[v1] @kind wide;
  #L528202.  v4:= lcmp(v2, v7);
  #L528206.  if v4 >= 0 then goto L528212;
  #L52820a.  v1:= v1 + 1;
  #L52820e.  v0:= v1;
  #L528210.  goto L5281f2;
  #L528212.  if v4 <= 0 then goto L52821e;
  #L528216.  v1:= v1 + -1;
  #L52821a.  v6:= v1;
  #L52821c.  goto L5281f2;
  #L52821e.  return v1;
  #L528220.  v5:= ~v0 @kind int;
  #L528222.  return v5;
}
procedure `boolean` `c`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lm/c;.c:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L528178.  if v0 == v1 then goto L528192;
  #L52817c.  if v0 == 0 then goto L52818e;
  #L528180.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L528186.  v0:= temp;
  #L528188.  if v0 == 0 then goto L52818e;
  #L52818c.  goto L528192;
  #L52818e.  v0:= 0I;
  #L528190.  goto L528194;
  #L528192.  v0:= 1I;
  #L528194.  return v0;
}
procedure `int` `d`(`int` v2 ) @signature `Lm/c;.d:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L528234.  v0:= 4I;
  #L528236.  v1:= 32I;
  #L52823a.  if v0 >= v1 then goto L528252;
  #L52823e.  v1:= 1I;
  #L528240.  v1:= v1 ^< v0 @kind int;
  #L528242.  v1:= v1 + -12;
  #L528246.  if v2 > v1 then goto L52824c;
  #L52824a.  return v1;
  #L52824c.  v0:= v0 + 1;
  #L528250.  goto L528236;
  #L528252.  return v2;
}
procedure `int` `e`(`int` v0 ) @signature `Lm/c;.e:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L528264.  v0:= v0 * 4;
  #L528268.  call temp:= `d`(v0) @signature `Lm/c;.d:(I)I` @kind static;
  #L52826e.  v0:= temp;
  #L528270.  v0:= v0 / 4;
  #L528274.  return v0;
}
procedure `int` `f`(`int` v0 ) @signature `Lm/c;.f:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L528288.  v0:= v0 * 8;
  #L52828c.  call temp:= `d`(v0) @signature `Lm/c;.d:(I)I` @kind static;
  #L528292.  v0:= temp;
  #L528294.  v0:= v0 / 8;
  #L528298.  return v0;
}
