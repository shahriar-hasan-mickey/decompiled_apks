record `m.g` @kind class @AccessFlag PUBLIC {
  `int`[] `m.g.g` @AccessFlag ;
  `java.lang.Object`[] `m.g.h` @AccessFlag ;
  `int` `m.g.i` @AccessFlag ;
}
global `java.lang.Object`[] `@@m.g.j` @AccessFlag STATIC;
global `int` `@@m.g.k` @AccessFlag STATIC;
global `java.lang.Object`[] `@@m.g.l` @AccessFlag STATIC;
global `int` `@@m.g.m` @AccessFlag STATIC;
procedure `void` `<init>`(`m.g` v1 @kind this) @signature `Lm/g;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L52a3f8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L52a3fe.  v0:= `@@m.c.a` @type ^`int`[] @kind object;
  #L52a402.  v1.`m.g.g` @type ^`int`[] := v0 @kind object;
  #L52a406.  v0:= `@@m.c.c` @type ^`java.lang.Object`[] @kind object;
  #L52a40a.  v1.`m.g.h` @type ^`java.lang.Object`[] := v0 @kind object;
  #L52a40e.  v0:= 0I;
  #L52a410.  v1.`m.g.i` @type ^`int` := v0;
  #L52a414.  return @kind void;
}
procedure `void` `<init>`(`m.g` v0 @kind this, `int` v1 ) @signature `Lm/g;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L52a428.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L52a42e.  if v1 != 0 then goto L52a444;
  #L52a432.  v1:= `@@m.c.a` @type ^`int`[] @kind object;
  #L52a436.  v0.`m.g.g` @type ^`int`[] := v1 @kind object;
  #L52a43a.  v1:= `@@m.c.c` @type ^`java.lang.Object`[] @kind object;
  #L52a43e.  v0.`m.g.h` @type ^`java.lang.Object`[] := v1 @kind object;
  #L52a442.  goto L52a44a;
  #L52a444.  call `a`(v0, v1) @signature `Lm/g;.a:(I)V` @kind direct;
  #L52a44a.  v1:= 0I;
  #L52a44c.  v0.`m.g.i` @type ^`int` := v1;
  #L52a450.  return @kind void;
}
procedure `void` `<init>`(`m.g` v0 @kind this, `m.g` v1 @kind object) @signature `Lm/g;.<init>:(Lm/g;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L52a464.  call `<init>`(v0) @signature `Lm/g;.<init>:()V` @kind direct;
  #L52a46a.  if v1 == 0 then goto L52a474;
  #L52a46e.  call `j`(v0, v1) @signature `Lm/g;.j:(Lm/g;)V` @kind virtual;
  #L52a474.  return @kind void;
}
procedure `void` `a`(`m.g` v5 @kind this, `int` v6 ) @signature `Lm/g;.a:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L52a488.  v0:= constclass @type ^`m.g` @kind object;
  #L52a48c.  v1:= 0I;
  #L52a48e.  v2:= 0I;
  #L52a490.  v3:= 1I;
  #L52a492.  v4:= 8I;
  #L52a496.  if v6 != v4 then goto L52a4e0;
  #L52a49a.  @monitorenter v0
  #L52a49c.  v4:= `@@m.g.l` @type ^`java.lang.Object`[] @kind object;
  #L52a4a0.  if v4 == 0 then goto L52a4d6;
  #L52a4a4.  v5.`m.g.h` @type ^`java.lang.Object`[] := v4 @kind object;
  #L52a4a8.  v6:= v4[v2] @kind object;
  #L52a4ac.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L52a4b0.  `@@m.g.l` @type ^`java.lang.Object`[] := v6 @kind object;
  #L52a4b4.  v6:= v4[v3] @kind object;
  #L52a4b8.  v6:= (`int`[]) v6 @kind object;
  #L52a4bc.  v5.`m.g.g` @type ^`int`[] := v6 @kind object;
  #L52a4c0.  v4[v3]:= v1 @kind object;
  #L52a4c4.  v4[v2]:= v1 @kind object;
  #L52a4c8.  v6:= `@@m.g.m` @type ^`int`;
  #L52a4cc.  v6:= v6 - v3 @kind int;
  #L52a4ce.  `@@m.g.m` @type ^`int` := v6;
  #L52a4d2.  @monitorexit v0
  #L52a4d4.  return @kind void;
  #L52a4d6.  @monitorexit v0
  #L52a4d8.  goto L52a52c;
  #L52a4da.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L52a4dc.  @monitorexit v0
  #L52a4de.  throw v6;
  #L52a4e0.  v4:= 4I;
  #L52a4e2.  if v6 != v4 then goto L52a52c;
  #L52a4e6.  @monitorenter v0
  #L52a4e8.  v4:= `@@m.g.j` @type ^`java.lang.Object`[] @kind object;
  #L52a4ec.  if v4 == 0 then goto L52a522;
  #L52a4f0.  v5.`m.g.h` @type ^`java.lang.Object`[] := v4 @kind object;
  #L52a4f4.  v6:= v4[v2] @kind object;
  #L52a4f8.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L52a4fc.  `@@m.g.j` @type ^`java.lang.Object`[] := v6 @kind object;
  #L52a500.  v6:= v4[v3] @kind object;
  #L52a504.  v6:= (`int`[]) v6 @kind object;
  #L52a508.  v5.`m.g.g` @type ^`int`[] := v6 @kind object;
  #L52a50c.  v4[v3]:= v1 @kind object;
  #L52a510.  v4[v2]:= v1 @kind object;
  #L52a514.  v6:= `@@m.g.k` @type ^`int`;
  #L52a518.  v6:= v6 - v3 @kind int;
  #L52a51a.  `@@m.g.k` @type ^`int` := v6;
  #L52a51e.  @monitorexit v0
  #L52a520.  return @kind void;
  #L52a522.  @monitorexit v0
  #L52a524.  goto L52a52c;
  #L52a526.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L52a528.  @monitorexit v0
  #L52a52a.  throw v6;
  #L52a52c.  v0:= new `int`[v6];
  #L52a530.  v5.`m.g.g` @type ^`int`[] := v0 @kind object;
  #L52a534.  v6:= v6 ^< v3 @kind int;
  #L52a536.  v6:= new `java.lang.Object`[v6];
  #L52a53a.  v5.`m.g.h` @type ^`java.lang.Object`[] := v6 @kind object;
  #L52a53e.  return @kind void;
  catch `java.lang.Throwable` @[L52a49c..L52a4de] goto L52a4da;
  catch `java.lang.Throwable` @[L52a4e8..L52a52a] goto L52a526;
}
procedure `int` `b`(`int`[] v0 @kind object, `int` v1 , `int` v2 ) @signature `Lm/g;.b:([III)I` @AccessFlag PRIVATE_STATIC {
    temp;

  #L529d38.  call temp:= `a`(v0, v1, v2) @signature `Lm/c;.a:([III)I` @kind static;
  #L529d3e.  v0:= temp;
  #L529d40.  return v0;
  #L529d42.  v0:= new `java.util.ConcurrentModificationException`;
  #L529d46.  call `<init>`(v0) @signature `Ljava/util/ConcurrentModificationException;.<init>:()V` @kind direct;
  #L529d4c.  throw v0;
  catch `java.lang.ArrayIndexOutOfBoundsException` @[L529d38..L529d40] goto L529d42;
}
procedure `void` `d`(`int`[] v8 @kind object, `java.lang.Object`[] v9 @kind object, `int` v10 ) @signature `Lm/g;.d:([I[Ljava/lang/Object;I)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L52a624.  v0:= constclass @type ^`m.g` @kind object;
  #L52a628.  v1:= length @variable v8;
  #L52a62a.  v2:= 0I;
  #L52a62c.  v3:= 2I;
  #L52a62e.  v4:= 0I;
  #L52a630.  v5:= 10I;
  #L52a634.  v6:= 1I;
  #L52a636.  v7:= 8I;
  #L52a63a.  if v1 != v7 then goto L52a680;
  #L52a63e.  @monitorenter v0
  #L52a640.  v1:= `@@m.g.m` @type ^`int`;
  #L52a644.  if v1 >= v5 then goto L52a676;
  #L52a648.  v1:= `@@m.g.l` @type ^`java.lang.Object`[] @kind object;
  #L52a64c.  v9[v4]:= v1 @kind object;
  #L52a650.  v9[v6]:= v8 @kind object;
  #L52a654.  v8:= v10 ^< 1;
  #L52a658.  v8:= v8 - v6 @kind int;
  #L52a65a.  if v8 < v3 then goto L52a668;
  #L52a65e.  v9[v8]:= v2 @kind object;
  #L52a662.  v8:= v8 + -1;
  #L52a666.  goto L52a65a;
  #L52a668.  `@@m.g.l` @type ^`java.lang.Object`[] := v9 @kind object;
  #L52a66c.  v8:= `@@m.g.m` @type ^`int`;
  #L52a670.  v8:= v8 + v6 @kind int;
  #L52a672.  `@@m.g.m` @type ^`int` := v8;
  #L52a676.  @monitorexit v0
  #L52a678.  goto L52a6ca;
  #L52a67a.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L52a67c.  @monitorexit v0
  #L52a67e.  throw v8;
  #L52a680.  v1:= length @variable v8;
  #L52a682.  v7:= 4I;
  #L52a684.  if v1 != v7 then goto L52a6ca;
  #L52a688.  @monitorenter v0
  #L52a68a.  v1:= `@@m.g.k` @type ^`int`;
  #L52a68e.  if v1 >= v5 then goto L52a6c0;
  #L52a692.  v1:= `@@m.g.j` @type ^`java.lang.Object`[] @kind object;
  #L52a696.  v9[v4]:= v1 @kind object;
  #L52a69a.  v9[v6]:= v8 @kind object;
  #L52a69e.  v8:= v10 ^< 1;
  #L52a6a2.  v8:= v8 - v6 @kind int;
  #L52a6a4.  if v8 < v3 then goto L52a6b2;
  #L52a6a8.  v9[v8]:= v2 @kind object;
  #L52a6ac.  v8:= v8 + -1;
  #L52a6b0.  goto L52a6a4;
  #L52a6b2.  `@@m.g.j` @type ^`java.lang.Object`[] := v9 @kind object;
  #L52a6b6.  v8:= `@@m.g.k` @type ^`int`;
  #L52a6ba.  v8:= v8 + v6 @kind int;
  #L52a6bc.  `@@m.g.k` @type ^`int` := v8;
  #L52a6c0.  @monitorexit v0
  #L52a6c2.  goto L52a6ca;
  #L52a6c4.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L52a6c6.  @monitorexit v0
  #L52a6c8.  throw v8;
  #L52a6ca.  return @kind void;
  catch `java.lang.Throwable` @[L52a640..L52a67e] goto L52a67a;
  catch `java.lang.Throwable` @[L52a68a..L52a6c8] goto L52a6c4;
}
procedure `void` `c`(`m.g` v5 @kind this, `int` v6 ) @signature `Lm/g;.c:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L52a5bc.  v0:= v5.`m.g.i` @type ^`int`;
  #L52a5c0.  v1:= v5.`m.g.g` @type ^`int`[] @kind object;
  #L52a5c4.  v2:= length @variable v1;
  #L52a5c6.  if v2 >= v6 then goto L52a5fc;
  #L52a5ca.  v2:= v5.`m.g.h` @type ^`java.lang.Object`[] @kind object;
  #L52a5ce.  call `a`(v5, v6) @signature `Lm/g;.a:(I)V` @kind direct;
  #L52a5d4.  v6:= v5.`m.g.i` @type ^`int`;
  #L52a5d8.  if v6 <= 0 then goto L52a5f6;
  #L52a5dc.  v6:= v5.`m.g.g` @type ^`int`[] @kind object;
  #L52a5e0.  v3:= 0I;
  #L52a5e2.  call `arraycopy`(v1, v3, v6, v3, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L52a5e8.  v6:= v5.`m.g.h` @type ^`java.lang.Object`[] @kind object;
  #L52a5ec.  v4:= v0 ^< 1;
  #L52a5f0.  call `arraycopy`(v2, v3, v6, v3, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L52a5f6.  call `d`(v1, v2, v0) @signature `Lm/g;.d:([I[Ljava/lang/Object;I)V` @kind static;
  #L52a5fc.  v6:= v5.`m.g.i` @type ^`int`;
  #L52a600.  if v6 != v0 then goto L52a606;
  #L52a604.  return @kind void;
  #L52a606.  v6:= new `java.util.ConcurrentModificationException`;
  #L52a60a.  call `<init>`(v6) @signature `Ljava/util/ConcurrentModificationException;.<init>:()V` @kind direct;
  #L52a610.  throw v6;
}
procedure `void` `clear`(`m.g` v4 @kind this) @signature `Lm/g;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L52a568.  v0:= v4.`m.g.i` @type ^`int`;
  #L52a56c.  if v0 <= 0 then goto L52a594;
  #L52a570.  v1:= v4.`m.g.g` @type ^`int`[] @kind object;
  #L52a574.  v2:= v4.`m.g.h` @type ^`java.lang.Object`[] @kind object;
  #L52a578.  v3:= `@@m.c.a` @type ^`int`[] @kind object;
  #L52a57c.  v4.`m.g.g` @type ^`int`[] := v3 @kind object;
  #L52a580.  v3:= `@@m.c.c` @type ^`java.lang.Object`[] @kind object;
  #L52a584.  v4.`m.g.h` @type ^`java.lang.Object`[] := v3 @kind object;
  #L52a588.  v3:= 0I;
  #L52a58a.  v4.`m.g.i` @type ^`int` := v3;
  #L52a58e.  call `d`(v1, v2, v0) @signature `Lm/g;.d:([I[Ljava/lang/Object;I)V` @kind static;
  #L52a594.  v0:= v4.`m.g.i` @type ^`int`;
  #L52a598.  if v0 > 0 then goto L52a59e;
  #L52a59c.  return @kind void;
  #L52a59e.  v0:= new `java.util.ConcurrentModificationException`;
  #L52a5a2.  call `<init>`(v0) @signature `Ljava/util/ConcurrentModificationException;.<init>:()V` @kind direct;
  #L52a5a8.  throw v0;
}
procedure `boolean` `containsKey`(`m.g` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lm/g;.containsKey:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L529b20.  call temp:= `f`(v0, v1) @signature `Lm/g;.f:(Ljava/lang/Object;)I` @kind virtual;
  #L529b26.  v1:= temp;
  #L529b28.  if v1 < 0 then goto L529b30;
  #L529b2c.  v1:= 1I;
  #L529b2e.  goto L529b32;
  #L529b30.  v1:= 0I;
  #L529b32.  return v1;
}
procedure `boolean` `containsValue`(`m.g` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lm/g;.containsValue:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L529b44.  call temp:= `h`(v0, v1) @signature `Lm/g;.h:(Ljava/lang/Object;)I` @kind virtual;
  #L529b4a.  v1:= temp;
  #L529b4c.  if v1 < 0 then goto L529b54;
  #L529b50.  v1:= 1I;
  #L529b52.  goto L529b56;
  #L529b54.  v1:= 0I;
  #L529b56.  return v1;
}
procedure `int` `e`(`m.g` v5 @kind this, `java.lang.Object` v6 @kind object, `int` v7 ) @signature `Lm/g;.e:(Ljava/lang/Object;I)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L529dc0.  v0:= v5.`m.g.i` @type ^`int`;
  #L529dc4.  if v0 != 0 then goto L529dcc;
  #L529dc8.  v6:= -1I;
  #L529dca.  return v6;
  #L529dcc.  v1:= v5.`m.g.g` @type ^`int`[] @kind object;
  #L529dd0.  call temp:= `b`(v1, v0, v7) @signature `Lm/g;.b:([III)I` @kind static;
  #L529dd6.  v1:= temp;
  #L529dd8.  if v1 >= 0 then goto L529dde;
  #L529ddc.  return v1;
  #L529dde.  v2:= v5.`m.g.h` @type ^`java.lang.Object`[] @kind object;
  #L529de2.  v3:= v1 ^< 1;
  #L529de6.  v2:= v2[v3] @kind object;
  #L529dea.  call temp:= `equals`(v6, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L529df0.  v2:= temp;
  #L529df2.  if v2 == 0 then goto L529df8;
  #L529df6.  return v1;
  #L529df8.  v2:= v1 + 1;
  #L529dfc.  if v2 >= v0 then goto L529e2c;
  #L529e00.  v3:= v5.`m.g.g` @type ^`int`[] @kind object;
  #L529e04.  v3:= v3[v2];
  #L529e08.  if v3 != v7 then goto L529e2c;
  #L529e0c.  v3:= v5.`m.g.h` @type ^`java.lang.Object`[] @kind object;
  #L529e10.  v4:= v2 ^< 1;
  #L529e14.  v3:= v3[v4] @kind object;
  #L529e18.  call temp:= `equals`(v6, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L529e1e.  v3:= temp;
  #L529e20.  if v3 == 0 then goto L529e26;
  #L529e24.  return v2;
  #L529e26.  v2:= v2 + 1;
  #L529e2a.  goto L529dfc;
  #L529e2c.  v1:= v1 + -1;
  #L529e30.  if v1 < 0 then goto L529e60;
  #L529e34.  v0:= v5.`m.g.g` @type ^`int`[] @kind object;
  #L529e38.  v0:= v0[v1];
  #L529e3c.  if v0 != v7 then goto L529e60;
  #L529e40.  v0:= v5.`m.g.h` @type ^`java.lang.Object`[] @kind object;
  #L529e44.  v3:= v1 ^< 1;
  #L529e48.  v0:= v0[v3] @kind object;
  #L529e4c.  call temp:= `equals`(v6, v0) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L529e52.  v0:= temp;
  #L529e54.  if v0 == 0 then goto L529e5a;
  #L529e58.  return v1;
  #L529e5a.  v1:= v1 + -1;
  #L529e5e.  goto L529e30;
  #L529e60.  v6:= ~v2 @kind int;
  #L529e62.  return v6;
}
procedure `boolean` `equals`(`m.g` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lm/g;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L529b68.  v0:= 1I;
  #L529b6a.  if v6 != v7 then goto L529b70;
  #L529b6e.  return v0;
  #L529b70.  v1:= instanceof @variable v7 @type ^`m.g` @kind boolean;
  #L529b74.  v2:= 0I;
  #L529b76.  if v1 == 0 then goto L529be4;
  #L529b7a.  v7:= (`m.g`) v7 @kind object;
  #L529b7e.  call temp:= `size`(v6) @signature `Lm/g;.size:()I` @kind virtual;
  #L529b84.  v1:= temp;
  #L529b86.  call temp:= `size`(v7) @signature `Lm/g;.size:()I` @kind virtual;
  #L529b8c.  v3:= temp;
  #L529b8e.  if v1 == v3 then goto L529b94;
  #L529b92.  return v2;
  #L529b94.  v1:= 0I;
  #L529b96.  v3:= v6.`m.g.i` @type ^`int`;
  #L529b9a.  if v1 >= v3 then goto L529be0;
  #L529b9e.  call temp:= `i`(v6, v1) @signature `Lm/g;.i:(I)Ljava/lang/Object;` @kind virtual;
  #L529ba4.  v3:= temp @kind object;
  #L529ba6.  call temp:= `m`(v6, v1) @signature `Lm/g;.m:(I)Ljava/lang/Object;` @kind virtual;
  #L529bac.  v4:= temp @kind object;
  #L529bae.  call temp:= `get`(v7, v3) @signature `Lm/g;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L529bb4.  v5:= temp @kind object;
  #L529bb6.  if v4 != 0 then goto L529bcc;
  #L529bba.  if v5 != 0 then goto L529bca;
  #L529bbe.  call temp:= `containsKey`(v7, v3) @signature `Lm/g;.containsKey:(Ljava/lang/Object;)Z` @kind virtual;
  #L529bc4.  v3:= temp;
  #L529bc6.  if v3 != 0 then goto L529bda;
  #L529bca.  return v2;
  #L529bcc.  call temp:= `equals`(v4, v5) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L529bd2.  v3:= temp;
  #L529bd4.  if v3 != 0 then goto L529bda;
  #L529bd8.  return v2;
  #L529bda.  v1:= v1 + 1;
  #L529bde.  goto L529b96;
  #L529be0.  return v0;
  #L529be2.  return v2;
  #L529be4.  v1:= instanceof @variable v7 @type ^`java.util.Map` @kind boolean;
  #L529be8.  if v1 == 0 then goto L529c54;
  #L529bec.  v7:= (`java.util.Map`) v7 @kind object;
  #L529bf0.  call temp:= `size`(v6) @signature `Lm/g;.size:()I` @kind virtual;
  #L529bf6.  v1:= temp;
  #L529bf8.  call temp:= `size`(v7) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L529bfe.  v3:= temp;
  #L529c00.  if v1 == v3 then goto L529c06;
  #L529c04.  return v2;
  #L529c06.  v1:= 0I;
  #L529c08.  v3:= v6.`m.g.i` @type ^`int`;
  #L529c0c.  if v1 >= v3 then goto L529c52;
  #L529c10.  call temp:= `i`(v6, v1) @signature `Lm/g;.i:(I)Ljava/lang/Object;` @kind virtual;
  #L529c16.  v3:= temp @kind object;
  #L529c18.  call temp:= `m`(v6, v1) @signature `Lm/g;.m:(I)Ljava/lang/Object;` @kind virtual;
  #L529c1e.  v4:= temp @kind object;
  #L529c20.  call temp:= `get`(v7, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L529c26.  v5:= temp @kind object;
  #L529c28.  if v4 != 0 then goto L529c3e;
  #L529c2c.  if v5 != 0 then goto L529c3c;
  #L529c30.  call temp:= `containsKey`(v7, v3) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L529c36.  v3:= temp;
  #L529c38.  if v3 != 0 then goto L529c4c;
  #L529c3c.  return v2;
  #L529c3e.  call temp:= `equals`(v4, v5) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L529c44.  v3:= temp;
  #L529c46.  if v3 != 0 then goto L529c4c;
  #L529c4a.  return v2;
  #L529c4c.  v1:= v1 + 1;
  #L529c50.  goto L529c08;
  #L529c52.  return v0;
  #L529c54.  return v2;
  catch `java.lang.NullPointerException` @[L529b96..L529bd4] goto L529be2;
  catch `java.lang.ClassCastException` @[L529b96..L529bd4] goto L529be2;
  catch `java.lang.NullPointerException` @[L529c08..L529c46] goto L529c54;
  catch `java.lang.ClassCastException` @[L529c08..L529c46] goto L529c54;
}
procedure `int` `f`(`m.g` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lm/g;.f:(Ljava/lang/Object;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L529e74.  if v2 != 0 then goto L529e82;
  #L529e78.  call temp:= `g`(v1) @signature `Lm/g;.g:()I` @kind virtual;
  #L529e7e.  v2:= temp;
  #L529e80.  goto L529e92;
  #L529e82.  call temp:= `hashCode`(v2) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L529e88.  v0:= temp;
  #L529e8a.  call temp:= `e`(v1, v2, v0) @signature `Lm/g;.e:(Ljava/lang/Object;I)I` @kind virtual;
  #L529e90.  v2:= temp;
  #L529e92.  return v2;
}
procedure `int` `g`(`m.g` v5 @kind this) @signature `Lm/g;.g:()I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L529ea4.  v0:= v5.`m.g.i` @type ^`int`;
  #L529ea8.  if v0 != 0 then goto L529eb0;
  #L529eac.  v0:= -1I;
  #L529eae.  return v0;
  #L529eb0.  v1:= v5.`m.g.g` @type ^`int`[] @kind object;
  #L529eb4.  v2:= 0I;
  #L529eb6.  call temp:= `b`(v1, v0, v2) @signature `Lm/g;.b:([III)I` @kind static;
  #L529ebc.  v1:= temp;
  #L529ebe.  if v1 >= 0 then goto L529ec4;
  #L529ec2.  return v1;
  #L529ec4.  v2:= v5.`m.g.h` @type ^`java.lang.Object`[] @kind object;
  #L529ec8.  v3:= v1 ^< 1;
  #L529ecc.  v2:= v2[v3] @kind object;
  #L529ed0.  if v2 != 0 then goto L529ed6;
  #L529ed4.  return v1;
  #L529ed6.  v2:= v1 + 1;
  #L529eda.  if v2 >= v0 then goto L529f02;
  #L529ede.  v3:= v5.`m.g.g` @type ^`int`[] @kind object;
  #L529ee2.  v3:= v3[v2];
  #L529ee6.  if v3 != 0 then goto L529f02;
  #L529eea.  v3:= v5.`m.g.h` @type ^`java.lang.Object`[] @kind object;
  #L529eee.  v4:= v2 ^< 1;
  #L529ef2.  v3:= v3[v4] @kind object;
  #L529ef6.  if v3 != 0 then goto L529efc;
  #L529efa.  return v2;
  #L529efc.  v2:= v2 + 1;
  #L529f00.  goto L529eda;
  #L529f02.  v1:= v1 + -1;
  #L529f06.  if v1 < 0 then goto L529f2e;
  #L529f0a.  v0:= v5.`m.g.g` @type ^`int`[] @kind object;
  #L529f0e.  v0:= v0[v1];
  #L529f12.  if v0 != 0 then goto L529f2e;
  #L529f16.  v0:= v5.`m.g.h` @type ^`java.lang.Object`[] @kind object;
  #L529f1a.  v3:= v1 ^< 1;
  #L529f1e.  v0:= v0[v3] @kind object;
  #L529f22.  if v0 != 0 then goto L529f28;
  #L529f26.  return v1;
  #L529f28.  v1:= v1 + -1;
  #L529f2c.  goto L529f06;
  #L529f2e.  v0:= ~v2 @kind int;
  #L529f30.  return v0;
}
procedure `java.lang.Object` `get`(`m.g` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lm/g;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L529fbc.  v0:= 0I;
  #L529fbe.  call temp:= `getOrDefault`(v1, v2, v0) @signature `Lm/g;.getOrDefault:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L529fc4.  v2:= temp @kind object;
  #L529fc6.  return v2 @kind object;
}
procedure `java.lang.Object` `getOrDefault`(`m.g` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lm/g;.getOrDefault:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L529fd8.  call temp:= `f`(v0, v1) @signature `Lm/g;.f:(Ljava/lang/Object;)I` @kind virtual;
  #L529fde.  v1:= temp;
  #L529fe0.  if v1 < 0 then goto L529ff4;
  #L529fe4.  v2:= v0.`m.g.h` @type ^`java.lang.Object`[] @kind object;
  #L529fe8.  v1:= v1 ^< 1;
  #L529fec.  v1:= v1 + 1;
  #L529ff0.  v2:= v2[v1] @kind object;
  #L529ff4.  return v2 @kind object;
}
procedure `int` `h`(`m.g` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lm/g;.h:(Ljava/lang/Object;)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L529f44.  v0:= v5.`m.g.i` @type ^`int`;
  #L529f48.  v0:= v0 * 2;
  #L529f4c.  v1:= v5.`m.g.h` @type ^`java.lang.Object`[] @kind object;
  #L529f50.  v2:= 1I;
  #L529f52.  if v6 != 0 then goto L529f6e;
  #L529f56.  v6:= 1I;
  #L529f58.  if v6 >= v0 then goto L529f90;
  #L529f5c.  v3:= v1[v6] @kind object;
  #L529f60.  if v3 != 0 then goto L529f68;
  #L529f64.  v6:= v6 ^> v2 @kind int;
  #L529f66.  return v6;
  #L529f68.  v6:= v6 + 2;
  #L529f6c.  goto L529f58;
  #L529f6e.  v3:= 1I;
  #L529f70.  if v3 >= v0 then goto L529f90;
  #L529f74.  v4:= v1[v3] @kind object;
  #L529f78.  call temp:= `equals`(v6, v4) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L529f7e.  v4:= temp;
  #L529f80.  if v4 == 0 then goto L529f8a;
  #L529f84.  v6:= v3 ^> 1;
  #L529f88.  return v6;
  #L529f8a.  v3:= v3 + 2;
  #L529f8e.  goto L529f70;
  #L529f90.  v6:= -1I;
  #L529f92.  return v6;
}
procedure `int` `hashCode`(`m.g` v9 @kind this) @signature `Lm/g;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L529d70.  v0:= v9.`m.g.g` @type ^`int`[] @kind object;
  #L529d74.  v1:= v9.`m.g.h` @type ^`java.lang.Object`[] @kind object;
  #L529d78.  v2:= v9.`m.g.i` @type ^`int`;
  #L529d7c.  v3:= 1I;
  #L529d7e.  v4:= 0I;
  #L529d80.  v5:= 0I;
  #L529d82.  v6:= 0I;
  #L529d84.  if v5 >= v2 then goto L529dae;
  #L529d88.  v7:= v1[v3] @kind object;
  #L529d8c.  v8:= v0[v5];
  #L529d90.  if v7 != 0 then goto L529d98;
  #L529d94.  v7:= 0I;
  #L529d96.  goto L529da0;
  #L529d98.  call temp:= `hashCode`(v7) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L529d9e.  v7:= temp;
  #L529da0.  v7:= v7 ^~ v8 @kind int;
  #L529da2.  v6:= v6 + v7 @kind int;
  #L529da4.  v5:= v5 + 1;
  #L529da8.  v3:= v3 + 2;
  #L529dac.  goto L529d84;
  #L529dae.  return v6;
}
procedure `java.lang.Object` `i`(`m.g` v1 @kind this, `int` v2 ) @signature `Lm/g;.i:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52a008.  v0:= v1.`m.g.h` @type ^`java.lang.Object`[] @kind object;
  #L52a00c.  v2:= v2 ^< 1;
  #L52a010.  v2:= v0[v2] @kind object;
  #L52a014.  return v2 @kind object;
}
procedure `boolean` `isEmpty`(`m.g` v1 @kind this) @signature `Lm/g;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L529c88.  v0:= v1.`m.g.i` @type ^`int`;
  #L529c8c.  if v0 > 0 then goto L529c94;
  #L529c90.  v0:= 1I;
  #L529c92.  goto L529c96;
  #L529c94.  v0:= 0I;
  #L529c96.  return v0;
}
procedure `void` `j`(`m.g` v4 @kind this, `m.g` v5 @kind object) @signature `Lm/g;.j:(Lm/g;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L52a6f4.  v0:= v5.`m.g.i` @type ^`int`;
  #L52a6f8.  v1:= v4.`m.g.i` @type ^`int`;
  #L52a6fc.  v1:= v1 + v0 @kind int;
  #L52a6fe.  call `c`(v4, v1) @signature `Lm/g;.c:(I)V` @kind virtual;
  #L52a704.  v1:= v4.`m.g.i` @type ^`int`;
  #L52a708.  v2:= 0I;
  #L52a70a.  if v1 != 0 then goto L52a738;
  #L52a70e.  if v0 <= 0 then goto L52a758;
  #L52a712.  v1:= v5.`m.g.g` @type ^`int`[] @kind object;
  #L52a716.  v3:= v4.`m.g.g` @type ^`int`[] @kind object;
  #L52a71a.  call `arraycopy`(v1, v2, v3, v2, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L52a720.  v5:= v5.`m.g.h` @type ^`java.lang.Object`[] @kind object;
  #L52a724.  v1:= v4.`m.g.h` @type ^`java.lang.Object`[] @kind object;
  #L52a728.  v3:= v0 ^< 1;
  #L52a72c.  call `arraycopy`(v5, v2, v1, v2, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L52a732.  v4.`m.g.i` @type ^`int` := v0;
  #L52a736.  goto L52a758;
  #L52a738.  if v2 >= v0 then goto L52a758;
  #L52a73c.  call temp:= `i`(v5, v2) @signature `Lm/g;.i:(I)Ljava/lang/Object;` @kind virtual;
  #L52a742.  v1:= temp @kind object;
  #L52a744.  call temp:= `m`(v5, v2) @signature `Lm/g;.m:(I)Ljava/lang/Object;` @kind virtual;
  #L52a74a.  v3:= temp @kind object;
  #L52a74c.  call temp:= `put`(v4, v1, v3) @signature `Lm/g;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L52a752.  v2:= v2 + 1;
  #L52a756.  goto L52a738;
  #L52a758.  return @kind void;
}
procedure `java.lang.Object` `k`(`m.g` v10 @kind this, `int` v11 ) @signature `Lm/g;.k:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L52a1b0.  v0:= v10.`m.g.h` @type ^`java.lang.Object`[] @kind object;
  #L52a1b4.  v1:= v11 ^< 1;
  #L52a1b8.  v2:= v1 + 1;
  #L52a1bc.  v2:= v0[v2] @kind object;
  #L52a1c0.  v3:= v10.`m.g.i` @type ^`int`;
  #L52a1c4.  v4:= 0I;
  #L52a1c6.  v5:= 1I;
  #L52a1c8.  if v3 > v5 then goto L52a1e8;
  #L52a1cc.  v11:= v10.`m.g.g` @type ^`int`[] @kind object;
  #L52a1d0.  call `d`(v11, v0, v3) @signature `Lm/g;.d:([I[Ljava/lang/Object;I)V` @kind static;
  #L52a1d6.  v11:= `@@m.c.a` @type ^`int`[] @kind object;
  #L52a1da.  v10.`m.g.g` @type ^`int`[] := v11 @kind object;
  #L52a1de.  v11:= `@@m.c.c` @type ^`java.lang.Object`[] @kind object;
  #L52a1e2.  v10.`m.g.h` @type ^`java.lang.Object`[] := v11 @kind object;
  #L52a1e6.  goto L52a2a2;
  #L52a1e8.  v6:= v3 + -1;
  #L52a1ec.  v7:= v10.`m.g.g` @type ^`int`[] @kind object;
  #L52a1f0.  v8:= length @variable v7;
  #L52a1f2.  v9:= 8I;
  #L52a1f6.  if v8 <= v9 then goto L52a26c;
  #L52a1fa.  v8:= length @variable v7;
  #L52a1fc.  v8:= v8 / 3;
  #L52a200.  if v3 >= v8 then goto L52a26c;
  #L52a204.  if v3 <= v9 then goto L52a210;
  #L52a208.  v8:= v3 ^> 1;
  #L52a20c.  v9:= v3 + v8 @kind int;
  #L52a210.  call `a`(v10, v9) @signature `Lm/g;.a:(I)V` @kind direct;
  #L52a216.  v8:= v10.`m.g.i` @type ^`int`;
  #L52a21a.  if v3 != v8 then goto L52a260;
  #L52a21e.  if v11 <= 0 then goto L52a236;
  #L52a222.  v8:= v10.`m.g.g` @type ^`int`[] @kind object;
  #L52a226.  call `arraycopy`(v7, v4, v8, v4, v11) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L52a22c.  v8:= v10.`m.g.h` @type ^`java.lang.Object`[] @kind object;
  #L52a230.  call `arraycopy`(v0, v4, v8, v4, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L52a236.  if v11 >= v6 then goto L52a2a0;
  #L52a23a.  v4:= v11 + 1;
  #L52a23e.  v8:= v10.`m.g.g` @type ^`int`[] @kind object;
  #L52a242.  v9:= v6 - v11 @kind int;
  #L52a246.  call `arraycopy`(v7, v4, v8, v11, v9) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L52a24c.  v11:= v4 ^< 1;
  #L52a250.  v4:= v10.`m.g.h` @type ^`java.lang.Object`[] @kind object;
  #L52a254.  v5:= v9 ^< 1;
  #L52a258.  call `arraycopy`(v0, v11, v4, v1, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L52a25e.  goto L52a2a0;
  #L52a260.  v11:= new `java.util.ConcurrentModificationException`;
  #L52a264.  call `<init>`(v11) @signature `Ljava/util/ConcurrentModificationException;.<init>:()V` @kind direct;
  #L52a26a.  throw v11;
  #L52a26c.  if v11 >= v6 then goto L52a28c;
  #L52a270.  v0:= v11 + 1;
  #L52a274.  v4:= v6 - v11 @kind int;
  #L52a278.  call `arraycopy`(v7, v0, v7, v11, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L52a27e.  v11:= v10.`m.g.h` @type ^`java.lang.Object`[] @kind object;
  #L52a282.  v0:= v0 ^< v5 @kind int;
  #L52a284.  v4:= v4 ^< v5 @kind int;
  #L52a286.  call `arraycopy`(v11, v0, v11, v1, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L52a28c.  v11:= v10.`m.g.h` @type ^`java.lang.Object`[] @kind object;
  #L52a290.  v0:= v6 ^< 1;
  #L52a294.  v1:= 0I;
  #L52a296.  v11[v0]:= v1 @kind object;
  #L52a29a.  v0:= v0 + v5 @kind int;
  #L52a29c.  v11[v0]:= v1 @kind object;
  #L52a2a0.  v4:= v6;
  #L52a2a2.  v11:= v10.`m.g.i` @type ^`int`;
  #L52a2a6.  if v3 != v11 then goto L52a2b0;
  #L52a2aa.  v10.`m.g.i` @type ^`int` := v4;
  #L52a2ae.  return v2 @kind object;
  #L52a2b0.  v11:= new `java.util.ConcurrentModificationException`;
  #L52a2b4.  call `<init>`(v11) @signature `Ljava/util/ConcurrentModificationException;.<init>:()V` @kind direct;
  #L52a2ba.  throw v11;
}
procedure `java.lang.Object` `l`(`m.g` v2 @kind this, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lm/g;.l:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L52a2f8.  v3:= v3 ^< 1;
  #L52a2fc.  v3:= v3 + 1;
  #L52a300.  v0:= v2.`m.g.h` @type ^`java.lang.Object`[] @kind object;
  #L52a304.  v1:= v0[v3] @kind object;
  #L52a308.  v0[v3]:= v4 @kind object;
  #L52a30c.  return v1 @kind object;
}
procedure `java.lang.Object` `m`(`m.g` v1 @kind this, `int` v2 ) @signature `Lm/g;.m:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52a320.  v0:= v1.`m.g.h` @type ^`java.lang.Object`[] @kind object;
  #L52a324.  v2:= v2 ^< 1;
  #L52a328.  v2:= v2 + 1;
  #L52a32c.  v2:= v0[v2] @kind object;
  #L52a330.  return v2 @kind object;
}
procedure `java.lang.Object` `put`(`m.g` v9 @kind this, `java.lang.Object` v10 @kind object, `java.lang.Object` v11 @kind object) @signature `Lm/g;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L52a028.  v0:= v9.`m.g.i` @type ^`int`;
  #L52a02c.  v1:= 0I;
  #L52a02e.  if v10 != 0 then goto L52a03e;
  #L52a032.  call temp:= `g`(v9) @signature `Lm/g;.g:()I` @kind virtual;
  #L52a038.  v2:= temp;
  #L52a03a.  v3:= 0I;
  #L52a03c.  goto L52a054;
  #L52a03e.  call temp:= `hashCode`(v10) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L52a044.  v2:= temp;
  #L52a046.  call temp:= `e`(v9, v10, v2) @signature `Lm/g;.e:(Ljava/lang/Object;I)I` @kind virtual;
  #L52a04c.  v3:= temp;
  #L52a04e.  v8:= v3;
  #L52a050.  v3:= v2;
  #L52a052.  v2:= v8;
  #L52a054.  if v2 < 0 then goto L52a06e;
  #L52a058.  v10:= v2 ^< 1;
  #L52a05c.  v10:= v10 + 1;
  #L52a060.  v0:= v9.`m.g.h` @type ^`java.lang.Object`[] @kind object;
  #L52a064.  v1:= v0[v10] @kind object;
  #L52a068.  v0[v10]:= v11 @kind object;
  #L52a06c.  return v1 @kind object;
  #L52a06e.  v2:= ~v2 @kind int;
  #L52a070.  v4:= v9.`m.g.g` @type ^`int`[] @kind object;
  #L52a074.  v5:= length @variable v4;
  #L52a076.  if v0 < v5 then goto L52a0d8;
  #L52a07a.  v5:= 4I;
  #L52a07c.  v6:= 8I;
  #L52a080.  if v0 < v6 then goto L52a08c;
  #L52a084.  v5:= v0 ^> 1;
  #L52a088.  v5:= v5 + v0 @kind int;
  #L52a08a.  goto L52a094;
  #L52a08c.  if v0 < v5 then goto L52a094;
  #L52a090.  v5:= 8I;
  #L52a094.  v6:= v9.`m.g.h` @type ^`java.lang.Object`[] @kind object;
  #L52a098.  call `a`(v9, v5) @signature `Lm/g;.a:(I)V` @kind direct;
  #L52a09e.  v5:= v9.`m.g.i` @type ^`int`;
  #L52a0a2.  if v0 != v5 then goto L52a0cc;
  #L52a0a6.  v5:= v9.`m.g.g` @type ^`int`[] @kind object;
  #L52a0aa.  v7:= length @variable v5;
  #L52a0ac.  if v7 <= 0 then goto L52a0c4;
  #L52a0b0.  v7:= length @variable v4;
  #L52a0b2.  call `arraycopy`(v4, v1, v5, v1, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L52a0b8.  v5:= v9.`m.g.h` @type ^`java.lang.Object`[] @kind object;
  #L52a0bc.  v7:= length @variable v6;
  #L52a0be.  call `arraycopy`(v6, v1, v5, v1, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L52a0c4.  call `d`(v4, v6, v0) @signature `Lm/g;.d:([I[Ljava/lang/Object;I)V` @kind static;
  #L52a0ca.  goto L52a0d8;
  #L52a0cc.  v10:= new `java.util.ConcurrentModificationException`;
  #L52a0d0.  call `<init>`(v10) @signature `Ljava/util/ConcurrentModificationException;.<init>:()V` @kind direct;
  #L52a0d6.  throw v10;
  #L52a0d8.  if v2 >= v0 then goto L52a10a;
  #L52a0dc.  v1:= v9.`m.g.g` @type ^`int`[] @kind object;
  #L52a0e0.  v4:= v2 + 1;
  #L52a0e4.  v5:= v0 - v2 @kind int;
  #L52a0e8.  call `arraycopy`(v1, v2, v1, v4, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L52a0ee.  v1:= v9.`m.g.h` @type ^`java.lang.Object`[] @kind object;
  #L52a0f2.  v5:= v2 ^< 1;
  #L52a0f6.  v4:= v4 ^< 1;
  #L52a0fa.  v6:= v9.`m.g.i` @type ^`int`;
  #L52a0fe.  v6:= v6 - v2 @kind int;
  #L52a100.  v6:= v6 ^< 1;
  #L52a104.  call `arraycopy`(v1, v5, v1, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L52a10a.  v1:= v9.`m.g.i` @type ^`int`;
  #L52a10e.  if v0 != v1 then goto L52a140;
  #L52a112.  v0:= v9.`m.g.g` @type ^`int`[] @kind object;
  #L52a116.  v4:= length @variable v0;
  #L52a118.  if v2 >= v4 then goto L52a140;
  #L52a11c.  v0[v2]:= v3;
  #L52a120.  v0:= v9.`m.g.h` @type ^`java.lang.Object`[] @kind object;
  #L52a124.  v2:= v2 ^< 1;
  #L52a128.  v0[v2]:= v10 @kind object;
  #L52a12c.  v2:= v2 + 1;
  #L52a130.  v0[v2]:= v11 @kind object;
  #L52a134.  v1:= v1 + 1;
  #L52a138.  v9.`m.g.i` @type ^`int` := v1;
  #L52a13c.  v10:= 0I;
  #L52a13e.  return v10 @kind object;
  #L52a140.  v10:= new `java.util.ConcurrentModificationException`;
  #L52a144.  call `<init>`(v10) @signature `Ljava/util/ConcurrentModificationException;.<init>:()V` @kind direct;
  #L52a14a.  throw v10;
}
procedure `java.lang.Object` `putIfAbsent`(`m.g` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lm/g;.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52a15c.  call temp:= `get`(v1, v2) @signature `Lm/g;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L52a162.  v0:= temp @kind object;
  #L52a164.  if v0 != 0 then goto L52a170;
  #L52a168.  call temp:= `put`(v1, v2, v3) @signature `Lm/g;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L52a16e.  v0:= temp @kind object;
  #L52a170.  return v0 @kind object;
}
procedure `java.lang.Object` `remove`(`m.g` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lm/g;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L52a184.  call temp:= `f`(v0, v1) @signature `Lm/g;.f:(Ljava/lang/Object;)I` @kind virtual;
  #L52a18a.  v1:= temp;
  #L52a18c.  if v1 < 0 then goto L52a19a;
  #L52a190.  call temp:= `k`(v0, v1) @signature `Lm/g;.k:(I)Ljava/lang/Object;` @kind virtual;
  #L52a196.  v1:= temp @kind object;
  #L52a198.  return v1 @kind object;
  #L52a19a.  v1:= 0I;
  #L52a19c.  return v1 @kind object;
}
procedure `boolean` `remove`(`m.g` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lm/g;.remove:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L529ca8.  call temp:= `f`(v1, v2) @signature `Lm/g;.f:(Ljava/lang/Object;)I` @kind virtual;
  #L529cae.  v2:= temp;
  #L529cb0.  if v2 < 0 then goto L529cda;
  #L529cb4.  call temp:= `m`(v1, v2) @signature `Lm/g;.m:(I)Ljava/lang/Object;` @kind virtual;
  #L529cba.  v0:= temp @kind object;
  #L529cbc.  if v3 == v0 then goto L529cd0;
  #L529cc0.  if v3 == 0 then goto L529cda;
  #L529cc4.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L529cca.  v3:= temp;
  #L529ccc.  if v3 == 0 then goto L529cda;
  #L529cd0.  call temp:= `k`(v1, v2) @signature `Lm/g;.k:(I)Ljava/lang/Object;` @kind virtual;
  #L529cd6.  v2:= 1I;
  #L529cd8.  return v2;
  #L529cda.  v2:= 0I;
  #L529cdc.  return v2;
}
procedure `java.lang.Object` `replace`(`m.g` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lm/g;.replace:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L52a2cc.  call temp:= `f`(v0, v1) @signature `Lm/g;.f:(Ljava/lang/Object;)I` @kind virtual;
  #L52a2d2.  v1:= temp;
  #L52a2d4.  if v1 < 0 then goto L52a2e2;
  #L52a2d8.  call temp:= `l`(v0, v1, v2) @signature `Lm/g;.l:(ILjava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L52a2de.  v1:= temp @kind object;
  #L52a2e0.  return v1 @kind object;
  #L52a2e2.  v1:= 0I;
  #L52a2e4.  return v1 @kind object;
}
procedure `boolean` `replace`(`m.g` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lm/g;.replace:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L529cf0.  call temp:= `f`(v1, v2) @signature `Lm/g;.f:(Ljava/lang/Object;)I` @kind virtual;
  #L529cf6.  v2:= temp;
  #L529cf8.  if v2 < 0 then goto L529d22;
  #L529cfc.  call temp:= `m`(v1, v2) @signature `Lm/g;.m:(I)Ljava/lang/Object;` @kind virtual;
  #L529d02.  v0:= temp @kind object;
  #L529d04.  if v0 == v3 then goto L529d18;
  #L529d08.  if v3 == 0 then goto L529d22;
  #L529d0c.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L529d12.  v3:= temp;
  #L529d14.  if v3 == 0 then goto L529d22;
  #L529d18.  call temp:= `l`(v1, v2, v4) @signature `Lm/g;.l:(ILjava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L529d1e.  v2:= 1I;
  #L529d20.  return v2;
  #L529d22.  v2:= 0I;
  #L529d24.  return v2;
}
procedure `int` `size`(`m.g` v1 @kind this) @signature `Lm/g;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L529fa4.  v0:= v1.`m.g.i` @type ^`int`;
  #L529fa8.  return v0;
}
procedure `java.lang.String` `toString`(`m.g` v4 @kind this) @signature `Lm/g;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L52a344.  call temp:= `isEmpty`(v4) @signature `Lm/g;.isEmpty:()Z` @kind virtual;
  #L52a34a.  v0:= temp;
  #L52a34c.  if v0 == 0 then goto L52a356;
  #L52a350.  v0:= "{}" @kind object;
  #L52a354.  return v0 @kind object;
  #L52a356.  v0:= new `java.lang.StringBuilder`;
  #L52a35a.  v1:= v4.`m.g.i` @type ^`int`;
  #L52a35e.  v1:= v1 * 28;
  #L52a362.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L52a368.  v1:= 123I;
  #L52a36c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L52a372.  v1:= 0I;
  #L52a374.  v2:= v4.`m.g.i` @type ^`int`;
  #L52a378.  if v1 >= v2 then goto L52a3d2;
  #L52a37c.  if v1 <= 0 then goto L52a38a;
  #L52a380.  v2:= ", " @kind object;
  #L52a384.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L52a38a.  call temp:= `i`(v4, v1) @signature `Lm/g;.i:(I)Ljava/lang/Object;` @kind virtual;
  #L52a390.  v2:= temp @kind object;
  #L52a392.  v3:= "(this Map)" @kind object;
  #L52a396.  if v2 == v4 then goto L52a3a2;
  #L52a39a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L52a3a0.  goto L52a3a8;
  #L52a3a2.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L52a3a8.  v2:= 61I;
  #L52a3ac.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L52a3b2.  call temp:= `m`(v4, v1) @signature `Lm/g;.m:(I)Ljava/lang/Object;` @kind virtual;
  #L52a3b8.  v2:= temp @kind object;
  #L52a3ba.  if v2 == v4 then goto L52a3c6;
  #L52a3be.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L52a3c4.  goto L52a3cc;
  #L52a3c6.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L52a3cc.  v1:= v1 + 1;
  #L52a3d0.  goto L52a374;
  #L52a3d2.  v1:= 125I;
  #L52a3d6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L52a3dc.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L52a3e2.  v0:= temp @kind object;
  #L52a3e4.  return v0 @kind object;
}
