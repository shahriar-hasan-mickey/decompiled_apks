record `m.b` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Collection` @kind interface, `java.util.Set` @kind interface {
  `int`[] `m.b.g` @AccessFlag PRIVATE;
  `java.lang.Object`[] `m.b.h` @AccessFlag ;
  `int` `m.b.i` @AccessFlag ;
  `m.f` `m.b.j` @AccessFlag PRIVATE;
}
global `int`[] `@@m.b.k` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.Object`[] `@@m.b.l` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.Object`[] `@@m.b.m` @AccessFlag PRIVATE_STATIC;
global `int` `@@m.b.n` @AccessFlag PRIVATE_STATIC;
global `java.lang.Object`[] `@@m.b.o` @AccessFlag PRIVATE_STATIC;
global `int` `@@m.b.p` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lm/b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L527eb8.  v0:= 0I;
  #L527eba.  v1:= new `int`[v0];
  #L527ebe.  `@@m.b.k` @type ^`int`[] := v1 @kind object;
  #L527ec2.  v0:= new `java.lang.Object`[v0];
  #L527ec6.  `@@m.b.l` @type ^`java.lang.Object`[] := v0 @kind object;
  #L527eca.  return @kind void;
}
procedure `void` `<init>`(`m.b` v1 @kind this) @signature `Lm/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L527edc.  v0:= 0I;
  #L527ede.  call `<init>`(v1, v0) @signature `Lm/b;.<init>:(I)V` @kind direct;
  #L527ee4.  return @kind void;
}
procedure `void` `<init>`(`m.b` v0 @kind this, `int` v1 ) @signature `Lm/b;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L527ef8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L527efe.  if v1 != 0 then goto L527f14;
  #L527f02.  v1:= `@@m.b.k` @type ^`int`[] @kind object;
  #L527f06.  v0.`m.b.g` @type ^`int`[] := v1 @kind object;
  #L527f0a.  v1:= `@@m.b.l` @type ^`java.lang.Object`[] @kind object;
  #L527f0e.  v0.`m.b.h` @type ^`java.lang.Object`[] := v1 @kind object;
  #L527f12.  goto L527f1a;
  #L527f14.  call `g`(v0, v1) @signature `Lm/b;.g:(I)V` @kind direct;
  #L527f1a.  v1:= 0I;
  #L527f1c.  v0.`m.b.i` @type ^`int` := v1;
  #L527f20.  return @kind void;
}
procedure `void` `g`(`m.b` v5 @kind this, `int` v6 ) @signature `Lm/b;.g:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L527f34.  v0:= 0I;
  #L527f36.  v1:= 0I;
  #L527f38.  v2:= 1I;
  #L527f3a.  v3:= 8I;
  #L527f3e.  if v6 != v3 then goto L527f8c;
  #L527f42.  v3:= constclass @type ^`m.b` @kind object;
  #L527f46.  @monitorenter v3
  #L527f48.  v4:= `@@m.b.o` @type ^`java.lang.Object`[] @kind object;
  #L527f4c.  if v4 == 0 then goto L527f82;
  #L527f50.  v5.`m.b.h` @type ^`java.lang.Object`[] := v4 @kind object;
  #L527f54.  v6:= v4[v1] @kind object;
  #L527f58.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L527f5c.  `@@m.b.o` @type ^`java.lang.Object`[] := v6 @kind object;
  #L527f60.  v6:= v4[v2] @kind object;
  #L527f64.  v6:= (`int`[]) v6 @kind object;
  #L527f68.  v5.`m.b.g` @type ^`int`[] := v6 @kind object;
  #L527f6c.  v4[v2]:= v0 @kind object;
  #L527f70.  v4[v1]:= v0 @kind object;
  #L527f74.  v6:= `@@m.b.p` @type ^`int`;
  #L527f78.  v6:= v6 - v2 @kind int;
  #L527f7a.  `@@m.b.p` @type ^`int` := v6;
  #L527f7e.  @monitorexit v3
  #L527f80.  return @kind void;
  #L527f82.  @monitorexit v3
  #L527f84.  goto L527fdc;
  #L527f86.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L527f88.  @monitorexit v3
  #L527f8a.  throw v6;
  #L527f8c.  v3:= 4I;
  #L527f8e.  if v6 != v3 then goto L527fdc;
  #L527f92.  v3:= constclass @type ^`m.b` @kind object;
  #L527f96.  @monitorenter v3
  #L527f98.  v4:= `@@m.b.m` @type ^`java.lang.Object`[] @kind object;
  #L527f9c.  if v4 == 0 then goto L527fd2;
  #L527fa0.  v5.`m.b.h` @type ^`java.lang.Object`[] := v4 @kind object;
  #L527fa4.  v6:= v4[v1] @kind object;
  #L527fa8.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L527fac.  `@@m.b.m` @type ^`java.lang.Object`[] := v6 @kind object;
  #L527fb0.  v6:= v4[v2] @kind object;
  #L527fb4.  v6:= (`int`[]) v6 @kind object;
  #L527fb8.  v5.`m.b.g` @type ^`int`[] := v6 @kind object;
  #L527fbc.  v4[v2]:= v0 @kind object;
  #L527fc0.  v4[v1]:= v0 @kind object;
  #L527fc4.  v6:= `@@m.b.n` @type ^`int`;
  #L527fc8.  v6:= v6 - v2 @kind int;
  #L527fca.  `@@m.b.n` @type ^`int` := v6;
  #L527fce.  @monitorexit v3
  #L527fd0.  return @kind void;
  #L527fd2.  @monitorexit v3
  #L527fd4.  goto L527fdc;
  #L527fd6.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L527fd8.  @monitorexit v3
  #L527fda.  throw v6;
  #L527fdc.  v0:= new `int`[v6];
  #L527fe0.  v5.`m.b.g` @type ^`int`[] := v0 @kind object;
  #L527fe4.  v6:= new `java.lang.Object`[v6];
  #L527fe8.  v5.`m.b.h` @type ^`java.lang.Object`[] := v6 @kind object;
  #L527fec.  return @kind void;
  catch `java.lang.Throwable` @[L527f48..L527f8a] goto L527f86;
  catch `java.lang.Throwable` @[L527f98..L527fda] goto L527fd6;
}
procedure `void` `i`(`int`[] v7 @kind object, `java.lang.Object`[] v8 @kind object, `int` v9 ) @signature `Lm/b;.i:([I[Ljava/lang/Object;I)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L5280ac.  v0:= length @variable v7;
  #L5280ae.  v1:= 0I;
  #L5280b0.  v2:= 2I;
  #L5280b2.  v3:= 0I;
  #L5280b4.  v4:= 10I;
  #L5280b8.  v5:= 1I;
  #L5280ba.  v6:= 8I;
  #L5280be.  if v0 != v6 then goto L528104;
  #L5280c2.  v0:= constclass @type ^`m.b` @kind object;
  #L5280c6.  @monitorenter v0
  #L5280c8.  v6:= `@@m.b.p` @type ^`int`;
  #L5280cc.  if v6 >= v4 then goto L5280fa;
  #L5280d0.  v4:= `@@m.b.o` @type ^`java.lang.Object`[] @kind object;
  #L5280d4.  v8[v3]:= v4 @kind object;
  #L5280d8.  v8[v5]:= v7 @kind object;
  #L5280dc.  v9:= v9 - v5 @kind int;
  #L5280de.  if v9 < v2 then goto L5280ec;
  #L5280e2.  v8[v9]:= v1 @kind object;
  #L5280e6.  v9:= v9 + -1;
  #L5280ea.  goto L5280de;
  #L5280ec.  `@@m.b.o` @type ^`java.lang.Object`[] := v8 @kind object;
  #L5280f0.  v7:= `@@m.b.p` @type ^`int`;
  #L5280f4.  v7:= v7 + v5 @kind int;
  #L5280f6.  `@@m.b.p` @type ^`int` := v7;
  #L5280fa.  @monitorexit v0
  #L5280fc.  goto L52814e;
  #L5280fe.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L528100.  @monitorexit v0
  #L528102.  throw v7;
  #L528104.  v0:= length @variable v7;
  #L528106.  v6:= 4I;
  #L528108.  if v0 != v6 then goto L52814e;
  #L52810c.  v0:= constclass @type ^`m.b` @kind object;
  #L528110.  @monitorenter v0
  #L528112.  v6:= `@@m.b.n` @type ^`int`;
  #L528116.  if v6 >= v4 then goto L528144;
  #L52811a.  v4:= `@@m.b.m` @type ^`java.lang.Object`[] @kind object;
  #L52811e.  v8[v3]:= v4 @kind object;
  #L528122.  v8[v5]:= v7 @kind object;
  #L528126.  v9:= v9 - v5 @kind int;
  #L528128.  if v9 < v2 then goto L528136;
  #L52812c.  v8[v9]:= v1 @kind object;
  #L528130.  v9:= v9 + -1;
  #L528134.  goto L528128;
  #L528136.  `@@m.b.m` @type ^`java.lang.Object`[] := v8 @kind object;
  #L52813a.  v7:= `@@m.b.n` @type ^`int`;
  #L52813e.  v7:= v7 + v5 @kind int;
  #L528140.  `@@m.b.n` @type ^`int` := v7;
  #L528144.  @monitorexit v0
  #L528146.  goto L52814e;
  #L528148.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L52814a.  @monitorexit v0
  #L52814c.  throw v7;
  #L52814e.  return @kind void;
  catch `java.lang.Throwable` @[L5280c8..L528102] goto L5280fe;
  catch `java.lang.Throwable` @[L528112..L52814c] goto L528148;
}
procedure `m.f` `j`(`m.b` v1 @kind this) @signature `Lm/b;.j:()Lm/f;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L527e8c.  v0:= v1.`m.b.j` @type ^`m.f` @kind object;
  #L527e90.  if v0 != 0 then goto L527ea2;
  #L527e94.  v0:= new `m.b$a`;
  #L527e98.  call `<init>`(v0, v1) @signature `Lm/b$a;.<init>:(Lm/b;)V` @kind direct;
  #L527e9e.  v1.`m.b.j` @type ^`m.f` := v0 @kind object;
  #L527ea2.  v0:= v1.`m.b.j` @type ^`m.f` @kind object;
  #L527ea6.  return v0 @kind object;
}
procedure `int` `k`(`m.b` v4 @kind this, `java.lang.Object` v5 @kind object, `int` v6 ) @signature `Lm/b;.k:(Ljava/lang/Object;I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L527aec.  v0:= v4.`m.b.i` @type ^`int`;
  #L527af0.  if v0 != 0 then goto L527af8;
  #L527af4.  v5:= -1I;
  #L527af6.  return v5;
  #L527af8.  v1:= v4.`m.b.g` @type ^`int`[] @kind object;
  #L527afc.  call temp:= `a`(v1, v0, v6) @signature `Lm/c;.a:([III)I` @kind static;
  #L527b02.  v1:= temp;
  #L527b04.  if v1 >= 0 then goto L527b0a;
  #L527b08.  return v1;
  #L527b0a.  v2:= v4.`m.b.h` @type ^`java.lang.Object`[] @kind object;
  #L527b0e.  v2:= v2[v1] @kind object;
  #L527b12.  call temp:= `equals`(v5, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L527b18.  v2:= temp;
  #L527b1a.  if v2 == 0 then goto L527b20;
  #L527b1e.  return v1;
  #L527b20.  v2:= v1 + 1;
  #L527b24.  if v2 >= v0 then goto L527b50;
  #L527b28.  v3:= v4.`m.b.g` @type ^`int`[] @kind object;
  #L527b2c.  v3:= v3[v2];
  #L527b30.  if v3 != v6 then goto L527b50;
  #L527b34.  v3:= v4.`m.b.h` @type ^`java.lang.Object`[] @kind object;
  #L527b38.  v3:= v3[v2] @kind object;
  #L527b3c.  call temp:= `equals`(v5, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L527b42.  v3:= temp;
  #L527b44.  if v3 == 0 then goto L527b4a;
  #L527b48.  return v2;
  #L527b4a.  v2:= v2 + 1;
  #L527b4e.  goto L527b24;
  #L527b50.  v1:= v1 + -1;
  #L527b54.  if v1 < 0 then goto L527b80;
  #L527b58.  v0:= v4.`m.b.g` @type ^`int`[] @kind object;
  #L527b5c.  v0:= v0[v1];
  #L527b60.  if v0 != v6 then goto L527b80;
  #L527b64.  v0:= v4.`m.b.h` @type ^`java.lang.Object`[] @kind object;
  #L527b68.  v0:= v0[v1] @kind object;
  #L527b6c.  call temp:= `equals`(v5, v0) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L527b72.  v0:= temp;
  #L527b74.  if v0 == 0 then goto L527b7a;
  #L527b78.  return v1;
  #L527b7a.  v1:= v1 + -1;
  #L527b7e.  goto L527b54;
  #L527b80.  v5:= ~v2 @kind int;
  #L527b82.  return v5;
}
procedure `int` `l`(`m.b` v4 @kind this) @signature `Lm/b;.l:()I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L527b94.  v0:= v4.`m.b.i` @type ^`int`;
  #L527b98.  if v0 != 0 then goto L527ba0;
  #L527b9c.  v0:= -1I;
  #L527b9e.  return v0;
  #L527ba0.  v1:= v4.`m.b.g` @type ^`int`[] @kind object;
  #L527ba4.  v2:= 0I;
  #L527ba6.  call temp:= `a`(v1, v0, v2) @signature `Lm/c;.a:([III)I` @kind static;
  #L527bac.  v1:= temp;
  #L527bae.  if v1 >= 0 then goto L527bb4;
  #L527bb2.  return v1;
  #L527bb4.  v2:= v4.`m.b.h` @type ^`java.lang.Object`[] @kind object;
  #L527bb8.  v2:= v2[v1] @kind object;
  #L527bbc.  if v2 != 0 then goto L527bc2;
  #L527bc0.  return v1;
  #L527bc2.  v2:= v1 + 1;
  #L527bc6.  if v2 >= v0 then goto L527bea;
  #L527bca.  v3:= v4.`m.b.g` @type ^`int`[] @kind object;
  #L527bce.  v3:= v3[v2];
  #L527bd2.  if v3 != 0 then goto L527bea;
  #L527bd6.  v3:= v4.`m.b.h` @type ^`java.lang.Object`[] @kind object;
  #L527bda.  v3:= v3[v2] @kind object;
  #L527bde.  if v3 != 0 then goto L527be4;
  #L527be2.  return v2;
  #L527be4.  v2:= v2 + 1;
  #L527be8.  goto L527bc6;
  #L527bea.  v1:= v1 + -1;
  #L527bee.  if v1 < 0 then goto L527c12;
  #L527bf2.  v0:= v4.`m.b.g` @type ^`int`[] @kind object;
  #L527bf6.  v0:= v0[v1];
  #L527bfa.  if v0 != 0 then goto L527c12;
  #L527bfe.  v0:= v4.`m.b.h` @type ^`java.lang.Object`[] @kind object;
  #L527c02.  v0:= v0[v1] @kind object;
  #L527c06.  if v0 != 0 then goto L527c0c;
  #L527c0a.  return v1;
  #L527c0c.  v1:= v1 + -1;
  #L527c10.  goto L527bee;
  #L527c12.  v0:= ~v2 @kind int;
  #L527c14.  return v0;
}
procedure `boolean` `add`(`m.b` v8 @kind this, `java.lang.Object` v9 @kind object) @signature `Lm/b;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L5277b4.  v0:= 0I;
  #L5277b6.  if v9 != 0 then goto L5277c6;
  #L5277ba.  call temp:= `l`(v8) @signature `Lm/b;.l:()I` @kind direct;
  #L5277c0.  v1:= temp;
  #L5277c2.  v2:= 0I;
  #L5277c4.  goto L5277dc;
  #L5277c6.  call temp:= `hashCode`(v9) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L5277cc.  v1:= temp;
  #L5277ce.  call temp:= `k`(v8, v9, v1) @signature `Lm/b;.k:(Ljava/lang/Object;I)I` @kind direct;
  #L5277d4.  v2:= temp;
  #L5277d6.  v7:= v2;
  #L5277d8.  v2:= v1;
  #L5277da.  v1:= v7;
  #L5277dc.  if v1 < 0 then goto L5277e2;
  #L5277e0.  return v0;
  #L5277e2.  v1:= ~v1 @kind int;
  #L5277e4.  v3:= v8.`m.b.i` @type ^`int`;
  #L5277e8.  v4:= v8.`m.b.g` @type ^`int`[] @kind object;
  #L5277ec.  v5:= length @variable v4;
  #L5277ee.  if v3 < v5 then goto L52783e;
  #L5277f2.  v5:= 4I;
  #L5277f4.  v6:= 8I;
  #L5277f8.  if v3 < v6 then goto L527804;
  #L5277fc.  v5:= v3 ^> 1;
  #L527800.  v5:= v5 + v3 @kind int;
  #L527802.  goto L52780c;
  #L527804.  if v3 < v5 then goto L52780c;
  #L527808.  v5:= 8I;
  #L52780c.  v3:= v8.`m.b.h` @type ^`java.lang.Object`[] @kind object;
  #L527810.  call `g`(v8, v5) @signature `Lm/b;.g:(I)V` @kind direct;
  #L527816.  v5:= v8.`m.b.g` @type ^`int`[] @kind object;
  #L52781a.  v6:= length @variable v5;
  #L52781c.  if v6 <= 0 then goto L527834;
  #L527820.  v6:= length @variable v4;
  #L527822.  call `arraycopy`(v4, v0, v5, v0, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L527828.  v5:= v8.`m.b.h` @type ^`java.lang.Object`[] @kind object;
  #L52782c.  v6:= length @variable v3;
  #L52782e.  call `arraycopy`(v3, v0, v5, v0, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L527834.  v0:= v8.`m.b.i` @type ^`int`;
  #L527838.  call `i`(v4, v3, v0) @signature `Lm/b;.i:([I[Ljava/lang/Object;I)V` @kind static;
  #L52783e.  v0:= v8.`m.b.i` @type ^`int`;
  #L527842.  if v1 >= v0 then goto L527866;
  #L527846.  v3:= v8.`m.b.g` @type ^`int`[] @kind object;
  #L52784a.  v4:= v1 + 1;
  #L52784e.  v0:= v0 - v1 @kind int;
  #L527850.  call `arraycopy`(v3, v1, v3, v4, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L527856.  v0:= v8.`m.b.h` @type ^`java.lang.Object`[] @kind object;
  #L52785a.  v3:= v8.`m.b.i` @type ^`int`;
  #L52785e.  v3:= v3 - v1 @kind int;
  #L527860.  call `arraycopy`(v0, v1, v0, v4, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L527866.  v0:= v8.`m.b.g` @type ^`int`[] @kind object;
  #L52786a.  v0[v1]:= v2;
  #L52786e.  v0:= v8.`m.b.h` @type ^`java.lang.Object`[] @kind object;
  #L527872.  v0[v1]:= v9 @kind object;
  #L527876.  v9:= v8.`m.b.i` @type ^`int`;
  #L52787a.  v0:= 1I;
  #L52787c.  v9:= v9 + v0 @kind int;
  #L52787e.  v8.`m.b.i` @type ^`int` := v9;
  #L527882.  return v0;
}
procedure `boolean` `addAll`(`m.b` v2 @kind this, `java.util.Collection` v3 @kind object) @signature `Lm/b;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L527894.  v0:= v2.`m.b.i` @type ^`int`;
  #L527898.  call temp:= `size`(v3) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L52789e.  v1:= temp;
  #L5278a0.  v0:= v0 + v1 @kind int;
  #L5278a2.  call `h`(v2, v0) @signature `Lm/b;.h:(I)V` @kind virtual;
  #L5278a8.  call temp:= `iterator`(v3) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L5278ae.  v3:= temp @kind object;
  #L5278b0.  v0:= 0I;
  #L5278b2.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L5278b8.  v1:= temp;
  #L5278ba.  if v1 == 0 then goto L5278d2;
  #L5278be.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L5278c4.  v1:= temp @kind object;
  #L5278c6.  call temp:= `add`(v2, v1) @signature `Lm/b;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L5278cc.  v1:= temp;
  #L5278ce.  v0:= v0 ^| v1 @kind int;
  #L5278d0.  goto L5278b2;
  #L5278d2.  return v0;
}
procedure `void` `clear`(`m.b` v3 @kind this) @signature `Lm/b;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L528018.  v0:= v3.`m.b.i` @type ^`int`;
  #L52801c.  if v0 == 0 then goto L528044;
  #L528020.  v1:= v3.`m.b.g` @type ^`int`[] @kind object;
  #L528024.  v2:= v3.`m.b.h` @type ^`java.lang.Object`[] @kind object;
  #L528028.  call `i`(v1, v2, v0) @signature `Lm/b;.i:([I[Ljava/lang/Object;I)V` @kind static;
  #L52802e.  v0:= `@@m.b.k` @type ^`int`[] @kind object;
  #L528032.  v3.`m.b.g` @type ^`int`[] := v0 @kind object;
  #L528036.  v0:= `@@m.b.l` @type ^`java.lang.Object`[] @kind object;
  #L52803a.  v3.`m.b.h` @type ^`java.lang.Object`[] := v0 @kind object;
  #L52803e.  v0:= 0I;
  #L528040.  v3.`m.b.i` @type ^`int` := v0;
  #L528044.  return @kind void;
}
procedure `boolean` `contains`(`m.b` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lm/b;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L5278e4.  call temp:= `indexOf`(v0, v1) @signature `Lm/b;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L5278ea.  v1:= temp;
  #L5278ec.  if v1 < 0 then goto L5278f4;
  #L5278f0.  v1:= 1I;
  #L5278f2.  goto L5278f6;
  #L5278f4.  v1:= 0I;
  #L5278f6.  return v1;
}
procedure `boolean` `containsAll`(`m.b` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lm/b;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L527908.  call temp:= `iterator`(v2) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L52790e.  v2:= temp @kind object;
  #L527910.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L527916.  v0:= temp;
  #L527918.  if v0 == 0 then goto L527934;
  #L52791c.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L527922.  v0:= temp @kind object;
  #L527924.  call temp:= `contains`(v1, v0) @signature `Lm/b;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L52792a.  v0:= temp;
  #L52792c.  if v0 != 0 then goto L527910;
  #L527930.  v2:= 0I;
  #L527932.  return v2;
  #L527934.  v2:= 1I;
  #L527936.  return v2;
}
procedure `boolean` `equals`(`m.b` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lm/b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L527948.  v0:= 1I;
  #L52794a.  if v4 != v5 then goto L527950;
  #L52794e.  return v0;
  #L527950.  v1:= instanceof @variable v5 @type ^`java.util.Set` @kind boolean;
  #L527954.  v2:= 0I;
  #L527956.  if v1 == 0 then goto L52799c;
  #L52795a.  v5:= (`java.util.Set`) v5 @kind object;
  #L52795e.  call temp:= `size`(v4) @signature `Lm/b;.size:()I` @kind virtual;
  #L527964.  v1:= temp;
  #L527966.  call temp:= `size`(v5) @signature `Ljava/util/Set;.size:()I` @kind interface;
  #L52796c.  v3:= temp;
  #L52796e.  if v1 == v3 then goto L527974;
  #L527972.  return v2;
  #L527974.  v1:= 0I;
  #L527976.  v3:= v4.`m.b.i` @type ^`int`;
  #L52797a.  if v1 >= v3 then goto L52799a;
  #L52797e.  call temp:= `n`(v4, v1) @signature `Lm/b;.n:(I)Ljava/lang/Object;` @kind virtual;
  #L527984.  v3:= temp @kind object;
  #L527986.  call temp:= `contains`(v5, v3) @signature `Ljava/util/Set;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L52798c.  v3:= temp;
  #L52798e.  if v3 != 0 then goto L527994;
  #L527992.  return v2;
  #L527994.  v1:= v1 + 1;
  #L527998.  goto L527976;
  #L52799a.  return v0;
  #L52799c.  return v2;
  catch `java.lang.NullPointerException` @[L527976..L52798e] goto L52799c;
  catch `java.lang.ClassCastException` @[L527976..L52798e] goto L52799c;
}
procedure `void` `h`(`m.b` v4 @kind this, `int` v5 ) @signature `Lm/b;.h:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L528058.  v0:= v4.`m.b.g` @type ^`int`[] @kind object;
  #L52805c.  v1:= length @variable v0;
  #L52805e.  if v1 >= v5 then goto L528098;
  #L528062.  v1:= v4.`m.b.h` @type ^`java.lang.Object`[] @kind object;
  #L528066.  call `g`(v4, v5) @signature `Lm/b;.g:(I)V` @kind direct;
  #L52806c.  v5:= v4.`m.b.i` @type ^`int`;
  #L528070.  if v5 <= 0 then goto L52808e;
  #L528074.  v2:= v4.`m.b.g` @type ^`int`[] @kind object;
  #L528078.  v3:= 0I;
  #L52807a.  call `arraycopy`(v0, v3, v2, v3, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L528080.  v5:= v4.`m.b.h` @type ^`java.lang.Object`[] @kind object;
  #L528084.  v2:= v4.`m.b.i` @type ^`int`;
  #L528088.  call `arraycopy`(v1, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L52808e.  v5:= v4.`m.b.i` @type ^`int`;
  #L528092.  call `i`(v0, v1, v5) @signature `Lm/b;.i:([I[Ljava/lang/Object;I)V` @kind static;
  #L528098.  return @kind void;
}
procedure `int` `hashCode`(`m.b` v5 @kind this) @signature `Lm/b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L527a8c.  v0:= v5.`m.b.g` @type ^`int`[] @kind object;
  #L527a90.  v1:= v5.`m.b.i` @type ^`int`;
  #L527a94.  v2:= 0I;
  #L527a96.  v3:= 0I;
  #L527a98.  if v2 >= v1 then goto L527aa8;
  #L527a9c.  v4:= v0[v2];
  #L527aa0.  v3:= v3 + v4 @kind int;
  #L527aa2.  v2:= v2 + 1;
  #L527aa6.  goto L527a98;
  #L527aa8.  return v3;
}
procedure `int` `indexOf`(`m.b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lm/b;.indexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L527abc.  if v2 != 0 then goto L527aca;
  #L527ac0.  call temp:= `l`(v1) @signature `Lm/b;.l:()I` @kind direct;
  #L527ac6.  v2:= temp;
  #L527ac8.  goto L527ada;
  #L527aca.  call temp:= `hashCode`(v2) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L527ad0.  v0:= temp;
  #L527ad2.  call temp:= `k`(v1, v2, v0) @signature `Lm/b;.k:(Ljava/lang/Object;I)I` @kind direct;
  #L527ad8.  v2:= temp;
  #L527ada.  return v2;
}
procedure `boolean` `isEmpty`(`m.b` v1 @kind this) @signature `Lm/b;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5279c0.  v0:= v1.`m.b.i` @type ^`int`;
  #L5279c4.  if v0 > 0 then goto L5279cc;
  #L5279c8.  v0:= 1I;
  #L5279ca.  goto L5279ce;
  #L5279cc.  v0:= 0I;
  #L5279ce.  return v0;
}
procedure `java.util.Iterator` `iterator`(`m.b` v1 @kind this) @signature `Lm/b;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L527e60.  call temp:= `j`(v1) @signature `Lm/b;.j:()Lm/f;` @kind direct;
  #L527e66.  v0:= temp @kind object;
  #L527e68.  call temp:= `m`(v0) @signature `Lm/f;.m:()Ljava/util/Set;` @kind virtual;
  #L527e6e.  v0:= temp @kind object;
  #L527e70.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L527e76.  v0:= temp @kind object;
  #L527e78.  return v0 @kind object;
}
procedure `java.lang.Object` `m`(`m.b` v8 @kind this, `int` v9 ) @signature `Lm/b;.m:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L527c40.  v0:= v8.`m.b.h` @type ^`java.lang.Object`[] @kind object;
  #L527c44.  v1:= v0[v9] @kind object;
  #L527c48.  v2:= v8.`m.b.i` @type ^`int`;
  #L527c4c.  v3:= 0I;
  #L527c4e.  v4:= 1I;
  #L527c50.  if v2 > v4 then goto L527c74;
  #L527c54.  v9:= v8.`m.b.g` @type ^`int`[] @kind object;
  #L527c58.  call `i`(v9, v0, v2) @signature `Lm/b;.i:([I[Ljava/lang/Object;I)V` @kind static;
  #L527c5e.  v9:= `@@m.b.k` @type ^`int`[] @kind object;
  #L527c62.  v8.`m.b.g` @type ^`int`[] := v9 @kind object;
  #L527c66.  v9:= `@@m.b.l` @type ^`java.lang.Object`[] @kind object;
  #L527c6a.  v8.`m.b.h` @type ^`java.lang.Object`[] := v9 @kind object;
  #L527c6e.  v8.`m.b.i` @type ^`int` := v3;
  #L527c72.  goto L527d1e;
  #L527c74.  v5:= v8.`m.b.g` @type ^`int`[] @kind object;
  #L527c78.  v6:= length @variable v5;
  #L527c7a.  v7:= 8I;
  #L527c7e.  if v6 <= v7 then goto L527cea;
  #L527c82.  v6:= length @variable v5;
  #L527c84.  v6:= v6 / 3;
  #L527c88.  if v2 >= v6 then goto L527cea;
  #L527c8c.  if v2 <= v7 then goto L527c98;
  #L527c90.  v6:= v2 ^> 1;
  #L527c94.  v7:= v2 + v6 @kind int;
  #L527c98.  call `g`(v8, v7) @signature `Lm/b;.g:(I)V` @kind direct;
  #L527c9e.  v2:= v8.`m.b.i` @type ^`int`;
  #L527ca2.  v2:= v2 - v4 @kind int;
  #L527ca4.  v8.`m.b.i` @type ^`int` := v2;
  #L527ca8.  if v9 <= 0 then goto L527cc0;
  #L527cac.  v2:= v8.`m.b.g` @type ^`int`[] @kind object;
  #L527cb0.  call `arraycopy`(v5, v3, v2, v3, v9) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L527cb6.  v2:= v8.`m.b.h` @type ^`java.lang.Object`[] @kind object;
  #L527cba.  call `arraycopy`(v0, v3, v2, v3, v9) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L527cc0.  v2:= v8.`m.b.i` @type ^`int`;
  #L527cc4.  if v9 >= v2 then goto L527d1e;
  #L527cc8.  v3:= v9 + 1;
  #L527ccc.  v4:= v8.`m.b.g` @type ^`int`[] @kind object;
  #L527cd0.  v2:= v2 - v9 @kind int;
  #L527cd2.  call `arraycopy`(v5, v3, v4, v9, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L527cd8.  v2:= v8.`m.b.h` @type ^`java.lang.Object`[] @kind object;
  #L527cdc.  v4:= v8.`m.b.i` @type ^`int`;
  #L527ce0.  v4:= v4 - v9 @kind int;
  #L527ce2.  call `arraycopy`(v0, v3, v2, v9, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L527ce8.  goto L527d1e;
  #L527cea.  v2:= v2 - v4 @kind int;
  #L527cec.  v8.`m.b.i` @type ^`int` := v2;
  #L527cf0.  if v9 >= v2 then goto L527d10;
  #L527cf4.  v0:= v9 + 1;
  #L527cf8.  v2:= v2 - v9 @kind int;
  #L527cfa.  call `arraycopy`(v5, v0, v5, v9, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L527d00.  v2:= v8.`m.b.h` @type ^`java.lang.Object`[] @kind object;
  #L527d04.  v3:= v8.`m.b.i` @type ^`int`;
  #L527d08.  v3:= v3 - v9 @kind int;
  #L527d0a.  call `arraycopy`(v2, v0, v2, v9, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L527d10.  v9:= v8.`m.b.h` @type ^`java.lang.Object`[] @kind object;
  #L527d14.  v0:= v8.`m.b.i` @type ^`int`;
  #L527d18.  v2:= 0I;
  #L527d1a.  v9[v0]:= v2 @kind object;
  #L527d1e.  return v1 @kind object;
}
procedure `java.lang.Object` `n`(`m.b` v1 @kind this, `int` v2 ) @signature `Lm/b;.n:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L527d30.  v0:= v1.`m.b.h` @type ^`java.lang.Object`[] @kind object;
  #L527d34.  v2:= v0[v2] @kind object;
  #L527d38.  return v2 @kind object;
}
procedure `boolean` `remove`(`m.b` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lm/b;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L5279e0.  call temp:= `indexOf`(v0, v1) @signature `Lm/b;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L5279e6.  v1:= temp;
  #L5279e8.  if v1 < 0 then goto L5279f6;
  #L5279ec.  call temp:= `m`(v0, v1) @signature `Lm/b;.m:(I)Ljava/lang/Object;` @kind virtual;
  #L5279f2.  v1:= 1I;
  #L5279f4.  return v1;
  #L5279f6.  v1:= 0I;
  #L5279f8.  return v1;
}
procedure `boolean` `removeAll`(`m.b` v2 @kind this, `java.util.Collection` v3 @kind object) @signature `Lm/b;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L527a0c.  call temp:= `iterator`(v3) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L527a12.  v3:= temp @kind object;
  #L527a14.  v0:= 0I;
  #L527a16.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L527a1c.  v1:= temp;
  #L527a1e.  if v1 == 0 then goto L527a36;
  #L527a22.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L527a28.  v1:= temp @kind object;
  #L527a2a.  call temp:= `remove`(v2, v1) @signature `Lm/b;.remove:(Ljava/lang/Object;)Z` @kind virtual;
  #L527a30.  v1:= temp;
  #L527a32.  v0:= v0 ^| v1 @kind int;
  #L527a34.  goto L527a16;
  #L527a36.  return v0;
}
procedure `boolean` `retainAll`(`m.b` v4 @kind this, `java.util.Collection` v5 @kind object) @signature `Lm/b;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L527a48.  v0:= v4.`m.b.i` @type ^`int`;
  #L527a4c.  v1:= 1I;
  #L527a4e.  v0:= v0 - v1 @kind int;
  #L527a50.  v2:= 0I;
  #L527a52.  if v0 < 0 then goto L527a78;
  #L527a56.  v3:= v4.`m.b.h` @type ^`java.lang.Object`[] @kind object;
  #L527a5a.  v3:= v3[v0] @kind object;
  #L527a5e.  call temp:= `contains`(v5, v3) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L527a64.  v3:= temp;
  #L527a66.  if v3 != 0 then goto L527a72;
  #L527a6a.  call temp:= `m`(v4, v0) @signature `Lm/b;.m:(I)Ljava/lang/Object;` @kind virtual;
  #L527a70.  v2:= 1I;
  #L527a72.  v0:= v0 + -1;
  #L527a76.  goto L527a52;
  #L527a78.  return v2;
}
procedure `int` `size`(`m.b` v1 @kind this) @signature `Lm/b;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L527c28.  v0:= v1.`m.b.i` @type ^`int`;
  #L527c2c.  return v0;
}
procedure `java.lang.Object`[] `toArray`(`m.b` v4 @kind this) @signature `Lm/b;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L527d4c.  v0:= v4.`m.b.i` @type ^`int`;
  #L527d50.  v1:= new `java.lang.Object`[v0];
  #L527d54.  v2:= v4.`m.b.h` @type ^`java.lang.Object`[] @kind object;
  #L527d58.  v3:= 0I;
  #L527d5a.  call `arraycopy`(v2, v3, v1, v3, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L527d60.  return v1 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`m.b` v3 @kind this, `java.lang.Object`[] v4 @kind object) @signature `Lm/b;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L527d74.  v0:= length @variable v4;
  #L527d76.  v1:= v3.`m.b.i` @type ^`int`;
  #L527d7a.  if v0 >= v1 then goto L527d9e;
  #L527d7e.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L527d84.  v4:= temp @kind object;
  #L527d86.  call temp:= `getComponentType`(v4) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L527d8c.  v4:= temp @kind object;
  #L527d8e.  v0:= v3.`m.b.i` @type ^`int`;
  #L527d92.  call temp:= `newInstance`(v4, v0) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L527d98.  v4:= temp @kind object;
  #L527d9a.  v4:= (`java.lang.Object`[]) v4 @kind object;
  #L527d9e.  v0:= v3.`m.b.h` @type ^`java.lang.Object`[] @kind object;
  #L527da2.  v1:= v3.`m.b.i` @type ^`int`;
  #L527da6.  v2:= 0I;
  #L527da8.  call `arraycopy`(v0, v2, v4, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L527dae.  v0:= length @variable v4;
  #L527db0.  v1:= v3.`m.b.i` @type ^`int`;
  #L527db4.  if v0 <= v1 then goto L527dbe;
  #L527db8.  v0:= 0I;
  #L527dba.  v4[v1]:= v0 @kind object;
  #L527dbe.  return v4 @kind object;
}
procedure `java.lang.String` `toString`(`m.b` v3 @kind this) @signature `Lm/b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L527dd0.  call temp:= `isEmpty`(v3) @signature `Lm/b;.isEmpty:()Z` @kind virtual;
  #L527dd6.  v0:= temp;
  #L527dd8.  if v0 == 0 then goto L527de2;
  #L527ddc.  v0:= "{}" @kind object;
  #L527de0.  return v0 @kind object;
  #L527de2.  v0:= new `java.lang.StringBuilder`;
  #L527de6.  v1:= v3.`m.b.i` @type ^`int`;
  #L527dea.  v1:= v1 * 14;
  #L527dee.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L527df4.  v1:= 123I;
  #L527df8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L527dfe.  v1:= 0I;
  #L527e00.  v2:= v3.`m.b.i` @type ^`int`;
  #L527e04.  if v1 >= v2 then goto L527e3a;
  #L527e08.  if v1 <= 0 then goto L527e16;
  #L527e0c.  v2:= ", " @kind object;
  #L527e10.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L527e16.  call temp:= `n`(v3, v1) @signature `Lm/b;.n:(I)Ljava/lang/Object;` @kind virtual;
  #L527e1c.  v2:= temp @kind object;
  #L527e1e.  if v2 == v3 then goto L527e2a;
  #L527e22.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L527e28.  goto L527e34;
  #L527e2a.  v2:= "(this Set)" @kind object;
  #L527e2e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L527e34.  v1:= v1 + 1;
  #L527e38.  goto L527e00;
  #L527e3a.  v1:= 125I;
  #L527e3e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L527e44.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L527e4a.  v0:= temp @kind object;
  #L527e4c.  return v0 @kind object;
}
