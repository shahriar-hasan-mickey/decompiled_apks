record `m.f$b` @kind class @AccessFlag FINAL extends `java.util.Set` @kind interface {
  `m.f` `m.f$b.g` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`m.f$b` v0 @kind this, `m.f` v1 @kind object) @signature `Lm/f$b;.<init>:(Lm/f;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L52909c.  v0.`m.f$b.g` @type ^`m.f` := v1 @kind object;
  #L5290a0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L5290a6.  return @kind void;
}
procedure `boolean` `add`(`m.f$b` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lm/f$b;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L528dd8.  v1:= (`java.util.Map$Entry`) v1 @kind object;
  #L528ddc.  call temp:= `g`(v0, v1) @signature `Lm/f$b;.g:(Ljava/util/Map$Entry;)Z` @kind virtual;
  #L528de2.  v1:= temp;
  #L528de4.  return v1;
}
procedure `boolean` `addAll`(`m.f$b` v4 @kind this, `java.util.Collection` v5 @kind object) @signature `Lm/f$b;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L528e14.  v0:= v4.`m.f$b.g` @type ^`m.f` @kind object;
  #L528e18.  call temp:= `d`(v0) @signature `Lm/f;.d:()I` @kind virtual;
  #L528e1e.  v0:= temp;
  #L528e20.  call temp:= `iterator`(v5) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L528e26.  v5:= temp @kind object;
  #L528e28.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L528e2e.  v1:= temp;
  #L528e30.  if v1 == 0 then goto L528e5c;
  #L528e34.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L528e3a.  v1:= temp @kind object;
  #L528e3c.  v1:= (`java.util.Map$Entry`) v1 @kind object;
  #L528e40.  v2:= v4.`m.f$b.g` @type ^`m.f` @kind object;
  #L528e44.  call temp:= `getKey`(v1) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L528e4a.  v3:= temp @kind object;
  #L528e4c.  call temp:= `getValue`(v1) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L528e52.  v1:= temp @kind object;
  #L528e54.  call `g`(v2, v3, v1) @signature `Lm/f;.g:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L528e5a.  goto L528e28;
  #L528e5c.  v5:= v4.`m.f$b.g` @type ^`m.f` @kind object;
  #L528e60.  call temp:= `d`(v5) @signature `Lm/f;.d:()I` @kind virtual;
  #L528e66.  v5:= temp;
  #L528e68.  if v0 == v5 then goto L528e70;
  #L528e6c.  v5:= 1I;
  #L528e6e.  goto L528e72;
  #L528e70.  v5:= 0I;
  #L528e72.  return v5;
}
procedure `void` `clear`(`m.f$b` v1 @kind this) @signature `Lm/f$b;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5290b8.  v0:= v1.`m.f$b.g` @type ^`m.f` @kind object;
  #L5290bc.  call `a`(v0) @signature `Lm/f;.a:()V` @kind virtual;
  #L5290c2.  return @kind void;
}
procedure `boolean` `contains`(`m.f$b` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lm/f$b;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L528e84.  v0:= instanceof @variable v4 @type ^`java.util.Map$Entry` @kind boolean;
  #L528e88.  v1:= 0I;
  #L528e8a.  if v0 != 0 then goto L528e90;
  #L528e8e.  return v1;
  #L528e90.  v4:= (`java.util.Map$Entry`) v4 @kind object;
  #L528e94.  v0:= v3.`m.f$b.g` @type ^`m.f` @kind object;
  #L528e98.  call temp:= `getKey`(v4) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L528e9e.  v2:= temp @kind object;
  #L528ea0.  call temp:= `e`(v0, v2) @signature `Lm/f;.e:(Ljava/lang/Object;)I` @kind virtual;
  #L528ea6.  v0:= temp;
  #L528ea8.  if v0 >= 0 then goto L528eae;
  #L528eac.  return v1;
  #L528eae.  v1:= v3.`m.f$b.g` @type ^`m.f` @kind object;
  #L528eb2.  v2:= 1I;
  #L528eb4.  call temp:= `b`(v1, v0, v2) @signature `Lm/f;.b:(II)Ljava/lang/Object;` @kind virtual;
  #L528eba.  v0:= temp @kind object;
  #L528ebc.  call temp:= `getValue`(v4) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L528ec2.  v4:= temp @kind object;
  #L528ec4.  call temp:= `c`(v0, v4) @signature `Lm/c;.c:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L528eca.  v4:= temp;
  #L528ecc.  return v4;
}
procedure `boolean` `containsAll`(`m.f$b` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lm/f$b;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L528ee0.  call temp:= `iterator`(v2) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L528ee6.  v2:= temp @kind object;
  #L528ee8.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L528eee.  v0:= temp;
  #L528ef0.  if v0 == 0 then goto L528f0c;
  #L528ef4.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L528efa.  v0:= temp @kind object;
  #L528efc.  call temp:= `contains`(v1, v0) @signature `Lm/f$b;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L528f02.  v0:= temp;
  #L528f04.  if v0 != 0 then goto L528ee8;
  #L528f08.  v2:= 0I;
  #L528f0a.  return v2;
  #L528f0c.  v2:= 1I;
  #L528f0e.  return v2;
}
procedure `boolean` `equals`(`m.f$b` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lm/f$b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L528f20.  call temp:= `k`(v0, v1) @signature `Lm/f;.k:(Ljava/util/Set;Ljava/lang/Object;)Z` @kind static;
  #L528f26.  v1:= temp;
  #L528f28.  return v1;
}
procedure `boolean` `g`(`m.f$b` v0 @kind this, `java.util.Map$Entry` v1 @kind object) @signature `Lm/f$b;.g:(Ljava/util/Map$Entry;)Z` @AccessFlag PUBLIC {
    temp;

  #L528df8.  v1:= new `java.lang.UnsupportedOperationException`;
  #L528dfc.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L528e02.  throw v1;
}
procedure `int` `hashCode`(`m.f$b` v6 @kind this) @signature `Lm/f$b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L528fb8.  v0:= v6.`m.f$b.g` @type ^`m.f` @kind object;
  #L528fbc.  call temp:= `d`(v0) @signature `Lm/f;.d:()I` @kind virtual;
  #L528fc2.  v0:= temp;
  #L528fc4.  v1:= 1I;
  #L528fc6.  v0:= v0 - v1 @kind int;
  #L528fc8.  v2:= 0I;
  #L528fca.  v3:= 0I;
  #L528fcc.  if v0 < 0 then goto L529012;
  #L528fd0.  v4:= v6.`m.f$b.g` @type ^`m.f` @kind object;
  #L528fd4.  call temp:= `b`(v4, v0, v2) @signature `Lm/f;.b:(II)Ljava/lang/Object;` @kind virtual;
  #L528fda.  v4:= temp @kind object;
  #L528fdc.  v5:= v6.`m.f$b.g` @type ^`m.f` @kind object;
  #L528fe0.  call temp:= `b`(v5, v0, v1) @signature `Lm/f;.b:(II)Ljava/lang/Object;` @kind virtual;
  #L528fe6.  v5:= temp @kind object;
  #L528fe8.  if v4 != 0 then goto L528ff0;
  #L528fec.  v4:= 0I;
  #L528fee.  goto L528ff8;
  #L528ff0.  call temp:= `hashCode`(v4) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L528ff6.  v4:= temp;
  #L528ff8.  if v5 != 0 then goto L529000;
  #L528ffc.  v5:= 0I;
  #L528ffe.  goto L529008;
  #L529000.  call temp:= `hashCode`(v5) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L529006.  v5:= temp;
  #L529008.  v4:= v4 ^~ v5 @kind int;
  #L52900a.  v3:= v3 + v4 @kind int;
  #L52900c.  v0:= v0 + -1;
  #L529010.  goto L528fcc;
  #L529012.  return v3;
}
procedure `boolean` `isEmpty`(`m.f$b` v1 @kind this) @signature `Lm/f$b;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L528f3c.  v0:= v1.`m.f$b.g` @type ^`m.f` @kind object;
  #L528f40.  call temp:= `d`(v0) @signature `Lm/f;.d:()I` @kind virtual;
  #L528f46.  v0:= temp;
  #L528f48.  if v0 != 0 then goto L528f50;
  #L528f4c.  v0:= 1I;
  #L528f4e.  goto L528f52;
  #L528f50.  v0:= 0I;
  #L528f52.  return v0;
}
procedure `java.util.Iterator` `iterator`(`m.f$b` v2 @kind this) @signature `Lm/f$b;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L52907c.  v0:= new `m.f$d`;
  #L529080.  v1:= v2.`m.f$b.g` @type ^`m.f` @kind object;
  #L529084.  call `<init>`(v0, v1) @signature `Lm/f$d;.<init>:(Lm/f;)V` @kind direct;
  #L52908a.  return v0 @kind object;
}
procedure `boolean` `remove`(`m.f$b` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lm/f$b;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L528f64.  v1:= new `java.lang.UnsupportedOperationException`;
  #L528f68.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L528f6e.  throw v1;
}
procedure `boolean` `removeAll`(`m.f$b` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lm/f$b;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L528f80.  v1:= new `java.lang.UnsupportedOperationException`;
  #L528f84.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L528f8a.  throw v1;
}
procedure `boolean` `retainAll`(`m.f$b` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lm/f$b;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L528f9c.  v1:= new `java.lang.UnsupportedOperationException`;
  #L528fa0.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L528fa6.  throw v1;
}
procedure `int` `size`(`m.f$b` v1 @kind this) @signature `Lm/f$b;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L529024.  v0:= v1.`m.f$b.g` @type ^`m.f` @kind object;
  #L529028.  call temp:= `d`(v0) @signature `Lm/f;.d:()I` @kind virtual;
  #L52902e.  v0:= temp;
  #L529030.  return v0;
}
procedure `java.lang.Object`[] `toArray`(`m.f$b` v1 @kind this) @signature `Lm/f$b;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L529044.  v0:= new `java.lang.UnsupportedOperationException`;
  #L529048.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L52904e.  throw v0;
}
procedure `java.lang.Object`[] `toArray`(`m.f$b` v0 @kind this, `java.lang.Object`[] v1 @kind object) @signature `Lm/f$b;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L529060.  v1:= new `java.lang.UnsupportedOperationException`;
  #L529064.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L52906a.  throw v1;
}
