record `m.d` @kind class @AccessFlag PUBLIC extends `java.lang.Cloneable` @kind interface {
  `boolean` `m.d.g` @AccessFlag PRIVATE;
  `long`[] `m.d.h` @AccessFlag PRIVATE;
  `java.lang.Object`[] `m.d.i` @AccessFlag PRIVATE;
  `int` `m.d.j` @AccessFlag PRIVATE;
}
global `java.lang.Object` `@@m.d.k` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lm/d;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L528564.  v0:= new `java.lang.Object`;
  #L528568.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L52856e.  `@@m.d.k` @type ^`java.lang.Object` := v0 @kind object;
  #L528572.  return @kind void;
}
procedure `void` `<init>`(`m.d` v1 @kind this) @signature `Lm/d;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L528584.  v0:= 10I;
  #L528588.  call `<init>`(v1, v0) @signature `Lm/d;.<init>:(I)V` @kind direct;
  #L52858e.  return @kind void;
}
procedure `void` `<init>`(`m.d` v1 @kind this, `int` v2 ) @signature `Lm/d;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L5285a0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L5285a6.  v0:= 0I;
  #L5285a8.  v1.`m.d.g` @type ^`boolean` := v0 @kind boolean;
  #L5285ac.  if v2 != 0 then goto L5285c2;
  #L5285b0.  v2:= `@@m.c.b` @type ^`long`[] @kind object;
  #L5285b4.  v1.`m.d.h` @type ^`long`[] := v2 @kind object;
  #L5285b8.  v2:= `@@m.c.c` @type ^`java.lang.Object`[] @kind object;
  #L5285bc.  v1.`m.d.i` @type ^`java.lang.Object`[] := v2 @kind object;
  #L5285c0.  goto L5285da;
  #L5285c2.  call temp:= `f`(v2) @signature `Lm/c;.f:(I)I` @kind static;
  #L5285c8.  v2:= temp;
  #L5285ca.  v0:= new `long`[v2];
  #L5285ce.  v1.`m.d.h` @type ^`long`[] := v0 @kind object;
  #L5285d2.  v2:= new `java.lang.Object`[v2];
  #L5285d6.  v1.`m.d.i` @type ^`java.lang.Object`[] := v2 @kind object;
  #L5285da.  return @kind void;
}
procedure `void` `e`(`m.d` v9 @kind this) @signature `Lm/d;.e:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L5286d0.  v0:= v9.`m.d.j` @type ^`int`;
  #L5286d4.  v1:= v9.`m.d.h` @type ^`long`[] @kind object;
  #L5286d8.  v2:= v9.`m.d.i` @type ^`java.lang.Object`[] @kind object;
  #L5286dc.  v3:= 0I;
  #L5286de.  v4:= 0I;
  #L5286e0.  v5:= 0I;
  #L5286e2.  if v4 >= v0 then goto L528712;
  #L5286e6.  v6:= v2[v4] @kind object;
  #L5286ea.  v7:= `@@m.d.k` @type ^`java.lang.Object` @kind object;
  #L5286ee.  if v6 == v7 then goto L52870c;
  #L5286f2.  if v4 == v5 then goto L528708;
  #L5286f6.  v7:= v1[v4] @kind wide;
  #L5286fa.  v1[v5]:= v7 @kind wide;
  #L5286fe.  v2[v5]:= v6 @kind object;
  #L528702.  v6:= 0I;
  #L528704.  v2[v4]:= v6 @kind object;
  #L528708.  v5:= v5 + 1;
  #L52870c.  v4:= v4 + 1;
  #L528710.  goto L5286e2;
  #L528712.  v9.`m.d.g` @type ^`boolean` := v3 @kind boolean;
  #L528716.  v9.`m.d.j` @type ^`int` := v5;
  #L52871a.  return @kind void;
}
procedure `void` `a`(`m.d` v6 @kind this, `long` v7 , `java.lang.Object` v9 @kind object) @signature `Lm/d;.a:(JLjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L5285ec.  v0:= v6.`m.d.j` @type ^`int`;
  #L5285f0.  if v0 == 0 then goto L528610;
  #L5285f4.  v1:= v6.`m.d.h` @type ^`long`[] @kind object;
  #L5285f8.  v2:= v0 + -1;
  #L5285fc.  v2:= v1[v2] @kind wide;
  #L528600.  v1:= lcmp(v7, v2);
  #L528604.  if v1 > 0 then goto L528610;
  #L528608.  call `l`(v6, v7, v9) @signature `Lm/d;.l:(JLjava/lang/Object;)V` @kind virtual;
  #L52860e.  return @kind void;
  #L528610.  v1:= v6.`m.d.g` @type ^`boolean` @kind boolean;
  #L528614.  if v1 == 0 then goto L528628;
  #L528618.  v1:= v6.`m.d.h` @type ^`long`[] @kind object;
  #L52861c.  v1:= length @variable v1;
  #L52861e.  if v0 < v1 then goto L528628;
  #L528622.  call `e`(v6) @signature `Lm/d;.e:()V` @kind direct;
  #L528628.  v0:= v6.`m.d.j` @type ^`int`;
  #L52862c.  v1:= v6.`m.d.h` @type ^`long`[] @kind object;
  #L528630.  v1:= length @variable v1;
  #L528632.  if v0 < v1 then goto L52866c;
  #L528636.  v1:= v0 + 1;
  #L52863a.  call temp:= `f`(v1) @signature `Lm/c;.f:(I)I` @kind static;
  #L528640.  v1:= temp;
  #L528642.  v2:= new `long`[v1];
  #L528646.  v1:= new `java.lang.Object`[v1];
  #L52864a.  v3:= v6.`m.d.h` @type ^`long`[] @kind object;
  #L52864e.  v4:= length @variable v3;
  #L528650.  v5:= 0I;
  #L528652.  call `arraycopy`(v3, v5, v2, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L528658.  v3:= v6.`m.d.i` @type ^`java.lang.Object`[] @kind object;
  #L52865c.  v4:= length @variable v3;
  #L52865e.  call `arraycopy`(v3, v5, v1, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L528664.  v6.`m.d.h` @type ^`long`[] := v2 @kind object;
  #L528668.  v6.`m.d.i` @type ^`java.lang.Object`[] := v1 @kind object;
  #L52866c.  v1:= v6.`m.d.h` @type ^`long`[] @kind object;
  #L528670.  v1[v0]:= v7 @kind wide;
  #L528674.  v7:= v6.`m.d.i` @type ^`java.lang.Object`[] @kind object;
  #L528678.  v7[v0]:= v9 @kind object;
  #L52867c.  v0:= v0 + 1;
  #L528680.  v6.`m.d.j` @type ^`int` := v0;
  #L528684.  return @kind void;
}
procedure `void` `b`(`m.d` v5 @kind this) @signature `Lm/d;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L528698.  v0:= v5.`m.d.j` @type ^`int`;
  #L52869c.  v1:= v5.`m.d.i` @type ^`java.lang.Object`[] @kind object;
  #L5286a0.  v2:= 0I;
  #L5286a2.  v3:= 0I;
  #L5286a4.  if v3 >= v0 then goto L5286b4;
  #L5286a8.  v4:= 0I;
  #L5286aa.  v1[v3]:= v4 @kind object;
  #L5286ae.  v3:= v3 + 1;
  #L5286b2.  goto L5286a4;
  #L5286b4.  v5.`m.d.j` @type ^`int` := v2;
  #L5286b8.  v5.`m.d.g` @type ^`boolean` := v2 @kind boolean;
  #L5286bc.  return @kind void;
}
procedure `m.d` `c`(`m.d` v2 @kind this) @signature `Lm/d;.c:()Lm/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L528500.  call temp:= `clone`(v2) @signature `Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind super;
  #L528506.  v0:= temp @kind object;
  #L528508.  v0:= (`m.d`) v0 @kind object;
  #L52850c.  v1:= v2.`m.d.h` @type ^`long`[] @kind object;
  #L528510.  call temp:= `clone`(v1) @signature `[J.clone:()Ljava/lang/Object;` @kind virtual;
  #L528516.  v1:= temp @kind object;
  #L528518.  v1:= (`long`[]) v1 @kind object;
  #L52851c.  v0.`m.d.h` @type ^`long`[] := v1 @kind object;
  #L528520.  v1:= v2.`m.d.i` @type ^`java.lang.Object`[] @kind object;
  #L528524.  call temp:= `clone`(v1) @signature `[Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L52852a.  v1:= temp @kind object;
  #L52852c.  v1:= (`java.lang.Object`[]) v1 @kind object;
  #L528530.  v0.`m.d.i` @type ^`java.lang.Object`[] := v1 @kind object;
  #L528534.  return v0 @kind object;
  #L528536.  v0:= Exception @type ^`java.lang.CloneNotSupportedException` @kind object;
  #L528538.  v1:= new `java.lang.AssertionError`;
  #L52853c.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L528542.  throw v1;
  catch `java.lang.CloneNotSupportedException` @[L528500..L528534] goto L528536;
}
procedure `java.lang.Object` `clone`(`m.d` v1 @kind this) @signature `Lm/d;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L528390.  call temp:= `c`(v1) @signature `Lm/d;.c:()Lm/d;` @kind virtual;
  #L528396.  v0:= temp @kind object;
  #L528398.  return v0 @kind object;
}
procedure `boolean` `d`(`m.d` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lm/d;.d:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L5282d8.  call temp:= `i`(v0, v1) @signature `Lm/d;.i:(Ljava/lang/Object;)I` @kind virtual;
  #L5282de.  v1:= temp;
  #L5282e0.  if v1 < 0 then goto L5282e8;
  #L5282e4.  v1:= 1I;
  #L5282e6.  goto L5282ea;
  #L5282e8.  v1:= 0I;
  #L5282ea.  return v1;
}
procedure `java.lang.Object` `f`(`m.d` v1 @kind this, `long` v2 ) @signature `Lm/d;.f:(J)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5283ac.  v0:= 0I;
  #L5283ae.  call temp:= `g`(v1, v2, v0) @signature `Lm/d;.g:(JLjava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L5283b4.  v2:= temp @kind object;
  #L5283b6.  return v2 @kind object;
}
procedure `java.lang.Object` `g`(`m.d` v2 @kind this, `long` v3 , `java.lang.Object` v5 @kind object) @signature `Lm/d;.g:(JLjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5283c8.  v0:= v2.`m.d.h` @type ^`long`[] @kind object;
  #L5283cc.  v1:= v2.`m.d.j` @type ^`int`;
  #L5283d0.  call temp:= `b`(v0, v1, v3) @signature `Lm/c;.b:([JIJ)I` @kind static;
  #L5283d6.  v3:= temp;
  #L5283d8.  if v3 < 0 then goto L5283f4;
  #L5283dc.  v4:= v2.`m.d.i` @type ^`java.lang.Object`[] @kind object;
  #L5283e0.  v0:= v4[v3] @kind object;
  #L5283e4.  v1:= `@@m.d.k` @type ^`java.lang.Object` @kind object;
  #L5283e8.  if v0 != v1 then goto L5283ee;
  #L5283ec.  goto L5283f4;
  #L5283ee.  v3:= v4[v3] @kind object;
  #L5283f2.  return v3 @kind object;
  #L5283f4.  return v5 @kind object;
}
procedure `int` `h`(`m.d` v2 @kind this, `long` v3 ) @signature `Lm/d;.h:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5282fc.  v0:= v2.`m.d.g` @type ^`boolean` @kind boolean;
  #L528300.  if v0 == 0 then goto L52830a;
  #L528304.  call `e`(v2) @signature `Lm/d;.e:()V` @kind direct;
  #L52830a.  v0:= v2.`m.d.h` @type ^`long`[] @kind object;
  #L52830e.  v1:= v2.`m.d.j` @type ^`int`;
  #L528312.  call temp:= `b`(v0, v1, v3) @signature `Lm/c;.b:([JIJ)I` @kind static;
  #L528318.  v3:= temp;
  #L52831a.  return v3;
}
procedure `int` `i`(`m.d` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lm/d;.i:(Ljava/lang/Object;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L52832c.  v0:= v2.`m.d.g` @type ^`boolean` @kind boolean;
  #L528330.  if v0 == 0 then goto L52833a;
  #L528334.  call `e`(v2) @signature `Lm/d;.e:()V` @kind direct;
  #L52833a.  v0:= 0I;
  #L52833c.  v1:= v2.`m.d.j` @type ^`int`;
  #L528340.  if v0 >= v1 then goto L528358;
  #L528344.  v1:= v2.`m.d.i` @type ^`java.lang.Object`[] @kind object;
  #L528348.  v1:= v1[v0] @kind object;
  #L52834c.  if v1 != v3 then goto L528352;
  #L528350.  return v0;
  #L528352.  v0:= v0 + 1;
  #L528356.  goto L52833c;
  #L528358.  v3:= -1I;
  #L52835a.  return v3;
}
procedure `long` `j`(`m.d` v3 @kind this, `int` v4 ) @signature `Lm/d;.j:(I)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L5284d8.  v0:= v3.`m.d.g` @type ^`boolean` @kind boolean;
  #L5284dc.  if v0 == 0 then goto L5284e6;
  #L5284e0.  call `e`(v3) @signature `Lm/d;.e:()V` @kind direct;
  #L5284e6.  v0:= v3.`m.d.h` @type ^`long`[] @kind object;
  #L5284ea.  v1:= v0[v4] @kind wide;
  #L5284ee.  return v1 @kind wide;
}
procedure `void` `l`(`m.d` v6 @kind this, `long` v7 , `java.lang.Object` v9 @kind object) @signature `Lm/d;.l:(JLjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L52872c.  v0:= v6.`m.d.h` @type ^`long`[] @kind object;
  #L528730.  v1:= v6.`m.d.j` @type ^`int`;
  #L528734.  call temp:= `b`(v0, v1, v7) @signature `Lm/c;.b:([JIJ)I` @kind static;
  #L52873a.  v0:= temp;
  #L52873c.  if v0 < 0 then goto L52874a;
  #L528740.  v7:= v6.`m.d.i` @type ^`java.lang.Object`[] @kind object;
  #L528744.  v7[v0]:= v9 @kind object;
  #L528748.  goto L528828;
  #L52874a.  v0:= ~v0 @kind int;
  #L52874c.  v1:= v6.`m.d.j` @type ^`int`;
  #L528750.  if v0 >= v1 then goto L528772;
  #L528754.  v2:= v6.`m.d.i` @type ^`java.lang.Object`[] @kind object;
  #L528758.  v3:= v2[v0] @kind object;
  #L52875c.  v4:= `@@m.d.k` @type ^`java.lang.Object` @kind object;
  #L528760.  if v3 != v4 then goto L528772;
  #L528764.  v1:= v6.`m.d.h` @type ^`long`[] @kind object;
  #L528768.  v1[v0]:= v7 @kind wide;
  #L52876c.  v2[v0]:= v9 @kind object;
  #L528770.  return @kind void;
  #L528772.  v2:= v6.`m.d.g` @type ^`boolean` @kind boolean;
  #L528776.  if v2 == 0 then goto L52879c;
  #L52877a.  v2:= v6.`m.d.h` @type ^`long`[] @kind object;
  #L52877e.  v2:= length @variable v2;
  #L528780.  if v1 < v2 then goto L52879c;
  #L528784.  call `e`(v6) @signature `Lm/d;.e:()V` @kind direct;
  #L52878a.  v0:= v6.`m.d.h` @type ^`long`[] @kind object;
  #L52878e.  v1:= v6.`m.d.j` @type ^`int`;
  #L528792.  call temp:= `b`(v0, v1, v7) @signature `Lm/c;.b:([JIJ)I` @kind static;
  #L528798.  v0:= temp;
  #L52879a.  v0:= ~v0 @kind int;
  #L52879c.  v1:= v6.`m.d.j` @type ^`int`;
  #L5287a0.  v2:= v6.`m.d.h` @type ^`long`[] @kind object;
  #L5287a4.  v2:= length @variable v2;
  #L5287a6.  if v1 < v2 then goto L5287e0;
  #L5287aa.  v1:= v1 + 1;
  #L5287ae.  call temp:= `f`(v1) @signature `Lm/c;.f:(I)I` @kind static;
  #L5287b4.  v1:= temp;
  #L5287b6.  v2:= new `long`[v1];
  #L5287ba.  v1:= new `java.lang.Object`[v1];
  #L5287be.  v3:= v6.`m.d.h` @type ^`long`[] @kind object;
  #L5287c2.  v4:= length @variable v3;
  #L5287c4.  v5:= 0I;
  #L5287c6.  call `arraycopy`(v3, v5, v2, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L5287cc.  v3:= v6.`m.d.i` @type ^`java.lang.Object`[] @kind object;
  #L5287d0.  v4:= length @variable v3;
  #L5287d2.  call `arraycopy`(v3, v5, v1, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L5287d8.  v6.`m.d.h` @type ^`long`[] := v2 @kind object;
  #L5287dc.  v6.`m.d.i` @type ^`java.lang.Object`[] := v1 @kind object;
  #L5287e0.  v1:= v6.`m.d.j` @type ^`int`;
  #L5287e4.  v2:= v1 - v0 @kind int;
  #L5287e8.  if v2 == 0 then goto L52880c;
  #L5287ec.  v2:= v6.`m.d.h` @type ^`long`[] @kind object;
  #L5287f0.  v3:= v0 + 1;
  #L5287f4.  v1:= v1 - v0 @kind int;
  #L5287f6.  call `arraycopy`(v2, v0, v2, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L5287fc.  v1:= v6.`m.d.i` @type ^`java.lang.Object`[] @kind object;
  #L528800.  v2:= v6.`m.d.j` @type ^`int`;
  #L528804.  v2:= v2 - v0 @kind int;
  #L528806.  call `arraycopy`(v1, v0, v1, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L52880c.  v1:= v6.`m.d.h` @type ^`long`[] @kind object;
  #L528810.  v1[v0]:= v7 @kind wide;
  #L528814.  v7:= v6.`m.d.i` @type ^`java.lang.Object`[] @kind object;
  #L528818.  v7[v0]:= v9 @kind object;
  #L52881c.  v7:= v6.`m.d.j` @type ^`int`;
  #L528820.  v7:= v7 + 1;
  #L528824.  v6.`m.d.j` @type ^`int` := v7;
  #L528828.  return @kind void;
}
procedure `void` `m`(`m.d` v2 @kind this, `long` v3 ) @signature `Lm/d;.m:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L52883c.  v0:= v2.`m.d.h` @type ^`long`[] @kind object;
  #L528840.  v1:= v2.`m.d.j` @type ^`int`;
  #L528844.  call temp:= `b`(v0, v1, v3) @signature `Lm/c;.b:([JIJ)I` @kind static;
  #L52884a.  v3:= temp;
  #L52884c.  if v3 < 0 then goto L52886a;
  #L528850.  v4:= v2.`m.d.i` @type ^`java.lang.Object`[] @kind object;
  #L528854.  v0:= v4[v3] @kind object;
  #L528858.  v1:= `@@m.d.k` @type ^`java.lang.Object` @kind object;
  #L52885c.  if v0 == v1 then goto L52886a;
  #L528860.  v4[v3]:= v1 @kind object;
  #L528864.  v3:= 1I;
  #L528866.  v2.`m.d.g` @type ^`boolean` := v3 @kind boolean;
  #L52886a.  return @kind void;
}
procedure `void` `n`(`m.d` v3 @kind this, `int` v4 ) @signature `Lm/d;.n:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L52887c.  v0:= v3.`m.d.i` @type ^`java.lang.Object`[] @kind object;
  #L528880.  v1:= v0[v4] @kind object;
  #L528884.  v2:= `@@m.d.k` @type ^`java.lang.Object` @kind object;
  #L528888.  if v1 == v2 then goto L528896;
  #L52888c.  v0[v4]:= v2 @kind object;
  #L528890.  v4:= 1I;
  #L528892.  v3.`m.d.g` @type ^`boolean` := v4 @kind boolean;
  #L528896.  return @kind void;
}
procedure `void` `o`(`m.d` v1 @kind this, `int` v2 , `java.lang.Object` v3 @kind object) @signature `Lm/d;.o:(ILjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5288a8.  v0:= v1.`m.d.g` @type ^`boolean` @kind boolean;
  #L5288ac.  if v0 == 0 then goto L5288b6;
  #L5288b0.  call `e`(v1) @signature `Lm/d;.e:()V` @kind direct;
  #L5288b6.  v0:= v1.`m.d.i` @type ^`java.lang.Object`[] @kind object;
  #L5288ba.  v0[v2]:= v3 @kind object;
  #L5288be.  return @kind void;
}
procedure `int` `p`(`m.d` v1 @kind this) @signature `Lm/d;.p:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52836c.  v0:= v1.`m.d.g` @type ^`boolean` @kind boolean;
  #L528370.  if v0 == 0 then goto L52837a;
  #L528374.  call `e`(v1) @signature `Lm/d;.e:()V` @kind direct;
  #L52837a.  v0:= v1.`m.d.j` @type ^`int`;
  #L52837e.  return v0;
}
procedure `java.lang.Object` `q`(`m.d` v1 @kind this, `int` v2 ) @signature `Lm/d;.q:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L528408.  v0:= v1.`m.d.g` @type ^`boolean` @kind boolean;
  #L52840c.  if v0 == 0 then goto L528416;
  #L528410.  call `e`(v1) @signature `Lm/d;.e:()V` @kind direct;
  #L528416.  v0:= v1.`m.d.i` @type ^`java.lang.Object`[] @kind object;
  #L52841a.  v2:= v0[v2] @kind object;
  #L52841e.  return v2 @kind object;
}
procedure `java.lang.String` `toString`(`m.d` v4 @kind this) @signature `Lm/d;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L528430.  call temp:= `p`(v4) @signature `Lm/d;.p:()I` @kind virtual;
  #L528436.  v0:= temp;
  #L528438.  if v0 > 0 then goto L528442;
  #L52843c.  v0:= "{}" @kind object;
  #L528440.  return v0 @kind object;
  #L528442.  v0:= new `java.lang.StringBuilder`;
  #L528446.  v1:= v4.`m.d.j` @type ^`int`;
  #L52844a.  v1:= v1 * 28;
  #L52844e.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L528454.  v1:= 123I;
  #L528458.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L52845e.  v1:= 0I;
  #L528460.  v2:= v4.`m.d.j` @type ^`int`;
  #L528464.  if v1 >= v2 then goto L5284b2;
  #L528468.  if v1 <= 0 then goto L528476;
  #L52846c.  v2:= ", " @kind object;
  #L528470.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L528476.  call temp:= `j`(v4, v1) @signature `Lm/d;.j:(I)J` @kind virtual;
  #L52847c.  v2:= temp @kind wide;
  #L52847e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L528484.  v2:= 61I;
  #L528488.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L52848e.  call temp:= `q`(v4, v1) @signature `Lm/d;.q:(I)Ljava/lang/Object;` @kind virtual;
  #L528494.  v2:= temp @kind object;
  #L528496.  if v2 == v4 then goto L5284a2;
  #L52849a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L5284a0.  goto L5284ac;
  #L5284a2.  v2:= "(this Map)" @kind object;
  #L5284a6.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L5284ac.  v1:= v1 + 1;
  #L5284b0.  goto L528460;
  #L5284b2.  v1:= 125I;
  #L5284b6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L5284bc.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L5284c2.  v0:= temp @kind object;
  #L5284c4.  return v0 @kind object;
}
