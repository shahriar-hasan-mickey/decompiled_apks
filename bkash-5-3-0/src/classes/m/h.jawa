record `m.h` @kind class @AccessFlag PUBLIC extends `java.lang.Cloneable` @kind interface {
  `boolean` `m.h.g` @AccessFlag PRIVATE;
  `int`[] `m.h.h` @AccessFlag PRIVATE;
  `java.lang.Object`[] `m.h.i` @AccessFlag PRIVATE;
  `int` `m.h.j` @AccessFlag PRIVATE;
}
global `java.lang.Object` `@@m.h.k` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lm/h;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L52a9a4.  v0:= new `java.lang.Object`;
  #L52a9a8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L52a9ae.  `@@m.h.k` @type ^`java.lang.Object` := v0 @kind object;
  #L52a9b2.  return @kind void;
}
procedure `void` `<init>`(`m.h` v1 @kind this) @signature `Lm/h;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L52a9c4.  v0:= 10I;
  #L52a9c8.  call `<init>`(v1, v0) @signature `Lm/h;.<init>:(I)V` @kind direct;
  #L52a9ce.  return @kind void;
}
procedure `void` `<init>`(`m.h` v1 @kind this, `int` v2 ) @signature `Lm/h;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L52a9e0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L52a9e6.  v0:= 0I;
  #L52a9e8.  v1.`m.h.g` @type ^`boolean` := v0 @kind boolean;
  #L52a9ec.  if v2 != 0 then goto L52aa02;
  #L52a9f0.  v2:= `@@m.c.a` @type ^`int`[] @kind object;
  #L52a9f4.  v1.`m.h.h` @type ^`int`[] := v2 @kind object;
  #L52a9f8.  v2:= `@@m.c.c` @type ^`java.lang.Object`[] @kind object;
  #L52a9fc.  v1.`m.h.i` @type ^`java.lang.Object`[] := v2 @kind object;
  #L52aa00.  goto L52aa1a;
  #L52aa02.  call temp:= `e`(v2) @signature `Lm/c;.e:(I)I` @kind static;
  #L52aa08.  v2:= temp;
  #L52aa0a.  v0:= new `int`[v2];
  #L52aa0e.  v1.`m.h.h` @type ^`int`[] := v0 @kind object;
  #L52aa12.  v2:= new `java.lang.Object`[v2];
  #L52aa16.  v1.`m.h.i` @type ^`java.lang.Object`[] := v2 @kind object;
  #L52aa1a.  return @kind void;
}
procedure `void` `d`(`m.h` v8 @kind this) @signature `Lm/h;.d:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L52ab0c.  v0:= v8.`m.h.j` @type ^`int`;
  #L52ab10.  v1:= v8.`m.h.h` @type ^`int`[] @kind object;
  #L52ab14.  v2:= v8.`m.h.i` @type ^`java.lang.Object`[] @kind object;
  #L52ab18.  v3:= 0I;
  #L52ab1a.  v4:= 0I;
  #L52ab1c.  v5:= 0I;
  #L52ab1e.  if v4 >= v0 then goto L52ab4e;
  #L52ab22.  v6:= v2[v4] @kind object;
  #L52ab26.  v7:= `@@m.h.k` @type ^`java.lang.Object` @kind object;
  #L52ab2a.  if v6 == v7 then goto L52ab48;
  #L52ab2e.  if v4 == v5 then goto L52ab44;
  #L52ab32.  v7:= v1[v4];
  #L52ab36.  v1[v5]:= v7;
  #L52ab3a.  v2[v5]:= v6 @kind object;
  #L52ab3e.  v6:= 0I;
  #L52ab40.  v2[v4]:= v6 @kind object;
  #L52ab44.  v5:= v5 + 1;
  #L52ab48.  v4:= v4 + 1;
  #L52ab4c.  goto L52ab1e;
  #L52ab4e.  v8.`m.h.g` @type ^`boolean` := v3 @kind boolean;
  #L52ab52.  v8.`m.h.j` @type ^`int` := v5;
  #L52ab56.  return @kind void;
}
procedure `void` `a`(`m.h` v6 @kind this, `int` v7 , `java.lang.Object` v8 @kind object) @signature `Lm/h;.a:(ILjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L52aa2c.  v0:= v6.`m.h.j` @type ^`int`;
  #L52aa30.  if v0 == 0 then goto L52aa4c;
  #L52aa34.  v1:= v6.`m.h.h` @type ^`int`[] @kind object;
  #L52aa38.  v2:= v0 + -1;
  #L52aa3c.  v1:= v1[v2];
  #L52aa40.  if v7 > v1 then goto L52aa4c;
  #L52aa44.  call `i`(v6, v7, v8) @signature `Lm/h;.i:(ILjava/lang/Object;)V` @kind virtual;
  #L52aa4a.  return @kind void;
  #L52aa4c.  v1:= v6.`m.h.g` @type ^`boolean` @kind boolean;
  #L52aa50.  if v1 == 0 then goto L52aa64;
  #L52aa54.  v1:= v6.`m.h.h` @type ^`int`[] @kind object;
  #L52aa58.  v1:= length @variable v1;
  #L52aa5a.  if v0 < v1 then goto L52aa64;
  #L52aa5e.  call `d`(v6) @signature `Lm/h;.d:()V` @kind direct;
  #L52aa64.  v0:= v6.`m.h.j` @type ^`int`;
  #L52aa68.  v1:= v6.`m.h.h` @type ^`int`[] @kind object;
  #L52aa6c.  v1:= length @variable v1;
  #L52aa6e.  if v0 < v1 then goto L52aaa8;
  #L52aa72.  v1:= v0 + 1;
  #L52aa76.  call temp:= `e`(v1) @signature `Lm/c;.e:(I)I` @kind static;
  #L52aa7c.  v1:= temp;
  #L52aa7e.  v2:= new `int`[v1];
  #L52aa82.  v1:= new `java.lang.Object`[v1];
  #L52aa86.  v3:= v6.`m.h.h` @type ^`int`[] @kind object;
  #L52aa8a.  v4:= length @variable v3;
  #L52aa8c.  v5:= 0I;
  #L52aa8e.  call `arraycopy`(v3, v5, v2, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L52aa94.  v3:= v6.`m.h.i` @type ^`java.lang.Object`[] @kind object;
  #L52aa98.  v4:= length @variable v3;
  #L52aa9a.  call `arraycopy`(v3, v5, v1, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L52aaa0.  v6.`m.h.h` @type ^`int`[] := v2 @kind object;
  #L52aaa4.  v6.`m.h.i` @type ^`java.lang.Object`[] := v1 @kind object;
  #L52aaa8.  v1:= v6.`m.h.h` @type ^`int`[] @kind object;
  #L52aaac.  v1[v0]:= v7;
  #L52aab0.  v7:= v6.`m.h.i` @type ^`java.lang.Object`[] @kind object;
  #L52aab4.  v7[v0]:= v8 @kind object;
  #L52aab8.  v0:= v0 + 1;
  #L52aabc.  v6.`m.h.j` @type ^`int` := v0;
  #L52aac0.  return @kind void;
}
procedure `void` `b`(`m.h` v5 @kind this) @signature `Lm/h;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L52aad4.  v0:= v5.`m.h.j` @type ^`int`;
  #L52aad8.  v1:= v5.`m.h.i` @type ^`java.lang.Object`[] @kind object;
  #L52aadc.  v2:= 0I;
  #L52aade.  v3:= 0I;
  #L52aae0.  if v3 >= v0 then goto L52aaf0;
  #L52aae4.  v4:= 0I;
  #L52aae6.  v1[v3]:= v4 @kind object;
  #L52aaea.  v3:= v3 + 1;
  #L52aaee.  goto L52aae0;
  #L52aaf0.  v5.`m.h.j` @type ^`int` := v2;
  #L52aaf4.  v5.`m.h.g` @type ^`boolean` := v2 @kind boolean;
  #L52aaf8.  return @kind void;
}
procedure `m.h` `c`(`m.h` v2 @kind this) @signature `Lm/h;.c:()Lm/h;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L52a940.  call temp:= `clone`(v2) @signature `Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind super;
  #L52a946.  v0:= temp @kind object;
  #L52a948.  v0:= (`m.h`) v0 @kind object;
  #L52a94c.  v1:= v2.`m.h.h` @type ^`int`[] @kind object;
  #L52a950.  call temp:= `clone`(v1) @signature `[I.clone:()Ljava/lang/Object;` @kind virtual;
  #L52a956.  v1:= temp @kind object;
  #L52a958.  v1:= (`int`[]) v1 @kind object;
  #L52a95c.  v0.`m.h.h` @type ^`int`[] := v1 @kind object;
  #L52a960.  v1:= v2.`m.h.i` @type ^`java.lang.Object`[] @kind object;
  #L52a964.  call temp:= `clone`(v1) @signature `[Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L52a96a.  v1:= temp @kind object;
  #L52a96c.  v1:= (`java.lang.Object`[]) v1 @kind object;
  #L52a970.  v0.`m.h.i` @type ^`java.lang.Object`[] := v1 @kind object;
  #L52a974.  return v0 @kind object;
  #L52a976.  v0:= Exception @type ^`java.lang.CloneNotSupportedException` @kind object;
  #L52a978.  v1:= new `java.lang.AssertionError`;
  #L52a97c.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L52a982.  throw v1;
  catch `java.lang.CloneNotSupportedException` @[L52a940..L52a974] goto L52a976;
}
procedure `java.lang.Object` `clone`(`m.h` v1 @kind this) @signature `Lm/h;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L52a7f8.  call temp:= `c`(v1) @signature `Lm/h;.c:()Lm/h;` @kind virtual;
  #L52a7fe.  v0:= temp @kind object;
  #L52a800.  return v0 @kind object;
}
procedure `java.lang.Object` `e`(`m.h` v1 @kind this, `int` v2 ) @signature `Lm/h;.e:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52a814.  v0:= 0I;
  #L52a816.  call temp:= `f`(v1, v2, v0) @signature `Lm/h;.f:(ILjava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L52a81c.  v2:= temp @kind object;
  #L52a81e.  return v2 @kind object;
}
procedure `java.lang.Object` `f`(`m.h` v3 @kind this, `int` v4 , `java.lang.Object` v5 @kind object) @signature `Lm/h;.f:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L52a830.  v0:= v3.`m.h.h` @type ^`int`[] @kind object;
  #L52a834.  v1:= v3.`m.h.j` @type ^`int`;
  #L52a838.  call temp:= `a`(v0, v1, v4) @signature `Lm/c;.a:([III)I` @kind static;
  #L52a83e.  v4:= temp;
  #L52a840.  if v4 < 0 then goto L52a85c;
  #L52a844.  v0:= v3.`m.h.i` @type ^`java.lang.Object`[] @kind object;
  #L52a848.  v1:= v0[v4] @kind object;
  #L52a84c.  v2:= `@@m.h.k` @type ^`java.lang.Object` @kind object;
  #L52a850.  if v1 != v2 then goto L52a856;
  #L52a854.  goto L52a85c;
  #L52a856.  v4:= v0[v4] @kind object;
  #L52a85a.  return v4 @kind object;
  #L52a85c.  return v5 @kind object;
}
procedure `int` `g`(`m.h` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lm/h;.g:(Ljava/lang/Object;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L52a76c.  v0:= v2.`m.h.g` @type ^`boolean` @kind boolean;
  #L52a770.  if v0 == 0 then goto L52a77a;
  #L52a774.  call `d`(v2) @signature `Lm/h;.d:()V` @kind direct;
  #L52a77a.  v0:= 0I;
  #L52a77c.  v1:= v2.`m.h.j` @type ^`int`;
  #L52a780.  if v0 >= v1 then goto L52a798;
  #L52a784.  v1:= v2.`m.h.i` @type ^`java.lang.Object`[] @kind object;
  #L52a788.  v1:= v1[v0] @kind object;
  #L52a78c.  if v1 != v3 then goto L52a792;
  #L52a790.  return v0;
  #L52a792.  v0:= v0 + 1;
  #L52a796.  goto L52a77c;
  #L52a798.  v3:= -1I;
  #L52a79a.  return v3;
}
procedure `int` `h`(`m.h` v1 @kind this, `int` v2 ) @signature `Lm/h;.h:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52a7ac.  v0:= v1.`m.h.g` @type ^`boolean` @kind boolean;
  #L52a7b0.  if v0 == 0 then goto L52a7ba;
  #L52a7b4.  call `d`(v1) @signature `Lm/h;.d:()V` @kind direct;
  #L52a7ba.  v0:= v1.`m.h.h` @type ^`int`[] @kind object;
  #L52a7be.  v2:= v0[v2];
  #L52a7c2.  return v2;
}
procedure `void` `i`(`m.h` v6 @kind this, `int` v7 , `java.lang.Object` v8 @kind object) @signature `Lm/h;.i:(ILjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L52ab68.  v0:= v6.`m.h.h` @type ^`int`[] @kind object;
  #L52ab6c.  v1:= v6.`m.h.j` @type ^`int`;
  #L52ab70.  call temp:= `a`(v0, v1, v7) @signature `Lm/c;.a:([III)I` @kind static;
  #L52ab76.  v0:= temp;
  #L52ab78.  if v0 < 0 then goto L52ab86;
  #L52ab7c.  v7:= v6.`m.h.i` @type ^`java.lang.Object`[] @kind object;
  #L52ab80.  v7[v0]:= v8 @kind object;
  #L52ab84.  goto L52ac64;
  #L52ab86.  v0:= ~v0 @kind int;
  #L52ab88.  v1:= v6.`m.h.j` @type ^`int`;
  #L52ab8c.  if v0 >= v1 then goto L52abae;
  #L52ab90.  v2:= v6.`m.h.i` @type ^`java.lang.Object`[] @kind object;
  #L52ab94.  v3:= v2[v0] @kind object;
  #L52ab98.  v4:= `@@m.h.k` @type ^`java.lang.Object` @kind object;
  #L52ab9c.  if v3 != v4 then goto L52abae;
  #L52aba0.  v1:= v6.`m.h.h` @type ^`int`[] @kind object;
  #L52aba4.  v1[v0]:= v7;
  #L52aba8.  v2[v0]:= v8 @kind object;
  #L52abac.  return @kind void;
  #L52abae.  v2:= v6.`m.h.g` @type ^`boolean` @kind boolean;
  #L52abb2.  if v2 == 0 then goto L52abd8;
  #L52abb6.  v2:= v6.`m.h.h` @type ^`int`[] @kind object;
  #L52abba.  v2:= length @variable v2;
  #L52abbc.  if v1 < v2 then goto L52abd8;
  #L52abc0.  call `d`(v6) @signature `Lm/h;.d:()V` @kind direct;
  #L52abc6.  v0:= v6.`m.h.h` @type ^`int`[] @kind object;
  #L52abca.  v1:= v6.`m.h.j` @type ^`int`;
  #L52abce.  call temp:= `a`(v0, v1, v7) @signature `Lm/c;.a:([III)I` @kind static;
  #L52abd4.  v0:= temp;
  #L52abd6.  v0:= ~v0 @kind int;
  #L52abd8.  v1:= v6.`m.h.j` @type ^`int`;
  #L52abdc.  v2:= v6.`m.h.h` @type ^`int`[] @kind object;
  #L52abe0.  v2:= length @variable v2;
  #L52abe2.  if v1 < v2 then goto L52ac1c;
  #L52abe6.  v1:= v1 + 1;
  #L52abea.  call temp:= `e`(v1) @signature `Lm/c;.e:(I)I` @kind static;
  #L52abf0.  v1:= temp;
  #L52abf2.  v2:= new `int`[v1];
  #L52abf6.  v1:= new `java.lang.Object`[v1];
  #L52abfa.  v3:= v6.`m.h.h` @type ^`int`[] @kind object;
  #L52abfe.  v4:= length @variable v3;
  #L52ac00.  v5:= 0I;
  #L52ac02.  call `arraycopy`(v3, v5, v2, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L52ac08.  v3:= v6.`m.h.i` @type ^`java.lang.Object`[] @kind object;
  #L52ac0c.  v4:= length @variable v3;
  #L52ac0e.  call `arraycopy`(v3, v5, v1, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L52ac14.  v6.`m.h.h` @type ^`int`[] := v2 @kind object;
  #L52ac18.  v6.`m.h.i` @type ^`java.lang.Object`[] := v1 @kind object;
  #L52ac1c.  v1:= v6.`m.h.j` @type ^`int`;
  #L52ac20.  v2:= v1 - v0 @kind int;
  #L52ac24.  if v2 == 0 then goto L52ac48;
  #L52ac28.  v2:= v6.`m.h.h` @type ^`int`[] @kind object;
  #L52ac2c.  v3:= v0 + 1;
  #L52ac30.  v1:= v1 - v0 @kind int;
  #L52ac32.  call `arraycopy`(v2, v0, v2, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L52ac38.  v1:= v6.`m.h.i` @type ^`java.lang.Object`[] @kind object;
  #L52ac3c.  v2:= v6.`m.h.j` @type ^`int`;
  #L52ac40.  v2:= v2 - v0 @kind int;
  #L52ac42.  call `arraycopy`(v1, v0, v1, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L52ac48.  v1:= v6.`m.h.h` @type ^`int`[] @kind object;
  #L52ac4c.  v1[v0]:= v7;
  #L52ac50.  v7:= v6.`m.h.i` @type ^`java.lang.Object`[] @kind object;
  #L52ac54.  v7[v0]:= v8 @kind object;
  #L52ac58.  v7:= v6.`m.h.j` @type ^`int`;
  #L52ac5c.  v7:= v7 + 1;
  #L52ac60.  v6.`m.h.j` @type ^`int` := v7;
  #L52ac64.  return @kind void;
}
procedure `int` `j`(`m.h` v1 @kind this) @signature `Lm/h;.j:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52a7d4.  v0:= v1.`m.h.g` @type ^`boolean` @kind boolean;
  #L52a7d8.  if v0 == 0 then goto L52a7e2;
  #L52a7dc.  call `d`(v1) @signature `Lm/h;.d:()V` @kind direct;
  #L52a7e2.  v0:= v1.`m.h.j` @type ^`int`;
  #L52a7e6.  return v0;
}
procedure `java.lang.Object` `l`(`m.h` v1 @kind this, `int` v2 ) @signature `Lm/h;.l:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52a870.  v0:= v1.`m.h.g` @type ^`boolean` @kind boolean;
  #L52a874.  if v0 == 0 then goto L52a87e;
  #L52a878.  call `d`(v1) @signature `Lm/h;.d:()V` @kind direct;
  #L52a87e.  v0:= v1.`m.h.i` @type ^`java.lang.Object`[] @kind object;
  #L52a882.  v2:= v0[v2] @kind object;
  #L52a886.  return v2 @kind object;
}
procedure `java.lang.String` `toString`(`m.h` v3 @kind this) @signature `Lm/h;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L52a898.  call temp:= `j`(v3) @signature `Lm/h;.j:()I` @kind virtual;
  #L52a89e.  v0:= temp;
  #L52a8a0.  if v0 > 0 then goto L52a8aa;
  #L52a8a4.  v0:= "{}" @kind object;
  #L52a8a8.  return v0 @kind object;
  #L52a8aa.  v0:= new `java.lang.StringBuilder`;
  #L52a8ae.  v1:= v3.`m.h.j` @type ^`int`;
  #L52a8b2.  v1:= v1 * 28;
  #L52a8b6.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L52a8bc.  v1:= 123I;
  #L52a8c0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L52a8c6.  v1:= 0I;
  #L52a8c8.  v2:= v3.`m.h.j` @type ^`int`;
  #L52a8cc.  if v1 >= v2 then goto L52a91a;
  #L52a8d0.  if v1 <= 0 then goto L52a8de;
  #L52a8d4.  v2:= ", " @kind object;
  #L52a8d8.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L52a8de.  call temp:= `h`(v3, v1) @signature `Lm/h;.h:(I)I` @kind virtual;
  #L52a8e4.  v2:= temp;
  #L52a8e6.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L52a8ec.  v2:= 61I;
  #L52a8f0.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L52a8f6.  call temp:= `l`(v3, v1) @signature `Lm/h;.l:(I)Ljava/lang/Object;` @kind virtual;
  #L52a8fc.  v2:= temp @kind object;
  #L52a8fe.  if v2 == v3 then goto L52a90a;
  #L52a902.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L52a908.  goto L52a914;
  #L52a90a.  v2:= "(this Map)" @kind object;
  #L52a90e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L52a914.  v1:= v1 + 1;
  #L52a918.  goto L52a8c8;
  #L52a91a.  v1:= 125I;
  #L52a91e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L52a924.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L52a92a.  v0:= temp @kind object;
  #L52a92c.  return v0 @kind object;
}
