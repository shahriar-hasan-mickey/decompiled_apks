record `m.f` @kind class @AccessFlag ABSTRACT {
  `m.f$b` `m.f.a` @AccessFlag ;
  `m.f$c` `m.f.b` @AccessFlag ;
  `m.f$e` `m.f.c` @AccessFlag ;
}
procedure `void` `<init>`(`m.f` v0 @kind this) @signature `Lm/f;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L529b08.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L529b0e.  return @kind void;
}
procedure `boolean` `j`(`java.util.Map` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lm/f;.j:(Ljava/util/Map;Ljava/util/Collection;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L529898.  call temp:= `iterator`(v2) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L52989e.  v2:= temp @kind object;
  #L5298a0.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L5298a6.  v0:= temp;
  #L5298a8.  if v0 == 0 then goto L5298c4;
  #L5298ac.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L5298b2.  v0:= temp @kind object;
  #L5298b4.  call temp:= `containsKey`(v1, v0) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L5298ba.  v0:= temp;
  #L5298bc.  if v0 != 0 then goto L5298a0;
  #L5298c0.  v1:= 0I;
  #L5298c2.  return v1;
  #L5298c4.  v1:= 1I;
  #L5298c6.  return v1;
}
procedure `boolean` `k`(`java.util.Set` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lm/f;.k:(Ljava/util/Set;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L5298d8.  v0:= 1I;
  #L5298da.  if v4 != v5 then goto L5298e0;
  #L5298de.  return v0;
  #L5298e0.  v1:= instanceof @variable v5 @type ^`java.util.Set` @kind boolean;
  #L5298e4.  v2:= 0I;
  #L5298e6.  if v1 == 0 then goto L529914;
  #L5298ea.  v5:= (`java.util.Set`) v5 @kind object;
  #L5298ee.  call temp:= `size`(v4) @signature `Ljava/util/Set;.size:()I` @kind interface;
  #L5298f4.  v1:= temp;
  #L5298f6.  call temp:= `size`(v5) @signature `Ljava/util/Set;.size:()I` @kind interface;
  #L5298fc.  v3:= temp;
  #L5298fe.  if v1 != v3 then goto L529910;
  #L529902.  call temp:= `containsAll`(v4, v5) @signature `Ljava/util/Set;.containsAll:(Ljava/util/Collection;)Z` @kind interface;
  #L529908.  v4:= temp;
  #L52990a.  if v4 == 0 then goto L529910;
  #L52990e.  goto L529912;
  #L529910.  v0:= 0I;
  #L529912.  return v0;
  #L529914.  return v2;
  catch `java.lang.NullPointerException` @[L5298ee..L52990a] goto L529914;
  catch `java.lang.ClassCastException` @[L5298ee..L52990a] goto L529914;
}
procedure `boolean` `o`(`java.util.Map` v2 @kind object, `java.util.Collection` v3 @kind object) @signature `Lm/f;.o:(Ljava/util/Map;Ljava/util/Collection;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L529938.  call temp:= `size`(v2) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L52993e.  v0:= temp;
  #L529940.  call temp:= `iterator`(v3) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L529946.  v3:= temp @kind object;
  #L529948.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L52994e.  v1:= temp;
  #L529950.  if v1 == 0 then goto L529964;
  #L529954.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L52995a.  v1:= temp @kind object;
  #L52995c.  call temp:= `remove`(v2, v1) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L529962.  goto L529948;
  #L529964.  call temp:= `size`(v2) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L52996a.  v2:= temp;
  #L52996c.  if v0 == v2 then goto L529974;
  #L529970.  v2:= 1I;
  #L529972.  goto L529976;
  #L529974.  v2:= 0I;
  #L529976.  return v2;
}
procedure `boolean` `p`(`java.util.Map` v3 @kind object, `java.util.Collection` v4 @kind object) @signature `Lm/f;.p:(Ljava/util/Map;Ljava/util/Collection;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L529988.  call temp:= `size`(v3) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L52998e.  v0:= temp;
  #L529990.  call temp:= `keySet`(v3) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L529996.  v1:= temp @kind object;
  #L529998.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L52999e.  v1:= temp @kind object;
  #L5299a0.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L5299a6.  v2:= temp;
  #L5299a8.  if v2 == 0 then goto L5299c8;
  #L5299ac.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L5299b2.  v2:= temp @kind object;
  #L5299b4.  call temp:= `contains`(v4, v2) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L5299ba.  v2:= temp;
  #L5299bc.  if v2 != 0 then goto L5299a0;
  #L5299c0.  call `remove`(v1) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L5299c6.  goto L5299a0;
  #L5299c8.  call temp:= `size`(v3) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L5299ce.  v3:= temp;
  #L5299d0.  if v0 == v3 then goto L5299d8;
  #L5299d4.  v3:= 1I;
  #L5299d6.  goto L5299da;
  #L5299d8.  v3:= 0I;
  #L5299da.  return v3;
}
procedure `void` `a`() @signature `Lm/f;.a:()V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `b`(`int` v0 , `int` v1 ) @signature `Lm/f;.b:(II)Ljava/lang/Object;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `java.util.Map` `c`() @signature `Lm/f;.c:()Ljava/util/Map;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `int` `d`() @signature `Lm/f;.d:()I` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `int` `e`(`java.lang.Object` v0 @kind object) @signature `Lm/f;.e:(Ljava/lang/Object;)I` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `int` `f`(`java.lang.Object` v0 @kind object) @signature `Lm/f;.f:(Ljava/lang/Object;)I` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `g`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lm/f;.g:(Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `h`(`int` v0 ) @signature `Lm/f;.h:(I)V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `i`(`int` v0 , `java.lang.Object` v1 @kind object) @signature `Lm/f;.i:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `java.util.Set` `l`(`m.f` v1 @kind this) @signature `Lm/f;.l:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L529ab0.  v0:= v1.`m.f.a` @type ^`m.f$b` @kind object;
  #L529ab4.  if v0 != 0 then goto L529ac6;
  #L529ab8.  v0:= new `m.f$b`;
  #L529abc.  call `<init>`(v0, v1) @signature `Lm/f$b;.<init>:(Lm/f;)V` @kind direct;
  #L529ac2.  v1.`m.f.a` @type ^`m.f$b` := v0 @kind object;
  #L529ac6.  v0:= v1.`m.f.a` @type ^`m.f$b` @kind object;
  #L529aca.  return v0 @kind object;
}
procedure `java.util.Set` `m`(`m.f` v1 @kind this) @signature `Lm/f;.m:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L529adc.  v0:= v1.`m.f.b` @type ^`m.f$c` @kind object;
  #L529ae0.  if v0 != 0 then goto L529af2;
  #L529ae4.  v0:= new `m.f$c`;
  #L529ae8.  call `<init>`(v0, v1) @signature `Lm/f$c;.<init>:(Lm/f;)V` @kind direct;
  #L529aee.  v1.`m.f.b` @type ^`m.f$c` := v0 @kind object;
  #L529af2.  v0:= v1.`m.f.b` @type ^`m.f$c` @kind object;
  #L529af6.  return v0 @kind object;
}
procedure `java.util.Collection` `n`(`m.f` v1 @kind this) @signature `Lm/f;.n:()Ljava/util/Collection;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L529a84.  v0:= v1.`m.f.c` @type ^`m.f$e` @kind object;
  #L529a88.  if v0 != 0 then goto L529a9a;
  #L529a8c.  v0:= new `m.f$e`;
  #L529a90.  call `<init>`(v0, v1) @signature `Lm/f$e;.<init>:(Lm/f;)V` @kind direct;
  #L529a96.  v1.`m.f.c` @type ^`m.f$e` := v0 @kind object;
  #L529a9a.  v0:= v1.`m.f.c` @type ^`m.f$e` @kind object;
  #L529a9e.  return v0 @kind object;
}
procedure `java.lang.Object`[] `q`(`m.f` v4 @kind this, `int` v5 ) @signature `Lm/f;.q:(I)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L5299ec.  call temp:= `d`(v4) @signature `Lm/f;.d:()I` @kind virtual;
  #L5299f2.  v0:= temp;
  #L5299f4.  v1:= new `java.lang.Object`[v0];
  #L5299f8.  v2:= 0I;
  #L5299fa.  if v2 >= v0 then goto L529a10;
  #L5299fe.  call temp:= `b`(v4, v2, v5) @signature `Lm/f;.b:(II)Ljava/lang/Object;` @kind virtual;
  #L529a04.  v3:= temp @kind object;
  #L529a06.  v1[v2]:= v3 @kind object;
  #L529a0a.  v2:= v2 + 1;
  #L529a0e.  goto L5299fa;
  #L529a10.  return v1 @kind object;
}
procedure `java.lang.Object`[] `r`(`m.f` v3 @kind this, `java.lang.Object`[] v4 @kind object, `int` v5 ) @signature `Lm/f;.r:([Ljava/lang/Object;I)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L529a24.  call temp:= `d`(v3) @signature `Lm/f;.d:()I` @kind virtual;
  #L529a2a.  v0:= temp;
  #L529a2c.  v1:= length @variable v4;
  #L529a2e.  if v1 >= v0 then goto L529a4e;
  #L529a32.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L529a38.  v4:= temp @kind object;
  #L529a3a.  call temp:= `getComponentType`(v4) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L529a40.  v4:= temp @kind object;
  #L529a42.  call temp:= `newInstance`(v4, v0) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L529a48.  v4:= temp @kind object;
  #L529a4a.  v4:= (`java.lang.Object`[]) v4 @kind object;
  #L529a4e.  v1:= 0I;
  #L529a50.  if v1 >= v0 then goto L529a66;
  #L529a54.  call temp:= `b`(v3, v1, v5) @signature `Lm/f;.b:(II)Ljava/lang/Object;` @kind virtual;
  #L529a5a.  v2:= temp @kind object;
  #L529a5c.  v4[v1]:= v2 @kind object;
  #L529a60.  v1:= v1 + 1;
  #L529a64.  goto L529a50;
  #L529a66.  v5:= length @variable v4;
  #L529a68.  if v5 <= v0 then goto L529a72;
  #L529a6c.  v5:= 0I;
  #L529a6e.  v4[v0]:= v5 @kind object;
  #L529a72.  return v4 @kind object;
}
