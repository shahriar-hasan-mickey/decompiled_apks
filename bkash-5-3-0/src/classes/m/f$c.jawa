record `m.f$c` @kind class @AccessFlag FINAL extends `java.util.Set` @kind interface {
  `m.f` `m.f$c.g` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`m.f$c` v0 @kind this, `m.f` v1 @kind object) @signature `Lm/f$c;.<init>:(Lm/f;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L5292f8.  v0.`m.f$c.g` @type ^`m.f` := v1 @kind object;
  #L5292fc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L529302.  return @kind void;
}
procedure `boolean` `add`(`m.f$c` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lm/f$c;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L5290d4.  v1:= new `java.lang.UnsupportedOperationException`;
  #L5290d8.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L5290de.  throw v1;
}
procedure `boolean` `addAll`(`m.f$c` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lm/f$c;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L5290f0.  v1:= new `java.lang.UnsupportedOperationException`;
  #L5290f4.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L5290fa.  throw v1;
}
procedure `void` `clear`(`m.f$c` v1 @kind this) @signature `Lm/f$c;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L529314.  v0:= v1.`m.f$c.g` @type ^`m.f` @kind object;
  #L529318.  call `a`(v0) @signature `Lm/f;.a:()V` @kind virtual;
  #L52931e.  return @kind void;
}
procedure `boolean` `contains`(`m.f$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lm/f$c;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52910c.  v0:= v1.`m.f$c.g` @type ^`m.f` @kind object;
  #L529110.  call temp:= `e`(v0, v2) @signature `Lm/f;.e:(Ljava/lang/Object;)I` @kind virtual;
  #L529116.  v2:= temp;
  #L529118.  if v2 < 0 then goto L529120;
  #L52911c.  v2:= 1I;
  #L52911e.  goto L529122;
  #L529120.  v2:= 0I;
  #L529122.  return v2;
}
procedure `boolean` `containsAll`(`m.f$c` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lm/f$c;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L529134.  v0:= v1.`m.f$c.g` @type ^`m.f` @kind object;
  #L529138.  call temp:= `c`(v0) @signature `Lm/f;.c:()Ljava/util/Map;` @kind virtual;
  #L52913e.  v0:= temp @kind object;
  #L529140.  call temp:= `j`(v0, v2) @signature `Lm/f;.j:(Ljava/util/Map;Ljava/util/Collection;)Z` @kind static;
  #L529146.  v2:= temp;
  #L529148.  return v2;
}
procedure `boolean` `equals`(`m.f$c` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lm/f$c;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L52915c.  call temp:= `k`(v0, v1) @signature `Lm/f;.k:(Ljava/util/Set;Ljava/lang/Object;)Z` @kind static;
  #L529162.  v1:= temp;
  #L529164.  return v1;
}
procedure `int` `hashCode`(`m.f$c` v4 @kind this) @signature `Lm/f$c;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L529224.  v0:= v4.`m.f$c.g` @type ^`m.f` @kind object;
  #L529228.  call temp:= `d`(v0) @signature `Lm/f;.d:()I` @kind virtual;
  #L52922e.  v0:= temp;
  #L529230.  v0:= v0 + -1;
  #L529234.  v1:= 0I;
  #L529236.  v2:= 0I;
  #L529238.  if v0 < 0 then goto L529260;
  #L52923c.  v3:= v4.`m.f$c.g` @type ^`m.f` @kind object;
  #L529240.  call temp:= `b`(v3, v0, v1) @signature `Lm/f;.b:(II)Ljava/lang/Object;` @kind virtual;
  #L529246.  v3:= temp @kind object;
  #L529248.  if v3 != 0 then goto L529250;
  #L52924c.  v3:= 0I;
  #L52924e.  goto L529258;
  #L529250.  call temp:= `hashCode`(v3) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L529256.  v3:= temp;
  #L529258.  v2:= v2 + v3 @kind int;
  #L52925a.  v0:= v0 + -1;
  #L52925e.  goto L529238;
  #L529260.  return v2;
}
procedure `boolean` `isEmpty`(`m.f$c` v1 @kind this) @signature `Lm/f$c;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L529178.  v0:= v1.`m.f$c.g` @type ^`m.f` @kind object;
  #L52917c.  call temp:= `d`(v0) @signature `Lm/f;.d:()I` @kind virtual;
  #L529182.  v0:= temp;
  #L529184.  if v0 != 0 then goto L52918c;
  #L529188.  v0:= 1I;
  #L52918a.  goto L52918e;
  #L52918c.  v0:= 0I;
  #L52918e.  return v0;
}
procedure `java.util.Iterator` `iterator`(`m.f$c` v3 @kind this) @signature `Lm/f$c;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L5292d4.  v0:= new `m.f$a`;
  #L5292d8.  v1:= v3.`m.f$c.g` @type ^`m.f` @kind object;
  #L5292dc.  v2:= 0I;
  #L5292de.  call `<init>`(v0, v1, v2) @signature `Lm/f$a;.<init>:(Lm/f;I)V` @kind direct;
  #L5292e4.  return v0 @kind object;
}
procedure `boolean` `remove`(`m.f$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lm/f$c;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5291a0.  v0:= v1.`m.f$c.g` @type ^`m.f` @kind object;
  #L5291a4.  call temp:= `e`(v0, v2) @signature `Lm/f;.e:(Ljava/lang/Object;)I` @kind virtual;
  #L5291aa.  v2:= temp;
  #L5291ac.  if v2 < 0 then goto L5291be;
  #L5291b0.  v0:= v1.`m.f$c.g` @type ^`m.f` @kind object;
  #L5291b4.  call `h`(v0, v2) @signature `Lm/f;.h:(I)V` @kind virtual;
  #L5291ba.  v2:= 1I;
  #L5291bc.  return v2;
  #L5291be.  v2:= 0I;
  #L5291c0.  return v2;
}
procedure `boolean` `removeAll`(`m.f$c` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lm/f$c;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5291d4.  v0:= v1.`m.f$c.g` @type ^`m.f` @kind object;
  #L5291d8.  call temp:= `c`(v0) @signature `Lm/f;.c:()Ljava/util/Map;` @kind virtual;
  #L5291de.  v0:= temp @kind object;
  #L5291e0.  call temp:= `o`(v0, v2) @signature `Lm/f;.o:(Ljava/util/Map;Ljava/util/Collection;)Z` @kind static;
  #L5291e6.  v2:= temp;
  #L5291e8.  return v2;
}
procedure `boolean` `retainAll`(`m.f$c` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lm/f$c;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5291fc.  v0:= v1.`m.f$c.g` @type ^`m.f` @kind object;
  #L529200.  call temp:= `c`(v0) @signature `Lm/f;.c:()Ljava/util/Map;` @kind virtual;
  #L529206.  v0:= temp @kind object;
  #L529208.  call temp:= `p`(v0, v2) @signature `Lm/f;.p:(Ljava/util/Map;Ljava/util/Collection;)Z` @kind static;
  #L52920e.  v2:= temp;
  #L529210.  return v2;
}
procedure `int` `size`(`m.f$c` v1 @kind this) @signature `Lm/f$c;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L529274.  v0:= v1.`m.f$c.g` @type ^`m.f` @kind object;
  #L529278.  call temp:= `d`(v0) @signature `Lm/f;.d:()I` @kind virtual;
  #L52927e.  v0:= temp;
  #L529280.  return v0;
}
procedure `java.lang.Object`[] `toArray`(`m.f$c` v2 @kind this) @signature `Lm/f$c;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L529294.  v0:= v2.`m.f$c.g` @type ^`m.f` @kind object;
  #L529298.  v1:= 0I;
  #L52929a.  call temp:= `q`(v0, v1) @signature `Lm/f;.q:(I)[Ljava/lang/Object;` @kind virtual;
  #L5292a0.  v0:= temp @kind object;
  #L5292a2.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`m.f$c` v2 @kind this, `java.lang.Object`[] v3 @kind object) @signature `Lm/f$c;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5292b4.  v0:= v2.`m.f$c.g` @type ^`m.f` @kind object;
  #L5292b8.  v1:= 0I;
  #L5292ba.  call temp:= `r`(v0, v3, v1) @signature `Lm/f;.r:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind virtual;
  #L5292c0.  v3:= temp @kind object;
  #L5292c2.  return v3 @kind object;
}
