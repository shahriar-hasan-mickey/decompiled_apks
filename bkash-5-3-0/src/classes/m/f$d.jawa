record `m.f$d` @kind class @AccessFlag FINAL extends `java.util.Iterator` @kind interface, `java.util.Map$Entry` @kind interface {
  `int` `m.f$d.g` @AccessFlag ;
  `int` `m.f$d.h` @AccessFlag ;
  `boolean` `m.f$d.i` @AccessFlag ;
  `m.f` `m.f$d.j` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`m.f$d` v1 @kind this, `m.f` v2 @kind object) @signature `Lm/f$d;.<init>:(Lm/f;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L5295a4.  v1.`m.f$d.j` @type ^`m.f` := v2 @kind object;
  #L5295a8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L5295ae.  v0:= 0I;
  #L5295b0.  v1.`m.f$d.i` @type ^`boolean` := v0 @kind boolean;
  #L5295b4.  call temp:= `d`(v2) @signature `Lm/f;.d:()I` @kind virtual;
  #L5295ba.  v2:= temp;
  #L5295bc.  v2:= v2 + -1;
  #L5295c0.  v1.`m.f$d.g` @type ^`int` := v2;
  #L5295c4.  v2:= -1I;
  #L5295c6.  v1.`m.f$d.h` @type ^`int` := v2;
  #L5295ca.  return @kind void;
}
procedure `java.util.Map$Entry` `a`(`m.f$d` v2 @kind this) @signature `Lm/f$d;.a:()Ljava/util/Map$Entry;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L529568.  call temp:= `hasNext`(v2) @signature `Lm/f$d;.hasNext:()Z` @kind virtual;
  #L52956e.  v0:= temp;
  #L529570.  if v0 == 0 then goto L529586;
  #L529574.  v0:= v2.`m.f$d.h` @type ^`int`;
  #L529578.  v1:= 1I;
  #L52957a.  v0:= v0 + v1 @kind int;
  #L52957c.  v2.`m.f$d.h` @type ^`int` := v0;
  #L529580.  v2.`m.f$d.i` @type ^`boolean` := v1 @kind boolean;
  #L529584.  return v2 @kind object;
  #L529586.  v0:= new `java.util.NoSuchElementException`;
  #L52958a.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L529590.  throw v0;
}
procedure `boolean` `equals`(`m.f$d` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lm/f$d;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L529330.  v0:= v4.`m.f$d.i` @type ^`boolean` @kind boolean;
  #L529334.  if v0 == 0 then goto L529396;
  #L529338.  v0:= instanceof @variable v5 @type ^`java.util.Map$Entry` @kind boolean;
  #L52933c.  v1:= 0I;
  #L52933e.  if v0 != 0 then goto L529344;
  #L529342.  return v1;
  #L529344.  v5:= (`java.util.Map$Entry`) v5 @kind object;
  #L529348.  call temp:= `getKey`(v5) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L52934e.  v0:= temp @kind object;
  #L529350.  v2:= v4.`m.f$d.j` @type ^`m.f` @kind object;
  #L529354.  v3:= v4.`m.f$d.h` @type ^`int`;
  #L529358.  call temp:= `b`(v2, v3, v1) @signature `Lm/f;.b:(II)Ljava/lang/Object;` @kind virtual;
  #L52935e.  v2:= temp @kind object;
  #L529360.  call temp:= `c`(v0, v2) @signature `Lm/c;.c:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L529366.  v0:= temp;
  #L529368.  v2:= 1I;
  #L52936a.  if v0 == 0 then goto L529394;
  #L52936e.  call temp:= `getValue`(v5) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L529374.  v5:= temp @kind object;
  #L529376.  v0:= v4.`m.f$d.j` @type ^`m.f` @kind object;
  #L52937a.  v3:= v4.`m.f$d.h` @type ^`int`;
  #L52937e.  call temp:= `b`(v0, v3, v2) @signature `Lm/f;.b:(II)Ljava/lang/Object;` @kind virtual;
  #L529384.  v0:= temp @kind object;
  #L529386.  call temp:= `c`(v5, v0) @signature `Lm/c;.c:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L52938c.  v5:= temp;
  #L52938e.  if v5 == 0 then goto L529394;
  #L529392.  v1:= 1I;
  #L529394.  return v1;
  #L529396.  v5:= new `java.lang.IllegalStateException`;
  #L52939a.  v0:= "This container does not support retaining Map.Entry objects" @kind object;
  #L52939e.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5293a4.  throw v5;
}
procedure `java.lang.Object` `getKey`(`m.f$d` v3 @kind this) @signature `Lm/f$d;.getKey:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L52944c.  v0:= v3.`m.f$d.i` @type ^`boolean` @kind boolean;
  #L529450.  if v0 == 0 then goto L529468;
  #L529454.  v0:= v3.`m.f$d.j` @type ^`m.f` @kind object;
  #L529458.  v1:= v3.`m.f$d.h` @type ^`int`;
  #L52945c.  v2:= 0I;
  #L52945e.  call temp:= `b`(v0, v1, v2) @signature `Lm/f;.b:(II)Ljava/lang/Object;` @kind virtual;
  #L529464.  v0:= temp @kind object;
  #L529466.  return v0 @kind object;
  #L529468.  v0:= new `java.lang.IllegalStateException`;
  #L52946c.  v1:= "This container does not support retaining Map.Entry objects" @kind object;
  #L529470.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L529476.  throw v0;
}
procedure `java.lang.Object` `getValue`(`m.f$d` v3 @kind this) @signature `Lm/f$d;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L529488.  v0:= v3.`m.f$d.i` @type ^`boolean` @kind boolean;
  #L52948c.  if v0 == 0 then goto L5294a4;
  #L529490.  v0:= v3.`m.f$d.j` @type ^`m.f` @kind object;
  #L529494.  v1:= v3.`m.f$d.h` @type ^`int`;
  #L529498.  v2:= 1I;
  #L52949a.  call temp:= `b`(v0, v1, v2) @signature `Lm/f;.b:(II)Ljava/lang/Object;` @kind virtual;
  #L5294a0.  v0:= temp @kind object;
  #L5294a2.  return v0 @kind object;
  #L5294a4.  v0:= new `java.lang.IllegalStateException`;
  #L5294a8.  v1:= "This container does not support retaining Map.Entry objects" @kind object;
  #L5294ac.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5294b2.  throw v0;
}
procedure `boolean` `hasNext`(`m.f$d` v2 @kind this) @signature `Lm/f$d;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5293b8.  v0:= v2.`m.f$d.h` @type ^`int`;
  #L5293bc.  v1:= v2.`m.f$d.g` @type ^`int`;
  #L5293c0.  if v0 >= v1 then goto L5293c8;
  #L5293c4.  v0:= 1I;
  #L5293c6.  goto L5293ca;
  #L5293c8.  v0:= 0I;
  #L5293ca.  return v0;
}
procedure `int` `hashCode`(`m.f$d` v5 @kind this) @signature `Lm/f$d;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L5293dc.  v0:= v5.`m.f$d.i` @type ^`boolean` @kind boolean;
  #L5293e0.  if v0 == 0 then goto L52942a;
  #L5293e4.  v0:= v5.`m.f$d.j` @type ^`m.f` @kind object;
  #L5293e8.  v1:= v5.`m.f$d.h` @type ^`int`;
  #L5293ec.  v2:= 0I;
  #L5293ee.  call temp:= `b`(v0, v1, v2) @signature `Lm/f;.b:(II)Ljava/lang/Object;` @kind virtual;
  #L5293f4.  v0:= temp @kind object;
  #L5293f6.  v1:= v5.`m.f$d.j` @type ^`m.f` @kind object;
  #L5293fa.  v3:= v5.`m.f$d.h` @type ^`int`;
  #L5293fe.  v4:= 1I;
  #L529400.  call temp:= `b`(v1, v3, v4) @signature `Lm/f;.b:(II)Ljava/lang/Object;` @kind virtual;
  #L529406.  v1:= temp @kind object;
  #L529408.  if v0 != 0 then goto L529410;
  #L52940c.  v0:= 0I;
  #L52940e.  goto L529418;
  #L529410.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L529416.  v0:= temp;
  #L529418.  if v1 != 0 then goto L52941e;
  #L52941c.  goto L529426;
  #L52941e.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L529424.  v2:= temp;
  #L529426.  v0:= v0 ^~ v2 @kind int;
  #L529428.  return v0;
  #L52942a.  v0:= new `java.lang.IllegalStateException`;
  #L52942e.  v1:= "This container does not support retaining Map.Entry objects" @kind object;
  #L529432.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L529438.  throw v0;
}
procedure `java.lang.Object` `next`(`m.f$d` v1 @kind this) @signature `Lm/f$d;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L5294c4.  call temp:= `a`(v1) @signature `Lm/f$d;.a:()Ljava/util/Map$Entry;` @kind virtual;
  #L5294ca.  v0:= temp @kind object;
  #L5294cc.  return v0 @kind object;
}
procedure `void` `remove`(`m.f$d` v2 @kind this) @signature `Lm/f$d;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5295dc.  v0:= v2.`m.f$d.i` @type ^`boolean` @kind boolean;
  #L5295e0.  if v0 == 0 then goto L529612;
  #L5295e4.  v0:= v2.`m.f$d.j` @type ^`m.f` @kind object;
  #L5295e8.  v1:= v2.`m.f$d.h` @type ^`int`;
  #L5295ec.  call `h`(v0, v1) @signature `Lm/f;.h:(I)V` @kind virtual;
  #L5295f2.  v0:= v2.`m.f$d.h` @type ^`int`;
  #L5295f6.  v0:= v0 + -1;
  #L5295fa.  v2.`m.f$d.h` @type ^`int` := v0;
  #L5295fe.  v0:= v2.`m.f$d.g` @type ^`int`;
  #L529602.  v0:= v0 + -1;
  #L529606.  v2.`m.f$d.g` @type ^`int` := v0;
  #L52960a.  v0:= 0I;
  #L52960c.  v2.`m.f$d.i` @type ^`boolean` := v0 @kind boolean;
  #L529610.  return @kind void;
  #L529612.  v0:= new `java.lang.IllegalStateException`;
  #L529616.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L52961c.  throw v0;
}
procedure `java.lang.Object` `setValue`(`m.f$d` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lm/f$d;.setValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5294e0.  v0:= v2.`m.f$d.i` @type ^`boolean` @kind boolean;
  #L5294e4.  if v0 == 0 then goto L5294fa;
  #L5294e8.  v0:= v2.`m.f$d.j` @type ^`m.f` @kind object;
  #L5294ec.  v1:= v2.`m.f$d.h` @type ^`int`;
  #L5294f0.  call temp:= `i`(v0, v1, v3) @signature `Lm/f;.i:(ILjava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L5294f6.  v3:= temp @kind object;
  #L5294f8.  return v3 @kind object;
  #L5294fa.  v3:= new `java.lang.IllegalStateException`;
  #L5294fe.  v0:= "This container does not support retaining Map.Entry objects" @kind object;
  #L529502.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L529508.  throw v3;
}
procedure `java.lang.String` `toString`(`m.f$d` v2 @kind this) @signature `Lm/f$d;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L52951c.  v0:= new `java.lang.StringBuilder`;
  #L529520.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L529526.  call temp:= `getKey`(v2) @signature `Lm/f$d;.getKey:()Ljava/lang/Object;` @kind virtual;
  #L52952c.  v1:= temp @kind object;
  #L52952e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L529534.  v1:= "=" @kind object;
  #L529538.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L52953e.  call temp:= `getValue`(v2) @signature `Lm/f$d;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L529544.  v1:= temp @kind object;
  #L529546.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L52954c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L529552.  v0:= temp @kind object;
  #L529554.  return v0 @kind object;
}
