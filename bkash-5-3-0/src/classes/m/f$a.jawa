record `m.f$a` @kind class @AccessFlag FINAL extends `java.util.Iterator` @kind interface {
  `int` `m.f$a.g` @AccessFlag FINAL;
  `int` `m.f$a.h` @AccessFlag ;
  `int` `m.f$a.i` @AccessFlag ;
  `boolean` `m.f$a.j` @AccessFlag ;
  `m.f` `m.f$a.k` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`m.f$a` v1 @kind this, `m.f` v2 @kind object, `int` v3 ) @signature `Lm/f$a;.<init>:(Lm/f;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L528d54.  v1.`m.f$a.k` @type ^`m.f` := v2 @kind object;
  #L528d58.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L528d5e.  v0:= 0I;
  #L528d60.  v1.`m.f$a.j` @type ^`boolean` := v0 @kind boolean;
  #L528d64.  v1.`m.f$a.g` @type ^`int` := v3;
  #L528d68.  call temp:= `d`(v2) @signature `Lm/f;.d:()I` @kind virtual;
  #L528d6e.  v2:= temp;
  #L528d70.  v1.`m.f$a.h` @type ^`int` := v2;
  #L528d74.  return @kind void;
}
procedure `boolean` `hasNext`(`m.f$a` v2 @kind this) @signature `Lm/f$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L528ce0.  v0:= v2.`m.f$a.i` @type ^`int`;
  #L528ce4.  v1:= v2.`m.f$a.h` @type ^`int`;
  #L528ce8.  if v0 >= v1 then goto L528cf0;
  #L528cec.  v0:= 1I;
  #L528cee.  goto L528cf2;
  #L528cf0.  v0:= 0I;
  #L528cf2.  return v0;
}
procedure `java.lang.Object` `next`(`m.f$a` v3 @kind this) @signature `Lm/f$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L528d04.  call temp:= `hasNext`(v3) @signature `Lm/f$a;.hasNext:()Z` @kind virtual;
  #L528d0a.  v0:= temp;
  #L528d0c.  if v0 == 0 then goto L528d36;
  #L528d10.  v0:= v3.`m.f$a.k` @type ^`m.f` @kind object;
  #L528d14.  v1:= v3.`m.f$a.i` @type ^`int`;
  #L528d18.  v2:= v3.`m.f$a.g` @type ^`int`;
  #L528d1c.  call temp:= `b`(v0, v1, v2) @signature `Lm/f;.b:(II)Ljava/lang/Object;` @kind virtual;
  #L528d22.  v0:= temp @kind object;
  #L528d24.  v1:= v3.`m.f$a.i` @type ^`int`;
  #L528d28.  v2:= 1I;
  #L528d2a.  v1:= v1 + v2 @kind int;
  #L528d2c.  v3.`m.f$a.i` @type ^`int` := v1;
  #L528d30.  v3.`m.f$a.j` @type ^`boolean` := v2 @kind boolean;
  #L528d34.  return v0 @kind object;
  #L528d36.  v0:= new `java.util.NoSuchElementException`;
  #L528d3a.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L528d40.  throw v0;
}
procedure `void` `remove`(`m.f$a` v2 @kind this) @signature `Lm/f$a;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L528d88.  v0:= v2.`m.f$a.j` @type ^`boolean` @kind boolean;
  #L528d8c.  if v0 == 0 then goto L528dba;
  #L528d90.  v0:= v2.`m.f$a.i` @type ^`int`;
  #L528d94.  v0:= v0 + -1;
  #L528d98.  v2.`m.f$a.i` @type ^`int` := v0;
  #L528d9c.  v1:= v2.`m.f$a.h` @type ^`int`;
  #L528da0.  v1:= v1 + -1;
  #L528da4.  v2.`m.f$a.h` @type ^`int` := v1;
  #L528da8.  v1:= 0I;
  #L528daa.  v2.`m.f$a.j` @type ^`boolean` := v1 @kind boolean;
  #L528dae.  v1:= v2.`m.f$a.k` @type ^`m.f` @kind object;
  #L528db2.  call `h`(v1, v0) @signature `Lm/f;.h:(I)V` @kind virtual;
  #L528db8.  return @kind void;
  #L528dba.  v0:= new `java.lang.IllegalStateException`;
  #L528dbe.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L528dc4.  throw v0;
}
