record `g4.c$a` @kind class @AccessFlag  extends `java.lang.Runnable` @kind interface {
  `g4.c` `g4.c$a.g` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`g4.c$a` v0 @kind this, `g4.c` v1 @kind object) @signature `Lg4/c$a;.<init>:(Lg4/c;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L508b1c.  v0.`g4.c$a.g` @type ^`g4.c` := v1 @kind object;
  #L508b20.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L508b26.  return @kind void;
}
procedure `void` `run`(`g4.c$a` v3 @kind this) @signature `Lg4/c$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L508b38.  v0:= v3.`g4.c$a.g` @type ^`g4.c` @kind object;
  #L508b3c.  @monitorenter v0
  #L508b3e.  v1:= v3.`g4.c$a.g` @type ^`g4.c` @kind object;
  #L508b42.  v2:= 0I;
  #L508b44.  call temp:= `f`(v1, v2) @signature `Lg4/c;.f:(Lg4/c;Z)Z` @kind static;
  #L508b4a.  v1:= v3.`g4.c$a.g` @type ^`g4.c` @kind object;
  #L508b4e.  call temp:= `k`(v1) @signature `Lg4/c;.k:(Lg4/c;)Z` @kind static;
  #L508b54.  v1:= temp;
  #L508b56.  if v1 == 0 then goto L508b7e;
  #L508b5a.  v1:= v3.`g4.c$a.g` @type ^`g4.c` @kind object;
  #L508b5e.  call temp:= `l`(v1) @signature `Lg4/c;.l:(Lg4/c;)Lg4/c$b;` @kind static;
  #L508b64.  v1:= temp @kind object;
  #L508b66.  if v1 == 0 then goto L508b88;
  #L508b6a.  v1:= v3.`g4.c$a.g` @type ^`g4.c` @kind object;
  #L508b6e.  call temp:= `l`(v1) @signature `Lg4/c;.l:(Lg4/c;)Lg4/c$b;` @kind static;
  #L508b74.  v1:= temp @kind object;
  #L508b76.  call `f`(v1) @signature `Lg4/c$b;.f:()V` @kind interface;
  #L508b7c.  goto L508b88;
  #L508b7e.  v1:= v3.`g4.c$a.g` @type ^`g4.c` @kind object;
  #L508b82.  call `m`(v1) @signature `Lg4/c;.m:(Lg4/c;)V` @kind static;
  #L508b88.  @monitorexit v0
  #L508b8a.  return @kind void;
  #L508b8c.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L508b8e.  @monitorexit v0
  #L508b90.  throw v1;
  catch `java.lang.Throwable` @[L508b3e..L508b90] goto L508b8c;
}
