record `y3.c` @kind class @AccessFlag PUBLIC {
  `java.util.Queue` `y3.c.a` @AccessFlag PRIVATE_FINAL;
}
global `y3.c` `@@y3.c.b` @AccessFlag PRIVATE_STATIC_FINAL;
global `boolean` `@@y3.c.c` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Ly3/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L574060.  v0:= new `y3.c`;
  #L574064.  call `<init>`(v0) @signature `Ly3/c;.<init>:()V` @kind direct;
  #L57406a.  `@@y3.c.b` @type ^`y3.c` := v0 @kind object;
  #L57406e.  v0:= 1I;
  #L574070.  `@@y3.c.c` @type ^`boolean` := v0 @kind boolean;
  #L574074.  return @kind void;
}
procedure `void` `<init>`(`y3.c` v2 @kind this) @signature `Ly3/c;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L574088.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L57408e.  v0:= new `java.util.concurrent.ArrayBlockingQueue`;
  #L574092.  v1:= 20I;
  #L574096.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/ArrayBlockingQueue;.<init>:(I)V` @kind direct;
  #L57409c.  v2.`y3.c.a` @type ^`java.util.Queue` := v0 @kind object;
  #L5740a0.  return @kind void;
}
procedure `y3.c` `a`() @signature `Ly3/c;.a:()Ly3/c;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L5740fc.  v0:= `@@y3.c.c` @type ^`boolean` @kind boolean;
  #L574100.  if v0 == 0 then goto L574110;
  #L574104.  v0:= new `y3.c`;
  #L574108.  call `<init>`(v0) @signature `Ly3/c;.<init>:()V` @kind direct;
  #L57410e.  goto L574114;
  #L574110.  v0:= `@@y3.c.b` @type ^`y3.c` @kind object;
  #L574114.  return v0 @kind object;
}
procedure `void` `b`(`y3.c` v2 @kind this, `y3.c$a` v3 @kind object) @signature `Ly3/c;.b:(Ly3/c$a;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5740b4.  v0:= `@@y3.c.c` @type ^`boolean` @kind boolean;
  #L5740b8.  if v0 != 0 then goto L5740be;
  #L5740bc.  return @kind void;
  #L5740be.  v0:= v2.`y3.c.a` @type ^`java.util.Queue` @kind object;
  #L5740c2.  call temp:= `size`(v0) @signature `Ljava/util/Queue;.size:()I` @kind interface;
  #L5740c8.  v0:= temp;
  #L5740ca.  v0:= v0 + 1;
  #L5740ce.  v1:= 20I;
  #L5740d2.  if v0 <= v1 then goto L5740e0;
  #L5740d6.  v0:= v2.`y3.c.a` @type ^`java.util.Queue` @kind object;
  #L5740da.  call temp:= `poll`(v0) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L5740e0.  v0:= v2.`y3.c.a` @type ^`java.util.Queue` @kind object;
  #L5740e4.  call temp:= `add`(v0, v3) @signature `Ljava/util/Queue;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L5740ea.  return @kind void;
}
procedure `java.lang.String` `toString`(`y3.c` v1 @kind this) @signature `Ly3/c;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L574040.  v0:= v1.`y3.c.a` @type ^`java.util.Queue` @kind object;
  #L574044.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L57404a.  v0:= temp @kind object;
  #L57404c.  return v0 @kind object;
}
