record `p1.c` @kind class @AccessFlag PUBLIC extends `p1.a` @kind class, `java.lang.Runnable` @kind interface {
  `java.util.concurrent.BlockingQueue` `p1.c.j` @AccessFlag PRIVATE;
  `java.util.concurrent.atomic.AtomicBoolean` `p1.c.k` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`p1.c` v1 @kind this, `p1.a` v2 @kind object) @signature `Lp1/c;.<init>:(Lp1/a;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L547448.  call `<init>`(v1, v2) @signature `Lp1/a;.<init>:(Lp1/a;)V` @kind direct;
  #L54744e.  v2:= new `java.util.concurrent.LinkedBlockingQueue`;
  #L547452.  call `<init>`(v2) @signature `Ljava/util/concurrent/LinkedBlockingQueue;.<init>:()V` @kind direct;
  #L547458.  v1.`p1.c.j` @type ^`java.util.concurrent.BlockingQueue` := v2 @kind object;
  #L54745c.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L547460.  v0:= 0I;
  #L547462.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:(Z)V` @kind direct;
  #L547468.  v1.`p1.c.k` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L54746c.  return @kind void;
}
procedure `boolean` `a`(`p1.c` v1 @kind this, `o1.d` v2 @kind object) @signature `Lp1/c;.a:(Lo1/d;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5473b4.  call temp:= `d`(v2) @signature `Lo1/d;.d:()I` @kind virtual;
  #L5473ba.  v2:= temp;
  #L5473bc.  v0:= 3I;
  #L5473be.  if v2 != v0 then goto L5473c6;
  #L5473c2.  v2:= 1I;
  #L5473c4.  goto L5473c8;
  #L5473c6.  v2:= 0I;
  #L5473c8.  return v2;
}
procedure `o1.c` `c`(`p1.c` v2 @kind this, `q1.a` v3 @kind object, `o1.d` v4 @kind object) @signature `Lp1/c;.c:(Lq1/a;Lo1/d;)Lo1/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5473dc.  call temp:= `getMainLooper`() @signature `Landroid/os/Looper;.getMainLooper:()Landroid/os/Looper;` @kind static;
  #L5473e2.  v0:= temp @kind object;
  #L5473e4.  call temp:= `getThread`(v0) @signature `Landroid/os/Looper;.getThread:()Ljava/lang/Thread;` @kind virtual;
  #L5473ea.  v0:= temp @kind object;
  #L5473ec.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L5473f2.  v1:= temp @kind object;
  #L5473f4.  if v0 != v1 then goto L54742c;
  #L5473f8.  v0:= v2.`p1.c.j` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L5473fc.  v1:= new `p1.g`;
  #L547400.  call `<init>`(v1, v3, v4) @signature `Lp1/g;.<init>:(Lq1/a;Lo1/d;)V` @kind direct;
  #L547406.  call temp:= `offer`(v0, v1) @signature `Ljava/util/concurrent/BlockingQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L54740c.  v3:= v2.`p1.c.k` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L547410.  v4:= 0I;
  #L547412.  v0:= 1I;
  #L547414.  call temp:= `compareAndSet`(v3, v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L54741a.  v3:= temp;
  #L54741c.  if v3 == 0 then goto L547432;
  #L547420.  v3:= v2.`p1.a.i` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L547424.  call `execute`(v3, v2) @signature `Ljava/util/concurrent/ExecutorService;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L54742a.  goto L547432;
  #L54742c.  call temp:= `d`(v2, v3, v4) @signature `Lp1/a;.d:(Lq1/a;Lo1/d;)Lo1/c;` @kind virtual;
  #L547432.  v3:= `@@o1.c.SUCCESS` @type ^`o1.c` @kind object;
  #L547436.  return v3 @kind object;
}
procedure `void` `run`(`p1.c` v3 @kind this) @signature `Lp1/c;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L547480.  v0:= v3.`p1.c.k` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L547484.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L54748a.  v0:= temp;
  #L54748c.  if v0 == 0 then goto L5474c8;
  #L547490.  v0:= v3.`p1.c.j` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L547494.  call temp:= `take`(v0) @signature `Ljava/util/concurrent/BlockingQueue;.take:()Ljava/lang/Object;` @kind interface;
  #L54749a.  v0:= temp @kind object;
  #L54749c.  v0:= (`p1.g`) v0 @kind object;
  #L5474a0.  if v0 == 0 then goto L547480;
  #L5474a4.  v1:= v0.`p1.g.event` @type ^`q1.a` @kind object;
  #L5474a8.  v0:= v0.`p1.g.subscriber` @type ^`o1.d` @kind object;
  #L5474ac.  call temp:= `d`(v3, v1, v0) @signature `Lp1/a;.d:(Lq1/a;Lo1/d;)Lo1/c;` @kind virtual;
  #L5474b2.  goto L547480;
  #L5474b4.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L5474b6.  v1:= v3.`p1.c.k` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L5474ba.  v2:= 0I;
  #L5474bc.  call `set`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L5474c2.  call temp:= `getMessage`(v0) @signature `Ljava/lang/Exception;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L5474c8.  return @kind void;
  catch `java.lang.Exception` @[L547480..L5474b2] goto L5474b4;
}
