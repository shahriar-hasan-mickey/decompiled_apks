record `p1.b` @kind class @AccessFlag PUBLIC extends `p1.a` @kind class, `java.lang.Runnable` @kind interface {
  `java.util.concurrent.BlockingQueue` `p1.b.j` @AccessFlag PRIVATE;
  `java.util.concurrent.atomic.AtomicBoolean` `p1.b.k` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`p1.b` v1 @kind this, `p1.a` v2 @kind object) @signature `Lp1/b;.<init>:(Lp1/a;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L547310.  call `<init>`(v1, v2) @signature `Lp1/a;.<init>:(Lp1/a;)V` @kind direct;
  #L547316.  v2:= new `java.util.concurrent.LinkedBlockingQueue`;
  #L54731a.  call `<init>`(v2) @signature `Ljava/util/concurrent/LinkedBlockingQueue;.<init>:()V` @kind direct;
  #L547320.  v1.`p1.b.j` @type ^`java.util.concurrent.BlockingQueue` := v2 @kind object;
  #L547324.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L547328.  v0:= 0I;
  #L54732a.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:(Z)V` @kind direct;
  #L547330.  v1.`p1.b.k` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L547334.  return @kind void;
}
procedure `boolean` `a`(`p1.b` v1 @kind this, `o1.d` v2 @kind object) @signature `Lp1/b;.a:(Lo1/d;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5472a4.  call temp:= `d`(v2) @signature `Lo1/d;.d:()I` @kind virtual;
  #L5472aa.  v2:= temp;
  #L5472ac.  v0:= 1I;
  #L5472ae.  if v2 != v0 then goto L5472b4;
  #L5472b2.  goto L5472b6;
  #L5472b4.  v0:= 0I;
  #L5472b6.  return v0;
}
procedure `o1.c` `c`(`p1.b` v2 @kind this, `q1.a` v3 @kind object, `o1.d` v4 @kind object) @signature `Lp1/b;.c:(Lq1/a;Lo1/d;)Lo1/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5472c8.  v0:= v2.`p1.b.j` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L5472cc.  v1:= new `p1.g`;
  #L5472d0.  call `<init>`(v1, v3, v4) @signature `Lp1/g;.<init>:(Lq1/a;Lo1/d;)V` @kind direct;
  #L5472d6.  call temp:= `offer`(v0, v1) @signature `Ljava/util/concurrent/BlockingQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L5472dc.  v3:= v2.`p1.b.k` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L5472e0.  v4:= 0I;
  #L5472e2.  v0:= 1I;
  #L5472e4.  call temp:= `compareAndSet`(v3, v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L5472ea.  v3:= temp;
  #L5472ec.  if v3 == 0 then goto L5472fa;
  #L5472f0.  v3:= v2.`p1.a.i` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L5472f4.  call `execute`(v3, v2) @signature `Ljava/util/concurrent/ExecutorService;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L5472fa.  v3:= `@@o1.c.SUCCESS` @type ^`o1.c` @kind object;
  #L5472fe.  return v3 @kind object;
}
procedure `void` `run`(`p1.b` v3 @kind this) @signature `Lp1/b;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L547348.  v0:= v3.`p1.b.k` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L54734c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L547352.  v0:= temp;
  #L547354.  if v0 == 0 then goto L547390;
  #L547358.  v0:= v3.`p1.b.j` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L54735c.  call temp:= `take`(v0) @signature `Ljava/util/concurrent/BlockingQueue;.take:()Ljava/lang/Object;` @kind interface;
  #L547362.  v0:= temp @kind object;
  #L547364.  v0:= (`p1.g`) v0 @kind object;
  #L547368.  if v0 == 0 then goto L547348;
  #L54736c.  v1:= v0.`p1.g.event` @type ^`q1.a` @kind object;
  #L547370.  v0:= v0.`p1.g.subscriber` @type ^`o1.d` @kind object;
  #L547374.  call temp:= `d`(v3, v1, v0) @signature `Lp1/a;.d:(Lq1/a;Lo1/d;)Lo1/c;` @kind virtual;
  #L54737a.  goto L547348;
  #L54737c.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L54737e.  v1:= v3.`p1.b.k` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L547382.  v2:= 0I;
  #L547384.  call `set`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L54738a.  call temp:= `getMessage`(v0) @signature `Ljava/lang/Exception;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L547390.  return @kind void;
  catch `java.lang.Exception` @[L547348..L54737a] goto L54737c;
}
