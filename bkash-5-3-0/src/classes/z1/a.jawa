record `z1.a` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `java.lang.String` `z1.a.a` @AccessFlag PRIVATE;
  `java.util.HashMap` `z1.a.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`z1.a` v0 @kind this) @signature `Lz1/a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L57fe90.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L57fe96.  return @kind void;
}
procedure `java.lang.String` `a`() @signature `Lz1/a;.a:()Ljava/lang/String;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `b`(`z1.a` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lz1/a;.b:(Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L57fea8.  v0:= v1.`z1.a.b` @type ^`java.util.HashMap` @kind object;
  #L57feac.  if v0 != 0 then goto L57febe;
  #L57feb0.  v0:= new `java.util.HashMap`;
  #L57feb4.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L57feba.  v1.`z1.a.b` @type ^`java.util.HashMap` := v0 @kind object;
  #L57febe.  v0:= v1.`z1.a.b` @type ^`java.util.HashMap` @kind object;
  #L57fec2.  call temp:= `put`(v0, v2, v3) @signature `Ljava/util/HashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L57fec8.  return @kind void;
}
procedure `void` `c`(`z1.a` v2 @kind this, `java.util.Map` v3 @kind object) @signature `Lz1/a;.c:(Ljava/util/Map;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L57fedc.  if v3 == 0 then goto L57ff34;
  #L57fee0.  call temp:= `size`(v3) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L57fee6.  v0:= temp;
  #L57fee8.  if v0 <= 0 then goto L57ff34;
  #L57feec.  call temp:= `entrySet`(v3) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L57fef2.  v3:= temp @kind object;
  #L57fef4.  call temp:= `iterator`(v3) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L57fefa.  v3:= temp @kind object;
  #L57fefc.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L57ff02.  v0:= temp;
  #L57ff04.  if v0 == 0 then goto L57ff34;
  #L57ff08.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L57ff0e.  v0:= temp @kind object;
  #L57ff10.  v0:= (`java.util.Map$Entry`) v0 @kind object;
  #L57ff14.  call temp:= `getKey`(v0) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L57ff1a.  v1:= temp @kind object;
  #L57ff1c.  v1:= (`java.lang.String`) v1 @kind object;
  #L57ff20.  call temp:= `getValue`(v0) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L57ff26.  v0:= temp @kind object;
  #L57ff28.  v0:= (`java.lang.String`) v0 @kind object;
  #L57ff2c.  call `b`(v2, v1, v0) @signature `Lz1/a;.b:(Ljava/lang/String;Ljava/lang/String;)V` @kind virtual;
  #L57ff32.  goto L57fefc;
  #L57ff34.  return @kind void;
}
procedure `void` `d`(`z1.a` v1 @kind this) @signature `Lz1/a;.d:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L57ff48.  call temp:= `a`() @signature `Ln2/p;.a:()Ljava/lang/String;` @kind static;
  #L57ff4e.  v0:= temp @kind object;
  #L57ff50.  v1.`z1.a.a` @type ^`java.lang.String` := v0 @kind object;
  #L57ff54.  return @kind void;
}
procedure `java.lang.String` `e`(`z1.a` v1 @kind this) @signature `Lz1/a;.e:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L57fe60.  v0:= v1.`z1.a.a` @type ^`java.lang.String` @kind object;
  #L57fe64.  return v0 @kind object;
}
procedure `java.util.HashMap` `f`(`z1.a` v1 @kind this) @signature `Lz1/a;.f:()Ljava/util/HashMap;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L57fe78.  v0:= v1.`z1.a.b` @type ^`java.util.HashMap` @kind object;
  #L57fe7c.  return v0 @kind object;
}
