record `e1.d$a` @kind class @AccessFlag  extends `java.lang.Runnable` @kind interface {
  `java.util.List` `e1.d$a.g` @AccessFlag FINAL_SYNTHETIC;
  `e1.d` `e1.d$a.h` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`e1.d$a` v0 @kind this, `e1.d` v1 @kind object, `java.util.List` v2 @kind object) @signature `Le1/d$a;.<init>:(Le1/d;Ljava/util/List;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4fa3f8.  v0.`e1.d$a.h` @type ^`e1.d` := v1 @kind object;
  #L4fa3fc.  v0.`e1.d$a.g` @type ^`java.util.List` := v2 @kind object;
  #L4fa400.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4fa406.  return @kind void;
}
procedure `void` `run`(`e1.d$a` v3 @kind this) @signature `Le1/d$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4fa418.  v0:= v3.`e1.d$a.g` @type ^`java.util.List` @kind object;
  #L4fa41c.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4fa422.  v0:= temp @kind object;
  #L4fa424.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4fa42a.  v1:= temp;
  #L4fa42c.  if v1 == 0 then goto L4fa44c;
  #L4fa430.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4fa436.  v1:= temp @kind object;
  #L4fa438.  v1:= (`c1.a`) v1 @kind object;
  #L4fa43c.  v2:= v3.`e1.d$a.h` @type ^`e1.d` @kind object;
  #L4fa440.  v2:= v2.`e1.d.e` @type ^`java.lang.Object` @kind object;
  #L4fa444.  call `a`(v1, v2) @signature `Lc1/a;.a:(Ljava/lang/Object;)V` @kind interface;
  #L4fa44a.  goto L4fa424;
  #L4fa44c.  return @kind void;
}
