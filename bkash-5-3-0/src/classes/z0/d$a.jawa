record `z0.d$a` @kind class @AccessFlag  extends `java.lang.Runnable` @kind interface {
  `z0.b` `z0.d$a.g` @AccessFlag PRIVATE;
  `java.lang.String` `z0.d$a.h` @AccessFlag PRIVATE;
  `com.google.common.util.concurrent.b` `z0.d$a.i` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`z0.d$a` v0 @kind this, `z0.b` v1 @kind object, `java.lang.String` v2 @kind object, `com.google.common.util.concurrent.b` v3 @kind object) @signature `Lz0/d$a;.<init>:(Lz0/b;Ljava/lang/String;Lcom/google/common/util/concurrent/b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L57d698.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L57d69e.  v0.`z0.d$a.g` @type ^`z0.b` := v1 @kind object;
  #L57d6a2.  v0.`z0.d$a.h` @type ^`java.lang.String` := v2 @kind object;
  #L57d6a6.  v0.`z0.d$a.i` @type ^`com.google.common.util.concurrent.b` := v3 @kind object;
  #L57d6aa.  return @kind void;
}
procedure `void` `run`(`z0.d$a` v3 @kind this) @signature `Lz0/d$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L57d6bc.  v0:= v3.`z0.d$a.i` @type ^`com.google.common.util.concurrent.b` @kind object;
  #L57d6c0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/Future;.get:()Ljava/lang/Object;` @kind interface;
  #L57d6c6.  v0:= temp @kind object;
  #L57d6c8.  v0:= (`java.lang.Boolean`) v0 @kind object;
  #L57d6cc.  call temp:= `booleanValue`(v0) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L57d6d2.  v0:= temp;
  #L57d6d4.  goto L57d6d8;
  #L57d6d6.  v0:= 1I;
  #L57d6d8.  v1:= v3.`z0.d$a.g` @type ^`z0.b` @kind object;
  #L57d6dc.  v2:= v3.`z0.d$a.h` @type ^`java.lang.String` @kind object;
  #L57d6e0.  call `onExecuted`(v1, v2, v0) @signature `Lz0/b;.onExecuted:(Ljava/lang/String;Z)V` @kind interface;
  #L57d6e6.  return @kind void;
  catch `java.lang.InterruptedException` @[L57d6bc..L57d6d4] goto L57d6d6;
  catch `java.util.concurrent.ExecutionException` @[L57d6bc..L57d6d4] goto L57d6d6;
}
