record `b0.b` @kind class @AccessFlag PUBLIC_ABSTRACT extends `b0.a$b` @kind interface {
  `float` `b0.b.a` @AccessFlag ;
  `float` `b0.b.b` @AccessFlag ;
  `boolean` `b0.b.c` @AccessFlag ;
  `java.lang.Object` `b0.b.d` @AccessFlag FINAL;
  `b0.c` `b0.b.e` @AccessFlag FINAL;
  `boolean` `b0.b.f` @AccessFlag ;
  `float` `b0.b.g` @AccessFlag ;
  `float` `b0.b.h` @AccessFlag ;
  `long` `b0.b.i` @AccessFlag PRIVATE;
  `float` `b0.b.j` @AccessFlag PRIVATE;
  `java.util.ArrayList` `b0.b.k` @AccessFlag PRIVATE_FINAL;
  `java.util.ArrayList` `b0.b.l` @AccessFlag PRIVATE_FINAL;
}
global `b0.b$r` `@@b0.b.m` @AccessFlag PUBLIC_STATIC_FINAL;
global `b0.b$r` `@@b0.b.n` @AccessFlag PUBLIC_STATIC_FINAL;
global `b0.b$r` `@@b0.b.o` @AccessFlag PUBLIC_STATIC_FINAL;
global `b0.b$r` `@@b0.b.p` @AccessFlag PUBLIC_STATIC_FINAL;
global `b0.b$r` `@@b0.b.q` @AccessFlag PUBLIC_STATIC_FINAL;
global `b0.b$r` `@@b0.b.r` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lb0/b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2a075c.  v0:= new `b0.b$f`;
  #L2a0760.  v1:= "translationX" @kind object;
  #L2a0764.  call `<init>`(v0, v1) @signature `Lb0/b$f;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a076a.  v0:= new `b0.b$g`;
  #L2a076e.  v1:= "translationY" @kind object;
  #L2a0772.  call `<init>`(v0, v1) @signature `Lb0/b$g;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a0778.  v0:= new `b0.b$h`;
  #L2a077c.  v1:= "translationZ" @kind object;
  #L2a0780.  call `<init>`(v0, v1) @signature `Lb0/b$h;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a0786.  v0:= new `b0.b$i`;
  #L2a078a.  v1:= "scaleX" @kind object;
  #L2a078e.  call `<init>`(v0, v1) @signature `Lb0/b$i;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a0794.  `@@b0.b.m` @type ^`b0.b$r` := v0 @kind object;
  #L2a0798.  v0:= new `b0.b$j`;
  #L2a079c.  v1:= "scaleY" @kind object;
  #L2a07a0.  call `<init>`(v0, v1) @signature `Lb0/b$j;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a07a6.  `@@b0.b.n` @type ^`b0.b$r` := v0 @kind object;
  #L2a07aa.  v0:= new `b0.b$k`;
  #L2a07ae.  v1:= "rotation" @kind object;
  #L2a07b2.  call `<init>`(v0, v1) @signature `Lb0/b$k;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a07b8.  `@@b0.b.o` @type ^`b0.b$r` := v0 @kind object;
  #L2a07bc.  v0:= new `b0.b$l`;
  #L2a07c0.  v1:= "rotationX" @kind object;
  #L2a07c4.  call `<init>`(v0, v1) @signature `Lb0/b$l;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a07ca.  `@@b0.b.p` @type ^`b0.b$r` := v0 @kind object;
  #L2a07ce.  v0:= new `b0.b$m`;
  #L2a07d2.  v1:= "rotationY" @kind object;
  #L2a07d6.  call `<init>`(v0, v1) @signature `Lb0/b$m;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a07dc.  `@@b0.b.q` @type ^`b0.b$r` := v0 @kind object;
  #L2a07e0.  v0:= new `b0.b$n`;
  #L2a07e4.  v1:= "x" @kind object;
  #L2a07e8.  call `<init>`(v0, v1) @signature `Lb0/b$n;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a07ee.  v0:= new `b0.b$a`;
  #L2a07f2.  v1:= "y" @kind object;
  #L2a07f6.  call `<init>`(v0, v1) @signature `Lb0/b$a;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a07fc.  v0:= new `b0.b$b`;
  #L2a0800.  v1:= "z" @kind object;
  #L2a0804.  call `<init>`(v0, v1) @signature `Lb0/b$b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a080a.  v0:= new `b0.b$c`;
  #L2a080e.  v1:= "alpha" @kind object;
  #L2a0812.  call `<init>`(v0, v1) @signature `Lb0/b$c;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a0818.  `@@b0.b.r` @type ^`b0.b$r` := v0 @kind object;
  #L2a081c.  v0:= new `b0.b$d`;
  #L2a0820.  v1:= "scrollX" @kind object;
  #L2a0824.  call `<init>`(v0, v1) @signature `Lb0/b$d;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a082a.  v0:= new `b0.b$e`;
  #L2a082e.  v1:= "scrollY" @kind object;
  #L2a0832.  call `<init>`(v0, v1) @signature `Lb0/b$e;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a0838.  return @kind void;
}
procedure `void` `<init>`(`b0.b` v2 @kind this, `java.lang.Object` v3 @kind object, `b0.c` v4 @kind object) @signature `Lb0/b;.<init>:(Ljava/lang/Object;Lb0/c;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2a084c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2a0852.  v0:= 0I;
  #L2a0854.  v2.`b0.b.a` @type ^`float` := v0;
  #L2a0858.  v0:= 2139095039I;
  #L2a085e.  v2.`b0.b.b` @type ^`float` := v0;
  #L2a0862.  v1:= 0I;
  #L2a0864.  v2.`b0.b.c` @type ^`boolean` := v1 @kind boolean;
  #L2a0868.  v2.`b0.b.f` @type ^`boolean` := v1 @kind boolean;
  #L2a086c.  v2.`b0.b.g` @type ^`float` := v0;
  #L2a0870.  v0:= -v0 @kind float;
  #L2a0872.  v2.`b0.b.h` @type ^`float` := v0;
  #L2a0876.  v0:= 0L;
  #L2a087a.  v2.`b0.b.i` @type ^`long` := v0 @kind wide;
  #L2a087e.  v0:= new `java.util.ArrayList`;
  #L2a0882.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2a0888.  v2.`b0.b.k` @type ^`java.util.ArrayList` := v0 @kind object;
  #L2a088c.  v0:= new `java.util.ArrayList`;
  #L2a0890.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2a0896.  v2.`b0.b.l` @type ^`java.util.ArrayList` := v0 @kind object;
  #L2a089a.  v2.`b0.b.d` @type ^`java.lang.Object` := v3 @kind object;
  #L2a089e.  v2.`b0.b.e` @type ^`b0.c` := v4 @kind object;
  #L2a08a2.  v3:= `@@b0.b.o` @type ^`b0.b$r` @kind object;
  #L2a08a6.  if v4 == v3 then goto L2a08f0;
  #L2a08aa.  v3:= `@@b0.b.p` @type ^`b0.b$r` @kind object;
  #L2a08ae.  if v4 == v3 then goto L2a08f0;
  #L2a08b2.  v3:= `@@b0.b.q` @type ^`b0.b$r` @kind object;
  #L2a08b6.  if v4 != v3 then goto L2a08bc;
  #L2a08ba.  goto L2a08f0;
  #L2a08bc.  v3:= `@@b0.b.r` @type ^`b0.b$r` @kind object;
  #L2a08c0.  v0:= 0.00390625F;
  #L2a08c4.  if v4 != v3 then goto L2a08ce;
  #L2a08c8.  v2.`b0.b.j` @type ^`float` := v0;
  #L2a08cc.  goto L2a08fa;
  #L2a08ce.  v3:= `@@b0.b.m` @type ^`b0.b$r` @kind object;
  #L2a08d2.  if v4 == v3 then goto L2a08ea;
  #L2a08d6.  v3:= `@@b0.b.n` @type ^`b0.b$r` @kind object;
  #L2a08da.  if v4 != v3 then goto L2a08e0;
  #L2a08de.  goto L2a08ea;
  #L2a08e0.  v3:= 1.0F;
  #L2a08e4.  v2.`b0.b.j` @type ^`float` := v3;
  #L2a08e8.  goto L2a08fa;
  #L2a08ea.  v2.`b0.b.j` @type ^`float` := v0;
  #L2a08ee.  goto L2a08fa;
  #L2a08f0.  v3:= 1036831949I;
  #L2a08f6.  v2.`b0.b.j` @type ^`float` := v3;
  #L2a08fa.  return @kind void;
}
procedure `void` `c`(`b0.b` v4 @kind this, `boolean` v5 ) @signature `Lb0/b;.c:(Z)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2a0954.  v0:= 0I;
  #L2a0956.  v4.`b0.b.f` @type ^`boolean` := v0 @kind boolean;
  #L2a095a.  call temp:= `d`() @signature `Lb0/a;.d:()Lb0/a;` @kind static;
  #L2a0960.  v1:= temp @kind object;
  #L2a0962.  call `g`(v1, v4) @signature `Lb0/a;.g:(Lb0/a$b;)V` @kind virtual;
  #L2a0968.  v1:= 0L;
  #L2a096c.  v4.`b0.b.i` @type ^`long` := v1 @kind wide;
  #L2a0970.  v4.`b0.b.c` @type ^`boolean` := v0 @kind boolean;
  #L2a0974.  v1:= v4.`b0.b.k` @type ^`java.util.ArrayList` @kind object;
  #L2a0978.  call temp:= `size`(v1) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L2a097e.  v1:= temp;
  #L2a0980.  if v0 >= v1 then goto L2a09b8;
  #L2a0984.  v1:= v4.`b0.b.k` @type ^`java.util.ArrayList` @kind object;
  #L2a0988.  call temp:= `get`(v1, v0) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L2a098e.  v1:= temp @kind object;
  #L2a0990.  if v1 == 0 then goto L2a09b2;
  #L2a0994.  v1:= v4.`b0.b.k` @type ^`java.util.ArrayList` @kind object;
  #L2a0998.  call temp:= `get`(v1, v0) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L2a099e.  v1:= temp @kind object;
  #L2a09a0.  v1:= (`b0.b$p`) v1 @kind object;
  #L2a09a4.  v2:= v4.`b0.b.b` @type ^`float`;
  #L2a09a8.  v3:= v4.`b0.b.a` @type ^`float`;
  #L2a09ac.  call `a`(v1, v4, v5, v2, v3) @signature `Lb0/b$p;.a:(Lb0/b;ZFF)V` @kind interface;
  #L2a09b2.  v0:= v0 + 1;
  #L2a09b6.  goto L2a0974;
  #L2a09b8.  v5:= v4.`b0.b.k` @type ^`java.util.ArrayList` @kind object;
  #L2a09bc.  call `g`(v5) @signature `Lb0/b;.g:(Ljava/util/ArrayList;)V` @kind static;
  #L2a09c2.  return @kind void;
}
procedure `float` `d`(`b0.b` v2 @kind this) @signature `Lb0/b;.d:()F` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L2a0718.  v0:= v2.`b0.b.e` @type ^`b0.c` @kind object;
  #L2a071c.  v1:= v2.`b0.b.d` @type ^`java.lang.Object` @kind object;
  #L2a0720.  call temp:= `a`(v0, v1) @signature `Lb0/c;.a:(Ljava/lang/Object;)F` @kind virtual;
  #L2a0726.  v0:= temp;
  #L2a0728.  return v0;
}
procedure `void` `g`(`java.util.ArrayList` v2 @kind object) @signature `Lb0/b;.g:(Ljava/util/ArrayList;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L2a09d4.  call temp:= `size`(v2) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L2a09da.  v0:= temp;
  #L2a09dc.  v0:= v0 + -1;
  #L2a09e0.  if v0 < 0 then goto L2a09fc;
  #L2a09e4.  call temp:= `get`(v2, v0) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L2a09ea.  v1:= temp @kind object;
  #L2a09ec.  if v1 != 0 then goto L2a09f6;
  #L2a09f0.  call temp:= `remove`(v2, v0) @signature `Ljava/util/ArrayList;.remove:(I)Ljava/lang/Object;` @kind virtual;
  #L2a09f6.  v0:= v0 + -1;
  #L2a09fa.  goto L2a09e0;
  #L2a09fc.  return @kind void;
}
procedure `void` `k`(`b0.b` v3 @kind this) @signature `Lb0/b;.k:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2a0ac4.  v0:= v3.`b0.b.f` @type ^`boolean` @kind boolean;
  #L2a0ac8.  if v0 != 0 then goto L2a0b26;
  #L2a0acc.  v0:= 1I;
  #L2a0ace.  v3.`b0.b.f` @type ^`boolean` := v0 @kind boolean;
  #L2a0ad2.  v0:= v3.`b0.b.c` @type ^`boolean` @kind boolean;
  #L2a0ad6.  if v0 != 0 then goto L2a0ae6;
  #L2a0ada.  call temp:= `d`(v3) @signature `Lb0/b;.d:()F` @kind direct;
  #L2a0ae0.  v0:= temp;
  #L2a0ae2.  v3.`b0.b.b` @type ^`float` := v0;
  #L2a0ae6.  v0:= v3.`b0.b.b` @type ^`float`;
  #L2a0aea.  v1:= v3.`b0.b.g` @type ^`float`;
  #L2a0aee.  v1:= fcmpl(v0, v1);
  #L2a0af2.  if v1 > 0 then goto L2a0b16;
  #L2a0af6.  v1:= v3.`b0.b.h` @type ^`float`;
  #L2a0afa.  v0:= fcmpg(v0, v1);
  #L2a0afe.  if v0 < 0 then goto L2a0b16;
  #L2a0b02.  call temp:= `d`() @signature `Lb0/a;.d:()Lb0/a;` @kind static;
  #L2a0b08.  v0:= temp @kind object;
  #L2a0b0a.  v1:= 0L;
  #L2a0b0e.  call `a`(v0, v3, v1) @signature `Lb0/a;.a:(Lb0/a$b;J)V` @kind virtual;
  #L2a0b14.  goto L2a0b26;
  #L2a0b16.  v0:= new `java.lang.IllegalArgumentException`;
  #L2a0b1a.  v1:= "Starting value need to be in between min value and max value" @kind object;
  #L2a0b1e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a0b24.  throw v0;
  #L2a0b26.  return @kind void;
}
procedure `boolean` `a`(`b0.b` v6 @kind this, `long` v7 ) @signature `Lb0/b;.a:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2a0688.  v0:= v6.`b0.b.i` @type ^`long` @kind wide;
  #L2a068c.  v2:= 0I;
  #L2a068e.  v3:= 0L;
  #L2a0692.  v5:= lcmp(v0, v3);
  #L2a0696.  if v5 != 0 then goto L2a06aa;
  #L2a069a.  v6.`b0.b.i` @type ^`long` := v7 @kind wide;
  #L2a069e.  v7:= v6.`b0.b.b` @type ^`float`;
  #L2a06a2.  call `h`(v6, v7) @signature `Lb0/b;.h:(F)V` @kind virtual;
  #L2a06a8.  return v2;
  #L2a06aa.  v0:= v7 - v0 @kind long;
  #L2a06ae.  v6.`b0.b.i` @type ^`long` := v7 @kind wide;
  #L2a06b2.  call temp:= `l`(v6, v0) @signature `Lb0/b;.l:(J)Z` @kind virtual;
  #L2a06b8.  v7:= temp;
  #L2a06ba.  v8:= v6.`b0.b.b` @type ^`float`;
  #L2a06be.  v0:= v6.`b0.b.g` @type ^`float`;
  #L2a06c2.  call temp:= `min`(v8, v0) @signature `Ljava/lang/Math;.min:(FF)F` @kind static;
  #L2a06c8.  v8:= temp;
  #L2a06ca.  v6.`b0.b.b` @type ^`float` := v8;
  #L2a06ce.  v0:= v6.`b0.b.h` @type ^`float`;
  #L2a06d2.  call temp:= `max`(v8, v0) @signature `Ljava/lang/Math;.max:(FF)F` @kind static;
  #L2a06d8.  v8:= temp;
  #L2a06da.  v6.`b0.b.b` @type ^`float` := v8;
  #L2a06de.  call `h`(v6, v8) @signature `Lb0/b;.h:(F)V` @kind virtual;
  #L2a06e4.  if v7 == 0 then goto L2a06ee;
  #L2a06e8.  call `c`(v6, v2) @signature `Lb0/b;.c:(Z)V` @kind direct;
  #L2a06ee.  return v7;
}
procedure `void` `b`(`b0.b` v2 @kind this) @signature `Lb0/b;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2a090c.  call temp:= `myLooper`() @signature `Landroid/os/Looper;.myLooper:()Landroid/os/Looper;` @kind static;
  #L2a0912.  v0:= temp @kind object;
  #L2a0914.  call temp:= `getMainLooper`() @signature `Landroid/os/Looper;.getMainLooper:()Landroid/os/Looper;` @kind static;
  #L2a091a.  v1:= temp @kind object;
  #L2a091c.  if v0 != v1 then goto L2a0932;
  #L2a0920.  v0:= v2.`b0.b.f` @type ^`boolean` @kind boolean;
  #L2a0924.  if v0 == 0 then goto L2a0930;
  #L2a0928.  v0:= 1I;
  #L2a092a.  call `c`(v2, v0) @signature `Lb0/b;.c:(Z)V` @kind direct;
  #L2a0930.  return @kind void;
  #L2a0932.  v0:= new `android.util.AndroidRuntimeException`;
  #L2a0936.  v1:= "Animations may only be canceled on the main thread" @kind object;
  #L2a093a.  call `<init>`(v0, v1) @signature `Landroid/util/AndroidRuntimeException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a0940.  throw v0;
}
procedure `float` `e`(`b0.b` v2 @kind this) @signature `Lb0/b;.e:()F` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2a073c.  v0:= v2.`b0.b.j` @type ^`float`;
  #L2a0740.  v1:= 0.75F;
  #L2a0744.  v0:= v0 * v1 @kind float;
  #L2a0748.  return v0;
}
procedure `boolean` `f`(`b0.b` v1 @kind this) @signature `Lb0/b;.f:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a0700.  v0:= v1.`b0.b.f` @type ^`boolean` @kind boolean;
  #L2a0704.  return v0;
}
procedure `void` `h`(`b0.b` v3 @kind this, `float` v4 ) @signature `Lb0/b;.h:(F)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L2a0a10.  v0:= v3.`b0.b.e` @type ^`b0.c` @kind object;
  #L2a0a14.  v1:= v3.`b0.b.d` @type ^`java.lang.Object` @kind object;
  #L2a0a18.  call `b`(v0, v1, v4) @signature `Lb0/c;.b:(Ljava/lang/Object;F)V` @kind virtual;
  #L2a0a1e.  v4:= 0I;
  #L2a0a20.  v0:= v3.`b0.b.l` @type ^`java.util.ArrayList` @kind object;
  #L2a0a24.  call temp:= `size`(v0) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L2a0a2a.  v0:= temp;
  #L2a0a2c.  if v4 >= v0 then goto L2a0a64;
  #L2a0a30.  v0:= v3.`b0.b.l` @type ^`java.util.ArrayList` @kind object;
  #L2a0a34.  call temp:= `get`(v0, v4) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L2a0a3a.  v0:= temp @kind object;
  #L2a0a3c.  if v0 == 0 then goto L2a0a5e;
  #L2a0a40.  v0:= v3.`b0.b.l` @type ^`java.util.ArrayList` @kind object;
  #L2a0a44.  call temp:= `get`(v0, v4) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L2a0a4a.  v0:= temp @kind object;
  #L2a0a4c.  v0:= (`b0.b$q`) v0 @kind object;
  #L2a0a50.  v1:= v3.`b0.b.b` @type ^`float`;
  #L2a0a54.  v2:= v3.`b0.b.a` @type ^`float`;
  #L2a0a58.  call `a`(v0, v3, v1, v2) @signature `Lb0/b$q;.a:(Lb0/b;FF)V` @kind interface;
  #L2a0a5e.  v4:= v4 + 1;
  #L2a0a62.  goto L2a0a20;
  #L2a0a64.  v4:= v3.`b0.b.l` @type ^`java.util.ArrayList` @kind object;
  #L2a0a68.  call `g`(v4) @signature `Lb0/b;.g:(Ljava/util/ArrayList;)V` @kind static;
  #L2a0a6e.  return @kind void;
}
procedure `b0.b` `i`(`b0.b` v0 @kind this, `float` v1 ) @signature `Lb0/b;.i:(F)Lb0/b;` @AccessFlag PUBLIC {
    temp;

  #L2a066c.  v0.`b0.b.b` @type ^`float` := v1;
  #L2a0670.  v1:= 1I;
  #L2a0672.  v0.`b0.b.c` @type ^`boolean` := v1 @kind boolean;
  #L2a0676.  return v0 @kind object;
}
procedure `void` `j`(`b0.b` v2 @kind this) @signature `Lb0/b;.j:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2a0a80.  call temp:= `myLooper`() @signature `Landroid/os/Looper;.myLooper:()Landroid/os/Looper;` @kind static;
  #L2a0a86.  v0:= temp @kind object;
  #L2a0a88.  call temp:= `getMainLooper`() @signature `Landroid/os/Looper;.getMainLooper:()Landroid/os/Looper;` @kind static;
  #L2a0a8e.  v1:= temp @kind object;
  #L2a0a90.  if v0 != v1 then goto L2a0aa4;
  #L2a0a94.  v0:= v2.`b0.b.f` @type ^`boolean` @kind boolean;
  #L2a0a98.  if v0 != 0 then goto L2a0aa2;
  #L2a0a9c.  call `k`(v2) @signature `Lb0/b;.k:()V` @kind direct;
  #L2a0aa2.  return @kind void;
  #L2a0aa4.  v0:= new `android.util.AndroidRuntimeException`;
  #L2a0aa8.  v1:= "Animations may only be started on the main thread" @kind object;
  #L2a0aac.  call `<init>`(v0, v1) @signature `Landroid/util/AndroidRuntimeException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a0ab2.  throw v0;
}
procedure `boolean` `l`(`long` v0 ) @signature `Lb0/b;.l:(J)Z` @AccessFlag ABSTRACT {

  # return;
}
