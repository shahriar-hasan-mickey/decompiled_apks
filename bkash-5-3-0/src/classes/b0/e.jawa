record `b0.e` @kind class @AccessFlag PUBLIC_FINAL {
  `double` `b0.e.a` @AccessFlag ;
  `double` `b0.e.b` @AccessFlag ;
  `boolean` `b0.e.c` @AccessFlag PRIVATE;
  `double` `b0.e.d` @AccessFlag PRIVATE;
  `double` `b0.e.e` @AccessFlag PRIVATE;
  `double` `b0.e.f` @AccessFlag PRIVATE;
  `double` `b0.e.g` @AccessFlag PRIVATE;
  `double` `b0.e.h` @AccessFlag PRIVATE;
  `double` `b0.e.i` @AccessFlag PRIVATE;
  `b0.b$o` `b0.e.j` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`b0.e` v2 @kind this) @signature `Lb0/e;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2a110c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2a1112.  v0:= 1500.0D;
  #L2a111c.  call temp:= `sqrt`(v0) @signature `Ljava/lang/Math;.sqrt:(D)D` @kind static;
  #L2a1122.  v0:= temp @kind wide;
  #L2a1124.  v2.`b0.e.a` @type ^`double` := v0 @kind wide;
  #L2a1128.  v0:= 0.5D;
  #L2a112c.  v2.`b0.e.b` @type ^`double` := v0 @kind wide;
  #L2a1130.  v0:= 0I;
  #L2a1132.  v2.`b0.e.c` @type ^`boolean` := v0 @kind boolean;
  #L2a1136.  v0:= 1.7976931348623157E308D;
  #L2a1140.  v2.`b0.e.i` @type ^`double` := v0 @kind wide;
  #L2a1144.  v0:= new `b0.b$o`;
  #L2a1148.  call `<init>`(v0) @signature `Lb0/b$o;.<init>:()V` @kind direct;
  #L2a114e.  v2.`b0.e.j` @type ^`b0.b$o` := v0 @kind object;
  #L2a1152.  return @kind void;
}
procedure `void` `<init>`(`b0.e` v2 @kind this, `float` v3 ) @signature `Lb0/e;.<init>:(F)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2a1164.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2a116a.  v0:= 1500.0D;
  #L2a1174.  call temp:= `sqrt`(v0) @signature `Ljava/lang/Math;.sqrt:(D)D` @kind static;
  #L2a117a.  v0:= temp @kind wide;
  #L2a117c.  v2.`b0.e.a` @type ^`double` := v0 @kind wide;
  #L2a1180.  v0:= 0.5D;
  #L2a1184.  v2.`b0.e.b` @type ^`double` := v0 @kind wide;
  #L2a1188.  v0:= 0I;
  #L2a118a.  v2.`b0.e.c` @type ^`boolean` := v0 @kind boolean;
  #L2a118e.  v0:= 1.7976931348623157E308D;
  #L2a1198.  v2.`b0.e.i` @type ^`double` := v0 @kind wide;
  #L2a119c.  v0:= new `b0.b$o`;
  #L2a11a0.  call `<init>`(v0) @signature `Lb0/b$o;.<init>:()V` @kind direct;
  #L2a11a6.  v2.`b0.e.j` @type ^`b0.b$o` := v0 @kind object;
  #L2a11aa.  v0:= (`double`) v3 @kind f2d;
  #L2a11ac.  v2.`b0.e.i` @type ^`double` := v0 @kind wide;
  #L2a11b0.  return @kind void;
}
procedure `void` `b`(`b0.e` v8 @kind this) @signature `Lb0/e;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2a11c4.  v0:= v8.`b0.e.c` @type ^`boolean` @kind boolean;
  #L2a11c8.  if v0 == 0 then goto L2a11ce;
  #L2a11cc.  return @kind void;
  #L2a11ce.  v0:= v8.`b0.e.i` @type ^`double` @kind wide;
  #L2a11d2.  v2:= 1.7976931348623157E308D;
  #L2a11dc.  v4:= dcmpl(v0, v2);
  #L2a11e0.  if v4 == 0 then goto L2a1274;
  #L2a11e4.  v0:= v8.`b0.e.b` @type ^`double` @kind wide;
  #L2a11e8.  v2:= 1.0D;
  #L2a11ec.  v4:= dcmpl(v0, v2);
  #L2a11f0.  if v4 <= 0 then goto L2a123e;
  #L2a11f4.  v4:= -v0 @kind double;
  #L2a11f6.  v6:= v8.`b0.e.a` @type ^`double` @kind wide;
  #L2a11fa.  v4:= v4 * v6 @kind double;
  #L2a11fe.  v0:= v0 * v0 @kind double;
  #L2a1202.  v0:= v0 - v2 @kind double;
  #L2a1204.  call temp:= `sqrt`(v0) @signature `Ljava/lang/Math;.sqrt:(D)D` @kind static;
  #L2a120a.  v0:= temp @kind wide;
  #L2a120c.  v6:= v6 * v0 @kind double;
  #L2a1210.  v4:= v4 + v6 @kind double;
  #L2a1212.  v8.`b0.e.f` @type ^`double` := v4 @kind wide;
  #L2a1216.  v0:= v8.`b0.e.b` @type ^`double` @kind wide;
  #L2a121a.  v4:= -v0 @kind double;
  #L2a121c.  v6:= v8.`b0.e.a` @type ^`double` @kind wide;
  #L2a1220.  v4:= v4 * v6 @kind double;
  #L2a1224.  v0:= v0 * v0 @kind double;
  #L2a1228.  v0:= v0 - v2 @kind double;
  #L2a122a.  call temp:= `sqrt`(v0) @signature `Ljava/lang/Math;.sqrt:(D)D` @kind static;
  #L2a1230.  v0:= temp @kind wide;
  #L2a1232.  v6:= v6 * v0 @kind double;
  #L2a1236.  v4:= v4 - v6 @kind double;
  #L2a1238.  v8.`b0.e.g` @type ^`double` := v4 @kind wide;
  #L2a123c.  goto L2a126c;
  #L2a123e.  v4:= 0L;
  #L2a1242.  v6:= dcmpl(v0, v4);
  #L2a1246.  if v6 < 0 then goto L2a126c;
  #L2a124a.  v4:= dcmpg(v0, v2);
  #L2a124e.  if v4 >= 0 then goto L2a126c;
  #L2a1252.  v4:= v8.`b0.e.a` @type ^`double` @kind wide;
  #L2a1256.  v0:= v0 * v0 @kind double;
  #L2a125a.  v2:= v2 - v0 @kind double;
  #L2a125c.  call temp:= `sqrt`(v2) @signature `Ljava/lang/Math;.sqrt:(D)D` @kind static;
  #L2a1262.  v0:= temp @kind wide;
  #L2a1264.  v4:= v4 * v0 @kind double;
  #L2a1268.  v8.`b0.e.h` @type ^`double` := v4 @kind wide;
  #L2a126c.  v0:= 1I;
  #L2a126e.  v8.`b0.e.c` @type ^`boolean` := v0 @kind boolean;
  #L2a1272.  return @kind void;
  #L2a1274.  v0:= new `java.lang.IllegalStateException`;
  #L2a1278.  v1:= "Error: Final position of the spring must be set before the animation starts" @kind object;
  #L2a127c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a1282.  throw v0;
}
procedure `float` `a`(`b0.e` v2 @kind this) @signature `Lb0/e;.a:()F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2a10f4.  v0:= v2.`b0.e.i` @type ^`double` @kind wide;
  #L2a10f8.  v0:= (`float`) v0 @kind d2f;
  #L2a10fa.  return v0;
}
procedure `boolean` `c`(`b0.e` v4 @kind this, `float` v5 , `float` v6 ) @signature `Lb0/e;.c:(FF)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2a10a4.  call temp:= `abs`(v6) @signature `Ljava/lang/Math;.abs:(F)F` @kind static;
  #L2a10aa.  v6:= temp;
  #L2a10ac.  v0:= (`double`) v6 @kind f2d;
  #L2a10ae.  v2:= v4.`b0.e.e` @type ^`double` @kind wide;
  #L2a10b2.  v6:= dcmpg(v0, v2);
  #L2a10b6.  if v6 >= 0 then goto L2a10de;
  #L2a10ba.  call temp:= `a`(v4) @signature `Lb0/e;.a:()F` @kind virtual;
  #L2a10c0.  v6:= temp;
  #L2a10c2.  v5:= v5 - v6 @kind float;
  #L2a10c4.  call temp:= `abs`(v5) @signature `Ljava/lang/Math;.abs:(F)F` @kind static;
  #L2a10ca.  v5:= temp;
  #L2a10cc.  v5:= (`double`) v5 @kind f2d;
  #L2a10ce.  v0:= v4.`b0.e.d` @type ^`double` @kind wide;
  #L2a10d2.  v2:= dcmpg(v5, v0);
  #L2a10d6.  if v2 >= 0 then goto L2a10de;
  #L2a10da.  v5:= 1I;
  #L2a10dc.  return v5;
  #L2a10de.  v5:= 0I;
  #L2a10e0.  return v5;
}
procedure `b0.e` `d`(`b0.e` v2 @kind this, `float` v3 ) @signature `Lb0/e;.d:(F)Lb0/e;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2a1014.  v0:= 0I;
  #L2a1016.  v0:= fcmpg(v3, v0);
  #L2a101a.  if v0 < 0 then goto L2a102c;
  #L2a101e.  v0:= (`double`) v3 @kind f2d;
  #L2a1020.  v2.`b0.e.b` @type ^`double` := v0 @kind wide;
  #L2a1024.  v3:= 0I;
  #L2a1026.  v2.`b0.e.c` @type ^`boolean` := v3 @kind boolean;
  #L2a102a.  return v2 @kind object;
  #L2a102c.  v3:= new `java.lang.IllegalArgumentException`;
  #L2a1030.  v0:= "Damping ratio must be non-negative" @kind object;
  #L2a1034.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a103a.  throw v3;
}
procedure `b0.e` `e`(`b0.e` v2 @kind this, `float` v3 ) @signature `Lb0/e;.e:(F)Lb0/e;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2a104c.  v0:= (`double`) v3 @kind f2d;
  #L2a104e.  v2.`b0.e.i` @type ^`double` := v0 @kind wide;
  #L2a1052.  return v2 @kind object;
}
procedure `b0.e` `f`(`b0.e` v2 @kind this, `float` v3 ) @signature `Lb0/e;.f:(F)Lb0/e;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2a1064.  v0:= 0I;
  #L2a1066.  v0:= fcmpg(v3, v0);
  #L2a106a.  if v0 <= 0 then goto L2a1084;
  #L2a106e.  v0:= (`double`) v3 @kind f2d;
  #L2a1070.  call temp:= `sqrt`(v0) @signature `Ljava/lang/Math;.sqrt:(D)D` @kind static;
  #L2a1076.  v0:= temp @kind wide;
  #L2a1078.  v2.`b0.e.a` @type ^`double` := v0 @kind wide;
  #L2a107c.  v3:= 0I;
  #L2a107e.  v2.`b0.e.c` @type ^`boolean` := v3 @kind boolean;
  #L2a1082.  return v2 @kind object;
  #L2a1084.  v3:= new `java.lang.IllegalArgumentException`;
  #L2a1088.  v0:= "Spring stiffness constant must be positive." @kind object;
  #L2a108c.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a1092.  throw v3;
}
procedure `void` `g`(`b0.e` v2 @kind this, `double` v3 ) @signature `Lb0/e;.g:(D)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2a1294.  call temp:= `abs`(v3) @signature `Ljava/lang/Math;.abs:(D)D` @kind static;
  #L2a129a.  v3:= temp @kind wide;
  #L2a129c.  v2.`b0.e.d` @type ^`double` := v3 @kind wide;
  #L2a12a0.  v0:= 62.5D;
  #L2a12aa.  v3:= v3 * v0 @kind double;
  #L2a12ae.  v2.`b0.e.e` @type ^`double` := v3 @kind wide;
  #L2a12b2.  return @kind void;
}
procedure `b0.b$o` `h`(`b0.e` v15 @kind this, `double` v16 , `double` v18 , `long` v20 ) @signature `Lb0/e;.h:(DDJ)Lb0/b$o;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L2a0dfc.  v0:= v15 @kind object;
  #L2a0dfe.  call `b`(v15) @signature `Lb0/e;.b:()V` @kind direct;
  #L2a0e04.  v1:= v20 @kind wide;
  #L2a0e08.  v1:= (`double`) v1 @kind l2d;
  #L2a0e0a.  v3:= 1000.0D;
  #L2a0e14.  v1:= v1 / v3 @kind double;
  #L2a0e16.  v3:= v0.`b0.e.i` @type ^`double` @kind wide;
  #L2a0e1a.  v3:= v16 - v3 @kind double;
  #L2a0e1e.  v5:= v0.`b0.e.b` @type ^`double` @kind wide;
  #L2a0e22.  v7:= 1.0D;
  #L2a0e26.  v9:= 2.718281828459045D;
  #L2a0e30.  v11:= dcmpl(v5, v7);
  #L2a0e34.  if v11 <= 0 then goto L2a0ebc;
  #L2a0e38.  v5:= v0.`b0.e.g` @type ^`double` @kind wide;
  #L2a0e3c.  v7:= v5 * v3 @kind double;
  #L2a0e40.  v7:= v7 - v18 @kind double;
  #L2a0e44.  v11:= v0.`b0.e.f` @type ^`double` @kind wide;
  #L2a0e48.  v13:= v5 - v11 @kind double;
  #L2a0e4c.  v7:= v7 / v13 @kind double;
  #L2a0e4e.  v7:= v3 - v7 @kind double;
  #L2a0e52.  v3:= v3 * v5 @kind double;
  #L2a0e56.  v3:= v3 - v18 @kind double;
  #L2a0e5a.  v11:= v5 - v11 @kind double;
  #L2a0e5e.  v3:= v3 / v11 @kind double;
  #L2a0e60.  v5:= v5 * v1 @kind double;
  #L2a0e64.  call temp:= `pow`(v9, v5) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L2a0e6a.  v5:= temp @kind wide;
  #L2a0e6c.  v5:= v5 * v7 @kind double;
  #L2a0e70.  v11:= v0.`b0.e.f` @type ^`double` @kind wide;
  #L2a0e74.  v11:= v11 * v1 @kind double;
  #L2a0e78.  call temp:= `pow`(v9, v11) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L2a0e7e.  v11:= temp @kind wide;
  #L2a0e80.  v11:= v11 * v3 @kind double;
  #L2a0e84.  v5:= v5 + v11 @kind double;
  #L2a0e86.  v11:= v0.`b0.e.g` @type ^`double` @kind wide;
  #L2a0e8a.  v7:= v7 * v11 @kind double;
  #L2a0e8e.  v11:= v11 * v1 @kind double;
  #L2a0e92.  call temp:= `pow`(v9, v11) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L2a0e98.  v11:= temp @kind wide;
  #L2a0e9a.  v7:= v7 * v11 @kind double;
  #L2a0e9e.  v11:= v0.`b0.e.f` @type ^`double` @kind wide;
  #L2a0ea2.  v3:= v3 * v11 @kind double;
  #L2a0ea6.  v11:= v11 * v1 @kind double;
  #L2a0eaa.  call temp:= `pow`(v9, v11) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L2a0eb0.  v1:= temp @kind wide;
  #L2a0eb2.  v3:= v3 * v1 @kind double;
  #L2a0eb6.  v7:= v7 + v3 @kind double;
  #L2a0eb8.  goto L2a0fea;
  #L2a0ebc.  v11:= dcmpl(v5, v7);
  #L2a0ec0.  if v11 != 0 then goto L2a0f1e;
  #L2a0ec4.  v5:= v0.`b0.e.a` @type ^`double` @kind wide;
  #L2a0ec8.  v7:= v5 * v3 @kind double;
  #L2a0ecc.  v7:= v18 + v7 @kind double;
  #L2a0ed0.  v11:= v7 * v1 @kind double;
  #L2a0ed4.  v3:= v3 + v11 @kind double;
  #L2a0ed6.  v5:= -v5 @kind double;
  #L2a0ed8.  v5:= v5 * v1 @kind double;
  #L2a0edc.  call temp:= `pow`(v9, v5) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L2a0ee2.  v5:= temp @kind wide;
  #L2a0ee4.  v5:= v5 * v3 @kind double;
  #L2a0ee8.  v11:= v0.`b0.e.a` @type ^`double` @kind wide;
  #L2a0eec.  v11:= -v11 @kind double;
  #L2a0eee.  v11:= v11 * v1 @kind double;
  #L2a0ef2.  call temp:= `pow`(v9, v11) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L2a0ef8.  v11:= temp @kind wide;
  #L2a0efa.  v3:= v3 * v11 @kind double;
  #L2a0efe.  v11:= v0.`b0.e.a` @type ^`double` @kind wide;
  #L2a0f02.  v13:= -v11 @kind double;
  #L2a0f04.  v3:= v3 * v13 @kind double;
  #L2a0f08.  v11:= -v11 @kind double;
  #L2a0f0a.  v11:= v11 * v1 @kind double;
  #L2a0f0e.  call temp:= `pow`(v9, v11) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L2a0f14.  v1:= temp @kind wide;
  #L2a0f16.  v7:= v7 * v1 @kind double;
  #L2a0f1a.  v7:= v7 + v3 @kind double;
  #L2a0f1c.  goto L2a0fea;
  #L2a0f1e.  v11:= v0.`b0.e.h` @type ^`double` @kind wide;
  #L2a0f22.  v7:= v7 / v11 @kind double;
  #L2a0f24.  v11:= v0.`b0.e.a` @type ^`double` @kind wide;
  #L2a0f28.  v13:= v5 * v11 @kind double;
  #L2a0f2c.  v13:= v13 * v3 @kind double;
  #L2a0f30.  v13:= v13 + v18 @kind double;
  #L2a0f34.  v7:= v7 * v13 @kind double;
  #L2a0f38.  v5:= -v5 @kind double;
  #L2a0f3a.  v5:= v5 * v11 @kind double;
  #L2a0f3e.  v5:= v5 * v1 @kind double;
  #L2a0f42.  call temp:= `pow`(v9, v5) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L2a0f48.  v5:= temp @kind wide;
  #L2a0f4a.  v11:= v0.`b0.e.h` @type ^`double` @kind wide;
  #L2a0f4e.  v11:= v11 * v1 @kind double;
  #L2a0f52.  call temp:= `cos`(v11) @signature `Ljava/lang/Math;.cos:(D)D` @kind static;
  #L2a0f58.  v11:= temp @kind wide;
  #L2a0f5a.  v11:= v11 * v3 @kind double;
  #L2a0f5e.  v13:= v0.`b0.e.h` @type ^`double` @kind wide;
  #L2a0f62.  v13:= v13 * v1 @kind double;
  #L2a0f66.  call temp:= `sin`(v13) @signature `Ljava/lang/Math;.sin:(D)D` @kind static;
  #L2a0f6c.  v13:= temp @kind wide;
  #L2a0f6e.  v13:= v13 * v7 @kind double;
  #L2a0f72.  v11:= v11 + v13 @kind double;
  #L2a0f74.  v5:= v5 * v11 @kind double;
  #L2a0f78.  v11:= v0.`b0.e.a` @type ^`double` @kind wide;
  #L2a0f7c.  v13:= -v11 @kind double;
  #L2a0f7e.  v13:= v13 * v5 @kind double;
  #L2a0f82.  v9:= v0.`b0.e.b` @type ^`double` @kind wide;
  #L2a0f86.  v13:= v13 * v9 @kind double;
  #L2a0f8a.  v9:= -v9 @kind double;
  #L2a0f8c.  v9:= v9 * v11 @kind double;
  #L2a0f90.  v9:= v9 * v1 @kind double;
  #L2a0f94.  v11:= 2.718281828459045D;
  #L2a0f9e.  call temp:= `pow`(v11, v9) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L2a0fa4.  v9:= temp @kind wide;
  #L2a0fa6.  v11:= v0.`b0.e.h` @type ^`double` @kind wide;
  #L2a0faa.  v16:= v5 @kind wide;
  #L2a0fae.  v5:= -v11 @kind double;
  #L2a0fb0.  v5:= v5 * v3 @kind double;
  #L2a0fb4.  v11:= v11 * v1 @kind double;
  #L2a0fb8.  call temp:= `sin`(v11) @signature `Ljava/lang/Math;.sin:(D)D` @kind static;
  #L2a0fbe.  v3:= temp @kind wide;
  #L2a0fc0.  v5:= v5 * v3 @kind double;
  #L2a0fc4.  v3:= v0.`b0.e.h` @type ^`double` @kind wide;
  #L2a0fc8.  v7:= v7 * v3 @kind double;
  #L2a0fcc.  v3:= v3 * v1 @kind double;
  #L2a0fd0.  call temp:= `cos`(v3) @signature `Ljava/lang/Math;.cos:(D)D` @kind static;
  #L2a0fd6.  v1:= temp @kind wide;
  #L2a0fd8.  v7:= v7 * v1 @kind double;
  #L2a0fdc.  v5:= v5 + v7 @kind double;
  #L2a0fde.  v9:= v9 * v5 @kind double;
  #L2a0fe2.  v7:= v13 + v9 @kind double;
  #L2a0fe6.  v5:= v16 @kind wide;
  #L2a0fea.  v1:= v0.`b0.e.j` @type ^`b0.b$o` @kind object;
  #L2a0fee.  v2:= v0.`b0.e.i` @type ^`double` @kind wide;
  #L2a0ff2.  v5:= v5 + v2 @kind double;
  #L2a0ff4.  v2:= (`float`) v5 @kind d2f;
  #L2a0ff6.  v1.`b0.b$o.a` @type ^`float` := v2;
  #L2a0ffa.  v2:= (`float`) v7 @kind d2f;
  #L2a0ffc.  v1.`b0.b$o.b` @type ^`float` := v2;
  #L2a1000.  return v1 @kind object;
}
