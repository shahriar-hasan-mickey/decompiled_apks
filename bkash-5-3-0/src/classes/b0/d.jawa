record `b0.d` @kind class @AccessFlag PUBLIC_FINAL extends `b0.b` @kind class {
  `b0.e` `b0.d.s` @AccessFlag PRIVATE;
  `float` `b0.d.t` @AccessFlag PRIVATE;
  `boolean` `b0.d.u` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`b0.d` v0 @kind this, `java.lang.Object` v1 @kind object, `b0.c` v2 @kind object) @signature `Lb0/d;.<init>:(Ljava/lang/Object;Lb0/c;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2a0cdc.  call `<init>`(v0, v1, v2) @signature `Lb0/b;.<init>:(Ljava/lang/Object;Lb0/c;)V` @kind direct;
  #L2a0ce2.  v1:= 0I;
  #L2a0ce4.  v0.`b0.d.s` @type ^`b0.e` := v1 @kind object;
  #L2a0ce8.  v1:= 2139095039I;
  #L2a0cee.  v0.`b0.d.t` @type ^`float` := v1;
  #L2a0cf2.  v1:= 0I;
  #L2a0cf4.  v0.`b0.d.u` @type ^`boolean` := v1 @kind boolean;
  #L2a0cf8.  return @kind void;
}
procedure `void` `o`(`b0.d` v5 @kind this) @signature `Lb0/d;.o:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2a0d58.  v0:= v5.`b0.d.s` @type ^`b0.e` @kind object;
  #L2a0d5c.  if v0 == 0 then goto L2a0da8;
  #L2a0d60.  call temp:= `a`(v0) @signature `Lb0/e;.a:()F` @kind virtual;
  #L2a0d66.  v0:= temp;
  #L2a0d68.  v0:= (`double`) v0 @kind f2d;
  #L2a0d6a.  v2:= v5.`b0.b.g` @type ^`float`;
  #L2a0d6e.  v2:= (`double`) v2 @kind f2d;
  #L2a0d70.  v4:= dcmpl(v0, v2);
  #L2a0d74.  if v4 > 0 then goto L2a0d98;
  #L2a0d78.  v2:= v5.`b0.b.h` @type ^`float`;
  #L2a0d7c.  v2:= (`double`) v2 @kind f2d;
  #L2a0d7e.  v4:= dcmpg(v0, v2);
  #L2a0d82.  if v4 < 0 then goto L2a0d88;
  #L2a0d86.  return @kind void;
  #L2a0d88.  v0:= new `java.lang.UnsupportedOperationException`;
  #L2a0d8c.  v1:= "Final position of the spring cannot be less than the min value." @kind object;
  #L2a0d90.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a0d96.  throw v0;
  #L2a0d98.  v0:= new `java.lang.UnsupportedOperationException`;
  #L2a0d9c.  v1:= "Final position of the spring cannot be greater than the max value." @kind object;
  #L2a0da0.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a0da6.  throw v0;
  #L2a0da8.  v0:= new `java.lang.UnsupportedOperationException`;
  #L2a0dac.  v1:= "Incomplete SpringAnimation: Either final position or a spring force needs to be set." @kind object;
  #L2a0db0.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a0db6.  throw v0;
}
procedure `void` `j`(`b0.d` v3 @kind this) @signature `Lb0/d;.j:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2a0dc8.  call `o`(v3) @signature `Lb0/d;.o:()V` @kind direct;
  #L2a0dce.  v0:= v3.`b0.d.s` @type ^`b0.e` @kind object;
  #L2a0dd2.  call temp:= `e`(v3) @signature `Lb0/b;.e:()F` @kind virtual;
  #L2a0dd8.  v1:= temp;
  #L2a0dda.  v1:= (`double`) v1 @kind f2d;
  #L2a0ddc.  call `g`(v0, v1) @signature `Lb0/e;.g:(D)V` @kind virtual;
  #L2a0de2.  call `j`(v3) @signature `Lb0/b;.j:()V` @kind super;
  #L2a0de8.  return @kind void;
}
procedure `boolean` `l`(`b0.d` v20 @kind this, `long` v21 ) @signature `Lb0/d;.l:(J)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;

  #L2a0b88.  v0:= v20 @kind object;
  #L2a0b8c.  v1:= v0.`b0.d.u` @type ^`boolean` @kind boolean;
  #L2a0b90.  v2:= 1I;
  #L2a0b92.  v3:= 0I;
  #L2a0b94.  v4:= 0I;
  #L2a0b96.  v5:= 2139095039I;
  #L2a0b9c.  if v1 == 0 then goto L2a0bd4;
  #L2a0ba0.  v1:= v0.`b0.d.t` @type ^`float`;
  #L2a0ba4.  v6:= fcmpl(v1, v5);
  #L2a0ba8.  if v6 == 0 then goto L2a0bba;
  #L2a0bac.  v6:= v0.`b0.d.s` @type ^`b0.e` @kind object;
  #L2a0bb0.  call temp:= `e`(v6, v1) @signature `Lb0/e;.e:(F)Lb0/e;` @kind virtual;
  #L2a0bb6.  v0.`b0.d.t` @type ^`float` := v5;
  #L2a0bba.  v1:= v0.`b0.d.s` @type ^`b0.e` @kind object;
  #L2a0bbe.  call temp:= `a`(v1) @signature `Lb0/e;.a:()F` @kind virtual;
  #L2a0bc4.  v1:= temp;
  #L2a0bc6.  v0.`b0.b.b` @type ^`float` := v1;
  #L2a0bca.  v0.`b0.b.a` @type ^`float` := v4;
  #L2a0bce.  v0.`b0.d.u` @type ^`boolean` := v3 @kind boolean;
  #L2a0bd2.  return v2;
  #L2a0bd4.  v1:= v0.`b0.d.t` @type ^`float`;
  #L2a0bd8.  v1:= fcmpl(v1, v5);
  #L2a0bdc.  if v1 == 0 then goto L2a0c4e;
  #L2a0be0.  v1:= v0.`b0.d.s` @type ^`b0.e` @kind object;
  #L2a0be4.  call temp:= `a`(v1) @signature `Lb0/e;.a:()F` @kind virtual;
  #L2a0bea.  v6:= v0.`b0.d.s` @type ^`b0.e` @kind object;
  #L2a0bee.  v1:= v0.`b0.b.b` @type ^`float`;
  #L2a0bf2.  v7:= (`double`) v1 @kind f2d;
  #L2a0bf4.  v1:= v0.`b0.b.a` @type ^`float`;
  #L2a0bf8.  v9:= (`double`) v1 @kind f2d;
  #L2a0bfa.  v11:= 2L;
  #L2a0bfe.  v18:= v21 / v11 @kind long;
  #L2a0c02.  v11:= v18 @kind wide;
  #L2a0c06.  call temp:= `h`(v6, v7, v9, v11) @signature `Lb0/e;.h:(DDJ)Lb0/b$o;` @kind virtual;
  #L2a0c0c.  v1:= temp @kind object;
  #L2a0c0e.  v6:= v0.`b0.d.s` @type ^`b0.e` @kind object;
  #L2a0c12.  v7:= v0.`b0.d.t` @type ^`float`;
  #L2a0c16.  call temp:= `e`(v6, v7) @signature `Lb0/e;.e:(F)Lb0/e;` @kind virtual;
  #L2a0c1c.  v0.`b0.d.t` @type ^`float` := v5;
  #L2a0c20.  v13:= v0.`b0.d.s` @type ^`b0.e` @kind object;
  #L2a0c24.  v5:= v1.`b0.b$o.a` @type ^`float`;
  #L2a0c28.  v14:= (`double`) v5 @kind f2d;
  #L2a0c2a.  v1:= v1.`b0.b$o.b` @type ^`float`;
  #L2a0c2e.  v5:= (`double`) v1 @kind f2d;
  #L2a0c30.  v16:= v5 @kind wide;
  #L2a0c34.  call temp:= `h`(v13, v14, v16, v18) @signature `Lb0/e;.h:(DDJ)Lb0/b$o;` @kind virtual;
  #L2a0c3a.  v1:= temp @kind object;
  #L2a0c3c.  v5:= v1.`b0.b$o.a` @type ^`float`;
  #L2a0c40.  v0.`b0.b.b` @type ^`float` := v5;
  #L2a0c44.  v1:= v1.`b0.b$o.b` @type ^`float`;
  #L2a0c48.  v0.`b0.b.a` @type ^`float` := v1;
  #L2a0c4c.  goto L2a0c7e;
  #L2a0c4e.  v13:= v0.`b0.d.s` @type ^`b0.e` @kind object;
  #L2a0c52.  v1:= v0.`b0.b.b` @type ^`float`;
  #L2a0c56.  v14:= (`double`) v1 @kind f2d;
  #L2a0c58.  v1:= v0.`b0.b.a` @type ^`float`;
  #L2a0c5c.  v5:= (`double`) v1 @kind f2d;
  #L2a0c5e.  v16:= v5 @kind wide;
  #L2a0c62.  v18:= v21 @kind wide;
  #L2a0c66.  call temp:= `h`(v13, v14, v16, v18) @signature `Lb0/e;.h:(DDJ)Lb0/b$o;` @kind virtual;
  #L2a0c6c.  v1:= temp @kind object;
  #L2a0c6e.  v5:= v1.`b0.b$o.a` @type ^`float`;
  #L2a0c72.  v0.`b0.b.b` @type ^`float` := v5;
  #L2a0c76.  v1:= v1.`b0.b$o.b` @type ^`float`;
  #L2a0c7a.  v0.`b0.b.a` @type ^`float` := v1;
  #L2a0c7e.  v1:= v0.`b0.b.b` @type ^`float`;
  #L2a0c82.  v5:= v0.`b0.b.h` @type ^`float`;
  #L2a0c86.  call temp:= `max`(v1, v5) @signature `Ljava/lang/Math;.max:(FF)F` @kind static;
  #L2a0c8c.  v1:= temp;
  #L2a0c8e.  v0.`b0.b.b` @type ^`float` := v1;
  #L2a0c92.  v5:= v0.`b0.b.g` @type ^`float`;
  #L2a0c96.  call temp:= `min`(v1, v5) @signature `Ljava/lang/Math;.min:(FF)F` @kind static;
  #L2a0c9c.  v1:= temp;
  #L2a0c9e.  v0.`b0.b.b` @type ^`float` := v1;
  #L2a0ca2.  v5:= v0.`b0.b.a` @type ^`float`;
  #L2a0ca6.  call temp:= `n`(v0, v1, v5) @signature `Lb0/d;.n:(FF)Z` @kind virtual;
  #L2a0cac.  v1:= temp;
  #L2a0cae.  if v1 == 0 then goto L2a0cc8;
  #L2a0cb2.  v1:= v0.`b0.d.s` @type ^`b0.e` @kind object;
  #L2a0cb6.  call temp:= `a`(v1) @signature `Lb0/e;.a:()F` @kind virtual;
  #L2a0cbc.  v1:= temp;
  #L2a0cbe.  v0.`b0.b.b` @type ^`float` := v1;
  #L2a0cc2.  v0.`b0.b.a` @type ^`float` := v4;
  #L2a0cc6.  return v2;
  #L2a0cc8.  return v3;
}
procedure `void` `m`(`b0.d` v1 @kind this, `float` v2 ) @signature `Lb0/d;.m:(F)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a0d0c.  call temp:= `f`(v1) @signature `Lb0/b;.f:()Z` @kind virtual;
  #L2a0d12.  v0:= temp;
  #L2a0d14.  if v0 == 0 then goto L2a0d1e;
  #L2a0d18.  v1.`b0.d.t` @type ^`float` := v2;
  #L2a0d1c.  goto L2a0d44;
  #L2a0d1e.  v0:= v1.`b0.d.s` @type ^`b0.e` @kind object;
  #L2a0d22.  if v0 != 0 then goto L2a0d34;
  #L2a0d26.  v0:= new `b0.e`;
  #L2a0d2a.  call `<init>`(v0, v2) @signature `Lb0/e;.<init>:(F)V` @kind direct;
  #L2a0d30.  v1.`b0.d.s` @type ^`b0.e` := v0 @kind object;
  #L2a0d34.  v0:= v1.`b0.d.s` @type ^`b0.e` @kind object;
  #L2a0d38.  call temp:= `e`(v0, v2) @signature `Lb0/e;.e:(F)Lb0/e;` @kind virtual;
  #L2a0d3e.  call `j`(v1) @signature `Lb0/d;.j:()V` @kind virtual;
  #L2a0d44.  return @kind void;
}
procedure `boolean` `n`(`b0.d` v1 @kind this, `float` v2 , `float` v3 ) @signature `Lb0/d;.n:(FF)Z` @AccessFlag  {
    temp;
    v0;

  #L2a0b68.  v0:= v1.`b0.d.s` @type ^`b0.e` @kind object;
  #L2a0b6c.  call temp:= `c`(v0, v2, v3) @signature `Lb0/e;.c:(FF)Z` @kind virtual;
  #L2a0b72.  v2:= temp;
  #L2a0b74.  return v2;
}
procedure `b0.d` `p`(`b0.d` v0 @kind this, `b0.e` v1 @kind object) @signature `Lb0/d;.p:(Lb0/e;)Lb0/d;` @AccessFlag PUBLIC {
    temp;

  #L2a0b50.  v0.`b0.d.s` @type ^`b0.e` := v1 @kind object;
  #L2a0b54.  return v0 @kind object;
}
