record `d4.e` @kind class @AccessFlag PUBLIC {
  `d4.e$a` `d4.e.a` @AccessFlag PRIVATE;
  `boolean` `d4.e.b` @AccessFlag PRIVATE;
  `float`[] `d4.e.c` @AccessFlag PRIVATE;
  `int` `d4.e.d` @AccessFlag PRIVATE;
  `float` `d4.e.e` @AccessFlag PRIVATE;
  `int` `d4.e.f` @AccessFlag PRIVATE;
  `float` `d4.e.g` @AccessFlag PRIVATE;
  `boolean` `d4.e.h` @AccessFlag PRIVATE;
  `boolean` `d4.e.i` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`d4.e` v2 @kind this) @signature `Ld4/e;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4f6e24.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4f6e2a.  v0:= `@@d4.e$a.BITMAP_ONLY` @type ^`d4.e$a` @kind object;
  #L4f6e2e.  v2.`d4.e.a` @type ^`d4.e$a` := v0 @kind object;
  #L4f6e32.  v0:= 0I;
  #L4f6e34.  v2.`d4.e.b` @type ^`boolean` := v0 @kind boolean;
  #L4f6e38.  v1:= 0I;
  #L4f6e3a.  v2.`d4.e.c` @type ^`float`[] := v1 @kind object;
  #L4f6e3e.  v2.`d4.e.d` @type ^`int` := v0;
  #L4f6e42.  v1:= 0I;
  #L4f6e44.  v2.`d4.e.e` @type ^`float` := v1;
  #L4f6e48.  v2.`d4.e.f` @type ^`int` := v0;
  #L4f6e4c.  v2.`d4.e.g` @type ^`float` := v1;
  #L4f6e50.  v2.`d4.e.h` @type ^`boolean` := v0 @kind boolean;
  #L4f6e54.  v2.`d4.e.i` @type ^`boolean` := v0 @kind boolean;
  #L4f6e58.  return @kind void;
}
procedure `float`[] `d`(`d4.e` v1 @kind this) @signature `Ld4/e;.d:()[F` @AccessFlag PRIVATE {
    temp;
    v0;

  #L4f6d18.  v0:= v1.`d4.e.c` @type ^`float`[] @kind object;
  #L4f6d1c.  if v0 != 0 then goto L4f6d2c;
  #L4f6d20.  v0:= 8I;
  #L4f6d24.  v0:= new `float`[v0];
  #L4f6d28.  v1.`d4.e.c` @type ^`float`[] := v0 @kind object;
  #L4f6d2c.  v0:= v1.`d4.e.c` @type ^`float`[] @kind object;
  #L4f6d30.  return v0 @kind object;
}
procedure `int` `a`(`d4.e` v1 @kind this) @signature `Ld4/e;.a:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f6d44.  v0:= v1.`d4.e.f` @type ^`int`;
  #L4f6d48.  return v0;
}
procedure `float` `b`(`d4.e` v1 @kind this) @signature `Ld4/e;.b:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f6cd0.  v0:= v1.`d4.e.e` @type ^`float`;
  #L4f6cd4.  return v0;
}
procedure `float`[] `c`(`d4.e` v1 @kind this) @signature `Ld4/e;.c:()[F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f6d00.  v0:= v1.`d4.e.c` @type ^`float`[] @kind object;
  #L4f6d04.  return v0 @kind object;
}
procedure `int` `e`(`d4.e` v1 @kind this) @signature `Ld4/e;.e:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f6d5c.  v0:= v1.`d4.e.d` @type ^`int`;
  #L4f6d60.  return v0;
}
procedure `boolean` `equals`(`d4.e` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Ld4/e;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4f6aac.  if v3 != v4 then goto L4f6ab4;
  #L4f6ab0.  v4:= 1I;
  #L4f6ab2.  return v4;
  #L4f6ab4.  v0:= 0I;
  #L4f6ab6.  if v4 == 0 then goto L4f6b62;
  #L4f6aba.  v1:= constclass @type ^`d4.e` @kind object;
  #L4f6abe.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4f6ac4.  v2:= temp @kind object;
  #L4f6ac6.  if v1 == v2 then goto L4f6acc;
  #L4f6aca.  goto L4f6b62;
  #L4f6acc.  v4:= (`d4.e`) v4 @kind object;
  #L4f6ad0.  v1:= v3.`d4.e.b` @type ^`boolean` @kind boolean;
  #L4f6ad4.  v2:= v4.`d4.e.b` @type ^`boolean` @kind boolean;
  #L4f6ad8.  if v1 == v2 then goto L4f6ade;
  #L4f6adc.  return v0;
  #L4f6ade.  v1:= v3.`d4.e.d` @type ^`int`;
  #L4f6ae2.  v2:= v4.`d4.e.d` @type ^`int`;
  #L4f6ae6.  if v1 == v2 then goto L4f6aec;
  #L4f6aea.  return v0;
  #L4f6aec.  v1:= v4.`d4.e.e` @type ^`float`;
  #L4f6af0.  v2:= v3.`d4.e.e` @type ^`float`;
  #L4f6af4.  call temp:= `compare`(v1, v2) @signature `Ljava/lang/Float;.compare:(FF)I` @kind static;
  #L4f6afa.  v1:= temp;
  #L4f6afc.  if v1 == 0 then goto L4f6b02;
  #L4f6b00.  return v0;
  #L4f6b02.  v1:= v3.`d4.e.f` @type ^`int`;
  #L4f6b06.  v2:= v4.`d4.e.f` @type ^`int`;
  #L4f6b0a.  if v1 == v2 then goto L4f6b10;
  #L4f6b0e.  return v0;
  #L4f6b10.  v1:= v4.`d4.e.g` @type ^`float`;
  #L4f6b14.  v2:= v3.`d4.e.g` @type ^`float`;
  #L4f6b18.  call temp:= `compare`(v1, v2) @signature `Ljava/lang/Float;.compare:(FF)I` @kind static;
  #L4f6b1e.  v1:= temp;
  #L4f6b20.  if v1 == 0 then goto L4f6b26;
  #L4f6b24.  return v0;
  #L4f6b26.  v1:= v3.`d4.e.a` @type ^`d4.e$a` @kind object;
  #L4f6b2a.  v2:= v4.`d4.e.a` @type ^`d4.e$a` @kind object;
  #L4f6b2e.  if v1 == v2 then goto L4f6b34;
  #L4f6b32.  return v0;
  #L4f6b34.  v1:= v3.`d4.e.h` @type ^`boolean` @kind boolean;
  #L4f6b38.  v2:= v4.`d4.e.h` @type ^`boolean` @kind boolean;
  #L4f6b3c.  if v1 == v2 then goto L4f6b42;
  #L4f6b40.  return v0;
  #L4f6b42.  v1:= v3.`d4.e.i` @type ^`boolean` @kind boolean;
  #L4f6b46.  v2:= v4.`d4.e.i` @type ^`boolean` @kind boolean;
  #L4f6b4a.  if v1 == v2 then goto L4f6b50;
  #L4f6b4e.  return v0;
  #L4f6b50.  v0:= v3.`d4.e.c` @type ^`float`[] @kind object;
  #L4f6b54.  v4:= v4.`d4.e.c` @type ^`float`[] @kind object;
  #L4f6b58.  call temp:= `equals`(v0, v4) @signature `Ljava/util/Arrays;.equals:([F[F)Z` @kind static;
  #L4f6b5e.  v4:= temp;
  #L4f6b60.  return v4;
  #L4f6b62.  return v0;
}
procedure `float` `f`(`d4.e` v1 @kind this) @signature `Ld4/e;.f:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f6ce8.  v0:= v1.`d4.e.g` @type ^`float`;
  #L4f6cec.  return v0;
}
procedure `boolean` `g`(`d4.e` v1 @kind this) @signature `Ld4/e;.g:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f6b74.  v0:= v1.`d4.e.i` @type ^`boolean` @kind boolean;
  #L4f6b78.  return v0;
}
procedure `boolean` `h`(`d4.e` v1 @kind this) @signature `Ld4/e;.h:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f6b8c.  v0:= v1.`d4.e.b` @type ^`boolean` @kind boolean;
  #L4f6b90.  return v0;
}
procedure `int` `hashCode`(`d4.e` v5 @kind this) @signature `Ld4/e;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4f6d74.  v0:= v5.`d4.e.a` @type ^`d4.e$a` @kind object;
  #L4f6d78.  v1:= 0I;
  #L4f6d7a.  if v0 == 0 then goto L4f6d88;
  #L4f6d7e.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Enum;.hashCode:()I` @kind virtual;
  #L4f6d84.  v0:= temp;
  #L4f6d86.  goto L4f6d8a;
  #L4f6d88.  v0:= 0I;
  #L4f6d8a.  v0:= v0 * 31;
  #L4f6d8e.  v2:= v5.`d4.e.b` @type ^`boolean` @kind boolean;
  #L4f6d92.  v0:= v0 + v2 @kind int;
  #L4f6d94.  v0:= v0 * 31;
  #L4f6d98.  v2:= v5.`d4.e.c` @type ^`float`[] @kind object;
  #L4f6d9c.  if v2 == 0 then goto L4f6daa;
  #L4f6da0.  call temp:= `hashCode`(v2) @signature `Ljava/util/Arrays;.hashCode:([F)I` @kind static;
  #L4f6da6.  v2:= temp;
  #L4f6da8.  goto L4f6dac;
  #L4f6daa.  v2:= 0I;
  #L4f6dac.  v0:= v0 + v2 @kind int;
  #L4f6dae.  v0:= v0 * 31;
  #L4f6db2.  v2:= v5.`d4.e.d` @type ^`int`;
  #L4f6db6.  v0:= v0 + v2 @kind int;
  #L4f6db8.  v0:= v0 * 31;
  #L4f6dbc.  v2:= v5.`d4.e.e` @type ^`float`;
  #L4f6dc0.  v3:= 0I;
  #L4f6dc2.  v4:= fcmpl(v2, v3);
  #L4f6dc6.  if v4 == 0 then goto L4f6dd4;
  #L4f6dca.  call temp:= `floatToIntBits`(v2) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L4f6dd0.  v2:= temp;
  #L4f6dd2.  goto L4f6dd6;
  #L4f6dd4.  v2:= 0I;
  #L4f6dd6.  v0:= v0 + v2 @kind int;
  #L4f6dd8.  v0:= v0 * 31;
  #L4f6ddc.  v2:= v5.`d4.e.f` @type ^`int`;
  #L4f6de0.  v0:= v0 + v2 @kind int;
  #L4f6de2.  v0:= v0 * 31;
  #L4f6de6.  v2:= v5.`d4.e.g` @type ^`float`;
  #L4f6dea.  v3:= fcmpl(v2, v3);
  #L4f6dee.  if v3 == 0 then goto L4f6dfa;
  #L4f6df2.  call temp:= `floatToIntBits`(v2) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L4f6df8.  v1:= temp;
  #L4f6dfa.  v0:= v0 + v1 @kind int;
  #L4f6dfc.  v0:= v0 * 31;
  #L4f6e00.  v1:= v5.`d4.e.h` @type ^`boolean` @kind boolean;
  #L4f6e04.  v0:= v0 + v1 @kind int;
  #L4f6e06.  v0:= v0 * 31;
  #L4f6e0a.  v1:= v5.`d4.e.i` @type ^`boolean` @kind boolean;
  #L4f6e0e.  v0:= v0 + v1 @kind int;
  #L4f6e10.  return v0;
}
procedure `d4.e$a` `i`(`d4.e` v1 @kind this) @signature `Ld4/e;.i:()Ld4/e$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f6cb8.  v0:= v1.`d4.e.a` @type ^`d4.e$a` @kind object;
  #L4f6cbc.  return v0 @kind object;
}
procedure `boolean` `j`(`d4.e` v1 @kind this) @signature `Ld4/e;.j:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f6ba4.  v0:= v1.`d4.e.h` @type ^`boolean` @kind boolean;
  #L4f6ba8.  return v0;
}
procedure `d4.e` `k`(`d4.e` v0 @kind this, `int` v1 ) @signature `Ld4/e;.k:(I)Ld4/e;` @AccessFlag PUBLIC {
    temp;

  #L4f6bbc.  v0.`d4.e.f` @type ^`int` := v1;
  #L4f6bc0.  return v0 @kind object;
}
procedure `d4.e` `l`(`d4.e` v2 @kind this, `float` v3 ) @signature `Ld4/e;.l:(F)Ld4/e;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f6bd4.  v0:= 0I;
  #L4f6bd6.  v0:= fcmpl(v3, v0);
  #L4f6bda.  if v0 < 0 then goto L4f6be2;
  #L4f6bde.  v0:= 1I;
  #L4f6be0.  goto L4f6be4;
  #L4f6be2.  v0:= 0I;
  #L4f6be4.  v1:= "the border width cannot be < 0" @kind object;
  #L4f6be8.  call `c`(v0, v1) @signature `Lh3/j;.c:(ZLjava/lang/Object;)V` @kind static;
  #L4f6bee.  v2.`d4.e.e` @type ^`float` := v3;
  #L4f6bf2.  return v2 @kind object;
}
procedure `d4.e` `m`(`d4.e` v2 @kind this, `float` v3 , `float` v4 , `float` v5 , `float` v6 ) @signature `Ld4/e;.m:(FFFF)Ld4/e;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f6c04.  call temp:= `d`(v2) @signature `Ld4/e;.d:()[F` @kind direct;
  #L4f6c0a.  v0:= temp @kind object;
  #L4f6c0c.  v1:= 1I;
  #L4f6c0e.  v0[v1]:= v3;
  #L4f6c12.  v1:= 0I;
  #L4f6c14.  v0[v1]:= v3;
  #L4f6c18.  v3:= 3I;
  #L4f6c1a.  v0[v3]:= v4;
  #L4f6c1e.  v3:= 2I;
  #L4f6c20.  v0[v3]:= v4;
  #L4f6c24.  v3:= 5I;
  #L4f6c26.  v0[v3]:= v5;
  #L4f6c2a.  v3:= 4I;
  #L4f6c2c.  v0[v3]:= v5;
  #L4f6c30.  v3:= 7I;
  #L4f6c32.  v0[v3]:= v6;
  #L4f6c36.  v3:= 6I;
  #L4f6c38.  v0[v3]:= v6;
  #L4f6c3c.  return v2 @kind object;
}
procedure `d4.e` `n`(`d4.e` v0 @kind this, `int` v1 ) @signature `Ld4/e;.n:(I)Ld4/e;` @AccessFlag PUBLIC {
    temp;

  #L4f6c50.  v0.`d4.e.d` @type ^`int` := v1;
  #L4f6c54.  v1:= `@@d4.e$a.OVERLAY_COLOR` @type ^`d4.e$a` @kind object;
  #L4f6c58.  v0.`d4.e.a` @type ^`d4.e$a` := v1 @kind object;
  #L4f6c5c.  return v0 @kind object;
}
procedure `d4.e` `o`(`d4.e` v2 @kind this, `float` v3 ) @signature `Ld4/e;.o:(F)Ld4/e;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f6c70.  v0:= 0I;
  #L4f6c72.  v0:= fcmpl(v3, v0);
  #L4f6c76.  if v0 < 0 then goto L4f6c7e;
  #L4f6c7a.  v0:= 1I;
  #L4f6c7c.  goto L4f6c80;
  #L4f6c7e.  v0:= 0I;
  #L4f6c80.  v1:= "the padding cannot be < 0" @kind object;
  #L4f6c84.  call `c`(v0, v1) @signature `Lh3/j;.c:(ZLjava/lang/Object;)V` @kind static;
  #L4f6c8a.  v2.`d4.e.g` @type ^`float` := v3;
  #L4f6c8e.  return v2 @kind object;
}
procedure `d4.e` `p`(`d4.e` v0 @kind this, `boolean` v1 ) @signature `Ld4/e;.p:(Z)Ld4/e;` @AccessFlag PUBLIC {
    temp;

  #L4f6ca0.  v0.`d4.e.b` @type ^`boolean` := v1 @kind boolean;
  #L4f6ca4.  return v0 @kind object;
}
