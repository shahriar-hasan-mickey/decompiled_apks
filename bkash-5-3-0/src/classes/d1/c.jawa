record `d1.c` @kind class @AccessFlag PUBLIC_ABSTRACT extends `c1.a` @kind interface {
  `java.util.List` `d1.c.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `d1.c.b` @AccessFlag PRIVATE;
  `e1.d` `d1.c.c` @AccessFlag PRIVATE;
  `d1.c$a` `d1.c.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`d1.c` v1 @kind this, `e1.d` v2 @kind object) @signature `Ld1/c;.<init>:(Le1/d;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4f4fd4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4f4fda.  v0:= new `java.util.ArrayList`;
  #L4f4fde.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4f4fe4.  v1.`d1.c.a` @type ^`java.util.List` := v0 @kind object;
  #L4f4fe8.  v1.`d1.c.c` @type ^`e1.d` := v2 @kind object;
  #L4f4fec.  return @kind void;
}
procedure `void` `h`(`d1.c` v1 @kind this, `d1.c$a` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Ld1/c;.h:(Ld1/c$a;Ljava/lang/Object;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L4f510c.  v0:= v1.`d1.c.a` @type ^`java.util.List` @kind object;
  #L4f5110.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L4f5116.  v0:= temp;
  #L4f5118.  if v0 != 0 then goto L4f514a;
  #L4f511c.  if v2 != 0 then goto L4f5122;
  #L4f5120.  goto L4f514a;
  #L4f5122.  if v3 == 0 then goto L4f5140;
  #L4f5126.  call temp:= `c`(v1, v3) @signature `Ld1/c;.c:(Ljava/lang/Object;)Z` @kind virtual;
  #L4f512c.  v3:= temp;
  #L4f512e.  if v3 == 0 then goto L4f5134;
  #L4f5132.  goto L4f5140;
  #L4f5134.  v3:= v1.`d1.c.a` @type ^`java.util.List` @kind object;
  #L4f5138.  call `a`(v2, v3) @signature `Ld1/c$a;.a:(Ljava/util/List;)V` @kind interface;
  #L4f513e.  goto L4f514a;
  #L4f5140.  v3:= v1.`d1.c.a` @type ^`java.util.List` @kind object;
  #L4f5144.  call `b`(v2, v3) @signature `Ld1/c$a;.b:(Ljava/util/List;)V` @kind interface;
  #L4f514a.  return @kind void;
}
procedure `void` `a`(`d1.c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Ld1/c;.a:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f5000.  v1.`d1.c.b` @type ^`java.lang.Object` := v2 @kind object;
  #L4f5004.  v0:= v1.`d1.c.d` @type ^`d1.c$a` @kind object;
  #L4f5008.  call `h`(v1, v0, v2) @signature `Ld1/c;.h:(Ld1/c$a;Ljava/lang/Object;)V` @kind direct;
  #L4f500e.  return @kind void;
}
procedure `boolean` `b`(`f1.p` v0 @kind object) @signature `Ld1/c;.b:(Lf1/p;)Z` @AccessFlag ABSTRACT {

  # return;
}
procedure `boolean` `c`(`java.lang.Object` v0 @kind object) @signature `Ld1/c;.c:(Ljava/lang/Object;)Z` @AccessFlag ABSTRACT {

  # return;
}
procedure `boolean` `d`(`d1.c` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Ld1/c;.d:(Ljava/lang/String;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f4f98.  v0:= v1.`d1.c.b` @type ^`java.lang.Object` @kind object;
  #L4f4f9c.  if v0 == 0 then goto L4f4fc0;
  #L4f4fa0.  call temp:= `c`(v1, v0) @signature `Ld1/c;.c:(Ljava/lang/Object;)Z` @kind virtual;
  #L4f4fa6.  v0:= temp;
  #L4f4fa8.  if v0 == 0 then goto L4f4fc0;
  #L4f4fac.  v0:= v1.`d1.c.a` @type ^`java.util.List` @kind object;
  #L4f4fb0.  call temp:= `contains`(v0, v2) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L4f4fb6.  v2:= temp;
  #L4f4fb8.  if v2 == 0 then goto L4f4fc0;
  #L4f4fbc.  v2:= 1I;
  #L4f4fbe.  goto L4f4fc2;
  #L4f4fc0.  v2:= 0I;
  #L4f4fc2.  return v2;
}
procedure `void` `e`(`d1.c` v2 @kind this, `java.lang.Iterable` v3 @kind object) @signature `Ld1/c;.e:(Ljava/lang/Iterable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f5020.  v0:= v2.`d1.c.a` @type ^`java.util.List` @kind object;
  #L4f5024.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L4f502a.  call temp:= `iterator`(v3) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4f5030.  v3:= temp @kind object;
  #L4f5032.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4f5038.  v0:= temp;
  #L4f503a.  if v0 == 0 then goto L4f5066;
  #L4f503e.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4f5044.  v0:= temp @kind object;
  #L4f5046.  v0:= (`f1.p`) v0 @kind object;
  #L4f504a.  call temp:= `b`(v2, v0) @signature `Ld1/c;.b:(Lf1/p;)Z` @kind virtual;
  #L4f5050.  v1:= temp;
  #L4f5052.  if v1 == 0 then goto L4f5032;
  #L4f5056.  v1:= v2.`d1.c.a` @type ^`java.util.List` @kind object;
  #L4f505a.  v0:= v0.`f1.p.a` @type ^`java.lang.String` @kind object;
  #L4f505e.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4f5064.  goto L4f5032;
  #L4f5066.  v3:= v2.`d1.c.a` @type ^`java.util.List` @kind object;
  #L4f506a.  call temp:= `isEmpty`(v3) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L4f5070.  v3:= temp;
  #L4f5072.  if v3 == 0 then goto L4f5082;
  #L4f5076.  v3:= v2.`d1.c.c` @type ^`e1.d` @kind object;
  #L4f507a.  call `c`(v3, v2) @signature `Le1/d;.c:(Lc1/a;)V` @kind virtual;
  #L4f5080.  goto L4f508c;
  #L4f5082.  v3:= v2.`d1.c.c` @type ^`e1.d` @kind object;
  #L4f5086.  call `a`(v3, v2) @signature `Le1/d;.a:(Lc1/a;)V` @kind virtual;
  #L4f508c.  v3:= v2.`d1.c.d` @type ^`d1.c$a` @kind object;
  #L4f5090.  v0:= v2.`d1.c.b` @type ^`java.lang.Object` @kind object;
  #L4f5094.  call `h`(v2, v3, v0) @signature `Ld1/c;.h:(Ld1/c$a;Ljava/lang/Object;)V` @kind direct;
  #L4f509a.  return @kind void;
}
procedure `void` `f`(`d1.c` v1 @kind this) @signature `Ld1/c;.f:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f50ac.  v0:= v1.`d1.c.a` @type ^`java.util.List` @kind object;
  #L4f50b0.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L4f50b6.  v0:= temp;
  #L4f50b8.  if v0 != 0 then goto L4f50d0;
  #L4f50bc.  v0:= v1.`d1.c.a` @type ^`java.util.List` @kind object;
  #L4f50c0.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L4f50c6.  v0:= v1.`d1.c.c` @type ^`e1.d` @kind object;
  #L4f50ca.  call `c`(v0, v1) @signature `Le1/d;.c:(Lc1/a;)V` @kind virtual;
  #L4f50d0.  return @kind void;
}
procedure `void` `g`(`d1.c` v1 @kind this, `d1.c$a` v2 @kind object) @signature `Ld1/c;.g:(Ld1/c$a;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f50e4.  v0:= v1.`d1.c.d` @type ^`d1.c$a` @kind object;
  #L4f50e8.  if v0 == v2 then goto L4f50fa;
  #L4f50ec.  v1.`d1.c.d` @type ^`d1.c$a` := v2 @kind object;
  #L4f50f0.  v0:= v1.`d1.c.b` @type ^`java.lang.Object` @kind object;
  #L4f50f4.  call `h`(v1, v2, v0) @signature `Ld1/c;.h:(Ld1/c$a;Ljava/lang/Object;)V` @kind direct;
  #L4f50fa.  return @kind void;
}
