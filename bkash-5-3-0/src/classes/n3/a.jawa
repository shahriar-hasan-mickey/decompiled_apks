record `n3.a` @kind class @AccessFlag PUBLIC extends `java.io.FilterInputStream` @kind class {
  `int` `n3.a.g` @AccessFlag PRIVATE;
  `int` `n3.a.h` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`n3.a` v0 @kind this, `java.io.InputStream` v1 @kind object, `int` v2 ) @signature `Ln3/a;.<init>:(Ljava/io/InputStream;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L53dba8.  call `<init>`(v0, v1) @signature `Ljava/io/FilterInputStream;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L53dbae.  call temp:= `requireNonNull`(v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L53dbb4.  if v2 < 0 then goto L53dbc4;
  #L53dbb8.  v0.`n3.a.g` @type ^`int` := v2;
  #L53dbbc.  v1:= -1I;
  #L53dbbe.  v0.`n3.a.h` @type ^`int` := v1;
  #L53dbc2.  return @kind void;
  #L53dbc4.  v1:= new `java.lang.IllegalArgumentException`;
  #L53dbc8.  v2:= "limit must be >= 0" @kind object;
  #L53dbcc.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L53dbd2.  throw v1;
}
procedure `int` `available`(`n3.a` v2 @kind this) @signature `Ln3/a;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L53dac4.  v0:= v2.`java.io.FilterInputStream.in` @type ^`java.io.InputStream` @kind object;
  #L53dac8.  call temp:= `available`(v0) @signature `Ljava/io/InputStream;.available:()I` @kind virtual;
  #L53dace.  v0:= temp;
  #L53dad0.  v1:= v2.`n3.a.g` @type ^`int`;
  #L53dad4.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L53dada.  v0:= temp;
  #L53dadc.  return v0;
}
procedure `void` `mark`(`n3.a` v1 @kind this, `int` v2 ) @signature `Ln3/a;.mark:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L53dbe4.  v0:= v1.`java.io.FilterInputStream.in` @type ^`java.io.InputStream` @kind object;
  #L53dbe8.  call temp:= `markSupported`(v0) @signature `Ljava/io/InputStream;.markSupported:()Z` @kind virtual;
  #L53dbee.  v0:= temp;
  #L53dbf0.  if v0 == 0 then goto L53dc06;
  #L53dbf4.  v0:= v1.`java.io.FilterInputStream.in` @type ^`java.io.InputStream` @kind object;
  #L53dbf8.  call `mark`(v0, v2) @signature `Ljava/io/InputStream;.mark:(I)V` @kind virtual;
  #L53dbfe.  v2:= v1.`n3.a.g` @type ^`int`;
  #L53dc02.  v1.`n3.a.h` @type ^`int` := v2;
  #L53dc06.  return @kind void;
}
procedure `int` `read`(`n3.a` v2 @kind this) @signature `Ln3/a;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L53daf0.  v0:= v2.`n3.a.g` @type ^`int`;
  #L53daf4.  v1:= -1I;
  #L53daf6.  if v0 != 0 then goto L53dafc;
  #L53dafa.  return v1;
  #L53dafc.  v0:= v2.`java.io.FilterInputStream.in` @type ^`java.io.InputStream` @kind object;
  #L53db00.  call temp:= `read`(v0) @signature `Ljava/io/InputStream;.read:()I` @kind virtual;
  #L53db06.  v0:= temp;
  #L53db08.  if v0 == v1 then goto L53db18;
  #L53db0c.  v1:= v2.`n3.a.g` @type ^`int`;
  #L53db10.  v1:= v1 + -1;
  #L53db14.  v2.`n3.a.g` @type ^`int` := v1;
  #L53db18.  return v0;
}
procedure `int` `read`(`n3.a` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Ln3/a;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L53db2c.  v0:= v1.`n3.a.g` @type ^`int`;
  #L53db30.  if v0 != 0 then goto L53db38;
  #L53db34.  v2:= -1I;
  #L53db36.  return v2;
  #L53db38.  call temp:= `min`(v4, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L53db3e.  v4:= temp;
  #L53db40.  v0:= v1.`java.io.FilterInputStream.in` @type ^`java.io.InputStream` @kind object;
  #L53db44.  call temp:= `read`(v0, v2, v3, v4) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L53db4a.  v2:= temp;
  #L53db4c.  if v2 <= 0 then goto L53db5a;
  #L53db50.  v3:= v1.`n3.a.g` @type ^`int`;
  #L53db54.  v3:= v3 - v2 @kind int;
  #L53db56.  v1.`n3.a.g` @type ^`int` := v3;
  #L53db5a.  return v2;
}
procedure `void` `reset`(`n3.a` v2 @kind this) @signature `Ln3/a;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L53dc18.  v0:= v2.`java.io.FilterInputStream.in` @type ^`java.io.InputStream` @kind object;
  #L53dc1c.  call temp:= `markSupported`(v0) @signature `Ljava/io/InputStream;.markSupported:()Z` @kind virtual;
  #L53dc22.  v0:= temp;
  #L53dc24.  if v0 == 0 then goto L53dc56;
  #L53dc28.  v0:= v2.`n3.a.h` @type ^`int`;
  #L53dc2c.  v1:= -1I;
  #L53dc2e.  if v0 == v1 then goto L53dc46;
  #L53dc32.  v0:= v2.`java.io.FilterInputStream.in` @type ^`java.io.InputStream` @kind object;
  #L53dc36.  call `reset`(v0) @signature `Ljava/io/InputStream;.reset:()V` @kind virtual;
  #L53dc3c.  v0:= v2.`n3.a.h` @type ^`int`;
  #L53dc40.  v2.`n3.a.g` @type ^`int` := v0;
  #L53dc44.  return @kind void;
  #L53dc46.  v0:= new `java.io.IOException`;
  #L53dc4a.  v1:= "mark not set" @kind object;
  #L53dc4e.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L53dc54.  throw v0;
  #L53dc56.  v0:= new `java.io.IOException`;
  #L53dc5a.  v1:= "mark is not supported" @kind object;
  #L53dc5e.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L53dc64.  throw v0;
}
procedure `long` `skip`(`n3.a` v2 @kind this, `long` v3 ) @signature `Ln3/a;.skip:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L53db6c.  v0:= v2.`n3.a.g` @type ^`int`;
  #L53db70.  v0:= (`long`) v0 @kind i2l;
  #L53db72.  call temp:= `min`(v3, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L53db78.  v3:= temp @kind wide;
  #L53db7a.  v0:= v2.`java.io.FilterInputStream.in` @type ^`java.io.InputStream` @kind object;
  #L53db7e.  call temp:= `skip`(v0, v3) @signature `Ljava/io/InputStream;.skip:(J)J` @kind virtual;
  #L53db84.  v3:= temp @kind wide;
  #L53db86.  v0:= v2.`n3.a.g` @type ^`int`;
  #L53db8a.  v0:= (`long`) v0 @kind i2l;
  #L53db8c.  v0:= v0 - v3 @kind long;
  #L53db8e.  v1:= (`int`) v0 @kind l2i;
  #L53db90.  v2.`n3.a.g` @type ^`int` := v1;
  #L53db94.  return v3 @kind wide;
}
