record `n3.b` @kind class @AccessFlag PUBLIC extends `java.io.FilterInputStream` @kind class {
  `byte`[] `n3.b.g` @AccessFlag PRIVATE_FINAL;
  `int` `n3.b.h` @AccessFlag PRIVATE;
  `int` `n3.b.i` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`n3.b` v0 @kind this, `java.io.InputStream` v1 @kind object, `byte`[] v2 @kind object) @signature `Ln3/b;.<init>:(Ljava/io/InputStream;[B)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L53dd54.  call `<init>`(v0, v1) @signature `Ljava/io/FilterInputStream;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L53dd5a.  call temp:= `requireNonNull`(v1) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L53dd60.  call temp:= `requireNonNull`(v2) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L53dd66.  v0.`n3.b.g` @type ^`byte`[] := v2 @kind object;
  #L53dd6a.  return @kind void;
}
procedure `int` `e`(`n3.b` v3 @kind this) @signature `Ln3/b;.e:()I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L53dd20.  v0:= v3.`n3.b.h` @type ^`int`;
  #L53dd24.  v1:= v3.`n3.b.g` @type ^`byte`[] @kind object;
  #L53dd28.  v2:= length @variable v1;
  #L53dd2a.  if v0 < v2 then goto L53dd32;
  #L53dd2e.  v0:= -1I;
  #L53dd30.  return v0;
  #L53dd32.  v2:= v0 + 1;
  #L53dd36.  v3.`n3.b.h` @type ^`int` := v2;
  #L53dd3a.  v0:= v1[v0] @kind byte;
  #L53dd3e.  v0:= v0 ^& 255;
  #L53dd42.  return v0;
}
procedure `void` `mark`(`n3.b` v1 @kind this, `int` v2 ) @signature `Ln3/b;.mark:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L53dd7c.  v0:= v1.`java.io.FilterInputStream.in` @type ^`java.io.InputStream` @kind object;
  #L53dd80.  call temp:= `markSupported`(v0) @signature `Ljava/io/InputStream;.markSupported:()Z` @kind virtual;
  #L53dd86.  v0:= temp;
  #L53dd88.  if v0 == 0 then goto L53dd9a;
  #L53dd8c.  call `mark`(v1, v2) @signature `Ljava/io/FilterInputStream;.mark:(I)V` @kind super;
  #L53dd92.  v2:= v1.`n3.b.h` @type ^`int`;
  #L53dd96.  v1.`n3.b.i` @type ^`int` := v2;
  #L53dd9a.  return @kind void;
}
procedure `int` `read`(`n3.b` v2 @kind this) @signature `Ln3/b;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L53dc78.  v0:= v2.`java.io.FilterInputStream.in` @type ^`java.io.InputStream` @kind object;
  #L53dc7c.  call temp:= `read`(v0) @signature `Ljava/io/InputStream;.read:()I` @kind virtual;
  #L53dc82.  v0:= temp;
  #L53dc84.  v1:= -1I;
  #L53dc86.  if v0 == v1 then goto L53dc8c;
  #L53dc8a.  return v0;
  #L53dc8c.  call temp:= `e`(v2) @signature `Ln3/b;.e:()I` @kind direct;
  #L53dc92.  v0:= temp;
  #L53dc94.  return v0;
}
procedure `int` `read`(`n3.b` v2 @kind this, `byte`[] v3 @kind object) @signature `Ln3/b;.read:([B)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L53dca8.  v0:= length @variable v3;
  #L53dcaa.  v1:= 0I;
  #L53dcac.  call temp:= `read`(v2, v3, v1, v0) @signature `Ln3/b;.read:([BII)I` @kind virtual;
  #L53dcb2.  v3:= temp;
  #L53dcb4.  return v3;
}
procedure `int` `read`(`n3.b` v4 @kind this, `byte`[] v5 @kind object, `int` v6 , `int` v7 ) @signature `Ln3/b;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L53dcc8.  v0:= v4.`java.io.FilterInputStream.in` @type ^`java.io.InputStream` @kind object;
  #L53dccc.  call temp:= `read`(v0, v5, v6, v7) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L53dcd2.  v0:= temp;
  #L53dcd4.  v1:= -1I;
  #L53dcd6.  if v0 == v1 then goto L53dcdc;
  #L53dcda.  return v0;
  #L53dcdc.  v0:= 0I;
  #L53dcde.  if v7 != 0 then goto L53dce4;
  #L53dce2.  return v0;
  #L53dce4.  if v0 >= v7 then goto L53dd06;
  #L53dce8.  call temp:= `e`(v4) @signature `Ln3/b;.e:()I` @kind direct;
  #L53dcee.  v2:= temp;
  #L53dcf0.  if v2 != v1 then goto L53dcf6;
  #L53dcf4.  goto L53dd06;
  #L53dcf6.  v3:= v6 + v0 @kind int;
  #L53dcfa.  v2:= (`byte`) v2 @kind i2b;
  #L53dcfc.  v5[v3]:= v2 @kind byte;
  #L53dd00.  v0:= v0 + 1;
  #L53dd04.  goto L53dce4;
  #L53dd06.  if v0 <= 0 then goto L53dd0c;
  #L53dd0a.  v1:= v0;
  #L53dd0c.  return v1;
}
procedure `void` `reset`(`n3.b` v2 @kind this) @signature `Ln3/b;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L53ddac.  v0:= v2.`java.io.FilterInputStream.in` @type ^`java.io.InputStream` @kind object;
  #L53ddb0.  call temp:= `markSupported`(v0) @signature `Ljava/io/InputStream;.markSupported:()Z` @kind virtual;
  #L53ddb6.  v0:= temp;
  #L53ddb8.  if v0 == 0 then goto L53ddd0;
  #L53ddbc.  v0:= v2.`java.io.FilterInputStream.in` @type ^`java.io.InputStream` @kind object;
  #L53ddc0.  call `reset`(v0) @signature `Ljava/io/InputStream;.reset:()V` @kind virtual;
  #L53ddc6.  v0:= v2.`n3.b.i` @type ^`int`;
  #L53ddca.  v2.`n3.b.h` @type ^`int` := v0;
  #L53ddce.  return @kind void;
  #L53ddd0.  v0:= new `java.io.IOException`;
  #L53ddd4.  v1:= "mark is not supported" @kind object;
  #L53ddd8.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L53ddde.  throw v0;
}
