record `e3.c` @kind class @AccessFlag PUBLIC extends `e3.b` @kind interface {
}
global `e3.c` `@@e3.c.a` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Le3/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;

  #L4fb12c.  return @kind void;
}
procedure `void` `<init>`(`e3.c` v0 @kind this) @signature `Le3/c;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4fb140.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4fb146.  return @kind void;
}
procedure `e3.c` `b`() @signature `Le3/c;.b:()Le3/c;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4fb0e4.  v0:= constclass @type ^`e3.c` @kind object;
  #L4fb0e8.  @monitorenter v0
  #L4fb0ea.  v1:= `@@e3.c.a` @type ^`e3.c` @kind object;
  #L4fb0ee.  if v1 != 0 then goto L4fb100;
  #L4fb0f2.  v1:= new `e3.c`;
  #L4fb0f6.  call `<init>`(v1) @signature `Le3/c;.<init>:()V` @kind direct;
  #L4fb0fc.  `@@e3.c.a` @type ^`e3.c` := v1 @kind object;
  #L4fb100.  v1:= `@@e3.c.a` @type ^`e3.c` @kind object;
  #L4fb104.  @monitorexit v0
  #L4fb106.  return v1 @kind object;
  #L4fb108.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4fb10a.  @monitorexit v0
  #L4fb10c.  throw v1;
  catch `java.lang.Throwable` @[L4fb0ea..L4fb104] goto L4fb108;
}
procedure `void` `a`(`e3.c` v0 @kind this, `e3.a` v1 @kind object) @signature `Le3/c;.a:(Le3/a;)V` @AccessFlag PUBLIC {
    temp;

  #L4fb158.  return @kind void;
}
