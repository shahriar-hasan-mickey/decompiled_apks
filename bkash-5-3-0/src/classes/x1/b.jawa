record `x1.b` @kind class @AccessFlag PUBLIC extends `java.io.Serializable` @kind interface {
  `int` `x1.b.levelInt` @AccessFlag PUBLIC;
  `java.lang.String` `x1.b.levelStr` @AccessFlag PUBLIC;
  `int` `x1.b.loggerLevel` @AccessFlag PUBLIC;
}
global `x1.b` `@@x1.b.ALL` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@x1.b.ALL_INT` @AccessFlag PUBLIC_STATIC_FINAL;
global `x1.b` `@@x1.b.DEBUG` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@x1.b.DEBUG_INT` @AccessFlag PUBLIC_STATIC_FINAL;
global `x1.b` `@@x1.b.ERROR` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@x1.b.ERROR_INT` @AccessFlag PUBLIC_STATIC_FINAL;
global `x1.b` `@@x1.b.INFO` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@x1.b.INFO_INT` @AccessFlag PUBLIC_STATIC_FINAL;
global `x1.b` `@@x1.b.LOGGER_HIGH` @AccessFlag PUBLIC_STATIC_FINAL;
global `x1.b` `@@x1.b.LOGGER_LOW` @AccessFlag PUBLIC_STATIC_FINAL;
global `x1.b` `@@x1.b.LOGGER_MEDIUM` @AccessFlag PUBLIC_STATIC_FINAL;
global `x1.b` `@@x1.b.OFF` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@x1.b.OFF_INT` @AccessFlag PUBLIC_STATIC_FINAL;
global `x1.b` `@@x1.b.VERBOSE` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@x1.b.VERBOSE_INT` @AccessFlag PUBLIC_STATIC_FINAL;
global `x1.b` `@@x1.b.WARN` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@x1.b.WARN_INT` @AccessFlag PUBLIC_STATIC_FINAL;
global `long` `@@x1.b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lx1/b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L56e350.  v0:= new `x1.b`;
  #L56e354.  v1:= 40000I;
  #L56e35a.  v2:= "E" @kind object;
  #L56e35e.  call `<init>`(v0, v1, v2) @signature `Lx1/b;.<init>:(ILjava/lang/String;)V` @kind direct;
  #L56e364.  `@@x1.b.ERROR` @type ^`x1.b` := v0 @kind object;
  #L56e368.  v0:= new `x1.b`;
  #L56e36c.  v1:= 30000I;
  #L56e370.  v2:= "W" @kind object;
  #L56e374.  call `<init>`(v0, v1, v2) @signature `Lx1/b;.<init>:(ILjava/lang/String;)V` @kind direct;
  #L56e37a.  `@@x1.b.WARN` @type ^`x1.b` := v0 @kind object;
  #L56e37e.  v0:= new `x1.b`;
  #L56e382.  v1:= 20000I;
  #L56e386.  v2:= "I" @kind object;
  #L56e38a.  call `<init>`(v0, v1, v2) @signature `Lx1/b;.<init>:(ILjava/lang/String;)V` @kind direct;
  #L56e390.  `@@x1.b.INFO` @type ^`x1.b` := v0 @kind object;
  #L56e394.  v0:= new `x1.b`;
  #L56e398.  v1:= 10000I;
  #L56e39c.  v2:= "D" @kind object;
  #L56e3a0.  call `<init>`(v0, v1, v2) @signature `Lx1/b;.<init>:(ILjava/lang/String;)V` @kind direct;
  #L56e3a6.  `@@x1.b.DEBUG` @type ^`x1.b` := v0 @kind object;
  #L56e3aa.  v0:= new `x1.b`;
  #L56e3ae.  v1:= 5000I;
  #L56e3b2.  v2:= "V" @kind object;
  #L56e3b6.  call `<init>`(v0, v1, v2) @signature `Lx1/b;.<init>:(ILjava/lang/String;)V` @kind direct;
  #L56e3bc.  `@@x1.b.VERBOSE` @type ^`x1.b` := v0 @kind object;
  #L56e3c0.  v0:= new `x1.b`;
  #L56e3c4.  v2:= "OFF" @kind object;
  #L56e3c8.  call `<init>`(v0, v1, v2) @signature `Lx1/b;.<init>:(ILjava/lang/String;)V` @kind direct;
  #L56e3ce.  `@@x1.b.OFF` @type ^`x1.b` := v0 @kind object;
  #L56e3d2.  v0:= new `x1.b`;
  #L56e3d6.  v1:= -2147483648I;
  #L56e3da.  v2:= "ALL" @kind object;
  #L56e3de.  call `<init>`(v0, v1, v2) @signature `Lx1/b;.<init>:(ILjava/lang/String;)V` @kind direct;
  #L56e3e4.  `@@x1.b.ALL` @type ^`x1.b` := v0 @kind object;
  #L56e3e8.  v0:= new `x1.b`;
  #L56e3ec.  v1:= 1I;
  #L56e3ee.  call `<init>`(v0, v1) @signature `Lx1/b;.<init>:(I)V` @kind direct;
  #L56e3f4.  `@@x1.b.LOGGER_HIGH` @type ^`x1.b` := v0 @kind object;
  #L56e3f8.  v0:= new `x1.b`;
  #L56e3fc.  v1:= 2I;
  #L56e3fe.  call `<init>`(v0, v1) @signature `Lx1/b;.<init>:(I)V` @kind direct;
  #L56e404.  `@@x1.b.LOGGER_MEDIUM` @type ^`x1.b` := v0 @kind object;
  #L56e408.  v0:= new `x1.b`;
  #L56e40c.  v1:= 3I;
  #L56e40e.  call `<init>`(v0, v1) @signature `Lx1/b;.<init>:(I)V` @kind direct;
  #L56e414.  `@@x1.b.LOGGER_LOW` @type ^`x1.b` := v0 @kind object;
  #L56e418.  return @kind void;
}
procedure `void` `<init>`(`x1.b` v1 @kind this, `int` v2 ) @signature `Lx1/b;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L56e42c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L56e432.  v0:= -1I;
  #L56e434.  v1.`x1.b.loggerLevel` @type ^`int` := v0;
  #L56e438.  v1.`x1.b.loggerLevel` @type ^`int` := v2;
  #L56e43c.  return @kind void;
}
procedure `void` `<init>`(`x1.b` v1 @kind this, `int` v2 , `java.lang.String` v3 @kind object) @signature `Lx1/b;.<init>:(ILjava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L56e450.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L56e456.  v0:= -1I;
  #L56e458.  v1.`x1.b.loggerLevel` @type ^`int` := v0;
  #L56e45c.  v1.`x1.b.levelInt` @type ^`int` := v2;
  #L56e460.  v1.`x1.b.levelStr` @type ^`java.lang.String` := v3 @kind object;
  #L56e464.  return @kind void;
}
procedure `x1.b` `toLevel`(`int` v1 ) @signature `Lx1/b;.toLevel:(I)Lx1/b;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L56e478.  v0:= `@@x1.b.DEBUG` @type ^`x1.b` @kind object;
  #L56e47c.  call temp:= `toLevel`(v1, v0) @signature `Lx1/b;.toLevel:(ILx1/b;)Lx1/b;` @kind static;
  #L56e482.  v1:= temp @kind object;
  #L56e484.  return v1 @kind object;
}
procedure `x1.b` `toLevel`(`int` v1 , `x1.b` v2 @kind object) @signature `Lx1/b;.toLevel:(ILx1/b;)Lx1/b;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L56e498.  v0:= 5000I;
  #L56e49c.  if v1 == v0 then goto L56e4dc;
  #L56e4a0.  v0:= 10000I;
  #L56e4a4.  if v1 == v0 then goto L56e4d6;
  #L56e4a8.  v0:= 20000I;
  #L56e4ac.  if v1 == v0 then goto L56e4d0;
  #L56e4b0.  v0:= 30000I;
  #L56e4b4.  if v1 == v0 then goto L56e4ca;
  #L56e4b8.  v0:= 40000I;
  #L56e4be.  if v1 == v0 then goto L56e4c4;
  #L56e4c2.  return v2 @kind object;
  #L56e4c4.  v1:= `@@x1.b.ERROR` @type ^`x1.b` @kind object;
  #L56e4c8.  return v1 @kind object;
  #L56e4ca.  v1:= `@@x1.b.WARN` @type ^`x1.b` @kind object;
  #L56e4ce.  return v1 @kind object;
  #L56e4d0.  v1:= `@@x1.b.INFO` @type ^`x1.b` @kind object;
  #L56e4d4.  return v1 @kind object;
  #L56e4d6.  v1:= `@@x1.b.DEBUG` @type ^`x1.b` @kind object;
  #L56e4da.  return v1 @kind object;
  #L56e4dc.  v1:= `@@x1.b.VERBOSE` @type ^`x1.b` @kind object;
  #L56e4e0.  return v1 @kind object;
}
procedure `x1.b` `toLevel`(`java.lang.String` v1 @kind object) @signature `Lx1/b;.toLevel:(Ljava/lang/String;)Lx1/b;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L56e4f4.  v0:= `@@x1.b.DEBUG` @type ^`x1.b` @kind object;
  #L56e4f8.  call temp:= `toLevel`(v1, v0) @signature `Lx1/b;.toLevel:(Ljava/lang/String;Lx1/b;)Lx1/b;` @kind static;
  #L56e4fe.  v1:= temp @kind object;
  #L56e500.  return v1 @kind object;
}
procedure `x1.b` `toLevel`(`java.lang.String` v1 @kind object, `x1.b` v2 @kind object) @signature `Lx1/b;.toLevel:(Ljava/lang/String;Lx1/b;)Lx1/b;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L56e514.  if v1 != 0 then goto L56e51a;
  #L56e518.  return v2 @kind object;
  #L56e51a.  v0:= "ALL" @kind object;
  #L56e51e.  call temp:= `equalsIgnoreCase`(v1, v0) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L56e524.  v0:= temp;
  #L56e526.  if v0 == 0 then goto L56e530;
  #L56e52a.  v1:= `@@x1.b.ALL` @type ^`x1.b` @kind object;
  #L56e52e.  return v1 @kind object;
  #L56e530.  v0:= "TRACE" @kind object;
  #L56e534.  call temp:= `equalsIgnoreCase`(v1, v0) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L56e53a.  v0:= temp;
  #L56e53c.  if v0 == 0 then goto L56e546;
  #L56e540.  v1:= `@@x1.b.VERBOSE` @type ^`x1.b` @kind object;
  #L56e544.  return v1 @kind object;
  #L56e546.  v0:= "DEBUG" @kind object;
  #L56e54a.  call temp:= `equalsIgnoreCase`(v1, v0) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L56e550.  v0:= temp;
  #L56e552.  if v0 == 0 then goto L56e55c;
  #L56e556.  v1:= `@@x1.b.DEBUG` @type ^`x1.b` @kind object;
  #L56e55a.  return v1 @kind object;
  #L56e55c.  v0:= "INFO" @kind object;
  #L56e560.  call temp:= `equalsIgnoreCase`(v1, v0) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L56e566.  v0:= temp;
  #L56e568.  if v0 == 0 then goto L56e572;
  #L56e56c.  v1:= `@@x1.b.INFO` @type ^`x1.b` @kind object;
  #L56e570.  return v1 @kind object;
  #L56e572.  v0:= "WARN" @kind object;
  #L56e576.  call temp:= `equalsIgnoreCase`(v1, v0) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L56e57c.  v0:= temp;
  #L56e57e.  if v0 == 0 then goto L56e588;
  #L56e582.  v1:= `@@x1.b.WARN` @type ^`x1.b` @kind object;
  #L56e586.  return v1 @kind object;
  #L56e588.  v0:= "ERROR" @kind object;
  #L56e58c.  call temp:= `equalsIgnoreCase`(v1, v0) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L56e592.  v0:= temp;
  #L56e594.  if v0 == 0 then goto L56e59e;
  #L56e598.  v1:= `@@x1.b.ERROR` @type ^`x1.b` @kind object;
  #L56e59c.  return v1 @kind object;
  #L56e59e.  v0:= "OFF" @kind object;
  #L56e5a2.  call temp:= `equalsIgnoreCase`(v1, v0) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L56e5a8.  v1:= temp;
  #L56e5aa.  if v1 == 0 then goto L56e5b4;
  #L56e5ae.  v1:= `@@x1.b.OFF` @type ^`x1.b` @kind object;
  #L56e5b2.  return v1 @kind object;
  #L56e5b4.  return v2 @kind object;
}
procedure `x1.b` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lx1/b;.valueOf:(Ljava/lang/String;)Lx1/b;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L56e5c8.  v0:= `@@x1.b.DEBUG` @type ^`x1.b` @kind object;
  #L56e5cc.  call temp:= `toLevel`(v1, v0) @signature `Lx1/b;.toLevel:(Ljava/lang/String;Lx1/b;)Lx1/b;` @kind static;
  #L56e5d2.  v1:= temp @kind object;
  #L56e5d4.  return v1 @kind object;
}
procedure `boolean` `isGreaterOrEqual`(`x1.b` v1 @kind this, `x1.b` v2 @kind object) @signature `Lx1/b;.isGreaterOrEqual:(Lx1/b;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L56e2fc.  v0:= v1.`x1.b.levelInt` @type ^`int`;
  #L56e300.  v2:= v2.`x1.b.levelInt` @type ^`int`;
  #L56e304.  if v0 < v2 then goto L56e30c;
  #L56e308.  v2:= 1I;
  #L56e30a.  goto L56e30e;
  #L56e30c.  v2:= 0I;
  #L56e30e.  return v2;
}
procedure `int` `toInt`(`x1.b` v1 @kind this) @signature `Lx1/b;.toInt:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L56e320.  v0:= v1.`x1.b.levelInt` @type ^`int`;
  #L56e324.  return v0;
}
procedure `java.lang.String` `toString`(`x1.b` v1 @kind this) @signature `Lx1/b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L56e338.  v0:= v1.`x1.b.levelStr` @type ^`java.lang.String` @kind object;
  #L56e33c.  return v0 @kind object;
}
