record `b3.e` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `java.lang.String` `a`(`b3.d` v1 @kind object) @signature `Lb3/e;.a:(Lb3/d;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2a2cd0.  v0:= instanceof @variable v1 @type ^`b3.f` @kind boolean;
  #L2a2cd4.  if v0 == 0 then goto L2a2cfc;
  #L2a2cd8.  v1:= (`b3.f`) v1 @kind object;
  #L2a2cdc.  call temp:= `c`(v1) @signature `Lb3/f;.c:()Ljava/util/List;` @kind virtual;
  #L2a2ce2.  v1:= temp @kind object;
  #L2a2ce4.  v0:= 0I;
  #L2a2ce6.  call temp:= `get`(v1, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2a2cec.  v1:= temp @kind object;
  #L2a2cee.  v1:= (`b3.d`) v1 @kind object;
  #L2a2cf2.  call temp:= `c`(v1) @signature `Lb3/e;.c:(Lb3/d;)Ljava/lang/String;` @kind static;
  #L2a2cf8.  v1:= temp @kind object;
  #L2a2cfa.  return v1 @kind object;
  #L2a2cfc.  call temp:= `c`(v1) @signature `Lb3/e;.c:(Lb3/d;)Ljava/lang/String;` @kind static;
  #L2a2d02.  v1:= temp @kind object;
  #L2a2d04.  return v1 @kind object;
  #L2a2d06.  v1:= Exception @type ^`java.io.UnsupportedEncodingException` @kind object;
  #L2a2d08.  v0:= new `java.lang.RuntimeException`;
  #L2a2d0c.  call `<init>`(v0, v1) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L2a2d12.  throw v0;
  catch `java.io.UnsupportedEncodingException` @[L2a2cd0..L2a2d04] goto L2a2d06;
}
procedure `java.util.List` `b`(`b3.d` v3 @kind object) @signature `Lb3/e;.b:(Lb3/d;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2a2d64.  v0:= instanceof @variable v3 @type ^`b3.f` @kind boolean;
  #L2a2d68.  if v0 == 0 then goto L2a2db8;
  #L2a2d6c.  v3:= (`b3.f`) v3 @kind object;
  #L2a2d70.  call temp:= `c`(v3) @signature `Lb3/f;.c:()Ljava/util/List;` @kind virtual;
  #L2a2d76.  v3:= temp @kind object;
  #L2a2d78.  v0:= new `java.util.ArrayList`;
  #L2a2d7c.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2a2d82.  v1:= temp;
  #L2a2d84.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L2a2d8a.  v1:= 0I;
  #L2a2d8c.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2a2d92.  v2:= temp;
  #L2a2d94.  if v1 >= v2 then goto L2a2de8;
  #L2a2d98.  call temp:= `get`(v3, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2a2d9e.  v2:= temp @kind object;
  #L2a2da0.  v2:= (`b3.d`) v2 @kind object;
  #L2a2da4.  call temp:= `c`(v2) @signature `Lb3/e;.c:(Lb3/d;)Ljava/lang/String;` @kind static;
  #L2a2daa.  v2:= temp @kind object;
  #L2a2dac.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2a2db2.  v1:= v1 + 1;
  #L2a2db6.  goto L2a2d8c;
  #L2a2db8.  v0:= new `java.util.ArrayList`;
  #L2a2dbc.  v1:= 1I;
  #L2a2dbe.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L2a2dc4.  call temp:= `a`(v3) @signature `Lb3/d;.a:()Z` @kind interface;
  #L2a2dca.  v1:= temp;
  #L2a2dcc.  if v1 == 0 then goto L2a2dda;
  #L2a2dd0.  call temp:= `b`(v3) @signature `Lb3/d;.b:()Ljava/lang/String;` @kind interface;
  #L2a2dd6.  v3:= temp @kind object;
  #L2a2dd8.  goto L2a2de2;
  #L2a2dda.  call temp:= `c`(v3) @signature `Lb3/e;.c:(Lb3/d;)Ljava/lang/String;` @kind static;
  #L2a2de0.  v3:= temp @kind object;
  #L2a2de2.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2a2de8.  return v0 @kind object;
  #L2a2dea.  v3:= Exception @type ^`java.io.UnsupportedEncodingException` @kind object;
  #L2a2dec.  v0:= new `java.lang.RuntimeException`;
  #L2a2df0.  call `<init>`(v0, v3) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L2a2df6.  throw v0;
  catch `java.io.UnsupportedEncodingException` @[L2a2d64..L2a2de8] goto L2a2dea;
}
procedure `java.lang.String` `c`(`b3.d` v1 @kind object) @signature `Lb3/e;.c:(Lb3/d;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L2a2d34.  call temp:= `b`(v1) @signature `Lb3/d;.b:()Ljava/lang/String;` @kind interface;
  #L2a2d3a.  v1:= temp @kind object;
  #L2a2d3c.  v0:= "UTF-8" @kind object;
  #L2a2d40.  call temp:= `getBytes`(v1, v0) @signature `Ljava/lang/String;.getBytes:(Ljava/lang/String;)[B` @kind virtual;
  #L2a2d46.  v1:= temp @kind object;
  #L2a2d48.  call temp:= `a`(v1) @signature `Lp3/c;.a:([B)Ljava/lang/String;` @kind static;
  #L2a2d4e.  v1:= temp @kind object;
  #L2a2d50.  return v1 @kind object;
}
