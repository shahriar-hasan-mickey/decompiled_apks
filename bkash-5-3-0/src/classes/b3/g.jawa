record `b3.g` @kind class @AccessFlag PUBLIC extends `b3.a` @kind interface {
}
global `b3.g` `@@b3.g.a` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lb3/g;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;

  #L2a2f54.  return @kind void;
}
procedure `void` `<init>`(`b3.g` v0 @kind this) @signature `Lb3/g;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L2a2f68.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2a2f6e.  return @kind void;
}
procedure `b3.g` `b`() @signature `Lb3/g;.b:()Lb3/g;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2a2f0c.  v0:= constclass @type ^`b3.g` @kind object;
  #L2a2f10.  @monitorenter v0
  #L2a2f12.  v1:= `@@b3.g.a` @type ^`b3.g` @kind object;
  #L2a2f16.  if v1 != 0 then goto L2a2f28;
  #L2a2f1a.  v1:= new `b3.g`;
  #L2a2f1e.  call `<init>`(v1) @signature `Lb3/g;.<init>:()V` @kind direct;
  #L2a2f24.  `@@b3.g.a` @type ^`b3.g` := v1 @kind object;
  #L2a2f28.  v1:= `@@b3.g.a` @type ^`b3.g` @kind object;
  #L2a2f2c.  @monitorexit v0
  #L2a2f2e.  return v1 @kind object;
  #L2a2f30.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2a2f32.  @monitorexit v0
  #L2a2f34.  throw v1;
  catch `java.lang.Throwable` @[L2a2f12..L2a2f2c] goto L2a2f30;
}
procedure `void` `a`(`b3.g` v0 @kind this, `b3.a$a` v1 @kind object, `java.lang.Class` v2 @kind object, `java.lang.String` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lb3/g;.a:(Lb3/a$a;Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L2a2f80.  return @kind void;
}
