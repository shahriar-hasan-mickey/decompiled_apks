record `s1.a` @kind class @AccessFlag PUBLIC extends `s1.b` @kind interface {
  `java.lang.Object` `s1.a.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Method` `s1.a.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `s1.a.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`s1.a` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.reflect.Method` v3 @kind object, `java.lang.Class` v4 @kind object) @signature `Ls1/a;.<init>:(Ljava/lang/Object;Ljava/lang/reflect/Method;Ljava/lang/Class;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L562d4c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L562d52.  v0:= "target cannot be null." @kind object;
  #L562d56.  call `b`(v2, v0) @signature `Lu1/a;.b:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L562d5c.  v0:= "method cannot be null." @kind object;
  #L562d60.  call `b`(v3, v0) @signature `Lu1/a;.b:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L562d66.  v1.`s1.a.a` @type ^`java.lang.Object` := v2 @kind object;
  #L562d6a.  v1.`s1.a.b` @type ^`java.lang.reflect.Method` := v3 @kind object;
  #L562d6e.  v1.`s1.a.c` @type ^`java.lang.Class` := v4 @kind object;
  #L562d72.  v2:= 1I;
  #L562d74.  call `setAccessible`(v3, v2) @signature `Ljava/lang/reflect/Method;.setAccessible:(Z)V` @kind virtual;
  #L562d7a.  return @kind void;
}
procedure `o1.c` `a`(`s1.a` v4 @kind this, `q1.a` v5 @kind object) @signature `Ls1/a;.a:(Lq1/a;)Lo1/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L562ca4.  v0:= v4.`s1.a.c` @type ^`java.lang.Class` @kind object;
  #L562ca8.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L562cae.  v1:= temp @kind object;
  #L562cb0.  call temp:= `isAssignableFrom`(v0, v1) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L562cb6.  v0:= temp;
  #L562cb8.  v1:= 0I;
  #L562cba.  v2:= 1I;
  #L562cbc.  if v0 != 0 then goto L562ce2;
  #L562cc0.  v0:= v4.`s1.a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L562cc4.  v3:= v4.`s1.a.a` @type ^`java.lang.Object` @kind object;
  #L562cc8.  v2:= new `java.lang.Object`[v2];
  #L562ccc.  call temp:= `h`(v5) @signature `Lq1/a;.h:()Ljava/lang/Object;` @kind virtual;
  #L562cd2.  v5:= temp @kind object;
  #L562cd4.  v2[v1]:= v5 @kind object;
  #L562cd8.  call temp:= `invoke`(v0, v3, v2) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L562cde.  v5:= temp @kind object;
  #L562ce0.  goto L562cfa;
  #L562ce2.  v0:= v4.`s1.a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L562ce6.  v3:= v4.`s1.a.a` @type ^`java.lang.Object` @kind object;
  #L562cea.  v2:= new `java.lang.Object`[v2];
  #L562cee.  v2[v1]:= v5 @kind object;
  #L562cf2.  call temp:= `invoke`(v0, v3, v2) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L562cf8.  v5:= temp @kind object;
  #L562cfa.  v0:= instanceof @variable v5 @type ^`o1.c` @kind boolean;
  #L562cfe.  if v0 == 0 then goto L562d08;
  #L562d02.  v5:= (`o1.c`) v5 @kind object;
  #L562d06.  return v5 @kind object;
  #L562d08.  v5:= `@@o1.c.SUCCESS` @type ^`o1.c` @kind object;
  #L562d0c.  return v5 @kind object;
  #L562d0e.  v5:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L562d10.  v0:= new `r1.a`;
  #L562d14.  call `<init>`(v0, v5) @signature `Lr1/a;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L562d1a.  throw v0;
  #L562d1c.  v5:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L562d1e.  v0:= new `r1.a`;
  #L562d22.  call `<init>`(v0, v5) @signature `Lr1/a;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L562d28.  throw v0;
  catch `java.lang.IllegalAccessException` @[L562ca4..L562d06] goto L562d1c;
  catch `java.lang.reflect.InvocationTargetException` @[L562ca4..L562d06] goto L562d0e;
}
