record `r.f` @kind class @AccessFlag PUBLIC extends `r.d` @kind interface {
  `r.d` `r.f.a` @AccessFlag PUBLIC;
  `boolean` `r.f.b` @AccessFlag PUBLIC;
  `boolean` `r.f.c` @AccessFlag PUBLIC;
  `r.p` `r.f.d` @AccessFlag ;
  `r.f$a` `r.f.e` @AccessFlag ;
  `int` `r.f.f` @AccessFlag ;
  `int` `r.f.g` @AccessFlag PUBLIC;
  `int` `r.f.h` @AccessFlag ;
  `r.g` `r.f.i` @AccessFlag ;
  `boolean` `r.f.j` @AccessFlag PUBLIC;
  `java.util.List` `r.f.k` @AccessFlag ;
  `java.util.List` `r.f.l` @AccessFlag ;
}
procedure `void` `<init>`(`r.f` v3 @kind this, `r.p` v4 @kind object) @signature `Lr/f;.<init>:(Lr/p;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L559bc4.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L559bca.  v0:= 0I;
  #L559bcc.  v3.`r.f.a` @type ^`r.d` := v0 @kind object;
  #L559bd0.  v1:= 0I;
  #L559bd2.  v3.`r.f.b` @type ^`boolean` := v1 @kind boolean;
  #L559bd6.  v3.`r.f.c` @type ^`boolean` := v1 @kind boolean;
  #L559bda.  v2:= `@@r.f$a.UNKNOWN` @type ^`r.f$a` @kind object;
  #L559bde.  v3.`r.f.e` @type ^`r.f$a` := v2 @kind object;
  #L559be2.  v2:= 1I;
  #L559be4.  v3.`r.f.h` @type ^`int` := v2;
  #L559be8.  v3.`r.f.i` @type ^`r.g` := v0 @kind object;
  #L559bec.  v3.`r.f.j` @type ^`boolean` := v1 @kind boolean;
  #L559bf0.  v0:= new `java.util.ArrayList`;
  #L559bf4.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L559bfa.  v3.`r.f.k` @type ^`java.util.List` := v0 @kind object;
  #L559bfe.  v0:= new `java.util.ArrayList`;
  #L559c02.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L559c08.  v3.`r.f.l` @type ^`java.util.List` := v0 @kind object;
  #L559c0c.  v3.`r.f.d` @type ^`r.p` := v4 @kind object;
  #L559c10.  return @kind void;
}
procedure `void` `a`(`r.f` v5 @kind this, `r.d` v6 @kind object) @signature `Lr/f;.a:(Lr/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L559cdc.  v6:= v5.`r.f.l` @type ^`java.util.List` @kind object;
  #L559ce0.  call temp:= `iterator`(v6) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L559ce6.  v6:= temp @kind object;
  #L559ce8.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L559cee.  v0:= temp;
  #L559cf0.  if v0 == 0 then goto L559d0a;
  #L559cf4.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L559cfa.  v0:= temp @kind object;
  #L559cfc.  v0:= (`r.f`) v0 @kind object;
  #L559d00.  v0:= v0.`r.f.j` @type ^`boolean` @kind boolean;
  #L559d04.  if v0 != 0 then goto L559ce8;
  #L559d08.  return @kind void;
  #L559d0a.  v6:= 1I;
  #L559d0c.  v5.`r.f.c` @type ^`boolean` := v6 @kind boolean;
  #L559d10.  v0:= v5.`r.f.a` @type ^`r.d` @kind object;
  #L559d14.  if v0 == 0 then goto L559d1e;
  #L559d18.  call `a`(v0, v5) @signature `Lr/d;.a:(Lr/d;)V` @kind interface;
  #L559d1e.  v0:= v5.`r.f.b` @type ^`boolean` @kind boolean;
  #L559d22.  if v0 == 0 then goto L559d32;
  #L559d26.  v6:= v5.`r.f.d` @type ^`r.p` @kind object;
  #L559d2a.  call `a`(v6, v5) @signature `Lr/p;.a:(Lr/d;)V` @kind virtual;
  #L559d30.  return @kind void;
  #L559d32.  v0:= 0I;
  #L559d34.  v1:= 0I;
  #L559d36.  v2:= v5.`r.f.l` @type ^`java.util.List` @kind object;
  #L559d3a.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L559d40.  v2:= temp @kind object;
  #L559d42.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L559d48.  v3:= temp;
  #L559d4a.  if v3 == 0 then goto L559d6c;
  #L559d4e.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L559d54.  v3:= temp @kind object;
  #L559d56.  v3:= (`r.f`) v3 @kind object;
  #L559d5a.  v4:= instanceof @variable v3 @type ^`r.g` @kind boolean;
  #L559d5e.  if v4 == 0 then goto L559d64;
  #L559d62.  goto L559d42;
  #L559d64.  v1:= v1 + 1;
  #L559d68.  v0:= v3 @kind object;
  #L559d6a.  goto L559d42;
  #L559d6c.  if v0 == 0 then goto L559db0;
  #L559d70.  if v1 != v6 then goto L559db0;
  #L559d74.  v6:= v0.`r.f.j` @type ^`boolean` @kind boolean;
  #L559d78.  if v6 == 0 then goto L559db0;
  #L559d7c.  v6:= v5.`r.f.i` @type ^`r.g` @kind object;
  #L559d80.  if v6 == 0 then goto L559da0;
  #L559d84.  v1:= v6.`r.f.j` @type ^`boolean` @kind boolean;
  #L559d88.  if v1 == 0 then goto L559d9e;
  #L559d8c.  v1:= v5.`r.f.h` @type ^`int`;
  #L559d90.  v6:= v6.`r.f.g` @type ^`int`;
  #L559d94.  v1:= v1 * v6 @kind int;
  #L559d98.  v5.`r.f.f` @type ^`int` := v1;
  #L559d9c.  goto L559da0;
  #L559d9e.  return @kind void;
  #L559da0.  v6:= v0.`r.f.g` @type ^`int`;
  #L559da4.  v0:= v5.`r.f.f` @type ^`int`;
  #L559da8.  v6:= v6 + v0 @kind int;
  #L559daa.  call `d`(v5, v6) @signature `Lr/f;.d:(I)V` @kind virtual;
  #L559db0.  v6:= v5.`r.f.a` @type ^`r.d` @kind object;
  #L559db4.  if v6 == 0 then goto L559dbe;
  #L559db8.  call `a`(v6, v5) @signature `Lr/d;.a:(Lr/d;)V` @kind interface;
  #L559dbe.  return @kind void;
}
procedure `void` `b`(`r.f` v1 @kind this, `r.d` v2 @kind object) @signature `Lr/f;.b:(Lr/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L559c24.  v0:= v1.`r.f.k` @type ^`java.util.List` @kind object;
  #L559c28.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L559c2e.  v0:= v1.`r.f.j` @type ^`boolean` @kind boolean;
  #L559c32.  if v0 == 0 then goto L559c3c;
  #L559c36.  call `a`(v2, v2) @signature `Lr/d;.a:(Lr/d;)V` @kind interface;
  #L559c3c.  return @kind void;
}
procedure `void` `c`(`r.f` v1 @kind this) @signature `Lr/f;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L559c50.  v0:= v1.`r.f.l` @type ^`java.util.List` @kind object;
  #L559c54.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L559c5a.  v0:= v1.`r.f.k` @type ^`java.util.List` @kind object;
  #L559c5e.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L559c64.  v0:= 0I;
  #L559c66.  v1.`r.f.j` @type ^`boolean` := v0 @kind boolean;
  #L559c6a.  v1.`r.f.g` @type ^`int` := v0;
  #L559c6e.  v1.`r.f.c` @type ^`boolean` := v0 @kind boolean;
  #L559c72.  v1.`r.f.b` @type ^`boolean` := v0 @kind boolean;
  #L559c76.  return @kind void;
}
procedure `void` `d`(`r.f` v1 @kind this, `int` v2 ) @signature `Lr/f;.d:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L559c88.  v0:= v1.`r.f.j` @type ^`boolean` @kind boolean;
  #L559c8c.  if v0 == 0 then goto L559c92;
  #L559c90.  return @kind void;
  #L559c92.  v0:= 1I;
  #L559c94.  v1.`r.f.j` @type ^`boolean` := v0 @kind boolean;
  #L559c98.  v1.`r.f.g` @type ^`int` := v2;
  #L559c9c.  v2:= v1.`r.f.k` @type ^`java.util.List` @kind object;
  #L559ca0.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L559ca6.  v2:= temp @kind object;
  #L559ca8.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L559cae.  v0:= temp;
  #L559cb0.  if v0 == 0 then goto L559cc8;
  #L559cb4.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L559cba.  v0:= temp @kind object;
  #L559cbc.  v0:= (`r.d`) v0 @kind object;
  #L559cc0.  call `a`(v0, v0) @signature `Lr/d;.a:(Lr/d;)V` @kind interface;
  #L559cc6.  goto L559ca8;
  #L559cc8.  return @kind void;
}
procedure `java.lang.String` `toString`(`r.f` v2 @kind this) @signature `Lr/f;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L559b08.  v0:= new `java.lang.StringBuilder`;
  #L559b0c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L559b12.  v1:= v2.`r.f.d` @type ^`r.p` @kind object;
  #L559b16.  v1:= v1.`r.p.b` @type ^`q.e` @kind object;
  #L559b1a.  call temp:= `v`(v1) @signature `Lq/e;.v:()Ljava/lang/String;` @kind virtual;
  #L559b20.  v1:= temp @kind object;
  #L559b22.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L559b28.  v1:= ":" @kind object;
  #L559b2c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L559b32.  v1:= v2.`r.f.e` @type ^`r.f$a` @kind object;
  #L559b36.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L559b3c.  v1:= "(" @kind object;
  #L559b40.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L559b46.  v1:= v2.`r.f.j` @type ^`boolean` @kind boolean;
  #L559b4a.  if v1 == 0 then goto L559b5c;
  #L559b4e.  v1:= v2.`r.f.g` @type ^`int`;
  #L559b52.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L559b58.  v1:= temp @kind object;
  #L559b5a.  goto L559b60;
  #L559b5c.  v1:= "unresolved" @kind object;
  #L559b60.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L559b66.  v1:= ") <t=" @kind object;
  #L559b6a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L559b70.  v1:= v2.`r.f.l` @type ^`java.util.List` @kind object;
  #L559b74.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L559b7a.  v1:= temp;
  #L559b7c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L559b82.  v1:= ":d=" @kind object;
  #L559b86.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L559b8c.  v1:= v2.`r.f.k` @type ^`java.util.List` @kind object;
  #L559b90.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L559b96.  v1:= temp;
  #L559b98.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L559b9e.  v1:= ">" @kind object;
  #L559ba2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L559ba8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L559bae.  v0:= temp @kind object;
  #L559bb0.  return v0 @kind object;
}
