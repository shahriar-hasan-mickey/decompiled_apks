record `r.g` @kind class @AccessFlag  extends `r.f` @kind class {
  `int` `r.g.m` @AccessFlag PUBLIC;
}
procedure `void` `<init>`(`r.g` v0 @kind this, `r.p` v1 @kind object) @signature `Lr/g;.<init>:(Lr/p;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L559dd0.  call `<init>`(v0, v1) @signature `Lr/f;.<init>:(Lr/p;)V` @kind direct;
  #L559dd6.  v1:= instanceof @variable v1 @type ^`r.l` @kind boolean;
  #L559dda.  if v1 == 0 then goto L559de8;
  #L559dde.  v1:= `@@r.f$a.HORIZONTAL_DIMENSION` @type ^`r.f$a` @kind object;
  #L559de2.  v0.`r.f.e` @type ^`r.f$a` := v1 @kind object;
  #L559de6.  goto L559df0;
  #L559de8.  v1:= `@@r.f$a.VERTICAL_DIMENSION` @type ^`r.f$a` @kind object;
  #L559dec.  v0.`r.f.e` @type ^`r.f$a` := v1 @kind object;
  #L559df0.  return @kind void;
}
procedure `void` `d`(`r.g` v1 @kind this, `int` v2 ) @signature `Lr/g;.d:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L559e04.  v0:= v1.`r.f.j` @type ^`boolean` @kind boolean;
  #L559e08.  if v0 == 0 then goto L559e0e;
  #L559e0c.  return @kind void;
  #L559e0e.  v0:= 1I;
  #L559e10.  v1.`r.f.j` @type ^`boolean` := v0 @kind boolean;
  #L559e14.  v1.`r.f.g` @type ^`int` := v2;
  #L559e18.  v2:= v1.`r.f.k` @type ^`java.util.List` @kind object;
  #L559e1c.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L559e22.  v2:= temp @kind object;
  #L559e24.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L559e2a.  v0:= temp;
  #L559e2c.  if v0 == 0 then goto L559e44;
  #L559e30.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L559e36.  v0:= temp @kind object;
  #L559e38.  v0:= (`r.d`) v0 @kind object;
  #L559e3c.  call `a`(v0, v0) @signature `Lr/d;.a:(Lr/d;)V` @kind interface;
  #L559e42.  goto L559e24;
  #L559e44.  return @kind void;
}
