record `r.p` @kind class @AccessFlag PUBLIC_ABSTRACT extends `r.d` @kind interface {
  `int` `r.p.a` @AccessFlag PUBLIC;
  `q.e` `r.p.b` @AccessFlag ;
  `r.m` `r.p.c` @AccessFlag ;
  `q.e$b` `r.p.d` @AccessFlag PROTECTED;
  `r.g` `r.p.e` @AccessFlag ;
  `int` `r.p.f` @AccessFlag PUBLIC;
  `boolean` `r.p.g` @AccessFlag ;
  `r.f` `r.p.h` @AccessFlag PUBLIC;
  `r.f` `r.p.i` @AccessFlag PUBLIC;
  `r.p$b` `r.p.j` @AccessFlag PROTECTED;
}
procedure `void` `<init>`(`r.p` v1 @kind this, `q.e` v2 @kind object) @signature `Lr/p;.<init>:(Lq/e;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L55ef0c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L55ef12.  v0:= new `r.g`;
  #L55ef16.  call `<init>`(v0, v1) @signature `Lr/g;.<init>:(Lr/p;)V` @kind direct;
  #L55ef1c.  v1.`r.p.e` @type ^`r.g` := v0 @kind object;
  #L55ef20.  v0:= 0I;
  #L55ef22.  v1.`r.p.f` @type ^`int` := v0;
  #L55ef26.  v1.`r.p.g` @type ^`boolean` := v0 @kind boolean;
  #L55ef2a.  v0:= new `r.f`;
  #L55ef2e.  call `<init>`(v0, v1) @signature `Lr/f;.<init>:(Lr/p;)V` @kind direct;
  #L55ef34.  v1.`r.p.h` @type ^`r.f` := v0 @kind object;
  #L55ef38.  v0:= new `r.f`;
  #L55ef3c.  call `<init>`(v0, v1) @signature `Lr/f;.<init>:(Lr/p;)V` @kind direct;
  #L55ef42.  v1.`r.p.i` @type ^`r.f` := v0 @kind object;
  #L55ef46.  v0:= `@@r.p$b.NONE` @type ^`r.p$b` @kind object;
  #L55ef4a.  v1.`r.p.j` @type ^`r.p$b` := v0 @kind object;
  #L55ef4e.  v1.`r.p.b` @type ^`q.e` := v2 @kind object;
  #L55ef52.  return @kind void;
}
procedure `void` `l`(`r.p` v7 @kind this, `int` v8 , `int` v9 ) @signature `Lr/p;.l:(II)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L55efd8.  v0:= v7.`r.p.a` @type ^`int`;
  #L55efdc.  if v0 == 0 then goto L55f100;
  #L55efe0.  v1:= 1I;
  #L55efe2.  if v0 == v1 then goto L55f0dc;
  #L55efe6.  v9:= 2I;
  #L55efe8.  v2:= 0.5F;
  #L55efec.  if v0 == v9 then goto L55f07e;
  #L55eff0.  v9:= 3I;
  #L55eff2.  if v0 == v9 then goto L55effa;
  #L55eff6.  goto L55f112;
  #L55effa.  v0:= v7.`r.p.b` @type ^`q.e` @kind object;
  #L55effe.  v3:= v0.`q.e.d` @type ^`r.l` @kind object;
  #L55f002.  v4:= v3.`r.p.d` @type ^`q.e$b` @kind object;
  #L55f006.  v5:= `@@q.e$b.MATCH_CONSTRAINT` @type ^`q.e$b` @kind object;
  #L55f00a.  if v4 != v5 then goto L55f02e;
  #L55f00e.  v4:= v3.`r.p.a` @type ^`int`;
  #L55f012.  if v4 != v9 then goto L55f02e;
  #L55f016.  v4:= v0.`q.e.e` @type ^`r.n` @kind object;
  #L55f01a.  v6:= v4.`r.p.d` @type ^`q.e$b` @kind object;
  #L55f01e.  if v6 != v5 then goto L55f02e;
  #L55f022.  v4:= v4.`r.p.a` @type ^`int`;
  #L55f026.  if v4 != v9 then goto L55f02e;
  #L55f02a.  goto L55f112;
  #L55f02e.  if v8 != 0 then goto L55f036;
  #L55f032.  v3:= v0.`q.e.e` @type ^`r.n` @kind object;
  #L55f036.  v9:= v3.`r.p.e` @type ^`r.g` @kind object;
  #L55f03a.  v9:= v9.`r.f.j` @type ^`boolean` @kind boolean;
  #L55f03e.  if v9 == 0 then goto L55f112;
  #L55f042.  call temp:= `x`(v0) @signature `Lq/e;.x:()F` @kind virtual;
  #L55f048.  v9:= temp;
  #L55f04a.  if v8 != v1 then goto L55f060;
  #L55f04e.  v8:= v3.`r.p.e` @type ^`r.g` @kind object;
  #L55f052.  v8:= v8.`r.f.g` @type ^`int`;
  #L55f056.  v8:= (`float`) v8 @kind i2f;
  #L55f058.  v8:= v8 / v9 @kind float;
  #L55f05a.  v8:= v8 + v2 @kind float;
  #L55f05c.  v8:= (`int`) v8 @kind f2i;
  #L55f05e.  goto L55f072;
  #L55f060.  v8:= v3.`r.p.e` @type ^`r.g` @kind object;
  #L55f064.  v8:= v8.`r.f.g` @type ^`int`;
  #L55f068.  v8:= (`float`) v8 @kind i2f;
  #L55f06a.  v9:= v9 * v8 @kind float;
  #L55f06e.  v9:= v9 + v2 @kind float;
  #L55f070.  v8:= (`int`) v9 @kind f2i;
  #L55f072.  v9:= v7.`r.p.e` @type ^`r.g` @kind object;
  #L55f076.  call `d`(v9, v8) @signature `Lr/g;.d:(I)V` @kind virtual;
  #L55f07c.  goto L55f112;
  #L55f07e.  v9:= v7.`r.p.b` @type ^`q.e` @kind object;
  #L55f082.  call temp:= `M`(v9) @signature `Lq/e;.M:()Lq/e;` @kind virtual;
  #L55f088.  v9:= temp @kind object;
  #L55f08a.  if v9 == 0 then goto L55f112;
  #L55f08e.  if v8 != 0 then goto L55f098;
  #L55f092.  v9:= v9.`q.e.d` @type ^`r.l` @kind object;
  #L55f096.  goto L55f09c;
  #L55f098.  v9:= v9.`q.e.e` @type ^`r.n` @kind object;
  #L55f09c.  v9:= v9.`r.p.e` @type ^`r.g` @kind object;
  #L55f0a0.  v0:= v9.`r.f.j` @type ^`boolean` @kind boolean;
  #L55f0a4.  if v0 == 0 then goto L55f112;
  #L55f0a8.  v0:= v7.`r.p.b` @type ^`q.e` @kind object;
  #L55f0ac.  if v8 != 0 then goto L55f0b6;
  #L55f0b0.  v0:= v0.`q.e.x` @type ^`float`;
  #L55f0b4.  goto L55f0ba;
  #L55f0b6.  v0:= v0.`q.e.A` @type ^`float`;
  #L55f0ba.  v9:= v9.`r.f.g` @type ^`int`;
  #L55f0be.  v9:= (`float`) v9 @kind i2f;
  #L55f0c0.  v9:= v9 * v0 @kind float;
  #L55f0c4.  v9:= v9 + v2 @kind float;
  #L55f0c6.  v9:= (`int`) v9 @kind f2i;
  #L55f0c8.  v0:= v7.`r.p.e` @type ^`r.g` @kind object;
  #L55f0cc.  call temp:= `g`(v7, v9, v8) @signature `Lr/p;.g:(II)I` @kind virtual;
  #L55f0d2.  v8:= temp;
  #L55f0d4.  call `d`(v0, v8) @signature `Lr/g;.d:(I)V` @kind virtual;
  #L55f0da.  goto L55f112;
  #L55f0dc.  v0:= v7.`r.p.e` @type ^`r.g` @kind object;
  #L55f0e0.  v0:= v0.`r.g.m` @type ^`int`;
  #L55f0e4.  call temp:= `g`(v7, v0, v8) @signature `Lr/p;.g:(II)I` @kind virtual;
  #L55f0ea.  v8:= temp;
  #L55f0ec.  v0:= v7.`r.p.e` @type ^`r.g` @kind object;
  #L55f0f0.  call temp:= `min`(v8, v9) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L55f0f6.  v8:= temp;
  #L55f0f8.  call `d`(v0, v8) @signature `Lr/g;.d:(I)V` @kind virtual;
  #L55f0fe.  goto L55f112;
  #L55f100.  v0:= v7.`r.p.e` @type ^`r.g` @kind object;
  #L55f104.  call temp:= `g`(v7, v9, v8) @signature `Lr/p;.g:(II)I` @kind virtual;
  #L55f10a.  v8:= temp;
  #L55f10c.  call `d`(v0, v8) @signature `Lr/g;.d:(I)V` @kind virtual;
  #L55f112.  return @kind void;
}
procedure `void` `a`(`r.p` v0 @kind this, `r.d` v1 @kind object) @signature `Lr/p;.a:(Lr/d;)V` @AccessFlag PUBLIC {
    temp;

  #L55f124.  return @kind void;
}
procedure `void` `b`(`r.p` v1 @kind this, `r.f` v2 @kind object, `r.f` v3 @kind object, `int` v4 ) @signature `Lr/p;.b:(Lr/f;Lr/f;I)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L55ef64.  v0:= v2.`r.f.l` @type ^`java.util.List` @kind object;
  #L55ef68.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L55ef6e.  v2.`r.f.f` @type ^`int` := v4;
  #L55ef72.  v3:= v3.`r.f.k` @type ^`java.util.List` @kind object;
  #L55ef76.  call temp:= `add`(v3, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L55ef7c.  return @kind void;
}
procedure `void` `c`(`r.p` v2 @kind this, `r.f` v3 @kind object, `r.f` v4 @kind object, `int` v5 , `r.g` v6 @kind object) @signature `Lr/p;.c:(Lr/f;Lr/f;ILr/g;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;

  #L55ef90.  v0:= v3.`r.f.l` @type ^`java.util.List` @kind object;
  #L55ef94.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L55ef9a.  v0:= v3.`r.f.l` @type ^`java.util.List` @kind object;
  #L55ef9e.  v1:= v2.`r.p.e` @type ^`r.g` @kind object;
  #L55efa2.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L55efa8.  v3.`r.f.h` @type ^`int` := v5;
  #L55efac.  v3.`r.f.i` @type ^`r.g` := v6 @kind object;
  #L55efb0.  v4:= v4.`r.f.k` @type ^`java.util.List` @kind object;
  #L55efb4.  call temp:= `add`(v4, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L55efba.  v4:= v6.`r.f.k` @type ^`java.util.List` @kind object;
  #L55efbe.  call temp:= `add`(v4, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L55efc4.  return @kind void;
}
procedure `void` `d`() @signature `Lr/p;.d:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `e`() @signature `Lr/p;.e:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `f`() @signature `Lr/p;.f:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `int` `g`(`r.p` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lr/p;.g:(II)I` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L55ed8c.  if v3 != 0 then goto L55edb6;
  #L55ed90.  v3:= v1.`r.p.b` @type ^`q.e` @kind object;
  #L55ed94.  v0:= v3.`q.e.w` @type ^`int`;
  #L55ed98.  v3:= v3.`q.e.v` @type ^`int`;
  #L55ed9c.  call temp:= `max`(v3, v2) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L55eda2.  v3:= temp;
  #L55eda4.  if v0 <= 0 then goto L55edb0;
  #L55eda8.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L55edae.  v3:= temp;
  #L55edb0.  if v3 == v2 then goto L55eddc;
  #L55edb4.  goto L55edda;
  #L55edb6.  v3:= v1.`r.p.b` @type ^`q.e` @kind object;
  #L55edba.  v0:= v3.`q.e.z` @type ^`int`;
  #L55edbe.  v3:= v3.`q.e.y` @type ^`int`;
  #L55edc2.  call temp:= `max`(v3, v2) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L55edc8.  v3:= temp;
  #L55edca.  if v0 <= 0 then goto L55edd6;
  #L55edce.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L55edd4.  v3:= temp;
  #L55edd6.  if v3 == v2 then goto L55eddc;
  #L55edda.  v2:= v3;
  #L55eddc.  return v2;
}
procedure `r.f` `h`(`r.p` v3 @kind this, `q.d` v4 @kind object) @signature `Lr/p;.h:(Lq/d;)Lr/f;` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L55ee1c.  v4:= v4.`q.d.f` @type ^`q.d` @kind object;
  #L55ee20.  v0:= 0I;
  #L55ee22.  if v4 != 0 then goto L55ee28;
  #L55ee26.  return v0 @kind object;
  #L55ee28.  v1:= v4.`q.d.d` @type ^`q.e` @kind object;
  #L55ee2c.  v4:= v4.`q.d.e` @type ^`q.d$b` @kind object;
  #L55ee30.  v2:= `@@r.p$a.a` @type ^`int`[] @kind object;
  #L55ee34.  call temp:= `ordinal`(v4) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L55ee3a.  v4:= temp;
  #L55ee3c.  v4:= v2[v4];
  #L55ee40.  v2:= 1I;
  #L55ee42.  if v4 == v2 then goto L55ee88;
  #L55ee46.  v2:= 2I;
  #L55ee48.  if v4 == v2 then goto L55ee7e;
  #L55ee4c.  v2:= 3I;
  #L55ee4e.  if v4 == v2 then goto L55ee74;
  #L55ee52.  v2:= 4I;
  #L55ee54.  if v4 == v2 then goto L55ee6a;
  #L55ee58.  v2:= 5I;
  #L55ee5a.  if v4 == v2 then goto L55ee60;
  #L55ee5e.  goto L55ee90;
  #L55ee60.  v4:= v1.`q.e.e` @type ^`r.n` @kind object;
  #L55ee64.  v0:= v4.`r.p.i` @type ^`r.f` @kind object;
  #L55ee68.  goto L55ee90;
  #L55ee6a.  v4:= v1.`q.e.e` @type ^`r.n` @kind object;
  #L55ee6e.  v0:= v4.`r.n.k` @type ^`r.f` @kind object;
  #L55ee72.  goto L55ee90;
  #L55ee74.  v4:= v1.`q.e.e` @type ^`r.n` @kind object;
  #L55ee78.  v0:= v4.`r.p.h` @type ^`r.f` @kind object;
  #L55ee7c.  goto L55ee90;
  #L55ee7e.  v4:= v1.`q.e.d` @type ^`r.l` @kind object;
  #L55ee82.  v0:= v4.`r.p.i` @type ^`r.f` @kind object;
  #L55ee86.  goto L55ee90;
  #L55ee88.  v4:= v1.`q.e.d` @type ^`r.l` @kind object;
  #L55ee8c.  v0:= v4.`r.p.h` @type ^`r.f` @kind object;
  #L55ee90.  return v0 @kind object;
}
procedure `r.f` `i`(`r.p` v2 @kind this, `q.d` v3 @kind object, `int` v4 ) @signature `Lr/p;.i:(Lq/d;I)Lr/f;` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;

  #L55eea4.  v3:= v3.`q.d.f` @type ^`q.d` @kind object;
  #L55eea8.  v0:= 0I;
  #L55eeaa.  if v3 != 0 then goto L55eeb0;
  #L55eeae.  return v0 @kind object;
  #L55eeb0.  v1:= v3.`q.d.d` @type ^`q.e` @kind object;
  #L55eeb4.  if v4 != 0 then goto L55eebe;
  #L55eeb8.  v4:= v1.`q.e.d` @type ^`r.l` @kind object;
  #L55eebc.  goto L55eec2;
  #L55eebe.  v4:= v1.`q.e.e` @type ^`r.n` @kind object;
  #L55eec2.  v3:= v3.`q.d.e` @type ^`q.d$b` @kind object;
  #L55eec6.  v1:= `@@r.p$a.a` @type ^`int`[] @kind object;
  #L55eeca.  call temp:= `ordinal`(v3) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L55eed0.  v3:= temp;
  #L55eed2.  v3:= v1[v3];
  #L55eed6.  v1:= 1I;
  #L55eed8.  if v3 == v1 then goto L55eef6;
  #L55eedc.  v1:= 2I;
  #L55eede.  if v3 == v1 then goto L55eef0;
  #L55eee2.  v1:= 3I;
  #L55eee4.  if v3 == v1 then goto L55eef6;
  #L55eee8.  v1:= 5I;
  #L55eeea.  if v3 == v1 then goto L55eef0;
  #L55eeee.  goto L55eefa;
  #L55eef0.  v0:= v4.`r.p.i` @type ^`r.f` @kind object;
  #L55eef4.  goto L55eefa;
  #L55eef6.  v0:= v4.`r.p.h` @type ^`r.f` @kind object;
  #L55eefa.  return v0 @kind object;
}
procedure `long` `j`(`r.p` v2 @kind this) @signature `Lr/p;.j:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L55edf0.  v0:= v2.`r.p.e` @type ^`r.g` @kind object;
  #L55edf4.  v1:= v0.`r.f.j` @type ^`boolean` @kind boolean;
  #L55edf8.  if v1 == 0 then goto L55ee04;
  #L55edfc.  v0:= v0.`r.f.g` @type ^`int`;
  #L55ee00.  v0:= (`long`) v0 @kind i2l;
  #L55ee02.  return v0 @kind wide;
  #L55ee04.  v0:= 0L;
  #L55ee08.  return v0 @kind wide;
}
procedure `boolean` `k`(`r.p` v1 @kind this) @signature `Lr/p;.k:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L55ed74.  v0:= v1.`r.p.g` @type ^`boolean` @kind boolean;
  #L55ed78.  return v0;
}
procedure `boolean` `m`() @signature `Lr/p;.m:()Z` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `n`(`r.p` v4 @kind this, `r.d` v5 @kind object, `q.d` v6 @kind object, `q.d` v7 @kind object, `int` v8 ) @signature `Lr/p;.n:(Lr/d;Lq/d;Lq/d;I)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L55f138.  call temp:= `h`(v4, v6) @signature `Lr/p;.h:(Lq/d;)Lr/f;` @kind virtual;
  #L55f13e.  v5:= temp @kind object;
  #L55f140.  call temp:= `h`(v4, v7) @signature `Lr/p;.h:(Lq/d;)Lr/f;` @kind virtual;
  #L55f146.  v0:= temp @kind object;
  #L55f148.  v1:= v5.`r.f.j` @type ^`boolean` @kind boolean;
  #L55f14c.  if v1 == 0 then goto L55f232;
  #L55f150.  v1:= v0.`r.f.j` @type ^`boolean` @kind boolean;
  #L55f154.  if v1 != 0 then goto L55f15a;
  #L55f158.  goto L55f232;
  #L55f15a.  v1:= v5.`r.f.g` @type ^`int`;
  #L55f15e.  call temp:= `f`(v6) @signature `Lq/d;.f:()I` @kind virtual;
  #L55f164.  v6:= temp;
  #L55f166.  v1:= v1 + v6 @kind int;
  #L55f168.  v6:= v0.`r.f.g` @type ^`int`;
  #L55f16c.  call temp:= `f`(v7) @signature `Lq/d;.f:()I` @kind virtual;
  #L55f172.  v7:= temp;
  #L55f174.  v6:= v6 - v7 @kind int;
  #L55f176.  v7:= v6 - v1 @kind int;
  #L55f17a.  v2:= v4.`r.p.e` @type ^`r.g` @kind object;
  #L55f17e.  v2:= v2.`r.f.j` @type ^`boolean` @kind boolean;
  #L55f182.  if v2 != 0 then goto L55f198;
  #L55f186.  v2:= v4.`r.p.d` @type ^`q.e$b` @kind object;
  #L55f18a.  v3:= `@@q.e$b.MATCH_CONSTRAINT` @type ^`q.e$b` @kind object;
  #L55f18e.  if v2 != v3 then goto L55f198;
  #L55f192.  call `l`(v4, v8, v7) @signature `Lr/p;.l:(II)V` @kind direct;
  #L55f198.  v2:= v4.`r.p.e` @type ^`r.g` @kind object;
  #L55f19c.  v3:= v2.`r.f.j` @type ^`boolean` @kind boolean;
  #L55f1a0.  if v3 != 0 then goto L55f1a6;
  #L55f1a4.  return @kind void;
  #L55f1a6.  v2:= v2.`r.f.g` @type ^`int`;
  #L55f1aa.  if v2 != v7 then goto L55f1c4;
  #L55f1ae.  v5:= v4.`r.p.h` @type ^`r.f` @kind object;
  #L55f1b2.  call `d`(v5, v1) @signature `Lr/f;.d:(I)V` @kind virtual;
  #L55f1b8.  v5:= v4.`r.p.i` @type ^`r.f` @kind object;
  #L55f1bc.  call `d`(v5, v6) @signature `Lr/f;.d:(I)V` @kind virtual;
  #L55f1c2.  return @kind void;
  #L55f1c4.  v7:= v4.`r.p.b` @type ^`q.e` @kind object;
  #L55f1c8.  if v8 != 0 then goto L55f1d6;
  #L55f1cc.  call temp:= `A`(v7) @signature `Lq/e;.A:()F` @kind virtual;
  #L55f1d2.  v7:= temp;
  #L55f1d4.  goto L55f1de;
  #L55f1d6.  call temp:= `Q`(v7) @signature `Lq/e;.Q:()F` @kind virtual;
  #L55f1dc.  v7:= temp;
  #L55f1de.  v8:= 0.5F;
  #L55f1e2.  if v5 != v0 then goto L55f1f2;
  #L55f1e6.  v1:= v5.`r.f.g` @type ^`int`;
  #L55f1ea.  v6:= v0.`r.f.g` @type ^`int`;
  #L55f1ee.  v7:= 0.5F;
  #L55f1f2.  v6:= v6 - v1 @kind int;
  #L55f1f4.  v5:= v4.`r.p.e` @type ^`r.g` @kind object;
  #L55f1f8.  v5:= v5.`r.f.g` @type ^`int`;
  #L55f1fc.  v6:= v6 - v5 @kind int;
  #L55f1fe.  v5:= v4.`r.p.h` @type ^`r.f` @kind object;
  #L55f202.  v0:= (`float`) v1 @kind i2f;
  #L55f204.  v0:= v0 + v8 @kind float;
  #L55f206.  v6:= (`float`) v6 @kind i2f;
  #L55f208.  v6:= v6 * v7 @kind float;
  #L55f20c.  v0:= v0 + v6 @kind float;
  #L55f20e.  v6:= (`int`) v0 @kind f2i;
  #L55f210.  call `d`(v5, v6) @signature `Lr/f;.d:(I)V` @kind virtual;
  #L55f216.  v5:= v4.`r.p.i` @type ^`r.f` @kind object;
  #L55f21a.  v6:= v4.`r.p.h` @type ^`r.f` @kind object;
  #L55f21e.  v6:= v6.`r.f.g` @type ^`int`;
  #L55f222.  v7:= v4.`r.p.e` @type ^`r.g` @kind object;
  #L55f226.  v7:= v7.`r.f.g` @type ^`int`;
  #L55f22a.  v6:= v6 + v7 @kind int;
  #L55f22c.  call `d`(v5, v6) @signature `Lr/f;.d:(I)V` @kind virtual;
  #L55f232.  return @kind void;
}
procedure `void` `o`(`r.p` v0 @kind this, `r.d` v1 @kind object) @signature `Lr/p;.o:(Lr/d;)V` @AccessFlag PROTECTED {
    temp;

  #L55f244.  return @kind void;
}
procedure `void` `p`(`r.p` v0 @kind this, `r.d` v1 @kind object) @signature `Lr/p;.p:(Lr/d;)V` @AccessFlag PROTECTED {
    temp;

  #L55f258.  return @kind void;
}
