record `r.k` @kind class @AccessFlag  extends `r.p` @kind class {
}
procedure `void` `<init>`(`r.k` v0 @kind this, `q.e` v1 @kind object) @signature `Lr/k;.<init>:(Lq/e;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L55bdec.  call `<init>`(v0, v1) @signature `Lr/p;.<init>:(Lq/e;)V` @kind direct;
  #L55bdf2.  return @kind void;
}
procedure `void` `q`(`r.k` v1 @kind this, `r.f` v2 @kind object) @signature `Lr/k;.q:(Lr/f;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L55be04.  v0:= v1.`r.p.h` @type ^`r.f` @kind object;
  #L55be08.  v0:= v0.`r.f.k` @type ^`java.util.List` @kind object;
  #L55be0c.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L55be12.  v2:= v2.`r.f.l` @type ^`java.util.List` @kind object;
  #L55be16.  v0:= v1.`r.p.h` @type ^`r.f` @kind object;
  #L55be1a.  call temp:= `add`(v2, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L55be20.  return @kind void;
}
procedure `void` `a`(`r.k` v6 @kind this, `r.d` v7 @kind object) @signature `Lr/k;.a:(Lr/d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L55c108.  v7:= v6.`r.p.b` @type ^`q.e` @kind object;
  #L55c10c.  v7:= (`q.a`) v7 @kind object;
  #L55c110.  call temp:= `s1`(v7) @signature `Lq/a;.s1:()I` @kind virtual;
  #L55c116.  v0:= temp;
  #L55c118.  v1:= v6.`r.p.h` @type ^`r.f` @kind object;
  #L55c11c.  v1:= v1.`r.f.l` @type ^`java.util.List` @kind object;
  #L55c120.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L55c126.  v1:= temp @kind object;
  #L55c128.  v2:= -1I;
  #L55c12a.  v3:= 0I;
  #L55c12c.  v4:= -1I;
  #L55c12e.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L55c134.  v5:= temp;
  #L55c136.  if v5 == 0 then goto L55c15c;
  #L55c13a.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L55c140.  v5:= temp @kind object;
  #L55c142.  v5:= (`r.f`) v5 @kind object;
  #L55c146.  v5:= v5.`r.f.g` @type ^`int`;
  #L55c14a.  if v4 == v2 then goto L55c152;
  #L55c14e.  if v5 >= v4 then goto L55c154;
  #L55c152.  v4:= v5;
  #L55c154.  if v3 >= v5 then goto L55c12e;
  #L55c158.  v3:= v5;
  #L55c15a.  goto L55c12e;
  #L55c15c.  if v0 == 0 then goto L55c17e;
  #L55c160.  v1:= 2I;
  #L55c162.  if v0 != v1 then goto L55c168;
  #L55c166.  goto L55c17e;
  #L55c168.  v0:= v6.`r.p.h` @type ^`r.f` @kind object;
  #L55c16c.  call temp:= `t1`(v7) @signature `Lq/a;.t1:()I` @kind virtual;
  #L55c172.  v7:= temp;
  #L55c174.  v3:= v3 + v7 @kind int;
  #L55c176.  call `d`(v0, v3) @signature `Lr/f;.d:(I)V` @kind virtual;
  #L55c17c.  goto L55c192;
  #L55c17e.  v0:= v6.`r.p.h` @type ^`r.f` @kind object;
  #L55c182.  call temp:= `t1`(v7) @signature `Lq/a;.t1:()I` @kind virtual;
  #L55c188.  v7:= temp;
  #L55c18a.  v4:= v4 + v7 @kind int;
  #L55c18c.  call `d`(v0, v4) @signature `Lr/f;.d:(I)V` @kind virtual;
  #L55c192.  return @kind void;
}
procedure `void` `d`(`r.k` v7 @kind this) @signature `Lr/k;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L55be34.  v0:= v7.`r.p.b` @type ^`q.e` @kind object;
  #L55be38.  v1:= instanceof @variable v0 @type ^`q.a` @kind boolean;
  #L55be3c.  if v1 == 0 then goto L55c076;
  #L55be40.  v1:= v7.`r.p.h` @type ^`r.f` @kind object;
  #L55be44.  v2:= 1I;
  #L55be46.  v1.`r.f.b` @type ^`boolean` := v2 @kind boolean;
  #L55be4a.  v0:= (`q.a`) v0 @kind object;
  #L55be4e.  call temp:= `s1`(v0) @signature `Lq/a;.s1:()I` @kind virtual;
  #L55be54.  v1:= temp;
  #L55be56.  call temp:= `r1`(v0) @signature `Lq/a;.r1:()Z` @kind virtual;
  #L55be5c.  v3:= temp;
  #L55be5e.  v4:= 8I;
  #L55be62.  v5:= 0I;
  #L55be64.  if v1 == 0 then goto L55bffa;
  #L55be68.  if v1 == v2 then goto L55bf7c;
  #L55be6c.  v2:= 2I;
  #L55be6e.  if v1 == v2 then goto L55befc;
  #L55be72.  v2:= 3I;
  #L55be74.  if v1 == v2 then goto L55be7c;
  #L55be78.  goto L55c076;
  #L55be7c.  v1:= v7.`r.p.h` @type ^`r.f` @kind object;
  #L55be80.  v2:= `@@r.f$a.BOTTOM` @type ^`r.f$a` @kind object;
  #L55be84.  v1.`r.f.e` @type ^`r.f$a` := v2 @kind object;
  #L55be88.  v1:= v0.`q.j.Q0` @type ^`int`;
  #L55be8c.  if v5 >= v1 then goto L55bed4;
  #L55be90.  v1:= v0.`q.j.P0` @type ^`q.e`[] @kind object;
  #L55be94.  v1:= v1[v5] @kind object;
  #L55be98.  if v3 != 0 then goto L55beaa;
  #L55be9c.  call temp:= `U`(v1) @signature `Lq/e;.U:()I` @kind virtual;
  #L55bea2.  v2:= temp;
  #L55bea4.  if v2 != v4 then goto L55beaa;
  #L55bea8.  goto L55bece;
  #L55beaa.  v1:= v1.`q.e.e` @type ^`r.n` @kind object;
  #L55beae.  v1:= v1.`r.p.i` @type ^`r.f` @kind object;
  #L55beb2.  v2:= v1.`r.f.k` @type ^`java.util.List` @kind object;
  #L55beb6.  v6:= v7.`r.p.h` @type ^`r.f` @kind object;
  #L55beba.  call temp:= `add`(v2, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L55bec0.  v2:= v7.`r.p.h` @type ^`r.f` @kind object;
  #L55bec4.  v2:= v2.`r.f.l` @type ^`java.util.List` @kind object;
  #L55bec8.  call temp:= `add`(v2, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L55bece.  v5:= v5 + 1;
  #L55bed2.  goto L55be88;
  #L55bed4.  v0:= v7.`r.p.b` @type ^`q.e` @kind object;
  #L55bed8.  v0:= v0.`q.e.e` @type ^`r.n` @kind object;
  #L55bedc.  v0:= v0.`r.p.h` @type ^`r.f` @kind object;
  #L55bee0.  call `q`(v7, v0) @signature `Lr/k;.q:(Lr/f;)V` @kind direct;
  #L55bee6.  v0:= v7.`r.p.b` @type ^`q.e` @kind object;
  #L55beea.  v0:= v0.`q.e.e` @type ^`r.n` @kind object;
  #L55beee.  v0:= v0.`r.p.i` @type ^`r.f` @kind object;
  #L55bef2.  call `q`(v7, v0) @signature `Lr/k;.q:(Lr/f;)V` @kind direct;
  #L55bef8.  goto L55c076;
  #L55befc.  v1:= v7.`r.p.h` @type ^`r.f` @kind object;
  #L55bf00.  v2:= `@@r.f$a.TOP` @type ^`r.f$a` @kind object;
  #L55bf04.  v1.`r.f.e` @type ^`r.f$a` := v2 @kind object;
  #L55bf08.  v1:= v0.`q.j.Q0` @type ^`int`;
  #L55bf0c.  if v5 >= v1 then goto L55bf54;
  #L55bf10.  v1:= v0.`q.j.P0` @type ^`q.e`[] @kind object;
  #L55bf14.  v1:= v1[v5] @kind object;
  #L55bf18.  if v3 != 0 then goto L55bf2a;
  #L55bf1c.  call temp:= `U`(v1) @signature `Lq/e;.U:()I` @kind virtual;
  #L55bf22.  v2:= temp;
  #L55bf24.  if v2 != v4 then goto L55bf2a;
  #L55bf28.  goto L55bf4e;
  #L55bf2a.  v1:= v1.`q.e.e` @type ^`r.n` @kind object;
  #L55bf2e.  v1:= v1.`r.p.h` @type ^`r.f` @kind object;
  #L55bf32.  v2:= v1.`r.f.k` @type ^`java.util.List` @kind object;
  #L55bf36.  v6:= v7.`r.p.h` @type ^`r.f` @kind object;
  #L55bf3a.  call temp:= `add`(v2, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L55bf40.  v2:= v7.`r.p.h` @type ^`r.f` @kind object;
  #L55bf44.  v2:= v2.`r.f.l` @type ^`java.util.List` @kind object;
  #L55bf48.  call temp:= `add`(v2, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L55bf4e.  v5:= v5 + 1;
  #L55bf52.  goto L55bf08;
  #L55bf54.  v0:= v7.`r.p.b` @type ^`q.e` @kind object;
  #L55bf58.  v0:= v0.`q.e.e` @type ^`r.n` @kind object;
  #L55bf5c.  v0:= v0.`r.p.h` @type ^`r.f` @kind object;
  #L55bf60.  call `q`(v7, v0) @signature `Lr/k;.q:(Lr/f;)V` @kind direct;
  #L55bf66.  v0:= v7.`r.p.b` @type ^`q.e` @kind object;
  #L55bf6a.  v0:= v0.`q.e.e` @type ^`r.n` @kind object;
  #L55bf6e.  v0:= v0.`r.p.i` @type ^`r.f` @kind object;
  #L55bf72.  call `q`(v7, v0) @signature `Lr/k;.q:(Lr/f;)V` @kind direct;
  #L55bf78.  goto L55c076;
  #L55bf7c.  v1:= v7.`r.p.h` @type ^`r.f` @kind object;
  #L55bf80.  v2:= `@@r.f$a.RIGHT` @type ^`r.f$a` @kind object;
  #L55bf84.  v1.`r.f.e` @type ^`r.f$a` := v2 @kind object;
  #L55bf88.  v1:= v0.`q.j.Q0` @type ^`int`;
  #L55bf8c.  if v5 >= v1 then goto L55bfd4;
  #L55bf90.  v1:= v0.`q.j.P0` @type ^`q.e`[] @kind object;
  #L55bf94.  v1:= v1[v5] @kind object;
  #L55bf98.  if v3 != 0 then goto L55bfaa;
  #L55bf9c.  call temp:= `U`(v1) @signature `Lq/e;.U:()I` @kind virtual;
  #L55bfa2.  v2:= temp;
  #L55bfa4.  if v2 != v4 then goto L55bfaa;
  #L55bfa8.  goto L55bfce;
  #L55bfaa.  v1:= v1.`q.e.d` @type ^`r.l` @kind object;
  #L55bfae.  v1:= v1.`r.p.i` @type ^`r.f` @kind object;
  #L55bfb2.  v2:= v1.`r.f.k` @type ^`java.util.List` @kind object;
  #L55bfb6.  v6:= v7.`r.p.h` @type ^`r.f` @kind object;
  #L55bfba.  call temp:= `add`(v2, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L55bfc0.  v2:= v7.`r.p.h` @type ^`r.f` @kind object;
  #L55bfc4.  v2:= v2.`r.f.l` @type ^`java.util.List` @kind object;
  #L55bfc8.  call temp:= `add`(v2, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L55bfce.  v5:= v5 + 1;
  #L55bfd2.  goto L55bf88;
  #L55bfd4.  v0:= v7.`r.p.b` @type ^`q.e` @kind object;
  #L55bfd8.  v0:= v0.`q.e.d` @type ^`r.l` @kind object;
  #L55bfdc.  v0:= v0.`r.p.h` @type ^`r.f` @kind object;
  #L55bfe0.  call `q`(v7, v0) @signature `Lr/k;.q:(Lr/f;)V` @kind direct;
  #L55bfe6.  v0:= v7.`r.p.b` @type ^`q.e` @kind object;
  #L55bfea.  v0:= v0.`q.e.d` @type ^`r.l` @kind object;
  #L55bfee.  v0:= v0.`r.p.i` @type ^`r.f` @kind object;
  #L55bff2.  call `q`(v7, v0) @signature `Lr/k;.q:(Lr/f;)V` @kind direct;
  #L55bff8.  goto L55c076;
  #L55bffa.  v1:= v7.`r.p.h` @type ^`r.f` @kind object;
  #L55bffe.  v2:= `@@r.f$a.LEFT` @type ^`r.f$a` @kind object;
  #L55c002.  v1.`r.f.e` @type ^`r.f$a` := v2 @kind object;
  #L55c006.  v1:= v0.`q.j.Q0` @type ^`int`;
  #L55c00a.  if v5 >= v1 then goto L55c052;
  #L55c00e.  v1:= v0.`q.j.P0` @type ^`q.e`[] @kind object;
  #L55c012.  v1:= v1[v5] @kind object;
  #L55c016.  if v3 != 0 then goto L55c028;
  #L55c01a.  call temp:= `U`(v1) @signature `Lq/e;.U:()I` @kind virtual;
  #L55c020.  v2:= temp;
  #L55c022.  if v2 != v4 then goto L55c028;
  #L55c026.  goto L55c04c;
  #L55c028.  v1:= v1.`q.e.d` @type ^`r.l` @kind object;
  #L55c02c.  v1:= v1.`r.p.h` @type ^`r.f` @kind object;
  #L55c030.  v2:= v1.`r.f.k` @type ^`java.util.List` @kind object;
  #L55c034.  v6:= v7.`r.p.h` @type ^`r.f` @kind object;
  #L55c038.  call temp:= `add`(v2, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L55c03e.  v2:= v7.`r.p.h` @type ^`r.f` @kind object;
  #L55c042.  v2:= v2.`r.f.l` @type ^`java.util.List` @kind object;
  #L55c046.  call temp:= `add`(v2, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L55c04c.  v5:= v5 + 1;
  #L55c050.  goto L55c006;
  #L55c052.  v0:= v7.`r.p.b` @type ^`q.e` @kind object;
  #L55c056.  v0:= v0.`q.e.d` @type ^`r.l` @kind object;
  #L55c05a.  v0:= v0.`r.p.h` @type ^`r.f` @kind object;
  #L55c05e.  call `q`(v7, v0) @signature `Lr/k;.q:(Lr/f;)V` @kind direct;
  #L55c064.  v0:= v7.`r.p.b` @type ^`q.e` @kind object;
  #L55c068.  v0:= v0.`q.e.d` @type ^`r.l` @kind object;
  #L55c06c.  v0:= v0.`r.p.i` @type ^`r.f` @kind object;
  #L55c070.  call `q`(v7, v0) @signature `Lr/k;.q:(Lr/f;)V` @kind direct;
  #L55c076.  return @kind void;
}
procedure `void` `e`(`r.k` v2 @kind this) @signature `Lr/k;.e:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L55c088.  v0:= v2.`r.p.b` @type ^`q.e` @kind object;
  #L55c08c.  v1:= instanceof @variable v0 @type ^`q.a` @kind boolean;
  #L55c090.  if v1 == 0 then goto L55c0d2;
  #L55c094.  v0:= (`q.a`) v0 @kind object;
  #L55c098.  call temp:= `s1`(v0) @signature `Lq/a;.s1:()I` @kind virtual;
  #L55c09e.  v0:= temp;
  #L55c0a0.  if v0 == 0 then goto L55c0c0;
  #L55c0a4.  v1:= 1I;
  #L55c0a6.  if v0 != v1 then goto L55c0ac;
  #L55c0aa.  goto L55c0c0;
  #L55c0ac.  v0:= v2.`r.p.b` @type ^`q.e` @kind object;
  #L55c0b0.  v1:= v2.`r.p.h` @type ^`r.f` @kind object;
  #L55c0b4.  v1:= v1.`r.f.g` @type ^`int`;
  #L55c0b8.  call `k1`(v0, v1) @signature `Lq/e;.k1:(I)V` @kind virtual;
  #L55c0be.  goto L55c0d2;
  #L55c0c0.  v0:= v2.`r.p.b` @type ^`q.e` @kind object;
  #L55c0c4.  v1:= v2.`r.p.h` @type ^`r.f` @kind object;
  #L55c0c8.  v1:= v1.`r.f.g` @type ^`int`;
  #L55c0cc.  call `j1`(v0, v1) @signature `Lq/e;.j1:(I)V` @kind virtual;
  #L55c0d2.  return @kind void;
}
procedure `void` `f`(`r.k` v1 @kind this) @signature `Lr/k;.f:()V` @AccessFlag  {
    temp;
    v0;

  #L55c0e4.  v0:= 0I;
  #L55c0e6.  v1.`r.p.c` @type ^`r.m` := v0 @kind object;
  #L55c0ea.  v0:= v1.`r.p.h` @type ^`r.f` @kind object;
  #L55c0ee.  call `c`(v0) @signature `Lr/f;.c:()V` @kind virtual;
  #L55c0f4.  return @kind void;
}
procedure `boolean` `m`(`r.k` v1 @kind this) @signature `Lr/k;.m:()Z` @AccessFlag  {
    temp;
    v0;

  #L55bdd8.  v0:= 0I;
  #L55bdda.  return v0;
}
