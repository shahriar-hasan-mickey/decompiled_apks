record `r.m` @kind class @AccessFlag  {
  `r.p` `r.m.a` @AccessFlag ;
  `java.util.ArrayList` `r.m.b` @AccessFlag ;
}
global `int` `@@r.m.c` @AccessFlag PUBLIC_STATIC;
procedure `void` `<init>`(`r.m` v0 @kind this, `r.p` v1 @kind object, `int` v2 ) @signature `Lr/m;.<init>:(Lr/p;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L55d800.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L55d806.  v2:= 0I;
  #L55d808.  v0.`r.m.a` @type ^`r.p` := v2 @kind object;
  #L55d80c.  v2:= new `java.util.ArrayList`;
  #L55d810.  call `<init>`(v2) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L55d816.  v0.`r.m.b` @type ^`java.util.ArrayList` := v2 @kind object;
  #L55d81a.  v2:= `@@r.m.c` @type ^`int`;
  #L55d81e.  v2:= v2 + 1;
  #L55d822.  `@@r.m.c` @type ^`int` := v2;
  #L55d826.  v0.`r.m.a` @type ^`r.p` := v1 @kind object;
  #L55d82a.  return @kind void;
}
procedure `long` `c`(`r.m` v8 @kind this, `r.f` v9 @kind object, `long` v10 ) @signature `Lr/m;.c:(Lr/f;J)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L55d698.  v0:= v9.`r.f.d` @type ^`r.p` @kind object;
  #L55d69c.  v1:= instanceof @variable v0 @type ^`r.k` @kind boolean;
  #L55d6a0.  if v1 == 0 then goto L55d6a6;
  #L55d6a4.  return v10 @kind wide;
  #L55d6a6.  v1:= v9.`r.f.k` @type ^`java.util.List` @kind object;
  #L55d6aa.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L55d6b0.  v1:= temp;
  #L55d6b2.  v2:= 0I;
  #L55d6b4.  v3:= v10 @kind wide;
  #L55d6b6.  if v2 >= v1 then goto L55d6fe;
  #L55d6ba.  v5:= v9.`r.f.k` @type ^`java.util.List` @kind object;
  #L55d6be.  call temp:= `get`(v5, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L55d6c4.  v5:= temp @kind object;
  #L55d6c6.  v5:= (`r.d`) v5 @kind object;
  #L55d6ca.  v6:= instanceof @variable v5 @type ^`r.f` @kind boolean;
  #L55d6ce.  if v6 == 0 then goto L55d6f8;
  #L55d6d2.  v5:= (`r.f`) v5 @kind object;
  #L55d6d6.  v6:= v5.`r.f.d` @type ^`r.p` @kind object;
  #L55d6da.  if v6 != v0 then goto L55d6e0;
  #L55d6de.  goto L55d6f8;
  #L55d6e0.  v6:= v5.`r.f.f` @type ^`int`;
  #L55d6e4.  v6:= (`long`) v6 @kind i2l;
  #L55d6e6.  v6:= v6 + v10 @kind long;
  #L55d6e8.  call temp:= `c`(v8, v5, v6) @signature `Lr/m;.c:(Lr/f;J)J` @kind direct;
  #L55d6ee.  v5:= temp @kind wide;
  #L55d6f0.  call temp:= `min`(v3, v5) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L55d6f6.  v3:= temp @kind wide;
  #L55d6f8.  v2:= v2 + 1;
  #L55d6fc.  goto L55d6b6;
  #L55d6fe.  v1:= v0.`r.p.i` @type ^`r.f` @kind object;
  #L55d702.  if v9 != v1 then goto L55d738;
  #L55d706.  call temp:= `j`(v0) @signature `Lr/p;.j:()J` @kind virtual;
  #L55d70c.  v1:= temp @kind wide;
  #L55d70e.  v9:= v0.`r.p.h` @type ^`r.f` @kind object;
  #L55d712.  v10:= v10 - v1 @kind long;
  #L55d714.  call temp:= `c`(v8, v9, v10) @signature `Lr/m;.c:(Lr/f;J)J` @kind direct;
  #L55d71a.  v1:= temp @kind wide;
  #L55d71c.  call temp:= `min`(v3, v1) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L55d722.  v1:= temp @kind wide;
  #L55d724.  v9:= v0.`r.p.h` @type ^`r.f` @kind object;
  #L55d728.  v9:= v9.`r.f.f` @type ^`int`;
  #L55d72c.  v3:= (`long`) v9 @kind i2l;
  #L55d72e.  v10:= v10 - v3 @kind long;
  #L55d730.  call temp:= `min`(v1, v10) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L55d736.  v3:= temp @kind wide;
  #L55d738.  return v3 @kind wide;
}
procedure `long` `d`(`r.m` v8 @kind this, `r.f` v9 @kind object, `long` v10 ) @signature `Lr/m;.d:(Lr/f;J)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L55d74c.  v0:= v9.`r.f.d` @type ^`r.p` @kind object;
  #L55d750.  v1:= instanceof @variable v0 @type ^`r.k` @kind boolean;
  #L55d754.  if v1 == 0 then goto L55d75a;
  #L55d758.  return v10 @kind wide;
  #L55d75a.  v1:= v9.`r.f.k` @type ^`java.util.List` @kind object;
  #L55d75e.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L55d764.  v1:= temp;
  #L55d766.  v2:= 0I;
  #L55d768.  v3:= v10 @kind wide;
  #L55d76a.  if v2 >= v1 then goto L55d7b2;
  #L55d76e.  v5:= v9.`r.f.k` @type ^`java.util.List` @kind object;
  #L55d772.  call temp:= `get`(v5, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L55d778.  v5:= temp @kind object;
  #L55d77a.  v5:= (`r.d`) v5 @kind object;
  #L55d77e.  v6:= instanceof @variable v5 @type ^`r.f` @kind boolean;
  #L55d782.  if v6 == 0 then goto L55d7ac;
  #L55d786.  v5:= (`r.f`) v5 @kind object;
  #L55d78a.  v6:= v5.`r.f.d` @type ^`r.p` @kind object;
  #L55d78e.  if v6 != v0 then goto L55d794;
  #L55d792.  goto L55d7ac;
  #L55d794.  v6:= v5.`r.f.f` @type ^`int`;
  #L55d798.  v6:= (`long`) v6 @kind i2l;
  #L55d79a.  v6:= v6 + v10 @kind long;
  #L55d79c.  call temp:= `d`(v8, v5, v6) @signature `Lr/m;.d:(Lr/f;J)J` @kind direct;
  #L55d7a2.  v5:= temp @kind wide;
  #L55d7a4.  call temp:= `max`(v3, v5) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L55d7aa.  v3:= temp @kind wide;
  #L55d7ac.  v2:= v2 + 1;
  #L55d7b0.  goto L55d76a;
  #L55d7b2.  v1:= v0.`r.p.h` @type ^`r.f` @kind object;
  #L55d7b6.  if v9 != v1 then goto L55d7ec;
  #L55d7ba.  call temp:= `j`(v0) @signature `Lr/p;.j:()J` @kind virtual;
  #L55d7c0.  v1:= temp @kind wide;
  #L55d7c2.  v9:= v0.`r.p.i` @type ^`r.f` @kind object;
  #L55d7c6.  v10:= v10 + v1 @kind long;
  #L55d7c8.  call temp:= `d`(v8, v9, v10) @signature `Lr/m;.d:(Lr/f;J)J` @kind direct;
  #L55d7ce.  v1:= temp @kind wide;
  #L55d7d0.  call temp:= `max`(v3, v1) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L55d7d6.  v1:= temp @kind wide;
  #L55d7d8.  v9:= v0.`r.p.i` @type ^`r.f` @kind object;
  #L55d7dc.  v9:= v9.`r.f.f` @type ^`int`;
  #L55d7e0.  v3:= (`long`) v9 @kind i2l;
  #L55d7e2.  v10:= v10 - v3 @kind long;
  #L55d7e4.  call temp:= `max`(v1, v10) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L55d7ea.  v3:= temp @kind wide;
  #L55d7ec.  return v3 @kind wide;
}
procedure `void` `a`(`r.m` v1 @kind this, `r.p` v2 @kind object) @signature `Lr/m;.a:(Lr/p;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L55d83c.  v0:= v1.`r.m.b` @type ^`java.util.ArrayList` @kind object;
  #L55d840.  call temp:= `add`(v0, v2) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L55d846.  return @kind void;
}
procedure `long` `b`(`r.m` v12 @kind this, `q.f` v13 @kind object, `int` v14 ) @signature `Lr/m;.b:(Lq/f;I)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L55d4a0.  v0:= v12.`r.m.a` @type ^`r.p` @kind object;
  #L55d4a4.  v1:= instanceof @variable v0 @type ^`r.c` @kind boolean;
  #L55d4a8.  v2:= 0L;
  #L55d4ac.  if v1 == 0 then goto L55d4c0;
  #L55d4b0.  v1:= v0 @kind object;
  #L55d4b2.  v1:= (`r.c`) v1 @kind object;
  #L55d4b6.  v1:= v1.`r.p.f` @type ^`int`;
  #L55d4ba.  if v1 == v14 then goto L55d4d8;
  #L55d4be.  return v2 @kind wide;
  #L55d4c0.  if v14 != 0 then goto L55d4ce;
  #L55d4c4.  v1:= instanceof @variable v0 @type ^`r.l` @kind boolean;
  #L55d4c8.  if v1 != 0 then goto L55d4d8;
  #L55d4cc.  return v2 @kind wide;
  #L55d4ce.  v1:= instanceof @variable v0 @type ^`r.n` @kind boolean;
  #L55d4d2.  if v1 != 0 then goto L55d4d8;
  #L55d4d6.  return v2 @kind wide;
  #L55d4d8.  if v14 != 0 then goto L55d4e2;
  #L55d4dc.  v1:= v13.`q.e.d` @type ^`r.l` @kind object;
  #L55d4e0.  goto L55d4e6;
  #L55d4e2.  v1:= v13.`q.e.e` @type ^`r.n` @kind object;
  #L55d4e6.  v1:= v1.`r.p.h` @type ^`r.f` @kind object;
  #L55d4ea.  if v14 != 0 then goto L55d4f4;
  #L55d4ee.  v13:= v13.`q.e.d` @type ^`r.l` @kind object;
  #L55d4f2.  goto L55d4f8;
  #L55d4f4.  v13:= v13.`q.e.e` @type ^`r.n` @kind object;
  #L55d4f8.  v13:= v13.`r.p.i` @type ^`r.f` @kind object;
  #L55d4fc.  v0:= v0.`r.p.h` @type ^`r.f` @kind object;
  #L55d500.  v0:= v0.`r.f.l` @type ^`java.util.List` @kind object;
  #L55d504.  call temp:= `contains`(v0, v1) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L55d50a.  v0:= temp;
  #L55d50c.  v1:= v12.`r.m.a` @type ^`r.p` @kind object;
  #L55d510.  v1:= v1.`r.p.i` @type ^`r.f` @kind object;
  #L55d514.  v1:= v1.`r.f.l` @type ^`java.util.List` @kind object;
  #L55d518.  call temp:= `contains`(v1, v13) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L55d51e.  v13:= temp;
  #L55d520.  v1:= v12.`r.m.a` @type ^`r.p` @kind object;
  #L55d524.  call temp:= `j`(v1) @signature `Lr/p;.j:()J` @kind virtual;
  #L55d52a.  v4:= temp @kind wide;
  #L55d52c.  if v0 == 0 then goto L55d5f0;
  #L55d530.  if v13 == 0 then goto L55d5f0;
  #L55d534.  v13:= v12.`r.m.a` @type ^`r.p` @kind object;
  #L55d538.  v13:= v13.`r.p.h` @type ^`r.f` @kind object;
  #L55d53c.  call temp:= `d`(v12, v13, v2) @signature `Lr/m;.d:(Lr/f;J)J` @kind direct;
  #L55d542.  v0:= temp @kind wide;
  #L55d544.  v13:= v12.`r.m.a` @type ^`r.p` @kind object;
  #L55d548.  v13:= v13.`r.p.i` @type ^`r.f` @kind object;
  #L55d54c.  call temp:= `c`(v12, v13, v2) @signature `Lr/m;.c:(Lr/f;J)J` @kind direct;
  #L55d552.  v6:= temp @kind wide;
  #L55d554.  v0:= v0 - v4 @kind long;
  #L55d556.  v13:= v12.`r.m.a` @type ^`r.p` @kind object;
  #L55d55a.  v8:= v13.`r.p.i` @type ^`r.f` @kind object;
  #L55d55e.  v8:= v8.`r.f.f` @type ^`int`;
  #L55d562.  v9:= -v8 @kind int;
  #L55d564.  v9:= (`long`) v9 @kind i2l;
  #L55d566.  v11:= lcmp(v0, v9);
  #L55d56a.  if v11 < 0 then goto L55d572;
  #L55d56e.  v8:= (`long`) v8 @kind i2l;
  #L55d570.  v0:= v0 + v8 @kind long;
  #L55d572.  v6:= -v6 @kind long;
  #L55d574.  v6:= v6 - v4 @kind long;
  #L55d576.  v8:= v13.`r.p.h` @type ^`r.f` @kind object;
  #L55d57a.  v8:= v8.`r.f.f` @type ^`int`;
  #L55d57e.  v9:= (`long`) v8 @kind i2l;
  #L55d580.  v6:= v6 - v9 @kind long;
  #L55d582.  v9:= (`long`) v8 @kind i2l;
  #L55d584.  v11:= lcmp(v6, v9);
  #L55d588.  if v11 < 0 then goto L55d590;
  #L55d58c.  v8:= (`long`) v8 @kind i2l;
  #L55d58e.  v6:= v6 - v8 @kind long;
  #L55d590.  v13:= v13.`r.p.b` @type ^`q.e` @kind object;
  #L55d594.  call temp:= `s`(v13, v14) @signature `Lq/e;.s:(I)F` @kind virtual;
  #L55d59a.  v13:= temp;
  #L55d59c.  v14:= 0I;
  #L55d59e.  v8:= 1.0F;
  #L55d5a2.  v14:= fcmpl(v13, v14);
  #L55d5a6.  if v14 <= 0 then goto L55d5ba;
  #L55d5aa.  v14:= (`float`) v6 @kind l2f;
  #L55d5ac.  v14:= v14 / v13 @kind float;
  #L55d5ae.  v0:= (`float`) v0 @kind l2f;
  #L55d5b0.  v1:= v8 - v13 @kind float;
  #L55d5b4.  v0:= v0 / v1 @kind float;
  #L55d5b6.  v14:= v14 + v0 @kind float;
  #L55d5b8.  v2:= (`long`) v14 @kind f2l;
  #L55d5ba.  v14:= (`float`) v2 @kind l2f;
  #L55d5bc.  v0:= v14 * v13 @kind float;
  #L55d5c0.  v1:= 0.5F;
  #L55d5c4.  v0:= v0 + v1 @kind float;
  #L55d5c6.  v2:= (`long`) v0 @kind f2l;
  #L55d5c8.  v8:= v8 - v13 @kind float;
  #L55d5ca.  v14:= v14 * v8 @kind float;
  #L55d5ce.  v14:= v14 + v1 @kind float;
  #L55d5d0.  v13:= (`long`) v14 @kind f2l;
  #L55d5d2.  v2:= v2 + v4 @kind long;
  #L55d5d4.  v2:= v2 + v13 @kind long;
  #L55d5d6.  v13:= v12.`r.m.a` @type ^`r.p` @kind object;
  #L55d5da.  v14:= v13.`r.p.h` @type ^`r.f` @kind object;
  #L55d5de.  v14:= v14.`r.f.f` @type ^`int`;
  #L55d5e2.  v0:= (`long`) v14 @kind i2l;
  #L55d5e4.  v0:= v0 + v2 @kind long;
  #L55d5e6.  v13:= v13.`r.p.i` @type ^`r.f` @kind object;
  #L55d5ea.  v13:= v13.`r.f.f` @type ^`int`;
  #L55d5ee.  goto L55d680;
  #L55d5f0.  if v0 == 0 then goto L55d624;
  #L55d5f4.  v13:= v12.`r.m.a` @type ^`r.p` @kind object;
  #L55d5f8.  v13:= v13.`r.p.h` @type ^`r.f` @kind object;
  #L55d5fc.  v14:= v13.`r.f.f` @type ^`int`;
  #L55d600.  v0:= (`long`) v14 @kind i2l;
  #L55d602.  call temp:= `d`(v12, v13, v0) @signature `Lr/m;.d:(Lr/f;J)J` @kind direct;
  #L55d608.  v13:= temp @kind wide;
  #L55d60a.  v0:= v12.`r.m.a` @type ^`r.p` @kind object;
  #L55d60e.  v0:= v0.`r.p.h` @type ^`r.f` @kind object;
  #L55d612.  v0:= v0.`r.f.f` @type ^`int`;
  #L55d616.  v0:= (`long`) v0 @kind i2l;
  #L55d618.  v0:= v0 + v4 @kind long;
  #L55d61a.  call temp:= `max`(v13, v0) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L55d620.  v0:= temp @kind wide;
  #L55d622.  goto L55d684;
  #L55d624.  if v13 == 0 then goto L55d65c;
  #L55d628.  v13:= v12.`r.m.a` @type ^`r.p` @kind object;
  #L55d62c.  v13:= v13.`r.p.i` @type ^`r.f` @kind object;
  #L55d630.  v14:= v13.`r.f.f` @type ^`int`;
  #L55d634.  v0:= (`long`) v14 @kind i2l;
  #L55d636.  call temp:= `c`(v12, v13, v0) @signature `Lr/m;.c:(Lr/f;J)J` @kind direct;
  #L55d63c.  v13:= temp @kind wide;
  #L55d63e.  v0:= v12.`r.m.a` @type ^`r.p` @kind object;
  #L55d642.  v0:= v0.`r.p.i` @type ^`r.f` @kind object;
  #L55d646.  v0:= v0.`r.f.f` @type ^`int`;
  #L55d64a.  v0:= -v0 @kind int;
  #L55d64c.  v0:= (`long`) v0 @kind i2l;
  #L55d64e.  v0:= v0 + v4 @kind long;
  #L55d650.  v13:= -v13 @kind long;
  #L55d652.  call temp:= `max`(v13, v0) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L55d658.  v0:= temp @kind wide;
  #L55d65a.  goto L55d684;
  #L55d65c.  v13:= v12.`r.m.a` @type ^`r.p` @kind object;
  #L55d660.  v14:= v13.`r.p.h` @type ^`r.f` @kind object;
  #L55d664.  v14:= v14.`r.f.f` @type ^`int`;
  #L55d668.  v0:= (`long`) v14 @kind i2l;
  #L55d66a.  call temp:= `j`(v13) @signature `Lr/p;.j:()J` @kind virtual;
  #L55d670.  v13:= temp @kind wide;
  #L55d672.  v0:= v0 + v13 @kind long;
  #L55d674.  v13:= v12.`r.m.a` @type ^`r.p` @kind object;
  #L55d678.  v13:= v13.`r.p.i` @type ^`r.f` @kind object;
  #L55d67c.  v13:= v13.`r.f.f` @type ^`int`;
  #L55d680.  v13:= (`long`) v13 @kind i2l;
  #L55d682.  v0:= v0 - v13 @kind long;
  #L55d684.  return v0 @kind wide;
}
