record `y4.m` @kind class @AccessFlag PUBLIC extends `java.util.concurrent.ThreadFactory` @kind interface {
  `int` `y4.m.g` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `y4.m.h` @AccessFlag PRIVATE_FINAL;
  `boolean` `y4.m.i` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `y4.m.j` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`y4.m` v2 @kind this, `int` v3 , `java.lang.String` v4 @kind object, `boolean` v5 ) @signature `Ly4/m;.<init>:(ILjava/lang/String;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L576adc.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L576ae2.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L576ae6.  v1:= 1I;
  #L576ae8.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L576aee.  v2.`y4.m.j` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L576af2.  v2.`y4.m.g` @type ^`int` := v3;
  #L576af6.  v2.`y4.m.h` @type ^`java.lang.String` := v4 @kind object;
  #L576afa.  v2.`y4.m.i` @type ^`boolean` := v5 @kind boolean;
  #L576afe.  return @kind void;
}
procedure `int` `a`(`y4.m` v0 @kind object) @signature `Ly4/m;.a:(Ly4/m;)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L576a58.  v0:= v0.`y4.m.g` @type ^`int`;
  #L576a5c.  return v0;
}
procedure `java.lang.Thread` `newThread`(`y4.m` v2 @kind this, `java.lang.Runnable` v3 @kind object) @signature `Ly4/m;.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L576a70.  v0:= new `y4.m$a`;
  #L576a74.  call `<init>`(v0, v2, v3) @signature `Ly4/m$a;.<init>:(Ly4/m;Ljava/lang/Runnable;)V` @kind direct;
  #L576a7a.  v3:= v2.`y4.m.i` @type ^`boolean` @kind boolean;
  #L576a7e.  if v3 == 0 then goto L576abc;
  #L576a82.  v3:= new `java.lang.StringBuilder`;
  #L576a86.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L576a8c.  v1:= v2.`y4.m.h` @type ^`java.lang.String` @kind object;
  #L576a90.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L576a96.  v1:= "-" @kind object;
  #L576a9a.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L576aa0.  v1:= v2.`y4.m.j` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L576aa4.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L576aaa.  v1:= temp;
  #L576aac.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L576ab2.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L576ab8.  v3:= temp @kind object;
  #L576aba.  goto L576ac0;
  #L576abc.  v3:= v2.`y4.m.h` @type ^`java.lang.String` @kind object;
  #L576ac0.  v1:= new `java.lang.Thread`;
  #L576ac4.  call `<init>`(v1, v0, v3) @signature `Ljava/lang/Thread;.<init>:(Ljava/lang/Runnable;Ljava/lang/String;)V` @kind direct;
  #L576aca.  return v1 @kind object;
}
