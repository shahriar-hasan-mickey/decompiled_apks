record `n4.a` @kind class @AccessFlag PUBLIC extends `n4.b` @kind interface {
  `g4.d` `n4.a.a` @AccessFlag PRIVATE_FINAL;
  `long` `n4.a.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`n4.a` v2 @kind this, `g4.d` v3 @kind object) @signature `Ln4/a;.<init>:(Lg4/d;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L53dfa8.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L53dfae.  v0:= -1L;
  #L53dfb2.  v2.`n4.a.b` @type ^`long` := v0 @kind wide;
  #L53dfb6.  v2.`n4.a.a` @type ^`g4.d` := v3 @kind object;
  #L53dfba.  return @kind void;
}
procedure `long` `a`(`n4.a` v11 @kind this, `long` v12 ) @signature `Ln4/a;.a:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L53df14.  call temp:= `d`(v11) @signature `Ln4/a;.d:()J` @kind virtual;
  #L53df1a.  v0:= temp @kind wide;
  #L53df1c.  v2:= -1L;
  #L53df20.  v4:= 0L;
  #L53df24.  v6:= lcmp(v0, v4);
  #L53df28.  if v6 != 0 then goto L53df2e;
  #L53df2c.  return v2 @kind wide;
  #L53df2e.  call temp:= `e`(v11) @signature `Ln4/a;.e:()Z` @kind virtual;
  #L53df34.  v6:= temp;
  #L53df36.  if v6 != 0 then goto L53df5e;
  #L53df3a.  call temp:= `d`(v11) @signature `Ln4/a;.d:()J` @kind virtual;
  #L53df40.  v6:= temp @kind wide;
  #L53df42.  v6:= v12 / v6 @kind long;
  #L53df46.  v8:= v11.`n4.a.a` @type ^`g4.d` @kind object;
  #L53df4a.  call temp:= `b`(v8) @signature `Lg4/d;.b:()I` @kind interface;
  #L53df50.  v8:= temp;
  #L53df52.  v8:= (`long`) v8 @kind i2l;
  #L53df54.  v10:= lcmp(v6, v8);
  #L53df58.  if v10 < 0 then goto L53df5e;
  #L53df5c.  return v2 @kind wide;
  #L53df5e.  v0:= v12 %% v0 @kind long;
  #L53df62.  v2:= v11.`n4.a.a` @type ^`g4.d` @kind object;
  #L53df66.  call temp:= `a`(v2) @signature `Lg4/d;.a:()I` @kind interface;
  #L53df6c.  v2:= temp;
  #L53df6e.  v3:= 0I;
  #L53df70.  if v3 >= v2 then goto L53df92;
  #L53df74.  v6:= lcmp(v4, v0);
  #L53df78.  if v6 > 0 then goto L53df92;
  #L53df7c.  v6:= v11.`n4.a.a` @type ^`g4.d` @kind object;
  #L53df80.  call temp:= `h`(v6, v3) @signature `Lg4/d;.h:(I)I` @kind interface;
  #L53df86.  v6:= temp;
  #L53df88.  v6:= (`long`) v6 @kind i2l;
  #L53df8a.  v4:= v4 + v6 @kind long;
  #L53df8c.  v3:= v3 + 1;
  #L53df90.  goto L53df70;
  #L53df92.  v4:= v4 - v0 @kind long;
  #L53df94.  v12:= v12 + v4 @kind long;
  #L53df96.  return v12 @kind wide;
}
procedure `int` `b`(`n4.a` v5 @kind this, `long` v6 , `long` v8 ) @signature `Ln4/a;.b:(JJ)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L53de18.  call temp:= `d`(v5) @signature `Ln4/a;.d:()J` @kind virtual;
  #L53de1e.  v8:= temp @kind wide;
  #L53de20.  v0:= 0L;
  #L53de24.  v2:= lcmp(v8, v0);
  #L53de28.  if v2 != 0 then goto L53de36;
  #L53de2c.  call temp:= `c`(v5, v0) @signature `Ln4/a;.c:(J)I` @kind virtual;
  #L53de32.  v6:= temp;
  #L53de34.  return v6;
  #L53de36.  call temp:= `e`(v5) @signature `Ln4/a;.e:()Z` @kind virtual;
  #L53de3c.  v0:= temp;
  #L53de3e.  if v0 != 0 then goto L53de60;
  #L53de42.  v0:= v6 / v8 @kind long;
  #L53de46.  v2:= v5.`n4.a.a` @type ^`g4.d` @kind object;
  #L53de4a.  call temp:= `b`(v2) @signature `Lg4/d;.b:()I` @kind interface;
  #L53de50.  v2:= temp;
  #L53de52.  v2:= (`long`) v2 @kind i2l;
  #L53de54.  v4:= lcmp(v0, v2);
  #L53de58.  if v4 < 0 then goto L53de60;
  #L53de5c.  v6:= -1I;
  #L53de5e.  return v6;
  #L53de60.  v6:= v6 %% v8 @kind long;
  #L53de62.  call temp:= `c`(v5, v6) @signature `Ln4/a;.c:(J)I` @kind virtual;
  #L53de68.  v6:= temp;
  #L53de6a.  return v6;
}
procedure `int` `c`(`n4.a` v5 @kind this, `long` v6 ) @signature `Ln4/a;.c:(J)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L53de7c.  v0:= 0I;
  #L53de7e.  v1:= 0L;
  #L53de82.  v3:= v5.`n4.a.a` @type ^`g4.d` @kind object;
  #L53de86.  call temp:= `h`(v3, v0) @signature `Lg4/d;.h:(I)I` @kind interface;
  #L53de8c.  v3:= temp;
  #L53de8e.  v3:= (`long`) v3 @kind i2l;
  #L53de90.  v1:= v1 + v3 @kind long;
  #L53de92.  v0:= v0 + 1;
  #L53de96.  v3:= lcmp(v6, v1);
  #L53de9a.  if v3 >= 0 then goto L53de82;
  #L53de9e.  v0:= v0 + -1;
  #L53dea2.  return v0;
}
procedure `long` `d`(`n4.a` v6 @kind this) @signature `Ln4/a;.d:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L53deb4.  v0:= v6.`n4.a.b` @type ^`long` @kind wide;
  #L53deb8.  v2:= -1L;
  #L53debc.  v4:= lcmp(v0, v2);
  #L53dec0.  if v4 == 0 then goto L53dec6;
  #L53dec4.  return v0 @kind wide;
  #L53dec6.  v0:= 0L;
  #L53deca.  v6.`n4.a.b` @type ^`long` := v0 @kind wide;
  #L53dece.  v0:= v6.`n4.a.a` @type ^`g4.d` @kind object;
  #L53ded2.  call temp:= `a`(v0) @signature `Lg4/d;.a:()I` @kind interface;
  #L53ded8.  v0:= temp;
  #L53deda.  v1:= 0I;
  #L53dedc.  if v1 >= v0 then goto L53defe;
  #L53dee0.  v2:= v6.`n4.a.b` @type ^`long` @kind wide;
  #L53dee4.  v4:= v6.`n4.a.a` @type ^`g4.d` @kind object;
  #L53dee8.  call temp:= `h`(v4, v1) @signature `Lg4/d;.h:(I)I` @kind interface;
  #L53deee.  v4:= temp;
  #L53def0.  v4:= (`long`) v4 @kind i2l;
  #L53def2.  v2:= v2 + v4 @kind long;
  #L53def4.  v6.`n4.a.b` @type ^`long` := v2 @kind wide;
  #L53def8.  v1:= v1 + 1;
  #L53defc.  goto L53dedc;
  #L53defe.  v0:= v6.`n4.a.b` @type ^`long` @kind wide;
  #L53df02.  return v0 @kind wide;
}
procedure `boolean` `e`(`n4.a` v1 @kind this) @signature `Ln4/a;.e:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L53ddf0.  v0:= v1.`n4.a.a` @type ^`g4.d` @kind object;
  #L53ddf4.  call temp:= `b`(v0) @signature `Lg4/d;.b:()I` @kind interface;
  #L53ddfa.  v0:= temp;
  #L53ddfc.  if v0 != 0 then goto L53de04;
  #L53de00.  v0:= 1I;
  #L53de02.  goto L53de06;
  #L53de04.  v0:= 0I;
  #L53de06.  return v0;
}
