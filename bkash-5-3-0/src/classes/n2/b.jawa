record `n2.b` @kind class @AccessFlag PUBLIC_FINAL {
}
global `byte`[] `@@n2.b.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `char`[] `@@n2.b.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ln2/b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L53bde8.  v0:= 128I;
  #L53bdec.  v1:= new `byte`[v0];
  #L53bdf0.  `@@n2.b.a` @type ^`byte`[] := v1 @kind object;
  #L53bdf4.  v1:= 64I;
  #L53bdf8.  v1:= new `char`[v1];
  #L53bdfc.  `@@n2.b.b` @type ^`char`[] := v1 @kind object;
  #L53be00.  v1:= 0I;
  #L53be02.  v2:= 0I;
  #L53be04.  if v2 >= v0 then goto L53be18;
  #L53be08.  v3:= `@@n2.b.a` @type ^`byte`[] @kind object;
  #L53be0c.  v4:= -1I;
  #L53be0e.  v3[v2]:= v4 @kind byte;
  #L53be12.  v2:= v2 + 1;
  #L53be16.  goto L53be04;
  #L53be18.  v0:= 90I;
  #L53be1c.  v2:= 65I;
  #L53be20.  if v0 < v2 then goto L53be38;
  #L53be24.  v2:= `@@n2.b.a` @type ^`byte`[] @kind object;
  #L53be28.  v3:= v0 + -65;
  #L53be2c.  v3:= (`byte`) v3 @kind i2b;
  #L53be2e.  v2[v0]:= v3 @kind byte;
  #L53be32.  v0:= v0 + -1;
  #L53be36.  goto L53be1c;
  #L53be38.  v0:= 122I;
  #L53be3c.  v2:= 26I;
  #L53be40.  v3:= 97I;
  #L53be44.  if v0 < v3 then goto L53be5e;
  #L53be48.  v3:= `@@n2.b.a` @type ^`byte`[] @kind object;
  #L53be4c.  v4:= v0 + -97;
  #L53be50.  v4:= v4 + v2 @kind int;
  #L53be52.  v2:= (`byte`) v4 @kind i2b;
  #L53be54.  v3[v0]:= v2 @kind byte;
  #L53be58.  v0:= v0 + -1;
  #L53be5c.  goto L53be3c;
  #L53be5e.  v0:= 57I;
  #L53be62.  v3:= 52I;
  #L53be66.  v4:= 48I;
  #L53be6a.  if v0 < v4 then goto L53be84;
  #L53be6e.  v4:= `@@n2.b.a` @type ^`byte`[] @kind object;
  #L53be72.  v5:= v0 + -48;
  #L53be76.  v5:= v5 + v3 @kind int;
  #L53be78.  v3:= (`byte`) v5 @kind i2b;
  #L53be7a.  v4[v0]:= v3 @kind byte;
  #L53be7e.  v0:= v0 + -1;
  #L53be82.  goto L53be62;
  #L53be84.  v0:= `@@n2.b.a` @type ^`byte`[] @kind object;
  #L53be88.  v4:= 43I;
  #L53be8c.  v5:= 62I;
  #L53be90.  v0[v4]:= v5 @kind byte;
  #L53be94.  v6:= 47I;
  #L53be98.  v7:= 63I;
  #L53be9c.  v0[v6]:= v7 @kind byte;
  #L53bea0.  v0:= 0I;
  #L53bea2.  v8:= 25I;
  #L53bea6.  if v0 > v8 then goto L53bebe;
  #L53beaa.  v8:= `@@n2.b.b` @type ^`char`[] @kind object;
  #L53beae.  v9:= v0 + 65;
  #L53beb2.  v9:= (`char`) v9 @kind i2c;
  #L53beb4.  v8[v0]:= v9 @kind char;
  #L53beb8.  v0:= v0 + 1;
  #L53bebc.  goto L53bea2;
  #L53bebe.  v0:= 0I;
  #L53bec0.  v8:= 51I;
  #L53bec4.  if v2 > v8 then goto L53bee0;
  #L53bec8.  v8:= `@@n2.b.b` @type ^`char`[] @kind object;
  #L53becc.  v9:= v0 + 97;
  #L53bed0.  v9:= (`char`) v9 @kind i2c;
  #L53bed2.  v8[v2]:= v9 @kind char;
  #L53bed6.  v2:= v2 + 1;
  #L53beda.  v0:= v0 + 1;
  #L53bede.  goto L53bec0;
  #L53bee0.  v0:= 61I;
  #L53bee4.  if v3 > v0 then goto L53bf00;
  #L53bee8.  v0:= `@@n2.b.b` @type ^`char`[] @kind object;
  #L53beec.  v2:= v1 + 48;
  #L53bef0.  v2:= (`char`) v2 @kind i2c;
  #L53bef2.  v0[v3]:= v2 @kind char;
  #L53bef6.  v3:= v3 + 1;
  #L53befa.  v1:= v1 + 1;
  #L53befe.  goto L53bee0;
  #L53bf00.  v0:= `@@n2.b.b` @type ^`char`[] @kind object;
  #L53bf04.  v0[v5]:= v4 @kind char;
  #L53bf08.  v0[v7]:= v6 @kind char;
  #L53bf0c.  return @kind void;
}
procedure `int` `a`(`char`[] v5 @kind object) @signature `Ln2/b;.a:([C)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L53bda0.  v0:= 0I;
  #L53bda2.  if v5 != 0 then goto L53bda8;
  #L53bda6.  return v0;
  #L53bda8.  v1:= length @variable v5;
  #L53bdaa.  v2:= 0I;
  #L53bdac.  if v0 >= v1 then goto L53bdd4;
  #L53bdb0.  v3:= v5[v0] @kind char;
  #L53bdb4.  call temp:= `b`(v3) @signature `Ln2/b;.b:(C)Z` @kind static;
  #L53bdba.  v3:= temp;
  #L53bdbc.  if v3 != 0 then goto L53bdce;
  #L53bdc0.  v3:= v2 + 1;
  #L53bdc4.  v4:= v5[v0] @kind char;
  #L53bdc8.  v5[v2]:= v4 @kind char;
  #L53bdcc.  v2:= v3;
  #L53bdce.  v0:= v0 + 1;
  #L53bdd2.  goto L53bdac;
  #L53bdd4.  return v2;
}
procedure `boolean` `b`(`char` v1 ) @signature `Ln2/b;.b:(C)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L53babc.  v0:= 32I;
  #L53bac0.  if v1 == v0 then goto L53bae2;
  #L53bac4.  v0:= 13I;
  #L53bac8.  if v1 == v0 then goto L53bae2;
  #L53bacc.  v0:= 10I;
  #L53bad0.  if v1 == v0 then goto L53bae2;
  #L53bad4.  v0:= 9I;
  #L53bad8.  if v1 != v0 then goto L53bade;
  #L53badc.  goto L53bae2;
  #L53bade.  v1:= 0I;
  #L53bae0.  goto L53bae4;
  #L53bae2.  v1:= 1I;
  #L53bae4.  return v1;
}
procedure `byte`[] `c`(`java.lang.String` v13 @kind object) @signature `Ln2/b;.c:(Ljava/lang/String;)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L53bb48.  v0:= 0I;
  #L53bb4a.  if v13 != 0 then goto L53bb50;
  #L53bb4e.  return v0 @kind object;
  #L53bb50.  call temp:= `toCharArray`(v13) @signature `Ljava/lang/String;.toCharArray:()[C` @kind virtual;
  #L53bb56.  v13:= temp @kind object;
  #L53bb58.  call temp:= `a`(v13) @signature `Ln2/b;.a:([C)I` @kind static;
  #L53bb5e.  v1:= temp;
  #L53bb60.  v2:= v1 %% 4;
  #L53bb64.  if v2 == 0 then goto L53bb6a;
  #L53bb68.  return v0 @kind object;
  #L53bb6a.  v1:= v1 / 4;
  #L53bb6e.  v2:= 0I;
  #L53bb70.  if v1 != 0 then goto L53bb7a;
  #L53bb74.  v13:= new `byte`[v2];
  #L53bb78.  return v13 @kind object;
  #L53bb7a.  v3:= v1 * 3;
  #L53bb7e.  v3:= new `byte`[v3];
  #L53bb82.  v4:= 0I;
  #L53bb84.  v5:= 0I;
  #L53bb86.  v6:= 0I;
  #L53bb88.  v7:= v1 + -1;
  #L53bb8c.  if v4 >= v7 then goto L53bc40;
  #L53bb90.  v7:= v5 + 1;
  #L53bb94.  v5:= v13[v5] @kind char;
  #L53bb98.  call temp:= `e`(v5) @signature `Ln2/b;.e:(C)Z` @kind static;
  #L53bb9e.  v8:= temp;
  #L53bba0.  if v8 == 0 then goto L53bc3e;
  #L53bba4.  v8:= v7 + 1;
  #L53bba8.  v7:= v13[v7] @kind char;
  #L53bbac.  call temp:= `e`(v7) @signature `Ln2/b;.e:(C)Z` @kind static;
  #L53bbb2.  v9:= temp;
  #L53bbb4.  if v9 == 0 then goto L53bc3e;
  #L53bbb8.  v9:= v8 + 1;
  #L53bbbc.  v8:= v13[v8] @kind char;
  #L53bbc0.  call temp:= `e`(v8) @signature `Ln2/b;.e:(C)Z` @kind static;
  #L53bbc6.  v10:= temp;
  #L53bbc8.  if v10 == 0 then goto L53bc3e;
  #L53bbcc.  v10:= v9 + 1;
  #L53bbd0.  v9:= v13[v9] @kind char;
  #L53bbd4.  call temp:= `e`(v9) @signature `Ln2/b;.e:(C)Z` @kind static;
  #L53bbda.  v11:= temp;
  #L53bbdc.  if v11 != 0 then goto L53bbe2;
  #L53bbe0.  goto L53bc3e;
  #L53bbe2.  v11:= `@@n2.b.a` @type ^`byte`[] @kind object;
  #L53bbe6.  v5:= v11[v5] @kind byte;
  #L53bbea.  v7:= v11[v7] @kind byte;
  #L53bbee.  v8:= v11[v8] @kind byte;
  #L53bbf2.  v9:= v11[v9] @kind byte;
  #L53bbf6.  v11:= v6 + 1;
  #L53bbfa.  v5:= v5 ^< 2;
  #L53bbfe.  v12:= v7 ^> 4;
  #L53bc02.  v5:= v5 ^| v12 @kind int;
  #L53bc04.  v5:= (`byte`) v5 @kind i2b;
  #L53bc06.  v3[v6]:= v5 @kind byte;
  #L53bc0a.  v5:= v11 + 1;
  #L53bc0e.  v6:= v7 ^& 15;
  #L53bc12.  v6:= v6 ^< 4;
  #L53bc16.  v7:= v8 ^> 2;
  #L53bc1a.  v7:= v7 ^& 15;
  #L53bc1e.  v6:= v6 ^| v7 @kind int;
  #L53bc20.  v6:= (`byte`) v6 @kind i2b;
  #L53bc22.  v3[v11]:= v6 @kind byte;
  #L53bc26.  v6:= v5 + 1;
  #L53bc2a.  v7:= v8 ^< 6;
  #L53bc2e.  v7:= v7 ^| v9 @kind int;
  #L53bc30.  v7:= (`byte`) v7 @kind i2b;
  #L53bc32.  v3[v5]:= v7 @kind byte;
  #L53bc36.  v4:= v4 + 1;
  #L53bc3a.  v5:= v10;
  #L53bc3c.  goto L53bb88;
  #L53bc3e.  return v0 @kind object;
  #L53bc40.  v1:= v5 + 1;
  #L53bc44.  v5:= v13[v5] @kind char;
  #L53bc48.  call temp:= `e`(v5) @signature `Ln2/b;.e:(C)Z` @kind static;
  #L53bc4e.  v7:= temp;
  #L53bc50.  if v7 == 0 then goto L53bd8e;
  #L53bc54.  v7:= v1 + 1;
  #L53bc58.  v1:= v13[v1] @kind char;
  #L53bc5c.  call temp:= `e`(v1) @signature `Ln2/b;.e:(C)Z` @kind static;
  #L53bc62.  v8:= temp;
  #L53bc64.  if v8 != 0 then goto L53bc6c;
  #L53bc68.  goto L53bd8e;
  #L53bc6c.  v8:= `@@n2.b.a` @type ^`byte`[] @kind object;
  #L53bc70.  v5:= v8[v5] @kind byte;
  #L53bc74.  v1:= v8[v1] @kind byte;
  #L53bc78.  v9:= v7 + 1;
  #L53bc7c.  v7:= v13[v7] @kind char;
  #L53bc80.  v13:= v13[v9] @kind char;
  #L53bc84.  call temp:= `e`(v7) @signature `Ln2/b;.e:(C)Z` @kind static;
  #L53bc8a.  v9:= temp;
  #L53bc8c.  if v9 == 0 then goto L53bce4;
  #L53bc90.  call temp:= `e`(v13) @signature `Ln2/b;.e:(C)Z` @kind static;
  #L53bc96.  v9:= temp;
  #L53bc98.  if v9 != 0 then goto L53bc9e;
  #L53bc9c.  goto L53bce4;
  #L53bc9e.  v0:= v8[v7] @kind byte;
  #L53bca2.  v13:= v8[v13] @kind byte;
  #L53bca6.  v2:= v6 + 1;
  #L53bcaa.  v4:= v5 ^< 2;
  #L53bcae.  v5:= v1 ^> 4;
  #L53bcb2.  v4:= v4 ^| v5 @kind int;
  #L53bcb4.  v4:= (`byte`) v4 @kind i2b;
  #L53bcb6.  v3[v6]:= v4 @kind byte;
  #L53bcba.  v4:= v2 + 1;
  #L53bcbe.  v1:= v1 ^& 15;
  #L53bcc2.  v1:= v1 ^< 4;
  #L53bcc6.  v5:= v0 ^> 2;
  #L53bcca.  v5:= v5 ^& 15;
  #L53bcce.  v1:= v1 ^| v5 @kind int;
  #L53bcd0.  v1:= (`byte`) v1 @kind i2b;
  #L53bcd2.  v3[v2]:= v1 @kind byte;
  #L53bcd6.  v0:= v0 ^< 6;
  #L53bcda.  v13:= v13 ^| v0 @kind int;
  #L53bcdc.  v13:= (`byte`) v13 @kind i2b;
  #L53bcde.  v3[v4]:= v13 @kind byte;
  #L53bce2.  return v3 @kind object;
  #L53bce4.  call temp:= `d`(v7) @signature `Ln2/b;.d:(C)Z` @kind static;
  #L53bcea.  v9:= temp;
  #L53bcec.  if v9 == 0 then goto L53bd2a;
  #L53bcf0.  call temp:= `d`(v13) @signature `Ln2/b;.d:(C)Z` @kind static;
  #L53bcf6.  v9:= temp;
  #L53bcf8.  if v9 == 0 then goto L53bd2a;
  #L53bcfc.  v13:= v1 ^& 15;
  #L53bd00.  if v13 == 0 then goto L53bd06;
  #L53bd04.  return v0 @kind object;
  #L53bd06.  v4:= v4 * 3;
  #L53bd0a.  v13:= v4 + 1;
  #L53bd0e.  v13:= new `byte`[v13];
  #L53bd12.  call `arraycopy`(v3, v2, v13, v2, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L53bd18.  v0:= v5 ^< 2;
  #L53bd1c.  v1:= v1 ^> 4;
  #L53bd20.  v0:= v0 ^| v1 @kind int;
  #L53bd22.  v0:= (`byte`) v0 @kind i2b;
  #L53bd24.  v13[v6]:= v0 @kind byte;
  #L53bd28.  return v13 @kind object;
  #L53bd2a.  call temp:= `d`(v7) @signature `Ln2/b;.d:(C)Z` @kind static;
  #L53bd30.  v9:= temp;
  #L53bd32.  if v9 != 0 then goto L53bd8e;
  #L53bd36.  call temp:= `d`(v13) @signature `Ln2/b;.d:(C)Z` @kind static;
  #L53bd3c.  v13:= temp;
  #L53bd3e.  if v13 == 0 then goto L53bd8e;
  #L53bd42.  v13:= v8[v7] @kind byte;
  #L53bd46.  v7:= v13 ^& 3;
  #L53bd4a.  if v7 == 0 then goto L53bd50;
  #L53bd4e.  return v0 @kind object;
  #L53bd50.  v4:= v4 * 3;
  #L53bd54.  v0:= v4 + 2;
  #L53bd58.  v0:= new `byte`[v0];
  #L53bd5c.  call `arraycopy`(v3, v2, v0, v2, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L53bd62.  v2:= v6 + 1;
  #L53bd66.  v3:= v5 ^< 2;
  #L53bd6a.  v4:= v1 ^> 4;
  #L53bd6e.  v3:= v3 ^| v4 @kind int;
  #L53bd70.  v3:= (`byte`) v3 @kind i2b;
  #L53bd72.  v0[v6]:= v3 @kind byte;
  #L53bd76.  v1:= v1 ^& 15;
  #L53bd7a.  v1:= v1 ^< 4;
  #L53bd7e.  v13:= v13 ^> 2;
  #L53bd82.  v13:= v13 ^& 15;
  #L53bd86.  v13:= v13 ^| v1 @kind int;
  #L53bd88.  v13:= (`byte`) v13 @kind i2b;
  #L53bd8a.  v0[v2]:= v13 @kind byte;
  #L53bd8e.  return v0 @kind object;
}
procedure `boolean` `d`(`char` v1 ) @signature `Ln2/b;.d:(C)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L53baf8.  v0:= 61I;
  #L53bafc.  if v1 != v0 then goto L53bb04;
  #L53bb00.  v1:= 1I;
  #L53bb02.  goto L53bb06;
  #L53bb04.  v1:= 0I;
  #L53bb06.  return v1;
}
procedure `boolean` `e`(`char` v1 ) @signature `Ln2/b;.e:(C)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L53bb18.  v0:= 128I;
  #L53bb1c.  if v1 >= v0 then goto L53bb32;
  #L53bb20.  v0:= `@@n2.b.a` @type ^`byte`[] @kind object;
  #L53bb24.  v1:= v0[v1] @kind byte;
  #L53bb28.  v0:= -1I;
  #L53bb2a.  if v1 == v0 then goto L53bb32;
  #L53bb2e.  v1:= 1I;
  #L53bb30.  goto L53bb34;
  #L53bb32.  v1:= 0I;
  #L53bb34.  return v1;
}
