record `n2.n` @kind class @AccessFlag PUBLIC {
}
procedure `java.lang.Object` `a`(`java.lang.Object` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.Class`[] v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Object`[] v5 @kind object) @signature `Ln2/n;.a:(Ljava/lang/Object;Ljava/lang/String;[Ljava/lang/Class;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L53d994.  v0:= instanceof @variable v1 @type ^`java.lang.Class` @kind boolean;
  #L53d998.  if v0 == 0 then goto L53d9a2;
  #L53d99c.  v1:= (`java.lang.Class`) v1 @kind object;
  #L53d9a0.  goto L53d9b2;
  #L53d9a2.  call temp:= `valueOf`(v1) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L53d9a8.  v1:= temp @kind object;
  #L53d9aa.  call temp:= `forName`(v1) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L53d9b0.  v1:= temp @kind object;
  #L53d9b2.  call temp:= `getDeclaredMethod`(v1, v2, v3) @signature `Ljava/lang/Class;.getDeclaredMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L53d9b8.  v1:= temp @kind object;
  #L53d9ba.  v2:= 1I;
  #L53d9bc.  call `setAccessible`(v1, v2) @signature `Ljava/lang/reflect/Method;.setAccessible:(Z)V` @kind virtual;
  #L53d9c2.  call temp:= `invoke`(v1, v4, v5) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L53d9c8.  v1:= temp @kind object;
  #L53d9ca.  return v1 @kind object;
}
