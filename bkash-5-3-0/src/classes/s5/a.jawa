record `s5.a` @kind class @AccessFlag PUBLIC_FINAL extends `nd.a` @kind interface, `r5.a` @kind interface {
  `nd.a` `s5.a.a` @AccessFlag PRIVATE_VOLATILE;
  `java.lang.Object` `s5.a.b` @AccessFlag PRIVATE_VOLATILE;
}
global `java.lang.Object` `@@s5.a.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ls5/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L5634e0.  v0:= new `java.lang.Object`;
  #L5634e4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L5634ea.  `@@s5.a.c` @type ^`java.lang.Object` := v0 @kind object;
  #L5634ee.  return @kind void;
}
procedure `void` `<init>`(`s5.a` v1 @kind this, `nd.a` v2 @kind object) @signature `Ls5/a;.<init>:(Lnd/a;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L563500.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L563506.  v0:= `@@s5.a.c` @type ^`java.lang.Object` @kind object;
  #L56350a.  v1.`s5.a.b` @type ^`java.lang.Object` := v0 @kind object;
  #L56350e.  v1.`s5.a.a` @type ^`nd.a` := v2 @kind object;
  #L563512.  return @kind void;
}
procedure `r5.a` `a`(`nd.a` v1 @kind object) @signature `Ls5/a;.a:(Lnd/a;)Lr5/a;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L5634a8.  v0:= instanceof @variable v1 @type ^`r5.a` @kind boolean;
  #L5634ac.  if v0 == 0 then goto L5634b6;
  #L5634b0.  v1:= (`r5.a`) v1 @kind object;
  #L5634b4.  return v1 @kind object;
  #L5634b6.  v0:= new `s5.a`;
  #L5634ba.  call temp:= `b`(v1) @signature `Ls5/d;.b:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L5634c0.  v1:= temp @kind object;
  #L5634c2.  v1:= (`nd.a`) v1 @kind object;
  #L5634c6.  call `<init>`(v0, v1) @signature `Ls5/a;.<init>:(Lnd/a;)V` @kind direct;
  #L5634cc.  return v0 @kind object;
}
procedure `nd.a` `b`(`nd.a` v1 @kind object) @signature `Ls5/a;.b:(Lnd/a;)Lnd/a;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L56347c.  call temp:= `b`(v1) @signature `Ls5/d;.b:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L563482.  v0:= instanceof @variable v1 @type ^`s5.a` @kind boolean;
  #L563486.  if v0 == 0 then goto L56348c;
  #L56348a.  return v1 @kind object;
  #L56348c.  v0:= new `s5.a`;
  #L563490.  call `<init>`(v0, v1) @signature `Ls5/a;.<init>:(Lnd/a;)V` @kind direct;
  #L563496.  return v0 @kind object;
}
procedure `java.lang.Object` `c`(`java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Ls5/a;.c:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L563408.  v0:= `@@s5.a.c` @type ^`java.lang.Object` @kind object;
  #L56340c.  if v3 == v0 then goto L563414;
  #L563410.  v0:= 1I;
  #L563412.  goto L563416;
  #L563414.  v0:= 0I;
  #L563416.  if v0 == 0 then goto L563468;
  #L56341a.  if v3 != v4 then goto L563420;
  #L56341e.  goto L563468;
  #L563420.  v0:= new `java.lang.IllegalStateException`;
  #L563424.  v1:= new `java.lang.StringBuilder`;
  #L563428.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L56342e.  v2:= "Scoped provider was invoked recursively returning different results: " @kind object;
  #L563432.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L563438.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L56343e.  v3:= " & " @kind object;
  #L563442.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L563448.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L56344e.  v3:= ". This is likely due to a circular dependency." @kind object;
  #L563452.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L563458.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L56345e.  v3:= temp @kind object;
  #L563460.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L563466.  throw v0;
  #L563468.  return v4 @kind object;
}
procedure `java.lang.Object` `get`(`s5.a` v2 @kind this) @signature `Ls5/a;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5633a8.  v0:= v2.`s5.a.b` @type ^`java.lang.Object` @kind object;
  #L5633ac.  v1:= `@@s5.a.c` @type ^`java.lang.Object` @kind object;
  #L5633b0.  if v0 != v1 then goto L5633ea;
  #L5633b4.  @monitorenter v2
  #L5633b6.  v0:= v2.`s5.a.b` @type ^`java.lang.Object` @kind object;
  #L5633ba.  if v0 != v1 then goto L5633e0;
  #L5633be.  v0:= v2.`s5.a.a` @type ^`nd.a` @kind object;
  #L5633c2.  call temp:= `get`(v0) @signature `Lnd/a;.get:()Ljava/lang/Object;` @kind interface;
  #L5633c8.  v0:= temp @kind object;
  #L5633ca.  v1:= v2.`s5.a.b` @type ^`java.lang.Object` @kind object;
  #L5633ce.  call temp:= `c`(v1, v0) @signature `Ls5/a;.c:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L5633d4.  v1:= temp @kind object;
  #L5633d6.  v2.`s5.a.b` @type ^`java.lang.Object` := v1 @kind object;
  #L5633da.  v1:= 0I;
  #L5633dc.  v2.`s5.a.a` @type ^`nd.a` := v1 @kind object;
  #L5633e0.  @monitorexit v2
  #L5633e2.  goto L5633ea;
  #L5633e4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L5633e6.  @monitorexit v2
  #L5633e8.  throw v0;
  #L5633ea.  return v0 @kind object;
  catch `java.lang.Throwable` @[L5633b6..L5633e8] goto L5633e4;
}
