record `w4.d` @kind class @AccessFlag PUBLIC {
  `int` `w4.d.a` @AccessFlag PRIVATE;
  `java.util.LinkedHashSet` `w4.d.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`w4.d` v1 @kind this, `int` v2 ) @signature `Lw4/d;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L56ab84.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L56ab8a.  v0:= new `java.util.LinkedHashSet`;
  #L56ab8e.  call `<init>`(v0, v2) @signature `Ljava/util/LinkedHashSet;.<init>:(I)V` @kind direct;
  #L56ab94.  v1.`w4.d.b` @type ^`java.util.LinkedHashSet` := v0 @kind object;
  #L56ab98.  v1.`w4.d.a` @type ^`int` := v2;
  #L56ab9c.  return @kind void;
}
procedure `boolean` `a`(`w4.d` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lw4/d;.a:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L56aae4.  @monitorenter v2
  #L56aae6.  v0:= v2.`w4.d.b` @type ^`java.util.LinkedHashSet` @kind object;
  #L56aaea.  call temp:= `size`(v0) @signature `Ljava/util/LinkedHashSet;.size:()I` @kind virtual;
  #L56aaf0.  v0:= temp;
  #L56aaf2.  v1:= v2.`w4.d.a` @type ^`int`;
  #L56aaf6.  if v0 != v1 then goto L56ab14;
  #L56aafa.  v0:= v2.`w4.d.b` @type ^`java.util.LinkedHashSet` @kind object;
  #L56aafe.  call temp:= `iterator`(v0) @signature `Ljava/util/LinkedHashSet;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L56ab04.  v1:= temp @kind object;
  #L56ab06.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L56ab0c.  v1:= temp @kind object;
  #L56ab0e.  call temp:= `remove`(v0, v1) @signature `Ljava/util/LinkedHashSet;.remove:(Ljava/lang/Object;)Z` @kind virtual;
  #L56ab14.  v0:= v2.`w4.d.b` @type ^`java.util.LinkedHashSet` @kind object;
  #L56ab18.  call temp:= `remove`(v0, v3) @signature `Ljava/util/LinkedHashSet;.remove:(Ljava/lang/Object;)Z` @kind virtual;
  #L56ab1e.  v0:= v2.`w4.d.b` @type ^`java.util.LinkedHashSet` @kind object;
  #L56ab22.  call temp:= `add`(v0, v3) @signature `Ljava/util/LinkedHashSet;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L56ab28.  v3:= temp;
  #L56ab2a.  @monitorexit v2
  #L56ab2c.  return v3;
  #L56ab2e.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L56ab30.  @monitorexit v2
  #L56ab32.  throw v3;
  catch `java.lang.Throwable` @[L56aae6..L56ab2a] goto L56ab2e;
}
procedure `boolean` `b`(`w4.d` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lw4/d;.b:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L56ab50.  @monitorenter v1
  #L56ab52.  v0:= v1.`w4.d.b` @type ^`java.util.LinkedHashSet` @kind object;
  #L56ab56.  call temp:= `contains`(v0, v2) @signature `Ljava/util/LinkedHashSet;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L56ab5c.  v2:= temp;
  #L56ab5e.  @monitorexit v1
  #L56ab60.  return v2;
  #L56ab62.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L56ab64.  @monitorexit v1
  #L56ab66.  throw v2;
  catch `java.lang.Throwable` @[L56ab52..L56ab5e] goto L56ab62;
}
