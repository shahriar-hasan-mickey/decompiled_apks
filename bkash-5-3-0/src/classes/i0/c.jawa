record `i0.c` @kind class @AccessFlag ABSTRACT {
  `i0.c$h` `i0.c.g` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.FutureTask` `i0.c.h` @AccessFlag PRIVATE_FINAL;
  `i0.c$g` `i0.c.i` @AccessFlag PRIVATE_VOLATILE;
  `java.util.concurrent.atomic.AtomicBoolean` `i0.c.j` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `i0.c.k` @AccessFlag FINAL;
}
global `java.util.concurrent.ThreadFactory` `@@i0.c.l` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.BlockingQueue` `@@i0.c.m` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.Executor` `@@i0.c.n` @AccessFlag PUBLIC_STATIC_FINAL;
global `i0.c$f` `@@i0.c.o` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Li0/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L50efc8.  v7:= new `i0.c$a`;
  #L50efcc.  call `<init>`(v7) @signature `Li0/c$a;.<init>:()V` @kind direct;
  #L50efd2.  `@@i0.c.l` @type ^`java.util.concurrent.ThreadFactory` := v7 @kind object;
  #L50efd6.  v6:= new `java.util.concurrent.LinkedBlockingQueue`;
  #L50efda.  v0:= 10I;
  #L50efde.  call `<init>`(v6, v0) @signature `Ljava/util/concurrent/LinkedBlockingQueue;.<init>:(I)V` @kind direct;
  #L50efe4.  `@@i0.c.m` @type ^`java.util.concurrent.BlockingQueue` := v6 @kind object;
  #L50efe8.  v8:= new `java.util.concurrent.ThreadPoolExecutor`;
  #L50efec.  v5:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L50eff0.  v1:= 5I;
  #L50eff2.  v2:= 128I;
  #L50eff6.  v3:= 1L;
  #L50effa.  v0:= v8 @kind object;
  #L50effc.  call `<init>`(v0, v1, v2, v3, v5, v6, v7) @signature `Ljava/util/concurrent/ThreadPoolExecutor;.<init>:(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L50f002.  `@@i0.c.n` @type ^`java.util.concurrent.Executor` := v8 @kind object;
  #L50f006.  return @kind void;
}
procedure `void` `<init>`(`i0.c` v2 @kind this) @signature `Li0/c;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L50f018.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L50f01e.  v0:= `@@i0.c$g.PENDING` @type ^`i0.c$g` @kind object;
  #L50f022.  v2.`i0.c.i` @type ^`i0.c$g` := v0 @kind object;
  #L50f026.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L50f02a.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L50f030.  v2.`i0.c.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L50f034.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L50f038.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L50f03e.  v2.`i0.c.k` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L50f042.  v0:= new `i0.c$b`;
  #L50f046.  call `<init>`(v0, v2) @signature `Li0/c$b;.<init>:(Li0/c;)V` @kind direct;
  #L50f04c.  v2.`i0.c.g` @type ^`i0.c$h` := v0 @kind object;
  #L50f050.  v1:= new `i0.c$c`;
  #L50f054.  call `<init>`(v1, v2, v0) @signature `Li0/c$c;.<init>:(Li0/c;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L50f05a.  v2.`i0.c.h` @type ^`java.util.concurrent.FutureTask` := v1 @kind object;
  #L50f05e.  return @kind void;
}
procedure `android.os.Handler` `e`() @signature `Li0/c;.e:()Landroid/os/Handler;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L50ee64.  v0:= constclass @type ^`i0.c` @kind object;
  #L50ee68.  @monitorenter v0
  #L50ee6a.  v1:= `@@i0.c.o` @type ^`i0.c$f` @kind object;
  #L50ee6e.  if v1 != 0 then goto L50ee80;
  #L50ee72.  v1:= new `i0.c$f`;
  #L50ee76.  call `<init>`(v1) @signature `Li0/c$f;.<init>:()V` @kind direct;
  #L50ee7c.  `@@i0.c.o` @type ^`i0.c$f` := v1 @kind object;
  #L50ee80.  v1:= `@@i0.c.o` @type ^`i0.c$f` @kind object;
  #L50ee84.  @monitorexit v0
  #L50ee86.  return v1 @kind object;
  #L50ee88.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L50ee8a.  @monitorexit v0
  #L50ee8c.  throw v1;
  catch `java.lang.Throwable` @[L50ee6a..L50ee8c] goto L50ee88;
}
procedure `boolean` `a`(`i0.c` v2 @kind this, `boolean` v3 ) @signature `Li0/c;.a:(Z)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L50eeac.  v0:= v2.`i0.c.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L50eeb0.  v1:= 1I;
  #L50eeb2.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L50eeb8.  v0:= v2.`i0.c.h` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L50eebc.  call temp:= `cancel`(v0, v3) @signature `Ljava/util/concurrent/FutureTask;.cancel:(Z)Z` @kind virtual;
  #L50eec2.  v3:= temp;
  #L50eec4.  return v3;
}
procedure `java.lang.Object` `b`(`java.lang.Object`[] v0 @kind object) @signature `Li0/c;.b:([Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `i0.c` `c`(`i0.c` v2 @kind this, `java.util.concurrent.Executor` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `Li0/c;.c:(Ljava/util/concurrent/Executor;[Ljava/lang/Object;)Li0/c;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L50eef8.  v0:= v2.`i0.c.i` @type ^`i0.c$g` @kind object;
  #L50eefc.  v1:= `@@i0.c$g.PENDING` @type ^`i0.c$g` @kind object;
  #L50ef00.  if v0 == v1 then goto L50ef54;
  #L50ef04.  v3:= `@@i0.c$d.a` @type ^`int`[] @kind object;
  #L50ef08.  v4:= v2.`i0.c.i` @type ^`i0.c$g` @kind object;
  #L50ef0c.  call temp:= `ordinal`(v4) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L50ef12.  v4:= temp;
  #L50ef14.  v3:= v3[v4];
  #L50ef18.  v4:= 1I;
  #L50ef1a.  if v3 == v4 then goto L50ef44;
  #L50ef1e.  v4:= 2I;
  #L50ef20.  if v3 == v4 then goto L50ef34;
  #L50ef24.  v3:= new `java.lang.IllegalStateException`;
  #L50ef28.  v4:= "We should never reach this state" @kind object;
  #L50ef2c.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50ef32.  throw v3;
  #L50ef34.  v3:= new `java.lang.IllegalStateException`;
  #L50ef38.  v4:= "Cannot execute task: the task has already been executed (a task can be executed only once)" @kind object;
  #L50ef3c.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50ef42.  throw v3;
  #L50ef44.  v3:= new `java.lang.IllegalStateException`;
  #L50ef48.  v4:= "Cannot execute task: the task is already running." @kind object;
  #L50ef4c.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50ef52.  throw v3;
  #L50ef54.  v0:= `@@i0.c$g.RUNNING` @type ^`i0.c$g` @kind object;
  #L50ef58.  v2.`i0.c.i` @type ^`i0.c$g` := v0 @kind object;
  #L50ef5c.  call `j`(v2) @signature `Li0/c;.j:()V` @kind virtual;
  #L50ef62.  v0:= v2.`i0.c.g` @type ^`i0.c$h` @kind object;
  #L50ef66.  v0.`i0.c$h.g` @type ^`java.lang.Object`[] := v4 @kind object;
  #L50ef6a.  v4:= v2.`i0.c.h` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L50ef6e.  call `execute`(v3, v4) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L50ef74.  return v2 @kind object;
}
procedure `void` `d`(`i0.c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Li0/c;.d:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;

  #L50f070.  call temp:= `f`(v1) @signature `Li0/c;.f:()Z` @kind virtual;
  #L50f076.  v0:= temp;
  #L50f078.  if v0 == 0 then goto L50f084;
  #L50f07c.  call `h`(v1, v2) @signature `Li0/c;.h:(Ljava/lang/Object;)V` @kind virtual;
  #L50f082.  goto L50f08a;
  #L50f084.  call `i`(v1, v2) @signature `Li0/c;.i:(Ljava/lang/Object;)V` @kind virtual;
  #L50f08a.  v2:= `@@i0.c$g.FINISHED` @type ^`i0.c$g` @kind object;
  #L50f08e.  v1.`i0.c.i` @type ^`i0.c$g` := v2 @kind object;
  #L50f092.  return @kind void;
}
procedure `boolean` `f`(`i0.c` v1 @kind this) @signature `Li0/c;.f:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L50eed8.  v0:= v1.`i0.c.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L50eedc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L50eee2.  v0:= temp;
  #L50eee4.  return v0;
}
procedure `void` `g`(`i0.c` v0 @kind this) @signature `Li0/c;.g:()V` @AccessFlag PROTECTED {
    temp;

  #L50f0a4.  return @kind void;
}
procedure `void` `h`(`i0.c` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Li0/c;.h:(Ljava/lang/Object;)V` @AccessFlag PROTECTED {
    temp;

  #L50f0b8.  call `g`(v0) @signature `Li0/c;.g:()V` @kind virtual;
  #L50f0be.  return @kind void;
}
procedure `void` `i`(`i0.c` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Li0/c;.i:(Ljava/lang/Object;)V` @AccessFlag PROTECTED {
    temp;

  #L50f0d0.  return @kind void;
}
procedure `void` `j`(`i0.c` v0 @kind this) @signature `Li0/c;.j:()V` @AccessFlag PROTECTED {
    temp;

  #L50f0e4.  return @kind void;
}
procedure `void` `k`(`i0.c` v0 @kind this, `java.lang.Object`[] v1 @kind object) @signature `Li0/c;.k:([Ljava/lang/Object;)V` @AccessFlag PROTECTED {
    temp;

  #L50f0f8.  return @kind void;
}
procedure `java.lang.Object` `l`(`i0.c` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Li0/c;.l:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L50ef88.  call temp:= `e`() @signature `Li0/c;.e:()Landroid/os/Handler;` @kind static;
  #L50ef8e.  v0:= temp @kind object;
  #L50ef90.  v1:= new `i0.c$e`;
  #L50ef94.  v2:= 1I;
  #L50ef96.  v3:= new `java.lang.Object`[v2];
  #L50ef9a.  v4:= 0I;
  #L50ef9c.  v3[v4]:= v6 @kind object;
  #L50efa0.  call `<init>`(v1, v5, v3) @signature `Li0/c$e;.<init>:(Li0/c;[Ljava/lang/Object;)V` @kind direct;
  #L50efa6.  call temp:= `obtainMessage`(v0, v2, v1) @signature `Landroid/os/Handler;.obtainMessage:(ILjava/lang/Object;)Landroid/os/Message;` @kind virtual;
  #L50efac.  v0:= temp @kind object;
  #L50efae.  call `sendToTarget`(v0) @signature `Landroid/os/Message;.sendToTarget:()V` @kind virtual;
  #L50efb4.  return v6 @kind object;
}
procedure `void` `m`(`i0.c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Li0/c;.m:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;

  #L50f10c.  v0:= v1.`i0.c.k` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L50f110.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L50f116.  v0:= temp;
  #L50f118.  if v0 != 0 then goto L50f122;
  #L50f11c.  call temp:= `l`(v1, v2) @signature `Li0/c;.l:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L50f122.  return @kind void;
}
