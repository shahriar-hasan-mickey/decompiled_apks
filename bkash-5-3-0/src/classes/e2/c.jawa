record `e2.c` @kind class @AccessFlag  extends `m2.b` @kind interface {
  `e2.b` `e2.c.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`e2.c` v0 @kind this, `e2.b` v1 @kind object) @signature `Le2/c;.<init>:(Le2/b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4fb0b0.  v0.`e2.c.a` @type ^`e2.b` := v1 @kind object;
  #L4fb0b4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4fb0ba.  return @kind void;
}
procedure `boolean` `a`(`e2.c` v3 @kind this, `m2.e` v4 @kind object) @signature `Le2/c;.a:(Lm2/e;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4faff0.  v0:= 0I;
  #L4faff2.  if v4 == 0 then goto L4fb078;
  #L4faff6.  v1:= v4.`m2.e.b` @type ^`java.lang.String` @kind object;
  #L4faffa.  call temp:= `isEmpty`(v1) @signature `Landroid/text/TextUtils;.isEmpty:(Ljava/lang/CharSequence;)Z` @kind static;
  #L4fb000.  v1:= temp;
  #L4fb002.  if v1 != 0 then goto L4fb078;
  #L4fb006.  call temp:= `e`() @signature `Le2/b;.e:()Z` @kind static;
  #L4fb00c.  v1:= temp;
  #L4fb00e.  if v1 != 0 then goto L4fb014;
  #L4fb012.  goto L4fb078;
  #L4fb014.  call temp:= `f`() @signature `Le2/b;.f:()Le2/a;` @kind static;
  #L4fb01a.  v1:= temp @kind object;
  #L4fb01c.  if v1 != 0 then goto L4fb024;
  #L4fb020.  v4:= 1I;
  #L4fb022.  return v4;
  #L4fb024.  call temp:= `f`() @signature `Le2/b;.f:()Le2/a;` @kind static;
  #L4fb02a.  v1:= temp @kind object;
  #L4fb02c.  v1:= v1.`e2.a.logTypes` @type ^`java.util.ArrayList` @kind object;
  #L4fb030.  if v1 == 0 then goto L4fb078;
  #L4fb034.  call temp:= `f`() @signature `Le2/b;.f:()Le2/a;` @kind static;
  #L4fb03a.  v1:= temp @kind object;
  #L4fb03c.  v1:= v1.`e2.a.logTypes` @type ^`java.util.ArrayList` @kind object;
  #L4fb040.  call temp:= `size`(v1) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L4fb046.  v1:= temp;
  #L4fb048.  if v1 == 0 then goto L4fb078;
  #L4fb04c.  call temp:= `f`() @signature `Le2/b;.f:()Le2/a;` @kind static;
  #L4fb052.  v1:= temp @kind object;
  #L4fb054.  v1:= v1.`e2.a.logTypes` @type ^`java.util.ArrayList` @kind object;
  #L4fb058.  v2:= v4.`m2.e.b` @type ^`java.lang.String` @kind object;
  #L4fb05c.  call temp:= `contains`(v1, v2) @signature `Ljava/util/ArrayList;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L4fb062.  v1:= temp;
  #L4fb064.  if v1 != 0 then goto L4fb06a;
  #L4fb068.  goto L4fb078;
  #L4fb06a.  v0:= v3.`e2.c.a` @type ^`e2.b` @kind object;
  #L4fb06e.  call temp:= `c`(v0, v4) @signature `Le2/b;.c:(Le2/b;Lm2/e;)Z` @kind static;
  #L4fb074.  v4:= temp;
  #L4fb076.  return v4;
  #L4fb078.  return v0;
}
procedure `m2.j` `b`(`e2.c` v1 @kind this, `m2.d` v2 @kind object) @signature `Le2/c;.b:(Lm2/d;)Lm2/j;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fb08c.  v2:= new `m2.j`;
  #L4fb090.  call `<init>`(v2) @signature `Lm2/j;.<init>:()V` @kind direct;
  #L4fb096.  v0:= 1I;
  #L4fb098.  v2.`m2.j.a` @type ^`boolean` := v0 @kind boolean;
  #L4fb09c.  return v2 @kind object;
}
