record `m1.i` @kind class @AccessFlag PUBLIC_FINAL extends `l1.f` @kind interface, `m1.w` @kind interface {
}
global `m1.i` `@@m1.i.a` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lm1/i;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L52ba5c.  v0:= new `m1.i`;
  #L52ba60.  call `<init>`(v0) @signature `Lm1/i;.<init>:()V` @kind direct;
  #L52ba66.  `@@m1.i.a` @type ^`m1.i` := v0 @kind object;
  #L52ba6a.  return @kind void;
}
procedure `void` `<init>`(`m1.i` v0 @kind this) @signature `Lm1/i;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L52ba7c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L52ba82.  return @kind void;
}
procedure `java.lang.Object` `a`(`m1.i` v2 @kind this, `k1.b` v3 @kind object, `java.lang.reflect.Type` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lm1/i;.a:(Lk1/b;Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L52b9d8.  v4:= v3.`k1.b.k` @type ^`k1.e` @kind object;
  #L52b9dc.  call temp:= `b`(v4) @signature `Lk1/e;.b:()I` @kind virtual;
  #L52b9e2.  v5:= temp;
  #L52b9e4.  v0:= 16I;
  #L52b9e8.  v1:= 6I;
  #L52b9ea.  if v5 != v1 then goto L52b9fa;
  #L52b9ee.  call `v`(v4, v0) @signature `Lk1/e;.v:(I)V` @kind virtual;
  #L52b9f4.  v3:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L52b9f8.  goto L52ba4a;
  #L52b9fa.  v1:= 7I;
  #L52b9fc.  if v5 != v1 then goto L52ba0c;
  #L52ba00.  call `v`(v4, v0) @signature `Lk1/e;.v:(I)V` @kind virtual;
  #L52ba06.  v3:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L52ba0a.  goto L52ba4a;
  #L52ba0c.  v1:= 2I;
  #L52ba0e.  if v5 != v1 then goto L52ba32;
  #L52ba12.  call temp:= `P`(v4) @signature `Lk1/e;.P:()I` @kind virtual;
  #L52ba18.  v3:= temp;
  #L52ba1a.  call `v`(v4, v0) @signature `Lk1/e;.v:(I)V` @kind virtual;
  #L52ba20.  v4:= 1I;
  #L52ba22.  if v3 != v4 then goto L52ba2c;
  #L52ba26.  v3:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L52ba2a.  goto L52ba4a;
  #L52ba2c.  v3:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L52ba30.  goto L52ba4a;
  #L52ba32.  call temp:= `E0`(v3) @signature `Lk1/b;.E0:()Ljava/lang/Object;` @kind virtual;
  #L52ba38.  v3:= temp @kind object;
  #L52ba3a.  if v3 != 0 then goto L52ba42;
  #L52ba3e.  v3:= 0I;
  #L52ba40.  return v3 @kind object;
  #L52ba42.  call temp:= `N`(v3) @signature `Ln1/d;.N:(Ljava/lang/Object;)Ljava/lang/Boolean;` @kind static;
  #L52ba48.  v3:= temp @kind object;
  #L52ba4a.  return v3 @kind object;
}
procedure `void` `b`(`m1.i` v0 @kind this, `m1.p` v1 @kind object, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.reflect.Type` v4 @kind object) @signature `Lm1/i;.b:(Lm1/p;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;)V` @AccessFlag PUBLIC {
    temp;

  #L52ba94.  v1:= v1.`m1.p.b` @type ^`m1.c0` @kind object;
  #L52ba98.  v2:= (`java.lang.Boolean`) v2 @kind object;
  #L52ba9c.  v3:= "false" @kind object;
  #L52baa0.  if v2 != 0 then goto L52bac6;
  #L52baa4.  v2:= v1.`m1.c0.i` @type ^`int`;
  #L52baa8.  v4:= `@@m1.b.WriteNullBooleanAsFalse` @type ^`m1.b` @kind object;
  #L52baac.  v4:= v4.`m1.b.mask` @type ^`int`;
  #L52bab0.  v2:= v2 ^& v4 @kind int;
  #L52bab2.  if v2 == 0 then goto L52babe;
  #L52bab6.  call `write`(v1, v3) @signature `Lm1/c0;.write:(Ljava/lang/String;)V` @kind virtual;
  #L52babc.  goto L52bac4;
  #L52babe.  call `r`(v1) @signature `Lm1/c0;.r:()V` @kind virtual;
  #L52bac4.  return @kind void;
  #L52bac6.  call temp:= `booleanValue`(v2) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L52bacc.  v2:= temp;
  #L52bace.  if v2 == 0 then goto L52bade;
  #L52bad2.  v2:= "true" @kind object;
  #L52bad6.  call `write`(v1, v2) @signature `Lm1/c0;.write:(Ljava/lang/String;)V` @kind virtual;
  #L52badc.  goto L52bae4;
  #L52bade.  call `write`(v1, v3) @signature `Lm1/c0;.write:(Ljava/lang/String;)V` @kind virtual;
  #L52bae4.  return @kind void;
}
