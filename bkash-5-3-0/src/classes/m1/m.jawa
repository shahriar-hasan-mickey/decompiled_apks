record `m1.m` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.Comparable` @kind interface {
  `n1.a` `m1.m.g` @AccessFlag PUBLIC_FINAL;
  `boolean` `m1.m.h` @AccessFlag PROTECTED_FINAL;
  `int` `m1.m.i` @AccessFlag PROTECTED_FINAL;
  `java.lang.String` `m1.m.j` @AccessFlag PROTECTED_FINAL;
  `char`[] `m1.m.k` @AccessFlag PROTECTED;
  `m1.m$a` `m1.m.l` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`m1.m` v10 @kind this, `n1.a` v11 @kind object) @signature `Lm1/m;.<init>:(Ln1/a;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L52c714.  call `<init>`(v10) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L52c71a.  v10.`m1.m.g` @type ^`n1.a` := v11 @kind object;
  #L52c71e.  call temp:= `b`(v11) @signature `Ln1/a;.b:()Lcom/alibaba/fastjson/annotation/JSONField;` @kind virtual;
  #L52c724.  v0:= temp @kind object;
  #L52c726.  v1:= 0I;
  #L52c728.  v2:= 1I;
  #L52c72a.  v3:= 0I;
  #L52c72c.  if v0 == 0 then goto L52c78c;
  #L52c730.  call temp:= `serialzeFeatures`(v0) @signature `Lcom/alibaba/fastjson/annotation/JSONField;.serialzeFeatures:()[Lm1/b;` @kind interface;
  #L52c736.  v4:= temp @kind object;
  #L52c738.  v5:= length @variable v4;
  #L52c73a.  v6:= 0I;
  #L52c73c.  v7:= 0I;
  #L52c73e.  if v6 >= v5 then goto L52c756;
  #L52c742.  v8:= v4[v6] @kind object;
  #L52c746.  v9:= `@@m1.b.WriteMapNullValue` @type ^`m1.b` @kind object;
  #L52c74a.  if v8 != v9 then goto L52c750;
  #L52c74e.  v7:= 1I;
  #L52c750.  v6:= v6 + 1;
  #L52c754.  goto L52c73e;
  #L52c756.  call temp:= `format`(v0) @signature `Lcom/alibaba/fastjson/annotation/JSONField;.format:()Ljava/lang/String;` @kind interface;
  #L52c75c.  v4:= temp @kind object;
  #L52c75e.  call temp:= `trim`(v4) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L52c764.  v4:= temp @kind object;
  #L52c766.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L52c76c.  v5:= temp;
  #L52c76e.  if v5 != 0 then goto L52c774;
  #L52c772.  goto L52c776;
  #L52c774.  v1:= v4 @kind object;
  #L52c776.  call temp:= `serialzeFeatures`(v0) @signature `Lcom/alibaba/fastjson/annotation/JSONField;.serialzeFeatures:()[Lm1/b;` @kind interface;
  #L52c77c.  v0:= temp @kind object;
  #L52c77e.  call temp:= `of`(v0) @signature `Lm1/b;.of:([Lm1/b;)I` @kind static;
  #L52c784.  v0:= temp;
  #L52c786.  v10.`m1.m.i` @type ^`int` := v0;
  #L52c78a.  goto L52c792;
  #L52c78c.  v10.`m1.m.i` @type ^`int` := v3;
  #L52c790.  v7:= 0I;
  #L52c792.  v10.`m1.m.h` @type ^`boolean` := v7 @kind boolean;
  #L52c796.  v10.`m1.m.j` @type ^`java.lang.String` := v1 @kind object;
  #L52c79a.  v11:= v11.`n1.a.g` @type ^`java.lang.String` @kind object;
  #L52c79e.  call temp:= `length`(v11) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L52c7a4.  v0:= temp;
  #L52c7a6.  v1:= v0 + 3;
  #L52c7aa.  v1:= new `char`[v1];
  #L52c7ae.  v10.`m1.m.k` @type ^`char`[] := v1 @kind object;
  #L52c7b2.  call temp:= `length`(v11) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L52c7b8.  v1:= temp;
  #L52c7ba.  v4:= v10.`m1.m.k` @type ^`char`[] @kind object;
  #L52c7be.  call `getChars`(v11, v3, v1, v4, v2) @signature `Ljava/lang/String;.getChars:(II[CI)V` @kind virtual;
  #L52c7c4.  v11:= v10.`m1.m.k` @type ^`char`[] @kind object;
  #L52c7c8.  v1:= 34I;
  #L52c7cc.  v11[v3]:= v1 @kind char;
  #L52c7d0.  v2:= v0 + 1;
  #L52c7d4.  v11[v2]:= v1 @kind char;
  #L52c7d8.  v0:= v0 + 2;
  #L52c7dc.  v1:= 58I;
  #L52c7e0.  v11[v0]:= v1 @kind char;
  #L52c7e4.  return @kind void;
}
procedure `int` `a`(`m1.m` v1 @kind this, `m1.m` v2 @kind object) @signature `Lm1/m;.a:(Lm1/m;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52c620.  v0:= v1.`m1.m.g` @type ^`n1.a` @kind object;
  #L52c624.  v2:= v2.`m1.m.g` @type ^`n1.a` @kind object;
  #L52c628.  call temp:= `a`(v0, v2) @signature `Ln1/a;.a:(Ln1/a;)I` @kind virtual;
  #L52c62e.  v2:= temp;
  #L52c630.  return v2;
}
procedure `java.lang.Object` `b`(`m1.m` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lm1/m;.b:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L52c664.  v0:= v4.`m1.m.g` @type ^`n1.a` @kind object;
  #L52c668.  call temp:= `c`(v0, v5) @signature `Ln1/a;.c:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L52c66e.  v5:= temp @kind object;
  #L52c670.  return v5 @kind object;
  #L52c672.  v5:= Exception @type ^`java.lang.Exception` @kind object;
  #L52c674.  v0:= v4.`m1.m.g` @type ^`n1.a` @kind object;
  #L52c678.  v1:= v0.`n1.a.h` @type ^`java.lang.reflect.Method` @kind object;
  #L52c67c.  if v1 == 0 then goto L52c682;
  #L52c680.  goto L52c686;
  #L52c682.  v1:= v0.`n1.a.i` @type ^`java.lang.reflect.Field` @kind object;
  #L52c686.  v0:= new `java.lang.StringBuilder`;
  #L52c68a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L52c690.  call temp:= `getDeclaringClass`(v1) @signature `Ljava/lang/reflect/Member;.getDeclaringClass:()Ljava/lang/Class;` @kind interface;
  #L52c696.  v2:= temp @kind object;
  #L52c698.  call temp:= `getName`(v2) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L52c69e.  v2:= temp @kind object;
  #L52c6a0.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L52c6a6.  v2:= "." @kind object;
  #L52c6aa.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L52c6b0.  call temp:= `getName`(v1) @signature `Ljava/lang/reflect/Member;.getName:()Ljava/lang/String;` @kind interface;
  #L52c6b6.  v1:= temp @kind object;
  #L52c6b8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L52c6be.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L52c6c4.  v0:= temp @kind object;
  #L52c6c6.  v1:= new `com.alibaba.fastjson.c`;
  #L52c6ca.  v2:= new `java.lang.StringBuilder`;
  #L52c6ce.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L52c6d4.  v3:= "get property errorã€‚ " @kind object;
  #L52c6d8.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L52c6de.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L52c6e4.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L52c6ea.  v0:= temp @kind object;
  #L52c6ec.  call `<init>`(v1, v0, v5) @signature `Lcom/alibaba/fastjson/c;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L52c6f2.  throw v1;
  catch `java.lang.Exception` @[L52c664..L52c670] goto L52c672;
}
procedure `void` `c`(`m1.m` v3 @kind this, `m1.p` v4 @kind object) @signature `Lm1/m;.c:(Lm1/p;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L52c7f8.  v4:= v4.`m1.p.b` @type ^`m1.c0` @kind object;
  #L52c7fc.  v0:= v4.`m1.c0.i` @type ^`int`;
  #L52c800.  v1:= `@@m1.b.QuoteFieldNames` @type ^`m1.b` @kind object;
  #L52c804.  v1:= v1.`m1.b.mask` @type ^`int`;
  #L52c808.  v1:= v1 ^& v0 @kind int;
  #L52c80a.  v2:= 1I;
  #L52c80c.  if v1 == 0 then goto L52c83e;
  #L52c810.  v1:= `@@m1.b.UseSingleQuotes` @type ^`m1.b` @kind object;
  #L52c814.  v1:= v1.`m1.b.mask` @type ^`int`;
  #L52c818.  v0:= v0 ^& v1 @kind int;
  #L52c81a.  if v0 == 0 then goto L52c82e;
  #L52c81e.  v0:= v3.`m1.m.g` @type ^`n1.a` @kind object;
  #L52c822.  v0:= v0.`n1.a.g` @type ^`java.lang.String` @kind object;
  #L52c826.  call `C`(v4, v0, v2) @signature `Lm1/c0;.C:(Ljava/lang/String;Z)V` @kind virtual;
  #L52c82c.  goto L52c84c;
  #L52c82e.  v0:= v3.`m1.m.k` @type ^`char`[] @kind object;
  #L52c832.  v1:= 0I;
  #L52c834.  v2:= length @variable v0;
  #L52c836.  call `write`(v4, v0, v1, v2) @signature `Lm1/c0;.write:([CII)V` @kind virtual;
  #L52c83c.  goto L52c84c;
  #L52c83e.  v0:= v3.`m1.m.g` @type ^`n1.a` @kind object;
  #L52c842.  v0:= v0.`n1.a.g` @type ^`java.lang.String` @kind object;
  #L52c846.  call `C`(v4, v0, v2) @signature `Lm1/c0;.C:(Ljava/lang/String;Z)V` @kind virtual;
  #L52c84c.  return @kind void;
}
procedure `int` `compareTo`(`m1.m` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lm1/m;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L52c644.  v1:= (`m1.m`) v1 @kind object;
  #L52c648.  call temp:= `a`(v0, v1) @signature `Lm1/m;.a:(Lm1/m;)I` @kind virtual;
  #L52c64e.  v1:= temp;
  #L52c650.  return v1;
}
procedure `void` `d`(`m1.m` v3 @kind this, `m1.p` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lm1/m;.d:(Lm1/p;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L52c860.  v0:= v3.`m1.m.j` @type ^`java.lang.String` @kind object;
  #L52c864.  if v0 == 0 then goto L52c870;
  #L52c868.  call `g`(v4, v5, v0) @signature `Lm1/p;.g:(Ljava/lang/Object;Ljava/lang/String;)V` @kind virtual;
  #L52c86e.  return @kind void;
  #L52c870.  v0:= v3.`m1.m.l` @type ^`m1.m$a` @kind object;
  #L52c874.  if v0 != 0 then goto L52c8a8;
  #L52c878.  if v5 != 0 then goto L52c886;
  #L52c87c.  v0:= v3.`m1.m.g` @type ^`n1.a` @kind object;
  #L52c880.  v0:= v0.`n1.a.m` @type ^`java.lang.Class` @kind object;
  #L52c884.  goto L52c88e;
  #L52c886.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L52c88c.  v0:= temp @kind object;
  #L52c88e.  v1:= v4.`m1.p.a` @type ^`m1.a0` @kind object;
  #L52c892.  call temp:= `a`(v1, v0) @signature `Lm1/a0;.a:(Ljava/lang/Class;)Lm1/w;` @kind virtual;
  #L52c898.  v1:= temp @kind object;
  #L52c89a.  v2:= new `m1.m$a`;
  #L52c89e.  call `<init>`(v2, v1, v0) @signature `Lm1/m$a;.<init>:(Lm1/w;Ljava/lang/Class;)V` @kind direct;
  #L52c8a4.  v3.`m1.m.l` @type ^`m1.m$a` := v2 @kind object;
  #L52c8a8.  v0:= v3.`m1.m.l` @type ^`m1.m$a` @kind object;
  #L52c8ac.  if v5 != 0 then goto L52c960;
  #L52c8b0.  v5:= v3.`m1.m.i` @type ^`int`;
  #L52c8b4.  v1:= `@@m1.b.WriteNullNumberAsZero` @type ^`m1.b` @kind object;
  #L52c8b8.  v1:= v1.`m1.b.mask` @type ^`int`;
  #L52c8bc.  v5:= v5 ^& v1 @kind int;
  #L52c8be.  if v5 == 0 then goto L52c8e6;
  #L52c8c2.  v5:= constclass @type ^`java.lang.Number` @kind object;
  #L52c8c6.  v1:= v0.`m1.m$a.b` @type ^`java.lang.Class` @kind object;
  #L52c8ca.  call temp:= `isAssignableFrom`(v5, v1) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L52c8d0.  v5:= temp;
  #L52c8d2.  if v5 == 0 then goto L52c8e6;
  #L52c8d6.  v4:= v4.`m1.p.b` @type ^`m1.c0` @kind object;
  #L52c8da.  v5:= 48I;
  #L52c8de.  call `write`(v4, v5) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L52c8e4.  return @kind void;
  #L52c8e6.  v5:= v3.`m1.m.i` @type ^`int`;
  #L52c8ea.  v1:= `@@m1.b.WriteNullBooleanAsFalse` @type ^`m1.b` @kind object;
  #L52c8ee.  v1:= v1.`m1.b.mask` @type ^`int`;
  #L52c8f2.  v1:= v1 ^& v5 @kind int;
  #L52c8f4.  if v1 == 0 then goto L52c914;
  #L52c8f8.  v1:= constclass @type ^`java.lang.Boolean` @kind object;
  #L52c8fc.  v2:= v0.`m1.m$a.b` @type ^`java.lang.Class` @kind object;
  #L52c900.  if v1 != v2 then goto L52c914;
  #L52c904.  v4:= v4.`m1.p.b` @type ^`m1.c0` @kind object;
  #L52c908.  v5:= "false" @kind object;
  #L52c90c.  call `write`(v4, v5) @signature `Lm1/c0;.write:(Ljava/lang/String;)V` @kind virtual;
  #L52c912.  return @kind void;
  #L52c914.  v1:= `@@m1.b.WriteNullListAsEmpty` @type ^`m1.b` @kind object;
  #L52c918.  v1:= v1.`m1.b.mask` @type ^`int`;
  #L52c91c.  v5:= v5 ^& v1 @kind int;
  #L52c91e.  if v5 == 0 then goto L52c946;
  #L52c922.  v5:= constclass @type ^`java.util.Collection` @kind object;
  #L52c926.  v1:= v0.`m1.m$a.b` @type ^`java.lang.Class` @kind object;
  #L52c92a.  call temp:= `isAssignableFrom`(v5, v1) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L52c930.  v5:= temp;
  #L52c932.  if v5 == 0 then goto L52c946;
  #L52c936.  v4:= v4.`m1.p.b` @type ^`m1.c0` @kind object;
  #L52c93a.  v5:= "[]" @kind object;
  #L52c93e.  call `write`(v4, v5) @signature `Lm1/c0;.write:(Ljava/lang/String;)V` @kind virtual;
  #L52c944.  return @kind void;
  #L52c946.  v5:= v0.`m1.m$a.a` @type ^`m1.w` @kind object;
  #L52c94a.  v1:= 0I;
  #L52c94c.  v2:= v3.`m1.m.g` @type ^`n1.a` @kind object;
  #L52c950.  v2:= v2.`n1.a.g` @type ^`java.lang.String` @kind object;
  #L52c954.  v0:= v0.`m1.m$a.b` @type ^`java.lang.Class` @kind object;
  #L52c958.  call `b`(v5, v4, v1, v2, v0) @signature `Lm1/w;.b:(Lm1/p;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;)V` @kind interface;
  #L52c95e.  return @kind void;
  #L52c960.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L52c966.  v1:= temp @kind object;
  #L52c968.  v2:= v0.`m1.m$a.b` @type ^`java.lang.Class` @kind object;
  #L52c96c.  if v1 != v2 then goto L52c988;
  #L52c970.  v0:= v0.`m1.m$a.a` @type ^`m1.w` @kind object;
  #L52c974.  v1:= v3.`m1.m.g` @type ^`n1.a` @kind object;
  #L52c978.  v2:= v1.`n1.a.g` @type ^`java.lang.String` @kind object;
  #L52c97c.  v1:= v1.`n1.a.n` @type ^`java.lang.reflect.Type` @kind object;
  #L52c980.  call `b`(v0, v4, v5, v2, v1) @signature `Lm1/w;.b:(Lm1/p;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;)V` @kind interface;
  #L52c986.  return @kind void;
  #L52c988.  v0:= v4.`m1.p.a` @type ^`m1.a0` @kind object;
  #L52c98c.  call temp:= `a`(v0, v1) @signature `Lm1/a0;.a:(Ljava/lang/Class;)Lm1/w;` @kind virtual;
  #L52c992.  v0:= temp @kind object;
  #L52c994.  v1:= v3.`m1.m.g` @type ^`n1.a` @kind object;
  #L52c998.  v2:= v1.`n1.a.g` @type ^`java.lang.String` @kind object;
  #L52c99c.  v1:= v1.`n1.a.n` @type ^`java.lang.reflect.Type` @kind object;
  #L52c9a0.  call `b`(v0, v4, v5, v2, v1) @signature `Lm1/w;.b:(Lm1/p;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;)V` @kind interface;
  #L52c9a6.  return @kind void;
}
