record `m1.n` @kind class @AccessFlag PUBLIC_FINAL extends `l1.f` @kind interface, `m1.w` @kind interface {
}
global `m1.n` `@@m1.n.a` @AccessFlag PUBLIC_STATIC;
procedure `void` `<clinit>`() @signature `Lm1/n;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L52cb28.  v0:= new `m1.n`;
  #L52cb2c.  call `<init>`(v0) @signature `Lm1/n;.<init>:()V` @kind direct;
  #L52cb32.  `@@m1.n.a` @type ^`m1.n` := v0 @kind object;
  #L52cb36.  return @kind void;
}
procedure `void` `<init>`(`m1.n` v0 @kind this) @signature `Lm1/n;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L52cb48.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L52cb4e.  return @kind void;
}
procedure `java.lang.Object` `a`(`m1.n` v5 @kind this, `k1.b` v6 @kind object, `java.lang.reflect.Type` v7 @kind object, `java.lang.Object` v8 @kind object) @signature `Lm1/n;.a:(Lk1/b;Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L52c9b8.  v0:= constclass @type ^`java.lang.Long` @kind object;
  #L52c9bc.  v1:= v6.`k1.b.k` @type ^`k1.e` @kind object;
  #L52c9c0.  call temp:= `b`(v1) @signature `Lk1/e;.b:()I` @kind virtual;
  #L52c9c6.  v2:= temp;
  #L52c9c8.  v3:= 16I;
  #L52c9cc.  v4:= 8I;
  #L52c9d0.  if v2 != v4 then goto L52c9de;
  #L52c9d4.  call `v`(v1, v3) @signature `Lk1/e;.v:(I)V` @kind virtual;
  #L52c9da.  v6:= 0I;
  #L52c9dc.  return v6 @kind object;
  #L52c9de.  v4:= 2I;
  #L52c9e0.  if v2 != v4 then goto L52ca4c;
  #L52c9e4.  v6:= `@@java.lang.Long.TYPE` @type ^`java.lang.Class` @kind object;
  #L52c9e8.  if v7 == v6 then goto L52ca34;
  #L52c9ec.  if v7 != v0 then goto L52c9f2;
  #L52c9f0.  goto L52ca34;
  #L52c9f2.  call temp:= `P`(v1) @signature `Lk1/e;.P:()I` @kind virtual;
  #L52c9f8.  v6:= temp;
  #L52c9fa.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L52ca00.  v6:= temp @kind object;
  #L52ca02.  goto L52ca44;
  #L52ca04.  v6:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L52ca06.  v7:= new `com.alibaba.fastjson.c`;
  #L52ca0a.  v0:= new `java.lang.StringBuilder`;
  #L52ca0e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L52ca14.  v1:= "int value overflow, field : " @kind object;
  #L52ca18.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L52ca1e.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L52ca24.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L52ca2a.  v8:= temp @kind object;
  #L52ca2c.  call `<init>`(v7, v8, v6) @signature `Lcom/alibaba/fastjson/c;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L52ca32.  throw v7;
  #L52ca34.  call temp:= `c0`(v1) @signature `Lk1/e;.c0:()J` @kind virtual;
  #L52ca3a.  v6:= temp @kind wide;
  #L52ca3c.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L52ca42.  v6:= temp @kind object;
  #L52ca44.  call `v`(v1, v3) @signature `Lk1/e;.v:(I)V` @kind virtual;
  #L52ca4a.  goto L52caba;
  #L52ca4c.  v4:= 3I;
  #L52ca4e.  if v2 != v4 then goto L52ca92;
  #L52ca52.  call temp:= `d0`(v1) @signature `Lk1/e;.d0:()Ljava/math/BigDecimal;` @kind virtual;
  #L52ca58.  v6:= temp @kind object;
  #L52ca5a.  call `v`(v1, v3) @signature `Lk1/e;.v:(I)V` @kind virtual;
  #L52ca60.  v8:= `@@java.lang.Long.TYPE` @type ^`java.lang.Class` @kind object;
  #L52ca64.  if v7 == v8 then goto L52ca80;
  #L52ca68.  if v7 != v0 then goto L52ca6e;
  #L52ca6c.  goto L52ca80;
  #L52ca6e.  call temp:= `intValue`(v6) @signature `Ljava/math/BigDecimal;.intValue:()I` @kind virtual;
  #L52ca74.  v6:= temp;
  #L52ca76.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L52ca7c.  v6:= temp @kind object;
  #L52ca7e.  goto L52caba;
  #L52ca80.  call temp:= `longValue`(v6) @signature `Ljava/math/BigDecimal;.longValue:()J` @kind virtual;
  #L52ca86.  v6:= temp @kind wide;
  #L52ca88.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L52ca8e.  v6:= temp @kind object;
  #L52ca90.  goto L52caba;
  #L52ca92.  call temp:= `E0`(v6) @signature `Lk1/b;.E0:()Ljava/lang/Object;` @kind virtual;
  #L52ca98.  v6:= temp @kind object;
  #L52ca9a.  v1:= `@@java.lang.Long.TYPE` @type ^`java.lang.Class` @kind object;
  #L52ca9e.  if v7 == v1 then goto L52cab2;
  #L52caa2.  if v7 != v0 then goto L52caa8;
  #L52caa6.  goto L52cab2;
  #L52caa8.  call temp:= `L`(v6) @signature `Ln1/d;.L:(Ljava/lang/Object;)Ljava/lang/Integer;` @kind static;
  #L52caae.  v6:= temp @kind object;
  #L52cab0.  goto L52caba;
  #L52cab2.  call temp:= `K`(v6) @signature `Ln1/d;.K:(Ljava/lang/Object;)Ljava/lang/Long;` @kind static;
  #L52cab8.  v6:= temp @kind object;
  #L52caba.  return v6 @kind object;
  #L52cabc.  v7:= Exception @type ^`java.lang.Exception` @kind object;
  #L52cabe.  v0:= new `com.alibaba.fastjson.c`;
  #L52cac2.  v1:= new `java.lang.StringBuilder`;
  #L52cac6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L52cacc.  v2:= "cast error, field : " @kind object;
  #L52cad0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L52cad6.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L52cadc.  v8:= ", value " @kind object;
  #L52cae0.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L52cae6.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L52caec.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L52caf2.  v6:= temp @kind object;
  #L52caf4.  call `<init>`(v0, v6, v7) @signature `Lcom/alibaba/fastjson/c;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L52cafa.  throw v0;
  catch `java.lang.NumberFormatException` @[L52c9f2..L52ca02] goto L52ca04;
  catch `java.lang.Exception` @[L52ca9a..L52caba] goto L52cabc;
}
procedure `void` `b`(`m1.n` v4 @kind this, `m1.p` v5 @kind object, `java.lang.Object` v6 @kind object, `java.lang.Object` v7 @kind object, `java.lang.reflect.Type` v8 @kind object) @signature `Lm1/n;.b:(Lm1/p;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L52cb60.  v7:= constclass @type ^`java.lang.Long` @kind object;
  #L52cb64.  v5:= v5.`m1.p.b` @type ^`m1.c0` @kind object;
  #L52cb68.  v0:= v6 @kind object;
  #L52cb6a.  v0:= (`java.lang.Number`) v0 @kind object;
  #L52cb6e.  if v0 != 0 then goto L52cb98;
  #L52cb72.  v6:= v5.`m1.c0.i` @type ^`int`;
  #L52cb76.  v7:= `@@m1.b.WriteNullNumberAsZero` @type ^`m1.b` @kind object;
  #L52cb7a.  v7:= v7.`m1.b.mask` @type ^`int`;
  #L52cb7e.  v6:= v6 ^& v7 @kind int;
  #L52cb80.  if v6 == 0 then goto L52cb90;
  #L52cb84.  v6:= 48I;
  #L52cb88.  call `write`(v5, v6) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L52cb8e.  goto L52cb96;
  #L52cb90.  call `r`(v5) @signature `Lm1/c0;.r:()V` @kind virtual;
  #L52cb96.  return @kind void;
  #L52cb98.  v6:= instanceof @variable v6 @type ^`java.lang.Long` @kind boolean;
  #L52cb9c.  if v6 == 0 then goto L52cbb0;
  #L52cba0.  call temp:= `longValue`(v0) @signature `Ljava/lang/Number;.longValue:()J` @kind virtual;
  #L52cba6.  v1:= temp @kind wide;
  #L52cba8.  call `v`(v5, v1) @signature `Lm1/c0;.v:(J)V` @kind virtual;
  #L52cbae.  goto L52cbbe;
  #L52cbb0.  call temp:= `intValue`(v0) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L52cbb6.  v6:= temp;
  #L52cbb8.  call `a0`(v5, v6) @signature `Lm1/c0;.a0:(I)V` @kind virtual;
  #L52cbbe.  v6:= v5.`m1.c0.i` @type ^`int`;
  #L52cbc2.  v1:= `@@m1.b.WriteClassName` @type ^`m1.b` @kind object;
  #L52cbc6.  v1:= v1.`m1.b.mask` @type ^`int`;
  #L52cbca.  v6:= v6 ^& v1 @kind int;
  #L52cbcc.  if v6 == 0 then goto L52cc36;
  #L52cbd0.  call temp:= `getClass`(v0) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L52cbd6.  v6:= temp @kind object;
  #L52cbd8.  v1:= constclass @type ^`java.lang.Byte` @kind object;
  #L52cbdc.  if v6 != v1 then goto L52cbec;
  #L52cbe0.  v6:= 66I;
  #L52cbe4.  call `write`(v5, v6) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L52cbea.  goto L52cc36;
  #L52cbec.  v1:= constclass @type ^`java.lang.Short` @kind object;
  #L52cbf0.  if v6 != v1 then goto L52cc00;
  #L52cbf4.  v6:= 83I;
  #L52cbf8.  call `write`(v5, v6) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L52cbfe.  goto L52cc36;
  #L52cc00.  if v6 != v7 then goto L52cc36;
  #L52cc04.  call temp:= `longValue`(v0) @signature `Ljava/lang/Number;.longValue:()J` @kind virtual;
  #L52cc0a.  v0:= temp @kind wide;
  #L52cc0c.  v2:= 2147483647L;
  #L52cc12.  v6:= lcmp(v0, v2);
  #L52cc16.  if v6 > 0 then goto L52cc36;
  #L52cc1a.  v2:= -2147483648L;
  #L52cc20.  v6:= lcmp(v0, v2);
  #L52cc24.  if v6 < 0 then goto L52cc36;
  #L52cc28.  if v8 == v7 then goto L52cc36;
  #L52cc2c.  v6:= 76I;
  #L52cc30.  call `write`(v5, v6) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L52cc36.  return @kind void;
}
