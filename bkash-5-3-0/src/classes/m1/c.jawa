record `m1.c` @kind class @AccessFlag PUBLIC extends `l1.f` @kind interface, `m1.w` @kind interface {
}
global `m1.c` `@@m1.c.a` @AccessFlag PUBLIC_STATIC;
procedure `void` `<clinit>`() @signature `Lm1/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L52b018.  v0:= new `m1.c`;
  #L52b01c.  call `<init>`(v0) @signature `Lm1/c;.<init>:()V` @kind direct;
  #L52b022.  `@@m1.c.a` @type ^`m1.c` := v0 @kind object;
  #L52b026.  return @kind void;
}
procedure `void` `<init>`(`m1.c` v0 @kind this) @signature `Lm1/c;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L52b038.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L52b03e.  return @kind void;
}
procedure `java.lang.Object` `a`(`m1.c` v0 @kind this, `k1.b` v1 @kind object, `java.lang.reflect.Type` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lm1/c;.a:(Lk1/b;Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L52affc.  call temp:= `O0`(v1) @signature `Lk1/b;.O0:()Ljava/lang/String;` @kind virtual;
  #L52b002.  v1:= temp @kind object;
  #L52b004.  return v1 @kind object;
}
procedure `void` `b`(`m1.c` v0 @kind this, `m1.p` v1 @kind object, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.reflect.Type` v4 @kind object) @signature `Lm1/c;.b:(Lm1/p;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;)V` @AccessFlag PUBLIC {
    temp;

  #L52b050.  v2:= (`java.lang.String`) v2 @kind object;
  #L52b054.  v1:= v1.`m1.p.b` @type ^`m1.c0` @kind object;
  #L52b058.  if v2 != 0 then goto L52b064;
  #L52b05c.  call `r`(v1) @signature `Lm1/c0;.r:()V` @kind virtual;
  #L52b062.  return @kind void;
  #L52b064.  call `d0`(v1, v2) @signature `Lm1/c0;.d0:(Ljava/lang/String;)V` @kind virtual;
  #L52b06a.  return @kind void;
}
