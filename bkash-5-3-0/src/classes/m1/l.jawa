record `m1.l` @kind class @AccessFlag  extends `m1.w` @kind interface {
}
procedure `void` `<init>`(`m1.l` v0 @kind this) @signature `Lm1/l;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L52c574.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L52c57a.  return @kind void;
}
procedure `void` `b`(`m1.l` v0 @kind this, `m1.p` v1 @kind object, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.reflect.Type` v4 @kind object) @signature `Lm1/l;.b:(Lm1/p;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;)V` @AccessFlag PUBLIC {
    temp;

  #L52c58c.  v1:= v1.`m1.p.b` @type ^`m1.c0` @kind object;
  #L52c590.  v3:= v1.`m1.c0.i` @type ^`int`;
  #L52c594.  v4:= `@@m1.b.WriteEnumUsingToString` @type ^`m1.b` @kind object;
  #L52c598.  v4:= v4.`m1.b.mask` @type ^`int`;
  #L52c59c.  v3:= v3 ^& v4 @kind int;
  #L52c59e.  if v3 == 0 then goto L52c5dc;
  #L52c5a2.  v2:= (`java.lang.Enum`) v2 @kind object;
  #L52c5a6.  call temp:= `toString`(v2) @signature `Ljava/lang/Enum;.toString:()Ljava/lang/String;` @kind virtual;
  #L52c5ac.  v2:= temp @kind object;
  #L52c5ae.  v3:= v1.`m1.c0.i` @type ^`int`;
  #L52c5b2.  v4:= `@@m1.b.UseSingleQuotes` @type ^`m1.b` @kind object;
  #L52c5b6.  v4:= v4.`m1.b.mask` @type ^`int`;
  #L52c5ba.  v3:= v3 ^& v4 @kind int;
  #L52c5bc.  v4:= 0I;
  #L52c5be.  if v3 == 0 then goto L52c5c6;
  #L52c5c2.  v3:= 1I;
  #L52c5c4.  goto L52c5c8;
  #L52c5c6.  v3:= 0I;
  #L52c5c8.  if v3 == 0 then goto L52c5d4;
  #L52c5cc.  call `i0`(v1, v2) @signature `Lm1/c0;.i0:(Ljava/lang/String;)V` @kind virtual;
  #L52c5d2.  goto L52c5ee;
  #L52c5d4.  call `y`(v1, v2, v4, v4) @signature `Lm1/c0;.y:(Ljava/lang/String;CZ)V` @kind virtual;
  #L52c5da.  goto L52c5ee;
  #L52c5dc.  v2:= (`java.lang.Enum`) v2 @kind object;
  #L52c5e0.  call temp:= `ordinal`(v2) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L52c5e6.  v2:= temp;
  #L52c5e8.  call `a0`(v1, v2) @signature `Lm1/c0;.a0:(I)V` @kind virtual;
  #L52c5ee.  return @kind void;
}
