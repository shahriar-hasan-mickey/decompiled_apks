record `m1.z` @kind class @AccessFlag PUBLIC {
  `m1.z` `m1.z.a` @AccessFlag PUBLIC_FINAL;
  `java.lang.Object` `m1.z.b` @AccessFlag PUBLIC_FINAL;
  `java.lang.Object` `m1.z.c` @AccessFlag PUBLIC_FINAL;
  `int` `m1.z.d` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`m1.z` v0 @kind this, `m1.z` v1 @kind object, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `int` v4 ) @signature `Lm1/z;.<init>:(Lm1/z;Ljava/lang/Object;Ljava/lang/Object;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L52f808.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L52f80e.  v0.`m1.z.a` @type ^`m1.z` := v1 @kind object;
  #L52f812.  v0.`m1.z.b` @type ^`java.lang.Object` := v2 @kind object;
  #L52f816.  v0.`m1.z.c` @type ^`java.lang.Object` := v3 @kind object;
  #L52f81a.  v0.`m1.z.d` @type ^`int` := v4;
  #L52f81e.  return @kind void;
}
procedure `java.lang.String` `toString`(`m1.z` v2 @kind this) @signature `Lm1/z;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L52f760.  v0:= v2.`m1.z.a` @type ^`m1.z` @kind object;
  #L52f764.  if v0 != 0 then goto L52f76e;
  #L52f768.  v0:= "$" @kind object;
  #L52f76c.  return v0 @kind object;
  #L52f76e.  v0:= v2.`m1.z.c` @type ^`java.lang.Object` @kind object;
  #L52f772.  v0:= instanceof @variable v0 @type ^`java.lang.Integer` @kind boolean;
  #L52f776.  if v0 == 0 then goto L52f7be;
  #L52f77a.  v0:= new `java.lang.StringBuilder`;
  #L52f77e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L52f784.  v1:= v2.`m1.z.a` @type ^`m1.z` @kind object;
  #L52f788.  call temp:= `toString`(v1) @signature `Lm1/z;.toString:()Ljava/lang/String;` @kind virtual;
  #L52f78e.  v1:= temp @kind object;
  #L52f790.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L52f796.  v1:= "[" @kind object;
  #L52f79a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L52f7a0.  v1:= v2.`m1.z.c` @type ^`java.lang.Object` @kind object;
  #L52f7a4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L52f7aa.  v1:= "]" @kind object;
  #L52f7ae.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L52f7b4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L52f7ba.  v0:= temp @kind object;
  #L52f7bc.  return v0 @kind object;
  #L52f7be.  v0:= new `java.lang.StringBuilder`;
  #L52f7c2.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L52f7c8.  v1:= v2.`m1.z.a` @type ^`m1.z` @kind object;
  #L52f7cc.  call temp:= `toString`(v1) @signature `Lm1/z;.toString:()Ljava/lang/String;` @kind virtual;
  #L52f7d2.  v1:= temp @kind object;
  #L52f7d4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L52f7da.  v1:= "." @kind object;
  #L52f7de.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L52f7e4.  v1:= v2.`m1.z.c` @type ^`java.lang.Object` @kind object;
  #L52f7e8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L52f7ee.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L52f7f4.  v0:= temp @kind object;
  #L52f7f6.  return v0 @kind object;
}
