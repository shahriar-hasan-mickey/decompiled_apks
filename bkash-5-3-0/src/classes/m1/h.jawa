record `m1.h` @kind class @AccessFlag PUBLIC extends `l1.f` @kind interface, `m1.w` @kind interface {
}
global `m1.h` `@@m1.h.a` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lm1/h;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L52b900.  v0:= new `m1.h`;
  #L52b904.  call `<init>`(v0) @signature `Lm1/h;.<init>:()V` @kind direct;
  #L52b90a.  `@@m1.h.a` @type ^`m1.h` := v0 @kind object;
  #L52b90e.  return @kind void;
}
procedure `void` `<init>`(`m1.h` v0 @kind this) @signature `Lm1/h;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L52b920.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L52b926.  return @kind void;
}
procedure `java.lang.Object` `a`(`m1.h` v3 @kind this, `k1.b` v4 @kind object, `java.lang.reflect.Type` v5 @kind object, `java.lang.Object` v6 @kind object) @signature `Lm1/h;.a:(Lk1/b;Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L52b850.  v6:= v4.`k1.b.k` @type ^`k1.e` @kind object;
  #L52b854.  call temp:= `b`(v6) @signature `Lk1/e;.b:()I` @kind virtual;
  #L52b85a.  v0:= temp;
  #L52b85c.  v1:= 16I;
  #L52b860.  v2:= 2I;
  #L52b862.  if v0 != v2 then goto L52b89c;
  #L52b866.  v4:= constclass @type ^`java.math.BigInteger` @kind object;
  #L52b86a.  if v5 != v4 then goto L52b88c;
  #L52b86e.  call temp:= `B`(v6) @signature `Lk1/e;.B:()Ljava/lang/String;` @kind virtual;
  #L52b874.  v4:= temp @kind object;
  #L52b876.  call `v`(v6, v1) @signature `Lk1/e;.v:(I)V` @kind virtual;
  #L52b87c.  v5:= new `java.math.BigInteger`;
  #L52b880.  v6:= 10I;
  #L52b884.  call `<init>`(v5, v4, v6) @signature `Ljava/math/BigInteger;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L52b88a.  return v5 @kind object;
  #L52b88c.  call temp:= `d0`(v6) @signature `Lk1/e;.d0:()Ljava/math/BigDecimal;` @kind virtual;
  #L52b892.  v4:= temp @kind object;
  #L52b894.  call `v`(v6, v1) @signature `Lk1/e;.v:(I)V` @kind virtual;
  #L52b89a.  return v4 @kind object;
  #L52b89c.  v2:= 3I;
  #L52b89e.  if v0 != v2 then goto L52b8c2;
  #L52b8a2.  call temp:= `d0`(v6) @signature `Lk1/e;.d0:()Ljava/math/BigDecimal;` @kind virtual;
  #L52b8a8.  v4:= temp @kind object;
  #L52b8aa.  call `v`(v6, v1) @signature `Lk1/e;.v:(I)V` @kind virtual;
  #L52b8b0.  v6:= constclass @type ^`java.math.BigInteger` @kind object;
  #L52b8b4.  if v5 != v6 then goto L52b8c0;
  #L52b8b8.  call temp:= `toBigInteger`(v4) @signature `Ljava/math/BigDecimal;.toBigInteger:()Ljava/math/BigInteger;` @kind virtual;
  #L52b8be.  v4:= temp @kind object;
  #L52b8c0.  return v4 @kind object;
  #L52b8c2.  call temp:= `E0`(v4) @signature `Lk1/b;.E0:()Ljava/lang/Object;` @kind virtual;
  #L52b8c8.  v4:= temp @kind object;
  #L52b8ca.  if v4 != 0 then goto L52b8d2;
  #L52b8ce.  v4:= 0I;
  #L52b8d0.  return v4 @kind object;
  #L52b8d2.  v6:= constclass @type ^`java.math.BigInteger` @kind object;
  #L52b8d6.  if v5 != v6 then goto L52b8e4;
  #L52b8da.  call temp:= `G`(v4) @signature `Ln1/d;.G:(Ljava/lang/Object;)Ljava/math/BigInteger;` @kind static;
  #L52b8e0.  v4:= temp @kind object;
  #L52b8e2.  return v4 @kind object;
  #L52b8e4.  call temp:= `F`(v4) @signature `Ln1/d;.F:(Ljava/lang/Object;)Ljava/math/BigDecimal;` @kind static;
  #L52b8ea.  v4:= temp @kind object;
  #L52b8ec.  return v4 @kind object;
}
procedure `void` `b`(`m1.h` v1 @kind this, `m1.p` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.reflect.Type` v5 @kind object) @signature `Lm1/h;.b:(Lm1/p;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52b938.  v2:= v2.`m1.p.b` @type ^`m1.c0` @kind object;
  #L52b93c.  if v3 != 0 then goto L52b966;
  #L52b940.  v3:= v2.`m1.c0.i` @type ^`int`;
  #L52b944.  v4:= `@@m1.b.WriteNullNumberAsZero` @type ^`m1.b` @kind object;
  #L52b948.  v4:= v4.`m1.b.mask` @type ^`int`;
  #L52b94c.  v3:= v3 ^& v4 @kind int;
  #L52b94e.  if v3 == 0 then goto L52b95e;
  #L52b952.  v3:= 48I;
  #L52b956.  call `write`(v2, v3) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L52b95c.  goto L52b964;
  #L52b95e.  call `r`(v2) @signature `Lm1/c0;.r:()V` @kind virtual;
  #L52b964.  return @kind void;
  #L52b966.  v4:= instanceof @variable v3 @type ^`java.math.BigInteger` @kind boolean;
  #L52b96a.  if v4 == 0 then goto L52b982;
  #L52b96e.  v3:= (`java.math.BigInteger`) v3 @kind object;
  #L52b972.  call temp:= `toString`(v3) @signature `Ljava/math/BigInteger;.toString:()Ljava/lang/String;` @kind virtual;
  #L52b978.  v3:= temp @kind object;
  #L52b97a.  call `write`(v2, v3) @signature `Lm1/c0;.write:(Ljava/lang/String;)V` @kind virtual;
  #L52b980.  return @kind void;
  #L52b982.  v3:= (`java.math.BigDecimal`) v3 @kind object;
  #L52b986.  call temp:= `toString`(v3) @signature `Ljava/math/BigDecimal;.toString:()Ljava/lang/String;` @kind virtual;
  #L52b98c.  v4:= temp @kind object;
  #L52b98e.  call `write`(v2, v4) @signature `Lm1/c0;.write:(Ljava/lang/String;)V` @kind virtual;
  #L52b994.  v4:= v2.`m1.c0.i` @type ^`int`;
  #L52b998.  v0:= `@@m1.b.WriteClassName` @type ^`m1.b` @kind object;
  #L52b99c.  v0:= v0.`m1.b.mask` @type ^`int`;
  #L52b9a0.  v4:= v4 ^& v0 @kind int;
  #L52b9a2.  if v4 == 0 then goto L52b9c4;
  #L52b9a6.  v4:= constclass @type ^`java.math.BigDecimal` @kind object;
  #L52b9aa.  if v5 == v4 then goto L52b9c4;
  #L52b9ae.  call temp:= `scale`(v3) @signature `Ljava/math/BigDecimal;.scale:()I` @kind virtual;
  #L52b9b4.  v3:= temp;
  #L52b9b6.  if v3 != 0 then goto L52b9c4;
  #L52b9ba.  v3:= 46I;
  #L52b9be.  call `write`(v2, v3) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L52b9c4.  return @kind void;
}
