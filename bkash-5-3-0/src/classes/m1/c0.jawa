record `m1.c0` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.Writer` @kind class {
  `char`[] `m1.c0.g` @AccessFlag PROTECTED;
  `int` `m1.c0.h` @AccessFlag PROTECTED;
  `int` `m1.c0.i` @AccessFlag PROTECTED;
  `java.io.Writer` `m1.c0.j` @AccessFlag PROTECTED_FINAL;
}
global `java.lang.ThreadLocal` `@@m1.c0.k` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@m1.c0.l` @AccessFlag STATIC_FINAL;
global `char`[] `@@m1.c0.m` @AccessFlag STATIC_FINAL;
global `char`[] `@@m1.c0.n` @AccessFlag STATIC_FINAL;
global `char`[] `@@m1.c0.o` @AccessFlag STATIC_FINAL;
global `byte`[] `@@m1.c0.p` @AccessFlag STATIC_FINAL;
global `byte`[] `@@m1.c0.q` @AccessFlag STATIC_FINAL;
global `char`[] `@@m1.c0.r` @AccessFlag STATIC_FINAL;
global `char`[] `@@m1.c0.s` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lm1/c0;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L52fedc.  v0:= new `java.lang.ThreadLocal`;
  #L52fee0.  call `<init>`(v0) @signature `Ljava/lang/ThreadLocal;.<init>:()V` @kind direct;
  #L52fee6.  `@@m1.c0.k` @type ^`java.lang.ThreadLocal` := v0 @kind object;
  #L52feea.  v0:= 10I;
  #L52feee.  v1:= new `int`[v0];
  #L52fef2.  goto L5300e4;
  #L52fef8.  `@@m1.c0.l` @type ^`int`[] := v1 @kind object;
  #L52fefc.  v1:= 36I;
  #L52ff00.  v1:= new `char`[v1];
  #L52ff04.  goto L530114;
  #L52ff0a.  `@@m1.c0.m` @type ^`char`[] := v1 @kind object;
  #L52ff0e.  v1:= 100I;
  #L52ff12.  v2:= new `char`[v1];
  #L52ff16.  goto L530164;
  #L52ff1c.  `@@m1.c0.n` @type ^`char`[] := v2 @kind object;
  #L52ff20.  v1:= new `char`[v1];
  #L52ff24.  goto L530234;
  #L52ff2a.  `@@m1.c0.o` @type ^`char`[] := v1 @kind object;
  #L52ff2e.  v1:= 161I;
  #L52ff32.  v2:= new `byte`[v1];
  #L52ff36.  `@@m1.c0.p` @type ^`byte`[] := v2 @kind object;
  #L52ff3a.  v1:= new `byte`[v1];
  #L52ff3e.  `@@m1.c0.q` @type ^`byte`[] := v1 @kind object;
  #L52ff42.  v3:= 93I;
  #L52ff46.  v3:= new `char`[v3];
  #L52ff4a.  `@@m1.c0.r` @type ^`char`[] := v3 @kind object;
  #L52ff4e.  v3:= 0I;
  #L52ff50.  v4:= 4I;
  #L52ff52.  v2[v3]:= v4 @kind byte;
  #L52ff56.  v5:= 1I;
  #L52ff58.  v2[v5]:= v4 @kind byte;
  #L52ff5c.  v6:= 2I;
  #L52ff5e.  v2[v6]:= v4 @kind byte;
  #L52ff62.  v7:= 3I;
  #L52ff64.  v2[v7]:= v4 @kind byte;
  #L52ff68.  v2[v4]:= v4 @kind byte;
  #L52ff6c.  v8:= 5I;
  #L52ff6e.  v2[v8]:= v4 @kind byte;
  #L52ff72.  v9:= 6I;
  #L52ff74.  v2[v9]:= v4 @kind byte;
  #L52ff78.  v10:= 7I;
  #L52ff7a.  v2[v10]:= v4 @kind byte;
  #L52ff7e.  v11:= 8I;
  #L52ff82.  v2[v11]:= v5 @kind byte;
  #L52ff86.  v12:= 9I;
  #L52ff8a.  v2[v12]:= v5 @kind byte;
  #L52ff8e.  v2[v0]:= v5 @kind byte;
  #L52ff92.  v13:= 11I;
  #L52ff96.  v2[v13]:= v4 @kind byte;
  #L52ff9a.  v14:= 12I;
  #L52ff9e.  v2[v14]:= v5 @kind byte;
  #L52ffa2.  v15:= 13I;
  #L52ffa6.  v2[v15]:= v5 @kind byte;
  #L52ffaa.  v16:= 34I;
  #L52ffae.  v2[v16]:= v5 @kind byte;
  #L52ffb2.  v17:= 92I;
  #L52ffb6.  v2[v17]:= v5 @kind byte;
  #L52ffba.  v1[v3]:= v4 @kind byte;
  #L52ffbe.  v1[v5]:= v4 @kind byte;
  #L52ffc2.  v1[v6]:= v4 @kind byte;
  #L52ffc6.  v1[v7]:= v4 @kind byte;
  #L52ffca.  v1[v4]:= v4 @kind byte;
  #L52ffce.  v1[v8]:= v4 @kind byte;
  #L52ffd2.  v1[v9]:= v4 @kind byte;
  #L52ffd6.  v1[v10]:= v4 @kind byte;
  #L52ffda.  v1[v11]:= v5 @kind byte;
  #L52ffde.  v1[v12]:= v5 @kind byte;
  #L52ffe2.  v1[v0]:= v5 @kind byte;
  #L52ffe6.  v1[v13]:= v4 @kind byte;
  #L52ffea.  v1[v14]:= v5 @kind byte;
  #L52ffee.  v1[v15]:= v5 @kind byte;
  #L52fff2.  v1[v17]:= v5 @kind byte;
  #L52fff6.  v2:= 39I;
  #L52fffa.  v1[v2]:= v5 @kind byte;
  #L52fffe.  v1:= 14I;
  #L530002.  v2:= 31I;
  #L530006.  if v1 > v2 then goto L530020;
  #L53000a.  v2:= `@@m1.c0.p` @type ^`byte`[] @kind object;
  #L53000e.  v2[v1]:= v4 @kind byte;
  #L530012.  v2:= `@@m1.c0.q` @type ^`byte`[] @kind object;
  #L530016.  v2[v1]:= v4 @kind byte;
  #L53001a.  v1:= v1 + 1;
  #L53001e.  goto L530002;
  #L530020.  v1:= 127I;
  #L530024.  v2:= 160I;
  #L530028.  if v1 >= v2 then goto L530042;
  #L53002c.  v2:= `@@m1.c0.p` @type ^`byte`[] @kind object;
  #L530030.  v2[v1]:= v4 @kind byte;
  #L530034.  v2:= `@@m1.c0.q` @type ^`byte`[] @kind object;
  #L530038.  v2[v1]:= v4 @kind byte;
  #L53003c.  v1:= v1 + 1;
  #L530040.  goto L530024;
  #L530042.  v1:= `@@m1.c0.r` @type ^`char`[] @kind object;
  #L530046.  v2:= 48I;
  #L53004a.  v1[v3]:= v2 @kind char;
  #L53004e.  v2:= 49I;
  #L530052.  v1[v5]:= v2 @kind char;
  #L530056.  v2:= 50I;
  #L53005a.  v1[v6]:= v2 @kind char;
  #L53005e.  v2:= 51I;
  #L530062.  v1[v7]:= v2 @kind char;
  #L530066.  v2:= 52I;
  #L53006a.  v1[v4]:= v2 @kind char;
  #L53006e.  v2:= 53I;
  #L530072.  v1[v8]:= v2 @kind char;
  #L530076.  v2:= 54I;
  #L53007a.  v1[v9]:= v2 @kind char;
  #L53007e.  v2:= 55I;
  #L530082.  v1[v10]:= v2 @kind char;
  #L530086.  v2:= 98I;
  #L53008a.  v1[v11]:= v2 @kind char;
  #L53008e.  v2:= 116I;
  #L530092.  v1[v12]:= v2 @kind char;
  #L530096.  v2:= 110I;
  #L53009a.  v1[v0]:= v2 @kind char;
  #L53009e.  v0:= 118I;
  #L5300a2.  v1[v13]:= v0 @kind char;
  #L5300a6.  v0:= 102I;
  #L5300aa.  v1[v14]:= v0 @kind char;
  #L5300ae.  v0:= 114I;
  #L5300b2.  v1[v15]:= v0 @kind char;
  #L5300b6.  v1[v16]:= v16 @kind char;
  #L5300ba.  v0:= 39I;
  #L5300be.  v1[v0]:= v0 @kind char;
  #L5300c2.  v0:= 47I;
  #L5300c6.  v1[v0]:= v0 @kind char;
  #L5300ca.  v1[v17]:= v17 @kind char;
  #L5300ce.  v0:= 16I;
  #L5300d2.  v0:= new `char`[v0];
  #L5300d6.  goto L530304;
  #L5300dc.  `@@m1.c0.s` @type ^`char`[] := v0 @kind object;
  #L5300e0.  return @kind void;
  #L5300e2.  
  #L5300e4.  v1:= (9I, 99I, 999I, 9999I, 99999I, 999999I, 9999999I, 99999999I, 999999999I, 2147483647I) @kind object;
  #L530113.  goto L52fef8;
  #L530114.  v1:= (48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 97I, 98I, 99I, 100I, 101I, 102I, 103I, 104I, 105I, 106I, 107I, 108I, 109I, 110I, 111I, 112I, 113I, 114I, 115I, 116I, 117I, 118I, 119I, 120I, 121I, 122I) @kind object;
  #L530163.  goto L52ff0a;
  #L530164.  v2:= (48I, 48I, 48I, 48I, 48I, 48I, 48I, 48I, 48I, 48I, 49I, 49I, 49I, 49I, 49I, 49I, 49I, 49I, 49I, 49I, 50I, 50I, 50I, 50I, 50I, 50I, 50I, 50I, 50I, 50I, 51I, 51I, 51I, 51I, 51I, 51I, 51I, 51I, 51I, 51I, 52I, 52I, 52I, 52I, 52I, 52I, 52I, 52I, 52I, 52I, 53I, 53I, 53I, 53I, 53I, 53I, 53I, 53I, 53I, 53I, 54I, 54I, 54I, 54I, 54I, 54I, 54I, 54I, 54I, 54I, 55I, 55I, 55I, 55I, 55I, 55I, 55I, 55I, 55I, 55I, 56I, 56I, 56I, 56I, 56I, 56I, 56I, 56I, 56I, 56I, 57I, 57I, 57I, 57I, 57I, 57I, 57I, 57I, 57I, 57I) @kind object;
  #L530233.  goto L52ff1c;
  #L530234.  v1:= (48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I) @kind object;
  #L530303.  goto L52ff2a;
  #L530304.  v0:= (48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 65I, 66I, 67I, 68I, 69I, 70I) @kind object;
  #L53032b.  goto L5300dc;
}
procedure `void` `<init>`(`m1.c0` v2 @kind this, `java.io.Writer` v3 @kind object, `int` v4 , `m1.b`[] v5 @kind object) @signature `Lm1/c0;.<init>:(Ljava/io/Writer;I[Lm1/b;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L53033c.  call `<init>`(v2) @signature `Ljava/io/Writer;.<init>:()V` @kind direct;
  #L530342.  v2.`m1.c0.j` @type ^`java.io.Writer` := v3 @kind object;
  #L530346.  v3:= `@@m1.c0.k` @type ^`java.lang.ThreadLocal` @kind object;
  #L53034a.  call temp:= `get`(v3) @signature `Ljava/lang/ThreadLocal;.get:()Ljava/lang/Object;` @kind virtual;
  #L530350.  v0:= temp @kind object;
  #L530352.  v0:= (`char`[]) v0 @kind object;
  #L530356.  v2.`m1.c0.g` @type ^`char`[] := v0 @kind object;
  #L53035a.  if v0 == 0 then goto L530366;
  #L53035e.  v0:= 0I;
  #L530360.  call `set`(v3, v0) @signature `Ljava/lang/ThreadLocal;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L530366.  v3:= v2.`m1.c0.g` @type ^`char`[] @kind object;
  #L53036a.  if v3 != 0 then goto L53037a;
  #L53036e.  v3:= 1024I;
  #L530372.  v3:= new `char`[v3];
  #L530376.  v2.`m1.c0.g` @type ^`char`[] := v3 @kind object;
  #L53037a.  v3:= length @variable v5;
  #L53037c.  v0:= 0I;
  #L53037e.  if v0 >= v3 then goto L530392;
  #L530382.  v1:= v5[v0] @kind object;
  #L530386.  v1:= v1.`m1.b.mask` @type ^`int`;
  #L53038a.  v4:= v4 ^| v1 @kind int;
  #L53038c.  v0:= v0 + 1;
  #L530390.  goto L53037e;
  #L530392.  v2.`m1.c0.i` @type ^`int` := v4;
  #L530396.  return @kind void;
}
procedure `void` `j0`(`m1.c0` v14 @kind this, `java.lang.String` v15 @kind object) @signature `Lm1/c0;.j0:(Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L53111c.  call temp:= `length`(v15) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L531122.  v0:= temp;
  #L531124.  v1:= v14.`m1.c0.h` @type ^`int`;
  #L531128.  v1:= v1 + v0 @kind int;
  #L53112a.  v2:= 1I;
  #L53112c.  v1:= v1 + v2 @kind int;
  #L53112e.  v3:= v14.`m1.c0.g` @type ^`char`[] @kind object;
  #L531132.  v3:= length @variable v3;
  #L531134.  v4:= 92I;
  #L531138.  v5:= 58I;
  #L53113c.  v6:= 0I;
  #L53113e.  v7:= 34I;
  #L531142.  if v1 <= v3 then goto L5311f2;
  #L531146.  v3:= v14.`m1.c0.j` @type ^`java.io.Writer` @kind object;
  #L53114a.  if v3 == 0 then goto L5311ec;
  #L53114e.  if v0 != 0 then goto L531166;
  #L531152.  call `write`(v14, v7) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L531158.  call `write`(v14, v7) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L53115e.  call `write`(v14, v5) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L531164.  return @kind void;
  #L531166.  v1:= 0I;
  #L531168.  if v1 >= v0 then goto L53118e;
  #L53116c.  call temp:= `charAt`(v15, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L531172.  v3:= temp;
  #L531174.  v8:= `@@m1.c0.p` @type ^`byte`[] @kind object;
  #L531178.  v9:= length @variable v8;
  #L53117a.  if v3 >= v9 then goto L531188;
  #L53117e.  v3:= v8[v3] @kind byte;
  #L531182.  if v3 == 0 then goto L531188;
  #L531186.  goto L531190;
  #L531188.  v1:= v1 + 1;
  #L53118c.  goto L531168;
  #L53118e.  v2:= 0I;
  #L531190.  if v2 == 0 then goto L53119a;
  #L531194.  call `write`(v14, v7) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L53119a.  if v6 >= v0 then goto L5311da;
  #L53119e.  call temp:= `charAt`(v15, v6) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L5311a4.  v1:= temp;
  #L5311a6.  v3:= `@@m1.c0.p` @type ^`byte`[] @kind object;
  #L5311aa.  v8:= length @variable v3;
  #L5311ac.  if v1 >= v8 then goto L5311ce;
  #L5311b0.  v3:= v3[v1] @kind byte;
  #L5311b4.  if v3 == 0 then goto L5311ce;
  #L5311b8.  call `write`(v14, v4) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L5311be.  v3:= `@@m1.c0.r` @type ^`char`[] @kind object;
  #L5311c2.  v1:= v3[v1] @kind char;
  #L5311c6.  call `write`(v14, v1) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L5311cc.  goto L5311d4;
  #L5311ce.  call `write`(v14, v1) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L5311d4.  v6:= v6 + 1;
  #L5311d8.  goto L53119a;
  #L5311da.  if v2 == 0 then goto L5311e4;
  #L5311de.  call `write`(v14, v7) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L5311e4.  call `write`(v14, v5) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L5311ea.  return @kind void;
  #L5311ec.  call `s`(v14, v1) @signature `Lm1/c0;.s:(I)V` @kind virtual;
  #L5311f2.  if v0 != 0 then goto L531240;
  #L5311f6.  v15:= v14.`m1.c0.h` @type ^`int`;
  #L5311fa.  v0:= v15 + 3;
  #L5311fe.  v1:= v14.`m1.c0.g` @type ^`char`[] @kind object;
  #L531202.  v1:= length @variable v1;
  #L531204.  if v0 <= v1 then goto L531212;
  #L531208.  v15:= v15 + 3;
  #L53120c.  call `s`(v14, v15) @signature `Lm1/c0;.s:(I)V` @kind virtual;
  #L531212.  v15:= v14.`m1.c0.g` @type ^`char`[] @kind object;
  #L531216.  v0:= v14.`m1.c0.h` @type ^`int`;
  #L53121a.  v1:= v0 + 1;
  #L53121e.  v14.`m1.c0.h` @type ^`int` := v1;
  #L531222.  v15[v0]:= v7 @kind char;
  #L531226.  v0:= v1 + 1;
  #L53122a.  v14.`m1.c0.h` @type ^`int` := v0;
  #L53122e.  v15[v1]:= v7 @kind char;
  #L531232.  v1:= v0 + 1;
  #L531236.  v14.`m1.c0.h` @type ^`int` := v1;
  #L53123a.  v15[v0]:= v5 @kind char;
  #L53123e.  return @kind void;
  #L531240.  v3:= v14.`m1.c0.h` @type ^`int`;
  #L531244.  v8:= v3 + v0 @kind int;
  #L531248.  v9:= v14.`m1.c0.g` @type ^`char`[] @kind object;
  #L53124c.  call `getChars`(v15, v6, v0, v9, v3) @signature `Ljava/lang/String;.getChars:(II[CI)V` @kind virtual;
  #L531252.  v14.`m1.c0.h` @type ^`int` := v1;
  #L531256.  v15:= v3;
  #L531258.  v0:= 0I;
  #L53125a.  if v15 >= v8 then goto L53132c;
  #L53125e.  v9:= v14.`m1.c0.g` @type ^`char`[] @kind object;
  #L531262.  v10:= v9[v15] @kind char;
  #L531266.  v11:= `@@m1.c0.p` @type ^`byte`[] @kind object;
  #L53126a.  v12:= length @variable v11;
  #L53126c.  if v10 >= v12 then goto L531328;
  #L531270.  v11:= v11[v10] @kind byte;
  #L531274.  if v11 == 0 then goto L531328;
  #L531278.  if v0 != 0 then goto L5312e4;
  #L53127c.  v1:= v1 + 3;
  #L531280.  v0:= length @variable v9;
  #L531282.  if v1 <= v0 then goto L53128c;
  #L531286.  call `s`(v14, v1) @signature `Lm1/c0;.s:(I)V` @kind virtual;
  #L53128c.  v14.`m1.c0.h` @type ^`int` := v1;
  #L531290.  v0:= v14.`m1.c0.g` @type ^`char`[] @kind object;
  #L531294.  v9:= v15 + 1;
  #L531298.  v11:= v15 + 3;
  #L53129c.  v12:= v8 - v15 @kind int;
  #L5312a0.  v12:= v12 - v2 @kind int;
  #L5312a2.  call `arraycopy`(v0, v9, v0, v11, v12) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L5312a8.  v0:= v14.`m1.c0.g` @type ^`char`[] @kind object;
  #L5312ac.  call `arraycopy`(v0, v6, v0, v2, v15) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L5312b2.  v15:= v14.`m1.c0.g` @type ^`char`[] @kind object;
  #L5312b6.  v15[v3]:= v7 @kind char;
  #L5312ba.  v15[v9]:= v4 @kind char;
  #L5312be.  v0:= v9 + 1;
  #L5312c2.  v9:= `@@m1.c0.r` @type ^`char`[] @kind object;
  #L5312c6.  v9:= v9[v10] @kind char;
  #L5312ca.  v15[v0]:= v9 @kind char;
  #L5312ce.  v8:= v8 + 2;
  #L5312d2.  v9:= v14.`m1.c0.h` @type ^`int`;
  #L5312d6.  v9:= v9 + -2;
  #L5312da.  v15[v9]:= v7 @kind char;
  #L5312de.  v15:= v0;
  #L5312e0.  v0:= 1I;
  #L5312e2.  goto L531328;
  #L5312e4.  v1:= v1 + 1;
  #L5312e8.  v9:= length @variable v9;
  #L5312ea.  if v1 <= v9 then goto L5312f4;
  #L5312ee.  call `s`(v14, v1) @signature `Lm1/c0;.s:(I)V` @kind virtual;
  #L5312f4.  v14.`m1.c0.h` @type ^`int` := v1;
  #L5312f8.  v9:= v14.`m1.c0.g` @type ^`char`[] @kind object;
  #L5312fc.  v11:= v15 + 1;
  #L531300.  v12:= v15 + 2;
  #L531304.  v13:= v8 - v15 @kind int;
  #L531308.  call `arraycopy`(v9, v11, v9, v12, v13) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L53130e.  v9:= v14.`m1.c0.g` @type ^`char`[] @kind object;
  #L531312.  v9[v15]:= v4 @kind char;
  #L531316.  v15:= `@@m1.c0.r` @type ^`char`[] @kind object;
  #L53131a.  v15:= v15[v10] @kind char;
  #L53131e.  v9[v11]:= v15 @kind char;
  #L531322.  v8:= v8 + 1;
  #L531326.  v15:= v11;
  #L531328.  v15:= v15 + v2 @kind int;
  #L53132a.  goto L53125a;
  #L53132c.  v15:= v14.`m1.c0.g` @type ^`char`[] @kind object;
  #L531330.  v0:= v14.`m1.c0.h` @type ^`int`;
  #L531334.  v0:= v0 - v2 @kind int;
  #L531336.  v15[v0]:= v5 @kind char;
  #L53133a.  return @kind void;
}
procedure `void` `k0`(`m1.c0` v14 @kind this, `java.lang.String` v15 @kind object) @signature `Lm1/c0;.k0:(Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L53134c.  call temp:= `length`(v15) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L531352.  v0:= temp;
  #L531354.  v1:= v14.`m1.c0.h` @type ^`int`;
  #L531358.  v1:= v1 + v0 @kind int;
  #L53135a.  v2:= 1I;
  #L53135c.  v1:= v1 + v2 @kind int;
  #L53135e.  v3:= v14.`m1.c0.g` @type ^`char`[] @kind object;
  #L531362.  v3:= length @variable v3;
  #L531364.  v4:= 92I;
  #L531368.  v5:= 58I;
  #L53136c.  v6:= 0I;
  #L53136e.  v7:= 39I;
  #L531372.  if v1 <= v3 then goto L531422;
  #L531376.  v3:= v14.`m1.c0.j` @type ^`java.io.Writer` @kind object;
  #L53137a.  if v3 == 0 then goto L53141c;
  #L53137e.  if v0 != 0 then goto L531396;
  #L531382.  call `write`(v14, v7) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L531388.  call `write`(v14, v7) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L53138e.  call `write`(v14, v5) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L531394.  return @kind void;
  #L531396.  v1:= 0I;
  #L531398.  if v1 >= v0 then goto L5313be;
  #L53139c.  call temp:= `charAt`(v15, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L5313a2.  v3:= temp;
  #L5313a4.  v8:= `@@m1.c0.q` @type ^`byte`[] @kind object;
  #L5313a8.  v9:= length @variable v8;
  #L5313aa.  if v3 >= v9 then goto L5313b8;
  #L5313ae.  v3:= v8[v3] @kind byte;
  #L5313b2.  if v3 == 0 then goto L5313b8;
  #L5313b6.  goto L5313c0;
  #L5313b8.  v1:= v1 + 1;
  #L5313bc.  goto L531398;
  #L5313be.  v2:= 0I;
  #L5313c0.  if v2 == 0 then goto L5313ca;
  #L5313c4.  call `write`(v14, v7) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L5313ca.  if v6 >= v0 then goto L53140a;
  #L5313ce.  call temp:= `charAt`(v15, v6) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L5313d4.  v1:= temp;
  #L5313d6.  v3:= `@@m1.c0.q` @type ^`byte`[] @kind object;
  #L5313da.  v8:= length @variable v3;
  #L5313dc.  if v1 >= v8 then goto L5313fe;
  #L5313e0.  v3:= v3[v1] @kind byte;
  #L5313e4.  if v3 == 0 then goto L5313fe;
  #L5313e8.  call `write`(v14, v4) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L5313ee.  v3:= `@@m1.c0.r` @type ^`char`[] @kind object;
  #L5313f2.  v1:= v3[v1] @kind char;
  #L5313f6.  call `write`(v14, v1) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L5313fc.  goto L531404;
  #L5313fe.  call `write`(v14, v1) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L531404.  v6:= v6 + 1;
  #L531408.  goto L5313ca;
  #L53140a.  if v2 == 0 then goto L531414;
  #L53140e.  call `write`(v14, v7) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L531414.  call `write`(v14, v5) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L53141a.  return @kind void;
  #L53141c.  call `s`(v14, v1) @signature `Lm1/c0;.s:(I)V` @kind virtual;
  #L531422.  if v0 != 0 then goto L531470;
  #L531426.  v15:= v14.`m1.c0.h` @type ^`int`;
  #L53142a.  v0:= v15 + 3;
  #L53142e.  v1:= v14.`m1.c0.g` @type ^`char`[] @kind object;
  #L531432.  v1:= length @variable v1;
  #L531434.  if v0 <= v1 then goto L531442;
  #L531438.  v15:= v15 + 3;
  #L53143c.  call `s`(v14, v15) @signature `Lm1/c0;.s:(I)V` @kind virtual;
  #L531442.  v15:= v14.`m1.c0.g` @type ^`char`[] @kind object;
  #L531446.  v0:= v14.`m1.c0.h` @type ^`int`;
  #L53144a.  v1:= v0 + 1;
  #L53144e.  v14.`m1.c0.h` @type ^`int` := v1;
  #L531452.  v15[v0]:= v7 @kind char;
  #L531456.  v0:= v1 + 1;
  #L53145a.  v14.`m1.c0.h` @type ^`int` := v0;
  #L53145e.  v15[v1]:= v7 @kind char;
  #L531462.  v1:= v0 + 1;
  #L531466.  v14.`m1.c0.h` @type ^`int` := v1;
  #L53146a.  v15[v0]:= v5 @kind char;
  #L53146e.  return @kind void;
  #L531470.  v3:= v14.`m1.c0.h` @type ^`int`;
  #L531474.  v8:= v3 + v0 @kind int;
  #L531478.  v9:= v14.`m1.c0.g` @type ^`char`[] @kind object;
  #L53147c.  call `getChars`(v15, v6, v0, v9, v3) @signature `Ljava/lang/String;.getChars:(II[CI)V` @kind virtual;
  #L531482.  v14.`m1.c0.h` @type ^`int` := v1;
  #L531486.  v15:= v3;
  #L531488.  v0:= 0I;
  #L53148a.  if v15 >= v8 then goto L53155c;
  #L53148e.  v9:= v14.`m1.c0.g` @type ^`char`[] @kind object;
  #L531492.  v10:= v9[v15] @kind char;
  #L531496.  v11:= `@@m1.c0.q` @type ^`byte`[] @kind object;
  #L53149a.  v12:= length @variable v11;
  #L53149c.  if v10 >= v12 then goto L531558;
  #L5314a0.  v11:= v11[v10] @kind byte;
  #L5314a4.  if v11 == 0 then goto L531558;
  #L5314a8.  if v0 != 0 then goto L531514;
  #L5314ac.  v1:= v1 + 3;
  #L5314b0.  v0:= length @variable v9;
  #L5314b2.  if v1 <= v0 then goto L5314bc;
  #L5314b6.  call `s`(v14, v1) @signature `Lm1/c0;.s:(I)V` @kind virtual;
  #L5314bc.  v14.`m1.c0.h` @type ^`int` := v1;
  #L5314c0.  v0:= v14.`m1.c0.g` @type ^`char`[] @kind object;
  #L5314c4.  v9:= v15 + 1;
  #L5314c8.  v11:= v15 + 3;
  #L5314cc.  v12:= v8 - v15 @kind int;
  #L5314d0.  v12:= v12 - v2 @kind int;
  #L5314d2.  call `arraycopy`(v0, v9, v0, v11, v12) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L5314d8.  v0:= v14.`m1.c0.g` @type ^`char`[] @kind object;
  #L5314dc.  call `arraycopy`(v0, v6, v0, v2, v15) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L5314e2.  v15:= v14.`m1.c0.g` @type ^`char`[] @kind object;
  #L5314e6.  v15[v3]:= v7 @kind char;
  #L5314ea.  v15[v9]:= v4 @kind char;
  #L5314ee.  v0:= v9 + 1;
  #L5314f2.  v9:= `@@m1.c0.r` @type ^`char`[] @kind object;
  #L5314f6.  v9:= v9[v10] @kind char;
  #L5314fa.  v15[v0]:= v9 @kind char;
  #L5314fe.  v8:= v8 + 2;
  #L531502.  v9:= v14.`m1.c0.h` @type ^`int`;
  #L531506.  v9:= v9 + -2;
  #L53150a.  v15[v9]:= v7 @kind char;
  #L53150e.  v15:= v0;
  #L531510.  v0:= 1I;
  #L531512.  goto L531558;
  #L531514.  v1:= v1 + 1;
  #L531518.  v9:= length @variable v9;
  #L53151a.  if v1 <= v9 then goto L531524;
  #L53151e.  call `s`(v14, v1) @signature `Lm1/c0;.s:(I)V` @kind virtual;
  #L531524.  v14.`m1.c0.h` @type ^`int` := v1;
  #L531528.  v9:= v14.`m1.c0.g` @type ^`char`[] @kind object;
  #L53152c.  v11:= v15 + 1;
  #L531530.  v12:= v15 + 2;
  #L531534.  v13:= v8 - v15 @kind int;
  #L531538.  call `arraycopy`(v9, v11, v9, v12, v13) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L53153e.  v9:= v14.`m1.c0.g` @type ^`char`[] @kind object;
  #L531542.  v9[v15]:= v4 @kind char;
  #L531546.  v15:= `@@m1.c0.r` @type ^`char`[] @kind object;
  #L53154a.  v15:= v15[v10] @kind char;
  #L53154e.  v9[v11]:= v15 @kind char;
  #L531552.  v8:= v8 + 1;
  #L531556.  v15:= v11;
  #L531558.  v15:= v15 + v2 @kind int;
  #L53155a.  goto L53148a;
  #L53155c.  v15:= v14.`m1.c0.g` @type ^`char`[] @kind object;
  #L531560.  v1:= v1 - v2 @kind int;
  #L531562.  v15[v1]:= v5 @kind char;
  #L531566.  return @kind void;
}
procedure `void` `w`(`long` v7 , `int` v9 , `char`[] v10 @kind object) @signature `Lm1/c0;.w:(JI[C)V` @AccessFlag PROTECTED_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L530c94.  v0:= 0L;
  #L530c98.  v2:= lcmp(v7, v0);
  #L530c9c.  if v2 >= 0 then goto L530ca8;
  #L530ca0.  v0:= 45I;
  #L530ca4.  v7:= -v7 @kind long;
  #L530ca6.  goto L530caa;
  #L530ca8.  v0:= 0I;
  #L530caa.  v1:= 2147483647L;
  #L530cb0.  v3:= lcmp(v7, v1);
  #L530cb4.  if v3 <= 0 then goto L530cfe;
  #L530cb8.  v1:= 100L;
  #L530cbc.  v1:= v7 / v1 @kind long;
  #L530cc0.  v3:= 6I;
  #L530cc2.  v3:= v1 ^< v3 @kind long;
  #L530cc6.  v5:= 5I;
  #L530cc8.  v5:= v1 ^< v5 @kind long;
  #L530ccc.  v3:= v3 + v5 @kind long;
  #L530cce.  v5:= 2I;
  #L530cd0.  v5:= v1 ^< v5 @kind long;
  #L530cd4.  v3:= v3 + v5 @kind long;
  #L530cd6.  v7:= v7 - v3 @kind long;
  #L530cd8.  v8:= (`int`) v7 @kind l2i;
  #L530cda.  v9:= v9 + -1;
  #L530cde.  v7:= `@@m1.c0.o` @type ^`char`[] @kind object;
  #L530ce2.  v7:= v7[v8] @kind char;
  #L530ce6.  v10[v9]:= v7 @kind char;
  #L530cea.  v9:= v9 + -1;
  #L530cee.  v7:= `@@m1.c0.n` @type ^`char`[] @kind object;
  #L530cf2.  v7:= v7[v8] @kind char;
  #L530cf6.  v10[v9]:= v7 @kind char;
  #L530cfa.  v7:= v1 @kind wide;
  #L530cfc.  goto L530caa;
  #L530cfe.  v8:= (`int`) v7 @kind l2i;
  #L530d00.  v7:= 65536I;
  #L530d04.  if v8 < v7 then goto L530d42;
  #L530d08.  v7:= v8 / 100;
  #L530d0c.  v1:= v7 ^< 6;
  #L530d10.  v2:= v7 ^< 5;
  #L530d14.  v1:= v1 + v2 @kind int;
  #L530d16.  v2:= v7 ^< 2;
  #L530d1a.  v1:= v1 + v2 @kind int;
  #L530d1c.  v8:= v8 - v1 @kind int;
  #L530d1e.  v9:= v9 + -1;
  #L530d22.  v1:= `@@m1.c0.o` @type ^`char`[] @kind object;
  #L530d26.  v1:= v1[v8] @kind char;
  #L530d2a.  v10[v9]:= v1 @kind char;
  #L530d2e.  v9:= v9 + -1;
  #L530d32.  v1:= `@@m1.c0.n` @type ^`char`[] @kind object;
  #L530d36.  v8:= v1[v8] @kind char;
  #L530d3a.  v10[v9]:= v8 @kind char;
  #L530d3e.  v8:= v7;
  #L530d40.  goto L530d00;
  #L530d42.  v7:= 52429I;
  #L530d48.  v7:= v7 * v8 @kind int;
  #L530d4c.  v7:= v7 ^>> 19;
  #L530d50.  v1:= v7 ^< 3;
  #L530d54.  v2:= v7 ^< 1;
  #L530d58.  v1:= v1 + v2 @kind int;
  #L530d5a.  v8:= v8 - v1 @kind int;
  #L530d5c.  v9:= v9 + -1;
  #L530d60.  v1:= `@@m1.c0.m` @type ^`char`[] @kind object;
  #L530d64.  v8:= v1[v8] @kind char;
  #L530d68.  v10[v9]:= v8 @kind char;
  #L530d6c.  if v7 != 0 then goto L530d7e;
  #L530d70.  if v0 == 0 then goto L530d7c;
  #L530d74.  v9:= v9 + -1;
  #L530d78.  v10[v9]:= v0 @kind char;
  #L530d7c.  return @kind void;
  #L530d7e.  v8:= v7;
  #L530d80.  goto L530d42;
}
procedure `void` `C`(`m1.c0` v3 @kind this, `java.lang.String` v4 @kind object, `boolean` v5 ) @signature `Lm1/c0;.C:(Ljava/lang/String;Z)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L5306d0.  v0:= v3.`m1.c0.i` @type ^`int`;
  #L5306d4.  v1:= `@@m1.b.UseSingleQuotes` @type ^`m1.b` @kind object;
  #L5306d8.  v1:= v1.`m1.b.mask` @type ^`int`;
  #L5306dc.  v1:= v1 ^& v0 @kind int;
  #L5306de.  v2:= 58I;
  #L5306e2.  if v1 == 0 then goto L53070a;
  #L5306e6.  v5:= `@@m1.b.QuoteFieldNames` @type ^`m1.b` @kind object;
  #L5306ea.  v5:= v5.`m1.b.mask` @type ^`int`;
  #L5306ee.  v5:= v5 ^& v0 @kind int;
  #L5306f0.  if v5 == 0 then goto L530702;
  #L5306f4.  call `i0`(v3, v4) @signature `Lm1/c0;.i0:(Ljava/lang/String;)V` @kind virtual;
  #L5306fa.  call `write`(v3, v2) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L530700.  goto L530726;
  #L530702.  call `k0`(v3, v4) @signature `Lm1/c0;.k0:(Ljava/lang/String;)V` @kind direct;
  #L530708.  goto L530726;
  #L53070a.  v1:= `@@m1.b.QuoteFieldNames` @type ^`m1.b` @kind object;
  #L53070e.  v1:= v1.`m1.b.mask` @type ^`int`;
  #L530712.  v0:= v0 ^& v1 @kind int;
  #L530714.  if v0 == 0 then goto L530720;
  #L530718.  call `y`(v3, v4, v2, v5) @signature `Lm1/c0;.y:(Ljava/lang/String;CZ)V` @kind virtual;
  #L53071e.  goto L530726;
  #L530720.  call `j0`(v3, v4) @signature `Lm1/c0;.j0:(Ljava/lang/String;)V` @kind direct;
  #L530726.  return @kind void;
}
procedure `void` `J`(`m1.c0` v0 @kind this, `m1.b` v1 @kind object, `boolean` v2 ) @signature `Lm1/c0;.J:(Lm1/b;Z)V` @AccessFlag PUBLIC {
    temp;

  #L530d94.  if v2 == 0 then goto L530da8;
  #L530d98.  v2:= v0.`m1.c0.i` @type ^`int`;
  #L530d9c.  v1:= v1.`m1.b.mask` @type ^`int`;
  #L530da0.  v1:= v1 ^| v2 @kind int;
  #L530da2.  v0.`m1.c0.i` @type ^`int` := v1;
  #L530da6.  goto L530db8;
  #L530da8.  v2:= v0.`m1.c0.i` @type ^`int`;
  #L530dac.  v1:= v1.`m1.b.mask` @type ^`int`;
  #L530db0.  v1:= ~v1 @kind int;
  #L530db2.  v1:= v1 ^& v2 @kind int;
  #L530db4.  v0.`m1.c0.i` @type ^`int` := v1;
  #L530db8.  return @kind void;
}
procedure `void` `Q`(`m1.c0` v0 @kind this, `boolean` v1 ) @signature `Lm1/c0;.Q:(Z)V` @AccessFlag PUBLIC {
    temp;

  #L5303c4.  if v1 == 0 then goto L5303ce;
  #L5303c8.  v1:= "true" @kind object;
  #L5303cc.  goto L5303d2;
  #L5303ce.  v1:= "false" @kind object;
  #L5303d2.  call `write`(v0, v1) @signature `Lm1/c0;.write:(Ljava/lang/String;)V` @kind virtual;
  #L5303d8.  return @kind void;
}
procedure `void` `V`(`m1.c0` v18 @kind this, `byte`[] v19 @kind object) @signature `Lm1/c0;.V:([B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L5303ec.  v0:= v18 @kind object;
  #L5303f0.  v1:= v19 @kind object;
  #L5303f4.  v2:= length @variable v1;
  #L5303f6.  v3:= v0.`m1.c0.i` @type ^`int`;
  #L5303fa.  v4:= `@@m1.b.UseSingleQuotes` @type ^`m1.b` @kind object;
  #L5303fe.  v4:= v4.`m1.b.mask` @type ^`int`;
  #L530402.  v3:= v3 ^& v4 @kind int;
  #L530404.  v4:= 0I;
  #L530406.  v5:= 1I;
  #L530408.  if v3 == 0 then goto L530410;
  #L53040c.  v3:= 1I;
  #L53040e.  goto L530412;
  #L530410.  v3:= 0I;
  #L530412.  if v3 == 0 then goto L53041c;
  #L530416.  v6:= 39I;
  #L53041a.  goto L530420;
  #L53041c.  v6:= 34I;
  #L530420.  if v2 != 0 then goto L53043a;
  #L530424.  if v3 == 0 then goto L53042e;
  #L530428.  v1:= "''" @kind object;
  #L53042c.  goto L530432;
  #L53042e.  v1:= "\"\"" @kind object;
  #L530432.  call `write`(v0, v1) @signature `Lm1/c0;.write:(Ljava/lang/String;)V` @kind virtual;
  #L530438.  return @kind void;
  #L53043a.  v3:= `@@k1.e.y` @type ^`char`[] @kind object;
  #L53043e.  v7:= v2 / 3;
  #L530442.  v7:= v7 * 3;
  #L530446.  v8:= v2 + -1;
  #L53044a.  v9:= v8 / 3;
  #L53044e.  v9:= v9 + v5 @kind int;
  #L530450.  v10:= 2I;
  #L530452.  v9:= v9 ^< v10 @kind int;
  #L530454.  v11:= v0.`m1.c0.h` @type ^`int`;
  #L530458.  v9:= v9 + v11 @kind int;
  #L53045a.  v9:= v9 + v10 @kind int;
  #L53045c.  v12:= v0.`m1.c0.g` @type ^`char`[] @kind object;
  #L530460.  v12:= length @variable v12;
  #L530462.  v13:= 61I;
  #L530466.  if v9 <= v12 then goto L530568;
  #L53046a.  v12:= v0.`m1.c0.j` @type ^`java.io.Writer` @kind object;
  #L53046e.  if v12 == 0 then goto L530562;
  #L530472.  call `write`(v0, v6) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L530478.  v5:= 0I;
  #L53047a.  if v5 >= v7 then goto L5304f6;
  #L53047e.  v9:= v5 + 1;
  #L530482.  v5:= v1[v5] @kind byte;
  #L530486.  v5:= v5 ^& 255;
  #L53048a.  v5:= v5 ^< 16;
  #L53048e.  v11:= v9 + 1;
  #L530492.  v9:= v1[v9] @kind byte;
  #L530496.  v9:= v9 ^& 255;
  #L53049a.  v9:= v9 ^< 8;
  #L53049e.  v5:= v5 ^| v9 @kind int;
  #L5304a0.  v9:= v11 + 1;
  #L5304a4.  v11:= v1[v11] @kind byte;
  #L5304a8.  v11:= v11 ^& 255;
  #L5304ac.  v5:= v5 ^| v11 @kind int;
  #L5304ae.  v11:= v5 ^>> 18;
  #L5304b2.  v11:= v11 ^& 63;
  #L5304b6.  v11:= v3[v11] @kind char;
  #L5304ba.  call `write`(v0, v11) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L5304c0.  v11:= v5 ^>> 12;
  #L5304c4.  v11:= v11 ^& 63;
  #L5304c8.  v11:= v3[v11] @kind char;
  #L5304cc.  call `write`(v0, v11) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L5304d2.  v11:= v5 ^>> 6;
  #L5304d6.  v11:= v11 ^& 63;
  #L5304da.  v11:= v3[v11] @kind char;
  #L5304de.  call `write`(v0, v11) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L5304e4.  v5:= v5 ^& 63;
  #L5304e8.  v5:= v3[v5] @kind char;
  #L5304ec.  call `write`(v0, v5) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L5304f2.  v5:= v9;
  #L5304f4.  goto L53047a;
  #L5304f6.  v2:= v2 - v7 @kind int;
  #L5304f8.  if v2 <= 0 then goto L53055a;
  #L5304fc.  v5:= v1[v7] @kind byte;
  #L530500.  v5:= v5 ^& 255;
  #L530504.  v5:= v5 ^< 10;
  #L530508.  if v2 != v10 then goto L530518;
  #L53050c.  v1:= v1[v8] @kind byte;
  #L530510.  v1:= v1 ^& 255;
  #L530514.  v4:= v1 ^< 2;
  #L530518.  v1:= v5 ^| v4 @kind int;
  #L53051c.  v4:= v1 ^> 12;
  #L530520.  v4:= v3[v4] @kind char;
  #L530524.  call `write`(v0, v4) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L53052a.  v4:= v1 ^>> 6;
  #L53052e.  v4:= v4 ^& 63;
  #L530532.  v4:= v3[v4] @kind char;
  #L530536.  call `write`(v0, v4) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L53053c.  if v2 != v10 then goto L53054a;
  #L530540.  v1:= v1 ^& 63;
  #L530544.  v1:= v3[v1] @kind char;
  #L530548.  goto L53054e;
  #L53054a.  v1:= 61I;
  #L53054e.  call `write`(v0, v1) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L530554.  call `write`(v0, v13) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L53055a.  call `write`(v0, v6) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L530560.  return @kind void;
  #L530562.  call `s`(v0, v9) @signature `Lm1/c0;.s:(I)V` @kind virtual;
  #L530568.  v0.`m1.c0.h` @type ^`int` := v9;
  #L53056c.  v12:= v0.`m1.c0.g` @type ^`char`[] @kind object;
  #L530570.  v14:= v11 + 1;
  #L530574.  v12[v11]:= v6 @kind char;
  #L530578.  v11:= 0I;
  #L53057a.  if v11 >= v7 then goto L530602;
  #L53057e.  v12:= v11 + 1;
  #L530582.  v11:= v1[v11] @kind byte;
  #L530586.  v11:= v11 ^& 255;
  #L53058a.  v11:= v11 ^< 16;
  #L53058e.  v15:= v12 + 1;
  #L530592.  v12:= v1[v12] @kind byte;
  #L530596.  v12:= v12 ^& 255;
  #L53059a.  v12:= v12 ^< 8;
  #L53059e.  v11:= v11 ^| v12 @kind int;
  #L5305a0.  v12:= v15 + 1;
  #L5305a4.  v15:= v1[v15] @kind byte;
  #L5305a8.  v15:= v15 ^& 255;
  #L5305ac.  v11:= v11 ^| v15 @kind int;
  #L5305ae.  v15:= v0.`m1.c0.g` @type ^`char`[] @kind object;
  #L5305b2.  v16:= v14 + 1;
  #L5305b6.  v17:= v11 ^>> 18;
  #L5305ba.  v17:= v17 ^& 63;
  #L5305be.  v17:= v3[v17] @kind char;
  #L5305c2.  v15[v14]:= v17 @kind char;
  #L5305c6.  v14:= v16 + 1;
  #L5305ca.  v17:= v11 ^>> 12;
  #L5305ce.  v17:= v17 ^& 63;
  #L5305d2.  v17:= v3[v17] @kind char;
  #L5305d6.  v15[v16]:= v17 @kind char;
  #L5305da.  v16:= v14 + 1;
  #L5305de.  v17:= v11 ^>> 6;
  #L5305e2.  v17:= v17 ^& 63;
  #L5305e6.  v17:= v3[v17] @kind char;
  #L5305ea.  v15[v14]:= v17 @kind char;
  #L5305ee.  v14:= v16 + 1;
  #L5305f2.  v11:= v11 ^& 63;
  #L5305f6.  v11:= v3[v11] @kind char;
  #L5305fa.  v15[v16]:= v11 @kind char;
  #L5305fe.  v11:= v12;
  #L530600.  goto L53057a;
  #L530602.  v2:= v2 - v7 @kind int;
  #L530604.  if v2 <= 0 then goto L530672;
  #L530608.  v7:= v1[v7] @kind byte;
  #L53060c.  v7:= v7 ^& 255;
  #L530610.  v7:= v7 ^< 10;
  #L530614.  if v2 != v10 then goto L530624;
  #L530618.  v1:= v1[v8] @kind byte;
  #L53061c.  v1:= v1 ^& 255;
  #L530620.  v4:= v1 ^< 2;
  #L530624.  v1:= v7 ^| v4 @kind int;
  #L530628.  v4:= v0.`m1.c0.g` @type ^`char`[] @kind object;
  #L53062c.  v7:= v9 + -5;
  #L530630.  v8:= v1 ^> 12;
  #L530634.  v8:= v3[v8] @kind char;
  #L530638.  v4[v7]:= v8 @kind char;
  #L53063c.  v7:= v9 + -4;
  #L530640.  v8:= v1 ^>> 6;
  #L530644.  v8:= v8 ^& 63;
  #L530648.  v8:= v3[v8] @kind char;
  #L53064c.  v4[v7]:= v8 @kind char;
  #L530650.  v7:= v9 + -3;
  #L530654.  if v2 != v10 then goto L530662;
  #L530658.  v1:= v1 ^& 63;
  #L53065c.  v1:= v3[v1] @kind char;
  #L530660.  goto L530666;
  #L530662.  v1:= 61I;
  #L530666.  v4[v7]:= v1 @kind char;
  #L53066a.  v1:= v9 + -2;
  #L53066e.  v4[v1]:= v13 @kind char;
  #L530672.  v1:= v0.`m1.c0.g` @type ^`char`[] @kind object;
  #L530676.  v9:= v9 - v5 @kind int;
  #L530678.  v1[v9]:= v6 @kind char;
  #L53067c.  return @kind void;
}
procedure `boolean` `Y`(`m1.c0` v1 @kind this, `m1.b` v2 @kind object) @signature `Lm1/c0;.Y:(Lm1/b;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52fcec.  v0:= v1.`m1.c0.i` @type ^`int`;
  #L52fcf0.  v2:= v2.`m1.b.mask` @type ^`int`;
  #L52fcf4.  v2:= v2 ^& v0 @kind int;
  #L52fcf6.  if v2 == 0 then goto L52fcfe;
  #L52fcfa.  v2:= 1I;
  #L52fcfc.  goto L52fd00;
  #L52fcfe.  v2:= 0I;
  #L52fd00.  return v2;
}
procedure `byte`[] `Z`(`m1.c0` v4 @kind this, `java.lang.String` v5 @kind object) @signature `Lm1/c0;.Z:(Ljava/lang/String;)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L52fd14.  v0:= v4.`m1.c0.j` @type ^`java.io.Writer` @kind object;
  #L52fd18.  if v0 != 0 then goto L52fd54;
  #L52fd1c.  if v5 != 0 then goto L52fd24;
  #L52fd20.  v5:= "UTF-8" @kind object;
  #L52fd24.  v0:= new `java.lang.String`;
  #L52fd28.  v1:= v4.`m1.c0.g` @type ^`char`[] @kind object;
  #L52fd2c.  v2:= 0I;
  #L52fd2e.  v3:= v4.`m1.c0.h` @type ^`int`;
  #L52fd32.  call `<init>`(v0, v1, v2, v3) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L52fd38.  call temp:= `getBytes`(v0, v5) @signature `Ljava/lang/String;.getBytes:(Ljava/lang/String;)[B` @kind virtual;
  #L52fd3e.  v5:= temp @kind object;
  #L52fd40.  return v5 @kind object;
  #L52fd42.  v5:= Exception @type ^`java.io.UnsupportedEncodingException` @kind object;
  #L52fd44.  v0:= new `com.alibaba.fastjson.c`;
  #L52fd48.  v1:= "toBytes error" @kind object;
  #L52fd4c.  call `<init>`(v0, v1, v5) @signature `Lcom/alibaba/fastjson/c;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L52fd52.  throw v0;
  #L52fd54.  v5:= new `java.lang.UnsupportedOperationException`;
  #L52fd58.  v0:= "writer not null" @kind object;
  #L52fd5c.  call `<init>`(v5, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L52fd62.  throw v5;
  catch `java.io.UnsupportedEncodingException` @[L52fd24..L52fd40] goto L52fd42;
}
procedure `void` `a0`(`m1.c0` v5 @kind this, `int` v6 ) @signature `Lm1/c0;.a0:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L530dcc.  v0:= -2147483648I;
  #L530dd0.  if v6 != v0 then goto L530de0;
  #L530dd4.  v6:= "-2147483648" @kind object;
  #L530dd8.  call `write`(v5, v6) @signature `Lm1/c0;.write:(Ljava/lang/String;)V` @kind virtual;
  #L530dde.  return @kind void;
  #L530de0.  if v6 >= 0 then goto L530de8;
  #L530de4.  v0:= -v6 @kind int;
  #L530de6.  goto L530dea;
  #L530de8.  v0:= v6;
  #L530dea.  v1:= 0I;
  #L530dec.  v2:= 0I;
  #L530dee.  v3:= `@@m1.c0.l` @type ^`int`[] @kind object;
  #L530df2.  v3:= v3[v2];
  #L530df6.  if v0 > v3 then goto L530e4c;
  #L530dfa.  v2:= v2 + 1;
  #L530dfe.  if v6 >= 0 then goto L530e06;
  #L530e02.  v2:= v2 + 1;
  #L530e06.  v0:= v5.`m1.c0.h` @type ^`int`;
  #L530e0a.  v0:= v0 + v2 @kind int;
  #L530e0c.  v3:= v5.`m1.c0.g` @type ^`char`[] @kind object;
  #L530e10.  v3:= length @variable v3;
  #L530e12.  if v0 <= v3 then goto L530e3a;
  #L530e16.  v3:= v5.`m1.c0.j` @type ^`java.io.Writer` @kind object;
  #L530e1a.  if v3 != 0 then goto L530e26;
  #L530e1e.  call `s`(v5, v0) @signature `Lm1/c0;.s:(I)V` @kind virtual;
  #L530e24.  goto L530e3a;
  #L530e26.  v0:= new `char`[v2];
  #L530e2a.  v3:= (`long`) v6 @kind i2l;
  #L530e2c.  call `w`(v3, v2, v0) @signature `Lm1/c0;.w:(JI[C)V` @kind static;
  #L530e32.  call `write`(v5, v0, v1, v2) @signature `Lm1/c0;.write:([CII)V` @kind virtual;
  #L530e38.  return @kind void;
  #L530e3a.  v1:= (`long`) v6 @kind i2l;
  #L530e3c.  v6:= v5.`m1.c0.g` @type ^`char`[] @kind object;
  #L530e40.  call `w`(v1, v0, v6) @signature `Lm1/c0;.w:(JI[C)V` @kind static;
  #L530e46.  v5.`m1.c0.h` @type ^`int` := v0;
  #L530e4a.  return @kind void;
  #L530e4c.  v2:= v2 + 1;
  #L530e50.  goto L530dee;
}
procedure `java.io.Writer` `append`(`m1.c0` v0 @kind this, `char` v1 ) @signature `Lm1/c0;.append:(C)Ljava/io/Writer;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L52fd84.  call temp:= `e`(v0, v1) @signature `Lm1/c0;.e:(C)Lm1/c0;` @kind virtual;
  #L52fd8a.  v1:= temp @kind object;
  #L52fd8c.  return v1 @kind object;
}
procedure `java.io.Writer` `append`(`m1.c0` v0 @kind this, `java.lang.CharSequence` v1 @kind object) @signature `Lm1/c0;.append:(Ljava/lang/CharSequence;)Ljava/io/Writer;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L52fda0.  call temp:= `i`(v0, v1) @signature `Lm1/c0;.i:(Ljava/lang/CharSequence;)Lm1/c0;` @kind virtual;
  #L52fda6.  v1:= temp @kind object;
  #L52fda8.  return v1 @kind object;
}
procedure `java.io.Writer` `append`(`m1.c0` v0 @kind this, `java.lang.CharSequence` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lm1/c0;.append:(Ljava/lang/CharSequence;II)Ljava/io/Writer;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L52fdbc.  call temp:= `k`(v0, v1, v2, v3) @signature `Lm1/c0;.k:(Ljava/lang/CharSequence;II)Lm1/c0;` @kind virtual;
  #L52fdc2.  v1:= temp @kind object;
  #L52fdc4.  return v1 @kind object;
}
procedure `java.lang.Appendable` `append`(`m1.c0` v0 @kind this, `char` v1 ) @signature `Lm1/c0;.append:(C)Ljava/lang/Appendable;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L52fdd8.  call temp:= `e`(v0, v1) @signature `Lm1/c0;.e:(C)Lm1/c0;` @kind virtual;
  #L52fdde.  v1:= temp @kind object;
  #L52fde0.  return v1 @kind object;
}
procedure `java.lang.Appendable` `append`(`m1.c0` v0 @kind this, `java.lang.CharSequence` v1 @kind object) @signature `Lm1/c0;.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L52fdf4.  call temp:= `i`(v0, v1) @signature `Lm1/c0;.i:(Ljava/lang/CharSequence;)Lm1/c0;` @kind virtual;
  #L52fdfa.  v1:= temp @kind object;
  #L52fdfc.  return v1 @kind object;
}
procedure `java.lang.Appendable` `append`(`m1.c0` v0 @kind this, `java.lang.CharSequence` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lm1/c0;.append:(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L52fe10.  call temp:= `k`(v0, v1, v2, v3) @signature `Lm1/c0;.k:(Ljava/lang/CharSequence;II)Lm1/c0;` @kind virtual;
  #L52fe16.  v1:= temp @kind object;
  #L52fe18.  return v1 @kind object;
}
procedure `void` `close`(`m1.c0` v3 @kind this) @signature `Lm1/c0;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L5310d4.  v0:= v3.`m1.c0.j` @type ^`java.io.Writer` @kind object;
  #L5310d8.  if v0 == 0 then goto L5310ea;
  #L5310dc.  v0:= v3.`m1.c0.h` @type ^`int`;
  #L5310e0.  if v0 <= 0 then goto L5310ea;
  #L5310e4.  call `flush`(v3) @signature `Lm1/c0;.flush:()V` @kind virtual;
  #L5310ea.  v0:= v3.`m1.c0.g` @type ^`char`[] @kind object;
  #L5310ee.  v1:= length @variable v0;
  #L5310f0.  v2:= 8192I;
  #L5310f4.  if v1 > v2 then goto L531102;
  #L5310f8.  v1:= `@@m1.c0.k` @type ^`java.lang.ThreadLocal` @kind object;
  #L5310fc.  call `set`(v1, v0) @signature `Ljava/lang/ThreadLocal;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L531102.  v0:= 0I;
  #L531104.  v3.`m1.c0.g` @type ^`char`[] := v0 @kind object;
  #L531108.  return @kind void;
}
procedure `void` `d0`(`m1.c0` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lm1/c0;.d0:(Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L530e64.  v0:= v2.`m1.c0.i` @type ^`int`;
  #L530e68.  v1:= `@@m1.b.UseSingleQuotes` @type ^`m1.b` @kind object;
  #L530e6c.  v1:= v1.`m1.b.mask` @type ^`int`;
  #L530e70.  v0:= v0 ^& v1 @kind int;
  #L530e72.  if v0 == 0 then goto L530e7e;
  #L530e76.  call `i0`(v2, v3) @signature `Lm1/c0;.i0:(Ljava/lang/String;)V` @kind virtual;
  #L530e7c.  goto L530e88;
  #L530e7e.  v0:= 0I;
  #L530e80.  v1:= 1I;
  #L530e82.  call `y`(v2, v3, v0, v1) @signature `Lm1/c0;.y:(Ljava/lang/String;CZ)V` @kind virtual;
  #L530e88.  return @kind void;
}
procedure `m1.c0` `e`(`m1.c0` v0 @kind this, `char` v1 ) @signature `Lm1/c0;.e:(C)Lm1/c0;` @AccessFlag PUBLIC {
    temp;

  #L52fe54.  call `write`(v0, v1) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L52fe5a.  return v0 @kind object;
}
procedure `void` `flush`(`m1.c0` v4 @kind this) @signature `Lm1/c0;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L531578.  v0:= v4.`m1.c0.j` @type ^`java.io.Writer` @kind object;
  #L53157c.  if v0 != 0 then goto L531582;
  #L531580.  return @kind void;
  #L531582.  v1:= v4.`m1.c0.g` @type ^`char`[] @kind object;
  #L531586.  v2:= v4.`m1.c0.h` @type ^`int`;
  #L53158a.  v3:= 0I;
  #L53158c.  call `write`(v0, v1, v3, v2) @signature `Ljava/io/Writer;.write:([CII)V` @kind virtual;
  #L531592.  v0:= v4.`m1.c0.j` @type ^`java.io.Writer` @kind object;
  #L531596.  call `flush`(v0) @signature `Ljava/io/Writer;.flush:()V` @kind virtual;
  #L53159c.  v4.`m1.c0.h` @type ^`int` := v3;
  #L5315a0.  return @kind void;
  #L5315a2.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L5315a4.  v1:= new `com.alibaba.fastjson.c`;
  #L5315a8.  call temp:= `getMessage`(v0) @signature `Ljava/io/IOException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L5315ae.  v2:= temp @kind object;
  #L5315b0.  call `<init>`(v1, v2, v0) @signature `Lcom/alibaba/fastjson/c;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L5315b6.  throw v1;
  catch `java.io.IOException` @[L531582..L5315a0] goto L5315a2;
}
procedure `m1.c0` `i`(`m1.c0` v2 @kind this, `java.lang.CharSequence` v3 @kind object) @signature `Lm1/c0;.i:(Ljava/lang/CharSequence;)Lm1/c0;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L52fe6c.  if v3 != 0 then goto L52fe76;
  #L52fe70.  v3:= "null" @kind object;
  #L52fe74.  goto L52fe7e;
  #L52fe76.  call temp:= `toString`(v3) @signature `Ljava/lang/CharSequence;.toString:()Ljava/lang/String;` @kind interface;
  #L52fe7c.  v3:= temp @kind object;
  #L52fe7e.  v0:= 0I;
  #L52fe80.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L52fe86.  v1:= temp;
  #L52fe88.  call `write`(v2, v3, v0, v1) @signature `Lm1/c0;.write:(Ljava/lang/String;II)V` @kind virtual;
  #L52fe8e.  return v2 @kind object;
}
procedure `void` `i0`(`m1.c0` v13 @kind this, `java.lang.String` v14 @kind object) @signature `Lm1/c0;.i0:(Ljava/lang/String;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L530e9c.  v0:= 0I;
  #L530e9e.  if v14 != 0 then goto L530ed2;
  #L530ea2.  v14:= v13.`m1.c0.h` @type ^`int`;
  #L530ea6.  v1:= 4I;
  #L530ea8.  v14:= v14 + v1 @kind int;
  #L530eaa.  v2:= v13.`m1.c0.g` @type ^`char`[] @kind object;
  #L530eae.  v2:= length @variable v2;
  #L530eb0.  if v14 <= v2 then goto L530eba;
  #L530eb4.  call `s`(v13, v14) @signature `Lm1/c0;.s:(I)V` @kind virtual;
  #L530eba.  v2:= v13.`m1.c0.g` @type ^`char`[] @kind object;
  #L530ebe.  v3:= v13.`m1.c0.h` @type ^`int`;
  #L530ec2.  v4:= "null" @kind object;
  #L530ec6.  call `getChars`(v4, v0, v1, v2, v3) @signature `Ljava/lang/String;.getChars:(II[CI)V` @kind virtual;
  #L530ecc.  v13.`m1.c0.h` @type ^`int` := v14;
  #L530ed0.  return @kind void;
  #L530ed2.  call temp:= `length`(v14) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L530ed8.  v1:= temp;
  #L530eda.  v2:= v13.`m1.c0.h` @type ^`int`;
  #L530ede.  v2:= v2 + v1 @kind int;
  #L530ee0.  v2:= v2 + 2;
  #L530ee4.  v3:= v13.`m1.c0.g` @type ^`char`[] @kind object;
  #L530ee8.  v3:= length @variable v3;
  #L530eea.  v4:= 47I;
  #L530eee.  v5:= 13I;
  #L530ef2.  v6:= 92I;
  #L530ef6.  v7:= 39I;
  #L530efa.  if v2 <= v3 then goto L530f74;
  #L530efe.  v3:= v13.`m1.c0.j` @type ^`java.io.Writer` @kind object;
  #L530f02.  if v3 == 0 then goto L530f6e;
  #L530f06.  call `write`(v13, v7) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L530f0c.  call temp:= `length`(v14) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L530f12.  v1:= temp;
  #L530f14.  if v0 >= v1 then goto L530f66;
  #L530f18.  call temp:= `charAt`(v14, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L530f1e.  v1:= temp;
  #L530f20.  if v1 <= v5 then goto L530f4c;
  #L530f24.  if v1 == v6 then goto L530f4c;
  #L530f28.  if v1 == v7 then goto L530f4c;
  #L530f2c.  if v1 != v4 then goto L530f44;
  #L530f30.  v2:= v13.`m1.c0.i` @type ^`int`;
  #L530f34.  v3:= `@@m1.b.WriteSlashAsSpecial` @type ^`m1.b` @kind object;
  #L530f38.  v3:= v3.`m1.b.mask` @type ^`int`;
  #L530f3c.  v2:= v2 ^& v3 @kind int;
  #L530f3e.  if v2 == 0 then goto L530f44;
  #L530f42.  goto L530f4c;
  #L530f44.  call `write`(v13, v1) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L530f4a.  goto L530f60;
  #L530f4c.  call `write`(v13, v6) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L530f52.  v2:= `@@m1.c0.r` @type ^`char`[] @kind object;
  #L530f56.  v1:= v2[v1] @kind char;
  #L530f5a.  call `write`(v13, v1) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L530f60.  v0:= v0 + 1;
  #L530f64.  goto L530f0c;
  #L530f66.  call `write`(v13, v7) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L530f6c.  return @kind void;
  #L530f6e.  call `s`(v13, v2) @signature `Lm1/c0;.s:(I)V` @kind virtual;
  #L530f74.  v3:= v13.`m1.c0.h` @type ^`int`;
  #L530f78.  v8:= v3 + 1;
  #L530f7c.  v9:= v8 + v1 @kind int;
  #L530f80.  v10:= v13.`m1.c0.g` @type ^`char`[] @kind object;
  #L530f84.  v10[v3]:= v7 @kind char;
  #L530f88.  call `getChars`(v14, v0, v1, v10, v8) @signature `Ljava/lang/String;.getChars:(II[CI)V` @kind virtual;
  #L530f8e.  v13.`m1.c0.h` @type ^`int` := v2;
  #L530f92.  v14:= -1I;
  #L530f94.  v3:= v8;
  #L530f96.  v1:= 0I;
  #L530f98.  if v3 >= v9 then goto L530fd4;
  #L530f9c.  v10:= v13.`m1.c0.g` @type ^`char`[] @kind object;
  #L530fa0.  v10:= v10[v3] @kind char;
  #L530fa4.  if v10 <= v5 then goto L530fc6;
  #L530fa8.  if v10 == v6 then goto L530fc6;
  #L530fac.  if v10 == v7 then goto L530fc6;
  #L530fb0.  if v10 != v4 then goto L530fce;
  #L530fb4.  v11:= v13.`m1.c0.i` @type ^`int`;
  #L530fb8.  v12:= `@@m1.b.WriteSlashAsSpecial` @type ^`m1.b` @kind object;
  #L530fbc.  v12:= v12.`m1.b.mask` @type ^`int`;
  #L530fc0.  v11:= v11 ^& v12 @kind int;
  #L530fc2.  if v11 == 0 then goto L530fce;
  #L530fc6.  v0:= v0 + 1;
  #L530fca.  v14:= v3;
  #L530fcc.  v1:= v10;
  #L530fce.  v3:= v3 + 1;
  #L530fd2.  goto L530f98;
  #L530fd4.  v2:= v2 + v0 @kind int;
  #L530fd6.  v3:= v13.`m1.c0.g` @type ^`char`[] @kind object;
  #L530fda.  v3:= length @variable v3;
  #L530fdc.  if v2 <= v3 then goto L530fe6;
  #L530fe0.  call `s`(v13, v2) @signature `Lm1/c0;.s:(I)V` @kind virtual;
  #L530fe6.  v13.`m1.c0.h` @type ^`int` := v2;
  #L530fea.  v2:= 1I;
  #L530fec.  if v0 != v2 then goto L53101c;
  #L530ff0.  v0:= v13.`m1.c0.g` @type ^`char`[] @kind object;
  #L530ff4.  v3:= v14 + 1;
  #L530ff8.  v4:= v14 + 2;
  #L530ffc.  v9:= v9 - v14 @kind int;
  #L530ffe.  v9:= v9 - v2 @kind int;
  #L531000.  call `arraycopy`(v0, v3, v0, v4, v9) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L531006.  v0:= v13.`m1.c0.g` @type ^`char`[] @kind object;
  #L53100a.  v0[v14]:= v6 @kind char;
  #L53100e.  v14:= `@@m1.c0.r` @type ^`char`[] @kind object;
  #L531012.  v14:= v14[v1] @kind char;
  #L531016.  v0[v3]:= v14 @kind char;
  #L53101a.  goto L5310b2;
  #L53101c.  if v0 <= v2 then goto L5310b2;
  #L531020.  v0:= v13.`m1.c0.g` @type ^`char`[] @kind object;
  #L531024.  v3:= v14 + 1;
  #L531028.  v10:= v14 + 2;
  #L53102c.  v11:= v9 - v14 @kind int;
  #L531030.  v11:= v11 - v2 @kind int;
  #L531032.  call `arraycopy`(v0, v3, v0, v10, v11) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L531038.  v0:= v13.`m1.c0.g` @type ^`char`[] @kind object;
  #L53103c.  v0[v14]:= v6 @kind char;
  #L531040.  v14:= `@@m1.c0.r` @type ^`char`[] @kind object;
  #L531044.  v14:= v14[v1] @kind char;
  #L531048.  v0[v3]:= v14 @kind char;
  #L53104c.  v9:= v9 + v2 @kind int;
  #L53104e.  v3:= v3 + -2;
  #L531052.  if v3 < v8 then goto L5310b2;
  #L531056.  v14:= v13.`m1.c0.g` @type ^`char`[] @kind object;
  #L53105a.  v0:= v14[v3] @kind char;
  #L53105e.  if v0 <= v5 then goto L531080;
  #L531062.  if v0 == v6 then goto L531080;
  #L531066.  if v0 == v7 then goto L531080;
  #L53106a.  if v0 != v4 then goto L5310ac;
  #L53106e.  v1:= v13.`m1.c0.i` @type ^`int`;
  #L531072.  v10:= `@@m1.b.WriteSlashAsSpecial` @type ^`m1.b` @kind object;
  #L531076.  v10:= v10.`m1.b.mask` @type ^`int`;
  #L53107a.  v1:= v1 ^& v10 @kind int;
  #L53107c.  if v1 == 0 then goto L5310ac;
  #L531080.  v1:= v3 + 1;
  #L531084.  v10:= v3 + 2;
  #L531088.  v11:= v9 - v3 @kind int;
  #L53108c.  v11:= v11 - v2 @kind int;
  #L53108e.  call `arraycopy`(v14, v1, v14, v10, v11) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L531094.  v14:= v13.`m1.c0.g` @type ^`char`[] @kind object;
  #L531098.  v14[v3]:= v6 @kind char;
  #L53109c.  v10:= `@@m1.c0.r` @type ^`char`[] @kind object;
  #L5310a0.  v0:= v10[v0] @kind char;
  #L5310a4.  v14[v1]:= v0 @kind char;
  #L5310a8.  v9:= v9 + 1;
  #L5310ac.  v3:= v3 + -1;
  #L5310b0.  goto L531052;
  #L5310b2.  v14:= v13.`m1.c0.g` @type ^`char`[] @kind object;
  #L5310b6.  v0:= v13.`m1.c0.h` @type ^`int`;
  #L5310ba.  v0:= v0 - v2 @kind int;
  #L5310bc.  v14[v0]:= v7 @kind char;
  #L5310c0.  return @kind void;
}
procedure `m1.c0` `k`(`m1.c0` v0 @kind this, `java.lang.CharSequence` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lm1/c0;.k:(Ljava/lang/CharSequence;II)Lm1/c0;` @AccessFlag PUBLIC {
    temp;

  #L52fea0.  if v1 != 0 then goto L52fea8;
  #L52fea4.  v1:= "null" @kind object;
  #L52fea8.  call temp:= `subSequence`(v1, v2, v3) @signature `Ljava/lang/CharSequence;.subSequence:(II)Ljava/lang/CharSequence;` @kind interface;
  #L52feae.  v1:= temp @kind object;
  #L52feb0.  call temp:= `toString`(v1) @signature `Ljava/lang/CharSequence;.toString:()Ljava/lang/String;` @kind interface;
  #L52feb6.  v1:= temp @kind object;
  #L52feb8.  v2:= 0I;
  #L52feba.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L52fec0.  v3:= temp;
  #L52fec2.  call `write`(v0, v1, v2, v3) @signature `Lm1/c0;.write:(Ljava/lang/String;II)V` @kind virtual;
  #L52fec8.  return v0 @kind object;
}
procedure `void` `r`(`m1.c0` v1 @kind this) @signature `Lm1/c0;.r:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5303a8.  v0:= "null" @kind object;
  #L5303ac.  call `write`(v1, v0) @signature `Lm1/c0;.write:(Ljava/lang/String;)V` @kind virtual;
  #L5303b2.  return @kind void;
}
procedure `void` `s`(`m1.c0` v3 @kind this, `int` v4 ) @signature `Lm1/c0;.s:(I)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L530690.  v0:= v3.`m1.c0.g` @type ^`char`[] @kind object;
  #L530694.  v1:= length @variable v0;
  #L530696.  v1:= v1 * 3;
  #L53069a.  v1:= v1 / 2;
  #L53069e.  v1:= v1 + 1;
  #L5306a2.  if v1 >= v4 then goto L5306a8;
  #L5306a6.  goto L5306aa;
  #L5306a8.  v4:= v1;
  #L5306aa.  v4:= new `char`[v4];
  #L5306ae.  v1:= v3.`m1.c0.h` @type ^`int`;
  #L5306b2.  v2:= 0I;
  #L5306b4.  call `arraycopy`(v0, v2, v4, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L5306ba.  v3.`m1.c0.g` @type ^`char`[] := v4 @kind object;
  #L5306be.  return @kind void;
}
procedure `java.lang.String` `toString`(`m1.c0` v4 @kind this) @signature `Lm1/c0;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L52fe2c.  v0:= new `java.lang.String`;
  #L52fe30.  v1:= v4.`m1.c0.g` @type ^`char`[] @kind object;
  #L52fe34.  v2:= v4.`m1.c0.h` @type ^`int`;
  #L52fe38.  v3:= 0I;
  #L52fe3a.  call `<init>`(v0, v1, v3, v2) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L52fe40.  return v0 @kind object;
}
procedure `void` `v`(`m1.c0` v11 @kind this, `long` v12 ) @signature `Lm1/c0;.v:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L530be0.  v0:= -9223372036854775808L;
  #L530be4.  v2:= lcmp(v12, v0);
  #L530be8.  if v2 != 0 then goto L530bf8;
  #L530bec.  v12:= "-9223372036854775808" @kind object;
  #L530bf0.  call `write`(v11, v12) @signature `Lm1/c0;.write:(Ljava/lang/String;)V` @kind virtual;
  #L530bf6.  return @kind void;
  #L530bf8.  v0:= 0L;
  #L530bfc.  v2:= lcmp(v12, v0);
  #L530c00.  if v2 >= 0 then goto L530c08;
  #L530c04.  v0:= -v12 @kind long;
  #L530c06.  goto L530c0a;
  #L530c08.  v0:= v12 @kind wide;
  #L530c0a.  v3:= 10L;
  #L530c0e.  v5:= 1I;
  #L530c10.  v6:= v3 @kind wide;
  #L530c12.  v8:= 19I;
  #L530c16.  v9:= 0I;
  #L530c18.  if v5 >= v8 then goto L530c30;
  #L530c1c.  v10:= lcmp(v0, v6);
  #L530c20.  if v10 >= 0 then goto L530c26;
  #L530c24.  goto L530c32;
  #L530c26.  v6:= v6 * v3 @kind long;
  #L530c2a.  v5:= v5 + 1;
  #L530c2e.  goto L530c12;
  #L530c30.  v5:= 0I;
  #L530c32.  if v5 != 0 then goto L530c38;
  #L530c36.  goto L530c3a;
  #L530c38.  v8:= v5;
  #L530c3a.  if v2 >= 0 then goto L530c42;
  #L530c3e.  v8:= v8 + 1;
  #L530c42.  v0:= v11.`m1.c0.h` @type ^`int`;
  #L530c46.  v0:= v0 + v8 @kind int;
  #L530c48.  v1:= v11.`m1.c0.g` @type ^`char`[] @kind object;
  #L530c4c.  v1:= length @variable v1;
  #L530c4e.  if v0 <= v1 then goto L530c74;
  #L530c52.  v1:= v11.`m1.c0.j` @type ^`java.io.Writer` @kind object;
  #L530c56.  if v1 != 0 then goto L530c62;
  #L530c5a.  call `s`(v11, v0) @signature `Lm1/c0;.s:(I)V` @kind virtual;
  #L530c60.  goto L530c74;
  #L530c62.  v0:= new `char`[v8];
  #L530c66.  call `w`(v12, v8, v0) @signature `Lm1/c0;.w:(JI[C)V` @kind static;
  #L530c6c.  call `write`(v11, v0, v9, v8) @signature `Lm1/c0;.write:([CII)V` @kind virtual;
  #L530c72.  return @kind void;
  #L530c74.  v1:= v11.`m1.c0.g` @type ^`char`[] @kind object;
  #L530c78.  call `w`(v12, v0, v1) @signature `Lm1/c0;.w:(JI[C)V` @kind static;
  #L530c7e.  v11.`m1.c0.h` @type ^`int` := v0;
  #L530c82.  return @kind void;
}
procedure `void` `write`(`m1.c0` v3 @kind this, `int` v4 ) @signature `Lm1/c0;.write:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L53167c.  v0:= v3.`m1.c0.h` @type ^`int`;
  #L531680.  v1:= 1I;
  #L531682.  v0:= v0 + v1 @kind int;
  #L531684.  v2:= v3.`m1.c0.g` @type ^`char`[] @kind object;
  #L531688.  v2:= length @variable v2;
  #L53168a.  if v0 <= v2 then goto L5316a6;
  #L53168e.  v2:= v3.`m1.c0.j` @type ^`java.io.Writer` @kind object;
  #L531692.  if v2 != 0 then goto L53169e;
  #L531696.  call `s`(v3, v0) @signature `Lm1/c0;.s:(I)V` @kind virtual;
  #L53169c.  goto L5316a6;
  #L53169e.  call `flush`(v3) @signature `Lm1/c0;.flush:()V` @kind virtual;
  #L5316a4.  goto L5316a8;
  #L5316a6.  v1:= v0;
  #L5316a8.  v0:= v3.`m1.c0.g` @type ^`char`[] @kind object;
  #L5316ac.  v2:= v3.`m1.c0.h` @type ^`int`;
  #L5316b0.  v4:= (`char`) v4 @kind i2c;
  #L5316b2.  v0[v2]:= v4 @kind char;
  #L5316b6.  v3.`m1.c0.h` @type ^`int` := v1;
  #L5316ba.  return @kind void;
}
procedure `void` `write`(`m1.c0` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lm1/c0;.write:(Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5316cc.  if v3 != 0 then goto L5316d8;
  #L5316d0.  call `r`(v2) @signature `Lm1/c0;.r:()V` @kind virtual;
  #L5316d6.  return @kind void;
  #L5316d8.  v0:= 0I;
  #L5316da.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L5316e0.  v1:= temp;
  #L5316e2.  call `write`(v2, v3, v0, v1) @signature `Lm1/c0;.write:(Ljava/lang/String;II)V` @kind virtual;
  #L5316e8.  return @kind void;
}
procedure `void` `write`(`m1.c0` v4 @kind this, `java.lang.String` v5 @kind object, `int` v6 , `int` v7 ) @signature `Lm1/c0;.write:(Ljava/lang/String;II)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L5316fc.  v0:= v4.`m1.c0.h` @type ^`int`;
  #L531700.  v0:= v0 + v7 @kind int;
  #L531702.  v1:= v4.`m1.c0.g` @type ^`char`[] @kind object;
  #L531706.  v1:= length @variable v1;
  #L531708.  if v0 <= v1 then goto L531758;
  #L53170c.  v1:= v4.`m1.c0.j` @type ^`java.io.Writer` @kind object;
  #L531710.  if v1 != 0 then goto L53171c;
  #L531714.  call `s`(v4, v0) @signature `Lm1/c0;.s:(I)V` @kind virtual;
  #L53171a.  goto L531758;
  #L53171c.  v0:= v4.`m1.c0.g` @type ^`char`[] @kind object;
  #L531720.  v1:= length @variable v0;
  #L531722.  v2:= v4.`m1.c0.h` @type ^`int`;
  #L531726.  v1:= v1 - v2 @kind int;
  #L531728.  v3:= v6 + v1 @kind int;
  #L53172c.  call `getChars`(v5, v6, v3, v0, v2) @signature `Ljava/lang/String;.getChars:(II[CI)V` @kind virtual;
  #L531732.  v6:= v4.`m1.c0.g` @type ^`char`[] @kind object;
  #L531736.  v6:= length @variable v6;
  #L531738.  v4.`m1.c0.h` @type ^`int` := v6;
  #L53173c.  call `flush`(v4) @signature `Lm1/c0;.flush:()V` @kind virtual;
  #L531742.  v7:= v7 - v1 @kind int;
  #L531744.  v6:= v4.`m1.c0.g` @type ^`char`[] @kind object;
  #L531748.  v6:= length @variable v6;
  #L53174a.  if v7 > v6 then goto L531754;
  #L53174e.  v0:= v7;
  #L531750.  v6:= v3;
  #L531752.  goto L531758;
  #L531754.  v6:= v3;
  #L531756.  goto L53171c;
  #L531758.  v7:= v7 + v6 @kind int;
  #L53175a.  v1:= v4.`m1.c0.g` @type ^`char`[] @kind object;
  #L53175e.  v2:= v4.`m1.c0.h` @type ^`int`;
  #L531762.  call `getChars`(v5, v6, v7, v1, v2) @signature `Ljava/lang/String;.getChars:(II[CI)V` @kind virtual;
  #L531768.  v4.`m1.c0.h` @type ^`int` := v0;
  #L53176c.  return @kind void;
}
procedure `void` `write`(`m1.c0` v3 @kind this, `char`[] v4 @kind object, `int` v5 , `int` v6 ) @signature `Lm1/c0;.write:([CII)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L5315d8.  if v5 < 0 then goto L531660;
  #L5315dc.  v0:= length @variable v4;
  #L5315de.  if v5 > v0 then goto L531660;
  #L5315e2.  if v6 < 0 then goto L531660;
  #L5315e6.  v0:= v5 + v6 @kind int;
  #L5315ea.  v1:= length @variable v4;
  #L5315ec.  if v0 > v1 then goto L531660;
  #L5315f0.  if v0 < 0 then goto L531660;
  #L5315f4.  if v6 != 0 then goto L5315fa;
  #L5315f8.  return @kind void;
  #L5315fa.  v0:= v3.`m1.c0.h` @type ^`int`;
  #L5315fe.  v0:= v0 + v6 @kind int;
  #L531600.  v1:= v3.`m1.c0.g` @type ^`char`[] @kind object;
  #L531604.  v1:= length @variable v1;
  #L531606.  if v0 <= v1 then goto L53164c;
  #L53160a.  v1:= v3.`m1.c0.j` @type ^`java.io.Writer` @kind object;
  #L53160e.  if v1 != 0 then goto L53161a;
  #L531612.  call `s`(v3, v0) @signature `Lm1/c0;.s:(I)V` @kind virtual;
  #L531618.  goto L53164c;
  #L53161a.  v0:= v3.`m1.c0.g` @type ^`char`[] @kind object;
  #L53161e.  v1:= length @variable v0;
  #L531620.  v2:= v3.`m1.c0.h` @type ^`int`;
  #L531624.  v1:= v1 - v2 @kind int;
  #L531626.  call `arraycopy`(v4, v5, v0, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L53162c.  v0:= v3.`m1.c0.g` @type ^`char`[] @kind object;
  #L531630.  v0:= length @variable v0;
  #L531632.  v3.`m1.c0.h` @type ^`int` := v0;
  #L531636.  call `flush`(v3) @signature `Lm1/c0;.flush:()V` @kind virtual;
  #L53163c.  v6:= v6 - v1 @kind int;
  #L53163e.  v5:= v5 + v1 @kind int;
  #L531640.  v0:= v3.`m1.c0.g` @type ^`char`[] @kind object;
  #L531644.  v0:= length @variable v0;
  #L531646.  if v6 > v0 then goto L53161a;
  #L53164a.  v0:= v6;
  #L53164c.  v1:= v3.`m1.c0.g` @type ^`char`[] @kind object;
  #L531650.  v2:= v3.`m1.c0.h` @type ^`int`;
  #L531654.  call `arraycopy`(v4, v5, v1, v2, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L53165a.  v3.`m1.c0.h` @type ^`int` := v0;
  #L53165e.  return @kind void;
  #L531660.  v4:= new `java.lang.IndexOutOfBoundsException`;
  #L531664.  call `<init>`(v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:()V` @kind direct;
  #L53166a.  throw v4;
}
procedure `void` `y`(`m1.c0` v17 @kind this, `java.lang.String` v18 @kind object, `char` v19 , `boolean` v20 ) @signature `Lm1/c0;.y:(Ljava/lang/String;CZ)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L530738.  v0:= v17 @kind object;
  #L53073c.  v1:= v18 @kind object;
  #L530740.  v2:= v19;
  #L530744.  if v1 != 0 then goto L53075a;
  #L530748.  call `r`(v17) @signature `Lm1/c0;.r:()V` @kind virtual;
  #L53074e.  if v2 == 0 then goto L530758;
  #L530752.  call `write`(v0, v2) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L530758.  return @kind void;
  #L53075a.  call temp:= `length`(v18) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L530760.  v3:= temp;
  #L530762.  v4:= v0.`m1.c0.h` @type ^`int`;
  #L530766.  v4:= v4 + v3 @kind int;
  #L530768.  v4:= v4 + 2;
  #L53076c.  if v2 == 0 then goto L530774;
  #L530770.  v4:= v4 + 1;
  #L530774.  v5:= v0.`m1.c0.g` @type ^`char`[] @kind object;
  #L530778.  v5:= length @variable v5;
  #L53077a.  v6:= 47I;
  #L53077e.  v7:= 34I;
  #L530782.  v8:= 0I;
  #L530784.  v9:= 92I;
  #L530788.  if v4 <= v5 then goto L530810;
  #L53078c.  v5:= v0.`m1.c0.j` @type ^`java.io.Writer` @kind object;
  #L530790.  if v5 == 0 then goto L53080a;
  #L530794.  call `write`(v0, v7) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L53079a.  call temp:= `length`(v18) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L5307a0.  v3:= temp;
  #L5307a2.  if v8 >= v3 then goto L5307f8;
  #L5307a6.  call temp:= `charAt`(v1, v8) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L5307ac.  v3:= temp;
  #L5307ae.  v4:= `@@m1.c0.p` @type ^`byte`[] @kind object;
  #L5307b2.  v5:= length @variable v4;
  #L5307b4.  if v3 >= v5 then goto L5307c0;
  #L5307b8.  v4:= v4[v3] @kind byte;
  #L5307bc.  if v4 != 0 then goto L5307d6;
  #L5307c0.  if v3 != v6 then goto L5307ec;
  #L5307c4.  v4:= v0.`m1.c0.i` @type ^`int`;
  #L5307c8.  v5:= `@@m1.b.WriteSlashAsSpecial` @type ^`m1.b` @kind object;
  #L5307cc.  v5:= v5.`m1.b.mask` @type ^`int`;
  #L5307d0.  v4:= v4 ^& v5 @kind int;
  #L5307d2.  if v4 == 0 then goto L5307ec;
  #L5307d6.  call `write`(v0, v9) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L5307dc.  v4:= `@@m1.c0.r` @type ^`char`[] @kind object;
  #L5307e0.  v3:= v4[v3] @kind char;
  #L5307e4.  call `write`(v0, v3) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L5307ea.  goto L5307f2;
  #L5307ec.  call `write`(v0, v3) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L5307f2.  v8:= v8 + 1;
  #L5307f6.  goto L53079a;
  #L5307f8.  call `write`(v0, v7) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L5307fe.  if v2 == 0 then goto L530808;
  #L530802.  call `write`(v0, v2) @signature `Lm1/c0;.write:(I)V` @kind virtual;
  #L530808.  return @kind void;
  #L53080a.  call `s`(v0, v4) @signature `Lm1/c0;.s:(I)V` @kind virtual;
  #L530810.  v5:= v0.`m1.c0.h` @type ^`int`;
  #L530814.  v10:= v5 + 1;
  #L530818.  v11:= v10 + v3 @kind int;
  #L53081c.  v12:= v0.`m1.c0.g` @type ^`char`[] @kind object;
  #L530820.  v12[v5]:= v7 @kind char;
  #L530824.  call `getChars`(v1, v8, v3, v12, v10) @signature `Ljava/lang/String;.getChars:(II[CI)V` @kind virtual;
  #L53082a.  v0.`m1.c0.h` @type ^`int` := v4;
  #L53082e.  if v20 == 0 then goto L530b9e;
  #L530832.  v5:= -1I;
  #L530834.  v12:= v10;
  #L530836.  v13:= 0I;
  #L530838.  v14:= -1I;
  #L53083a.  v15:= 0I;
  #L53083c.  v16:= -1I;
  #L530840.  v8:= 8232I;
  #L530844.  if v12 >= v11 then goto L530910;
  #L530848.  v3:= v0.`m1.c0.g` @type ^`char`[] @kind object;
  #L53084c.  v3:= v3[v12] @kind char;
  #L530850.  if v3 != v8 then goto L530872;
  #L530854.  v13:= v13 + 1;
  #L530858.  v4:= v4 + 4;
  #L53085c.  if v14 != v5 then goto L53086a;
  #L530860.  v15:= v3;
  #L530862.  v14:= v12;
  #L530864.  v16:= v14;
  #L530868.  goto L530906;
  #L53086a.  v15:= v3;
  #L53086c.  v16:= v12;
  #L530870.  goto L530906;
  #L530872.  v8:= 93I;
  #L530876.  if v3 < v8 then goto L53089a;
  #L53087a.  v8:= 127I;
  #L53087e.  if v3 < v8 then goto L530906;
  #L530882.  v8:= 160I;
  #L530886.  if v3 >= v8 then goto L530906;
  #L53088a.  if v14 != v5 then goto L530890;
  #L53088e.  v14:= v12;
  #L530890.  v13:= v13 + 1;
  #L530894.  v4:= v4 + 4;
  #L530898.  goto L53086a;
  #L53089a.  v8:= 32I;
  #L53089e.  if v3 != v8 then goto L5308a6;
  #L5308a2.  v6:= 0I;
  #L5308a4.  goto L5308e0;
  #L5308a6.  if v3 != v6 then goto L5308c0;
  #L5308aa.  v8:= v0.`m1.c0.i` @type ^`int`;
  #L5308ae.  v6:= `@@m1.b.WriteSlashAsSpecial` @type ^`m1.b` @kind object;
  #L5308b2.  v6:= v6.`m1.b.mask` @type ^`int`;
  #L5308b6.  v6:= v6 ^& v8 @kind int;
  #L5308b8.  if v6 == 0 then goto L5308c0;
  #L5308bc.  v6:= 1I;
  #L5308be.  goto L5308e0;
  #L5308c0.  v6:= 35I;
  #L5308c4.  if v3 <= v6 then goto L5308ce;
  #L5308c8.  if v3 == v9 then goto L5308ce;
  #L5308cc.  goto L5308a2;
  #L5308ce.  v6:= 31I;
  #L5308d2.  if v3 <= v6 then goto L5308bc;
  #L5308d6.  if v3 == v9 then goto L5308bc;
  #L5308da.  if v3 != v7 then goto L5308a2;
  #L5308de.  goto L5308bc;
  #L5308e0.  if v6 == 0 then goto L530906;
  #L5308e4.  v13:= v13 + 1;
  #L5308e8.  v6:= `@@m1.c0.p` @type ^`byte`[] @kind object;
  #L5308ec.  v8:= length @variable v6;
  #L5308ee.  if v3 >= v8 then goto L530900;
  #L5308f2.  v6:= v6[v3] @kind byte;
  #L5308f6.  v8:= 4I;
  #L5308f8.  if v6 != v8 then goto L530900;
  #L5308fc.  v4:= v4 + 4;
  #L530900.  if v14 != v5 then goto L53086a;
  #L530904.  goto L530860;
  #L530906.  v12:= v12 + 1;
  #L53090a.  v6:= 47I;
  #L53090e.  goto L530840;
  #L530910.  if v13 <= 0 then goto L530b9e;
  #L530914.  v4:= v4 + v13 @kind int;
  #L530916.  v3:= v0.`m1.c0.g` @type ^`char`[] @kind object;
  #L53091a.  v3:= length @variable v3;
  #L53091c.  if v4 <= v3 then goto L530926;
  #L530920.  call `s`(v0, v4) @signature `Lm1/c0;.s:(I)V` @kind virtual;
  #L530926.  v0.`m1.c0.h` @type ^`int` := v4;
  #L53092a.  v3:= 117I;
  #L53092e.  v4:= 1I;
  #L530930.  if v13 != v4 then goto L530a46;
  #L530934.  if v15 != v8 then goto L530984;
  #L530938.  v1:= v16 + 1;
  #L53093c.  v5:= v16 + 6;
  #L530940.  v11:= v11 - v16 @kind int;
  #L530944.  v11:= v11 - v4 @kind int;
  #L530946.  v6:= v0.`m1.c0.g` @type ^`char`[] @kind object;
  #L53094a.  call `arraycopy`(v6, v1, v6, v5, v11) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L530950.  v5:= v0.`m1.c0.g` @type ^`char`[] @kind object;
  #L530954.  v5[v16]:= v9 @kind char;
  #L530958.  v5[v1]:= v3 @kind char;
  #L53095c.  v1:= v1 + v4 @kind int;
  #L53095e.  v3:= 50I;
  #L530962.  v5[v1]:= v3 @kind char;
  #L530966.  v1:= v1 + v4 @kind int;
  #L530968.  v6:= 48I;
  #L53096c.  v5[v1]:= v6 @kind char;
  #L530970.  v1:= v1 + v4 @kind int;
  #L530972.  v5[v1]:= v3 @kind char;
  #L530976.  v1:= v1 + v4 @kind int;
  #L530978.  v3:= 56I;
  #L53097c.  v5[v1]:= v3 @kind char;
  #L530980.  goto L530b9e;
  #L530984.  v1:= `@@m1.c0.p` @type ^`byte`[] @kind object;
  #L530988.  v4:= length @variable v1;
  #L53098a.  if v15 >= v4 then goto L530a14;
  #L53098e.  v1:= v1[v15] @kind byte;
  #L530992.  v4:= 4I;
  #L530994.  if v1 != v4 then goto L530a14;
  #L530998.  v1:= v16 + 1;
  #L53099c.  v4:= v16 + 6;
  #L5309a0.  v11:= v11 - v16 @kind int;
  #L5309a4.  v5:= 1I;
  #L5309a6.  v11:= v11 - v5 @kind int;
  #L5309a8.  v5:= v0.`m1.c0.g` @type ^`char`[] @kind object;
  #L5309ac.  call `arraycopy`(v5, v1, v5, v4, v11) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L5309b2.  v4:= v0.`m1.c0.g` @type ^`char`[] @kind object;
  #L5309b6.  v4[v16]:= v9 @kind char;
  #L5309ba.  v5:= v1 + 1;
  #L5309be.  v4[v1]:= v3 @kind char;
  #L5309c2.  v1:= v5 + 1;
  #L5309c6.  v3:= `@@m1.c0.s` @type ^`char`[] @kind object;
  #L5309ca.  v6:= v15 ^>> 12;
  #L5309ce.  v6:= v6 ^& 15;
  #L5309d2.  v6:= v3[v6] @kind char;
  #L5309d6.  v4[v5]:= v6 @kind char;
  #L5309da.  v5:= v1 + 1;
  #L5309de.  v6:= v15 ^>> 8;
  #L5309e2.  v6:= v6 ^& 15;
  #L5309e6.  v6:= v3[v6] @kind char;
  #L5309ea.  v4[v1]:= v6 @kind char;
  #L5309ee.  v1:= v5 + 1;
  #L5309f2.  v6:= v15 ^>> 4;
  #L5309f6.  v6:= v6 ^& 15;
  #L5309fa.  v6:= v3[v6] @kind char;
  #L5309fe.  v4[v5]:= v6 @kind char;
  #L530a02.  v5:= v15 ^& 15;
  #L530a06.  v3:= v3[v5] @kind char;
  #L530a0a.  v4[v1]:= v3 @kind char;
  #L530a0e.  v4:= 1I;
  #L530a10.  goto L530b9e;
  #L530a14.  v1:= v16 + 1;
  #L530a18.  v3:= v16 + 2;
  #L530a1c.  v11:= v11 - v16 @kind int;
  #L530a20.  v4:= 1I;
  #L530a22.  v11:= v11 - v4 @kind int;
  #L530a24.  v5:= v0.`m1.c0.g` @type ^`char`[] @kind object;
  #L530a28.  call `arraycopy`(v5, v1, v5, v3, v11) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L530a2e.  v3:= v0.`m1.c0.g` @type ^`char`[] @kind object;
  #L530a32.  v3[v16]:= v9 @kind char;
  #L530a36.  v5:= `@@m1.c0.r` @type ^`char`[] @kind object;
  #L530a3a.  v5:= v5[v15] @kind char;
  #L530a3e.  v3[v1]:= v5 @kind char;
  #L530a42.  goto L530b9e;
  #L530a46.  if v13 <= v4 then goto L530b9e;
  #L530a4a.  v4:= v14 - v10 @kind int;
  #L530a4e.  call temp:= `length`(v18) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L530a54.  v5:= temp;
  #L530a56.  if v4 >= v5 then goto L530b9e;
  #L530a5a.  call temp:= `charAt`(v1, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L530a60.  v5:= temp;
  #L530a62.  v6:= `@@m1.c0.p` @type ^`byte`[] @kind object;
  #L530a66.  v10:= length @variable v6;
  #L530a68.  if v5 >= v10 then goto L530a7c;
  #L530a6c.  v10:= v6[v5] @kind byte;
  #L530a70.  if v10 != 0 then goto L530a76;
  #L530a74.  goto L530a7c;
  #L530a76.  v10:= 47I;
  #L530a7a.  goto L530a96;
  #L530a7c.  v10:= 47I;
  #L530a80.  if v5 != v10 then goto L530b1a;
  #L530a84.  v11:= v0.`m1.c0.i` @type ^`int`;
  #L530a88.  v12:= `@@m1.b.WriteSlashAsSpecial` @type ^`m1.b` @kind object;
  #L530a8c.  v12:= v12.`m1.b.mask` @type ^`int`;
  #L530a90.  v11:= v11 ^& v12 @kind int;
  #L530a92.  if v11 == 0 then goto L530b1a;
  #L530a96.  v11:= v0.`m1.c0.g` @type ^`char`[] @kind object;
  #L530a9a.  v12:= v14 + 1;
  #L530a9e.  v11[v14]:= v9 @kind char;
  #L530aa2.  v6:= v6[v5] @kind byte;
  #L530aa6.  v13:= 4I;
  #L530aa8.  if v6 != v13 then goto L530b06;
  #L530aac.  v6:= v12 + 1;
  #L530ab0.  v11[v12]:= v3 @kind char;
  #L530ab4.  v12:= v6 + 1;
  #L530ab8.  v14:= `@@m1.c0.s` @type ^`char`[] @kind object;
  #L530abc.  v15:= v5 ^>> 12;
  #L530ac0.  v15:= v15 ^& 15;
  #L530ac4.  v15:= v14[v15] @kind char;
  #L530ac8.  v11[v6]:= v15 @kind char;
  #L530acc.  v6:= v12 + 1;
  #L530ad0.  v15:= v5 ^>> 8;
  #L530ad4.  v15:= v15 ^& 15;
  #L530ad8.  v15:= v14[v15] @kind char;
  #L530adc.  v11[v12]:= v15 @kind char;
  #L530ae0.  v12:= v6 + 1;
  #L530ae4.  v15:= v5 ^>> 4;
  #L530ae8.  v15:= v15 ^& 15;
  #L530aec.  v15:= v14[v15] @kind char;
  #L530af0.  v11[v6]:= v15 @kind char;
  #L530af4.  v6:= v12 + 1;
  #L530af8.  v5:= v5 ^& 15;
  #L530afc.  v5:= v14[v5] @kind char;
  #L530b00.  v11[v12]:= v5 @kind char;
  #L530b04.  goto L530b16;
  #L530b06.  v6:= v12 + 1;
  #L530b0a.  v14:= `@@m1.c0.r` @type ^`char`[] @kind object;
  #L530b0e.  v5:= v14[v5] @kind char;
  #L530b12.  v11[v12]:= v5 @kind char;
  #L530b16.  v14:= v6;
  #L530b18.  goto L530b96;
  #L530b1a.  v13:= 4I;
  #L530b1c.  if v5 != v8 then goto L530b88;
  #L530b20.  v6:= v0.`m1.c0.g` @type ^`char`[] @kind object;
  #L530b24.  v11:= v14 + 1;
  #L530b28.  v6[v14]:= v9 @kind char;
  #L530b2c.  v12:= v11 + 1;
  #L530b30.  v6[v11]:= v3 @kind char;
  #L530b34.  v11:= v12 + 1;
  #L530b38.  v14:= `@@m1.c0.s` @type ^`char`[] @kind object;
  #L530b3c.  v15:= v5 ^>> 12;
  #L530b40.  v15:= v15 ^& 15;
  #L530b44.  v15:= v14[v15] @kind char;
  #L530b48.  v6[v12]:= v15 @kind char;
  #L530b4c.  v12:= v11 + 1;
  #L530b50.  v15:= v5 ^>> 8;
  #L530b54.  v15:= v15 ^& 15;
  #L530b58.  v15:= v14[v15] @kind char;
  #L530b5c.  v6[v11]:= v15 @kind char;
  #L530b60.  v11:= v12 + 1;
  #L530b64.  v15:= v5 ^>> 4;
  #L530b68.  v15:= v15 ^& 15;
  #L530b6c.  v15:= v14[v15] @kind char;
  #L530b70.  v6[v12]:= v15 @kind char;
  #L530b74.  v12:= v11 + 1;
  #L530b78.  v5:= v5 ^& 15;
  #L530b7c.  v5:= v14[v5] @kind char;
  #L530b80.  v6[v11]:= v5 @kind char;
  #L530b84.  v14:= v12;
  #L530b86.  goto L530b96;
  #L530b88.  v6:= v0.`m1.c0.g` @type ^`char`[] @kind object;
  #L530b8c.  v11:= v14 + 1;
  #L530b90.  v6[v14]:= v5 @kind char;
  #L530b94.  v14:= v11;
  #L530b96.  v4:= v4 + 1;
  #L530b9a.  goto L530a4e;
  #L530b9e.  if v2 == 0 then goto L530bbc;
  #L530ba2.  v1:= v0.`m1.c0.g` @type ^`char`[] @kind object;
  #L530ba6.  v3:= v0.`m1.c0.h` @type ^`int`;
  #L530baa.  v4:= v3 + -2;
  #L530bae.  v1[v4]:= v7 @kind char;
  #L530bb2.  v4:= 1I;
  #L530bb4.  v3:= v3 - v4 @kind int;
  #L530bb6.  v1[v3]:= v2 @kind char;
  #L530bba.  goto L530bcc;
  #L530bbc.  v4:= 1I;
  #L530bbe.  v1:= v0.`m1.c0.g` @type ^`char`[] @kind object;
  #L530bc2.  v2:= v0.`m1.c0.h` @type ^`int`;
  #L530bc6.  v2:= v2 - v4 @kind int;
  #L530bc8.  v1[v2]:= v7 @kind char;
  #L530bcc.  return @kind void;
}
