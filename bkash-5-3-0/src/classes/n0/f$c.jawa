record `n0.f$c` @kind class @AccessFlag  extends `java.lang.Comparable` @kind interface {
  `int` `n0.f$c.g` @AccessFlag FINAL;
  `int` `n0.f$c.h` @AccessFlag FINAL;
  `java.lang.String` `n0.f$c.i` @AccessFlag FINAL;
  `java.lang.String` `n0.f$c.j` @AccessFlag FINAL;
}
procedure `void` `<init>`(`n0.f$c` v0 @kind this, `int` v1 , `int` v2 , `java.lang.String` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Ln0/f$c;.<init>:(IILjava/lang/String;Ljava/lang/String;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L5377cc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L5377d2.  v0.`n0.f$c.g` @type ^`int` := v1;
  #L5377d6.  v0.`n0.f$c.h` @type ^`int` := v2;
  #L5377da.  v0.`n0.f$c.i` @type ^`java.lang.String` := v3 @kind object;
  #L5377de.  v0.`n0.f$c.j` @type ^`java.lang.String` := v4 @kind object;
  #L5377e2.  return @kind void;
}
procedure `int` `a`(`n0.f$c` v2 @kind this, `n0.f$c` v3 @kind object) @signature `Ln0/f$c;.a:(Ln0/f$c;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5377a0.  v0:= v2.`n0.f$c.g` @type ^`int`;
  #L5377a4.  v1:= v3.`n0.f$c.g` @type ^`int`;
  #L5377a8.  v0:= v0 - v1 @kind int;
  #L5377aa.  if v0 != 0 then goto L5377b8;
  #L5377ae.  v0:= v2.`n0.f$c.h` @type ^`int`;
  #L5377b2.  v3:= v3.`n0.f$c.h` @type ^`int`;
  #L5377b6.  v0:= v0 - v3 @kind int;
  #L5377b8.  return v0;
}
procedure `int` `compareTo`(`n0.f$c` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Ln0/f$c;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L537780.  v1:= (`n0.f$c`) v1 @kind object;
  #L537784.  call temp:= `a`(v0, v1) @signature `Ln0/f$c;.a:(Ln0/f$c;)I` @kind virtual;
  #L53778a.  v1:= temp;
  #L53778c.  return v1;
}
