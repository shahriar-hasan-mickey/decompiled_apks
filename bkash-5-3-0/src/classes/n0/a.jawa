record `n0.a` @kind class @AccessFlag PUBLIC {
  `java.io.File` `n0.a.a` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.locks.Lock` `n0.a.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `n0.a.c` @AccessFlag PRIVATE_FINAL;
  `java.nio.channels.FileChannel` `n0.a.d` @AccessFlag PRIVATE;
}
global `java.util.Map` `@@n0.a.e` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ln0/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L536ef8.  v0:= new `java.util.HashMap`;
  #L536efc.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L536f02.  `@@n0.a.e` @type ^`java.util.Map` := v0 @kind object;
  #L536f06.  return @kind void;
}
procedure `void` `<init>`(`n0.a` v2 @kind this, `java.lang.String` v3 @kind object, `java.io.File` v4 @kind object, `boolean` v5 ) @signature `Ln0/a;.<init>:(Ljava/lang/String;Ljava/io/File;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L536f18.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L536f1e.  v0:= new `java.io.File`;
  #L536f22.  v1:= new `java.lang.StringBuilder`;
  #L536f26.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L536f2c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L536f32.  v3:= ".lck" @kind object;
  #L536f36.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L536f3c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L536f42.  v3:= temp @kind object;
  #L536f44.  call `<init>`(v0, v4, v3) @signature `Ljava/io/File;.<init>:(Ljava/io/File;Ljava/lang/String;)V` @kind direct;
  #L536f4a.  v2.`n0.a.a` @type ^`java.io.File` := v0 @kind object;
  #L536f4e.  call temp:= `getAbsolutePath`(v0) @signature `Ljava/io/File;.getAbsolutePath:()Ljava/lang/String;` @kind virtual;
  #L536f54.  v3:= temp @kind object;
  #L536f56.  call temp:= `a`(v3) @signature `Ln0/a;.a:(Ljava/lang/String;)Ljava/util/concurrent/locks/Lock;` @kind static;
  #L536f5c.  v3:= temp @kind object;
  #L536f5e.  v2.`n0.a.b` @type ^`java.util.concurrent.locks.Lock` := v3 @kind object;
  #L536f62.  v2.`n0.a.c` @type ^`boolean` := v5 @kind boolean;
  #L536f66.  return @kind void;
}
procedure `java.util.concurrent.locks.Lock` `a`(`java.lang.String` v2 @kind object) @signature `Ln0/a;.a:(Ljava/lang/String;)Ljava/util/concurrent/locks/Lock;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L536eac.  v0:= `@@n0.a.e` @type ^`java.util.Map` @kind object;
  #L536eb0.  @monitorenter v0
  #L536eb2.  call temp:= `get`(v0, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L536eb8.  v1:= temp @kind object;
  #L536eba.  v1:= (`java.util.concurrent.locks.Lock`) v1 @kind object;
  #L536ebe.  if v1 != 0 then goto L536ed2;
  #L536ec2.  v1:= new `java.util.concurrent.locks.ReentrantLock`;
  #L536ec6.  call `<init>`(v1) @signature `Ljava/util/concurrent/locks/ReentrantLock;.<init>:()V` @kind direct;
  #L536ecc.  call temp:= `put`(v0, v2, v1) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L536ed2.  @monitorexit v0
  #L536ed4.  return v1 @kind object;
  #L536ed6.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L536ed8.  @monitorexit v0
  #L536eda.  throw v2;
  catch `java.lang.Throwable` @[L536eb2..L536eda] goto L536ed6;
}
procedure `void` `b`(`n0.a` v3 @kind this) @signature `Ln0/a;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L536f78.  v0:= v3.`n0.a.b` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L536f7c.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L536f82.  v0:= v3.`n0.a.c` @type ^`boolean` @kind boolean;
  #L536f86.  if v0 == 0 then goto L536fbe;
  #L536f8a.  v0:= new `java.io.FileOutputStream`;
  #L536f8e.  v1:= v3.`n0.a.a` @type ^`java.io.File` @kind object;
  #L536f92.  call `<init>`(v0, v1) @signature `Ljava/io/FileOutputStream;.<init>:(Ljava/io/File;)V` @kind direct;
  #L536f98.  call temp:= `getChannel`(v0) @signature `Ljava/io/FileOutputStream;.getChannel:()Ljava/nio/channels/FileChannel;` @kind virtual;
  #L536f9e.  v0:= temp @kind object;
  #L536fa0.  v3.`n0.a.d` @type ^`java.nio.channels.FileChannel` := v0 @kind object;
  #L536fa4.  call temp:= `lock`(v0) @signature `Ljava/nio/channels/FileChannel;.lock:()Ljava/nio/channels/FileLock;` @kind virtual;
  #L536faa.  goto L536fbe;
  #L536fac.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L536fae.  v1:= new `java.lang.IllegalStateException`;
  #L536fb2.  v2:= "Unable to grab copy lock." @kind object;
  #L536fb6.  call `<init>`(v1, v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L536fbc.  throw v1;
  #L536fbe.  return @kind void;
  catch `java.io.IOException` @[L536f8a..L536faa] goto L536fac;
}
procedure `void` `c`(`n0.a` v1 @kind this) @signature `Ln0/a;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L536fe0.  v0:= v1.`n0.a.d` @type ^`java.nio.channels.FileChannel` @kind object;
  #L536fe4.  if v0 == 0 then goto L536fee;
  #L536fe8.  call `close`(v0) @signature `Ljava/nio/channels/FileChannel;.close:()V` @kind virtual;
  #L536fee.  v0:= v1.`n0.a.b` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L536ff2.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L536ff8.  return @kind void;
  catch `java.io.IOException` @[L536fe8..L536fee] goto L536fee;
}
