record `h3.g` @kind class @AccessFlag PUBLIC extends `java.util.HashSet` @kind class {
}
procedure `void` `<init>`(`h3.g` v0 @kind this, `java.util.Set` v1 @kind object) @signature `Lh3/g;.<init>:(Ljava/util/Set;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L50c140.  call `<init>`(v0, v1) @signature `Ljava/util/HashSet;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L50c146.  return @kind void;
}
procedure `h3.g` `copyOf`(`java.util.Set` v1 @kind object) @signature `Lh3/g;.copyOf:(Ljava/util/Set;)Lh3/g;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L50c0f4.  v0:= new `h3.g`;
  #L50c0f8.  call `<init>`(v0, v1) @signature `Lh3/g;.<init>:(Ljava/util/Set;)V` @kind direct;
  #L50c0fe.  return v0 @kind object;
}
procedure `h3.g` `of`(`java.lang.Object`[] v2 @kind object) @signature `Lh3/g;.of:([Ljava/lang/Object;)Lh3/g;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L50c110.  v0:= new `java.util.HashSet`;
  #L50c114.  v1:= length @variable v2;
  #L50c116.  call `<init>`(v0, v1) @signature `Ljava/util/HashSet;.<init>:(I)V` @kind direct;
  #L50c11c.  call temp:= `addAll`(v0, v2) @signature `Ljava/util/Collections;.addAll:(Ljava/util/Collection;[Ljava/lang/Object;)Z` @kind static;
  #L50c122.  v2:= new `h3.g`;
  #L50c126.  call `<init>`(v2, v0) @signature `Lh3/g;.<init>:(Ljava/util/Set;)V` @kind direct;
  #L50c12c.  return v2 @kind object;
}
