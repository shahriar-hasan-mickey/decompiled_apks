record `h3.j` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `java.lang.String` `a`(`int` v4 , `int` v5 , `java.lang.String` v6 @kind object) @signature `Lh3/j;.a:(IILjava/lang/String;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L50c4d4.  v0:= 1I;
  #L50c4d6.  v1:= 0I;
  #L50c4d8.  v2:= 2I;
  #L50c4da.  if v4 >= 0 then goto L50c500;
  #L50c4de.  v5:= new `java.lang.Object`[v2];
  #L50c4e2.  v5[v1]:= v6 @kind object;
  #L50c4e6.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L50c4ec.  v4:= temp @kind object;
  #L50c4ee.  v5[v0]:= v4 @kind object;
  #L50c4f2.  v4:= "%s (%s) must not be negative" @kind object;
  #L50c4f6.  call temp:= `k`(v4, v5) @signature `Lh3/j;.k:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L50c4fc.  v4:= temp @kind object;
  #L50c4fe.  return v4 @kind object;
  #L50c500.  if v5 < 0 then goto L50c534;
  #L50c504.  v3:= 3I;
  #L50c506.  v3:= new `java.lang.Object`[v3];
  #L50c50a.  v3[v1]:= v6 @kind object;
  #L50c50e.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L50c514.  v4:= temp @kind object;
  #L50c516.  v3[v0]:= v4 @kind object;
  #L50c51a.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L50c520.  v4:= temp @kind object;
  #L50c522.  v3[v2]:= v4 @kind object;
  #L50c526.  v4:= "%s (%s) must be less than size (%s)" @kind object;
  #L50c52a.  call temp:= `k`(v4, v3) @signature `Lh3/j;.k:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L50c530.  v4:= temp @kind object;
  #L50c532.  return v4 @kind object;
  #L50c534.  v4:= new `java.lang.IllegalArgumentException`;
  #L50c538.  v6:= new `java.lang.StringBuilder`;
  #L50c53c.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L50c542.  v0:= "negative size: " @kind object;
  #L50c546.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50c54c.  call temp:= `append`(v6, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L50c552.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L50c558.  v5:= temp @kind object;
  #L50c55a.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50c560.  throw v4;
}
procedure `void` `b`(`java.lang.Boolean` v0 @kind object) @signature `Lh3/j;.b:(Ljava/lang/Boolean;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L50c6a8.  if v0 == 0 then goto L50c6c6;
  #L50c6ac.  call temp:= `booleanValue`(v0) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L50c6b2.  v0:= temp;
  #L50c6b4.  if v0 == 0 then goto L50c6ba;
  #L50c6b8.  goto L50c6c6;
  #L50c6ba.  v0:= new `java.lang.IllegalArgumentException`;
  #L50c6be.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L50c6c4.  throw v0;
  #L50c6c6.  return @kind void;
}
procedure `void` `c`(`boolean` v0 , `java.lang.Object` v1 @kind object) @signature `Lh3/j;.c:(ZLjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L50c650.  if v0 == 0 then goto L50c656;
  #L50c654.  return @kind void;
  #L50c656.  v0:= new `java.lang.IllegalArgumentException`;
  #L50c65a.  call temp:= `valueOf`(v1) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L50c660.  v1:= temp @kind object;
  #L50c662.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50c668.  throw v0;
}
procedure `void` `d`(`boolean` v0 , `java.lang.String` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Lh3/j;.d:(ZLjava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L50c67c.  if v0 == 0 then goto L50c682;
  #L50c680.  return @kind void;
  #L50c682.  v0:= new `java.lang.IllegalArgumentException`;
  #L50c686.  call temp:= `k`(v1, v2) @signature `Lh3/j;.k:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L50c68c.  v1:= temp @kind object;
  #L50c68e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50c694.  throw v0;
}
procedure `int` `e`(`int` v1 , `int` v2 ) @signature `Lh3/j;.e:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L50c440.  v0:= "index" @kind object;
  #L50c444.  call temp:= `f`(v1, v2, v0) @signature `Lh3/j;.f:(IILjava/lang/String;)I` @kind static;
  #L50c44a.  v1:= temp;
  #L50c44c.  return v1;
}
procedure `int` `f`(`int` v1 , `int` v2 , `java.lang.String` v3 @kind object) @signature `Lh3/j;.f:(IILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L50c460.  if v1 < 0 then goto L50c46a;
  #L50c464.  if v1 >= v2 then goto L50c46a;
  #L50c468.  return v1;
  #L50c46a.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L50c46e.  call temp:= `a`(v1, v2, v3) @signature `Lh3/j;.a:(IILjava/lang/String;)Ljava/lang/String;` @kind static;
  #L50c474.  v1:= temp @kind object;
  #L50c476.  call `<init>`(v0, v1) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50c47c.  throw v0;
}
procedure `java.lang.Object` `g`(`java.lang.Object` v0 @kind object) @signature `Lh3/j;.g:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L50c490.  call temp:= `requireNonNull`(v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L50c496.  return v0 @kind object;
}
procedure `java.lang.Object` `h`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lh3/j;.h:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L50c4a8.  if v0 == 0 then goto L50c4ae;
  #L50c4ac.  return v0 @kind object;
  #L50c4ae.  v0:= new `java.lang.NullPointerException`;
  #L50c4b2.  call temp:= `valueOf`(v1) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L50c4b8.  v1:= temp @kind object;
  #L50c4ba.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50c4c0.  throw v0;
}
procedure `void` `i`(`boolean` v0 ) @signature `Lh3/j;.i:(Z)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L50c6d8.  if v0 == 0 then goto L50c6de;
  #L50c6dc.  return @kind void;
  #L50c6de.  v0:= new `java.lang.IllegalStateException`;
  #L50c6e2.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L50c6e8.  throw v0;
}
procedure `void` `j`(`boolean` v0 , `java.lang.Object` v1 @kind object) @signature `Lh3/j;.j:(ZLjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L50c6fc.  if v0 == 0 then goto L50c702;
  #L50c700.  return @kind void;
  #L50c702.  v0:= new `java.lang.IllegalStateException`;
  #L50c706.  call temp:= `valueOf`(v1) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L50c70c.  v1:= temp @kind object;
  #L50c70e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50c714.  throw v0;
}
procedure `java.lang.String` `k`(`java.lang.String` v6 @kind object, `java.lang.Object`[] v7 @kind object) @signature `Lh3/j;.k:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L50c574.  call temp:= `valueOf`(v6) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L50c57a.  v6:= temp @kind object;
  #L50c57c.  v0:= new `java.lang.StringBuilder`;
  #L50c580.  call temp:= `length`(v6) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L50c586.  v1:= temp;
  #L50c588.  v2:= length @variable v7;
  #L50c58a.  v2:= v2 * 16;
  #L50c58e.  v1:= v1 + v2 @kind int;
  #L50c590.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L50c596.  v1:= 0I;
  #L50c598.  v2:= 0I;
  #L50c59a.  v3:= length @variable v7;
  #L50c59c.  if v1 >= v3 then goto L50c5dc;
  #L50c5a0.  v3:= "%s" @kind object;
  #L50c5a4.  call temp:= `indexOf`(v6, v3, v2) @signature `Ljava/lang/String;.indexOf:(Ljava/lang/String;I)I` @kind virtual;
  #L50c5aa.  v3:= temp;
  #L50c5ac.  v4:= -1I;
  #L50c5ae.  if v3 != v4 then goto L50c5b4;
  #L50c5b2.  goto L50c5dc;
  #L50c5b4.  call temp:= `substring`(v6, v2, v3) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L50c5ba.  v2:= temp @kind object;
  #L50c5bc.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50c5c2.  v2:= v1 + 1;
  #L50c5c6.  v1:= v7[v1] @kind object;
  #L50c5ca.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50c5d0.  v1:= v3 + 2;
  #L50c5d4.  v5:= v2;
  #L50c5d6.  v2:= v1;
  #L50c5d8.  v1:= v5;
  #L50c5da.  goto L50c59a;
  #L50c5dc.  call temp:= `substring`(v6, v2) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L50c5e2.  v6:= temp @kind object;
  #L50c5e4.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50c5ea.  v6:= length @variable v7;
  #L50c5ec.  if v1 >= v6 then goto L50c634;
  #L50c5f0.  v6:= " [" @kind object;
  #L50c5f4.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50c5fa.  v6:= v1 + 1;
  #L50c5fe.  v1:= v7[v1] @kind object;
  #L50c602.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50c608.  v1:= length @variable v7;
  #L50c60a.  if v6 >= v1 then goto L50c62a;
  #L50c60e.  v1:= ", " @kind object;
  #L50c612.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50c618.  v1:= v6 + 1;
  #L50c61c.  v6:= v7[v6] @kind object;
  #L50c620.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50c626.  v6:= v1;
  #L50c628.  goto L50c608;
  #L50c62a.  v6:= 93I;
  #L50c62e.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L50c634.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L50c63a.  v6:= temp @kind object;
  #L50c63c.  return v6 @kind object;
}
