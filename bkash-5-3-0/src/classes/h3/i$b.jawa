record `h3.i$b` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String` `h3.i$b.a` @AccessFlag PRIVATE_FINAL;
  `h3.i$b$a` `h3.i$b.b` @AccessFlag PRIVATE_FINAL;
  `h3.i$b$a` `h3.i$b.c` @AccessFlag PRIVATE;
  `boolean` `h3.i$b.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`h3.i$b` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lh3/i$b;.<init>:(Ljava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L50c368.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L50c36e.  v0:= new `h3.i$b$a`;
  #L50c372.  v1:= 0I;
  #L50c374.  call `<init>`(v0, v1) @signature `Lh3/i$b$a;.<init>:(Lh3/i$a;)V` @kind direct;
  #L50c37a.  v2.`h3.i$b.b` @type ^`h3.i$b$a` := v0 @kind object;
  #L50c37e.  v2.`h3.i$b.c` @type ^`h3.i$b$a` := v0 @kind object;
  #L50c382.  v0:= 0I;
  #L50c384.  v2.`h3.i$b.d` @type ^`boolean` := v0 @kind boolean;
  #L50c388.  call temp:= `g`(v3) @signature `Lh3/j;.g:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L50c38e.  v3:= temp @kind object;
  #L50c390.  v3:= (`java.lang.String`) v3 @kind object;
  #L50c394.  v2.`h3.i$b.a` @type ^`java.lang.String` := v3 @kind object;
  #L50c398.  return @kind void;
}
procedure `void` `<init>`(`h3.i$b` v0 @kind this, `java.lang.String` v1 @kind object, `h3.i$a` v2 @kind object) @signature `Lh3/i$b;.<init>:(Ljava/lang/String;Lh3/i$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L50c3ac.  call `<init>`(v0, v1) @signature `Lh3/i$b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50c3b2.  return @kind void;
}
procedure `h3.i$b$a` `d`(`h3.i$b` v2 @kind this) @signature `Lh3/i$b;.d:()Lh3/i$b$a;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L50c268.  v0:= new `h3.i$b$a`;
  #L50c26c.  v1:= 0I;
  #L50c26e.  call `<init>`(v0, v1) @signature `Lh3/i$b$a;.<init>:(Lh3/i$a;)V` @kind direct;
  #L50c274.  v1:= v2.`h3.i$b.c` @type ^`h3.i$b$a` @kind object;
  #L50c278.  v1.`h3.i$b$a.c` @type ^`h3.i$b$a` := v0 @kind object;
  #L50c27c.  v2.`h3.i$b.c` @type ^`h3.i$b$a` := v0 @kind object;
  #L50c280.  return v0 @kind object;
}
procedure `h3.i$b` `e`(`h3.i$b` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lh3/i$b;.e:(Ljava/lang/String;Ljava/lang/Object;)Lh3/i$b;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L50c238.  call temp:= `d`(v1) @signature `Lh3/i$b;.d:()Lh3/i$b$a;` @kind direct;
  #L50c23e.  v0:= temp @kind object;
  #L50c240.  v0.`h3.i$b$a.b` @type ^`java.lang.Object` := v3 @kind object;
  #L50c244.  call temp:= `g`(v2) @signature `Lh3/j;.g:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L50c24a.  v2:= temp @kind object;
  #L50c24c.  v2:= (`java.lang.String`) v2 @kind object;
  #L50c250.  v0.`h3.i$b$a.a` @type ^`java.lang.String` := v2 @kind object;
  #L50c254.  return v1 @kind object;
}
procedure `h3.i$b` `a`(`h3.i$b` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 ) @signature `Lh3/i$b;.a:(Ljava/lang/String;I)Lh3/i$b;` @AccessFlag PUBLIC {
    temp;

  #L50c1f8.  call temp:= `valueOf`(v2) @signature `Ljava/lang/String;.valueOf:(I)Ljava/lang/String;` @kind static;
  #L50c1fe.  v2:= temp @kind object;
  #L50c200.  call temp:= `e`(v0, v1, v2) @signature `Lh3/i$b;.e:(Ljava/lang/String;Ljava/lang/Object;)Lh3/i$b;` @kind direct;
  #L50c206.  v1:= temp @kind object;
  #L50c208.  return v1 @kind object;
}
procedure `h3.i$b` `b`(`h3.i$b` v0 @kind this, `java.lang.String` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lh3/i$b;.b:(Ljava/lang/String;Ljava/lang/Object;)Lh3/i$b;` @AccessFlag PUBLIC {
    temp;

  #L50c21c.  call temp:= `e`(v0, v1, v2) @signature `Lh3/i$b;.e:(Ljava/lang/String;Ljava/lang/Object;)Lh3/i$b;` @kind direct;
  #L50c222.  v1:= temp @kind object;
  #L50c224.  return v1 @kind object;
}
procedure `h3.i$b` `c`(`h3.i$b` v0 @kind this, `java.lang.String` v1 @kind object, `boolean` v2 ) @signature `Lh3/i$b;.c:(Ljava/lang/String;Z)Lh3/i$b;` @AccessFlag PUBLIC {
    temp;

  #L50c1d4.  call temp:= `valueOf`(v2) @signature `Ljava/lang/String;.valueOf:(Z)Ljava/lang/String;` @kind static;
  #L50c1da.  v2:= temp @kind object;
  #L50c1dc.  call temp:= `e`(v0, v1, v2) @signature `Lh3/i$b;.e:(Ljava/lang/String;Ljava/lang/Object;)Lh3/i$b;` @kind direct;
  #L50c1e2.  v1:= temp @kind object;
  #L50c1e4.  return v1 @kind object;
}
procedure `java.lang.String` `toString`(`h3.i$b` v7 @kind this) @signature `Lh3/i$b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L50c294.  v0:= v7.`h3.i$b.d` @type ^`boolean` @kind boolean;
  #L50c298.  v1:= new `java.lang.StringBuilder`;
  #L50c29c.  v2:= 32I;
  #L50c2a0.  call `<init>`(v1, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L50c2a6.  v2:= v7.`h3.i$b.a` @type ^`java.lang.String` @kind object;
  #L50c2aa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50c2b0.  v2:= 123I;
  #L50c2b4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L50c2ba.  v2:= v7.`h3.i$b.b` @type ^`h3.i$b$a` @kind object;
  #L50c2be.  v2:= v2.`h3.i$b$a.c` @type ^`h3.i$b$a` @kind object;
  #L50c2c2.  v3:= "" @kind object;
  #L50c2c6.  if v2 == 0 then goto L50c342;
  #L50c2ca.  v4:= v2.`h3.i$b$a.b` @type ^`java.lang.Object` @kind object;
  #L50c2ce.  if v0 == 0 then goto L50c2d6;
  #L50c2d2.  if v4 == 0 then goto L50c33c;
  #L50c2d6.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50c2dc.  v3:= v2.`h3.i$b$a.a` @type ^`java.lang.String` @kind object;
  #L50c2e0.  if v3 == 0 then goto L50c2f4;
  #L50c2e4.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50c2ea.  v3:= 61I;
  #L50c2ee.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L50c2f4.  if v4 == 0 then goto L50c332;
  #L50c2f8.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L50c2fe.  v3:= temp @kind object;
  #L50c300.  call temp:= `isArray`(v3) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L50c306.  v3:= temp;
  #L50c308.  if v3 == 0 then goto L50c332;
  #L50c30c.  v3:= 1I;
  #L50c30e.  v5:= new `java.lang.Object`[v3];
  #L50c312.  v6:= 0I;
  #L50c314.  v5[v6]:= v4 @kind object;
  #L50c318.  call temp:= `deepToString`(v5) @signature `Ljava/util/Arrays;.deepToString:([Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L50c31e.  v4:= temp @kind object;
  #L50c320.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L50c326.  v5:= temp;
  #L50c328.  v5:= v5 - v3 @kind int;
  #L50c32a.  call temp:= `append`(v1, v4, v3, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;` @kind virtual;
  #L50c330.  goto L50c338;
  #L50c332.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50c338.  v3:= ", " @kind object;
  #L50c33c.  v2:= v2.`h3.i$b$a.c` @type ^`h3.i$b$a` @kind object;
  #L50c340.  goto L50c2c6;
  #L50c342.  v0:= 125I;
  #L50c346.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L50c34c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L50c352.  v0:= temp @kind object;
  #L50c354.  return v0 @kind object;
}
