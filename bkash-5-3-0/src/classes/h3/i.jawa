record `h3.i` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `boolean` `a`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lh3/i;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L50c3c4.  if v0 == v1 then goto L50c3de;
  #L50c3c8.  if v0 == 0 then goto L50c3da;
  #L50c3cc.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L50c3d2.  v0:= temp;
  #L50c3d4.  if v0 == 0 then goto L50c3da;
  #L50c3d8.  goto L50c3de;
  #L50c3da.  v0:= 0I;
  #L50c3dc.  goto L50c3e0;
  #L50c3de.  v0:= 1I;
  #L50c3e0.  return v0;
}
procedure `int` `b`(`java.lang.Object`[] v0 @kind object) @signature `Lh3/i;.b:([Ljava/lang/Object;)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L50c424.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L50c42a.  v0:= temp;
  #L50c42c.  return v0;
}
procedure `h3.i$b` `c`(`java.lang.Object` v2 @kind object) @signature `Lh3/i;.c:(Ljava/lang/Object;)Lh3/i$b;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L50c3f4.  v0:= new `h3.i$b`;
  #L50c3f8.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L50c3fe.  v2:= temp @kind object;
  #L50c400.  call temp:= `getSimpleName`(v2) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L50c406.  v2:= temp @kind object;
  #L50c408.  v1:= 0I;
  #L50c40a.  call `<init>`(v0, v2, v1) @signature `Lh3/i$b;.<init>:(Ljava/lang/String;Lh3/i$a;)V` @kind direct;
  #L50c410.  return v0 @kind object;
}
