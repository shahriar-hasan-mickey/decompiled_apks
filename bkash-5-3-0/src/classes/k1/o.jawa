record `k1.o` @kind class @AccessFlag PUBLIC {
  `k1.o$a`[] `k1.o.a` @AccessFlag PRIVATE_FINAL;
  `int` `k1.o.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`k1.o` v3 @kind this, `int` v4 ) @signature `Lk1/o;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L523e40.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L523e46.  v0:= v4 + -1;
  #L523e4a.  v3.`k1.o.b` @type ^`int` := v0;
  #L523e4e.  v4:= new `k1.o$a`[v4];
  #L523e52.  v3.`k1.o.a` @type ^`k1.o$a`[] := v4 @kind object;
  #L523e56.  v4:= "$ref" @kind object;
  #L523e5a.  v0:= 0I;
  #L523e5c.  v1:= 4I;
  #L523e5e.  v2:= 1185263I;
  #L523e64.  call temp:= `b`(v3, v4, v0, v1, v2) @signature `Lk1/o;.b:(Ljava/lang/String;III)Ljava/lang/String;` @kind virtual;
  #L523e6a.  v4:= "@type" @kind object;
  #L523e6e.  v1:= 5I;
  #L523e70.  v2:= 62680954I;
  #L523e76.  call temp:= `b`(v3, v4, v0, v1, v2) @signature `Lk1/o;.b:(Ljava/lang/String;III)Ljava/lang/String;` @kind virtual;
  #L523e7c.  return @kind void;
}
procedure `java.lang.String` `a`(`java.lang.String` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lk1/o;.a:(Ljava/lang/String;II)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L523d8c.  v0:= new `char`[v4];
  #L523d90.  v4:= v4 + v3 @kind int;
  #L523d92.  v1:= 0I;
  #L523d94.  call `getChars`(v2, v3, v4, v0, v1) @signature `Ljava/lang/String;.getChars:(II[CI)V` @kind virtual;
  #L523d9a.  v2:= new `java.lang.String`;
  #L523d9e.  call `<init>`(v2, v0) @signature `Ljava/lang/String;.<init>:([C)V` @kind direct;
  #L523da4.  return v2 @kind object;
}
procedure `java.lang.String` `b`(`k1.o` v2 @kind this, `java.lang.String` v3 @kind object, `int` v4 , `int` v5 , `int` v6 ) @signature `Lk1/o;.b:(Ljava/lang/String;III)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L523db8.  v0:= v2.`k1.o.b` @type ^`int`;
  #L523dbc.  v0:= v0 ^& v6 @kind int;
  #L523dbe.  v1:= v2.`k1.o.a` @type ^`k1.o$a`[] @kind object;
  #L523dc2.  v1:= v1[v0] @kind object;
  #L523dc6.  if v1 == 0 then goto L523dfe;
  #L523dca.  v0:= v1.`k1.o$a.c` @type ^`int`;
  #L523dce.  if v6 != v0 then goto L523df4;
  #L523dd2.  v6:= v1.`k1.o$a.b` @type ^`char`[] @kind object;
  #L523dd6.  v6:= length @variable v6;
  #L523dd8.  if v5 != v6 then goto L523df4;
  #L523ddc.  v6:= v1.`k1.o$a.a` @type ^`java.lang.String` @kind object;
  #L523de0.  v0:= 0I;
  #L523de2.  call temp:= `regionMatches`(v3, v4, v6, v0, v5) @signature `Ljava/lang/String;.regionMatches:(ILjava/lang/String;II)Z` @kind virtual;
  #L523de8.  v6:= temp;
  #L523dea.  if v6 == 0 then goto L523df4;
  #L523dee.  v3:= v1.`k1.o$a.a` @type ^`java.lang.String` @kind object;
  #L523df2.  return v3 @kind object;
  #L523df4.  call temp:= `a`(v3, v4, v5) @signature `Lk1/o;.a:(Ljava/lang/String;II)Ljava/lang/String;` @kind static;
  #L523dfa.  v3:= temp @kind object;
  #L523dfc.  return v3 @kind object;
  #L523dfe.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L523e04.  v1:= temp;
  #L523e06.  if v5 != v1 then goto L523e0c;
  #L523e0a.  goto L523e14;
  #L523e0c.  call temp:= `a`(v3, v4, v5) @signature `Lk1/o;.a:(Ljava/lang/String;II)Ljava/lang/String;` @kind static;
  #L523e12.  v3:= temp @kind object;
  #L523e14.  call temp:= `intern`(v3) @signature `Ljava/lang/String;.intern:()Ljava/lang/String;` @kind virtual;
  #L523e1a.  v3:= temp @kind object;
  #L523e1c.  v4:= v2.`k1.o.a` @type ^`k1.o$a`[] @kind object;
  #L523e20.  v5:= new `k1.o$a`;
  #L523e24.  call `<init>`(v5, v3, v6) @signature `Lk1/o$a;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L523e2a.  v4[v0]:= v5 @kind object;
  #L523e2e.  return v3 @kind object;
}
procedure `java.lang.String` `c`(`k1.o` v4 @kind this, `char`[] v5 @kind object, `int` v6 , `int` v7 , `int` v8 ) @signature `Lk1/o;.c:([CIII)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L523cf4.  v0:= v4.`k1.o.b` @type ^`int`;
  #L523cf8.  v0:= v0 ^& v8 @kind int;
  #L523cfa.  v1:= v4.`k1.o.a` @type ^`k1.o$a`[] @kind object;
  #L523cfe.  v1:= v1[v0] @kind object;
  #L523d02.  if v1 == 0 then goto L523d56;
  #L523d06.  v0:= v1.`k1.o$a.c` @type ^`int`;
  #L523d0a.  v2:= 0I;
  #L523d0c.  if v8 != v0 then goto L523d40;
  #L523d10.  v8:= v1.`k1.o$a.b` @type ^`char`[] @kind object;
  #L523d14.  v8:= length @variable v8;
  #L523d16.  if v7 != v8 then goto L523d40;
  #L523d1a.  v8:= 0I;
  #L523d1c.  if v8 >= v7 then goto L523d3c;
  #L523d20.  v0:= v6 + v8 @kind int;
  #L523d24.  v0:= v5[v0] @kind char;
  #L523d28.  v3:= v1.`k1.o$a.b` @type ^`char`[] @kind object;
  #L523d2c.  v3:= v3[v8] @kind char;
  #L523d30.  if v0 == v3 then goto L523d36;
  #L523d34.  goto L523d40;
  #L523d36.  v8:= v8 + 1;
  #L523d3a.  goto L523d1c;
  #L523d3c.  v8:= 1I;
  #L523d3e.  v2:= 1I;
  #L523d40.  if v2 == 0 then goto L523d4a;
  #L523d44.  v5:= v1.`k1.o$a.a` @type ^`java.lang.String` @kind object;
  #L523d48.  return v5 @kind object;
  #L523d4a.  v8:= new `java.lang.String`;
  #L523d4e.  call `<init>`(v8, v5, v6, v7) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L523d54.  return v8 @kind object;
  #L523d56.  v1:= new `java.lang.String`;
  #L523d5a.  call `<init>`(v1, v5, v6, v7) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L523d60.  call temp:= `intern`(v1) @signature `Ljava/lang/String;.intern:()Ljava/lang/String;` @kind virtual;
  #L523d66.  v5:= temp @kind object;
  #L523d68.  v6:= new `k1.o$a`;
  #L523d6c.  call `<init>`(v6, v5, v8) @signature `Lk1/o$a;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L523d72.  v7:= v4.`k1.o.a` @type ^`k1.o$a`[] @kind object;
  #L523d76.  v7[v0]:= v6 @kind object;
  #L523d7a.  return v5 @kind object;
}
