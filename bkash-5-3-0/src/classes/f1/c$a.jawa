record `f1.c$a` @kind class @AccessFlag  extends `androidx.room.b` @kind class {
}
procedure `void` `<init>`(`f1.c$a` v0 @kind this, `f1.c` v1 @kind object, `androidx.room.h` v2 @kind object) @signature `Lf1/c$a;.<init>:(Lf1/c;Landroidx/room/h;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4fc160.  call `<init>`(v0, v2) @signature `Landroidx/room/b;.<init>:(Landroidx/room/h;)V` @kind direct;
  #L4fc166.  return @kind void;
}
procedure `java.lang.String` `d`(`f1.c$a` v1 @kind this) @signature `Lf1/c$a;.d:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fc148.  v0:= "INSERT OR IGNORE INTO `Dependency` (`work_spec_id`,`prerequisite_id`) VALUES (?,?)" @kind object;
  #L4fc14c.  return v0 @kind object;
}
procedure `void` `g`(`f1.c$a` v0 @kind this, `p0.f` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lf1/c$a;.g:(Lp0/f;Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4fc1bc.  v2:= (`f1.a`) v2 @kind object;
  #L4fc1c0.  call `i`(v0, v1, v2) @signature `Lf1/c$a;.i:(Lp0/f;Lf1/a;)V` @kind virtual;
  #L4fc1c6.  return @kind void;
}
procedure `void` `i`(`f1.c$a` v2 @kind this, `p0.f` v3 @kind object, `f1.a` v4 @kind object) @signature `Lf1/c$a;.i:(Lp0/f;Lf1/a;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4fc178.  v0:= v4.`f1.a.a` @type ^`java.lang.String` @kind object;
  #L4fc17c.  v1:= 1I;
  #L4fc17e.  if v0 != 0 then goto L4fc18a;
  #L4fc182.  call `m0`(v3, v1) @signature `Lp0/d;.m0:(I)V` @kind interface;
  #L4fc188.  goto L4fc190;
  #L4fc18a.  call `q`(v3, v1, v0) @signature `Lp0/d;.q:(ILjava/lang/String;)V` @kind interface;
  #L4fc190.  v4:= v4.`f1.a.b` @type ^`java.lang.String` @kind object;
  #L4fc194.  v0:= 2I;
  #L4fc196.  if v4 != 0 then goto L4fc1a2;
  #L4fc19a.  call `m0`(v3, v0) @signature `Lp0/d;.m0:(I)V` @kind interface;
  #L4fc1a0.  goto L4fc1a8;
  #L4fc1a2.  call `q`(v3, v0, v4) @signature `Lp0/d;.q:(ILjava/lang/String;)V` @kind interface;
  #L4fc1a8.  return @kind void;
}
