record `f1.g` @kind class @AccessFlag PUBLIC {
  `java.lang.String` `f1.g.a` @AccessFlag PUBLIC_FINAL;
  `int` `f1.g.b` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`f1.g` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 ) @signature `Lf1/g;.<init>:(Ljava/lang/String;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4fca8c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4fca92.  v0.`f1.g.a` @type ^`java.lang.String` := v1 @kind object;
  #L4fca96.  v0.`f1.g.b` @type ^`int` := v2;
  #L4fca9a.  return @kind void;
}
procedure `boolean` `equals`(`f1.g` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lf1/g;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4fca1c.  if v3 != v4 then goto L4fca24;
  #L4fca20.  v4:= 1I;
  #L4fca22.  return v4;
  #L4fca24.  v0:= instanceof @variable v4 @type ^`f1.g` @kind boolean;
  #L4fca28.  v1:= 0I;
  #L4fca2a.  if v0 != 0 then goto L4fca30;
  #L4fca2e.  return v1;
  #L4fca30.  v4:= (`f1.g`) v4 @kind object;
  #L4fca34.  v0:= v3.`f1.g.b` @type ^`int`;
  #L4fca38.  v2:= v4.`f1.g.b` @type ^`int`;
  #L4fca3c.  if v0 == v2 then goto L4fca42;
  #L4fca40.  return v1;
  #L4fca42.  v0:= v3.`f1.g.a` @type ^`java.lang.String` @kind object;
  #L4fca46.  v4:= v4.`f1.g.a` @type ^`java.lang.String` @kind object;
  #L4fca4a.  call temp:= `equals`(v0, v4) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4fca50.  v4:= temp;
  #L4fca52.  return v4;
}
procedure `int` `hashCode`(`f1.g` v2 @kind this) @signature `Lf1/g;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4fca64.  v0:= v2.`f1.g.a` @type ^`java.lang.String` @kind object;
  #L4fca68.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L4fca6e.  v0:= temp;
  #L4fca70.  v0:= v0 * 31;
  #L4fca74.  v1:= v2.`f1.g.b` @type ^`int`;
  #L4fca78.  v0:= v0 + v1 @kind int;
  #L4fca7a.  return v0;
}
