record `r3.b` @kind class @AccessFlag PUBLIC_ABSTRACT extends `r3.e` @kind interface {
}
procedure `void` `<init>`(`r3.b` v0 @kind this) @signature `Lr3/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L55fc38.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L55fc3e.  return @kind void;
}
procedure `void` `a`(`r3.b` v1 @kind this, `r3.c` v2 @kind object) @signature `Lr3/b;.a:(Lr3/c;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L55fc64.  call `e`(v1, v2) @signature `Lr3/b;.e:(Lr3/c;)V` @kind virtual;
  #L55fc6a.  call temp:= `close`(v2) @signature `Lr3/c;.close:()Z` @kind interface;
  #L55fc70.  return @kind void;
  #L55fc72.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L55fc74.  call temp:= `close`(v2) @signature `Lr3/c;.close:()Z` @kind interface;
  #L55fc7a.  throw v0;
  catch `java.lang.Throwable` @[L55fc64..L55fc6a] goto L55fc72;
}
procedure `void` `b`(`r3.b` v0 @kind this, `r3.c` v1 @kind object) @signature `Lr3/b;.b:(Lr3/c;)V` @AccessFlag PUBLIC {
    temp;

  #L55fc50.  return @kind void;
}
procedure `void` `c`(`r3.b` v2 @kind this, `r3.c` v3 @kind object) @signature `Lr3/b;.c:(Lr3/c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L55fc98.  call temp:= `b`(v3) @signature `Lr3/c;.b:()Z` @kind interface;
  #L55fc9e.  v0:= temp;
  #L55fca0.  call `f`(v2, v3) @signature `Lr3/b;.f:(Lr3/c;)V` @kind virtual;
  #L55fca6.  if v0 == 0 then goto L55fcb0;
  #L55fcaa.  call temp:= `close`(v3) @signature `Lr3/c;.close:()Z` @kind interface;
  #L55fcb0.  return @kind void;
  #L55fcb2.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L55fcb4.  if v0 == 0 then goto L55fcbe;
  #L55fcb8.  call temp:= `close`(v3) @signature `Lr3/c;.close:()Z` @kind interface;
  #L55fcbe.  throw v1;
  catch `java.lang.Throwable` @[L55fca0..L55fca6] goto L55fcb2;
}
procedure `void` `e`(`r3.c` v0 @kind object) @signature `Lr3/b;.e:(Lr3/c;)V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `f`(`r3.c` v0 @kind object) @signature `Lr3/b;.f:(Lr3/c;)V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
