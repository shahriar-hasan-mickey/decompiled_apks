record `r3.g$a` @kind class @AccessFlag  extends `r3.a` @kind class {
  `java.util.ArrayList` `r3.g$a.i` @AccessFlag PRIVATE;
  `int` `r3.g$a.j` @AccessFlag PRIVATE;
  `int` `r3.g$a.k` @AccessFlag PRIVATE;
  `java.util.concurrent.atomic.AtomicInteger` `r3.g$a.l` @AccessFlag PRIVATE;
  `java.lang.Throwable` `r3.g$a.m` @AccessFlag PRIVATE;
  `java.util.Map` `r3.g$a.n` @AccessFlag PRIVATE;
  `r3.g` `r3.g$a.o` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`r3.g$a` v0 @kind this, `r3.g` v1 @kind object) @signature `Lr3/g$a;.<init>:(Lr3/g;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L5606d0.  v0.`r3.g$a.o` @type ^`r3.g` := v1 @kind object;
  #L5606d4.  call `<init>`(v0) @signature `Lr3/a;.<init>:()V` @kind direct;
  #L5606da.  call temp:= `a`(v1) @signature `Lr3/g;.a:(Lr3/g;)Z` @kind static;
  #L5606e0.  v1:= temp;
  #L5606e2.  if v1 != 0 then goto L5606ec;
  #L5606e6.  call `z`(v0) @signature `Lr3/g$a;.z:()V` @kind direct;
  #L5606ec.  return @kind void;
}
procedure `r3.c` `A`(`r3.g$a` v2 @kind this, `int` v3 ) @signature `Lr3/g$a;.A:(I)Lr3/c;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L5605a0.  @monitorenter v2
  #L5605a2.  v0:= v2.`r3.g$a.i` @type ^`java.util.ArrayList` @kind object;
  #L5605a6.  v1:= 0I;
  #L5605a8.  if v0 == 0 then goto L5605ca;
  #L5605ac.  call temp:= `size`(v0) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L5605b2.  v0:= temp;
  #L5605b4.  if v3 >= v0 then goto L5605ca;
  #L5605b8.  v0:= v2.`r3.g$a.i` @type ^`java.util.ArrayList` @kind object;
  #L5605bc.  call temp:= `set`(v0, v3, v1) @signature `Ljava/util/ArrayList;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L5605c2.  v3:= temp @kind object;
  #L5605c4.  v1:= v3 @kind object;
  #L5605c6.  v1:= (`r3.c`) v1 @kind object;
  #L5605ca.  @monitorexit v2
  #L5605cc.  return v1 @kind object;
  #L5605ce.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L5605d0.  @monitorexit v2
  #L5605d2.  throw v3;
  catch `java.lang.Throwable` @[L5605a2..L5605ca] goto L5605ce;
}
procedure `r3.c` `B`(`r3.g$a` v1 @kind this, `int` v2 ) @signature `Lr3/g$a;.B:(I)Lr3/c;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L5605f0.  @monitorenter v1
  #L5605f2.  v0:= v1.`r3.g$a.i` @type ^`java.util.ArrayList` @kind object;
  #L5605f6.  if v0 == 0 then goto L560618;
  #L5605fa.  call temp:= `size`(v0) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L560600.  v0:= temp;
  #L560602.  if v2 >= v0 then goto L560618;
  #L560606.  v0:= v1.`r3.g$a.i` @type ^`java.util.ArrayList` @kind object;
  #L56060a.  call temp:= `get`(v0, v2) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L560610.  v2:= temp @kind object;
  #L560612.  v2:= (`r3.c`) v2 @kind object;
  #L560616.  goto L56061a;
  #L560618.  v2:= 0I;
  #L56061a.  @monitorexit v1
  #L56061c.  return v2 @kind object;
  #L56061e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L560620.  @monitorexit v1
  #L560622.  throw v2;
  catch `java.lang.Throwable` @[L5605f2..L560616] goto L56061e;
}
procedure `r3.c` `C`(`r3.g$a` v1 @kind this) @signature `Lr3/g$a;.C:()Lr3/c;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L560640.  @monitorenter v1
  #L560642.  v0:= v1.`r3.g$a.j` @type ^`int`;
  #L560646.  call temp:= `B`(v1, v0) @signature `Lr3/g$a;.B:(I)Lr3/c;` @kind direct;
  #L56064c.  v0:= temp @kind object;
  #L56064e.  @monitorexit v1
  #L560650.  return v0 @kind object;
  #L560652.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L560654.  @monitorexit v1
  #L560656.  throw v0;
  catch `java.lang.Throwable` @[L560642..L56064e] goto L560652;
}
procedure `void` `D`(`r3.g$a` v2 @kind this) @signature `Lr3/g$a;.D:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L560820.  v0:= v2.`r3.g$a.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L560824.  call temp:= `incrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.incrementAndGet:()I` @kind virtual;
  #L56082a.  v0:= temp;
  #L56082c.  v1:= v2.`r3.g$a.k` @type ^`int`;
  #L560830.  if v0 != v1 then goto L560846;
  #L560834.  v0:= v2.`r3.g$a.m` @type ^`java.lang.Throwable` @kind object;
  #L560838.  if v0 == 0 then goto L560846;
  #L56083c.  v1:= v2.`r3.g$a.n` @type ^`java.util.Map` @kind object;
  #L560840.  call temp:= `p`(v2, v0, v1) @signature `Lr3/a;.p:(Ljava/lang/Throwable;Ljava/util/Map;)Z` @kind virtual;
  #L560846.  return @kind void;
}
procedure `void` `E`(`r3.g$a` v2 @kind this, `int` v3 , `r3.c` v4 @kind object, `boolean` v5 ) @signature `Lr3/g$a;.E:(ILr3/c;Z)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L560858.  @monitorenter v2
  #L56085a.  v0:= v2.`r3.g$a.j` @type ^`int`;
  #L56085e.  call temp:= `B`(v2, v3) @signature `Lr3/g$a;.B:(I)Lr3/c;` @kind direct;
  #L560864.  v1:= temp @kind object;
  #L560866.  if v4 != v1 then goto L5608b2;
  #L56086a.  v4:= v2.`r3.g$a.j` @type ^`int`;
  #L56086e.  if v3 != v4 then goto L560874;
  #L560872.  goto L5608b2;
  #L560874.  call temp:= `C`(v2) @signature `Lr3/g$a;.C:()Lr3/c;` @kind direct;
  #L56087a.  v4:= temp @kind object;
  #L56087c.  if v4 == 0 then goto L560892;
  #L560880.  if v5 == 0 then goto L56088e;
  #L560884.  v4:= v2.`r3.g$a.j` @type ^`int`;
  #L560888.  if v3 >= v4 then goto L56088e;
  #L56088c.  goto L560892;
  #L56088e.  v3:= v0;
  #L560890.  goto L560896;
  #L560892.  v2.`r3.g$a.j` @type ^`int` := v3;
  #L560896.  @monitorexit v2
  #L560898.  if v0 <= v3 then goto L5608b0;
  #L56089c.  call temp:= `A`(v2, v0) @signature `Lr3/g$a;.A:(I)Lr3/c;` @kind direct;
  #L5608a2.  v4:= temp @kind object;
  #L5608a4.  call `y`(v2, v4) @signature `Lr3/g$a;.y:(Lr3/c;)V` @kind direct;
  #L5608aa.  v0:= v0 + -1;
  #L5608ae.  goto L560898;
  #L5608b0.  return @kind void;
  #L5608b2.  @monitorexit v2
  #L5608b4.  return @kind void;
  #L5608b6.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L5608b8.  @monitorexit v2
  #L5608ba.  throw v3;
  catch `java.lang.Throwable` @[L56085a..L560898] goto L5608b6;
  catch `java.lang.Throwable` @[L5608b2..L5608ba] goto L5608b6;
}
procedure `void` `F`(`r3.g$a` v1 @kind this, `int` v2 , `r3.c` v3 @kind object) @signature `Lr3/g$a;.F:(ILr3/c;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L5608e0.  call temp:= `H`(v1, v2, v3) @signature `Lr3/g$a;.H:(ILr3/c;)Lr3/c;` @kind direct;
  #L5608e6.  v0:= temp @kind object;
  #L5608e8.  call `y`(v1, v0) @signature `Lr3/g$a;.y:(Lr3/c;)V` @kind direct;
  #L5608ee.  if v2 != 0 then goto L56090a;
  #L5608f2.  call temp:= `c`(v3) @signature `Lr3/c;.c:()Ljava/lang/Throwable;` @kind interface;
  #L5608f8.  v2:= temp @kind object;
  #L5608fa.  v1.`r3.g$a.m` @type ^`java.lang.Throwable` := v2 @kind object;
  #L5608fe.  call temp:= `getExtras`(v3) @signature `Lr3/c;.getExtras:()Ljava/util/Map;` @kind interface;
  #L560904.  v2:= temp @kind object;
  #L560906.  v1.`r3.g$a.n` @type ^`java.util.Map` := v2 @kind object;
  #L56090a.  call `D`(v1) @signature `Lr3/g$a;.D:()V` @kind direct;
  #L560910.  return @kind void;
}
procedure `void` `G`(`r3.g$a` v1 @kind this, `int` v2 , `r3.c` v3 @kind object) @signature `Lr3/g$a;.G:(ILr3/c;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L560924.  call temp:= `b`(v3) @signature `Lr3/c;.b:()Z` @kind interface;
  #L56092a.  v0:= temp;
  #L56092c.  call `E`(v1, v2, v3, v0) @signature `Lr3/g$a;.E:(ILr3/c;Z)V` @kind direct;
  #L560932.  call temp:= `C`(v1) @signature `Lr3/g$a;.C:()Lr3/c;` @kind direct;
  #L560938.  v0:= temp @kind object;
  #L56093a.  if v3 != v0 then goto L560964;
  #L56093e.  v0:= 0I;
  #L560940.  if v2 != 0 then goto L560954;
  #L560944.  call temp:= `b`(v3) @signature `Lr3/c;.b:()Z` @kind interface;
  #L56094a.  v2:= temp;
  #L56094c.  if v2 == 0 then goto L560954;
  #L560950.  v2:= 1I;
  #L560952.  goto L560956;
  #L560954.  v2:= 0I;
  #L560956.  call temp:= `getExtras`(v3) @signature `Lr3/c;.getExtras:()Ljava/util/Map;` @kind interface;
  #L56095c.  v3:= temp @kind object;
  #L56095e.  call temp:= `t`(v1, v0, v2, v3) @signature `Lr3/a;.t:(Ljava/lang/Object;ZLjava/util/Map;)Z` @kind virtual;
  #L560964.  call `D`(v1) @signature `Lr3/g$a;.D:()V` @kind direct;
  #L56096a.  return @kind void;
}
procedure `r3.c` `H`(`r3.g$a` v1 @kind this, `int` v2 , `r3.c` v3 @kind object) @signature `Lr3/g$a;.H:(ILr3/c;)Lr3/c;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L560674.  @monitorenter v1
  #L560676.  call temp:= `C`(v1) @signature `Lr3/g$a;.C:()Lr3/c;` @kind direct;
  #L56067c.  v0:= temp @kind object;
  #L56067e.  if v3 != v0 then goto L560688;
  #L560682.  v2:= 0I;
  #L560684.  @monitorexit v1
  #L560686.  return v2 @kind object;
  #L560688.  call temp:= `B`(v1, v2) @signature `Lr3/g$a;.B:(I)Lr3/c;` @kind direct;
  #L56068e.  v0:= temp @kind object;
  #L560690.  if v3 != v0 then goto L5606a0;
  #L560694.  call temp:= `A`(v1, v2) @signature `Lr3/g$a;.A:(I)Lr3/c;` @kind direct;
  #L56069a.  v2:= temp @kind object;
  #L56069c.  @monitorexit v1
  #L56069e.  return v2 @kind object;
  #L5606a0.  @monitorexit v1
  #L5606a2.  return v3 @kind object;
  #L5606a4.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L5606a6.  @monitorexit v1
  #L5606a8.  throw v2;
  catch `java.lang.Throwable` @[L560676..L56067e] goto L5606a4;
  catch `java.lang.Throwable` @[L560688..L56069c] goto L5606a4;
}
procedure `void` `w`(`r3.g$a` v0 @kind object, `int` v1 , `r3.c` v2 @kind object) @signature `Lr3/g$a;.w:(Lr3/g$a;ILr3/c;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L560700.  call `G`(v0, v1, v2) @signature `Lr3/g$a;.G:(ILr3/c;)V` @kind direct;
  #L560706.  return @kind void;
}
procedure `void` `x`(`r3.g$a` v0 @kind object, `int` v1 , `r3.c` v2 @kind object) @signature `Lr3/g$a;.x:(Lr3/g$a;ILr3/c;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L560718.  call `F`(v0, v1, v2) @signature `Lr3/g$a;.F:(ILr3/c;)V` @kind direct;
  #L56071e.  return @kind void;
}
procedure `void` `y`(`r3.g$a` v0 @kind this, `r3.c` v1 @kind object) @signature `Lr3/g$a;.y:(Lr3/c;)V` @AccessFlag PRIVATE {
    temp;

  #L560730.  if v1 == 0 then goto L56073a;
  #L560734.  call temp:= `close`(v1) @signature `Lr3/c;.close:()Z` @kind interface;
  #L56073a.  return @kind void;
}
procedure `void` `z`(`r3.g$a` v5 @kind this) @signature `Lr3/g$a;.z:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L56074c.  v0:= v5.`r3.g$a.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L560750.  if v0 == 0 then goto L560756;
  #L560754.  return @kind void;
  #L560756.  @monitorenter v5
  #L560758.  v0:= v5.`r3.g$a.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L56075c.  if v0 != 0 then goto L5607f8;
  #L560760.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L560764.  v1:= 0I;
  #L560766.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L56076c.  v5.`r3.g$a.l` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L560770.  v0:= v5.`r3.g$a.o` @type ^`r3.g` @kind object;
  #L560774.  call temp:= `b`(v0) @signature `Lr3/g;.b:(Lr3/g;)Ljava/util/List;` @kind static;
  #L56077a.  v0:= temp @kind object;
  #L56077c.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L560782.  v0:= temp;
  #L560784.  v5.`r3.g$a.k` @type ^`int` := v0;
  #L560788.  v5.`r3.g$a.j` @type ^`int` := v0;
  #L56078c.  v2:= new `java.util.ArrayList`;
  #L560790.  call `<init>`(v2, v0) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L560796.  v5.`r3.g$a.i` @type ^`java.util.ArrayList` := v2 @kind object;
  #L56079a.  if v1 >= v0 then goto L5607f8;
  #L56079e.  v2:= v5.`r3.g$a.o` @type ^`r3.g` @kind object;
  #L5607a2.  call temp:= `b`(v2) @signature `Lr3/g;.b:(Lr3/g;)Ljava/util/List;` @kind static;
  #L5607a8.  v2:= temp @kind object;
  #L5607aa.  call temp:= `get`(v2, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L5607b0.  v2:= temp @kind object;
  #L5607b2.  v2:= (`h3.l`) v2 @kind object;
  #L5607b6.  call temp:= `get`(v2) @signature `Lh3/l;.get:()Ljava/lang/Object;` @kind interface;
  #L5607bc.  v2:= temp @kind object;
  #L5607be.  v2:= (`r3.c`) v2 @kind object;
  #L5607c2.  v3:= v5.`r3.g$a.i` @type ^`java.util.ArrayList` @kind object;
  #L5607c6.  call temp:= `add`(v3, v2) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L5607cc.  v3:= new `r3.g$a$a`;
  #L5607d0.  call `<init>`(v3, v5, v1) @signature `Lr3/g$a$a;.<init>:(Lr3/g$a;I)V` @kind direct;
  #L5607d6.  call temp:= `a`() @signature `Lf3/a;.a:()Lf3/a;` @kind static;
  #L5607dc.  v4:= temp @kind object;
  #L5607de.  call `d`(v2, v3, v4) @signature `Lr3/c;.d:(Lr3/e;Ljava/util/concurrent/Executor;)V` @kind interface;
  #L5607e4.  call temp:= `a`(v2) @signature `Lr3/c;.a:()Z` @kind interface;
  #L5607ea.  v2:= temp;
  #L5607ec.  if v2 == 0 then goto L5607f2;
  #L5607f0.  goto L5607f8;
  #L5607f2.  v1:= v1 + 1;
  #L5607f6.  goto L56079a;
  #L5607f8.  @monitorexit v5
  #L5607fa.  return @kind void;
  #L5607fc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L5607fe.  @monitorexit v5
  #L560800.  throw v0;
  catch `java.lang.Throwable` @[L560758..L560800] goto L5607fc;
}
procedure `boolean` `a`(`r3.g$a` v1 @kind this) @signature `Lr3/g$a;.a:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5604ec.  @monitorenter v1
  #L5604ee.  v0:= v1.`r3.g$a.o` @type ^`r3.g` @kind object;
  #L5604f2.  call temp:= `a`(v0) @signature `Lr3/g;.a:(Lr3/g;)Z` @kind static;
  #L5604f8.  v0:= temp;
  #L5604fa.  if v0 == 0 then goto L560504;
  #L5604fe.  call `z`(v1) @signature `Lr3/g$a;.z:()V` @kind direct;
  #L560504.  call temp:= `C`(v1) @signature `Lr3/g$a;.C:()Lr3/c;` @kind direct;
  #L56050a.  v0:= temp @kind object;
  #L56050c.  if v0 == 0 then goto L560520;
  #L560510.  call temp:= `a`(v0) @signature `Lr3/c;.a:()Z` @kind interface;
  #L560516.  v0:= temp;
  #L560518.  if v0 == 0 then goto L560520;
  #L56051c.  v0:= 1I;
  #L56051e.  goto L560522;
  #L560520.  v0:= 0I;
  #L560522.  @monitorexit v1
  #L560524.  return v0;
  #L560526.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L560528.  @monitorexit v1
  #L56052a.  throw v0;
  catch `java.lang.Throwable` @[L5604ee..L560518] goto L560526;
}
procedure `boolean` `close`(`r3.g$a` v3 @kind this) @signature `Lr3/g$a;.close:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L560460.  v0:= v3.`r3.g$a.o` @type ^`r3.g` @kind object;
  #L560464.  call temp:= `a`(v0) @signature `Lr3/g;.a:(Lr3/g;)Z` @kind static;
  #L56046a.  v0:= temp;
  #L56046c.  if v0 == 0 then goto L560476;
  #L560470.  call `z`(v3) @signature `Lr3/g$a;.z:()V` @kind direct;
  #L560476.  @monitorenter v3
  #L560478.  call temp:= `close`(v3) @signature `Lr3/a;.close:()Z` @kind super;
  #L56047e.  v0:= temp;
  #L560480.  v1:= 0I;
  #L560482.  if v0 != 0 then goto L56048a;
  #L560486.  @monitorexit v3
  #L560488.  return v1;
  #L56048a.  v0:= v3.`r3.g$a.i` @type ^`java.util.ArrayList` @kind object;
  #L56048e.  v2:= 0I;
  #L560490.  v3.`r3.g$a.i` @type ^`java.util.ArrayList` := v2 @kind object;
  #L560494.  @monitorexit v3
  #L560496.  if v0 == 0 then goto L5604be;
  #L56049a.  call temp:= `size`(v0) @signature `Ljava/util/ArrayList;.size:()I` @kind virtual;
  #L5604a0.  v2:= temp;
  #L5604a2.  if v1 >= v2 then goto L5604be;
  #L5604a6.  call temp:= `get`(v0, v1) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L5604ac.  v2:= temp @kind object;
  #L5604ae.  v2:= (`r3.c`) v2 @kind object;
  #L5604b2.  call `y`(v3, v2) @signature `Lr3/g$a;.y:(Lr3/c;)V` @kind direct;
  #L5604b8.  v1:= v1 + 1;
  #L5604bc.  goto L56049a;
  #L5604be.  v0:= 1I;
  #L5604c0.  return v0;
  #L5604c2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L5604c4.  @monitorexit v3
  #L5604c6.  throw v0;
  catch `java.lang.Throwable` @[L560478..L560496] goto L5604c2;
  catch `java.lang.Throwable` @[L5604c4..L5604c6] goto L5604c2;
}
procedure `java.lang.Object` `f`(`r3.g$a` v1 @kind this) @signature `Lr3/g$a;.f:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L560548.  @monitorenter v1
  #L56054a.  v0:= v1.`r3.g$a.o` @type ^`r3.g` @kind object;
  #L56054e.  call temp:= `a`(v0) @signature `Lr3/g;.a:(Lr3/g;)Z` @kind static;
  #L560554.  v0:= temp;
  #L560556.  if v0 == 0 then goto L560560;
  #L56055a.  call `z`(v1) @signature `Lr3/g$a;.z:()V` @kind direct;
  #L560560.  call temp:= `C`(v1) @signature `Lr3/g$a;.C:()Lr3/c;` @kind direct;
  #L560566.  v0:= temp @kind object;
  #L560568.  if v0 == 0 then goto L560576;
  #L56056c.  call temp:= `f`(v0) @signature `Lr3/c;.f:()Ljava/lang/Object;` @kind interface;
  #L560572.  v0:= temp @kind object;
  #L560574.  goto L560578;
  #L560576.  v0:= 0I;
  #L560578.  @monitorexit v1
  #L56057a.  return v0 @kind object;
  #L56057c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L56057e.  @monitorexit v1
  #L560580.  throw v0;
  catch `java.lang.Throwable` @[L56054a..L560574] goto L56057c;
}
