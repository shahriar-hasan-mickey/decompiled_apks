record `r3.a` @kind class @AccessFlag PUBLIC_ABSTRACT extends `r3.c` @kind interface {
  `java.util.Map` `r3.a.a` @AccessFlag PRIVATE;
  `r3.a$d` `r3.a.b` @AccessFlag PRIVATE;
  `boolean` `r3.a.c` @AccessFlag PRIVATE;
  `java.lang.Object` `r3.a.d` @AccessFlag PRIVATE;
  `java.lang.Throwable` `r3.a.e` @AccessFlag PRIVATE;
  `float` `r3.a.f` @AccessFlag PRIVATE;
  `java.util.concurrent.ConcurrentLinkedQueue` `r3.a.g` @AccessFlag PRIVATE_FINAL;
}
global `r3.a$c` `@@r3.a.h` @AccessFlag PRIVATE_STATIC_VOLATILE;
procedure `void` `<init>`(`r3.a` v1 @kind this) @signature `Lr3/a;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;

  #L55fa28.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L55fa2e.  v0:= 0I;
  #L55fa30.  v1.`r3.a.d` @type ^`java.lang.Object` := v0 @kind object;
  #L55fa34.  v1.`r3.a.e` @type ^`java.lang.Throwable` := v0 @kind object;
  #L55fa38.  v0:= 0I;
  #L55fa3a.  v1.`r3.a.f` @type ^`float` := v0;
  #L55fa3e.  v0:= 0I;
  #L55fa40.  v1.`r3.a.c` @type ^`boolean` := v0 @kind boolean;
  #L55fa44.  v0:= `@@r3.a$d.IN_PROGRESS` @type ^`r3.a$d` @kind object;
  #L55fa48.  v1.`r3.a.b` @type ^`r3.a$d` := v0 @kind object;
  #L55fa4c.  v0:= new `java.util.concurrent.ConcurrentLinkedQueue`;
  #L55fa50.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.<init>:()V` @kind direct;
  #L55fa56.  v1.`r3.a.g` @type ^`java.util.concurrent.ConcurrentLinkedQueue` := v0 @kind object;
  #L55fa5a.  return @kind void;
}
procedure `r3.a$c` `h`() @signature `Lr3/a;.h:()Lr3/a$c;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L55fa10.  v0:= `@@r3.a.h` @type ^`r3.a$c` @kind object;
  #L55fa14.  return v0 @kind object;
}
procedure `void` `l`(`r3.a` v5 @kind this) @signature `Lr3/a;.l:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L55fabc.  call temp:= `i`(v5) @signature `Lr3/a;.i:()Z` @kind virtual;
  #L55fac2.  v0:= temp;
  #L55fac4.  call temp:= `v`(v5) @signature `Lr3/a;.v:()Z` @kind direct;
  #L55faca.  v1:= temp;
  #L55facc.  v2:= v5.`r3.a.g` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L55fad0.  call temp:= `iterator`(v2) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L55fad6.  v2:= temp @kind object;
  #L55fad8.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L55fade.  v3:= temp;
  #L55fae0.  if v3 == 0 then goto L55fb08;
  #L55fae4.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L55faea.  v3:= temp @kind object;
  #L55faec.  v3:= (`android.util.Pair`) v3 @kind object;
  #L55faf0.  v4:= v3.`android.util.Pair.first` @type ^`java.lang.Object` @kind object;
  #L55faf4.  v4:= (`r3.e`) v4 @kind object;
  #L55faf8.  v3:= v3.`android.util.Pair.second` @type ^`java.lang.Object` @kind object;
  #L55fafc.  v3:= (`java.util.concurrent.Executor`) v3 @kind object;
  #L55fb00.  call `k`(v5, v4, v3, v0, v1) @signature `Lr3/a;.k:(Lr3/e;Ljava/util/concurrent/Executor;ZZ)V` @kind virtual;
  #L55fb06.  goto L55fad8;
  #L55fb08.  return @kind void;
}
procedure `boolean` `q`(`r3.a` v2 @kind this, `java.lang.Throwable` v3 @kind object, `java.util.Map` v4 @kind object) @signature `Lr3/a;.q:(Ljava/lang/Throwable;Ljava/util/Map;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L55f748.  @monitorenter v2
  #L55f74a.  v0:= v2.`r3.a.c` @type ^`boolean` @kind boolean;
  #L55f74e.  if v0 != 0 then goto L55f776;
  #L55f752.  v0:= v2.`r3.a.b` @type ^`r3.a$d` @kind object;
  #L55f756.  v1:= `@@r3.a$d.IN_PROGRESS` @type ^`r3.a$d` @kind object;
  #L55f75a.  if v0 == v1 then goto L55f760;
  #L55f75e.  goto L55f776;
  #L55f760.  v0:= `@@r3.a$d.FAILURE` @type ^`r3.a$d` @kind object;
  #L55f764.  v2.`r3.a.b` @type ^`r3.a$d` := v0 @kind object;
  #L55f768.  v2.`r3.a.e` @type ^`java.lang.Throwable` := v3 @kind object;
  #L55f76c.  v2.`r3.a.a` @type ^`java.util.Map` := v4 @kind object;
  #L55f770.  v3:= 1I;
  #L55f772.  @monitorexit v2
  #L55f774.  return v3;
  #L55f776.  v3:= 0I;
  #L55f778.  @monitorexit v2
  #L55f77a.  return v3;
  #L55f77c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L55f77e.  @monitorexit v2
  #L55f780.  throw v3;
  catch `java.lang.Throwable` @[L55f74a..L55f770] goto L55f77c;
}
procedure `boolean` `s`(`r3.a` v3 @kind this, `float` v4 ) @signature `Lr3/a;.s:(F)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L55f7c4.  @monitorenter v3
  #L55f7c6.  v0:= v3.`r3.a.c` @type ^`boolean` @kind boolean;
  #L55f7ca.  v1:= 0I;
  #L55f7cc.  if v0 != 0 then goto L55f7f8;
  #L55f7d0.  v0:= v3.`r3.a.b` @type ^`r3.a$d` @kind object;
  #L55f7d4.  v2:= `@@r3.a$d.IN_PROGRESS` @type ^`r3.a$d` @kind object;
  #L55f7d8.  if v0 == v2 then goto L55f7de;
  #L55f7dc.  goto L55f7f8;
  #L55f7de.  v0:= v3.`r3.a.f` @type ^`float`;
  #L55f7e2.  v0:= fcmpg(v4, v0);
  #L55f7e6.  if v0 >= 0 then goto L55f7ee;
  #L55f7ea.  @monitorexit v3
  #L55f7ec.  return v1;
  #L55f7ee.  v3.`r3.a.f` @type ^`float` := v4;
  #L55f7f2.  v4:= 1I;
  #L55f7f4.  @monitorexit v3
  #L55f7f6.  return v4;
  #L55f7f8.  @monitorexit v3
  #L55f7fa.  return v1;
  #L55f7fc.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L55f7fe.  @monitorexit v3
  #L55f800.  throw v4;
  catch `java.lang.Throwable` @[L55f7c6..L55f7e2] goto L55f7fc;
  catch `java.lang.Throwable` @[L55f7ee..L55f7f2] goto L55f7fc;
}
procedure `boolean` `u`(`r3.a` v3 @kind this, `java.lang.Object` v4 @kind object, `boolean` v5 ) @signature `Lr3/a;.u:(Ljava/lang/Object;Z)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L55f854.  v0:= 0I;
  #L55f856.  @monitorenter v3
  #L55f858.  v1:= v3.`r3.a.c` @type ^`boolean` @kind boolean;
  #L55f85c.  if v1 != 0 then goto L55f8aa;
  #L55f860.  v1:= v3.`r3.a.b` @type ^`r3.a$d` @kind object;
  #L55f864.  v2:= `@@r3.a$d.IN_PROGRESS` @type ^`r3.a$d` @kind object;
  #L55f868.  if v1 == v2 then goto L55f86e;
  #L55f86c.  goto L55f8aa;
  #L55f86e.  if v5 == 0 then goto L55f882;
  #L55f872.  v5:= `@@r3.a$d.SUCCESS` @type ^`r3.a$d` @kind object;
  #L55f876.  v3.`r3.a.b` @type ^`r3.a$d` := v5 @kind object;
  #L55f87a.  v5:= 1.0F;
  #L55f87e.  v3.`r3.a.f` @type ^`float` := v5;
  #L55f882.  v5:= v3.`r3.a.d` @type ^`java.lang.Object` @kind object;
  #L55f886.  if v5 == v4 then goto L55f898;
  #L55f88a.  v3.`r3.a.d` @type ^`java.lang.Object` := v4 @kind object;
  #L55f88e.  v4:= v5 @kind object;
  #L55f890.  goto L55f89a;
  #L55f892.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L55f894.  v0:= v5 @kind object;
  #L55f896.  goto L55f8c4;
  #L55f898.  v4:= v0 @kind object;
  #L55f89a.  v5:= 1I;
  #L55f89c.  @monitorexit v3
  #L55f89e.  if v4 == 0 then goto L55f8a8;
  #L55f8a2.  call `g`(v3, v4) @signature `Lr3/a;.g:(Ljava/lang/Object;)V` @kind virtual;
  #L55f8a8.  return v5;
  #L55f8aa.  v5:= 0I;
  #L55f8ac.  @monitorexit v3
  #L55f8ae.  if v4 == 0 then goto L55f8b8;
  #L55f8b2.  call `g`(v3, v4) @signature `Lr3/a;.g:(Ljava/lang/Object;)V` @kind virtual;
  #L55f8b8.  return v5;
  #L55f8ba.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L55f8bc.  v0:= v4 @kind object;
  #L55f8be.  v4:= v5 @kind object;
  #L55f8c0.  goto L55f8c4;
  #L55f8c2.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L55f8c4.  @monitorexit v3
  #L55f8c6.  throw v4;
  #L55f8c8.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L55f8ca.  if v0 == 0 then goto L55f8d4;
  #L55f8ce.  call `g`(v3, v0) @signature `Lr3/a;.g:(Ljava/lang/Object;)V` @kind virtual;
  #L55f8d4.  throw v4;
  catch `java.lang.Throwable` @[L55f856..L55f858] goto L55f8c8;
  catch `java.lang.Throwable` @[L55f858..L55f886] goto L55f8c2;
  catch `java.lang.Throwable` @[L55f88a..L55f88e] goto L55f892;
  catch `java.lang.Throwable` @[L55f89c..L55f89e] goto L55f8ba;
  catch `java.lang.Throwable` @[L55f8ac..L55f8ae] goto L55f8ba;
  catch `java.lang.Throwable` @[L55f8c4..L55f8c6] goto L55f8c2;
  catch `java.lang.Throwable` @[L55f8c6..L55f8c8] goto L55f8c8;
}
procedure `boolean` `v`(`r3.a` v1 @kind this) @signature `Lr3/a;.v:()Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L55f92c.  @monitorenter v1
  #L55f92e.  call temp:= `j`(v1) @signature `Lr3/a;.j:()Z` @kind virtual;
  #L55f934.  v0:= temp;
  #L55f936.  if v0 == 0 then goto L55f94a;
  #L55f93a.  call temp:= `b`(v1) @signature `Lr3/a;.b:()Z` @kind virtual;
  #L55f940.  v0:= temp;
  #L55f942.  if v0 != 0 then goto L55f94a;
  #L55f946.  v0:= 1I;
  #L55f948.  goto L55f94c;
  #L55f94a.  v0:= 0I;
  #L55f94c.  @monitorexit v1
  #L55f94e.  return v0;
  #L55f950.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L55f952.  @monitorexit v1
  #L55f954.  throw v0;
  catch `java.lang.Throwable` @[L55f92e..L55f942] goto L55f950;
}
procedure `boolean` `a`(`r3.a` v1 @kind this) @signature `Lr3/a;.a:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L55f668.  @monitorenter v1
  #L55f66a.  v0:= v1.`r3.a.d` @type ^`java.lang.Object` @kind object;
  #L55f66e.  if v0 == 0 then goto L55f676;
  #L55f672.  v0:= 1I;
  #L55f674.  goto L55f678;
  #L55f676.  v0:= 0I;
  #L55f678.  @monitorexit v1
  #L55f67a.  return v0;
  #L55f67c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L55f67e.  @monitorexit v1
  #L55f680.  throw v0;
  catch `java.lang.Throwable` @[L55f66a..L55f66e] goto L55f67c;
}
procedure `boolean` `b`(`r3.a` v2 @kind this) @signature `Lr3/a;.b:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L55f6cc.  @monitorenter v2
  #L55f6ce.  v0:= v2.`r3.a.b` @type ^`r3.a$d` @kind object;
  #L55f6d2.  v1:= `@@r3.a$d.IN_PROGRESS` @type ^`r3.a$d` @kind object;
  #L55f6d6.  if v0 == v1 then goto L55f6de;
  #L55f6da.  v0:= 1I;
  #L55f6dc.  goto L55f6e0;
  #L55f6de.  v0:= 0I;
  #L55f6e0.  @monitorexit v2
  #L55f6e2.  return v0;
  #L55f6e4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L55f6e6.  @monitorexit v2
  #L55f6e8.  throw v0;
  catch `java.lang.Throwable` @[L55f6ce..L55f6d6] goto L55f6e4;
}
procedure `java.lang.Throwable` `c`(`r3.a` v1 @kind this) @signature `Lr3/a;.c:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L55f9cc.  @monitorenter v1
  #L55f9ce.  v0:= v1.`r3.a.e` @type ^`java.lang.Throwable` @kind object;
  #L55f9d2.  @monitorexit v1
  #L55f9d4.  return v0 @kind object;
  #L55f9d6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L55f9d8.  @monitorexit v1
  #L55f9da.  throw v0;
  catch `java.lang.Throwable` @[L55f9ce..L55f9d2] goto L55f9d6;
}
procedure `boolean` `close`(`r3.a` v3 @kind this) @signature `Lr3/a;.close:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L55f58c.  @monitorenter v3
  #L55f58e.  v0:= v3.`r3.a.c` @type ^`boolean` @kind boolean;
  #L55f592.  if v0 == 0 then goto L55f59c;
  #L55f596.  v0:= 0I;
  #L55f598.  @monitorexit v3
  #L55f59a.  return v0;
  #L55f59c.  v0:= 1I;
  #L55f59e.  v3.`r3.a.c` @type ^`boolean` := v0 @kind boolean;
  #L55f5a2.  v1:= v3.`r3.a.d` @type ^`java.lang.Object` @kind object;
  #L55f5a6.  v2:= 0I;
  #L55f5a8.  v3.`r3.a.d` @type ^`java.lang.Object` := v2 @kind object;
  #L55f5ac.  @monitorexit v3
  #L55f5ae.  if v1 == 0 then goto L55f5b8;
  #L55f5b2.  call `g`(v3, v1) @signature `Lr3/a;.g:(Ljava/lang/Object;)V` @kind virtual;
  #L55f5b8.  call temp:= `b`(v3) @signature `Lr3/a;.b:()Z` @kind virtual;
  #L55f5be.  v1:= temp;
  #L55f5c0.  if v1 != 0 then goto L55f5ca;
  #L55f5c4.  call `l`(v3) @signature `Lr3/a;.l:()V` @kind direct;
  #L55f5ca.  @monitorenter v3
  #L55f5cc.  v1:= v3.`r3.a.g` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L55f5d0.  call `clear`(v1) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.clear:()V` @kind virtual;
  #L55f5d6.  @monitorexit v3
  #L55f5d8.  return v0;
  #L55f5da.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L55f5dc.  @monitorexit v3
  #L55f5de.  throw v0;
  #L55f5e0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L55f5e2.  @monitorexit v3
  #L55f5e4.  throw v0;
  catch `java.lang.Throwable` @[L55f58e..L55f5ae] goto L55f5e0;
  catch `java.lang.Throwable` @[L55f5cc..L55f5de] goto L55f5da;
  catch `java.lang.Throwable` @[L55f5e2..L55f5e4] goto L55f5e0;
}
procedure `void` `d`(`r3.a` v2 @kind this, `r3.e` v3 @kind object, `java.util.concurrent.Executor` v4 @kind object) @signature `Lr3/a;.d:(Lr3/e;Ljava/util/concurrent/Executor;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L55fb8c.  call temp:= `g`(v3) @signature `Lh3/j;.g:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L55fb92.  call temp:= `g`(v4) @signature `Lh3/j;.g:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L55fb98.  @monitorenter v2
  #L55fb9a.  v0:= v2.`r3.a.c` @type ^`boolean` @kind boolean;
  #L55fb9e.  if v0 == 0 then goto L55fba6;
  #L55fba2.  @monitorexit v2
  #L55fba4.  return @kind void;
  #L55fba6.  v0:= v2.`r3.a.b` @type ^`r3.a$d` @kind object;
  #L55fbaa.  v1:= `@@r3.a$d.IN_PROGRESS` @type ^`r3.a$d` @kind object;
  #L55fbae.  if v0 != v1 then goto L55fbc4;
  #L55fbb2.  v0:= v2.`r3.a.g` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L55fbb6.  call temp:= `create`(v3, v4) @signature `Landroid/util/Pair;.create:(Ljava/lang/Object;Ljava/lang/Object;)Landroid/util/Pair;` @kind static;
  #L55fbbc.  v1:= temp @kind object;
  #L55fbbe.  call temp:= `add`(v0, v1) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L55fbc4.  call temp:= `a`(v2) @signature `Lr3/a;.a:()Z` @kind virtual;
  #L55fbca.  v0:= temp;
  #L55fbcc.  if v0 != 0 then goto L55fbee;
  #L55fbd0.  call temp:= `b`(v2) @signature `Lr3/a;.b:()Z` @kind virtual;
  #L55fbd6.  v0:= temp;
  #L55fbd8.  if v0 != 0 then goto L55fbee;
  #L55fbdc.  call temp:= `v`(v2) @signature `Lr3/a;.v:()Z` @kind direct;
  #L55fbe2.  v0:= temp;
  #L55fbe4.  if v0 == 0 then goto L55fbea;
  #L55fbe8.  goto L55fbee;
  #L55fbea.  v0:= 0I;
  #L55fbec.  goto L55fbf0;
  #L55fbee.  v0:= 1I;
  #L55fbf0.  @monitorexit v2
  #L55fbf2.  if v0 == 0 then goto L55fc0c;
  #L55fbf6.  call temp:= `i`(v2) @signature `Lr3/a;.i:()Z` @kind virtual;
  #L55fbfc.  v0:= temp;
  #L55fbfe.  call temp:= `v`(v2) @signature `Lr3/a;.v:()Z` @kind direct;
  #L55fc04.  v1:= temp;
  #L55fc06.  call `k`(v2, v3, v4, v0, v1) @signature `Lr3/a;.k:(Lr3/e;Ljava/util/concurrent/Executor;ZZ)V` @kind virtual;
  #L55fc0c.  return @kind void;
  #L55fc0e.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L55fc10.  @monitorexit v2
  #L55fc12.  throw v3;
  catch `java.lang.Throwable` @[L55fb9a..L55fbf2] goto L55fc0e;
  catch `java.lang.Throwable` @[L55fc10..L55fc12] goto L55fc0e;
}
procedure `boolean` `e`(`r3.a` v1 @kind this) @signature `Lr3/a;.e:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L55f654.  v0:= 0I;
  #L55f656.  return v0;
}
procedure `java.lang.Object` `f`(`r3.a` v1 @kind this) @signature `Lr3/a;.f:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L55f9a0.  @monitorenter v1
  #L55f9a2.  v0:= v1.`r3.a.d` @type ^`java.lang.Object` @kind object;
  #L55f9a6.  @monitorexit v1
  #L55f9a8.  return v0 @kind object;
  #L55f9aa.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L55f9ac.  @monitorexit v1
  #L55f9ae.  throw v0;
  catch `java.lang.Throwable` @[L55f9a2..L55f9a6] goto L55f9aa;
}
procedure `void` `g`(`r3.a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lr3/a;.g:(Ljava/lang/Object;)V` @AccessFlag PROTECTED {
    temp;

  #L55fa6c.  return @kind void;
}
procedure `java.util.Map` `getExtras`(`r3.a` v1 @kind this) @signature `Lr3/a;.getExtras:()Ljava/util/Map;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L55f9f8.  v0:= v1.`r3.a.a` @type ^`java.util.Map` @kind object;
  #L55f9fc.  return v0 @kind object;
}
procedure `float` `getProgress`(`r3.a` v1 @kind this) @signature `Lr3/a;.getProgress:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L55f974.  @monitorenter v1
  #L55f976.  v0:= v1.`r3.a.f` @type ^`float`;
  #L55f97a.  @monitorexit v1
  #L55f97c.  return v0;
  #L55f97e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L55f980.  @monitorexit v1
  #L55f982.  throw v0;
  catch `java.lang.Throwable` @[L55f976..L55f97a] goto L55f97e;
}
procedure `boolean` `i`(`r3.a` v2 @kind this) @signature `Lr3/a;.i:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L55f618.  @monitorenter v2
  #L55f61a.  v0:= v2.`r3.a.b` @type ^`r3.a$d` @kind object;
  #L55f61e.  v1:= `@@r3.a$d.FAILURE` @type ^`r3.a$d` @kind object;
  #L55f622.  if v0 != v1 then goto L55f62a;
  #L55f626.  v0:= 1I;
  #L55f628.  goto L55f62c;
  #L55f62a.  v0:= 0I;
  #L55f62c.  @monitorexit v2
  #L55f62e.  return v0;
  #L55f630.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L55f632.  @monitorexit v2
  #L55f634.  throw v0;
  catch `java.lang.Throwable` @[L55f61a..L55f622] goto L55f630;
}
procedure `boolean` `j`(`r3.a` v1 @kind this) @signature `Lr3/a;.j:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L55f6a0.  @monitorenter v1
  #L55f6a2.  v0:= v1.`r3.a.c` @type ^`boolean` @kind boolean;
  #L55f6a6.  @monitorexit v1
  #L55f6a8.  return v0;
  #L55f6aa.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L55f6ac.  @monitorexit v1
  #L55f6ae.  throw v0;
  catch `java.lang.Throwable` @[L55f6a2..L55f6a6] goto L55f6aa;
}
procedure `void` `k`(`r3.a` v1 @kind this, `r3.e` v2 @kind object, `java.util.concurrent.Executor` v3 @kind object, `boolean` v4 , `boolean` v5 ) @signature `Lr3/a;.k:(Lr3/e;Ljava/util/concurrent/Executor;ZZ)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L55fa80.  v0:= new `r3.a$a`;
  #L55fa84.  call `<init>`(v0, v1, v4, v2, v5) @signature `Lr3/a$a;.<init>:(Lr3/a;ZLr3/e;Z)V` @kind direct;
  #L55fa8a.  call temp:= `h`() @signature `Lr3/a;.h:()Lr3/a$c;` @kind static;
  #L55fa90.  v2:= temp @kind object;
  #L55fa92.  if v2 == 0 then goto L55faa2;
  #L55fa96.  v4:= "AbstractDataSource_notifyDataSubscriber" @kind object;
  #L55fa9a.  call temp:= `a`(v2, v0, v4) @signature `Lr3/a$c;.a:(Ljava/lang/Runnable;Ljava/lang/String;)Ljava/lang/Runnable;` @kind interface;
  #L55faa0.  v0:= temp @kind object;
  #L55faa2.  call `execute`(v3, v0) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L55faa8.  return @kind void;
}
procedure `void` `m`(`r3.a` v4 @kind this) @signature `Lr3/a;.m:()V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L55fb1c.  v0:= v4.`r3.a.g` @type ^`java.util.concurrent.ConcurrentLinkedQueue` @kind object;
  #L55fb20.  call temp:= `iterator`(v0) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L55fb26.  v0:= temp @kind object;
  #L55fb28.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L55fb2e.  v1:= temp;
  #L55fb30.  if v1 == 0 then goto L55fb62;
  #L55fb34.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L55fb3a.  v1:= temp @kind object;
  #L55fb3c.  v1:= (`android.util.Pair`) v1 @kind object;
  #L55fb40.  v2:= v1.`android.util.Pair.first` @type ^`java.lang.Object` @kind object;
  #L55fb44.  v2:= (`r3.e`) v2 @kind object;
  #L55fb48.  v1:= v1.`android.util.Pair.second` @type ^`java.lang.Object` @kind object;
  #L55fb4c.  v1:= (`java.util.concurrent.Executor`) v1 @kind object;
  #L55fb50.  v3:= new `r3.a$b`;
  #L55fb54.  call `<init>`(v3, v4, v2) @signature `Lr3/a$b;.<init>:(Lr3/a;Lr3/e;)V` @kind direct;
  #L55fb5a.  call `execute`(v1, v3) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L55fb60.  goto L55fb28;
  #L55fb62.  return @kind void;
}
procedure `void` `n`(`r3.a` v0 @kind this, `java.util.Map` v1 @kind object) @signature `Lr3/a;.n:(Ljava/util/Map;)V` @AccessFlag PROTECTED {
    temp;

  #L55fb74.  v0.`r3.a.a` @type ^`java.util.Map` := v1 @kind object;
  #L55fb78.  return @kind void;
}
procedure `boolean` `o`(`r3.a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lr3/a;.o:(Ljava/lang/Throwable;)Z` @AccessFlag PROTECTED {
    temp;
    v0;

  #L55f708.  v0:= 0I;
  #L55f70a.  call temp:= `p`(v1, v2, v0) @signature `Lr3/a;.p:(Ljava/lang/Throwable;Ljava/util/Map;)Z` @kind virtual;
  #L55f710.  v2:= temp;
  #L55f712.  return v2;
}
procedure `boolean` `p`(`r3.a` v0 @kind this, `java.lang.Throwable` v1 @kind object, `java.util.Map` v2 @kind object) @signature `Lr3/a;.p:(Ljava/lang/Throwable;Ljava/util/Map;)Z` @AccessFlag PROTECTED {
    temp;

  #L55f724.  call temp:= `q`(v0, v1, v2) @signature `Lr3/a;.q:(Ljava/lang/Throwable;Ljava/util/Map;)Z` @kind direct;
  #L55f72a.  v1:= temp;
  #L55f72c.  if v1 == 0 then goto L55f736;
  #L55f730.  call `l`(v0) @signature `Lr3/a;.l:()V` @kind direct;
  #L55f736.  return v1;
}
procedure `boolean` `r`(`r3.a` v0 @kind this, `float` v1 ) @signature `Lr3/a;.r:(F)Z` @AccessFlag PROTECTED {
    temp;

  #L55f7a0.  call temp:= `s`(v0, v1) @signature `Lr3/a;.s:(F)Z` @kind direct;
  #L55f7a6.  v1:= temp;
  #L55f7a8.  if v1 == 0 then goto L55f7b2;
  #L55f7ac.  call `m`(v0) @signature `Lr3/a;.m:()V` @kind virtual;
  #L55f7b2.  return v1;
}
procedure `boolean` `t`(`r3.a` v0 @kind this, `java.lang.Object` v1 @kind object, `boolean` v2 , `java.util.Map` v3 @kind object) @signature `Lr3/a;.t:(Ljava/lang/Object;ZLjava/util/Map;)Z` @AccessFlag PROTECTED {
    temp;

  #L55f828.  call `n`(v0, v3) @signature `Lr3/a;.n:(Ljava/util/Map;)V` @kind virtual;
  #L55f82e.  call temp:= `u`(v0, v1, v2) @signature `Lr3/a;.u:(Ljava/lang/Object;Z)Z` @kind direct;
  #L55f834.  v1:= temp;
  #L55f836.  if v1 == 0 then goto L55f840;
  #L55f83a.  call `l`(v0) @signature `Lr3/a;.l:()V` @kind direct;
  #L55f840.  return v1;
}
