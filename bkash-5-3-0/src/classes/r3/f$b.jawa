record `r3.f$b` @kind class @AccessFlag  extends `r3.a` @kind class {
  `int` `r3.f$b.i` @AccessFlag PRIVATE;
  `r3.c` `r3.f$b.j` @AccessFlag PRIVATE;
  `r3.c` `r3.f$b.k` @AccessFlag PRIVATE;
  `r3.f` `r3.f$b.l` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`r3.f$b` v1 @kind this, `r3.f` v2 @kind object) @signature `Lr3/f$b;.<init>:(Lr3/f;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L5600d8.  v1.`r3.f$b.l` @type ^`r3.f` := v2 @kind object;
  #L5600dc.  call `<init>`(v1) @signature `Lr3/a;.<init>:()V` @kind direct;
  #L5600e2.  v2:= 0I;
  #L5600e4.  v1.`r3.f$b.i` @type ^`int` := v2;
  #L5600e8.  v2:= 0I;
  #L5600ea.  v1.`r3.f$b.j` @type ^`r3.c` := v2 @kind object;
  #L5600ee.  v1.`r3.f$b.k` @type ^`r3.c` := v2 @kind object;
  #L5600f2.  call temp:= `G`(v1) @signature `Lr3/f$b;.G:()Z` @kind direct;
  #L5600f8.  v2:= temp;
  #L5600fa.  if v2 != 0 then goto L560112;
  #L5600fe.  v2:= new `java.lang.RuntimeException`;
  #L560102.  v0:= "No data source supplier or supplier returned null." @kind object;
  #L560106.  call `<init>`(v2, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L56010c.  call temp:= `o`(v1, v2) @signature `Lr3/a;.o:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L560112.  return @kind void;
}
procedure `r3.c` `A`(`r3.f$b` v1 @kind this) @signature `Lr3/f$b;.A:()Lr3/c;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L5600ac.  @monitorenter v1
  #L5600ae.  v0:= v1.`r3.f$b.k` @type ^`r3.c` @kind object;
  #L5600b2.  @monitorexit v1
  #L5600b4.  return v0 @kind object;
  #L5600b6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L5600b8.  @monitorexit v1
  #L5600ba.  throw v0;
  catch `java.lang.Throwable` @[L5600ae..L5600b2] goto L5600b6;
}
procedure `h3.l` `B`(`r3.f$b` v3 @kind this) @signature `Lr3/f$b;.B:()Lh3/l;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L55fff0.  @monitorenter v3
  #L55fff2.  call temp:= `j`(v3) @signature `Lr3/a;.j:()Z` @kind virtual;
  #L55fff8.  v0:= temp;
  #L55fffa.  if v0 != 0 then goto L560042;
  #L55fffe.  v0:= v3.`r3.f$b.i` @type ^`int`;
  #L560002.  v1:= v3.`r3.f$b.l` @type ^`r3.f` @kind object;
  #L560006.  call temp:= `a`(v1) @signature `Lr3/f;.a:(Lr3/f;)Ljava/util/List;` @kind static;
  #L56000c.  v1:= temp @kind object;
  #L56000e.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L560014.  v1:= temp;
  #L560016.  if v0 >= v1 then goto L560042;
  #L56001a.  v0:= v3.`r3.f$b.l` @type ^`r3.f` @kind object;
  #L56001e.  call temp:= `a`(v0) @signature `Lr3/f;.a:(Lr3/f;)Ljava/util/List;` @kind static;
  #L560024.  v0:= temp @kind object;
  #L560026.  v1:= v3.`r3.f$b.i` @type ^`int`;
  #L56002a.  v2:= v1 + 1;
  #L56002e.  v3.`r3.f$b.i` @type ^`int` := v2;
  #L560032.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L560038.  v0:= temp @kind object;
  #L56003a.  v0:= (`h3.l`) v0 @kind object;
  #L56003e.  @monitorexit v3
  #L560040.  return v0 @kind object;
  #L560042.  v0:= 0I;
  #L560044.  @monitorexit v3
  #L560046.  return v0 @kind object;
  #L560048.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L56004a.  @monitorexit v3
  #L56004c.  throw v0;
  catch `java.lang.Throwable` @[L55fff2..L56003e] goto L560048;
}
procedure `void` `C`(`r3.f$b` v1 @kind this, `r3.c` v2 @kind object, `boolean` v3 ) @signature `Lr3/f$b;.C:(Lr3/c;Z)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L560170.  @monitorenter v1
  #L560172.  v0:= v1.`r3.f$b.j` @type ^`r3.c` @kind object;
  #L560176.  if v2 != v0 then goto L5601a0;
  #L56017a.  v0:= v1.`r3.f$b.k` @type ^`r3.c` @kind object;
  #L56017e.  if v2 != v0 then goto L560184;
  #L560182.  goto L5601a0;
  #L560184.  if v0 == 0 then goto L560192;
  #L560188.  if v3 == 0 then goto L56018e;
  #L56018c.  goto L560192;
  #L56018e.  v0:= 0I;
  #L560190.  goto L560196;
  #L560192.  v1.`r3.f$b.k` @type ^`r3.c` := v2 @kind object;
  #L560196.  @monitorexit v1
  #L560198.  call `z`(v1, v0) @signature `Lr3/f$b;.z:(Lr3/c;)V` @kind direct;
  #L56019e.  return @kind void;
  #L5601a0.  @monitorexit v1
  #L5601a2.  return @kind void;
  #L5601a4.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L5601a6.  @monitorexit v1
  #L5601a8.  throw v2;
  catch `java.lang.Throwable` @[L560172..L560198] goto L5601a4;
  catch `java.lang.Throwable` @[L5601a0..L5601a8] goto L5601a4;
}
procedure `void` `D`(`r3.f$b` v1 @kind this, `r3.c` v2 @kind object) @signature `Lr3/f$b;.D:(Lr3/c;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L5601d0.  call temp:= `y`(v1, v2) @signature `Lr3/f$b;.y:(Lr3/c;)Z` @kind direct;
  #L5601d6.  v0:= temp;
  #L5601d8.  if v0 != 0 then goto L5601de;
  #L5601dc.  return @kind void;
  #L5601de.  call temp:= `A`(v1) @signature `Lr3/f$b;.A:()Lr3/c;` @kind direct;
  #L5601e4.  v0:= temp @kind object;
  #L5601e6.  if v2 == v0 then goto L5601f0;
  #L5601ea.  call `z`(v1, v2) @signature `Lr3/f$b;.z:(Lr3/c;)V` @kind direct;
  #L5601f0.  call temp:= `G`(v1) @signature `Lr3/f$b;.G:()Z` @kind direct;
  #L5601f6.  v0:= temp;
  #L5601f8.  if v0 != 0 then goto L560212;
  #L5601fc.  call temp:= `c`(v2) @signature `Lr3/c;.c:()Ljava/lang/Throwable;` @kind interface;
  #L560202.  v0:= temp @kind object;
  #L560204.  call temp:= `getExtras`(v2) @signature `Lr3/c;.getExtras:()Ljava/util/Map;` @kind interface;
  #L56020a.  v2:= temp @kind object;
  #L56020c.  call temp:= `p`(v1, v0, v2) @signature `Lr3/a;.p:(Ljava/lang/Throwable;Ljava/util/Map;)Z` @kind virtual;
  #L560212.  return @kind void;
}
procedure `void` `E`(`r3.f$b` v2 @kind this, `r3.c` v3 @kind object) @signature `Lr3/f$b;.E:(Lr3/c;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L560224.  call temp:= `b`(v3) @signature `Lr3/c;.b:()Z` @kind interface;
  #L56022a.  v0:= temp;
  #L56022c.  call `C`(v2, v3, v0) @signature `Lr3/f$b;.C:(Lr3/c;Z)V` @kind direct;
  #L560232.  call temp:= `A`(v2) @signature `Lr3/f$b;.A:()Lr3/c;` @kind direct;
  #L560238.  v0:= temp @kind object;
  #L56023a.  if v3 != v0 then goto L560256;
  #L56023e.  v0:= 0I;
  #L560240.  call temp:= `b`(v3) @signature `Lr3/c;.b:()Z` @kind interface;
  #L560246.  v1:= temp;
  #L560248.  call temp:= `getExtras`(v3) @signature `Lr3/c;.getExtras:()Ljava/util/Map;` @kind interface;
  #L56024e.  v3:= temp @kind object;
  #L560250.  call temp:= `t`(v2, v0, v1, v3) @signature `Lr3/a;.t:(Ljava/lang/Object;ZLjava/util/Map;)Z` @kind virtual;
  #L560256.  return @kind void;
}
procedure `boolean` `F`(`r3.f$b` v1 @kind this, `r3.c` v2 @kind object) @signature `Lr3/f$b;.F:(Lr3/c;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L55ff44.  @monitorenter v1
  #L55ff46.  call temp:= `j`(v1) @signature `Lr3/a;.j:()Z` @kind virtual;
  #L55ff4c.  v0:= temp;
  #L55ff4e.  if v0 == 0 then goto L55ff58;
  #L55ff52.  v2:= 0I;
  #L55ff54.  @monitorexit v1
  #L55ff56.  return v2;
  #L55ff58.  v1.`r3.f$b.j` @type ^`r3.c` := v2 @kind object;
  #L55ff5c.  v2:= 1I;
  #L55ff5e.  @monitorexit v1
  #L55ff60.  return v2;
  #L55ff62.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L55ff64.  @monitorexit v1
  #L55ff66.  throw v2;
  catch `java.lang.Throwable` @[L55ff46..L55ff4e] goto L55ff62;
  catch `java.lang.Throwable` @[L55ff58..L55ff5c] goto L55ff62;
}
procedure `boolean` `G`(`r3.f$b` v3 @kind this) @signature `Lr3/f$b;.G:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L55ff8c.  call temp:= `B`(v3) @signature `Lr3/f$b;.B:()Lh3/l;` @kind direct;
  #L55ff92.  v0:= temp @kind object;
  #L55ff94.  v1:= 0I;
  #L55ff96.  if v0 == 0 then goto L55ffa8;
  #L55ff9a.  call temp:= `get`(v0) @signature `Lh3/l;.get:()Ljava/lang/Object;` @kind interface;
  #L55ffa0.  v0:= temp @kind object;
  #L55ffa2.  v0:= (`r3.c`) v0 @kind object;
  #L55ffa6.  goto L55ffaa;
  #L55ffa8.  v0:= v1 @kind object;
  #L55ffaa.  call temp:= `F`(v3, v0) @signature `Lr3/f$b;.F:(Lr3/c;)Z` @kind direct;
  #L55ffb0.  v2:= temp;
  #L55ffb2.  if v2 == 0 then goto L55ffd6;
  #L55ffb6.  if v0 == 0 then goto L55ffd6;
  #L55ffba.  v2:= new `r3.f$b$a`;
  #L55ffbe.  call `<init>`(v2, v3, v1) @signature `Lr3/f$b$a;.<init>:(Lr3/f$b;Lr3/f$a;)V` @kind direct;
  #L55ffc4.  call temp:= `a`() @signature `Lf3/a;.a:()Lf3/a;` @kind static;
  #L55ffca.  v1:= temp @kind object;
  #L55ffcc.  call `d`(v0, v2, v1) @signature `Lr3/c;.d:(Lr3/e;Ljava/util/concurrent/Executor;)V` @kind interface;
  #L55ffd2.  v0:= 1I;
  #L55ffd4.  return v0;
  #L55ffd6.  call `z`(v3, v0) @signature `Lr3/f$b;.z:(Lr3/c;)V` @kind direct;
  #L55ffdc.  v0:= 0I;
  #L55ffde.  return v0;
}
procedure `void` `w`(`r3.f$b` v0 @kind object, `r3.c` v1 @kind object) @signature `Lr3/f$b;.w:(Lr3/f$b;Lr3/c;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L560124.  call `D`(v0, v1) @signature `Lr3/f$b;.D:(Lr3/c;)V` @kind direct;
  #L56012a.  return @kind void;
}
procedure `void` `x`(`r3.f$b` v0 @kind object, `r3.c` v1 @kind object) @signature `Lr3/f$b;.x:(Lr3/f$b;Lr3/c;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L56013c.  call `E`(v0, v1) @signature `Lr3/f$b;.E:(Lr3/c;)V` @kind direct;
  #L560142.  return @kind void;
}
procedure `boolean` `y`(`r3.f$b` v1 @kind this, `r3.c` v2 @kind object) @signature `Lr3/f$b;.y:(Lr3/c;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L55fe4c.  @monitorenter v1
  #L55fe4e.  call temp:= `j`(v1) @signature `Lr3/a;.j:()Z` @kind virtual;
  #L55fe54.  v0:= temp;
  #L55fe56.  if v0 != 0 then goto L55fe70;
  #L55fe5a.  v0:= v1.`r3.f$b.j` @type ^`r3.c` @kind object;
  #L55fe5e.  if v2 == v0 then goto L55fe64;
  #L55fe62.  goto L55fe70;
  #L55fe64.  v2:= 0I;
  #L55fe66.  v1.`r3.f$b.j` @type ^`r3.c` := v2 @kind object;
  #L55fe6a.  v2:= 1I;
  #L55fe6c.  @monitorexit v1
  #L55fe6e.  return v2;
  #L55fe70.  v2:= 0I;
  #L55fe72.  @monitorexit v1
  #L55fe74.  return v2;
  #L55fe76.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L55fe78.  @monitorexit v1
  #L55fe7a.  throw v2;
  catch `java.lang.Throwable` @[L55fe4e..L55fe6a] goto L55fe76;
}
procedure `void` `z`(`r3.f$b` v0 @kind this, `r3.c` v1 @kind object) @signature `Lr3/f$b;.z:(Lr3/c;)V` @AccessFlag PRIVATE {
    temp;

  #L560154.  if v1 == 0 then goto L56015e;
  #L560158.  call temp:= `close`(v1) @signature `Lr3/c;.close:()Z` @kind interface;
  #L56015e.  return @kind void;
}
procedure `boolean` `a`(`r3.f$b` v1 @kind this) @signature `Lr3/f$b;.a:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L55fefc.  @monitorenter v1
  #L55fefe.  call temp:= `A`(v1) @signature `Lr3/f$b;.A:()Lr3/c;` @kind direct;
  #L55ff04.  v0:= temp @kind object;
  #L55ff06.  if v0 == 0 then goto L55ff1a;
  #L55ff0a.  call temp:= `a`(v0) @signature `Lr3/c;.a:()Z` @kind interface;
  #L55ff10.  v0:= temp;
  #L55ff12.  if v0 == 0 then goto L55ff1a;
  #L55ff16.  v0:= 1I;
  #L55ff18.  goto L55ff1c;
  #L55ff1a.  v0:= 0I;
  #L55ff1c.  @monitorexit v1
  #L55ff1e.  return v0;
  #L55ff20.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L55ff22.  @monitorexit v1
  #L55ff24.  throw v0;
  catch `java.lang.Throwable` @[L55fefe..L55ff12] goto L55ff20;
}
procedure `boolean` `close`(`r3.f$b` v3 @kind this) @signature `Lr3/f$b;.close:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L55fe98.  @monitorenter v3
  #L55fe9a.  call temp:= `close`(v3) @signature `Lr3/a;.close:()Z` @kind super;
  #L55fea0.  v0:= temp;
  #L55fea2.  if v0 != 0 then goto L55feac;
  #L55fea6.  v0:= 0I;
  #L55fea8.  @monitorexit v3
  #L55feaa.  return v0;
  #L55feac.  v0:= v3.`r3.f$b.j` @type ^`r3.c` @kind object;
  #L55feb0.  v1:= 0I;
  #L55feb2.  v3.`r3.f$b.j` @type ^`r3.c` := v1 @kind object;
  #L55feb6.  v2:= v3.`r3.f$b.k` @type ^`r3.c` @kind object;
  #L55feba.  v3.`r3.f$b.k` @type ^`r3.c` := v1 @kind object;
  #L55febe.  @monitorexit v3
  #L55fec0.  call `z`(v3, v2) @signature `Lr3/f$b;.z:(Lr3/c;)V` @kind direct;
  #L55fec6.  call `z`(v3, v0) @signature `Lr3/f$b;.z:(Lr3/c;)V` @kind direct;
  #L55fecc.  v0:= 1I;
  #L55fece.  return v0;
  #L55fed0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L55fed2.  @monitorexit v3
  #L55fed4.  throw v0;
  catch `java.lang.Throwable` @[L55fe9a..L55fec0] goto L55fed0;
  catch `java.lang.Throwable` @[L55fed2..L55fed4] goto L55fed0;
}
procedure `java.lang.Object` `f`(`r3.f$b` v1 @kind this) @signature `Lr3/f$b;.f:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L56006c.  @monitorenter v1
  #L56006e.  call temp:= `A`(v1) @signature `Lr3/f$b;.A:()Lr3/c;` @kind direct;
  #L560074.  v0:= temp @kind object;
  #L560076.  if v0 == 0 then goto L560084;
  #L56007a.  call temp:= `f`(v0) @signature `Lr3/c;.f:()Ljava/lang/Object;` @kind interface;
  #L560080.  v0:= temp @kind object;
  #L560082.  goto L560086;
  #L560084.  v0:= 0I;
  #L560086.  @monitorexit v1
  #L560088.  return v0 @kind object;
  #L56008a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L56008c.  @monitorexit v1
  #L56008e.  throw v0;
  catch `java.lang.Throwable` @[L56006e..L560082] goto L56008a;
}
