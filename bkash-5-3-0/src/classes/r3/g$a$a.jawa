record `r3.g$a$a` @kind class @AccessFlag  extends `r3.e` @kind interface {
  `int` `r3.g$a$a.a` @AccessFlag PRIVATE;
  `r3.g$a` `r3.g$a$a.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`r3.g$a$a` v0 @kind this, `r3.g$a` v1 @kind object, `int` v2 ) @signature `Lr3/g$a$a;.<init>:(Lr3/g$a;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L560398.  v0.`r3.g$a$a.b` @type ^`r3.g$a` := v1 @kind object;
  #L56039c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L5603a2.  v0.`r3.g$a$a.a` @type ^`int` := v2;
  #L5603a6.  return @kind void;
}
procedure `void` `a`(`r3.g$a$a` v2 @kind this, `r3.c` v3 @kind object) @signature `Lr3/g$a$a;.a:(Lr3/c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5603cc.  v0:= v2.`r3.g$a$a.b` @type ^`r3.g$a` @kind object;
  #L5603d0.  v1:= v2.`r3.g$a$a.a` @type ^`int`;
  #L5603d4.  call `x`(v0, v1, v3) @signature `Lr3/g$a;.x:(Lr3/g$a;ILr3/c;)V` @kind static;
  #L5603da.  return @kind void;
}
procedure `void` `b`(`r3.g$a$a` v0 @kind this, `r3.c` v1 @kind object) @signature `Lr3/g$a$a;.b:(Lr3/c;)V` @AccessFlag PUBLIC {
    temp;

  #L5603b8.  return @kind void;
}
procedure `void` `c`(`r3.g$a$a` v2 @kind this, `r3.c` v3 @kind object) @signature `Lr3/g$a$a;.c:(Lr3/c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5603ec.  call temp:= `a`(v3) @signature `Lr3/c;.a:()Z` @kind interface;
  #L5603f2.  v0:= temp;
  #L5603f4.  if v0 == 0 then goto L560408;
  #L5603f8.  v0:= v2.`r3.g$a$a.b` @type ^`r3.g$a` @kind object;
  #L5603fc.  v1:= v2.`r3.g$a$a.a` @type ^`int`;
  #L560400.  call `w`(v0, v1, v3) @signature `Lr3/g$a;.w:(Lr3/g$a;ILr3/c;)V` @kind static;
  #L560406.  goto L560422;
  #L560408.  call temp:= `b`(v3) @signature `Lr3/c;.b:()Z` @kind interface;
  #L56040e.  v0:= temp;
  #L560410.  if v0 == 0 then goto L560422;
  #L560414.  v0:= v2.`r3.g$a$a.b` @type ^`r3.g$a` @kind object;
  #L560418.  v1:= v2.`r3.g$a$a.a` @type ^`int`;
  #L56041c.  call `x`(v0, v1, v3) @signature `Lr3/g$a;.x:(Lr3/g$a;ILr3/c;)V` @kind static;
  #L560422.  return @kind void;
}
procedure `void` `d`(`r3.g$a$a` v1 @kind this, `r3.c` v2 @kind object) @signature `Lr3/g$a$a;.d:(Lr3/c;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L560434.  v0:= v1.`r3.g$a$a.a` @type ^`int`;
  #L560438.  if v0 != 0 then goto L56044e;
  #L56043c.  v0:= v1.`r3.g$a$a.b` @type ^`r3.g$a` @kind object;
  #L560440.  call temp:= `getProgress`(v2) @signature `Lr3/c;.getProgress:()F` @kind interface;
  #L560446.  v2:= temp;
  #L560448.  call temp:= `r`(v0, v2) @signature `Lr3/a;.r:(F)Z` @kind virtual;
  #L56044e.  return @kind void;
}
