record `n1.c` @kind class @AccessFlag PUBLIC extends `java.lang.reflect.ParameterizedType` @kind interface {
  `java.lang.reflect.Type`[] `n1.c.g` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type` `n1.c.h` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type` `n1.c.i` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`n1.c` v0 @kind this, `java.lang.reflect.Type`[] v1 @kind object, `java.lang.reflect.Type` v2 @kind object, `java.lang.reflect.Type` v3 @kind object) @signature `Ln1/c;.<init>:([Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L538c9c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L538ca2.  v0.`n1.c.g` @type ^`java.lang.reflect.Type`[] := v1 @kind object;
  #L538ca6.  v0.`n1.c.h` @type ^`java.lang.reflect.Type` := v2 @kind object;
  #L538caa.  v0.`n1.c.i` @type ^`java.lang.reflect.Type` := v3 @kind object;
  #L538cae.  return @kind void;
}
procedure `boolean` `equals`(`n1.c` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Ln1/c;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L538b6c.  v0:= 1I;
  #L538b6e.  if v4 != v5 then goto L538b74;
  #L538b72.  return v0;
  #L538b74.  v1:= 0I;
  #L538b76.  if v5 == 0 then goto L538bea;
  #L538b7a.  v2:= constclass @type ^`n1.c` @kind object;
  #L538b7e.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L538b84.  v3:= temp @kind object;
  #L538b86.  if v2 == v3 then goto L538b8c;
  #L538b8a.  goto L538bea;
  #L538b8c.  v5:= (`n1.c`) v5 @kind object;
  #L538b90.  v2:= v4.`n1.c.g` @type ^`java.lang.reflect.Type`[] @kind object;
  #L538b94.  v3:= v5.`n1.c.g` @type ^`java.lang.reflect.Type`[] @kind object;
  #L538b98.  call temp:= `equals`(v2, v3) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L538b9e.  v2:= temp;
  #L538ba0.  if v2 != 0 then goto L538ba6;
  #L538ba4.  return v1;
  #L538ba6.  v2:= v4.`n1.c.h` @type ^`java.lang.reflect.Type` @kind object;
  #L538baa.  if v2 == 0 then goto L538bc0;
  #L538bae.  v3:= v5.`n1.c.h` @type ^`java.lang.reflect.Type` @kind object;
  #L538bb2.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L538bb8.  v2:= temp;
  #L538bba.  if v2 != 0 then goto L538bca;
  #L538bbe.  goto L538bc8;
  #L538bc0.  v2:= v5.`n1.c.h` @type ^`java.lang.reflect.Type` @kind object;
  #L538bc4.  if v2 == 0 then goto L538bca;
  #L538bc8.  return v1;
  #L538bca.  v2:= v4.`n1.c.i` @type ^`java.lang.reflect.Type` @kind object;
  #L538bce.  v5:= v5.`n1.c.i` @type ^`java.lang.reflect.Type` @kind object;
  #L538bd2.  if v2 == 0 then goto L538be0;
  #L538bd6.  call temp:= `equals`(v2, v5) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L538bdc.  v0:= temp;
  #L538bde.  goto L538be8;
  #L538be0.  if v5 != 0 then goto L538be6;
  #L538be4.  goto L538be8;
  #L538be6.  v0:= 0I;
  #L538be8.  return v0;
  #L538bea.  return v1;
}
procedure `java.lang.reflect.Type`[] `getActualTypeArguments`(`n1.c` v1 @kind this) @signature `Ln1/c;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L538c84.  v0:= v1.`n1.c.g` @type ^`java.lang.reflect.Type`[] @kind object;
  #L538c88.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getOwnerType`(`n1.c` v1 @kind this) @signature `Ln1/c;.getOwnerType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L538c54.  v0:= v1.`n1.c.h` @type ^`java.lang.reflect.Type` @kind object;
  #L538c58.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getRawType`(`n1.c` v1 @kind this) @signature `Ln1/c;.getRawType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L538c6c.  v0:= v1.`n1.c.i` @type ^`java.lang.reflect.Type` @kind object;
  #L538c70.  return v0 @kind object;
}
procedure `int` `hashCode`(`n1.c` v3 @kind this) @signature `Ln1/c;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L538bfc.  v0:= v3.`n1.c.g` @type ^`java.lang.reflect.Type`[] @kind object;
  #L538c00.  v1:= 0I;
  #L538c02.  if v0 == 0 then goto L538c10;
  #L538c06.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L538c0c.  v0:= temp;
  #L538c0e.  goto L538c12;
  #L538c10.  v0:= 0I;
  #L538c12.  v0:= v0 * 31;
  #L538c16.  v2:= v3.`n1.c.h` @type ^`java.lang.reflect.Type` @kind object;
  #L538c1a.  if v2 == 0 then goto L538c28;
  #L538c1e.  call temp:= `hashCode`(v2) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L538c24.  v2:= temp;
  #L538c26.  goto L538c2a;
  #L538c28.  v2:= 0I;
  #L538c2a.  v0:= v0 + v2 @kind int;
  #L538c2c.  v0:= v0 * 31;
  #L538c30.  v2:= v3.`n1.c.i` @type ^`java.lang.reflect.Type` @kind object;
  #L538c34.  if v2 == 0 then goto L538c40;
  #L538c38.  call temp:= `hashCode`(v2) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L538c3e.  v1:= temp;
  #L538c40.  v0:= v0 + v1 @kind int;
  #L538c42.  return v0;
}
