record `h.a` @kind class @AccessFlag PUBLIC extends `h.c` @kind class {
  `h.c` `h.a.a` @AccessFlag PRIVATE;
  `h.c` `h.a.b` @AccessFlag PRIVATE;
}
global `h.a` `@@h.a.c` @AccessFlag PRIVATE_STATIC_VOLATILE;
global `java.util.concurrent.Executor` `@@h.a.d` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lh/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L50b33c.  v0:= new `h.a$a`;
  #L50b340.  call `<init>`(v0) @signature `Lh/a$a;.<init>:()V` @kind direct;
  #L50b346.  v0:= new `h.a$b`;
  #L50b34a.  call `<init>`(v0) @signature `Lh/a$b;.<init>:()V` @kind direct;
  #L50b350.  `@@h.a.d` @type ^`java.util.concurrent.Executor` := v0 @kind object;
  #L50b354.  return @kind void;
}
procedure `void` `<init>`(`h.a` v1 @kind this) @signature `Lh/a;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L50b368.  call `<init>`(v1) @signature `Lh/c;.<init>:()V` @kind direct;
  #L50b36e.  v0:= new `h.b`;
  #L50b372.  call `<init>`(v0) @signature `Lh/b;.<init>:()V` @kind direct;
  #L50b378.  v1.`h.a.b` @type ^`h.c` := v0 @kind object;
  #L50b37c.  v1.`h.a.a` @type ^`h.c` := v0 @kind object;
  #L50b380.  return @kind void;
}
procedure `java.util.concurrent.Executor` `d`() @signature `Lh/a;.d:()Ljava/util/concurrent/Executor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L50b324.  v0:= `@@h.a.d` @type ^`java.util.concurrent.Executor` @kind object;
  #L50b328.  return v0 @kind object;
}
procedure `h.a` `e`() @signature `Lh/a;.e:()Lh/a;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L50b2c8.  v0:= `@@h.a.c` @type ^`h.a` @kind object;
  #L50b2cc.  if v0 == 0 then goto L50b2d6;
  #L50b2d0.  v0:= `@@h.a.c` @type ^`h.a` @kind object;
  #L50b2d4.  return v0 @kind object;
  #L50b2d6.  v0:= constclass @type ^`h.a` @kind object;
  #L50b2da.  @monitorenter v0
  #L50b2dc.  v1:= `@@h.a.c` @type ^`h.a` @kind object;
  #L50b2e0.  if v1 != 0 then goto L50b2f2;
  #L50b2e4.  v1:= new `h.a`;
  #L50b2e8.  call `<init>`(v1) @signature `Lh/a;.<init>:()V` @kind direct;
  #L50b2ee.  `@@h.a.c` @type ^`h.a` := v1 @kind object;
  #L50b2f2.  @monitorexit v0
  #L50b2f4.  v0:= `@@h.a.c` @type ^`h.a` @kind object;
  #L50b2f8.  return v0 @kind object;
  #L50b2fa.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L50b2fc.  @monitorexit v0
  #L50b2fe.  throw v1;
  catch `java.lang.Throwable` @[L50b2dc..L50b2f4] goto L50b2fa;
  catch `java.lang.Throwable` @[L50b2fc..L50b2fe] goto L50b2fa;
}
procedure `void` `a`(`h.a` v1 @kind this, `java.lang.Runnable` v2 @kind object) @signature `Lh/a;.a:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50b394.  v0:= v1.`h.a.a` @type ^`h.c` @kind object;
  #L50b398.  call `a`(v0, v2) @signature `Lh/c;.a:(Ljava/lang/Runnable;)V` @kind virtual;
  #L50b39e.  return @kind void;
}
procedure `boolean` `b`(`h.a` v1 @kind this) @signature `Lh/a;.b:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50b2a8.  v0:= v1.`h.a.a` @type ^`h.c` @kind object;
  #L50b2ac.  call temp:= `b`(v0) @signature `Lh/c;.b:()Z` @kind virtual;
  #L50b2b2.  v0:= temp;
  #L50b2b4.  return v0;
}
procedure `void` `c`(`h.a` v1 @kind this, `java.lang.Runnable` v2 @kind object) @signature `Lh/a;.c:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50b3b0.  v0:= v1.`h.a.a` @type ^`h.c` @kind object;
  #L50b3b4.  call `c`(v0, v2) @signature `Lh/c;.c:(Ljava/lang/Runnable;)V` @kind virtual;
  #L50b3ba.  return @kind void;
}
