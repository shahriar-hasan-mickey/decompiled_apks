record `c0.b` @kind class @AccessFlag PUBLIC_FINAL extends `c0.c` @kind class {
}
procedure `void` `<init>`(`c0.b` v0 @kind this) @signature `Lc0/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2a47e4.  call `<init>`(v0) @signature `Lc0/c;.<init>:()V` @kind direct;
  #L2a47ea.  return @kind void;
}
procedure `c0.b` `h`(`java.nio.ByteBuffer` v1 @kind object) @signature `Lc0/b;.h:(Ljava/nio/ByteBuffer;)Lc0/b;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2a471c.  v0:= new `c0.b`;
  #L2a4720.  call `<init>`(v0) @signature `Lc0/b;.<init>:()V` @kind direct;
  #L2a4726.  call temp:= `i`(v1, v0) @signature `Lc0/b;.i:(Ljava/nio/ByteBuffer;Lc0/b;)Lc0/b;` @kind static;
  #L2a472c.  v1:= temp @kind object;
  #L2a472e.  return v1 @kind object;
}
procedure `c0.b` `i`(`java.nio.ByteBuffer` v2 @kind object, `c0.b` v3 @kind object) @signature `Lc0/b;.i:(Ljava/nio/ByteBuffer;Lc0/b;)Lc0/b;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2a4740.  v0:= `@@java.nio.ByteOrder.LITTLE_ENDIAN` @type ^`java.nio.ByteOrder` @kind object;
  #L2a4744.  call temp:= `order`(v2, v0) @signature `Ljava/nio/ByteBuffer;.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;` @kind virtual;
  #L2a474a.  call temp:= `position`(v2) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L2a4750.  v0:= temp;
  #L2a4752.  call temp:= `getInt`(v2, v0) @signature `Ljava/nio/ByteBuffer;.getInt:(I)I` @kind virtual;
  #L2a4758.  v0:= temp;
  #L2a475a.  call temp:= `position`(v2) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L2a4760.  v1:= temp;
  #L2a4762.  v0:= v0 + v1 @kind int;
  #L2a4764.  call temp:= `f`(v3, v0, v2) @signature `Lc0/b;.f:(ILjava/nio/ByteBuffer;)Lc0/b;` @kind virtual;
  #L2a476a.  v2:= temp @kind object;
  #L2a476c.  return v2 @kind object;
}
procedure `c0.b` `f`(`c0.b` v0 @kind this, `int` v1 , `java.nio.ByteBuffer` v2 @kind object) @signature `Lc0/b;.f:(ILjava/nio/ByteBuffer;)Lc0/b;` @AccessFlag PUBLIC {
    temp;

  #L2a4704.  call `g`(v0, v1, v2) @signature `Lc0/b;.g:(ILjava/nio/ByteBuffer;)V` @kind virtual;
  #L2a470a.  return v0 @kind object;
}
procedure `void` `g`(`c0.b` v0 @kind this, `int` v1 , `java.nio.ByteBuffer` v2 @kind object) @signature `Lc0/b;.g:(ILjava/nio/ByteBuffer;)V` @AccessFlag PUBLIC {
    temp;

  #L2a47fc.  call `c`(v0, v1, v2) @signature `Lc0/c;.c:(ILjava/nio/ByteBuffer;)V` @kind virtual;
  #L2a4802.  return @kind void;
}
procedure `c0.a` `j`(`c0.b` v1 @kind this, `c0.a` v2 @kind object, `int` v3 ) @signature `Lc0/b;.j:(Lc0/a;I)Lc0/a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a46bc.  v0:= 6I;
  #L2a46be.  call temp:= `b`(v1, v0) @signature `Lc0/c;.b:(I)I` @kind virtual;
  #L2a46c4.  v0:= temp;
  #L2a46c6.  if v0 == 0 then goto L2a46ee;
  #L2a46ca.  call temp:= `d`(v1, v0) @signature `Lc0/c;.d:(I)I` @kind virtual;
  #L2a46d0.  v0:= temp;
  #L2a46d2.  v3:= v3 * 4;
  #L2a46d6.  v0:= v0 + v3 @kind int;
  #L2a46d8.  call temp:= `a`(v1, v0) @signature `Lc0/c;.a:(I)I` @kind virtual;
  #L2a46de.  v3:= temp;
  #L2a46e0.  v0:= v1.`c0.c.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L2a46e4.  call temp:= `f`(v2, v3, v0) @signature `Lc0/a;.f:(ILjava/nio/ByteBuffer;)Lc0/a;` @kind virtual;
  #L2a46ea.  v2:= temp @kind object;
  #L2a46ec.  goto L2a46f0;
  #L2a46ee.  v2:= 0I;
  #L2a46f0.  return v2 @kind object;
}
procedure `int` `k`(`c0.b` v1 @kind this) @signature `Lc0/b;.k:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a4780.  v0:= 6I;
  #L2a4782.  call temp:= `b`(v1, v0) @signature `Lc0/c;.b:(I)I` @kind virtual;
  #L2a4788.  v0:= temp;
  #L2a478a.  if v0 == 0 then goto L2a4798;
  #L2a478e.  call temp:= `e`(v1, v0) @signature `Lc0/c;.e:(I)I` @kind virtual;
  #L2a4794.  v0:= temp;
  #L2a4796.  goto L2a479a;
  #L2a4798.  v0:= 0I;
  #L2a479a.  return v0;
}
procedure `int` `l`(`c0.b` v3 @kind this) @signature `Lc0/b;.l:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2a47ac.  v0:= 4I;
  #L2a47ae.  call temp:= `b`(v3, v0) @signature `Lc0/c;.b:(I)I` @kind virtual;
  #L2a47b4.  v0:= temp;
  #L2a47b6.  if v0 == 0 then goto L2a47ce;
  #L2a47ba.  v1:= v3.`c0.c.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L2a47be.  v2:= v3.`c0.c.a` @type ^`int`;
  #L2a47c2.  v0:= v0 + v2 @kind int;
  #L2a47c4.  call temp:= `getInt`(v1, v0) @signature `Ljava/nio/ByteBuffer;.getInt:(I)I` @kind virtual;
  #L2a47ca.  v0:= temp;
  #L2a47cc.  goto L2a47d0;
  #L2a47ce.  v0:= 0I;
  #L2a47d0.  return v0;
}
