record `c0.c` @kind class @AccessFlag PUBLIC {
  `int` `c0.c.a` @AccessFlag PROTECTED;
  `java.nio.ByteBuffer` `c0.c.b` @AccessFlag PROTECTED;
  `int` `c0.c.c` @AccessFlag PRIVATE;
  `int` `c0.c.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`c0.c` v0 @kind this) @signature `Lc0/c;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2a48c4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2a48ca.  call temp:= `a`() @signature `Lc0/d;.a:()Lc0/d;` @kind static;
  #L2a48d0.  return @kind void;
}
procedure `int` `a`(`c0.c` v1 @kind this, `int` v2 ) @signature `Lc0/c;.a:(I)I` @AccessFlag PROTECTED {
    temp;
    v0;

  #L2a4814.  v0:= v1.`c0.c.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L2a4818.  call temp:= `getInt`(v0, v2) @signature `Ljava/nio/ByteBuffer;.getInt:(I)I` @kind virtual;
  #L2a481e.  v0:= temp;
  #L2a4820.  v2:= v2 + v0 @kind int;
  #L2a4822.  return v2;
}
procedure `int` `b`(`c0.c` v2 @kind this, `int` v3 ) @signature `Lc0/c;.b:(I)I` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L2a4834.  v0:= v2.`c0.c.d` @type ^`int`;
  #L2a4838.  if v3 >= v0 then goto L2a4850;
  #L2a483c.  v0:= v2.`c0.c.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L2a4840.  v1:= v2.`c0.c.c` @type ^`int`;
  #L2a4844.  v1:= v1 + v3 @kind int;
  #L2a4846.  call temp:= `getShort`(v0, v1) @signature `Ljava/nio/ByteBuffer;.getShort:(I)S` @kind virtual;
  #L2a484c.  v3:= temp;
  #L2a484e.  goto L2a4852;
  #L2a4850.  v3:= 0I;
  #L2a4852.  return v3;
}
procedure `void` `c`(`c0.c` v0 @kind this, `int` v1 , `java.nio.ByteBuffer` v2 @kind object) @signature `Lc0/c;.c:(ILjava/nio/ByteBuffer;)V` @AccessFlag PROTECTED {
    temp;

  #L2a48e4.  v0.`c0.c.b` @type ^`java.nio.ByteBuffer` := v2 @kind object;
  #L2a48e8.  if v2 == 0 then goto L2a4910;
  #L2a48ec.  v0.`c0.c.a` @type ^`int` := v1;
  #L2a48f0.  call temp:= `getInt`(v2, v1) @signature `Ljava/nio/ByteBuffer;.getInt:(I)I` @kind virtual;
  #L2a48f6.  v2:= temp;
  #L2a48f8.  v1:= v1 - v2 @kind int;
  #L2a48fa.  v0.`c0.c.c` @type ^`int` := v1;
  #L2a48fe.  v2:= v0.`c0.c.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L2a4902.  call temp:= `getShort`(v2, v1) @signature `Ljava/nio/ByteBuffer;.getShort:(I)S` @kind virtual;
  #L2a4908.  v1:= temp;
  #L2a490a.  v0.`c0.c.d` @type ^`int` := v1;
  #L2a490e.  goto L2a491e;
  #L2a4910.  v1:= 0I;
  #L2a4912.  v0.`c0.c.a` @type ^`int` := v1;
  #L2a4916.  v0.`c0.c.c` @type ^`int` := v1;
  #L2a491a.  v0.`c0.c.d` @type ^`int` := v1;
  #L2a491e.  return @kind void;
}
procedure `int` `d`(`c0.c` v1 @kind this, `int` v2 ) @signature `Lc0/c;.d:(I)I` @AccessFlag PROTECTED {
    temp;
    v0;

  #L2a4864.  v0:= v1.`c0.c.a` @type ^`int`;
  #L2a4868.  v2:= v2 + v0 @kind int;
  #L2a486a.  v0:= v1.`c0.c.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L2a486e.  call temp:= `getInt`(v0, v2) @signature `Ljava/nio/ByteBuffer;.getInt:(I)I` @kind virtual;
  #L2a4874.  v0:= temp;
  #L2a4876.  v2:= v2 + v0 @kind int;
  #L2a4878.  v2:= v2 + 4;
  #L2a487c.  return v2;
}
procedure `int` `e`(`c0.c` v1 @kind this, `int` v2 ) @signature `Lc0/c;.e:(I)I` @AccessFlag PROTECTED {
    temp;
    v0;

  #L2a4890.  v0:= v1.`c0.c.a` @type ^`int`;
  #L2a4894.  v2:= v2 + v0 @kind int;
  #L2a4896.  v0:= v1.`c0.c.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L2a489a.  call temp:= `getInt`(v0, v2) @signature `Ljava/nio/ByteBuffer;.getInt:(I)I` @kind virtual;
  #L2a48a0.  v0:= temp;
  #L2a48a2.  v2:= v2 + v0 @kind int;
  #L2a48a4.  v0:= v1.`c0.c.b` @type ^`java.nio.ByteBuffer` @kind object;
  #L2a48a8.  call temp:= `getInt`(v0, v2) @signature `Ljava/nio/ByteBuffer;.getInt:(I)I` @kind virtual;
  #L2a48ae.  v2:= temp;
  #L2a48b0.  return v2;
}
