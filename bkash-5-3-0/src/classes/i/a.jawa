record `i.a` @kind class @AccessFlag PUBLIC extends `i.b` @kind class {
  `java.util.HashMap` `i.a.k` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`i.a` v1 @kind this) @signature `Li/a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L50da78.  call `<init>`(v1) @signature `Li/b;.<init>:()V` @kind direct;
  #L50da7e.  v0:= new `java.util.HashMap`;
  #L50da82.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L50da88.  v1.`i.a.k` @type ^`java.util.HashMap` := v0 @kind object;
  #L50da8c.  return @kind void;
}
procedure `boolean` `contains`(`i.a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Li/a;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50d9a0.  v0:= v1.`i.a.k` @type ^`java.util.HashMap` @kind object;
  #L50d9a4.  call temp:= `containsKey`(v0, v2) @signature `Ljava/util/HashMap;.containsKey:(Ljava/lang/Object;)Z` @kind virtual;
  #L50d9aa.  v2:= temp;
  #L50d9ac.  return v2;
}
procedure `i.b$c` `h`(`i.a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Li/a;.h:(Ljava/lang/Object;)Li/b$c;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L50d9c0.  v0:= v1.`i.a.k` @type ^`java.util.HashMap` @kind object;
  #L50d9c4.  call temp:= `get`(v0, v2) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L50d9ca.  v2:= temp @kind object;
  #L50d9cc.  v2:= (`i.b$c`) v2 @kind object;
  #L50d9d0.  return v2 @kind object;
}
procedure `java.lang.Object` `l`(`i.a` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Li/a;.l:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50d9e4.  call temp:= `h`(v1, v2) @signature `Li/a;.h:(Ljava/lang/Object;)Li/b$c;` @kind virtual;
  #L50d9ea.  v0:= temp @kind object;
  #L50d9ec.  if v0 == 0 then goto L50d9f6;
  #L50d9f0.  v2:= v0.`i.b$c.h` @type ^`java.lang.Object` @kind object;
  #L50d9f4.  return v2 @kind object;
  #L50d9f6.  v0:= v1.`i.a.k` @type ^`java.util.HashMap` @kind object;
  #L50d9fa.  call temp:= `k`(v1, v2, v3) @signature `Li/b;.k:(Ljava/lang/Object;Ljava/lang/Object;)Li/b$c;` @kind virtual;
  #L50da00.  v3:= temp @kind object;
  #L50da02.  call temp:= `put`(v0, v2, v3) @signature `Ljava/util/HashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L50da08.  v2:= 0I;
  #L50da0a.  return v2 @kind object;
}
procedure `java.lang.Object` `m`(`i.a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Li/a;.m:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L50da1c.  call temp:= `m`(v2, v3) @signature `Li/b;.m:(Ljava/lang/Object;)Ljava/lang/Object;` @kind super;
  #L50da22.  v0:= temp @kind object;
  #L50da24.  v1:= v2.`i.a.k` @type ^`java.util.HashMap` @kind object;
  #L50da28.  call temp:= `remove`(v1, v3) @signature `Ljava/util/HashMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L50da2e.  return v0 @kind object;
}
procedure `java.util.Map$Entry` `n`(`i.a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Li/a;.n:(Ljava/lang/Object;)Ljava/util/Map$Entry;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50da40.  call temp:= `contains`(v1, v2) @signature `Li/a;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L50da46.  v0:= temp;
  #L50da48.  if v0 == 0 then goto L50da62;
  #L50da4c.  v0:= v1.`i.a.k` @type ^`java.util.HashMap` @kind object;
  #L50da50.  call temp:= `get`(v0, v2) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L50da56.  v2:= temp @kind object;
  #L50da58.  v2:= (`i.b$c`) v2 @kind object;
  #L50da5c.  v2:= v2.`i.b$c.j` @type ^`i.b$c` @kind object;
  #L50da60.  return v2 @kind object;
  #L50da62.  v2:= 0I;
  #L50da64.  return v2 @kind object;
}
