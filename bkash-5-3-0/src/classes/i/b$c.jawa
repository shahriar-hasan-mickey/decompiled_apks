record `i.b$c` @kind class @AccessFlag  extends `java.util.Map$Entry` @kind interface {
  `java.lang.Object` `i.b$c.g` @AccessFlag FINAL;
  `java.lang.Object` `i.b$c.h` @AccessFlag FINAL;
  `i.b$c` `i.b$c.i` @AccessFlag ;
  `i.b$c` `i.b$c.j` @AccessFlag ;
}
procedure `void` `<init>`(`i.b$c` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Li/b$c;.<init>:(Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L50dc48.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L50dc4e.  v0.`i.b$c.g` @type ^`java.lang.Object` := v1 @kind object;
  #L50dc52.  v0.`i.b$c.h` @type ^`java.lang.Object` := v2 @kind object;
  #L50dc56.  return @kind void;
}
procedure `boolean` `equals`(`i.b$c` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Li/b$c;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L50db30.  v0:= 1I;
  #L50db32.  if v5 != v4 then goto L50db38;
  #L50db36.  return v0;
  #L50db38.  v1:= instanceof @variable v5 @type ^`i.b$c` @kind boolean;
  #L50db3c.  v2:= 0I;
  #L50db3e.  if v1 != 0 then goto L50db44;
  #L50db42.  return v2;
  #L50db44.  v5:= (`i.b$c`) v5 @kind object;
  #L50db48.  v1:= v4.`i.b$c.g` @type ^`java.lang.Object` @kind object;
  #L50db4c.  v3:= v5.`i.b$c.g` @type ^`java.lang.Object` @kind object;
  #L50db50.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L50db56.  v1:= temp;
  #L50db58.  if v1 == 0 then goto L50db72;
  #L50db5c.  v1:= v4.`i.b$c.h` @type ^`java.lang.Object` @kind object;
  #L50db60.  v5:= v5.`i.b$c.h` @type ^`java.lang.Object` @kind object;
  #L50db64.  call temp:= `equals`(v1, v5) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L50db6a.  v5:= temp;
  #L50db6c.  if v5 == 0 then goto L50db72;
  #L50db70.  goto L50db74;
  #L50db72.  v0:= 0I;
  #L50db74.  return v0;
}
procedure `java.lang.Object` `getKey`(`i.b$c` v1 @kind this) @signature `Li/b$c;.getKey:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50dbb4.  v0:= v1.`i.b$c.g` @type ^`java.lang.Object` @kind object;
  #L50dbb8.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`i.b$c` v1 @kind this) @signature `Li/b$c;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50dbcc.  v0:= v1.`i.b$c.h` @type ^`java.lang.Object` @kind object;
  #L50dbd0.  return v0 @kind object;
}
procedure `int` `hashCode`(`i.b$c` v2 @kind this) @signature `Li/b$c;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L50db88.  v0:= v2.`i.b$c.g` @type ^`java.lang.Object` @kind object;
  #L50db8c.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L50db92.  v0:= temp;
  #L50db94.  v1:= v2.`i.b$c.h` @type ^`java.lang.Object` @kind object;
  #L50db98.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L50db9e.  v1:= temp;
  #L50dba0.  v0:= v0 ^~ v1 @kind int;
  #L50dba2.  return v0;
}
procedure `java.lang.Object` `setValue`(`i.b$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Li/b$c;.setValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50dbe4.  v2:= new `java.lang.UnsupportedOperationException`;
  #L50dbe8.  v0:= "An entry modification is not supported" @kind object;
  #L50dbec.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50dbf2.  throw v2;
}
procedure `java.lang.String` `toString`(`i.b$c` v2 @kind this) @signature `Li/b$c;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L50dc04.  v0:= new `java.lang.StringBuilder`;
  #L50dc08.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L50dc0e.  v1:= v2.`i.b$c.g` @type ^`java.lang.Object` @kind object;
  #L50dc12.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50dc18.  v1:= "=" @kind object;
  #L50dc1c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50dc22.  v1:= v2.`i.b$c.h` @type ^`java.lang.Object` @kind object;
  #L50dc26.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50dc2c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L50dc32.  v0:= temp @kind object;
  #L50dc34.  return v0 @kind object;
}
