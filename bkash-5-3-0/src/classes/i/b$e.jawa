record `i.b$e` @kind class @AccessFlag ABSTRACT extends `java.util.Iterator` @kind interface, `i.b$f` @kind interface {
  `i.b$c` `i.b$e.g` @AccessFlag ;
  `i.b$c` `i.b$e.h` @AccessFlag ;
}
procedure `void` `<init>`(`i.b$e` v0 @kind this, `i.b$c` v1 @kind object, `i.b$c` v2 @kind object) @signature `Li/b$e;.<init>:(Li/b$c;Li/b$c;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L50ddf4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L50ddfa.  v0.`i.b$e.g` @type ^`i.b$c` := v2 @kind object;
  #L50ddfe.  v0.`i.b$e.h` @type ^`i.b$c` := v1 @kind object;
  #L50de02.  return @kind void;
}
procedure `i.b$c` `e`(`i.b$e` v2 @kind this) @signature `Li/b$e;.e:()Li/b$c;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L50dd84.  v0:= v2.`i.b$e.h` @type ^`i.b$c` @kind object;
  #L50dd88.  v1:= v2.`i.b$e.g` @type ^`i.b$c` @kind object;
  #L50dd8c.  if v0 == v1 then goto L50dda0;
  #L50dd90.  if v1 != 0 then goto L50dd96;
  #L50dd94.  goto L50dda0;
  #L50dd96.  call temp:= `c`(v2, v0) @signature `Li/b$e;.c:(Li/b$c;)Li/b$c;` @kind virtual;
  #L50dd9c.  v0:= temp @kind object;
  #L50dd9e.  return v0 @kind object;
  #L50dda0.  v0:= 0I;
  #L50dda2.  return v0 @kind object;
}
procedure `void` `a`(`i.b$e` v1 @kind this, `i.b$c` v2 @kind object) @signature `Li/b$e;.a:(Li/b$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50de14.  v0:= v1.`i.b$e.g` @type ^`i.b$c` @kind object;
  #L50de18.  if v0 != v2 then goto L50de2e;
  #L50de1c.  v0:= v1.`i.b$e.h` @type ^`i.b$c` @kind object;
  #L50de20.  if v2 != v0 then goto L50de2e;
  #L50de24.  v0:= 0I;
  #L50de26.  v1.`i.b$e.h` @type ^`i.b$c` := v0 @kind object;
  #L50de2a.  v1.`i.b$e.g` @type ^`i.b$c` := v0 @kind object;
  #L50de2e.  v0:= v1.`i.b$e.g` @type ^`i.b$c` @kind object;
  #L50de32.  if v0 != v2 then goto L50de42;
  #L50de36.  call temp:= `b`(v1, v0) @signature `Li/b$e;.b:(Li/b$c;)Li/b$c;` @kind virtual;
  #L50de3c.  v0:= temp @kind object;
  #L50de3e.  v1.`i.b$e.g` @type ^`i.b$c` := v0 @kind object;
  #L50de42.  v0:= v1.`i.b$e.h` @type ^`i.b$c` @kind object;
  #L50de46.  if v0 != v2 then goto L50de56;
  #L50de4a.  call temp:= `e`(v1) @signature `Li/b$e;.e:()Li/b$c;` @kind direct;
  #L50de50.  v2:= temp @kind object;
  #L50de52.  v1.`i.b$e.h` @type ^`i.b$c` := v2 @kind object;
  #L50de56.  return @kind void;
}
procedure `i.b$c` `b`(`i.b$c` v0 @kind object) @signature `Li/b$e;.b:(Li/b$c;)Li/b$c;` @AccessFlag ABSTRACT {

  # return;
}
procedure `i.b$c` `c`(`i.b$c` v0 @kind object) @signature `Li/b$e;.c:(Li/b$c;)Li/b$c;` @AccessFlag ABSTRACT {

  # return;
}
procedure `java.util.Map$Entry` `d`(`i.b$e` v2 @kind this) @signature `Li/b$e;.d:()Ljava/util/Map$Entry;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L50ddd0.  v0:= v2.`i.b$e.h` @type ^`i.b$c` @kind object;
  #L50ddd4.  call temp:= `e`(v2) @signature `Li/b$e;.e:()Li/b$c;` @kind direct;
  #L50ddda.  v1:= temp @kind object;
  #L50dddc.  v2.`i.b$e.h` @type ^`i.b$c` := v1 @kind object;
  #L50dde0.  return v0 @kind object;
}
procedure `boolean` `hasNext`(`i.b$e` v1 @kind this) @signature `Li/b$e;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50dd64.  v0:= v1.`i.b$e.h` @type ^`i.b$c` @kind object;
  #L50dd68.  if v0 == 0 then goto L50dd70;
  #L50dd6c.  v0:= 1I;
  #L50dd6e.  goto L50dd72;
  #L50dd70.  v0:= 0I;
  #L50dd72.  return v0;
}
procedure `java.lang.Object` `next`(`i.b$e` v1 @kind this) @signature `Li/b$e;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L50ddb4.  call temp:= `d`(v1) @signature `Li/b$e;.d:()Ljava/util/Map$Entry;` @kind virtual;
  #L50ddba.  v0:= temp @kind object;
  #L50ddbc.  return v0 @kind object;
}
