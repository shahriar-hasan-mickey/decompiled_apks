record `i.b$d` @kind class @AccessFlag  extends `java.util.Iterator` @kind interface, `i.b$f` @kind interface {
  `i.b$c` `i.b$d.g` @AccessFlag PRIVATE;
  `boolean` `i.b$d.h` @AccessFlag PRIVATE;
  `i.b` `i.b$d.i` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`i.b$d` v0 @kind this, `i.b` v1 @kind object) @signature `Li/b$d;.<init>:(Li/b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L50dd10.  v0.`i.b$d.i` @type ^`i.b` := v1 @kind object;
  #L50dd14.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L50dd1a.  v1:= 1I;
  #L50dd1c.  v0.`i.b$d.h` @type ^`boolean` := v1 @kind boolean;
  #L50dd20.  return @kind void;
}
procedure `void` `a`(`i.b$d` v1 @kind this, `i.b$c` v2 @kind object) @signature `Li/b$d;.a:(Li/b$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50dd34.  v0:= v1.`i.b$d.g` @type ^`i.b$c` @kind object;
  #L50dd38.  if v2 != v0 then goto L50dd52;
  #L50dd3c.  v2:= v0.`i.b$c.j` @type ^`i.b$c` @kind object;
  #L50dd40.  v1.`i.b$d.g` @type ^`i.b$c` := v2 @kind object;
  #L50dd44.  if v2 != 0 then goto L50dd4c;
  #L50dd48.  v2:= 1I;
  #L50dd4a.  goto L50dd4e;
  #L50dd4c.  v2:= 0I;
  #L50dd4e.  v1.`i.b$d.h` @type ^`boolean` := v2 @kind boolean;
  #L50dd52.  return @kind void;
}
procedure `java.util.Map$Entry` `b`(`i.b$d` v1 @kind this) @signature `Li/b$d;.b:()Ljava/util/Map$Entry;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50dcc8.  v0:= v1.`i.b$d.h` @type ^`boolean` @kind boolean;
  #L50dccc.  if v0 == 0 then goto L50dce4;
  #L50dcd0.  v0:= 0I;
  #L50dcd2.  v1.`i.b$d.h` @type ^`boolean` := v0 @kind boolean;
  #L50dcd6.  v0:= v1.`i.b$d.i` @type ^`i.b` @kind object;
  #L50dcda.  v0:= v0.`i.b.g` @type ^`i.b$c` @kind object;
  #L50dcde.  v1.`i.b$d.g` @type ^`i.b$c` := v0 @kind object;
  #L50dce2.  goto L50dcf8;
  #L50dce4.  v0:= v1.`i.b$d.g` @type ^`i.b$c` @kind object;
  #L50dce8.  if v0 == 0 then goto L50dcf2;
  #L50dcec.  v0:= v0.`i.b$c.i` @type ^`i.b$c` @kind object;
  #L50dcf0.  goto L50dcf4;
  #L50dcf2.  v0:= 0I;
  #L50dcf4.  v1.`i.b$d.g` @type ^`i.b$c` := v0 @kind object;
  #L50dcf8.  v0:= v1.`i.b$d.g` @type ^`i.b$c` @kind object;
  #L50dcfc.  return v0 @kind object;
}
procedure `boolean` `hasNext`(`i.b$d` v3 @kind this) @signature `Li/b$d;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L50dc68.  v0:= v3.`i.b$d.h` @type ^`boolean` @kind boolean;
  #L50dc6c.  v1:= 1I;
  #L50dc6e.  v2:= 0I;
  #L50dc70.  if v0 == 0 then goto L50dc86;
  #L50dc74.  v0:= v3.`i.b$d.i` @type ^`i.b` @kind object;
  #L50dc78.  v0:= v0.`i.b.g` @type ^`i.b$c` @kind object;
  #L50dc7c.  if v0 == 0 then goto L50dc82;
  #L50dc80.  goto L50dc84;
  #L50dc82.  v1:= 0I;
  #L50dc84.  return v1;
  #L50dc86.  v0:= v3.`i.b$d.g` @type ^`i.b$c` @kind object;
  #L50dc8a.  if v0 == 0 then goto L50dc98;
  #L50dc8e.  v0:= v0.`i.b$c.i` @type ^`i.b$c` @kind object;
  #L50dc92.  if v0 == 0 then goto L50dc98;
  #L50dc96.  goto L50dc9a;
  #L50dc98.  v1:= 0I;
  #L50dc9a.  return v1;
}
procedure `java.lang.Object` `next`(`i.b$d` v1 @kind this) @signature `Li/b$d;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L50dcac.  call temp:= `b`(v1) @signature `Li/b$d;.b:()Ljava/util/Map$Entry;` @kind virtual;
  #L50dcb2.  v0:= temp @kind object;
  #L50dcb4.  return v0 @kind object;
}
