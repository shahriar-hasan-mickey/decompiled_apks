record `i.b` @kind class @AccessFlag PUBLIC extends `java.lang.Iterable` @kind interface {
  `i.b$c` `i.b.g` @AccessFlag ;
  `i.b$c` `i.b.h` @AccessFlag PRIVATE;
  `java.util.WeakHashMap` `i.b.i` @AccessFlag PRIVATE;
  `int` `i.b.j` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`i.b` v1 @kind this) @signature `Li/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L50e20c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L50e212.  v0:= new `java.util.WeakHashMap`;
  #L50e216.  call `<init>`(v0) @signature `Ljava/util/WeakHashMap;.<init>:()V` @kind direct;
  #L50e21c.  v1.`i.b.i` @type ^`java.util.WeakHashMap` := v0 @kind object;
  #L50e220.  v0:= 0I;
  #L50e222.  v1.`i.b.j` @type ^`int` := v0;
  #L50e226.  return @kind void;
}
procedure `java.util.Iterator` `descendingIterator`(`i.b` v3 @kind this) @signature `Li/b;.descendingIterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L50e174.  v0:= new `i.b$b`;
  #L50e178.  v1:= v3.`i.b.h` @type ^`i.b$c` @kind object;
  #L50e17c.  v2:= v3.`i.b.g` @type ^`i.b$c` @kind object;
  #L50e180.  call `<init>`(v0, v1, v2) @signature `Li/b$b;.<init>:(Li/b$c;Li/b$c;)V` @kind direct;
  #L50e186.  v1:= v3.`i.b.i` @type ^`java.util.WeakHashMap` @kind object;
  #L50e18a.  v2:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L50e18e.  call temp:= `put`(v1, v0, v2) @signature `Ljava/util/WeakHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L50e194.  return v0 @kind object;
}
procedure `boolean` `equals`(`i.b` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Li/b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L50de68.  v0:= 1I;
  #L50de6a.  if v6 != v5 then goto L50de70;
  #L50de6e.  return v0;
  #L50de70.  v1:= instanceof @variable v6 @type ^`i.b` @kind boolean;
  #L50de74.  v2:= 0I;
  #L50de76.  if v1 != 0 then goto L50de7c;
  #L50de7a.  return v2;
  #L50de7c.  v6:= (`i.b`) v6 @kind object;
  #L50de80.  call temp:= `size`(v5) @signature `Li/b;.size:()I` @kind virtual;
  #L50de86.  v1:= temp;
  #L50de88.  call temp:= `size`(v6) @signature `Li/b;.size:()I` @kind virtual;
  #L50de8e.  v3:= temp;
  #L50de90.  if v1 == v3 then goto L50de96;
  #L50de94.  return v2;
  #L50de96.  call temp:= `iterator`(v5) @signature `Li/b;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L50de9c.  v1:= temp @kind object;
  #L50de9e.  call temp:= `iterator`(v6) @signature `Li/b;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L50dea4.  v6:= temp @kind object;
  #L50dea6.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L50deac.  v3:= temp;
  #L50deae.  if v3 == 0 then goto L50deec;
  #L50deb2.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L50deb8.  v3:= temp;
  #L50deba.  if v3 == 0 then goto L50deec;
  #L50debe.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L50dec4.  v3:= temp @kind object;
  #L50dec6.  v3:= (`java.util.Map$Entry`) v3 @kind object;
  #L50deca.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L50ded0.  v4:= temp @kind object;
  #L50ded2.  if v3 != 0 then goto L50deda;
  #L50ded6.  if v4 != 0 then goto L50deea;
  #L50deda.  if v3 == 0 then goto L50dea6;
  #L50dede.  call temp:= `equals`(v3, v4) @signature `Ljava/util/Map$Entry;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L50dee4.  v3:= temp;
  #L50dee6.  if v3 != 0 then goto L50dea6;
  #L50deea.  return v2;
  #L50deec.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L50def2.  v1:= temp;
  #L50def4.  if v1 != 0 then goto L50df06;
  #L50def8.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L50defe.  v6:= temp;
  #L50df00.  if v6 != 0 then goto L50df06;
  #L50df04.  goto L50df08;
  #L50df06.  v0:= 0I;
  #L50df08.  return v0;
}
procedure `java.util.Map$Entry` `g`(`i.b` v1 @kind this) @signature `Li/b;.g:()Ljava/util/Map$Entry;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50e1dc.  v0:= v1.`i.b.g` @type ^`i.b$c` @kind object;
  #L50e1e0.  return v0 @kind object;
}
procedure `i.b$c` `h`(`i.b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Li/b;.h:(Ljava/lang/Object;)Li/b$c;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L50df1c.  v0:= v2.`i.b.g` @type ^`i.b$c` @kind object;
  #L50df20.  if v0 == 0 then goto L50df3c;
  #L50df24.  v1:= v0.`i.b$c.g` @type ^`java.lang.Object` @kind object;
  #L50df28.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L50df2e.  v1:= temp;
  #L50df30.  if v1 == 0 then goto L50df36;
  #L50df34.  goto L50df3c;
  #L50df36.  v0:= v0.`i.b$c.i` @type ^`i.b$c` @kind object;
  #L50df3a.  goto L50df20;
  #L50df3c.  return v0 @kind object;
}
procedure `int` `hashCode`(`i.b` v3 @kind this) @signature `Li/b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L50dfc4.  call temp:= `iterator`(v3) @signature `Li/b;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L50dfca.  v0:= temp @kind object;
  #L50dfcc.  v1:= 0I;
  #L50dfce.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L50dfd4.  v2:= temp;
  #L50dfd6.  if v2 == 0 then goto L50dff2;
  #L50dfda.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L50dfe0.  v2:= temp @kind object;
  #L50dfe2.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L50dfe6.  call temp:= `hashCode`(v2) @signature `Ljava/util/Map$Entry;.hashCode:()I` @kind interface;
  #L50dfec.  v2:= temp;
  #L50dfee.  v1:= v1 + v2 @kind int;
  #L50dff0.  goto L50dfce;
  #L50dff2.  return v1;
}
procedure `i.b$d` `i`(`i.b` v3 @kind this) @signature `Li/b;.i:()Li/b$d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L50df98.  v0:= new `i.b$d`;
  #L50df9c.  call `<init>`(v0, v3) @signature `Li/b$d;.<init>:(Li/b;)V` @kind direct;
  #L50dfa2.  v1:= v3.`i.b.i` @type ^`java.util.WeakHashMap` @kind object;
  #L50dfa6.  v2:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L50dfaa.  call temp:= `put`(v1, v0, v2) @signature `Ljava/util/WeakHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L50dfb0.  return v0 @kind object;
}
procedure `java.util.Iterator` `iterator`(`i.b` v3 @kind this) @signature `Li/b;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L50e1a8.  v0:= new `i.b$a`;
  #L50e1ac.  v1:= v3.`i.b.g` @type ^`i.b$c` @kind object;
  #L50e1b0.  v2:= v3.`i.b.h` @type ^`i.b$c` @kind object;
  #L50e1b4.  call `<init>`(v0, v1, v2) @signature `Li/b$a;.<init>:(Li/b$c;Li/b$c;)V` @kind direct;
  #L50e1ba.  v1:= v3.`i.b.i` @type ^`java.util.WeakHashMap` @kind object;
  #L50e1be.  v2:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L50e1c2.  call temp:= `put`(v1, v0, v2) @signature `Ljava/util/WeakHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L50e1c8.  return v0 @kind object;
}
procedure `java.util.Map$Entry` `j`(`i.b` v1 @kind this) @signature `Li/b;.j:()Ljava/util/Map$Entry;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50e1f4.  v0:= v1.`i.b.h` @type ^`i.b$c` @kind object;
  #L50e1f8.  return v0 @kind object;
}
procedure `i.b$c` `k`(`i.b` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Li/b;.k:(Ljava/lang/Object;Ljava/lang/Object;)Li/b$c;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L50df50.  v0:= new `i.b$c`;
  #L50df54.  call `<init>`(v0, v2, v3) @signature `Li/b$c;.<init>:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind direct;
  #L50df5a.  v2:= v1.`i.b.j` @type ^`int`;
  #L50df5e.  v2:= v2 + 1;
  #L50df62.  v1.`i.b.j` @type ^`int` := v2;
  #L50df66.  v2:= v1.`i.b.h` @type ^`i.b$c` @kind object;
  #L50df6a.  if v2 != 0 then goto L50df78;
  #L50df6e.  v1.`i.b.g` @type ^`i.b$c` := v0 @kind object;
  #L50df72.  v1.`i.b.h` @type ^`i.b$c` := v0 @kind object;
  #L50df76.  return v0 @kind object;
  #L50df78.  v2.`i.b$c.i` @type ^`i.b$c` := v0 @kind object;
  #L50df7c.  v0.`i.b$c.j` @type ^`i.b$c` := v2 @kind object;
  #L50df80.  v1.`i.b.h` @type ^`i.b$c` := v0 @kind object;
  #L50df84.  return v0 @kind object;
}
procedure `java.lang.Object` `l`(`i.b` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Li/b;.l:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50e01c.  call temp:= `h`(v1, v2) @signature `Li/b;.h:(Ljava/lang/Object;)Li/b$c;` @kind virtual;
  #L50e022.  v0:= temp @kind object;
  #L50e024.  if v0 == 0 then goto L50e02e;
  #L50e028.  v2:= v0.`i.b$c.h` @type ^`java.lang.Object` @kind object;
  #L50e02c.  return v2 @kind object;
  #L50e02e.  call temp:= `k`(v1, v2, v3) @signature `Li/b;.k:(Ljava/lang/Object;Ljava/lang/Object;)Li/b$c;` @kind virtual;
  #L50e034.  v2:= 0I;
  #L50e036.  return v2 @kind object;
}
procedure `java.lang.Object` `m`(`i.b` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Li/b;.m:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L50e048.  call temp:= `h`(v3, v4) @signature `Li/b;.h:(Ljava/lang/Object;)Li/b$c;` @kind virtual;
  #L50e04e.  v4:= temp @kind object;
  #L50e050.  v0:= 0I;
  #L50e052.  if v4 != 0 then goto L50e058;
  #L50e056.  return v0 @kind object;
  #L50e058.  v1:= v3.`i.b.j` @type ^`int`;
  #L50e05c.  v1:= v1 + -1;
  #L50e060.  v3.`i.b.j` @type ^`int` := v1;
  #L50e064.  v1:= v3.`i.b.i` @type ^`java.util.WeakHashMap` @kind object;
  #L50e068.  call temp:= `isEmpty`(v1) @signature `Ljava/util/WeakHashMap;.isEmpty:()Z` @kind virtual;
  #L50e06e.  v1:= temp;
  #L50e070.  if v1 != 0 then goto L50e0a8;
  #L50e074.  v1:= v3.`i.b.i` @type ^`java.util.WeakHashMap` @kind object;
  #L50e078.  call temp:= `keySet`(v1) @signature `Ljava/util/WeakHashMap;.keySet:()Ljava/util/Set;` @kind virtual;
  #L50e07e.  v1:= temp @kind object;
  #L50e080.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L50e086.  v1:= temp @kind object;
  #L50e088.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L50e08e.  v2:= temp;
  #L50e090.  if v2 == 0 then goto L50e0a8;
  #L50e094.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L50e09a.  v2:= temp @kind object;
  #L50e09c.  v2:= (`i.b$f`) v2 @kind object;
  #L50e0a0.  call `a`(v2, v4) @signature `Li/b$f;.a:(Li/b$c;)V` @kind interface;
  #L50e0a6.  goto L50e088;
  #L50e0a8.  v1:= v4.`i.b$c.j` @type ^`i.b$c` @kind object;
  #L50e0ac.  if v1 == 0 then goto L50e0ba;
  #L50e0b0.  v2:= v4.`i.b$c.i` @type ^`i.b$c` @kind object;
  #L50e0b4.  v1.`i.b$c.i` @type ^`i.b$c` := v2 @kind object;
  #L50e0b8.  goto L50e0c2;
  #L50e0ba.  v2:= v4.`i.b$c.i` @type ^`i.b$c` @kind object;
  #L50e0be.  v3.`i.b.g` @type ^`i.b$c` := v2 @kind object;
  #L50e0c2.  v2:= v4.`i.b$c.i` @type ^`i.b$c` @kind object;
  #L50e0c6.  if v2 == 0 then goto L50e0d0;
  #L50e0ca.  v2.`i.b$c.j` @type ^`i.b$c` := v1 @kind object;
  #L50e0ce.  goto L50e0d4;
  #L50e0d0.  v3.`i.b.h` @type ^`i.b$c` := v1 @kind object;
  #L50e0d4.  v4.`i.b$c.i` @type ^`i.b$c` := v0 @kind object;
  #L50e0d8.  v4.`i.b$c.j` @type ^`i.b$c` := v0 @kind object;
  #L50e0dc.  v4:= v4.`i.b$c.h` @type ^`java.lang.Object` @kind object;
  #L50e0e0.  return v4 @kind object;
}
procedure `int` `size`(`i.b` v1 @kind this) @signature `Li/b;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50e004.  v0:= v1.`i.b.j` @type ^`int`;
  #L50e008.  return v0;
}
procedure `java.lang.String` `toString`(`i.b` v3 @kind this) @signature `Li/b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L50e0f4.  v0:= new `java.lang.StringBuilder`;
  #L50e0f8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L50e0fe.  v1:= "[" @kind object;
  #L50e102.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50e108.  call temp:= `iterator`(v3) @signature `Li/b;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L50e10e.  v1:= temp @kind object;
  #L50e110.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L50e116.  v2:= temp;
  #L50e118.  if v2 == 0 then goto L50e14e;
  #L50e11c.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L50e122.  v2:= temp @kind object;
  #L50e124.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L50e128.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L50e12e.  v2:= temp @kind object;
  #L50e130.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50e136.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L50e13c.  v2:= temp;
  #L50e13e.  if v2 == 0 then goto L50e110;
  #L50e142.  v2:= ", " @kind object;
  #L50e146.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50e14c.  goto L50e110;
  #L50e14e.  v1:= "]" @kind object;
  #L50e152.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50e158.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L50e15e.  v0:= temp @kind object;
  #L50e160.  return v0 @kind object;
}
