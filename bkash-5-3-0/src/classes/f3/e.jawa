record `f3.e` @kind class @AccessFlag PUBLIC extends `java.util.concurrent.RunnableFuture` @kind interface, `java.util.concurrent.ScheduledFuture` @kind interface {
  `java.util.concurrent.FutureTask` `f3.e.g` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`f3.e` v0 @kind this, `android.os.Handler` v1 @kind object, `java.lang.Runnable` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lf3/e;.<init>:(Landroid/os/Handler;Ljava/lang/Runnable;Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L502dc8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L502dce.  v1:= new `java.util.concurrent.FutureTask`;
  #L502dd2.  call `<init>`(v1, v2, v3) @signature `Ljava/util/concurrent/FutureTask;.<init>:(Ljava/lang/Runnable;Ljava/lang/Object;)V` @kind direct;
  #L502dd8.  v0.`f3.e.g` @type ^`java.util.concurrent.FutureTask` := v1 @kind object;
  #L502ddc.  return @kind void;
}
procedure `void` `<init>`(`f3.e` v0 @kind this, `android.os.Handler` v1 @kind object, `java.util.concurrent.Callable` v2 @kind object) @signature `Lf3/e;.<init>:(Landroid/os/Handler;Ljava/util/concurrent/Callable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L502df0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L502df6.  v1:= new `java.util.concurrent.FutureTask`;
  #L502dfa.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/FutureTask;.<init>:(Ljava/util/concurrent/Callable;)V` @kind direct;
  #L502e00.  v0.`f3.e.g` @type ^`java.util.concurrent.FutureTask` := v1 @kind object;
  #L502e04.  return @kind void;
}
procedure `int` `c`(`f3.e` v0 @kind this, `java.util.concurrent.Delayed` v1 @kind object) @signature `Lf3/e;.c:(Ljava/util/concurrent/Delayed;)I` @AccessFlag PUBLIC {
    temp;

  #L502d50.  v1:= new `java.lang.UnsupportedOperationException`;
  #L502d54.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L502d5a.  throw v1;
}
procedure `boolean` `cancel`(`f3.e` v1 @kind this, `boolean` v2 ) @signature `Lf3/e;.cancel:(Z)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L502cd0.  v0:= v1.`f3.e.g` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L502cd4.  call temp:= `cancel`(v0, v2) @signature `Ljava/util/concurrent/FutureTask;.cancel:(Z)Z` @kind virtual;
  #L502cda.  v2:= temp;
  #L502cdc.  return v2;
}
procedure `int` `compareTo`(`f3.e` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lf3/e;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L502d30.  v1:= (`java.util.concurrent.Delayed`) v1 @kind object;
  #L502d34.  call temp:= `c`(v0, v1) @signature `Lf3/e;.c:(Ljava/util/concurrent/Delayed;)I` @kind virtual;
  #L502d3a.  v1:= temp;
  #L502d3c.  return v1;
}
procedure `java.lang.Object` `get`(`f3.e` v1 @kind this) @signature `Lf3/e;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L502d6c.  v0:= v1.`f3.e.g` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L502d70.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/FutureTask;.get:()Ljava/lang/Object;` @kind virtual;
  #L502d76.  v0:= temp @kind object;
  #L502d78.  return v0 @kind object;
}
procedure `java.lang.Object` `get`(`f3.e` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lf3/e;.get:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L502d8c.  v0:= v1.`f3.e.g` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L502d90.  call temp:= `get`(v0, v2, v4) @signature `Ljava/util/concurrent/FutureTask;.get:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;` @kind virtual;
  #L502d96.  v2:= temp @kind object;
  #L502d98.  return v2 @kind object;
}
procedure `long` `getDelay`(`f3.e` v0 @kind this, `java.util.concurrent.TimeUnit` v1 @kind object) @signature `Lf3/e;.getDelay:(Ljava/util/concurrent/TimeUnit;)J` @AccessFlag PUBLIC {
    temp;

  #L502dac.  v1:= new `java.lang.UnsupportedOperationException`;
  #L502db0.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L502db6.  throw v1;
}
procedure `boolean` `isCancelled`(`f3.e` v1 @kind this) @signature `Lf3/e;.isCancelled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L502cf0.  v0:= v1.`f3.e.g` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L502cf4.  call temp:= `isCancelled`(v0) @signature `Ljava/util/concurrent/FutureTask;.isCancelled:()Z` @kind virtual;
  #L502cfa.  v0:= temp;
  #L502cfc.  return v0;
}
procedure `boolean` `isDone`(`f3.e` v1 @kind this) @signature `Lf3/e;.isDone:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L502d10.  v0:= v1.`f3.e.g` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L502d14.  call temp:= `isDone`(v0) @signature `Ljava/util/concurrent/FutureTask;.isDone:()Z` @kind virtual;
  #L502d1a.  v0:= temp;
  #L502d1c.  return v0;
}
procedure `void` `run`(`f3.e` v1 @kind this) @signature `Lf3/e;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L502e18.  v0:= v1.`f3.e.g` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L502e1c.  call `run`(v0) @signature `Ljava/util/concurrent/FutureTask;.run:()V` @kind virtual;
  #L502e22.  return @kind void;
}
