record `f3.f` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.lang.Runnable` @kind interface {
  `java.util.concurrent.atomic.AtomicInteger` `f3.f.g` @AccessFlag PROTECTED_FINAL;
}
procedure `void` `<init>`(`f3.f` v2 @kind this) @signature `Lf3/f;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L502e34.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L502e3a.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L502e3e.  v1:= 0I;
  #L502e40.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L502e46.  v2.`f3.f.g` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L502e4a.  return @kind void;
}
procedure `void` `a`(`f3.f` v3 @kind this) @signature `Lf3/f;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L502e5c.  v0:= v3.`f3.f.g` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L502e60.  v1:= 0I;
  #L502e62.  v2:= 2I;
  #L502e64.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L502e6a.  v0:= temp;
  #L502e6c.  if v0 == 0 then goto L502e76;
  #L502e70.  call `d`(v3) @signature `Lf3/f;.d:()V` @kind virtual;
  #L502e76.  return @kind void;
}
procedure `void` `b`(`java.lang.Object` v0 @kind object) @signature `Lf3/f;.b:(Ljava/lang/Object;)V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `c`() @signature `Lf3/f;.c:()Ljava/lang/Object;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `d`() @signature `Lf3/f;.d:()V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `e`(`java.lang.Exception` v0 @kind object) @signature `Lf3/f;.e:(Ljava/lang/Exception;)V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `f`(`java.lang.Object` v0 @kind object) @signature `Lf3/f;.f:(Ljava/lang/Object;)V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `run`(`f3.f` v3 @kind this) @signature `Lf3/f;.run:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L502e88.  v0:= v3.`f3.f.g` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L502e8c.  v1:= 0I;
  #L502e8e.  v2:= 1I;
  #L502e90.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L502e96.  v0:= temp;
  #L502e98.  if v0 != 0 then goto L502e9e;
  #L502e9c.  return @kind void;
  #L502e9e.  call temp:= `c`(v3) @signature `Lf3/f;.c:()Ljava/lang/Object;` @kind virtual;
  #L502ea4.  v0:= temp @kind object;
  #L502ea6.  v1:= v3.`f3.f.g` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L502eaa.  v2:= 3I;
  #L502eac.  call `set`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L502eb2.  call `f`(v3, v0) @signature `Lf3/f;.f:(Ljava/lang/Object;)V` @kind virtual;
  #L502eb8.  call `b`(v3, v0) @signature `Lf3/f;.b:(Ljava/lang/Object;)V` @kind virtual;
  #L502ebe.  return @kind void;
  #L502ec0.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L502ec2.  call `b`(v3, v0) @signature `Lf3/f;.b:(Ljava/lang/Object;)V` @kind virtual;
  #L502ec8.  throw v1;
  #L502eca.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L502ecc.  v1:= v3.`f3.f.g` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L502ed0.  v2:= 4I;
  #L502ed2.  call `set`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L502ed8.  call `e`(v3, v0) @signature `Lf3/f;.e:(Ljava/lang/Exception;)V` @kind virtual;
  #L502ede.  return @kind void;
  catch `java.lang.Exception` @[L502e9e..L502ea6] goto L502eca;
  catch `java.lang.Throwable` @[L502eb2..L502eb8] goto L502ec0;
}
