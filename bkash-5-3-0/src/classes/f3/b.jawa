record `f3.b` @kind class @AccessFlag PUBLIC extends `java.util.concurrent.AbstractExecutorService` @kind class {
  `java.lang.String` `f3.b.g` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.Executor` `f3.b.h` @AccessFlag PRIVATE_FINAL;
  `int` `f3.b.i` @AccessFlag PRIVATE_VOLATILE;
  `java.util.concurrent.BlockingQueue` `f3.b.j` @AccessFlag PRIVATE_FINAL;
  `f3.b$b` `f3.b.k` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `f3.b.l` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `f3.b.m` @AccessFlag PRIVATE_FINAL;
}
global `java.lang.Class` `@@f3.b.n` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lf3/b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L5027b8.  v0:= constclass @type ^`f3.b` @kind object;
  #L5027bc.  `@@f3.b.n` @type ^`java.lang.Class` := v0 @kind object;
  #L5027c0.  return @kind void;
}
procedure `void` `<init>`(`f3.b` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `java.util.concurrent.Executor` v3 @kind object, `java.util.concurrent.BlockingQueue` v4 @kind object) @signature `Lf3/b;.<init>:(Ljava/lang/String;ILjava/util/concurrent/Executor;Ljava/util/concurrent/BlockingQueue;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L5027d4.  call `<init>`(v0) @signature `Ljava/util/concurrent/AbstractExecutorService;.<init>:()V` @kind direct;
  #L5027da.  if v2 <= 0 then goto L50281e;
  #L5027de.  v0.`f3.b.g` @type ^`java.lang.String` := v1 @kind object;
  #L5027e2.  v0.`f3.b.h` @type ^`java.util.concurrent.Executor` := v3 @kind object;
  #L5027e6.  v0.`f3.b.i` @type ^`int` := v2;
  #L5027ea.  v0.`f3.b.j` @type ^`java.util.concurrent.BlockingQueue` := v4 @kind object;
  #L5027ee.  v1:= new `f3.b$b`;
  #L5027f2.  v2:= 0I;
  #L5027f4.  call `<init>`(v1, v0, v2) @signature `Lf3/b$b;.<init>:(Lf3/b;Lf3/b$a;)V` @kind direct;
  #L5027fa.  v0.`f3.b.k` @type ^`f3.b$b` := v1 @kind object;
  #L5027fe.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L502802.  v2:= 0I;
  #L502804.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L50280a.  v0.`f3.b.l` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L50280e.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L502812.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L502818.  v0.`f3.b.m` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L50281c.  return @kind void;
  #L50281e.  v1:= new `java.lang.IllegalArgumentException`;
  #L502822.  v2:= "max concurrency must be > 0" @kind object;
  #L502826.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50282c.  throw v1;
}
procedure `java.util.concurrent.BlockingQueue` `a`(`f3.b` v0 @kind object) @signature `Lf3/b;.a:(Lf3/b;)Ljava/util/concurrent/BlockingQueue;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L502788.  v0:= v0.`f3.b.j` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L50278c.  return v0 @kind object;
}
procedure `java.lang.Class` `b`() @signature `Lf3/b;.b:()Ljava/lang/Class;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L50273c.  v0:= `@@f3.b.n` @type ^`java.lang.Class` @kind object;
  #L502740.  return v0 @kind object;
}
procedure `java.lang.String` `c`(`f3.b` v0 @kind object) @signature `Lf3/b;.c:(Lf3/b;)Ljava/lang/String;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L502754.  v0:= v0.`f3.b.g` @type ^`java.lang.String` @kind object;
  #L502758.  return v0 @kind object;
}
procedure `java.util.concurrent.atomic.AtomicInteger` `d`(`f3.b` v0 @kind object) @signature `Lf3/b;.d:(Lf3/b;)Ljava/util/concurrent/atomic/AtomicInteger;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L5027a0.  v0:= v0.`f3.b.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L5027a4.  return v0 @kind object;
}
procedure `void` `e`(`f3.b` v0 @kind object) @signature `Lf3/b;.e:(Lf3/b;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L502840.  call `f`(v0) @signature `Lf3/b;.f:()V` @kind direct;
  #L502846.  return @kind void;
}
procedure `void` `f`(`f3.b` v5 @kind this) @signature `Lf3/b;.f:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L502930.  v0:= v5.`f3.b.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L502934.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L50293a.  v0:= temp;
  #L50293c.  v1:= v5.`f3.b.i` @type ^`int`;
  #L502940.  if v0 >= v1 then goto L5029ae;
  #L502944.  v1:= v0 + 1;
  #L502948.  v2:= v5.`f3.b.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L50294c.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L502952.  v0:= temp;
  #L502954.  if v0 == 0 then goto L50298e;
  #L502958.  v0:= `@@f3.b.n` @type ^`java.lang.Class` @kind object;
  #L50295c.  v2:= v5.`f3.b.g` @type ^`java.lang.String` @kind object;
  #L502960.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L502966.  v1:= temp @kind object;
  #L502968.  v3:= v5.`f3.b.i` @type ^`int`;
  #L50296c.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L502972.  v3:= temp @kind object;
  #L502974.  v4:= "%s: starting worker %d of %d" @kind object;
  #L502978.  call `q`(v0, v4, v2, v1, v3) @signature `Li3/a;.q:(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L50297e.  v0:= v5.`f3.b.h` @type ^`java.util.concurrent.Executor` @kind object;
  #L502982.  v1:= v5.`f3.b.k` @type ^`f3.b$b` @kind object;
  #L502986.  call `execute`(v0, v1) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L50298c.  goto L5029ae;
  #L50298e.  v0:= `@@f3.b.n` @type ^`java.lang.Class` @kind object;
  #L502992.  v1:= v5.`f3.b.g` @type ^`java.lang.String` @kind object;
  #L502996.  v2:= "%s: race in startWorkerIfNeeded; retrying" @kind object;
  #L50299a.  call `o`(v0, v2, v1) @signature `Li3/a;.o:(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Object;)V` @kind static;
  #L5029a0.  v0:= v5.`f3.b.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L5029a4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L5029aa.  v0:= temp;
  #L5029ac.  goto L50293c;
  #L5029ae.  return @kind void;
}
procedure `boolean` `awaitTermination`(`f3.b` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object) @signature `Lf3/b;.awaitTermination:(JLjava/util/concurrent/TimeUnit;)Z` @AccessFlag PUBLIC {
    temp;

  #L5026f8.  v1:= new `java.lang.UnsupportedOperationException`;
  #L5026fc.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L502702.  throw v1;
}
procedure `void` `execute`(`f3.b` v3 @kind this, `java.lang.Runnable` v4 @kind object) @signature `Lf3/b;.execute:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L502858.  v0:= "runnable parameter is null" @kind object;
  #L50285c.  call temp:= `requireNonNull`(v4, v0) @signature `Ljava/util/Objects;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L502862.  v0:= v3.`f3.b.j` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L502866.  call temp:= `offer`(v0, v4) @signature `Ljava/util/concurrent/BlockingQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L50286c.  v4:= temp;
  #L50286e.  if v4 == 0 then goto L5028c0;
  #L502872.  v4:= v3.`f3.b.j` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L502876.  call temp:= `size`(v4) @signature `Ljava/util/concurrent/BlockingQueue;.size:()I` @kind interface;
  #L50287c.  v4:= temp;
  #L50287e.  v0:= v3.`f3.b.m` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L502882.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L502888.  v0:= temp;
  #L50288a.  if v4 <= v0 then goto L5028b8;
  #L50288e.  v1:= v3.`f3.b.m` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L502892.  call temp:= `compareAndSet`(v1, v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L502898.  v0:= temp;
  #L50289a.  if v0 == 0 then goto L5028b8;
  #L50289e.  v0:= `@@f3.b.n` @type ^`java.lang.Class` @kind object;
  #L5028a2.  v1:= v3.`f3.b.g` @type ^`java.lang.String` @kind object;
  #L5028a6.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L5028ac.  v4:= temp @kind object;
  #L5028ae.  v2:= "%s: max pending work in queue = %d" @kind object;
  #L5028b2.  call `p`(v0, v2, v1, v4) @signature `Li3/a;.p:(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L5028b8.  call `f`(v3) @signature `Lf3/b;.f:()V` @kind direct;
  #L5028be.  return @kind void;
  #L5028c0.  v4:= new `java.util.concurrent.RejectedExecutionException`;
  #L5028c4.  v0:= new `java.lang.StringBuilder`;
  #L5028c8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L5028ce.  v1:= v3.`f3.b.g` @type ^`java.lang.String` @kind object;
  #L5028d2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L5028d8.  v1:= " queue is full, size=" @kind object;
  #L5028dc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L5028e2.  v1:= v3.`f3.b.j` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L5028e6.  call temp:= `size`(v1) @signature `Ljava/util/concurrent/BlockingQueue;.size:()I` @kind interface;
  #L5028ec.  v1:= temp;
  #L5028ee.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L5028f4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L5028fa.  v0:= temp @kind object;
  #L5028fc.  call `<init>`(v4, v0) @signature `Ljava/util/concurrent/RejectedExecutionException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L502902.  throw v4;
}
procedure `boolean` `isShutdown`(`f3.b` v1 @kind this) @signature `Lf3/b;.isShutdown:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L502714.  v0:= 0I;
  #L502716.  return v0;
}
procedure `boolean` `isTerminated`(`f3.b` v1 @kind this) @signature `Lf3/b;.isTerminated:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L502728.  v0:= 0I;
  #L50272a.  return v0;
}
procedure `void` `shutdown`(`f3.b` v1 @kind this) @signature `Lf3/b;.shutdown:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L502914.  v0:= new `java.lang.UnsupportedOperationException`;
  #L502918.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L50291e.  throw v0;
}
procedure `java.util.List` `shutdownNow`(`f3.b` v1 @kind this) @signature `Lf3/b;.shutdownNow:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50276c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L502770.  call `<init>`(v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L502776.  throw v0;
}
