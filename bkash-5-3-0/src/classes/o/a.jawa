record `o.a` @kind class @AccessFlag PUBLIC extends `o.b` @kind class {
  `double`[] `o.a.a` @AccessFlag PRIVATE_FINAL;
  `o.a$a`[] `o.a.b` @AccessFlag ;
  `boolean` `o.a.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`o.a` v24 @kind this, `int`[] v25 @kind object, `double`[] v26 @kind object, `double`[][] v27 @kind object) @signature `Lo/a;.<init>:([I[D[[D)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;
    v22;
    v23;

  #L53ec18.  v0:= v24 @kind object;
  #L53ec1c.  v1:= v26 @kind object;
  #L53ec20.  call `<init>`(v24) @signature `Lo/b;.<init>:()V` @kind direct;
  #L53ec26.  v2:= 1I;
  #L53ec28.  v0.`o.a.c` @type ^`boolean` := v2 @kind boolean;
  #L53ec2c.  v0.`o.a.a` @type ^`double`[] := v1 @kind object;
  #L53ec30.  v3:= length @variable v1;
  #L53ec32.  v3:= v3 - v2 @kind int;
  #L53ec34.  v3:= new `o.a$a`[v3];
  #L53ec38.  v0.`o.a.b` @type ^`o.a$a`[] := v3 @kind object;
  #L53ec3c.  v3:= 0I;
  #L53ec3e.  v4:= 0I;
  #L53ec40.  v5:= 1I;
  #L53ec42.  v6:= 1I;
  #L53ec44.  v7:= v0.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53ec48.  v8:= length @variable v7;
  #L53ec4a.  if v4 >= v8 then goto L53ecca;
  #L53ec4e.  v8:= v25[v4];
  #L53ec52.  v9:= 3I;
  #L53ec54.  v10:= 2I;
  #L53ec56.  if v8 == 0 then goto L53ec82;
  #L53ec5a.  if v8 == v2 then goto L53ec7c;
  #L53ec5e.  if v8 == v10 then goto L53ec76;
  #L53ec62.  if v8 == v9 then goto L53ec68;
  #L53ec66.  goto L53ec84;
  #L53ec68.  if v5 != v2 then goto L53ec70;
  #L53ec6c.  v5:= 2I;
  #L53ec6e.  goto L53ec72;
  #L53ec70.  v5:= 1I;
  #L53ec72.  v6:= v5;
  #L53ec74.  goto L53ec84;
  #L53ec76.  v5:= 2I;
  #L53ec78.  v6:= 2I;
  #L53ec7a.  goto L53ec84;
  #L53ec7c.  v5:= 1I;
  #L53ec7e.  v6:= 1I;
  #L53ec80.  goto L53ec84;
  #L53ec82.  v6:= 3I;
  #L53ec84.  v22:= new `o.a$a`;
  #L53ec88.  v10:= v1[v4] @kind wide;
  #L53ec8c.  v23:= v4 + 1;
  #L53ec90.  v12:= v1[v23] @kind wide;
  #L53ec94.  v8:= v27[v4] @kind object;
  #L53ec98.  v14:= v8[v3] @kind wide;
  #L53ec9c.  v8:= v27[v4] @kind object;
  #L53eca0.  v16:= v8[v2] @kind wide;
  #L53eca4.  v8:= v27[v23] @kind object;
  #L53eca8.  v18:= v8[v3] @kind wide;
  #L53ecac.  v8:= v27[v23] @kind object;
  #L53ecb0.  v20:= v8[v2] @kind wide;
  #L53ecb4.  v8:= v22 @kind object;
  #L53ecb8.  v9:= v6;
  #L53ecba.  call `<init>`(v8, v9, v10, v12, v14, v16, v18, v20) @signature `Lo/a$a;.<init>:(IDDDDDD)V` @kind direct;
  #L53ecc0.  v7[v4]:= v22 @kind object;
  #L53ecc4.  v4:= v23;
  #L53ecc8.  goto L53ec44;
  #L53ecca.  return @kind void;
}
procedure `double` `c`(`o.a` v6 @kind this, `double` v7 , `int` v9 ) @signature `Lo/a;.c:(DI)D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L53e90c.  v0:= v6.`o.a.c` @type ^`boolean` @kind boolean;
  #L53e910.  v1:= 0I;
  #L53e912.  if v0 == 0 then goto L53ea52;
  #L53e916.  v0:= v6.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53e91a.  v2:= v0[v1] @kind object;
  #L53e91e.  v2:= v2.`o.a$a.c` @type ^`double` @kind wide;
  #L53e922.  v4:= dcmpg(v7, v2);
  #L53e926.  if v4 >= 0 then goto L53e9e6;
  #L53e92a.  v2:= v0[v1] @kind object;
  #L53e92e.  v2:= v2.`o.a$a.c` @type ^`double` @kind wide;
  #L53e932.  v4:= v0[v1] @kind object;
  #L53e936.  v4:= v4.`o.a$a.c` @type ^`double` @kind wide;
  #L53e93a.  v7:= v7 - v4 @kind double;
  #L53e93c.  v4:= v0[v1] @kind object;
  #L53e940.  v4:= v4.`o.a$a.r` @type ^`boolean` @kind boolean;
  #L53e944.  if v4 == 0 then goto L53e98e;
  #L53e948.  if v9 != 0 then goto L53e970;
  #L53e94c.  v9:= v0[v1] @kind object;
  #L53e950.  call temp:= `f`(v9, v2) @signature `Lo/a$a;.f:(D)D` @kind virtual;
  #L53e956.  v4:= temp @kind wide;
  #L53e958.  v9:= v6.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53e95c.  v9:= v9[v1] @kind object;
  #L53e960.  call temp:= `d`(v9, v2) @signature `Lo/a$a;.d:(D)D` @kind virtual;
  #L53e966.  v0:= temp @kind wide;
  #L53e968.  v7:= v7 * v0 @kind double;
  #L53e96c.  v4:= v4 + v7 @kind double;
  #L53e96e.  return v4 @kind wide;
  #L53e970.  v9:= v0[v1] @kind object;
  #L53e974.  call temp:= `g`(v9, v2) @signature `Lo/a$a;.g:(D)D` @kind virtual;
  #L53e97a.  v4:= temp @kind wide;
  #L53e97c.  v9:= v6.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53e980.  v9:= v9[v1] @kind object;
  #L53e984.  call temp:= `e`(v9, v2) @signature `Lo/a$a;.e:(D)D` @kind virtual;
  #L53e98a.  v0:= temp @kind wide;
  #L53e98c.  goto L53e968;
  #L53e98e.  v0:= v0[v1] @kind object;
  #L53e992.  call `k`(v0, v2) @signature `Lo/a$a;.k:(D)V` @kind virtual;
  #L53e998.  if v9 != 0 then goto L53e9c4;
  #L53e99c.  v9:= v6.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53e9a0.  v9:= v9[v1] @kind object;
  #L53e9a4.  call temp:= `h`(v9) @signature `Lo/a$a;.h:()D` @kind virtual;
  #L53e9aa.  v2:= temp @kind wide;
  #L53e9ac.  v9:= v6.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53e9b0.  v9:= v9[v1] @kind object;
  #L53e9b4.  call temp:= `b`(v9) @signature `Lo/a$a;.b:()D` @kind virtual;
  #L53e9ba.  v0:= temp @kind wide;
  #L53e9bc.  v7:= v7 * v0 @kind double;
  #L53e9c0.  v2:= v2 + v7 @kind double;
  #L53e9c2.  return v2 @kind wide;
  #L53e9c4.  v9:= v6.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53e9c8.  v9:= v9[v1] @kind object;
  #L53e9cc.  call temp:= `i`(v9) @signature `Lo/a$a;.i:()D` @kind virtual;
  #L53e9d2.  v2:= temp @kind wide;
  #L53e9d4.  v9:= v6.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53e9d8.  v9:= v9[v1] @kind object;
  #L53e9dc.  call temp:= `c`(v9) @signature `Lo/a$a;.c:()D` @kind virtual;
  #L53e9e2.  v0:= temp @kind wide;
  #L53e9e4.  goto L53e9bc;
  #L53e9e6.  v2:= length @variable v0;
  #L53e9e8.  v2:= v2 + -1;
  #L53e9ec.  v2:= v0[v2] @kind object;
  #L53e9f0.  v2:= v2.`o.a$a.d` @type ^`double` @kind wide;
  #L53e9f4.  v4:= dcmpl(v7, v2);
  #L53e9f8.  if v4 <= 0 then goto L53ea94;
  #L53e9fc.  v1:= length @variable v0;
  #L53e9fe.  v1:= v1 + -1;
  #L53ea02.  v1:= v0[v1] @kind object;
  #L53ea06.  v1:= v1.`o.a$a.d` @type ^`double` @kind wide;
  #L53ea0a.  v7:= v7 - v1 @kind double;
  #L53ea0c.  v3:= length @variable v0;
  #L53ea0e.  v3:= v3 + -1;
  #L53ea12.  if v9 != 0 then goto L53ea34;
  #L53ea16.  v9:= v0[v3] @kind object;
  #L53ea1a.  call temp:= `f`(v9, v1) @signature `Lo/a$a;.f:(D)D` @kind virtual;
  #L53ea20.  v4:= temp @kind wide;
  #L53ea22.  v9:= v6.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53ea26.  v9:= v9[v3] @kind object;
  #L53ea2a.  call temp:= `d`(v9, v1) @signature `Lo/a$a;.d:(D)D` @kind virtual;
  #L53ea30.  v0:= temp @kind wide;
  #L53ea32.  goto L53e968;
  #L53ea34.  v9:= v0[v3] @kind object;
  #L53ea38.  call temp:= `g`(v9, v1) @signature `Lo/a$a;.g:(D)D` @kind virtual;
  #L53ea3e.  v4:= temp @kind wide;
  #L53ea40.  v9:= v6.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53ea44.  v9:= v9[v3] @kind object;
  #L53ea48.  call temp:= `e`(v9, v1) @signature `Lo/a$a;.e:(D)D` @kind virtual;
  #L53ea4e.  v0:= temp @kind wide;
  #L53ea50.  goto L53e968;
  #L53ea52.  v0:= v6.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53ea56.  v2:= v0[v1] @kind object;
  #L53ea5a.  v2:= v2.`o.a$a.c` @type ^`double` @kind wide;
  #L53ea5e.  v4:= dcmpg(v7, v2);
  #L53ea62.  if v4 >= 0 then goto L53ea70;
  #L53ea66.  v7:= v0[v1] @kind object;
  #L53ea6a.  v7:= v7.`o.a$a.c` @type ^`double` @kind wide;
  #L53ea6e.  goto L53ea94;
  #L53ea70.  v2:= length @variable v0;
  #L53ea72.  v2:= v2 + -1;
  #L53ea76.  v2:= v0[v2] @kind object;
  #L53ea7a.  v2:= v2.`o.a$a.d` @type ^`double` @kind wide;
  #L53ea7e.  v4:= dcmpl(v7, v2);
  #L53ea82.  if v4 <= 0 then goto L53ea94;
  #L53ea86.  v7:= length @variable v0;
  #L53ea88.  v7:= v7 + -1;
  #L53ea8c.  v7:= v0[v7] @kind object;
  #L53ea90.  v7:= v7.`o.a$a.d` @type ^`double` @kind wide;
  #L53ea94.  v0:= v6.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53ea98.  v2:= length @variable v0;
  #L53ea9a.  if v1 >= v2 then goto L53eb12;
  #L53ea9e.  v2:= v0[v1] @kind object;
  #L53eaa2.  v2:= v2.`o.a$a.d` @type ^`double` @kind wide;
  #L53eaa6.  v4:= dcmpg(v7, v2);
  #L53eaaa.  if v4 > 0 then goto L53eb0c;
  #L53eaae.  v2:= v0[v1] @kind object;
  #L53eab2.  v2:= v2.`o.a$a.r` @type ^`boolean` @kind boolean;
  #L53eab6.  if v2 == 0 then goto L53eada;
  #L53eaba.  if v9 != 0 then goto L53eacc;
  #L53eabe.  v9:= v0[v1] @kind object;
  #L53eac2.  call temp:= `f`(v9, v7) @signature `Lo/a$a;.f:(D)D` @kind virtual;
  #L53eac8.  v7:= temp @kind wide;
  #L53eaca.  return v7 @kind wide;
  #L53eacc.  v9:= v0[v1] @kind object;
  #L53ead0.  call temp:= `g`(v9, v7) @signature `Lo/a$a;.g:(D)D` @kind virtual;
  #L53ead6.  v7:= temp @kind wide;
  #L53ead8.  return v7 @kind wide;
  #L53eada.  v0:= v0[v1] @kind object;
  #L53eade.  call `k`(v0, v7) @signature `Lo/a$a;.k:(D)V` @kind virtual;
  #L53eae4.  if v9 != 0 then goto L53eafa;
  #L53eae8.  v7:= v6.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53eaec.  v7:= v7[v1] @kind object;
  #L53eaf0.  call temp:= `h`(v7) @signature `Lo/a$a;.h:()D` @kind virtual;
  #L53eaf6.  v7:= temp @kind wide;
  #L53eaf8.  return v7 @kind wide;
  #L53eafa.  v7:= v6.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53eafe.  v7:= v7[v1] @kind object;
  #L53eb02.  call temp:= `i`(v7) @signature `Lo/a$a;.i:()D` @kind virtual;
  #L53eb08.  v7:= temp @kind wide;
  #L53eb0a.  return v7 @kind wide;
  #L53eb0c.  v1:= v1 + 1;
  #L53eb10.  goto L53ea94;
  #L53eb12.  v7:= NaND;
  #L53eb16.  return v7 @kind wide;
}
procedure `void` `d`(`o.a` v10 @kind this, `double` v11 , `double`[] v13 @kind object) @signature `Lo/a;.d:(D[D)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L53ecdc.  v0:= v10.`o.a.c` @type ^`boolean` @kind boolean;
  #L53ece0.  v1:= 1I;
  #L53ece2.  v2:= 0I;
  #L53ece4.  if v0 == 0 then goto L53eeb2;
  #L53ece8.  v0:= v10.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53ecec.  v3:= v0[v2] @kind object;
  #L53ecf0.  v3:= v3.`o.a$a.c` @type ^`double` @kind wide;
  #L53ecf4.  v5:= dcmpg(v11, v3);
  #L53ecf8.  if v5 >= 0 then goto L53edcc;
  #L53ecfc.  v3:= v0[v2] @kind object;
  #L53ed00.  v3:= v3.`o.a$a.c` @type ^`double` @kind wide;
  #L53ed04.  v5:= v0[v2] @kind object;
  #L53ed08.  v5:= v5.`o.a$a.c` @type ^`double` @kind wide;
  #L53ed0c.  v11:= v11 - v5 @kind double;
  #L53ed0e.  v5:= v0[v2] @kind object;
  #L53ed12.  v5:= v5.`o.a$a.r` @type ^`boolean` @kind boolean;
  #L53ed16.  if v5 == 0 then goto L53ed6c;
  #L53ed1a.  v0:= v0[v2] @kind object;
  #L53ed1e.  call temp:= `f`(v0, v3) @signature `Lo/a$a;.f:(D)D` @kind virtual;
  #L53ed24.  v5:= temp @kind wide;
  #L53ed26.  v0:= v10.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53ed2a.  v0:= v0[v2] @kind object;
  #L53ed2e.  call temp:= `d`(v0, v3) @signature `Lo/a$a;.d:(D)D` @kind virtual;
  #L53ed34.  v7:= temp @kind wide;
  #L53ed36.  v7:= v7 * v11 @kind double;
  #L53ed3a.  v5:= v5 + v7 @kind double;
  #L53ed3c.  v13[v2]:= v5 @kind wide;
  #L53ed40.  v0:= v10.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53ed44.  v0:= v0[v2] @kind object;
  #L53ed48.  call temp:= `g`(v0, v3) @signature `Lo/a$a;.g:(D)D` @kind virtual;
  #L53ed4e.  v5:= temp @kind wide;
  #L53ed50.  v0:= v10.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53ed54.  v0:= v0[v2] @kind object;
  #L53ed58.  call temp:= `e`(v0, v3) @signature `Lo/a$a;.e:(D)D` @kind virtual;
  #L53ed5e.  v2:= temp @kind wide;
  #L53ed60.  v11:= v11 * v2 @kind double;
  #L53ed64.  v5:= v5 + v11 @kind double;
  #L53ed66.  v13[v1]:= v5 @kind wide;
  #L53ed6a.  goto L53edca;
  #L53ed6c.  v0:= v0[v2] @kind object;
  #L53ed70.  call `k`(v0, v3) @signature `Lo/a$a;.k:(D)V` @kind virtual;
  #L53ed76.  v0:= v10.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53ed7a.  v0:= v0[v2] @kind object;
  #L53ed7e.  call temp:= `h`(v0) @signature `Lo/a$a;.h:()D` @kind virtual;
  #L53ed84.  v3:= temp @kind wide;
  #L53ed86.  v0:= v10.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53ed8a.  v0:= v0[v2] @kind object;
  #L53ed8e.  call temp:= `b`(v0) @signature `Lo/a$a;.b:()D` @kind virtual;
  #L53ed94.  v5:= temp @kind wide;
  #L53ed96.  v5:= v5 * v11 @kind double;
  #L53ed9a.  v3:= v3 + v5 @kind double;
  #L53ed9c.  v13[v2]:= v3 @kind wide;
  #L53eda0.  v0:= v10.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53eda4.  v0:= v0[v2] @kind object;
  #L53eda8.  call temp:= `i`(v0) @signature `Lo/a$a;.i:()D` @kind virtual;
  #L53edae.  v3:= temp @kind wide;
  #L53edb0.  v0:= v10.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53edb4.  v0:= v0[v2] @kind object;
  #L53edb8.  call temp:= `c`(v0) @signature `Lo/a$a;.c:()D` @kind virtual;
  #L53edbe.  v5:= temp @kind wide;
  #L53edc0.  v11:= v11 * v5 @kind double;
  #L53edc4.  v3:= v3 + v11 @kind double;
  #L53edc6.  v13[v1]:= v3 @kind wide;
  #L53edca.  return @kind void;
  #L53edcc.  v3:= length @variable v0;
  #L53edce.  v3:= v3 - v1 @kind int;
  #L53edd0.  v3:= v0[v3] @kind object;
  #L53edd4.  v3:= v3.`o.a$a.d` @type ^`double` @kind wide;
  #L53edd8.  v5:= dcmpl(v11, v3);
  #L53eddc.  if v5 <= 0 then goto L53eeee;
  #L53ede0.  v3:= length @variable v0;
  #L53ede2.  v3:= v3 - v1 @kind int;
  #L53ede4.  v3:= v0[v3] @kind object;
  #L53ede8.  v3:= v3.`o.a$a.d` @type ^`double` @kind wide;
  #L53edec.  v5:= v11 - v3 @kind double;
  #L53edf0.  v7:= length @variable v0;
  #L53edf2.  v7:= v7 - v1 @kind int;
  #L53edf4.  v8:= v0[v7] @kind object;
  #L53edf8.  v8:= v8.`o.a$a.r` @type ^`boolean` @kind boolean;
  #L53edfc.  if v8 == 0 then goto L53ee52;
  #L53ee00.  v11:= v0[v7] @kind object;
  #L53ee04.  call temp:= `f`(v11, v3) @signature `Lo/a$a;.f:(D)D` @kind virtual;
  #L53ee0a.  v11:= temp @kind wide;
  #L53ee0c.  v0:= v10.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53ee10.  v0:= v0[v7] @kind object;
  #L53ee14.  call temp:= `d`(v0, v3) @signature `Lo/a$a;.d:(D)D` @kind virtual;
  #L53ee1a.  v8:= temp @kind wide;
  #L53ee1c.  v8:= v8 * v5 @kind double;
  #L53ee20.  v11:= v11 + v8 @kind double;
  #L53ee22.  v13[v2]:= v11 @kind wide;
  #L53ee26.  v11:= v10.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53ee2a.  v11:= v11[v7] @kind object;
  #L53ee2e.  call temp:= `g`(v11, v3) @signature `Lo/a$a;.g:(D)D` @kind virtual;
  #L53ee34.  v11:= temp @kind wide;
  #L53ee36.  v0:= v10.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53ee3a.  v0:= v0[v7] @kind object;
  #L53ee3e.  call temp:= `e`(v0, v3) @signature `Lo/a$a;.e:(D)D` @kind virtual;
  #L53ee44.  v2:= temp @kind wide;
  #L53ee46.  v5:= v5 * v2 @kind double;
  #L53ee4a.  v11:= v11 + v5 @kind double;
  #L53ee4c.  v13[v1]:= v11 @kind wide;
  #L53ee50.  goto L53eeb0;
  #L53ee52.  v0:= v0[v7] @kind object;
  #L53ee56.  call `k`(v0, v11) @signature `Lo/a$a;.k:(D)V` @kind virtual;
  #L53ee5c.  v11:= v10.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53ee60.  v11:= v11[v7] @kind object;
  #L53ee64.  call temp:= `h`(v11) @signature `Lo/a$a;.h:()D` @kind virtual;
  #L53ee6a.  v11:= temp @kind wide;
  #L53ee6c.  v0:= v10.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53ee70.  v0:= v0[v7] @kind object;
  #L53ee74.  call temp:= `b`(v0) @signature `Lo/a$a;.b:()D` @kind virtual;
  #L53ee7a.  v3:= temp @kind wide;
  #L53ee7c.  v3:= v3 * v5 @kind double;
  #L53ee80.  v11:= v11 + v3 @kind double;
  #L53ee82.  v13[v2]:= v11 @kind wide;
  #L53ee86.  v11:= v10.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53ee8a.  v11:= v11[v7] @kind object;
  #L53ee8e.  call temp:= `i`(v11) @signature `Lo/a$a;.i:()D` @kind virtual;
  #L53ee94.  v11:= temp @kind wide;
  #L53ee96.  v0:= v10.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53ee9a.  v0:= v0[v7] @kind object;
  #L53ee9e.  call temp:= `c`(v0) @signature `Lo/a$a;.c:()D` @kind virtual;
  #L53eea4.  v2:= temp @kind wide;
  #L53eea6.  v5:= v5 * v2 @kind double;
  #L53eeaa.  v11:= v11 + v5 @kind double;
  #L53eeac.  v13[v1]:= v11 @kind wide;
  #L53eeb0.  return @kind void;
  #L53eeb2.  v0:= v10.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53eeb6.  v3:= v0[v2] @kind object;
  #L53eeba.  v3:= v3.`o.a$a.c` @type ^`double` @kind wide;
  #L53eebe.  v5:= dcmpg(v11, v3);
  #L53eec2.  if v5 >= 0 then goto L53eece;
  #L53eec6.  v11:= v0[v2] @kind object;
  #L53eeca.  v11:= v11.`o.a$a.c` @type ^`double` @kind wide;
  #L53eece.  v3:= length @variable v0;
  #L53eed0.  v3:= v3 - v1 @kind int;
  #L53eed2.  v3:= v0[v3] @kind object;
  #L53eed6.  v3:= v3.`o.a$a.d` @type ^`double` @kind wide;
  #L53eeda.  v5:= dcmpl(v11, v3);
  #L53eede.  if v5 <= 0 then goto L53eeee;
  #L53eee2.  v11:= length @variable v0;
  #L53eee4.  v11:= v11 - v1 @kind int;
  #L53eee6.  v11:= v0[v11] @kind object;
  #L53eeea.  v11:= v11.`o.a$a.d` @type ^`double` @kind wide;
  #L53eeee.  v0:= 0I;
  #L53eef0.  v3:= v10.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53eef4.  v4:= length @variable v3;
  #L53eef6.  if v0 >= v4 then goto L53ef76;
  #L53eefa.  v4:= v3[v0] @kind object;
  #L53eefe.  v4:= v4.`o.a$a.d` @type ^`double` @kind wide;
  #L53ef02.  v6:= dcmpg(v11, v4);
  #L53ef06.  if v6 > 0 then goto L53ef70;
  #L53ef0a.  v4:= v3[v0] @kind object;
  #L53ef0e.  v4:= v4.`o.a$a.r` @type ^`boolean` @kind boolean;
  #L53ef12.  if v4 == 0 then goto L53ef3c;
  #L53ef16.  v3:= v3[v0] @kind object;
  #L53ef1a.  call temp:= `f`(v3, v11) @signature `Lo/a$a;.f:(D)D` @kind virtual;
  #L53ef20.  v3:= temp @kind wide;
  #L53ef22.  v13[v2]:= v3 @kind wide;
  #L53ef26.  v2:= v10.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53ef2a.  v0:= v2[v0] @kind object;
  #L53ef2e.  call temp:= `g`(v0, v11) @signature `Lo/a$a;.g:(D)D` @kind virtual;
  #L53ef34.  v11:= temp @kind wide;
  #L53ef36.  v13[v1]:= v11 @kind wide;
  #L53ef3a.  return @kind void;
  #L53ef3c.  v3:= v3[v0] @kind object;
  #L53ef40.  call `k`(v3, v11) @signature `Lo/a$a;.k:(D)V` @kind virtual;
  #L53ef46.  v11:= v10.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53ef4a.  v11:= v11[v0] @kind object;
  #L53ef4e.  call temp:= `h`(v11) @signature `Lo/a$a;.h:()D` @kind virtual;
  #L53ef54.  v11:= temp @kind wide;
  #L53ef56.  v13[v2]:= v11 @kind wide;
  #L53ef5a.  v11:= v10.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53ef5e.  v11:= v11[v0] @kind object;
  #L53ef62.  call temp:= `i`(v11) @signature `Lo/a$a;.i:()D` @kind virtual;
  #L53ef68.  v11:= temp @kind wide;
  #L53ef6a.  v13[v1]:= v11 @kind wide;
  #L53ef6e.  return @kind void;
  #L53ef70.  v0:= v0 + 1;
  #L53ef74.  goto L53eef0;
  #L53ef76.  return @kind void;
}
procedure `void` `e`(`o.a` v10 @kind this, `double` v11 , `float`[] v13 @kind object) @signature `Lo/a;.e:(D[F)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L53ef88.  v0:= v10.`o.a.c` @type ^`boolean` @kind boolean;
  #L53ef8c.  v1:= 1I;
  #L53ef8e.  v2:= 0I;
  #L53ef90.  if v0 == 0 then goto L53f142;
  #L53ef94.  v0:= v10.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53ef98.  v3:= v0[v2] @kind object;
  #L53ef9c.  v3:= v3.`o.a$a.c` @type ^`double` @kind wide;
  #L53efa0.  v5:= dcmpg(v11, v3);
  #L53efa4.  if v5 >= 0 then goto L53f080;
  #L53efa8.  v3:= v0[v2] @kind object;
  #L53efac.  v3:= v3.`o.a$a.c` @type ^`double` @kind wide;
  #L53efb0.  v5:= v0[v2] @kind object;
  #L53efb4.  v5:= v5.`o.a$a.c` @type ^`double` @kind wide;
  #L53efb8.  v11:= v11 - v5 @kind double;
  #L53efba.  v5:= v0[v2] @kind object;
  #L53efbe.  v5:= v5.`o.a$a.r` @type ^`boolean` @kind boolean;
  #L53efc2.  if v5 == 0 then goto L53f01c;
  #L53efc6.  v0:= v0[v2] @kind object;
  #L53efca.  call temp:= `f`(v0, v3) @signature `Lo/a$a;.f:(D)D` @kind virtual;
  #L53efd0.  v5:= temp @kind wide;
  #L53efd2.  v0:= v10.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53efd6.  v0:= v0[v2] @kind object;
  #L53efda.  call temp:= `d`(v0, v3) @signature `Lo/a$a;.d:(D)D` @kind virtual;
  #L53efe0.  v7:= temp @kind wide;
  #L53efe2.  v7:= v7 * v11 @kind double;
  #L53efe6.  v5:= v5 + v7 @kind double;
  #L53efe8.  v0:= (`float`) v5 @kind d2f;
  #L53efea.  v13[v2]:= v0;
  #L53efee.  v0:= v10.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53eff2.  v0:= v0[v2] @kind object;
  #L53eff6.  call temp:= `g`(v0, v3) @signature `Lo/a$a;.g:(D)D` @kind virtual;
  #L53effc.  v5:= temp @kind wide;
  #L53effe.  v0:= v10.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53f002.  v0:= v0[v2] @kind object;
  #L53f006.  call temp:= `e`(v0, v3) @signature `Lo/a$a;.e:(D)D` @kind virtual;
  #L53f00c.  v2:= temp @kind wide;
  #L53f00e.  v11:= v11 * v2 @kind double;
  #L53f012.  v5:= v5 + v11 @kind double;
  #L53f014.  v11:= (`float`) v5 @kind d2f;
  #L53f016.  v13[v1]:= v11;
  #L53f01a.  goto L53f07e;
  #L53f01c.  v0:= v0[v2] @kind object;
  #L53f020.  call `k`(v0, v3) @signature `Lo/a$a;.k:(D)V` @kind virtual;
  #L53f026.  v0:= v10.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53f02a.  v0:= v0[v2] @kind object;
  #L53f02e.  call temp:= `h`(v0) @signature `Lo/a$a;.h:()D` @kind virtual;
  #L53f034.  v3:= temp @kind wide;
  #L53f036.  v0:= v10.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53f03a.  v0:= v0[v2] @kind object;
  #L53f03e.  call temp:= `b`(v0) @signature `Lo/a$a;.b:()D` @kind virtual;
  #L53f044.  v5:= temp @kind wide;
  #L53f046.  v5:= v5 * v11 @kind double;
  #L53f04a.  v3:= v3 + v5 @kind double;
  #L53f04c.  v0:= (`float`) v3 @kind d2f;
  #L53f04e.  v13[v2]:= v0;
  #L53f052.  v0:= v10.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53f056.  v0:= v0[v2] @kind object;
  #L53f05a.  call temp:= `i`(v0) @signature `Lo/a$a;.i:()D` @kind virtual;
  #L53f060.  v3:= temp @kind wide;
  #L53f062.  v0:= v10.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53f066.  v0:= v0[v2] @kind object;
  #L53f06a.  call temp:= `c`(v0) @signature `Lo/a$a;.c:()D` @kind virtual;
  #L53f070.  v5:= temp @kind wide;
  #L53f072.  v11:= v11 * v5 @kind double;
  #L53f076.  v3:= v3 + v11 @kind double;
  #L53f078.  v11:= (`float`) v3 @kind d2f;
  #L53f07a.  v13[v1]:= v11;
  #L53f07e.  return @kind void;
  #L53f080.  v3:= length @variable v0;
  #L53f082.  v3:= v3 - v1 @kind int;
  #L53f084.  v3:= v0[v3] @kind object;
  #L53f088.  v3:= v3.`o.a$a.d` @type ^`double` @kind wide;
  #L53f08c.  v5:= dcmpl(v11, v3);
  #L53f090.  if v5 <= 0 then goto L53f180;
  #L53f094.  v3:= length @variable v0;
  #L53f096.  v3:= v3 - v1 @kind int;
  #L53f098.  v3:= v0[v3] @kind object;
  #L53f09c.  v3:= v3.`o.a$a.d` @type ^`double` @kind wide;
  #L53f0a0.  v5:= v11 - v3 @kind double;
  #L53f0a4.  v7:= length @variable v0;
  #L53f0a6.  v7:= v7 - v1 @kind int;
  #L53f0a8.  v8:= v0[v7] @kind object;
  #L53f0ac.  v8:= v8.`o.a$a.r` @type ^`boolean` @kind boolean;
  #L53f0b0.  if v8 == 0 then goto L53f10a;
  #L53f0b4.  v11:= v0[v7] @kind object;
  #L53f0b8.  call temp:= `f`(v11, v3) @signature `Lo/a$a;.f:(D)D` @kind virtual;
  #L53f0be.  v11:= temp @kind wide;
  #L53f0c0.  v0:= v10.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53f0c4.  v0:= v0[v7] @kind object;
  #L53f0c8.  call temp:= `d`(v0, v3) @signature `Lo/a$a;.d:(D)D` @kind virtual;
  #L53f0ce.  v8:= temp @kind wide;
  #L53f0d0.  v8:= v8 * v5 @kind double;
  #L53f0d4.  v11:= v11 + v8 @kind double;
  #L53f0d6.  v11:= (`float`) v11 @kind d2f;
  #L53f0d8.  v13[v2]:= v11;
  #L53f0dc.  v11:= v10.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53f0e0.  v11:= v11[v7] @kind object;
  #L53f0e4.  call temp:= `g`(v11, v3) @signature `Lo/a$a;.g:(D)D` @kind virtual;
  #L53f0ea.  v11:= temp @kind wide;
  #L53f0ec.  v0:= v10.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53f0f0.  v0:= v0[v7] @kind object;
  #L53f0f4.  call temp:= `e`(v0, v3) @signature `Lo/a$a;.e:(D)D` @kind virtual;
  #L53f0fa.  v2:= temp @kind wide;
  #L53f0fc.  v5:= v5 * v2 @kind double;
  #L53f100.  v11:= v11 + v5 @kind double;
  #L53f102.  v11:= (`float`) v11 @kind d2f;
  #L53f104.  v13[v1]:= v11;
  #L53f108.  goto L53f140;
  #L53f10a.  v0:= v0[v7] @kind object;
  #L53f10e.  call `k`(v0, v11) @signature `Lo/a$a;.k:(D)V` @kind virtual;
  #L53f114.  v11:= v10.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53f118.  v11:= v11[v7] @kind object;
  #L53f11c.  call temp:= `h`(v11) @signature `Lo/a$a;.h:()D` @kind virtual;
  #L53f122.  v11:= temp @kind wide;
  #L53f124.  v11:= (`float`) v11 @kind d2f;
  #L53f126.  v13[v2]:= v11;
  #L53f12a.  v11:= v10.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53f12e.  v11:= v11[v7] @kind object;
  #L53f132.  call temp:= `i`(v11) @signature `Lo/a$a;.i:()D` @kind virtual;
  #L53f138.  v11:= temp @kind wide;
  #L53f13a.  v11:= (`float`) v11 @kind d2f;
  #L53f13c.  v13[v1]:= v11;
  #L53f140.  return @kind void;
  #L53f142.  v0:= v10.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53f146.  v3:= v0[v2] @kind object;
  #L53f14a.  v3:= v3.`o.a$a.c` @type ^`double` @kind wide;
  #L53f14e.  v5:= dcmpg(v11, v3);
  #L53f152.  if v5 >= 0 then goto L53f160;
  #L53f156.  v11:= v0[v2] @kind object;
  #L53f15a.  v11:= v11.`o.a$a.c` @type ^`double` @kind wide;
  #L53f15e.  goto L53f180;
  #L53f160.  v3:= length @variable v0;
  #L53f162.  v3:= v3 - v1 @kind int;
  #L53f164.  v3:= v0[v3] @kind object;
  #L53f168.  v3:= v3.`o.a$a.d` @type ^`double` @kind wide;
  #L53f16c.  v5:= dcmpl(v11, v3);
  #L53f170.  if v5 <= 0 then goto L53f180;
  #L53f174.  v11:= length @variable v0;
  #L53f176.  v11:= v11 - v1 @kind int;
  #L53f178.  v11:= v0[v11] @kind object;
  #L53f17c.  v11:= v11.`o.a$a.d` @type ^`double` @kind wide;
  #L53f180.  v0:= 0I;
  #L53f182.  v3:= v10.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53f186.  v4:= length @variable v3;
  #L53f188.  if v0 >= v4 then goto L53f210;
  #L53f18c.  v4:= v3[v0] @kind object;
  #L53f190.  v4:= v4.`o.a$a.d` @type ^`double` @kind wide;
  #L53f194.  v6:= dcmpg(v11, v4);
  #L53f198.  if v6 > 0 then goto L53f20a;
  #L53f19c.  v4:= v3[v0] @kind object;
  #L53f1a0.  v4:= v4.`o.a$a.r` @type ^`boolean` @kind boolean;
  #L53f1a4.  if v4 == 0 then goto L53f1d2;
  #L53f1a8.  v3:= v3[v0] @kind object;
  #L53f1ac.  call temp:= `f`(v3, v11) @signature `Lo/a$a;.f:(D)D` @kind virtual;
  #L53f1b2.  v3:= temp @kind wide;
  #L53f1b4.  v3:= (`float`) v3 @kind d2f;
  #L53f1b6.  v13[v2]:= v3;
  #L53f1ba.  v2:= v10.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53f1be.  v0:= v2[v0] @kind object;
  #L53f1c2.  call temp:= `g`(v0, v11) @signature `Lo/a$a;.g:(D)D` @kind virtual;
  #L53f1c8.  v11:= temp @kind wide;
  #L53f1ca.  v11:= (`float`) v11 @kind d2f;
  #L53f1cc.  v13[v1]:= v11;
  #L53f1d0.  return @kind void;
  #L53f1d2.  v3:= v3[v0] @kind object;
  #L53f1d6.  call `k`(v3, v11) @signature `Lo/a$a;.k:(D)V` @kind virtual;
  #L53f1dc.  v11:= v10.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53f1e0.  v11:= v11[v0] @kind object;
  #L53f1e4.  call temp:= `h`(v11) @signature `Lo/a$a;.h:()D` @kind virtual;
  #L53f1ea.  v11:= temp @kind wide;
  #L53f1ec.  v11:= (`float`) v11 @kind d2f;
  #L53f1ee.  v13[v2]:= v11;
  #L53f1f2.  v11:= v10.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53f1f6.  v11:= v11[v0] @kind object;
  #L53f1fa.  call temp:= `i`(v11) @signature `Lo/a$a;.i:()D` @kind virtual;
  #L53f200.  v11:= temp @kind wide;
  #L53f202.  v11:= (`float`) v11 @kind d2f;
  #L53f204.  v13[v1]:= v11;
  #L53f208.  return @kind void;
  #L53f20a.  v0:= v0 + 1;
  #L53f20e.  goto L53f182;
  #L53f210.  return @kind void;
}
procedure `double` `f`(`o.a` v5 @kind this, `double` v6 , `int` v8 ) @signature `Lo/a;.f:(DI)D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L53eb28.  v0:= v5.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53eb2c.  v1:= 0I;
  #L53eb2e.  v2:= v0[v1] @kind object;
  #L53eb32.  v2:= v2.`o.a$a.c` @type ^`double` @kind wide;
  #L53eb36.  v4:= dcmpg(v6, v2);
  #L53eb3a.  if v4 >= 0 then goto L53eb46;
  #L53eb3e.  v6:= v0[v1] @kind object;
  #L53eb42.  v6:= v6.`o.a$a.c` @type ^`double` @kind wide;
  #L53eb46.  v2:= length @variable v0;
  #L53eb48.  v2:= v2 + -1;
  #L53eb4c.  v2:= v0[v2] @kind object;
  #L53eb50.  v2:= v2.`o.a$a.d` @type ^`double` @kind wide;
  #L53eb54.  v4:= dcmpl(v6, v2);
  #L53eb58.  if v4 <= 0 then goto L53eb6a;
  #L53eb5c.  v6:= length @variable v0;
  #L53eb5e.  v6:= v6 + -1;
  #L53eb62.  v6:= v0[v6] @kind object;
  #L53eb66.  v6:= v6.`o.a$a.d` @type ^`double` @kind wide;
  #L53eb6a.  v0:= v5.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53eb6e.  v2:= length @variable v0;
  #L53eb70.  if v1 >= v2 then goto L53ebe8;
  #L53eb74.  v2:= v0[v1] @kind object;
  #L53eb78.  v2:= v2.`o.a$a.d` @type ^`double` @kind wide;
  #L53eb7c.  v4:= dcmpg(v6, v2);
  #L53eb80.  if v4 > 0 then goto L53ebe2;
  #L53eb84.  v2:= v0[v1] @kind object;
  #L53eb88.  v2:= v2.`o.a$a.r` @type ^`boolean` @kind boolean;
  #L53eb8c.  if v2 == 0 then goto L53ebb0;
  #L53eb90.  if v8 != 0 then goto L53eba2;
  #L53eb94.  v8:= v0[v1] @kind object;
  #L53eb98.  call temp:= `d`(v8, v6) @signature `Lo/a$a;.d:(D)D` @kind virtual;
  #L53eb9e.  v6:= temp @kind wide;
  #L53eba0.  return v6 @kind wide;
  #L53eba2.  v8:= v0[v1] @kind object;
  #L53eba6.  call temp:= `e`(v8, v6) @signature `Lo/a$a;.e:(D)D` @kind virtual;
  #L53ebac.  v6:= temp @kind wide;
  #L53ebae.  return v6 @kind wide;
  #L53ebb0.  v0:= v0[v1] @kind object;
  #L53ebb4.  call `k`(v0, v6) @signature `Lo/a$a;.k:(D)V` @kind virtual;
  #L53ebba.  if v8 != 0 then goto L53ebd0;
  #L53ebbe.  v6:= v5.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53ebc2.  v6:= v6[v1] @kind object;
  #L53ebc6.  call temp:= `b`(v6) @signature `Lo/a$a;.b:()D` @kind virtual;
  #L53ebcc.  v6:= temp @kind wide;
  #L53ebce.  return v6 @kind wide;
  #L53ebd0.  v6:= v5.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53ebd4.  v6:= v6[v1] @kind object;
  #L53ebd8.  call temp:= `c`(v6) @signature `Lo/a$a;.c:()D` @kind virtual;
  #L53ebde.  v6:= temp @kind wide;
  #L53ebe0.  return v6 @kind wide;
  #L53ebe2.  v1:= v1 + 1;
  #L53ebe6.  goto L53eb6a;
  #L53ebe8.  v6:= NaND;
  #L53ebec.  return v6 @kind wide;
}
procedure `void` `g`(`o.a` v7 @kind this, `double` v8 , `double`[] v10 @kind object) @signature `Lo/a;.g:(D[D)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L53f224.  v0:= v7.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53f228.  v1:= 0I;
  #L53f22a.  v2:= v0[v1] @kind object;
  #L53f22e.  v2:= v2.`o.a$a.c` @type ^`double` @kind wide;
  #L53f232.  v4:= 1I;
  #L53f234.  v5:= dcmpg(v8, v2);
  #L53f238.  if v5 >= 0 then goto L53f246;
  #L53f23c.  v8:= v0[v1] @kind object;
  #L53f240.  v8:= v8.`o.a$a.c` @type ^`double` @kind wide;
  #L53f244.  goto L53f266;
  #L53f246.  v2:= length @variable v0;
  #L53f248.  v2:= v2 - v4 @kind int;
  #L53f24a.  v2:= v0[v2] @kind object;
  #L53f24e.  v2:= v2.`o.a$a.d` @type ^`double` @kind wide;
  #L53f252.  v5:= dcmpl(v8, v2);
  #L53f256.  if v5 <= 0 then goto L53f266;
  #L53f25a.  v8:= length @variable v0;
  #L53f25c.  v8:= v8 - v4 @kind int;
  #L53f25e.  v8:= v0[v8] @kind object;
  #L53f262.  v8:= v8.`o.a$a.d` @type ^`double` @kind wide;
  #L53f266.  v0:= 0I;
  #L53f268.  v2:= v7.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53f26c.  v3:= length @variable v2;
  #L53f26e.  if v0 >= v3 then goto L53f2ee;
  #L53f272.  v3:= v2[v0] @kind object;
  #L53f276.  v5:= v3.`o.a$a.d` @type ^`double` @kind wide;
  #L53f27a.  v3:= dcmpg(v8, v5);
  #L53f27e.  if v3 > 0 then goto L53f2e8;
  #L53f282.  v3:= v2[v0] @kind object;
  #L53f286.  v3:= v3.`o.a$a.r` @type ^`boolean` @kind boolean;
  #L53f28a.  if v3 == 0 then goto L53f2b4;
  #L53f28e.  v2:= v2[v0] @kind object;
  #L53f292.  call temp:= `d`(v2, v8) @signature `Lo/a$a;.d:(D)D` @kind virtual;
  #L53f298.  v2:= temp @kind wide;
  #L53f29a.  v10[v1]:= v2 @kind wide;
  #L53f29e.  v1:= v7.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53f2a2.  v0:= v1[v0] @kind object;
  #L53f2a6.  call temp:= `e`(v0, v8) @signature `Lo/a$a;.e:(D)D` @kind virtual;
  #L53f2ac.  v8:= temp @kind wide;
  #L53f2ae.  v10[v4]:= v8 @kind wide;
  #L53f2b2.  return @kind void;
  #L53f2b4.  v2:= v2[v0] @kind object;
  #L53f2b8.  call `k`(v2, v8) @signature `Lo/a$a;.k:(D)V` @kind virtual;
  #L53f2be.  v8:= v7.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53f2c2.  v8:= v8[v0] @kind object;
  #L53f2c6.  call temp:= `b`(v8) @signature `Lo/a$a;.b:()D` @kind virtual;
  #L53f2cc.  v8:= temp @kind wide;
  #L53f2ce.  v10[v1]:= v8 @kind wide;
  #L53f2d2.  v8:= v7.`o.a.b` @type ^`o.a$a`[] @kind object;
  #L53f2d6.  v8:= v8[v0] @kind object;
  #L53f2da.  call temp:= `c`(v8) @signature `Lo/a$a;.c:()D` @kind virtual;
  #L53f2e0.  v8:= temp @kind wide;
  #L53f2e2.  v10[v4]:= v8 @kind wide;
  #L53f2e6.  return @kind void;
  #L53f2e8.  v0:= v0 + 1;
  #L53f2ec.  goto L53f268;
  #L53f2ee.  return @kind void;
}
procedure `double`[] `h`(`o.a` v1 @kind this) @signature `Lo/a;.h:()[D` @AccessFlag PUBLIC {
    temp;
    v0;

  #L53ec00.  v0:= v1.`o.a.a` @type ^`double`[] @kind object;
  #L53ec04.  return v0 @kind object;
}
