record `o.n` @kind class @AccessFlag PUBLIC extends `o.m` @kind interface {
  `float` `o.n.a` @AccessFlag PRIVATE;
  `float` `o.n.b` @AccessFlag PRIVATE;
  `float` `o.n.c` @AccessFlag PRIVATE;
  `float` `o.n.d` @AccessFlag PRIVATE;
  `float` `o.n.e` @AccessFlag PRIVATE;
  `float` `o.n.f` @AccessFlag PRIVATE;
  `float` `o.n.g` @AccessFlag PRIVATE;
  `float` `o.n.h` @AccessFlag PRIVATE;
  `float` `o.n.i` @AccessFlag PRIVATE;
  `int` `o.n.j` @AccessFlag PRIVATE;
  `boolean` `o.n.k` @AccessFlag PRIVATE;
  `float` `o.n.l` @AccessFlag PRIVATE;
  `float` `o.n.m` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`o.n` v1 @kind this) @signature `Lo/n;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L5423a4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L5423aa.  v0:= 0I;
  #L5423ac.  v1.`o.n.k` @type ^`boolean` := v0 @kind boolean;
  #L5423b0.  return @kind void;
}
procedure `float` `c`(`o.n` v5 @kind this, `float` v6 ) @signature `Lo/n;.c:(F)F` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L5421e4.  v0:= v5.`o.n.d` @type ^`float`;
  #L5421e8.  v1:= 2.0F;
  #L5421ec.  v2:= fcmpg(v6, v0);
  #L5421f0.  if v2 > 0 then goto L542214;
  #L5421f4.  v2:= v5.`o.n.a` @type ^`float`;
  #L5421f8.  v3:= v2 * v6 @kind float;
  #L5421fc.  v4:= v5.`o.n.b` @type ^`float`;
  #L542200.  v4:= v4 - v2 @kind float;
  #L542202.  v4:= v4 * v6 @kind float;
  #L542206.  v4:= v4 * v6 @kind float;
  #L54220a.  v0:= v0 * v1 @kind float;
  #L54220e.  v4:= v4 / v0 @kind float;
  #L542210.  v3:= v3 + v4 @kind float;
  #L542212.  return v3;
  #L542214.  v2:= v5.`o.n.j` @type ^`int`;
  #L542218.  v3:= 1I;
  #L54221a.  if v2 != v3 then goto L542224;
  #L54221e.  v6:= v5.`o.n.g` @type ^`float`;
  #L542222.  return v6;
  #L542224.  v6:= v6 - v0 @kind float;
  #L542226.  v0:= v5.`o.n.e` @type ^`float`;
  #L54222a.  v3:= fcmpg(v6, v0);
  #L54222e.  if v3 >= 0 then goto L542258;
  #L542232.  v2:= v5.`o.n.g` @type ^`float`;
  #L542236.  v3:= v5.`o.n.b` @type ^`float`;
  #L54223a.  v4:= v3 * v6 @kind float;
  #L54223e.  v2:= v2 + v4 @kind float;
  #L542240.  v4:= v5.`o.n.c` @type ^`float`;
  #L542244.  v4:= v4 - v3 @kind float;
  #L542246.  v4:= v4 * v6 @kind float;
  #L54224a.  v4:= v4 * v6 @kind float;
  #L54224e.  v0:= v0 * v1 @kind float;
  #L542252.  v4:= v4 / v0 @kind float;
  #L542254.  v2:= v2 + v4 @kind float;
  #L542256.  return v2;
  #L542258.  v3:= 2I;
  #L54225a.  if v2 != v3 then goto L542264;
  #L54225e.  v6:= v5.`o.n.h` @type ^`float`;
  #L542262.  return v6;
  #L542264.  v6:= v6 - v0 @kind float;
  #L542266.  v0:= v5.`o.n.f` @type ^`float`;
  #L54226a.  v2:= fcmpg(v6, v0);
  #L54226e.  if v2 > 0 then goto L542292;
  #L542272.  v2:= v5.`o.n.h` @type ^`float`;
  #L542276.  v3:= v5.`o.n.c` @type ^`float`;
  #L54227a.  v4:= v3 * v6 @kind float;
  #L54227e.  v2:= v2 + v4 @kind float;
  #L542280.  v3:= v3 * v6 @kind float;
  #L542284.  v3:= v3 * v6 @kind float;
  #L542288.  v0:= v0 * v1 @kind float;
  #L54228c.  v3:= v3 / v0 @kind float;
  #L54228e.  v2:= v2 - v3 @kind float;
  #L542290.  return v2;
  #L542292.  v6:= v5.`o.n.i` @type ^`float`;
  #L542296.  return v6;
}
procedure `void` `f`(`o.n` v8 @kind this, `float` v9 , `float` v10 , `float` v11 , `float` v12 , `float` v13 ) @signature `Lo/n;.f:(FFFFF)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L54241c.  v0:= 0I;
  #L54241e.  v1:= fcmpl(v9, v0);
  #L542422.  if v1 != 0 then goto L54242c;
  #L542426.  v9:= 953267991I;
  #L54242c.  v8.`o.n.a` @type ^`float` := v9;
  #L542430.  v1:= v9 / v11 @kind float;
  #L542434.  v2:= v1 * v9 @kind float;
  #L542438.  v3:= 2.0F;
  #L54243c.  v2:= v2 / v3 @kind float;
  #L54243e.  v4:= 3I;
  #L542440.  v5:= 2I;
  #L542442.  v6:= fcmpg(v9, v0);
  #L542446.  if v6 >= 0 then goto L5424f6;
  #L54244a.  v13:= -v9 @kind float;
  #L54244c.  v13:= v13 / v11 @kind float;
  #L54244e.  v13:= v13 * v9 @kind float;
  #L542452.  v13:= v13 / v3 @kind float;
  #L542454.  v13:= v10 - v13 @kind float;
  #L542458.  v13:= v13 * v11 @kind float;
  #L54245c.  v1:= (`double`) v13 @kind f2d;
  #L54245e.  call temp:= `sqrt`(v1) @signature `Ljava/lang/Math;.sqrt:(D)D` @kind static;
  #L542464.  v1:= temp @kind wide;
  #L542466.  v13:= (`float`) v1 @kind d2f;
  #L542468.  v1:= fcmpg(v13, v12);
  #L54246c.  if v1 >= 0 then goto L5424a8;
  #L542470.  v8.`o.n.j` @type ^`int` := v5;
  #L542474.  v8.`o.n.a` @type ^`float` := v9;
  #L542478.  v8.`o.n.b` @type ^`float` := v13;
  #L54247c.  v8.`o.n.c` @type ^`float` := v0;
  #L542480.  v12:= v13 - v9 @kind float;
  #L542484.  v12:= v12 / v11 @kind float;
  #L542486.  v8.`o.n.d` @type ^`float` := v12;
  #L54248a.  v11:= v13 / v11 @kind float;
  #L54248e.  v8.`o.n.e` @type ^`float` := v11;
  #L542492.  v9:= v9 + v13 @kind float;
  #L542494.  v9:= v9 * v12 @kind float;
  #L542498.  v9:= v9 / v3 @kind float;
  #L54249a.  v8.`o.n.g` @type ^`float` := v9;
  #L54249e.  v8.`o.n.h` @type ^`float` := v10;
  #L5424a2.  v8.`o.n.i` @type ^`float` := v10;
  #L5424a6.  return @kind void;
  #L5424a8.  v8.`o.n.j` @type ^`int` := v4;
  #L5424ac.  v8.`o.n.a` @type ^`float` := v9;
  #L5424b0.  v8.`o.n.b` @type ^`float` := v12;
  #L5424b4.  v8.`o.n.c` @type ^`float` := v12;
  #L5424b8.  v13:= v12 - v9 @kind float;
  #L5424bc.  v13:= v13 / v11 @kind float;
  #L5424be.  v8.`o.n.d` @type ^`float` := v13;
  #L5424c2.  v11:= v12 / v11 @kind float;
  #L5424c6.  v8.`o.n.f` @type ^`float` := v11;
  #L5424ca.  v9:= v9 + v12 @kind float;
  #L5424cc.  v9:= v9 * v13 @kind float;
  #L5424d0.  v9:= v9 / v3 @kind float;
  #L5424d2.  v11:= v11 * v12 @kind float;
  #L5424d6.  v11:= v11 / v3 @kind float;
  #L5424d8.  v13:= v10 - v9 @kind float;
  #L5424dc.  v13:= v13 - v11 @kind float;
  #L5424de.  v13:= v13 / v12 @kind float;
  #L5424e0.  v8.`o.n.e` @type ^`float` := v13;
  #L5424e4.  v8.`o.n.g` @type ^`float` := v9;
  #L5424e8.  v9:= v10 - v11 @kind float;
  #L5424ec.  v8.`o.n.h` @type ^`float` := v9;
  #L5424f0.  v8.`o.n.i` @type ^`float` := v10;
  #L5424f4.  return @kind void;
  #L5424f6.  v6:= fcmpl(v2, v10);
  #L5424fa.  if v6 < 0 then goto L54251c;
  #L5424fe.  v3:= v3 * v10 @kind float;
  #L542502.  v3:= v3 / v9 @kind float;
  #L542504.  v11:= 1I;
  #L542506.  v8.`o.n.j` @type ^`int` := v11;
  #L54250a.  v8.`o.n.a` @type ^`float` := v9;
  #L54250e.  v8.`o.n.b` @type ^`float` := v0;
  #L542512.  v8.`o.n.g` @type ^`float` := v10;
  #L542516.  v8.`o.n.d` @type ^`float` := v3;
  #L54251a.  return @kind void;
  #L54251c.  v2:= v10 - v2 @kind float;
  #L542520.  v6:= v2 / v9 @kind float;
  #L542524.  v7:= v6 + v1 @kind float;
  #L542528.  v13:= fcmpg(v7, v13);
  #L54252c.  if v13 >= 0 then goto L542552;
  #L542530.  v8.`o.n.j` @type ^`int` := v5;
  #L542534.  v8.`o.n.a` @type ^`float` := v9;
  #L542538.  v8.`o.n.b` @type ^`float` := v9;
  #L54253c.  v8.`o.n.c` @type ^`float` := v0;
  #L542540.  v8.`o.n.g` @type ^`float` := v2;
  #L542544.  v8.`o.n.h` @type ^`float` := v10;
  #L542548.  v8.`o.n.d` @type ^`float` := v6;
  #L54254c.  v8.`o.n.e` @type ^`float` := v1;
  #L542550.  return @kind void;
  #L542552.  v13:= v11 * v10 @kind float;
  #L542556.  v1:= v9 * v9 @kind float;
  #L54255a.  v1:= v1 / v3 @kind float;
  #L54255c.  v13:= v13 + v1 @kind float;
  #L54255e.  v1:= (`double`) v13 @kind f2d;
  #L542560.  call temp:= `sqrt`(v1) @signature `Ljava/lang/Math;.sqrt:(D)D` @kind static;
  #L542566.  v1:= temp @kind wide;
  #L542568.  v13:= (`float`) v1 @kind d2f;
  #L54256a.  v1:= v13 - v9 @kind float;
  #L54256e.  v1:= v1 / v11 @kind float;
  #L542570.  v8.`o.n.d` @type ^`float` := v1;
  #L542574.  v2:= v13 / v11 @kind float;
  #L542578.  v8.`o.n.e` @type ^`float` := v2;
  #L54257c.  v6:= fcmpg(v13, v12);
  #L542580.  if v6 >= 0 then goto L5425ae;
  #L542584.  v8.`o.n.j` @type ^`int` := v5;
  #L542588.  v8.`o.n.a` @type ^`float` := v9;
  #L54258c.  v8.`o.n.b` @type ^`float` := v13;
  #L542590.  v8.`o.n.c` @type ^`float` := v0;
  #L542594.  v8.`o.n.d` @type ^`float` := v1;
  #L542598.  v8.`o.n.e` @type ^`float` := v2;
  #L54259c.  v9:= v9 + v13 @kind float;
  #L54259e.  v9:= v9 * v1 @kind float;
  #L5425a2.  v9:= v9 / v3 @kind float;
  #L5425a4.  v8.`o.n.g` @type ^`float` := v9;
  #L5425a8.  v8.`o.n.h` @type ^`float` := v10;
  #L5425ac.  return @kind void;
  #L5425ae.  v8.`o.n.j` @type ^`int` := v4;
  #L5425b2.  v8.`o.n.a` @type ^`float` := v9;
  #L5425b6.  v8.`o.n.b` @type ^`float` := v12;
  #L5425ba.  v8.`o.n.c` @type ^`float` := v12;
  #L5425be.  v13:= v12 - v9 @kind float;
  #L5425c2.  v13:= v13 / v11 @kind float;
  #L5425c4.  v8.`o.n.d` @type ^`float` := v13;
  #L5425c8.  v11:= v12 / v11 @kind float;
  #L5425cc.  v8.`o.n.f` @type ^`float` := v11;
  #L5425d0.  v9:= v9 + v12 @kind float;
  #L5425d2.  v9:= v9 * v13 @kind float;
  #L5425d6.  v9:= v9 / v3 @kind float;
  #L5425d8.  v11:= v11 * v12 @kind float;
  #L5425dc.  v11:= v11 / v3 @kind float;
  #L5425de.  v13:= v10 - v9 @kind float;
  #L5425e2.  v13:= v13 - v11 @kind float;
  #L5425e4.  v13:= v13 / v12 @kind float;
  #L5425e6.  v8.`o.n.e` @type ^`float` := v13;
  #L5425ea.  v8.`o.n.g` @type ^`float` := v9;
  #L5425ee.  v9:= v10 - v11 @kind float;
  #L5425f2.  v8.`o.n.h` @type ^`float` := v9;
  #L5425f6.  v8.`o.n.i` @type ^`float` := v10;
  #L5425fa.  return @kind void;
}
procedure `boolean` `a`(`o.n` v3 @kind this) @signature `Lo/n;.a:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L54219c.  call temp:= `b`(v3) @signature `Lo/n;.b:()F` @kind virtual;
  #L5421a2.  v0:= temp;
  #L5421a4.  v1:= 925353388I;
  #L5421aa.  v0:= fcmpg(v0, v1);
  #L5421ae.  if v0 >= 0 then goto L5421d0;
  #L5421b2.  v0:= v3.`o.n.i` @type ^`float`;
  #L5421b6.  v2:= v3.`o.n.m` @type ^`float`;
  #L5421ba.  v0:= v0 - v2 @kind float;
  #L5421bc.  call temp:= `abs`(v0) @signature `Ljava/lang/Math;.abs:(F)F` @kind static;
  #L5421c2.  v0:= temp;
  #L5421c4.  v0:= fcmpg(v0, v1);
  #L5421c8.  if v0 >= 0 then goto L5421d0;
  #L5421cc.  v0:= 1I;
  #L5421ce.  goto L5421d2;
  #L5421d0.  v0:= 0I;
  #L5421d2.  return v0;
}
procedure `float` `b`(`o.n` v1 @kind this) @signature `Lo/n;.b:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5422dc.  v0:= v1.`o.n.k` @type ^`boolean` @kind boolean;
  #L5422e0.  if v0 == 0 then goto L5422f4;
  #L5422e4.  v0:= v1.`o.n.m` @type ^`float`;
  #L5422e8.  call temp:= `e`(v1, v0) @signature `Lo/n;.e:(F)F` @kind virtual;
  #L5422ee.  v0:= temp;
  #L5422f0.  v0:= -v0 @kind float;
  #L5422f2.  goto L542300;
  #L5422f4.  v0:= v1.`o.n.m` @type ^`float`;
  #L5422f8.  call temp:= `e`(v1, v0) @signature `Lo/n;.e:(F)F` @kind virtual;
  #L5422fe.  v0:= temp;
  #L542300.  return v0;
}
procedure `void` `d`(`o.n` v6 @kind this, `float` v7 , `float` v8 , `float` v9 , `float` v10 , `float` v11 , `float` v12 ) @signature `Lo/n;.d:(FFFFFF)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L5423c4.  v6.`o.n.l` @type ^`float` := v7;
  #L5423c8.  v1:= fcmpl(v7, v8);
  #L5423cc.  if v1 <= 0 then goto L5423d4;
  #L5423d0.  v1:= 1I;
  #L5423d2.  goto L5423d6;
  #L5423d4.  v1:= 0I;
  #L5423d6.  v6.`o.n.k` @type ^`boolean` := v1 @kind boolean;
  #L5423da.  if v1 == 0 then goto L5423f4;
  #L5423de.  v1:= -v9 @kind float;
  #L5423e0.  v2:= v7 - v8 @kind float;
  #L5423e4.  v0:= v6 @kind object;
  #L5423e6.  v3:= v11;
  #L5423e8.  v4:= v12;
  #L5423ea.  v5:= v10;
  #L5423ec.  call `f`(v0, v1, v2, v3, v4, v5) @signature `Lo/n;.f:(FFFFF)V` @kind direct;
  #L5423f2.  goto L542408;
  #L5423f4.  v2:= v8 - v7 @kind float;
  #L5423f8.  v0:= v6 @kind object;
  #L5423fa.  v1:= v9;
  #L5423fc.  v3:= v11;
  #L5423fe.  v4:= v12;
  #L542400.  v5:= v10;
  #L542402.  call `f`(v0, v1, v2, v3, v4, v5) @signature `Lo/n;.f:(FFFFF)V` @kind direct;
  #L542408.  return @kind void;
}
procedure `float` `e`(`o.n` v3 @kind this, `float` v4 ) @signature `Lo/n;.e:(F)F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L542314.  v0:= v3.`o.n.d` @type ^`float`;
  #L542318.  v1:= fcmpg(v4, v0);
  #L54231c.  if v1 > 0 then goto L542334;
  #L542320.  v1:= v3.`o.n.a` @type ^`float`;
  #L542324.  v2:= v3.`o.n.b` @type ^`float`;
  #L542328.  v2:= v2 - v1 @kind float;
  #L54232a.  v2:= v2 * v4 @kind float;
  #L54232e.  v2:= v2 / v0 @kind float;
  #L542330.  v1:= v1 + v2 @kind float;
  #L542332.  return v1;
  #L542334.  v1:= v3.`o.n.j` @type ^`int`;
  #L542338.  v2:= 1I;
  #L54233a.  if v1 != v2 then goto L542342;
  #L54233e.  v4:= 0I;
  #L542340.  return v4;
  #L542342.  v4:= v4 - v0 @kind float;
  #L542344.  v0:= v3.`o.n.e` @type ^`float`;
  #L542348.  v2:= fcmpg(v4, v0);
  #L54234c.  if v2 >= 0 then goto L542364;
  #L542350.  v1:= v3.`o.n.b` @type ^`float`;
  #L542354.  v2:= v3.`o.n.c` @type ^`float`;
  #L542358.  v2:= v2 - v1 @kind float;
  #L54235a.  v2:= v2 * v4 @kind float;
  #L54235e.  v2:= v2 / v0 @kind float;
  #L542360.  v1:= v1 + v2 @kind float;
  #L542362.  return v1;
  #L542364.  v2:= 2I;
  #L542366.  if v1 != v2 then goto L542370;
  #L54236a.  v4:= v3.`o.n.h` @type ^`float`;
  #L54236e.  return v4;
  #L542370.  v4:= v4 - v0 @kind float;
  #L542372.  v0:= v3.`o.n.f` @type ^`float`;
  #L542376.  v1:= fcmpg(v4, v0);
  #L54237a.  if v1 >= 0 then goto L54238c;
  #L54237e.  v1:= v3.`o.n.c` @type ^`float`;
  #L542382.  v4:= v4 * v1 @kind float;
  #L542386.  v4:= v4 / v0 @kind float;
  #L542388.  v1:= v1 - v4 @kind float;
  #L54238a.  return v1;
  #L54238c.  v4:= v3.`o.n.i` @type ^`float`;
  #L542390.  return v4;
}
procedure `float` `getInterpolation`(`o.n` v1 @kind this, `float` v2 ) @signature `Lo/n;.getInterpolation:(F)F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5422a8.  call temp:= `c`(v1, v2) @signature `Lo/n;.c:(F)F` @kind direct;
  #L5422ae.  v0:= temp;
  #L5422b0.  v1.`o.n.m` @type ^`float` := v2;
  #L5422b4.  v2:= v1.`o.n.k` @type ^`boolean` @kind boolean;
  #L5422b8.  if v2 == 0 then goto L5422c4;
  #L5422bc.  v2:= v1.`o.n.l` @type ^`float`;
  #L5422c0.  v2:= v2 - v0 @kind float;
  #L5422c2.  goto L5422ca;
  #L5422c4.  v2:= v1.`o.n.l` @type ^`float`;
  #L5422c8.  v2:= v2 + v0 @kind float;
  #L5422ca.  return v2;
}
