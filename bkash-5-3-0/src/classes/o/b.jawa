record `o.b` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `void` `<init>`(`o.b` v0 @kind this) @signature `Lo/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L53f464.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L53f46a.  return @kind void;
}
procedure `o.b` `a`(`int` v3 , `double`[] v4 @kind object, `double`[][] v5 @kind object) @signature `Lo/b;.a:(I[D[[D)Lo/b;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L53f3f4.  v0:= length @variable v4;
  #L53f3f6.  v1:= 2I;
  #L53f3f8.  v2:= 1I;
  #L53f3fa.  if v0 != v2 then goto L53f400;
  #L53f3fe.  v3:= 2I;
  #L53f400.  if v3 == 0 then goto L53f42a;
  #L53f404.  if v3 == v1 then goto L53f414;
  #L53f408.  v3:= new `o.f`;
  #L53f40c.  call `<init>`(v3, v4, v5) @signature `Lo/f;.<init>:([D[[D)V` @kind direct;
  #L53f412.  return v3 @kind object;
  #L53f414.  v3:= new `o.b$a`;
  #L53f418.  v0:= 0I;
  #L53f41a.  v1:= v4[v0] @kind wide;
  #L53f41e.  v4:= v5[v0] @kind object;
  #L53f422.  call `<init>`(v3, v1, v4) @signature `Lo/b$a;.<init>:(D[D)V` @kind direct;
  #L53f428.  return v3 @kind object;
  #L53f42a.  v3:= new `o.g`;
  #L53f42e.  call `<init>`(v3, v4, v5) @signature `Lo/g;.<init>:([D[[D)V` @kind direct;
  #L53f434.  return v3 @kind object;
}
procedure `o.b` `b`(`int`[] v1 @kind object, `double`[] v2 @kind object, `double`[][] v3 @kind object) @signature `Lo/b;.b:([I[D[[D)Lo/b;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L53f448.  v0:= new `o.a`;
  #L53f44c.  call `<init>`(v0, v1, v2, v3) @signature `Lo/a;.<init>:([I[D[[D)V` @kind direct;
  #L53f452.  return v0 @kind object;
}
procedure `double` `c`(`double` v0 , `int` v2 ) @signature `Lo/b;.c:(DI)D` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `d`(`double` v0 , `double`[] v2 @kind object) @signature `Lo/b;.d:(D[D)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `e`(`double` v0 , `float`[] v2 @kind object) @signature `Lo/b;.e:(D[F)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `double` `f`(`double` v0 , `int` v2 ) @signature `Lo/b;.f:(DI)D` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `g`(`double` v0 , `double`[] v2 @kind object) @signature `Lo/b;.g:(D[D)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `double`[] `h`() @signature `Lo/b;.h:()[D` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
