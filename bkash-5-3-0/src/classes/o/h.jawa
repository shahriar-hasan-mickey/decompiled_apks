record `o.h` @kind class @AccessFlag PUBLIC {
  `float`[] `o.h.a` @AccessFlag ;
  `double`[] `o.h.b` @AccessFlag ;
  `double`[] `o.h.c` @AccessFlag ;
  `java.lang.String` `o.h.d` @AccessFlag ;
  `o.g` `o.h.e` @AccessFlag ;
  `int` `o.h.f` @AccessFlag ;
  `double` `o.h.g` @AccessFlag ;
}
procedure `void` `<clinit>`() @signature `Lo/h;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;

  #L54167c.  return @kind void;
}
procedure `void` `<init>`(`o.h` v2 @kind this) @signature `Lo/h;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L541690.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L541696.  v0:= 0I;
  #L541698.  v1:= new `float`[v0];
  #L54169c.  v2.`o.h.a` @type ^`float`[] := v1 @kind object;
  #L5416a0.  v0:= new `double`[v0];
  #L5416a4.  v2.`o.h.b` @type ^`double`[] := v0 @kind object;
  #L5416a8.  v0:= 6.283185307179586D;
  #L5416b2.  v2.`o.h.g` @type ^`double` := v0 @kind wide;
  #L5416b6.  return @kind void;
}
procedure `void` `a`(`o.h` v4 @kind this, `double` v5 , `float` v7 ) @signature `Lo/h;.a:(DF)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L5416c8.  v0:= v4.`o.h.a` @type ^`float`[] @kind object;
  #L5416cc.  v0:= length @variable v0;
  #L5416ce.  v0:= v0 + 1;
  #L5416d2.  v1:= v4.`o.h.b` @type ^`double`[] @kind object;
  #L5416d6.  call temp:= `binarySearch`(v1, v5) @signature `Ljava/util/Arrays;.binarySearch:([DD)I` @kind static;
  #L5416dc.  v1:= temp;
  #L5416de.  if v1 >= 0 then goto L5416e8;
  #L5416e2.  v1:= -v1 @kind int;
  #L5416e4.  v1:= v1 + -1;
  #L5416e8.  v2:= v4.`o.h.b` @type ^`double`[] @kind object;
  #L5416ec.  call temp:= `copyOf`(v2, v0) @signature `Ljava/util/Arrays;.copyOf:([DI)[D` @kind static;
  #L5416f2.  v2:= temp @kind object;
  #L5416f4.  v4.`o.h.b` @type ^`double`[] := v2 @kind object;
  #L5416f8.  v2:= v4.`o.h.a` @type ^`float`[] @kind object;
  #L5416fc.  call temp:= `copyOf`(v2, v0) @signature `Ljava/util/Arrays;.copyOf:([FI)[F` @kind static;
  #L541702.  v2:= temp @kind object;
  #L541704.  v4.`o.h.a` @type ^`float`[] := v2 @kind object;
  #L541708.  v2:= new `double`[v0];
  #L54170c.  v4.`o.h.c` @type ^`double`[] := v2 @kind object;
  #L541710.  v2:= v4.`o.h.b` @type ^`double`[] @kind object;
  #L541714.  v3:= v1 + 1;
  #L541718.  v0:= v0 - v1 @kind int;
  #L54171a.  v0:= v0 + -1;
  #L54171e.  call `arraycopy`(v2, v1, v2, v3, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L541724.  v0:= v4.`o.h.b` @type ^`double`[] @kind object;
  #L541728.  v0[v1]:= v5 @kind wide;
  #L54172c.  v5:= v4.`o.h.a` @type ^`float`[] @kind object;
  #L541730.  v5[v1]:= v7;
  #L541734.  return @kind void;
}
procedure `double` `b`(`o.h` v10 @kind this, `double` v11 ) @signature `Lo/h;.b:(D)D` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L5412f8.  v0:= 0L;
  #L5412fc.  v2:= dcmpg(v11, v0);
  #L541300.  if v2 > 0 then goto L541310;
  #L541304.  v11:= 1.0E-5D;
  #L54130e.  goto L541326;
  #L541310.  v2:= 1.0D;
  #L541314.  v4:= dcmpl(v11, v2);
  #L541318.  if v4 < 0 then goto L541326;
  #L54131c.  v11:= 0.999999D;
  #L541326.  v2:= v10.`o.h.b` @type ^`double`[] @kind object;
  #L54132a.  call temp:= `binarySearch`(v2, v11) @signature `Ljava/util/Arrays;.binarySearch:([DD)I` @kind static;
  #L541330.  v2:= temp;
  #L541332.  if v2 <= 0 then goto L541338;
  #L541336.  return v0 @kind wide;
  #L541338.  if v2 == 0 then goto L54137c;
  #L54133c.  v0:= -v2 @kind int;
  #L54133e.  v0:= v0 + -1;
  #L541342.  v1:= v10.`o.h.a` @type ^`float`[] @kind object;
  #L541346.  v2:= v1[v0];
  #L54134a.  v3:= v0 + -1;
  #L54134e.  v4:= v1[v3];
  #L541352.  v2:= v2 - v4 @kind float;
  #L541354.  v4:= (`double`) v2 @kind f2d;
  #L541356.  v2:= v10.`o.h.b` @type ^`double`[] @kind object;
  #L54135a.  v6:= v2[v0] @kind wide;
  #L54135e.  v8:= v2[v3] @kind wide;
  #L541362.  v6:= v6 - v8 @kind double;
  #L541364.  v4:= v4 / v6 @kind double;
  #L541366.  v11:= v11 * v4 @kind double;
  #L54136a.  v0:= v1[v3];
  #L54136e.  v0:= (`double`) v0 @kind f2d;
  #L541370.  v6:= v2[v3] @kind wide;
  #L541374.  v4:= v4 * v6 @kind double;
  #L541378.  v0:= v0 - v4 @kind double;
  #L54137a.  v0:= v0 + v11 @kind double;
  #L54137c.  return v0 @kind wide;
}
procedure `double` `c`(`o.h` v10 @kind this, `double` v11 ) @signature `Lo/h;.c:(D)D` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L541390.  v0:= 1.0D;
  #L541394.  v2:= 0L;
  #L541398.  v4:= dcmpg(v11, v2);
  #L54139c.  if v4 >= 0 then goto L5413a4;
  #L5413a0.  v11:= v2 @kind wide;
  #L5413a2.  goto L5413ae;
  #L5413a4.  v4:= dcmpl(v11, v0);
  #L5413a8.  if v4 <= 0 then goto L5413ae;
  #L5413ac.  v11:= v0 @kind wide;
  #L5413ae.  v4:= v10.`o.h.b` @type ^`double`[] @kind object;
  #L5413b2.  call temp:= `binarySearch`(v4, v11) @signature `Ljava/util/Arrays;.binarySearch:([DD)I` @kind static;
  #L5413b8.  v4:= temp;
  #L5413ba.  if v4 <= 0 then goto L5413c0;
  #L5413be.  goto L541438;
  #L5413c0.  if v4 == 0 then goto L541436;
  #L5413c4.  v0:= -v4 @kind int;
  #L5413c6.  v0:= v0 + -1;
  #L5413ca.  v1:= v10.`o.h.a` @type ^`float`[] @kind object;
  #L5413ce.  v2:= v1[v0];
  #L5413d2.  v3:= v0 + -1;
  #L5413d6.  v4:= v1[v3];
  #L5413da.  v2:= v2 - v4 @kind float;
  #L5413dc.  v4:= (`double`) v2 @kind f2d;
  #L5413de.  v2:= v10.`o.h.b` @type ^`double`[] @kind object;
  #L5413e2.  v6:= v2[v0] @kind wide;
  #L5413e6.  v8:= v2[v3] @kind wide;
  #L5413ea.  v6:= v6 - v8 @kind double;
  #L5413ec.  v4:= v4 / v6 @kind double;
  #L5413ee.  v0:= v10.`o.h.c` @type ^`double`[] @kind object;
  #L5413f2.  v6:= v0[v3] @kind wide;
  #L5413f6.  v0:= v1[v3];
  #L5413fa.  v0:= (`double`) v0 @kind f2d;
  #L5413fc.  v8:= v2[v3] @kind wide;
  #L541400.  v8:= v8 * v4 @kind double;
  #L541404.  v0:= v0 - v8 @kind double;
  #L541406.  v8:= v2[v3] @kind wide;
  #L54140a.  v8:= v11 - v8 @kind double;
  #L54140e.  v0:= v0 * v8 @kind double;
  #L541412.  v6:= v6 + v0 @kind double;
  #L541414.  v11:= v11 * v11 @kind double;
  #L541418.  v0:= v2[v3] @kind wide;
  #L54141c.  v8:= v2[v3] @kind wide;
  #L541420.  v0:= v0 * v8 @kind double;
  #L541424.  v11:= v11 - v0 @kind double;
  #L541426.  v4:= v4 * v11 @kind double;
  #L54142a.  v11:= 2.0D;
  #L54142e.  v4:= v4 / v11 @kind double;
  #L541430.  v0:= v6 + v4 @kind double;
  #L541434.  goto L541438;
  #L541436.  v0:= v2 @kind wide;
  #L541438.  return v0 @kind wide;
}
procedure `double` `d`(`o.h` v4 @kind this, `double` v5 , `double` v7 , `double` v9 ) @signature `Lo/h;.d:(DDD)D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L54144c.  call temp:= `c`(v4, v5) @signature `Lo/h;.c:(D)D` @kind virtual;
  #L541452.  v0:= temp @kind wide;
  #L541454.  v7:= v7 + v0 @kind double;
  #L541456.  call temp:= `b`(v4, v5) @signature `Lo/h;.b:(D)D` @kind virtual;
  #L54145c.  v5:= temp @kind wide;
  #L54145e.  v5:= v5 + v9 @kind double;
  #L541460.  v9:= v4.`o.h.f` @type ^`int`;
  #L541464.  v0:= 2.0D;
  #L541468.  v2:= 4.0D;
  #L54146c.  goto L541508;
  #L541472.  v9:= v4.`o.h.g` @type ^`double` @kind wide;
  #L541476.  v5:= v5 * v9 @kind double;
  #L54147a.  v9:= v9 * v7 @kind double;
  #L54147e.  call temp:= `cos`(v9) @signature `Ljava/lang/Math;.cos:(D)D` @kind static;
  #L541484.  v7:= temp @kind wide;
  #L541486.  v5:= v5 * v7 @kind double;
  #L54148a.  return v5 @kind wide;
  #L54148c.  v5:= v4.`o.h.e` @type ^`o.g` @kind object;
  #L541490.  v9:= 1.0D;
  #L541494.  v7:= v7 %% v9 @kind double;
  #L541496.  v6:= 0I;
  #L541498.  call temp:= `f`(v5, v7, v6) @signature `Lo/g;.f:(DI)D` @kind virtual;
  #L54149e.  v5:= temp @kind wide;
  #L5414a0.  return v5 @kind wide;
  #L5414a2.  v5:= v5 * v2 @kind double;
  #L5414a6.  v7:= v7 * v2 @kind double;
  #L5414aa.  v7:= v7 + v0 @kind double;
  #L5414ac.  v7:= v7 %% v2 @kind double;
  #L5414ae.  v7:= v7 - v0 @kind double;
  #L5414b0.  v5:= v5 * v7 @kind double;
  #L5414b4.  return v5 @kind wide;
  #L5414b6.  v9:= v4.`o.h.g` @type ^`double` @kind wide;
  #L5414ba.  v0:= -v9 @kind double;
  #L5414bc.  v0:= v0 * v5 @kind double;
  #L5414c0.  v9:= v9 * v7 @kind double;
  #L5414c4.  call temp:= `sin`(v9) @signature `Ljava/lang/Math;.sin:(D)D` @kind static;
  #L5414ca.  v5:= temp @kind wide;
  #L5414cc.  v0:= v0 * v5 @kind double;
  #L5414d0.  return v0 @kind wide;
  #L5414d2.  v5:= -v5 @kind double;
  #L5414d4.  v5:= v5 * v0 @kind double;
  #L5414d8.  return v5 @kind wide;
  #L5414da.  v5:= v5 * v0 @kind double;
  #L5414de.  return v5 @kind wide;
  #L5414e0.  v5:= v5 * v2 @kind double;
  #L5414e4.  v7:= v7 * v2 @kind double;
  #L5414e8.  v9:= 3.0D;
  #L5414ec.  v7:= v7 + v9 @kind double;
  #L5414ee.  v7:= v7 %% v2 @kind double;
  #L5414f0.  v7:= v7 - v0 @kind double;
  #L5414f2.  call temp:= `signum`(v7) @signature `Ljava/lang/Math;.signum:(D)D` @kind static;
  #L5414f8.  v7:= temp @kind wide;
  #L5414fa.  v5:= v5 * v7 @kind double;
  #L5414fe.  return v5 @kind wide;
  #L541500.  v5:= 0L;
  #L541504.  return v5 @kind wide;
  #L541506.  
  #L541508.  switch v9
                  | 1 => goto L541500
                  | 2 => goto L5414e0
                  | 3 => goto L5414da
                  | 4 => goto L5414d2
                  | 5 => goto L5414b6
                  | 6 => goto L5414a2
                  | 7 => goto L54148c
                  | else => goto L541472;
}
procedure `double` `e`(`o.h` v7 @kind this, `double` v8 , `double` v10 ) @signature `Lo/h;.e:(DD)D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L54153c.  call temp:= `c`(v7, v8) @signature `Lo/h;.c:(D)D` @kind virtual;
  #L541542.  v8:= temp @kind wide;
  #L541544.  v8:= v8 + v10 @kind double;
  #L541546.  v0:= v7.`o.h.f` @type ^`int`;
  #L54154a.  v1:= 4.0D;
  #L54154e.  v3:= 2.0D;
  #L541552.  v5:= 1.0D;
  #L541556.  goto L5415ec;
  #L54155c.  v10:= v7.`o.h.g` @type ^`double` @kind wide;
  #L541560.  v10:= v10 * v8 @kind double;
  #L541564.  call temp:= `sin`(v10) @signature `Ljava/lang/Math;.sin:(D)D` @kind static;
  #L54156a.  v8:= temp @kind wide;
  #L54156c.  return v8 @kind wide;
  #L54156e.  v10:= v7.`o.h.e` @type ^`o.g` @kind object;
  #L541572.  v8:= v8 %% v5 @kind double;
  #L541574.  v11:= 0I;
  #L541576.  call temp:= `c`(v10, v8, v11) @signature `Lo/g;.c:(DI)D` @kind virtual;
  #L54157c.  v8:= temp @kind wide;
  #L54157e.  return v8 @kind wide;
  #L541580.  v8:= v8 * v1 @kind double;
  #L541584.  v8:= v8 %% v1 @kind double;
  #L541586.  v8:= v8 - v3 @kind double;
  #L541588.  call temp:= `abs`(v8) @signature `Ljava/lang/Math;.abs:(D)D` @kind static;
  #L54158e.  v8:= temp @kind wide;
  #L541590.  v8:= v5 - v8 @kind double;
  #L541594.  v8:= v8 * v8 @kind double;
  #L541598.  v5:= v5 - v8 @kind double;
  #L54159a.  return v5 @kind wide;
  #L54159c.  v0:= v7.`o.h.g` @type ^`double` @kind wide;
  #L5415a0.  v10:= v10 + v8 @kind double;
  #L5415a2.  v0:= v0 * v10 @kind double;
  #L5415a6.  call temp:= `cos`(v0) @signature `Ljava/lang/Math;.cos:(D)D` @kind static;
  #L5415ac.  v8:= temp @kind wide;
  #L5415ae.  return v8 @kind wide;
  #L5415b0.  v8:= v8 * v3 @kind double;
  #L5415b4.  v8:= v8 + v5 @kind double;
  #L5415b6.  v8:= v8 %% v3 @kind double;
  #L5415b8.  goto L541598;
  #L5415ba.  v8:= v8 * v3 @kind double;
  #L5415be.  v8:= v8 + v5 @kind double;
  #L5415c0.  v8:= v8 %% v3 @kind double;
  #L5415c2.  v8:= v8 - v5 @kind double;
  #L5415c4.  return v8 @kind wide;
  #L5415c6.  v8:= v8 * v1 @kind double;
  #L5415ca.  v8:= v8 + v5 @kind double;
  #L5415cc.  v8:= v8 %% v1 @kind double;
  #L5415ce.  v8:= v8 - v3 @kind double;
  #L5415d0.  call temp:= `abs`(v8) @signature `Ljava/lang/Math;.abs:(D)D` @kind static;
  #L5415d6.  v8:= temp @kind wide;
  #L5415d8.  goto L541598;
  #L5415da.  v10:= 0.5D;
  #L5415de.  v8:= v8 %% v5 @kind double;
  #L5415e0.  v10:= v10 - v8 @kind double;
  #L5415e2.  call temp:= `signum`(v10) @signature `Ljava/lang/Math;.signum:(D)D` @kind static;
  #L5415e8.  v8:= temp @kind wide;
  #L5415ea.  return v8 @kind wide;
  #L5415ec.  switch v0
                  | 1 => goto L5415da
                  | 2 => goto L5415c6
                  | 3 => goto L5415ba
                  | 4 => goto L5415b0
                  | 5 => goto L54159c
                  | 6 => goto L541580
                  | 7 => goto L54156e
                  | else => goto L54155c;
}
procedure `void` `f`(`o.h` v17 @kind this) @signature `Lo/h;.f:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L541748.  v0:= v17 @kind object;
  #L54174c.  v1:= 0I;
  #L54174e.  v2:= 0L;
  #L541752.  v5:= v2 @kind wide;
  #L541754.  v4:= 0I;
  #L541756.  v7:= v0.`o.h.a` @type ^`float`[] @kind object;
  #L54175a.  v8:= length @variable v7;
  #L54175c.  if v4 >= v8 then goto L54176e;
  #L541760.  v7:= v7[v4];
  #L541764.  v7:= (`double`) v7 @kind f2d;
  #L541766.  v5:= v5 + v7 @kind double;
  #L541768.  v4:= v4 + 1;
  #L54176c.  goto L541756;
  #L54176e.  v4:= 1I;
  #L541770.  v8:= v2 @kind wide;
  #L541772.  v7:= 1I;
  #L541774.  v10:= v0.`o.h.a` @type ^`float`[] @kind object;
  #L541778.  v11:= length @variable v10;
  #L54177a.  v12:= 2.0F;
  #L54177e.  if v7 >= v11 then goto L5417ae;
  #L541782.  v11:= v7 + -1;
  #L541786.  v13:= v10[v11];
  #L54178a.  v10:= v10[v7];
  #L54178e.  v13:= v13 + v10 @kind float;
  #L541790.  v13:= v13 / v12 @kind float;
  #L541792.  v10:= v0.`o.h.b` @type ^`double`[] @kind object;
  #L541796.  v14:= v10[v7] @kind wide;
  #L54179a.  v11:= v10[v11] @kind wide;
  #L54179e.  v14:= v14 - v11 @kind double;
  #L5417a0.  v10:= (`double`) v13 @kind f2d;
  #L5417a2.  v14:= v14 * v10 @kind double;
  #L5417a6.  v8:= v8 + v14 @kind double;
  #L5417a8.  v7:= v7 + 1;
  #L5417ac.  goto L541774;
  #L5417ae.  v7:= 0I;
  #L5417b0.  v10:= v0.`o.h.a` @type ^`float`[] @kind object;
  #L5417b4.  v11:= length @variable v10;
  #L5417b6.  if v7 >= v11 then goto L5417d4;
  #L5417ba.  v11:= v10[v7];
  #L5417be.  v13:= (`double`) v11 @kind f2d;
  #L5417c0.  v15:= v5 / v8 @kind double;
  #L5417c4.  v13:= v13 * v15 @kind double;
  #L5417c8.  v11:= (`float`) v13 @kind d2f;
  #L5417ca.  v10[v7]:= v11;
  #L5417ce.  v7:= v7 + 1;
  #L5417d2.  goto L5417b0;
  #L5417d4.  v5:= v0.`o.h.c` @type ^`double`[] @kind object;
  #L5417d8.  v5[v1]:= v2 @kind wide;
  #L5417dc.  v1:= v0.`o.h.a` @type ^`float`[] @kind object;
  #L5417e0.  v2:= length @variable v1;
  #L5417e2.  if v4 >= v2 then goto L54181e;
  #L5417e6.  v2:= v4 + -1;
  #L5417ea.  v3:= v1[v2];
  #L5417ee.  v1:= v1[v4];
  #L5417f2.  v3:= v3 + v1 @kind float;
  #L5417f4.  v3:= v3 / v12 @kind float;
  #L5417f6.  v1:= v0.`o.h.b` @type ^`double`[] @kind object;
  #L5417fa.  v5:= v1[v4] @kind wide;
  #L5417fe.  v7:= v1[v2] @kind wide;
  #L541802.  v5:= v5 - v7 @kind double;
  #L541804.  v1:= v0.`o.h.c` @type ^`double`[] @kind object;
  #L541808.  v7:= v1[v2] @kind wide;
  #L54180c.  v2:= (`double`) v3 @kind f2d;
  #L54180e.  v5:= v5 * v2 @kind double;
  #L541812.  v7:= v7 + v5 @kind double;
  #L541814.  v1[v4]:= v7 @kind wide;
  #L541818.  v4:= v4 + 1;
  #L54181c.  goto L5417dc;
  #L54181e.  return @kind void;
}
procedure `void` `g`(`o.h` v0 @kind this, `int` v1 , `java.lang.String` v2 @kind object) @signature `Lo/h;.g:(ILjava/lang/String;)V` @AccessFlag PUBLIC {
    temp;

  #L541830.  v0.`o.h.f` @type ^`int` := v1;
  #L541834.  v0.`o.h.d` @type ^`java.lang.String` := v2 @kind object;
  #L541838.  if v2 == 0 then goto L541848;
  #L54183c.  call temp:= `i`(v2) @signature `Lo/g;.i:(Ljava/lang/String;)Lo/g;` @kind static;
  #L541842.  v1:= temp @kind object;
  #L541844.  v0.`o.h.e` @type ^`o.g` := v1 @kind object;
  #L541848.  return @kind void;
}
procedure `java.lang.String` `toString`(`o.h` v2 @kind this) @signature `Lo/h;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L541620.  v0:= new `java.lang.StringBuilder`;
  #L541624.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L54162a.  v1:= "pos =" @kind object;
  #L54162e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L541634.  v1:= v2.`o.h.b` @type ^`double`[] @kind object;
  #L541638.  call temp:= `toString`(v1) @signature `Ljava/util/Arrays;.toString:([D)Ljava/lang/String;` @kind static;
  #L54163e.  v1:= temp @kind object;
  #L541640.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L541646.  v1:= " period=" @kind object;
  #L54164a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L541650.  v1:= v2.`o.h.a` @type ^`float`[] @kind object;
  #L541654.  call temp:= `toString`(v1) @signature `Ljava/util/Arrays;.toString:([F)Ljava/lang/String;` @kind static;
  #L54165a.  v1:= temp @kind object;
  #L54165c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L541662.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L541668.  v0:= temp @kind object;
  #L54166a.  return v0 @kind object;
}
