record `o.e$b` @kind class @AccessFlag  {
  `o.h` `o.e$b.a` @AccessFlag ;
  `float`[] `o.e$b.b` @AccessFlag ;
  `double`[] `o.e$b.c` @AccessFlag ;
  `float`[] `o.e$b.d` @AccessFlag ;
  `float`[] `o.e$b.e` @AccessFlag ;
  `float`[] `o.e$b.f` @AccessFlag ;
  `o.b` `o.e$b.g` @AccessFlag ;
  `double`[] `o.e$b.h` @AccessFlag ;
  `double`[] `o.e$b.i` @AccessFlag ;
}
procedure `void` `<init>`(`o.e$b` v0 @kind this, `int` v1 , `java.lang.String` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lo/e$b;.<init>:(ILjava/lang/String;II)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L53fc70.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L53fc76.  v3:= new `o.h`;
  #L53fc7a.  call `<init>`(v3) @signature `Lo/h;.<init>:()V` @kind direct;
  #L53fc80.  v0.`o.e$b.a` @type ^`o.h` := v3 @kind object;
  #L53fc84.  call `g`(v3, v1, v2) @signature `Lo/h;.g:(ILjava/lang/String;)V` @kind virtual;
  #L53fc8a.  v1:= new `float`[v4];
  #L53fc8e.  v0.`o.e$b.b` @type ^`float`[] := v1 @kind object;
  #L53fc92.  v1:= new `double`[v4];
  #L53fc96.  v0.`o.e$b.c` @type ^`double`[] := v1 @kind object;
  #L53fc9a.  v1:= new `float`[v4];
  #L53fc9e.  v0.`o.e$b.d` @type ^`float`[] := v1 @kind object;
  #L53fca2.  v1:= new `float`[v4];
  #L53fca6.  v0.`o.e$b.e` @type ^`float`[] := v1 @kind object;
  #L53fcaa.  v1:= new `float`[v4];
  #L53fcae.  v0.`o.e$b.f` @type ^`float`[] := v1 @kind object;
  #L53fcb2.  v1:= new `float`[v4];
  #L53fcb6.  return @kind void;
}
procedure `double` `a`(`o.e$b` v13 @kind this, `float` v14 ) @signature `Lo/e$b;.a:(F)D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L53fb48.  v0:= v13.`o.e$b.g` @type ^`o.b` @kind object;
  #L53fb4c.  v1:= 0I;
  #L53fb4e.  v2:= 2I;
  #L53fb50.  v3:= 1I;
  #L53fb52.  if v0 == 0 then goto L53fb72;
  #L53fb56.  v4:= (`double`) v14 @kind f2d;
  #L53fb58.  v6:= v13.`o.e$b.i` @type ^`double`[] @kind object;
  #L53fb5c.  call `g`(v0, v4, v6) @signature `Lo/b;.g:(D[D)V` @kind virtual;
  #L53fb62.  v0:= v13.`o.e$b.g` @type ^`o.b` @kind object;
  #L53fb66.  v6:= v13.`o.e$b.h` @type ^`double`[] @kind object;
  #L53fb6a.  call `d`(v0, v4, v6) @signature `Lo/b;.d:(D[D)V` @kind virtual;
  #L53fb70.  goto L53fb86;
  #L53fb72.  v0:= v13.`o.e$b.i` @type ^`double`[] @kind object;
  #L53fb76.  v4:= 0L;
  #L53fb7a.  v0[v1]:= v4 @kind wide;
  #L53fb7e.  v0[v3]:= v4 @kind wide;
  #L53fb82.  v0[v2]:= v4 @kind wide;
  #L53fb86.  v0:= v13.`o.e$b.a` @type ^`o.h` @kind object;
  #L53fb8a.  v5:= (`double`) v14 @kind f2d;
  #L53fb8c.  v14:= v13.`o.e$b.h` @type ^`double`[] @kind object;
  #L53fb90.  v7:= v14[v3] @kind wide;
  #L53fb94.  call temp:= `e`(v0, v5, v7) @signature `Lo/h;.e:(DD)D` @kind virtual;
  #L53fb9a.  v11:= temp @kind wide;
  #L53fb9c.  v4:= v13.`o.e$b.a` @type ^`o.h` @kind object;
  #L53fba0.  v14:= v13.`o.e$b.h` @type ^`double`[] @kind object;
  #L53fba4.  v7:= v14[v3] @kind wide;
  #L53fba8.  v14:= v13.`o.e$b.i` @type ^`double`[] @kind object;
  #L53fbac.  v9:= v14[v3] @kind wide;
  #L53fbb0.  call temp:= `d`(v4, v5, v7, v9) @signature `Lo/h;.d:(DDD)D` @kind virtual;
  #L53fbb6.  v3:= temp @kind wide;
  #L53fbb8.  v14:= v13.`o.e$b.i` @type ^`double`[] @kind object;
  #L53fbbc.  v0:= v14[v1] @kind wide;
  #L53fbc0.  v5:= v14[v2] @kind wide;
  #L53fbc4.  v11:= v11 * v5 @kind double;
  #L53fbc8.  v0:= v0 + v11 @kind double;
  #L53fbca.  v14:= v13.`o.e$b.h` @type ^`double`[] @kind object;
  #L53fbce.  v5:= v14[v2] @kind wide;
  #L53fbd2.  v3:= v3 * v5 @kind double;
  #L53fbd6.  v0:= v0 + v3 @kind double;
  #L53fbd8.  return v0 @kind wide;
}
procedure `double` `b`(`o.e$b` v9 @kind this, `float` v10 ) @signature `Lo/e$b;.b:(F)D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L53fbec.  v0:= v9.`o.e$b.g` @type ^`o.b` @kind object;
  #L53fbf0.  v1:= 2I;
  #L53fbf2.  v2:= 1I;
  #L53fbf4.  v3:= 0I;
  #L53fbf6.  if v0 == 0 then goto L53fc08;
  #L53fbfa.  v4:= (`double`) v10 @kind f2d;
  #L53fbfc.  v6:= v9.`o.e$b.h` @type ^`double`[] @kind object;
  #L53fc00.  call `d`(v0, v4, v6) @signature `Lo/b;.d:(D[D)V` @kind virtual;
  #L53fc06.  goto L53fc36;
  #L53fc08.  v0:= v9.`o.e$b.h` @type ^`double`[] @kind object;
  #L53fc0c.  v4:= v9.`o.e$b.e` @type ^`float`[] @kind object;
  #L53fc10.  v4:= v4[v3];
  #L53fc14.  v4:= (`double`) v4 @kind f2d;
  #L53fc16.  v0[v3]:= v4 @kind wide;
  #L53fc1a.  v4:= v9.`o.e$b.f` @type ^`float`[] @kind object;
  #L53fc1e.  v4:= v4[v3];
  #L53fc22.  v4:= (`double`) v4 @kind f2d;
  #L53fc24.  v0[v2]:= v4 @kind wide;
  #L53fc28.  v4:= v9.`o.e$b.b` @type ^`float`[] @kind object;
  #L53fc2c.  v4:= v4[v3];
  #L53fc30.  v4:= (`double`) v4 @kind f2d;
  #L53fc32.  v0[v1]:= v4 @kind wide;
  #L53fc36.  v0:= v9.`o.e$b.h` @type ^`double`[] @kind object;
  #L53fc3a.  v3:= v0[v3] @kind wide;
  #L53fc3e.  v5:= v0[v2] @kind wide;
  #L53fc42.  v0:= v9.`o.e$b.a` @type ^`o.h` @kind object;
  #L53fc46.  v7:= (`double`) v10 @kind f2d;
  #L53fc48.  call temp:= `e`(v0, v7, v5) @signature `Lo/h;.e:(DD)D` @kind virtual;
  #L53fc4e.  v5:= temp @kind wide;
  #L53fc50.  v10:= v9.`o.e$b.h` @type ^`double`[] @kind object;
  #L53fc54.  v0:= v10[v1] @kind wide;
  #L53fc58.  v5:= v5 * v0 @kind double;
  #L53fc5c.  v3:= v3 + v5 @kind double;
  #L53fc5e.  return v3 @kind wide;
}
procedure `void` `c`(`o.e$b` v5 @kind this, `int` v6 , `int` v7 , `float` v8 , `float` v9 , `float` v10 , `float` v11 ) @signature `Lo/e$b;.c:(IIFFFF)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L53fcc8.  v0:= v5.`o.e$b.c` @type ^`double`[] @kind object;
  #L53fccc.  v1:= (`double`) v7 @kind i2d;
  #L53fcce.  v3:= 100.0D;
  #L53fcd2.  v1:= v1 / v3 @kind double;
  #L53fcd4.  v0[v6]:= v1 @kind wide;
  #L53fcd8.  v7:= v5.`o.e$b.d` @type ^`float`[] @kind object;
  #L53fcdc.  v7[v6]:= v8;
  #L53fce0.  v7:= v5.`o.e$b.e` @type ^`float`[] @kind object;
  #L53fce4.  v7[v6]:= v9;
  #L53fce8.  v7:= v5.`o.e$b.f` @type ^`float`[] @kind object;
  #L53fcec.  v7[v6]:= v10;
  #L53fcf0.  v7:= v5.`o.e$b.b` @type ^`float`[] @kind object;
  #L53fcf4.  v7[v6]:= v11;
  #L53fcf8.  return @kind void;
}
procedure `void` `d`(`o.e$b` v9 @kind this, `float` v10 ) @signature `Lo/e$b;.d:(F)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L53fd0c.  v10:= v9.`o.e$b.c` @type ^`double`[] @kind object;
  #L53fd10.  v10:= length @variable v10;
  #L53fd12.  v0:= 2I;
  #L53fd14.  v1:= new `int`[v0];
  #L53fd18.  v2:= 1I;
  #L53fd1a.  v3:= 3I;
  #L53fd1c.  v1[v2]:= v3;
  #L53fd20.  v3:= 0I;
  #L53fd22.  v1[v3]:= v10;
  #L53fd26.  v10:= constclass @type ^`double` @kind object;
  #L53fd2a.  call temp:= `newInstance`(v10, v1) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;[I)Ljava/lang/Object;` @kind static;
  #L53fd30.  v10:= temp @kind object;
  #L53fd32.  v10:= (`double`[][]) v10 @kind object;
  #L53fd36.  v1:= v9.`o.e$b.b` @type ^`float`[] @kind object;
  #L53fd3a.  v4:= length @variable v1;
  #L53fd3c.  v4:= v4 + v0 @kind int;
  #L53fd3e.  v4:= new `double`[v4];
  #L53fd42.  v9.`o.e$b.h` @type ^`double`[] := v4 @kind object;
  #L53fd46.  v1:= length @variable v1;
  #L53fd48.  v1:= v1 + v0 @kind int;
  #L53fd4a.  v1:= new `double`[v1];
  #L53fd4e.  v9.`o.e$b.i` @type ^`double`[] := v1 @kind object;
  #L53fd52.  v1:= v9.`o.e$b.c` @type ^`double`[] @kind object;
  #L53fd56.  v4:= v1[v3] @kind wide;
  #L53fd5a.  v6:= 0L;
  #L53fd5e.  v1:= dcmpl(v4, v6);
  #L53fd62.  if v1 <= 0 then goto L53fd78;
  #L53fd66.  v1:= v9.`o.e$b.a` @type ^`o.h` @kind object;
  #L53fd6a.  v4:= v9.`o.e$b.d` @type ^`float`[] @kind object;
  #L53fd6e.  v4:= v4[v3];
  #L53fd72.  call `a`(v1, v6, v4) @signature `Lo/h;.a:(DF)V` @kind virtual;
  #L53fd78.  v1:= v9.`o.e$b.c` @type ^`double`[] @kind object;
  #L53fd7c.  v4:= length @variable v1;
  #L53fd7e.  v4:= v4 - v2 @kind int;
  #L53fd80.  v5:= v1[v4] @kind wide;
  #L53fd84.  v7:= 1.0D;
  #L53fd88.  v1:= dcmpg(v5, v7);
  #L53fd8c.  if v1 >= 0 then goto L53fda2;
  #L53fd90.  v1:= v9.`o.e$b.a` @type ^`o.h` @kind object;
  #L53fd94.  v5:= v9.`o.e$b.d` @type ^`float`[] @kind object;
  #L53fd98.  v4:= v5[v4];
  #L53fd9c.  call `a`(v1, v7, v4) @signature `Lo/h;.a:(DF)V` @kind virtual;
  #L53fda2.  v1:= 0I;
  #L53fda4.  v4:= length @variable v10;
  #L53fda6.  if v1 >= v4 then goto L53fe00;
  #L53fdaa.  v4:= v10[v1] @kind object;
  #L53fdae.  v5:= v9.`o.e$b.e` @type ^`float`[] @kind object;
  #L53fdb2.  v5:= v5[v1];
  #L53fdb6.  v5:= (`double`) v5 @kind f2d;
  #L53fdb8.  v4[v3]:= v5 @kind wide;
  #L53fdbc.  v4:= v10[v1] @kind object;
  #L53fdc0.  v5:= v9.`o.e$b.f` @type ^`float`[] @kind object;
  #L53fdc4.  v5:= v5[v1];
  #L53fdc8.  v5:= (`double`) v5 @kind f2d;
  #L53fdca.  v4[v2]:= v5 @kind wide;
  #L53fdce.  v4:= v10[v1] @kind object;
  #L53fdd2.  v5:= v9.`o.e$b.b` @type ^`float`[] @kind object;
  #L53fdd6.  v5:= v5[v1];
  #L53fdda.  v5:= (`double`) v5 @kind f2d;
  #L53fddc.  v4[v0]:= v5 @kind wide;
  #L53fde0.  v4:= v9.`o.e$b.a` @type ^`o.h` @kind object;
  #L53fde4.  v5:= v9.`o.e$b.c` @type ^`double`[] @kind object;
  #L53fde8.  v6:= v5[v1] @kind wide;
  #L53fdec.  v5:= v9.`o.e$b.d` @type ^`float`[] @kind object;
  #L53fdf0.  v5:= v5[v1];
  #L53fdf4.  call `a`(v4, v6, v5) @signature `Lo/h;.a:(DF)V` @kind virtual;
  #L53fdfa.  v1:= v1 + 1;
  #L53fdfe.  goto L53fda4;
  #L53fe00.  v0:= v9.`o.e$b.a` @type ^`o.h` @kind object;
  #L53fe04.  call `f`(v0) @signature `Lo/h;.f:()V` @kind virtual;
  #L53fe0a.  v0:= v9.`o.e$b.c` @type ^`double`[] @kind object;
  #L53fe0e.  v1:= length @variable v0;
  #L53fe10.  if v1 <= v2 then goto L53fe22;
  #L53fe14.  call temp:= `a`(v3, v0, v10) @signature `Lo/b;.a:(I[D[[D)Lo/b;` @kind static;
  #L53fe1a.  v10:= temp @kind object;
  #L53fe1c.  v9.`o.e$b.g` @type ^`o.b` := v10 @kind object;
  #L53fe20.  goto L53fe28;
  #L53fe22.  v10:= 0I;
  #L53fe24.  v9.`o.e$b.g` @type ^`o.b` := v10 @kind object;
  #L53fe28.  return @kind void;
}
