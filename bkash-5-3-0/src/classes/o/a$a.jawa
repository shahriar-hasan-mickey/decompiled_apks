record `o.a$a` @kind class @AccessFlag  {
  `double`[] `o.a$a.a` @AccessFlag ;
  `double` `o.a$a.b` @AccessFlag ;
  `double` `o.a$a.c` @AccessFlag ;
  `double` `o.a$a.d` @AccessFlag ;
  `double` `o.a$a.e` @AccessFlag ;
  `double` `o.a$a.f` @AccessFlag ;
  `double` `o.a$a.g` @AccessFlag ;
  `double` `o.a$a.h` @AccessFlag ;
  `double` `o.a$a.i` @AccessFlag ;
  `double` `o.a$a.j` @AccessFlag ;
  `double` `o.a$a.k` @AccessFlag ;
  `double` `o.a$a.l` @AccessFlag ;
  `double` `o.a$a.m` @AccessFlag ;
  `double` `o.a$a.n` @AccessFlag ;
  `double` `o.a$a.o` @AccessFlag ;
  `double` `o.a$a.p` @AccessFlag ;
  `boolean` `o.a$a.q` @AccessFlag ;
  `boolean` `o.a$a.r` @AccessFlag ;
}
global `double`[] `@@o.a$a.s` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lo/a$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L53e5ac.  v0:= 91I;
  #L53e5b0.  v0:= new `double`[v0];
  #L53e5b4.  `@@o.a$a.s` @type ^`double`[] := v0 @kind object;
  #L53e5b8.  return @kind void;
}
procedure `void` `<init>`(`o.a$a` v20 @kind this, `int` v21 , `double` v22 , `double` v24 , `double` v26 , `double` v28 , `double` v30 , `double` v32 ) @signature `Lo/a$a;.<init>:(IDDDDDD)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;

  #L53e5cc.  v9:= v20 @kind object;
  #L53e5d0.  v0:= v21;
  #L53e5d4.  v1:= v22 @kind wide;
  #L53e5d8.  v3:= v24 @kind wide;
  #L53e5dc.  v5:= v26 @kind wide;
  #L53e5e0.  v7:= v28 @kind wide;
  #L53e5e4.  v10:= v30 @kind wide;
  #L53e5e8.  v12:= v32 @kind wide;
  #L53e5ec.  call `<init>`(v20) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L53e5f2.  v14:= 0I;
  #L53e5f4.  v9.`o.a$a.r` @type ^`boolean` := v14 @kind boolean;
  #L53e5f8.  v15:= 1I;
  #L53e5fa.  if v0 != v15 then goto L53e600;
  #L53e5fe.  v14:= 1I;
  #L53e600.  v9.`o.a$a.q` @type ^`boolean` := v14 @kind boolean;
  #L53e604.  v9.`o.a$a.c` @type ^`double` := v1 @kind wide;
  #L53e608.  v9.`o.a$a.d` @type ^`double` := v3 @kind wide;
  #L53e60c.  v16:= 1.0D;
  #L53e610.  v1:= v3 - v1 @kind double;
  #L53e614.  v1:= v16 / v1 @kind double;
  #L53e618.  v9.`o.a$a.i` @type ^`double` := v1 @kind wide;
  #L53e61c.  v1:= 3I;
  #L53e61e.  if v1 != v0 then goto L53e626;
  #L53e622.  v9.`o.a$a.r` @type ^`boolean` := v15 @kind boolean;
  #L53e626.  v0:= v10 - v5 @kind double;
  #L53e62a.  v2:= v12 - v7 @kind double;
  #L53e62e.  v4:= v9.`o.a$a.r` @type ^`boolean` @kind boolean;
  #L53e632.  if v4 != 0 then goto L53e6e2;
  #L53e636.  call temp:= `abs`(v0) @signature `Ljava/lang/Math;.abs:(D)D` @kind static;
  #L53e63c.  v16:= temp @kind wide;
  #L53e63e.  v18:= 0.001D;
  #L53e648.  v4:= dcmpg(v16, v18);
  #L53e64c.  if v4 < 0 then goto L53e6e2;
  #L53e650.  call temp:= `abs`(v2) @signature `Ljava/lang/Math;.abs:(D)D` @kind static;
  #L53e656.  v16:= temp @kind wide;
  #L53e658.  v4:= dcmpg(v16, v18);
  #L53e65c.  if v4 >= 0 then goto L53e662;
  #L53e660.  goto L53e6e2;
  #L53e662.  v4:= 101I;
  #L53e666.  v4:= new `double`[v4];
  #L53e66a.  v9.`o.a$a.a` @type ^`double`[] := v4 @kind object;
  #L53e66e.  v4:= v9.`o.a$a.q` @type ^`boolean` @kind boolean;
  #L53e672.  if v4 == 0 then goto L53e67a;
  #L53e676.  v14:= -1I;
  #L53e678.  goto L53e67c;
  #L53e67a.  v14:= 1I;
  #L53e67c.  v12:= (`double`) v14 @kind i2d;
  #L53e67e.  v0:= v0 * v12 @kind double;
  #L53e682.  v9.`o.a$a.j` @type ^`double` := v0 @kind wide;
  #L53e686.  if v4 == 0 then goto L53e68c;
  #L53e68a.  goto L53e68e;
  #L53e68c.  v15:= -1I;
  #L53e68e.  v0:= (`double`) v15 @kind i2d;
  #L53e690.  v2:= v2 * v0 @kind double;
  #L53e694.  v9.`o.a$a.k` @type ^`double` := v2 @kind wide;
  #L53e698.  if v4 == 0 then goto L53e6a0;
  #L53e69c.  v0:= v10 @kind wide;
  #L53e69e.  goto L53e6a2;
  #L53e6a0.  v0:= v5 @kind wide;
  #L53e6a2.  v9.`o.a$a.l` @type ^`double` := v0 @kind wide;
  #L53e6a6.  if v4 == 0 then goto L53e6ae;
  #L53e6aa.  v0:= v7 @kind wide;
  #L53e6ac.  goto L53e6b2;
  #L53e6ae.  v0:= v32 @kind wide;
  #L53e6b2.  v9.`o.a$a.m` @type ^`double` := v0 @kind wide;
  #L53e6b6.  v0:= v20 @kind object;
  #L53e6ba.  v1:= v26 @kind wide;
  #L53e6be.  v3:= v28 @kind wide;
  #L53e6c2.  v5:= v30 @kind wide;
  #L53e6c6.  v7:= v32 @kind wide;
  #L53e6ca.  call `a`(v0, v1, v3, v5, v7) @signature `Lo/a$a;.a:(DDDD)V` @kind direct;
  #L53e6d0.  v0:= v9.`o.a$a.b` @type ^`double` @kind wide;
  #L53e6d4.  v2:= v9.`o.a$a.i` @type ^`double` @kind wide;
  #L53e6d8.  v0:= v0 * v2 @kind double;
  #L53e6dc.  v9.`o.a$a.n` @type ^`double` := v0 @kind wide;
  #L53e6e0.  return @kind void;
  #L53e6e2.  v9.`o.a$a.r` @type ^`boolean` := v15 @kind boolean;
  #L53e6e6.  v9.`o.a$a.e` @type ^`double` := v5 @kind wide;
  #L53e6ea.  v9.`o.a$a.f` @type ^`double` := v10 @kind wide;
  #L53e6ee.  v9.`o.a$a.g` @type ^`double` := v7 @kind wide;
  #L53e6f2.  v4:= v32 @kind wide;
  #L53e6f6.  v9.`o.a$a.h` @type ^`double` := v4 @kind wide;
  #L53e6fa.  call temp:= `hypot`(v2, v0) @signature `Ljava/lang/Math;.hypot:(DD)D` @kind static;
  #L53e700.  v4:= temp @kind wide;
  #L53e702.  v9.`o.a$a.b` @type ^`double` := v4 @kind wide;
  #L53e706.  v6:= v9.`o.a$a.i` @type ^`double` @kind wide;
  #L53e70a.  v4:= v4 * v6 @kind double;
  #L53e70e.  v9.`o.a$a.n` @type ^`double` := v4 @kind wide;
  #L53e712.  v4:= v9.`o.a$a.d` @type ^`double` @kind wide;
  #L53e716.  v6:= v9.`o.a$a.c` @type ^`double` @kind wide;
  #L53e71a.  v10:= v4 - v6 @kind double;
  #L53e71e.  v0:= v0 / v10 @kind double;
  #L53e720.  v9.`o.a$a.l` @type ^`double` := v0 @kind wide;
  #L53e724.  v4:= v4 - v6 @kind double;
  #L53e726.  v2:= v2 / v4 @kind double;
  #L53e728.  v9.`o.a$a.m` @type ^`double` := v2 @kind wide;
  #L53e72c.  return @kind void;
}
procedure `void` `a`(`o.a$a` v20 @kind this, `double` v21 , `double` v23 , `double` v25 , `double` v27 ) @signature `Lo/a$a;.a:(DDDD)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;

  #L53e740.  v0:= v20 @kind object;
  #L53e744.  v1:= v25 - v21 @kind double;
  #L53e748.  v3:= v23 - v27 @kind double;
  #L53e74c.  v8:= 0I;
  #L53e74e.  v9:= 0L;
  #L53e752.  v11:= 0L;
  #L53e756.  v13:= 0L;
  #L53e75a.  v15:= `@@o.a$a.s` @type ^`double`[] @kind object;
  #L53e75e.  v5:= length @variable v15;
  #L53e760.  if v8 >= v5 then goto L53e7de;
  #L53e764.  v16:= 90.0D;
  #L53e76e.  v6:= (`double`) v8 @kind i2d;
  #L53e770.  v6:= v6 * v16 @kind double;
  #L53e774.  v5:= length @variable v15;
  #L53e776.  v5:= v5 + -1;
  #L53e77a.  v24:= v9 @kind wide;
  #L53e77e.  v9:= (`double`) v5 @kind i2d;
  #L53e780.  v6:= v6 / v9 @kind double;
  #L53e782.  call temp:= `toRadians`(v6) @signature `Ljava/lang/Math;.toRadians:(D)D` @kind static;
  #L53e788.  v5:= temp @kind wide;
  #L53e78a.  call temp:= `sin`(v5) @signature `Ljava/lang/Math;.sin:(D)D` @kind static;
  #L53e790.  v9:= temp @kind wide;
  #L53e792.  call temp:= `cos`(v5) @signature `Ljava/lang/Math;.cos:(D)D` @kind static;
  #L53e798.  v5:= temp @kind wide;
  #L53e79a.  v9:= v9 * v1 @kind double;
  #L53e79e.  v5:= v5 * v3 @kind double;
  #L53e7a2.  if v8 <= 0 then goto L53e7c6;
  #L53e7a6.  v11:= v9 - v11 @kind double;
  #L53e7aa.  v13:= v5 - v13 @kind double;
  #L53e7ae.  call temp:= `hypot`(v11, v13) @signature `Ljava/lang/Math;.hypot:(DD)D` @kind static;
  #L53e7b4.  v11:= temp @kind wide;
  #L53e7b6.  v13:= v24 @kind wide;
  #L53e7ba.  v11:= v11 + v13 @kind double;
  #L53e7bc.  v7:= `@@o.a$a.s` @type ^`double`[] @kind object;
  #L53e7c0.  v7[v8]:= v11 @kind wide;
  #L53e7c4.  goto L53e7cc;
  #L53e7c6.  v13:= v24 @kind wide;
  #L53e7ca.  v11:= v13 @kind wide;
  #L53e7cc.  v8:= v8 + 1;
  #L53e7d0.  v13:= v5 @kind wide;
  #L53e7d2.  v18:= v9 @kind wide;
  #L53e7d6.  v9:= v11 @kind wide;
  #L53e7d8.  v11:= v18 @kind wide;
  #L53e7dc.  goto L53e75a;
  #L53e7de.  v13:= v9 @kind wide;
  #L53e7e0.  v0.`o.a$a.b` @type ^`double` := v13 @kind wide;
  #L53e7e4.  v1:= 0I;
  #L53e7e6.  v2:= `@@o.a$a.s` @type ^`double`[] @kind object;
  #L53e7ea.  v3:= length @variable v2;
  #L53e7ec.  if v1 >= v3 then goto L53e800;
  #L53e7f0.  v3:= v2[v1] @kind wide;
  #L53e7f4.  v3:= v3 / v13 @kind double;
  #L53e7f6.  v2[v1]:= v3 @kind wide;
  #L53e7fa.  v1:= v1 + 1;
  #L53e7fe.  goto L53e7e6;
  #L53e800.  v5:= 0I;
  #L53e802.  v1:= v0.`o.a$a.a` @type ^`double`[] @kind object;
  #L53e806.  v2:= length @variable v1;
  #L53e808.  if v5 >= v2 then goto L53e89a;
  #L53e80c.  v2:= (`double`) v5 @kind i2d;
  #L53e80e.  v1:= length @variable v1;
  #L53e810.  v1:= v1 + -1;
  #L53e814.  v6:= (`double`) v1 @kind i2d;
  #L53e816.  v2:= v2 / v6 @kind double;
  #L53e818.  v1:= `@@o.a$a.s` @type ^`double`[] @kind object;
  #L53e81c.  call temp:= `binarySearch`(v1, v2) @signature `Ljava/util/Arrays;.binarySearch:([DD)I` @kind static;
  #L53e822.  v1:= temp;
  #L53e824.  if v1 < 0 then goto L53e846;
  #L53e828.  v2:= v0.`o.a$a.a` @type ^`double`[] @kind object;
  #L53e82c.  v3:= (`double`) v1 @kind i2d;
  #L53e82e.  v1:= `@@o.a$a.s` @type ^`double`[] @kind object;
  #L53e832.  v1:= length @variable v1;
  #L53e834.  v1:= v1 + -1;
  #L53e838.  v6:= (`double`) v1 @kind i2d;
  #L53e83a.  v3:= v3 / v6 @kind double;
  #L53e83c.  v2[v5]:= v3 @kind wide;
  #L53e840.  v6:= 0L;
  #L53e844.  goto L53e894;
  #L53e846.  v4:= -1I;
  #L53e848.  if v1 != v4 then goto L53e85a;
  #L53e84c.  v1:= v0.`o.a$a.a` @type ^`double`[] @kind object;
  #L53e850.  v6:= 0L;
  #L53e854.  v1[v5]:= v6 @kind wide;
  #L53e858.  goto L53e894;
  #L53e85a.  v6:= 0L;
  #L53e85e.  v1:= -v1 @kind int;
  #L53e860.  v4:= v1 + -2;
  #L53e864.  v1:= v1 + -1;
  #L53e868.  v8:= (`double`) v4 @kind i2d;
  #L53e86a.  v10:= `@@o.a$a.s` @type ^`double`[] @kind object;
  #L53e86e.  v11:= v10[v4] @kind wide;
  #L53e872.  v2:= v2 - v11 @kind double;
  #L53e874.  v11:= v10[v1] @kind wide;
  #L53e878.  v13:= v10[v4] @kind wide;
  #L53e87c.  v11:= v11 - v13 @kind double;
  #L53e87e.  v2:= v2 / v11 @kind double;
  #L53e880.  v8:= v8 + v2 @kind double;
  #L53e882.  v1:= length @variable v10;
  #L53e884.  v1:= v1 + -1;
  #L53e888.  v1:= (`double`) v1 @kind i2d;
  #L53e88a.  v8:= v8 / v1 @kind double;
  #L53e88c.  v1:= v0.`o.a$a.a` @type ^`double`[] @kind object;
  #L53e890.  v1[v5]:= v8 @kind wide;
  #L53e894.  v5:= v5 + 1;
  #L53e898.  goto L53e802;
  #L53e89a.  return @kind void;
}
procedure `double` `b`(`o.a$a` v6 @kind this) @signature `Lo/a$a;.b:()D` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L53e3e0.  v0:= v6.`o.a$a.j` @type ^`double` @kind wide;
  #L53e3e4.  v2:= v6.`o.a$a.p` @type ^`double` @kind wide;
  #L53e3e8.  v0:= v0 * v2 @kind double;
  #L53e3ec.  v2:= v6.`o.a$a.k` @type ^`double` @kind wide;
  #L53e3f0.  v2:= -v2 @kind double;
  #L53e3f2.  v4:= v6.`o.a$a.o` @type ^`double` @kind wide;
  #L53e3f6.  v2:= v2 * v4 @kind double;
  #L53e3fa.  v4:= v6.`o.a$a.n` @type ^`double` @kind wide;
  #L53e3fe.  call temp:= `hypot`(v0, v2) @signature `Ljava/lang/Math;.hypot:(DD)D` @kind static;
  #L53e404.  v2:= temp @kind wide;
  #L53e406.  v4:= v4 / v2 @kind double;
  #L53e408.  v2:= v6.`o.a$a.q` @type ^`boolean` @kind boolean;
  #L53e40c.  if v2 == 0 then goto L53e412;
  #L53e410.  v0:= -v0 @kind double;
  #L53e412.  v0:= v0 * v4 @kind double;
  #L53e416.  return v0 @kind wide;
}
procedure `double` `c`(`o.a$a` v6 @kind this) @signature `Lo/a$a;.c:()D` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L53e428.  v0:= v6.`o.a$a.j` @type ^`double` @kind wide;
  #L53e42c.  v2:= v6.`o.a$a.p` @type ^`double` @kind wide;
  #L53e430.  v0:= v0 * v2 @kind double;
  #L53e434.  v2:= v6.`o.a$a.k` @type ^`double` @kind wide;
  #L53e438.  v2:= -v2 @kind double;
  #L53e43a.  v4:= v6.`o.a$a.o` @type ^`double` @kind wide;
  #L53e43e.  v2:= v2 * v4 @kind double;
  #L53e442.  v4:= v6.`o.a$a.n` @type ^`double` @kind wide;
  #L53e446.  call temp:= `hypot`(v0, v2) @signature `Ljava/lang/Math;.hypot:(DD)D` @kind static;
  #L53e44c.  v0:= temp @kind wide;
  #L53e44e.  v4:= v4 / v0 @kind double;
  #L53e450.  v0:= v6.`o.a$a.q` @type ^`boolean` @kind boolean;
  #L53e454.  if v0 == 0 then goto L53e460;
  #L53e458.  v0:= -v2 @kind double;
  #L53e45a.  v0:= v0 * v4 @kind double;
  #L53e45e.  goto L53e464;
  #L53e460.  v0:= v2 * v4 @kind double;
  #L53e464.  return v0 @kind wide;
}
procedure `double` `d`(`o.a$a` v0 @kind this, `double` v1 ) @signature `Lo/a$a;.d:(D)D` @AccessFlag PUBLIC {
    temp;

  #L53e478.  v1:= v0.`o.a$a.l` @type ^`double` @kind wide;
  #L53e47c.  return v1 @kind wide;
}
procedure `double` `e`(`o.a$a` v0 @kind this, `double` v1 ) @signature `Lo/a$a;.e:(D)D` @AccessFlag PUBLIC {
    temp;

  #L53e490.  v1:= v0.`o.a$a.m` @type ^`double` @kind wide;
  #L53e494.  return v1 @kind wide;
}
procedure `double` `f`(`o.a$a` v4 @kind this, `double` v5 ) @signature `Lo/a$a;.f:(D)D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L53e4a8.  v0:= v4.`o.a$a.c` @type ^`double` @kind wide;
  #L53e4ac.  v5:= v5 - v0 @kind double;
  #L53e4ae.  v0:= v4.`o.a$a.i` @type ^`double` @kind wide;
  #L53e4b2.  v5:= v5 * v0 @kind double;
  #L53e4b6.  v0:= v4.`o.a$a.e` @type ^`double` @kind wide;
  #L53e4ba.  v2:= v4.`o.a$a.f` @type ^`double` @kind wide;
  #L53e4be.  v2:= v2 - v0 @kind double;
  #L53e4c0.  v5:= v5 * v2 @kind double;
  #L53e4c4.  v0:= v0 + v5 @kind double;
  #L53e4c6.  return v0 @kind wide;
}
procedure `double` `g`(`o.a$a` v4 @kind this, `double` v5 ) @signature `Lo/a$a;.g:(D)D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L53e4d8.  v0:= v4.`o.a$a.c` @type ^`double` @kind wide;
  #L53e4dc.  v5:= v5 - v0 @kind double;
  #L53e4de.  v0:= v4.`o.a$a.i` @type ^`double` @kind wide;
  #L53e4e2.  v5:= v5 * v0 @kind double;
  #L53e4e6.  v0:= v4.`o.a$a.g` @type ^`double` @kind wide;
  #L53e4ea.  v2:= v4.`o.a$a.h` @type ^`double` @kind wide;
  #L53e4ee.  v2:= v2 - v0 @kind double;
  #L53e4f0.  v5:= v5 * v2 @kind double;
  #L53e4f4.  v0:= v0 + v5 @kind double;
  #L53e4f6.  return v0 @kind wide;
}
procedure `double` `h`(`o.a$a` v6 @kind this) @signature `Lo/a$a;.h:()D` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L53e508.  v0:= v6.`o.a$a.l` @type ^`double` @kind wide;
  #L53e50c.  v2:= v6.`o.a$a.j` @type ^`double` @kind wide;
  #L53e510.  v4:= v6.`o.a$a.o` @type ^`double` @kind wide;
  #L53e514.  v2:= v2 * v4 @kind double;
  #L53e518.  v0:= v0 + v2 @kind double;
  #L53e51a.  return v0 @kind wide;
}
procedure `double` `i`(`o.a$a` v6 @kind this) @signature `Lo/a$a;.i:()D` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L53e52c.  v0:= v6.`o.a$a.m` @type ^`double` @kind wide;
  #L53e530.  v2:= v6.`o.a$a.k` @type ^`double` @kind wide;
  #L53e534.  v4:= v6.`o.a$a.p` @type ^`double` @kind wide;
  #L53e538.  v2:= v2 * v4 @kind double;
  #L53e53c.  v0:= v0 + v2 @kind double;
  #L53e53e.  return v0 @kind wide;
}
procedure `double` `j`(`o.a$a` v8 @kind this, `double` v9 ) @signature `Lo/a$a;.j:(D)D` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L53e550.  v0:= 0L;
  #L53e554.  v2:= dcmpg(v9, v0);
  #L53e558.  if v2 > 0 then goto L53e55e;
  #L53e55c.  return v0 @kind wide;
  #L53e55e.  v0:= 1.0D;
  #L53e562.  v2:= dcmpl(v9, v0);
  #L53e566.  if v2 < 0 then goto L53e56c;
  #L53e56a.  return v0 @kind wide;
  #L53e56c.  v0:= v8.`o.a$a.a` @type ^`double`[] @kind object;
  #L53e570.  v1:= length @variable v0;
  #L53e572.  v1:= v1 + -1;
  #L53e576.  v1:= (`double`) v1 @kind i2d;
  #L53e578.  v9:= v9 * v1 @kind double;
  #L53e57c.  v1:= (`int`) v9 @kind d2i;
  #L53e57e.  v2:= (`double`) v1 @kind i2d;
  #L53e580.  v9:= v9 - v2 @kind double;
  #L53e582.  v2:= v0[v1] @kind wide;
  #L53e586.  v4:= v1 + 1;
  #L53e58a.  v4:= v0[v4] @kind wide;
  #L53e58e.  v6:= v0[v1] @kind wide;
  #L53e592.  v4:= v4 - v6 @kind double;
  #L53e594.  v9:= v9 * v4 @kind double;
  #L53e598.  v2:= v2 + v9 @kind double;
  #L53e59a.  return v2 @kind wide;
}
procedure `void` `k`(`o.a$a` v2 @kind this, `double` v3 ) @signature `Lo/a$a;.k:(D)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L53e8ac.  v0:= v2.`o.a$a.q` @type ^`boolean` @kind boolean;
  #L53e8b0.  if v0 == 0 then goto L53e8bc;
  #L53e8b4.  v0:= v2.`o.a$a.d` @type ^`double` @kind wide;
  #L53e8b8.  v0:= v0 - v3 @kind double;
  #L53e8ba.  goto L53e8c4;
  #L53e8bc.  v0:= v2.`o.a$a.c` @type ^`double` @kind wide;
  #L53e8c0.  v0:= v3 - v0 @kind double;
  #L53e8c4.  v3:= v2.`o.a$a.i` @type ^`double` @kind wide;
  #L53e8c8.  v0:= v0 * v3 @kind double;
  #L53e8cc.  v3:= 1.5707963267948966D;
  #L53e8d6.  call temp:= `j`(v2, v0) @signature `Lo/a$a;.j:(D)D` @kind virtual;
  #L53e8dc.  v0:= temp @kind wide;
  #L53e8de.  v0:= v0 * v3 @kind double;
  #L53e8e2.  call temp:= `sin`(v0) @signature `Ljava/lang/Math;.sin:(D)D` @kind static;
  #L53e8e8.  v3:= temp @kind wide;
  #L53e8ea.  v2.`o.a$a.o` @type ^`double` := v3 @kind wide;
  #L53e8ee.  call temp:= `cos`(v0) @signature `Ljava/lang/Math;.cos:(D)D` @kind static;
  #L53e8f4.  v3:= temp @kind wide;
  #L53e8f6.  v2.`o.a$a.p` @type ^`double` := v3 @kind wide;
  #L53e8fa.  return @kind void;
}
