record `o.f` @kind class @AccessFlag PUBLIC extends `o.b` @kind class {
  `double`[] `o.f.a` @AccessFlag PRIVATE;
  `double`[][] `o.f.b` @AccessFlag PRIVATE;
  `boolean` `o.f.c` @AccessFlag PRIVATE;
  `double`[] `o.f.d` @AccessFlag ;
}
procedure `void` `<init>`(`o.f` v11 @kind this, `double`[] v12 @kind object, `double`[][] v13 @kind object) @signature `Lo/f;.<init>:([D[[D)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L54036c.  call `<init>`(v11) @signature `Lo/b;.<init>:()V` @kind direct;
  #L540372.  v0:= 1I;
  #L540374.  v11.`o.f.c` @type ^`boolean` := v0 @kind boolean;
  #L540378.  v0:= length @variable v12;
  #L54037a.  v0:= 0I;
  #L54037c.  v1:= v13[v0] @kind object;
  #L540380.  v1:= length @variable v1;
  #L540382.  v2:= new `double`[v1];
  #L540386.  v11.`o.f.d` @type ^`double`[] := v2 @kind object;
  #L54038a.  v11.`o.f.a` @type ^`double`[] := v12 @kind object;
  #L54038e.  v11.`o.f.b` @type ^`double`[][] := v13 @kind object;
  #L540392.  v2:= 2I;
  #L540394.  if v1 <= v2 then goto L5403d2;
  #L540398.  v1:= 0L;
  #L54039c.  v3:= v1 @kind wide;
  #L54039e.  v5:= 0I;
  #L5403a0.  v6:= length @variable v12;
  #L5403a2.  if v5 >= v6 then goto L5403d2;
  #L5403a6.  v6:= v13[v5] @kind object;
  #L5403aa.  v7:= v6[v0] @kind wide;
  #L5403ae.  v6:= v13[v5] @kind object;
  #L5403b2.  v9:= v6[v0] @kind wide;
  #L5403b6.  if v5 <= 0 then goto L5403c8;
  #L5403ba.  v1:= v7 - v1 @kind double;
  #L5403be.  v3:= v9 - v3 @kind double;
  #L5403c2.  call temp:= `hypot`(v1, v3) @signature `Ljava/lang/Math;.hypot:(DD)D` @kind static;
  #L5403c8.  v5:= v5 + 1;
  #L5403cc.  v1:= v7 @kind wide;
  #L5403ce.  v3:= v9 @kind wide;
  #L5403d0.  goto L5403a0;
  #L5403d2.  return @kind void;
}
procedure `double` `c`(`o.f` v8 @kind this, `double` v9 , `int` v11 ) @signature `Lo/f;.c:(DI)D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L540190.  v0:= v8.`o.f.a` @type ^`double`[] @kind object;
  #L540194.  v1:= length @variable v0;
  #L540196.  v2:= v8.`o.f.c` @type ^`boolean` @kind boolean;
  #L54019a.  v3:= 0I;
  #L54019c.  if v2 == 0 then goto L540208;
  #L5401a0.  v4:= v0[v3] @kind wide;
  #L5401a4.  v2:= dcmpg(v9, v4);
  #L5401a8.  if v2 > 0 then goto L5401d2;
  #L5401ac.  v1:= v8.`o.f.b` @type ^`double`[][] @kind object;
  #L5401b0.  v1:= v1[v3] @kind object;
  #L5401b4.  v4:= v1[v11] @kind wide;
  #L5401b8.  v1:= v0[v3] @kind wide;
  #L5401bc.  v9:= v9 - v1 @kind double;
  #L5401be.  v1:= v0[v3] @kind wide;
  #L5401c2.  call temp:= `f`(v8, v1, v11) @signature `Lo/f;.f:(DI)D` @kind virtual;
  #L5401c8.  v0:= temp @kind wide;
  #L5401ca.  v9:= v9 * v0 @kind double;
  #L5401ce.  v4:= v4 + v9 @kind double;
  #L5401d0.  return v4 @kind wide;
  #L5401d2.  v2:= v1 + -1;
  #L5401d6.  v4:= v0[v2] @kind wide;
  #L5401da.  v6:= dcmpl(v9, v4);
  #L5401de.  if v6 < 0 then goto L540240;
  #L5401e2.  v1:= v8.`o.f.b` @type ^`double`[][] @kind object;
  #L5401e6.  v1:= v1[v2] @kind object;
  #L5401ea.  v3:= v1[v11] @kind wide;
  #L5401ee.  v5:= v0[v2] @kind wide;
  #L5401f2.  v9:= v9 - v5 @kind double;
  #L5401f4.  v1:= v0[v2] @kind wide;
  #L5401f8.  call temp:= `f`(v8, v1, v11) @signature `Lo/f;.f:(DI)D` @kind virtual;
  #L5401fe.  v0:= temp @kind wide;
  #L540200.  v9:= v9 * v0 @kind double;
  #L540204.  v3:= v3 + v9 @kind double;
  #L540206.  return v3 @kind wide;
  #L540208.  v4:= v0[v3] @kind wide;
  #L54020c.  v2:= dcmpg(v9, v4);
  #L540210.  if v2 > 0 then goto L540222;
  #L540214.  v9:= v8.`o.f.b` @type ^`double`[][] @kind object;
  #L540218.  v9:= v9[v3] @kind object;
  #L54021c.  v10:= v9[v11] @kind wide;
  #L540220.  return v10 @kind wide;
  #L540222.  v2:= v1 + -1;
  #L540226.  v4:= v0[v2] @kind wide;
  #L54022a.  v0:= dcmpl(v9, v4);
  #L54022e.  if v0 < 0 then goto L540240;
  #L540232.  v9:= v8.`o.f.b` @type ^`double`[][] @kind object;
  #L540236.  v9:= v9[v2] @kind object;
  #L54023a.  v10:= v9[v11] @kind wide;
  #L54023e.  return v10 @kind wide;
  #L540240.  v0:= v1 + -1;
  #L540244.  if v3 >= v0 then goto L5402b2;
  #L540248.  v0:= v8.`o.f.a` @type ^`double`[] @kind object;
  #L54024c.  v4:= v0[v3] @kind wide;
  #L540250.  v2:= dcmpl(v9, v4);
  #L540254.  if v2 != 0 then goto L540266;
  #L540258.  v9:= v8.`o.f.b` @type ^`double`[][] @kind object;
  #L54025c.  v9:= v9[v3] @kind object;
  #L540260.  v10:= v9[v11] @kind wide;
  #L540264.  return v10 @kind wide;
  #L540266.  v2:= v3 + 1;
  #L54026a.  v4:= v0[v2] @kind wide;
  #L54026e.  v6:= dcmpg(v9, v4);
  #L540272.  if v6 >= 0 then goto L5402ae;
  #L540276.  v4:= v0[v2] @kind wide;
  #L54027a.  v6:= v0[v3] @kind wide;
  #L54027e.  v4:= v4 - v6 @kind double;
  #L540280.  v6:= v0[v3] @kind wide;
  #L540284.  v9:= v9 - v6 @kind double;
  #L540286.  v9:= v9 / v4 @kind double;
  #L540288.  v0:= v8.`o.f.b` @type ^`double`[][] @kind object;
  #L54028c.  v1:= v0[v3] @kind object;
  #L540290.  v3:= v1[v11] @kind wide;
  #L540294.  v0:= v0[v2] @kind object;
  #L540298.  v1:= v0[v11] @kind wide;
  #L54029c.  v5:= 1.0D;
  #L5402a0.  v5:= v5 - v9 @kind double;
  #L5402a2.  v3:= v3 * v5 @kind double;
  #L5402a6.  v1:= v1 * v9 @kind double;
  #L5402aa.  v3:= v3 + v1 @kind double;
  #L5402ac.  return v3 @kind wide;
  #L5402ae.  v3:= v2;
  #L5402b0.  goto L540240;
  #L5402b2.  v9:= 0L;
  #L5402b6.  return v9 @kind wide;
}
procedure `void` `d`(`o.f` v12 @kind this, `double` v13 , `double`[] v15 @kind object) @signature `Lo/f;.d:(D[D)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L5403e4.  v0:= v12.`o.f.a` @type ^`double`[] @kind object;
  #L5403e8.  v1:= length @variable v0;
  #L5403ea.  v2:= v12.`o.f.b` @type ^`double`[][] @kind object;
  #L5403ee.  v3:= 0I;
  #L5403f0.  v2:= v2[v3] @kind object;
  #L5403f4.  v2:= length @variable v2;
  #L5403f6.  v4:= v12.`o.f.c` @type ^`boolean` @kind boolean;
  #L5403fa.  if v4 == 0 then goto L5404a4;
  #L5403fe.  v4:= v0[v3] @kind wide;
  #L540402.  v6:= dcmpg(v13, v4);
  #L540406.  if v6 > 0 then goto L540450;
  #L54040a.  v4:= v0[v3] @kind wide;
  #L54040e.  v0:= v12.`o.f.d` @type ^`double`[] @kind object;
  #L540412.  call `g`(v12, v4, v0) @signature `Lo/f;.g:(D[D)V` @kind virtual;
  #L540418.  v0:= 0I;
  #L54041a.  if v0 >= v2 then goto L54044e;
  #L54041e.  v1:= v12.`o.f.b` @type ^`double`[][] @kind object;
  #L540422.  v1:= v1[v3] @kind object;
  #L540426.  v4:= v1[v0] @kind wide;
  #L54042a.  v1:= v12.`o.f.a` @type ^`double`[] @kind object;
  #L54042e.  v6:= v1[v3] @kind wide;
  #L540432.  v6:= v13 - v6 @kind double;
  #L540436.  v1:= v12.`o.f.d` @type ^`double`[] @kind object;
  #L54043a.  v8:= v1[v0] @kind wide;
  #L54043e.  v6:= v6 * v8 @kind double;
  #L540442.  v4:= v4 + v6 @kind double;
  #L540444.  v15[v0]:= v4 @kind wide;
  #L540448.  v0:= v0 + 1;
  #L54044c.  goto L54041a;
  #L54044e.  return @kind void;
  #L540450.  v4:= v1 + -1;
  #L540454.  v5:= v0[v4] @kind wide;
  #L540458.  v7:= dcmpl(v13, v5);
  #L54045c.  if v7 < 0 then goto L5404fa;
  #L540460.  v5:= v0[v4] @kind wide;
  #L540464.  v0:= v12.`o.f.d` @type ^`double`[] @kind object;
  #L540468.  call `g`(v12, v5, v0) @signature `Lo/f;.g:(D[D)V` @kind virtual;
  #L54046e.  if v3 >= v2 then goto L5404a2;
  #L540472.  v0:= v12.`o.f.b` @type ^`double`[][] @kind object;
  #L540476.  v0:= v0[v4] @kind object;
  #L54047a.  v5:= v0[v3] @kind wide;
  #L54047e.  v0:= v12.`o.f.a` @type ^`double`[] @kind object;
  #L540482.  v7:= v0[v4] @kind wide;
  #L540486.  v0:= v13 - v7 @kind double;
  #L54048a.  v7:= v12.`o.f.d` @type ^`double`[] @kind object;
  #L54048e.  v8:= v7[v3] @kind wide;
  #L540492.  v0:= v0 * v8 @kind double;
  #L540496.  v5:= v5 + v0 @kind double;
  #L540498.  v15[v3]:= v5 @kind wide;
  #L54049c.  v3:= v3 + 1;
  #L5404a0.  goto L54046e;
  #L5404a2.  return @kind void;
  #L5404a4.  v4:= v0[v3] @kind wide;
  #L5404a8.  v6:= dcmpg(v13, v4);
  #L5404ac.  if v6 > 0 then goto L5404ce;
  #L5404b0.  v13:= 0I;
  #L5404b2.  if v13 >= v2 then goto L5404cc;
  #L5404b6.  v14:= v12.`o.f.b` @type ^`double`[][] @kind object;
  #L5404ba.  v14:= v14[v3] @kind object;
  #L5404be.  v0:= v14[v13] @kind wide;
  #L5404c2.  v15[v13]:= v0 @kind wide;
  #L5404c6.  v13:= v13 + 1;
  #L5404ca.  goto L5404b2;
  #L5404cc.  return @kind void;
  #L5404ce.  v4:= v1 + -1;
  #L5404d2.  v5:= v0[v4] @kind wide;
  #L5404d6.  v0:= dcmpl(v13, v5);
  #L5404da.  if v0 < 0 then goto L5404fa;
  #L5404de.  if v3 >= v2 then goto L5404f8;
  #L5404e2.  v13:= v12.`o.f.b` @type ^`double`[][] @kind object;
  #L5404e6.  v13:= v13[v4] @kind object;
  #L5404ea.  v0:= v13[v3] @kind wide;
  #L5404ee.  v15[v3]:= v0 @kind wide;
  #L5404f2.  v3:= v3 + 1;
  #L5404f6.  goto L5404de;
  #L5404f8.  return @kind void;
  #L5404fa.  v0:= 0I;
  #L5404fc.  v4:= v1 + -1;
  #L540500.  if v0 >= v4 then goto L54058e;
  #L540504.  v4:= v12.`o.f.a` @type ^`double`[] @kind object;
  #L540508.  v5:= v4[v0] @kind wide;
  #L54050c.  v4:= dcmpl(v13, v5);
  #L540510.  if v4 != 0 then goto L540530;
  #L540514.  v4:= 0I;
  #L540516.  if v4 >= v2 then goto L540530;
  #L54051a.  v5:= v12.`o.f.b` @type ^`double`[][] @kind object;
  #L54051e.  v5:= v5[v0] @kind object;
  #L540522.  v6:= v5[v4] @kind wide;
  #L540526.  v15[v4]:= v6 @kind wide;
  #L54052a.  v4:= v4 + 1;
  #L54052e.  goto L540516;
  #L540530.  v4:= v12.`o.f.a` @type ^`double`[] @kind object;
  #L540534.  v5:= v0 + 1;
  #L540538.  v6:= v4[v5] @kind wide;
  #L54053c.  v8:= dcmpg(v13, v6);
  #L540540.  if v8 >= 0 then goto L54058a;
  #L540544.  v6:= v4[v5] @kind wide;
  #L540548.  v8:= v4[v0] @kind wide;
  #L54054c.  v6:= v6 - v8 @kind double;
  #L54054e.  v8:= v4[v0] @kind wide;
  #L540552.  v13:= v13 - v8 @kind double;
  #L540554.  v13:= v13 / v6 @kind double;
  #L540556.  if v3 >= v2 then goto L540588;
  #L54055a.  v1:= v12.`o.f.b` @type ^`double`[][] @kind object;
  #L54055e.  v4:= v1[v0] @kind object;
  #L540562.  v6:= v4[v3] @kind wide;
  #L540566.  v1:= v1[v5] @kind object;
  #L54056a.  v8:= v1[v3] @kind wide;
  #L54056e.  v10:= 1.0D;
  #L540572.  v10:= v10 - v13 @kind double;
  #L540574.  v6:= v6 * v10 @kind double;
  #L540578.  v8:= v8 * v13 @kind double;
  #L54057c.  v6:= v6 + v8 @kind double;
  #L54057e.  v15[v3]:= v6 @kind wide;
  #L540582.  v3:= v3 + 1;
  #L540586.  goto L540556;
  #L540588.  return @kind void;
  #L54058a.  v0:= v5;
  #L54058c.  goto L5404fc;
  #L54058e.  return @kind void;
}
procedure `void` `e`(`o.f` v12 @kind this, `double` v13 , `float`[] v15 @kind object) @signature `Lo/f;.e:(D[F)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L5405a0.  v0:= v12.`o.f.a` @type ^`double`[] @kind object;
  #L5405a4.  v1:= length @variable v0;
  #L5405a6.  v2:= v12.`o.f.b` @type ^`double`[][] @kind object;
  #L5405aa.  v3:= 0I;
  #L5405ac.  v2:= v2[v3] @kind object;
  #L5405b0.  v2:= length @variable v2;
  #L5405b2.  v4:= v12.`o.f.c` @type ^`boolean` @kind boolean;
  #L5405b6.  if v4 == 0 then goto L540664;
  #L5405ba.  v4:= v0[v3] @kind wide;
  #L5405be.  v6:= dcmpg(v13, v4);
  #L5405c2.  if v6 > 0 then goto L54060e;
  #L5405c6.  v4:= v0[v3] @kind wide;
  #L5405ca.  v0:= v12.`o.f.d` @type ^`double`[] @kind object;
  #L5405ce.  call `g`(v12, v4, v0) @signature `Lo/f;.g:(D[D)V` @kind virtual;
  #L5405d4.  v0:= 0I;
  #L5405d6.  if v0 >= v2 then goto L54060c;
  #L5405da.  v1:= v12.`o.f.b` @type ^`double`[][] @kind object;
  #L5405de.  v1:= v1[v3] @kind object;
  #L5405e2.  v4:= v1[v0] @kind wide;
  #L5405e6.  v1:= v12.`o.f.a` @type ^`double`[] @kind object;
  #L5405ea.  v6:= v1[v3] @kind wide;
  #L5405ee.  v6:= v13 - v6 @kind double;
  #L5405f2.  v1:= v12.`o.f.d` @type ^`double`[] @kind object;
  #L5405f6.  v8:= v1[v0] @kind wide;
  #L5405fa.  v6:= v6 * v8 @kind double;
  #L5405fe.  v4:= v4 + v6 @kind double;
  #L540600.  v1:= (`float`) v4 @kind d2f;
  #L540602.  v15[v0]:= v1;
  #L540606.  v0:= v0 + 1;
  #L54060a.  goto L5405d6;
  #L54060c.  return @kind void;
  #L54060e.  v4:= v1 + -1;
  #L540612.  v5:= v0[v4] @kind wide;
  #L540616.  v7:= dcmpl(v13, v5);
  #L54061a.  if v7 < 0 then goto L5406be;
  #L54061e.  v5:= v0[v4] @kind wide;
  #L540622.  v0:= v12.`o.f.d` @type ^`double`[] @kind object;
  #L540626.  call `g`(v12, v5, v0) @signature `Lo/f;.g:(D[D)V` @kind virtual;
  #L54062c.  if v3 >= v2 then goto L540662;
  #L540630.  v0:= v12.`o.f.b` @type ^`double`[][] @kind object;
  #L540634.  v0:= v0[v4] @kind object;
  #L540638.  v5:= v0[v3] @kind wide;
  #L54063c.  v0:= v12.`o.f.a` @type ^`double`[] @kind object;
  #L540640.  v7:= v0[v4] @kind wide;
  #L540644.  v0:= v13 - v7 @kind double;
  #L540648.  v7:= v12.`o.f.d` @type ^`double`[] @kind object;
  #L54064c.  v8:= v7[v3] @kind wide;
  #L540650.  v0:= v0 * v8 @kind double;
  #L540654.  v5:= v5 + v0 @kind double;
  #L540656.  v0:= (`float`) v5 @kind d2f;
  #L540658.  v15[v3]:= v0;
  #L54065c.  v3:= v3 + 1;
  #L540660.  goto L54062c;
  #L540662.  return @kind void;
  #L540664.  v4:= v0[v3] @kind wide;
  #L540668.  v6:= dcmpg(v13, v4);
  #L54066c.  if v6 > 0 then goto L540690;
  #L540670.  v13:= 0I;
  #L540672.  if v13 >= v2 then goto L54068e;
  #L540676.  v14:= v12.`o.f.b` @type ^`double`[][] @kind object;
  #L54067a.  v14:= v14[v3] @kind object;
  #L54067e.  v0:= v14[v13] @kind wide;
  #L540682.  v14:= (`float`) v0 @kind d2f;
  #L540684.  v15[v13]:= v14;
  #L540688.  v13:= v13 + 1;
  #L54068c.  goto L540672;
  #L54068e.  return @kind void;
  #L540690.  v4:= v1 + -1;
  #L540694.  v5:= v0[v4] @kind wide;
  #L540698.  v0:= dcmpl(v13, v5);
  #L54069c.  if v0 < 0 then goto L5406be;
  #L5406a0.  if v3 >= v2 then goto L5406bc;
  #L5406a4.  v13:= v12.`o.f.b` @type ^`double`[][] @kind object;
  #L5406a8.  v13:= v13[v4] @kind object;
  #L5406ac.  v0:= v13[v3] @kind wide;
  #L5406b0.  v13:= (`float`) v0 @kind d2f;
  #L5406b2.  v15[v3]:= v13;
  #L5406b6.  v3:= v3 + 1;
  #L5406ba.  goto L5406a0;
  #L5406bc.  return @kind void;
  #L5406be.  v0:= 0I;
  #L5406c0.  v4:= v1 + -1;
  #L5406c4.  if v0 >= v4 then goto L540756;
  #L5406c8.  v4:= v12.`o.f.a` @type ^`double`[] @kind object;
  #L5406cc.  v5:= v4[v0] @kind wide;
  #L5406d0.  v4:= dcmpl(v13, v5);
  #L5406d4.  if v4 != 0 then goto L5406f6;
  #L5406d8.  v4:= 0I;
  #L5406da.  if v4 >= v2 then goto L5406f6;
  #L5406de.  v5:= v12.`o.f.b` @type ^`double`[][] @kind object;
  #L5406e2.  v5:= v5[v0] @kind object;
  #L5406e6.  v6:= v5[v4] @kind wide;
  #L5406ea.  v5:= (`float`) v6 @kind d2f;
  #L5406ec.  v15[v4]:= v5;
  #L5406f0.  v4:= v4 + 1;
  #L5406f4.  goto L5406da;
  #L5406f6.  v4:= v12.`o.f.a` @type ^`double`[] @kind object;
  #L5406fa.  v5:= v0 + 1;
  #L5406fe.  v6:= v4[v5] @kind wide;
  #L540702.  v8:= dcmpg(v13, v6);
  #L540706.  if v8 >= 0 then goto L540752;
  #L54070a.  v6:= v4[v5] @kind wide;
  #L54070e.  v8:= v4[v0] @kind wide;
  #L540712.  v6:= v6 - v8 @kind double;
  #L540714.  v8:= v4[v0] @kind wide;
  #L540718.  v13:= v13 - v8 @kind double;
  #L54071a.  v13:= v13 / v6 @kind double;
  #L54071c.  if v3 >= v2 then goto L540750;
  #L540720.  v1:= v12.`o.f.b` @type ^`double`[][] @kind object;
  #L540724.  v4:= v1[v0] @kind object;
  #L540728.  v6:= v4[v3] @kind wide;
  #L54072c.  v1:= v1[v5] @kind object;
  #L540730.  v8:= v1[v3] @kind wide;
  #L540734.  v10:= 1.0D;
  #L540738.  v10:= v10 - v13 @kind double;
  #L54073a.  v6:= v6 * v10 @kind double;
  #L54073e.  v8:= v8 * v13 @kind double;
  #L540742.  v6:= v6 + v8 @kind double;
  #L540744.  v1:= (`float`) v6 @kind d2f;
  #L540746.  v15[v3]:= v1;
  #L54074a.  v3:= v3 + 1;
  #L54074e.  goto L54071c;
  #L540750.  return @kind void;
  #L540752.  v0:= v5;
  #L540754.  goto L5406c0;
  #L540756.  return @kind void;
}
procedure `double` `f`(`o.f` v7 @kind this, `double` v8 , `int` v10 ) @signature `Lo/f;.f:(DI)D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L5402c8.  v0:= v7.`o.f.a` @type ^`double`[] @kind object;
  #L5402cc.  v1:= length @variable v0;
  #L5402ce.  v2:= 0I;
  #L5402d0.  v3:= v0[v2] @kind wide;
  #L5402d4.  v5:= dcmpg(v8, v3);
  #L5402d8.  if v5 >= 0 then goto L5402e2;
  #L5402dc.  v8:= v0[v2] @kind wide;
  #L5402e0.  goto L5402f6;
  #L5402e2.  v3:= v1 + -1;
  #L5402e6.  v4:= v0[v3] @kind wide;
  #L5402ea.  v6:= dcmpl(v8, v4);
  #L5402ee.  if v6 < 0 then goto L5402f6;
  #L5402f2.  v8:= v0[v3] @kind wide;
  #L5402f6.  v0:= v1 + -1;
  #L5402fa.  if v2 >= v0 then goto L54033e;
  #L5402fe.  v0:= v7.`o.f.a` @type ^`double`[] @kind object;
  #L540302.  v3:= v2 + 1;
  #L540306.  v4:= v0[v3] @kind wide;
  #L54030a.  v6:= dcmpg(v8, v4);
  #L54030e.  if v6 > 0 then goto L54033a;
  #L540312.  v8:= v0[v3] @kind wide;
  #L540316.  v4:= v0[v2] @kind wide;
  #L54031a.  v8:= v8 - v4 @kind double;
  #L54031c.  v4:= v0[v2] @kind wide;
  #L540320.  v0:= v7.`o.f.b` @type ^`double`[][] @kind object;
  #L540324.  v1:= v0[v2] @kind object;
  #L540328.  v4:= v1[v10] @kind wide;
  #L54032c.  v0:= v0[v3] @kind object;
  #L540330.  v1:= v0[v10] @kind wide;
  #L540334.  v1:= v1 - v4 @kind double;
  #L540336.  v1:= v1 / v8 @kind double;
  #L540338.  return v1 @kind wide;
  #L54033a.  v2:= v3;
  #L54033c.  goto L5402f6;
  #L54033e.  v8:= 0L;
  #L540342.  return v8 @kind wide;
}
procedure `void` `g`(`o.f` v10 @kind this, `double` v11 , `double`[] v13 @kind object) @signature `Lo/f;.g:(D[D)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L540768.  v0:= v10.`o.f.a` @type ^`double`[] @kind object;
  #L54076c.  v1:= length @variable v0;
  #L54076e.  v2:= v10.`o.f.b` @type ^`double`[][] @kind object;
  #L540772.  v3:= 0I;
  #L540774.  v2:= v2[v3] @kind object;
  #L540778.  v2:= length @variable v2;
  #L54077a.  v4:= v0[v3] @kind wide;
  #L54077e.  v6:= dcmpg(v11, v4);
  #L540782.  if v6 > 0 then goto L54078c;
  #L540786.  v11:= v0[v3] @kind wide;
  #L54078a.  goto L5407a0;
  #L54078c.  v4:= v1 + -1;
  #L540790.  v5:= v0[v4] @kind wide;
  #L540794.  v7:= dcmpl(v11, v5);
  #L540798.  if v7 < 0 then goto L5407a0;
  #L54079c.  v11:= v0[v4] @kind wide;
  #L5407a0.  v0:= 0I;
  #L5407a2.  v4:= v1 + -1;
  #L5407a6.  if v0 >= v4 then goto L5407f6;
  #L5407aa.  v4:= v10.`o.f.a` @type ^`double`[] @kind object;
  #L5407ae.  v5:= v0 + 1;
  #L5407b2.  v6:= v4[v5] @kind wide;
  #L5407b6.  v8:= dcmpg(v11, v6);
  #L5407ba.  if v8 > 0 then goto L5407f2;
  #L5407be.  v11:= v4[v5] @kind wide;
  #L5407c2.  v6:= v4[v0] @kind wide;
  #L5407c6.  v11:= v11 - v6 @kind double;
  #L5407c8.  v6:= v4[v0] @kind wide;
  #L5407cc.  if v3 >= v2 then goto L5407f6;
  #L5407d0.  v1:= v10.`o.f.b` @type ^`double`[][] @kind object;
  #L5407d4.  v4:= v1[v0] @kind object;
  #L5407d8.  v6:= v4[v3] @kind wide;
  #L5407dc.  v1:= v1[v5] @kind object;
  #L5407e0.  v8:= v1[v3] @kind wide;
  #L5407e4.  v8:= v8 - v6 @kind double;
  #L5407e6.  v8:= v8 / v11 @kind double;
  #L5407e8.  v13[v3]:= v8 @kind wide;
  #L5407ec.  v3:= v3 + 1;
  #L5407f0.  goto L5407cc;
  #L5407f2.  v0:= v5;
  #L5407f4.  goto L5407a2;
  #L5407f6.  return @kind void;
}
procedure `double`[] `h`(`o.f` v1 @kind this) @signature `Lo/f;.h:()[D` @AccessFlag PUBLIC {
    temp;
    v0;

  #L540354.  v0:= v1.`o.f.a` @type ^`double`[] @kind object;
  #L540358.  return v0 @kind object;
}
