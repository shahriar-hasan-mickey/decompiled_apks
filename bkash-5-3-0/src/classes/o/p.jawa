record `o.p` @kind class @AccessFlag PUBLIC {
  `float` `o.p.a` @AccessFlag ;
  `float` `o.p.b` @AccessFlag ;
  `float` `o.p.c` @AccessFlag ;
  `float` `o.p.d` @AccessFlag ;
  `float` `o.p.e` @AccessFlag ;
  `float` `o.p.f` @AccessFlag ;
}
procedure `void` `<clinit>`() @signature `Lo/p;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;

  #L542a94.  return @kind void;
}
procedure `void` `<init>`(`o.p` v0 @kind this) @signature `Lo/p;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L542aa8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L542aae.  return @kind void;
}
procedure `void` `a`(`o.p` v18 @kind this, `float` v19 , `float` v20 , `int` v21 , `int` v22 , `float`[] v23 @kind object) @signature `Lo/p;.a:(FFII[F)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L542ac0.  v0:= v18 @kind object;
  #L542ac4.  v1:= v21;
  #L542ac8.  v2:= 0I;
  #L542aca.  v3:= v23[v2];
  #L542ace.  v4:= 1I;
  #L542ad0.  v5:= v23[v4];
  #L542ad4.  v6:= 0.5F;
  #L542ad8.  v7:= v19 - v6 @kind float;
  #L542adc.  v8:= 2.0F;
  #L542ae0.  v7:= v7 * v8 @kind float;
  #L542ae4.  v6:= v20 - v6 @kind float;
  #L542ae8.  v6:= v6 * v8 @kind float;
  #L542aec.  v8:= v0.`o.p.c` @type ^`float`;
  #L542af0.  v3:= v3 + v8 @kind float;
  #L542af2.  v8:= v0.`o.p.d` @type ^`float`;
  #L542af6.  v5:= v5 + v8 @kind float;
  #L542af8.  v8:= v0.`o.p.a` @type ^`float`;
  #L542afc.  v8:= v8 * v7 @kind float;
  #L542b00.  v3:= v3 + v8 @kind float;
  #L542b02.  v8:= v0.`o.p.b` @type ^`float`;
  #L542b06.  v8:= v8 * v6 @kind float;
  #L542b0a.  v5:= v5 + v8 @kind float;
  #L542b0c.  v8:= v0.`o.p.f` @type ^`float`;
  #L542b10.  v8:= (`double`) v8 @kind f2d;
  #L542b12.  call temp:= `toRadians`(v8) @signature `Ljava/lang/Math;.toRadians:(D)D` @kind static;
  #L542b18.  v8:= temp @kind wide;
  #L542b1a.  v8:= (`float`) v8 @kind d2f;
  #L542b1c.  v9:= v0.`o.p.e` @type ^`float`;
  #L542b20.  v9:= (`double`) v9 @kind f2d;
  #L542b22.  call temp:= `toRadians`(v9) @signature `Ljava/lang/Math;.toRadians:(D)D` @kind static;
  #L542b28.  v9:= temp @kind wide;
  #L542b2a.  v9:= (`float`) v9 @kind d2f;
  #L542b2c.  v10:= -v1 @kind int;
  #L542b2e.  v10:= (`float`) v10 @kind i2f;
  #L542b30.  v10:= v10 * v7 @kind float;
  #L542b34.  v10:= (`double`) v10 @kind f2d;
  #L542b36.  v12:= (`double`) v8 @kind f2d;
  #L542b38.  call temp:= `sin`(v12) @signature `Ljava/lang/Math;.sin:(D)D` @kind static;
  #L542b3e.  v14:= temp @kind wide;
  #L542b40.  v10:= v10 * v14 @kind double;
  #L542b44.  v8:= v22;
  #L542b48.  v8:= (`float`) v8 @kind i2f;
  #L542b4a.  v8:= v8 * v6 @kind float;
  #L542b4e.  v14:= (`double`) v8 @kind f2d;
  #L542b50.  call temp:= `cos`(v12) @signature `Ljava/lang/Math;.cos:(D)D` @kind static;
  #L542b56.  v16:= temp @kind wide;
  #L542b58.  v16:= v16 * v14 @kind double;
  #L542b5c.  v10:= v10 - v16 @kind double;
  #L542b60.  v6:= (`float`) v10 @kind d2f;
  #L542b62.  v6:= v6 * v9 @kind float;
  #L542b66.  v3:= v3 + v6 @kind float;
  #L542b68.  v1:= (`float`) v1 @kind i2f;
  #L542b6a.  v1:= v1 * v7 @kind float;
  #L542b6e.  v6:= (`double`) v1 @kind f2d;
  #L542b70.  call temp:= `cos`(v12) @signature `Ljava/lang/Math;.cos:(D)D` @kind static;
  #L542b76.  v10:= temp @kind wide;
  #L542b78.  v6:= v6 * v10 @kind double;
  #L542b7c.  call temp:= `sin`(v12) @signature `Ljava/lang/Math;.sin:(D)D` @kind static;
  #L542b82.  v10:= temp @kind wide;
  #L542b84.  v14:= v14 * v10 @kind double;
  #L542b88.  v6:= v6 - v14 @kind double;
  #L542b8a.  v1:= (`float`) v6 @kind d2f;
  #L542b8c.  v9:= v9 * v1 @kind float;
  #L542b90.  v5:= v5 + v9 @kind float;
  #L542b92.  v23[v2]:= v3;
  #L542b96.  v23[v4]:= v5;
  #L542b9a.  return @kind void;
}
procedure `void` `b`(`o.p` v1 @kind this) @signature `Lo/p;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L542bac.  v0:= 0I;
  #L542bae.  v1.`o.p.e` @type ^`float` := v0;
  #L542bb2.  v1.`o.p.d` @type ^`float` := v0;
  #L542bb6.  v1.`o.p.c` @type ^`float` := v0;
  #L542bba.  v1.`o.p.b` @type ^`float` := v0;
  #L542bbe.  v1.`o.p.a` @type ^`float` := v0;
  #L542bc2.  return @kind void;
}
procedure `void` `c`(`o.p` v0 @kind this, `o.e` v1 @kind object, `float` v2 ) @signature `Lo/p;.c:(Lo/e;F)V` @AccessFlag PUBLIC {
    temp;

  #L542bd4.  if v1 == 0 then goto L542be4;
  #L542bd8.  call temp:= `b`(v1, v2) @signature `Lo/e;.b:(F)F` @kind virtual;
  #L542bde.  v1:= temp;
  #L542be0.  v0.`o.p.e` @type ^`float` := v1;
  #L542be4.  return @kind void;
}
procedure `void` `d`(`o.p` v1 @kind this, `o.j` v2 @kind object, `float` v3 ) @signature `Lo/p;.d:(Lo/j;F)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L542bf8.  if v2 == 0 then goto L542c14;
  #L542bfc.  call temp:= `b`(v2, v3) @signature `Lo/j;.b:(F)F` @kind virtual;
  #L542c02.  v0:= temp;
  #L542c04.  v1.`o.p.e` @type ^`float` := v0;
  #L542c08.  call temp:= `a`(v2, v3) @signature `Lo/j;.a:(F)F` @kind virtual;
  #L542c0e.  v2:= temp;
  #L542c10.  v1.`o.p.f` @type ^`float` := v2;
  #L542c14.  return @kind void;
}
procedure `void` `e`(`o.p` v0 @kind this, `o.e` v1 @kind object, `o.e` v2 @kind object, `float` v3 ) @signature `Lo/p;.e:(Lo/e;Lo/e;F)V` @AccessFlag PUBLIC {
    temp;

  #L542c28.  if v1 == 0 then goto L542c38;
  #L542c2c.  call temp:= `b`(v1, v3) @signature `Lo/e;.b:(F)F` @kind virtual;
  #L542c32.  v1:= temp;
  #L542c34.  v0.`o.p.a` @type ^`float` := v1;
  #L542c38.  if v2 == 0 then goto L542c48;
  #L542c3c.  call temp:= `b`(v2, v3) @signature `Lo/e;.b:(F)F` @kind virtual;
  #L542c42.  v1:= temp;
  #L542c44.  v0.`o.p.b` @type ^`float` := v1;
  #L542c48.  return @kind void;
}
procedure `void` `f`(`o.p` v0 @kind this, `o.j` v1 @kind object, `o.j` v2 @kind object, `float` v3 ) @signature `Lo/p;.f:(Lo/j;Lo/j;F)V` @AccessFlag PUBLIC {
    temp;

  #L542c5c.  if v1 == 0 then goto L542c6c;
  #L542c60.  call temp:= `b`(v1, v3) @signature `Lo/j;.b:(F)F` @kind virtual;
  #L542c66.  v1:= temp;
  #L542c68.  v0.`o.p.a` @type ^`float` := v1;
  #L542c6c.  if v2 == 0 then goto L542c7c;
  #L542c70.  call temp:= `b`(v2, v3) @signature `Lo/j;.b:(F)F` @kind virtual;
  #L542c76.  v1:= temp;
  #L542c78.  v0.`o.p.b` @type ^`float` := v1;
  #L542c7c.  return @kind void;
}
procedure `void` `g`(`o.p` v0 @kind this, `o.e` v1 @kind object, `o.e` v2 @kind object, `float` v3 ) @signature `Lo/p;.g:(Lo/e;Lo/e;F)V` @AccessFlag PUBLIC {
    temp;

  #L542c90.  if v1 == 0 then goto L542ca0;
  #L542c94.  call temp:= `b`(v1, v3) @signature `Lo/e;.b:(F)F` @kind virtual;
  #L542c9a.  v1:= temp;
  #L542c9c.  v0.`o.p.c` @type ^`float` := v1;
  #L542ca0.  if v2 == 0 then goto L542cb0;
  #L542ca4.  call temp:= `b`(v2, v3) @signature `Lo/e;.b:(F)F` @kind virtual;
  #L542caa.  v1:= temp;
  #L542cac.  v0.`o.p.d` @type ^`float` := v1;
  #L542cb0.  return @kind void;
}
procedure `void` `h`(`o.p` v0 @kind this, `o.j` v1 @kind object, `o.j` v2 @kind object, `float` v3 ) @signature `Lo/p;.h:(Lo/j;Lo/j;F)V` @AccessFlag PUBLIC {
    temp;

  #L542cc4.  if v1 == 0 then goto L542cd4;
  #L542cc8.  call temp:= `b`(v1, v3) @signature `Lo/j;.b:(F)F` @kind virtual;
  #L542cce.  v1:= temp;
  #L542cd0.  v0.`o.p.c` @type ^`float` := v1;
  #L542cd4.  if v2 == 0 then goto L542ce4;
  #L542cd8.  call temp:= `b`(v2, v3) @signature `Lo/j;.b:(F)F` @kind virtual;
  #L542cde.  v1:= temp;
  #L542ce0.  v0.`o.p.d` @type ^`float` := v1;
  #L542ce4.  return @kind void;
}
