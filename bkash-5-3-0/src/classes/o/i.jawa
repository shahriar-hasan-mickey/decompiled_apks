record `o.i` @kind class @AccessFlag PUBLIC extends `o.c` @kind class {
  `double` `o.i.d` @AccessFlag ;
  `double` `o.i.e` @AccessFlag ;
}
procedure `void` `<init>`(`o.i` v5 @kind this, `java.lang.String` v6 @kind object) @signature `Lo/i;.<init>:(Ljava/lang/String;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L541964.  call `<init>`(v5) @signature `Lo/c;.<init>:()V` @kind direct;
  #L54196a.  v5.`o.c.a` @type ^`java.lang.String` := v6 @kind object;
  #L54196e.  v0:= 40I;
  #L541972.  call temp:= `indexOf`(v6, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L541978.  v0:= temp;
  #L54197a.  v1:= 44I;
  #L54197e.  call temp:= `indexOf`(v6, v1, v0) @signature `Ljava/lang/String;.indexOf:(II)I` @kind virtual;
  #L541984.  v2:= temp;
  #L541986.  v0:= v0 + 1;
  #L54198a.  call temp:= `substring`(v6, v0, v2) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L541990.  v0:= temp @kind object;
  #L541992.  call temp:= `trim`(v0) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L541998.  v0:= temp @kind object;
  #L54199a.  call temp:= `parseDouble`(v0) @signature `Ljava/lang/Double;.parseDouble:(Ljava/lang/String;)D` @kind static;
  #L5419a0.  v3:= temp @kind wide;
  #L5419a2.  v5.`o.i.d` @type ^`double` := v3 @kind wide;
  #L5419a6.  v2:= v2 + 1;
  #L5419aa.  call temp:= `indexOf`(v6, v1, v2) @signature `Ljava/lang/String;.indexOf:(II)I` @kind virtual;
  #L5419b0.  v0:= temp;
  #L5419b2.  call temp:= `substring`(v6, v2, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L5419b8.  v6:= temp @kind object;
  #L5419ba.  call temp:= `trim`(v6) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L5419c0.  v6:= temp @kind object;
  #L5419c2.  call temp:= `parseDouble`(v6) @signature `Ljava/lang/Double;.parseDouble:(Ljava/lang/String;)D` @kind static;
  #L5419c8.  v0:= temp @kind wide;
  #L5419ca.  v5.`o.i.e` @type ^`double` := v0 @kind wide;
  #L5419ce.  return @kind void;
}
procedure `double` `d`(`o.i` v12 @kind this, `double` v13 ) @signature `Lo/i;.d:(D)D` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L54185c.  v0:= v12.`o.i.e` @type ^`double` @kind wide;
  #L541860.  v2:= dcmpg(v13, v0);
  #L541864.  if v2 >= 0 then goto L54188e;
  #L541868.  v2:= v12.`o.i.d` @type ^`double` @kind wide;
  #L54186c.  v4:= v2 * v0 @kind double;
  #L541870.  v4:= v4 * v0 @kind double;
  #L541874.  v6:= v0 - v13 @kind double;
  #L541878.  v6:= v6 * v2 @kind double;
  #L54187c.  v6:= v6 + v13 @kind double;
  #L54187e.  v0:= v0 - v13 @kind double;
  #L541880.  v2:= v2 * v0 @kind double;
  #L541884.  v2:= v2 + v13 @kind double;
  #L541886.  v6:= v6 * v2 @kind double;
  #L54188a.  v4:= v4 / v6 @kind double;
  #L54188c.  return v4 @kind wide;
  #L54188e.  v2:= v12.`o.i.d` @type ^`double` @kind wide;
  #L541892.  v4:= 1.0D;
  #L541896.  v6:= v0 - v4 @kind double;
  #L54189a.  v6:= v6 * v2 @kind double;
  #L54189e.  v8:= v0 - v4 @kind double;
  #L5418a2.  v6:= v6 * v8 @kind double;
  #L5418a6.  v8:= -v2 @kind double;
  #L5418a8.  v10:= v0 - v13 @kind double;
  #L5418ac.  v8:= v8 * v10 @kind double;
  #L5418b0.  v8:= v8 - v13 @kind double;
  #L5418b2.  v8:= v8 + v4 @kind double;
  #L5418b4.  v2:= -v2 @kind double;
  #L5418b6.  v0:= v0 - v13 @kind double;
  #L5418b8.  v2:= v2 * v0 @kind double;
  #L5418bc.  v2:= v2 - v13 @kind double;
  #L5418be.  v2:= v2 + v4 @kind double;
  #L5418c0.  v8:= v8 * v2 @kind double;
  #L5418c4.  v6:= v6 / v8 @kind double;
  #L5418c6.  return v6 @kind wide;
}
procedure `double` `e`(`o.i` v8 @kind this, `double` v9 ) @signature `Lo/i;.e:(D)D` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L5418d8.  v0:= v8.`o.i.e` @type ^`double` @kind wide;
  #L5418dc.  v2:= dcmpg(v9, v0);
  #L5418e0.  if v2 >= 0 then goto L5418f8;
  #L5418e4.  v2:= v0 * v9 @kind double;
  #L5418e8.  v4:= v8.`o.i.d` @type ^`double` @kind wide;
  #L5418ec.  v0:= v0 - v9 @kind double;
  #L5418ee.  v4:= v4 * v0 @kind double;
  #L5418f2.  v9:= v9 + v4 @kind double;
  #L5418f4.  v2:= v2 / v9 @kind double;
  #L5418f6.  return v2 @kind wide;
  #L5418f8.  v2:= 1.0D;
  #L5418fc.  v4:= v2 - v0 @kind double;
  #L541900.  v6:= v9 - v2 @kind double;
  #L541904.  v4:= v4 * v6 @kind double;
  #L541908.  v2:= v2 - v9 @kind double;
  #L54190a.  v6:= v8.`o.i.d` @type ^`double` @kind wide;
  #L54190e.  v0:= v0 - v9 @kind double;
  #L541910.  v6:= v6 * v0 @kind double;
  #L541914.  v2:= v2 - v6 @kind double;
  #L541916.  v4:= v4 / v2 @kind double;
  #L541918.  return v4 @kind wide;
}
procedure `double` `a`(`o.i` v0 @kind this, `double` v1 ) @signature `Lo/i;.a:(D)D` @AccessFlag PUBLIC {
    temp;

  #L54192c.  call temp:= `e`(v0, v1) @signature `Lo/i;.e:(D)D` @kind direct;
  #L541932.  v1:= temp @kind wide;
  #L541934.  return v1 @kind wide;
}
procedure `double` `b`(`o.i` v0 @kind this, `double` v1 ) @signature `Lo/i;.b:(D)D` @AccessFlag PUBLIC {
    temp;

  #L541948.  call temp:= `d`(v0, v1) @signature `Lo/i;.d:(D)D` @kind direct;
  #L54194e.  v1:= temp @kind wide;
  #L541950.  return v1 @kind wide;
}
