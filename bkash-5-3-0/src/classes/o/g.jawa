record `o.g` @kind class @AccessFlag PUBLIC extends `o.b` @kind class {
  `double`[] `o.g.a` @AccessFlag PRIVATE;
  `double`[][] `o.g.b` @AccessFlag PRIVATE;
  `double`[][] `o.g.c` @AccessFlag PRIVATE;
  `boolean` `o.g.d` @AccessFlag PRIVATE;
  `double`[] `o.g.e` @AccessFlag ;
}
procedure `void` `<init>`(`o.g` v22 @kind this, `double`[] v23 @kind object, `double`[][] v24 @kind object) @signature `Lo/g;.<init>:([D[[D)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;

  #L540ca8.  v0:= v22 @kind object;
  #L540cac.  v1:= v23 @kind object;
  #L540cb0.  v2:= v24 @kind object;
  #L540cb4.  v3:= constclass @type ^`double` @kind object;
  #L540cb8.  call `<init>`(v22) @signature `Lo/b;.<init>:()V` @kind direct;
  #L540cbe.  v4:= 1I;
  #L540cc0.  v0.`o.g.d` @type ^`boolean` := v4 @kind boolean;
  #L540cc4.  v5:= length @variable v1;
  #L540cc6.  v6:= 0I;
  #L540cc8.  v7:= v2[v6] @kind object;
  #L540ccc.  v7:= length @variable v7;
  #L540cce.  v8:= new `double`[v7];
  #L540cd2.  v0.`o.g.e` @type ^`double`[] := v8 @kind object;
  #L540cd6.  v8:= v5 + -1;
  #L540cda.  v9:= 2I;
  #L540cdc.  v10:= new `int`[v9];
  #L540ce0.  v10[v4]:= v7;
  #L540ce4.  v10[v6]:= v8;
  #L540ce8.  call temp:= `newInstance`(v3, v10) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;[I)Ljava/lang/Object;` @kind static;
  #L540cee.  v10:= temp @kind object;
  #L540cf0.  v10:= (`double`[][]) v10 @kind object;
  #L540cf4.  v11:= new `int`[v9];
  #L540cf8.  v11[v4]:= v7;
  #L540cfc.  v11[v6]:= v5;
  #L540d00.  call temp:= `newInstance`(v3, v11) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;[I)Ljava/lang/Object;` @kind static;
  #L540d06.  v3:= temp @kind object;
  #L540d08.  v3:= (`double`[][]) v3 @kind object;
  #L540d0c.  v4:= 0I;
  #L540d0e.  if v4 >= v7 then goto L540da2;
  #L540d12.  v11:= 0I;
  #L540d14.  if v11 >= v8 then goto L540d88;
  #L540d18.  v12:= v11 + 1;
  #L540d1c.  v13:= v1[v12] @kind wide;
  #L540d20.  v15:= v1[v11] @kind wide;
  #L540d24.  v13:= v13 - v15 @kind double;
  #L540d26.  v15:= v10[v11] @kind object;
  #L540d2a.  v16:= v2[v12] @kind object;
  #L540d2e.  v17:= v16[v4] @kind wide;
  #L540d32.  v16:= v2[v11] @kind object;
  #L540d36.  v19:= v16[v4] @kind wide;
  #L540d3a.  v17:= v17 - v19 @kind double;
  #L540d3e.  v17:= v17 / v13 @kind double;
  #L540d42.  v15[v4]:= v17 @kind wide;
  #L540d46.  if v11 != 0 then goto L540d5c;
  #L540d4a.  v13:= v3[v11] @kind object;
  #L540d4e.  v11:= v10[v11] @kind object;
  #L540d52.  v14:= v11[v4] @kind wide;
  #L540d56.  v13[v4]:= v14 @kind wide;
  #L540d5a.  goto L540d84;
  #L540d5c.  v13:= v3[v11] @kind object;
  #L540d60.  v14:= v11 + -1;
  #L540d64.  v14:= v10[v14] @kind object;
  #L540d68.  v15:= v14[v4] @kind wide;
  #L540d6c.  v11:= v10[v11] @kind object;
  #L540d70.  v17:= v11[v4] @kind wide;
  #L540d74.  v15:= v15 + v17 @kind double;
  #L540d78.  v17:= 0.5D;
  #L540d7c.  v15:= v15 * v17 @kind double;
  #L540d80.  v13[v4]:= v15 @kind wide;
  #L540d84.  v11:= v12;
  #L540d86.  goto L540d14;
  #L540d88.  v11:= v3[v8] @kind object;
  #L540d8c.  v12:= v5 + -2;
  #L540d90.  v12:= v10[v12] @kind object;
  #L540d94.  v13:= v12[v4] @kind wide;
  #L540d98.  v11[v4]:= v13 @kind wide;
  #L540d9c.  v4:= v4 + 1;
  #L540da0.  goto L540d0e;
  #L540da2.  v4:= 0I;
  #L540da4.  if v4 >= v8 then goto L540e5a;
  #L540da8.  v5:= 0I;
  #L540daa.  if v5 >= v7 then goto L540e54;
  #L540dae.  v9:= v10[v4] @kind object;
  #L540db2.  v11:= v9[v5] @kind wide;
  #L540db6.  v13:= 0L;
  #L540dba.  v9:= dcmpl(v11, v13);
  #L540dbe.  if v9 != 0 then goto L540dd8;
  #L540dc2.  v9:= v3[v4] @kind object;
  #L540dc6.  v9[v5]:= v13 @kind wide;
  #L540dca.  v9:= v4 + 1;
  #L540dce.  v9:= v3[v9] @kind object;
  #L540dd2.  v9[v5]:= v13 @kind wide;
  #L540dd6.  goto L540e4e;
  #L540dd8.  v9:= v3[v4] @kind object;
  #L540ddc.  v11:= v9[v5] @kind wide;
  #L540de0.  v9:= v10[v4] @kind object;
  #L540de4.  v13:= v9[v5] @kind wide;
  #L540de8.  v11:= v11 / v13 @kind double;
  #L540dea.  v9:= v4 + 1;
  #L540dee.  v13:= v3[v9] @kind object;
  #L540df2.  v14:= v13[v5] @kind wide;
  #L540df6.  v13:= v10[v4] @kind object;
  #L540dfa.  v16:= v13[v5] @kind wide;
  #L540dfe.  v14:= v14 / v16 @kind double;
  #L540e02.  call temp:= `hypot`(v11, v14) @signature `Ljava/lang/Math;.hypot:(DD)D` @kind static;
  #L540e08.  v16:= temp @kind wide;
  #L540e0a.  v18:= 9.0D;
  #L540e0e.  v13:= dcmpl(v16, v18);
  #L540e12.  if v13 <= 0 then goto L540e4e;
  #L540e16.  v18:= 3.0D;
  #L540e1a.  v18:= v18 / v16 @kind double;
  #L540e1e.  v13:= v3[v4] @kind object;
  #L540e22.  v11:= v11 * v18 @kind double;
  #L540e26.  v16:= v10[v4] @kind object;
  #L540e2a.  v20:= v16[v5] @kind wide;
  #L540e2e.  v11:= v11 * v20 @kind double;
  #L540e32.  v13[v5]:= v11 @kind wide;
  #L540e36.  v9:= v3[v9] @kind object;
  #L540e3a.  v18:= v18 * v14 @kind double;
  #L540e3e.  v11:= v10[v4] @kind object;
  #L540e42.  v12:= v11[v5] @kind wide;
  #L540e46.  v18:= v18 * v12 @kind double;
  #L540e4a.  v9[v5]:= v18 @kind wide;
  #L540e4e.  v5:= v5 + 1;
  #L540e52.  goto L540daa;
  #L540e54.  v4:= v4 + 1;
  #L540e58.  goto L540da4;
  #L540e5a.  v0.`o.g.a` @type ^`double`[] := v1 @kind object;
  #L540e5e.  v0.`o.g.b` @type ^`double`[][] := v2 @kind object;
  #L540e62.  v0.`o.g.c` @type ^`double`[][] := v3 @kind object;
  #L540e66.  return @kind void;
}
procedure `o.g` `i`(`java.lang.String` v8 @kind object) @signature `Lo/g;.i:(Ljava/lang/String;)Lo/g;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L540bf4.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L540bfa.  v0:= temp;
  #L540bfc.  v0:= v0 / 2;
  #L540c00.  v0:= new `double`[v0];
  #L540c04.  v1:= 40I;
  #L540c08.  call temp:= `indexOf`(v8, v1) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L540c0e.  v1:= temp;
  #L540c10.  v1:= v1 + 1;
  #L540c14.  v2:= 44I;
  #L540c18.  call temp:= `indexOf`(v8, v2, v1) @signature `Ljava/lang/String;.indexOf:(II)I` @kind virtual;
  #L540c1e.  v3:= temp;
  #L540c20.  v4:= 0I;
  #L540c22.  v5:= -1I;
  #L540c24.  if v3 == v5 then goto L540c58;
  #L540c28.  call temp:= `substring`(v8, v1, v3) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L540c2e.  v1:= temp @kind object;
  #L540c30.  call temp:= `trim`(v1) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L540c36.  v1:= temp @kind object;
  #L540c38.  v5:= v4 + 1;
  #L540c3c.  call temp:= `parseDouble`(v1) @signature `Ljava/lang/Double;.parseDouble:(Ljava/lang/String;)D` @kind static;
  #L540c42.  v6:= temp @kind wide;
  #L540c44.  v0[v4]:= v6 @kind wide;
  #L540c48.  v1:= v3 + 1;
  #L540c4c.  call temp:= `indexOf`(v8, v2, v1) @signature `Ljava/lang/String;.indexOf:(II)I` @kind virtual;
  #L540c52.  v3:= temp;
  #L540c54.  v4:= v5;
  #L540c56.  goto L540c22;
  #L540c58.  v2:= 41I;
  #L540c5c.  call temp:= `indexOf`(v8, v2, v1) @signature `Ljava/lang/String;.indexOf:(II)I` @kind virtual;
  #L540c62.  v2:= temp;
  #L540c64.  call temp:= `substring`(v8, v1, v2) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L540c6a.  v8:= temp @kind object;
  #L540c6c.  call temp:= `trim`(v8) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L540c72.  v8:= temp @kind object;
  #L540c74.  v1:= v4 + 1;
  #L540c78.  call temp:= `parseDouble`(v8) @signature `Ljava/lang/Double;.parseDouble:(Ljava/lang/String;)D` @kind static;
  #L540c7e.  v2:= temp @kind wide;
  #L540c80.  v0[v4]:= v2 @kind wide;
  #L540c84.  call temp:= `copyOf`(v0, v1) @signature `Ljava/util/Arrays;.copyOf:([DI)[D` @kind static;
  #L540c8a.  v8:= temp @kind object;
  #L540c8c.  call temp:= `j`(v8) @signature `Lo/g;.j:([D)Lo/g;` @kind static;
  #L540c92.  v8:= temp @kind object;
  #L540c94.  return v8 @kind object;
}
procedure `o.g` `j`(`double`[] v18 @kind object) @signature `Lo/g;.j:([D)Lo/g;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L540b34.  v0:= v18 @kind object;
  #L540b38.  v1:= length @variable v0;
  #L540b3a.  v1:= v1 * 3;
  #L540b3e.  v2:= 2I;
  #L540b40.  v1:= v1 - v2 @kind int;
  #L540b42.  v3:= length @variable v0;
  #L540b44.  v4:= 1I;
  #L540b46.  v3:= v3 - v4 @kind int;
  #L540b48.  v5:= (`double`) v3 @kind i2d;
  #L540b4a.  v7:= 1.0D;
  #L540b4e.  v5:= v7 / v5 @kind double;
  #L540b52.  v2:= new `int`[v2];
  #L540b56.  v2[v4]:= v4;
  #L540b5a.  v4:= 0I;
  #L540b5c.  v2[v4]:= v1;
  #L540b60.  v9:= constclass @type ^`double` @kind object;
  #L540b64.  call temp:= `newInstance`(v9, v2) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;[I)Ljava/lang/Object;` @kind static;
  #L540b6a.  v2:= temp @kind object;
  #L540b6c.  v2:= (`double`[][]) v2 @kind object;
  #L540b70.  v1:= new `double`[v1];
  #L540b74.  v9:= 0I;
  #L540b76.  v10:= length @variable v0;
  #L540b78.  if v9 >= v10 then goto L540bd6;
  #L540b7c.  v10:= v0[v9] @kind wide;
  #L540b80.  v12:= v9 + v3 @kind int;
  #L540b84.  v13:= v2[v12] @kind object;
  #L540b88.  v13[v4]:= v10 @kind wide;
  #L540b8c.  v13:= (`double`) v9 @kind i2d;
  #L540b8e.  v13:= v13 * v5 @kind double;
  #L540b92.  v1[v12]:= v13 @kind wide;
  #L540b96.  if v9 <= 0 then goto L540bd0;
  #L540b9a.  v12:= v3 * 2;
  #L540b9e.  v12:= v12 + v9 @kind int;
  #L540ba0.  v15:= v2[v12] @kind object;
  #L540ba4.  v16:= v10 + v7 @kind double;
  #L540ba8.  v15[v4]:= v16 @kind wide;
  #L540bac.  v15:= v13 + v7 @kind double;
  #L540bb0.  v1[v12]:= v15 @kind wide;
  #L540bb4.  v12:= v9 + -1;
  #L540bb8.  v15:= v2[v12] @kind object;
  #L540bbc.  v10:= v10 - v7 @kind double;
  #L540bbe.  v10:= v10 - v5 @kind double;
  #L540bc0.  v15[v4]:= v10 @kind wide;
  #L540bc4.  v10:= -1.0D;
  #L540bc8.  v13:= v13 + v10 @kind double;
  #L540bca.  v13:= v13 - v5 @kind double;
  #L540bcc.  v1[v12]:= v13 @kind wide;
  #L540bd0.  v9:= v9 + 1;
  #L540bd4.  goto L540b76;
  #L540bd6.  v0:= new `o.g`;
  #L540bda.  call `<init>`(v0, v1, v2) @signature `Lo/g;.<init>:([D[[D)V` @kind direct;
  #L540be0.  return v0 @kind object;
}
procedure `double` `k`(`double` v10 , `double` v12 , `double` v14 , `double` v16 , `double` v18 , `double` v20 ) @signature `Lo/g;.k:(DDDDDD)D` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L540808.  v0:= v12 * v12 @kind double;
  #L54080c.  v2:= -6.0D;
  #L540810.  v2:= v2 * v0 @kind double;
  #L540814.  v2:= v2 * v16 @kind double;
  #L540818.  v4:= 6.0D;
  #L54081c.  v6:= v12 * v4 @kind double;
  #L540820.  v8:= v6 * v16 @kind double;
  #L540824.  v2:= v2 + v8 @kind double;
  #L540826.  v4:= v4 * v0 @kind double;
  #L54082a.  v4:= v4 * v14 @kind double;
  #L54082e.  v2:= v2 + v4 @kind double;
  #L540830.  v6:= v6 * v14 @kind double;
  #L540834.  v2:= v2 - v6 @kind double;
  #L540836.  v4:= 3.0D;
  #L54083a.  v4:= v4 * v10 @kind double;
  #L54083e.  v6:= v4 * v20 @kind double;
  #L540842.  v6:= v6 * v0 @kind double;
  #L540846.  v2:= v2 + v6 @kind double;
  #L540848.  v4:= v4 * v18 @kind double;
  #L54084c.  v4:= v4 * v0 @kind double;
  #L540850.  v2:= v2 + v4 @kind double;
  #L540852.  v0:= 2.0D;
  #L540856.  v0:= v0 * v10 @kind double;
  #L54085a.  v0:= v0 * v20 @kind double;
  #L54085e.  v0:= v0 * v12 @kind double;
  #L540862.  v2:= v2 - v0 @kind double;
  #L540864.  v0:= 4.0D;
  #L540868.  v0:= v0 * v10 @kind double;
  #L54086c.  v0:= v0 * v18 @kind double;
  #L540870.  v0:= v0 * v12 @kind double;
  #L540874.  v2:= v2 - v0 @kind double;
  #L540876.  v0:= v10 * v18 @kind double;
  #L54087a.  v2:= v2 + v0 @kind double;
  #L54087c.  return v2 @kind wide;
}
procedure `double` `l`(`double` v12 , `double` v14 , `double` v16 , `double` v18 , `double` v20 , `double` v22 ) @signature `Lo/g;.l:(DDDDDD)D` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L540aa0.  v0:= v14 * v14 @kind double;
  #L540aa4.  v2:= v0 * v14 @kind double;
  #L540aa8.  v4:= -2.0D;
  #L540aac.  v4:= v4 * v2 @kind double;
  #L540ab0.  v4:= v4 * v18 @kind double;
  #L540ab4.  v6:= 3.0D;
  #L540ab8.  v6:= v6 * v0 @kind double;
  #L540abc.  v8:= v6 * v18 @kind double;
  #L540ac0.  v4:= v4 + v8 @kind double;
  #L540ac2.  v8:= 2.0D;
  #L540ac6.  v10:= v2 * v8 @kind double;
  #L540aca.  v10:= v10 * v16 @kind double;
  #L540ace.  v4:= v4 + v10 @kind double;
  #L540ad0.  v6:= v6 * v16 @kind double;
  #L540ad4.  v4:= v4 - v6 @kind double;
  #L540ad6.  v4:= v4 + v16 @kind double;
  #L540ada.  v6:= v12 * v22 @kind double;
  #L540ade.  v10:= v6 * v2 @kind double;
  #L540ae2.  v4:= v4 + v10 @kind double;
  #L540ae4.  v10:= v12 * v20 @kind double;
  #L540ae8.  v2:= v2 * v10 @kind double;
  #L540aec.  v4:= v4 + v2 @kind double;
  #L540aee.  v6:= v6 * v0 @kind double;
  #L540af2.  v4:= v4 - v6 @kind double;
  #L540af4.  v2:= v12 * v8 @kind double;
  #L540af8.  v2:= v2 * v20 @kind double;
  #L540afc.  v2:= v2 * v0 @kind double;
  #L540b00.  v4:= v4 - v2 @kind double;
  #L540b02.  v10:= v10 * v14 @kind double;
  #L540b06.  v4:= v4 + v10 @kind double;
  #L540b08.  return v4 @kind wide;
}
procedure `double` `c`(`o.g` v22 @kind this, `double` v23 , `int` v25 ) @signature `Lo/g;.c:(DI)D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;

  #L540890.  v0:= v22 @kind object;
  #L540894.  v1:= v25;
  #L540898.  v2:= v0.`o.g.a` @type ^`double`[] @kind object;
  #L54089c.  v3:= length @variable v2;
  #L54089e.  v4:= v0.`o.g.d` @type ^`boolean` @kind boolean;
  #L5408a2.  v5:= 0I;
  #L5408a4.  if v4 == 0 then goto L540914;
  #L5408a8.  v6:= v2[v5] @kind wide;
  #L5408ac.  v4:= dcmpg(v23, v6);
  #L5408b0.  if v4 > 0 then goto L5408dc;
  #L5408b4.  v3:= v0.`o.g.b` @type ^`double`[][] @kind object;
  #L5408b8.  v3:= v3[v5] @kind object;
  #L5408bc.  v6:= v3[v1] @kind wide;
  #L5408c0.  v3:= v2[v5] @kind wide;
  #L5408c4.  v3:= v23 - v3 @kind double;
  #L5408c8.  v8:= v2[v5] @kind wide;
  #L5408cc.  call temp:= `f`(v0, v8, v1) @signature `Lo/g;.f:(DI)D` @kind virtual;
  #L5408d2.  v1:= temp @kind wide;
  #L5408d4.  v3:= v3 * v1 @kind double;
  #L5408d8.  v6:= v6 + v3 @kind double;
  #L5408da.  return v6 @kind wide;
  #L5408dc.  v4:= v3 + -1;
  #L5408e0.  v6:= v2[v4] @kind wide;
  #L5408e4.  v8:= dcmpl(v23, v6);
  #L5408e8.  if v8 < 0 then goto L54094c;
  #L5408ec.  v3:= v0.`o.g.b` @type ^`double`[][] @kind object;
  #L5408f0.  v3:= v3[v4] @kind object;
  #L5408f4.  v5:= v3[v1] @kind wide;
  #L5408f8.  v7:= v2[v4] @kind wide;
  #L5408fc.  v7:= v23 - v7 @kind double;
  #L540900.  v3:= v2[v4] @kind wide;
  #L540904.  call temp:= `f`(v0, v3, v1) @signature `Lo/g;.f:(DI)D` @kind virtual;
  #L54090a.  v1:= temp @kind wide;
  #L54090c.  v7:= v7 * v1 @kind double;
  #L540910.  v5:= v5 + v7 @kind double;
  #L540912.  return v5 @kind wide;
  #L540914.  v6:= v2[v5] @kind wide;
  #L540918.  v4:= dcmpg(v23, v6);
  #L54091c.  if v4 > 0 then goto L54092e;
  #L540920.  v2:= v0.`o.g.b` @type ^`double`[][] @kind object;
  #L540924.  v2:= v2[v5] @kind object;
  #L540928.  v1:= v2[v1] @kind wide;
  #L54092c.  return v1 @kind wide;
  #L54092e.  v4:= v3 + -1;
  #L540932.  v6:= v2[v4] @kind wide;
  #L540936.  v2:= dcmpl(v23, v6);
  #L54093a.  if v2 < 0 then goto L54094c;
  #L54093e.  v2:= v0.`o.g.b` @type ^`double`[][] @kind object;
  #L540942.  v2:= v2[v4] @kind object;
  #L540946.  v1:= v2[v1] @kind wide;
  #L54094a.  return v1 @kind wide;
  #L54094c.  v2:= v3 + -1;
  #L540950.  if v5 >= v2 then goto L5409d0;
  #L540954.  v2:= v0.`o.g.a` @type ^`double`[] @kind object;
  #L540958.  v6:= v2[v5] @kind wide;
  #L54095c.  v4:= dcmpl(v23, v6);
  #L540960.  if v4 != 0 then goto L540972;
  #L540964.  v2:= v0.`o.g.b` @type ^`double`[][] @kind object;
  #L540968.  v2:= v2[v5] @kind object;
  #L54096c.  v1:= v2[v1] @kind wide;
  #L540970.  return v1 @kind wide;
  #L540972.  v4:= v5 + 1;
  #L540976.  v6:= v2[v4] @kind wide;
  #L54097a.  v8:= dcmpg(v23, v6);
  #L54097e.  if v8 >= 0 then goto L5409cc;
  #L540982.  v6:= v2[v4] @kind wide;
  #L540986.  v8:= v2[v5] @kind wide;
  #L54098a.  v10:= v6 - v8 @kind double;
  #L54098e.  v6:= v2[v5] @kind wide;
  #L540992.  v2:= v23 - v6 @kind double;
  #L540996.  v12:= v2 / v10 @kind double;
  #L54099a.  v2:= v0.`o.g.b` @type ^`double`[][] @kind object;
  #L54099e.  v3:= v2[v5] @kind object;
  #L5409a2.  v14:= v3[v1] @kind wide;
  #L5409a6.  v2:= v2[v4] @kind object;
  #L5409aa.  v16:= v2[v1] @kind wide;
  #L5409ae.  v2:= v0.`o.g.c` @type ^`double`[][] @kind object;
  #L5409b2.  v3:= v2[v5] @kind object;
  #L5409b6.  v18:= v3[v1] @kind wide;
  #L5409ba.  v2:= v2[v4] @kind object;
  #L5409be.  v20:= v2[v1] @kind wide;
  #L5409c2.  call temp:= `l`(v10, v12, v14, v16, v18, v20) @signature `Lo/g;.l:(DDDDDD)D` @kind static;
  #L5409c8.  v1:= temp @kind wide;
  #L5409ca.  return v1 @kind wide;
  #L5409cc.  v5:= v4;
  #L5409ce.  goto L54094c;
  #L5409d0.  v1:= 0L;
  #L5409d4.  return v1 @kind wide;
}
procedure `void` `d`(`o.g` v23 @kind this, `double` v24 , `double`[] v26 @kind object) @signature `Lo/g;.d:(D[D)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;
    v22;

  #L540e78.  v0:= v23 @kind object;
  #L540e7c.  v1:= v0.`o.g.a` @type ^`double`[] @kind object;
  #L540e80.  v2:= length @variable v1;
  #L540e82.  v3:= v0.`o.g.b` @type ^`double`[][] @kind object;
  #L540e86.  v4:= 0I;
  #L540e88.  v3:= v3[v4] @kind object;
  #L540e8c.  v3:= length @variable v3;
  #L540e8e.  v5:= v0.`o.g.d` @type ^`boolean` @kind boolean;
  #L540e92.  if v5 == 0 then goto L540f3c;
  #L540e96.  v5:= v1[v4] @kind wide;
  #L540e9a.  v7:= dcmpg(v24, v5);
  #L540e9e.  if v7 > 0 then goto L540ee8;
  #L540ea2.  v5:= v1[v4] @kind wide;
  #L540ea6.  v1:= v0.`o.g.e` @type ^`double`[] @kind object;
  #L540eaa.  call `g`(v0, v5, v1) @signature `Lo/g;.g:(D[D)V` @kind virtual;
  #L540eb0.  v1:= 0I;
  #L540eb2.  if v1 >= v3 then goto L540ee6;
  #L540eb6.  v2:= v0.`o.g.b` @type ^`double`[][] @kind object;
  #L540eba.  v2:= v2[v4] @kind object;
  #L540ebe.  v5:= v2[v1] @kind wide;
  #L540ec2.  v2:= v0.`o.g.a` @type ^`double`[] @kind object;
  #L540ec6.  v7:= v2[v4] @kind wide;
  #L540eca.  v7:= v24 - v7 @kind double;
  #L540ece.  v2:= v0.`o.g.e` @type ^`double`[] @kind object;
  #L540ed2.  v9:= v2[v1] @kind wide;
  #L540ed6.  v7:= v7 * v9 @kind double;
  #L540eda.  v5:= v5 + v7 @kind double;
  #L540edc.  v26[v1]:= v5 @kind wide;
  #L540ee0.  v1:= v1 + 1;
  #L540ee4.  goto L540eb2;
  #L540ee6.  return @kind void;
  #L540ee8.  v5:= v2 + -1;
  #L540eec.  v6:= v1[v5] @kind wide;
  #L540ef0.  v8:= dcmpl(v24, v6);
  #L540ef4.  if v8 < 0 then goto L540f92;
  #L540ef8.  v6:= v1[v5] @kind wide;
  #L540efc.  v1:= v0.`o.g.e` @type ^`double`[] @kind object;
  #L540f00.  call `g`(v0, v6, v1) @signature `Lo/g;.g:(D[D)V` @kind virtual;
  #L540f06.  if v4 >= v3 then goto L540f3a;
  #L540f0a.  v1:= v0.`o.g.b` @type ^`double`[][] @kind object;
  #L540f0e.  v1:= v1[v5] @kind object;
  #L540f12.  v6:= v1[v4] @kind wide;
  #L540f16.  v1:= v0.`o.g.a` @type ^`double`[] @kind object;
  #L540f1a.  v8:= v1[v5] @kind wide;
  #L540f1e.  v1:= v24 - v8 @kind double;
  #L540f22.  v8:= v0.`o.g.e` @type ^`double`[] @kind object;
  #L540f26.  v9:= v8[v4] @kind wide;
  #L540f2a.  v1:= v1 * v9 @kind double;
  #L540f2e.  v6:= v6 + v1 @kind double;
  #L540f30.  v26[v4]:= v6 @kind wide;
  #L540f34.  v4:= v4 + 1;
  #L540f38.  goto L540f06;
  #L540f3a.  return @kind void;
  #L540f3c.  v5:= v1[v4] @kind wide;
  #L540f40.  v7:= dcmpg(v24, v5);
  #L540f44.  if v7 > 0 then goto L540f66;
  #L540f48.  v1:= 0I;
  #L540f4a.  if v1 >= v3 then goto L540f64;
  #L540f4e.  v2:= v0.`o.g.b` @type ^`double`[][] @kind object;
  #L540f52.  v2:= v2[v4] @kind object;
  #L540f56.  v5:= v2[v1] @kind wide;
  #L540f5a.  v26[v1]:= v5 @kind wide;
  #L540f5e.  v1:= v1 + 1;
  #L540f62.  goto L540f4a;
  #L540f64.  return @kind void;
  #L540f66.  v5:= v2 + -1;
  #L540f6a.  v6:= v1[v5] @kind wide;
  #L540f6e.  v1:= dcmpl(v24, v6);
  #L540f72.  if v1 < 0 then goto L540f92;
  #L540f76.  if v4 >= v3 then goto L540f90;
  #L540f7a.  v1:= v0.`o.g.b` @type ^`double`[][] @kind object;
  #L540f7e.  v1:= v1[v5] @kind object;
  #L540f82.  v6:= v1[v4] @kind wide;
  #L540f86.  v26[v4]:= v6 @kind wide;
  #L540f8a.  v4:= v4 + 1;
  #L540f8e.  goto L540f76;
  #L540f90.  return @kind void;
  #L540f92.  v1:= 0I;
  #L540f94.  v5:= v2 + -1;
  #L540f98.  if v1 >= v5 then goto L541038;
  #L540f9c.  v5:= v0.`o.g.a` @type ^`double`[] @kind object;
  #L540fa0.  v6:= v5[v1] @kind wide;
  #L540fa4.  v5:= dcmpl(v24, v6);
  #L540fa8.  if v5 != 0 then goto L540fc8;
  #L540fac.  v5:= 0I;
  #L540fae.  if v5 >= v3 then goto L540fc8;
  #L540fb2.  v6:= v0.`o.g.b` @type ^`double`[][] @kind object;
  #L540fb6.  v6:= v6[v1] @kind object;
  #L540fba.  v7:= v6[v5] @kind wide;
  #L540fbe.  v26[v5]:= v7 @kind wide;
  #L540fc2.  v5:= v5 + 1;
  #L540fc6.  goto L540fae;
  #L540fc8.  v5:= v0.`o.g.a` @type ^`double`[] @kind object;
  #L540fcc.  v6:= v1 + 1;
  #L540fd0.  v7:= v5[v6] @kind wide;
  #L540fd4.  v9:= dcmpg(v24, v7);
  #L540fd8.  if v9 >= 0 then goto L541034;
  #L540fdc.  v7:= v5[v6] @kind wide;
  #L540fe0.  v9:= v5[v1] @kind wide;
  #L540fe4.  v7:= v7 - v9 @kind double;
  #L540fe6.  v9:= v5[v1] @kind wide;
  #L540fea.  v9:= v24 - v9 @kind double;
  #L540fee.  v9:= v9 / v7 @kind double;
  #L540ff0.  if v4 >= v3 then goto L541032;
  #L540ff4.  v2:= v0.`o.g.b` @type ^`double`[][] @kind object;
  #L540ff8.  v5:= v2[v1] @kind object;
  #L540ffc.  v15:= v5[v4] @kind wide;
  #L541000.  v2:= v2[v6] @kind object;
  #L541004.  v17:= v2[v4] @kind wide;
  #L541008.  v2:= v0.`o.g.c` @type ^`double`[][] @kind object;
  #L54100c.  v5:= v2[v1] @kind object;
  #L541010.  v19:= v5[v4] @kind wide;
  #L541014.  v2:= v2[v6] @kind object;
  #L541018.  v21:= v2[v4] @kind wide;
  #L54101c.  v11:= v7 @kind wide;
  #L54101e.  v13:= v9 @kind wide;
  #L541020.  call temp:= `l`(v11, v13, v15, v17, v19, v21) @signature `Lo/g;.l:(DDDDDD)D` @kind static;
  #L541026.  v11:= temp @kind wide;
  #L541028.  v26[v4]:= v11 @kind wide;
  #L54102c.  v4:= v4 + 1;
  #L541030.  goto L540ff0;
  #L541032.  return @kind void;
  #L541034.  v1:= v6;
  #L541036.  goto L540f94;
  #L541038.  return @kind void;
}
procedure `void` `e`(`o.g` v23 @kind this, `double` v24 , `float`[] v26 @kind object) @signature `Lo/g;.e:(D[F)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;
    v22;

  #L54104c.  v0:= v23 @kind object;
  #L541050.  v1:= v0.`o.g.a` @type ^`double`[] @kind object;
  #L541054.  v2:= length @variable v1;
  #L541056.  v3:= v0.`o.g.b` @type ^`double`[][] @kind object;
  #L54105a.  v4:= 0I;
  #L54105c.  v3:= v3[v4] @kind object;
  #L541060.  v3:= length @variable v3;
  #L541062.  v5:= v0.`o.g.d` @type ^`boolean` @kind boolean;
  #L541066.  if v5 == 0 then goto L541114;
  #L54106a.  v5:= v1[v4] @kind wide;
  #L54106e.  v7:= dcmpg(v24, v5);
  #L541072.  if v7 > 0 then goto L5410be;
  #L541076.  v5:= v1[v4] @kind wide;
  #L54107a.  v1:= v0.`o.g.e` @type ^`double`[] @kind object;
  #L54107e.  call `g`(v0, v5, v1) @signature `Lo/g;.g:(D[D)V` @kind virtual;
  #L541084.  v1:= 0I;
  #L541086.  if v1 >= v3 then goto L5410bc;
  #L54108a.  v2:= v0.`o.g.b` @type ^`double`[][] @kind object;
  #L54108e.  v2:= v2[v4] @kind object;
  #L541092.  v5:= v2[v1] @kind wide;
  #L541096.  v2:= v0.`o.g.a` @type ^`double`[] @kind object;
  #L54109a.  v7:= v2[v4] @kind wide;
  #L54109e.  v7:= v24 - v7 @kind double;
  #L5410a2.  v2:= v0.`o.g.e` @type ^`double`[] @kind object;
  #L5410a6.  v9:= v2[v1] @kind wide;
  #L5410aa.  v7:= v7 * v9 @kind double;
  #L5410ae.  v5:= v5 + v7 @kind double;
  #L5410b0.  v2:= (`float`) v5 @kind d2f;
  #L5410b2.  v26[v1]:= v2;
  #L5410b6.  v1:= v1 + 1;
  #L5410ba.  goto L541086;
  #L5410bc.  return @kind void;
  #L5410be.  v5:= v2 + -1;
  #L5410c2.  v6:= v1[v5] @kind wide;
  #L5410c6.  v8:= dcmpl(v24, v6);
  #L5410ca.  if v8 < 0 then goto L54116e;
  #L5410ce.  v6:= v1[v5] @kind wide;
  #L5410d2.  v1:= v0.`o.g.e` @type ^`double`[] @kind object;
  #L5410d6.  call `g`(v0, v6, v1) @signature `Lo/g;.g:(D[D)V` @kind virtual;
  #L5410dc.  if v4 >= v3 then goto L541112;
  #L5410e0.  v1:= v0.`o.g.b` @type ^`double`[][] @kind object;
  #L5410e4.  v1:= v1[v5] @kind object;
  #L5410e8.  v6:= v1[v4] @kind wide;
  #L5410ec.  v1:= v0.`o.g.a` @type ^`double`[] @kind object;
  #L5410f0.  v8:= v1[v5] @kind wide;
  #L5410f4.  v1:= v24 - v8 @kind double;
  #L5410f8.  v8:= v0.`o.g.e` @type ^`double`[] @kind object;
  #L5410fc.  v9:= v8[v4] @kind wide;
  #L541100.  v1:= v1 * v9 @kind double;
  #L541104.  v6:= v6 + v1 @kind double;
  #L541106.  v1:= (`float`) v6 @kind d2f;
  #L541108.  v26[v4]:= v1;
  #L54110c.  v4:= v4 + 1;
  #L541110.  goto L5410dc;
  #L541112.  return @kind void;
  #L541114.  v5:= v1[v4] @kind wide;
  #L541118.  v7:= dcmpg(v24, v5);
  #L54111c.  if v7 > 0 then goto L541140;
  #L541120.  v1:= 0I;
  #L541122.  if v1 >= v3 then goto L54113e;
  #L541126.  v2:= v0.`o.g.b` @type ^`double`[][] @kind object;
  #L54112a.  v2:= v2[v4] @kind object;
  #L54112e.  v5:= v2[v1] @kind wide;
  #L541132.  v2:= (`float`) v5 @kind d2f;
  #L541134.  v26[v1]:= v2;
  #L541138.  v1:= v1 + 1;
  #L54113c.  goto L541122;
  #L54113e.  return @kind void;
  #L541140.  v5:= v2 + -1;
  #L541144.  v6:= v1[v5] @kind wide;
  #L541148.  v1:= dcmpl(v24, v6);
  #L54114c.  if v1 < 0 then goto L54116e;
  #L541150.  if v4 >= v3 then goto L54116c;
  #L541154.  v1:= v0.`o.g.b` @type ^`double`[][] @kind object;
  #L541158.  v1:= v1[v5] @kind object;
  #L54115c.  v6:= v1[v4] @kind wide;
  #L541160.  v1:= (`float`) v6 @kind d2f;
  #L541162.  v26[v4]:= v1;
  #L541166.  v4:= v4 + 1;
  #L54116a.  goto L541150;
  #L54116c.  return @kind void;
  #L54116e.  v1:= 0I;
  #L541170.  v5:= v2 + -1;
  #L541174.  if v1 >= v5 then goto L541218;
  #L541178.  v5:= v0.`o.g.a` @type ^`double`[] @kind object;
  #L54117c.  v6:= v5[v1] @kind wide;
  #L541180.  v5:= dcmpl(v24, v6);
  #L541184.  if v5 != 0 then goto L5411a6;
  #L541188.  v5:= 0I;
  #L54118a.  if v5 >= v3 then goto L5411a6;
  #L54118e.  v6:= v0.`o.g.b` @type ^`double`[][] @kind object;
  #L541192.  v6:= v6[v1] @kind object;
  #L541196.  v7:= v6[v5] @kind wide;
  #L54119a.  v6:= (`float`) v7 @kind d2f;
  #L54119c.  v26[v5]:= v6;
  #L5411a0.  v5:= v5 + 1;
  #L5411a4.  goto L54118a;
  #L5411a6.  v5:= v0.`o.g.a` @type ^`double`[] @kind object;
  #L5411aa.  v6:= v1 + 1;
  #L5411ae.  v7:= v5[v6] @kind wide;
  #L5411b2.  v9:= dcmpg(v24, v7);
  #L5411b6.  if v9 >= 0 then goto L541214;
  #L5411ba.  v7:= v5[v6] @kind wide;
  #L5411be.  v9:= v5[v1] @kind wide;
  #L5411c2.  v7:= v7 - v9 @kind double;
  #L5411c4.  v9:= v5[v1] @kind wide;
  #L5411c8.  v9:= v24 - v9 @kind double;
  #L5411cc.  v9:= v9 / v7 @kind double;
  #L5411ce.  if v4 >= v3 then goto L541212;
  #L5411d2.  v2:= v0.`o.g.b` @type ^`double`[][] @kind object;
  #L5411d6.  v5:= v2[v1] @kind object;
  #L5411da.  v15:= v5[v4] @kind wide;
  #L5411de.  v2:= v2[v6] @kind object;
  #L5411e2.  v17:= v2[v4] @kind wide;
  #L5411e6.  v2:= v0.`o.g.c` @type ^`double`[][] @kind object;
  #L5411ea.  v5:= v2[v1] @kind object;
  #L5411ee.  v19:= v5[v4] @kind wide;
  #L5411f2.  v2:= v2[v6] @kind object;
  #L5411f6.  v21:= v2[v4] @kind wide;
  #L5411fa.  v11:= v7 @kind wide;
  #L5411fc.  v13:= v9 @kind wide;
  #L5411fe.  call temp:= `l`(v11, v13, v15, v17, v19, v21) @signature `Lo/g;.l:(DDDDDD)D` @kind static;
  #L541204.  v11:= temp @kind wide;
  #L541206.  v2:= (`float`) v11 @kind d2f;
  #L541208.  v26[v4]:= v2;
  #L54120c.  v4:= v4 + 1;
  #L541210.  goto L5411ce;
  #L541212.  return @kind void;
  #L541214.  v1:= v6;
  #L541216.  goto L541170;
  #L541218.  return @kind void;
}
procedure `double` `f`(`o.g` v23 @kind this, `double` v24 , `int` v26 ) @signature `Lo/g;.f:(DI)D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;
    v22;

  #L5409e8.  v0:= v23 @kind object;
  #L5409ec.  v1:= v0.`o.g.a` @type ^`double`[] @kind object;
  #L5409f0.  v2:= length @variable v1;
  #L5409f2.  v3:= 0I;
  #L5409f4.  v4:= v1[v3] @kind wide;
  #L5409f8.  v6:= dcmpg(v24, v4);
  #L5409fc.  if v6 >= 0 then goto L540a06;
  #L540a00.  v4:= v1[v3] @kind wide;
  #L540a04.  goto L540a20;
  #L540a06.  v4:= v2 + -1;
  #L540a0a.  v5:= v1[v4] @kind wide;
  #L540a0e.  v7:= dcmpl(v24, v5);
  #L540a12.  if v7 < 0 then goto L540a1c;
  #L540a16.  v4:= v1[v4] @kind wide;
  #L540a1a.  goto L540a20;
  #L540a1c.  v4:= v24 @kind wide;
  #L540a20.  v1:= v2 + -1;
  #L540a24.  if v3 >= v1 then goto L540a8a;
  #L540a28.  v1:= v0.`o.g.a` @type ^`double`[] @kind object;
  #L540a2c.  v6:= v3 + 1;
  #L540a30.  v7:= v1[v6] @kind wide;
  #L540a34.  v9:= dcmpg(v4, v7);
  #L540a38.  if v9 > 0 then goto L540a86;
  #L540a3c.  v7:= v1[v6] @kind wide;
  #L540a40.  v9:= v1[v3] @kind wide;
  #L540a44.  v7:= v7 - v9 @kind double;
  #L540a46.  v9:= v1[v3] @kind wide;
  #L540a4a.  v4:= v4 - v9 @kind double;
  #L540a4c.  v13:= v4 / v7 @kind double;
  #L540a50.  v1:= v0.`o.g.b` @type ^`double`[][] @kind object;
  #L540a54.  v2:= v1[v3] @kind object;
  #L540a58.  v15:= v2[v26] @kind wide;
  #L540a5c.  v1:= v1[v6] @kind object;
  #L540a60.  v17:= v1[v26] @kind wide;
  #L540a64.  v1:= v0.`o.g.c` @type ^`double`[][] @kind object;
  #L540a68.  v2:= v1[v3] @kind object;
  #L540a6c.  v19:= v2[v26] @kind wide;
  #L540a70.  v1:= v1[v6] @kind object;
  #L540a74.  v21:= v1[v26] @kind wide;
  #L540a78.  v11:= v7 @kind wide;
  #L540a7a.  call temp:= `k`(v11, v13, v15, v17, v19, v21) @signature `Lo/g;.k:(DDDDDD)D` @kind static;
  #L540a80.  v1:= temp @kind wide;
  #L540a82.  v1:= v1 / v7 @kind double;
  #L540a84.  return v1 @kind wide;
  #L540a86.  v3:= v6;
  #L540a88.  goto L540a20;
  #L540a8a.  v1:= 0L;
  #L540a8e.  return v1 @kind wide;
}
procedure `void` `g`(`o.g` v25 @kind this, `double` v26 , `double`[] v28 @kind object) @signature `Lo/g;.g:(D[D)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;
    v22;
    v23;
    v24;

  #L54122c.  v0:= v25 @kind object;
  #L541230.  v1:= v0.`o.g.a` @type ^`double`[] @kind object;
  #L541234.  v2:= length @variable v1;
  #L541236.  v3:= v0.`o.g.b` @type ^`double`[][] @kind object;
  #L54123a.  v4:= 0I;
  #L54123c.  v3:= v3[v4] @kind object;
  #L541240.  v3:= length @variable v3;
  #L541242.  v5:= v1[v4] @kind wide;
  #L541246.  v7:= dcmpg(v26, v5);
  #L54124a.  if v7 > 0 then goto L541254;
  #L54124e.  v5:= v1[v4] @kind wide;
  #L541252.  goto L54126e;
  #L541254.  v5:= v2 + -1;
  #L541258.  v6:= v1[v5] @kind wide;
  #L54125c.  v8:= dcmpl(v26, v6);
  #L541260.  if v8 < 0 then goto L54126a;
  #L541264.  v5:= v1[v5] @kind wide;
  #L541268.  goto L54126e;
  #L54126a.  v5:= v26 @kind wide;
  #L54126e.  v1:= 0I;
  #L541270.  v7:= v2 + -1;
  #L541274.  if v1 >= v7 then goto L5412e6;
  #L541278.  v7:= v0.`o.g.a` @type ^`double`[] @kind object;
  #L54127c.  v8:= v1 + 1;
  #L541280.  v9:= v7[v8] @kind wide;
  #L541284.  v11:= dcmpg(v5, v9);
  #L541288.  if v11 > 0 then goto L5412e2;
  #L54128c.  v9:= v7[v8] @kind wide;
  #L541290.  v11:= v7[v1] @kind wide;
  #L541294.  v9:= v9 - v11 @kind double;
  #L541296.  v11:= v7[v1] @kind wide;
  #L54129a.  v5:= v5 - v11 @kind double;
  #L54129c.  v5:= v5 / v9 @kind double;
  #L54129e.  if v4 >= v3 then goto L5412e6;
  #L5412a2.  v2:= v0.`o.g.b` @type ^`double`[][] @kind object;
  #L5412a6.  v7:= v2[v1] @kind object;
  #L5412aa.  v17:= v7[v4] @kind wide;
  #L5412ae.  v2:= v2[v8] @kind object;
  #L5412b2.  v19:= v2[v4] @kind wide;
  #L5412b6.  v2:= v0.`o.g.c` @type ^`double`[][] @kind object;
  #L5412ba.  v7:= v2[v1] @kind object;
  #L5412be.  v21:= v7[v4] @kind wide;
  #L5412c2.  v2:= v2[v8] @kind object;
  #L5412c6.  v23:= v2[v4] @kind wide;
  #L5412ca.  v13:= v9 @kind wide;
  #L5412cc.  v15:= v5 @kind wide;
  #L5412ce.  call temp:= `k`(v13, v15, v17, v19, v21, v23) @signature `Lo/g;.k:(DDDDDD)D` @kind static;
  #L5412d4.  v11:= temp @kind wide;
  #L5412d6.  v11:= v11 / v9 @kind double;
  #L5412d8.  v28[v4]:= v11 @kind wide;
  #L5412dc.  v4:= v4 + 1;
  #L5412e0.  goto L54129e;
  #L5412e2.  v1:= v8;
  #L5412e4.  goto L541270;
  #L5412e6.  return @kind void;
}
procedure `double`[] `h`(`o.g` v1 @kind this) @signature `Lo/g;.h:()[D` @AccessFlag PUBLIC {
    temp;
    v0;

  #L540b1c.  v0:= v1.`o.g.a` @type ^`double`[] @kind object;
  #L540b20.  return v0 @kind object;
}
