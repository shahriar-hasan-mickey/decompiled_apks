record `o.j` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `o.b` `o.j.a` @AccessFlag PROTECTED;
  `int`[] `o.j.b` @AccessFlag PROTECTED;
  `float`[] `o.j.c` @AccessFlag PROTECTED;
  `int` `o.j.d` @AccessFlag PRIVATE;
  `java.lang.String` `o.j.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`o.j` v2 @kind this) @signature `Lo/j;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L541b9c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L541ba2.  v0:= 10I;
  #L541ba6.  v1:= new `int`[v0];
  #L541baa.  v2.`o.j.b` @type ^`int`[] := v1 @kind object;
  #L541bae.  v0:= new `float`[v0];
  #L541bb2.  v2.`o.j.c` @type ^`float`[] := v0 @kind object;
  #L541bb6.  return @kind void;
}
procedure `float` `a`(`o.j` v3 @kind this, `float` v4 ) @signature `Lo/j;.a:(F)F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L541ac4.  v0:= v3.`o.j.a` @type ^`o.b` @kind object;
  #L541ac8.  v1:= (`double`) v4 @kind f2d;
  #L541aca.  v4:= 0I;
  #L541acc.  call temp:= `c`(v0, v1, v4) @signature `Lo/b;.c:(DI)D` @kind virtual;
  #L541ad2.  v0:= temp @kind wide;
  #L541ad4.  v4:= (`float`) v0 @kind d2f;
  #L541ad6.  return v4;
}
procedure `float` `b`(`o.j` v3 @kind this, `float` v4 ) @signature `Lo/j;.b:(F)F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L541ae8.  v0:= v3.`o.j.a` @type ^`o.b` @kind object;
  #L541aec.  v1:= (`double`) v4 @kind f2d;
  #L541aee.  v4:= 0I;
  #L541af0.  call temp:= `f`(v0, v1, v4) @signature `Lo/b;.f:(DI)D` @kind virtual;
  #L541af6.  v0:= temp @kind wide;
  #L541af8.  v4:= (`float`) v0 @kind d2f;
  #L541afa.  return v4;
}
procedure `void` `c`(`o.j` v3 @kind this, `int` v4 , `float` v5 ) @signature `Lo/j;.c:(IF)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L541bc8.  v0:= v3.`o.j.b` @type ^`int`[] @kind object;
  #L541bcc.  v1:= length @variable v0;
  #L541bce.  v2:= v3.`o.j.d` @type ^`int`;
  #L541bd2.  v2:= v2 + 1;
  #L541bd6.  if v1 >= v2 then goto L541c02;
  #L541bda.  v1:= length @variable v0;
  #L541bdc.  v1:= v1 * 2;
  #L541be0.  call temp:= `copyOf`(v0, v1) @signature `Ljava/util/Arrays;.copyOf:([II)[I` @kind static;
  #L541be6.  v0:= temp @kind object;
  #L541be8.  v3.`o.j.b` @type ^`int`[] := v0 @kind object;
  #L541bec.  v0:= v3.`o.j.c` @type ^`float`[] @kind object;
  #L541bf0.  v1:= length @variable v0;
  #L541bf2.  v1:= v1 * 2;
  #L541bf6.  call temp:= `copyOf`(v0, v1) @signature `Ljava/util/Arrays;.copyOf:([FI)[F` @kind static;
  #L541bfc.  v0:= temp @kind object;
  #L541bfe.  v3.`o.j.c` @type ^`float`[] := v0 @kind object;
  #L541c02.  v0:= v3.`o.j.b` @type ^`int`[] @kind object;
  #L541c06.  v1:= v3.`o.j.d` @type ^`int`;
  #L541c0a.  v0[v1]:= v4;
  #L541c0e.  v4:= v3.`o.j.c` @type ^`float`[] @kind object;
  #L541c12.  v4[v1]:= v5;
  #L541c16.  v1:= v1 + 1;
  #L541c1a.  v3.`o.j.d` @type ^`int` := v1;
  #L541c1e.  return @kind void;
}
procedure `void` `d`(`o.j` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lo/j;.d:(Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;

  #L541c30.  v0.`o.j.e` @type ^`java.lang.String` := v1 @kind object;
  #L541c34.  return @kind void;
}
procedure `void` `e`(`o.j` v9 @kind this, `int` v10 ) @signature `Lo/j;.e:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L541c48.  v0:= v9.`o.j.d` @type ^`int`;
  #L541c4c.  if v0 != 0 then goto L541c52;
  #L541c50.  return @kind void;
  #L541c52.  v1:= v9.`o.j.b` @type ^`int`[] @kind object;
  #L541c56.  v2:= v9.`o.j.c` @type ^`float`[] @kind object;
  #L541c5a.  v3:= 1I;
  #L541c5c.  v0:= v0 - v3 @kind int;
  #L541c5e.  v4:= 0I;
  #L541c60.  call `a`(v1, v2, v4, v0) @signature `Lo/j$a;.a:([I[FII)V` @kind static;
  #L541c66.  v0:= 1I;
  #L541c68.  v1:= 1I;
  #L541c6a.  v2:= v9.`o.j.d` @type ^`int`;
  #L541c6e.  if v0 >= v2 then goto L541c90;
  #L541c72.  v2:= v9.`o.j.b` @type ^`int`[] @kind object;
  #L541c76.  v5:= v0 + -1;
  #L541c7a.  v5:= v2[v5];
  #L541c7e.  v2:= v2[v0];
  #L541c82.  if v5 == v2 then goto L541c8a;
  #L541c86.  v1:= v1 + 1;
  #L541c8a.  v0:= v0 + 1;
  #L541c8e.  goto L541c6a;
  #L541c90.  v0:= new `double`[v1];
  #L541c94.  v2:= 2I;
  #L541c96.  v2:= new `int`[v2];
  #L541c9a.  v2[v3]:= v3;
  #L541c9e.  v2[v4]:= v1;
  #L541ca2.  v1:= constclass @type ^`double` @kind object;
  #L541ca6.  call temp:= `newInstance`(v1, v2) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;[I)Ljava/lang/Object;` @kind static;
  #L541cac.  v1:= temp @kind object;
  #L541cae.  v1:= (`double`[][]) v1 @kind object;
  #L541cb2.  v2:= 0I;
  #L541cb4.  v3:= 0I;
  #L541cb6.  v5:= v9.`o.j.d` @type ^`int`;
  #L541cba.  if v2 >= v5 then goto L541d10;
  #L541cbe.  if v2 <= 0 then goto L541cd8;
  #L541cc2.  v5:= v9.`o.j.b` @type ^`int`[] @kind object;
  #L541cc6.  v6:= v5[v2];
  #L541cca.  v7:= v2 + -1;
  #L541cce.  v5:= v5[v7];
  #L541cd2.  if v6 != v5 then goto L541cd8;
  #L541cd6.  goto L541d0a;
  #L541cd8.  v5:= v9.`o.j.b` @type ^`int`[] @kind object;
  #L541cdc.  v5:= v5[v2];
  #L541ce0.  v5:= (`double`) v5 @kind i2d;
  #L541ce2.  v7:= 0.01D;
  #L541cec.  v5:= v5 * v7 @kind double;
  #L541cf0.  v0[v3]:= v5 @kind wide;
  #L541cf4.  v5:= v1[v3] @kind object;
  #L541cf8.  v6:= v9.`o.j.c` @type ^`float`[] @kind object;
  #L541cfc.  v6:= v6[v2];
  #L541d00.  v6:= (`double`) v6 @kind f2d;
  #L541d02.  v5[v4]:= v6 @kind wide;
  #L541d06.  v3:= v3 + 1;
  #L541d0a.  v2:= v2 + 1;
  #L541d0e.  goto L541cb6;
  #L541d10.  call temp:= `a`(v10, v0, v1) @signature `Lo/b;.a:(I[D[[D)Lo/b;` @kind static;
  #L541d16.  v10:= temp @kind object;
  #L541d18.  v9.`o.j.a` @type ^`o.b` := v10 @kind object;
  #L541d1c.  return @kind void;
}
procedure `java.lang.String` `toString`(`o.j` v6 @kind this) @signature `Lo/j;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L541b0c.  v0:= v6.`o.j.e` @type ^`java.lang.String` @kind object;
  #L541b10.  v1:= new `java.text.DecimalFormat`;
  #L541b14.  v2:= "##.##" @kind object;
  #L541b18.  call `<init>`(v1, v2) @signature `Ljava/text/DecimalFormat;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L541b1e.  v2:= 0I;
  #L541b20.  v3:= v6.`o.j.d` @type ^`int`;
  #L541b24.  if v2 >= v3 then goto L541b8a;
  #L541b28.  v3:= new `java.lang.StringBuilder`;
  #L541b2c.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L541b32.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L541b38.  v0:= "[" @kind object;
  #L541b3c.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L541b42.  v0:= v6.`o.j.b` @type ^`int`[] @kind object;
  #L541b46.  v0:= v0[v2];
  #L541b4a.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L541b50.  v0:= " , " @kind object;
  #L541b54.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L541b5a.  v0:= v6.`o.j.c` @type ^`float`[] @kind object;
  #L541b5e.  v0:= v0[v2];
  #L541b62.  v4:= (`double`) v0 @kind f2d;
  #L541b64.  call temp:= `format`(v1, v4) @signature `Ljava/text/DecimalFormat;.format:(D)Ljava/lang/String;` @kind virtual;
  #L541b6a.  v0:= temp @kind object;
  #L541b6c.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L541b72.  v0:= "] " @kind object;
  #L541b76.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L541b7c.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L541b82.  v0:= temp @kind object;
  #L541b84.  v2:= v2 + 1;
  #L541b88.  goto L541b20;
  #L541b8a.  return v0 @kind object;
}
