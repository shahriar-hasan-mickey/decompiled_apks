record `o.c$a` @kind class @AccessFlag  extends `o.c` @kind class {
  `double` `o.c$a.d` @AccessFlag ;
  `double` `o.c$a.e` @AccessFlag ;
  `double` `o.c$a.f` @AccessFlag ;
  `double` `o.c$a.g` @AccessFlag ;
}
global `double` `@@o.c$a.h` @AccessFlag PRIVATE_STATIC;
global `double` `@@o.c$a.i` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lo/c$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;

  #L53f618.  return @kind void;
}
procedure `void` `<init>`(`o.c$a` v5 @kind this, `java.lang.String` v6 @kind object) @signature `Lo/c$a;.<init>:(Ljava/lang/String;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L53f62c.  call `<init>`(v5) @signature `Lo/c;.<init>:()V` @kind direct;
  #L53f632.  v5.`o.c.a` @type ^`java.lang.String` := v6 @kind object;
  #L53f636.  v0:= 40I;
  #L53f63a.  call temp:= `indexOf`(v6, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L53f640.  v0:= temp;
  #L53f642.  v1:= 44I;
  #L53f646.  call temp:= `indexOf`(v6, v1, v0) @signature `Ljava/lang/String;.indexOf:(II)I` @kind virtual;
  #L53f64c.  v2:= temp;
  #L53f64e.  v0:= v0 + 1;
  #L53f652.  call temp:= `substring`(v6, v0, v2) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L53f658.  v0:= temp @kind object;
  #L53f65a.  call temp:= `trim`(v0) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L53f660.  v0:= temp @kind object;
  #L53f662.  call temp:= `parseDouble`(v0) @signature `Ljava/lang/Double;.parseDouble:(Ljava/lang/String;)D` @kind static;
  #L53f668.  v3:= temp @kind wide;
  #L53f66a.  v5.`o.c$a.d` @type ^`double` := v3 @kind wide;
  #L53f66e.  v2:= v2 + 1;
  #L53f672.  call temp:= `indexOf`(v6, v1, v2) @signature `Ljava/lang/String;.indexOf:(II)I` @kind virtual;
  #L53f678.  v0:= temp;
  #L53f67a.  call temp:= `substring`(v6, v2, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L53f680.  v2:= temp @kind object;
  #L53f682.  call temp:= `trim`(v2) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L53f688.  v2:= temp @kind object;
  #L53f68a.  call temp:= `parseDouble`(v2) @signature `Ljava/lang/Double;.parseDouble:(Ljava/lang/String;)D` @kind static;
  #L53f690.  v2:= temp @kind wide;
  #L53f692.  v5.`o.c$a.e` @type ^`double` := v2 @kind wide;
  #L53f696.  v0:= v0 + 1;
  #L53f69a.  call temp:= `indexOf`(v6, v1, v0) @signature `Ljava/lang/String;.indexOf:(II)I` @kind virtual;
  #L53f6a0.  v1:= temp;
  #L53f6a2.  call temp:= `substring`(v6, v0, v1) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L53f6a8.  v0:= temp @kind object;
  #L53f6aa.  call temp:= `trim`(v0) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L53f6b0.  v0:= temp @kind object;
  #L53f6b2.  call temp:= `parseDouble`(v0) @signature `Ljava/lang/Double;.parseDouble:(Ljava/lang/String;)D` @kind static;
  #L53f6b8.  v2:= temp @kind wide;
  #L53f6ba.  v5.`o.c$a.f` @type ^`double` := v2 @kind wide;
  #L53f6be.  v1:= v1 + 1;
  #L53f6c2.  v0:= 41I;
  #L53f6c6.  call temp:= `indexOf`(v6, v0, v1) @signature `Ljava/lang/String;.indexOf:(II)I` @kind virtual;
  #L53f6cc.  v0:= temp;
  #L53f6ce.  call temp:= `substring`(v6, v1, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L53f6d4.  v6:= temp @kind object;
  #L53f6d6.  call temp:= `trim`(v6) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L53f6dc.  v6:= temp @kind object;
  #L53f6de.  call temp:= `parseDouble`(v6) @signature `Ljava/lang/Double;.parseDouble:(Ljava/lang/String;)D` @kind static;
  #L53f6e4.  v0:= temp @kind wide;
  #L53f6e6.  v5.`o.c$a.g` @type ^`double` := v0 @kind wide;
  #L53f6ea.  return @kind void;
}
procedure `double` `d`(`o.c$a` v6 @kind this, `double` v7 ) @signature `Lo/c$a;.d:(D)D` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L53f580.  v0:= 1.0D;
  #L53f584.  v0:= v0 - v7 @kind double;
  #L53f586.  v2:= 3.0D;
  #L53f58a.  v2:= v2 * v0 @kind double;
  #L53f58e.  v0:= v0 * v2 @kind double;
  #L53f592.  v0:= v0 * v7 @kind double;
  #L53f596.  v2:= v2 * v7 @kind double;
  #L53f59a.  v2:= v2 * v7 @kind double;
  #L53f59e.  v4:= v7 * v7 @kind double;
  #L53f5a2.  v4:= v4 * v7 @kind double;
  #L53f5a6.  v7:= v6.`o.c$a.d` @type ^`double` @kind wide;
  #L53f5aa.  v7:= v7 * v0 @kind double;
  #L53f5ae.  v0:= v6.`o.c$a.f` @type ^`double` @kind wide;
  #L53f5b2.  v0:= v0 * v2 @kind double;
  #L53f5b6.  v7:= v7 + v0 @kind double;
  #L53f5b8.  v7:= v7 + v4 @kind double;
  #L53f5ba.  return v7 @kind wide;
}
procedure `double` `e`(`o.c$a` v6 @kind this, `double` v7 ) @signature `Lo/c$a;.e:(D)D` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L53f5cc.  v0:= 1.0D;
  #L53f5d0.  v0:= v0 - v7 @kind double;
  #L53f5d2.  v2:= 3.0D;
  #L53f5d6.  v2:= v2 * v0 @kind double;
  #L53f5da.  v0:= v0 * v2 @kind double;
  #L53f5de.  v0:= v0 * v7 @kind double;
  #L53f5e2.  v2:= v2 * v7 @kind double;
  #L53f5e6.  v2:= v2 * v7 @kind double;
  #L53f5ea.  v4:= v7 * v7 @kind double;
  #L53f5ee.  v4:= v4 * v7 @kind double;
  #L53f5f2.  v7:= v6.`o.c$a.e` @type ^`double` @kind wide;
  #L53f5f6.  v7:= v7 * v0 @kind double;
  #L53f5fa.  v0:= v6.`o.c$a.g` @type ^`double` @kind wide;
  #L53f5fe.  v0:= v0 * v2 @kind double;
  #L53f602.  v7:= v7 + v0 @kind double;
  #L53f604.  v7:= v7 + v4 @kind double;
  #L53f606.  return v7 @kind wide;
}
procedure `double` `a`(`o.c$a` v9 @kind this, `double` v10 ) @signature `Lo/c$a;.a:(D)D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L53f47c.  v0:= 0L;
  #L53f480.  v2:= dcmpg(v10, v0);
  #L53f484.  if v2 > 0 then goto L53f48a;
  #L53f488.  return v0 @kind wide;
  #L53f48a.  v0:= 1.0D;
  #L53f48e.  v2:= dcmpl(v10, v0);
  #L53f492.  if v2 < 0 then goto L53f498;
  #L53f496.  return v0 @kind wide;
  #L53f498.  v0:= 0.5D;
  #L53f49c.  v2:= v0 @kind wide;
  #L53f49e.  v4:= v2 @kind wide;
  #L53f4a0.  v6:= `@@o.c$a.h` @type ^`double` @kind wide;
  #L53f4a4.  v8:= dcmpl(v2, v6);
  #L53f4a8.  if v8 <= 0 then goto L53f4c8;
  #L53f4ac.  call temp:= `d`(v9, v4) @signature `Lo/c$a;.d:(D)D` @kind direct;
  #L53f4b2.  v6:= temp @kind wide;
  #L53f4b4.  v2:= v2 * v0 @kind double;
  #L53f4b8.  v8:= dcmpg(v6, v10);
  #L53f4bc.  if v8 >= 0 then goto L53f4c4;
  #L53f4c0.  v4:= v4 + v2 @kind double;
  #L53f4c2.  goto L53f4a0;
  #L53f4c4.  v4:= v4 - v2 @kind double;
  #L53f4c6.  goto L53f4a0;
  #L53f4c8.  v0:= v4 - v2 @kind double;
  #L53f4cc.  call temp:= `d`(v9, v0) @signature `Lo/c$a;.d:(D)D` @kind direct;
  #L53f4d2.  v6:= temp @kind wide;
  #L53f4d4.  v4:= v4 + v2 @kind double;
  #L53f4d6.  call temp:= `d`(v9, v4) @signature `Lo/c$a;.d:(D)D` @kind direct;
  #L53f4dc.  v2:= temp @kind wide;
  #L53f4de.  call temp:= `e`(v9, v0) @signature `Lo/c$a;.e:(D)D` @kind direct;
  #L53f4e4.  v0:= temp @kind wide;
  #L53f4e6.  call temp:= `e`(v9, v4) @signature `Lo/c$a;.e:(D)D` @kind direct;
  #L53f4ec.  v4:= temp @kind wide;
  #L53f4ee.  v4:= v4 - v0 @kind double;
  #L53f4f0.  v10:= v10 - v6 @kind double;
  #L53f4f2.  v4:= v4 * v10 @kind double;
  #L53f4f6.  v2:= v2 - v6 @kind double;
  #L53f4f8.  v4:= v4 / v2 @kind double;
  #L53f4fa.  v4:= v4 + v0 @kind double;
  #L53f4fc.  return v4 @kind wide;
}
procedure `double` `b`(`o.c$a` v9 @kind this, `double` v10 ) @signature `Lo/c$a;.b:(D)D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L53f510.  v0:= 0.5D;
  #L53f514.  v2:= v0 @kind wide;
  #L53f516.  v4:= v2 @kind wide;
  #L53f518.  v6:= `@@o.c$a.i` @type ^`double` @kind wide;
  #L53f51c.  v8:= dcmpl(v2, v6);
  #L53f520.  if v8 <= 0 then goto L53f540;
  #L53f524.  call temp:= `d`(v9, v4) @signature `Lo/c$a;.d:(D)D` @kind direct;
  #L53f52a.  v6:= temp @kind wide;
  #L53f52c.  v2:= v2 * v0 @kind double;
  #L53f530.  v8:= dcmpg(v6, v10);
  #L53f534.  if v8 >= 0 then goto L53f53c;
  #L53f538.  v4:= v4 + v2 @kind double;
  #L53f53a.  goto L53f518;
  #L53f53c.  v4:= v4 - v2 @kind double;
  #L53f53e.  goto L53f518;
  #L53f540.  v10:= v4 - v2 @kind double;
  #L53f544.  call temp:= `d`(v9, v10) @signature `Lo/c$a;.d:(D)D` @kind direct;
  #L53f54a.  v0:= temp @kind wide;
  #L53f54c.  v4:= v4 + v2 @kind double;
  #L53f54e.  call temp:= `d`(v9, v4) @signature `Lo/c$a;.d:(D)D` @kind direct;
  #L53f554.  v2:= temp @kind wide;
  #L53f556.  call temp:= `e`(v9, v10) @signature `Lo/c$a;.e:(D)D` @kind direct;
  #L53f55c.  v10:= temp @kind wide;
  #L53f55e.  call temp:= `e`(v9, v4) @signature `Lo/c$a;.e:(D)D` @kind direct;
  #L53f564.  v4:= temp @kind wide;
  #L53f566.  v4:= v4 - v10 @kind double;
  #L53f568.  v2:= v2 - v0 @kind double;
  #L53f56a.  v4:= v4 / v2 @kind double;
  #L53f56c.  return v4 @kind wide;
}
