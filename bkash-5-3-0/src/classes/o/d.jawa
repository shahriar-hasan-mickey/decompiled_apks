record `o.d` @kind class @AccessFlag PUBLIC {
  `java.util.HashMap` `o.d.a` @AccessFlag ;
}
procedure `void` `<init>`(`o.d` v1 @kind this) @signature `Lo/d;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L53f9fc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L53fa02.  v0:= new `java.util.HashMap`;
  #L53fa06.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L53fa0c.  v1.`o.d.a` @type ^`java.util.HashMap` := v0 @kind object;
  #L53fa10.  return @kind void;
}
procedure `float` `a`(`o.d` v2 @kind this, `java.lang.Object` v3 @kind object, `java.lang.String` v4 @kind object, `int` v5 ) @signature `Lo/d;.a:(Ljava/lang/Object;Ljava/lang/String;I)F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L53f994.  v0:= v2.`o.d.a` @type ^`java.util.HashMap` @kind object;
  #L53f998.  call temp:= `containsKey`(v0, v3) @signature `Ljava/util/HashMap;.containsKey:(Ljava/lang/Object;)Z` @kind virtual;
  #L53f99e.  v0:= temp;
  #L53f9a0.  v1:= NaNF;
  #L53f9a4.  if v0 != 0 then goto L53f9aa;
  #L53f9a8.  return v1;
  #L53f9aa.  v0:= v2.`o.d.a` @type ^`java.util.HashMap` @kind object;
  #L53f9ae.  call temp:= `get`(v0, v3) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L53f9b4.  v3:= temp @kind object;
  #L53f9b6.  v3:= (`java.util.HashMap`) v3 @kind object;
  #L53f9ba.  if v3 == 0 then goto L53f9ea;
  #L53f9be.  call temp:= `containsKey`(v3, v4) @signature `Ljava/util/HashMap;.containsKey:(Ljava/lang/Object;)Z` @kind virtual;
  #L53f9c4.  v0:= temp;
  #L53f9c6.  if v0 != 0 then goto L53f9cc;
  #L53f9ca.  goto L53f9ea;
  #L53f9cc.  call temp:= `get`(v3, v4) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L53f9d2.  v3:= temp @kind object;
  #L53f9d4.  v3:= (`float`[]) v3 @kind object;
  #L53f9d8.  if v3 != 0 then goto L53f9de;
  #L53f9dc.  return v1;
  #L53f9de.  v4:= length @variable v3;
  #L53f9e0.  if v4 <= v5 then goto L53f9ea;
  #L53f9e4.  v3:= v3[v5];
  #L53f9e8.  return v3;
  #L53f9ea.  return v1;
}
procedure `void` `b`(`o.d` v2 @kind this, `java.lang.Object` v3 @kind object, `java.lang.String` v4 @kind object, `int` v5 , `float` v6 ) @signature `Lo/d;.b:(Ljava/lang/Object;Ljava/lang/String;IF)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L53fa24.  v0:= v2.`o.d.a` @type ^`java.util.HashMap` @kind object;
  #L53fa28.  call temp:= `containsKey`(v0, v3) @signature `Ljava/util/HashMap;.containsKey:(Ljava/lang/Object;)Z` @kind virtual;
  #L53fa2e.  v0:= temp;
  #L53fa30.  if v0 != 0 then goto L53fa5c;
  #L53fa34.  v0:= new `java.util.HashMap`;
  #L53fa38.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L53fa3e.  v1:= v5 + 1;
  #L53fa42.  v1:= new `float`[v1];
  #L53fa46.  v1[v5]:= v6;
  #L53fa4a.  call temp:= `put`(v0, v4, v1) @signature `Ljava/util/HashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L53fa50.  v4:= v2.`o.d.a` @type ^`java.util.HashMap` @kind object;
  #L53fa54.  call temp:= `put`(v4, v3, v0) @signature `Ljava/util/HashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L53fa5a.  goto L53fad6;
  #L53fa5c.  v0:= v2.`o.d.a` @type ^`java.util.HashMap` @kind object;
  #L53fa60.  call temp:= `get`(v0, v3) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L53fa66.  v0:= temp @kind object;
  #L53fa68.  v0:= (`java.util.HashMap`) v0 @kind object;
  #L53fa6c.  if v0 != 0 then goto L53fa7a;
  #L53fa70.  v0:= new `java.util.HashMap`;
  #L53fa74.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L53fa7a.  call temp:= `containsKey`(v0, v4) @signature `Ljava/util/HashMap;.containsKey:(Ljava/lang/Object;)Z` @kind virtual;
  #L53fa80.  v1:= temp;
  #L53fa82.  if v1 != 0 then goto L53faa4;
  #L53fa86.  v1:= v5 + 1;
  #L53fa8a.  v1:= new `float`[v1];
  #L53fa8e.  v1[v5]:= v6;
  #L53fa92.  call temp:= `put`(v0, v4, v1) @signature `Ljava/util/HashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L53fa98.  v4:= v2.`o.d.a` @type ^`java.util.HashMap` @kind object;
  #L53fa9c.  call temp:= `put`(v4, v3, v0) @signature `Ljava/util/HashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L53faa2.  goto L53fad6;
  #L53faa4.  call temp:= `get`(v0, v4) @signature `Ljava/util/HashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L53faaa.  v3:= temp @kind object;
  #L53faac.  v3:= (`float`[]) v3 @kind object;
  #L53fab0.  if v3 != 0 then goto L53faba;
  #L53fab4.  v3:= 0I;
  #L53fab6.  v3:= new `float`[v3];
  #L53faba.  v1:= length @variable v3;
  #L53fabc.  if v1 > v5 then goto L53facc;
  #L53fac0.  v1:= v5 + 1;
  #L53fac4.  call temp:= `copyOf`(v3, v1) @signature `Ljava/util/Arrays;.copyOf:([FI)[F` @kind static;
  #L53faca.  v3:= temp @kind object;
  #L53facc.  v3[v5]:= v6;
  #L53fad0.  call temp:= `put`(v0, v4, v3) @signature `Ljava/util/HashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L53fad6.  return @kind void;
}
