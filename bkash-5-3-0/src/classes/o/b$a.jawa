record `o.b$a` @kind class @AccessFlag  extends `o.b` @kind class {
  `double` `o.b$a.a` @AccessFlag ;
  `double`[] `o.b$a.b` @AccessFlag ;
}
procedure `void` `<init>`(`o.b$a` v0 @kind this, `double` v1 , `double`[] v3 @kind object) @signature `Lo/b$a;.<init>:(D[D)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L53f358.  call `<init>`(v0) @signature `Lo/b;.<init>:()V` @kind direct;
  #L53f35e.  v0.`o.b$a.a` @type ^`double` := v1 @kind wide;
  #L53f362.  v0.`o.b$a.b` @type ^`double`[] := v3 @kind object;
  #L53f366.  return @kind void;
}
procedure `double` `c`(`o.b$a` v0 @kind this, `double` v1 , `int` v3 ) @signature `Lo/b$a;.c:(DI)D` @AccessFlag PUBLIC {
    temp;

  #L53f300.  v1:= v0.`o.b$a.b` @type ^`double`[] @kind object;
  #L53f304.  v2:= v1[v3] @kind wide;
  #L53f308.  return v2 @kind wide;
}
procedure `void` `d`(`o.b$a` v1 @kind this, `double` v2 , `double`[] v4 @kind object) @signature `Lo/b$a;.d:(D[D)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L53f378.  v2:= v1.`o.b$a.b` @type ^`double`[] @kind object;
  #L53f37c.  v3:= length @variable v2;
  #L53f37e.  v0:= 0I;
  #L53f380.  call `arraycopy`(v2, v0, v4, v0, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L53f386.  return @kind void;
}
procedure `void` `e`(`o.b$a` v2 @kind this, `double` v3 , `float`[] v5 @kind object) @signature `Lo/b$a;.e:(D[F)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L53f398.  v3:= 0I;
  #L53f39a.  v4:= v2.`o.b$a.b` @type ^`double`[] @kind object;
  #L53f39e.  v0:= length @variable v4;
  #L53f3a0.  if v3 >= v0 then goto L53f3b4;
  #L53f3a4.  v0:= v4[v3] @kind wide;
  #L53f3a8.  v4:= (`float`) v0 @kind d2f;
  #L53f3aa.  v5[v3]:= v4;
  #L53f3ae.  v3:= v3 + 1;
  #L53f3b2.  goto L53f39a;
  #L53f3b4.  return @kind void;
}
procedure `double` `f`(`o.b$a` v0 @kind this, `double` v1 , `int` v3 ) @signature `Lo/b$a;.f:(DI)D` @AccessFlag PUBLIC {
    temp;

  #L53f31c.  v1:= 0L;
  #L53f320.  return v1 @kind wide;
}
procedure `void` `g`(`o.b$a` v2 @kind this, `double` v3 , `double`[] v5 @kind object) @signature `Lo/b$a;.g:(D[D)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L53f3c8.  v3:= 0I;
  #L53f3ca.  v4:= v2.`o.b$a.b` @type ^`double`[] @kind object;
  #L53f3ce.  v4:= length @variable v4;
  #L53f3d0.  if v3 >= v4 then goto L53f3e2;
  #L53f3d4.  v0:= 0L;
  #L53f3d8.  v5[v3]:= v0 @kind wide;
  #L53f3dc.  v3:= v3 + 1;
  #L53f3e0.  goto L53f3ca;
  #L53f3e2.  return @kind void;
}
procedure `double`[] `h`(`o.b$a` v4 @kind this) @signature `Lo/b$a;.h:()[D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L53f334.  v0:= 1I;
  #L53f336.  v0:= new `double`[v0];
  #L53f33a.  v1:= v4.`o.b$a.a` @type ^`double` @kind wide;
  #L53f33e.  v3:= 0I;
  #L53f340.  v0[v3]:= v1 @kind wide;
  #L53f344.  return v0 @kind object;
}
