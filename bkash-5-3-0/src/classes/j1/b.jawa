record `j1.b` @kind class @AccessFlag FINAL {
  `java.util.concurrent.ExecutorService` `j1.b.a` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.Executor` `j1.b.b` @AccessFlag PRIVATE_FINAL;
}
global `j1.b` `@@j1.b.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lj1/b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L512ed0.  v0:= new `j1.b`;
  #L512ed4.  call `<init>`(v0) @signature `Lj1/b;.<init>:()V` @kind direct;
  #L512eda.  `@@j1.b.c` @type ^`j1.b` := v0 @kind object;
  #L512ede.  return @kind void;
}
procedure `void` `<init>`(`j1.b` v2 @kind this) @signature `Lj1/b;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L512ef0.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L512ef6.  call temp:= `c`() @signature `Lj1/b;.c:()Z` @kind static;
  #L512efc.  v0:= temp;
  #L512efe.  if v0 != 0 then goto L512f0c;
  #L512f02.  call temp:= `newCachedThreadPool`() @signature `Ljava/util/concurrent/Executors;.newCachedThreadPool:()Ljava/util/concurrent/ExecutorService;` @kind static;
  #L512f08.  v0:= temp @kind object;
  #L512f0a.  goto L512f14;
  #L512f0c.  call temp:= `b`() @signature `Lj1/a;.b:()Ljava/util/concurrent/ExecutorService;` @kind static;
  #L512f12.  v0:= temp @kind object;
  #L512f14.  v2.`j1.b.a` @type ^`java.util.concurrent.ExecutorService` := v0 @kind object;
  #L512f18.  call temp:= `newSingleThreadScheduledExecutor`() @signature `Ljava/util/concurrent/Executors;.newSingleThreadScheduledExecutor:()Ljava/util/concurrent/ScheduledExecutorService;` @kind static;
  #L512f1e.  v0:= new `j1.b$b`;
  #L512f22.  v1:= 0I;
  #L512f24.  call `<init>`(v0, v1) @signature `Lj1/b$b;.<init>:(Lj1/b$a;)V` @kind direct;
  #L512f2a.  v2.`j1.b.b` @type ^`java.util.concurrent.Executor` := v0 @kind object;
  #L512f2e.  return @kind void;
}
procedure `java.util.concurrent.ExecutorService` `a`() @signature `Lj1/b;.a:()Ljava/util/concurrent/ExecutorService;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L512eb4.  v0:= `@@j1.b.c` @type ^`j1.b` @kind object;
  #L512eb8.  v0:= v0.`j1.b.a` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L512ebc.  return v0 @kind object;
}
procedure `java.util.concurrent.Executor` `b`() @signature `Lj1/b;.b:()Ljava/util/concurrent/Executor;` @AccessFlag STATIC {
    temp;
    v0;

  #L512e98.  v0:= `@@j1.b.c` @type ^`j1.b` @kind object;
  #L512e9c.  v0:= v0.`j1.b.b` @type ^`java.util.concurrent.Executor` @kind object;
  #L512ea0.  return v0 @kind object;
}
procedure `boolean` `c`() @signature `Lj1/b;.c:()Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L512e58.  v0:= "java.runtime.name" @kind object;
  #L512e5c.  call temp:= `getProperty`(v0) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L512e62.  v0:= temp @kind object;
  #L512e64.  if v0 != 0 then goto L512e6c;
  #L512e68.  v0:= 0I;
  #L512e6a.  return v0;
  #L512e6c.  v1:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L512e70.  call temp:= `toLowerCase`(v0, v1) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L512e76.  v0:= temp @kind object;
  #L512e78.  v1:= "android" @kind object;
  #L512e7c.  call temp:= `contains`(v0, v1) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L512e82.  v0:= temp;
  #L512e84.  return v0;
}
