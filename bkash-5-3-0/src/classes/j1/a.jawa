record `j1.a` @kind class @AccessFlag FINAL {
  `java.util.concurrent.Executor` `j1.a.a` @AccessFlag PRIVATE_FINAL;
}
global `j1.a` `@@j1.a.b` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@j1.a.c` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@j1.a.d` @AccessFlag STATIC_FINAL;
global `int` `@@j1.a.e` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lj1/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L512c80.  v0:= new `j1.a`;
  #L512c84.  call `<init>`(v0) @signature `Lj1/a;.<init>:()V` @kind direct;
  #L512c8a.  `@@j1.a.b` @type ^`j1.a` := v0 @kind object;
  #L512c8e.  call temp:= `getRuntime`() @signature `Ljava/lang/Runtime;.getRuntime:()Ljava/lang/Runtime;` @kind static;
  #L512c94.  v0:= temp @kind object;
  #L512c96.  call temp:= `availableProcessors`(v0) @signature `Ljava/lang/Runtime;.availableProcessors:()I` @kind virtual;
  #L512c9c.  v0:= temp;
  #L512c9e.  `@@j1.a.c` @type ^`int` := v0;
  #L512ca2.  v1:= v0 + 1;
  #L512ca6.  `@@j1.a.d` @type ^`int` := v1;
  #L512caa.  v0:= v0 * 2;
  #L512cae.  v0:= v0 + 1;
  #L512cb2.  `@@j1.a.e` @type ^`int` := v0;
  #L512cb6.  return @kind void;
}
procedure `void` `<init>`(`j1.a` v2 @kind this) @signature `Lj1/a;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L512cc8.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L512cce.  v0:= new `j1.a$b`;
  #L512cd2.  v1:= 0I;
  #L512cd4.  call `<init>`(v0, v1) @signature `Lj1/a$b;.<init>:(Lj1/a$a;)V` @kind direct;
  #L512cda.  v2.`j1.a.a` @type ^`java.util.concurrent.Executor` := v0 @kind object;
  #L512cde.  return @kind void;
}
procedure `void` `a`(`java.util.concurrent.ThreadPoolExecutor` v2 @kind object, `boolean` v3 ) @signature `Lj1/a;.a:(Ljava/util/concurrent/ThreadPoolExecutor;Z)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L512cf0.  v0:= `@@android.os.Build$VERSION.SDK_INT` @type ^`int`;
  #L512cf4.  v1:= 9I;
  #L512cf8.  if v0 < v1 then goto L512d02;
  #L512cfc.  call `allowCoreThreadTimeOut`(v2, v3) @signature `Ljava/util/concurrent/ThreadPoolExecutor;.allowCoreThreadTimeOut:(Z)V` @kind virtual;
  #L512d02.  return @kind void;
}
procedure `java.util.concurrent.ExecutorService` `b`() @signature `Lj1/a;.b:()Ljava/util/concurrent/ExecutorService;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L512c40.  v7:= new `java.util.concurrent.ThreadPoolExecutor`;
  #L512c44.  v1:= `@@j1.a.d` @type ^`int`;
  #L512c48.  v2:= `@@j1.a.e` @type ^`int`;
  #L512c4c.  v5:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L512c50.  v6:= new `java.util.concurrent.LinkedBlockingQueue`;
  #L512c54.  call `<init>`(v6) @signature `Ljava/util/concurrent/LinkedBlockingQueue;.<init>:()V` @kind direct;
  #L512c5a.  v3:= 1L;
  #L512c5e.  v0:= v7 @kind object;
  #L512c60.  call `<init>`(v0, v1, v2, v3, v5, v6) @signature `Ljava/util/concurrent/ThreadPoolExecutor;.<init>:(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;)V` @kind direct;
  #L512c66.  v0:= 1I;
  #L512c68.  call `a`(v7, v0) @signature `Lj1/a;.a:(Ljava/util/concurrent/ThreadPoolExecutor;Z)V` @kind static;
  #L512c6e.  return v7 @kind object;
}
procedure `java.util.concurrent.Executor` `c`() @signature `Lj1/a;.c:()Ljava/util/concurrent/Executor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L512c24.  v0:= `@@j1.a.b` @type ^`j1.a` @kind object;
  #L512c28.  v0:= v0.`j1.a.a` @type ^`java.util.concurrent.Executor` @kind object;
  #L512c2c.  return v0 @kind object;
}
