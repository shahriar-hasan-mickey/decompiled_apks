record `j1.f$b` @kind class @AccessFlag FINAL extends `java.lang.Runnable` @kind interface {
  `j1.g` `j1.f$b.g` @AccessFlag FINAL_SYNTHETIC;
  `j1.d` `j1.f$b.h` @AccessFlag FINAL_SYNTHETIC;
  `j1.f` `j1.f$b.i` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`j1.f$b` v0 @kind this, `j1.c` v1 @kind object, `j1.g` v2 @kind object, `j1.d` v3 @kind object, `j1.f` v4 @kind object) @signature `Lj1/f$b;.<init>:(Lj1/c;Lj1/g;Lj1/d;Lj1/f;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L512fc8.  v0.`j1.f$b.g` @type ^`j1.g` := v2 @kind object;
  #L512fcc.  v0.`j1.f$b.h` @type ^`j1.d` := v3 @kind object;
  #L512fd0.  v0.`j1.f$b.i` @type ^`j1.f` := v4 @kind object;
  #L512fd4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L512fda.  return @kind void;
}
procedure `void` `run`(`j1.f$b` v2 @kind this) @signature `Lj1/f$b;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L512fec.  v0:= v2.`j1.f$b.h` @type ^`j1.d` @kind object;
  #L512ff0.  v1:= v2.`j1.f$b.i` @type ^`j1.f` @kind object;
  #L512ff4.  call temp:= `a`(v0, v1) @signature `Lj1/d;.a:(Lj1/f;)Ljava/lang/Object;` @kind interface;
  #L512ffa.  v0:= temp @kind object;
  #L512ffc.  v1:= v2.`j1.f$b.g` @type ^`j1.g` @kind object;
  #L513000.  call `d`(v1, v0) @signature `Lj1/g;.d:(Ljava/lang/Object;)V` @kind virtual;
  #L513006.  goto L513020;
  #L513008.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L51300a.  v1:= v2.`j1.f$b.g` @type ^`j1.g` @kind object;
  #L51300e.  call `c`(v1, v0) @signature `Lj1/g;.c:(Ljava/lang/Exception;)V` @kind virtual;
  #L513014.  goto L513020;
  #L513016.  v0:= v2.`j1.f$b.g` @type ^`j1.g` @kind object;
  #L51301a.  call `b`(v0) @signature `Lj1/g;.b:()V` @kind virtual;
  #L513020.  return @kind void;
  catch `java.util.concurrent.CancellationException` @[L512fec..L513006] goto L513016;
  catch `java.lang.Exception` @[L512fec..L513006] goto L513008;
}
