record `j1.f` @kind class @AccessFlag PUBLIC {
  `java.lang.Object` `j1.f.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `j1.f.b` @AccessFlag PRIVATE;
  `boolean` `j1.f.c` @AccessFlag PRIVATE;
  `java.lang.Object` `j1.f.d` @AccessFlag PRIVATE;
  `java.lang.Exception` `j1.f.e` @AccessFlag PRIVATE;
  `boolean` `j1.f.f` @AccessFlag PRIVATE;
  `j1.h` `j1.f.g` @AccessFlag PRIVATE;
  `java.util.List` `j1.f.h` @AccessFlag PRIVATE;
}
global `java.util.concurrent.ExecutorService` `@@j1.f.i` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.util.concurrent.Executor` `@@j1.f.j` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.Executor` `@@j1.f.k` @AccessFlag PUBLIC_STATIC_FINAL;
global `j1.f$d` `@@j1.f.l` @AccessFlag PRIVATE_STATIC_VOLATILE;
global `j1.f` `@@j1.f.m` @AccessFlag PRIVATE_STATIC;
global `j1.f` `@@j1.f.n` @AccessFlag PRIVATE_STATIC;
global `j1.f` `@@j1.f.o` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lj1/f;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L5135dc.  call temp:= `a`() @signature `Lj1/b;.a:()Ljava/util/concurrent/ExecutorService;` @kind static;
  #L5135e2.  v0:= temp @kind object;
  #L5135e4.  `@@j1.f.i` @type ^`java.util.concurrent.ExecutorService` := v0 @kind object;
  #L5135e8.  call temp:= `b`() @signature `Lj1/b;.b:()Ljava/util/concurrent/Executor;` @kind static;
  #L5135ee.  v0:= temp @kind object;
  #L5135f0.  `@@j1.f.j` @type ^`java.util.concurrent.Executor` := v0 @kind object;
  #L5135f4.  call temp:= `c`() @signature `Lj1/a;.c:()Ljava/util/concurrent/Executor;` @kind static;
  #L5135fa.  v0:= temp @kind object;
  #L5135fc.  `@@j1.f.k` @type ^`java.util.concurrent.Executor` := v0 @kind object;
  #L513600.  v0:= new `j1.f`;
  #L513604.  v1:= 0I;
  #L513606.  call `<init>`(v0, v1) @signature `Lj1/f;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L51360c.  `@@j1.f.m` @type ^`j1.f` := v0 @kind object;
  #L513610.  v0:= new `j1.f`;
  #L513614.  v1:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L513618.  call `<init>`(v0, v1) @signature `Lj1/f;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L51361e.  `@@j1.f.n` @type ^`j1.f` := v0 @kind object;
  #L513622.  v0:= new `j1.f`;
  #L513626.  v1:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L51362a.  call `<init>`(v0, v1) @signature `Lj1/f;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L513630.  `@@j1.f.o` @type ^`j1.f` := v0 @kind object;
  #L513634.  v0:= new `j1.f`;
  #L513638.  v1:= 1I;
  #L51363a.  call `<init>`(v0, v1) @signature `Lj1/f;.<init>:(Z)V` @kind direct;
  #L513640.  return @kind void;
}
procedure `void` `<init>`(`j1.f` v1 @kind this) @signature `Lj1/f;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L513654.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L51365a.  v0:= new `java.lang.Object`;
  #L51365e.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L513664.  v1.`j1.f.a` @type ^`java.lang.Object` := v0 @kind object;
  #L513668.  v0:= new `java.util.ArrayList`;
  #L51366c.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L513672.  v1.`j1.f.h` @type ^`java.util.List` := v0 @kind object;
  #L513676.  return @kind void;
}
procedure `void` `<init>`(`j1.f` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lj1/f;.<init>:(Ljava/lang/Object;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L5136d0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L5136d6.  v0:= new `java.lang.Object`;
  #L5136da.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L5136e0.  v1.`j1.f.a` @type ^`java.lang.Object` := v0 @kind object;
  #L5136e4.  v0:= new `java.util.ArrayList`;
  #L5136e8.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L5136ee.  v1.`j1.f.h` @type ^`java.util.List` := v0 @kind object;
  #L5136f2.  call temp:= `r`(v1, v2) @signature `Lj1/f;.r:(Ljava/lang/Object;)Z` @kind virtual;
  #L5136f8.  return @kind void;
}
procedure `void` `<init>`(`j1.f` v1 @kind this, `boolean` v2 ) @signature `Lj1/f;.<init>:(Z)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L513688.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L51368e.  v0:= new `java.lang.Object`;
  #L513692.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L513698.  v1.`j1.f.a` @type ^`java.lang.Object` := v0 @kind object;
  #L51369c.  v0:= new `java.util.ArrayList`;
  #L5136a0.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L5136a6.  v1.`j1.f.h` @type ^`java.util.List` := v0 @kind object;
  #L5136aa.  if v2 == 0 then goto L5136b6;
  #L5136ae.  call temp:= `p`(v1) @signature `Lj1/f;.p:()Z` @kind virtual;
  #L5136b4.  goto L5136be;
  #L5136b6.  v2:= 0I;
  #L5136b8.  call temp:= `r`(v1, v2) @signature `Lj1/f;.r:(Ljava/lang/Object;)Z` @kind virtual;
  #L5136be.  return @kind void;
}
procedure `void` `a`(`j1.g` v0 @kind object, `j1.d` v1 @kind object, `j1.f` v2 @kind object, `java.util.concurrent.Executor` v3 @kind object, `j1.c` v4 @kind object) @signature `Lj1/f;.a:(Lj1/g;Lj1/d;Lj1/f;Ljava/util/concurrent/Executor;Lj1/c;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L51370c.  call `d`(v0, v1, v2, v3, v4) @signature `Lj1/f;.d:(Lj1/g;Lj1/d;Lj1/f;Ljava/util/concurrent/Executor;Lj1/c;)V` @kind static;
  #L513712.  return @kind void;
}
procedure `j1.f` `b`(`java.util.concurrent.Callable` v1 @kind object, `java.util.concurrent.Executor` v2 @kind object) @signature `Lj1/f;.b:(Ljava/util/concurrent/Callable;Ljava/util/concurrent/Executor;)Lj1/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L5133ac.  v0:= 0I;
  #L5133ae.  call temp:= `c`(v1, v2, v0) @signature `Lj1/f;.c:(Ljava/util/concurrent/Callable;Ljava/util/concurrent/Executor;Lj1/c;)Lj1/f;` @kind static;
  #L5133b4.  v1:= temp @kind object;
  #L5133b6.  return v1 @kind object;
}
procedure `j1.f` `c`(`java.util.concurrent.Callable` v2 @kind object, `java.util.concurrent.Executor` v3 @kind object, `j1.c` v4 @kind object) @signature `Lj1/f;.c:(Ljava/util/concurrent/Callable;Ljava/util/concurrent/Executor;Lj1/c;)Lj1/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L5133c8.  v0:= new `j1.g`;
  #L5133cc.  call `<init>`(v0) @signature `Lj1/g;.<init>:()V` @kind direct;
  #L5133d2.  v1:= new `j1.f$c`;
  #L5133d6.  call `<init>`(v1, v4, v0, v2) @signature `Lj1/f$c;.<init>:(Lj1/c;Lj1/g;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L5133dc.  call `execute`(v3, v1) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L5133e2.  goto L5133f6;
  #L5133e4.  v2:= Exception @type ^`java.lang.Exception` @kind object;
  #L5133e6.  v3:= new `j1.e`;
  #L5133ea.  call `<init>`(v3, v2) @signature `Lj1/e;.<init>:(Ljava/lang/Exception;)V` @kind direct;
  #L5133f0.  call `c`(v0, v3) @signature `Lj1/g;.c:(Ljava/lang/Exception;)V` @kind virtual;
  #L5133f6.  call temp:= `a`(v0) @signature `Lj1/g;.a:()Lj1/f;` @kind virtual;
  #L5133fc.  v2:= temp @kind object;
  #L5133fe.  return v2 @kind object;
  catch `java.lang.Exception` @[L5133d2..L5133e2] goto L5133e4;
}
procedure `void` `d`(`j1.g` v1 @kind object, `j1.d` v2 @kind object, `j1.f` v3 @kind object, `java.util.concurrent.Executor` v4 @kind object, `j1.c` v5 @kind object) @signature `Lj1/f;.d:(Lj1/g;Lj1/d;Lj1/f;Ljava/util/concurrent/Executor;Lj1/c;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L513724.  v0:= new `j1.f$b`;
  #L513728.  call `<init>`(v0, v5, v1, v2, v3) @signature `Lj1/f$b;.<init>:(Lj1/c;Lj1/g;Lj1/d;Lj1/f;)V` @kind direct;
  #L51372e.  call `execute`(v4, v0) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L513734.  goto L513748;
  #L513736.  v2:= Exception @type ^`java.lang.Exception` @kind object;
  #L513738.  v3:= new `j1.e`;
  #L51373c.  call `<init>`(v3, v2) @signature `Lj1/e;.<init>:(Ljava/lang/Exception;)V` @kind direct;
  #L513742.  call `c`(v1, v3) @signature `Lj1/g;.c:(Ljava/lang/Exception;)V` @kind virtual;
  #L513748.  return @kind void;
  catch `java.lang.Exception` @[L513724..L513734] goto L513736;
}
procedure `j1.f` `g`(`java.lang.Exception` v1 @kind object) @signature `Lj1/f;.g:(Ljava/lang/Exception;)Lj1/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L5134bc.  v0:= new `j1.g`;
  #L5134c0.  call `<init>`(v0) @signature `Lj1/g;.<init>:()V` @kind direct;
  #L5134c6.  call `c`(v0, v1) @signature `Lj1/g;.c:(Ljava/lang/Exception;)V` @kind virtual;
  #L5134cc.  call temp:= `a`(v0) @signature `Lj1/g;.a:()Lj1/f;` @kind virtual;
  #L5134d2.  v1:= temp @kind object;
  #L5134d4.  return v1 @kind object;
}
procedure `j1.f` `h`(`java.lang.Object` v1 @kind object) @signature `Lj1/f;.h:(Ljava/lang/Object;)Lj1/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L5134e8.  if v1 != 0 then goto L5134f2;
  #L5134ec.  v1:= `@@j1.f.m` @type ^`j1.f` @kind object;
  #L5134f0.  return v1 @kind object;
  #L5134f2.  v0:= instanceof @variable v1 @type ^`java.lang.Boolean` @kind boolean;
  #L5134f6.  if v0 == 0 then goto L513516;
  #L5134fa.  v1:= (`java.lang.Boolean`) v1 @kind object;
  #L5134fe.  call temp:= `booleanValue`(v1) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L513504.  v1:= temp;
  #L513506.  if v1 == 0 then goto L513510;
  #L51350a.  v1:= `@@j1.f.n` @type ^`j1.f` @kind object;
  #L51350e.  goto L513514;
  #L513510.  v1:= `@@j1.f.o` @type ^`j1.f` @kind object;
  #L513514.  return v1 @kind object;
  #L513516.  v0:= new `j1.g`;
  #L51351a.  call `<init>`(v0) @signature `Lj1/g;.<init>:()V` @kind direct;
  #L513520.  call `d`(v0, v1) @signature `Lj1/g;.d:(Ljava/lang/Object;)V` @kind virtual;
  #L513526.  call temp:= `a`(v0) @signature `Lj1/g;.a:()Lj1/f;` @kind virtual;
  #L51352c.  v1:= temp @kind object;
  #L51352e.  return v1 @kind object;
}
procedure `j1.f$d` `k`() @signature `Lj1/f;.k:()Lj1/f$d;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L513540.  v0:= `@@j1.f.l` @type ^`j1.f$d` @kind object;
  #L513544.  return v0 @kind object;
}
procedure `void` `o`(`j1.f` v3 @kind this) @signature `Lj1/f;.o:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L51376c.  v0:= v3.`j1.f.a` @type ^`java.lang.Object` @kind object;
  #L513770.  @monitorenter v0
  #L513772.  v1:= v3.`j1.f.h` @type ^`java.util.List` @kind object;
  #L513776.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L51377c.  v1:= temp @kind object;
  #L51377e.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L513784.  v2:= temp;
  #L513786.  if v2 == 0 then goto L5137b0;
  #L51378a.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L513790.  v2:= temp @kind object;
  #L513792.  v2:= (`j1.d`) v2 @kind object;
  #L513796.  call temp:= `a`(v2, v3) @signature `Lj1/d;.a:(Lj1/f;)Ljava/lang/Object;` @kind interface;
  #L51379c.  goto L51377e;
  #L51379e.  v1:= Exception @type ^`java.lang.Exception` @kind object;
  #L5137a0.  v2:= new `java.lang.RuntimeException`;
  #L5137a4.  call `<init>`(v2, v1) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L5137aa.  throw v2;
  #L5137ac.  v1:= Exception @type ^`java.lang.RuntimeException` @kind object;
  #L5137ae.  throw v1;
  #L5137b0.  v1:= 0I;
  #L5137b2.  v3.`j1.f.h` @type ^`java.util.List` := v1 @kind object;
  #L5137b6.  @monitorexit v0
  #L5137b8.  return @kind void;
  #L5137ba.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L5137bc.  @monitorexit v0
  #L5137be.  throw v1;
  catch `java.lang.Throwable` @[L513772..L513796] goto L5137ba;
  catch `java.lang.RuntimeException` @[L513796..L51379c] goto L5137ac;
  catch `java.lang.Exception` @[L513796..L51379c] goto L51379e;
  catch `java.lang.Throwable` @[L513796..L51379c] goto L5137ba;
  catch `java.lang.Throwable` @[L5137a0..L5137be] goto L5137ba;
}
procedure `j1.f` `e`(`j1.f` v2 @kind this, `j1.d` v3 @kind object) @signature `Lj1/f;.e:(Lj1/d;)Lj1/f;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L513420.  v0:= `@@j1.f.j` @type ^`java.util.concurrent.Executor` @kind object;
  #L513424.  v1:= 0I;
  #L513426.  call temp:= `f`(v2, v3, v0, v1) @signature `Lj1/f;.f:(Lj1/d;Ljava/util/concurrent/Executor;Lj1/c;)Lj1/f;` @kind virtual;
  #L51342c.  v3:= temp @kind object;
  #L51342e.  return v3 @kind object;
}
procedure `j1.f` `f`(`j1.f` v11 @kind this, `j1.d` v12 @kind object, `java.util.concurrent.Executor` v13 @kind object, `j1.c` v14 @kind object) @signature `Lj1/f;.f:(Lj1/d;Ljava/util/concurrent/Executor;Lj1/c;)Lj1/f;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L513440.  v6:= new `j1.g`;
  #L513444.  call `<init>`(v6) @signature `Lj1/g;.<init>:()V` @kind direct;
  #L51344a.  v7:= v11.`j1.f.a` @type ^`java.lang.Object` @kind object;
  #L51344e.  @monitorenter v7
  #L513450.  call temp:= `m`(v11) @signature `Lj1/f;.m:()Z` @kind virtual;
  #L513456.  v8:= temp;
  #L513458.  if v8 != 0 then goto L51347c;
  #L51345c.  v9:= v11.`j1.f.h` @type ^`java.util.List` @kind object;
  #L513460.  v10:= new `j1.f$a`;
  #L513464.  v0:= v10 @kind object;
  #L513466.  v1:= v11 @kind object;
  #L513468.  v2:= v6 @kind object;
  #L51346a.  v3:= v12 @kind object;
  #L51346c.  v4:= v13 @kind object;
  #L51346e.  v5:= v14 @kind object;
  #L513470.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lj1/f$a;.<init>:(Lj1/f;Lj1/g;Lj1/d;Ljava/util/concurrent/Executor;Lj1/c;)V` @kind direct;
  #L513476.  call temp:= `add`(v9, v10) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L51347c.  @monitorexit v7
  #L51347e.  if v8 == 0 then goto L513488;
  #L513482.  call `d`(v6, v12, v11, v13, v14) @signature `Lj1/f;.d:(Lj1/g;Lj1/d;Lj1/f;Ljava/util/concurrent/Executor;Lj1/c;)V` @kind static;
  #L513488.  call temp:= `a`(v6) @signature `Lj1/g;.a:()Lj1/f;` @kind virtual;
  #L51348e.  v12:= temp @kind object;
  #L513490.  return v12 @kind object;
  #L513492.  v12:= Exception @type ^`java.lang.Throwable` @kind object;
  #L513494.  @monitorexit v7
  #L513496.  throw v12;
  catch `java.lang.Throwable` @[L513450..L51347e] goto L513492;
  catch `java.lang.Throwable` @[L513494..L513496] goto L513492;
}
procedure `java.lang.Exception` `i`(`j1.f` v2 @kind this) @signature `Lj1/f;.i:()Ljava/lang/Exception;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L513558.  v0:= v2.`j1.f.a` @type ^`java.lang.Object` @kind object;
  #L51355c.  @monitorenter v0
  #L51355e.  v1:= v2.`j1.f.e` @type ^`java.lang.Exception` @kind object;
  #L513562.  if v1 == 0 then goto L513580;
  #L513566.  v1:= 1I;
  #L513568.  v2.`j1.f.f` @type ^`boolean` := v1 @kind boolean;
  #L51356c.  v1:= v2.`j1.f.g` @type ^`j1.h` @kind object;
  #L513570.  if v1 == 0 then goto L513580;
  #L513574.  call `a`(v1) @signature `Lj1/h;.a:()V` @kind virtual;
  #L51357a.  v1:= 0I;
  #L51357c.  v2.`j1.f.g` @type ^`j1.h` := v1 @kind object;
  #L513580.  v1:= v2.`j1.f.e` @type ^`java.lang.Exception` @kind object;
  #L513584.  @monitorexit v0
  #L513586.  return v1 @kind object;
  #L513588.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L51358a.  @monitorexit v0
  #L51358c.  throw v1;
  catch `java.lang.Throwable` @[L51355e..L51358c] goto L513588;
}
procedure `java.lang.Object` `j`(`j1.f` v2 @kind this) @signature `Lj1/f;.j:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5135ac.  v0:= v2.`j1.f.a` @type ^`java.lang.Object` @kind object;
  #L5135b0.  @monitorenter v0
  #L5135b2.  v1:= v2.`j1.f.d` @type ^`java.lang.Object` @kind object;
  #L5135b6.  @monitorexit v0
  #L5135b8.  return v1 @kind object;
  #L5135ba.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L5135bc.  @monitorexit v0
  #L5135be.  throw v1;
  catch `java.lang.Throwable` @[L5135b2..L5135be] goto L5135ba;
}
procedure `boolean` `l`(`j1.f` v2 @kind this) @signature `Lj1/f;.l:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5131e8.  v0:= v2.`j1.f.a` @type ^`java.lang.Object` @kind object;
  #L5131ec.  @monitorenter v0
  #L5131ee.  v1:= v2.`j1.f.c` @type ^`boolean` @kind boolean;
  #L5131f2.  @monitorexit v0
  #L5131f4.  return v1;
  #L5131f6.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L5131f8.  @monitorexit v0
  #L5131fa.  throw v1;
  catch `java.lang.Throwable` @[L5131ee..L5131fa] goto L5131f6;
}
procedure `boolean` `m`(`j1.f` v2 @kind this) @signature `Lj1/f;.m:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L513218.  v0:= v2.`j1.f.a` @type ^`java.lang.Object` @kind object;
  #L51321c.  @monitorenter v0
  #L51321e.  v1:= v2.`j1.f.b` @type ^`boolean` @kind boolean;
  #L513222.  @monitorexit v0
  #L513224.  return v1;
  #L513226.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L513228.  @monitorexit v0
  #L51322a.  throw v1;
  catch `java.lang.Throwable` @[L51321e..L51322a] goto L513226;
}
procedure `boolean` `n`(`j1.f` v2 @kind this) @signature `Lj1/f;.n:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L513248.  v0:= v2.`j1.f.a` @type ^`java.lang.Object` @kind object;
  #L51324c.  @monitorenter v0
  #L51324e.  call temp:= `i`(v2) @signature `Lj1/f;.i:()Ljava/lang/Exception;` @kind virtual;
  #L513254.  v1:= temp @kind object;
  #L513256.  if v1 == 0 then goto L51325e;
  #L51325a.  v1:= 1I;
  #L51325c.  goto L513260;
  #L51325e.  v1:= 0I;
  #L513260.  @monitorexit v0
  #L513262.  return v1;
  #L513264.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L513266.  @monitorexit v0
  #L513268.  throw v1;
  catch `java.lang.Throwable` @[L51324e..L513268] goto L513264;
}
procedure `boolean` `p`(`j1.f` v3 @kind this) @signature `Lj1/f;.p:()Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L513288.  v0:= v3.`j1.f.a` @type ^`java.lang.Object` @kind object;
  #L51328c.  @monitorenter v0
  #L51328e.  v1:= v3.`j1.f.b` @type ^`boolean` @kind boolean;
  #L513292.  if v1 == 0 then goto L51329c;
  #L513296.  v1:= 0I;
  #L513298.  @monitorexit v0
  #L51329a.  return v1;
  #L51329c.  v1:= 1I;
  #L51329e.  v3.`j1.f.b` @type ^`boolean` := v1 @kind boolean;
  #L5132a2.  v3.`j1.f.c` @type ^`boolean` := v1 @kind boolean;
  #L5132a6.  v2:= v3.`j1.f.a` @type ^`java.lang.Object` @kind object;
  #L5132aa.  call `notifyAll`(v2) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L5132b0.  call `o`(v3) @signature `Lj1/f;.o:()V` @kind direct;
  #L5132b6.  @monitorexit v0
  #L5132b8.  return v1;
  #L5132ba.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L5132bc.  @monitorexit v0
  #L5132be.  throw v1;
  catch `java.lang.Throwable` @[L51328e..L5132be] goto L5132ba;
}
procedure `boolean` `q`(`j1.f` v3 @kind this, `java.lang.Exception` v4 @kind object) @signature `Lj1/f;.q:(Ljava/lang/Exception;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L5132dc.  v0:= v3.`j1.f.a` @type ^`java.lang.Object` @kind object;
  #L5132e0.  @monitorenter v0
  #L5132e2.  v1:= v3.`j1.f.b` @type ^`boolean` @kind boolean;
  #L5132e6.  v2:= 0I;
  #L5132e8.  if v1 == 0 then goto L5132f0;
  #L5132ec.  @monitorexit v0
  #L5132ee.  return v2;
  #L5132f0.  v1:= 1I;
  #L5132f2.  v3.`j1.f.b` @type ^`boolean` := v1 @kind boolean;
  #L5132f6.  v3.`j1.f.e` @type ^`java.lang.Exception` := v4 @kind object;
  #L5132fa.  v3.`j1.f.f` @type ^`boolean` := v2 @kind boolean;
  #L5132fe.  v4:= v3.`j1.f.a` @type ^`java.lang.Object` @kind object;
  #L513302.  call `notifyAll`(v4) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L513308.  call `o`(v3) @signature `Lj1/f;.o:()V` @kind direct;
  #L51330e.  v4:= v3.`j1.f.f` @type ^`boolean` @kind boolean;
  #L513312.  if v4 != 0 then goto L513330;
  #L513316.  call temp:= `k`() @signature `Lj1/f;.k:()Lj1/f$d;` @kind static;
  #L51331c.  v4:= temp @kind object;
  #L51331e.  if v4 == 0 then goto L513330;
  #L513322.  v4:= new `j1.h`;
  #L513326.  call `<init>`(v4, v3) @signature `Lj1/h;.<init>:(Lj1/f;)V` @kind direct;
  #L51332c.  v3.`j1.f.g` @type ^`j1.h` := v4 @kind object;
  #L513330.  @monitorexit v0
  #L513332.  return v1;
  #L513334.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L513336.  @monitorexit v0
  #L513338.  throw v4;
  catch `java.lang.Throwable` @[L5132e2..L513338] goto L513334;
}
procedure `boolean` `r`(`j1.f` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lj1/f;.r:(Ljava/lang/Object;)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L513358.  v0:= v2.`j1.f.a` @type ^`java.lang.Object` @kind object;
  #L51335c.  @monitorenter v0
  #L51335e.  v1:= v2.`j1.f.b` @type ^`boolean` @kind boolean;
  #L513362.  if v1 == 0 then goto L51336c;
  #L513366.  v3:= 0I;
  #L513368.  @monitorexit v0
  #L51336a.  return v3;
  #L51336c.  v1:= 1I;
  #L51336e.  v2.`j1.f.b` @type ^`boolean` := v1 @kind boolean;
  #L513372.  v2.`j1.f.d` @type ^`java.lang.Object` := v3 @kind object;
  #L513376.  v3:= v2.`j1.f.a` @type ^`java.lang.Object` @kind object;
  #L51337a.  call `notifyAll`(v3) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L513380.  call `o`(v2) @signature `Lj1/f;.o:()V` @kind direct;
  #L513386.  @monitorexit v0
  #L513388.  return v1;
  #L51338a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L51338c.  @monitorexit v0
  #L51338e.  throw v3;
  catch `java.lang.Throwable` @[L51335e..L51338e] goto L51338a;
}
