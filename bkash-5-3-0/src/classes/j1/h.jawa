record `j1.h` @kind class @AccessFlag  {
  `j1.f` `j1.h.a` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`j1.h` v0 @kind this, `j1.f` v1 @kind object) @signature `Lj1/h;.<init>:(Lj1/f;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L5137f4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L5137fa.  v0.`j1.h.a` @type ^`j1.f` := v1 @kind object;
  #L5137fe.  return @kind void;
}
procedure `void` `a`(`j1.h` v1 @kind this) @signature `Lj1/h;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L51386c.  v0:= 0I;
  #L51386e.  v1.`j1.h.a` @type ^`j1.f` := v0 @kind object;
  #L513872.  return @kind void;
}
procedure `void` `finalize`(`j1.h` v4 @kind this) @signature `Lj1/h;.finalize:()V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L513810.  v0:= v4.`j1.h.a` @type ^`j1.f` @kind object;
  #L513814.  if v0 == 0 then goto L51383c;
  #L513818.  call temp:= `k`() @signature `Lj1/f;.k:()Lj1/f$d;` @kind static;
  #L51381e.  v1:= temp @kind object;
  #L513820.  if v1 == 0 then goto L51383c;
  #L513824.  v2:= new `j1.i`;
  #L513828.  call temp:= `i`(v0) @signature `Lj1/f;.i:()Ljava/lang/Exception;` @kind virtual;
  #L51382e.  v3:= temp @kind object;
  #L513830.  call `<init>`(v2, v3) @signature `Lj1/i;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L513836.  call `a`(v1, v0, v2) @signature `Lj1/f$d;.a:(Lj1/f;Lj1/i;)V` @kind interface;
  #L51383c.  call `finalize`(v4) @signature `Ljava/lang/Object;.finalize:()V` @kind super;
  #L513842.  return @kind void;
  #L513844.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L513846.  call `finalize`(v4) @signature `Ljava/lang/Object;.finalize:()V` @kind super;
  #L51384c.  throw v0;
  catch `java.lang.Throwable` @[L513810..L51383c] goto L513844;
}
