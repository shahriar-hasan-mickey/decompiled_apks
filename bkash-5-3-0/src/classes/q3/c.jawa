record `q3.c` @kind class @AccessFlag PUBLIC {
}
global `boolean` `@@q3.c.a` @AccessFlag PUBLIC_STATIC_FINAL;
global `q3.b` `@@q3.c.b` @AccessFlag PUBLIC_STATIC;
global `boolean` `@@q3.c.c` @AccessFlag PRIVATE_STATIC;
global `byte`[] `@@q3.c.d` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@q3.c.e` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@q3.c.f` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@q3.c.g` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@q3.c.h` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lq3/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L555924.  v0:= `@@android.os.Build$VERSION.SDK_INT` @type ^`int`;
  #L555928.  v1:= 0I;
  #L55592a.  v2:= 17I;
  #L55592e.  if v0 > v2 then goto L555936;
  #L555932.  v0:= 1I;
  #L555934.  goto L555938;
  #L555936.  v0:= 0I;
  #L555938.  `@@q3.c.a` @type ^`boolean` := v0 @kind boolean;
  #L55593c.  call temp:= `e`() @signature `Lq3/c;.e:()Z` @kind static;
  #L555942.  v0:= 0I;
  #L555944.  `@@q3.c.b` @type ^`q3.b` := v0 @kind object;
  #L555948.  `@@q3.c.c` @type ^`boolean` := v1 @kind boolean;
  #L55594c.  v0:= "RIFF" @kind object;
  #L555950.  call temp:= `a`(v0) @signature `Lq3/c;.a:(Ljava/lang/String;)[B` @kind static;
  #L555956.  v0:= temp @kind object;
  #L555958.  `@@q3.c.d` @type ^`byte`[] := v0 @kind object;
  #L55595c.  v0:= "WEBP" @kind object;
  #L555960.  call temp:= `a`(v0) @signature `Lq3/c;.a:(Ljava/lang/String;)[B` @kind static;
  #L555966.  v0:= temp @kind object;
  #L555968.  `@@q3.c.e` @type ^`byte`[] := v0 @kind object;
  #L55596c.  v0:= "VP8 " @kind object;
  #L555970.  call temp:= `a`(v0) @signature `Lq3/c;.a:(Ljava/lang/String;)[B` @kind static;
  #L555976.  v0:= temp @kind object;
  #L555978.  `@@q3.c.f` @type ^`byte`[] := v0 @kind object;
  #L55597c.  v0:= "VP8L" @kind object;
  #L555980.  call temp:= `a`(v0) @signature `Lq3/c;.a:(Ljava/lang/String;)[B` @kind static;
  #L555986.  v0:= temp @kind object;
  #L555988.  `@@q3.c.g` @type ^`byte`[] := v0 @kind object;
  #L55598c.  v0:= "VP8X" @kind object;
  #L555990.  call temp:= `a`(v0) @signature `Lq3/c;.a:(Ljava/lang/String;)[B` @kind static;
  #L555996.  v0:= temp @kind object;
  #L555998.  `@@q3.c.h` @type ^`byte`[] := v0 @kind object;
  #L55599c.  return @kind void;
}
procedure `byte`[] `a`(`java.lang.String` v2 @kind object) @signature `Lq3/c;.a:(Ljava/lang/String;)[B` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L555894.  v0:= "ASCII" @kind object;
  #L555898.  call temp:= `getBytes`(v2, v0) @signature `Ljava/lang/String;.getBytes:(Ljava/lang/String;)[B` @kind virtual;
  #L55589e.  v2:= temp @kind object;
  #L5558a0.  return v2 @kind object;
  #L5558a2.  v2:= Exception @type ^`java.io.UnsupportedEncodingException` @kind object;
  #L5558a4.  v0:= new `java.lang.RuntimeException`;
  #L5558a8.  v1:= "ASCII not found!" @kind object;
  #L5558ac.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L5558b2.  throw v0;
  catch `java.io.UnsupportedEncodingException` @[L555894..L5558a0] goto L5558a2;
}
procedure `boolean` `b`(`byte`[] v3 @kind object, `int` v4 ) @signature `Lq3/c;.b:([BI)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L555694.  v0:= v4 + 12;
  #L555698.  v1:= `@@q3.c.h` @type ^`byte`[] @kind object;
  #L55569c.  call temp:= `j`(v3, v0, v1) @signature `Lq3/c;.j:([BI[B)Z` @kind static;
  #L5556a2.  v0:= temp;
  #L5556a4.  v4:= v4 + 20;
  #L5556a8.  v3:= v3[v4] @kind byte;
  #L5556ac.  v4:= 2I;
  #L5556ae.  v3:= v3 ^& v4 @kind int;
  #L5556b0.  v1:= 1I;
  #L5556b2.  v2:= 0I;
  #L5556b4.  if v3 != v4 then goto L5556bc;
  #L5556b8.  v3:= 1I;
  #L5556ba.  goto L5556be;
  #L5556bc.  v3:= 0I;
  #L5556be.  if v0 == 0 then goto L5556c8;
  #L5556c2.  if v3 == 0 then goto L5556c8;
  #L5556c6.  goto L5556ca;
  #L5556c8.  v1:= 0I;
  #L5556ca.  return v1;
}
procedure `boolean` `c`(`byte`[] v1 @kind object, `int` v2 , `int` v3 ) @signature `Lq3/c;.c:([BII)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L5556dc.  v0:= 21I;
  #L5556e0.  if v3 < v0 then goto L5556fc;
  #L5556e4.  v2:= v2 + 12;
  #L5556e8.  v3:= `@@q3.c.h` @type ^`byte`[] @kind object;
  #L5556ec.  call temp:= `j`(v1, v2, v3) @signature `Lq3/c;.j:([BI[B)Z` @kind static;
  #L5556f2.  v1:= temp;
  #L5556f4.  if v1 == 0 then goto L5556fc;
  #L5556f8.  v1:= 1I;
  #L5556fa.  goto L5556fe;
  #L5556fc.  v1:= 0I;
  #L5556fe.  return v1;
}
procedure `boolean` `d`(`byte`[] v3 @kind object, `int` v4 ) @signature `Lq3/c;.d:([BI)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L555710.  v0:= v4 + 12;
  #L555714.  v1:= `@@q3.c.h` @type ^`byte`[] @kind object;
  #L555718.  call temp:= `j`(v3, v0, v1) @signature `Lq3/c;.j:([BI[B)Z` @kind static;
  #L55571e.  v0:= temp;
  #L555720.  v4:= v4 + 20;
  #L555724.  v3:= v3[v4] @kind byte;
  #L555728.  v4:= 16I;
  #L55572c.  v3:= v3 ^& v4 @kind int;
  #L55572e.  v1:= 1I;
  #L555730.  v2:= 0I;
  #L555732.  if v3 != v4 then goto L55573a;
  #L555736.  v3:= 1I;
  #L555738.  goto L55573c;
  #L55573a.  v3:= 0I;
  #L55573c.  if v0 == 0 then goto L555746;
  #L555740.  if v3 == 0 then goto L555746;
  #L555744.  goto L555748;
  #L555746.  v1:= 0I;
  #L555748.  return v1;
}
procedure `boolean` `e`() @signature `Lq3/c;.e:()Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L55575c.  v0:= `@@android.os.Build$VERSION.SDK_INT` @type ^`int`;
  #L555760.  v1:= 17I;
  #L555764.  v2:= 0I;
  #L555766.  if v0 >= v1 then goto L55576c;
  #L55576a.  return v2;
  #L55576c.  v3:= 1I;
  #L55576e.  if v0 != v1 then goto L5557a6;
  #L555772.  v0:= "UklGRkoAAABXRUJQVlA4WAoAAAAQAAAAAAAAAAAAQUxQSAwAAAARBxAR/Q9ERP8DAABWUDggGAAAABQBAJ0BKgEAAQAAAP4AAA3AAP7mtQAAAA==" @kind object;
  #L555776.  call temp:= `decode`(v0, v2) @signature `Landroid/util/Base64;.decode:(Ljava/lang/String;I)[B` @kind static;
  #L55577c.  v0:= temp @kind object;
  #L55577e.  v1:= new `android.graphics.BitmapFactory$Options`;
  #L555782.  call `<init>`(v1) @signature `Landroid/graphics/BitmapFactory$Options;.<init>:()V` @kind direct;
  #L555788.  v1.`android.graphics.BitmapFactory$Options.inJustDecodeBounds` @type ^`boolean` := v3 @kind boolean;
  #L55578c.  v4:= length @variable v0;
  #L55578e.  call temp:= `decodeByteArray`(v0, v2, v4, v1) @signature `Landroid/graphics/BitmapFactory;.decodeByteArray:([BIILandroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;` @kind static;
  #L555794.  v0:= v1.`android.graphics.BitmapFactory$Options.outHeight` @type ^`int`;
  #L555798.  if v0 != v3 then goto L5557a4;
  #L55579c.  v0:= v1.`android.graphics.BitmapFactory$Options.outWidth` @type ^`int`;
  #L5557a0.  if v0 == v3 then goto L5557a6;
  #L5557a4.  return v2;
  #L5557a6.  return v3;
}
procedure `boolean` `f`(`byte`[] v1 @kind object, `int` v2 ) @signature `Lq3/c;.f:([BI)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L5557b8.  v2:= v2 + 12;
  #L5557bc.  v0:= `@@q3.c.g` @type ^`byte`[] @kind object;
  #L5557c0.  call temp:= `j`(v1, v2, v0) @signature `Lq3/c;.j:([BI[B)Z` @kind static;
  #L5557c6.  v1:= temp;
  #L5557c8.  return v1;
}
procedure `boolean` `g`(`byte`[] v1 @kind object, `int` v2 ) @signature `Lq3/c;.g:([BI)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L5557dc.  v2:= v2 + 12;
  #L5557e0.  v0:= `@@q3.c.f` @type ^`byte`[] @kind object;
  #L5557e4.  call temp:= `j`(v1, v2, v0) @signature `Lq3/c;.j:([BI[B)Z` @kind static;
  #L5557ea.  v1:= temp;
  #L5557ec.  return v1;
}
procedure `boolean` `h`(`byte`[] v1 @kind object, `int` v2 , `int` v3 ) @signature `Lq3/c;.h:([BII)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L555800.  v0:= 20I;
  #L555804.  if v3 < v0 then goto L555830;
  #L555808.  v3:= `@@q3.c.d` @type ^`byte`[] @kind object;
  #L55580c.  call temp:= `j`(v1, v2, v3) @signature `Lq3/c;.j:([BI[B)Z` @kind static;
  #L555812.  v3:= temp;
  #L555814.  if v3 == 0 then goto L555830;
  #L555818.  v2:= v2 + 8;
  #L55581c.  v3:= `@@q3.c.e` @type ^`byte`[] @kind object;
  #L555820.  call temp:= `j`(v1, v2, v3) @signature `Lq3/c;.j:([BI[B)Z` @kind static;
  #L555826.  v1:= temp;
  #L555828.  if v1 == 0 then goto L555830;
  #L55582c.  v1:= 1I;
  #L55582e.  goto L555832;
  #L555830.  v1:= 0I;
  #L555832.  return v1;
}
procedure `q3.b` `i`() @signature `Lq3/c;.i:()Lq3/b;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L5558d4.  v0:= `@@q3.c.c` @type ^`boolean` @kind boolean;
  #L5558d8.  if v0 == 0 then goto L5558e2;
  #L5558dc.  v0:= `@@q3.c.b` @type ^`q3.b` @kind object;
  #L5558e0.  return v0 @kind object;
  #L5558e2.  v0:= 0I;
  #L5558e4.  v1:= "com.facebook.webpsupport.WebpBitmapFactoryImpl" @kind object;
  #L5558e8.  call temp:= `forName`(v1) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L5558ee.  v1:= temp @kind object;
  #L5558f0.  call temp:= `newInstance`(v1) @signature `Ljava/lang/Class;.newInstance:()Ljava/lang/Object;` @kind virtual;
  #L5558f6.  v1:= temp @kind object;
  #L5558f8.  v1:= (`q3.b`) v1 @kind object;
  #L5558fc.  v0:= v1 @kind object;
  #L5558fe.  v1:= 1I;
  #L555900.  `@@q3.c.c` @type ^`boolean` := v1 @kind boolean;
  #L555904.  return v0 @kind object;
  catch `java.lang.Throwable` @[L5558e4..L5558fc] goto L5558fe;
}
procedure `boolean` `j`(`byte`[] v4 @kind object, `int` v5 , `byte`[] v6 @kind object) @signature `Lq3/c;.j:([BI[B)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L555844.  v0:= 0I;
  #L555846.  if v6 == 0 then goto L555880;
  #L55584a.  if v4 != 0 then goto L555850;
  #L55584e.  goto L555880;
  #L555850.  v1:= length @variable v6;
  #L555852.  v1:= v1 + v5 @kind int;
  #L555854.  v2:= length @variable v4;
  #L555856.  if v1 <= v2 then goto L55585c;
  #L55585a.  return v0;
  #L55585c.  v1:= 0I;
  #L55585e.  v2:= length @variable v6;
  #L555860.  if v1 >= v2 then goto L55587c;
  #L555864.  v2:= v1 + v5 @kind int;
  #L555868.  v2:= v4[v2] @kind byte;
  #L55586c.  v3:= v6[v1] @kind byte;
  #L555870.  if v2 == v3 then goto L555876;
  #L555874.  return v0;
  #L555876.  v1:= v1 + 1;
  #L55587a.  goto L55585e;
  #L55587c.  v4:= 1I;
  #L55587e.  return v4;
  #L555880.  return v0;
}
