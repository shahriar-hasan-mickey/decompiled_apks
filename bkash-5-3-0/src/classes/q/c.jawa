record `q.c` @kind class @AccessFlag PUBLIC {
  `q.e` `q.c.a` @AccessFlag PROTECTED;
  `q.e` `q.c.b` @AccessFlag PROTECTED;
  `q.e` `q.c.c` @AccessFlag PROTECTED;
  `q.e` `q.c.d` @AccessFlag PROTECTED;
  `q.e` `q.c.e` @AccessFlag PROTECTED;
  `q.e` `q.c.f` @AccessFlag PROTECTED;
  `q.e` `q.c.g` @AccessFlag PROTECTED;
  `java.util.ArrayList` `q.c.h` @AccessFlag PROTECTED;
  `int` `q.c.i` @AccessFlag PROTECTED;
  `int` `q.c.j` @AccessFlag PROTECTED;
  `float` `q.c.k` @AccessFlag PROTECTED;
  `int` `q.c.l` @AccessFlag ;
  `int` `q.c.m` @AccessFlag ;
  `int` `q.c.n` @AccessFlag ;
  `int` `q.c.o` @AccessFlag PRIVATE;
  `boolean` `q.c.p` @AccessFlag PRIVATE;
  `boolean` `q.c.q` @AccessFlag PROTECTED;
  `boolean` `q.c.r` @AccessFlag PROTECTED;
  `boolean` `q.c.s` @AccessFlag PROTECTED;
  `boolean` `q.c.t` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`q.c` v1 @kind this, `q.e` v2 @kind object, `int` v3 , `boolean` v4 ) @signature `Lq/c;.<init>:(Lq/e;IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L54b200.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L54b206.  v0:= 0I;
  #L54b208.  v1.`q.c.k` @type ^`float` := v0;
  #L54b20c.  v0:= 0I;
  #L54b20e.  v1.`q.c.p` @type ^`boolean` := v0 @kind boolean;
  #L54b212.  v1.`q.c.a` @type ^`q.e` := v2 @kind object;
  #L54b216.  v1.`q.c.o` @type ^`int` := v3;
  #L54b21a.  v1.`q.c.p` @type ^`boolean` := v4 @kind boolean;
  #L54b21e.  return @kind void;
}
procedure `void` `b`(`q.c` v13 @kind this) @signature `Lq/c;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L54b258.  v0:= v13.`q.c.o` @type ^`int`;
  #L54b25c.  v1:= 2I;
  #L54b25e.  v0:= v0 * 2;
  #L54b262.  v2:= v13.`q.c.a` @type ^`q.e` @kind object;
  #L54b266.  v3:= 0I;
  #L54b268.  v4:= v2 @kind object;
  #L54b26a.  v5:= 0I;
  #L54b26c.  v6:= 1I;
  #L54b26e.  if v5 != 0 then goto L54b498;
  #L54b272.  v7:= v13.`q.c.i` @type ^`int`;
  #L54b276.  v7:= v7 + v6 @kind int;
  #L54b278.  v13.`q.c.i` @type ^`int` := v7;
  #L54b27c.  v7:= v2.`q.e.J0` @type ^`q.e`[] @kind object;
  #L54b280.  v8:= v13.`q.c.o` @type ^`int`;
  #L54b284.  v9:= 0I;
  #L54b286.  v7[v8]:= v9 @kind object;
  #L54b28a.  v7:= v2.`q.e.I0` @type ^`q.e`[] @kind object;
  #L54b28e.  v7[v8]:= v9 @kind object;
  #L54b292.  call temp:= `U`(v2) @signature `Lq/e;.U:()I` @kind virtual;
  #L54b298.  v7:= temp;
  #L54b29a.  v8:= 8I;
  #L54b29e.  if v7 == v8 then goto L54b43a;
  #L54b2a2.  v7:= v13.`q.c.l` @type ^`int`;
  #L54b2a6.  v7:= v7 + v6 @kind int;
  #L54b2a8.  v13.`q.c.l` @type ^`int` := v7;
  #L54b2ac.  v7:= v13.`q.c.o` @type ^`int`;
  #L54b2b0.  call temp:= `w`(v2, v7) @signature `Lq/e;.w:(I)Lq/e$b;` @kind virtual;
  #L54b2b6.  v7:= temp @kind object;
  #L54b2b8.  v8:= `@@q.e$b.MATCH_CONSTRAINT` @type ^`q.e$b` @kind object;
  #L54b2bc.  if v7 == v8 then goto L54b2d6;
  #L54b2c0.  v7:= v13.`q.c.m` @type ^`int`;
  #L54b2c4.  v10:= v13.`q.c.o` @type ^`int`;
  #L54b2c8.  call temp:= `G`(v2, v10) @signature `Lq/e;.G:(I)I` @kind virtual;
  #L54b2ce.  v10:= temp;
  #L54b2d0.  v7:= v7 + v10 @kind int;
  #L54b2d2.  v13.`q.c.m` @type ^`int` := v7;
  #L54b2d6.  v7:= v13.`q.c.m` @type ^`int`;
  #L54b2da.  v10:= v2.`q.e.U` @type ^`q.d`[] @kind object;
  #L54b2de.  v10:= v10[v0] @kind object;
  #L54b2e2.  call temp:= `f`(v10) @signature `Lq/d;.f:()I` @kind virtual;
  #L54b2e8.  v10:= temp;
  #L54b2ea.  v7:= v7 + v10 @kind int;
  #L54b2ec.  v13.`q.c.m` @type ^`int` := v7;
  #L54b2f0.  v10:= v2.`q.e.U` @type ^`q.d`[] @kind object;
  #L54b2f4.  v11:= v0 + 1;
  #L54b2f8.  v10:= v10[v11] @kind object;
  #L54b2fc.  call temp:= `f`(v10) @signature `Lq/d;.f:()I` @kind virtual;
  #L54b302.  v10:= temp;
  #L54b304.  v7:= v7 + v10 @kind int;
  #L54b306.  v13.`q.c.m` @type ^`int` := v7;
  #L54b30a.  v7:= v13.`q.c.n` @type ^`int`;
  #L54b30e.  v10:= v2.`q.e.U` @type ^`q.d`[] @kind object;
  #L54b312.  v10:= v10[v0] @kind object;
  #L54b316.  call temp:= `f`(v10) @signature `Lq/d;.f:()I` @kind virtual;
  #L54b31c.  v10:= temp;
  #L54b31e.  v7:= v7 + v10 @kind int;
  #L54b320.  v13.`q.c.n` @type ^`int` := v7;
  #L54b324.  v10:= v2.`q.e.U` @type ^`q.d`[] @kind object;
  #L54b328.  v10:= v10[v11] @kind object;
  #L54b32c.  call temp:= `f`(v10) @signature `Lq/d;.f:()I` @kind virtual;
  #L54b332.  v10:= temp;
  #L54b334.  v7:= v7 + v10 @kind int;
  #L54b336.  v13.`q.c.n` @type ^`int` := v7;
  #L54b33a.  v7:= v13.`q.c.b` @type ^`q.e` @kind object;
  #L54b33e.  if v7 != 0 then goto L54b346;
  #L54b342.  v13.`q.c.b` @type ^`q.e` := v2 @kind object;
  #L54b346.  v13.`q.c.d` @type ^`q.e` := v2 @kind object;
  #L54b34a.  v7:= v2.`q.e.X` @type ^`q.e$b`[] @kind object;
  #L54b34e.  v10:= v13.`q.c.o` @type ^`int`;
  #L54b352.  v7:= v7[v10] @kind object;
  #L54b356.  if v7 != v8 then goto L54b43a;
  #L54b35a.  v7:= v2.`q.e.u` @type ^`int`[] @kind object;
  #L54b35e.  v8:= v7[v10];
  #L54b362.  if v8 == 0 then goto L54b378;
  #L54b366.  v8:= v7[v10];
  #L54b36a.  v11:= 3I;
  #L54b36c.  if v8 == v11 then goto L54b378;
  #L54b370.  v7:= v7[v10];
  #L54b374.  if v7 != v1 then goto L54b404;
  #L54b378.  v7:= v13.`q.c.j` @type ^`int`;
  #L54b37c.  v7:= v7 + v6 @kind int;
  #L54b37e.  v13.`q.c.j` @type ^`int` := v7;
  #L54b382.  v7:= v2.`q.e.H0` @type ^`float`[] @kind object;
  #L54b386.  v8:= v7[v10];
  #L54b38a.  v11:= 0I;
  #L54b38c.  v12:= fcmpl(v8, v11);
  #L54b390.  if v12 <= 0 then goto L54b3a2;
  #L54b394.  v12:= v13.`q.c.k` @type ^`float`;
  #L54b398.  v7:= v7[v10];
  #L54b39c.  v12:= v12 + v7 @kind float;
  #L54b39e.  v13.`q.c.k` @type ^`float` := v12;
  #L54b3a2.  call temp:= `c`(v2, v10) @signature `Lq/c;.c:(Lq/e;I)Z` @kind static;
  #L54b3a8.  v7:= temp;
  #L54b3aa.  if v7 == 0 then goto L54b3e0;
  #L54b3ae.  v7:= fcmpg(v8, v11);
  #L54b3b2.  if v7 >= 0 then goto L54b3bc;
  #L54b3b6.  v13.`q.c.q` @type ^`boolean` := v6 @kind boolean;
  #L54b3ba.  goto L54b3c0;
  #L54b3bc.  v13.`q.c.r` @type ^`boolean` := v6 @kind boolean;
  #L54b3c0.  v7:= v13.`q.c.h` @type ^`java.util.ArrayList` @kind object;
  #L54b3c4.  if v7 != 0 then goto L54b3d6;
  #L54b3c8.  v7:= new `java.util.ArrayList`;
  #L54b3cc.  call `<init>`(v7) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L54b3d2.  v13.`q.c.h` @type ^`java.util.ArrayList` := v7 @kind object;
  #L54b3d6.  v7:= v13.`q.c.h` @type ^`java.util.ArrayList` @kind object;
  #L54b3da.  call temp:= `add`(v7, v2) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L54b3e0.  v7:= v13.`q.c.f` @type ^`q.e` @kind object;
  #L54b3e4.  if v7 != 0 then goto L54b3ec;
  #L54b3e8.  v13.`q.c.f` @type ^`q.e` := v2 @kind object;
  #L54b3ec.  v7:= v13.`q.c.g` @type ^`q.e` @kind object;
  #L54b3f0.  if v7 == 0 then goto L54b400;
  #L54b3f4.  v7:= v7.`q.e.I0` @type ^`q.e`[] @kind object;
  #L54b3f8.  v8:= v13.`q.c.o` @type ^`int`;
  #L54b3fc.  v7[v8]:= v2 @kind object;
  #L54b400.  v13.`q.c.g` @type ^`q.e` := v2 @kind object;
  #L54b404.  v7:= v13.`q.c.o` @type ^`int`;
  #L54b408.  if v7 != 0 then goto L54b424;
  #L54b40c.  v7:= v2.`q.e.s` @type ^`int`;
  #L54b410.  if v7 == 0 then goto L54b416;
  #L54b414.  goto L54b43a;
  #L54b416.  v7:= v2.`q.e.v` @type ^`int`;
  #L54b41a.  if v7 != 0 then goto L54b43a;
  #L54b41e.  v7:= v2.`q.e.w` @type ^`int`;
  #L54b422.  goto L54b43a;
  #L54b424.  v7:= v2.`q.e.t` @type ^`int`;
  #L54b428.  if v7 == 0 then goto L54b42e;
  #L54b42c.  goto L54b43a;
  #L54b42e.  v7:= v2.`q.e.y` @type ^`int`;
  #L54b432.  if v7 != 0 then goto L54b43a;
  #L54b436.  v7:= v2.`q.e.z` @type ^`int`;
  #L54b43a.  if v4 == v2 then goto L54b44a;
  #L54b43e.  v4:= v4.`q.e.J0` @type ^`q.e`[] @kind object;
  #L54b442.  v7:= v13.`q.c.o` @type ^`int`;
  #L54b446.  v4[v7]:= v2 @kind object;
  #L54b44a.  v4:= v2.`q.e.U` @type ^`q.d`[] @kind object;
  #L54b44e.  v7:= v0 + 1;
  #L54b452.  v4:= v4[v7] @kind object;
  #L54b456.  v4:= v4.`q.d.f` @type ^`q.d` @kind object;
  #L54b45a.  if v4 == 0 then goto L54b486;
  #L54b45e.  v4:= v4.`q.d.d` @type ^`q.e` @kind object;
  #L54b462.  v7:= v4.`q.e.U` @type ^`q.d`[] @kind object;
  #L54b466.  v8:= v7[v0] @kind object;
  #L54b46a.  v8:= v8.`q.d.f` @type ^`q.d` @kind object;
  #L54b46e.  if v8 == 0 then goto L54b486;
  #L54b472.  v7:= v7[v0] @kind object;
  #L54b476.  v7:= v7.`q.d.f` @type ^`q.d` @kind object;
  #L54b47a.  v7:= v7.`q.d.d` @type ^`q.e` @kind object;
  #L54b47e.  if v7 == v2 then goto L54b484;
  #L54b482.  goto L54b486;
  #L54b484.  v9:= v4 @kind object;
  #L54b486.  if v9 == 0 then goto L54b48c;
  #L54b48a.  goto L54b490;
  #L54b48c.  v9:= v2 @kind object;
  #L54b48e.  v5:= 1I;
  #L54b490.  v4:= v2 @kind object;
  #L54b492.  v2:= v9 @kind object;
  #L54b494.  goto L54b26c;
  #L54b498.  v1:= v13.`q.c.b` @type ^`q.e` @kind object;
  #L54b49c.  if v1 == 0 then goto L54b4ba;
  #L54b4a0.  v4:= v13.`q.c.m` @type ^`int`;
  #L54b4a4.  v1:= v1.`q.e.U` @type ^`q.d`[] @kind object;
  #L54b4a8.  v1:= v1[v0] @kind object;
  #L54b4ac.  call temp:= `f`(v1) @signature `Lq/d;.f:()I` @kind virtual;
  #L54b4b2.  v1:= temp;
  #L54b4b4.  v4:= v4 - v1 @kind int;
  #L54b4b6.  v13.`q.c.m` @type ^`int` := v4;
  #L54b4ba.  v1:= v13.`q.c.d` @type ^`q.e` @kind object;
  #L54b4be.  if v1 == 0 then goto L54b4de;
  #L54b4c2.  v4:= v13.`q.c.m` @type ^`int`;
  #L54b4c6.  v1:= v1.`q.e.U` @type ^`q.d`[] @kind object;
  #L54b4ca.  v0:= v0 + v6 @kind int;
  #L54b4cc.  v0:= v1[v0] @kind object;
  #L54b4d0.  call temp:= `f`(v0) @signature `Lq/d;.f:()I` @kind virtual;
  #L54b4d6.  v0:= temp;
  #L54b4d8.  v4:= v4 - v0 @kind int;
  #L54b4da.  v13.`q.c.m` @type ^`int` := v4;
  #L54b4de.  v13.`q.c.c` @type ^`q.e` := v2 @kind object;
  #L54b4e2.  v0:= v13.`q.c.o` @type ^`int`;
  #L54b4e6.  if v0 != 0 then goto L54b4f8;
  #L54b4ea.  v0:= v13.`q.c.p` @type ^`boolean` @kind boolean;
  #L54b4ee.  if v0 == 0 then goto L54b4f8;
  #L54b4f2.  v13.`q.c.e` @type ^`q.e` := v2 @kind object;
  #L54b4f6.  goto L54b500;
  #L54b4f8.  v0:= v13.`q.c.a` @type ^`q.e` @kind object;
  #L54b4fc.  v13.`q.c.e` @type ^`q.e` := v0 @kind object;
  #L54b500.  v0:= v13.`q.c.r` @type ^`boolean` @kind boolean;
  #L54b504.  if v0 == 0 then goto L54b512;
  #L54b508.  v0:= v13.`q.c.q` @type ^`boolean` @kind boolean;
  #L54b50c.  if v0 == 0 then goto L54b512;
  #L54b510.  v3:= 1I;
  #L54b512.  v13.`q.c.s` @type ^`boolean` := v3 @kind boolean;
  #L54b516.  return @kind void;
}
procedure `boolean` `c`(`q.e` v2 @kind object, `int` v3 ) @signature `Lq/c;.c:(Lq/e;I)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L54b1b0.  call temp:= `U`(v2) @signature `Lq/e;.U:()I` @kind virtual;
  #L54b1b6.  v0:= temp;
  #L54b1b8.  v1:= 8I;
  #L54b1bc.  if v0 == v1 then goto L54b1ea;
  #L54b1c0.  v0:= v2.`q.e.X` @type ^`q.e$b`[] @kind object;
  #L54b1c4.  v0:= v0[v3] @kind object;
  #L54b1c8.  v1:= `@@q.e$b.MATCH_CONSTRAINT` @type ^`q.e$b` @kind object;
  #L54b1cc.  if v0 != v1 then goto L54b1ea;
  #L54b1d0.  v2:= v2.`q.e.u` @type ^`int`[] @kind object;
  #L54b1d4.  v0:= v2[v3];
  #L54b1d8.  if v0 == 0 then goto L54b1e6;
  #L54b1dc.  v2:= v2[v3];
  #L54b1e0.  v3:= 3I;
  #L54b1e2.  if v2 != v3 then goto L54b1ea;
  #L54b1e6.  v2:= 1I;
  #L54b1e8.  goto L54b1ec;
  #L54b1ea.  v2:= 0I;
  #L54b1ec.  return v2;
}
procedure `void` `a`(`q.c` v1 @kind this) @signature `Lq/c;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L54b230.  v0:= v1.`q.c.t` @type ^`boolean` @kind boolean;
  #L54b234.  if v0 != 0 then goto L54b23e;
  #L54b238.  call `b`(v1) @signature `Lq/c;.b:()V` @kind direct;
  #L54b23e.  v0:= 1I;
  #L54b240.  v1.`q.c.t` @type ^`boolean` := v0 @kind boolean;
  #L54b244.  return @kind void;
}
