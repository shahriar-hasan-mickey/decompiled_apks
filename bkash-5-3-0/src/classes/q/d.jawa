record `q.d` @kind class @AccessFlag PUBLIC {
  `java.util.HashSet` `q.d.a` @AccessFlag PRIVATE;
  `int` `q.d.b` @AccessFlag PRIVATE;
  `boolean` `q.d.c` @AccessFlag PRIVATE;
  `q.e` `q.d.d` @AccessFlag PUBLIC_FINAL;
  `q.d$b` `q.d.e` @AccessFlag PUBLIC_FINAL;
  `q.d` `q.d.f` @AccessFlag PUBLIC;
  `int` `q.d.g` @AccessFlag PUBLIC;
  `int` `q.d.h` @AccessFlag ;
  `n.i` `q.d.i` @AccessFlag ;
}
procedure `void` `<init>`(`q.d` v1 @kind this, `q.e` v2 @kind object, `q.d$b` v3 @kind object) @signature `Lq/d;.<init>:(Lq/e;Lq/d$b;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L54c77c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L54c782.  v0:= 0I;
  #L54c784.  v1.`q.d.a` @type ^`java.util.HashSet` := v0 @kind object;
  #L54c788.  v0:= 0I;
  #L54c78a.  v1.`q.d.g` @type ^`int` := v0;
  #L54c78e.  v0:= -2147483648I;
  #L54c792.  v1.`q.d.h` @type ^`int` := v0;
  #L54c796.  v1.`q.d.d` @type ^`q.e` := v2 @kind object;
  #L54c79a.  v1.`q.d.e` @type ^`q.d$b` := v3 @kind object;
  #L54c79e.  return @kind void;
}
procedure `boolean` `a`(`q.d` v2 @kind this, `q.d` v3 @kind object, `int` v4 ) @signature `Lq/d;.a:(Lq/d;I)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L54c2f4.  v0:= -2147483648I;
  #L54c2f8.  v1:= 0I;
  #L54c2fa.  call temp:= `b`(v2, v3, v4, v0, v1) @signature `Lq/d;.b:(Lq/d;IIZ)Z` @kind virtual;
  #L54c300.  v3:= temp;
  #L54c302.  return v3;
}
procedure `boolean` `b`(`q.d` v1 @kind this, `q.d` v2 @kind object, `int` v3 , `int` v4 , `boolean` v5 ) @signature `Lq/d;.b:(Lq/d;IIZ)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L54c314.  v0:= 1I;
  #L54c316.  if v2 != 0 then goto L54c322;
  #L54c31a.  call `q`(v1) @signature `Lq/d;.q:()V` @kind virtual;
  #L54c320.  return v0;
  #L54c322.  if v5 != 0 then goto L54c336;
  #L54c326.  call temp:= `p`(v1, v2) @signature `Lq/d;.p:(Lq/d;)Z` @kind virtual;
  #L54c32c.  v5:= temp;
  #L54c32e.  if v5 != 0 then goto L54c336;
  #L54c332.  v2:= 0I;
  #L54c334.  return v2;
  #L54c336.  v1.`q.d.f` @type ^`q.d` := v2 @kind object;
  #L54c33a.  v5:= v2.`q.d.a` @type ^`java.util.HashSet` @kind object;
  #L54c33e.  if v5 != 0 then goto L54c350;
  #L54c342.  v5:= new `java.util.HashSet`;
  #L54c346.  call `<init>`(v5) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L54c34c.  v2.`q.d.a` @type ^`java.util.HashSet` := v5 @kind object;
  #L54c350.  v2:= v1.`q.d.f` @type ^`q.d` @kind object;
  #L54c354.  v2:= v2.`q.d.a` @type ^`java.util.HashSet` @kind object;
  #L54c358.  if v2 == 0 then goto L54c362;
  #L54c35c.  call temp:= `add`(v2, v1) @signature `Ljava/util/HashSet;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L54c362.  v1.`q.d.g` @type ^`int` := v3;
  #L54c366.  v1.`q.d.h` @type ^`int` := v4;
  #L54c36a.  return v0;
}
procedure `void` `c`(`q.d` v2 @kind this, `int` v3 , `java.util.ArrayList` v4 @kind object, `r.o` v5 @kind object) @signature `Lq/d;.c:(ILjava/util/ArrayList;Lr/o;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L54c7b0.  v0:= v2.`q.d.a` @type ^`java.util.HashSet` @kind object;
  #L54c7b4.  if v0 == 0 then goto L54c7e4;
  #L54c7b8.  call temp:= `iterator`(v0) @signature `Ljava/util/HashSet;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L54c7be.  v0:= temp @kind object;
  #L54c7c0.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L54c7c6.  v1:= temp;
  #L54c7c8.  if v1 == 0 then goto L54c7e4;
  #L54c7cc.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L54c7d2.  v1:= temp @kind object;
  #L54c7d4.  v1:= (`q.d`) v1 @kind object;
  #L54c7d8.  v1:= v1.`q.d.d` @type ^`q.e` @kind object;
  #L54c7dc.  call temp:= `a`(v1, v3, v4, v5) @signature `Lr/i;.a:(Lq/e;ILjava/util/ArrayList;Lr/o;)Lr/o;` @kind static;
  #L54c7e2.  goto L54c7c0;
  #L54c7e4.  return @kind void;
}
procedure `java.util.HashSet` `d`(`q.d` v1 @kind this) @signature `Lq/d;.d:()Ljava/util/HashSet;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L54c668.  v0:= v1.`q.d.a` @type ^`java.util.HashSet` @kind object;
  #L54c66c.  return v0 @kind object;
}
procedure `int` `e`(`q.d` v1 @kind this) @signature `Lq/d;.e:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L54c598.  v0:= v1.`q.d.c` @type ^`boolean` @kind boolean;
  #L54c59c.  if v0 != 0 then goto L54c5a4;
  #L54c5a0.  v0:= 0I;
  #L54c5a2.  return v0;
  #L54c5a4.  v0:= v1.`q.d.b` @type ^`int`;
  #L54c5a8.  return v0;
}
procedure `int` `f`(`q.d` v3 @kind this) @signature `Lq/d;.f:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L54c5bc.  v0:= v3.`q.d.d` @type ^`q.e` @kind object;
  #L54c5c0.  call temp:= `U`(v0) @signature `Lq/e;.U:()I` @kind virtual;
  #L54c5c6.  v0:= temp;
  #L54c5c8.  v1:= 8I;
  #L54c5cc.  if v0 != v1 then goto L54c5d4;
  #L54c5d0.  v0:= 0I;
  #L54c5d2.  return v0;
  #L54c5d4.  v0:= v3.`q.d.h` @type ^`int`;
  #L54c5d8.  v2:= -2147483648I;
  #L54c5dc.  if v0 == v2 then goto L54c5fe;
  #L54c5e0.  v0:= v3.`q.d.f` @type ^`q.d` @kind object;
  #L54c5e4.  if v0 == 0 then goto L54c5fe;
  #L54c5e8.  v0:= v0.`q.d.d` @type ^`q.e` @kind object;
  #L54c5ec.  call temp:= `U`(v0) @signature `Lq/e;.U:()I` @kind virtual;
  #L54c5f2.  v0:= temp;
  #L54c5f4.  if v0 != v1 then goto L54c5fe;
  #L54c5f8.  v0:= v3.`q.d.h` @type ^`int`;
  #L54c5fc.  return v0;
  #L54c5fe.  v0:= v3.`q.d.g` @type ^`int`;
  #L54c602.  return v0;
}
procedure `q.d` `g`(`q.d` v2 @kind this) @signature `Lq/d;.g:()Lq/d;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L54c698.  v0:= `@@q.d$a.a` @type ^`int`[] @kind object;
  #L54c69c.  v1:= v2.`q.d.e` @type ^`q.d$b` @kind object;
  #L54c6a0.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L54c6a6.  v1:= temp;
  #L54c6a8.  v0:= v0[v1];
  #L54c6ac.  goto L54c6f8;
  #L54c6b2.  v0:= new `java.lang.AssertionError`;
  #L54c6b6.  v1:= v2.`q.d.e` @type ^`q.d$b` @kind object;
  #L54c6ba.  call temp:= `name`(v1) @signature `Ljava/lang/Enum;.name:()Ljava/lang/String;` @kind virtual;
  #L54c6c0.  v1:= temp @kind object;
  #L54c6c2.  call `<init>`(v0, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L54c6c8.  throw v0;
  #L54c6ca.  v0:= v2.`q.d.d` @type ^`q.e` @kind object;
  #L54c6ce.  v0:= v0.`q.e.N` @type ^`q.d` @kind object;
  #L54c6d2.  return v0 @kind object;
  #L54c6d4.  v0:= v2.`q.d.d` @type ^`q.e` @kind object;
  #L54c6d8.  v0:= v0.`q.e.P` @type ^`q.d` @kind object;
  #L54c6dc.  return v0 @kind object;
  #L54c6de.  v0:= v2.`q.d.d` @type ^`q.e` @kind object;
  #L54c6e2.  v0:= v0.`q.e.M` @type ^`q.d` @kind object;
  #L54c6e6.  return v0 @kind object;
  #L54c6e8.  v0:= v2.`q.d.d` @type ^`q.e` @kind object;
  #L54c6ec.  v0:= v0.`q.e.O` @type ^`q.d` @kind object;
  #L54c6f0.  return v0 @kind object;
  #L54c6f2.  v0:= 0I;
  #L54c6f4.  return v0 @kind object;
  #L54c6f6.  
  #L54c6f8.  switch v0
                  | 1 => goto L54c6f2
                  | 2 => goto L54c6e8
                  | 3 => goto L54c6de
                  | 4 => goto L54c6d4
                  | 5 => goto L54c6ca
                  | 6 => goto L54c6f2
                  | 7 => goto L54c6f2
                  | 8 => goto L54c6f2
                  | 9 => goto L54c6f2
                  | else => goto L54c6b2;
}
procedure `q.e` `h`(`q.d` v1 @kind this) @signature `Lq/d;.h:()Lq/e;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L54c764.  v0:= v1.`q.d.d` @type ^`q.e` @kind object;
  #L54c768.  return v0 @kind object;
}
procedure `n.i` `i`(`q.d` v1 @kind this) @signature `Lq/d;.i:()Ln/i;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L54c680.  v0:= v1.`q.d.i` @type ^`n.i` @kind object;
  #L54c684.  return v0 @kind object;
}
procedure `q.d` `j`(`q.d` v1 @kind this) @signature `Lq/d;.j:()Lq/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L54c734.  v0:= v1.`q.d.f` @type ^`q.d` @kind object;
  #L54c738.  return v0 @kind object;
}
procedure `q.d$b` `k`(`q.d` v1 @kind this) @signature `Lq/d;.k:()Lq/d$b;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L54c74c.  v0:= v1.`q.d.e` @type ^`q.d$b` @kind object;
  #L54c750.  return v0 @kind object;
}
procedure `boolean` `l`(`q.d` v3 @kind this) @signature `Lq/d;.l:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L54c37c.  v0:= v3.`q.d.a` @type ^`java.util.HashSet` @kind object;
  #L54c380.  v1:= 0I;
  #L54c382.  if v0 != 0 then goto L54c388;
  #L54c386.  return v1;
  #L54c388.  call temp:= `iterator`(v0) @signature `Ljava/util/HashSet;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L54c38e.  v0:= temp @kind object;
  #L54c390.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L54c396.  v2:= temp;
  #L54c398.  if v2 == 0 then goto L54c3c0;
  #L54c39c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L54c3a2.  v2:= temp @kind object;
  #L54c3a4.  v2:= (`q.d`) v2 @kind object;
  #L54c3a8.  call temp:= `g`(v2) @signature `Lq/d;.g:()Lq/d;` @kind virtual;
  #L54c3ae.  v2:= temp @kind object;
  #L54c3b0.  call temp:= `o`(v2) @signature `Lq/d;.o:()Z` @kind virtual;
  #L54c3b6.  v2:= temp;
  #L54c3b8.  if v2 == 0 then goto L54c390;
  #L54c3bc.  v0:= 1I;
  #L54c3be.  return v0;
  #L54c3c0.  return v1;
}
procedure `boolean` `m`(`q.d` v2 @kind this) @signature `Lq/d;.m:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L54c3d4.  v0:= v2.`q.d.a` @type ^`java.util.HashSet` @kind object;
  #L54c3d8.  v1:= 0I;
  #L54c3da.  if v0 != 0 then goto L54c3e0;
  #L54c3de.  return v1;
  #L54c3e0.  call temp:= `size`(v0) @signature `Ljava/util/HashSet;.size:()I` @kind virtual;
  #L54c3e6.  v0:= temp;
  #L54c3e8.  if v0 <= 0 then goto L54c3ee;
  #L54c3ec.  v1:= 1I;
  #L54c3ee.  return v1;
}
procedure `boolean` `n`(`q.d` v1 @kind this) @signature `Lq/d;.n:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L54c400.  v0:= v1.`q.d.c` @type ^`boolean` @kind boolean;
  #L54c404.  return v0;
}
procedure `boolean` `o`(`q.d` v1 @kind this) @signature `Lq/d;.o:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L54c418.  v0:= v1.`q.d.f` @type ^`q.d` @kind object;
  #L54c41c.  if v0 == 0 then goto L54c424;
  #L54c420.  v0:= 1I;
  #L54c422.  goto L54c426;
  #L54c424.  v0:= 0I;
  #L54c426.  return v0;
}
procedure `boolean` `p`(`q.d` v5 @kind this, `q.d` v6 @kind object) @signature `Lq/d;.p:(Lq/d;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L54c438.  v0:= 0I;
  #L54c43a.  if v6 != 0 then goto L54c440;
  #L54c43e.  return v0;
  #L54c440.  call temp:= `k`(v6) @signature `Lq/d;.k:()Lq/d$b;` @kind virtual;
  #L54c446.  v1:= temp @kind object;
  #L54c448.  v2:= v5.`q.d.e` @type ^`q.d$b` @kind object;
  #L54c44c.  v3:= 1I;
  #L54c44e.  if v1 != v2 then goto L54c486;
  #L54c452.  v1:= `@@q.d$b.BASELINE` @type ^`q.d$b` @kind object;
  #L54c456.  if v2 != v1 then goto L54c484;
  #L54c45a.  call temp:= `h`(v6) @signature `Lq/d;.h:()Lq/e;` @kind virtual;
  #L54c460.  v6:= temp @kind object;
  #L54c462.  call temp:= `Y`(v6) @signature `Lq/e;.Y:()Z` @kind virtual;
  #L54c468.  v6:= temp;
  #L54c46a.  if v6 == 0 then goto L54c482;
  #L54c46e.  call temp:= `h`(v5) @signature `Lq/d;.h:()Lq/e;` @kind virtual;
  #L54c474.  v6:= temp @kind object;
  #L54c476.  call temp:= `Y`(v6) @signature `Lq/e;.Y:()Z` @kind virtual;
  #L54c47c.  v6:= temp;
  #L54c47e.  if v6 != 0 then goto L54c484;
  #L54c482.  return v0;
  #L54c484.  return v3;
  #L54c486.  v4:= `@@q.d$a.a` @type ^`int`[] @kind object;
  #L54c48a.  call temp:= `ordinal`(v2) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L54c490.  v2:= temp;
  #L54c492.  v2:= v4[v2];
  #L54c496.  goto L54c55c;
  #L54c49c.  v6:= new `java.lang.AssertionError`;
  #L54c4a0.  v0:= v5.`q.d.e` @type ^`q.d$b` @kind object;
  #L54c4a4.  call temp:= `name`(v0) @signature `Ljava/lang/Enum;.name:()Ljava/lang/String;` @kind virtual;
  #L54c4aa.  v0:= temp @kind object;
  #L54c4ac.  call `<init>`(v6, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L54c4b2.  throw v6;
  #L54c4b4.  return v0;
  #L54c4b6.  v6:= `@@q.d$b.LEFT` @type ^`q.d$b` @kind object;
  #L54c4ba.  if v1 == v6 then goto L54c4ca;
  #L54c4be.  v6:= `@@q.d$b.RIGHT` @type ^`q.d$b` @kind object;
  #L54c4c2.  if v1 != v6 then goto L54c4c8;
  #L54c4c6.  goto L54c4ca;
  #L54c4c8.  return v3;
  #L54c4ca.  return v0;
  #L54c4cc.  v2:= `@@q.d$b.TOP` @type ^`q.d$b` @kind object;
  #L54c4d0.  if v1 == v2 then goto L54c4e2;
  #L54c4d4.  v2:= `@@q.d$b.BOTTOM` @type ^`q.d$b` @kind object;
  #L54c4d8.  if v1 != v2 then goto L54c4de;
  #L54c4dc.  goto L54c4e2;
  #L54c4de.  v2:= 0I;
  #L54c4e0.  goto L54c4e4;
  #L54c4e2.  v2:= 1I;
  #L54c4e4.  call temp:= `h`(v6) @signature `Lq/d;.h:()Lq/e;` @kind virtual;
  #L54c4ea.  v6:= temp @kind object;
  #L54c4ec.  v6:= instanceof @variable v6 @type ^`q.h` @kind boolean;
  #L54c4f0.  if v6 == 0 then goto L54c504;
  #L54c4f4.  if v2 != 0 then goto L54c500;
  #L54c4f8.  v6:= `@@q.d$b.CENTER_Y` @type ^`q.d$b` @kind object;
  #L54c4fc.  if v1 != v6 then goto L54c502;
  #L54c500.  v0:= 1I;
  #L54c502.  v2:= v0;
  #L54c504.  return v2;
  #L54c506.  v2:= `@@q.d$b.LEFT` @type ^`q.d$b` @kind object;
  #L54c50a.  if v1 == v2 then goto L54c51c;
  #L54c50e.  v2:= `@@q.d$b.RIGHT` @type ^`q.d$b` @kind object;
  #L54c512.  if v1 != v2 then goto L54c518;
  #L54c516.  goto L54c51c;
  #L54c518.  v2:= 0I;
  #L54c51a.  goto L54c51e;
  #L54c51c.  v2:= 1I;
  #L54c51e.  call temp:= `h`(v6) @signature `Lq/d;.h:()Lq/e;` @kind virtual;
  #L54c524.  v6:= temp @kind object;
  #L54c526.  v6:= instanceof @variable v6 @type ^`q.h` @kind boolean;
  #L54c52a.  if v6 == 0 then goto L54c53e;
  #L54c52e.  if v2 != 0 then goto L54c53a;
  #L54c532.  v6:= `@@q.d$b.CENTER_X` @type ^`q.d$b` @kind object;
  #L54c536.  if v1 != v6 then goto L54c53c;
  #L54c53a.  v0:= 1I;
  #L54c53c.  v2:= v0;
  #L54c53e.  return v2;
  #L54c540.  v6:= `@@q.d$b.BASELINE` @type ^`q.d$b` @kind object;
  #L54c544.  if v1 == v6 then goto L54c55a;
  #L54c548.  v6:= `@@q.d$b.CENTER_X` @type ^`q.d$b` @kind object;
  #L54c54c.  if v1 == v6 then goto L54c55a;
  #L54c550.  v6:= `@@q.d$b.CENTER_Y` @type ^`q.d$b` @kind object;
  #L54c554.  if v1 == v6 then goto L54c55a;
  #L54c558.  v0:= 1I;
  #L54c55a.  return v0;
  #L54c55c.  switch v2
                  | 1 => goto L54c540
                  | 2 => goto L54c506
                  | 3 => goto L54c506
                  | 4 => goto L54c4cc
                  | 5 => goto L54c4cc
                  | 6 => goto L54c4b6
                  | 7 => goto L54c4b4
                  | 8 => goto L54c4b4
                  | 9 => goto L54c4b4
                  | else => goto L54c49c;
}
procedure `void` `q`(`q.d` v2 @kind this) @signature `Lq/d;.q:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L54c7f8.  v0:= v2.`q.d.f` @type ^`q.d` @kind object;
  #L54c7fc.  v1:= 0I;
  #L54c7fe.  if v0 == 0 then goto L54c82c;
  #L54c802.  v0:= v0.`q.d.a` @type ^`java.util.HashSet` @kind object;
  #L54c806.  if v0 == 0 then goto L54c82c;
  #L54c80a.  call temp:= `remove`(v0, v2) @signature `Ljava/util/HashSet;.remove:(Ljava/lang/Object;)Z` @kind virtual;
  #L54c810.  v0:= v2.`q.d.f` @type ^`q.d` @kind object;
  #L54c814.  v0:= v0.`q.d.a` @type ^`java.util.HashSet` @kind object;
  #L54c818.  call temp:= `size`(v0) @signature `Ljava/util/HashSet;.size:()I` @kind virtual;
  #L54c81e.  v0:= temp;
  #L54c820.  if v0 != 0 then goto L54c82c;
  #L54c824.  v0:= v2.`q.d.f` @type ^`q.d` @kind object;
  #L54c828.  v0.`q.d.a` @type ^`java.util.HashSet` := v1 @kind object;
  #L54c82c.  v2.`q.d.a` @type ^`java.util.HashSet` := v1 @kind object;
  #L54c830.  v2.`q.d.f` @type ^`q.d` := v1 @kind object;
  #L54c834.  v0:= 0I;
  #L54c836.  v2.`q.d.g` @type ^`int` := v0;
  #L54c83a.  v1:= -2147483648I;
  #L54c83e.  v2.`q.d.h` @type ^`int` := v1;
  #L54c842.  v2.`q.d.c` @type ^`boolean` := v0 @kind boolean;
  #L54c846.  v2.`q.d.b` @type ^`int` := v0;
  #L54c84a.  return @kind void;
}
procedure `void` `r`(`q.d` v1 @kind this) @signature `Lq/d;.r:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L54c85c.  v0:= 0I;
  #L54c85e.  v1.`q.d.c` @type ^`boolean` := v0 @kind boolean;
  #L54c862.  v1.`q.d.b` @type ^`int` := v0;
  #L54c866.  return @kind void;
}
procedure `void` `s`(`q.d` v2 @kind this, `n.c` v3 @kind object) @signature `Lq/d;.s:(Ln/c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L54c878.  v3:= v2.`q.d.i` @type ^`n.i` @kind object;
  #L54c87c.  if v3 != 0 then goto L54c896;
  #L54c880.  v3:= new `n.i`;
  #L54c884.  v0:= `@@n.i$a.UNRESTRICTED` @type ^`n.i$a` @kind object;
  #L54c888.  v1:= 0I;
  #L54c88a.  call `<init>`(v3, v0, v1) @signature `Ln/i;.<init>:(Ln/i$a;Ljava/lang/String;)V` @kind direct;
  #L54c890.  v2.`q.d.i` @type ^`n.i` := v3 @kind object;
  #L54c894.  goto L54c89c;
  #L54c896.  call `f`(v3) @signature `Ln/i;.f:()V` @kind virtual;
  #L54c89c.  return @kind void;
}
procedure `void` `t`(`q.d` v0 @kind this, `int` v1 ) @signature `Lq/d;.t:(I)V` @AccessFlag PUBLIC {
    temp;

  #L54c8b0.  v0.`q.d.b` @type ^`int` := v1;
  #L54c8b4.  v1:= 1I;
  #L54c8b6.  v0.`q.d.c` @type ^`boolean` := v1 @kind boolean;
  #L54c8ba.  return @kind void;
}
procedure `java.lang.String` `toString`(`q.d` v2 @kind this) @signature `Lq/d;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L54c614.  v0:= new `java.lang.StringBuilder`;
  #L54c618.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L54c61e.  v1:= v2.`q.d.d` @type ^`q.e` @kind object;
  #L54c622.  call temp:= `v`(v1) @signature `Lq/e;.v:()Ljava/lang/String;` @kind virtual;
  #L54c628.  v1:= temp @kind object;
  #L54c62a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L54c630.  v1:= ":" @kind object;
  #L54c634.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L54c63a.  v1:= v2.`q.d.e` @type ^`q.d$b` @kind object;
  #L54c63e.  call temp:= `toString`(v1) @signature `Ljava/lang/Enum;.toString:()Ljava/lang/String;` @kind virtual;
  #L54c644.  v1:= temp @kind object;
  #L54c646.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L54c64c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L54c652.  v0:= temp @kind object;
  #L54c654.  return v0 @kind object;
}
procedure `void` `u`(`q.d` v1 @kind this, `int` v2 ) @signature `Lq/d;.u:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L54c8cc.  call temp:= `o`(v1) @signature `Lq/d;.o:()Z` @kind virtual;
  #L54c8d2.  v0:= temp;
  #L54c8d4.  if v0 == 0 then goto L54c8dc;
  #L54c8d8.  v1.`q.d.h` @type ^`int` := v2;
  #L54c8dc.  return @kind void;
}
