record `g5.m` @kind class @AccessFlag PUBLIC_ABSTRACT extends `g5.r` @kind interface {
  `java.util.Set` `g5.m.a` @AccessFlag PRIVATE_FINAL;
  `g5.e` `g5.m.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`g5.m` v1 @kind this) @signature `Lg5/m;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L509ce8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L509cee.  v0:= new `java.util.HashSet`;
  #L509cf2.  call `<init>`(v0) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L509cf8.  v1.`g5.m.a` @type ^`java.util.Set` := v0 @kind object;
  #L509cfc.  v0:= new `g5.e`;
  #L509d00.  call `<init>`(v0) @signature `Lg5/e;.<init>:()V` @kind direct;
  #L509d06.  v1.`g5.m.b` @type ^`g5.e` := v0 @kind object;
  #L509d0a.  return @kind void;
}
procedure `java.lang.Object` `d`(`g5.m` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lg5/m;.d:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L509c88.  if v2 == 0 then goto L509ca2;
  #L509c8c.  @monitorenter v1
  #L509c8e.  v0:= v1.`g5.m.a` @type ^`java.util.Set` @kind object;
  #L509c92.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Set;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L509c98.  @monitorexit v1
  #L509c9a.  goto L509ca2;
  #L509c9c.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L509c9e.  @monitorexit v1
  #L509ca0.  throw v2;
  #L509ca2.  return v2 @kind object;
  catch `java.lang.Throwable` @[L509c8e..L509ca0] goto L509c9c;
}
procedure `java.lang.Object` `b`(`g5.m` v1 @kind this) @signature `Lg5/m;.b:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L509cc0.  v0:= v1.`g5.m.b` @type ^`g5.e` @kind object;
  #L509cc4.  call temp:= `f`(v0) @signature `Lg5/e;.f:()Ljava/lang/Object;` @kind virtual;
  #L509cca.  v0:= temp @kind object;
  #L509ccc.  call temp:= `d`(v1, v0) @signature `Lg5/m;.d:(Ljava/lang/Object;)Ljava/lang/Object;` @kind direct;
  #L509cd2.  v0:= temp @kind object;
  #L509cd4.  return v0 @kind object;
}
procedure `void` `c`(`g5.m` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lg5/m;.c:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L509d1c.  @monitorenter v2
  #L509d1e.  v0:= v2.`g5.m.a` @type ^`java.util.Set` @kind object;
  #L509d22.  call temp:= `add`(v0, v3) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L509d28.  v0:= temp;
  #L509d2a.  @monitorexit v2
  #L509d2c.  if v0 == 0 then goto L509d42;
  #L509d30.  v0:= v2.`g5.m.b` @type ^`g5.e` @kind object;
  #L509d34.  call temp:= `a`(v2, v3) @signature `Lg5/r;.a:(Ljava/lang/Object;)I` @kind interface;
  #L509d3a.  v1:= temp;
  #L509d3c.  call `e`(v0, v1, v3) @signature `Lg5/e;.e:(ILjava/lang/Object;)V` @kind virtual;
  #L509d42.  return @kind void;
  #L509d44.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L509d46.  @monitorexit v2
  #L509d48.  throw v3;
  catch `java.lang.Throwable` @[L509d1e..L509d2c] goto L509d44;
  catch `java.lang.Throwable` @[L509d46..L509d48] goto L509d44;
}
procedure `java.lang.Object` `get`(`g5.m` v1 @kind this, `int` v2 ) @signature `Lg5/m;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L509c60.  v0:= v1.`g5.m.b` @type ^`g5.e` @kind object;
  #L509c64.  call temp:= `a`(v0, v2) @signature `Lg5/e;.a:(I)Ljava/lang/Object;` @kind virtual;
  #L509c6a.  v2:= temp @kind object;
  #L509c6c.  call temp:= `d`(v1, v2) @signature `Lg5/m;.d:(Ljava/lang/Object;)Ljava/lang/Object;` @kind direct;
  #L509c72.  v2:= temp @kind object;
  #L509c74.  return v2 @kind object;
}
