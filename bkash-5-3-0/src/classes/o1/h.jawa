record `o1.h` @kind class @AccessFlag PUBLIC_FINAL {
}
global `o1.f` `@@o1.h.a` @AccessFlag PRIVATE_STATIC;
procedure `void` `<init>`(`o1.h` v0 @kind this) @signature `Lo1/h;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L543cc4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L543cca.  return @kind void;
}
procedure `o1.f` `a`() @signature `Lo1/h;.a:()Lo1/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L543c74.  v0:= `@@o1.h.a` @type ^`o1.f` @kind object;
  #L543c78.  if v0 != 0 then goto L543ca2;
  #L543c7c.  v0:= constclass @type ^`o1.h` @kind object;
  #L543c80.  @monitorenter v0
  #L543c82.  v1:= `@@o1.h.a` @type ^`o1.f` @kind object;
  #L543c86.  if v1 != 0 then goto L543c98;
  #L543c8a.  v1:= new `o1.f`;
  #L543c8e.  call `<init>`(v1) @signature `Lo1/f;.<init>:()V` @kind direct;
  #L543c94.  `@@o1.h.a` @type ^`o1.f` := v1 @kind object;
  #L543c98.  @monitorexit v0
  #L543c9a.  goto L543ca2;
  #L543c9c.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L543c9e.  @monitorexit v0
  #L543ca0.  throw v1;
  #L543ca2.  v0:= `@@o1.h.a` @type ^`o1.f` @kind object;
  #L543ca6.  return v0 @kind object;
  catch `java.lang.Throwable` @[L543c82..L543ca0] goto L543c9c;
}
