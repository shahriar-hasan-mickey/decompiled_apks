record `k3.i` @kind class @AccessFlag PUBLIC extends `java.io.InputStream` @kind class {
  `k3.g` `k3.i.g` @AccessFlag FINAL;
  `int` `k3.i.h` @AccessFlag ;
  `int` `k3.i.i` @AccessFlag ;
}
procedure `void` `<init>`(`k3.i` v1 @kind this, `k3.g` v2 @kind object) @signature `Lk3/i;.<init>:(Lk3/g;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L524ee8.  call `<init>`(v1) @signature `Ljava/io/InputStream;.<init>:()V` @kind direct;
  #L524eee.  call temp:= `g`(v2) @signature `Lk3/g;.g:()Z` @kind interface;
  #L524ef4.  v0:= temp;
  #L524ef6.  v0:= v0 ^~ 1;
  #L524efa.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L524f00.  v0:= temp @kind object;
  #L524f02.  call `b`(v0) @signature `Lh3/j;.b:(Ljava/lang/Boolean;)V` @kind static;
  #L524f08.  call temp:= `g`(v2) @signature `Lh3/j;.g:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L524f0e.  v2:= temp @kind object;
  #L524f10.  v2:= (`k3.g`) v2 @kind object;
  #L524f14.  v1.`k3.i.g` @type ^`k3.g` := v2 @kind object;
  #L524f18.  v2:= 0I;
  #L524f1a.  v1.`k3.i.h` @type ^`int` := v2;
  #L524f1e.  v1.`k3.i.i` @type ^`int` := v2;
  #L524f22.  return @kind void;
}
procedure `int` `available`(`k3.i` v2 @kind this) @signature `Lk3/i;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L524d68.  v0:= v2.`k3.i.g` @type ^`k3.g` @kind object;
  #L524d6c.  call temp:= `size`(v0) @signature `Lk3/g;.size:()I` @kind interface;
  #L524d72.  v0:= temp;
  #L524d74.  v1:= v2.`k3.i.h` @type ^`int`;
  #L524d78.  v0:= v0 - v1 @kind int;
  #L524d7a.  return v0;
}
procedure `void` `mark`(`k3.i` v0 @kind this, `int` v1 ) @signature `Lk3/i;.mark:(I)V` @AccessFlag PUBLIC {
    temp;

  #L524f34.  v1:= v0.`k3.i.h` @type ^`int`;
  #L524f38.  v0.`k3.i.i` @type ^`int` := v1;
  #L524f3c.  return @kind void;
}
procedure `boolean` `markSupported`(`k3.i` v1 @kind this) @signature `Lk3/i;.markSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L524d54.  v0:= 1I;
  #L524d56.  return v0;
}
procedure `int` `read`(`k3.i` v3 @kind this) @signature `Lk3/i;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L524d8c.  call temp:= `available`(v3) @signature `Lk3/i;.available:()I` @kind virtual;
  #L524d92.  v0:= temp;
  #L524d94.  if v0 > 0 then goto L524d9c;
  #L524d98.  v0:= -1I;
  #L524d9a.  return v0;
  #L524d9c.  v0:= v3.`k3.i.g` @type ^`k3.g` @kind object;
  #L524da0.  v1:= v3.`k3.i.h` @type ^`int`;
  #L524da4.  v2:= v1 + 1;
  #L524da8.  v3.`k3.i.h` @type ^`int` := v2;
  #L524dac.  call temp:= `d`(v0, v1) @signature `Lk3/g;.d:(I)B` @kind interface;
  #L524db2.  v0:= temp;
  #L524db4.  v0:= v0 ^& 255;
  #L524db8.  return v0;
}
procedure `int` `read`(`k3.i` v2 @kind this, `byte`[] v3 @kind object) @signature `Lk3/i;.read:([B)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L524dcc.  v0:= length @variable v3;
  #L524dce.  v1:= 0I;
  #L524dd0.  call temp:= `read`(v2, v3, v1, v0) @signature `Lk3/i;.read:([BII)I` @kind virtual;
  #L524dd6.  v3:= temp;
  #L524dd8.  return v3;
}
procedure `int` `read`(`k3.i` v3 @kind this, `byte`[] v4 @kind object, `int` v5 , `int` v6 ) @signature `Lk3/i;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L524dec.  if v5 < 0 then goto L524e38;
  #L524df0.  if v6 < 0 then goto L524e38;
  #L524df4.  v0:= v5 + v6 @kind int;
  #L524df8.  v1:= length @variable v4;
  #L524dfa.  if v0 > v1 then goto L524e38;
  #L524dfe.  call temp:= `available`(v3) @signature `Lk3/i;.available:()I` @kind virtual;
  #L524e04.  v0:= temp;
  #L524e06.  if v0 > 0 then goto L524e0e;
  #L524e0a.  v4:= -1I;
  #L524e0c.  return v4;
  #L524e0e.  if v6 > 0 then goto L524e16;
  #L524e12.  v4:= 0I;
  #L524e14.  return v4;
  #L524e16.  call temp:= `min`(v0, v6) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L524e1c.  v6:= temp;
  #L524e1e.  v0:= v3.`k3.i.g` @type ^`k3.g` @kind object;
  #L524e22.  v1:= v3.`k3.i.h` @type ^`int`;
  #L524e26.  call temp:= `f`(v0, v1, v4, v5, v6) @signature `Lk3/g;.f:(I[BII)I` @kind interface;
  #L524e2c.  v4:= v3.`k3.i.h` @type ^`int`;
  #L524e30.  v4:= v4 + v6 @kind int;
  #L524e32.  v3.`k3.i.h` @type ^`int` := v4;
  #L524e36.  return v6;
  #L524e38.  v0:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L524e3c.  v1:= new `java.lang.StringBuilder`;
  #L524e40.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L524e46.  v2:= "length=" @kind object;
  #L524e4a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L524e50.  v4:= length @variable v4;
  #L524e52.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L524e58.  v4:= "; regionStart=" @kind object;
  #L524e5c.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L524e62.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L524e68.  v4:= "; regionLength=" @kind object;
  #L524e6c.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L524e72.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L524e78.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L524e7e.  v4:= temp @kind object;
  #L524e80.  call `<init>`(v0, v4) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L524e86.  throw v0;
}
procedure `void` `reset`(`k3.i` v1 @kind this) @signature `Lk3/i;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L524f50.  v0:= v1.`k3.i.i` @type ^`int`;
  #L524f54.  v1.`k3.i.h` @type ^`int` := v0;
  #L524f58.  return @kind void;
}
procedure `long` `skip`(`k3.i` v3 @kind this, `long` v4 ) @signature `Lk3/i;.skip:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L524e98.  v0:= 0L;
  #L524e9c.  v2:= lcmp(v4, v0);
  #L524ea0.  if v2 < 0 then goto L524ea8;
  #L524ea4.  v0:= 1I;
  #L524ea6.  goto L524eaa;
  #L524ea8.  v0:= 0I;
  #L524eaa.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L524eb0.  v0:= temp @kind object;
  #L524eb2.  call `b`(v0) @signature `Lh3/j;.b:(Ljava/lang/Boolean;)V` @kind static;
  #L524eb8.  v5:= (`int`) v4 @kind l2i;
  #L524eba.  call temp:= `available`(v3) @signature `Lk3/i;.available:()I` @kind virtual;
  #L524ec0.  v4:= temp;
  #L524ec2.  call temp:= `min`(v5, v4) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L524ec8.  v4:= temp;
  #L524eca.  v5:= v3.`k3.i.h` @type ^`int`;
  #L524ece.  v5:= v5 + v4 @kind int;
  #L524ed0.  v3.`k3.i.h` @type ^`int` := v5;
  #L524ed4.  v4:= (`long`) v4 @kind i2l;
  #L524ed6.  return v4 @kind wide;
}
