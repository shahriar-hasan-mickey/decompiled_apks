record `k3.d` @kind class @AccessFlag PUBLIC extends `k3.c` @kind interface {
}
global `k3.d` `@@k3.d.a` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lk3/d;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;

  #L524a54.  return @kind void;
}
procedure `void` `<init>`(`k3.d` v0 @kind this) @signature `Lk3/d;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L524a68.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L524a6e.  return @kind void;
}
procedure `k3.d` `b`() @signature `Lk3/d;.b:()Lk3/d;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L524a0c.  v0:= constclass @type ^`k3.d` @kind object;
  #L524a10.  @monitorenter v0
  #L524a12.  v1:= `@@k3.d.a` @type ^`k3.d` @kind object;
  #L524a16.  if v1 != 0 then goto L524a28;
  #L524a1a.  v1:= new `k3.d`;
  #L524a1e.  call `<init>`(v1) @signature `Lk3/d;.<init>:()V` @kind direct;
  #L524a24.  `@@k3.d.a` @type ^`k3.d` := v1 @kind object;
  #L524a28.  v1:= `@@k3.d.a` @type ^`k3.d` @kind object;
  #L524a2c.  @monitorexit v0
  #L524a2e.  return v1 @kind object;
  #L524a30.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L524a32.  @monitorexit v0
  #L524a34.  throw v1;
  catch `java.lang.Throwable` @[L524a12..L524a2c] goto L524a30;
}
procedure `void` `a`(`k3.d` v0 @kind this, `k3.b` v1 @kind object) @signature `Lk3/d;.a:(Lk3/b;)V` @AccessFlag PUBLIC {
    temp;

  #L524a80.  return @kind void;
}
