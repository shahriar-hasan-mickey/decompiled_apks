record `k3.f` @kind class @AccessFlag PUBLIC extends `java.io.InputStream` @kind class {
  `java.io.InputStream` `k3.f.g` @AccessFlag PRIVATE_FINAL;
  `byte`[] `k3.f.h` @AccessFlag PRIVATE_FINAL;
  `l3.c` `k3.f.i` @AccessFlag PRIVATE_FINAL;
  `int` `k3.f.j` @AccessFlag PRIVATE;
  `int` `k3.f.k` @AccessFlag PRIVATE;
  `boolean` `k3.f.l` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`k3.f` v0 @kind this, `java.io.InputStream` v1 @kind object, `byte`[] v2 @kind object, `l3.c` v3 @kind object) @signature `Lk3/f;.<init>:(Ljava/io/InputStream;[BLl3/c;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L524c4c.  call `<init>`(v0) @signature `Ljava/io/InputStream;.<init>:()V` @kind direct;
  #L524c52.  call temp:= `g`(v1) @signature `Lh3/j;.g:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L524c58.  v1:= temp @kind object;
  #L524c5a.  v1:= (`java.io.InputStream`) v1 @kind object;
  #L524c5e.  v0.`k3.f.g` @type ^`java.io.InputStream` := v1 @kind object;
  #L524c62.  call temp:= `g`(v2) @signature `Lh3/j;.g:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L524c68.  v1:= temp @kind object;
  #L524c6a.  v1:= (`byte`[]) v1 @kind object;
  #L524c6e.  v0.`k3.f.h` @type ^`byte`[] := v1 @kind object;
  #L524c72.  call temp:= `g`(v3) @signature `Lh3/j;.g:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L524c78.  v1:= temp @kind object;
  #L524c7a.  v1:= (`l3.c`) v1 @kind object;
  #L524c7e.  v0.`k3.f.i` @type ^`l3.c` := v1 @kind object;
  #L524c82.  v1:= 0I;
  #L524c84.  v0.`k3.f.j` @type ^`int` := v1;
  #L524c88.  v0.`k3.f.k` @type ^`int` := v1;
  #L524c8c.  v0.`k3.f.l` @type ^`boolean` := v1 @kind boolean;
  #L524c90.  return @kind void;
}
procedure `boolean` `e`(`k3.f` v3 @kind this) @signature `Lk3/f;.e:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L524a94.  v0:= v3.`k3.f.k` @type ^`int`;
  #L524a98.  v1:= v3.`k3.f.j` @type ^`int`;
  #L524a9c.  v2:= 1I;
  #L524a9e.  if v0 >= v1 then goto L524aa4;
  #L524aa2.  return v2;
  #L524aa4.  v0:= v3.`k3.f.g` @type ^`java.io.InputStream` @kind object;
  #L524aa8.  v1:= v3.`k3.f.h` @type ^`byte`[] @kind object;
  #L524aac.  call temp:= `read`(v0, v1) @signature `Ljava/io/InputStream;.read:([B)I` @kind virtual;
  #L524ab2.  v0:= temp;
  #L524ab4.  v1:= 0I;
  #L524ab6.  if v0 > 0 then goto L524abc;
  #L524aba.  return v1;
  #L524abc.  v3.`k3.f.j` @type ^`int` := v0;
  #L524ac0.  v3.`k3.f.k` @type ^`int` := v1;
  #L524ac4.  return v2;
}
procedure `void` `i`(`k3.f` v2 @kind this) @signature `Lk3/f;.i:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L524cd8.  v0:= v2.`k3.f.l` @type ^`boolean` @kind boolean;
  #L524cdc.  if v0 != 0 then goto L524ce2;
  #L524ce0.  return @kind void;
  #L524ce2.  v0:= new `java.io.IOException`;
  #L524ce6.  v1:= "stream already closed" @kind object;
  #L524cea.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L524cf0.  throw v0;
}
procedure `int` `available`(`k3.f` v2 @kind this) @signature `Lk3/f;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L524ad8.  v0:= v2.`k3.f.k` @type ^`int`;
  #L524adc.  v1:= v2.`k3.f.j` @type ^`int`;
  #L524ae0.  if v0 > v1 then goto L524ae8;
  #L524ae4.  v0:= 1I;
  #L524ae6.  goto L524aea;
  #L524ae8.  v0:= 0I;
  #L524aea.  call `i`(v0) @signature `Lh3/j;.i:(Z)V` @kind static;
  #L524af0.  call `i`(v2) @signature `Lk3/f;.i:()V` @kind direct;
  #L524af6.  v0:= v2.`k3.f.j` @type ^`int`;
  #L524afa.  v1:= v2.`k3.f.k` @type ^`int`;
  #L524afe.  v0:= v0 - v1 @kind int;
  #L524b00.  v1:= v2.`k3.f.g` @type ^`java.io.InputStream` @kind object;
  #L524b04.  call temp:= `available`(v1) @signature `Ljava/io/InputStream;.available:()I` @kind virtual;
  #L524b0a.  v1:= temp;
  #L524b0c.  v0:= v0 + v1 @kind int;
  #L524b0e.  return v0;
}
procedure `void` `close`(`k3.f` v2 @kind this) @signature `Lk3/f;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L524ca4.  v0:= v2.`k3.f.l` @type ^`boolean` @kind boolean;
  #L524ca8.  if v0 != 0 then goto L524cc6;
  #L524cac.  v0:= 1I;
  #L524cae.  v2.`k3.f.l` @type ^`boolean` := v0 @kind boolean;
  #L524cb2.  v0:= v2.`k3.f.i` @type ^`l3.c` @kind object;
  #L524cb6.  v1:= v2.`k3.f.h` @type ^`byte`[] @kind object;
  #L524cba.  call `a`(v0, v1) @signature `Ll3/c;.a:(Ljava/lang/Object;)V` @kind interface;
  #L524cc0.  call `close`(v2) @signature `Ljava/io/InputStream;.close:()V` @kind super;
  #L524cc6.  return @kind void;
}
procedure `void` `finalize`(`k3.f` v2 @kind this) @signature `Lk3/f;.finalize:()V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L524d04.  v0:= v2.`k3.f.l` @type ^`boolean` @kind boolean;
  #L524d08.  if v0 != 0 then goto L524d20;
  #L524d0c.  v0:= "PooledByteInputStream" @kind object;
  #L524d10.  v1:= "Finalized without closing" @kind object;
  #L524d14.  call `h`(v0, v1) @signature `Li3/a;.h:(Ljava/lang/String;Ljava/lang/String;)V` @kind static;
  #L524d1a.  call `close`(v2) @signature `Lk3/f;.close:()V` @kind virtual;
  #L524d20.  call `finalize`(v2) @signature `Ljava/lang/Object;.finalize:()V` @kind super;
  #L524d26.  return @kind void;
}
procedure `int` `read`(`k3.f` v3 @kind this) @signature `Lk3/f;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L524b20.  v0:= v3.`k3.f.k` @type ^`int`;
  #L524b24.  v1:= v3.`k3.f.j` @type ^`int`;
  #L524b28.  if v0 > v1 then goto L524b30;
  #L524b2c.  v0:= 1I;
  #L524b2e.  goto L524b32;
  #L524b30.  v0:= 0I;
  #L524b32.  call `i`(v0) @signature `Lh3/j;.i:(Z)V` @kind static;
  #L524b38.  call `i`(v3) @signature `Lk3/f;.i:()V` @kind direct;
  #L524b3e.  call temp:= `e`(v3) @signature `Lk3/f;.e:()Z` @kind direct;
  #L524b44.  v0:= temp;
  #L524b46.  if v0 != 0 then goto L524b4e;
  #L524b4a.  v0:= -1I;
  #L524b4c.  return v0;
  #L524b4e.  v0:= v3.`k3.f.h` @type ^`byte`[] @kind object;
  #L524b52.  v1:= v3.`k3.f.k` @type ^`int`;
  #L524b56.  v2:= v1 + 1;
  #L524b5a.  v3.`k3.f.k` @type ^`int` := v2;
  #L524b5e.  v0:= v0[v1] @kind byte;
  #L524b62.  v0:= v0 ^& 255;
  #L524b66.  return v0;
}
procedure `int` `read`(`k3.f` v2 @kind this, `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lk3/f;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L524b78.  v0:= v2.`k3.f.k` @type ^`int`;
  #L524b7c.  v1:= v2.`k3.f.j` @type ^`int`;
  #L524b80.  if v0 > v1 then goto L524b88;
  #L524b84.  v0:= 1I;
  #L524b86.  goto L524b8a;
  #L524b88.  v0:= 0I;
  #L524b8a.  call `i`(v0) @signature `Lh3/j;.i:(Z)V` @kind static;
  #L524b90.  call `i`(v2) @signature `Lk3/f;.i:()V` @kind direct;
  #L524b96.  call temp:= `e`(v2) @signature `Lk3/f;.e:()Z` @kind direct;
  #L524b9c.  v0:= temp;
  #L524b9e.  if v0 != 0 then goto L524ba6;
  #L524ba2.  v3:= -1I;
  #L524ba4.  return v3;
  #L524ba6.  v0:= v2.`k3.f.j` @type ^`int`;
  #L524baa.  v1:= v2.`k3.f.k` @type ^`int`;
  #L524bae.  v0:= v0 - v1 @kind int;
  #L524bb0.  call temp:= `min`(v0, v5) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L524bb6.  v5:= temp;
  #L524bb8.  v0:= v2.`k3.f.h` @type ^`byte`[] @kind object;
  #L524bbc.  v1:= v2.`k3.f.k` @type ^`int`;
  #L524bc0.  call `arraycopy`(v0, v1, v3, v4, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L524bc6.  v3:= v2.`k3.f.k` @type ^`int`;
  #L524bca.  v3:= v3 + v5 @kind int;
  #L524bcc.  v2.`k3.f.k` @type ^`int` := v3;
  #L524bd0.  return v5;
}
procedure `long` `skip`(`k3.f` v5 @kind this, `long` v6 ) @signature `Lk3/f;.skip:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L524be4.  v0:= v5.`k3.f.k` @type ^`int`;
  #L524be8.  v1:= v5.`k3.f.j` @type ^`int`;
  #L524bec.  if v0 > v1 then goto L524bf4;
  #L524bf0.  v0:= 1I;
  #L524bf2.  goto L524bf6;
  #L524bf4.  v0:= 0I;
  #L524bf6.  call `i`(v0) @signature `Lh3/j;.i:(Z)V` @kind static;
  #L524bfc.  call `i`(v5) @signature `Lk3/f;.i:()V` @kind direct;
  #L524c02.  v0:= v5.`k3.f.j` @type ^`int`;
  #L524c06.  v1:= v5.`k3.f.k` @type ^`int`;
  #L524c0a.  v2:= v0 - v1 @kind int;
  #L524c0e.  v2:= (`long`) v2 @kind i2l;
  #L524c10.  v4:= lcmp(v2, v6);
  #L524c14.  if v4 < 0 then goto L524c24;
  #L524c18.  v0:= (`long`) v1 @kind i2l;
  #L524c1a.  v0:= v0 + v6 @kind long;
  #L524c1c.  v1:= (`int`) v0 @kind l2i;
  #L524c1e.  v5.`k3.f.k` @type ^`int` := v1;
  #L524c22.  return v6 @kind wide;
  #L524c24.  v5.`k3.f.k` @type ^`int` := v0;
  #L524c28.  v0:= v5.`k3.f.g` @type ^`java.io.InputStream` @kind object;
  #L524c2c.  v6:= v6 - v2 @kind long;
  #L524c2e.  call temp:= `skip`(v0, v6) @signature `Ljava/io/InputStream;.skip:(J)J` @kind virtual;
  #L524c34.  v6:= temp @kind wide;
  #L524c36.  v2:= v2 + v6 @kind long;
  #L524c38.  return v2 @kind wide;
}
