record `com.google.firebase.crashlytics.internal.common.p` @kind class @AccessFlag  extends `java.lang.Thread$UncaughtExceptionHandler` @kind interface {
  `com.google.firebase.crashlytics.internal.common.p$a` `com.google.firebase.crashlytics.internal.common.p.a` @AccessFlag PRIVATE_FINAL;
  `x8.i` `com.google.firebase.crashlytics.internal.common.p.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.Thread$UncaughtExceptionHandler` `com.google.firebase.crashlytics.internal.common.p.c` @AccessFlag PRIVATE_FINAL;
  `o8.a` `com.google.firebase.crashlytics.internal.common.p.d` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `com.google.firebase.crashlytics.internal.common.p.e` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.google.firebase.crashlytics.internal.common.p` v0 @kind this, `com.google.firebase.crashlytics.internal.common.p$a` v1 @kind object, `x8.i` v2 @kind object, `java.lang.Thread$UncaughtExceptionHandler` v3 @kind object, `o8.a` v4 @kind object) @signature `Lcom/google/firebase/crashlytics/internal/common/p;.<init>:(Lcom/google/firebase/crashlytics/internal/common/p$a;Lx8/i;Ljava/lang/Thread$UncaughtExceptionHandler;Lo8/a;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `boolean` `b`(`com.google.firebase.crashlytics.internal.common.p` v1 @kind this, `java.lang.Thread` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lcom/google/firebase/crashlytics/internal/common/p;.b:(Ljava/lang/Thread;Ljava/lang/Throwable;)Z` @AccessFlag PRIVATE {

  # return;
}
procedure `boolean` `a`(`com.google.firebase.crashlytics.internal.common.p` v1 @kind this) @signature `Lcom/google/firebase/crashlytics/internal/common/p;.a:()Z` @AccessFlag  {

  # return;
}
procedure `void` `uncaughtException`(`com.google.firebase.crashlytics.internal.common.p` v5 @kind this, `java.lang.Thread` v6 @kind object, `java.lang.Throwable` v7 @kind object) @signature `Lcom/google/firebase/crashlytics/internal/common/p;.uncaughtException:(Ljava/lang/Thread;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {

  # return;
}
