record `com.google.common.reflect.AbstractInvocationHandler` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.lang.reflect.InvocationHandler` @kind interface {
}
global `java.lang.Object`[] `@@com.google.common.reflect.AbstractInvocationHandler.g` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/common/reflect/AbstractInvocationHandler;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.reflect.AbstractInvocationHandler` v0 @kind this) @signature `Lcom/google/common/reflect/AbstractInvocationHandler;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `boolean` `b`(`java.lang.Object` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lcom/google/common/reflect/AbstractInvocationHandler;.b:(Ljava/lang/Object;Ljava/lang/Class;)Z` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.lang.Object` `a`(`java.lang.Object` v0 @kind object, `java.lang.reflect.Method` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Lcom/google/common/reflect/AbstractInvocationHandler;.a:(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `boolean` `equals`(`com.google.common.reflect.AbstractInvocationHandler` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/google/common/reflect/AbstractInvocationHandler;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `hashCode`(`com.google.common.reflect.AbstractInvocationHandler` v1 @kind this) @signature `Lcom/google/common/reflect/AbstractInvocationHandler;.hashCode:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `invoke`(`com.google.common.reflect.AbstractInvocationHandler` v4 @kind this, `java.lang.Object` v5 @kind object, `java.lang.reflect.Method` v6 @kind object, `java.lang.Object`[] v7 @kind object) @signature `Lcom/google/common/reflect/AbstractInvocationHandler;.invoke:(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {

  # return;
}
procedure `java.lang.String` `toString`(`com.google.common.reflect.AbstractInvocationHandler` v1 @kind this) @signature `Lcom/google/common/reflect/AbstractInvocationHandler;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
