record `com.google.common.collect.p1` @kind class @AccessFlag FINAL {
  `int` `com.google.common.collect.p1.a` @AccessFlag PRIVATE_FINAL;
  `java.util.Comparator` `com.google.common.collect.p1.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object`[] `com.google.common.collect.p1.c` @AccessFlag PRIVATE_FINAL;
  `int` `com.google.common.collect.p1.d` @AccessFlag PRIVATE;
  `java.lang.Object` `com.google.common.collect.p1.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.google.common.collect.p1` v2 @kind this, `java.util.Comparator` v3 @kind object, `int` v4 ) @signature `Lcom/google/common/collect/p1;.<init>:(Ljava/util/Comparator;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `com.google.common.collect.p1` `a`(`int` v1 , `java.util.Comparator` v2 @kind object) @signature `Lcom/google/common/collect/p1;.a:(ILjava/util/Comparator;)Lcom/google/common/collect/p1;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `d`(`com.google.common.collect.p1` v3 @kind this, `int` v4 , `int` v5 , `int` v6 ) @signature `Lcom/google/common/collect/p1;.d:(III)I` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `e`(`com.google.common.collect.p1` v3 @kind this, `int` v4 , `int` v5 ) @signature `Lcom/google/common/collect/p1;.e:(II)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `g`(`com.google.common.collect.p1` v7 @kind this) @signature `Lcom/google/common/collect/p1;.g:()V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `b`(`com.google.common.collect.p1` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lcom/google/common/collect/p1;.b:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `c`(`com.google.common.collect.p1` v1 @kind this, `java.util.Iterator` v2 @kind object) @signature `Lcom/google/common/collect/p1;.c:(Ljava/util/Iterator;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.List` `f`(`com.google.common.collect.p1` v4 @kind this) @signature `Lcom/google/common/collect/p1;.f:()Ljava/util/List;` @AccessFlag PUBLIC {

  # return;
}
