record `com.google.common.util.concurrent.a$l` @kind class @AccessFlag FINAL {
  `java.lang.Thread` `com.google.common.util.concurrent.a$l.a` @AccessFlag VOLATILE;
  `com.google.common.util.concurrent.a$l` `com.google.common.util.concurrent.a$l.b` @AccessFlag VOLATILE;
}
global `com.google.common.util.concurrent.a$l` `@@com.google.common.util.concurrent.a$l.c` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/google/common/util/concurrent/a$l;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.a$l` v2 @kind this) @signature `Lcom/google/common/util/concurrent/a$l;.<init>:()V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.a$l` v0 @kind this, `boolean` v1 ) @signature `Lcom/google/common/util/concurrent/a$l;.<init>:(Z)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `void` `a`(`com.google.common.util.concurrent.a$l` v1 @kind this, `com.google.common.util.concurrent.a$l` v2 @kind object) @signature `Lcom/google/common/util/concurrent/a$l;.a:(Lcom/google/common/util/concurrent/a$l;)V` @AccessFlag  {

  # return;
}
procedure `void` `b`(`com.google.common.util.concurrent.a$l` v2 @kind this) @signature `Lcom/google/common/util/concurrent/a$l;.b:()V` @AccessFlag  {

  # return;
}
