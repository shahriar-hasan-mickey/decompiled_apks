record `com.google.common.util.concurrent.a$b` @kind class @AccessFlag ABSTRACT {
}
procedure `void` `<init>`(`com.google.common.util.concurrent.a$b` v0 @kind this) @signature `Lcom/google/common/util/concurrent/a$b;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`com.google.common.util.concurrent.a$b` v0 @kind this, `com.google.common.util.concurrent.a$a` v1 @kind object) @signature `Lcom/google/common/util/concurrent/a$b;.<init>:(Lcom/google/common/util/concurrent/a$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {

  # return;
}
procedure `boolean` `a`(`com.google.common.util.concurrent.a` v0 @kind object, `com.google.common.util.concurrent.a$e` v1 @kind object, `com.google.common.util.concurrent.a$e` v2 @kind object) @signature `Lcom/google/common/util/concurrent/a$b;.a:(Lcom/google/common/util/concurrent/a;Lcom/google/common/util/concurrent/a$e;Lcom/google/common/util/concurrent/a$e;)Z` @AccessFlag ABSTRACT {

  # return;
}
procedure `boolean` `b`(`com.google.common.util.concurrent.a` v0 @kind object, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lcom/google/common/util/concurrent/a$b;.b:(Lcom/google/common/util/concurrent/a;Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag ABSTRACT {

  # return;
}
procedure `boolean` `c`(`com.google.common.util.concurrent.a` v0 @kind object, `com.google.common.util.concurrent.a$l` v1 @kind object, `com.google.common.util.concurrent.a$l` v2 @kind object) @signature `Lcom/google/common/util/concurrent/a$b;.c:(Lcom/google/common/util/concurrent/a;Lcom/google/common/util/concurrent/a$l;Lcom/google/common/util/concurrent/a$l;)Z` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `d`(`com.google.common.util.concurrent.a$l` v0 @kind object, `com.google.common.util.concurrent.a$l` v1 @kind object) @signature `Lcom/google/common/util/concurrent/a$b;.d:(Lcom/google/common/util/concurrent/a$l;Lcom/google/common/util/concurrent/a$l;)V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `e`(`com.google.common.util.concurrent.a$l` v0 @kind object, `java.lang.Thread` v1 @kind object) @signature `Lcom/google/common/util/concurrent/a$b;.e:(Lcom/google/common/util/concurrent/a$l;Ljava/lang/Thread;)V` @AccessFlag ABSTRACT {

  # return;
}
