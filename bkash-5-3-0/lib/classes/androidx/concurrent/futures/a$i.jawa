record `androidx.concurrent.futures.a$i` @kind class @AccessFlag FINAL {
  `java.lang.Thread` `androidx.concurrent.futures.a$i.a` @AccessFlag VOLATILE;
  `androidx.concurrent.futures.a$i` `androidx.concurrent.futures.a$i.b` @AccessFlag VOLATILE;
}
global `androidx.concurrent.futures.a$i` `@@androidx.concurrent.futures.a$i.c` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Landroidx/concurrent/futures/a$i;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`androidx.concurrent.futures.a$i` v2 @kind this) @signature `Landroidx/concurrent/futures/a$i;.<init>:()V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`androidx.concurrent.futures.a$i` v0 @kind this, `boolean` v1 ) @signature `Landroidx/concurrent/futures/a$i;.<init>:(Z)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `void` `a`(`androidx.concurrent.futures.a$i` v1 @kind this, `androidx.concurrent.futures.a$i` v2 @kind object) @signature `Landroidx/concurrent/futures/a$i;.a:(Landroidx/concurrent/futures/a$i;)V` @AccessFlag  {

  # return;
}
procedure `void` `b`(`androidx.concurrent.futures.a$i` v2 @kind this) @signature `Landroidx/concurrent/futures/a$i;.b:()V` @AccessFlag  {

  # return;
}
