record `okio.GzipSource` @kind class @AccessFlag PUBLIC_FINAL extends `okio.Source` @kind interface {
  `java.util.zip.CRC32` `okio.GzipSource.crc` @AccessFlag PRIVATE_FINAL;
  `java.util.zip.Inflater` `okio.GzipSource.inflater` @AccessFlag PRIVATE_FINAL;
  `okio.InflaterSource` `okio.GzipSource.inflaterSource` @AccessFlag PRIVATE_FINAL;
  `int` `okio.GzipSource.section` @AccessFlag PRIVATE;
  `okio.BufferedSource` `okio.GzipSource.source` @AccessFlag PRIVATE_FINAL;
}
global `byte` `@@okio.GzipSource.FCOMMENT` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte` `@@okio.GzipSource.FEXTRA` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte` `@@okio.GzipSource.FHCRC` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte` `@@okio.GzipSource.FNAME` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte` `@@okio.GzipSource.SECTION_BODY` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte` `@@okio.GzipSource.SECTION_DONE` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte` `@@okio.GzipSource.SECTION_HEADER` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte` `@@okio.GzipSource.SECTION_TRAILER` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`okio.GzipSource` v3 @kind this, `okio.Source` v4 @kind object @name `source`) @signature `Lokio/GzipSource;.<init>:(Lokio/Source;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L31189c.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3118a2.  v0:= 0I;
  #L3118a4.  v3.`okio.GzipSource.section` @type ^`int` := v0;
  #L3118a8.  v0:= new `java.util.zip.CRC32`;
  #L3118ac.  call `<init>`(v0) @signature `Ljava/util/zip/CRC32;.<init>:()V` @kind direct;
  #L3118b2.  v3.`okio.GzipSource.crc` @type ^`java.util.zip.CRC32` := v0 @kind object;
  #L3118b6.  if v4 != 0 then goto L3118ca;
  #L3118ba.  v0:= new `java.lang.IllegalArgumentException`;
  #L3118be.  v1:= "source == null" @kind object;
  #L3118c2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3118c8.  throw v0;
  #L3118ca.  v0:= new `java.util.zip.Inflater`;
  #L3118ce.  v1:= 1I;
  #L3118d0.  call `<init>`(v0, v1) @signature `Ljava/util/zip/Inflater;.<init>:(Z)V` @kind direct;
  #L3118d6.  v3.`okio.GzipSource.inflater` @type ^`java.util.zip.Inflater` := v0 @kind object;
  #L3118da.  call temp:= `buffer`(v4) @signature `Lokio/Okio;.buffer:(Lokio/Source;)Lokio/BufferedSource;` @kind static;
  #L3118e0.  v0:= temp @kind object;
  #L3118e2.  v3.`okio.GzipSource.source` @type ^`okio.BufferedSource` := v0 @kind object;
  #L3118e6.  v0:= new `okio.InflaterSource`;
  #L3118ea.  v1:= v3.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L3118ee.  v2:= v3.`okio.GzipSource.inflater` @type ^`java.util.zip.Inflater` @kind object;
  #L3118f2.  call `<init>`(v0, v1, v2) @signature `Lokio/InflaterSource;.<init>:(Lokio/BufferedSource;Ljava/util/zip/Inflater;)V` @kind direct;
  #L3118f8.  v3.`okio.GzipSource.inflaterSource` @type ^`okio.InflaterSource` := v0 @kind object;
  #L3118fc.  return @kind void;
}
procedure `void` `checkEqual`(`okio.GzipSource` v5 @kind this, `java.lang.String` v6 @kind object @name `name`, `int` v7 @name `expected`, `int` v8 @name `actual`) @signature `Lokio/GzipSource;.checkEqual:(Ljava/lang/String;II)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L311910.  if v8 == v7 then goto L311954;
  #L311914.  v0:= new `java.io.IOException`;
  #L311918.  v1:= "%s: actual 0x%08x != expected 0x%08x" @kind object;
  #L31191c.  v2:= 3I;
  #L31191e.  v2:= new `java.lang.Object`[v2];
  #L311922.  v3:= 0I;
  #L311924.  v2[v3]:= v6 @kind object;
  #L311928.  v3:= 1I;
  #L31192a.  call temp:= `valueOf`(v8) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L311930.  v4:= temp @kind object;
  #L311932.  v2[v3]:= v4 @kind object;
  #L311936.  v3:= 2I;
  #L311938.  call temp:= `valueOf`(v7) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L31193e.  v4:= temp @kind object;
  #L311940.  v2[v3]:= v4 @kind object;
  #L311944.  call temp:= `format`(v1, v2) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L31194a.  v1:= temp @kind object;
  #L31194c.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L311952.  throw v0;
  #L311954.  return @kind void;
}
procedure `void` `consumeHeader`(`okio.GzipSource` v12 @kind this) @signature `Lokio/GzipSource;.consumeHeader:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L311968.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L31196c.  v2:= 10L;
  #L311970.  call `require`(v0, v2) @signature `Lokio/BufferedSource;.require:(J)V` @kind interface;
  #L311976.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L31197a.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSource;.buffer:()Lokio/Buffer;` @kind interface;
  #L311980.  v0:= temp @kind object;
  #L311982.  v2:= 3L;
  #L311986.  call temp:= `getByte`(v0, v2) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L31198c.  v7:= temp;
  #L31198e.  v0:= v7 ^> 1;
  #L311992.  v0:= v0 ^& 1;
  #L311996.  v1:= 1I;
  #L311998.  if v0 != v1 then goto L311aa0;
  #L31199c.  v6:= 1I;
  #L31199e.  if v6 == 0 then goto L3119be;
  #L3119a2.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L3119a6.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSource;.buffer:()Lokio/Buffer;` @kind interface;
  #L3119ac.  v1:= temp @kind object;
  #L3119ae.  v2:= 0L;
  #L3119b2.  v4:= 10L;
  #L3119b6.  v0:= v12 @kind object;
  #L3119b8.  call `updateCrc`(v0, v1, v2, v4) @signature `Lokio/GzipSource;.updateCrc:(Lokio/Buffer;JJ)V` @kind direct;
  #L3119be.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L3119c2.  call temp:= `readShort`(v0) @signature `Lokio/BufferedSource;.readShort:()S` @kind interface;
  #L3119c8.  v8:= temp;
  #L3119ca.  v0:= "ID1ID2" @kind object;
  #L3119ce.  v1:= 8075I;
  #L3119d2.  call `checkEqual`(v12, v0, v1, v8) @signature `Lokio/GzipSource;.checkEqual:(Ljava/lang/String;II)V` @kind direct;
  #L3119d8.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L3119dc.  v2:= 8L;
  #L3119e0.  call `skip`(v0, v2) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L3119e6.  v0:= v7 ^> 2;
  #L3119ea.  v0:= v0 ^& 1;
  #L3119ee.  v1:= 1I;
  #L3119f0.  if v0 != v1 then goto L311a6c;
  #L3119f4.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L3119f8.  v2:= 2L;
  #L3119fc.  call `require`(v0, v2) @signature `Lokio/BufferedSource;.require:(J)V` @kind interface;
  #L311a02.  if v6 == 0 then goto L311a22;
  #L311a06.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L311a0a.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSource;.buffer:()Lokio/Buffer;` @kind interface;
  #L311a10.  v1:= temp @kind object;
  #L311a12.  v2:= 0L;
  #L311a16.  v4:= 2L;
  #L311a1a.  v0:= v12 @kind object;
  #L311a1c.  call `updateCrc`(v0, v1, v2, v4) @signature `Lokio/GzipSource;.updateCrc:(Lokio/Buffer;JJ)V` @kind direct;
  #L311a22.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L311a26.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSource;.buffer:()Lokio/Buffer;` @kind interface;
  #L311a2c.  v0:= temp @kind object;
  #L311a2e.  call temp:= `readShortLe`(v0) @signature `Lokio/Buffer;.readShortLe:()S` @kind virtual;
  #L311a34.  v9:= temp;
  #L311a36.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L311a3a.  v2:= (`long`) v9 @kind i2l;
  #L311a3c.  call `require`(v0, v2) @signature `Lokio/BufferedSource;.require:(J)V` @kind interface;
  #L311a42.  if v6 == 0 then goto L311a60;
  #L311a46.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L311a4a.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSource;.buffer:()Lokio/Buffer;` @kind interface;
  #L311a50.  v1:= temp @kind object;
  #L311a52.  v2:= 0L;
  #L311a56.  v4:= (`long`) v9 @kind i2l;
  #L311a58.  v0:= v12 @kind object;
  #L311a5a.  call `updateCrc`(v0, v1, v2, v4) @signature `Lokio/GzipSource;.updateCrc:(Lokio/Buffer;JJ)V` @kind direct;
  #L311a60.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L311a64.  v2:= (`long`) v9 @kind i2l;
  #L311a66.  call `skip`(v0, v2) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L311a6c.  v0:= v7 ^> 3;
  #L311a70.  v0:= v0 ^& 1;
  #L311a74.  v1:= 1I;
  #L311a76.  if v0 != v1 then goto L311ad8;
  #L311a7a.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L311a7e.  v1:= 0I;
  #L311a80.  call temp:= `indexOf`(v0, v1) @signature `Lokio/BufferedSource;.indexOf:(B)J` @kind interface;
  #L311a86.  v10:= temp @kind wide;
  #L311a88.  v0:= -1L;
  #L311a8c.  v0:= lcmp(v10, v0);
  #L311a90.  if v0 != 0 then goto L311aa6;
  #L311a94.  v0:= new `java.io.EOFException`;
  #L311a98.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L311a9e.  throw v0;
  #L311aa0.  v6:= 0I;
  #L311aa2.  goto L31199e;
  #L311aa6.  if v6 == 0 then goto L311ac8;
  #L311aaa.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L311aae.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSource;.buffer:()Lokio/Buffer;` @kind interface;
  #L311ab4.  v1:= temp @kind object;
  #L311ab6.  v2:= 0L;
  #L311aba.  v4:= 1L;
  #L311abe.  v4:= v4 + v10 @kind long;
  #L311ac0.  v0:= v12 @kind object;
  #L311ac2.  call `updateCrc`(v0, v1, v2, v4) @signature `Lokio/GzipSource;.updateCrc:(Lokio/Buffer;JJ)V` @kind direct;
  #L311ac8.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L311acc.  v2:= 1L;
  #L311ad0.  v2:= v2 + v10 @kind long;
  #L311ad2.  call `skip`(v0, v2) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L311ad8.  v0:= v7 ^> 4;
  #L311adc.  v0:= v0 ^& 1;
  #L311ae0.  v1:= 1I;
  #L311ae2.  if v0 != v1 then goto L311b3e;
  #L311ae6.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L311aea.  v1:= 0I;
  #L311aec.  call temp:= `indexOf`(v0, v1) @signature `Lokio/BufferedSource;.indexOf:(B)J` @kind interface;
  #L311af2.  v10:= temp @kind wide;
  #L311af4.  v0:= -1L;
  #L311af8.  v0:= lcmp(v10, v0);
  #L311afc.  if v0 != 0 then goto L311b0c;
  #L311b00.  v0:= new `java.io.EOFException`;
  #L311b04.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L311b0a.  throw v0;
  #L311b0c.  if v6 == 0 then goto L311b2e;
  #L311b10.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L311b14.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSource;.buffer:()Lokio/Buffer;` @kind interface;
  #L311b1a.  v1:= temp @kind object;
  #L311b1c.  v2:= 0L;
  #L311b20.  v4:= 1L;
  #L311b24.  v4:= v4 + v10 @kind long;
  #L311b26.  v0:= v12 @kind object;
  #L311b28.  call `updateCrc`(v0, v1, v2, v4) @signature `Lokio/GzipSource;.updateCrc:(Lokio/Buffer;JJ)V` @kind direct;
  #L311b2e.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L311b32.  v2:= 1L;
  #L311b36.  v2:= v2 + v10 @kind long;
  #L311b38.  call `skip`(v0, v2) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L311b3e.  if v6 == 0 then goto L311b72;
  #L311b42.  v0:= "FHCRC" @kind object;
  #L311b46.  v1:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L311b4a.  call temp:= `readShortLe`(v1) @signature `Lokio/BufferedSource;.readShortLe:()S` @kind interface;
  #L311b50.  v1:= temp;
  #L311b52.  v2:= v12.`okio.GzipSource.crc` @type ^`java.util.zip.CRC32` @kind object;
  #L311b56.  call temp:= `getValue`(v2) @signature `Ljava/util/zip/CRC32;.getValue:()J` @kind virtual;
  #L311b5c.  v2:= temp @kind wide;
  #L311b5e.  v2:= (`int`) v2 @kind l2i;
  #L311b60.  v2:= (`short`) v2 @kind i2s;
  #L311b62.  call `checkEqual`(v12, v0, v1, v2) @signature `Lokio/GzipSource;.checkEqual:(Ljava/lang/String;II)V` @kind direct;
  #L311b68.  v0:= v12.`okio.GzipSource.crc` @type ^`java.util.zip.CRC32` @kind object;
  #L311b6c.  call `reset`(v0) @signature `Ljava/util/zip/CRC32;.reset:()V` @kind virtual;
  #L311b72.  return @kind void;
}
procedure `void` `consumeTrailer`(`okio.GzipSource` v4 @kind this) @signature `Lokio/GzipSource;.consumeTrailer:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L311b84.  v0:= "CRC" @kind object;
  #L311b88.  v1:= v4.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L311b8c.  call temp:= `readIntLe`(v1) @signature `Lokio/BufferedSource;.readIntLe:()I` @kind interface;
  #L311b92.  v1:= temp;
  #L311b94.  v2:= v4.`okio.GzipSource.crc` @type ^`java.util.zip.CRC32` @kind object;
  #L311b98.  call temp:= `getValue`(v2) @signature `Ljava/util/zip/CRC32;.getValue:()J` @kind virtual;
  #L311b9e.  v2:= temp @kind wide;
  #L311ba0.  v2:= (`int`) v2 @kind l2i;
  #L311ba2.  call `checkEqual`(v4, v0, v1, v2) @signature `Lokio/GzipSource;.checkEqual:(Ljava/lang/String;II)V` @kind direct;
  #L311ba8.  v0:= "ISIZE" @kind object;
  #L311bac.  v1:= v4.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L311bb0.  call temp:= `readIntLe`(v1) @signature `Lokio/BufferedSource;.readIntLe:()I` @kind interface;
  #L311bb6.  v1:= temp;
  #L311bb8.  v2:= v4.`okio.GzipSource.inflater` @type ^`java.util.zip.Inflater` @kind object;
  #L311bbc.  call temp:= `getTotalOut`(v2) @signature `Ljava/util/zip/Inflater;.getTotalOut:()I` @kind virtual;
  #L311bc2.  v2:= temp;
  #L311bc4.  call `checkEqual`(v4, v0, v1, v2) @signature `Lokio/GzipSource;.checkEqual:(Ljava/lang/String;II)V` @kind direct;
  #L311bca.  return @kind void;
}
procedure `void` `updateCrc`(`okio.GzipSource` v6 @kind this, `okio.Buffer` v7 @kind object @name `buffer`, `long` v8 @name `offset`, `long` v10 @name `byteCount`) @signature `Lokio/GzipSource;.updateCrc:(Lokio/Buffer;JJ)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L311bdc.  v1:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L311be0.  v3:= v1.`okio.Segment.limit` @type ^`int`;
  #L311be4.  v4:= v1.`okio.Segment.pos` @type ^`int`;
  #L311be8.  v3:= v3 - v4 @kind int;
  #L311bea.  v4:= (`long`) v3 @kind i2l;
  #L311bec.  v3:= lcmp(v8, v4);
  #L311bf0.  if v3 < 0 then goto L311c08;
  #L311bf4.  v3:= v1.`okio.Segment.limit` @type ^`int`;
  #L311bf8.  v4:= v1.`okio.Segment.pos` @type ^`int`;
  #L311bfc.  v3:= v3 - v4 @kind int;
  #L311bfe.  v4:= (`long`) v3 @kind i2l;
  #L311c00.  v8:= v8 - v4 @kind long;
  #L311c02.  v1:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L311c06.  goto L311be0;
  #L311c08.  v4:= 0L;
  #L311c0c.  v3:= lcmp(v10, v4);
  #L311c10.  if v3 <= 0 then goto L311c4c;
  #L311c14.  v3:= v1.`okio.Segment.pos` @type ^`int`;
  #L311c18.  v4:= (`long`) v3 @kind i2l;
  #L311c1a.  v4:= v4 + v8 @kind long;
  #L311c1c.  v0:= (`int`) v4 @kind l2i;
  #L311c1e.  v3:= v1.`okio.Segment.limit` @type ^`int`;
  #L311c22.  v3:= v3 - v0 @kind int;
  #L311c24.  v4:= (`long`) v3 @kind i2l;
  #L311c26.  call temp:= `min`(v4, v10) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L311c2c.  v4:= temp @kind wide;
  #L311c2e.  v2:= (`int`) v4 @kind l2i;
  #L311c30.  v3:= v6.`okio.GzipSource.crc` @type ^`java.util.zip.CRC32` @kind object;
  #L311c34.  v4:= v1.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L311c38.  call `update`(v3, v4, v0, v2) @signature `Ljava/util/zip/CRC32;.update:([BII)V` @kind virtual;
  #L311c3e.  v4:= (`long`) v2 @kind i2l;
  #L311c40.  v10:= v10 - v4 @kind long;
  #L311c42.  v8:= 0L;
  #L311c46.  v1:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L311c4a.  goto L311c08;
  #L311c4c.  return @kind void;
}
procedure `void` `close`(`okio.GzipSource` v1 @kind this) @signature `Lokio/GzipSource;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L311c60.  v0:= v1.`okio.GzipSource.inflaterSource` @type ^`okio.InflaterSource` @kind object;
  #L311c64.  call `close`(v0) @signature `Lokio/InflaterSource;.close:()V` @kind virtual;
  #L311c6a.  return @kind void;
}
procedure `long` `read`(`okio.GzipSource` v10 @kind this, `okio.Buffer` v11 @kind object @name `sink`, `long` v12 @name `byteCount`) @signature `Lokio/GzipSource;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L311c7c.  v0:= -1L;
  #L311c80.  v8:= 2I;
  #L311c82.  v7:= 1I;
  #L311c84.  v4:= 0L;
  #L311c88.  v6:= lcmp(v12, v4);
  #L311c8c.  if v6 >= 0 then goto L311cc2;
  #L311c90.  v0:= new `java.lang.IllegalArgumentException`;
  #L311c94.  v1:= new `java.lang.StringBuilder`;
  #L311c98.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L311c9e.  v6:= "byteCount < 0: " @kind object;
  #L311ca2.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L311ca8.  v1:= temp @kind object;
  #L311caa.  call temp:= `append`(v1, v12) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L311cb0.  v1:= temp @kind object;
  #L311cb2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L311cb8.  v1:= temp @kind object;
  #L311cba.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L311cc0.  throw v0;
  #L311cc2.  v6:= lcmp(v12, v4);
  #L311cc6.  if v6 != 0 then goto L311ccc;
  #L311cca.  return v4 @kind wide;
  #L311ccc.  v6:= v10.`okio.GzipSource.section` @type ^`int`;
  #L311cd0.  if v6 != 0 then goto L311cde;
  #L311cd4.  call `consumeHeader`(v10) @signature `Lokio/GzipSource;.consumeHeader:()V` @kind direct;
  #L311cda.  v10.`okio.GzipSource.section` @type ^`int` := v7;
  #L311cde.  v6:= v10.`okio.GzipSource.section` @type ^`int`;
  #L311ce2.  if v6 != v7 then goto L311d0e;
  #L311ce6.  v2:= v11.`okio.Buffer.size` @type ^`long` @kind wide;
  #L311cea.  v6:= v10.`okio.GzipSource.inflaterSource` @type ^`okio.InflaterSource` @kind object;
  #L311cee.  call temp:= `read`(v6, v11, v12) @signature `Lokio/InflaterSource;.read:(Lokio/Buffer;J)J` @kind virtual;
  #L311cf4.  v4:= temp @kind wide;
  #L311cf6.  v6:= lcmp(v4, v0);
  #L311cfa.  if v6 == 0 then goto L311d0a;
  #L311cfe.  v0:= v10 @kind object;
  #L311d00.  v1:= v11 @kind object;
  #L311d02.  call `updateCrc`(v0, v1, v2, v4) @signature `Lokio/GzipSource;.updateCrc:(Lokio/Buffer;JJ)V` @kind direct;
  #L311d08.  goto L311cca;
  #L311d0a.  v10.`okio.GzipSource.section` @type ^`int` := v8;
  #L311d0e.  v6:= v10.`okio.GzipSource.section` @type ^`int`;
  #L311d12.  if v6 != v8 then goto L311d42;
  #L311d16.  call `consumeTrailer`(v10) @signature `Lokio/GzipSource;.consumeTrailer:()V` @kind direct;
  #L311d1c.  v6:= 3I;
  #L311d1e.  v10.`okio.GzipSource.section` @type ^`int` := v6;
  #L311d22.  v6:= v10.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L311d26.  call temp:= `exhausted`(v6) @signature `Lokio/BufferedSource;.exhausted:()Z` @kind interface;
  #L311d2c.  v6:= temp;
  #L311d2e.  if v6 != 0 then goto L311d42;
  #L311d32.  v0:= new `java.io.IOException`;
  #L311d36.  v1:= "gzip finished without exhausting source" @kind object;
  #L311d3a.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L311d40.  throw v0;
  #L311d42.  v4:= v0 @kind wide;
  #L311d44.  goto L311cca;
}
procedure `okio.Timeout` `timeout`(`okio.GzipSource` v1 @kind this) @signature `Lokio/GzipSource;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L311d58.  v0:= v1.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L311d5c.  call temp:= `timeout`(v0) @signature `Lokio/BufferedSource;.timeout:()Lokio/Timeout;` @kind interface;
  #L311d62.  v0:= temp @kind object;
  #L311d64.  return v0 @kind object;
}
