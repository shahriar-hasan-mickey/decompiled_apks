record `okio.RealBufferedSink` @kind class @AccessFlag FINAL extends `okio.BufferedSink` @kind interface {
  `okio.Buffer` `okio.RealBufferedSink.buffer` @AccessFlag PUBLIC_FINAL;
  `boolean` `okio.RealBufferedSink.closed` @AccessFlag ;
  `okio.Sink` `okio.RealBufferedSink.sink` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`okio.RealBufferedSink` v2 @kind this, `okio.Sink` v3 @kind object @name `sink`) @signature `Lokio/RealBufferedSink;.<init>:(Lokio/Sink;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L354bec.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L354bf2.  v0:= new `okio.Buffer`;
  #L354bf6.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L354bfc.  v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` := v0 @kind object;
  #L354c00.  if v3 != 0 then goto L354c14;
  #L354c04.  v0:= new `java.lang.IllegalArgumentException`;
  #L354c08.  v1:= "sink == null" @kind object;
  #L354c0c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L354c12.  throw v0;
  #L354c14.  v2.`okio.RealBufferedSink.sink` @type ^`okio.Sink` := v3 @kind object;
  #L354c18.  return @kind void;
}
procedure `okio.Buffer` `buffer`(`okio.RealBufferedSink` v1 @kind this) @signature `Lokio/RealBufferedSink;.buffer:()Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L354c2c.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L354c30.  return v0 @kind object;
}
procedure `void` `close`(`okio.RealBufferedSink` v6 @kind this) @signature `Lokio/RealBufferedSink;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L354c44.  v2:= v6.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L354c48.  if v2 == 0 then goto L354c4e;
  #L354c4c.  return @kind void;
  #L354c4e.  v1:= 0I;
  #L354c50.  v2:= v6.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L354c54.  v2:= v2.`okio.Buffer.size` @type ^`long` @kind wide;
  #L354c58.  v4:= 0L;
  #L354c5c.  v2:= lcmp(v2, v4);
  #L354c60.  if v2 <= 0 then goto L354c7a;
  #L354c64.  v2:= v6.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L354c68.  v3:= v6.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L354c6c.  v4:= v6.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L354c70.  v4:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L354c74.  call `write`(v2, v3, v4) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L354c7a.  v2:= v6.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L354c7e.  call `close`(v2) @signature `Lokio/Sink;.close:()V` @kind interface;
  #L354c84.  v2:= 1I;
  #L354c86.  v6.`okio.RealBufferedSink.closed` @type ^`boolean` := v2 @kind boolean;
  #L354c8a.  if v1 == 0 then goto L354c4c;
  #L354c8e.  call `sneakyRethrow`(v1) @signature `Lokio/Util;.sneakyRethrow:(Ljava/lang/Throwable;)V` @kind static;
  #L354c94.  goto L354c4c;
  #L354c96.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L354c98.  v1:= v0 @kind object;
  #L354c9a.  goto L354c7a;
  #L354c9c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L354c9e.  if v1 != 0 then goto L354c84;
  #L354ca2.  v1:= v0 @kind object;
  #L354ca4.  goto L354c84;
  catch `java.lang.Throwable` @[L354c50..L354c7a] goto L354c96;
  catch `java.lang.Throwable` @[L354c7a..L354c84] goto L354c9c;
}
procedure `okio.BufferedSink` `emit`(`okio.RealBufferedSink` v4 @kind this) @signature `Lokio/RealBufferedSink;.emit:()Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L354cd4.  v2:= v4.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L354cd8.  if v2 == 0 then goto L354cec;
  #L354cdc.  v2:= new `java.lang.IllegalStateException`;
  #L354ce0.  v3:= "closed" @kind object;
  #L354ce4.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L354cea.  throw v2;
  #L354cec.  v2:= v4.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L354cf0.  call temp:= `size`(v2) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L354cf6.  v0:= temp @kind wide;
  #L354cf8.  v2:= 0L;
  #L354cfc.  v2:= lcmp(v0, v2);
  #L354d00.  if v2 <= 0 then goto L354d12;
  #L354d04.  v2:= v4.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L354d08.  v3:= v4.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L354d0c.  call `write`(v2, v3, v0) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L354d12.  return v4 @kind object;
}
procedure `okio.BufferedSink` `emitCompleteSegments`(`okio.RealBufferedSink` v4 @kind this) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L354d24.  v2:= v4.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L354d28.  if v2 == 0 then goto L354d3c;
  #L354d2c.  v2:= new `java.lang.IllegalStateException`;
  #L354d30.  v3:= "closed" @kind object;
  #L354d34.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L354d3a.  throw v2;
  #L354d3c.  v2:= v4.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L354d40.  call temp:= `completeSegmentByteCount`(v2) @signature `Lokio/Buffer;.completeSegmentByteCount:()J` @kind virtual;
  #L354d46.  v0:= temp @kind wide;
  #L354d48.  v2:= 0L;
  #L354d4c.  v2:= lcmp(v0, v2);
  #L354d50.  if v2 <= 0 then goto L354d62;
  #L354d54.  v2:= v4.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L354d58.  v3:= v4.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L354d5c.  call `write`(v2, v3, v0) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L354d62.  return v4 @kind object;
}
procedure `void` `flush`(`okio.RealBufferedSink` v4 @kind this) @signature `Lokio/RealBufferedSink;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L354d74.  v0:= v4.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L354d78.  if v0 == 0 then goto L354d8c;
  #L354d7c.  v0:= new `java.lang.IllegalStateException`;
  #L354d80.  v1:= "closed" @kind object;
  #L354d84.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L354d8a.  throw v0;
  #L354d8c.  v0:= v4.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L354d90.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L354d94.  v2:= 0L;
  #L354d98.  v0:= lcmp(v0, v2);
  #L354d9c.  if v0 <= 0 then goto L354db6;
  #L354da0.  v0:= v4.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L354da4.  v1:= v4.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L354da8.  v2:= v4.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L354dac.  v2:= v2.`okio.Buffer.size` @type ^`long` @kind wide;
  #L354db0.  call `write`(v0, v1, v2) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L354db6.  v0:= v4.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L354dba.  call `flush`(v0) @signature `Lokio/Sink;.flush:()V` @kind interface;
  #L354dc0.  return @kind void;
}
procedure `java.io.OutputStream` `outputStream`(`okio.RealBufferedSink` v1 @kind this) @signature `Lokio/RealBufferedSink;.outputStream:()Ljava/io/OutputStream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L354dd4.  v0:= new `okio.RealBufferedSink$1`;
  #L354dd8.  call `<init>`(v0, v1) @signature `Lokio/RealBufferedSink$1;.<init>:(Lokio/RealBufferedSink;)V` @kind direct;
  #L354dde.  return v0 @kind object;
}
procedure `okio.Timeout` `timeout`(`okio.RealBufferedSink` v1 @kind this) @signature `Lokio/RealBufferedSink;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L354df0.  v0:= v1.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L354df4.  call temp:= `timeout`(v0) @signature `Lokio/Sink;.timeout:()Lokio/Timeout;` @kind interface;
  #L354dfa.  v0:= temp @kind object;
  #L354dfc.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okio.RealBufferedSink` v2 @kind this) @signature `Lokio/RealBufferedSink;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L354e10.  v0:= new `java.lang.StringBuilder`;
  #L354e14.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L354e1a.  v1:= "buffer(" @kind object;
  #L354e1e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L354e24.  v0:= temp @kind object;
  #L354e26.  v1:= v2.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L354e2a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L354e30.  v0:= temp @kind object;
  #L354e32.  v1:= ")" @kind object;
  #L354e36.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L354e3c.  v0:= temp @kind object;
  #L354e3e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L354e44.  v0:= temp @kind object;
  #L354e46.  return v0 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.RealBufferedSink` v2 @kind this, `okio.ByteString` v3 @kind object @name `byteString`) @signature `Lokio/RealBufferedSink;.write:(Lokio/ByteString;)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L354e58.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L354e5c.  if v0 == 0 then goto L354e70;
  #L354e60.  v0:= new `java.lang.IllegalStateException`;
  #L354e64.  v1:= "closed" @kind object;
  #L354e68.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L354e6e.  throw v0;
  #L354e70.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L354e74.  call temp:= `write`(v0, v3) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/Buffer;` @kind virtual;
  #L354e7a.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L354e80.  v0:= temp @kind object;
  #L354e82.  return v0 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.RealBufferedSink` v4 @kind this, `okio.Source` v5 @kind object @name `source`, `long` v6 @name `byteCount`) @signature `Lokio/RealBufferedSink;.write:(Lokio/Source;J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L354e94.  v2:= 0L;
  #L354e98.  v2:= lcmp(v6, v2);
  #L354e9c.  if v2 <= 0 then goto L354ece;
  #L354ea0.  v2:= v4.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L354ea4.  call temp:= `read`(v5, v2, v6) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L354eaa.  v0:= temp @kind wide;
  #L354eac.  v2:= -1L;
  #L354eb0.  v2:= lcmp(v0, v2);
  #L354eb4.  if v2 != 0 then goto L354ec4;
  #L354eb8.  v2:= new `java.io.EOFException`;
  #L354ebc.  call `<init>`(v2) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L354ec2.  throw v2;
  #L354ec4.  v6:= v6 - v0 @kind long;
  #L354ec6.  call temp:= `emitCompleteSegments`(v4) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L354ecc.  goto L354e94;
  #L354ece.  return v4 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.RealBufferedSink` v2 @kind this, `byte`[] v3 @kind object @name `source`) @signature `Lokio/RealBufferedSink;.write:([B)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L354ee0.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L354ee4.  if v0 == 0 then goto L354ef8;
  #L354ee8.  v0:= new `java.lang.IllegalStateException`;
  #L354eec.  v1:= "closed" @kind object;
  #L354ef0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L354ef6.  throw v0;
  #L354ef8.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L354efc.  call temp:= `write`(v0, v3) @signature `Lokio/Buffer;.write:([B)Lokio/Buffer;` @kind virtual;
  #L354f02.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L354f08.  v0:= temp @kind object;
  #L354f0a.  return v0 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.RealBufferedSink` v2 @kind this, `byte`[] v3 @kind object @name `source`, `int` v4 @name `offset`, `int` v5 @name `byteCount`) @signature `Lokio/RealBufferedSink;.write:([BII)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L354f1c.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L354f20.  if v0 == 0 then goto L354f34;
  #L354f24.  v0:= new `java.lang.IllegalStateException`;
  #L354f28.  v1:= "closed" @kind object;
  #L354f2c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L354f32.  throw v0;
  #L354f34.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L354f38.  call temp:= `write`(v0, v3, v4, v5) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @kind virtual;
  #L354f3e.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L354f44.  v0:= temp @kind object;
  #L354f46.  return v0 @kind object;
}
procedure `void` `write`(`okio.RealBufferedSink` v2 @kind this, `okio.Buffer` v3 @kind object @name `source`, `long` v4 @name `byteCount`) @signature `Lokio/RealBufferedSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L354f58.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L354f5c.  if v0 == 0 then goto L354f70;
  #L354f60.  v0:= new `java.lang.IllegalStateException`;
  #L354f64.  v1:= "closed" @kind object;
  #L354f68.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L354f6e.  throw v0;
  #L354f70.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L354f74.  call `write`(v0, v3, v4) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L354f7a.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L354f80.  return @kind void;
}
procedure `long` `writeAll`(`okio.RealBufferedSink` v8 @kind this, `okio.Source` v9 @kind object @name `source`) @signature `Lokio/RealBufferedSink;.writeAll:(Lokio/Source;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L354f94.  if v9 != 0 then goto L354fa8;
  #L354f98.  v4:= new `java.lang.IllegalArgumentException`;
  #L354f9c.  v5:= "source == null" @kind object;
  #L354fa0.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L354fa6.  throw v4;
  #L354fa8.  v2:= 0L;
  #L354fac.  v4:= v8.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L354fb0.  v6:= 8192L;
  #L354fb4.  call temp:= `read`(v9, v4, v6) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L354fba.  v0:= temp @kind wide;
  #L354fbc.  v4:= -1L;
  #L354fc0.  v4:= lcmp(v0, v4);
  #L354fc4.  if v4 == 0 then goto L354fd2;
  #L354fc8.  v2:= v2 + v0 @kind long;
  #L354fca.  call temp:= `emitCompleteSegments`(v8) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L354fd0.  goto L354fac;
  #L354fd2.  return v2 @kind wide;
}
procedure `okio.BufferedSink` `writeByte`(`okio.RealBufferedSink` v2 @kind this, `int` v3 @name `b`) @signature `Lokio/RealBufferedSink;.writeByte:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L354fe4.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L354fe8.  if v0 == 0 then goto L354ffc;
  #L354fec.  v0:= new `java.lang.IllegalStateException`;
  #L354ff0.  v1:= "closed" @kind object;
  #L354ff4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L354ffa.  throw v0;
  #L354ffc.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L355000.  call temp:= `writeByte`(v0, v3) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L355006.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L35500c.  v0:= temp @kind object;
  #L35500e.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeDecimalLong`(`okio.RealBufferedSink` v3 @kind this, `long` v4 @name `v`) @signature `Lokio/RealBufferedSink;.writeDecimalLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L355020.  v0:= v3.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L355024.  if v0 == 0 then goto L355038;
  #L355028.  v0:= new `java.lang.IllegalStateException`;
  #L35502c.  v1:= "closed" @kind object;
  #L355030.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L355036.  throw v0;
  #L355038.  v0:= v3.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L35503c.  call temp:= `writeDecimalLong`(v0, v4) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/Buffer;` @kind virtual;
  #L355042.  call temp:= `emitCompleteSegments`(v3) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L355048.  v0:= temp @kind object;
  #L35504a.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeHexadecimalUnsignedLong`(`okio.RealBufferedSink` v3 @kind this, `long` v4 @name `v`) @signature `Lokio/RealBufferedSink;.writeHexadecimalUnsignedLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L35505c.  v0:= v3.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L355060.  if v0 == 0 then goto L355074;
  #L355064.  v0:= new `java.lang.IllegalStateException`;
  #L355068.  v1:= "closed" @kind object;
  #L35506c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L355072.  throw v0;
  #L355074.  v0:= v3.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L355078.  call temp:= `writeHexadecimalUnsignedLong`(v0, v4) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/Buffer;` @kind virtual;
  #L35507e.  call temp:= `emitCompleteSegments`(v3) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L355084.  v0:= temp @kind object;
  #L355086.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeInt`(`okio.RealBufferedSink` v2 @kind this, `int` v3 @name `i`) @signature `Lokio/RealBufferedSink;.writeInt:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L355098.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L35509c.  if v0 == 0 then goto L3550b0;
  #L3550a0.  v0:= new `java.lang.IllegalStateException`;
  #L3550a4.  v1:= "closed" @kind object;
  #L3550a8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3550ae.  throw v0;
  #L3550b0.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L3550b4.  call temp:= `writeInt`(v0, v3) @signature `Lokio/Buffer;.writeInt:(I)Lokio/Buffer;` @kind virtual;
  #L3550ba.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L3550c0.  v0:= temp @kind object;
  #L3550c2.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeIntLe`(`okio.RealBufferedSink` v2 @kind this, `int` v3 @name `i`) @signature `Lokio/RealBufferedSink;.writeIntLe:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3550d4.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L3550d8.  if v0 == 0 then goto L3550ec;
  #L3550dc.  v0:= new `java.lang.IllegalStateException`;
  #L3550e0.  v1:= "closed" @kind object;
  #L3550e4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3550ea.  throw v0;
  #L3550ec.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L3550f0.  call temp:= `writeIntLe`(v0, v3) @signature `Lokio/Buffer;.writeIntLe:(I)Lokio/Buffer;` @kind virtual;
  #L3550f6.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L3550fc.  v0:= temp @kind object;
  #L3550fe.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeLong`(`okio.RealBufferedSink` v3 @kind this, `long` v4 @name `v`) @signature `Lokio/RealBufferedSink;.writeLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L355110.  v0:= v3.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L355114.  if v0 == 0 then goto L355128;
  #L355118.  v0:= new `java.lang.IllegalStateException`;
  #L35511c.  v1:= "closed" @kind object;
  #L355120.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L355126.  throw v0;
  #L355128.  v0:= v3.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L35512c.  call temp:= `writeLong`(v0, v4) @signature `Lokio/Buffer;.writeLong:(J)Lokio/Buffer;` @kind virtual;
  #L355132.  call temp:= `emitCompleteSegments`(v3) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L355138.  v0:= temp @kind object;
  #L35513a.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeLongLe`(`okio.RealBufferedSink` v3 @kind this, `long` v4 @name `v`) @signature `Lokio/RealBufferedSink;.writeLongLe:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L35514c.  v0:= v3.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L355150.  if v0 == 0 then goto L355164;
  #L355154.  v0:= new `java.lang.IllegalStateException`;
  #L355158.  v1:= "closed" @kind object;
  #L35515c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L355162.  throw v0;
  #L355164.  v0:= v3.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L355168.  call temp:= `writeLongLe`(v0, v4) @signature `Lokio/Buffer;.writeLongLe:(J)Lokio/Buffer;` @kind virtual;
  #L35516e.  call temp:= `emitCompleteSegments`(v3) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L355174.  v0:= temp @kind object;
  #L355176.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeShort`(`okio.RealBufferedSink` v2 @kind this, `int` v3 @name `s`) @signature `Lokio/RealBufferedSink;.writeShort:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L355188.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L35518c.  if v0 == 0 then goto L3551a0;
  #L355190.  v0:= new `java.lang.IllegalStateException`;
  #L355194.  v1:= "closed" @kind object;
  #L355198.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L35519e.  throw v0;
  #L3551a0.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L3551a4.  call temp:= `writeShort`(v0, v3) @signature `Lokio/Buffer;.writeShort:(I)Lokio/Buffer;` @kind virtual;
  #L3551aa.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L3551b0.  v0:= temp @kind object;
  #L3551b2.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeShortLe`(`okio.RealBufferedSink` v2 @kind this, `int` v3 @name `s`) @signature `Lokio/RealBufferedSink;.writeShortLe:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3551c4.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L3551c8.  if v0 == 0 then goto L3551dc;
  #L3551cc.  v0:= new `java.lang.IllegalStateException`;
  #L3551d0.  v1:= "closed" @kind object;
  #L3551d4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3551da.  throw v0;
  #L3551dc.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L3551e0.  call temp:= `writeShortLe`(v0, v3) @signature `Lokio/Buffer;.writeShortLe:(I)Lokio/Buffer;` @kind virtual;
  #L3551e6.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L3551ec.  v0:= temp @kind object;
  #L3551ee.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeString`(`okio.RealBufferedSink` v2 @kind this, `java.lang.String` v3 @kind object @name `string`, `int` v4 @name `beginIndex`, `int` v5 @name `endIndex`, `java.nio.charset.Charset` v6 @kind object @name `charset`) @signature `Lokio/RealBufferedSink;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L355200.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L355204.  if v0 == 0 then goto L355218;
  #L355208.  v0:= new `java.lang.IllegalStateException`;
  #L35520c.  v1:= "closed" @kind object;
  #L355210.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L355216.  throw v0;
  #L355218.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L35521c.  call temp:= `writeString`(v0, v3, v4, v5, v6) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L355222.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L355228.  v0:= temp @kind object;
  #L35522a.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeString`(`okio.RealBufferedSink` v2 @kind this, `java.lang.String` v3 @kind object @name `string`, `java.nio.charset.Charset` v4 @kind object @name `charset`) @signature `Lokio/RealBufferedSink;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L35523c.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L355240.  if v0 == 0 then goto L355254;
  #L355244.  v0:= new `java.lang.IllegalStateException`;
  #L355248.  v1:= "closed" @kind object;
  #L35524c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L355252.  throw v0;
  #L355254.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L355258.  call temp:= `writeString`(v0, v3, v4) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L35525e.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L355264.  v0:= temp @kind object;
  #L355266.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeUtf8`(`okio.RealBufferedSink` v2 @kind this, `java.lang.String` v3 @kind object @name `string`) @signature `Lokio/RealBufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L355278.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L35527c.  if v0 == 0 then goto L355290;
  #L355280.  v0:= new `java.lang.IllegalStateException`;
  #L355284.  v1:= "closed" @kind object;
  #L355288.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L35528e.  throw v0;
  #L355290.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L355294.  call temp:= `writeUtf8`(v0, v3) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @kind virtual;
  #L35529a.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L3552a0.  v0:= temp @kind object;
  #L3552a2.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeUtf8`(`okio.RealBufferedSink` v2 @kind this, `java.lang.String` v3 @kind object @name `string`, `int` v4 @name `beginIndex`, `int` v5 @name `endIndex`) @signature `Lokio/RealBufferedSink;.writeUtf8:(Ljava/lang/String;II)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3552b4.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L3552b8.  if v0 == 0 then goto L3552cc;
  #L3552bc.  v0:= new `java.lang.IllegalStateException`;
  #L3552c0.  v1:= "closed" @kind object;
  #L3552c4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3552ca.  throw v0;
  #L3552cc.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L3552d0.  call temp:= `writeUtf8`(v0, v3, v4, v5) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @kind virtual;
  #L3552d6.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L3552dc.  v0:= temp @kind object;
  #L3552de.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeUtf8CodePoint`(`okio.RealBufferedSink` v2 @kind this, `int` v3 @name `codePoint`) @signature `Lokio/RealBufferedSink;.writeUtf8CodePoint:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3552f0.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L3552f4.  if v0 == 0 then goto L355308;
  #L3552f8.  v0:= new `java.lang.IllegalStateException`;
  #L3552fc.  v1:= "closed" @kind object;
  #L355300.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L355306.  throw v0;
  #L355308.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L35530c.  call temp:= `writeUtf8CodePoint`(v0, v3) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/Buffer;` @kind virtual;
  #L355312.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L355318.  v0:= temp @kind object;
  #L35531a.  return v0 @kind object;
}
