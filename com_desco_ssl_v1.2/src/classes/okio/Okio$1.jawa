record `okio.Okio$1` @kind class @AccessFlag FINAL extends `okio.Sink` @kind interface {
  `java.io.OutputStream` `okio.Okio$1.val$out` @AccessFlag FINAL_SYNTHETIC;
  `okio.Timeout` `okio.Okio$1.val$timeout` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okio.Okio$1` v0 @kind this, `okio.Timeout` v1 @kind object, `java.io.OutputStream` v2 @kind object) @signature `Lokio/Okio$1;.<init>:(Lokio/Timeout;Ljava/io/OutputStream;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L31204c.  v0.`okio.Okio$1.val$timeout` @type ^`okio.Timeout` := v1 @kind object;
  #L312050.  v0.`okio.Okio$1.val$out` @type ^`java.io.OutputStream` := v2 @kind object;
  #L312054.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L31205a.  return @kind void;
}
procedure `void` `close`(`okio.Okio$1` v1 @kind this) @signature `Lokio/Okio$1;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L31206c.  v0:= v1.`okio.Okio$1.val$out` @type ^`java.io.OutputStream` @kind object;
  #L312070.  call `close`(v0) @signature `Ljava/io/OutputStream;.close:()V` @kind virtual;
  #L312076.  return @kind void;
}
procedure `void` `flush`(`okio.Okio$1` v1 @kind this) @signature `Lokio/Okio$1;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L312088.  v0:= v1.`okio.Okio$1.val$out` @type ^`java.io.OutputStream` @kind object;
  #L31208c.  call `flush`(v0) @signature `Ljava/io/OutputStream;.flush:()V` @kind virtual;
  #L312092.  return @kind void;
}
procedure `okio.Timeout` `timeout`(`okio.Okio$1` v1 @kind this) @signature `Lokio/Okio$1;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3120a4.  v0:= v1.`okio.Okio$1.val$timeout` @type ^`okio.Timeout` @kind object;
  #L3120a8.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okio.Okio$1` v2 @kind this) @signature `Lokio/Okio$1;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3120bc.  v0:= new `java.lang.StringBuilder`;
  #L3120c0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3120c6.  v1:= "sink(" @kind object;
  #L3120ca.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3120d0.  v0:= temp @kind object;
  #L3120d2.  v1:= v2.`okio.Okio$1.val$out` @type ^`java.io.OutputStream` @kind object;
  #L3120d6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3120dc.  v0:= temp @kind object;
  #L3120de.  v1:= ")" @kind object;
  #L3120e2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3120e8.  v0:= temp @kind object;
  #L3120ea.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3120f0.  v0:= temp @kind object;
  #L3120f2.  return v0 @kind object;
}
procedure `void` `write`(`okio.Okio$1` v8 @kind this, `okio.Buffer` v9 @kind object @name `source`, `long` v10 @name `byteCount`) @signature `Lokio/Okio$1;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L312104.  v2:= 0L;
  #L312108.  v0:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L31210c.  v4:= v10 @kind wide;
  #L31210e.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L312114.  v0:= lcmp(v10, v2);
  #L312118.  if v0 <= 0 then goto L31218c;
  #L31211c.  v0:= v8.`okio.Okio$1.val$timeout` @type ^`okio.Timeout` @kind object;
  #L312120.  call `throwIfReached`(v0) @signature `Lokio/Timeout;.throwIfReached:()V` @kind virtual;
  #L312126.  v6:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L31212a.  v0:= v6.`okio.Segment.limit` @type ^`int`;
  #L31212e.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L312132.  v0:= v0 - v1 @kind int;
  #L312134.  v0:= (`long`) v0 @kind i2l;
  #L312136.  call temp:= `min`(v10, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L31213c.  v0:= temp @kind wide;
  #L31213e.  v7:= (`int`) v0 @kind l2i;
  #L312140.  v0:= v8.`okio.Okio$1.val$out` @type ^`java.io.OutputStream` @kind object;
  #L312144.  v1:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L312148.  v4:= v6.`okio.Segment.pos` @type ^`int`;
  #L31214c.  call `write`(v0, v1, v4, v7) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L312152.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L312156.  v0:= v0 + v7 @kind int;
  #L312158.  v6.`okio.Segment.pos` @type ^`int` := v0;
  #L31215c.  v0:= (`long`) v7 @kind i2l;
  #L31215e.  v10:= v10 - v0 @kind long;
  #L312160.  v0:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L312164.  v4:= (`long`) v7 @kind i2l;
  #L312166.  v0:= v0 - v4 @kind long;
  #L312168.  v9.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L31216c.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L312170.  v1:= v6.`okio.Segment.limit` @type ^`int`;
  #L312174.  if v0 != v1 then goto L312114;
  #L312178.  call temp:= `pop`(v6) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L31217e.  v0:= temp @kind object;
  #L312180.  v9.`okio.Buffer.head` @type ^`okio.Segment` := v0 @kind object;
  #L312184.  call `recycle`(v6) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L31218a.  goto L312114;
  #L31218c.  return @kind void;
}
