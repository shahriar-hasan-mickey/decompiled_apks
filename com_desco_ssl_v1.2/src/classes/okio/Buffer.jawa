record `okio.Buffer` @kind class @AccessFlag PUBLIC_FINAL extends `okio.BufferedSource` @kind interface, `okio.BufferedSink` @kind interface, `java.lang.Cloneable` @kind interface {
  `okio.Segment` `okio.Buffer.head` @AccessFlag ;
  `long` `okio.Buffer.size` @AccessFlag ;
}
global `byte`[] `@@okio.Buffer.DIGITS` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@okio.Buffer.REPLACEMENT_CHARACTER` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokio/Buffer;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3516d4.  v0:= 16I;
  #L3516d8.  v0:= new `byte`[v0];
  #L3516dc.  goto L3516e8;
  #L3516e2.  `@@okio.Buffer.DIGITS` @type ^`byte`[] := v0 @kind object;
  #L3516e6.  return @kind void;
  #L3516e8.  v0:= (48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 97I, 98I, 99I, 100I, 101I, 102I) @kind object;
  #L3516ff.  goto L3516e2;
}
procedure `void` `<init>`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L351710.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L351716.  return @kind void;
}
procedure `okio.ByteString` `digest`(`okio.Buffer` v7 @kind this, `java.lang.String` v8 @kind object @name `algorithm`) @signature `Lokio/Buffer;.digest:(Ljava/lang/String;)Lokio/ByteString;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L351728.  call temp:= `getInstance`(v8) @signature `Ljava/security/MessageDigest;.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;` @kind static;
  #L35172e.  v1:= temp @kind object;
  #L351730.  v3:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L351734.  v3:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L351738.  v4:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L35173c.  v4:= v4.`okio.Segment.pos` @type ^`int`;
  #L351740.  v5:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L351744.  v5:= v5.`okio.Segment.limit` @type ^`int`;
  #L351748.  v6:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L35174c.  v6:= v6.`okio.Segment.pos` @type ^`int`;
  #L351750.  v5:= v5 - v6 @kind int;
  #L351752.  call `update`(v1, v3, v4, v5) @signature `Ljava/security/MessageDigest;.update:([BII)V` @kind virtual;
  #L351758.  v3:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L35175c.  v2:= v3.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L351760.  v3:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L351764.  if v2 == v3 then goto L351786;
  #L351768.  v3:= v2.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L35176c.  v4:= v2.`okio.Segment.pos` @type ^`int`;
  #L351770.  v5:= v2.`okio.Segment.limit` @type ^`int`;
  #L351774.  v6:= v2.`okio.Segment.pos` @type ^`int`;
  #L351778.  v5:= v5 - v6 @kind int;
  #L35177a.  call `update`(v1, v3, v4, v5) @signature `Ljava/security/MessageDigest;.update:([BII)V` @kind virtual;
  #L351780.  v2:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L351784.  goto L351760;
  #L351786.  call temp:= `digest`(v1) @signature `Ljava/security/MessageDigest;.digest:()[B` @kind virtual;
  #L35178c.  v3:= temp @kind object;
  #L35178e.  call temp:= `of`(v3) @signature `Lokio/ByteString;.of:([B)Lokio/ByteString;` @kind static;
  #L351794.  v3:= temp @kind object;
  #L351796.  return v3 @kind object;
  #L351798.  v0:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L35179a.  v3:= new `java.lang.AssertionError`;
  #L35179e.  call `<init>`(v3) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L3517a4.  throw v3;
  catch `java.security.NoSuchAlgorithmException` @[L351728..L351794] goto L351798;
}
procedure `boolean` `rangeEquals`(`okio.Buffer` v5 @kind this, `okio.Segment` v6 @kind object @name `segment`, `int` v7 @name `segmentPos`, `okio.ByteString` v8 @kind object @name `bytes`, `int` v9 @name `bytesOffset`, `int` v10 @name `bytesLimit`) @signature `Lokio/Buffer;.rangeEquals:(Lokio/Segment;ILokio/ByteString;II)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3517c8.  v2:= v6.`okio.Segment.limit` @type ^`int`;
  #L3517cc.  v0:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L3517d0.  v1:= v9;
  #L3517d2.  if v1 >= v10 then goto L351808;
  #L3517d6.  if v7 != v2 then goto L3517ea;
  #L3517da.  v6:= v6.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L3517de.  v0:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L3517e2.  v7:= v6.`okio.Segment.pos` @type ^`int`;
  #L3517e6.  v2:= v6.`okio.Segment.limit` @type ^`int`;
  #L3517ea.  v3:= v0[v7] @kind byte;
  #L3517ee.  call temp:= `getByte`(v8, v1) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L3517f4.  v4:= temp;
  #L3517f6.  if v3 == v4 then goto L3517fe;
  #L3517fa.  v3:= 0I;
  #L3517fc.  return v3;
  #L3517fe.  v7:= v7 + 1;
  #L351802.  v1:= v1 + 1;
  #L351806.  goto L3517d2;
  #L351808.  v3:= 1I;
  #L35180a.  goto L3517fc;
}
procedure `void` `readFrom`(`okio.Buffer` v8 @kind this, `java.io.InputStream` v9 @kind object @name `in`, `long` v10 @name `byteCount`, `boolean` v12 @name `forever`) @signature `Lokio/Buffer;.readFrom:(Ljava/io/InputStream;JZ)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L35181c.  if v9 != 0 then goto L35184a;
  #L351820.  v3:= new `java.lang.IllegalArgumentException`;
  #L351824.  v4:= "in == null" @kind object;
  #L351828.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L35182e.  throw v3;
  #L351830.  v3:= v2.`okio.Segment.limit` @type ^`int`;
  #L351834.  v3:= v3 + v0 @kind int;
  #L351836.  v2.`okio.Segment.limit` @type ^`int` := v3;
  #L35183a.  v4:= v8.`okio.Buffer.size` @type ^`long` @kind wide;
  #L35183e.  v6:= (`long`) v0 @kind i2l;
  #L351840.  v4:= v4 + v6 @kind long;
  #L351842.  v8.`okio.Buffer.size` @type ^`long` := v4 @kind wide;
  #L351846.  v4:= (`long`) v0 @kind i2l;
  #L351848.  v10:= v10 - v4 @kind long;
  #L35184a.  v4:= 0L;
  #L35184e.  v3:= lcmp(v10, v4);
  #L351852.  if v3 > 0 then goto L35185a;
  #L351856.  if v12 == 0 then goto L351892;
  #L35185a.  v3:= 1I;
  #L35185c.  call temp:= `writableSegment`(v8, v3) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L351862.  v2:= temp @kind object;
  #L351864.  v3:= v2.`okio.Segment.limit` @type ^`int`;
  #L351868.  v3:= v3 - 8192;
  #L35186c.  v4:= (`long`) v3 @kind i2l;
  #L35186e.  call temp:= `min`(v10, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L351874.  v4:= temp @kind wide;
  #L351876.  v1:= (`int`) v4 @kind l2i;
  #L351878.  v3:= v2.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L35187c.  v4:= v2.`okio.Segment.limit` @type ^`int`;
  #L351880.  call temp:= `read`(v9, v3, v4, v1) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L351886.  v0:= temp;
  #L351888.  v3:= -1I;
  #L35188a.  if v0 != v3 then goto L351830;
  #L35188e.  if v12 == 0 then goto L351894;
  #L351892.  return @kind void;
  #L351894.  v3:= new `java.io.EOFException`;
  #L351898.  call `<init>`(v3) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L35189e.  throw v3;
}
procedure `okio.Buffer` `buffer`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.buffer:()Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;

  #L3518b0.  return v0 @kind object;
}
procedure `void` `clear`(`okio.Buffer` v4 @kind this) @signature `Lokio/Buffer;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3518c4.  v2:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L3518c8.  call `skip`(v4, v2) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L3518ce.  return @kind void;
  #L3518d0.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L3518d2.  v1:= new `java.lang.AssertionError`;
  #L3518d6.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3518dc.  throw v1;
  catch `java.io.EOFException` @[L3518c4..L3518ce] goto L3518d0;
}
procedure `java.lang.Object` `clone`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L351900.  call temp:= `clone`(v1) @signature `Lokio/Buffer;.clone:()Lokio/Buffer;` @kind virtual;
  #L351906.  v0:= temp @kind object;
  #L351908.  return v0 @kind object;
}
procedure `okio.Buffer` `clone`(`okio.Buffer` v6 @kind this) @signature `Lokio/Buffer;.clone:()Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L35191c.  v0:= new `okio.Buffer`;
  #L351920.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L351926.  v2:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L35192a.  v4:= 0L;
  #L35192e.  v2:= lcmp(v2, v4);
  #L351932.  if v2 != 0 then goto L351938;
  #L351936.  return v0 @kind object;
  #L351938.  v2:= new `okio.Segment`;
  #L35193c.  v3:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L351940.  call `<init>`(v2, v3) @signature `Lokio/Segment;.<init>:(Lokio/Segment;)V` @kind direct;
  #L351946.  v0.`okio.Buffer.head` @type ^`okio.Segment` := v2 @kind object;
  #L35194a.  v2:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L35194e.  v3:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L351952.  v4:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L351956.  v3.`okio.Segment.prev` @type ^`okio.Segment` := v4 @kind object;
  #L35195a.  v2.`okio.Segment.next` @type ^`okio.Segment` := v4 @kind object;
  #L35195e.  v2:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L351962.  v1:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L351966.  v2:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L35196a.  if v1 == v2 then goto L35198c;
  #L35196e.  v2:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L351972.  v2:= v2.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L351976.  v3:= new `okio.Segment`;
  #L35197a.  call `<init>`(v3, v1) @signature `Lokio/Segment;.<init>:(Lokio/Segment;)V` @kind direct;
  #L351980.  call temp:= `push`(v2, v3) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L351986.  v1:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L35198a.  goto L351966;
  #L35198c.  v2:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L351990.  v0.`okio.Buffer.size` @type ^`long` := v2 @kind wide;
  #L351994.  goto L351936;
}
procedure `void` `close`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.close:()V` @AccessFlag PUBLIC {
    temp;

  #L3519a8.  return @kind void;
}
procedure `long` `completeSegmentByteCount`(`okio.Buffer` v6 @kind this) @signature `Lokio/Buffer;.completeSegmentByteCount:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3519bc.  v4:= 0L;
  #L3519c0.  v0:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L3519c4.  v3:= lcmp(v0, v4);
  #L3519c8.  if v3 != 0 then goto L3519ce;
  #L3519cc.  return v4 @kind wide;
  #L3519ce.  v3:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L3519d2.  v2:= v3.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L3519d6.  v3:= v2.`okio.Segment.limit` @type ^`int`;
  #L3519da.  v4:= 8192I;
  #L3519de.  if v3 >= v4 then goto L3519f8;
  #L3519e2.  v3:= v2.`okio.Segment.owner` @type ^`boolean` @kind boolean;
  #L3519e6.  if v3 == 0 then goto L3519f8;
  #L3519ea.  v3:= v2.`okio.Segment.limit` @type ^`int`;
  #L3519ee.  v4:= v2.`okio.Segment.pos` @type ^`int`;
  #L3519f2.  v3:= v3 - v4 @kind int;
  #L3519f4.  v4:= (`long`) v3 @kind i2l;
  #L3519f6.  v0:= v0 - v4 @kind long;
  #L3519f8.  v4:= v0 @kind wide;
  #L3519fa.  goto L3519cc;
}
procedure `okio.Buffer` `copyTo`(`okio.Buffer` v6 @kind this, `java.io.OutputStream` v7 @kind object @name `out`) @signature `Lokio/Buffer;.copyTo:(Ljava/io/OutputStream;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L351a0c.  v2:= 0L;
  #L351a10.  v4:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L351a14.  v0:= v6 @kind object;
  #L351a16.  v1:= v7 @kind object;
  #L351a18.  call temp:= `copyTo`(v0, v1, v2, v4) @signature `Lokio/Buffer;.copyTo:(Ljava/io/OutputStream;JJ)Lokio/Buffer;` @kind virtual;
  #L351a1e.  v0:= temp @kind object;
  #L351a20.  return v0 @kind object;
}
procedure `okio.Buffer` `copyTo`(`okio.Buffer` v10 @kind this, `java.io.OutputStream` v11 @kind object @name `out`, `long` v12 @name `offset`, `long` v14 @name `byteCount`) @signature `Lokio/Buffer;.copyTo:(Ljava/io/OutputStream;JJ)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L351a34.  if v11 != 0 then goto L351a48;
  #L351a38.  v0:= new `java.lang.IllegalArgumentException`;
  #L351a3c.  v1:= "out == null" @kind object;
  #L351a40.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L351a46.  throw v0;
  #L351a48.  v0:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L351a4c.  v2:= v12 @kind wide;
  #L351a4e.  v4:= v14 @kind wide;
  #L351a50.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L351a56.  v0:= 0L;
  #L351a5a.  v0:= lcmp(v14, v0);
  #L351a5e.  if v0 != 0 then goto L351a64;
  #L351a62.  return v10 @kind object;
  #L351a64.  v7:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L351a68.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L351a6c.  v1:= v7.`okio.Segment.pos` @type ^`int`;
  #L351a70.  v0:= v0 - v1 @kind int;
  #L351a72.  v0:= (`long`) v0 @kind i2l;
  #L351a74.  v0:= lcmp(v12, v0);
  #L351a78.  if v0 < 0 then goto L351a90;
  #L351a7c.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L351a80.  v1:= v7.`okio.Segment.pos` @type ^`int`;
  #L351a84.  v0:= v0 - v1 @kind int;
  #L351a86.  v0:= (`long`) v0 @kind i2l;
  #L351a88.  v12:= v12 - v0 @kind long;
  #L351a8a.  v7:= v7.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L351a8e.  goto L351a68;
  #L351a90.  v0:= 0L;
  #L351a94.  v0:= lcmp(v14, v0);
  #L351a98.  if v0 <= 0 then goto L351a62;
  #L351a9c.  v0:= v7.`okio.Segment.pos` @type ^`int`;
  #L351aa0.  v0:= (`long`) v0 @kind i2l;
  #L351aa2.  v0:= v0 + v12 @kind long;
  #L351aa4.  v6:= (`int`) v0 @kind l2i;
  #L351aa6.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L351aaa.  v0:= v0 - v6 @kind int;
  #L351aac.  v0:= (`long`) v0 @kind i2l;
  #L351aae.  call temp:= `min`(v0, v14) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L351ab4.  v0:= temp @kind wide;
  #L351ab6.  v8:= (`int`) v0 @kind l2i;
  #L351ab8.  v0:= v7.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L351abc.  call `write`(v11, v0, v6, v8) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L351ac2.  v0:= (`long`) v8 @kind i2l;
  #L351ac4.  v14:= v14 - v0 @kind long;
  #L351ac6.  v12:= 0L;
  #L351aca.  v7:= v7.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L351ace.  goto L351a90;
}
procedure `okio.Buffer` `copyTo`(`okio.Buffer` v10 @kind this, `okio.Buffer` v11 @kind object @name `out`, `long` v12 @name `offset`, `long` v14 @name `byteCount`) @signature `Lokio/Buffer;.copyTo:(Lokio/Buffer;JJ)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L351ae0.  v8:= 0L;
  #L351ae4.  if v11 != 0 then goto L351af8;
  #L351ae8.  v0:= new `java.lang.IllegalArgumentException`;
  #L351aec.  v1:= "out == null" @kind object;
  #L351af0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L351af6.  throw v0;
  #L351af8.  v0:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L351afc.  v2:= v12 @kind wide;
  #L351afe.  v4:= v14 @kind wide;
  #L351b00.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L351b06.  v0:= lcmp(v14, v8);
  #L351b0a.  if v0 != 0 then goto L351b10;
  #L351b0e.  return v10 @kind object;
  #L351b10.  v0:= v11.`okio.Buffer.size` @type ^`long` @kind wide;
  #L351b14.  v0:= v0 + v14 @kind long;
  #L351b16.  v11.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L351b1a.  v7:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L351b1e.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L351b22.  v1:= v7.`okio.Segment.pos` @type ^`int`;
  #L351b26.  v0:= v0 - v1 @kind int;
  #L351b28.  v0:= (`long`) v0 @kind i2l;
  #L351b2a.  v0:= lcmp(v12, v0);
  #L351b2e.  if v0 < 0 then goto L351b46;
  #L351b32.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L351b36.  v1:= v7.`okio.Segment.pos` @type ^`int`;
  #L351b3a.  v0:= v0 - v1 @kind int;
  #L351b3c.  v0:= (`long`) v0 @kind i2l;
  #L351b3e.  v12:= v12 - v0 @kind long;
  #L351b40.  v7:= v7.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L351b44.  goto L351b1e;
  #L351b46.  v0:= lcmp(v14, v8);
  #L351b4a.  if v0 <= 0 then goto L351b0e;
  #L351b4e.  v6:= new `okio.Segment`;
  #L351b52.  call `<init>`(v6, v7) @signature `Lokio/Segment;.<init>:(Lokio/Segment;)V` @kind direct;
  #L351b58.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L351b5c.  v0:= (`long`) v0 @kind i2l;
  #L351b5e.  v0:= v0 + v12 @kind long;
  #L351b60.  v0:= (`int`) v0 @kind l2i;
  #L351b62.  v6.`okio.Segment.pos` @type ^`int` := v0;
  #L351b66.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L351b6a.  v1:= (`int`) v14 @kind l2i;
  #L351b6c.  v0:= v0 + v1 @kind int;
  #L351b6e.  v1:= v6.`okio.Segment.limit` @type ^`int`;
  #L351b72.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L351b78.  v0:= temp;
  #L351b7a.  v6.`okio.Segment.limit` @type ^`int` := v0;
  #L351b7e.  v0:= v11.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L351b82.  if v0 != 0 then goto L351baa;
  #L351b86.  v6.`okio.Segment.prev` @type ^`okio.Segment` := v6 @kind object;
  #L351b8a.  v6.`okio.Segment.next` @type ^`okio.Segment` := v6 @kind object;
  #L351b8e.  v11.`okio.Buffer.head` @type ^`okio.Segment` := v6 @kind object;
  #L351b92.  v0:= v6.`okio.Segment.limit` @type ^`int`;
  #L351b96.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L351b9a.  v0:= v0 - v1 @kind int;
  #L351b9c.  v0:= (`long`) v0 @kind i2l;
  #L351b9e.  v14:= v14 - v0 @kind long;
  #L351ba0.  v12:= 0L;
  #L351ba4.  v7:= v7.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L351ba8.  goto L351b46;
  #L351baa.  v0:= v11.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L351bae.  v0:= v0.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L351bb2.  call temp:= `push`(v0, v6) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L351bb8.  goto L351b92;
}
procedure `okio.BufferedSink` `emit`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.emit:()Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;

  #L351bcc.  return v0 @kind object;
}
procedure `okio.Buffer` `emitCompleteSegments`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.emitCompleteSegments:()Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;

  #L351be0.  return v0 @kind object;
}
procedure `okio.BufferedSink` `emitCompleteSegments`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.emitCompleteSegments:()Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L351bf4.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/Buffer;.emitCompleteSegments:()Lokio/Buffer;` @kind virtual;
  #L351bfa.  v0:= temp @kind object;
  #L351bfc.  return v0 @kind object;
}
procedure `boolean` `equals`(`okio.Buffer` v18 @kind this, `java.lang.Object` v19 @kind object @name `o`) @signature `Lokio/Buffer;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L351c10.  v0:= v18 @kind object;
  #L351c14.  v1:= v19 @kind object;
  #L351c18.  if v0 != v1 then goto L351c20;
  #L351c1c.  v14:= 1I;
  #L351c1e.  return v14;
  #L351c20.  v0:= v19 @kind object;
  #L351c24.  v14:= instanceof @variable v0 @type ^`okio.Buffer` @kind boolean;
  #L351c28.  if v14 != 0 then goto L351c30;
  #L351c2c.  v14:= 0I;
  #L351c2e.  goto L351c1e;
  #L351c30.  v13:= v19 @kind object;
  #L351c34.  v13:= (`okio.Buffer`) v13 @kind object;
  #L351c38.  v0:= v18 @kind object;
  #L351c3c.  v14:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L351c40.  v0:= v13.`okio.Buffer.size` @type ^`long` @kind wide;
  #L351c44.  v16:= v0 @kind wide;
  #L351c48.  v14:= lcmp(v14, v16);
  #L351c4c.  if v14 == 0 then goto L351c54;
  #L351c50.  v14:= 0I;
  #L351c52.  goto L351c1e;
  #L351c54.  v0:= v18 @kind object;
  #L351c58.  v14:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L351c5c.  v16:= 0L;
  #L351c60.  v14:= lcmp(v14, v16);
  #L351c64.  if v14 != 0 then goto L351c6c;
  #L351c68.  v14:= 1I;
  #L351c6a.  goto L351c1e;
  #L351c6c.  v0:= v18 @kind object;
  #L351c70.  v11:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L351c74.  v12:= v13.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L351c78.  v5:= v11.`okio.Segment.pos` @type ^`int`;
  #L351c7c.  v9:= v12.`okio.Segment.pos` @type ^`int`;
  #L351c80.  v6:= 0L;
  #L351c84.  v0:= v18 @kind object;
  #L351c88.  v14:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L351c8c.  v14:= lcmp(v6, v14);
  #L351c90.  if v14 >= 0 then goto L351d08;
  #L351c94.  v14:= v11.`okio.Segment.limit` @type ^`int`;
  #L351c98.  v14:= v14 - v5 @kind int;
  #L351c9a.  v15:= v12.`okio.Segment.limit` @type ^`int`;
  #L351c9e.  v15:= v15 - v9 @kind int;
  #L351ca0.  call temp:= `min`(v14, v15) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L351ca6.  v14:= temp;
  #L351ca8.  v2:= (`long`) v14 @kind i2l;
  #L351caa.  v4:= 0I;
  #L351cac.  v10:= v9;
  #L351cae.  v8:= v5;
  #L351cb0.  v14:= (`long`) v4 @kind i2l;
  #L351cb2.  v14:= lcmp(v14, v2);
  #L351cb6.  if v14 >= 0 then goto L351ce4;
  #L351cba.  v14:= v11.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L351cbe.  v5:= v8 + 1;
  #L351cc2.  v14:= v14[v8] @kind byte;
  #L351cc6.  v15:= v12.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L351cca.  v9:= v10 + 1;
  #L351cce.  v15:= v15[v10] @kind byte;
  #L351cd2.  if v14 == v15 then goto L351cda;
  #L351cd6.  v14:= 0I;
  #L351cd8.  goto L351c1e;
  #L351cda.  v4:= v4 + 1;
  #L351cde.  v10:= v9;
  #L351ce0.  v8:= v5;
  #L351ce2.  goto L351cb0;
  #L351ce4.  v14:= v11.`okio.Segment.limit` @type ^`int`;
  #L351ce8.  if v8 != v14 then goto L351d10;
  #L351cec.  v11:= v11.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L351cf0.  v5:= v11.`okio.Segment.pos` @type ^`int`;
  #L351cf4.  v14:= v12.`okio.Segment.limit` @type ^`int`;
  #L351cf8.  if v10 != v14 then goto L351d0c;
  #L351cfc.  v12:= v12.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L351d00.  v9:= v12.`okio.Segment.pos` @type ^`int`;
  #L351d04.  v6:= v6 + v2 @kind long;
  #L351d06.  goto L351c84;
  #L351d08.  v14:= 1I;
  #L351d0a.  goto L351c1e;
  #L351d0c.  v9:= v10;
  #L351d0e.  goto L351d04;
  #L351d10.  v5:= v8;
  #L351d12.  goto L351cf4;
}
procedure `boolean` `exhausted`(`okio.Buffer` v4 @kind this) @signature `Lokio/Buffer;.exhausted:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L351d24.  v0:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L351d28.  v2:= 0L;
  #L351d2c.  v0:= lcmp(v0, v2);
  #L351d30.  if v0 != 0 then goto L351d38;
  #L351d34.  v0:= 1I;
  #L351d36.  return v0;
  #L351d38.  v0:= 0I;
  #L351d3a.  goto L351d36;
}
procedure `void` `flush`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.flush:()V` @AccessFlag PUBLIC {
    temp;

  #L351d4c.  return @kind void;
}
procedure `byte` `getByte`(`okio.Buffer` v9 @kind this, `long` v10 @name `pos`) @signature `Lokio/Buffer;.getByte:(J)B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L351d60.  v0:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L351d64.  v4:= 1L;
  #L351d68.  v2:= v10 @kind wide;
  #L351d6a.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L351d70.  v6:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L351d74.  v0:= v6.`okio.Segment.limit` @type ^`int`;
  #L351d78.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L351d7c.  v7:= v0 - v1 @kind int;
  #L351d80.  v0:= (`long`) v7 @kind i2l;
  #L351d82.  v0:= lcmp(v10, v0);
  #L351d86.  if v0 >= 0 then goto L351d9c;
  #L351d8a.  v0:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L351d8e.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L351d92.  v2:= (`int`) v10 @kind l2i;
  #L351d94.  v1:= v1 + v2 @kind int;
  #L351d96.  v0:= v0[v1] @kind byte;
  #L351d9a.  return v0;
  #L351d9c.  v0:= (`long`) v7 @kind i2l;
  #L351d9e.  v10:= v10 - v0 @kind long;
  #L351da0.  v6:= v6.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L351da4.  goto L351d74;
}
procedure `int` `hashCode`(`okio.Buffer` v6 @kind this) @signature `Lokio/Buffer;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L351db8.  v3:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L351dbc.  if v3 != 0 then goto L351dc4;
  #L351dc0.  v2:= 0I;
  #L351dc2.  return v2;
  #L351dc4.  v2:= 1I;
  #L351dc6.  v1:= v3.`okio.Segment.pos` @type ^`int`;
  #L351dca.  v0:= v3.`okio.Segment.limit` @type ^`int`;
  #L351dce.  if v1 >= v0 then goto L351de8;
  #L351dd2.  v4:= v2 * 31;
  #L351dd6.  v5:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L351dda.  v5:= v5[v1] @kind byte;
  #L351dde.  v2:= v4 + v5 @kind int;
  #L351de2.  v1:= v1 + 1;
  #L351de6.  goto L351dce;
  #L351de8.  v3:= v3.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L351dec.  v4:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L351df0.  if v3 != v4 then goto L351dc6;
  #L351df4.  goto L351dc2;
}
procedure `long` `indexOf`(`okio.Buffer` v2 @kind this, `byte` v3 @name `b`) @signature `Lokio/Buffer;.indexOf:(B)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L351e08.  v0:= 0L;
  #L351e0c.  call temp:= `indexOf`(v2, v3, v0) @signature `Lokio/Buffer;.indexOf:(BJ)J` @kind virtual;
  #L351e12.  v0:= temp @kind wide;
  #L351e14.  return v0 @kind wide;
}
procedure `long` `indexOf`(`okio.Buffer` v12 @kind this, `byte` v13 @name `b`, `long` v14 @name `fromIndex`) @signature `Lokio/Buffer;.indexOf:(BJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L351e28.  v8:= -1L;
  #L351e2c.  v10:= 0L;
  #L351e30.  v10:= lcmp(v14, v10);
  #L351e34.  if v10 >= 0 then goto L351e48;
  #L351e38.  v8:= new `java.lang.IllegalArgumentException`;
  #L351e3c.  v9:= "fromIndex < 0" @kind object;
  #L351e40.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L351e46.  throw v8;
  #L351e48.  v7:= v12.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L351e4c.  if v7 != 0 then goto L351e52;
  #L351e50.  return v8 @kind wide;
  #L351e52.  v10:= v12.`okio.Buffer.size` @type ^`long` @kind wide;
  #L351e56.  v10:= v10 - v14 @kind long;
  #L351e58.  v10:= lcmp(v10, v14);
  #L351e5c.  if v10 >= 0 then goto L351e80;
  #L351e60.  v4:= v12.`okio.Buffer.size` @type ^`long` @kind wide;
  #L351e64.  v10:= lcmp(v4, v14);
  #L351e68.  if v10 <= 0 then goto L351eb8;
  #L351e6c.  v7:= v7.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L351e70.  v10:= v7.`okio.Segment.limit` @type ^`int`;
  #L351e74.  v11:= v7.`okio.Segment.pos` @type ^`int`;
  #L351e78.  v10:= v10 - v11 @kind int;
  #L351e7a.  v10:= (`long`) v10 @kind i2l;
  #L351e7c.  v4:= v4 - v10 @kind long;
  #L351e7e.  goto L351e64;
  #L351e80.  v4:= 0L;
  #L351e84.  v10:= v7.`okio.Segment.limit` @type ^`int`;
  #L351e88.  v11:= v7.`okio.Segment.pos` @type ^`int`;
  #L351e8c.  v10:= v10 - v11 @kind int;
  #L351e8e.  v10:= (`long`) v10 @kind i2l;
  #L351e90.  v2:= v4 + v10 @kind long;
  #L351e94.  v10:= lcmp(v2, v14);
  #L351e98.  if v10 >= 0 then goto L351eb8;
  #L351e9c.  v7:= v7.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L351ea0.  v4:= v2 @kind wide;
  #L351ea2.  goto L351e84;
  #L351ea4.  v10:= v7.`okio.Segment.limit` @type ^`int`;
  #L351ea8.  v11:= v7.`okio.Segment.pos` @type ^`int`;
  #L351eac.  v10:= v10 - v11 @kind int;
  #L351eae.  v10:= (`long`) v10 @kind i2l;
  #L351eb0.  v4:= v4 + v10 @kind long;
  #L351eb2.  v14:= v4 @kind wide;
  #L351eb4.  v7:= v7.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L351eb8.  v10:= v12.`okio.Buffer.size` @type ^`long` @kind wide;
  #L351ebc.  v10:= lcmp(v4, v10);
  #L351ec0.  if v10 >= 0 then goto L351e50;
  #L351ec4.  v0:= v7.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L351ec8.  v10:= v7.`okio.Segment.pos` @type ^`int`;
  #L351ecc.  v10:= (`long`) v10 @kind i2l;
  #L351ece.  v10:= v10 + v14 @kind long;
  #L351ed0.  v10:= v10 - v4 @kind long;
  #L351ed2.  v6:= (`int`) v10 @kind l2i;
  #L351ed4.  v1:= v7.`okio.Segment.limit` @type ^`int`;
  #L351ed8.  if v6 >= v1 then goto L351ea4;
  #L351edc.  v10:= v0[v6] @kind byte;
  #L351ee0.  if v10 != v13 then goto L351ef2;
  #L351ee4.  v8:= v7.`okio.Segment.pos` @type ^`int`;
  #L351ee8.  v8:= v6 - v8 @kind int;
  #L351eec.  v8:= (`long`) v8 @kind i2l;
  #L351eee.  v8:= v8 + v4 @kind long;
  #L351ef0.  goto L351e50;
  #L351ef2.  v6:= v6 + 1;
  #L351ef6.  goto L351ed8;
}
procedure `long` `indexOf`(`okio.Buffer` v2 @kind this, `okio.ByteString` v3 @kind object @name `bytes`) @signature `Lokio/Buffer;.indexOf:(Lokio/ByteString;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L351f08.  v0:= 0L;
  #L351f0c.  call temp:= `indexOf`(v2, v3, v0) @signature `Lokio/Buffer;.indexOf:(Lokio/ByteString;J)J` @kind virtual;
  #L351f12.  v0:= temp @kind wide;
  #L351f14.  return v0 @kind wide;
}
procedure `long` `indexOf`(`okio.Buffer` v20 @kind this, `okio.ByteString` v21 @kind object @name `bytes`, `long` v22 @name `fromIndex`) @signature `Lokio/Buffer;.indexOf:(Lokio/ByteString;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;

  #L351f28.  call temp:= `size`(v21) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L351f2e.  v2:= temp;
  #L351f30.  if v2 != 0 then goto L351f44;
  #L351f34.  v2:= new `java.lang.IllegalArgumentException`;
  #L351f38.  v4:= "bytes is empty" @kind object;
  #L351f3c.  call `<init>`(v2, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L351f42.  throw v2;
  #L351f44.  v4:= 0L;
  #L351f48.  v2:= lcmp(v22, v4);
  #L351f4c.  if v2 >= 0 then goto L351f60;
  #L351f50.  v2:= new `java.lang.IllegalArgumentException`;
  #L351f54.  v4:= "fromIndex < 0" @kind object;
  #L351f58.  call `<init>`(v2, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L351f5e.  throw v2;
  #L351f60.  v0:= v20 @kind object;
  #L351f64.  v3:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L351f68.  if v3 != 0 then goto L351f72;
  #L351f6c.  v4:= -1L;
  #L351f70.  return v4 @kind wide;
  #L351f72.  v0:= v20 @kind object;
  #L351f76.  v4:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L351f7a.  v4:= v4 - v22 @kind long;
  #L351f7e.  v2:= lcmp(v4, v22);
  #L351f82.  if v2 >= 0 then goto L351faa;
  #L351f86.  v0:= v20 @kind object;
  #L351f8a.  v12:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L351f8e.  v2:= lcmp(v12, v22);
  #L351f92.  if v2 <= 0 then goto L351fce;
  #L351f96.  v3:= v3.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L351f9a.  v2:= v3.`okio.Segment.limit` @type ^`int`;
  #L351f9e.  v4:= v3.`okio.Segment.pos` @type ^`int`;
  #L351fa2.  v2:= v2 - v4 @kind int;
  #L351fa4.  v4:= (`long`) v2 @kind i2l;
  #L351fa6.  v12:= v12 - v4 @kind long;
  #L351fa8.  goto L351f8e;
  #L351faa.  v12:= 0L;
  #L351fae.  v2:= v3.`okio.Segment.limit` @type ^`int`;
  #L351fb2.  v4:= v3.`okio.Segment.pos` @type ^`int`;
  #L351fb6.  v2:= v2 - v4 @kind int;
  #L351fb8.  v4:= (`long`) v2 @kind i2l;
  #L351fba.  v10:= v12 + v4 @kind long;
  #L351fbe.  v2:= lcmp(v10, v22);
  #L351fc2.  if v2 >= 0 then goto L351fce;
  #L351fc6.  v3:= v3.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L351fca.  v12:= v10 @kind wide;
  #L351fcc.  goto L351fae;
  #L351fce.  v2:= 0I;
  #L351fd0.  v0:= v21 @kind object;
  #L351fd4.  call temp:= `getByte`(v0, v2) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L351fda.  v8:= temp;
  #L351fdc.  call temp:= `size`(v21) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L351fe2.  v7:= temp;
  #L351fe4.  v0:= v20 @kind object;
  #L351fe8.  v4:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L351fec.  v0:= (`long`) v7 @kind i2l;
  #L351fee.  v18:= v0 @kind wide;
  #L351ff2.  v4:= v4 - v18 @kind long;
  #L351ff6.  v18:= 1L;
  #L351ffa.  v16:= v4 + v18 @kind long;
  #L351ffe.  v2:= lcmp(v12, v16);
  #L352002.  if v2 >= 0 then goto L352090;
  #L352006.  v9:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L35200a.  v2:= v3.`okio.Segment.limit` @type ^`int`;
  #L35200e.  v4:= (`long`) v2 @kind i2l;
  #L352010.  v2:= v3.`okio.Segment.pos` @type ^`int`;
  #L352014.  v0:= (`long`) v2 @kind i2l;
  #L352016.  v18:= v0 @kind wide;
  #L35201a.  v18:= v18 + v16 @kind long;
  #L35201e.  v18:= v18 - v12 @kind long;
  #L352022.  v0:= v18 @kind wide;
  #L352026.  call temp:= `min`(v4, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L35202c.  v4:= temp @kind wide;
  #L35202e.  v15:= (`int`) v4 @kind l2i;
  #L352030.  v2:= v3.`okio.Segment.pos` @type ^`int`;
  #L352034.  v4:= (`long`) v2 @kind i2l;
  #L352036.  v4:= v4 + v22 @kind long;
  #L35203a.  v4:= v4 - v12 @kind long;
  #L35203c.  v14:= (`int`) v4 @kind l2i;
  #L35203e.  if v14 >= v15 then goto L352078;
  #L352042.  v2:= v9[v14] @kind byte;
  #L352046.  if v2 != v8 then goto L352072;
  #L35204a.  v4:= v14 + 1;
  #L35204e.  v6:= 1I;
  #L352050.  v2:= v20 @kind object;
  #L352054.  v5:= v21 @kind object;
  #L352058.  call temp:= `rangeEquals`(v2, v3, v4, v5, v6, v7) @signature `Lokio/Buffer;.rangeEquals:(Lokio/Segment;ILokio/ByteString;II)Z` @kind direct;
  #L35205e.  v2:= temp;
  #L352060.  if v2 == 0 then goto L352072;
  #L352064.  v2:= v3.`okio.Segment.pos` @type ^`int`;
  #L352068.  v2:= v14 - v2 @kind int;
  #L35206c.  v4:= (`long`) v2 @kind i2l;
  #L35206e.  v4:= v4 + v12 @kind long;
  #L352070.  goto L351f70;
  #L352072.  v14:= v14 + 1;
  #L352076.  goto L35203e;
  #L352078.  v2:= v3.`okio.Segment.limit` @type ^`int`;
  #L35207c.  v4:= v3.`okio.Segment.pos` @type ^`int`;
  #L352080.  v2:= v2 - v4 @kind int;
  #L352082.  v4:= (`long`) v2 @kind i2l;
  #L352084.  v12:= v12 + v4 @kind long;
  #L352086.  v22:= v12 @kind wide;
  #L35208a.  v3:= v3.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L35208e.  goto L351ffe;
  #L352090.  v4:= -1L;
  #L352094.  goto L351f70;
}
procedure `long` `indexOfElement`(`okio.Buffer` v2 @kind this, `okio.ByteString` v3 @kind object @name `targetBytes`) @signature `Lokio/Buffer;.indexOfElement:(Lokio/ByteString;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3520a8.  v0:= 0L;
  #L3520ac.  call temp:= `indexOfElement`(v2, v3, v0) @signature `Lokio/Buffer;.indexOfElement:(Lokio/ByteString;J)J` @kind virtual;
  #L3520b2.  v0:= temp @kind wide;
  #L3520b4.  return v0 @kind wide;
}
procedure `long` `indexOfElement`(`okio.Buffer` v18 @kind this, `okio.ByteString` v19 @kind object @name `targetBytes`, `long` v20 @name `fromIndex`) @signature `Lokio/Buffer;.indexOfElement:(Lokio/ByteString;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L3520c8.  v16:= 0L;
  #L3520cc.  v15:= lcmp(v20, v16);
  #L3520d0.  if v15 >= 0 then goto L3520e4;
  #L3520d4.  v15:= new `java.lang.IllegalArgumentException`;
  #L3520d8.  v16:= "fromIndex < 0" @kind object;
  #L3520dc.  call `<init>`(v15, v16) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3520e2.  throw v15;
  #L3520e4.  v0:= v18 @kind object;
  #L3520e8.  v12:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L3520ec.  if v12 != 0 then goto L3520f6;
  #L3520f0.  v16:= -1L;
  #L3520f4.  return v16 @kind wide;
  #L3520f6.  v0:= v18 @kind object;
  #L3520fa.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L3520fe.  v16:= v0 @kind wide;
  #L352102.  v16:= v16 - v20 @kind long;
  #L352106.  v15:= lcmp(v16, v20);
  #L35210a.  if v15 >= 0 then goto L35213e;
  #L35210e.  v0:= v18 @kind object;
  #L352112.  v10:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L352116.  v15:= lcmp(v10, v20);
  #L35211a.  if v15 <= 0 then goto L35216c;
  #L35211e.  v12:= v12.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L352122.  v15:= v12.`okio.Segment.limit` @type ^`int`;
  #L352126.  v0:= v12.`okio.Segment.pos` @type ^`int`;
  #L35212a.  v16:= v0;
  #L35212e.  v15:= v15 - v16 @kind int;
  #L352132.  v0:= (`long`) v15 @kind i2l;
  #L352134.  v16:= v0 @kind wide;
  #L352138.  v10:= v10 - v16 @kind long;
  #L35213c.  goto L352116;
  #L35213e.  v10:= 0L;
  #L352142.  v15:= v12.`okio.Segment.limit` @type ^`int`;
  #L352146.  v0:= v12.`okio.Segment.pos` @type ^`int`;
  #L35214a.  v16:= v0;
  #L35214e.  v15:= v15 - v16 @kind int;
  #L352152.  v0:= (`long`) v15 @kind i2l;
  #L352154.  v16:= v0 @kind wide;
  #L352158.  v8:= v10 + v16 @kind long;
  #L35215c.  v15:= lcmp(v8, v20);
  #L352160.  if v15 >= 0 then goto L35216c;
  #L352164.  v12:= v12.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L352168.  v10:= v8 @kind wide;
  #L35216a.  goto L352142;
  #L35216c.  call temp:= `size`(v19) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L352172.  v15:= temp;
  #L352174.  v16:= 2I;
  #L352178.  v0:= v16;
  #L35217c.  if v15 != v0 then goto L35221e;
  #L352180.  v15:= 0I;
  #L352182.  v0:= v19 @kind object;
  #L352186.  call temp:= `getByte`(v0, v15) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L35218c.  v3:= temp;
  #L35218e.  v15:= 1I;
  #L352190.  v0:= v19 @kind object;
  #L352194.  call temp:= `getByte`(v0, v15) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L35219a.  v4:= temp;
  #L35219c.  v0:= v18 @kind object;
  #L3521a0.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L3521a4.  v16:= v0 @kind wide;
  #L3521a8.  v15:= lcmp(v10, v16);
  #L3521ac.  if v15 >= 0 then goto L3522c0;
  #L3521b0.  v5:= v12.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L3521b4.  v15:= v12.`okio.Segment.pos` @type ^`int`;
  #L3521b8.  v0:= (`long`) v15 @kind i2l;
  #L3521ba.  v16:= v0 @kind wide;
  #L3521be.  v16:= v16 + v20 @kind long;
  #L3521c2.  v16:= v16 - v10 @kind long;
  #L3521c6.  v0:= v16 @kind wide;
  #L3521ca.  v7:= (`int`) v0 @kind l2i;
  #L3521cc.  v6:= v12.`okio.Segment.limit` @type ^`int`;
  #L3521d0.  if v7 >= v6 then goto L3521fa;
  #L3521d4.  v2:= v5[v7] @kind byte;
  #L3521d8.  if v2 == v3 then goto L3521e0;
  #L3521dc.  if v2 != v4 then goto L3521f4;
  #L3521e0.  v15:= v12.`okio.Segment.pos` @type ^`int`;
  #L3521e4.  v15:= v7 - v15 @kind int;
  #L3521e8.  v0:= (`long`) v15 @kind i2l;
  #L3521ea.  v16:= v0 @kind wide;
  #L3521ee.  v16:= v16 + v10 @kind long;
  #L3521f2.  goto L3520f4;
  #L3521f4.  v7:= v7 + 1;
  #L3521f8.  goto L3521d0;
  #L3521fa.  v15:= v12.`okio.Segment.limit` @type ^`int`;
  #L3521fe.  v0:= v12.`okio.Segment.pos` @type ^`int`;
  #L352202.  v16:= v0;
  #L352206.  v15:= v15 - v16 @kind int;
  #L35220a.  v0:= (`long`) v15 @kind i2l;
  #L35220c.  v16:= v0 @kind wide;
  #L352210.  v10:= v10 + v16 @kind long;
  #L352214.  v20:= v10 @kind wide;
  #L352218.  v12:= v12.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L35221c.  goto L35219c;
  #L35221e.  call temp:= `internalArray`(v19) @signature `Lokio/ByteString;.internalArray:()[B` @kind virtual;
  #L352224.  v14:= temp @kind object;
  #L352226.  v0:= v18 @kind object;
  #L35222a.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L35222e.  v16:= v0 @kind wide;
  #L352232.  v15:= lcmp(v10, v16);
  #L352236.  if v15 >= 0 then goto L3522c0;
  #L35223a.  v5:= v12.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L35223e.  v15:= v12.`okio.Segment.pos` @type ^`int`;
  #L352242.  v0:= (`long`) v15 @kind i2l;
  #L352244.  v16:= v0 @kind wide;
  #L352248.  v16:= v16 + v20 @kind long;
  #L35224c.  v16:= v16 - v10 @kind long;
  #L352250.  v0:= v16 @kind wide;
  #L352254.  v7:= (`int`) v0 @kind l2i;
  #L352256.  v6:= v12.`okio.Segment.limit` @type ^`int`;
  #L35225a.  if v7 >= v6 then goto L35229c;
  #L35225e.  v2:= v5[v7] @kind byte;
  #L352262.  v0:= length @variable v14;
  #L352264.  v16:= v0;
  #L352268.  v15:= 0I;
  #L35226a.  v0:= v16;
  #L35226e.  if v15 >= v0 then goto L352296;
  #L352272.  v13:= v14[v15] @kind byte;
  #L352276.  if v2 != v13 then goto L352290;
  #L35227a.  v15:= v12.`okio.Segment.pos` @type ^`int`;
  #L35227e.  v15:= v7 - v15 @kind int;
  #L352282.  v0:= (`long`) v15 @kind i2l;
  #L352284.  v16:= v0 @kind wide;
  #L352288.  v16:= v16 + v10 @kind long;
  #L35228c.  goto L3520f4;
  #L352290.  v15:= v15 + 1;
  #L352294.  goto L35226a;
  #L352296.  v7:= v7 + 1;
  #L35229a.  goto L35225a;
  #L35229c.  v15:= v12.`okio.Segment.limit` @type ^`int`;
  #L3522a0.  v0:= v12.`okio.Segment.pos` @type ^`int`;
  #L3522a4.  v16:= v0;
  #L3522a8.  v15:= v15 - v16 @kind int;
  #L3522ac.  v0:= (`long`) v15 @kind i2l;
  #L3522ae.  v16:= v0 @kind wide;
  #L3522b2.  v10:= v10 + v16 @kind long;
  #L3522b6.  v20:= v10 @kind wide;
  #L3522ba.  v12:= v12.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L3522be.  goto L352226;
  #L3522c0.  v16:= -1L;
  #L3522c4.  goto L3520f4;
}
procedure `java.io.InputStream` `inputStream`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.inputStream:()Ljava/io/InputStream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3522d8.  v0:= new `okio.Buffer$2`;
  #L3522dc.  call `<init>`(v0, v1) @signature `Lokio/Buffer$2;.<init>:(Lokio/Buffer;)V` @kind direct;
  #L3522e2.  return v0 @kind object;
}
procedure `okio.ByteString` `md5`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.md5:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3522f4.  v0:= "MD5" @kind object;
  #L3522f8.  call temp:= `digest`(v1, v0) @signature `Lokio/Buffer;.digest:(Ljava/lang/String;)Lokio/ByteString;` @kind direct;
  #L3522fe.  v0:= temp @kind object;
  #L352300.  return v0 @kind object;
}
procedure `java.io.OutputStream` `outputStream`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.outputStream:()Ljava/io/OutputStream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L352314.  v0:= new `okio.Buffer$1`;
  #L352318.  call `<init>`(v0, v1) @signature `Lokio/Buffer$1;.<init>:(Lokio/Buffer;)V` @kind direct;
  #L35231e.  return v0 @kind object;
}
procedure `boolean` `rangeEquals`(`okio.Buffer` v9 @kind this, `long` v10 @name `offset`, `okio.ByteString` v12 @kind object @name `bytes`) @signature `Lokio/Buffer;.rangeEquals:(JLokio/ByteString;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L352330.  v2:= 0I;
  #L352332.  call temp:= `size`(v12) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L352338.  v0:= temp;
  #L35233a.  v4:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L35233e.  v4:= v4 - v10 @kind long;
  #L352340.  v6:= (`long`) v0 @kind i2l;
  #L352342.  v3:= lcmp(v4, v6);
  #L352346.  if v3 >= 0 then goto L35234c;
  #L35234a.  return v2;
  #L35234c.  v1:= 0I;
  #L35234e.  if v1 >= v0 then goto L352370;
  #L352352.  v4:= (`long`) v1 @kind i2l;
  #L352354.  v4:= v4 + v10 @kind long;
  #L352356.  call temp:= `getByte`(v9, v4) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L35235c.  v3:= temp;
  #L35235e.  call temp:= `getByte`(v12, v1) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L352364.  v4:= temp;
  #L352366.  if v3 != v4 then goto L35234a;
  #L35236a.  v1:= v1 + 1;
  #L35236e.  goto L35234e;
  #L352370.  v2:= 1I;
  #L352372.  goto L35234a;
}
procedure `int` `read`(`okio.Buffer` v2 @kind this, `byte`[] v3 @kind object @name `sink`) @signature `Lokio/Buffer;.read:([B)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L352384.  v0:= 0I;
  #L352386.  v1:= length @variable v3;
  #L352388.  call temp:= `read`(v2, v3, v0, v1) @signature `Lokio/Buffer;.read:([BII)I` @kind virtual;
  #L35238e.  v0:= temp;
  #L352390.  return v0;
}
procedure `int` `read`(`okio.Buffer` v8 @kind this, `byte`[] v9 @kind object @name `sink`, `int` v10 @name `offset`, `int` v11 @name `byteCount`) @signature `Lokio/Buffer;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3523a4.  v0:= length @variable v9;
  #L3523a6.  v0:= (`long`) v0 @kind i2l;
  #L3523a8.  v2:= (`long`) v10 @kind i2l;
  #L3523aa.  v4:= (`long`) v11 @kind i2l;
  #L3523ac.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L3523b2.  v6:= v8.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L3523b6.  if v6 != 0 then goto L3523be;
  #L3523ba.  v7:= -1I;
  #L3523bc.  return v7;
  #L3523be.  v0:= v6.`okio.Segment.limit` @type ^`int`;
  #L3523c2.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L3523c6.  v0:= v0 - v1 @kind int;
  #L3523c8.  call temp:= `min`(v11, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3523ce.  v7:= temp;
  #L3523d0.  v0:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L3523d4.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L3523d8.  call `arraycopy`(v0, v1, v9, v10, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3523de.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L3523e2.  v0:= v0 + v7 @kind int;
  #L3523e4.  v6.`okio.Segment.pos` @type ^`int` := v0;
  #L3523e8.  v0:= v8.`okio.Buffer.size` @type ^`long` @kind wide;
  #L3523ec.  v2:= (`long`) v7 @kind i2l;
  #L3523ee.  v0:= v0 - v2 @kind long;
  #L3523f0.  v8.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L3523f4.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L3523f8.  v1:= v6.`okio.Segment.limit` @type ^`int`;
  #L3523fc.  if v0 != v1 then goto L3523bc;
  #L352400.  call temp:= `pop`(v6) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L352406.  v0:= temp @kind object;
  #L352408.  v8.`okio.Buffer.head` @type ^`okio.Segment` := v0 @kind object;
  #L35240c.  call `recycle`(v6) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L352412.  goto L3523bc;
}
procedure `long` `read`(`okio.Buffer` v4 @kind this, `okio.Buffer` v5 @kind object @name `sink`, `long` v6 @name `byteCount`) @signature `Lokio/Buffer;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L352424.  v2:= 0L;
  #L352428.  if v5 != 0 then goto L35243c;
  #L35242c.  v0:= new `java.lang.IllegalArgumentException`;
  #L352430.  v1:= "sink == null" @kind object;
  #L352434.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L35243a.  throw v0;
  #L35243c.  v0:= lcmp(v6, v2);
  #L352440.  if v0 >= 0 then goto L352476;
  #L352444.  v0:= new `java.lang.IllegalArgumentException`;
  #L352448.  v1:= new `java.lang.StringBuilder`;
  #L35244c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L352452.  v2:= "byteCount < 0: " @kind object;
  #L352456.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L35245c.  v1:= temp @kind object;
  #L35245e.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L352464.  v1:= temp @kind object;
  #L352466.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L35246c.  v1:= temp @kind object;
  #L35246e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L352474.  throw v0;
  #L352476.  v0:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L35247a.  v0:= lcmp(v0, v2);
  #L35247e.  if v0 != 0 then goto L352488;
  #L352482.  v0:= -1L;
  #L352486.  return v0 @kind wide;
  #L352488.  v0:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L35248c.  v0:= lcmp(v6, v0);
  #L352490.  if v0 <= 0 then goto L352498;
  #L352494.  v6:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L352498.  call `write`(v5, v4, v6) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L35249e.  v0:= v6 @kind wide;
  #L3524a0.  goto L352486;
}
procedure `long` `readAll`(`okio.Buffer` v4 @kind this, `okio.Sink` v5 @kind object @name `sink`) @signature `Lokio/Buffer;.readAll:(Lokio/Sink;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3524b4.  v0:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L3524b8.  v2:= 0L;
  #L3524bc.  v2:= lcmp(v0, v2);
  #L3524c0.  if v2 <= 0 then goto L3524ca;
  #L3524c4.  call `write`(v5, v4, v0) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L3524ca.  return v0 @kind wide;
}
procedure `byte` `readByte`(`okio.Buffer` v10 @kind this) @signature `Lokio/Buffer;.readByte:()B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L3524dc.  v6:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L3524e0.  v8:= 0L;
  #L3524e4.  v6:= lcmp(v6, v8);
  #L3524e8.  if v6 != 0 then goto L3524fc;
  #L3524ec.  v6:= new `java.lang.IllegalStateException`;
  #L3524f0.  v7:= "size == 0" @kind object;
  #L3524f4.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3524fa.  throw v6;
  #L3524fc.  v5:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L352500.  v3:= v5.`okio.Segment.pos` @type ^`int`;
  #L352504.  v2:= v5.`okio.Segment.limit` @type ^`int`;
  #L352508.  v1:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L35250c.  v4:= v3 + 1;
  #L352510.  v0:= v1[v3] @kind byte;
  #L352514.  v6:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L352518.  v8:= 1L;
  #L35251c.  v6:= v6 - v8 @kind long;
  #L35251e.  v10.`okio.Buffer.size` @type ^`long` := v6 @kind wide;
  #L352522.  if v4 != v2 then goto L35253a;
  #L352526.  call temp:= `pop`(v5) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L35252c.  v6:= temp @kind object;
  #L35252e.  v10.`okio.Buffer.head` @type ^`okio.Segment` := v6 @kind object;
  #L352532.  call `recycle`(v5) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L352538.  return v0;
  #L35253a.  v5.`okio.Segment.pos` @type ^`int` := v4;
  #L35253e.  goto L352538;
}
procedure `byte`[] `readByteArray`(`okio.Buffer` v4 @kind this) @signature `Lokio/Buffer;.readByteArray:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L352550.  v2:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L352554.  call temp:= `readByteArray`(v4, v2) @signature `Lokio/Buffer;.readByteArray:(J)[B` @kind virtual;
  #L35255a.  v1:= temp @kind object;
  #L35255c.  return v1 @kind object;
  #L35255e.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L352560.  v1:= new `java.lang.AssertionError`;
  #L352564.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L35256a.  throw v1;
  catch `java.io.EOFException` @[L352550..L35255a] goto L35255e;
}
procedure `byte`[] `readByteArray`(`okio.Buffer` v7 @kind this, `long` v8 @name `byteCount`) @signature `Lokio/Buffer;.readByteArray:(J)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L35258c.  v0:= v7.`okio.Buffer.size` @type ^`long` @kind wide;
  #L352590.  v2:= 0L;
  #L352594.  v4:= v8 @kind wide;
  #L352596.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L35259c.  v0:= 2147483647L;
  #L3525a2.  v0:= lcmp(v8, v0);
  #L3525a6.  if v0 <= 0 then goto L3525dc;
  #L3525aa.  v0:= new `java.lang.IllegalArgumentException`;
  #L3525ae.  v1:= new `java.lang.StringBuilder`;
  #L3525b2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3525b8.  v2:= "byteCount > Integer.MAX_VALUE: " @kind object;
  #L3525bc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3525c2.  v1:= temp @kind object;
  #L3525c4.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3525ca.  v1:= temp @kind object;
  #L3525cc.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3525d2.  v1:= temp @kind object;
  #L3525d4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3525da.  throw v0;
  #L3525dc.  v0:= (`int`) v8 @kind l2i;
  #L3525de.  v6:= new `byte`[v0];
  #L3525e2.  call `readFully`(v7, v6) @signature `Lokio/Buffer;.readFully:([B)V` @kind virtual;
  #L3525e8.  return v6 @kind object;
}
procedure `okio.ByteString` `readByteString`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.readByteString:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3525fc.  v0:= new `okio.ByteString`;
  #L352600.  call temp:= `readByteArray`(v2) @signature `Lokio/Buffer;.readByteArray:()[B` @kind virtual;
  #L352606.  v1:= temp @kind object;
  #L352608.  call `<init>`(v0, v1) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L35260e.  return v0 @kind object;
}
procedure `okio.ByteString` `readByteString`(`okio.Buffer` v3 @kind this, `long` v4 @name `byteCount`) @signature `Lokio/Buffer;.readByteString:(J)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L352620.  v0:= new `okio.ByteString`;
  #L352624.  call temp:= `readByteArray`(v3, v4) @signature `Lokio/Buffer;.readByteArray:(J)[B` @kind virtual;
  #L35262a.  v1:= temp @kind object;
  #L35262c.  call `<init>`(v0, v1) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L352632.  return v0 @kind object;
}
procedure `long` `readDecimalLong`(`okio.Buffer` v24 @kind this) @signature `Lokio/Buffer;.readDecimalLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;
    v22;
    v23;

  #L352644.  v0:= v24 @kind object;
  #L352648.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L35264c.  v20:= v0 @kind wide;
  #L352650.  v22:= 0L;
  #L352654.  v20:= lcmp(v20, v22);
  #L352658.  if v20 != 0 then goto L35266c;
  #L35265c.  v20:= new `java.lang.IllegalStateException`;
  #L352660.  v21:= "size == 0" @kind object;
  #L352664.  call `<init>`(v20, v21) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L35266a.  throw v20;
  #L35266c.  v18:= 0L;
  #L352670.  v16:= 0I;
  #L352674.  v10:= 0I;
  #L352676.  v8:= 0I;
  #L352678.  v14:= -922337203685477580L;
  #L352682.  v12:= -7L;
  #L352686.  v0:= v24 @kind object;
  #L35268a.  v0:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L35268e.  v17:= v0 @kind object;
  #L352692.  v0:= v17 @kind object;
  #L352696.  v6:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L35269a.  v0:= v17 @kind object;
  #L35269e.  v11:= v0.`okio.Segment.pos` @type ^`int`;
  #L3526a2.  v0:= v17 @kind object;
  #L3526a6.  v9:= v0.`okio.Segment.limit` @type ^`int`;
  #L3526aa.  if v11 >= v9 then goto L3527ce;
  #L3526ae.  v4:= v6[v11] @kind byte;
  #L3526b2.  v20:= 48I;
  #L3526b6.  v0:= v20;
  #L3526ba.  if v4 < v0 then goto L352772;
  #L3526be.  v20:= 57I;
  #L3526c2.  v0:= v20;
  #L3526c6.  if v4 > v0 then goto L352772;
  #L3526ca.  v7:= v4 - 48;
  #L3526ce.  v20:= lcmp(v18, v14);
  #L3526d2.  if v20 < 0 then goto L3526ec;
  #L3526d6.  v20:= lcmp(v18, v14);
  #L3526da.  if v20 != 0 then goto L352756;
  #L3526de.  v0:= (`long`) v7 @kind i2l;
  #L3526e0.  v20:= v0 @kind wide;
  #L3526e4.  v20:= lcmp(v20, v12);
  #L3526e8.  if v20 >= 0 then goto L352756;
  #L3526ec.  v20:= new `okio.Buffer`;
  #L3526f0.  call `<init>`(v20) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L3526f6.  v0:= v20 @kind object;
  #L3526fa.  v1:= v18 @kind wide;
  #L3526fe.  call temp:= `writeDecimalLong`(v0, v1) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/Buffer;` @kind virtual;
  #L352704.  v20:= temp @kind object;
  #L352706.  v0:= v20 @kind object;
  #L35270a.  call temp:= `writeByte`(v0, v4) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L352710.  v5:= temp @kind object;
  #L352712.  if v10 != 0 then goto L35271c;
  #L352716.  call temp:= `readByte`(v5) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L35271c.  v20:= new `java.lang.NumberFormatException`;
  #L352720.  v21:= new `java.lang.StringBuilder`;
  #L352724.  call `<init>`(v21) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L35272a.  v22:= "Number too large: " @kind object;
  #L35272e.  call temp:= `append`(v21, v22) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L352734.  v21:= temp @kind object;
  #L352736.  call temp:= `readUtf8`(v5) @signature `Lokio/Buffer;.readUtf8:()Ljava/lang/String;` @kind virtual;
  #L35273c.  v22:= temp @kind object;
  #L35273e.  call temp:= `append`(v21, v22) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L352744.  v21:= temp @kind object;
  #L352746.  call temp:= `toString`(v21) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L35274c.  v21:= temp @kind object;
  #L35274e.  call `<init>`(v20, v21) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L352754.  throw v20;
  #L352756.  v20:= 10L;
  #L35275a.  v18:= v18 * v20 @kind long;
  #L35275e.  v0:= (`long`) v7 @kind i2l;
  #L352760.  v20:= v0 @kind wide;
  #L352764.  v18:= v18 + v20 @kind long;
  #L352768.  v11:= v11 + 1;
  #L35276c.  v16:= v16 + 1;
  #L352770.  goto L3526aa;
  #L352772.  v20:= 45I;
  #L352776.  v0:= v20;
  #L35277a.  if v4 != v0 then goto L35278e;
  #L35277e.  if v16 != 0 then goto L35278e;
  #L352782.  v10:= 1I;
  #L352784.  v20:= 1L;
  #L352788.  v12:= v12 - v20 @kind long;
  #L35278c.  goto L352768;
  #L35278e.  if v16 != 0 then goto L3527cc;
  #L352792.  v20:= new `java.lang.NumberFormatException`;
  #L352796.  v21:= new `java.lang.StringBuilder`;
  #L35279a.  call `<init>`(v21) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3527a0.  v22:= "Expected leading [0-9] or '-' character but was 0x" @kind object;
  #L3527a4.  call temp:= `append`(v21, v22) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3527aa.  v21:= temp @kind object;
  #L3527ac.  call temp:= `toHexString`(v4) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L3527b2.  v22:= temp @kind object;
  #L3527b4.  call temp:= `append`(v21, v22) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3527ba.  v21:= temp @kind object;
  #L3527bc.  call temp:= `toString`(v21) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3527c2.  v21:= temp @kind object;
  #L3527c4.  call `<init>`(v20, v21) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3527ca.  throw v20;
  #L3527cc.  v8:= 1I;
  #L3527ce.  if v11 != v9 then goto L35282c;
  #L3527d2.  call temp:= `pop`(v17) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L3527d8.  v20:= temp @kind object;
  #L3527da.  v0:= v20 @kind object;
  #L3527de.  v1:= v24 @kind object;
  #L3527e2.  v1.`okio.Buffer.head` @type ^`okio.Segment` := v0 @kind object;
  #L3527e6.  call `recycle`(v17) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L3527ec.  if v8 != 0 then goto L352800;
  #L3527f0.  v0:= v24 @kind object;
  #L3527f4.  v0:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L3527f8.  v20:= v0 @kind object;
  #L3527fc.  if v20 != 0 then goto L352686;
  #L352800.  v0:= v24 @kind object;
  #L352804.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L352808.  v20:= v0 @kind wide;
  #L35280c.  v0:= v16;
  #L352810.  v0:= (`long`) v0 @kind i2l;
  #L352812.  v22:= v0 @kind wide;
  #L352816.  v20:= v20 - v22 @kind long;
  #L35281a.  v0:= v20 @kind wide;
  #L35281e.  v2:= v24 @kind object;
  #L352822.  v2.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L352826.  if v10 == 0 then goto L352836;
  #L35282a.  return v18 @kind wide;
  #L35282c.  v0:= v17 @kind object;
  #L352830.  v0.`okio.Segment.pos` @type ^`int` := v11;
  #L352834.  goto L3527ec;
  #L352836.  v0:= v18 @kind wide;
  #L35283a.  v0:= -v0 @kind long;
  #L35283c.  v18:= v0 @kind wide;
  #L352840.  goto L35282a;
}
procedure `okio.Buffer` `readFrom`(`okio.Buffer` v3 @kind this, `java.io.InputStream` v4 @kind object @name `in`) @signature `Lokio/Buffer;.readFrom:(Ljava/io/InputStream;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L352854.  v0:= 9223372036854775807L;
  #L35285e.  v2:= 1I;
  #L352860.  call `readFrom`(v3, v4, v0, v2) @signature `Lokio/Buffer;.readFrom:(Ljava/io/InputStream;JZ)V` @kind direct;
  #L352866.  return v3 @kind object;
}
procedure `okio.Buffer` `readFrom`(`okio.Buffer` v4 @kind this, `java.io.InputStream` v5 @kind object @name `in`, `long` v6 @name `byteCount`) @signature `Lokio/Buffer;.readFrom:(Ljava/io/InputStream;J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L352878.  v0:= 0L;
  #L35287c.  v0:= lcmp(v6, v0);
  #L352880.  if v0 >= 0 then goto L3528b6;
  #L352884.  v0:= new `java.lang.IllegalArgumentException`;
  #L352888.  v1:= new `java.lang.StringBuilder`;
  #L35288c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L352892.  v2:= "byteCount < 0: " @kind object;
  #L352896.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L35289c.  v1:= temp @kind object;
  #L35289e.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L3528a4.  v1:= temp @kind object;
  #L3528a6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3528ac.  v1:= temp @kind object;
  #L3528ae.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3528b4.  throw v0;
  #L3528b6.  v0:= 0I;
  #L3528b8.  call `readFrom`(v4, v5, v6, v0) @signature `Lokio/Buffer;.readFrom:(Ljava/io/InputStream;JZ)V` @kind direct;
  #L3528be.  return v4 @kind object;
}
procedure `void` `readFully`(`okio.Buffer` v2 @kind this, `okio.Buffer` v3 @kind object @name `sink`, `long` v4 @name `byteCount`) @signature `Lokio/Buffer;.readFully:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3528d0.  v0:= v2.`okio.Buffer.size` @type ^`long` @kind wide;
  #L3528d4.  v0:= lcmp(v0, v4);
  #L3528d8.  if v0 >= 0 then goto L3528f2;
  #L3528dc.  v0:= v2.`okio.Buffer.size` @type ^`long` @kind wide;
  #L3528e0.  call `write`(v3, v2, v0) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L3528e6.  v0:= new `java.io.EOFException`;
  #L3528ea.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L3528f0.  throw v0;
  #L3528f2.  call `write`(v3, v2, v4) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L3528f8.  return @kind void;
}
procedure `void` `readFully`(`okio.Buffer` v3 @kind this, `byte`[] v4 @kind object @name `sink`) @signature `Lokio/Buffer;.readFully:([B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L35290c.  v0:= 0I;
  #L35290e.  v2:= length @variable v4;
  #L352910.  if v0 >= v2 then goto L352936;
  #L352914.  v2:= length @variable v4;
  #L352916.  v2:= v2 - v0 @kind int;
  #L352918.  call temp:= `read`(v3, v4, v0, v2) @signature `Lokio/Buffer;.read:([BII)I` @kind virtual;
  #L35291e.  v1:= temp;
  #L352920.  v2:= -1I;
  #L352922.  if v1 != v2 then goto L352932;
  #L352926.  v2:= new `java.io.EOFException`;
  #L35292a.  call `<init>`(v2) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L352930.  throw v2;
  #L352932.  v0:= v0 + v1 @kind int;
  #L352934.  goto L35290e;
  #L352936.  return @kind void;
}
procedure `long` `readHexadecimalUnsignedLong`(`okio.Buffer` v18 @kind this) @signature `Lokio/Buffer;.readHexadecimalUnsignedLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L352948.  v0:= v18 @kind object;
  #L35294c.  v14:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L352950.  v16:= 0L;
  #L352954.  v11:= lcmp(v14, v16);
  #L352958.  if v11 != 0 then goto L35296c;
  #L35295c.  v11:= new `java.lang.IllegalStateException`;
  #L352960.  v14:= "size == 0" @kind object;
  #L352964.  call `<init>`(v11, v14) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L35296a.  throw v11;
  #L35296c.  v12:= 0L;
  #L352970.  v9:= 0I;
  #L352972.  v6:= 0I;
  #L352974.  v0:= v18 @kind object;
  #L352978.  v10:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L35297c.  v4:= v10.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L352980.  v8:= v10.`okio.Segment.pos` @type ^`int`;
  #L352984.  v7:= v10.`okio.Segment.limit` @type ^`int`;
  #L352988.  if v8 >= v7 then goto L352a7e;
  #L35298c.  v2:= v4[v8] @kind byte;
  #L352990.  v11:= 48I;
  #L352994.  if v2 < v11 then goto L352a0a;
  #L352998.  v11:= 57I;
  #L35299c.  if v2 > v11 then goto L352a0a;
  #L3529a0.  v5:= v2 + -48;
  #L3529a4.  v14:= -3.105036184601418E231D;
  #L3529a8.  v14:= v14 ^& v12 @kind long;
  #L3529aa.  v16:= 0L;
  #L3529ae.  v11:= lcmp(v14, v16);
  #L3529b2.  if v11 == 0 then goto L352ac4;
  #L3529b6.  v11:= new `okio.Buffer`;
  #L3529ba.  call `<init>`(v11) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L3529c0.  call temp:= `writeHexadecimalUnsignedLong`(v11, v12) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/Buffer;` @kind virtual;
  #L3529c6.  v11:= temp @kind object;
  #L3529c8.  call temp:= `writeByte`(v11, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L3529ce.  v3:= temp @kind object;
  #L3529d0.  v11:= new `java.lang.NumberFormatException`;
  #L3529d4.  v14:= new `java.lang.StringBuilder`;
  #L3529d8.  call `<init>`(v14) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3529de.  v15:= "Number too large: " @kind object;
  #L3529e2.  call temp:= `append`(v14, v15) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3529e8.  v14:= temp @kind object;
  #L3529ea.  call temp:= `readUtf8`(v3) @signature `Lokio/Buffer;.readUtf8:()Ljava/lang/String;` @kind virtual;
  #L3529f0.  v15:= temp @kind object;
  #L3529f2.  call temp:= `append`(v14, v15) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3529f8.  v14:= temp @kind object;
  #L3529fa.  call temp:= `toString`(v14) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L352a00.  v14:= temp @kind object;
  #L352a02.  call `<init>`(v11, v14) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L352a08.  throw v11;
  #L352a0a.  v11:= 97I;
  #L352a0e.  if v2 < v11 then goto L352a24;
  #L352a12.  v11:= 102I;
  #L352a16.  if v2 > v11 then goto L352a24;
  #L352a1a.  v11:= v2 + -97;
  #L352a1e.  v5:= v11 + 10;
  #L352a22.  goto L3529a4;
  #L352a24.  v11:= 65I;
  #L352a28.  if v2 < v11 then goto L352a3e;
  #L352a2c.  v11:= 70I;
  #L352a30.  if v2 > v11 then goto L352a3e;
  #L352a34.  v11:= v2 + -65;
  #L352a38.  v5:= v11 + 10;
  #L352a3c.  goto L3529a4;
  #L352a3e.  if v9 != 0 then goto L352a7c;
  #L352a42.  v11:= new `java.lang.NumberFormatException`;
  #L352a46.  v14:= new `java.lang.StringBuilder`;
  #L352a4a.  call `<init>`(v14) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L352a50.  v15:= "Expected leading [0-9a-fA-F] character but was 0x" @kind object;
  #L352a54.  call temp:= `append`(v14, v15) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L352a5a.  v14:= temp @kind object;
  #L352a5c.  call temp:= `toHexString`(v2) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L352a62.  v15:= temp @kind object;
  #L352a64.  call temp:= `append`(v14, v15) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L352a6a.  v14:= temp @kind object;
  #L352a6c.  call temp:= `toString`(v14) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L352a72.  v14:= temp @kind object;
  #L352a74.  call `<init>`(v11, v14) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L352a7a.  throw v11;
  #L352a7c.  v6:= 1I;
  #L352a7e.  if v8 != v7 then goto L352ad8;
  #L352a82.  call temp:= `pop`(v10) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L352a88.  v11:= temp @kind object;
  #L352a8a.  v0:= v18 @kind object;
  #L352a8e.  v0.`okio.Buffer.head` @type ^`okio.Segment` := v11 @kind object;
  #L352a92.  call `recycle`(v10) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L352a98.  if v6 != 0 then goto L352aa8;
  #L352a9c.  v0:= v18 @kind object;
  #L352aa0.  v11:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L352aa4.  if v11 != 0 then goto L352974;
  #L352aa8.  v0:= v18 @kind object;
  #L352aac.  v14:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L352ab0.  v0:= (`long`) v9 @kind i2l;
  #L352ab2.  v16:= v0 @kind wide;
  #L352ab6.  v14:= v14 - v16 @kind long;
  #L352aba.  v0:= v18 @kind object;
  #L352abe.  v0.`okio.Buffer.size` @type ^`long` := v14 @kind wide;
  #L352ac2.  return v12 @kind wide;
  #L352ac4.  v11:= 4I;
  #L352ac6.  v12:= v12 ^< v11 @kind long;
  #L352ac8.  v14:= (`long`) v5 @kind i2l;
  #L352aca.  v12:= v12 ^| v14 @kind long;
  #L352acc.  v8:= v8 + 1;
  #L352ad0.  v9:= v9 + 1;
  #L352ad4.  goto L352988;
  #L352ad8.  v10.`okio.Segment.pos` @type ^`int` := v8;
  #L352adc.  goto L352a98;
}
procedure `int` `readInt`(`okio.Buffer` v10 @kind this) @signature `Lokio/Buffer;.readInt:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L352af0.  v8:= 4L;
  #L352af4.  v6:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L352af8.  v6:= lcmp(v6, v8);
  #L352afc.  if v6 >= 0 then goto L352b36;
  #L352b00.  v6:= new `java.lang.IllegalStateException`;
  #L352b04.  v7:= new `java.lang.StringBuilder`;
  #L352b08.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L352b0e.  v8:= "size < 4: " @kind object;
  #L352b12.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L352b18.  v7:= temp @kind object;
  #L352b1a.  v8:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L352b1e.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L352b24.  v7:= temp @kind object;
  #L352b26.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L352b2c.  v7:= temp @kind object;
  #L352b2e.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L352b34.  throw v6;
  #L352b36.  v5:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L352b3a.  v3:= v5.`okio.Segment.pos` @type ^`int`;
  #L352b3e.  v2:= v5.`okio.Segment.limit` @type ^`int`;
  #L352b42.  v6:= v2 - v3 @kind int;
  #L352b46.  v7:= 4I;
  #L352b48.  if v6 >= v7 then goto L352b92;
  #L352b4c.  call temp:= `readByte`(v10) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L352b52.  v6:= temp;
  #L352b54.  v6:= v6 ^& 255;
  #L352b58.  v6:= v6 ^< 24;
  #L352b5c.  call temp:= `readByte`(v10) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L352b62.  v7:= temp;
  #L352b64.  v7:= v7 ^& 255;
  #L352b68.  v7:= v7 ^< 16;
  #L352b6c.  v6:= v6 ^| v7 @kind int;
  #L352b6e.  call temp:= `readByte`(v10) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L352b74.  v7:= temp;
  #L352b76.  v7:= v7 ^& 255;
  #L352b7a.  v7:= v7 ^< 8;
  #L352b7e.  v6:= v6 ^| v7 @kind int;
  #L352b80.  call temp:= `readByte`(v10) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L352b86.  v7:= temp;
  #L352b88.  v7:= v7 ^& 255;
  #L352b8c.  v1:= v6 ^| v7 @kind int;
  #L352b90.  return v1;
  #L352b92.  v0:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L352b96.  v4:= v3 + 1;
  #L352b9a.  v6:= v0[v3] @kind byte;
  #L352b9e.  v6:= v6 ^& 255;
  #L352ba2.  v6:= v6 ^< 24;
  #L352ba6.  v3:= v4 + 1;
  #L352baa.  v7:= v0[v4] @kind byte;
  #L352bae.  v7:= v7 ^& 255;
  #L352bb2.  v7:= v7 ^< 16;
  #L352bb6.  v6:= v6 ^| v7 @kind int;
  #L352bb8.  v4:= v3 + 1;
  #L352bbc.  v7:= v0[v3] @kind byte;
  #L352bc0.  v7:= v7 ^& 255;
  #L352bc4.  v7:= v7 ^< 8;
  #L352bc8.  v6:= v6 ^| v7 @kind int;
  #L352bca.  v3:= v4 + 1;
  #L352bce.  v7:= v0[v4] @kind byte;
  #L352bd2.  v7:= v7 ^& 255;
  #L352bd6.  v1:= v6 ^| v7 @kind int;
  #L352bda.  v6:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L352bde.  v6:= v6 - v8 @kind long;
  #L352be0.  v10.`okio.Buffer.size` @type ^`long` := v6 @kind wide;
  #L352be4.  if v3 != v2 then goto L352bfc;
  #L352be8.  call temp:= `pop`(v5) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L352bee.  v6:= temp @kind object;
  #L352bf0.  v10.`okio.Buffer.head` @type ^`okio.Segment` := v6 @kind object;
  #L352bf4.  call `recycle`(v5) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L352bfa.  goto L352b90;
  #L352bfc.  v5.`okio.Segment.pos` @type ^`int` := v3;
  #L352c00.  goto L352b90;
}
procedure `int` `readIntLe`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.readIntLe:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L352c14.  call temp:= `readInt`(v1) @signature `Lokio/Buffer;.readInt:()I` @kind virtual;
  #L352c1a.  v0:= temp;
  #L352c1c.  call temp:= `reverseBytesInt`(v0) @signature `Lokio/Util;.reverseBytesInt:(I)I` @kind static;
  #L352c22.  v0:= temp;
  #L352c24.  return v0;
}
procedure `long` `readLong`(`okio.Buffer` v14 @kind this) @signature `Lokio/Buffer;.readLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L352c38.  v8:= v14.`okio.Buffer.size` @type ^`long` @kind wide;
  #L352c3c.  v10:= 8L;
  #L352c40.  v5:= lcmp(v8, v10);
  #L352c44.  if v5 >= 0 then goto L352c7e;
  #L352c48.  v5:= new `java.lang.IllegalStateException`;
  #L352c4c.  v8:= new `java.lang.StringBuilder`;
  #L352c50.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L352c56.  v9:= "size < 8: " @kind object;
  #L352c5a.  call temp:= `append`(v8, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L352c60.  v8:= temp @kind object;
  #L352c62.  v10:= v14.`okio.Buffer.size` @type ^`long` @kind wide;
  #L352c66.  call temp:= `append`(v8, v10) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L352c6c.  v8:= temp @kind object;
  #L352c6e.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L352c74.  v8:= temp @kind object;
  #L352c76.  call `<init>`(v5, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L352c7c.  throw v5;
  #L352c7e.  v4:= v14.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L352c82.  v2:= v4.`okio.Segment.pos` @type ^`int`;
  #L352c86.  v1:= v4.`okio.Segment.limit` @type ^`int`;
  #L352c8a.  v5:= v1 - v2 @kind int;
  #L352c8e.  v8:= 8I;
  #L352c92.  if v5 >= v8 then goto L352cce;
  #L352c96.  call temp:= `readInt`(v14) @signature `Lokio/Buffer;.readInt:()I` @kind virtual;
  #L352c9c.  v5:= temp;
  #L352c9e.  v8:= (`long`) v5 @kind i2l;
  #L352ca0.  v10:= 4294967295L;
  #L352caa.  v8:= v8 ^& v10 @kind long;
  #L352cac.  v5:= 32I;
  #L352cb0.  v8:= v8 ^< v5 @kind long;
  #L352cb2.  call temp:= `readInt`(v14) @signature `Lokio/Buffer;.readInt:()I` @kind virtual;
  #L352cb8.  v5:= temp;
  #L352cba.  v10:= (`long`) v5 @kind i2l;
  #L352cbc.  v12:= 4294967295L;
  #L352cc6.  v10:= v10 ^& v12 @kind long;
  #L352cc8.  v6:= v8 ^| v10 @kind long;
  #L352ccc.  return v6 @kind wide;
  #L352cce.  v0:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L352cd2.  v3:= v2 + 1;
  #L352cd6.  v5:= v0[v2] @kind byte;
  #L352cda.  v8:= (`long`) v5 @kind i2l;
  #L352cdc.  v10:= 255L;
  #L352ce0.  v8:= v8 ^& v10 @kind long;
  #L352ce2.  v5:= 56I;
  #L352ce6.  v8:= v8 ^< v5 @kind long;
  #L352ce8.  v2:= v3 + 1;
  #L352cec.  v5:= v0[v3] @kind byte;
  #L352cf0.  v10:= (`long`) v5 @kind i2l;
  #L352cf2.  v12:= 255L;
  #L352cf6.  v10:= v10 ^& v12 @kind long;
  #L352cf8.  v5:= 48I;
  #L352cfc.  v10:= v10 ^< v5 @kind long;
  #L352cfe.  v8:= v8 ^| v10 @kind long;
  #L352d00.  v3:= v2 + 1;
  #L352d04.  v5:= v0[v2] @kind byte;
  #L352d08.  v10:= (`long`) v5 @kind i2l;
  #L352d0a.  v12:= 255L;
  #L352d0e.  v10:= v10 ^& v12 @kind long;
  #L352d10.  v5:= 40I;
  #L352d14.  v10:= v10 ^< v5 @kind long;
  #L352d16.  v8:= v8 ^| v10 @kind long;
  #L352d18.  v2:= v3 + 1;
  #L352d1c.  v5:= v0[v3] @kind byte;
  #L352d20.  v10:= (`long`) v5 @kind i2l;
  #L352d22.  v12:= 255L;
  #L352d26.  v10:= v10 ^& v12 @kind long;
  #L352d28.  v5:= 32I;
  #L352d2c.  v10:= v10 ^< v5 @kind long;
  #L352d2e.  v8:= v8 ^| v10 @kind long;
  #L352d30.  v3:= v2 + 1;
  #L352d34.  v5:= v0[v2] @kind byte;
  #L352d38.  v10:= (`long`) v5 @kind i2l;
  #L352d3a.  v12:= 255L;
  #L352d3e.  v10:= v10 ^& v12 @kind long;
  #L352d40.  v5:= 24I;
  #L352d44.  v10:= v10 ^< v5 @kind long;
  #L352d46.  v8:= v8 ^| v10 @kind long;
  #L352d48.  v2:= v3 + 1;
  #L352d4c.  v5:= v0[v3] @kind byte;
  #L352d50.  v10:= (`long`) v5 @kind i2l;
  #L352d52.  v12:= 255L;
  #L352d56.  v10:= v10 ^& v12 @kind long;
  #L352d58.  v5:= 16I;
  #L352d5c.  v10:= v10 ^< v5 @kind long;
  #L352d5e.  v8:= v8 ^| v10 @kind long;
  #L352d60.  v3:= v2 + 1;
  #L352d64.  v5:= v0[v2] @kind byte;
  #L352d68.  v10:= (`long`) v5 @kind i2l;
  #L352d6a.  v12:= 255L;
  #L352d6e.  v10:= v10 ^& v12 @kind long;
  #L352d70.  v5:= 8I;
  #L352d74.  v10:= v10 ^< v5 @kind long;
  #L352d76.  v8:= v8 ^| v10 @kind long;
  #L352d78.  v2:= v3 + 1;
  #L352d7c.  v5:= v0[v3] @kind byte;
  #L352d80.  v10:= (`long`) v5 @kind i2l;
  #L352d82.  v12:= 255L;
  #L352d86.  v10:= v10 ^& v12 @kind long;
  #L352d88.  v6:= v8 ^| v10 @kind long;
  #L352d8c.  v8:= v14.`okio.Buffer.size` @type ^`long` @kind wide;
  #L352d90.  v10:= 8L;
  #L352d94.  v8:= v8 - v10 @kind long;
  #L352d96.  v14.`okio.Buffer.size` @type ^`long` := v8 @kind wide;
  #L352d9a.  if v2 != v1 then goto L352db2;
  #L352d9e.  call temp:= `pop`(v4) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L352da4.  v5:= temp @kind object;
  #L352da6.  v14.`okio.Buffer.head` @type ^`okio.Segment` := v5 @kind object;
  #L352daa.  call `recycle`(v4) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L352db0.  goto L352ccc;
  #L352db2.  v4.`okio.Segment.pos` @type ^`int` := v2;
  #L352db6.  goto L352ccc;
}
procedure `long` `readLongLe`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.readLongLe:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L352dc8.  call temp:= `readLong`(v2) @signature `Lokio/Buffer;.readLong:()J` @kind virtual;
  #L352dce.  v0:= temp @kind wide;
  #L352dd0.  call temp:= `reverseBytesLong`(v0) @signature `Lokio/Util;.reverseBytesLong:(J)J` @kind static;
  #L352dd6.  v0:= temp @kind wide;
  #L352dd8.  return v0 @kind wide;
}
procedure `short` `readShort`(`okio.Buffer` v10 @kind this) @signature `Lokio/Buffer;.readShort:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L352dec.  v8:= 2L;
  #L352df0.  v6:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L352df4.  v6:= lcmp(v6, v8);
  #L352df8.  if v6 >= 0 then goto L352e32;
  #L352dfc.  v6:= new `java.lang.IllegalStateException`;
  #L352e00.  v7:= new `java.lang.StringBuilder`;
  #L352e04.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L352e0a.  v8:= "size < 2: " @kind object;
  #L352e0e.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L352e14.  v7:= temp @kind object;
  #L352e16.  v8:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L352e1a.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L352e20.  v7:= temp @kind object;
  #L352e22.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L352e28.  v7:= temp @kind object;
  #L352e2a.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L352e30.  throw v6;
  #L352e32.  v5:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L352e36.  v2:= v5.`okio.Segment.pos` @type ^`int`;
  #L352e3a.  v1:= v5.`okio.Segment.limit` @type ^`int`;
  #L352e3e.  v6:= v1 - v2 @kind int;
  #L352e42.  v7:= 2I;
  #L352e44.  if v6 >= v7 then goto L352e6c;
  #L352e48.  call temp:= `readByte`(v10) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L352e4e.  v6:= temp;
  #L352e50.  v6:= v6 ^& 255;
  #L352e54.  v6:= v6 ^< 8;
  #L352e58.  call temp:= `readByte`(v10) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L352e5e.  v7:= temp;
  #L352e60.  v7:= v7 ^& 255;
  #L352e64.  v4:= v6 ^| v7 @kind int;
  #L352e68.  v6:= (`short`) v4 @kind i2s;
  #L352e6a.  return v6;
  #L352e6c.  v0:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L352e70.  v3:= v2 + 1;
  #L352e74.  v6:= v0[v2] @kind byte;
  #L352e78.  v6:= v6 ^& 255;
  #L352e7c.  v6:= v6 ^< 8;
  #L352e80.  v2:= v3 + 1;
  #L352e84.  v7:= v0[v3] @kind byte;
  #L352e88.  v7:= v7 ^& 255;
  #L352e8c.  v4:= v6 ^| v7 @kind int;
  #L352e90.  v6:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L352e94.  v6:= v6 - v8 @kind long;
  #L352e96.  v10.`okio.Buffer.size` @type ^`long` := v6 @kind wide;
  #L352e9a.  if v2 != v1 then goto L352eb4;
  #L352e9e.  call temp:= `pop`(v5) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L352ea4.  v6:= temp @kind object;
  #L352ea6.  v10.`okio.Buffer.head` @type ^`okio.Segment` := v6 @kind object;
  #L352eaa.  call `recycle`(v5) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L352eb0.  v6:= (`short`) v4 @kind i2s;
  #L352eb2.  goto L352e6a;
  #L352eb4.  v5.`okio.Segment.pos` @type ^`int` := v2;
  #L352eb8.  goto L352eb0;
}
procedure `short` `readShortLe`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.readShortLe:()S` @AccessFlag PUBLIC {
    temp;
    v0;

  #L352ecc.  call temp:= `readShort`(v1) @signature `Lokio/Buffer;.readShort:()S` @kind virtual;
  #L352ed2.  v0:= temp;
  #L352ed4.  call temp:= `reverseBytesShort`(v0) @signature `Lokio/Util;.reverseBytesShort:(S)S` @kind static;
  #L352eda.  v0:= temp;
  #L352edc.  return v0;
}
procedure `java.lang.String` `readString`(`okio.Buffer` v9 @kind this, `long` v10 @name `byteCount`, `java.nio.charset.Charset` v12 @kind object @name `charset`) @signature `Lokio/Buffer;.readString:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L352ef0.  v2:= 0L;
  #L352ef4.  v0:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L352ef8.  v4:= v10 @kind wide;
  #L352efa.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L352f00.  if v12 != 0 then goto L352f14;
  #L352f04.  v0:= new `java.lang.IllegalArgumentException`;
  #L352f08.  v1:= "charset == null" @kind object;
  #L352f0c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L352f12.  throw v0;
  #L352f14.  v0:= 2147483647L;
  #L352f1a.  v0:= lcmp(v10, v0);
  #L352f1e.  if v0 <= 0 then goto L352f54;
  #L352f22.  v0:= new `java.lang.IllegalArgumentException`;
  #L352f26.  v1:= new `java.lang.StringBuilder`;
  #L352f2a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L352f30.  v2:= "byteCount > Integer.MAX_VALUE: " @kind object;
  #L352f34.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L352f3a.  v1:= temp @kind object;
  #L352f3c.  call temp:= `append`(v1, v10) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L352f42.  v1:= temp @kind object;
  #L352f44.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L352f4a.  v1:= temp @kind object;
  #L352f4c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L352f52.  throw v0;
  #L352f54.  v0:= lcmp(v10, v2);
  #L352f58.  if v0 != 0 then goto L352f62;
  #L352f5c.  v6:= "" @kind object;
  #L352f60.  return v6 @kind object;
  #L352f62.  v7:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L352f66.  v0:= v7.`okio.Segment.pos` @type ^`int`;
  #L352f6a.  v0:= (`long`) v0 @kind i2l;
  #L352f6c.  v0:= v0 + v10 @kind long;
  #L352f6e.  v2:= v7.`okio.Segment.limit` @type ^`int`;
  #L352f72.  v2:= (`long`) v2 @kind i2l;
  #L352f74.  v0:= lcmp(v0, v2);
  #L352f78.  if v0 <= 0 then goto L352f90;
  #L352f7c.  v6:= new `java.lang.String`;
  #L352f80.  call temp:= `readByteArray`(v9, v10) @signature `Lokio/Buffer;.readByteArray:(J)[B` @kind virtual;
  #L352f86.  v0:= temp @kind object;
  #L352f88.  call `<init>`(v6, v0, v12) @signature `Ljava/lang/String;.<init>:([BLjava/nio/charset/Charset;)V` @kind direct;
  #L352f8e.  goto L352f60;
  #L352f90.  v6:= new `java.lang.String`;
  #L352f94.  v0:= v7.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L352f98.  v1:= v7.`okio.Segment.pos` @type ^`int`;
  #L352f9c.  v2:= (`int`) v10 @kind l2i;
  #L352f9e.  call `<init>`(v6, v0, v1, v2, v12) @signature `Ljava/lang/String;.<init>:([BIILjava/nio/charset/Charset;)V` @kind direct;
  #L352fa4.  v0:= v7.`okio.Segment.pos` @type ^`int`;
  #L352fa8.  v0:= (`long`) v0 @kind i2l;
  #L352faa.  v0:= v0 + v10 @kind long;
  #L352fac.  v0:= (`int`) v0 @kind l2i;
  #L352fae.  v7.`okio.Segment.pos` @type ^`int` := v0;
  #L352fb2.  v0:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L352fb6.  v0:= v0 - v10 @kind long;
  #L352fb8.  v9.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L352fbc.  v0:= v7.`okio.Segment.pos` @type ^`int`;
  #L352fc0.  v1:= v7.`okio.Segment.limit` @type ^`int`;
  #L352fc4.  if v0 != v1 then goto L352f60;
  #L352fc8.  call temp:= `pop`(v7) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L352fce.  v0:= temp @kind object;
  #L352fd0.  v9.`okio.Buffer.head` @type ^`okio.Segment` := v0 @kind object;
  #L352fd4.  call `recycle`(v7) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L352fda.  goto L352f60;
}
procedure `java.lang.String` `readString`(`okio.Buffer` v4 @kind this, `java.nio.charset.Charset` v5 @kind object @name `charset`) @signature `Lokio/Buffer;.readString:(Ljava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L352fec.  v2:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L352ff0.  call temp:= `readString`(v4, v2, v5) @signature `Lokio/Buffer;.readString:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L352ff6.  v1:= temp @kind object;
  #L352ff8.  return v1 @kind object;
  #L352ffa.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L352ffc.  v1:= new `java.lang.AssertionError`;
  #L353000.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L353006.  throw v1;
  catch `java.io.EOFException` @[L352fec..L352ff6] goto L352ffa;
}
procedure `java.lang.String` `readUtf8`(`okio.Buffer` v4 @kind this) @signature `Lokio/Buffer;.readUtf8:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L353028.  v2:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L35302c.  v1:= `@@okio.Util.UTF_8` @type ^`java.nio.charset.Charset` @kind object;
  #L353030.  call temp:= `readString`(v4, v2, v1) @signature `Lokio/Buffer;.readString:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L353036.  v1:= temp @kind object;
  #L353038.  return v1 @kind object;
  #L35303a.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L35303c.  v1:= new `java.lang.AssertionError`;
  #L353040.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L353046.  throw v1;
  catch `java.io.EOFException` @[L353028..L353036] goto L35303a;
}
procedure `java.lang.String` `readUtf8`(`okio.Buffer` v1 @kind this, `long` v2 @name `byteCount`) @signature `Lokio/Buffer;.readUtf8:(J)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L353068.  v0:= `@@okio.Util.UTF_8` @type ^`java.nio.charset.Charset` @kind object;
  #L35306c.  call temp:= `readString`(v1, v2, v0) @signature `Lokio/Buffer;.readString:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L353072.  v0:= temp @kind object;
  #L353074.  return v0 @kind object;
}
procedure `int` `readUtf8CodePoint`(`okio.Buffer` v12 @kind this) @signature `Lokio/Buffer;.readUtf8CodePoint:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L353088.  v10:= 0L;
  #L35308c.  v6:= 65533I;
  #L353092.  v8:= v12.`okio.Buffer.size` @type ^`long` @kind wide;
  #L353096.  v7:= lcmp(v8, v10);
  #L35309a.  if v7 != 0 then goto L3530aa;
  #L35309e.  v6:= new `java.io.EOFException`;
  #L3530a2.  call `<init>`(v6) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L3530a8.  throw v6;
  #L3530aa.  call temp:= `getByte`(v12, v10) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L3530b0.  v1:= temp;
  #L3530b2.  v7:= v1 ^& 128;
  #L3530b6.  if v7 != 0 then goto L353142;
  #L3530ba.  v3:= v1 ^& 127;
  #L3530be.  v2:= 1I;
  #L3530c0.  v5:= 0I;
  #L3530c2.  v8:= v12.`okio.Buffer.size` @type ^`long` @kind wide;
  #L3530c6.  v10:= (`long`) v2 @kind i2l;
  #L3530c8.  v7:= lcmp(v8, v10);
  #L3530cc.  if v7 >= 0 then goto L353198;
  #L3530d0.  v6:= new `java.io.EOFException`;
  #L3530d4.  v7:= new `java.lang.StringBuilder`;
  #L3530d8.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3530de.  v8:= "size < " @kind object;
  #L3530e2.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3530e8.  v7:= temp @kind object;
  #L3530ea.  call temp:= `append`(v7, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3530f0.  v7:= temp @kind object;
  #L3530f2.  v8:= ": " @kind object;
  #L3530f6.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3530fc.  v7:= temp @kind object;
  #L3530fe.  v8:= v12.`okio.Buffer.size` @type ^`long` @kind wide;
  #L353102.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L353108.  v7:= temp @kind object;
  #L35310a.  v8:= " (to read code point prefixed 0x" @kind object;
  #L35310e.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L353114.  v7:= temp @kind object;
  #L353116.  call temp:= `toHexString`(v1) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L35311c.  v8:= temp @kind object;
  #L35311e.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L353124.  v7:= temp @kind object;
  #L353126.  v8:= ")" @kind object;
  #L35312a.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L353130.  v7:= temp @kind object;
  #L353132.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L353138.  v7:= temp @kind object;
  #L35313a.  call `<init>`(v6, v7) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L353140.  throw v6;
  #L353142.  v7:= v1 ^& 224;
  #L353146.  v8:= 192I;
  #L35314a.  if v7 != v8 then goto L35315a;
  #L35314e.  v3:= v1 ^& 31;
  #L353152.  v2:= 2I;
  #L353154.  v5:= 128I;
  #L353158.  goto L3530c2;
  #L35315a.  v7:= v1 ^& 240;
  #L35315e.  v8:= 224I;
  #L353162.  if v7 != v8 then goto L353172;
  #L353166.  v3:= v1 ^& 15;
  #L35316a.  v2:= 3I;
  #L35316c.  v5:= 2048I;
  #L353170.  goto L3530c2;
  #L353172.  v7:= v1 ^& 248;
  #L353176.  v8:= 240I;
  #L35317a.  if v7 != v8 then goto L35318a;
  #L35317e.  v3:= v1 ^& 7;
  #L353182.  v2:= 4I;
  #L353184.  v5:= 65536I;
  #L353188.  goto L3530c2;
  #L35318a.  v8:= 1L;
  #L35318e.  call `skip`(v12, v8) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L353194.  v3:= v6;
  #L353196.  return v3;
  #L353198.  v4:= 1I;
  #L35319a.  if v4 >= v2 then goto L3531d0;
  #L35319e.  v8:= (`long`) v4 @kind i2l;
  #L3531a0.  call temp:= `getByte`(v12, v8) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L3531a6.  v0:= temp;
  #L3531a8.  v7:= v0 ^& 192;
  #L3531ac.  v8:= 128I;
  #L3531b0.  if v7 != v8 then goto L3531c4;
  #L3531b4.  v3:= v3 ^< 6;
  #L3531b8.  v7:= v0 ^& 63;
  #L3531bc.  v3:= v3 ^| v7 @kind int;
  #L3531be.  v4:= v4 + 1;
  #L3531c2.  goto L35319a;
  #L3531c4.  v8:= (`long`) v4 @kind i2l;
  #L3531c6.  call `skip`(v12, v8) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L3531cc.  v3:= v6;
  #L3531ce.  goto L353196;
  #L3531d0.  v8:= (`long`) v2 @kind i2l;
  #L3531d2.  call `skip`(v12, v8) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L3531d8.  v7:= 1114111I;
  #L3531de.  if v3 <= v7 then goto L3531e6;
  #L3531e2.  v3:= v6;
  #L3531e4.  goto L353196;
  #L3531e6.  v7:= 55296I;
  #L3531ec.  if v3 < v7 then goto L3531fe;
  #L3531f0.  v7:= 57343I;
  #L3531f6.  if v3 > v7 then goto L3531fe;
  #L3531fa.  v3:= v6;
  #L3531fc.  goto L353196;
  #L3531fe.  if v3 >= v5 then goto L353196;
  #L353202.  v3:= v6;
  #L353204.  goto L353196;
}
procedure `java.lang.String` `readUtf8Line`(`okio.Buffer` v6 @kind this) @signature `Lokio/Buffer;.readUtf8Line:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L353218.  v2:= 10I;
  #L35321c.  call temp:= `indexOf`(v6, v2) @signature `Lokio/Buffer;.indexOf:(B)J` @kind virtual;
  #L353222.  v0:= temp @kind wide;
  #L353224.  v2:= -1L;
  #L353228.  v2:= lcmp(v0, v2);
  #L35322c.  if v2 != 0 then goto L353252;
  #L353230.  v2:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L353234.  v4:= 0L;
  #L353238.  v2:= lcmp(v2, v4);
  #L35323c.  if v2 == 0 then goto L35324e;
  #L353240.  v2:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L353244.  call temp:= `readUtf8`(v6, v2) @signature `Lokio/Buffer;.readUtf8:(J)Ljava/lang/String;` @kind virtual;
  #L35324a.  v2:= temp @kind object;
  #L35324c.  return v2 @kind object;
  #L35324e.  v2:= 0I;
  #L353250.  goto L35324c;
  #L353252.  call temp:= `readUtf8Line`(v6, v0) @signature `Lokio/Buffer;.readUtf8Line:(J)Ljava/lang/String;` @kind virtual;
  #L353258.  v2:= temp @kind object;
  #L35325a.  goto L35324c;
}
procedure `java.lang.String` `readUtf8Line`(`okio.Buffer` v7 @kind this, `long` v8 @name `newline`) @signature `Lokio/Buffer;.readUtf8Line:(J)Ljava/lang/String;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L35326c.  v4:= 1L;
  #L353270.  v2:= 0L;
  #L353274.  v2:= lcmp(v8, v2);
  #L353278.  if v2 <= 0 then goto L3532aa;
  #L35327c.  v2:= v8 - v4 @kind long;
  #L353280.  call temp:= `getByte`(v7, v2) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L353286.  v2:= temp;
  #L353288.  v3:= 13I;
  #L35328c.  if v2 != v3 then goto L3532aa;
  #L353290.  v2:= v8 - v4 @kind long;
  #L353294.  call temp:= `readUtf8`(v7, v2) @signature `Lokio/Buffer;.readUtf8:(J)Ljava/lang/String;` @kind virtual;
  #L35329a.  v0:= temp @kind object;
  #L35329c.  v2:= 2L;
  #L3532a0.  call `skip`(v7, v2) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L3532a6.  v1:= v0 @kind object;
  #L3532a8.  return v1 @kind object;
  #L3532aa.  call temp:= `readUtf8`(v7, v8) @signature `Lokio/Buffer;.readUtf8:(J)Ljava/lang/String;` @kind virtual;
  #L3532b0.  v0:= temp @kind object;
  #L3532b2.  call `skip`(v7, v4) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L3532b8.  v1:= v0 @kind object;
  #L3532ba.  goto L3532a8;
}
procedure `java.lang.String` `readUtf8LineStrict`(`okio.Buffer` v10 @kind this) @signature `Lokio/Buffer;.readUtf8LineStrict:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L3532cc.  v0:= 10I;
  #L3532d0.  call temp:= `indexOf`(v10, v0) @signature `Lokio/Buffer;.indexOf:(B)J` @kind virtual;
  #L3532d6.  v6:= temp @kind wide;
  #L3532d8.  v2:= -1L;
  #L3532dc.  v0:= lcmp(v6, v2);
  #L3532e0.  if v0 != 0 then goto L353374;
  #L3532e4.  v1:= new `okio.Buffer`;
  #L3532e8.  call `<init>`(v1) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L3532ee.  v2:= 0L;
  #L3532f2.  v4:= 32L;
  #L3532f6.  v8:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L3532fa.  call temp:= `min`(v4, v8) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L353300.  v4:= temp @kind wide;
  #L353302.  v0:= v10 @kind object;
  #L353304.  call temp:= `copyTo`(v0, v1, v2, v4) @signature `Lokio/Buffer;.copyTo:(Lokio/Buffer;JJ)Lokio/Buffer;` @kind virtual;
  #L35330a.  v0:= new `java.io.EOFException`;
  #L35330e.  v2:= new `java.lang.StringBuilder`;
  #L353312.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L353318.  v3:= "\\n not found: size=" @kind object;
  #L35331c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L353322.  v2:= temp @kind object;
  #L353324.  call temp:= `size`(v10) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L35332a.  v4:= temp @kind wide;
  #L35332c.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L353332.  v2:= temp @kind object;
  #L353334.  v3:= " content=" @kind object;
  #L353338.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L35333e.  v2:= temp @kind object;
  #L353340.  call temp:= `readByteString`(v1) @signature `Lokio/Buffer;.readByteString:()Lokio/ByteString;` @kind virtual;
  #L353346.  v3:= temp @kind object;
  #L353348.  call temp:= `hex`(v3) @signature `Lokio/ByteString;.hex:()Ljava/lang/String;` @kind virtual;
  #L35334e.  v3:= temp @kind object;
  #L353350.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L353356.  v2:= temp @kind object;
  #L353358.  v3:= "…" @kind object;
  #L35335c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L353362.  v2:= temp @kind object;
  #L353364.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L35336a.  v2:= temp @kind object;
  #L35336c.  call `<init>`(v0, v2) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L353372.  throw v0;
  #L353374.  call temp:= `readUtf8Line`(v10, v6) @signature `Lokio/Buffer;.readUtf8Line:(J)Ljava/lang/String;` @kind virtual;
  #L35337a.  v0:= temp @kind object;
  #L35337c.  return v0 @kind object;
}
procedure `boolean` `request`(`okio.Buffer` v3 @kind this, `long` v4 @name `byteCount`) @signature `Lokio/Buffer;.request:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L353390.  v0:= v3.`okio.Buffer.size` @type ^`long` @kind wide;
  #L353394.  v0:= lcmp(v0, v4);
  #L353398.  if v0 < 0 then goto L3533a0;
  #L35339c.  v0:= 1I;
  #L35339e.  return v0;
  #L3533a0.  v0:= 0I;
  #L3533a2.  goto L35339e;
}
procedure `void` `require`(`okio.Buffer` v3 @kind this, `long` v4 @name `byteCount`) @signature `Lokio/Buffer;.require:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3533b4.  v0:= v3.`okio.Buffer.size` @type ^`long` @kind wide;
  #L3533b8.  v0:= lcmp(v0, v4);
  #L3533bc.  if v0 >= 0 then goto L3533cc;
  #L3533c0.  v0:= new `java.io.EOFException`;
  #L3533c4.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L3533ca.  throw v0;
  #L3533cc.  return @kind void;
}
procedure `java.util.List` `segmentSizes`(`okio.Buffer` v4 @kind this) @signature `Lokio/Buffer;.segmentSizes:()Ljava/util/List;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3533e0.  v2:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L3533e4.  if v2 != 0 then goto L3533f2;
  #L3533e8.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L3533ee.  v0:= temp @kind object;
  #L3533f0.  return v0 @kind object;
  #L3533f2.  v0:= new `java.util.ArrayList`;
  #L3533f6.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L3533fc.  v2:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L353400.  v2:= v2.`okio.Segment.limit` @type ^`int`;
  #L353404.  v3:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L353408.  v3:= v3.`okio.Segment.pos` @type ^`int`;
  #L35340c.  v2:= v2 - v3 @kind int;
  #L35340e.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L353414.  v2:= temp @kind object;
  #L353416.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L35341c.  v2:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L353420.  v1:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L353424.  v2:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L353428.  if v1 == v2 then goto L3533f0;
  #L35342c.  v2:= v1.`okio.Segment.limit` @type ^`int`;
  #L353430.  v3:= v1.`okio.Segment.pos` @type ^`int`;
  #L353434.  v2:= v2 - v3 @kind int;
  #L353436.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L35343c.  v2:= temp @kind object;
  #L35343e.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L353444.  v1:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L353448.  goto L353424;
}
procedure `int` `select`(`okio.Buffer` v12 @kind this, `okio.Options` v13 @kind object @name `options`) @signature `Lokio/Buffer;.select:(Lokio/Options;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L35345c.  v1:= v12.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L353460.  if v1 != 0 then goto L353472;
  #L353464.  v0:= `@@okio.ByteString.EMPTY` @type ^`okio.ByteString` @kind object;
  #L353468.  call temp:= `indexOf`(v13, v0) @signature `Lokio/Options;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L35346e.  v8:= temp;
  #L353470.  return v8;
  #L353472.  v6:= v13.`okio.Options.byteStrings` @type ^`okio.ByteString`[] @kind object;
  #L353476.  v8:= 0I;
  #L353478.  v9:= length @variable v6;
  #L35347a.  if v8 >= v9 then goto L3534da;
  #L35347e.  v3:= v6[v8] @kind object;
  #L353482.  v4:= v12.`okio.Buffer.size` @type ^`long` @kind wide;
  #L353486.  call temp:= `size`(v3) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L35348c.  v0:= temp;
  #L35348e.  v10:= (`long`) v0 @kind i2l;
  #L353490.  v0:= lcmp(v4, v10);
  #L353494.  if v0 < 0 then goto L3534d4;
  #L353498.  v2:= v1.`okio.Segment.pos` @type ^`int`;
  #L35349c.  v4:= 0I;
  #L35349e.  call temp:= `size`(v3) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L3534a4.  v5:= temp;
  #L3534a6.  v0:= v12 @kind object;
  #L3534a8.  call temp:= `rangeEquals`(v0, v1, v2, v3, v4, v5) @signature `Lokio/Buffer;.rangeEquals:(Lokio/Segment;ILokio/ByteString;II)Z` @kind direct;
  #L3534ae.  v0:= temp;
  #L3534b0.  if v0 == 0 then goto L3534d4;
  #L3534b4.  call temp:= `size`(v3) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L3534ba.  v0:= temp;
  #L3534bc.  v4:= (`long`) v0 @kind i2l;
  #L3534be.  call `skip`(v12, v4) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L3534c4.  goto L353470;
  #L3534c6.  v7:= Exception @type ^`java.io.EOFException` @kind object;
  #L3534c8.  v0:= new `java.lang.AssertionError`;
  #L3534cc.  call `<init>`(v0, v7) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3534d2.  throw v0;
  #L3534d4.  v8:= v8 + 1;
  #L3534d8.  goto L35347a;
  #L3534da.  v8:= -1I;
  #L3534dc.  goto L353470;
  catch `java.io.EOFException` @[L3534b4..L3534c4] goto L3534c6;
}
procedure `int` `selectPrefix`(`okio.Buffer` v14 @kind this, `okio.Options` v15 @kind object @name `options`) @signature `Lokio/Buffer;.selectPrefix:(Lokio/Options;)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L353500.  v1:= v14.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L353504.  v6:= v15.`okio.Options.byteStrings` @type ^`okio.ByteString`[] @kind object;
  #L353508.  v7:= 0I;
  #L35350a.  v8:= length @variable v6;
  #L35350c.  if v7 >= v8 then goto L35354c;
  #L353510.  v3:= v6[v7] @kind object;
  #L353514.  v10:= v14.`okio.Buffer.size` @type ^`long` @kind wide;
  #L353518.  call temp:= `size`(v3) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L35351e.  v0:= temp;
  #L353520.  v12:= (`long`) v0 @kind i2l;
  #L353522.  call temp:= `min`(v10, v12) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L353528.  v10:= temp @kind wide;
  #L35352a.  v5:= (`int`) v10 @kind l2i;
  #L35352c.  if v5 == 0 then goto L353544;
  #L353530.  v2:= v1.`okio.Segment.pos` @type ^`int`;
  #L353534.  v4:= 0I;
  #L353536.  v0:= v14 @kind object;
  #L353538.  call temp:= `rangeEquals`(v0, v1, v2, v3, v4, v5) @signature `Lokio/Buffer;.rangeEquals:(Lokio/Segment;ILokio/ByteString;II)Z` @kind direct;
  #L35353e.  v0:= temp;
  #L353540.  if v0 == 0 then goto L353546;
  #L353544.  return v7;
  #L353546.  v7:= v7 + 1;
  #L35354a.  goto L35350c;
  #L35354c.  v7:= -1I;
  #L35354e.  goto L353544;
}
procedure `okio.ByteString` `sha1`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.sha1:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L353560.  v0:= "SHA-1" @kind object;
  #L353564.  call temp:= `digest`(v1, v0) @signature `Lokio/Buffer;.digest:(Ljava/lang/String;)Lokio/ByteString;` @kind direct;
  #L35356a.  v0:= temp @kind object;
  #L35356c.  return v0 @kind object;
}
procedure `okio.ByteString` `sha256`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.sha256:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L353580.  v0:= "SHA-256" @kind object;
  #L353584.  call temp:= `digest`(v1, v0) @signature `Lokio/Buffer;.digest:(Ljava/lang/String;)Lokio/ByteString;` @kind direct;
  #L35358a.  v0:= temp @kind object;
  #L35358c.  return v0 @kind object;
}
procedure `long` `size`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.size:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3535a0.  v0:= v2.`okio.Buffer.size` @type ^`long` @kind wide;
  #L3535a4.  return v0 @kind wide;
}
procedure `void` `skip`(`okio.Buffer` v7 @kind this, `long` v8 @name `byteCount`) @signature `Lokio/Buffer;.skip:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3535b8.  v2:= 0L;
  #L3535bc.  v2:= lcmp(v8, v2);
  #L3535c0.  if v2 <= 0 then goto L353640;
  #L3535c4.  v2:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L3535c8.  if v2 != 0 then goto L3535d8;
  #L3535cc.  v2:= new `java.io.EOFException`;
  #L3535d0.  call `<init>`(v2) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L3535d6.  throw v2;
  #L3535d8.  v2:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L3535dc.  v2:= v2.`okio.Segment.limit` @type ^`int`;
  #L3535e0.  v3:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L3535e4.  v3:= v3.`okio.Segment.pos` @type ^`int`;
  #L3535e8.  v2:= v2 - v3 @kind int;
  #L3535ea.  v2:= (`long`) v2 @kind i2l;
  #L3535ec.  call temp:= `min`(v8, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3535f2.  v2:= temp @kind wide;
  #L3535f4.  v1:= (`int`) v2 @kind l2i;
  #L3535f6.  v2:= v7.`okio.Buffer.size` @type ^`long` @kind wide;
  #L3535fa.  v4:= (`long`) v1 @kind i2l;
  #L3535fc.  v2:= v2 - v4 @kind long;
  #L3535fe.  v7.`okio.Buffer.size` @type ^`long` := v2 @kind wide;
  #L353602.  v2:= (`long`) v1 @kind i2l;
  #L353604.  v8:= v8 - v2 @kind long;
  #L353606.  v2:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L35360a.  v3:= v2.`okio.Segment.pos` @type ^`int`;
  #L35360e.  v3:= v3 + v1 @kind int;
  #L353610.  v2.`okio.Segment.pos` @type ^`int` := v3;
  #L353614.  v2:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L353618.  v2:= v2.`okio.Segment.pos` @type ^`int`;
  #L35361c.  v3:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L353620.  v3:= v3.`okio.Segment.limit` @type ^`int`;
  #L353624.  if v2 != v3 then goto L3535b8;
  #L353628.  v0:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L35362c.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L353632.  v2:= temp @kind object;
  #L353634.  v7.`okio.Buffer.head` @type ^`okio.Segment` := v2 @kind object;
  #L353638.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L35363e.  goto L3535b8;
  #L353640.  return @kind void;
}
procedure `okio.ByteString` `snapshot`(`okio.Buffer` v4 @kind this) @signature `Lokio/Buffer;.snapshot:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L353654.  v0:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L353658.  v2:= 2147483647L;
  #L35365e.  v0:= lcmp(v0, v2);
  #L353662.  if v0 <= 0 then goto L35369c;
  #L353666.  v0:= new `java.lang.IllegalArgumentException`;
  #L35366a.  v1:= new `java.lang.StringBuilder`;
  #L35366e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L353674.  v2:= "size > Integer.MAX_VALUE: " @kind object;
  #L353678.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L35367e.  v1:= temp @kind object;
  #L353680.  v2:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L353684.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L35368a.  v1:= temp @kind object;
  #L35368c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L353692.  v1:= temp @kind object;
  #L353694.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L35369a.  throw v0;
  #L35369c.  v0:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L3536a0.  v0:= (`int`) v0 @kind l2i;
  #L3536a2.  call temp:= `snapshot`(v4, v0) @signature `Lokio/Buffer;.snapshot:(I)Lokio/ByteString;` @kind virtual;
  #L3536a8.  v0:= temp @kind object;
  #L3536aa.  return v0 @kind object;
}
procedure `okio.ByteString` `snapshot`(`okio.Buffer` v1 @kind this, `int` v2 @name `byteCount`) @signature `Lokio/Buffer;.snapshot:(I)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3536bc.  if v2 != 0 then goto L3536c6;
  #L3536c0.  v0:= `@@okio.ByteString.EMPTY` @type ^`okio.ByteString` @kind object;
  #L3536c4.  return v0 @kind object;
  #L3536c6.  v0:= new `okio.SegmentedByteString`;
  #L3536ca.  call `<init>`(v0, v1, v2) @signature `Lokio/SegmentedByteString;.<init>:(Lokio/Buffer;I)V` @kind direct;
  #L3536d0.  goto L3536c4;
}
procedure `okio.Timeout` `timeout`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3536e4.  v0:= `@@okio.Timeout.NONE` @type ^`okio.Timeout` @kind object;
  #L3536e8.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3536fc.  call temp:= `snapshot`(v1) @signature `Lokio/Buffer;.snapshot:()Lokio/ByteString;` @kind virtual;
  #L353702.  v0:= temp @kind object;
  #L353704.  call temp:= `toString`(v0) @signature `Lokio/ByteString;.toString:()Ljava/lang/String;` @kind virtual;
  #L35370a.  v0:= temp @kind object;
  #L35370c.  return v0 @kind object;
}
procedure `okio.Segment` `writableSegment`(`okio.Buffer` v3 @kind this, `int` v4 @name `minimumCapacity`) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L353720.  v2:= 8192I;
  #L353724.  v1:= 1I;
  #L353726.  if v4 < v1 then goto L35372e;
  #L35372a.  if v4 <= v2 then goto L35373a;
  #L35372e.  v1:= new `java.lang.IllegalArgumentException`;
  #L353732.  call `<init>`(v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L353738.  throw v1;
  #L35373a.  v1:= v3.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L35373e.  if v1 != 0 then goto L353764;
  #L353742.  call temp:= `take`() @signature `Lokio/SegmentPool;.take:()Lokio/Segment;` @kind static;
  #L353748.  v1:= temp @kind object;
  #L35374a.  v3.`okio.Buffer.head` @type ^`okio.Segment` := v1 @kind object;
  #L35374e.  v1:= v3.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L353752.  v2:= v3.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L353756.  v0:= v3.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L35375a.  v2.`okio.Segment.prev` @type ^`okio.Segment` := v0 @kind object;
  #L35375e.  v1.`okio.Segment.next` @type ^`okio.Segment` := v0 @kind object;
  #L353762.  return v0 @kind object;
  #L353764.  v1:= v3.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L353768.  v0:= v1.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L35376c.  v1:= v0.`okio.Segment.limit` @type ^`int`;
  #L353770.  v1:= v1 + v4 @kind int;
  #L353772.  if v1 > v2 then goto L35377e;
  #L353776.  v1:= v0.`okio.Segment.owner` @type ^`boolean` @kind boolean;
  #L35377a.  if v1 != 0 then goto L353762;
  #L35377e.  call temp:= `take`() @signature `Lokio/SegmentPool;.take:()Lokio/Segment;` @kind static;
  #L353784.  v1:= temp @kind object;
  #L353786.  call temp:= `push`(v0, v1) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L35378c.  v0:= temp @kind object;
  #L35378e.  goto L353762;
}
procedure `okio.Buffer` `write`(`okio.Buffer` v2 @kind this, `okio.ByteString` v3 @kind object @name `byteString`) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3537a0.  if v3 != 0 then goto L3537b4;
  #L3537a4.  v0:= new `java.lang.IllegalArgumentException`;
  #L3537a8.  v1:= "byteString == null" @kind object;
  #L3537ac.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3537b2.  throw v0;
  #L3537b4.  call `write`(v3, v2) @signature `Lokio/ByteString;.write:(Lokio/Buffer;)V` @kind virtual;
  #L3537ba.  return v2 @kind object;
}
procedure `okio.Buffer` `write`(`okio.Buffer` v2 @kind this, `byte`[] v3 @kind object @name `source`) @signature `Lokio/Buffer;.write:([B)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3537cc.  if v3 != 0 then goto L3537e0;
  #L3537d0.  v0:= new `java.lang.IllegalArgumentException`;
  #L3537d4.  v1:= "source == null" @kind object;
  #L3537d8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3537de.  throw v0;
  #L3537e0.  v0:= 0I;
  #L3537e2.  v1:= length @variable v3;
  #L3537e4.  call temp:= `write`(v2, v3, v0, v1) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @kind virtual;
  #L3537ea.  v0:= temp @kind object;
  #L3537ec.  return v0 @kind object;
}
procedure `okio.Buffer` `write`(`okio.Buffer` v9 @kind this, `byte`[] v10 @kind object @name `source`, `int` v11 @name `offset`, `int` v12 @name `byteCount`) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L353800.  if v10 != 0 then goto L353814;
  #L353804.  v0:= new `java.lang.IllegalArgumentException`;
  #L353808.  v1:= "source == null" @kind object;
  #L35380c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L353812.  throw v0;
  #L353814.  v0:= length @variable v10;
  #L353816.  v0:= (`long`) v0 @kind i2l;
  #L353818.  v2:= (`long`) v11 @kind i2l;
  #L35381a.  v4:= (`long`) v12 @kind i2l;
  #L35381c.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L353822.  v6:= v11 + v12 @kind int;
  #L353826.  if v11 >= v6 then goto L353864;
  #L35382a.  v0:= 1I;
  #L35382c.  call temp:= `writableSegment`(v9, v0) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L353832.  v7:= temp @kind object;
  #L353834.  v0:= v6 - v11 @kind int;
  #L353838.  v1:= v7.`okio.Segment.limit` @type ^`int`;
  #L35383c.  v1:= v1 - 8192;
  #L353840.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L353846.  v8:= temp;
  #L353848.  v0:= v7.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L35384c.  v1:= v7.`okio.Segment.limit` @type ^`int`;
  #L353850.  call `arraycopy`(v10, v11, v0, v1, v8) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L353856.  v11:= v11 + v8 @kind int;
  #L353858.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L35385c.  v0:= v0 + v8 @kind int;
  #L35385e.  v7.`okio.Segment.limit` @type ^`int` := v0;
  #L353862.  goto L353826;
  #L353864.  v0:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L353868.  v2:= (`long`) v12 @kind i2l;
  #L35386a.  v0:= v0 + v2 @kind long;
  #L35386c.  v9.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L353870.  return v9 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.Buffer` v1 @kind this, `okio.ByteString` v2 @kind object) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L353884.  call temp:= `write`(v1, v2) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/Buffer;` @kind virtual;
  #L35388a.  v0:= temp @kind object;
  #L35388c.  return v0 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.Buffer` v4 @kind this, `okio.Source` v5 @kind object @name `source`, `long` v6 @name `byteCount`) @signature `Lokio/Buffer;.write:(Lokio/Source;J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3538a0.  v2:= 0L;
  #L3538a4.  v2:= lcmp(v6, v2);
  #L3538a8.  if v2 <= 0 then goto L3538d0;
  #L3538ac.  call temp:= `read`(v5, v4, v6) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L3538b2.  v0:= temp @kind wide;
  #L3538b4.  v2:= -1L;
  #L3538b8.  v2:= lcmp(v0, v2);
  #L3538bc.  if v2 != 0 then goto L3538cc;
  #L3538c0.  v2:= new `java.io.EOFException`;
  #L3538c4.  call `<init>`(v2) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L3538ca.  throw v2;
  #L3538cc.  v6:= v6 - v0 @kind long;
  #L3538ce.  goto L3538a0;
  #L3538d0.  return v4 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.Buffer` v1 @kind this, `byte`[] v2 @kind object) @signature `Lokio/Buffer;.write:([B)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L3538e4.  call temp:= `write`(v1, v2) @signature `Lokio/Buffer;.write:([B)Lokio/Buffer;` @kind virtual;
  #L3538ea.  v0:= temp @kind object;
  #L3538ec.  return v0 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.Buffer` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lokio/Buffer;.write:([BII)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L353900.  call temp:= `write`(v1, v2, v3, v4) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @kind virtual;
  #L353906.  v0:= temp @kind object;
  #L353908.  return v0 @kind object;
}
procedure `void` `write`(`okio.Buffer` v10 @kind this, `okio.Buffer` v11 @kind object @name `source`, `long` v12 @name `byteCount`) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L35391c.  v2:= 0L;
  #L353920.  if v11 != 0 then goto L353934;
  #L353924.  v0:= new `java.lang.IllegalArgumentException`;
  #L353928.  v1:= "source == null" @kind object;
  #L35392c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L353932.  throw v0;
  #L353934.  if v11 != v10 then goto L353948;
  #L353938.  v0:= new `java.lang.IllegalArgumentException`;
  #L35393c.  v1:= "source == this" @kind object;
  #L353940.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L353946.  throw v0;
  #L353948.  v0:= v11.`okio.Buffer.size` @type ^`long` @kind wide;
  #L35394c.  v4:= v12 @kind wide;
  #L35394e.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L353954.  v0:= lcmp(v12, v2);
  #L353958.  if v0 <= 0 then goto L3539da;
  #L35395c.  v0:= v11.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L353960.  v0:= v0.`okio.Segment.limit` @type ^`int`;
  #L353964.  v1:= v11.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L353968.  v1:= v1.`okio.Segment.pos` @type ^`int`;
  #L35396c.  v0:= v0 - v1 @kind int;
  #L35396e.  v0:= (`long`) v0 @kind i2l;
  #L353970.  v0:= lcmp(v12, v0);
  #L353974.  if v0 >= 0 then goto L3539f8;
  #L353978.  v0:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L35397c.  if v0 == 0 then goto L3539dc;
  #L353980.  v0:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L353984.  v9:= v0.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L353988.  if v9 == 0 then goto L3539e6;
  #L35398c.  v0:= v9.`okio.Segment.owner` @type ^`boolean` @kind boolean;
  #L353990.  if v0 == 0 then goto L3539e6;
  #L353994.  v0:= v9.`okio.Segment.limit` @type ^`int`;
  #L353998.  v0:= (`long`) v0 @kind i2l;
  #L35399a.  v4:= v12 + v0 @kind long;
  #L35399e.  v0:= v9.`okio.Segment.shared` @type ^`boolean` @kind boolean;
  #L3539a2.  if v0 == 0 then goto L3539e0;
  #L3539a6.  v0:= 0I;
  #L3539a8.  v0:= (`long`) v0 @kind i2l;
  #L3539aa.  v0:= v4 - v0 @kind long;
  #L3539ae.  v4:= 8192L;
  #L3539b2.  v0:= lcmp(v0, v4);
  #L3539b6.  if v0 > 0 then goto L3539e6;
  #L3539ba.  v0:= v11.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L3539be.  v1:= (`int`) v12 @kind l2i;
  #L3539c0.  call `writeTo`(v0, v9, v1) @signature `Lokio/Segment;.writeTo:(Lokio/Segment;I)V` @kind virtual;
  #L3539c6.  v0:= v11.`okio.Buffer.size` @type ^`long` @kind wide;
  #L3539ca.  v0:= v0 - v12 @kind long;
  #L3539cc.  v11.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L3539d0.  v0:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L3539d4.  v0:= v0 + v12 @kind long;
  #L3539d6.  v10.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L3539da.  return @kind void;
  #L3539dc.  v9:= 0I;
  #L3539de.  goto L353988;
  #L3539e0.  v0:= v9.`okio.Segment.pos` @type ^`int`;
  #L3539e4.  goto L3539a8;
  #L3539e6.  v0:= v11.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L3539ea.  v1:= (`int`) v12 @kind l2i;
  #L3539ec.  call temp:= `split`(v0, v1) @signature `Lokio/Segment;.split:(I)Lokio/Segment;` @kind virtual;
  #L3539f2.  v0:= temp @kind object;
  #L3539f4.  v11.`okio.Buffer.head` @type ^`okio.Segment` := v0 @kind object;
  #L3539f8.  v8:= v11.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L3539fc.  v0:= v8.`okio.Segment.limit` @type ^`int`;
  #L353a00.  v1:= v8.`okio.Segment.pos` @type ^`int`;
  #L353a04.  v0:= v0 - v1 @kind int;
  #L353a06.  v6:= (`long`) v0 @kind i2l;
  #L353a08.  call temp:= `pop`(v8) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L353a0e.  v0:= temp @kind object;
  #L353a10.  v11.`okio.Buffer.head` @type ^`okio.Segment` := v0 @kind object;
  #L353a14.  v0:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L353a18.  if v0 != 0 then goto L353a4c;
  #L353a1c.  v10.`okio.Buffer.head` @type ^`okio.Segment` := v8 @kind object;
  #L353a20.  v0:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L353a24.  v1:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L353a28.  v4:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L353a2c.  v1.`okio.Segment.prev` @type ^`okio.Segment` := v4 @kind object;
  #L353a30.  v0.`okio.Segment.next` @type ^`okio.Segment` := v4 @kind object;
  #L353a34.  v0:= v11.`okio.Buffer.size` @type ^`long` @kind wide;
  #L353a38.  v0:= v0 - v6 @kind long;
  #L353a3a.  v11.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L353a3e.  v0:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L353a42.  v0:= v0 + v6 @kind long;
  #L353a44.  v10.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L353a48.  v12:= v12 - v6 @kind long;
  #L353a4a.  goto L353954;
  #L353a4c.  v0:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L353a50.  v9:= v0.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L353a54.  call temp:= `push`(v9, v8) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L353a5a.  v9:= temp @kind object;
  #L353a5c.  call `compact`(v9) @signature `Lokio/Segment;.compact:()V` @kind virtual;
  #L353a62.  goto L353a34;
}
procedure `long` `writeAll`(`okio.Buffer` v6 @kind this, `okio.Source` v7 @kind object @name `source`) @signature `Lokio/Buffer;.writeAll:(Lokio/Source;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L353a74.  if v7 != 0 then goto L353a88;
  #L353a78.  v4:= new `java.lang.IllegalArgumentException`;
  #L353a7c.  v5:= "source == null" @kind object;
  #L353a80.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L353a86.  throw v4;
  #L353a88.  v2:= 0L;
  #L353a8c.  v4:= 8192L;
  #L353a90.  call temp:= `read`(v7, v6, v4) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L353a96.  v0:= temp @kind wide;
  #L353a98.  v4:= -1L;
  #L353a9c.  v4:= lcmp(v0, v4);
  #L353aa0.  if v4 == 0 then goto L353aa8;
  #L353aa4.  v2:= v2 + v0 @kind long;
  #L353aa6.  goto L353a8c;
  #L353aa8.  return v2 @kind wide;
}
procedure `okio.Buffer` `writeByte`(`okio.Buffer` v6 @kind this, `int` v7 @name `b`) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L353abc.  v1:= 1I;
  #L353abe.  call temp:= `writableSegment`(v6, v1) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L353ac4.  v0:= temp @kind object;
  #L353ac6.  v1:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L353aca.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L353ace.  v3:= v2 + 1;
  #L353ad2.  v0.`okio.Segment.limit` @type ^`int` := v3;
  #L353ad6.  v3:= (`byte`) v7 @kind i2b;
  #L353ad8.  v1[v2]:= v3 @kind byte;
  #L353adc.  v2:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L353ae0.  v4:= 1L;
  #L353ae4.  v2:= v2 + v4 @kind long;
  #L353ae6.  v6.`okio.Buffer.size` @type ^`long` := v2 @kind wide;
  #L353aea.  return v6 @kind object;
}
procedure `okio.BufferedSink` `writeByte`(`okio.Buffer` v1 @kind this, `int` v2 ) @signature `Lokio/Buffer;.writeByte:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L353afc.  call temp:= `writeByte`(v1, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L353b02.  v0:= temp @kind object;
  #L353b04.  return v0 @kind object;
}
procedure `okio.Buffer` `writeDecimalLong`(`okio.Buffer` v13 @kind this, `long` v14 @name `v`) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L353b18.  v10:= 10L;
  #L353b1c.  v8:= 0L;
  #L353b20.  v6:= lcmp(v14, v8);
  #L353b24.  if v6 != 0 then goto L353b36;
  #L353b28.  v6:= 48I;
  #L353b2c.  call temp:= `writeByte`(v13, v6) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L353b32.  v13:= temp @kind object;
  #L353b34.  return v13 @kind object;
  #L353b36.  v2:= 0I;
  #L353b38.  v6:= lcmp(v14, v8);
  #L353b3c.  if v6 >= 0 then goto L353b5a;
  #L353b40.  v14:= -v14 @kind long;
  #L353b42.  v6:= lcmp(v14, v8);
  #L353b46.  if v6 >= 0 then goto L353b58;
  #L353b4a.  v6:= "-9223372036854775808" @kind object;
  #L353b4e.  call temp:= `writeUtf8`(v13, v6) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @kind virtual;
  #L353b54.  v13:= temp @kind object;
  #L353b56.  goto L353b34;
  #L353b58.  v2:= 1I;
  #L353b5a.  v6:= 100000000L;
  #L353b60.  v6:= lcmp(v14, v6);
  #L353b64.  if v6 >= 0 then goto L353c1c;
  #L353b68.  v6:= 10000L;
  #L353b6c.  v6:= lcmp(v14, v6);
  #L353b70.  if v6 >= 0 then goto L353be0;
  #L353b74.  v6:= 100L;
  #L353b78.  v6:= lcmp(v14, v6);
  #L353b7c.  if v6 >= 0 then goto L353bcc;
  #L353b80.  v6:= lcmp(v14, v10);
  #L353b84.  if v6 >= 0 then goto L353bc8;
  #L353b88.  v5:= 1I;
  #L353b8a.  if v2 == 0 then goto L353b92;
  #L353b8e.  v5:= v5 + 1;
  #L353b92.  call temp:= `writableSegment`(v13, v5) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L353b98.  v4:= temp @kind object;
  #L353b9a.  v0:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L353b9e.  v6:= v4.`okio.Segment.limit` @type ^`int`;
  #L353ba2.  v3:= v6 + v5 @kind int;
  #L353ba6.  v6:= lcmp(v14, v8);
  #L353baa.  if v6 == 0 then goto L353d1c;
  #L353bae.  v6:= v14 %% v10 @kind long;
  #L353bb2.  v1:= (`int`) v6 @kind l2i;
  #L353bb4.  v3:= v3 + -1;
  #L353bb8.  v6:= `@@okio.Buffer.DIGITS` @type ^`byte`[] @kind object;
  #L353bbc.  v6:= v6[v1] @kind byte;
  #L353bc0.  v0[v3]:= v6 @kind byte;
  #L353bc4.  v14:= v14 / v10 @kind long;
  #L353bc6.  goto L353ba6;
  #L353bc8.  v5:= 2I;
  #L353bca.  goto L353b8a;
  #L353bcc.  v6:= 1000L;
  #L353bd0.  v6:= lcmp(v14, v6);
  #L353bd4.  if v6 >= 0 then goto L353bdc;
  #L353bd8.  v5:= 3I;
  #L353bda.  goto L353b8a;
  #L353bdc.  v5:= 4I;
  #L353bde.  goto L353b8a;
  #L353be0.  v6:= 1000000L;
  #L353be6.  v6:= lcmp(v14, v6);
  #L353bea.  if v6 >= 0 then goto L353c04;
  #L353bee.  v6:= 100000L;
  #L353bf4.  v6:= lcmp(v14, v6);
  #L353bf8.  if v6 >= 0 then goto L353c00;
  #L353bfc.  v5:= 5I;
  #L353bfe.  goto L353b8a;
  #L353c00.  v5:= 6I;
  #L353c02.  goto L353b8a;
  #L353c04.  v6:= 10000000L;
  #L353c0a.  v6:= lcmp(v14, v6);
  #L353c0e.  if v6 >= 0 then goto L353c16;
  #L353c12.  v5:= 7I;
  #L353c14.  goto L353b8a;
  #L353c16.  v5:= 8I;
  #L353c1a.  goto L353b8a;
  #L353c1c.  v6:= 1000000000000L;
  #L353c26.  v6:= lcmp(v14, v6);
  #L353c2a.  if v6 >= 0 then goto L353c78;
  #L353c2e.  v6:= 10000000000L;
  #L353c38.  v6:= lcmp(v14, v6);
  #L353c3c.  if v6 >= 0 then goto L353c5a;
  #L353c40.  v6:= 1000000000L;
  #L353c46.  v6:= lcmp(v14, v6);
  #L353c4a.  if v6 >= 0 then goto L353c54;
  #L353c4e.  v5:= 9I;
  #L353c52.  goto L353b8a;
  #L353c54.  v5:= 10I;
  #L353c58.  goto L353b8a;
  #L353c5a.  v6:= 100000000000L;
  #L353c64.  v6:= lcmp(v14, v6);
  #L353c68.  if v6 >= 0 then goto L353c72;
  #L353c6c.  v5:= 11I;
  #L353c70.  goto L353b8a;
  #L353c72.  v5:= 12I;
  #L353c76.  goto L353b8a;
  #L353c78.  v6:= 1000000000000000L;
  #L353c82.  v6:= lcmp(v14, v6);
  #L353c86.  if v6 >= 0 then goto L353cc6;
  #L353c8a.  v6:= 10000000000000L;
  #L353c94.  v6:= lcmp(v14, v6);
  #L353c98.  if v6 >= 0 then goto L353ca4;
  #L353c9c.  v5:= 13I;
  #L353ca0.  goto L353b8a;
  #L353ca4.  v6:= 100000000000000L;
  #L353cae.  v6:= lcmp(v14, v6);
  #L353cb2.  if v6 >= 0 then goto L353cbe;
  #L353cb6.  v5:= 14I;
  #L353cba.  goto L353b8a;
  #L353cbe.  v5:= 15I;
  #L353cc2.  goto L353b8a;
  #L353cc6.  v6:= 100000000000000000L;
  #L353cd0.  v6:= lcmp(v14, v6);
  #L353cd4.  if v6 >= 0 then goto L353cfa;
  #L353cd8.  v6:= 10000000000000000L;
  #L353ce2.  v6:= lcmp(v14, v6);
  #L353ce6.  if v6 >= 0 then goto L353cf2;
  #L353cea.  v5:= 16I;
  #L353cee.  goto L353b8a;
  #L353cf2.  v5:= 17I;
  #L353cf6.  goto L353b8a;
  #L353cfa.  v6:= 1000000000000000000L;
  #L353d04.  v6:= lcmp(v14, v6);
  #L353d08.  if v6 >= 0 then goto L353d14;
  #L353d0c.  v5:= 18I;
  #L353d10.  goto L353b8a;
  #L353d14.  v5:= 19I;
  #L353d18.  goto L353b8a;
  #L353d1c.  if v2 == 0 then goto L353d2c;
  #L353d20.  v3:= v3 + -1;
  #L353d24.  v6:= 45I;
  #L353d28.  v0[v3]:= v6 @kind byte;
  #L353d2c.  v6:= v4.`okio.Segment.limit` @type ^`int`;
  #L353d30.  v6:= v6 + v5 @kind int;
  #L353d32.  v4.`okio.Segment.limit` @type ^`int` := v6;
  #L353d36.  v6:= v13.`okio.Buffer.size` @type ^`long` @kind wide;
  #L353d3a.  v8:= (`long`) v5 @kind i2l;
  #L353d3c.  v6:= v6 + v8 @kind long;
  #L353d3e.  v13.`okio.Buffer.size` @type ^`long` := v6 @kind wide;
  #L353d42.  goto L353b34;
}
procedure `okio.BufferedSink` `writeDecimalLong`(`okio.Buffer` v1 @kind this, `long` v2 ) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L353d58.  call temp:= `writeDecimalLong`(v1, v2) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/Buffer;` @kind virtual;
  #L353d5e.  v0:= temp @kind object;
  #L353d60.  return v0 @kind object;
}
procedure `okio.Buffer` `writeHexadecimalUnsignedLong`(`okio.Buffer` v11 @kind this, `long` v12 @name `v`) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L353d74.  v6:= 0L;
  #L353d78.  v5:= lcmp(v12, v6);
  #L353d7c.  if v5 != 0 then goto L353d8e;
  #L353d80.  v5:= 48I;
  #L353d84.  call temp:= `writeByte`(v11, v5) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L353d8a.  v11:= temp @kind object;
  #L353d8c.  return v11 @kind object;
  #L353d8e.  call temp:= `highestOneBit`(v12) @signature `Ljava/lang/Long;.highestOneBit:(J)J` @kind static;
  #L353d94.  v6:= temp @kind wide;
  #L353d96.  call temp:= `numberOfTrailingZeros`(v6) @signature `Ljava/lang/Long;.numberOfTrailingZeros:(J)I` @kind static;
  #L353d9c.  v5:= temp;
  #L353d9e.  v5:= v5 / 4;
  #L353da2.  v4:= v5 + 1;
  #L353da6.  call temp:= `writableSegment`(v11, v4) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L353dac.  v3:= temp @kind object;
  #L353dae.  v0:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L353db2.  v5:= v3.`okio.Segment.limit` @type ^`int`;
  #L353db6.  v5:= v5 + v4 @kind int;
  #L353db8.  v1:= v5 + -1;
  #L353dbc.  v2:= v3.`okio.Segment.limit` @type ^`int`;
  #L353dc0.  if v1 < v2 then goto L353de2;
  #L353dc4.  v5:= `@@okio.Buffer.DIGITS` @type ^`byte`[] @kind object;
  #L353dc8.  v6:= 15L;
  #L353dcc.  v6:= v6 ^& v12 @kind long;
  #L353dce.  v6:= (`int`) v6 @kind l2i;
  #L353dd0.  v5:= v5[v6] @kind byte;
  #L353dd4.  v0[v1]:= v5 @kind byte;
  #L353dd8.  v5:= 4I;
  #L353dda.  v12:= v12 ^>> v5 @kind long;
  #L353ddc.  v1:= v1 + -1;
  #L353de0.  goto L353dc0;
  #L353de2.  v5:= v3.`okio.Segment.limit` @type ^`int`;
  #L353de6.  v5:= v5 + v4 @kind int;
  #L353de8.  v3.`okio.Segment.limit` @type ^`int` := v5;
  #L353dec.  v6:= v11.`okio.Buffer.size` @type ^`long` @kind wide;
  #L353df0.  v8:= (`long`) v4 @kind i2l;
  #L353df2.  v6:= v6 + v8 @kind long;
  #L353df4.  v11.`okio.Buffer.size` @type ^`long` := v6 @kind wide;
  #L353df8.  goto L353d8c;
}
procedure `okio.BufferedSink` `writeHexadecimalUnsignedLong`(`okio.Buffer` v1 @kind this, `long` v2 ) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L353e0c.  call temp:= `writeHexadecimalUnsignedLong`(v1, v2) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/Buffer;` @kind virtual;
  #L353e12.  v0:= temp @kind object;
  #L353e14.  return v0 @kind object;
}
procedure `okio.Buffer` `writeInt`(`okio.Buffer` v8 @kind this, `int` v9 @name `i`) @signature `Lokio/Buffer;.writeInt:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L353e28.  v4:= 4I;
  #L353e2a.  call temp:= `writableSegment`(v8, v4) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L353e30.  v3:= temp @kind object;
  #L353e32.  v0:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L353e36.  v1:= v3.`okio.Segment.limit` @type ^`int`;
  #L353e3a.  v2:= v1 + 1;
  #L353e3e.  v4:= v9 ^>> 24;
  #L353e42.  v4:= v4 ^& 255;
  #L353e46.  v4:= (`byte`) v4 @kind i2b;
  #L353e48.  v0[v1]:= v4 @kind byte;
  #L353e4c.  v1:= v2 + 1;
  #L353e50.  v4:= v9 ^>> 16;
  #L353e54.  v4:= v4 ^& 255;
  #L353e58.  v4:= (`byte`) v4 @kind i2b;
  #L353e5a.  v0[v2]:= v4 @kind byte;
  #L353e5e.  v2:= v1 + 1;
  #L353e62.  v4:= v9 ^>> 8;
  #L353e66.  v4:= v4 ^& 255;
  #L353e6a.  v4:= (`byte`) v4 @kind i2b;
  #L353e6c.  v0[v1]:= v4 @kind byte;
  #L353e70.  v1:= v2 + 1;
  #L353e74.  v4:= v9 ^& 255;
  #L353e78.  v4:= (`byte`) v4 @kind i2b;
  #L353e7a.  v0[v2]:= v4 @kind byte;
  #L353e7e.  v3.`okio.Segment.limit` @type ^`int` := v1;
  #L353e82.  v4:= v8.`okio.Buffer.size` @type ^`long` @kind wide;
  #L353e86.  v6:= 4L;
  #L353e8a.  v4:= v4 + v6 @kind long;
  #L353e8c.  v8.`okio.Buffer.size` @type ^`long` := v4 @kind wide;
  #L353e90.  return v8 @kind object;
}
procedure `okio.BufferedSink` `writeInt`(`okio.Buffer` v1 @kind this, `int` v2 ) @signature `Lokio/Buffer;.writeInt:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L353ea4.  call temp:= `writeInt`(v1, v2) @signature `Lokio/Buffer;.writeInt:(I)Lokio/Buffer;` @kind virtual;
  #L353eaa.  v0:= temp @kind object;
  #L353eac.  return v0 @kind object;
}
procedure `okio.Buffer` `writeIntLe`(`okio.Buffer` v1 @kind this, `int` v2 @name `i`) @signature `Lokio/Buffer;.writeIntLe:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L353ec0.  call temp:= `reverseBytesInt`(v2) @signature `Lokio/Util;.reverseBytesInt:(I)I` @kind static;
  #L353ec6.  v0:= temp;
  #L353ec8.  call temp:= `writeInt`(v1, v0) @signature `Lokio/Buffer;.writeInt:(I)Lokio/Buffer;` @kind virtual;
  #L353ece.  v0:= temp @kind object;
  #L353ed0.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeIntLe`(`okio.Buffer` v1 @kind this, `int` v2 ) @signature `Lokio/Buffer;.writeIntLe:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L353ee4.  call temp:= `writeIntLe`(v1, v2) @signature `Lokio/Buffer;.writeIntLe:(I)Lokio/Buffer;` @kind virtual;
  #L353eea.  v0:= temp @kind object;
  #L353eec.  return v0 @kind object;
}
procedure `okio.Buffer` `writeLong`(`okio.Buffer` v9 @kind this, `long` v10 @name `v`) @signature `Lokio/Buffer;.writeLong:(J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L353f00.  v8:= 8I;
  #L353f04.  v6:= 255L;
  #L353f08.  call temp:= `writableSegment`(v9, v8) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L353f0e.  v3:= temp @kind object;
  #L353f10.  v0:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L353f14.  v1:= v3.`okio.Segment.limit` @type ^`int`;
  #L353f18.  v2:= v1 + 1;
  #L353f1c.  v4:= 56I;
  #L353f20.  v4:= v10 ^>> v4 @kind long;
  #L353f24.  v4:= v4 ^& v6 @kind long;
  #L353f26.  v4:= (`int`) v4 @kind l2i;
  #L353f28.  v4:= (`byte`) v4 @kind i2b;
  #L353f2a.  v0[v1]:= v4 @kind byte;
  #L353f2e.  v1:= v2 + 1;
  #L353f32.  v4:= 48I;
  #L353f36.  v4:= v10 ^>> v4 @kind long;
  #L353f3a.  v4:= v4 ^& v6 @kind long;
  #L353f3c.  v4:= (`int`) v4 @kind l2i;
  #L353f3e.  v4:= (`byte`) v4 @kind i2b;
  #L353f40.  v0[v2]:= v4 @kind byte;
  #L353f44.  v2:= v1 + 1;
  #L353f48.  v4:= 40I;
  #L353f4c.  v4:= v10 ^>> v4 @kind long;
  #L353f50.  v4:= v4 ^& v6 @kind long;
  #L353f52.  v4:= (`int`) v4 @kind l2i;
  #L353f54.  v4:= (`byte`) v4 @kind i2b;
  #L353f56.  v0[v1]:= v4 @kind byte;
  #L353f5a.  v1:= v2 + 1;
  #L353f5e.  v4:= 32I;
  #L353f62.  v4:= v10 ^>> v4 @kind long;
  #L353f66.  v4:= v4 ^& v6 @kind long;
  #L353f68.  v4:= (`int`) v4 @kind l2i;
  #L353f6a.  v4:= (`byte`) v4 @kind i2b;
  #L353f6c.  v0[v2]:= v4 @kind byte;
  #L353f70.  v2:= v1 + 1;
  #L353f74.  v4:= 24I;
  #L353f78.  v4:= v10 ^>> v4 @kind long;
  #L353f7c.  v4:= v4 ^& v6 @kind long;
  #L353f7e.  v4:= (`int`) v4 @kind l2i;
  #L353f80.  v4:= (`byte`) v4 @kind i2b;
  #L353f82.  v0[v1]:= v4 @kind byte;
  #L353f86.  v1:= v2 + 1;
  #L353f8a.  v4:= 16I;
  #L353f8e.  v4:= v10 ^>> v4 @kind long;
  #L353f92.  v4:= v4 ^& v6 @kind long;
  #L353f94.  v4:= (`int`) v4 @kind l2i;
  #L353f96.  v4:= (`byte`) v4 @kind i2b;
  #L353f98.  v0[v2]:= v4 @kind byte;
  #L353f9c.  v2:= v1 + 1;
  #L353fa0.  v4:= v10 ^>> v8 @kind long;
  #L353fa4.  v4:= v4 ^& v6 @kind long;
  #L353fa6.  v4:= (`int`) v4 @kind l2i;
  #L353fa8.  v4:= (`byte`) v4 @kind i2b;
  #L353faa.  v0[v1]:= v4 @kind byte;
  #L353fae.  v1:= v2 + 1;
  #L353fb2.  v4:= v10 ^& v6 @kind long;
  #L353fb6.  v4:= (`int`) v4 @kind l2i;
  #L353fb8.  v4:= (`byte`) v4 @kind i2b;
  #L353fba.  v0[v2]:= v4 @kind byte;
  #L353fbe.  v3.`okio.Segment.limit` @type ^`int` := v1;
  #L353fc2.  v4:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L353fc6.  v6:= 8L;
  #L353fca.  v4:= v4 + v6 @kind long;
  #L353fcc.  v9.`okio.Buffer.size` @type ^`long` := v4 @kind wide;
  #L353fd0.  return v9 @kind object;
}
procedure `okio.BufferedSink` `writeLong`(`okio.Buffer` v1 @kind this, `long` v2 ) @signature `Lokio/Buffer;.writeLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L353fe4.  call temp:= `writeLong`(v1, v2) @signature `Lokio/Buffer;.writeLong:(J)Lokio/Buffer;` @kind virtual;
  #L353fea.  v0:= temp @kind object;
  #L353fec.  return v0 @kind object;
}
procedure `okio.Buffer` `writeLongLe`(`okio.Buffer` v3 @kind this, `long` v4 @name `v`) @signature `Lokio/Buffer;.writeLongLe:(J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L354000.  call temp:= `reverseBytesLong`(v4) @signature `Lokio/Util;.reverseBytesLong:(J)J` @kind static;
  #L354006.  v0:= temp @kind wide;
  #L354008.  call temp:= `writeLong`(v3, v0) @signature `Lokio/Buffer;.writeLong:(J)Lokio/Buffer;` @kind virtual;
  #L35400e.  v0:= temp @kind object;
  #L354010.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeLongLe`(`okio.Buffer` v1 @kind this, `long` v2 ) @signature `Lokio/Buffer;.writeLongLe:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L354024.  call temp:= `writeLongLe`(v1, v2) @signature `Lokio/Buffer;.writeLongLe:(J)Lokio/Buffer;` @kind virtual;
  #L35402a.  v0:= temp @kind object;
  #L35402c.  return v0 @kind object;
}
procedure `okio.Buffer` `writeShort`(`okio.Buffer` v8 @kind this, `int` v9 @name `s`) @signature `Lokio/Buffer;.writeShort:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L354040.  v4:= 2I;
  #L354042.  call temp:= `writableSegment`(v8, v4) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L354048.  v3:= temp @kind object;
  #L35404a.  v0:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L35404e.  v1:= v3.`okio.Segment.limit` @type ^`int`;
  #L354052.  v2:= v1 + 1;
  #L354056.  v4:= v9 ^>> 8;
  #L35405a.  v4:= v4 ^& 255;
  #L35405e.  v4:= (`byte`) v4 @kind i2b;
  #L354060.  v0[v1]:= v4 @kind byte;
  #L354064.  v1:= v2 + 1;
  #L354068.  v4:= v9 ^& 255;
  #L35406c.  v4:= (`byte`) v4 @kind i2b;
  #L35406e.  v0[v2]:= v4 @kind byte;
  #L354072.  v3.`okio.Segment.limit` @type ^`int` := v1;
  #L354076.  v4:= v8.`okio.Buffer.size` @type ^`long` @kind wide;
  #L35407a.  v6:= 2L;
  #L35407e.  v4:= v4 + v6 @kind long;
  #L354080.  v8.`okio.Buffer.size` @type ^`long` := v4 @kind wide;
  #L354084.  return v8 @kind object;
}
procedure `okio.BufferedSink` `writeShort`(`okio.Buffer` v1 @kind this, `int` v2 ) @signature `Lokio/Buffer;.writeShort:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L354098.  call temp:= `writeShort`(v1, v2) @signature `Lokio/Buffer;.writeShort:(I)Lokio/Buffer;` @kind virtual;
  #L35409e.  v0:= temp @kind object;
  #L3540a0.  return v0 @kind object;
}
procedure `okio.Buffer` `writeShortLe`(`okio.Buffer` v1 @kind this, `int` v2 @name `s`) @signature `Lokio/Buffer;.writeShortLe:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3540b4.  v0:= (`short`) v2 @kind i2s;
  #L3540b6.  call temp:= `reverseBytesShort`(v0) @signature `Lokio/Util;.reverseBytesShort:(S)S` @kind static;
  #L3540bc.  v0:= temp;
  #L3540be.  call temp:= `writeShort`(v1, v0) @signature `Lokio/Buffer;.writeShort:(I)Lokio/Buffer;` @kind virtual;
  #L3540c4.  v0:= temp @kind object;
  #L3540c6.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeShortLe`(`okio.Buffer` v1 @kind this, `int` v2 ) @signature `Lokio/Buffer;.writeShortLe:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L3540d8.  call temp:= `writeShortLe`(v1, v2) @signature `Lokio/Buffer;.writeShortLe:(I)Lokio/Buffer;` @kind virtual;
  #L3540de.  v0:= temp @kind object;
  #L3540e0.  return v0 @kind object;
}
procedure `okio.Buffer` `writeString`(`okio.Buffer` v4 @kind this, `java.lang.String` v5 @kind object @name `string`, `int` v6 @name `beginIndex`, `int` v7 @name `endIndex`, `java.nio.charset.Charset` v8 @kind object @name `charset`) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3540f4.  if v5 != 0 then goto L354108;
  #L3540f8.  v1:= new `java.lang.IllegalArgumentException`;
  #L3540fc.  v2:= "string == null" @kind object;
  #L354100.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L354106.  throw v1;
  #L354108.  if v6 >= 0 then goto L35413e;
  #L35410c.  v1:= new `java.lang.IllegalAccessError`;
  #L354110.  v2:= new `java.lang.StringBuilder`;
  #L354114.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L35411a.  v3:= "beginIndex < 0: " @kind object;
  #L35411e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L354124.  v2:= temp @kind object;
  #L354126.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L35412c.  v2:= temp @kind object;
  #L35412e.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L354134.  v2:= temp @kind object;
  #L354136.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalAccessError;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L35413c.  throw v1;
  #L35413e.  if v7 >= v6 then goto L354188;
  #L354142.  v1:= new `java.lang.IllegalArgumentException`;
  #L354146.  v2:= new `java.lang.StringBuilder`;
  #L35414a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L354150.  v3:= "endIndex < beginIndex: " @kind object;
  #L354154.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L35415a.  v2:= temp @kind object;
  #L35415c.  call temp:= `append`(v2, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L354162.  v2:= temp @kind object;
  #L354164.  v3:= " < " @kind object;
  #L354168.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L35416e.  v2:= temp @kind object;
  #L354170.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L354176.  v2:= temp @kind object;
  #L354178.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L35417e.  v2:= temp @kind object;
  #L354180.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L354186.  throw v1;
  #L354188.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L35418e.  v1:= temp;
  #L354190.  if v7 <= v1 then goto L3541e2;
  #L354194.  v1:= new `java.lang.IllegalArgumentException`;
  #L354198.  v2:= new `java.lang.StringBuilder`;
  #L35419c.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3541a2.  v3:= "endIndex > string.length: " @kind object;
  #L3541a6.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3541ac.  v2:= temp @kind object;
  #L3541ae.  call temp:= `append`(v2, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3541b4.  v2:= temp @kind object;
  #L3541b6.  v3:= " > " @kind object;
  #L3541ba.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3541c0.  v2:= temp @kind object;
  #L3541c2.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3541c8.  v3:= temp;
  #L3541ca.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3541d0.  v2:= temp @kind object;
  #L3541d2.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3541d8.  v2:= temp @kind object;
  #L3541da.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3541e0.  throw v1;
  #L3541e2.  if v8 != 0 then goto L3541f6;
  #L3541e6.  v1:= new `java.lang.IllegalArgumentException`;
  #L3541ea.  v2:= "charset == null" @kind object;
  #L3541ee.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3541f4.  throw v1;
  #L3541f6.  v1:= `@@okio.Util.UTF_8` @type ^`java.nio.charset.Charset` @kind object;
  #L3541fa.  call temp:= `equals`(v8, v1) @signature `Ljava/nio/charset/Charset;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L354200.  v1:= temp;
  #L354202.  if v1 == 0 then goto L354210;
  #L354206.  call temp:= `writeUtf8`(v4, v5) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @kind virtual;
  #L35420c.  v1:= temp @kind object;
  #L35420e.  return v1 @kind object;
  #L354210.  call temp:= `substring`(v5, v6, v7) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L354216.  v1:= temp @kind object;
  #L354218.  call temp:= `getBytes`(v1, v8) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L35421e.  v0:= temp @kind object;
  #L354220.  v1:= 0I;
  #L354222.  v2:= length @variable v0;
  #L354224.  call temp:= `write`(v4, v0, v1, v2) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @kind virtual;
  #L35422a.  v1:= temp @kind object;
  #L35422c.  goto L35420e;
}
procedure `okio.Buffer` `writeString`(`okio.Buffer` v2 @kind this, `java.lang.String` v3 @kind object @name `string`, `java.nio.charset.Charset` v4 @kind object @name `charset`) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L354240.  v0:= 0I;
  #L354242.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L354248.  v1:= temp;
  #L35424a.  call temp:= `writeString`(v2, v3, v0, v1, v4) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L354250.  v0:= temp @kind object;
  #L354252.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeString`(`okio.Buffer` v1 @kind this, `java.lang.String` v2 @kind object, `int` v3 , `int` v4 , `java.nio.charset.Charset` v5 @kind object) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L354264.  call temp:= `writeString`(v1, v2, v3, v4, v5) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L35426a.  v0:= temp @kind object;
  #L35426c.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeString`(`okio.Buffer` v1 @kind this, `java.lang.String` v2 @kind object, `java.nio.charset.Charset` v3 @kind object) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L354280.  call temp:= `writeString`(v1, v2, v3) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L354286.  v0:= temp @kind object;
  #L354288.  return v0 @kind object;
}
procedure `okio.Buffer` `writeTo`(`okio.Buffer` v2 @kind this, `java.io.OutputStream` v3 @kind object @name `out`) @signature `Lokio/Buffer;.writeTo:(Ljava/io/OutputStream;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L35429c.  v0:= v2.`okio.Buffer.size` @type ^`long` @kind wide;
  #L3542a0.  call temp:= `writeTo`(v2, v3, v0) @signature `Lokio/Buffer;.writeTo:(Ljava/io/OutputStream;J)Lokio/Buffer;` @kind virtual;
  #L3542a6.  v0:= temp @kind object;
  #L3542a8.  return v0 @kind object;
}
procedure `okio.Buffer` `writeTo`(`okio.Buffer` v10 @kind this, `java.io.OutputStream` v11 @kind object @name `out`, `long` v12 @name `byteCount`) @signature `Lokio/Buffer;.writeTo:(Ljava/io/OutputStream;J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L3542bc.  v2:= 0L;
  #L3542c0.  if v11 != 0 then goto L3542d4;
  #L3542c4.  v0:= new `java.lang.IllegalArgumentException`;
  #L3542c8.  v1:= "out == null" @kind object;
  #L3542cc.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3542d2.  throw v0;
  #L3542d4.  v0:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L3542d8.  v4:= v12 @kind wide;
  #L3542da.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L3542e0.  v6:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L3542e4.  v0:= lcmp(v12, v2);
  #L3542e8.  if v0 <= 0 then goto L35434c;
  #L3542ec.  v0:= v6.`okio.Segment.limit` @type ^`int`;
  #L3542f0.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L3542f4.  v0:= v0 - v1 @kind int;
  #L3542f6.  v0:= (`long`) v0 @kind i2l;
  #L3542f8.  call temp:= `min`(v12, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3542fe.  v0:= temp @kind wide;
  #L354300.  v7:= (`int`) v0 @kind l2i;
  #L354302.  v0:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L354306.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L35430a.  call `write`(v11, v0, v1, v7) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L354310.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L354314.  v0:= v0 + v7 @kind int;
  #L354316.  v6.`okio.Segment.pos` @type ^`int` := v0;
  #L35431a.  v0:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L35431e.  v4:= (`long`) v7 @kind i2l;
  #L354320.  v0:= v0 - v4 @kind long;
  #L354322.  v10.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L354326.  v0:= (`long`) v7 @kind i2l;
  #L354328.  v12:= v12 - v0 @kind long;
  #L35432a.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L35432e.  v1:= v6.`okio.Segment.limit` @type ^`int`;
  #L354332.  if v0 != v1 then goto L3542e4;
  #L354336.  v8:= v6 @kind object;
  #L354338.  call temp:= `pop`(v8) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L35433e.  v6:= temp @kind object;
  #L354340.  v10.`okio.Buffer.head` @type ^`okio.Segment` := v6 @kind object;
  #L354344.  call `recycle`(v8) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L35434a.  goto L3542e4;
  #L35434c.  return v10 @kind object;
}
procedure `okio.Buffer` `writeUtf8`(`okio.Buffer` v2 @kind this, `java.lang.String` v3 @kind object @name `string`) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L354360.  v0:= 0I;
  #L354362.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L354368.  v1:= temp;
  #L35436a.  call temp:= `writeUtf8`(v2, v3, v0, v1) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @kind virtual;
  #L354370.  v0:= temp @kind object;
  #L354372.  return v0 @kind object;
}
procedure `okio.Buffer` `writeUtf8`(`okio.Buffer` v16 @kind this, `java.lang.String` v17 @kind object @name `string`, `int` v18 @name `beginIndex`, `int` v19 @name `endIndex`) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L354384.  if v17 != 0 then goto L354398;
  #L354388.  v12:= new `java.lang.IllegalArgumentException`;
  #L35438c.  v13:= "string == null" @kind object;
  #L354390.  call `<init>`(v12, v13) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L354396.  throw v12;
  #L354398.  if v18 >= 0 then goto L3543d2;
  #L35439c.  v12:= new `java.lang.IllegalAccessError`;
  #L3543a0.  v13:= new `java.lang.StringBuilder`;
  #L3543a4.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3543aa.  v14:= "beginIndex < 0: " @kind object;
  #L3543ae.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3543b4.  v13:= temp @kind object;
  #L3543b6.  v0:= v18;
  #L3543ba.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3543c0.  v13:= temp @kind object;
  #L3543c2.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3543c8.  v13:= temp @kind object;
  #L3543ca.  call `<init>`(v12, v13) @signature `Ljava/lang/IllegalAccessError;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3543d0.  throw v12;
  #L3543d2.  v0:= v19;
  #L3543d6.  v1:= v18;
  #L3543da.  if v0 >= v1 then goto L35442c;
  #L3543de.  v12:= new `java.lang.IllegalArgumentException`;
  #L3543e2.  v13:= new `java.lang.StringBuilder`;
  #L3543e6.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3543ec.  v14:= "endIndex < beginIndex: " @kind object;
  #L3543f0.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3543f6.  v13:= temp @kind object;
  #L3543f8.  v0:= v19;
  #L3543fc.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L354402.  v13:= temp @kind object;
  #L354404.  v14:= " < " @kind object;
  #L354408.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L35440e.  v13:= temp @kind object;
  #L354410.  v0:= v18;
  #L354414.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L35441a.  v13:= temp @kind object;
  #L35441c.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L354422.  v13:= temp @kind object;
  #L354424.  call `<init>`(v12, v13) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L35442a.  throw v12;
  #L35442c.  call temp:= `length`(v17) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L354432.  v12:= temp;
  #L354434.  v0:= v19;
  #L354438.  if v0 <= v12 then goto L35448e;
  #L35443c.  v12:= new `java.lang.IllegalArgumentException`;
  #L354440.  v13:= new `java.lang.StringBuilder`;
  #L354444.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L35444a.  v14:= "endIndex > string.length: " @kind object;
  #L35444e.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L354454.  v13:= temp @kind object;
  #L354456.  v0:= v19;
  #L35445a.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L354460.  v13:= temp @kind object;
  #L354462.  v14:= " > " @kind object;
  #L354466.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L35446c.  v13:= temp @kind object;
  #L35446e.  call temp:= `length`(v17) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L354474.  v14:= temp;
  #L354476.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L35447c.  v13:= temp @kind object;
  #L35447e.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L354484.  v13:= temp @kind object;
  #L354486.  call `<init>`(v12, v13) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L35448c.  throw v12;
  #L35448e.  v5:= v18;
  #L354492.  v6:= v5;
  #L354494.  v0:= v19;
  #L354498.  if v6 >= v0 then goto L354696;
  #L35449c.  v0:= v17 @kind object;
  #L3544a0.  call temp:= `charAt`(v0, v6) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3544a6.  v2:= temp;
  #L3544a8.  v12:= 128I;
  #L3544ac.  if v2 >= v12 then goto L354544;
  #L3544b0.  v12:= 1I;
  #L3544b2.  v0:= v16 @kind object;
  #L3544b6.  call temp:= `writableSegment`(v0, v12) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L3544bc.  v11:= temp @kind object;
  #L3544be.  v4:= v11.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L3544c2.  v12:= v11.`okio.Segment.limit` @type ^`int`;
  #L3544c6.  v10:= v12 - v6 @kind int;
  #L3544ca.  v12:= v10 - 8192;
  #L3544ce.  v0:= v19;
  #L3544d2.  call temp:= `min`(v0, v12) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L3544d8.  v8:= temp;
  #L3544da.  v5:= v6 + 1;
  #L3544de.  v12:= v10 + v6 @kind int;
  #L3544e2.  v13:= (`byte`) v2 @kind i2b;
  #L3544e4.  v4[v12]:= v13 @kind byte;
  #L3544e8.  v6:= v5;
  #L3544ea.  if v6 >= v8 then goto L354502;
  #L3544ee.  v0:= v17 @kind object;
  #L3544f2.  call temp:= `charAt`(v0, v6) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3544f8.  v2:= temp;
  #L3544fa.  v12:= 128I;
  #L3544fe.  if v2 < v12 then goto L354532;
  #L354502.  v12:= v6 + v10 @kind int;
  #L354506.  v13:= v11.`okio.Segment.limit` @type ^`int`;
  #L35450a.  v9:= v12 - v13 @kind int;
  #L35450e.  v12:= v11.`okio.Segment.limit` @type ^`int`;
  #L354512.  v12:= v12 + v9 @kind int;
  #L354514.  v11.`okio.Segment.limit` @type ^`int` := v12;
  #L354518.  v0:= v16 @kind object;
  #L35451c.  v12:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L354520.  v14:= (`long`) v9 @kind i2l;
  #L354522.  v12:= v12 + v14 @kind long;
  #L354524.  v0:= v16 @kind object;
  #L354528.  v0.`okio.Buffer.size` @type ^`long` := v12 @kind wide;
  #L35452c.  v5:= v6;
  #L35452e.  v6:= v5;
  #L354530.  goto L354494;
  #L354532.  v5:= v6 + 1;
  #L354536.  v12:= v10 + v6 @kind int;
  #L35453a.  v13:= (`byte`) v2 @kind i2b;
  #L35453c.  v4[v12]:= v13 @kind byte;
  #L354540.  v6:= v5;
  #L354542.  goto L3544ea;
  #L354544.  v12:= 2048I;
  #L354548.  if v2 >= v12 then goto L354576;
  #L35454c.  v12:= v2 ^> 6;
  #L354550.  v12:= v12 ^| 192;
  #L354554.  v0:= v16 @kind object;
  #L354558.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L35455e.  v12:= v2 ^& 63;
  #L354562.  v12:= v12 ^| 128;
  #L354566.  v0:= v16 @kind object;
  #L35456a.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L354570.  v5:= v6 + 1;
  #L354574.  goto L35452e;
  #L354576.  v12:= 55296I;
  #L35457c.  if v2 < v12 then goto L35458a;
  #L354580.  v12:= 57343I;
  #L354586.  if v2 <= v12 then goto L3545ca;
  #L35458a.  v12:= v2 ^> 12;
  #L35458e.  v12:= v12 ^| 224;
  #L354592.  v0:= v16 @kind object;
  #L354596.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L35459c.  v12:= v2 ^> 6;
  #L3545a0.  v12:= v12 ^& 63;
  #L3545a4.  v12:= v12 ^| 128;
  #L3545a8.  v0:= v16 @kind object;
  #L3545ac.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L3545b2.  v12:= v2 ^& 63;
  #L3545b6.  v12:= v12 ^| 128;
  #L3545ba.  v0:= v16 @kind object;
  #L3545be.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L3545c4.  v5:= v6 + 1;
  #L3545c8.  goto L35452e;
  #L3545ca.  v12:= v6 + 1;
  #L3545ce.  v0:= v19;
  #L3545d2.  if v12 >= v0 then goto L35461c;
  #L3545d6.  v12:= v6 + 1;
  #L3545da.  v0:= v17 @kind object;
  #L3545de.  call temp:= `charAt`(v0, v12) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3545e4.  v7:= temp;
  #L3545e6.  v12:= 56319I;
  #L3545ec.  if v2 > v12 then goto L354604;
  #L3545f0.  v12:= 56320I;
  #L3545f6.  if v7 < v12 then goto L354604;
  #L3545fa.  v12:= 57343I;
  #L354600.  if v7 <= v12 then goto L354620;
  #L354604.  v12:= 63I;
  #L354608.  v0:= v16 @kind object;
  #L35460c.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L354612.  v5:= v6 + 1;
  #L354616.  v6:= v5;
  #L354618.  goto L354494;
  #L35461c.  v7:= 0I;
  #L35461e.  goto L3545e6;
  #L354620.  v12:= 65536I;
  #L354624.  v13:= -55297I;
  #L35462a.  v13:= v13 ^& v2 @kind int;
  #L35462c.  v13:= v13 ^< 10;
  #L354630.  v14:= -56321I;
  #L354636.  v14:= v14 ^& v7 @kind int;
  #L354638.  v13:= v13 ^| v14 @kind int;
  #L35463a.  v3:= v12 + v13 @kind int;
  #L35463e.  v12:= v3 ^> 18;
  #L354642.  v12:= v12 ^| 240;
  #L354646.  v0:= v16 @kind object;
  #L35464a.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L354650.  v12:= v3 ^> 12;
  #L354654.  v12:= v12 ^& 63;
  #L354658.  v12:= v12 ^| 128;
  #L35465c.  v0:= v16 @kind object;
  #L354660.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L354666.  v12:= v3 ^> 6;
  #L35466a.  v12:= v12 ^& 63;
  #L35466e.  v12:= v12 ^| 128;
  #L354672.  v0:= v16 @kind object;
  #L354676.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L35467c.  v12:= v3 ^& 63;
  #L354680.  v12:= v12 ^| 128;
  #L354684.  v0:= v16 @kind object;
  #L354688.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L35468e.  v5:= v6 + 2;
  #L354692.  goto L35452e;
  #L354696.  return v16 @kind object;
}
procedure `okio.BufferedSink` `writeUtf8`(`okio.Buffer` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L3546a8.  call temp:= `writeUtf8`(v1, v2) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @kind virtual;
  #L3546ae.  v0:= temp @kind object;
  #L3546b0.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeUtf8`(`okio.Buffer` v1 @kind this, `java.lang.String` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L3546c4.  call temp:= `writeUtf8`(v1, v2, v3, v4) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @kind virtual;
  #L3546ca.  v0:= temp @kind object;
  #L3546cc.  return v0 @kind object;
}
procedure `okio.Buffer` `writeUtf8CodePoint`(`okio.Buffer` v3 @kind this, `int` v4 @name `codePoint`) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3546e0.  v0:= 128I;
  #L3546e4.  if v4 >= v0 then goto L3546f0;
  #L3546e8.  call temp:= `writeByte`(v3, v4) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L3546ee.  return v3 @kind object;
  #L3546f0.  v0:= 2048I;
  #L3546f4.  if v4 >= v0 then goto L354716;
  #L3546f8.  v0:= v4 ^> 6;
  #L3546fc.  v0:= v0 ^| 192;
  #L354700.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L354706.  v0:= v4 ^& 63;
  #L35470a.  v0:= v0 ^| 128;
  #L35470e.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L354714.  goto L3546ee;
  #L354716.  v0:= 65536I;
  #L35471a.  if v4 >= v0 then goto L35479c;
  #L35471e.  v0:= 55296I;
  #L354724.  if v4 < v0 then goto L35476c;
  #L354728.  v0:= 57343I;
  #L35472e.  if v4 > v0 then goto L35476c;
  #L354732.  v0:= new `java.lang.IllegalArgumentException`;
  #L354736.  v1:= new `java.lang.StringBuilder`;
  #L35473a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L354740.  v2:= "Unexpected code point: " @kind object;
  #L354744.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L35474a.  v1:= temp @kind object;
  #L35474c.  call temp:= `toHexString`(v4) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L354752.  v2:= temp @kind object;
  #L354754.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L35475a.  v1:= temp @kind object;
  #L35475c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L354762.  v1:= temp @kind object;
  #L354764.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L35476a.  throw v0;
  #L35476c.  v0:= v4 ^> 12;
  #L354770.  v0:= v0 ^| 224;
  #L354774.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L35477a.  v0:= v4 ^> 6;
  #L35477e.  v0:= v0 ^& 63;
  #L354782.  v0:= v0 ^| 128;
  #L354786.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L35478c.  v0:= v4 ^& 63;
  #L354790.  v0:= v0 ^| 128;
  #L354794.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L35479a.  goto L3546ee;
  #L35479c.  v0:= 1114111I;
  #L3547a2.  if v4 > v0 then goto L3547e8;
  #L3547a6.  v0:= v4 ^> 18;
  #L3547aa.  v0:= v0 ^| 240;
  #L3547ae.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L3547b4.  v0:= v4 ^> 12;
  #L3547b8.  v0:= v0 ^& 63;
  #L3547bc.  v0:= v0 ^| 128;
  #L3547c0.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L3547c6.  v0:= v4 ^> 6;
  #L3547ca.  v0:= v0 ^& 63;
  #L3547ce.  v0:= v0 ^| 128;
  #L3547d2.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L3547d8.  v0:= v4 ^& 63;
  #L3547dc.  v0:= v0 ^| 128;
  #L3547e0.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L3547e6.  goto L3546ee;
  #L3547e8.  v0:= new `java.lang.IllegalArgumentException`;
  #L3547ec.  v1:= new `java.lang.StringBuilder`;
  #L3547f0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3547f6.  v2:= "Unexpected code point: " @kind object;
  #L3547fa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L354800.  v1:= temp @kind object;
  #L354802.  call temp:= `toHexString`(v4) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L354808.  v2:= temp @kind object;
  #L35480a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L354810.  v1:= temp @kind object;
  #L354812.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L354818.  v1:= temp @kind object;
  #L35481a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L354820.  throw v0;
}
procedure `okio.BufferedSink` `writeUtf8CodePoint`(`okio.Buffer` v1 @kind this, `int` v2 ) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L354834.  call temp:= `writeUtf8CodePoint`(v1, v2) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/Buffer;` @kind virtual;
  #L35483a.  v0:= temp @kind object;
  #L35483c.  return v0 @kind object;
}
