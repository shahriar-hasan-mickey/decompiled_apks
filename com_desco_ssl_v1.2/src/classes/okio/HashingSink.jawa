record `okio.HashingSink` @kind class @AccessFlag PUBLIC_FINAL extends `okio.ForwardingSink` @kind class {
  `java.security.MessageDigest` `okio.HashingSink.messageDigest` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okio.HashingSink` v2 @kind this, `okio.Sink` v3 @kind object @name `sink`, `java.lang.String` v4 @kind object @name `algorithm`) @signature `Lokio/HashingSink;.<init>:(Lokio/Sink;Ljava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L354850.  call `<init>`(v2, v3) @signature `Lokio/ForwardingSink;.<init>:(Lokio/Sink;)V` @kind direct;
  #L354856.  call temp:= `getInstance`(v4) @signature `Ljava/security/MessageDigest;.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;` @kind static;
  #L35485c.  v1:= temp @kind object;
  #L35485e.  v2.`okio.HashingSink.messageDigest` @type ^`java.security.MessageDigest` := v1 @kind object;
  #L354862.  return @kind void;
  #L354864.  v0:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L354866.  v1:= new `java.lang.AssertionError`;
  #L35486a.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L354870.  throw v1;
  catch `java.security.NoSuchAlgorithmException` @[L354856..L354862] goto L354864;
}
procedure `okio.HashingSink` `md5`(`okio.Sink` v2 @kind object @name `sink`) @signature `Lokio/HashingSink;.md5:(Lokio/Sink;)Lokio/HashingSink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L354894.  v0:= new `okio.HashingSink`;
  #L354898.  v1:= "MD5" @kind object;
  #L35489c.  call `<init>`(v0, v2, v1) @signature `Lokio/HashingSink;.<init>:(Lokio/Sink;Ljava/lang/String;)V` @kind direct;
  #L3548a2.  return v0 @kind object;
}
procedure `okio.HashingSink` `sha1`(`okio.Sink` v2 @kind object @name `sink`) @signature `Lokio/HashingSink;.sha1:(Lokio/Sink;)Lokio/HashingSink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3548b4.  v0:= new `okio.HashingSink`;
  #L3548b8.  v1:= "SHA-1" @kind object;
  #L3548bc.  call `<init>`(v0, v2, v1) @signature `Lokio/HashingSink;.<init>:(Lokio/Sink;Ljava/lang/String;)V` @kind direct;
  #L3548c2.  return v0 @kind object;
}
procedure `okio.HashingSink` `sha256`(`okio.Sink` v2 @kind object @name `sink`) @signature `Lokio/HashingSink;.sha256:(Lokio/Sink;)Lokio/HashingSink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3548d4.  v0:= new `okio.HashingSink`;
  #L3548d8.  v1:= "SHA-256" @kind object;
  #L3548dc.  call `<init>`(v0, v2, v1) @signature `Lokio/HashingSink;.<init>:(Lokio/Sink;Ljava/lang/String;)V` @kind direct;
  #L3548e2.  return v0 @kind object;
}
procedure `okio.ByteString` `hash`(`okio.HashingSink` v2 @kind this) @signature `Lokio/HashingSink;.hash:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3548f4.  v1:= v2.`okio.HashingSink.messageDigest` @type ^`java.security.MessageDigest` @kind object;
  #L3548f8.  call temp:= `digest`(v1) @signature `Ljava/security/MessageDigest;.digest:()[B` @kind virtual;
  #L3548fe.  v0:= temp @kind object;
  #L354900.  call temp:= `of`(v0) @signature `Lokio/ByteString;.of:([B)Lokio/ByteString;` @kind static;
  #L354906.  v1:= temp @kind object;
  #L354908.  return v1 @kind object;
}
procedure `void` `write`(`okio.HashingSink` v10 @kind this, `okio.Buffer` v11 @kind object @name `source`, `long` v12 @name `byteCount`) @signature `Lokio/HashingSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L35491c.  v0:= v11.`okio.Buffer.size` @type ^`long` @kind wide;
  #L354920.  v2:= 0L;
  #L354924.  v4:= v12 @kind wide;
  #L354926.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L35492c.  v6:= 0L;
  #L354930.  v8:= v11.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L354934.  v0:= lcmp(v6, v12);
  #L354938.  if v0 >= 0 then goto L354972;
  #L35493c.  v0:= v12 - v6 @kind long;
  #L354940.  v2:= v8.`okio.Segment.limit` @type ^`int`;
  #L354944.  v3:= v8.`okio.Segment.pos` @type ^`int`;
  #L354948.  v2:= v2 - v3 @kind int;
  #L35494a.  v2:= (`long`) v2 @kind i2l;
  #L35494c.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L354952.  v0:= temp @kind wide;
  #L354954.  v9:= (`int`) v0 @kind l2i;
  #L354956.  v0:= v10.`okio.HashingSink.messageDigest` @type ^`java.security.MessageDigest` @kind object;
  #L35495a.  v1:= v8.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L35495e.  v2:= v8.`okio.Segment.pos` @type ^`int`;
  #L354962.  call `update`(v0, v1, v2, v9) @signature `Ljava/security/MessageDigest;.update:([BII)V` @kind virtual;
  #L354968.  v0:= (`long`) v9 @kind i2l;
  #L35496a.  v6:= v6 + v0 @kind long;
  #L35496c.  v8:= v8.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L354970.  goto L354934;
  #L354972.  call `write`(v10, v11, v12) @signature `Lokio/ForwardingSink;.write:(Lokio/Buffer;J)V` @kind super;
  #L354978.  return @kind void;
}
