record `okio.Util` @kind class @AccessFlag FINAL {
}
global `java.nio.charset.Charset` `@@okio.Util.UTF_8` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokio/Util;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L24e83c.  v0:= "UTF-8" @kind object;
  #L24e840.  call temp:= `forName`(v0) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L24e846.  v0:= temp @kind object;
  #L24e848.  `@@okio.Util.UTF_8` @type ^`java.nio.charset.Charset` := v0 @kind object;
  #L24e84c.  return @kind void;
}
procedure `void` `<init>`(`okio.Util` v0 @kind this) @signature `Lokio/Util;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L24e860.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L24e866.  return @kind void;
}
procedure `boolean` `arrayRangeEquals`(`byte`[] v3 @kind object @name `a`, `int` v4 @name `aOffset`, `byte`[] v5 @kind object @name `b`, `int` v6 @name `bOffset`, `int` v7 @name `byteCount`) @signature `Lokio/Util;.arrayRangeEquals:([BI[BII)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L24e878.  v0:= 0I;
  #L24e87a.  if v0 >= v7 then goto L24e89c;
  #L24e87e.  v1:= v0 + v4 @kind int;
  #L24e882.  v1:= v3[v1] @kind byte;
  #L24e886.  v2:= v0 + v6 @kind int;
  #L24e88a.  v2:= v5[v2] @kind byte;
  #L24e88e.  if v1 == v2 then goto L24e896;
  #L24e892.  v1:= 0I;
  #L24e894.  return v1;
  #L24e896.  v0:= v0 + 1;
  #L24e89a.  goto L24e87a;
  #L24e89c.  v1:= 1I;
  #L24e89e.  goto L24e894;
}
procedure `void` `checkOffsetAndCount`(`long` v6 @name `size`, `long` v8 @name `offset`, `long` v10 @name `byteCount`) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L24e8b0.  v0:= v8 ^| v10 @kind long;
  #L24e8b4.  v2:= 0L;
  #L24e8b8.  v0:= lcmp(v0, v2);
  #L24e8bc.  if v0 < 0 then goto L24e8d4;
  #L24e8c0.  v0:= lcmp(v8, v6);
  #L24e8c4.  if v0 > 0 then goto L24e8d4;
  #L24e8c8.  v0:= v6 - v8 @kind long;
  #L24e8cc.  v0:= lcmp(v0, v10);
  #L24e8d0.  if v0 >= 0 then goto L24e91c;
  #L24e8d4.  v0:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L24e8d8.  v1:= "size=%s offset=%s byteCount=%s" @kind object;
  #L24e8dc.  v2:= 3I;
  #L24e8de.  v2:= new `java.lang.Object`[v2];
  #L24e8e2.  v3:= 0I;
  #L24e8e4.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L24e8ea.  v4:= temp @kind object;
  #L24e8ec.  v2[v3]:= v4 @kind object;
  #L24e8f0.  v3:= 1I;
  #L24e8f2.  call temp:= `valueOf`(v8) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L24e8f8.  v4:= temp @kind object;
  #L24e8fa.  v2[v3]:= v4 @kind object;
  #L24e8fe.  v3:= 2I;
  #L24e900.  call temp:= `valueOf`(v10) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L24e906.  v4:= temp @kind object;
  #L24e908.  v2[v3]:= v4 @kind object;
  #L24e90c.  call temp:= `format`(v1, v2) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L24e912.  v1:= temp @kind object;
  #L24e914.  call `<init>`(v0, v1) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24e91a.  throw v0;
  #L24e91c.  return @kind void;
}
procedure `int` `reverseBytesInt`(`int` v2 @name `i`) @signature `Lokio/Util;.reverseBytesInt:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L24e930.  v0:= -16777216I;
  #L24e934.  v0:= v0 ^& v2 @kind int;
  #L24e936.  v0:= v0 ^>> 24;
  #L24e93a.  v1:= 16711680I;
  #L24e93e.  v1:= v1 ^& v2 @kind int;
  #L24e940.  v1:= v1 ^>> 8;
  #L24e944.  v0:= v0 ^| v1 @kind int;
  #L24e946.  v1:= 65280I;
  #L24e94c.  v1:= v1 ^& v2 @kind int;
  #L24e94e.  v1:= v1 ^< 8;
  #L24e952.  v0:= v0 ^| v1 @kind int;
  #L24e954.  v1:= v2 ^& 255;
  #L24e958.  v1:= v1 ^< 24;
  #L24e95c.  v0:= v0 ^| v1 @kind int;
  #L24e95e.  return v0;
}
procedure `long` `reverseBytesLong`(`long` v8 @name `v`) @signature `Lokio/Util;.reverseBytesLong:(J)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L24e970.  v7:= 56I;
  #L24e974.  v6:= 40I;
  #L24e978.  v5:= 24I;
  #L24e97c.  v4:= 8I;
  #L24e980.  v0:= -72057594037927936L;
  #L24e984.  v0:= v0 ^& v8 @kind long;
  #L24e986.  v0:= v0 ^>> v7 @kind long;
  #L24e988.  v2:= 71776119061217280L;
  #L24e98c.  v2:= v2 ^& v8 @kind long;
  #L24e98e.  v2:= v2 ^>> v6 @kind long;
  #L24e990.  v0:= v0 ^| v2 @kind long;
  #L24e992.  v2:= 280375465082880L;
  #L24e99c.  v2:= v2 ^& v8 @kind long;
  #L24e99e.  v2:= v2 ^>> v5 @kind long;
  #L24e9a0.  v0:= v0 ^| v2 @kind long;
  #L24e9a2.  v2:= 1095216660480L;
  #L24e9ac.  v2:= v2 ^& v8 @kind long;
  #L24e9ae.  v2:= v2 ^>> v4 @kind long;
  #L24e9b0.  v0:= v0 ^| v2 @kind long;
  #L24e9b2.  v2:= 4278190080L;
  #L24e9bc.  v2:= v2 ^& v8 @kind long;
  #L24e9be.  v2:= v2 ^< v4 @kind long;
  #L24e9c0.  v0:= v0 ^| v2 @kind long;
  #L24e9c2.  v2:= 16711680L;
  #L24e9c8.  v2:= v2 ^& v8 @kind long;
  #L24e9ca.  v2:= v2 ^< v5 @kind long;
  #L24e9cc.  v0:= v0 ^| v2 @kind long;
  #L24e9ce.  v2:= 65280L;
  #L24e9d4.  v2:= v2 ^& v8 @kind long;
  #L24e9d6.  v2:= v2 ^< v6 @kind long;
  #L24e9d8.  v0:= v0 ^| v2 @kind long;
  #L24e9da.  v2:= 255L;
  #L24e9de.  v2:= v2 ^& v8 @kind long;
  #L24e9e0.  v2:= v2 ^< v7 @kind long;
  #L24e9e2.  v0:= v0 ^| v2 @kind long;
  #L24e9e4.  return v0 @kind wide;
}
procedure `short` `reverseBytesShort`(`short` v4 @name `s`) @signature `Lokio/Util;.reverseBytesShort:(S)S` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L24e9f8.  v2:= 65535I;
  #L24e9fe.  v0:= v4 ^& v2 @kind int;
  #L24ea02.  v2:= 65280I;
  #L24ea08.  v2:= v2 ^& v0 @kind int;
  #L24ea0a.  v2:= v2 ^>> 8;
  #L24ea0e.  v3:= v0 ^& 255;
  #L24ea12.  v3:= v3 ^< 8;
  #L24ea16.  v1:= v2 ^| v3 @kind int;
  #L24ea1a.  v2:= (`short`) v1 @kind i2s;
  #L24ea1c.  return v2;
}
procedure `void` `sneakyRethrow`(`java.lang.Throwable` v0 @kind object @name `t`) @signature `Lokio/Util;.sneakyRethrow:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L24ea30.  call `sneakyThrow2`(v0) @signature `Lokio/Util;.sneakyThrow2:(Ljava/lang/Throwable;)V` @kind static;
  #L24ea36.  return @kind void;
}
procedure `void` `sneakyThrow2`(`java.lang.Throwable` v0 @kind object @name `t`) @signature `Lokio/Util;.sneakyThrow2:(Ljava/lang/Throwable;)V` @AccessFlag PRIVATE_STATIC {
    temp;

  #L24ea48.  throw v0;
}
