record `okio.Segment` @kind class @AccessFlag FINAL {
  `byte`[] `okio.Segment.data` @AccessFlag FINAL;
  `int` `okio.Segment.limit` @AccessFlag ;
  `okio.Segment` `okio.Segment.next` @AccessFlag ;
  `boolean` `okio.Segment.owner` @AccessFlag ;
  `int` `okio.Segment.pos` @AccessFlag ;
  `okio.Segment` `okio.Segment.prev` @AccessFlag ;
  `boolean` `okio.Segment.shared` @AccessFlag ;
}
global `int` `@@okio.Segment.SHARE_MINIMUM` @AccessFlag STATIC_FINAL;
global `int` `@@okio.Segment.SIZE` @AccessFlag STATIC_FINAL;
procedure `void` `<init>`(`okio.Segment` v1 @kind this) @signature `Lokio/Segment;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L24e228.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L24e22e.  v0:= 8192I;
  #L24e232.  v0:= new `byte`[v0];
  #L24e236.  v1.`okio.Segment.data` @type ^`byte`[] := v0 @kind object;
  #L24e23a.  v0:= 1I;
  #L24e23c.  v1.`okio.Segment.owner` @type ^`boolean` := v0 @kind boolean;
  #L24e240.  v0:= 0I;
  #L24e242.  v1.`okio.Segment.shared` @type ^`boolean` := v0 @kind boolean;
  #L24e246.  return @kind void;
}
procedure `void` `<init>`(`okio.Segment` v3 @kind this, `okio.Segment` v4 @kind object @name `shareFrom`) @signature `Lokio/Segment;.<init>:(Lokio/Segment;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L24e258.  v0:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24e25c.  v1:= v4.`okio.Segment.pos` @type ^`int`;
  #L24e260.  v2:= v4.`okio.Segment.limit` @type ^`int`;
  #L24e264.  call `<init>`(v3, v0, v1, v2) @signature `Lokio/Segment;.<init>:([BII)V` @kind direct;
  #L24e26a.  v0:= 1I;
  #L24e26c.  v4.`okio.Segment.shared` @type ^`boolean` := v0 @kind boolean;
  #L24e270.  return @kind void;
}
procedure `void` `<init>`(`okio.Segment` v1 @kind this, `byte`[] v2 @kind object @name `data`, `int` v3 @name `pos`, `int` v4 @name `limit`) @signature `Lokio/Segment;.<init>:([BII)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L24e284.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L24e28a.  v1.`okio.Segment.data` @type ^`byte`[] := v2 @kind object;
  #L24e28e.  v1.`okio.Segment.pos` @type ^`int` := v3;
  #L24e292.  v1.`okio.Segment.limit` @type ^`int` := v4;
  #L24e296.  v0:= 0I;
  #L24e298.  v1.`okio.Segment.owner` @type ^`boolean` := v0 @kind boolean;
  #L24e29c.  v0:= 1I;
  #L24e29e.  v1.`okio.Segment.shared` @type ^`boolean` := v0 @kind boolean;
  #L24e2a2.  return @kind void;
}
procedure `void` `compact`(`okio.Segment` v4 @kind this) @signature `Lokio/Segment;.compact:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L24e2b4.  v2:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L24e2b8.  if v2 != v4 then goto L24e2c8;
  #L24e2bc.  v2:= new `java.lang.IllegalStateException`;
  #L24e2c0.  call `<init>`(v2) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L24e2c6.  throw v2;
  #L24e2c8.  v2:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L24e2cc.  v2:= v2.`okio.Segment.owner` @type ^`boolean` @kind boolean;
  #L24e2d0.  if v2 != 0 then goto L24e2d6;
  #L24e2d4.  return @kind void;
  #L24e2d6.  v2:= v4.`okio.Segment.limit` @type ^`int`;
  #L24e2da.  v3:= v4.`okio.Segment.pos` @type ^`int`;
  #L24e2de.  v1:= v2 - v3 @kind int;
  #L24e2e2.  v2:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L24e2e6.  v2:= v2.`okio.Segment.limit` @type ^`int`;
  #L24e2ea.  v3:= v2 - 8192;
  #L24e2ee.  v2:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L24e2f2.  v2:= v2.`okio.Segment.shared` @type ^`boolean` @kind boolean;
  #L24e2f6.  if v2 == 0 then goto L24e31c;
  #L24e2fa.  v2:= 0I;
  #L24e2fc.  v0:= v3 + v2 @kind int;
  #L24e300.  if v1 > v0 then goto L24e2d4;
  #L24e304.  v2:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L24e308.  call `writeTo`(v4, v2, v1) @signature `Lokio/Segment;.writeTo:(Lokio/Segment;I)V` @kind virtual;
  #L24e30e.  call temp:= `pop`(v4) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L24e314.  call `recycle`(v4) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L24e31a.  goto L24e2d4;
  #L24e31c.  v2:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L24e320.  v2:= v2.`okio.Segment.pos` @type ^`int`;
  #L24e324.  goto L24e2fc;
}
procedure `okio.Segment` `pop`(`okio.Segment` v4 @kind this) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L24e338.  v1:= 0I;
  #L24e33a.  v2:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24e33e.  if v2 == v4 then goto L24e368;
  #L24e342.  v0:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24e346.  v2:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L24e34a.  v3:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24e34e.  v2.`okio.Segment.next` @type ^`okio.Segment` := v3 @kind object;
  #L24e352.  v2:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24e356.  v3:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L24e35a.  v2.`okio.Segment.prev` @type ^`okio.Segment` := v3 @kind object;
  #L24e35e.  v4.`okio.Segment.next` @type ^`okio.Segment` := v1 @kind object;
  #L24e362.  v4.`okio.Segment.prev` @type ^`okio.Segment` := v1 @kind object;
  #L24e366.  return v0 @kind object;
  #L24e368.  v0:= v1 @kind object;
  #L24e36a.  goto L24e346;
}
procedure `okio.Segment` `push`(`okio.Segment` v1 @kind this, `okio.Segment` v2 @kind object @name `segment`) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24e37c.  v2.`okio.Segment.prev` @type ^`okio.Segment` := v1 @kind object;
  #L24e380.  v0:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24e384.  v2.`okio.Segment.next` @type ^`okio.Segment` := v0 @kind object;
  #L24e388.  v0:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24e38c.  v0.`okio.Segment.prev` @type ^`okio.Segment` := v2 @kind object;
  #L24e390.  v1.`okio.Segment.next` @type ^`okio.Segment` := v2 @kind object;
  #L24e394.  return v2 @kind object;
}
procedure `okio.Segment` `split`(`okio.Segment` v5 @kind this, `int` v6 @name `byteCount`) @signature `Lokio/Segment;.split:(I)Lokio/Segment;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L24e3a8.  if v6 <= 0 then goto L24e3ba;
  #L24e3ac.  v1:= v5.`okio.Segment.limit` @type ^`int`;
  #L24e3b0.  v2:= v5.`okio.Segment.pos` @type ^`int`;
  #L24e3b4.  v1:= v1 - v2 @kind int;
  #L24e3b6.  if v6 <= v1 then goto L24e3c6;
  #L24e3ba.  v1:= new `java.lang.IllegalArgumentException`;
  #L24e3be.  call `<init>`(v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L24e3c4.  throw v1;
  #L24e3c6.  v1:= 1024I;
  #L24e3ca.  if v6 < v1 then goto L24e3f8;
  #L24e3ce.  v0:= new `okio.Segment`;
  #L24e3d2.  call `<init>`(v0, v5) @signature `Lokio/Segment;.<init>:(Lokio/Segment;)V` @kind direct;
  #L24e3d8.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L24e3dc.  v1:= v1 + v6 @kind int;
  #L24e3de.  v0.`okio.Segment.limit` @type ^`int` := v1;
  #L24e3e2.  v1:= v5.`okio.Segment.pos` @type ^`int`;
  #L24e3e6.  v1:= v1 + v6 @kind int;
  #L24e3e8.  v5.`okio.Segment.pos` @type ^`int` := v1;
  #L24e3ec.  v1:= v5.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L24e3f0.  call temp:= `push`(v1, v0) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L24e3f6.  return v0 @kind object;
  #L24e3f8.  call temp:= `take`() @signature `Lokio/SegmentPool;.take:()Lokio/Segment;` @kind static;
  #L24e3fe.  v0:= temp @kind object;
  #L24e400.  v1:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24e404.  v2:= v5.`okio.Segment.pos` @type ^`int`;
  #L24e408.  v3:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24e40c.  v4:= 0I;
  #L24e40e.  call `arraycopy`(v1, v2, v3, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L24e414.  goto L24e3d8;
}
procedure `void` `writeTo`(`okio.Segment` v6 @kind this, `okio.Segment` v7 @kind object @name `sink`, `int` v8 @name `byteCount`) @signature `Lokio/Segment;.writeTo:(Lokio/Segment;I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L24e428.  v2:= 8192I;
  #L24e42c.  v5:= 0I;
  #L24e42e.  v0:= v7.`okio.Segment.owner` @type ^`boolean` @kind boolean;
  #L24e432.  if v0 != 0 then goto L24e442;
  #L24e436.  v0:= new `java.lang.IllegalArgumentException`;
  #L24e43a.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L24e440.  throw v0;
  #L24e442.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L24e446.  v0:= v0 + v8 @kind int;
  #L24e448.  if v0 <= v2 then goto L24e4aa;
  #L24e44c.  v0:= v7.`okio.Segment.shared` @type ^`boolean` @kind boolean;
  #L24e450.  if v0 == 0 then goto L24e460;
  #L24e454.  v0:= new `java.lang.IllegalArgumentException`;
  #L24e458.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L24e45e.  throw v0;
  #L24e460.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L24e464.  v0:= v0 + v8 @kind int;
  #L24e466.  v1:= v7.`okio.Segment.pos` @type ^`int`;
  #L24e46a.  v0:= v0 - v1 @kind int;
  #L24e46c.  if v0 <= v2 then goto L24e47c;
  #L24e470.  v0:= new `java.lang.IllegalArgumentException`;
  #L24e474.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L24e47a.  throw v0;
  #L24e47c.  v0:= v7.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24e480.  v1:= v7.`okio.Segment.pos` @type ^`int`;
  #L24e484.  v2:= v7.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24e488.  v3:= v7.`okio.Segment.limit` @type ^`int`;
  #L24e48c.  v4:= v7.`okio.Segment.pos` @type ^`int`;
  #L24e490.  v3:= v3 - v4 @kind int;
  #L24e492.  call `arraycopy`(v0, v1, v2, v5, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L24e498.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L24e49c.  v1:= v7.`okio.Segment.pos` @type ^`int`;
  #L24e4a0.  v0:= v0 - v1 @kind int;
  #L24e4a2.  v7.`okio.Segment.limit` @type ^`int` := v0;
  #L24e4a6.  v7.`okio.Segment.pos` @type ^`int` := v5;
  #L24e4aa.  v0:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24e4ae.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L24e4b2.  v2:= v7.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24e4b6.  v3:= v7.`okio.Segment.limit` @type ^`int`;
  #L24e4ba.  call `arraycopy`(v0, v1, v2, v3, v8) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L24e4c0.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L24e4c4.  v0:= v0 + v8 @kind int;
  #L24e4c6.  v7.`okio.Segment.limit` @type ^`int` := v0;
  #L24e4ca.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L24e4ce.  v0:= v0 + v8 @kind int;
  #L24e4d0.  v6.`okio.Segment.pos` @type ^`int` := v0;
  #L24e4d4.  return @kind void;
}
