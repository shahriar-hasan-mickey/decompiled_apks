record `retrofit2.Utils$ParameterizedTypeImpl` @kind class @AccessFlag FINAL extends `java.lang.reflect.ParameterizedType` @kind interface {
  `java.lang.reflect.Type` `retrofit2.Utils$ParameterizedTypeImpl.ownerType` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type` `retrofit2.Utils$ParameterizedTypeImpl.rawType` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type`[] `retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit2.Utils$ParameterizedTypeImpl` v5 @kind this, `java.lang.reflect.Type` v6 @kind object @name `ownerType`, `java.lang.reflect.Type` v7 @kind object @name `rawType`, `java.lang.reflect.Type`[] v8 @kind object @name `typeArguments`) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.<init>:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2523a0.  v3:= 1I;
  #L2523a2.  v4:= 0I;
  #L2523a4.  call `<init>`(v5) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2523aa.  v1:= instanceof @variable v7 @type ^`java.lang.Class` @kind boolean;
  #L2523ae.  if v1 == 0 then goto L2523e2;
  #L2523b2.  if v6 != 0 then goto L2523da;
  #L2523b6.  v2:= v3;
  #L2523b8.  v1:= v7 @kind object;
  #L2523ba.  v1:= (`java.lang.Class`) v1 @kind object;
  #L2523be.  call temp:= `getEnclosingClass`(v1) @signature `Ljava/lang/Class;.getEnclosingClass:()Ljava/lang/Class;` @kind virtual;
  #L2523c4.  v1:= temp @kind object;
  #L2523c6.  if v1 != 0 then goto L2523de;
  #L2523ca.  if v2 == v3 then goto L2523e2;
  #L2523ce.  v1:= new `java.lang.IllegalArgumentException`;
  #L2523d2.  call `<init>`(v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L2523d8.  throw v1;
  #L2523da.  v2:= v4;
  #L2523dc.  goto L2523b8;
  #L2523de.  v3:= v4;
  #L2523e0.  goto L2523ca;
  #L2523e2.  v5.`retrofit2.Utils$ParameterizedTypeImpl.ownerType` @type ^`java.lang.reflect.Type` := v6 @kind object;
  #L2523e6.  v5.`retrofit2.Utils$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` := v7 @kind object;
  #L2523ea.  call temp:= `clone`(v8) @signature `[Ljava/lang/reflect/Type;.clone:()Ljava/lang/Object;` @kind virtual;
  #L2523f0.  v1:= temp @kind object;
  #L2523f2.  v1:= (`java.lang.reflect.Type`[]) v1 @kind object;
  #L2523f6.  v5.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] := v1 @kind object;
  #L2523fa.  v1:= v5.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L2523fe.  v2:= length @variable v1;
  #L252400.  if v4 >= v2 then goto L252424;
  #L252404.  v0:= v1[v4] @kind object;
  #L252408.  if v0 != 0 then goto L252418;
  #L25240c.  v1:= new `java.lang.NullPointerException`;
  #L252410.  call `<init>`(v1) @signature `Ljava/lang/NullPointerException;.<init>:()V` @kind direct;
  #L252416.  throw v1;
  #L252418.  call `checkNotPrimitive`(v0) @signature `Lretrofit2/Utils;.checkNotPrimitive:(Ljava/lang/reflect/Type;)V` @kind static;
  #L25241e.  v4:= v4 + 1;
  #L252422.  goto L252400;
  #L252424.  return @kind void;
}
procedure `boolean` `equals`(`retrofit2.Utils$ParameterizedTypeImpl` v1 @kind this, `java.lang.Object` v2 @kind object @name `other`) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L252438.  v0:= instanceof @variable v2 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L25243c.  if v0 == 0 then goto L252454;
  #L252440.  v2:= (`java.lang.reflect.ParameterizedType`) v2 @kind object;
  #L252444.  call temp:= `equals`(v1, v2) @signature `Lretrofit2/Utils;.equals:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L25244a.  v0:= temp;
  #L25244c.  if v0 == 0 then goto L252454;
  #L252450.  v0:= 1I;
  #L252452.  return v0;
  #L252454.  v0:= 0I;
  #L252456.  goto L252452;
}
procedure `java.lang.reflect.Type`[] `getActualTypeArguments`(`retrofit2.Utils$ParameterizedTypeImpl` v1 @kind this) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L252468.  v0:= v1.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L25246c.  call temp:= `clone`(v0) @signature `[Ljava/lang/reflect/Type;.clone:()Ljava/lang/Object;` @kind virtual;
  #L252472.  v0:= temp @kind object;
  #L252474.  v0:= (`java.lang.reflect.Type`[]) v0 @kind object;
  #L252478.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getOwnerType`(`retrofit2.Utils$ParameterizedTypeImpl` v1 @kind this) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.getOwnerType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25248c.  v0:= v1.`retrofit2.Utils$ParameterizedTypeImpl.ownerType` @type ^`java.lang.reflect.Type` @kind object;
  #L252490.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getRawType`(`retrofit2.Utils$ParameterizedTypeImpl` v1 @kind this) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.getRawType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2524a4.  v0:= v1.`retrofit2.Utils$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` @kind object;
  #L2524a8.  return v0 @kind object;
}
procedure `int` `hashCode`(`retrofit2.Utils$ParameterizedTypeImpl` v2 @kind this) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2524bc.  v0:= v2.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L2524c0.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L2524c6.  v0:= temp;
  #L2524c8.  v1:= v2.`retrofit2.Utils$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` @kind object;
  #L2524cc.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2524d2.  v1:= temp;
  #L2524d4.  v0:= v0 ^~ v1 @kind int;
  #L2524d6.  v1:= v2.`retrofit2.Utils$ParameterizedTypeImpl.ownerType` @type ^`java.lang.reflect.Type` @kind object;
  #L2524da.  call temp:= `hashCodeOrZero`(v1) @signature `Lretrofit2/Utils;.hashCodeOrZero:(Ljava/lang/Object;)I` @kind static;
  #L2524e0.  v1:= temp;
  #L2524e2.  v0:= v0 ^~ v1 @kind int;
  #L2524e4.  return v0;
}
procedure `java.lang.String` `toString`(`retrofit2.Utils$ParameterizedTypeImpl` v5 @kind this) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2524f8.  v1:= new `java.lang.StringBuilder`;
  #L2524fc.  v2:= v5.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L252500.  v2:= length @variable v2;
  #L252502.  v2:= v2 + 1;
  #L252506.  v2:= v2 * 30;
  #L25250a.  call `<init>`(v1, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L252510.  v2:= v5.`retrofit2.Utils$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` @kind object;
  #L252514.  call temp:= `typeToString`(v2) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L25251a.  v2:= temp @kind object;
  #L25251c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L252522.  v2:= v5.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L252526.  v2:= length @variable v2;
  #L252528.  if v2 != 0 then goto L252536;
  #L25252c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L252532.  v2:= temp @kind object;
  #L252534.  return v2 @kind object;
  #L252536.  v2:= "<" @kind object;
  #L25253a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L252540.  v2:= temp @kind object;
  #L252542.  v3:= v5.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L252546.  v4:= 0I;
  #L252548.  v3:= v3[v4] @kind object;
  #L25254c.  call temp:= `typeToString`(v3) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L252552.  v3:= temp @kind object;
  #L252554.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L25255a.  v0:= 1I;
  #L25255c.  v2:= v5.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L252560.  v2:= length @variable v2;
  #L252562.  if v0 >= v2 then goto L25258e;
  #L252566.  v2:= ", " @kind object;
  #L25256a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L252570.  v2:= temp @kind object;
  #L252572.  v3:= v5.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L252576.  v3:= v3[v0] @kind object;
  #L25257a.  call temp:= `typeToString`(v3) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L252580.  v3:= temp @kind object;
  #L252582.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L252588.  v0:= v0 + 1;
  #L25258c.  goto L25255c;
  #L25258e.  v2:= ">" @kind object;
  #L252592.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L252598.  v2:= temp @kind object;
  #L25259a.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2525a0.  v2:= temp @kind object;
  #L2525a2.  goto L252534;
}
