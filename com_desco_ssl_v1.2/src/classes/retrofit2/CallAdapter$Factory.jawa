record `retrofit2.CallAdapter$Factory` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `void` `<init>`(`retrofit2.CallAdapter$Factory` v0 @kind this) @signature `Lretrofit2/CallAdapter$Factory;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L24ea5c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L24ea62.  return @kind void;
}
procedure `java.lang.reflect.Type` `getParameterUpperBound`(`int` v1 @name `index`, `java.lang.reflect.ParameterizedType` v2 @kind object @name `type`) @signature `Lretrofit2/CallAdapter$Factory;.getParameterUpperBound:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @AccessFlag PROTECTED_STATIC {
    temp;
    v0;

  #L24ea74.  call temp:= `getParameterUpperBound`(v1, v2) @signature `Lretrofit2/Utils;.getParameterUpperBound:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L24ea7a.  v0:= temp @kind object;
  #L24ea7c.  return v0 @kind object;
}
procedure `java.lang.Class` `getRawType`(`java.lang.reflect.Type` v1 @kind object @name `type`) @signature `Lretrofit2/CallAdapter$Factory;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @AccessFlag PROTECTED_STATIC {
    temp;
    v0;

  #L24ea90.  call temp:= `getRawType`(v1) @signature `Lretrofit2/Utils;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L24ea96.  v0:= temp @kind object;
  #L24ea98.  return v0 @kind object;
}
procedure `retrofit2.CallAdapter` `get`(`java.lang.reflect.Type` v0 @kind object, `java.lang.annotation.Annotation`[] v1 @kind object, `retrofit2.Retrofit` v2 @kind object) @signature `Lretrofit2/CallAdapter$Factory;.get:(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;Lretrofit2/Retrofit;)Lretrofit2/CallAdapter;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
