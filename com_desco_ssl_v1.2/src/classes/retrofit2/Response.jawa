record `retrofit2.Response` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.Object` `retrofit2.Response.body` @AccessFlag PRIVATE_FINAL;
  `okhttp3.ResponseBody` `retrofit2.Response.errorBody` @AccessFlag PRIVATE_FINAL;
  `okhttp3.Response` `retrofit2.Response.rawResponse` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit2.Response` v0 @kind this, `okhttp3.Response` v1 @kind object @name `rawResponse`, `java.lang.Object` v2 @kind object, `okhttp3.ResponseBody` v3 @kind object @name `errorBody`) @signature `Lretrofit2/Response;.<init>:(Lokhttp3/Response;Ljava/lang/Object;Lokhttp3/ResponseBody;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L24f478.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L24f47e.  v0.`retrofit2.Response.rawResponse` @type ^`okhttp3.Response` := v1 @kind object;
  #L24f482.  v0.`retrofit2.Response.body` @type ^`java.lang.Object` := v2 @kind object;
  #L24f486.  v0.`retrofit2.Response.errorBody` @type ^`okhttp3.ResponseBody` := v3 @kind object;
  #L24f48a.  return @kind void;
}
procedure `retrofit2.Response` `error`(`int` v3 @name `code`, `okhttp3.ResponseBody` v4 @kind object @name `body`) @signature `Lretrofit2/Response;.error:(ILokhttp3/ResponseBody;)Lretrofit2/Response;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L24f49c.  v0:= 400I;
  #L24f4a0.  if v3 >= v0 then goto L24f4d6;
  #L24f4a4.  v0:= new `java.lang.IllegalArgumentException`;
  #L24f4a8.  v1:= new `java.lang.StringBuilder`;
  #L24f4ac.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24f4b2.  v2:= "code < 400: " @kind object;
  #L24f4b6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24f4bc.  v1:= temp @kind object;
  #L24f4be.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L24f4c4.  v1:= temp @kind object;
  #L24f4c6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24f4cc.  v1:= temp @kind object;
  #L24f4ce.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24f4d4.  throw v0;
  #L24f4d6.  v0:= new `okhttp3.Response$Builder`;
  #L24f4da.  call `<init>`(v0) @signature `Lokhttp3/Response$Builder;.<init>:()V` @kind direct;
  #L24f4e0.  call temp:= `code`(v0, v3) @signature `Lokhttp3/Response$Builder;.code:(I)Lokhttp3/Response$Builder;` @kind virtual;
  #L24f4e6.  v0:= temp @kind object;
  #L24f4e8.  v1:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L24f4ec.  call temp:= `protocol`(v0, v1) @signature `Lokhttp3/Response$Builder;.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @kind virtual;
  #L24f4f2.  v0:= temp @kind object;
  #L24f4f4.  v1:= new `okhttp3.Request$Builder`;
  #L24f4f8.  call `<init>`(v1) @signature `Lokhttp3/Request$Builder;.<init>:()V` @kind direct;
  #L24f4fe.  v2:= "http://localhost/" @kind object;
  #L24f502.  call temp:= `url`(v1, v2) @signature `Lokhttp3/Request$Builder;.url:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L24f508.  v1:= temp @kind object;
  #L24f50a.  call temp:= `build`(v1) @signature `Lokhttp3/Request$Builder;.build:()Lokhttp3/Request;` @kind virtual;
  #L24f510.  v1:= temp @kind object;
  #L24f512.  call temp:= `request`(v0, v1) @signature `Lokhttp3/Response$Builder;.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;` @kind virtual;
  #L24f518.  v0:= temp @kind object;
  #L24f51a.  call temp:= `build`(v0) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L24f520.  v0:= temp @kind object;
  #L24f522.  call temp:= `error`(v4, v0) @signature `Lretrofit2/Response;.error:(Lokhttp3/ResponseBody;Lokhttp3/Response;)Lretrofit2/Response;` @kind static;
  #L24f528.  v0:= temp @kind object;
  #L24f52a.  return v0 @kind object;
}
procedure `retrofit2.Response` `error`(`okhttp3.ResponseBody` v2 @kind object @name `body`, `okhttp3.Response` v3 @kind object @name `rawResponse`) @signature `Lretrofit2/Response;.error:(Lokhttp3/ResponseBody;Lokhttp3/Response;)Lretrofit2/Response;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L24f53c.  if v2 != 0 then goto L24f550;
  #L24f540.  v0:= new `java.lang.NullPointerException`;
  #L24f544.  v1:= "body == null" @kind object;
  #L24f548.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24f54e.  throw v0;
  #L24f550.  if v3 != 0 then goto L24f564;
  #L24f554.  v0:= new `java.lang.NullPointerException`;
  #L24f558.  v1:= "rawResponse == null" @kind object;
  #L24f55c.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24f562.  throw v0;
  #L24f564.  call temp:= `isSuccessful`(v3) @signature `Lokhttp3/Response;.isSuccessful:()Z` @kind virtual;
  #L24f56a.  v0:= temp;
  #L24f56c.  if v0 == 0 then goto L24f580;
  #L24f570.  v0:= new `java.lang.IllegalArgumentException`;
  #L24f574.  v1:= "rawResponse should not be successful response" @kind object;
  #L24f578.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24f57e.  throw v0;
  #L24f580.  v0:= new `retrofit2.Response`;
  #L24f584.  v1:= 0I;
  #L24f586.  call `<init>`(v0, v3, v1, v2) @signature `Lretrofit2/Response;.<init>:(Lokhttp3/Response;Ljava/lang/Object;Lokhttp3/ResponseBody;)V` @kind direct;
  #L24f58c.  return v0 @kind object;
}
procedure `retrofit2.Response` `success`(`java.lang.Object` v3 @kind object) @signature `Lretrofit2/Response;.success:(Ljava/lang/Object;)Lretrofit2/Response;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L24f5a0.  v0:= new `okhttp3.Response$Builder`;
  #L24f5a4.  call `<init>`(v0) @signature `Lokhttp3/Response$Builder;.<init>:()V` @kind direct;
  #L24f5aa.  v1:= 200I;
  #L24f5ae.  call temp:= `code`(v0, v1) @signature `Lokhttp3/Response$Builder;.code:(I)Lokhttp3/Response$Builder;` @kind virtual;
  #L24f5b4.  v0:= temp @kind object;
  #L24f5b6.  v1:= "OK" @kind object;
  #L24f5ba.  call temp:= `message`(v0, v1) @signature `Lokhttp3/Response$Builder;.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @kind virtual;
  #L24f5c0.  v0:= temp @kind object;
  #L24f5c2.  v1:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L24f5c6.  call temp:= `protocol`(v0, v1) @signature `Lokhttp3/Response$Builder;.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @kind virtual;
  #L24f5cc.  v0:= temp @kind object;
  #L24f5ce.  v1:= new `okhttp3.Request$Builder`;
  #L24f5d2.  call `<init>`(v1) @signature `Lokhttp3/Request$Builder;.<init>:()V` @kind direct;
  #L24f5d8.  v2:= "http://localhost/" @kind object;
  #L24f5dc.  call temp:= `url`(v1, v2) @signature `Lokhttp3/Request$Builder;.url:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L24f5e2.  v1:= temp @kind object;
  #L24f5e4.  call temp:= `build`(v1) @signature `Lokhttp3/Request$Builder;.build:()Lokhttp3/Request;` @kind virtual;
  #L24f5ea.  v1:= temp @kind object;
  #L24f5ec.  call temp:= `request`(v0, v1) @signature `Lokhttp3/Response$Builder;.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;` @kind virtual;
  #L24f5f2.  v0:= temp @kind object;
  #L24f5f4.  call temp:= `build`(v0) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L24f5fa.  v0:= temp @kind object;
  #L24f5fc.  call temp:= `success`(v3, v0) @signature `Lretrofit2/Response;.success:(Ljava/lang/Object;Lokhttp3/Response;)Lretrofit2/Response;` @kind static;
  #L24f602.  v0:= temp @kind object;
  #L24f604.  return v0 @kind object;
}
procedure `retrofit2.Response` `success`(`java.lang.Object` v3 @kind object, `okhttp3.Headers` v4 @kind object @name `headers`) @signature `Lretrofit2/Response;.success:(Ljava/lang/Object;Lokhttp3/Headers;)Lretrofit2/Response;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L24f618.  if v4 != 0 then goto L24f62c;
  #L24f61c.  v0:= new `java.lang.NullPointerException`;
  #L24f620.  v1:= "headers == null" @kind object;
  #L24f624.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24f62a.  throw v0;
  #L24f62c.  v0:= new `okhttp3.Response$Builder`;
  #L24f630.  call `<init>`(v0) @signature `Lokhttp3/Response$Builder;.<init>:()V` @kind direct;
  #L24f636.  v1:= 200I;
  #L24f63a.  call temp:= `code`(v0, v1) @signature `Lokhttp3/Response$Builder;.code:(I)Lokhttp3/Response$Builder;` @kind virtual;
  #L24f640.  v0:= temp @kind object;
  #L24f642.  v1:= "OK" @kind object;
  #L24f646.  call temp:= `message`(v0, v1) @signature `Lokhttp3/Response$Builder;.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @kind virtual;
  #L24f64c.  v0:= temp @kind object;
  #L24f64e.  v1:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L24f652.  call temp:= `protocol`(v0, v1) @signature `Lokhttp3/Response$Builder;.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @kind virtual;
  #L24f658.  v0:= temp @kind object;
  #L24f65a.  call temp:= `headers`(v0, v4) @signature `Lokhttp3/Response$Builder;.headers:(Lokhttp3/Headers;)Lokhttp3/Response$Builder;` @kind virtual;
  #L24f660.  v0:= temp @kind object;
  #L24f662.  v1:= new `okhttp3.Request$Builder`;
  #L24f666.  call `<init>`(v1) @signature `Lokhttp3/Request$Builder;.<init>:()V` @kind direct;
  #L24f66c.  v2:= "http://localhost/" @kind object;
  #L24f670.  call temp:= `url`(v1, v2) @signature `Lokhttp3/Request$Builder;.url:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L24f676.  v1:= temp @kind object;
  #L24f678.  call temp:= `build`(v1) @signature `Lokhttp3/Request$Builder;.build:()Lokhttp3/Request;` @kind virtual;
  #L24f67e.  v1:= temp @kind object;
  #L24f680.  call temp:= `request`(v0, v1) @signature `Lokhttp3/Response$Builder;.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;` @kind virtual;
  #L24f686.  v0:= temp @kind object;
  #L24f688.  call temp:= `build`(v0) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L24f68e.  v0:= temp @kind object;
  #L24f690.  call temp:= `success`(v3, v0) @signature `Lretrofit2/Response;.success:(Ljava/lang/Object;Lokhttp3/Response;)Lretrofit2/Response;` @kind static;
  #L24f696.  v0:= temp @kind object;
  #L24f698.  return v0 @kind object;
}
procedure `retrofit2.Response` `success`(`java.lang.Object` v2 @kind object, `okhttp3.Response` v3 @kind object @name `rawResponse`) @signature `Lretrofit2/Response;.success:(Ljava/lang/Object;Lokhttp3/Response;)Lretrofit2/Response;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L24f6ac.  if v3 != 0 then goto L24f6c0;
  #L24f6b0.  v0:= new `java.lang.NullPointerException`;
  #L24f6b4.  v1:= "rawResponse == null" @kind object;
  #L24f6b8.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24f6be.  throw v0;
  #L24f6c0.  call temp:= `isSuccessful`(v3) @signature `Lokhttp3/Response;.isSuccessful:()Z` @kind virtual;
  #L24f6c6.  v0:= temp;
  #L24f6c8.  if v0 != 0 then goto L24f6dc;
  #L24f6cc.  v0:= new `java.lang.IllegalArgumentException`;
  #L24f6d0.  v1:= "rawResponse must be successful response" @kind object;
  #L24f6d4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24f6da.  throw v0;
  #L24f6dc.  v0:= new `retrofit2.Response`;
  #L24f6e0.  v1:= 0I;
  #L24f6e2.  call `<init>`(v0, v3, v2, v1) @signature `Lretrofit2/Response;.<init>:(Lokhttp3/Response;Ljava/lang/Object;Lokhttp3/ResponseBody;)V` @kind direct;
  #L24f6e8.  return v0 @kind object;
}
procedure `java.lang.Object` `body`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.body:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24f6fc.  v0:= v1.`retrofit2.Response.body` @type ^`java.lang.Object` @kind object;
  #L24f700.  return v0 @kind object;
}
procedure `int` `code`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.code:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24f714.  v0:= v1.`retrofit2.Response.rawResponse` @type ^`okhttp3.Response` @kind object;
  #L24f718.  call temp:= `code`(v0) @signature `Lokhttp3/Response;.code:()I` @kind virtual;
  #L24f71e.  v0:= temp;
  #L24f720.  return v0;
}
procedure `okhttp3.ResponseBody` `errorBody`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.errorBody:()Lokhttp3/ResponseBody;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24f734.  v0:= v1.`retrofit2.Response.errorBody` @type ^`okhttp3.ResponseBody` @kind object;
  #L24f738.  return v0 @kind object;
}
procedure `okhttp3.Headers` `headers`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.headers:()Lokhttp3/Headers;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24f74c.  v0:= v1.`retrofit2.Response.rawResponse` @type ^`okhttp3.Response` @kind object;
  #L24f750.  call temp:= `headers`(v0) @signature `Lokhttp3/Response;.headers:()Lokhttp3/Headers;` @kind virtual;
  #L24f756.  v0:= temp @kind object;
  #L24f758.  return v0 @kind object;
}
procedure `boolean` `isSuccessful`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.isSuccessful:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24f76c.  v0:= v1.`retrofit2.Response.rawResponse` @type ^`okhttp3.Response` @kind object;
  #L24f770.  call temp:= `isSuccessful`(v0) @signature `Lokhttp3/Response;.isSuccessful:()Z` @kind virtual;
  #L24f776.  v0:= temp;
  #L24f778.  return v0;
}
procedure `java.lang.String` `message`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.message:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24f78c.  v0:= v1.`retrofit2.Response.rawResponse` @type ^`okhttp3.Response` @kind object;
  #L24f790.  call temp:= `message`(v0) @signature `Lokhttp3/Response;.message:()Ljava/lang/String;` @kind virtual;
  #L24f796.  v0:= temp @kind object;
  #L24f798.  return v0 @kind object;
}
procedure `okhttp3.Response` `raw`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.raw:()Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24f7ac.  v0:= v1.`retrofit2.Response.rawResponse` @type ^`okhttp3.Response` @kind object;
  #L24f7b0.  return v0 @kind object;
}
