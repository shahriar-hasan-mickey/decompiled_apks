record `retrofit2.OkHttpCall` @kind class @AccessFlag FINAL extends `retrofit2.Call` @kind interface {
  `java.lang.Object`[] `retrofit2.OkHttpCall.args` @AccessFlag PRIVATE_FINAL;
  `boolean` `retrofit2.OkHttpCall.canceled` @AccessFlag PRIVATE_VOLATILE;
  `java.lang.Throwable` `retrofit2.OkHttpCall.creationFailure` @AccessFlag PRIVATE;
  `boolean` `retrofit2.OkHttpCall.executed` @AccessFlag PRIVATE;
  `okhttp3.Call` `retrofit2.OkHttpCall.rawCall` @AccessFlag PRIVATE;
  `retrofit2.ServiceMethod` `retrofit2.OkHttpCall.serviceMethod` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit2.OkHttpCall` v0 @kind this, `retrofit2.ServiceMethod` v1 @kind object, `java.lang.Object`[] v2 @kind object @name `args`) @signature `Lretrofit2/OkHttpCall;.<init>:(Lretrofit2/ServiceMethod;[Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L3133f0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3133f6.  v0.`retrofit2.OkHttpCall.serviceMethod` @type ^`retrofit2.ServiceMethod` := v1 @kind object;
  #L3133fa.  v0.`retrofit2.OkHttpCall.args` @type ^`java.lang.Object`[] := v2 @kind object;
  #L3133fe.  return @kind void;
}
procedure `okhttp3.Call` `createRawCall`(`retrofit2.OkHttpCall` v4 @kind this) @signature `Lretrofit2/OkHttpCall;.createRawCall:()Lokhttp3/Call;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L313410.  v2:= v4.`retrofit2.OkHttpCall.serviceMethod` @type ^`retrofit2.ServiceMethod` @kind object;
  #L313414.  v3:= v4.`retrofit2.OkHttpCall.args` @type ^`java.lang.Object`[] @kind object;
  #L313418.  call temp:= `toRequest`(v2, v3) @signature `Lretrofit2/ServiceMethod;.toRequest:([Ljava/lang/Object;)Lokhttp3/Request;` @kind virtual;
  #L31341e.  v1:= temp @kind object;
  #L313420.  v2:= v4.`retrofit2.OkHttpCall.serviceMethod` @type ^`retrofit2.ServiceMethod` @kind object;
  #L313424.  v2:= v2.`retrofit2.ServiceMethod.callFactory` @type ^`okhttp3.Call$Factory` @kind object;
  #L313428.  call temp:= `newCall`(v2, v1) @signature `Lokhttp3/Call$Factory;.newCall:(Lokhttp3/Request;)Lokhttp3/Call;` @kind interface;
  #L31342e.  v0:= temp @kind object;
  #L313430.  if v0 != 0 then goto L313444;
  #L313434.  v2:= new `java.lang.NullPointerException`;
  #L313438.  v3:= "Call.Factory returned null." @kind object;
  #L31343c.  call `<init>`(v2, v3) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L313442.  throw v2;
  #L313444.  return v0 @kind object;
}
procedure `void` `cancel`(`retrofit2.OkHttpCall` v2 @kind this) @signature `Lretrofit2/OkHttpCall;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L313458.  v1:= 1I;
  #L31345a.  v2.`retrofit2.OkHttpCall.canceled` @type ^`boolean` := v1 @kind boolean;
  #L31345e.  @monitorenter v2
  #L313460.  v0:= v2.`retrofit2.OkHttpCall.rawCall` @type ^`okhttp3.Call` @kind object;
  #L313464.  @monitorexit v2
  #L313466.  if v0 == 0 then goto L313470;
  #L31346a.  call `cancel`(v0) @signature `Lokhttp3/Call;.cancel:()V` @kind interface;
  #L313470.  return @kind void;
  #L313472.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L313474.  @monitorexit v2
  #L313476.  throw v1;
  catch `java.lang.Throwable` @[L313460..L313466] goto L313472;
  catch `java.lang.Throwable` @[L313474..L313476] goto L313472;
}
procedure `java.lang.Object` `clone`(`retrofit2.OkHttpCall` v1 @kind this) @signature `Lretrofit2/OkHttpCall;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L31349c.  call temp:= `clone`(v1) @signature `Lretrofit2/OkHttpCall;.clone:()Lretrofit2/OkHttpCall;` @kind virtual;
  #L3134a2.  v0:= temp @kind object;
  #L3134a4.  return v0 @kind object;
}
procedure `retrofit2.Call` `clone`(`retrofit2.OkHttpCall` v1 @kind this) @signature `Lretrofit2/OkHttpCall;.clone:()Lretrofit2/Call;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L3134b8.  call temp:= `clone`(v1) @signature `Lretrofit2/OkHttpCall;.clone:()Lretrofit2/OkHttpCall;` @kind virtual;
  #L3134be.  v0:= temp @kind object;
  #L3134c0.  return v0 @kind object;
}
procedure `retrofit2.OkHttpCall` `clone`(`retrofit2.OkHttpCall` v3 @kind this) @signature `Lretrofit2/OkHttpCall;.clone:()Lretrofit2/OkHttpCall;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3134d4.  v0:= new `retrofit2.OkHttpCall`;
  #L3134d8.  v1:= v3.`retrofit2.OkHttpCall.serviceMethod` @type ^`retrofit2.ServiceMethod` @kind object;
  #L3134dc.  v2:= v3.`retrofit2.OkHttpCall.args` @type ^`java.lang.Object`[] @kind object;
  #L3134e0.  call `<init>`(v0, v1, v2) @signature `Lretrofit2/OkHttpCall;.<init>:(Lretrofit2/ServiceMethod;[Ljava/lang/Object;)V` @kind direct;
  #L3134e6.  return v0 @kind object;
}
procedure `void` `enqueue`(`retrofit2.OkHttpCall` v6 @kind this, `retrofit2.Callback` v7 @kind object) @signature `Lretrofit2/OkHttpCall;.enqueue:(Lretrofit2/Callback;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3134f8.  if v7 != 0 then goto L31350c;
  #L3134fc.  v4:= new `java.lang.NullPointerException`;
  #L313500.  v5:= "callback == null" @kind object;
  #L313504.  call `<init>`(v4, v5) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L31350a.  throw v4;
  #L31350c.  @monitorenter v6
  #L31350e.  v4:= v6.`retrofit2.OkHttpCall.executed` @type ^`boolean` @kind boolean;
  #L313512.  if v4 == 0 then goto L31352c;
  #L313516.  v4:= new `java.lang.IllegalStateException`;
  #L31351a.  v5:= "Already executed." @kind object;
  #L31351e.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L313524.  throw v4;
  #L313526.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L313528.  @monitorexit v6
  #L31352a.  throw v4;
  #L31352c.  v4:= 1I;
  #L31352e.  v6.`retrofit2.OkHttpCall.executed` @type ^`boolean` := v4 @kind boolean;
  #L313532.  v0:= v6.`retrofit2.OkHttpCall.rawCall` @type ^`okhttp3.Call` @kind object;
  #L313536.  v2:= v6.`retrofit2.OkHttpCall.creationFailure` @type ^`java.lang.Throwable` @kind object;
  #L31353a.  if v0 != 0 then goto L313550;
  #L31353e.  if v2 != 0 then goto L313550;
  #L313542.  call temp:= `createRawCall`(v6) @signature `Lretrofit2/OkHttpCall;.createRawCall:()Lokhttp3/Call;` @kind direct;
  #L313548.  v1:= temp @kind object;
  #L31354a.  v6.`retrofit2.OkHttpCall.rawCall` @type ^`okhttp3.Call` := v1 @kind object;
  #L31354e.  v0:= v1 @kind object;
  #L313550.  @monitorexit v6
  #L313552.  if v2 == 0 then goto L313568;
  #L313556.  call `onFailure`(v7, v6, v2) @signature `Lretrofit2/Callback;.onFailure:(Lretrofit2/Call;Ljava/lang/Throwable;)V` @kind interface;
  #L31355c.  return @kind void;
  #L31355e.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L313560.  v6.`retrofit2.OkHttpCall.creationFailure` @type ^`java.lang.Throwable` := v3 @kind object;
  #L313564.  v2:= v3 @kind object;
  #L313566.  goto L313550;
  #L313568.  v4:= v6.`retrofit2.OkHttpCall.canceled` @type ^`boolean` @kind boolean;
  #L31356c.  if v4 == 0 then goto L313576;
  #L313570.  call `cancel`(v0) @signature `Lokhttp3/Call;.cancel:()V` @kind interface;
  #L313576.  v4:= new `retrofit2.OkHttpCall$1`;
  #L31357a.  call `<init>`(v4, v6, v7) @signature `Lretrofit2/OkHttpCall$1;.<init>:(Lretrofit2/OkHttpCall;Lretrofit2/Callback;)V` @kind direct;
  #L313580.  call `enqueue`(v0, v4) @signature `Lokhttp3/Call;.enqueue:(Lokhttp3/Callback;)V` @kind interface;
  #L313586.  goto L31355c;
  catch `java.lang.Throwable` @[L31350e..L31352a] goto L313526;
  catch `java.lang.Throwable` @[L31352e..L31353a] goto L313526;
  catch `java.lang.Throwable` @[L313542..L31354e] goto L31355e;
  catch `java.lang.Throwable` @[L313542..L31354e] goto L313526;
  catch `java.lang.Throwable` @[L313550..L313552] goto L313526;
  catch `java.lang.Throwable` @[L313560..L313564] goto L313526;
}
procedure `retrofit2.Response` `execute`(`retrofit2.OkHttpCall` v4 @kind this) @signature `Lretrofit2/OkHttpCall;.execute:()Lretrofit2/Response;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3135c8.  @monitorenter v4
  #L3135ca.  v2:= v4.`retrofit2.OkHttpCall.executed` @type ^`boolean` @kind boolean;
  #L3135ce.  if v2 == 0 then goto L3135e8;
  #L3135d2.  v2:= new `java.lang.IllegalStateException`;
  #L3135d6.  v3:= "Already executed." @kind object;
  #L3135da.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3135e0.  throw v2;
  #L3135e2.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3135e4.  @monitorexit v4
  #L3135e6.  throw v2;
  #L3135e8.  v2:= 1I;
  #L3135ea.  v4.`retrofit2.OkHttpCall.executed` @type ^`boolean` := v2 @kind boolean;
  #L3135ee.  v2:= v4.`retrofit2.OkHttpCall.creationFailure` @type ^`java.lang.Throwable` @kind object;
  #L3135f2.  if v2 == 0 then goto L313616;
  #L3135f6.  v2:= v4.`retrofit2.OkHttpCall.creationFailure` @type ^`java.lang.Throwable` @kind object;
  #L3135fa.  v2:= instanceof @variable v2 @type ^`java.io.IOException` @kind boolean;
  #L3135fe.  if v2 == 0 then goto L31360c;
  #L313602.  v2:= v4.`retrofit2.OkHttpCall.creationFailure` @type ^`java.lang.Throwable` @kind object;
  #L313606.  v2:= (`java.io.IOException`) v2 @kind object;
  #L31360a.  throw v2;
  #L31360c.  v2:= v4.`retrofit2.OkHttpCall.creationFailure` @type ^`java.lang.Throwable` @kind object;
  #L313610.  v2:= (`java.lang.RuntimeException`) v2 @kind object;
  #L313614.  throw v2;
  #L313616.  v0:= v4.`retrofit2.OkHttpCall.rawCall` @type ^`okhttp3.Call` @kind object;
  #L31361a.  if v0 != 0 then goto L31362a;
  #L31361e.  call temp:= `createRawCall`(v4) @signature `Lretrofit2/OkHttpCall;.createRawCall:()Lokhttp3/Call;` @kind direct;
  #L313624.  v0:= temp @kind object;
  #L313626.  v4.`retrofit2.OkHttpCall.rawCall` @type ^`okhttp3.Call` := v0 @kind object;
  #L31362a.  @monitorexit v4
  #L31362c.  v2:= v4.`retrofit2.OkHttpCall.canceled` @type ^`boolean` @kind boolean;
  #L313630.  if v2 == 0 then goto L31363a;
  #L313634.  call `cancel`(v0) @signature `Lokhttp3/Call;.cancel:()V` @kind interface;
  #L31363a.  call temp:= `execute`(v0) @signature `Lokhttp3/Call;.execute:()Lokhttp3/Response;` @kind interface;
  #L313640.  v2:= temp @kind object;
  #L313642.  call temp:= `parseResponse`(v4, v2) @signature `Lretrofit2/OkHttpCall;.parseResponse:(Lokhttp3/Response;)Lretrofit2/Response;` @kind virtual;
  #L313648.  v2:= temp @kind object;
  #L31364a.  return v2 @kind object;
  #L31364c.  v2:= Exception @type ^`java.io.IOException` @kind object;
  #L31364e.  v1:= v2 @kind object;
  #L313650.  v4.`retrofit2.OkHttpCall.creationFailure` @type ^`java.lang.Throwable` := v1 @kind object;
  #L313654.  throw v1;
  #L313656.  v2:= Exception @type ^`java.lang.RuntimeException` @kind object;
  #L313658.  v1:= v2 @kind object;
  #L31365a.  goto L313650;
  catch `java.lang.Throwable` @[L3135ca..L3135e6] goto L3135e2;
  catch `java.lang.Throwable` @[L3135ea..L31361a] goto L3135e2;
  catch `java.io.IOException` @[L31361e..L31362a] goto L31364c;
  catch `java.lang.RuntimeException` @[L31361e..L31362a] goto L313656;
  catch `java.lang.Throwable` @[L31361e..L31362a] goto L3135e2;
  catch `java.lang.Throwable` @[L31362a..L31362c] goto L3135e2;
  catch `java.lang.Throwable` @[L313650..L313656] goto L3135e2;
}
procedure `boolean` `isCanceled`(`retrofit2.OkHttpCall` v1 @kind this) @signature `Lretrofit2/OkHttpCall;.isCanceled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3136a0.  v0:= v1.`retrofit2.OkHttpCall.canceled` @type ^`boolean` @kind boolean;
  #L3136a4.  return v0;
}
procedure `boolean` `isExecuted`(`retrofit2.OkHttpCall` v1 @kind this) @signature `Lretrofit2/OkHttpCall;.isExecuted:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3136b8.  @monitorenter v1
  #L3136ba.  v0:= v1.`retrofit2.OkHttpCall.executed` @type ^`boolean` @kind boolean;
  #L3136be.  @monitorexit v1
  #L3136c0.  return v0;
  #L3136c2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L3136c4.  @monitorexit v1
  #L3136c6.  throw v0;
  catch `java.lang.Throwable` @[L3136ba..L3136be] goto L3136c2;
}
procedure `retrofit2.Response` `parseResponse`(`retrofit2.OkHttpCall` v12 @kind this, `okhttp3.Response` v13 @kind object @name `rawResponse`) @signature `Lretrofit2/OkHttpCall;.parseResponse:(Lokhttp3/Response;)Lretrofit2/Response;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L3136e4.  call temp:= `body`(v13) @signature `Lokhttp3/Response;.body:()Lokhttp3/ResponseBody;` @kind virtual;
  #L3136ea.  v5:= temp @kind object;
  #L3136ec.  call temp:= `newBuilder`(v13) @signature `Lokhttp3/Response;.newBuilder:()Lokhttp3/Response$Builder;` @kind virtual;
  #L3136f2.  v6:= temp @kind object;
  #L3136f4.  v7:= new `retrofit2.OkHttpCall$NoContentResponseBody`;
  #L3136f8.  call temp:= `contentType`(v5) @signature `Lokhttp3/ResponseBody;.contentType:()Lokhttp3/MediaType;` @kind virtual;
  #L3136fe.  v8:= temp @kind object;
  #L313700.  call temp:= `contentLength`(v5) @signature `Lokhttp3/ResponseBody;.contentLength:()J` @kind virtual;
  #L313706.  v10:= temp @kind wide;
  #L313708.  call `<init>`(v7, v8, v10) @signature `Lretrofit2/OkHttpCall$NoContentResponseBody;.<init>:(Lokhttp3/MediaType;J)V` @kind direct;
  #L31370e.  call temp:= `body`(v6, v7) @signature `Lokhttp3/Response$Builder;.body:(Lokhttp3/ResponseBody;)Lokhttp3/Response$Builder;` @kind virtual;
  #L313714.  v6:= temp @kind object;
  #L313716.  call temp:= `build`(v6) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L31371c.  v13:= temp @kind object;
  #L31371e.  call temp:= `code`(v13) @signature `Lokhttp3/Response;.code:()I` @kind virtual;
  #L313724.  v3:= temp;
  #L313726.  v6:= 200I;
  #L31372a.  if v3 < v6 then goto L313736;
  #L31372e.  v6:= 300I;
  #L313732.  if v3 < v6 then goto L313758;
  #L313736.  call temp:= `buffer`(v5) @signature `Lretrofit2/Utils;.buffer:(Lokhttp3/ResponseBody;)Lokhttp3/ResponseBody;` @kind static;
  #L31373c.  v1:= temp @kind object;
  #L31373e.  call temp:= `error`(v1, v13) @signature `Lretrofit2/Response;.error:(Lokhttp3/ResponseBody;Lokhttp3/Response;)Lretrofit2/Response;` @kind static;
  #L313744.  v6:= temp @kind object;
  #L313746.  call `close`(v5) @signature `Lokhttp3/ResponseBody;.close:()V` @kind virtual;
  #L31374c.  return v6 @kind object;
  #L31374e.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L313750.  call `close`(v5) @signature `Lokhttp3/ResponseBody;.close:()V` @kind virtual;
  #L313756.  throw v6;
  #L313758.  v6:= 204I;
  #L31375c.  if v3 == v6 then goto L313768;
  #L313760.  v6:= 205I;
  #L313764.  if v3 != v6 then goto L313774;
  #L313768.  v6:= 0I;
  #L31376a.  call temp:= `success`(v6, v13) @signature `Lretrofit2/Response;.success:(Ljava/lang/Object;Lokhttp3/Response;)Lretrofit2/Response;` @kind static;
  #L313770.  v6:= temp @kind object;
  #L313772.  goto L31374c;
  #L313774.  v2:= new `retrofit2.OkHttpCall$ExceptionCatchingRequestBody`;
  #L313778.  call `<init>`(v2, v5) @signature `Lretrofit2/OkHttpCall$ExceptionCatchingRequestBody;.<init>:(Lokhttp3/ResponseBody;)V` @kind direct;
  #L31377e.  v6:= v12.`retrofit2.OkHttpCall.serviceMethod` @type ^`retrofit2.ServiceMethod` @kind object;
  #L313782.  call temp:= `toResponse`(v6, v2) @signature `Lretrofit2/ServiceMethod;.toResponse:(Lokhttp3/ResponseBody;)Ljava/lang/Object;` @kind virtual;
  #L313788.  v0:= temp @kind object;
  #L31378a.  call temp:= `success`(v0, v13) @signature `Lretrofit2/Response;.success:(Ljava/lang/Object;Lokhttp3/Response;)Lretrofit2/Response;` @kind static;
  #L313790.  v6:= temp @kind object;
  #L313792.  goto L31374c;
  #L313794.  v4:= Exception @type ^`java.lang.RuntimeException` @kind object;
  #L313796.  call `throwIfCaught`(v2) @signature `Lretrofit2/OkHttpCall$ExceptionCatchingRequestBody;.throwIfCaught:()V` @kind virtual;
  #L31379c.  throw v4;
  catch `java.lang.Throwable` @[L313736..L313744] goto L31374e;
  catch `java.lang.RuntimeException` @[L31377e..L313790] goto L313794;
}
procedure `okhttp3.Request` `request`(`retrofit2.OkHttpCall` v5 @kind this) @signature `Lretrofit2/OkHttpCall;.request:()Lokhttp3/Request;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3137c8.  @monitorenter v5
  #L3137ca.  v0:= v5.`retrofit2.OkHttpCall.rawCall` @type ^`okhttp3.Call` @kind object;
  #L3137ce.  if v0 == 0 then goto L3137de;
  #L3137d2.  call temp:= `request`(v0) @signature `Lokhttp3/Call;.request:()Lokhttp3/Request;` @kind interface;
  #L3137d8.  v2:= temp @kind object;
  #L3137da.  @monitorexit v5
  #L3137dc.  return v2 @kind object;
  #L3137de.  v2:= v5.`retrofit2.OkHttpCall.creationFailure` @type ^`java.lang.Throwable` @kind object;
  #L3137e2.  if v2 == 0 then goto L313816;
  #L3137e6.  v2:= v5.`retrofit2.OkHttpCall.creationFailure` @type ^`java.lang.Throwable` @kind object;
  #L3137ea.  v2:= instanceof @variable v2 @type ^`java.io.IOException` @kind boolean;
  #L3137ee.  if v2 == 0 then goto L31380c;
  #L3137f2.  v2:= new `java.lang.RuntimeException`;
  #L3137f6.  v3:= "Unable to create request." @kind object;
  #L3137fa.  v4:= v5.`retrofit2.OkHttpCall.creationFailure` @type ^`java.lang.Throwable` @kind object;
  #L3137fe.  call `<init>`(v2, v3, v4) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L313804.  throw v2;
  #L313806.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L313808.  @monitorexit v5
  #L31380a.  throw v2;
  #L31380c.  v2:= v5.`retrofit2.OkHttpCall.creationFailure` @type ^`java.lang.Throwable` @kind object;
  #L313810.  v2:= (`java.lang.RuntimeException`) v2 @kind object;
  #L313814.  throw v2;
  #L313816.  call temp:= `createRawCall`(v5) @signature `Lretrofit2/OkHttpCall;.createRawCall:()Lokhttp3/Call;` @kind direct;
  #L31381c.  v2:= temp @kind object;
  #L31381e.  v5.`retrofit2.OkHttpCall.rawCall` @type ^`okhttp3.Call` := v2 @kind object;
  #L313822.  call temp:= `request`(v2) @signature `Lokhttp3/Call;.request:()Lokhttp3/Request;` @kind interface;
  #L313828.  v2:= temp @kind object;
  #L31382a.  goto L3137da;
  #L31382c.  v1:= Exception @type ^`java.lang.RuntimeException` @kind object;
  #L31382e.  v5.`retrofit2.OkHttpCall.creationFailure` @type ^`java.lang.Throwable` := v1 @kind object;
  #L313832.  throw v1;
  #L313834.  v1:= Exception @type ^`java.io.IOException` @kind object;
  #L313836.  v5.`retrofit2.OkHttpCall.creationFailure` @type ^`java.lang.Throwable` := v1 @kind object;
  #L31383a.  v2:= new `java.lang.RuntimeException`;
  #L31383e.  v3:= "Unable to create request." @kind object;
  #L313842.  call `<init>`(v2, v3, v1) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L313848.  throw v2;
  catch `java.lang.Throwable` @[L3137ca..L3137d8] goto L313806;
  catch `java.lang.Throwable` @[L3137de..L313806] goto L313806;
  catch `java.lang.Throwable` @[L31380c..L313816] goto L313806;
  catch `java.lang.RuntimeException` @[L313816..L313828] goto L31382c;
  catch `java.io.IOException` @[L313816..L313828] goto L313834;
  catch `java.lang.Throwable` @[L313816..L313828] goto L313806;
  catch `java.lang.Throwable` @[L31382e..L31384a] goto L313806;
}
