record `retrofit2.Utils` @kind class @AccessFlag FINAL {
}
global `java.lang.reflect.Type`[] `@@retrofit2.Utils.EMPTY_TYPE_ARRAY` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lretrofit2/Utils;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2527c8.  v0:= 0I;
  #L2527ca.  v0:= new `java.lang.reflect.Type`[v0];
  #L2527ce.  `@@retrofit2.Utils.EMPTY_TYPE_ARRAY` @type ^`java.lang.reflect.Type`[] := v0 @kind object;
  #L2527d2.  return @kind void;
}
procedure `void` `<init>`(`retrofit2.Utils` v0 @kind this) @signature `Lretrofit2/Utils;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L2527e4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2527ea.  return @kind void;
}
procedure `okhttp3.ResponseBody` `buffer`(`okhttp3.ResponseBody` v4 @kind object @name `body`) @signature `Lretrofit2/Utils;.buffer:(Lokhttp3/ResponseBody;)Lokhttp3/ResponseBody;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2527fc.  v0:= new `okio.Buffer`;
  #L252800.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L252806.  call temp:= `source`(v4) @signature `Lokhttp3/ResponseBody;.source:()Lokio/BufferedSource;` @kind virtual;
  #L25280c.  v1:= temp @kind object;
  #L25280e.  call temp:= `readAll`(v1, v0) @signature `Lokio/BufferedSource;.readAll:(Lokio/Sink;)J` @kind interface;
  #L252814.  call temp:= `contentType`(v4) @signature `Lokhttp3/ResponseBody;.contentType:()Lokhttp3/MediaType;` @kind virtual;
  #L25281a.  v1:= temp @kind object;
  #L25281c.  call temp:= `contentLength`(v4) @signature `Lokhttp3/ResponseBody;.contentLength:()J` @kind virtual;
  #L252822.  v2:= temp @kind wide;
  #L252824.  call temp:= `create`(v1, v2, v0) @signature `Lokhttp3/ResponseBody;.create:(Lokhttp3/MediaType;JLokio/BufferedSource;)Lokhttp3/ResponseBody;` @kind static;
  #L25282a.  v1:= temp @kind object;
  #L25282c.  return v1 @kind object;
}
procedure `java.lang.Object` `checkNotNull`(`java.lang.Object` v1 @kind object, `java.lang.String` v2 @kind object @name `message`) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag STATIC {
    temp;
    v0;

  #L252840.  if v1 != 0 then goto L252850;
  #L252844.  v0:= new `java.lang.NullPointerException`;
  #L252848.  call `<init>`(v0, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L25284e.  throw v0;
  #L252850.  return v1 @kind object;
}
procedure `void` `checkNotPrimitive`(`java.lang.reflect.Type` v1 @kind object @name `type`) @signature `Lretrofit2/Utils;.checkNotPrimitive:(Ljava/lang/reflect/Type;)V` @AccessFlag STATIC {
    temp;
    v0;

  #L252864.  v0:= instanceof @variable v1 @type ^`java.lang.Class` @kind boolean;
  #L252868.  if v0 == 0 then goto L252888;
  #L25286c.  v1:= (`java.lang.Class`) v1 @kind object;
  #L252870.  call temp:= `isPrimitive`(v1) @signature `Ljava/lang/Class;.isPrimitive:()Z` @kind virtual;
  #L252876.  v0:= temp;
  #L252878.  if v0 == 0 then goto L252888;
  #L25287c.  v0:= new `java.lang.IllegalArgumentException`;
  #L252880.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L252886.  throw v0;
  #L252888.  return @kind void;
}
procedure `java.lang.Class` `declaringClassOf`(`java.lang.reflect.TypeVariable` v2 @kind object) @signature `Lretrofit2/Utils;.declaringClassOf:(Ljava/lang/reflect/TypeVariable;)Ljava/lang/Class;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L25289c.  call temp:= `getGenericDeclaration`(v2) @signature `Ljava/lang/reflect/TypeVariable;.getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;` @kind interface;
  #L2528a2.  v0:= temp @kind object;
  #L2528a4.  v1:= instanceof @variable v0 @type ^`java.lang.Class` @kind boolean;
  #L2528a8.  if v1 == 0 then goto L2528b2;
  #L2528ac.  v0:= (`java.lang.Class`) v0 @kind object;
  #L2528b0.  return v0 @kind object;
  #L2528b2.  v0:= 0I;
  #L2528b4.  goto L2528b0;
}
procedure `boolean` `equal`(`java.lang.Object` v1 @kind object @name `a`, `java.lang.Object` v2 @kind object @name `b`) @signature `Lretrofit2/Utils;.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L2528c8.  if v1 == v2 then goto L2528dc;
  #L2528cc.  if v1 == 0 then goto L2528e0;
  #L2528d0.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2528d6.  v0:= temp;
  #L2528d8.  if v0 == 0 then goto L2528e0;
  #L2528dc.  v0:= 1I;
  #L2528de.  return v0;
  #L2528e0.  v0:= 0I;
  #L2528e2.  goto L2528de;
}
procedure `boolean` `equals`(`java.lang.reflect.Type` v12 @kind object @name `a`, `java.lang.reflect.Type` v13 @kind object @name `b`) @signature `Lretrofit2/Utils;.equals:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L2528f4.  v8:= 1I;
  #L2528f6.  v9:= 0I;
  #L2528f8.  if v12 != v13 then goto L252900;
  #L2528fc.  v9:= v8;
  #L2528fe.  return v9;
  #L252900.  v10:= instanceof @variable v12 @type ^`java.lang.Class` @kind boolean;
  #L252904.  if v10 == 0 then goto L252912;
  #L252908.  call temp:= `equals`(v12, v13) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L25290e.  v9:= temp;
  #L252910.  goto L2528fe;
  #L252912.  v10:= instanceof @variable v12 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L252916.  if v10 == 0 then goto L25298a;
  #L25291a.  v10:= instanceof @variable v13 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L25291e.  if v10 == 0 then goto L2528fe;
  #L252922.  v2:= v12 @kind object;
  #L252924.  v2:= (`java.lang.reflect.ParameterizedType`) v2 @kind object;
  #L252928.  v3:= v13 @kind object;
  #L25292a.  v3:= (`java.lang.reflect.ParameterizedType`) v3 @kind object;
  #L25292e.  call temp:= `getOwnerType`(v2) @signature `Ljava/lang/reflect/ParameterizedType;.getOwnerType:()Ljava/lang/reflect/Type;` @kind interface;
  #L252934.  v10:= temp @kind object;
  #L252936.  call temp:= `getOwnerType`(v3) @signature `Ljava/lang/reflect/ParameterizedType;.getOwnerType:()Ljava/lang/reflect/Type;` @kind interface;
  #L25293c.  v11:= temp @kind object;
  #L25293e.  call temp:= `equal`(v10, v11) @signature `Lretrofit2/Utils;.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L252944.  v10:= temp;
  #L252946.  if v10 == 0 then goto L252986;
  #L25294a.  call temp:= `getRawType`(v2) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L252950.  v10:= temp @kind object;
  #L252952.  call temp:= `getRawType`(v3) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L252958.  v11:= temp @kind object;
  #L25295a.  call temp:= `equals`(v10, v11) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L252960.  v10:= temp;
  #L252962.  if v10 == 0 then goto L252986;
  #L252966.  call temp:= `getActualTypeArguments`(v2) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L25296c.  v10:= temp @kind object;
  #L25296e.  call temp:= `getActualTypeArguments`(v3) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L252974.  v11:= temp @kind object;
  #L252976.  call temp:= `equals`(v10, v11) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L25297c.  v10:= temp;
  #L25297e.  if v10 == 0 then goto L252986;
  #L252982.  v9:= v8;
  #L252984.  goto L2528fe;
  #L252986.  v8:= v9;
  #L252988.  goto L252982;
  #L25298a.  v10:= instanceof @variable v12 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L25298e.  if v10 == 0 then goto L2529c0;
  #L252992.  v8:= instanceof @variable v13 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L252996.  if v8 == 0 then goto L2528fe;
  #L25299a.  v0:= v12 @kind object;
  #L25299c.  v0:= (`java.lang.reflect.GenericArrayType`) v0 @kind object;
  #L2529a0.  v1:= v13 @kind object;
  #L2529a2.  v1:= (`java.lang.reflect.GenericArrayType`) v1 @kind object;
  #L2529a6.  call temp:= `getGenericComponentType`(v0) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L2529ac.  v8:= temp @kind object;
  #L2529ae.  call temp:= `getGenericComponentType`(v1) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L2529b4.  v9:= temp @kind object;
  #L2529b6.  call temp:= `equals`(v8, v9) @signature `Lretrofit2/Utils;.equals:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L2529bc.  v9:= temp;
  #L2529be.  goto L2528fe;
  #L2529c0.  v10:= instanceof @variable v12 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L2529c4.  if v10 == 0 then goto L252a1e;
  #L2529c8.  v10:= instanceof @variable v13 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L2529cc.  if v10 == 0 then goto L2528fe;
  #L2529d0.  v6:= v12 @kind object;
  #L2529d2.  v6:= (`java.lang.reflect.WildcardType`) v6 @kind object;
  #L2529d6.  v7:= v13 @kind object;
  #L2529d8.  v7:= (`java.lang.reflect.WildcardType`) v7 @kind object;
  #L2529dc.  call temp:= `getUpperBounds`(v6) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L2529e2.  v10:= temp @kind object;
  #L2529e4.  call temp:= `getUpperBounds`(v7) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L2529ea.  v11:= temp @kind object;
  #L2529ec.  call temp:= `equals`(v10, v11) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L2529f2.  v10:= temp;
  #L2529f4.  if v10 == 0 then goto L252a1a;
  #L2529f8.  call temp:= `getLowerBounds`(v6) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L2529fe.  v10:= temp @kind object;
  #L252a00.  call temp:= `getLowerBounds`(v7) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L252a06.  v11:= temp @kind object;
  #L252a08.  call temp:= `equals`(v10, v11) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L252a0e.  v10:= temp;
  #L252a10.  if v10 == 0 then goto L252a1a;
  #L252a14.  v9:= v8;
  #L252a16.  goto L2528fe;
  #L252a1a.  v8:= v9;
  #L252a1c.  goto L252a14;
  #L252a1e.  v10:= instanceof @variable v12 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L252a22.  if v10 == 0 then goto L2528fe;
  #L252a26.  v10:= instanceof @variable v13 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L252a2a.  if v10 == 0 then goto L2528fe;
  #L252a2e.  v4:= v12 @kind object;
  #L252a30.  v4:= (`java.lang.reflect.TypeVariable`) v4 @kind object;
  #L252a34.  v5:= v13 @kind object;
  #L252a36.  v5:= (`java.lang.reflect.TypeVariable`) v5 @kind object;
  #L252a3a.  call temp:= `getGenericDeclaration`(v4) @signature `Ljava/lang/reflect/TypeVariable;.getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;` @kind interface;
  #L252a40.  v10:= temp @kind object;
  #L252a42.  call temp:= `getGenericDeclaration`(v5) @signature `Ljava/lang/reflect/TypeVariable;.getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;` @kind interface;
  #L252a48.  v11:= temp @kind object;
  #L252a4a.  if v10 != v11 then goto L252a70;
  #L252a4e.  call temp:= `getName`(v4) @signature `Ljava/lang/reflect/TypeVariable;.getName:()Ljava/lang/String;` @kind interface;
  #L252a54.  v10:= temp @kind object;
  #L252a56.  call temp:= `getName`(v5) @signature `Ljava/lang/reflect/TypeVariable;.getName:()Ljava/lang/String;` @kind interface;
  #L252a5c.  v11:= temp @kind object;
  #L252a5e.  call temp:= `equals`(v10, v11) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L252a64.  v10:= temp;
  #L252a66.  if v10 == 0 then goto L252a70;
  #L252a6a.  v9:= v8;
  #L252a6c.  goto L2528fe;
  #L252a70.  v8:= v9;
  #L252a72.  goto L252a6a;
}
procedure `java.lang.reflect.Type` `getCallResponseType`(`java.lang.reflect.Type` v2 @kind object @name `returnType`) @signature `Lretrofit2/Utils;.getCallResponseType:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L252a84.  v0:= instanceof @variable v2 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L252a88.  if v0 != 0 then goto L252a9c;
  #L252a8c.  v0:= new `java.lang.IllegalArgumentException`;
  #L252a90.  v1:= "Call return type must be parameterized as Call<Foo> or Call<? extends Foo>" @kind object;
  #L252a94.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L252a9a.  throw v0;
  #L252a9c.  v0:= 0I;
  #L252a9e.  v2:= (`java.lang.reflect.ParameterizedType`) v2 @kind object;
  #L252aa2.  call temp:= `getParameterUpperBound`(v0, v2) @signature `Lretrofit2/Utils;.getParameterUpperBound:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L252aa8.  v0:= temp @kind object;
  #L252aaa.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getGenericSupertype`(`java.lang.reflect.Type` v6 @kind object @name `context`, `java.lang.Class` v7 @kind object, `java.lang.Class` v8 @kind object) @signature `Lretrofit2/Utils;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L252abc.  if v8 != v7 then goto L252ac2;
  #L252ac0.  return v6 @kind object;
  #L252ac2.  call temp:= `isInterface`(v8) @signature `Ljava/lang/Class;.isInterface:()Z` @kind virtual;
  #L252ac8.  v4:= temp;
  #L252aca.  if v4 == 0 then goto L252b24;
  #L252ace.  call temp:= `getInterfaces`(v7) @signature `Ljava/lang/Class;.getInterfaces:()[Ljava/lang/Class;` @kind virtual;
  #L252ad4.  v1:= temp @kind object;
  #L252ad6.  v0:= 0I;
  #L252ad8.  v2:= length @variable v1;
  #L252ada.  if v0 >= v2 then goto L252b24;
  #L252ade.  v4:= v1[v0] @kind object;
  #L252ae2.  if v4 != v8 then goto L252af4;
  #L252ae6.  call temp:= `getGenericInterfaces`(v7) @signature `Ljava/lang/Class;.getGenericInterfaces:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L252aec.  v4:= temp @kind object;
  #L252aee.  v6:= v4[v0] @kind object;
  #L252af2.  goto L252ac0;
  #L252af4.  v4:= v1[v0] @kind object;
  #L252af8.  call temp:= `isAssignableFrom`(v8, v4) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L252afe.  v4:= temp;
  #L252b00.  if v4 == 0 then goto L252b1e;
  #L252b04.  call temp:= `getGenericInterfaces`(v7) @signature `Ljava/lang/Class;.getGenericInterfaces:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L252b0a.  v4:= temp @kind object;
  #L252b0c.  v4:= v4[v0] @kind object;
  #L252b10.  v5:= v1[v0] @kind object;
  #L252b14.  call temp:= `getGenericSupertype`(v4, v5, v8) @signature `Lretrofit2/Utils;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L252b1a.  v6:= temp @kind object;
  #L252b1c.  goto L252ac0;
  #L252b1e.  v0:= v0 + 1;
  #L252b22.  goto L252ada;
  #L252b24.  call temp:= `isInterface`(v7) @signature `Ljava/lang/Class;.isInterface:()Z` @kind virtual;
  #L252b2a.  v4:= temp;
  #L252b2c.  if v4 != 0 then goto L252b70;
  #L252b30.  v4:= constclass @type ^`java.lang.Object` @kind object;
  #L252b34.  if v7 == v4 then goto L252b70;
  #L252b38.  call temp:= `getSuperclass`(v7) @signature `Ljava/lang/Class;.getSuperclass:()Ljava/lang/Class;` @kind virtual;
  #L252b3e.  v3:= temp @kind object;
  #L252b40.  if v3 != v8 then goto L252b4e;
  #L252b44.  call temp:= `getGenericSuperclass`(v7) @signature `Ljava/lang/Class;.getGenericSuperclass:()Ljava/lang/reflect/Type;` @kind virtual;
  #L252b4a.  v6:= temp @kind object;
  #L252b4c.  goto L252ac0;
  #L252b4e.  call temp:= `isAssignableFrom`(v8, v3) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L252b54.  v4:= temp;
  #L252b56.  if v4 == 0 then goto L252b6c;
  #L252b5a.  call temp:= `getGenericSuperclass`(v7) @signature `Ljava/lang/Class;.getGenericSuperclass:()Ljava/lang/reflect/Type;` @kind virtual;
  #L252b60.  v4:= temp @kind object;
  #L252b62.  call temp:= `getGenericSupertype`(v4, v3, v8) @signature `Lretrofit2/Utils;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L252b68.  v6:= temp @kind object;
  #L252b6a.  goto L252ac0;
  #L252b6c.  v7:= v3 @kind object;
  #L252b6e.  goto L252b30;
  #L252b70.  v6:= v8 @kind object;
  #L252b72.  goto L252ac0;
}
procedure `java.lang.reflect.Type` `getParameterUpperBound`(`int` v5 @name `index`, `java.lang.reflect.ParameterizedType` v6 @kind object @name `type`) @signature `Lretrofit2/Utils;.getParameterUpperBound:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L252b84.  call temp:= `getActualTypeArguments`(v6) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L252b8a.  v1:= temp @kind object;
  #L252b8c.  if v5 < 0 then goto L252b96;
  #L252b90.  v2:= length @variable v1;
  #L252b92.  if v5 < v2 then goto L252bf2;
  #L252b96.  v2:= new `java.lang.IllegalArgumentException`;
  #L252b9a.  v3:= new `java.lang.StringBuilder`;
  #L252b9e.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L252ba4.  v4:= "Index " @kind object;
  #L252ba8.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L252bae.  v3:= temp @kind object;
  #L252bb0.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L252bb6.  v3:= temp @kind object;
  #L252bb8.  v4:= " not in range [0," @kind object;
  #L252bbc.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L252bc2.  v3:= temp @kind object;
  #L252bc4.  v4:= length @variable v1;
  #L252bc6.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L252bcc.  v3:= temp @kind object;
  #L252bce.  v4:= ") for " @kind object;
  #L252bd2.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L252bd8.  v3:= temp @kind object;
  #L252bda.  call temp:= `append`(v3, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L252be0.  v3:= temp @kind object;
  #L252be2.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L252be8.  v3:= temp @kind object;
  #L252bea.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L252bf0.  throw v2;
  #L252bf2.  v0:= v1[v5] @kind object;
  #L252bf6.  v2:= instanceof @variable v0 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L252bfa.  if v2 == 0 then goto L252c10;
  #L252bfe.  v0:= (`java.lang.reflect.WildcardType`) v0 @kind object;
  #L252c02.  call temp:= `getUpperBounds`(v0) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L252c08.  v2:= temp @kind object;
  #L252c0a.  v3:= 0I;
  #L252c0c.  v0:= v2[v3] @kind object;
  #L252c10.  return v0 @kind object;
}
procedure `java.lang.Class` `getRawType`(`java.lang.reflect.Type` v6 @kind object @name `type`) @signature `Lretrofit2/Utils;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L252c24.  v4:= 0I;
  #L252c26.  if v6 != 0 then goto L252c3a;
  #L252c2a.  v3:= new `java.lang.NullPointerException`;
  #L252c2e.  v4:= "type == null" @kind object;
  #L252c32.  call `<init>`(v3, v4) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L252c38.  throw v3;
  #L252c3a.  v3:= instanceof @variable v6 @type ^`java.lang.Class` @kind boolean;
  #L252c3e.  if v3 == 0 then goto L252c48;
  #L252c42.  v6:= (`java.lang.Class`) v6 @kind object;
  #L252c46.  return v6 @kind object;
  #L252c48.  v3:= instanceof @variable v6 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L252c4c.  if v3 == 0 then goto L252c7a;
  #L252c50.  v1:= v6 @kind object;
  #L252c52.  v1:= (`java.lang.reflect.ParameterizedType`) v1 @kind object;
  #L252c56.  call temp:= `getRawType`(v1) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L252c5c.  v2:= temp @kind object;
  #L252c5e.  v3:= instanceof @variable v2 @type ^`java.lang.Class` @kind boolean;
  #L252c62.  if v3 != 0 then goto L252c72;
  #L252c66.  v3:= new `java.lang.IllegalArgumentException`;
  #L252c6a.  call `<init>`(v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L252c70.  throw v3;
  #L252c72.  v2:= (`java.lang.Class`) v2 @kind object;
  #L252c76.  v6:= v2 @kind object;
  #L252c78.  goto L252c46;
  #L252c7a.  v3:= instanceof @variable v6 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L252c7e.  if v3 == 0 then goto L252ca8;
  #L252c82.  v6:= (`java.lang.reflect.GenericArrayType`) v6 @kind object;
  #L252c86.  call temp:= `getGenericComponentType`(v6) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L252c8c.  v0:= temp @kind object;
  #L252c8e.  call temp:= `getRawType`(v0) @signature `Lretrofit2/Utils;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L252c94.  v3:= temp @kind object;
  #L252c96.  call temp:= `newInstance`(v3, v4) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L252c9c.  v3:= temp @kind object;
  #L252c9e.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L252ca4.  v6:= temp @kind object;
  #L252ca6.  goto L252c46;
  #L252ca8.  v3:= instanceof @variable v6 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L252cac.  if v3 == 0 then goto L252cb6;
  #L252cb0.  v6:= constclass @type ^`java.lang.Object` @kind object;
  #L252cb4.  goto L252c46;
  #L252cb6.  v3:= instanceof @variable v6 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L252cba.  if v3 == 0 then goto L252cd8;
  #L252cbe.  v6:= (`java.lang.reflect.WildcardType`) v6 @kind object;
  #L252cc2.  call temp:= `getUpperBounds`(v6) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L252cc8.  v3:= temp @kind object;
  #L252cca.  v3:= v3[v4] @kind object;
  #L252cce.  call temp:= `getRawType`(v3) @signature `Lretrofit2/Utils;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L252cd4.  v6:= temp @kind object;
  #L252cd6.  goto L252c46;
  #L252cd8.  v3:= new `java.lang.IllegalArgumentException`;
  #L252cdc.  v4:= new `java.lang.StringBuilder`;
  #L252ce0.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L252ce6.  v5:= "Expected a Class, ParameterizedType, or GenericArrayType, but <" @kind object;
  #L252cea.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L252cf0.  v4:= temp @kind object;
  #L252cf2.  call temp:= `append`(v4, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L252cf8.  v4:= temp @kind object;
  #L252cfa.  v5:= "> is of type " @kind object;
  #L252cfe.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L252d04.  v4:= temp @kind object;
  #L252d06.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L252d0c.  v5:= temp @kind object;
  #L252d0e.  call temp:= `getName`(v5) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L252d14.  v5:= temp @kind object;
  #L252d16.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L252d1c.  v4:= temp @kind object;
  #L252d1e.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L252d24.  v4:= temp @kind object;
  #L252d26.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L252d2c.  throw v3;
}
procedure `java.lang.reflect.Type` `getSupertype`(`java.lang.reflect.Type` v1 @kind object @name `context`, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lretrofit2/Utils;.getSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;

  #L252d40.  call temp:= `isAssignableFrom`(v3, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L252d46.  v0:= temp;
  #L252d48.  if v0 != 0 then goto L252d58;
  #L252d4c.  v0:= new `java.lang.IllegalArgumentException`;
  #L252d50.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L252d56.  throw v0;
  #L252d58.  call temp:= `getGenericSupertype`(v1, v2, v3) @signature `Lretrofit2/Utils;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L252d5e.  v0:= temp @kind object;
  #L252d60.  call temp:= `resolve`(v1, v2, v0) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L252d66.  v0:= temp @kind object;
  #L252d68.  return v0 @kind object;
}
procedure `boolean` `hasUnresolvableType`(`java.lang.reflect.Type` v9 @kind object @name `type`) @signature `Lretrofit2/Utils;.hasUnresolvableType:(Ljava/lang/reflect/Type;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L252d7c.  v4:= 1I;
  #L252d7e.  v3:= 0I;
  #L252d80.  v5:= instanceof @variable v9 @type ^`java.lang.Class` @kind boolean;
  #L252d84.  if v5 == 0 then goto L252d8a;
  #L252d88.  return v3;
  #L252d8a.  v5:= instanceof @variable v9 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L252d8e.  if v5 == 0 then goto L252dc2;
  #L252d92.  v1:= v9 @kind object;
  #L252d94.  v1:= (`java.lang.reflect.ParameterizedType`) v1 @kind object;
  #L252d98.  call temp:= `getActualTypeArguments`(v1) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L252d9e.  v6:= temp @kind object;
  #L252da0.  v7:= length @variable v6;
  #L252da2.  v5:= v3;
  #L252da4.  if v5 >= v7 then goto L252d88;
  #L252da8.  v2:= v6[v5] @kind object;
  #L252dac.  call temp:= `hasUnresolvableType`(v2) @signature `Lretrofit2/Utils;.hasUnresolvableType:(Ljava/lang/reflect/Type;)Z` @kind static;
  #L252db2.  v8:= temp;
  #L252db4.  if v8 == 0 then goto L252dbc;
  #L252db8.  v3:= v4;
  #L252dba.  goto L252d88;
  #L252dbc.  v5:= v5 + 1;
  #L252dc0.  goto L252da4;
  #L252dc2.  v3:= instanceof @variable v9 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L252dc6.  if v3 == 0 then goto L252de0;
  #L252dca.  v9:= (`java.lang.reflect.GenericArrayType`) v9 @kind object;
  #L252dce.  call temp:= `getGenericComponentType`(v9) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L252dd4.  v3:= temp @kind object;
  #L252dd6.  call temp:= `hasUnresolvableType`(v3) @signature `Lretrofit2/Utils;.hasUnresolvableType:(Ljava/lang/reflect/Type;)Z` @kind static;
  #L252ddc.  v3:= temp;
  #L252dde.  goto L252d88;
  #L252de0.  v3:= instanceof @variable v9 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L252de4.  if v3 == 0 then goto L252dec;
  #L252de8.  v3:= v4;
  #L252dea.  goto L252d88;
  #L252dec.  v3:= instanceof @variable v9 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L252df0.  if v3 == 0 then goto L252df8;
  #L252df4.  v3:= v4;
  #L252df6.  goto L252d88;
  #L252df8.  if v9 != 0 then goto L252e46;
  #L252dfc.  v0:= "null" @kind object;
  #L252e00.  v3:= new `java.lang.IllegalArgumentException`;
  #L252e04.  v4:= new `java.lang.StringBuilder`;
  #L252e08.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L252e0e.  v5:= "Expected a Class, ParameterizedType, or GenericArrayType, but <" @kind object;
  #L252e12.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L252e18.  v4:= temp @kind object;
  #L252e1a.  call temp:= `append`(v4, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L252e20.  v4:= temp @kind object;
  #L252e22.  v5:= "> is of type " @kind object;
  #L252e26.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L252e2c.  v4:= temp @kind object;
  #L252e2e.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L252e34.  v4:= temp @kind object;
  #L252e36.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L252e3c.  v4:= temp @kind object;
  #L252e3e.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L252e44.  throw v3;
  #L252e46.  call temp:= `getClass`(v9) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L252e4c.  v3:= temp @kind object;
  #L252e4e.  call temp:= `getName`(v3) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L252e54.  v0:= temp @kind object;
  #L252e56.  goto L252e00;
}
procedure `int` `hashCodeOrZero`(`java.lang.Object` v1 @kind object @name `o`) @signature `Lretrofit2/Utils;.hashCodeOrZero:(Ljava/lang/Object;)I` @AccessFlag STATIC {
    temp;
    v0;

  #L252e68.  if v1 == 0 then goto L252e76;
  #L252e6c.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L252e72.  v0:= temp;
  #L252e74.  return v0;
  #L252e76.  v0:= 0I;
  #L252e78.  goto L252e74;
}
procedure `int` `indexOf`(`java.lang.Object`[] v2 @kind object @name `array`, `java.lang.Object` v3 @kind object @name `toFind`) @signature `Lretrofit2/Utils;.indexOf:([Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L252e8c.  v0:= 0I;
  #L252e8e.  v1:= length @variable v2;
  #L252e90.  if v0 >= v1 then goto L252eac;
  #L252e94.  v1:= v2[v0] @kind object;
  #L252e98.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L252e9e.  v1:= temp;
  #L252ea0.  if v1 == 0 then goto L252ea6;
  #L252ea4.  return v0;
  #L252ea6.  v0:= v0 + 1;
  #L252eaa.  goto L252e8e;
  #L252eac.  v1:= new `java.util.NoSuchElementException`;
  #L252eb0.  call `<init>`(v1) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L252eb6.  throw v1;
}
procedure `boolean` `isAnnotationPresent`(`java.lang.annotation.Annotation`[] v5 @kind object @name `annotations`, `java.lang.Class` v6 @kind object) @signature `Lretrofit2/Utils;.isAnnotationPresent:([Ljava/lang/annotation/Annotation;Ljava/lang/Class;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L252ec8.  v1:= 0I;
  #L252eca.  v3:= length @variable v5;
  #L252ecc.  v2:= v1;
  #L252ece.  if v2 >= v3 then goto L252ee4;
  #L252ed2.  v0:= v5[v2] @kind object;
  #L252ed6.  call temp:= `isInstance`(v6, v0) @signature `Ljava/lang/Class;.isInstance:(Ljava/lang/Object;)Z` @kind virtual;
  #L252edc.  v4:= temp;
  #L252ede.  if v4 == 0 then goto L252ee6;
  #L252ee2.  v1:= 1I;
  #L252ee4.  return v1;
  #L252ee6.  v2:= v2 + 1;
  #L252eea.  goto L252ece;
}
procedure `java.lang.reflect.Type` `resolve`(`java.lang.reflect.Type` v22 @kind object @name `context`, `java.lang.Class` v23 @kind object, `java.lang.reflect.Type` v24 @kind object @name `toResolve`) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;

  #L252efc.  v0:= v24 @kind object;
  #L252f00.  v0:= instanceof @variable v0 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L252f04.  v19:= v0;
  #L252f08.  if v19 == 0 then goto L252f3a;
  #L252f0c.  v17:= v24 @kind object;
  #L252f10.  v17:= (`java.lang.reflect.TypeVariable`) v17 @kind object;
  #L252f14.  v0:= v22 @kind object;
  #L252f18.  v1:= v23 @kind object;
  #L252f1c.  v2:= v17 @kind object;
  #L252f20.  call temp:= `resolveTypeVariable`(v0, v1, v2) @signature `Lretrofit2/Utils;.resolveTypeVariable:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/TypeVariable;)Ljava/lang/reflect/Type;` @kind static;
  #L252f26.  v24:= temp @kind object;
  #L252f28.  v0:= v24 @kind object;
  #L252f2c.  v1:= v17 @kind object;
  #L252f30.  if v0 != v1 then goto L252efc;
  #L252f34.  v10:= v24 @kind object;
  #L252f38.  return v10 @kind object;
  #L252f3a.  v0:= v24 @kind object;
  #L252f3e.  v0:= instanceof @variable v0 @type ^`java.lang.Class` @kind boolean;
  #L252f42.  v19:= v0;
  #L252f46.  if v19 == 0 then goto L252f92;
  #L252f4a.  v19:= v24 @kind object;
  #L252f4e.  v19:= (`java.lang.Class`) v19 @kind object;
  #L252f52.  call temp:= `isArray`(v19) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L252f58.  v19:= temp;
  #L252f5a.  if v19 == 0 then goto L252f92;
  #L252f5e.  v11:= v24 @kind object;
  #L252f62.  v11:= (`java.lang.Class`) v11 @kind object;
  #L252f66.  call temp:= `getComponentType`(v11) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L252f6c.  v5:= temp @kind object;
  #L252f6e.  v0:= v22 @kind object;
  #L252f72.  v1:= v23 @kind object;
  #L252f76.  call temp:= `resolve`(v0, v1, v5) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L252f7c.  v8:= temp @kind object;
  #L252f7e.  if v5 != v8 then goto L252f86;
  #L252f82.  v10:= v11 @kind object;
  #L252f84.  goto L252f38;
  #L252f86.  v11:= new `retrofit2.Utils$GenericArrayTypeImpl`;
  #L252f8a.  call `<init>`(v11, v8) @signature `Lretrofit2/Utils$GenericArrayTypeImpl;.<init>:(Ljava/lang/reflect/Type;)V` @kind direct;
  #L252f90.  goto L252f82;
  #L252f92.  v0:= v24 @kind object;
  #L252f96.  v0:= instanceof @variable v0 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L252f9a.  v19:= v0;
  #L252f9e.  if v19 == 0 then goto L252fd2;
  #L252fa2.  v10:= v24 @kind object;
  #L252fa6.  v10:= (`java.lang.reflect.GenericArrayType`) v10 @kind object;
  #L252faa.  call temp:= `getGenericComponentType`(v10) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L252fb0.  v5:= temp @kind object;
  #L252fb2.  v0:= v22 @kind object;
  #L252fb6.  v1:= v23 @kind object;
  #L252fba.  call temp:= `resolve`(v0, v1, v5) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L252fc0.  v8:= temp @kind object;
  #L252fc2.  if v5 == v8 then goto L252f38;
  #L252fc6.  v10:= new `retrofit2.Utils$GenericArrayTypeImpl`;
  #L252fca.  call `<init>`(v10, v8) @signature `Lretrofit2/Utils$GenericArrayTypeImpl;.<init>:(Ljava/lang/reflect/Type;)V` @kind direct;
  #L252fd0.  goto L252f38;
  #L252fd2.  v0:= v24 @kind object;
  #L252fd6.  v0:= instanceof @variable v0 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L252fda.  v19:= v0;
  #L252fde.  if v19 == 0 then goto L253088;
  #L252fe2.  v10:= v24 @kind object;
  #L252fe6.  v10:= (`java.lang.reflect.ParameterizedType`) v10 @kind object;
  #L252fea.  call temp:= `getOwnerType`(v10) @signature `Ljava/lang/reflect/ParameterizedType;.getOwnerType:()Ljava/lang/reflect/Type;` @kind interface;
  #L252ff0.  v14:= temp @kind object;
  #L252ff2.  v0:= v22 @kind object;
  #L252ff6.  v1:= v23 @kind object;
  #L252ffa.  call temp:= `resolve`(v0, v1, v14) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L253000.  v9:= temp @kind object;
  #L253002.  if v9 == v14 then goto L25305e;
  #L253006.  v4:= 1I;
  #L253008.  call temp:= `getActualTypeArguments`(v10) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L25300e.  v3:= temp @kind object;
  #L253010.  v16:= 0I;
  #L253014.  v6:= length @variable v3;
  #L253016.  v0:= v16;
  #L25301a.  if v0 >= v6 then goto L253062;
  #L25301e.  v19:= v3[v16] @kind object;
  #L253022.  v0:= v22 @kind object;
  #L253026.  v1:= v23 @kind object;
  #L25302a.  v2:= v19 @kind object;
  #L25302e.  call temp:= `resolve`(v0, v1, v2) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L253034.  v15:= temp @kind object;
  #L253036.  v19:= v3[v16] @kind object;
  #L25303a.  v0:= v19 @kind object;
  #L25303e.  if v15 == v0 then goto L253058;
  #L253042.  if v4 != 0 then goto L253054;
  #L253046.  call temp:= `clone`(v3) @signature `[Ljava/lang/reflect/Type;.clone:()Ljava/lang/Object;` @kind virtual;
  #L25304c.  v3:= temp @kind object;
  #L25304e.  v3:= (`java.lang.reflect.Type`[]) v3 @kind object;
  #L253052.  v4:= 1I;
  #L253054.  v3[v16]:= v15 @kind object;
  #L253058.  v16:= v16 + 1;
  #L25305c.  goto L253016;
  #L25305e.  v4:= 0I;
  #L253060.  goto L253008;
  #L253062.  if v4 == 0 then goto L252f38;
  #L253066.  v19:= new `retrofit2.Utils$ParameterizedTypeImpl`;
  #L25306a.  call temp:= `getRawType`(v10) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L253070.  v20:= temp @kind object;
  #L253072.  v0:= v19 @kind object;
  #L253076.  v1:= v20 @kind object;
  #L25307a.  call `<init>`(v0, v9, v1, v3) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.<init>:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @kind direct;
  #L253080.  v10:= v19 @kind object;
  #L253084.  goto L252f38;
  #L253088.  v0:= v24 @kind object;
  #L25308c.  v0:= instanceof @variable v0 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L253090.  v19:= v0;
  #L253094.  if v19 == 0 then goto L2531b4;
  #L253098.  v10:= v24 @kind object;
  #L25309c.  v10:= (`java.lang.reflect.WildcardType`) v10 @kind object;
  #L2530a0.  call temp:= `getLowerBounds`(v10) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L2530a6.  v12:= temp @kind object;
  #L2530a8.  call temp:= `getUpperBounds`(v10) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L2530ae.  v13:= temp @kind object;
  #L2530b0.  v0:= length @variable v12;
  #L2530b2.  v19:= v0;
  #L2530b6.  v20:= 1I;
  #L2530ba.  v0:= v19;
  #L2530be.  v1:= v20;
  #L2530c2.  if v0 != v1 then goto L25313c;
  #L2530c6.  v19:= 0I;
  #L2530ca.  v19:= v12[v19] @kind object;
  #L2530ce.  v0:= v22 @kind object;
  #L2530d2.  v1:= v23 @kind object;
  #L2530d6.  v2:= v19 @kind object;
  #L2530da.  call temp:= `resolve`(v0, v1, v2) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L2530e0.  v7:= temp @kind object;
  #L2530e2.  v19:= 0I;
  #L2530e6.  v19:= v12[v19] @kind object;
  #L2530ea.  v0:= v19 @kind object;
  #L2530ee.  if v7 == v0 then goto L252f38;
  #L2530f2.  v10:= new `retrofit2.Utils$WildcardTypeImpl`;
  #L2530f6.  v19:= 1I;
  #L2530fa.  v0:= v19;
  #L2530fe.  v0:= new `java.lang.reflect.Type`[v0];
  #L253102.  v19:= v0 @kind object;
  #L253106.  v20:= 0I;
  #L25310a.  v21:= constclass @type ^`java.lang.Object` @kind object;
  #L25310e.  v19[v20]:= v21 @kind object;
  #L253112.  v20:= 1I;
  #L253116.  v0:= v20;
  #L25311a.  v0:= new `java.lang.reflect.Type`[v0];
  #L25311e.  v20:= v0 @kind object;
  #L253122.  v21:= 0I;
  #L253126.  v20[v21]:= v7 @kind object;
  #L25312a.  v0:= v19 @kind object;
  #L25312e.  v1:= v20 @kind object;
  #L253132.  call `<init>`(v10, v0, v1) @signature `Lretrofit2/Utils$WildcardTypeImpl;.<init>:([Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @kind direct;
  #L253138.  goto L252f38;
  #L25313c.  v0:= length @variable v13;
  #L25313e.  v19:= v0;
  #L253142.  v20:= 1I;
  #L253146.  v0:= v19;
  #L25314a.  v1:= v20;
  #L25314e.  if v0 != v1 then goto L252f38;
  #L253152.  v19:= 0I;
  #L253156.  v19:= v13[v19] @kind object;
  #L25315a.  v0:= v22 @kind object;
  #L25315e.  v1:= v23 @kind object;
  #L253162.  v2:= v19 @kind object;
  #L253166.  call temp:= `resolve`(v0, v1, v2) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L25316c.  v18:= temp @kind object;
  #L25316e.  v19:= 0I;
  #L253172.  v19:= v13[v19] @kind object;
  #L253176.  v0:= v18 @kind object;
  #L25317a.  v1:= v19 @kind object;
  #L25317e.  if v0 == v1 then goto L252f38;
  #L253182.  v10:= new `retrofit2.Utils$WildcardTypeImpl`;
  #L253186.  v19:= 1I;
  #L25318a.  v0:= v19;
  #L25318e.  v0:= new `java.lang.reflect.Type`[v0];
  #L253192.  v19:= v0 @kind object;
  #L253196.  v20:= 0I;
  #L25319a.  v19[v20]:= v18 @kind object;
  #L25319e.  v20:= `@@retrofit2.Utils.EMPTY_TYPE_ARRAY` @type ^`java.lang.reflect.Type`[] @kind object;
  #L2531a2.  v0:= v19 @kind object;
  #L2531a6.  v1:= v20 @kind object;
  #L2531aa.  call `<init>`(v10, v0, v1) @signature `Lretrofit2/Utils$WildcardTypeImpl;.<init>:([Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @kind direct;
  #L2531b0.  goto L252f38;
  #L2531b4.  v10:= v24 @kind object;
  #L2531b8.  goto L252f38;
}
procedure `java.lang.reflect.Type` `resolveTypeVariable`(`java.lang.reflect.Type` v4 @kind object @name `context`, `java.lang.Class` v5 @kind object, `java.lang.reflect.TypeVariable` v6 @kind object) @signature `Lretrofit2/Utils;.resolveTypeVariable:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/TypeVariable;)Ljava/lang/reflect/Type;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2531cc.  call temp:= `declaringClassOf`(v6) @signature `Lretrofit2/Utils;.declaringClassOf:(Ljava/lang/reflect/TypeVariable;)Ljava/lang/Class;` @kind static;
  #L2531d2.  v1:= temp @kind object;
  #L2531d4.  if v1 != 0 then goto L2531da;
  #L2531d8.  return v6 @kind object;
  #L2531da.  call temp:= `getGenericSupertype`(v4, v5, v1) @signature `Lretrofit2/Utils;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L2531e0.  v0:= temp @kind object;
  #L2531e2.  v3:= instanceof @variable v0 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L2531e6.  if v3 == 0 then goto L2531d8;
  #L2531ea.  call temp:= `getTypeParameters`(v1) @signature `Ljava/lang/Class;.getTypeParameters:()[Ljava/lang/reflect/TypeVariable;` @kind virtual;
  #L2531f0.  v3:= temp @kind object;
  #L2531f2.  call temp:= `indexOf`(v3, v6) @signature `Lretrofit2/Utils;.indexOf:([Ljava/lang/Object;Ljava/lang/Object;)I` @kind static;
  #L2531f8.  v2:= temp;
  #L2531fa.  v0:= (`java.lang.reflect.ParameterizedType`) v0 @kind object;
  #L2531fe.  call temp:= `getActualTypeArguments`(v0) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L253204.  v3:= temp @kind object;
  #L253206.  v6:= v3[v2] @kind object;
  #L25320a.  goto L2531d8;
}
procedure `java.lang.String` `typeToString`(`java.lang.reflect.Type` v1 @kind object @name `type`) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;

  #L25321c.  v0:= instanceof @variable v1 @type ^`java.lang.Class` @kind boolean;
  #L253220.  if v0 == 0 then goto L253232;
  #L253224.  v1:= (`java.lang.Class`) v1 @kind object;
  #L253228.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L25322e.  v0:= temp @kind object;
  #L253230.  return v0 @kind object;
  #L253232.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L253238.  v0:= temp @kind object;
  #L25323a.  goto L253230;
}
procedure `void` `validateServiceInterface`(`java.lang.Class` v2 @kind object) @signature `Lretrofit2/Utils;.validateServiceInterface:(Ljava/lang/Class;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L25324c.  call temp:= `isInterface`(v2) @signature `Ljava/lang/Class;.isInterface:()Z` @kind virtual;
  #L253252.  v0:= temp;
  #L253254.  if v0 != 0 then goto L253268;
  #L253258.  v0:= new `java.lang.IllegalArgumentException`;
  #L25325c.  v1:= "API declarations must be interfaces." @kind object;
  #L253260.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L253266.  throw v0;
  #L253268.  call temp:= `getInterfaces`(v2) @signature `Ljava/lang/Class;.getInterfaces:()[Ljava/lang/Class;` @kind virtual;
  #L25326e.  v0:= temp @kind object;
  #L253270.  v0:= length @variable v0;
  #L253272.  if v0 <= 0 then goto L253286;
  #L253276.  v0:= new `java.lang.IllegalArgumentException`;
  #L25327a.  v1:= "API interfaces must not extend other interfaces." @kind object;
  #L25327e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L253284.  throw v0;
  #L253286.  return @kind void;
}
