record `retrofit2.Utils$WildcardTypeImpl` @kind class @AccessFlag FINAL extends `java.lang.reflect.WildcardType` @kind interface {
  `java.lang.reflect.Type` `retrofit2.Utils$WildcardTypeImpl.lowerBound` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type` `retrofit2.Utils$WildcardTypeImpl.upperBound` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit2.Utils$WildcardTypeImpl` v3 @kind this, `java.lang.reflect.Type`[] v4 @kind object @name `upperBounds`, `java.lang.reflect.Type`[] v5 @kind object @name `lowerBounds`) @signature `Lretrofit2/Utils$WildcardTypeImpl;.<init>:([Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L2525b4.  v1:= 1I;
  #L2525b6.  v2:= 0I;
  #L2525b8.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2525be.  v0:= length @variable v5;
  #L2525c0.  if v0 <= v1 then goto L2525d0;
  #L2525c4.  v0:= new `java.lang.IllegalArgumentException`;
  #L2525c8.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L2525ce.  throw v0;
  #L2525d0.  v0:= length @variable v4;
  #L2525d2.  if v0 == v1 then goto L2525e2;
  #L2525d6.  v0:= new `java.lang.IllegalArgumentException`;
  #L2525da.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L2525e0.  throw v0;
  #L2525e2.  v0:= length @variable v5;
  #L2525e4.  if v0 != v1 then goto L252630;
  #L2525e8.  v0:= v5[v2] @kind object;
  #L2525ec.  if v0 != 0 then goto L2525fc;
  #L2525f0.  v0:= new `java.lang.NullPointerException`;
  #L2525f4.  call `<init>`(v0) @signature `Ljava/lang/NullPointerException;.<init>:()V` @kind direct;
  #L2525fa.  throw v0;
  #L2525fc.  v0:= v5[v2] @kind object;
  #L252600.  call `checkNotPrimitive`(v0) @signature `Lretrofit2/Utils;.checkNotPrimitive:(Ljava/lang/reflect/Type;)V` @kind static;
  #L252606.  v0:= v4[v2] @kind object;
  #L25260a.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L25260e.  if v0 == v1 then goto L25261e;
  #L252612.  v0:= new `java.lang.IllegalArgumentException`;
  #L252616.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L25261c.  throw v0;
  #L25261e.  v0:= v5[v2] @kind object;
  #L252622.  v3.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L252626.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L25262a.  v3.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L25262e.  return @kind void;
  #L252630.  v0:= v4[v2] @kind object;
  #L252634.  if v0 != 0 then goto L252644;
  #L252638.  v0:= new `java.lang.NullPointerException`;
  #L25263c.  call `<init>`(v0) @signature `Ljava/lang/NullPointerException;.<init>:()V` @kind direct;
  #L252642.  throw v0;
  #L252644.  v0:= v4[v2] @kind object;
  #L252648.  call `checkNotPrimitive`(v0) @signature `Lretrofit2/Utils;.checkNotPrimitive:(Ljava/lang/reflect/Type;)V` @kind static;
  #L25264e.  v0:= 0I;
  #L252650.  v3.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L252654.  v0:= v4[v2] @kind object;
  #L252658.  v3.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L25265c.  goto L25262e;
}
procedure `boolean` `equals`(`retrofit2.Utils$WildcardTypeImpl` v1 @kind this, `java.lang.Object` v2 @kind object @name `other`) @signature `Lretrofit2/Utils$WildcardTypeImpl;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L252670.  v0:= instanceof @variable v2 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L252674.  if v0 == 0 then goto L25268c;
  #L252678.  v2:= (`java.lang.reflect.WildcardType`) v2 @kind object;
  #L25267c.  call temp:= `equals`(v1, v2) @signature `Lretrofit2/Utils;.equals:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L252682.  v0:= temp;
  #L252684.  if v0 == 0 then goto L25268c;
  #L252688.  v0:= 1I;
  #L25268a.  return v0;
  #L25268c.  v0:= 0I;
  #L25268e.  goto L25268a;
}
procedure `java.lang.reflect.Type`[] `getLowerBounds`(`retrofit2.Utils$WildcardTypeImpl` v3 @kind this) @signature `Lretrofit2/Utils$WildcardTypeImpl;.getLowerBounds:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2526a0.  v0:= v3.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L2526a4.  if v0 == 0 then goto L2526ba;
  #L2526a8.  v0:= 1I;
  #L2526aa.  v0:= new `java.lang.reflect.Type`[v0];
  #L2526ae.  v1:= 0I;
  #L2526b0.  v2:= v3.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L2526b4.  v0[v1]:= v2 @kind object;
  #L2526b8.  return v0 @kind object;
  #L2526ba.  v0:= `@@retrofit2.Utils.EMPTY_TYPE_ARRAY` @type ^`java.lang.reflect.Type`[] @kind object;
  #L2526be.  goto L2526b8;
}
procedure `java.lang.reflect.Type`[] `getUpperBounds`(`retrofit2.Utils$WildcardTypeImpl` v3 @kind this) @signature `Lretrofit2/Utils$WildcardTypeImpl;.getUpperBounds:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2526d0.  v0:= 1I;
  #L2526d2.  v0:= new `java.lang.reflect.Type`[v0];
  #L2526d6.  v1:= 0I;
  #L2526d8.  v2:= v3.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` @kind object;
  #L2526dc.  v0[v1]:= v2 @kind object;
  #L2526e0.  return v0 @kind object;
}
procedure `int` `hashCode`(`retrofit2.Utils$WildcardTypeImpl` v2 @kind this) @signature `Lretrofit2/Utils$WildcardTypeImpl;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2526f4.  v0:= v2.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L2526f8.  if v0 == 0 then goto L252720;
  #L2526fc.  v0:= v2.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L252700.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L252706.  v0:= temp;
  #L252708.  v0:= v0 + 31;
  #L25270c.  v1:= v2.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` @kind object;
  #L252710.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L252716.  v1:= temp;
  #L252718.  v1:= v1 + 31;
  #L25271c.  v0:= v0 ^~ v1 @kind int;
  #L25271e.  return v0;
  #L252720.  v0:= 1I;
  #L252722.  goto L25270c;
}
procedure `java.lang.String` `toString`(`retrofit2.Utils$WildcardTypeImpl` v2 @kind this) @signature `Lretrofit2/Utils$WildcardTypeImpl;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L252734.  v0:= v2.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L252738.  if v0 == 0 then goto L252770;
  #L25273c.  v0:= new `java.lang.StringBuilder`;
  #L252740.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L252746.  v1:= "? super " @kind object;
  #L25274a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L252750.  v0:= temp @kind object;
  #L252752.  v1:= v2.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L252756.  call temp:= `typeToString`(v1) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L25275c.  v1:= temp @kind object;
  #L25275e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L252764.  v0:= temp @kind object;
  #L252766.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L25276c.  v0:= temp @kind object;
  #L25276e.  return v0 @kind object;
  #L252770.  v0:= v2.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` @kind object;
  #L252774.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L252778.  if v0 != v1 then goto L252782;
  #L25277c.  v0:= "?" @kind object;
  #L252780.  goto L25276e;
  #L252782.  v0:= new `java.lang.StringBuilder`;
  #L252786.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L25278c.  v1:= "? extends " @kind object;
  #L252790.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L252796.  v0:= temp @kind object;
  #L252798.  v1:= v2.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` @kind object;
  #L25279c.  call temp:= `typeToString`(v1) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L2527a2.  v1:= temp @kind object;
  #L2527a4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2527aa.  v0:= temp @kind object;
  #L2527ac.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2527b2.  v0:= temp @kind object;
  #L2527b4.  goto L25276e;
}
