record `retrofit2.Platform$IOS$MainThreadExecutor` @kind class @AccessFlag  extends `java.util.concurrent.Executor` @kind interface {
}
global `java.lang.reflect.Method` `@@retrofit2.Platform$IOS$MainThreadExecutor.addOperation` @AccessFlag PRIVATE_STATIC;
global `java.lang.Object` `@@retrofit2.Platform$IOS$MainThreadExecutor.queue` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lretrofit2/Platform$IOS$MainThreadExecutor;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L24ec74.  v2:= "org.robovm.apple.foundation.NSOperationQueue" @kind object;
  #L24ec78.  call temp:= `forName`(v2) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L24ec7e.  v1:= temp @kind object;
  #L24ec80.  v2:= "getMainQueue" @kind object;
  #L24ec84.  v3:= 0I;
  #L24ec86.  v3:= new `java.lang.Class`[v3];
  #L24ec8a.  call temp:= `getDeclaredMethod`(v1, v2, v3) @signature `Ljava/lang/Class;.getDeclaredMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L24ec90.  v2:= temp @kind object;
  #L24ec92.  v3:= 0I;
  #L24ec94.  v4:= 0I;
  #L24ec96.  v4:= new `java.lang.Object`[v4];
  #L24ec9a.  call temp:= `invoke`(v2, v3, v4) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L24eca0.  v2:= temp @kind object;
  #L24eca2.  `@@retrofit2.Platform$IOS$MainThreadExecutor.queue` @type ^`java.lang.Object` := v2 @kind object;
  #L24eca6.  v2:= "addOperation" @kind object;
  #L24ecaa.  v3:= 1I;
  #L24ecac.  v3:= new `java.lang.Class`[v3];
  #L24ecb0.  v4:= 0I;
  #L24ecb2.  v5:= constclass @type ^`java.lang.Runnable` @kind object;
  #L24ecb6.  v3[v4]:= v5 @kind object;
  #L24ecba.  call temp:= `getDeclaredMethod`(v1, v2, v3) @signature `Ljava/lang/Class;.getDeclaredMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L24ecc0.  v2:= temp @kind object;
  #L24ecc2.  `@@retrofit2.Platform$IOS$MainThreadExecutor.addOperation` @type ^`java.lang.reflect.Method` := v2 @kind object;
  #L24ecc6.  return @kind void;
  #L24ecc8.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L24ecca.  v2:= new `java.lang.AssertionError`;
  #L24ecce.  call `<init>`(v2, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L24ecd4.  throw v2;
  catch `java.lang.Exception` @[L24ec74..L24ecc6] goto L24ecc8;
}
procedure `void` `<init>`(`retrofit2.Platform$IOS$MainThreadExecutor` v0 @kind this) @signature `Lretrofit2/Platform$IOS$MainThreadExecutor;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L24ecf8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L24ecfe.  return @kind void;
}
procedure `void` `execute`(`retrofit2.Platform$IOS$MainThreadExecutor` v6 @kind this, `java.lang.Runnable` v7 @kind object @name `r`) @signature `Lretrofit2/Platform$IOS$MainThreadExecutor;.execute:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L24ed10.  v2:= `@@retrofit2.Platform$IOS$MainThreadExecutor.addOperation` @type ^`java.lang.reflect.Method` @kind object;
  #L24ed14.  v3:= `@@retrofit2.Platform$IOS$MainThreadExecutor.queue` @type ^`java.lang.Object` @kind object;
  #L24ed18.  v4:= 1I;
  #L24ed1a.  v4:= new `java.lang.Object`[v4];
  #L24ed1e.  v5:= 0I;
  #L24ed20.  v4[v5]:= v7 @kind object;
  #L24ed24.  call temp:= `invoke`(v2, v3, v4) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L24ed2a.  return @kind void;
  #L24ed2c.  v1:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L24ed2e.  v2:= new `java.lang.AssertionError`;
  #L24ed32.  call `<init>`(v2, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L24ed38.  throw v2;
  #L24ed3a.  v1:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L24ed3c.  call temp:= `getCause`(v1) @signature `Ljava/lang/reflect/InvocationTargetException;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L24ed42.  v0:= temp @kind object;
  #L24ed44.  v2:= instanceof @variable v0 @type ^`java.lang.RuntimeException` @kind boolean;
  #L24ed48.  if v2 == 0 then goto L24ed52;
  #L24ed4c.  v0:= (`java.lang.RuntimeException`) v0 @kind object;
  #L24ed50.  throw v0;
  #L24ed52.  v2:= instanceof @variable v0 @type ^`java.lang.Error` @kind boolean;
  #L24ed56.  if v2 == 0 then goto L24ed60;
  #L24ed5a.  v0:= (`java.lang.Error`) v0 @kind object;
  #L24ed5e.  throw v0;
  #L24ed60.  v2:= new `java.lang.RuntimeException`;
  #L24ed64.  call `<init>`(v2, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L24ed6a.  throw v2;
  #L24ed6c.  v1:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L24ed6e.  goto L24ed2e;
  catch `java.lang.IllegalArgumentException` @[L24ed10..L24ed2a] goto L24ed6c;
  catch `java.lang.IllegalAccessException` @[L24ed10..L24ed2a] goto L24ed2c;
  catch `java.lang.reflect.InvocationTargetException` @[L24ed10..L24ed2a] goto L24ed3a;
}
