record `retrofit2.Retrofit$Builder` @kind class @AccessFlag PUBLIC_FINAL {
  `java.util.List` `retrofit2.Retrofit$Builder.adapterFactories` @AccessFlag PRIVATE;
  `okhttp3.HttpUrl` `retrofit2.Retrofit$Builder.baseUrl` @AccessFlag PRIVATE;
  `okhttp3.Call$Factory` `retrofit2.Retrofit$Builder.callFactory` @AccessFlag PRIVATE;
  `java.util.concurrent.Executor` `retrofit2.Retrofit$Builder.callbackExecutor` @AccessFlag PRIVATE;
  `java.util.List` `retrofit2.Retrofit$Builder.converterFactories` @AccessFlag PRIVATE;
  `retrofit2.Platform` `retrofit2.Retrofit$Builder.platform` @AccessFlag PRIVATE;
  `boolean` `retrofit2.Retrofit$Builder.validateEagerly` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`retrofit2.Retrofit$Builder` v1 @kind this) @signature `Lretrofit2/Retrofit$Builder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L24f860.  call temp:= `get`() @signature `Lretrofit2/Platform;.get:()Lretrofit2/Platform;` @kind static;
  #L24f866.  v0:= temp @kind object;
  #L24f868.  call `<init>`(v1, v0) @signature `Lretrofit2/Retrofit$Builder;.<init>:(Lretrofit2/Platform;)V` @kind direct;
  #L24f86e.  return @kind void;
}
procedure `void` `<init>`(`retrofit2.Retrofit$Builder` v2 @kind this, `retrofit2.Platform` v3 @kind object @name `platform`) @signature `Lretrofit2/Retrofit$Builder;.<init>:(Lretrofit2/Platform;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L24f880.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L24f886.  v0:= new `java.util.ArrayList`;
  #L24f88a.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L24f890.  v2.`retrofit2.Retrofit$Builder.converterFactories` @type ^`java.util.List` := v0 @kind object;
  #L24f894.  v0:= new `java.util.ArrayList`;
  #L24f898.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L24f89e.  v2.`retrofit2.Retrofit$Builder.adapterFactories` @type ^`java.util.List` := v0 @kind object;
  #L24f8a2.  v2.`retrofit2.Retrofit$Builder.platform` @type ^`retrofit2.Platform` := v3 @kind object;
  #L24f8a6.  v0:= v2.`retrofit2.Retrofit$Builder.converterFactories` @type ^`java.util.List` @kind object;
  #L24f8aa.  v1:= new `retrofit2.BuiltInConverters`;
  #L24f8ae.  call `<init>`(v1) @signature `Lretrofit2/BuiltInConverters;.<init>:()V` @kind direct;
  #L24f8b4.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L24f8ba.  return @kind void;
}
procedure `retrofit2.Retrofit$Builder` `addCallAdapterFactory`(`retrofit2.Retrofit$Builder` v2 @kind this, `retrofit2.CallAdapter$Factory` v3 @kind object @name `factory`) @signature `Lretrofit2/Retrofit$Builder;.addCallAdapterFactory:(Lretrofit2/CallAdapter$Factory;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24f8cc.  v0:= v2.`retrofit2.Retrofit$Builder.adapterFactories` @type ^`java.util.List` @kind object;
  #L24f8d0.  v1:= "factory == null" @kind object;
  #L24f8d4.  call temp:= `checkNotNull`(v3, v1) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L24f8da.  v1:= temp @kind object;
  #L24f8dc.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L24f8e2.  return v2 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `addConverterFactory`(`retrofit2.Retrofit$Builder` v2 @kind this, `retrofit2.Converter$Factory` v3 @kind object @name `factory`) @signature `Lretrofit2/Retrofit$Builder;.addConverterFactory:(Lretrofit2/Converter$Factory;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24f8f4.  v0:= v2.`retrofit2.Retrofit$Builder.converterFactories` @type ^`java.util.List` @kind object;
  #L24f8f8.  v1:= "factory == null" @kind object;
  #L24f8fc.  call temp:= `checkNotNull`(v3, v1) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L24f902.  v1:= temp @kind object;
  #L24f904.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L24f90a.  return v2 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `baseUrl`(`retrofit2.Retrofit$Builder` v4 @kind this, `java.lang.String` v5 @kind object @name `baseUrl`) @signature `Lretrofit2/Retrofit$Builder;.baseUrl:(Ljava/lang/String;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L24f91c.  v1:= "baseUrl == null" @kind object;
  #L24f920.  call temp:= `checkNotNull`(v5, v1) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L24f926.  call temp:= `parse`(v5) @signature `Lokhttp3/HttpUrl;.parse:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @kind static;
  #L24f92c.  v0:= temp @kind object;
  #L24f92e.  if v0 != 0 then goto L24f964;
  #L24f932.  v1:= new `java.lang.IllegalArgumentException`;
  #L24f936.  v2:= new `java.lang.StringBuilder`;
  #L24f93a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24f940.  v3:= "Illegal URL: " @kind object;
  #L24f944.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24f94a.  v2:= temp @kind object;
  #L24f94c.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24f952.  v2:= temp @kind object;
  #L24f954.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24f95a.  v2:= temp @kind object;
  #L24f95c.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24f962.  throw v1;
  #L24f964.  call temp:= `baseUrl`(v4, v0) @signature `Lretrofit2/Retrofit$Builder;.baseUrl:(Lokhttp3/HttpUrl;)Lretrofit2/Retrofit$Builder;` @kind virtual;
  #L24f96a.  v1:= temp @kind object;
  #L24f96c.  return v1 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `baseUrl`(`retrofit2.Retrofit$Builder` v4 @kind this, `okhttp3.HttpUrl` v5 @kind object @name `baseUrl`) @signature `Lretrofit2/Retrofit$Builder;.baseUrl:(Lokhttp3/HttpUrl;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L24f980.  v1:= "baseUrl == null" @kind object;
  #L24f984.  call temp:= `checkNotNull`(v5, v1) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L24f98a.  call temp:= `pathSegments`(v5) @signature `Lokhttp3/HttpUrl;.pathSegments:()Ljava/util/List;` @kind virtual;
  #L24f990.  v0:= temp @kind object;
  #L24f992.  v1:= "" @kind object;
  #L24f996.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L24f99c.  v2:= temp;
  #L24f99e.  v2:= v2 + -1;
  #L24f9a2.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L24f9a8.  v2:= temp @kind object;
  #L24f9aa.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L24f9b0.  v1:= temp;
  #L24f9b2.  if v1 != 0 then goto L24f9e8;
  #L24f9b6.  v1:= new `java.lang.IllegalArgumentException`;
  #L24f9ba.  v2:= new `java.lang.StringBuilder`;
  #L24f9be.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24f9c4.  v3:= "baseUrl must end in /: " @kind object;
  #L24f9c8.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24f9ce.  v2:= temp @kind object;
  #L24f9d0.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24f9d6.  v2:= temp @kind object;
  #L24f9d8.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24f9de.  v2:= temp @kind object;
  #L24f9e0.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24f9e6.  throw v1;
  #L24f9e8.  v4.`retrofit2.Retrofit$Builder.baseUrl` @type ^`okhttp3.HttpUrl` := v5 @kind object;
  #L24f9ec.  return v4 @kind object;
}
procedure `retrofit2.Retrofit` `build`(`retrofit2.Retrofit$Builder` v7 @kind this) @signature `Lretrofit2/Retrofit$Builder;.build:()Lretrofit2/Retrofit;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L24fa00.  v0:= v7.`retrofit2.Retrofit$Builder.baseUrl` @type ^`okhttp3.HttpUrl` @kind object;
  #L24fa04.  if v0 != 0 then goto L24fa18;
  #L24fa08.  v0:= new `java.lang.IllegalStateException`;
  #L24fa0c.  v2:= "Base URL required." @kind object;
  #L24fa10.  call `<init>`(v0, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24fa16.  throw v0;
  #L24fa18.  v1:= v7.`retrofit2.Retrofit$Builder.callFactory` @type ^`okhttp3.Call$Factory` @kind object;
  #L24fa1c.  if v1 != 0 then goto L24fa2a;
  #L24fa20.  v1:= new `okhttp3.OkHttpClient`;
  #L24fa24.  call `<init>`(v1) @signature `Lokhttp3/OkHttpClient;.<init>:()V` @kind direct;
  #L24fa2a.  v5:= v7.`retrofit2.Retrofit$Builder.callbackExecutor` @type ^`java.util.concurrent.Executor` @kind object;
  #L24fa2e.  if v5 != 0 then goto L24fa3e;
  #L24fa32.  v0:= v7.`retrofit2.Retrofit$Builder.platform` @type ^`retrofit2.Platform` @kind object;
  #L24fa36.  call temp:= `defaultCallbackExecutor`(v0) @signature `Lretrofit2/Platform;.defaultCallbackExecutor:()Ljava/util/concurrent/Executor;` @kind virtual;
  #L24fa3c.  v5:= temp @kind object;
  #L24fa3e.  v4:= new `java.util.ArrayList`;
  #L24fa42.  v0:= v7.`retrofit2.Retrofit$Builder.adapterFactories` @type ^`java.util.List` @kind object;
  #L24fa46.  call `<init>`(v4, v0) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L24fa4c.  v0:= v7.`retrofit2.Retrofit$Builder.platform` @type ^`retrofit2.Platform` @kind object;
  #L24fa50.  call temp:= `defaultCallAdapterFactory`(v0, v5) @signature `Lretrofit2/Platform;.defaultCallAdapterFactory:(Ljava/util/concurrent/Executor;)Lretrofit2/CallAdapter$Factory;` @kind virtual;
  #L24fa56.  v0:= temp @kind object;
  #L24fa58.  call temp:= `add`(v4, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L24fa5e.  v3:= new `java.util.ArrayList`;
  #L24fa62.  v0:= v7.`retrofit2.Retrofit$Builder.converterFactories` @type ^`java.util.List` @kind object;
  #L24fa66.  call `<init>`(v3, v0) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L24fa6c.  v0:= new `retrofit2.Retrofit`;
  #L24fa70.  v2:= v7.`retrofit2.Retrofit$Builder.baseUrl` @type ^`okhttp3.HttpUrl` @kind object;
  #L24fa74.  v6:= v7.`retrofit2.Retrofit$Builder.validateEagerly` @type ^`boolean` @kind boolean;
  #L24fa78.  call `<init>`(v0, v1, v2, v3, v4, v5, v6) @signature `Lretrofit2/Retrofit;.<init>:(Lokhttp3/Call$Factory;Lokhttp3/HttpUrl;Ljava/util/List;Ljava/util/List;Ljava/util/concurrent/Executor;Z)V` @kind direct;
  #L24fa7e.  return v0 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `callFactory`(`retrofit2.Retrofit$Builder` v1 @kind this, `okhttp3.Call$Factory` v2 @kind object @name `factory`) @signature `Lretrofit2/Retrofit$Builder;.callFactory:(Lokhttp3/Call$Factory;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24fa90.  v0:= "factory == null" @kind object;
  #L24fa94.  call temp:= `checkNotNull`(v2, v0) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L24fa9a.  v0:= temp @kind object;
  #L24fa9c.  v0:= (`okhttp3.Call$Factory`) v0 @kind object;
  #L24faa0.  v1.`retrofit2.Retrofit$Builder.callFactory` @type ^`okhttp3.Call$Factory` := v0 @kind object;
  #L24faa4.  return v1 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `callbackExecutor`(`retrofit2.Retrofit$Builder` v1 @kind this, `java.util.concurrent.Executor` v2 @kind object @name `executor`) @signature `Lretrofit2/Retrofit$Builder;.callbackExecutor:(Ljava/util/concurrent/Executor;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24fab8.  v0:= "executor == null" @kind object;
  #L24fabc.  call temp:= `checkNotNull`(v2, v0) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L24fac2.  v0:= temp @kind object;
  #L24fac4.  v0:= (`java.util.concurrent.Executor`) v0 @kind object;
  #L24fac8.  v1.`retrofit2.Retrofit$Builder.callbackExecutor` @type ^`java.util.concurrent.Executor` := v0 @kind object;
  #L24facc.  return v1 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `client`(`retrofit2.Retrofit$Builder` v1 @kind this, `okhttp3.OkHttpClient` v2 @kind object @name `client`) @signature `Lretrofit2/Retrofit$Builder;.client:(Lokhttp3/OkHttpClient;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24fae0.  v0:= "client == null" @kind object;
  #L24fae4.  call temp:= `checkNotNull`(v2, v0) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L24faea.  v0:= temp @kind object;
  #L24faec.  v0:= (`okhttp3.Call$Factory`) v0 @kind object;
  #L24faf0.  call temp:= `callFactory`(v1, v0) @signature `Lretrofit2/Retrofit$Builder;.callFactory:(Lokhttp3/Call$Factory;)Lretrofit2/Retrofit$Builder;` @kind virtual;
  #L24faf6.  v0:= temp @kind object;
  #L24faf8.  return v0 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `validateEagerly`(`retrofit2.Retrofit$Builder` v0 @kind this, `boolean` v1 @name `validateEagerly`) @signature `Lretrofit2/Retrofit$Builder;.validateEagerly:(Z)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;

  #L24fb0c.  v0.`retrofit2.Retrofit$Builder.validateEagerly` @type ^`boolean` := v1 @kind boolean;
  #L24fb10.  return v0 @kind object;
}
