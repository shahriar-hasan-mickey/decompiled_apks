record `okhttp3.Handshake` @kind class @AccessFlag PUBLIC_FINAL {
  `okhttp3.CipherSuite` `okhttp3.Handshake.cipherSuite` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `okhttp3.Handshake.localCertificates` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `okhttp3.Handshake.peerCertificates` @AccessFlag PRIVATE_FINAL;
  `okhttp3.TlsVersion` `okhttp3.Handshake.tlsVersion` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.Handshake` v0 @kind this, `okhttp3.TlsVersion` v1 @kind object @name `tlsVersion`, `okhttp3.CipherSuite` v2 @kind object @name `cipherSuite`, `java.util.List` v3 @kind object, `java.util.List` v4 @kind object) @signature `Lokhttp3/Handshake;.<init>:(Lokhttp3/TlsVersion;Lokhttp3/CipherSuite;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L239af8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L239afe.  v0.`okhttp3.Handshake.tlsVersion` @type ^`okhttp3.TlsVersion` := v1 @kind object;
  #L239b02.  v0.`okhttp3.Handshake.cipherSuite` @type ^`okhttp3.CipherSuite` := v2 @kind object;
  #L239b06.  v0.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` := v3 @kind object;
  #L239b0a.  v0.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` := v4 @kind object;
  #L239b0e.  return @kind void;
}
procedure `okhttp3.Handshake` `get`(`javax.net.ssl.SSLSession` v11 @kind object @name `session`) @signature `Lokhttp3/Handshake;.get:(Ljavax/net/ssl/SSLSession;)Lokhttp3/Handshake;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L239b20.  call temp:= `getCipherSuite`(v11) @signature `Ljavax/net/ssl/SSLSession;.getCipherSuite:()Ljava/lang/String;` @kind interface;
  #L239b26.  v1:= temp @kind object;
  #L239b28.  if v1 != 0 then goto L239b3c;
  #L239b2c.  v9:= new `java.lang.IllegalStateException`;
  #L239b30.  v10:= "cipherSuite == null" @kind object;
  #L239b34.  call `<init>`(v9, v10) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L239b3a.  throw v9;
  #L239b3c.  call temp:= `forJavaName`(v1) @signature `Lokhttp3/CipherSuite;.forJavaName:(Ljava/lang/String;)Lokhttp3/CipherSuite;` @kind static;
  #L239b42.  v0:= temp @kind object;
  #L239b44.  call temp:= `getProtocol`(v11) @signature `Ljavax/net/ssl/SSLSession;.getProtocol:()Ljava/lang/String;` @kind interface;
  #L239b4a.  v8:= temp @kind object;
  #L239b4c.  if v8 != 0 then goto L239b60;
  #L239b50.  v9:= new `java.lang.IllegalStateException`;
  #L239b54.  v10:= "tlsVersion == null" @kind object;
  #L239b58.  call `<init>`(v9, v10) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L239b5e.  throw v9;
  #L239b60.  call temp:= `forJavaName`(v8) @signature `Lokhttp3/TlsVersion;.forJavaName:(Ljava/lang/String;)Lokhttp3/TlsVersion;` @kind static;
  #L239b66.  v7:= temp @kind object;
  #L239b68.  call temp:= `getPeerCertificates`(v11) @signature `Ljavax/net/ssl/SSLSession;.getPeerCertificates:()[Ljava/security/cert/Certificate;` @kind interface;
  #L239b6e.  v5:= temp @kind object;
  #L239b70.  if v5 == 0 then goto L239ba2;
  #L239b74.  call temp:= `immutableList`(v5) @signature `Lokhttp3/internal/Util;.immutableList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L239b7a.  v6:= temp @kind object;
  #L239b7c.  call temp:= `getLocalCertificates`(v11) @signature `Ljavax/net/ssl/SSLSession;.getLocalCertificates:()[Ljava/security/cert/Certificate;` @kind interface;
  #L239b82.  v3:= temp @kind object;
  #L239b84.  if v3 == 0 then goto L239bac;
  #L239b88.  call temp:= `immutableList`(v3) @signature `Lokhttp3/internal/Util;.immutableList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L239b8e.  v4:= temp @kind object;
  #L239b90.  v9:= new `okhttp3.Handshake`;
  #L239b94.  call `<init>`(v9, v7, v0, v6, v4) @signature `Lokhttp3/Handshake;.<init>:(Lokhttp3/TlsVersion;Lokhttp3/CipherSuite;Ljava/util/List;Ljava/util/List;)V` @kind direct;
  #L239b9a.  return v9 @kind object;
  #L239b9c.  v2:= Exception @type ^`javax.net.ssl.SSLPeerUnverifiedException` @kind object;
  #L239b9e.  v5:= 0I;
  #L239ba0.  goto L239b70;
  #L239ba2.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L239ba8.  v6:= temp @kind object;
  #L239baa.  goto L239b7c;
  #L239bac.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L239bb2.  v4:= temp @kind object;
  #L239bb4.  goto L239b90;
  catch `javax.net.ssl.SSLPeerUnverifiedException` @[L239b68..L239b6e] goto L239b9c;
}
procedure `okhttp3.Handshake` `get`(`okhttp3.TlsVersion` v3 @kind object @name `tlsVersion`, `okhttp3.CipherSuite` v4 @kind object @name `cipherSuite`, `java.util.List` v5 @kind object, `java.util.List` v6 @kind object) @signature `Lokhttp3/Handshake;.get:(Lokhttp3/TlsVersion;Lokhttp3/CipherSuite;Ljava/util/List;Ljava/util/List;)Lokhttp3/Handshake;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L239bd8.  if v4 != 0 then goto L239bec;
  #L239bdc.  v0:= new `java.lang.NullPointerException`;
  #L239be0.  v1:= "cipherSuite == null" @kind object;
  #L239be4.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L239bea.  throw v0;
  #L239bec.  v0:= new `okhttp3.Handshake`;
  #L239bf0.  call temp:= `immutableList`(v5) @signature `Lokhttp3/internal/Util;.immutableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L239bf6.  v1:= temp @kind object;
  #L239bf8.  call temp:= `immutableList`(v6) @signature `Lokhttp3/internal/Util;.immutableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L239bfe.  v2:= temp @kind object;
  #L239c00.  call `<init>`(v0, v3, v4, v1, v2) @signature `Lokhttp3/Handshake;.<init>:(Lokhttp3/TlsVersion;Lokhttp3/CipherSuite;Ljava/util/List;Ljava/util/List;)V` @kind direct;
  #L239c06.  return v0 @kind object;
}
procedure `okhttp3.CipherSuite` `cipherSuite`(`okhttp3.Handshake` v1 @kind this) @signature `Lokhttp3/Handshake;.cipherSuite:()Lokhttp3/CipherSuite;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L239c18.  v0:= v1.`okhttp3.Handshake.cipherSuite` @type ^`okhttp3.CipherSuite` @kind object;
  #L239c1c.  return v0 @kind object;
}
procedure `boolean` `equals`(`okhttp3.Handshake` v4 @kind this, `java.lang.Object` v5 @kind object @name `other`) @signature `Lokhttp3/Handshake;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L239c30.  v1:= 0I;
  #L239c32.  v2:= instanceof @variable v5 @type ^`okhttp3.Handshake` @kind boolean;
  #L239c36.  if v2 != 0 then goto L239c3c;
  #L239c3a.  return v1;
  #L239c3c.  v0:= v5 @kind object;
  #L239c3e.  v0:= (`okhttp3.Handshake`) v0 @kind object;
  #L239c42.  v2:= v4.`okhttp3.Handshake.cipherSuite` @type ^`okhttp3.CipherSuite` @kind object;
  #L239c46.  v3:= v0.`okhttp3.Handshake.cipherSuite` @type ^`okhttp3.CipherSuite` @kind object;
  #L239c4a.  call temp:= `equal`(v2, v3) @signature `Lokhttp3/internal/Util;.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L239c50.  v2:= temp;
  #L239c52.  if v2 == 0 then goto L239c3a;
  #L239c56.  v2:= v4.`okhttp3.Handshake.cipherSuite` @type ^`okhttp3.CipherSuite` @kind object;
  #L239c5a.  v3:= v0.`okhttp3.Handshake.cipherSuite` @type ^`okhttp3.CipherSuite` @kind object;
  #L239c5e.  call temp:= `equals`(v2, v3) @signature `Lokhttp3/CipherSuite;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L239c64.  v2:= temp;
  #L239c66.  if v2 == 0 then goto L239c3a;
  #L239c6a.  v2:= v4.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` @kind object;
  #L239c6e.  v3:= v0.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` @kind object;
  #L239c72.  call temp:= `equals`(v2, v3) @signature `Ljava/util/List;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L239c78.  v2:= temp;
  #L239c7a.  if v2 == 0 then goto L239c3a;
  #L239c7e.  v2:= v4.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` @kind object;
  #L239c82.  v3:= v0.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` @kind object;
  #L239c86.  call temp:= `equals`(v2, v3) @signature `Ljava/util/List;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L239c8c.  v2:= temp;
  #L239c8e.  if v2 == 0 then goto L239c3a;
  #L239c92.  v1:= 1I;
  #L239c94.  goto L239c3a;
}
procedure `int` `hashCode`(`okhttp3.Handshake` v3 @kind this) @signature `Lokhttp3/Handshake;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L239ca8.  v0:= 17I;
  #L239cac.  v1:= v3.`okhttp3.Handshake.tlsVersion` @type ^`okhttp3.TlsVersion` @kind object;
  #L239cb0.  if v1 == 0 then goto L239d02;
  #L239cb4.  v1:= v3.`okhttp3.Handshake.tlsVersion` @type ^`okhttp3.TlsVersion` @kind object;
  #L239cb8.  call temp:= `hashCode`(v1) @signature `Lokhttp3/TlsVersion;.hashCode:()I` @kind virtual;
  #L239cbe.  v1:= temp;
  #L239cc0.  v0:= v1 + 527;
  #L239cc4.  v1:= v0 * 31;
  #L239cc8.  v2:= v3.`okhttp3.Handshake.cipherSuite` @type ^`okhttp3.CipherSuite` @kind object;
  #L239ccc.  call temp:= `hashCode`(v2) @signature `Lokhttp3/CipherSuite;.hashCode:()I` @kind virtual;
  #L239cd2.  v2:= temp;
  #L239cd4.  v0:= v1 + v2 @kind int;
  #L239cd8.  v1:= v0 * 31;
  #L239cdc.  v2:= v3.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` @kind object;
  #L239ce0.  call temp:= `hashCode`(v2) @signature `Ljava/util/List;.hashCode:()I` @kind interface;
  #L239ce6.  v2:= temp;
  #L239ce8.  v0:= v1 + v2 @kind int;
  #L239cec.  v1:= v0 * 31;
  #L239cf0.  v2:= v3.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` @kind object;
  #L239cf4.  call temp:= `hashCode`(v2) @signature `Ljava/util/List;.hashCode:()I` @kind interface;
  #L239cfa.  v2:= temp;
  #L239cfc.  v0:= v1 + v2 @kind int;
  #L239d00.  return v0;
  #L239d02.  v1:= 0I;
  #L239d04.  goto L239cc0;
}
procedure `java.util.List` `localCertificates`(`okhttp3.Handshake` v1 @kind this) @signature `Lokhttp3/Handshake;.localCertificates:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L239d18.  v0:= v1.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` @kind object;
  #L239d1c.  return v0 @kind object;
}
procedure `java.security.Principal` `localPrincipal`(`okhttp3.Handshake` v2 @kind this) @signature `Lokhttp3/Handshake;.localPrincipal:()Ljava/security/Principal;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L239d30.  v0:= v2.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` @kind object;
  #L239d34.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L239d3a.  v0:= temp;
  #L239d3c.  if v0 != 0 then goto L239d5c;
  #L239d40.  v0:= v2.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` @kind object;
  #L239d44.  v1:= 0I;
  #L239d46.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L239d4c.  v0:= temp @kind object;
  #L239d4e.  v0:= (`java.security.cert.X509Certificate`) v0 @kind object;
  #L239d52.  call temp:= `getSubjectX500Principal`(v0) @signature `Ljava/security/cert/X509Certificate;.getSubjectX500Principal:()Ljavax/security/auth/x500/X500Principal;` @kind virtual;
  #L239d58.  v0:= temp @kind object;
  #L239d5a.  return v0 @kind object;
  #L239d5c.  v0:= 0I;
  #L239d5e.  goto L239d5a;
}
procedure `java.util.List` `peerCertificates`(`okhttp3.Handshake` v1 @kind this) @signature `Lokhttp3/Handshake;.peerCertificates:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L239d70.  v0:= v1.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` @kind object;
  #L239d74.  return v0 @kind object;
}
procedure `java.security.Principal` `peerPrincipal`(`okhttp3.Handshake` v2 @kind this) @signature `Lokhttp3/Handshake;.peerPrincipal:()Ljava/security/Principal;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L239d88.  v0:= v2.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` @kind object;
  #L239d8c.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L239d92.  v0:= temp;
  #L239d94.  if v0 != 0 then goto L239db4;
  #L239d98.  v0:= v2.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` @kind object;
  #L239d9c.  v1:= 0I;
  #L239d9e.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L239da4.  v0:= temp @kind object;
  #L239da6.  v0:= (`java.security.cert.X509Certificate`) v0 @kind object;
  #L239daa.  call temp:= `getSubjectX500Principal`(v0) @signature `Ljava/security/cert/X509Certificate;.getSubjectX500Principal:()Ljavax/security/auth/x500/X500Principal;` @kind virtual;
  #L239db0.  v0:= temp @kind object;
  #L239db2.  return v0 @kind object;
  #L239db4.  v0:= 0I;
  #L239db6.  goto L239db2;
}
procedure `okhttp3.TlsVersion` `tlsVersion`(`okhttp3.Handshake` v1 @kind this) @signature `Lokhttp3/Handshake;.tlsVersion:()Lokhttp3/TlsVersion;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L239dc8.  v0:= v1.`okhttp3.Handshake.tlsVersion` @type ^`okhttp3.TlsVersion` @kind object;
  #L239dcc.  return v0 @kind object;
}
