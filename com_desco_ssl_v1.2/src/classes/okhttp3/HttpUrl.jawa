record `okhttp3.HttpUrl` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String` `okhttp3.HttpUrl.fragment` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `okhttp3.HttpUrl.host` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `okhttp3.HttpUrl.password` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `okhttp3.HttpUrl.pathSegments` @AccessFlag PRIVATE_FINAL;
  `int` `okhttp3.HttpUrl.port` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `okhttp3.HttpUrl.queryNamesAndValues` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `okhttp3.HttpUrl.scheme` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `okhttp3.HttpUrl.url` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `okhttp3.HttpUrl.username` @AccessFlag PRIVATE_FINAL;
}
global `java.lang.String` `@@okhttp3.HttpUrl.FORM_ENCODE_SET` @AccessFlag STATIC_FINAL;
global `java.lang.String` `@@okhttp3.HttpUrl.FRAGMENT_ENCODE_SET` @AccessFlag STATIC_FINAL;
global `java.lang.String` `@@okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI` @AccessFlag STATIC_FINAL;
global `char`[] `@@okhttp3.HttpUrl.HEX_DIGITS` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@okhttp3.HttpUrl.PASSWORD_ENCODE_SET` @AccessFlag STATIC_FINAL;
global `java.lang.String` `@@okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET` @AccessFlag STATIC_FINAL;
global `java.lang.String` `@@okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI` @AccessFlag STATIC_FINAL;
global `java.lang.String` `@@okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET` @AccessFlag STATIC_FINAL;
global `java.lang.String` `@@okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI` @AccessFlag STATIC_FINAL;
global `java.lang.String` `@@okhttp3.HttpUrl.QUERY_ENCODE_SET` @AccessFlag STATIC_FINAL;
global `java.lang.String` `@@okhttp3.HttpUrl.USERNAME_ENCODE_SET` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/HttpUrl;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L23c13c.  v0:= 16I;
  #L23c140.  v0:= new `char`[v0];
  #L23c144.  goto L23c150;
  #L23c14a.  `@@okhttp3.HttpUrl.HEX_DIGITS` @type ^`char`[] := v0 @kind object;
  #L23c14e.  return @kind void;
  #L23c150.  v0:= (48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 65I, 66I, 67I, 68I, 69I, 70I) @kind object;
  #L23c177.  goto L23c14a;
}
procedure `void` `<init>`(`okhttp3.HttpUrl` v4 @kind this, `okhttp3.HttpUrl$Builder` v5 @kind object @name `builder`) @signature `Lokhttp3/HttpUrl;.<init>:(Lokhttp3/HttpUrl$Builder;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L23c188.  v1:= 0I;
  #L23c18a.  v3:= 0I;
  #L23c18c.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L23c192.  v0:= v5.`okhttp3.HttpUrl$Builder.scheme` @type ^`java.lang.String` @kind object;
  #L23c196.  v4.`okhttp3.HttpUrl.scheme` @type ^`java.lang.String` := v0 @kind object;
  #L23c19a.  v0:= v5.`okhttp3.HttpUrl$Builder.encodedUsername` @type ^`java.lang.String` @kind object;
  #L23c19e.  call temp:= `percentDecode`(v0, v3) @signature `Lokhttp3/HttpUrl;.percentDecode:(Ljava/lang/String;Z)Ljava/lang/String;` @kind static;
  #L23c1a4.  v0:= temp @kind object;
  #L23c1a6.  v4.`okhttp3.HttpUrl.username` @type ^`java.lang.String` := v0 @kind object;
  #L23c1aa.  v0:= v5.`okhttp3.HttpUrl$Builder.encodedPassword` @type ^`java.lang.String` @kind object;
  #L23c1ae.  call temp:= `percentDecode`(v0, v3) @signature `Lokhttp3/HttpUrl;.percentDecode:(Ljava/lang/String;Z)Ljava/lang/String;` @kind static;
  #L23c1b4.  v0:= temp @kind object;
  #L23c1b6.  v4.`okhttp3.HttpUrl.password` @type ^`java.lang.String` := v0 @kind object;
  #L23c1ba.  v0:= v5.`okhttp3.HttpUrl$Builder.host` @type ^`java.lang.String` @kind object;
  #L23c1be.  v4.`okhttp3.HttpUrl.host` @type ^`java.lang.String` := v0 @kind object;
  #L23c1c2.  call temp:= `effectivePort`(v5) @signature `Lokhttp3/HttpUrl$Builder;.effectivePort:()I` @kind virtual;
  #L23c1c8.  v0:= temp;
  #L23c1ca.  v4.`okhttp3.HttpUrl.port` @type ^`int` := v0;
  #L23c1ce.  v0:= v5.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L23c1d2.  call temp:= `percentDecode`(v4, v0, v3) @signature `Lokhttp3/HttpUrl;.percentDecode:(Ljava/util/List;Z)Ljava/util/List;` @kind direct;
  #L23c1d8.  v0:= temp @kind object;
  #L23c1da.  v4.`okhttp3.HttpUrl.pathSegments` @type ^`java.util.List` := v0 @kind object;
  #L23c1de.  v0:= v5.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` @kind object;
  #L23c1e2.  if v0 == 0 then goto L23c21e;
  #L23c1e6.  v0:= v5.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` @kind object;
  #L23c1ea.  v2:= 1I;
  #L23c1ec.  call temp:= `percentDecode`(v4, v0, v2) @signature `Lokhttp3/HttpUrl;.percentDecode:(Ljava/util/List;Z)Ljava/util/List;` @kind direct;
  #L23c1f2.  v0:= temp @kind object;
  #L23c1f4.  v4.`okhttp3.HttpUrl.queryNamesAndValues` @type ^`java.util.List` := v0 @kind object;
  #L23c1f8.  v0:= v5.`okhttp3.HttpUrl$Builder.encodedFragment` @type ^`java.lang.String` @kind object;
  #L23c1fc.  if v0 == 0 then goto L23c20c;
  #L23c200.  v0:= v5.`okhttp3.HttpUrl$Builder.encodedFragment` @type ^`java.lang.String` @kind object;
  #L23c204.  call temp:= `percentDecode`(v0, v3) @signature `Lokhttp3/HttpUrl;.percentDecode:(Ljava/lang/String;Z)Ljava/lang/String;` @kind static;
  #L23c20a.  v1:= temp @kind object;
  #L23c20c.  v4.`okhttp3.HttpUrl.fragment` @type ^`java.lang.String` := v1 @kind object;
  #L23c210.  call temp:= `toString`(v5) @signature `Lokhttp3/HttpUrl$Builder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23c216.  v0:= temp @kind object;
  #L23c218.  v4.`okhttp3.HttpUrl.url` @type ^`java.lang.String` := v0 @kind object;
  #L23c21c.  return @kind void;
  #L23c21e.  v0:= v1 @kind object;
  #L23c220.  goto L23c1f4;
}
procedure `void` `<init>`(`okhttp3.HttpUrl` v0 @kind this, `okhttp3.HttpUrl$Builder` v1 @kind object @name `x0`, `okhttp3.HttpUrl$1` v2 @kind object @name `x1`) @signature `Lokhttp3/HttpUrl;.<init>:(Lokhttp3/HttpUrl$Builder;Lokhttp3/HttpUrl$1;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L23c234.  call `<init>`(v0, v1) @signature `Lokhttp3/HttpUrl;.<init>:(Lokhttp3/HttpUrl$Builder;)V` @kind direct;
  #L23c23a.  return @kind void;
}
procedure `java.lang.String` `access$100`(`okhttp3.HttpUrl` v1 @kind object @name `x0`) @signature `Lokhttp3/HttpUrl;.access$100:(Lokhttp3/HttpUrl;)Ljava/lang/String;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L23c24c.  v0:= v1.`okhttp3.HttpUrl.scheme` @type ^`java.lang.String` @kind object;
  #L23c250.  return v0 @kind object;
}
procedure `java.lang.String` `access$200`(`okhttp3.HttpUrl` v1 @kind object @name `x0`) @signature `Lokhttp3/HttpUrl;.access$200:(Lokhttp3/HttpUrl;)Ljava/lang/String;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L23c264.  v0:= v1.`okhttp3.HttpUrl.host` @type ^`java.lang.String` @kind object;
  #L23c268.  return v0 @kind object;
}
procedure `int` `access$300`(`okhttp3.HttpUrl` v1 @kind object @name `x0`) @signature `Lokhttp3/HttpUrl;.access$300:(Lokhttp3/HttpUrl;)I` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L23c27c.  v0:= v1.`okhttp3.HttpUrl.port` @type ^`int`;
  #L23c280.  return v0;
}
procedure `java.lang.String` `canonicalize`(`java.lang.String` v10 @kind object @name `input`, `int` v11 @name `pos`, `int` v12 @name `limit`, `java.lang.String` v13 @kind object @name `encodeSet`, `boolean` v14 @name `alreadyEncoded`, `boolean` v15 @name `strict`, `boolean` v16 @name `plusIsSpace`, `boolean` v17 @name `asciiOnly`) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;IILjava/lang/String;ZZZZ)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L23c294.  v2:= v11;
  #L23c296.  if v2 >= v12 then goto L23c332;
  #L23c29a.  call temp:= `codePointAt`(v10, v2) @signature `Ljava/lang/String;.codePointAt:(I)I` @kind virtual;
  #L23c2a0.  v9:= temp;
  #L23c2a2.  v1:= 32I;
  #L23c2a6.  if v9 < v1 then goto L23c2f4;
  #L23c2aa.  v1:= 127I;
  #L23c2ae.  if v9 == v1 then goto L23c2f4;
  #L23c2b2.  v1:= 128I;
  #L23c2b6.  if v9 < v1 then goto L23c2be;
  #L23c2ba.  if v17 != 0 then goto L23c2f4;
  #L23c2be.  call temp:= `indexOf`(v13, v9) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L23c2c4.  v1:= temp;
  #L23c2c6.  v3:= -1I;
  #L23c2c8.  if v1 != v3 then goto L23c2f4;
  #L23c2cc.  v1:= 37I;
  #L23c2d0.  if v9 != v1 then goto L23c2e8;
  #L23c2d4.  if v14 == 0 then goto L23c2f4;
  #L23c2d8.  if v15 == 0 then goto L23c2e8;
  #L23c2dc.  call temp:= `percentEncoded`(v10, v2, v12) @signature `Lokhttp3/HttpUrl;.percentEncoded:(Ljava/lang/String;II)Z` @kind static;
  #L23c2e2.  v1:= temp;
  #L23c2e4.  if v1 == 0 then goto L23c2f4;
  #L23c2e8.  v1:= 43I;
  #L23c2ec.  if v9 != v1 then goto L23c326;
  #L23c2f0.  if v16 == 0 then goto L23c326;
  #L23c2f4.  v0:= new `okio.Buffer`;
  #L23c2f8.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L23c2fe.  call temp:= `writeUtf8`(v0, v10, v11, v2) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @kind virtual;
  #L23c304.  v1:= v10 @kind object;
  #L23c306.  v3:= v12;
  #L23c308.  v4:= v13 @kind object;
  #L23c30a.  v5:= v14;
  #L23c30c.  v6:= v15;
  #L23c30e.  v7:= v16;
  #L23c312.  v8:= v17;
  #L23c316.  call `canonicalize`(v0, v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lokhttp3/HttpUrl;.canonicalize:(Lokio/Buffer;Ljava/lang/String;IILjava/lang/String;ZZZZ)V` @kind static;
  #L23c31c.  call temp:= `readUtf8`(v0) @signature `Lokio/Buffer;.readUtf8:()Ljava/lang/String;` @kind virtual;
  #L23c322.  v1:= temp @kind object;
  #L23c324.  return v1 @kind object;
  #L23c326.  call temp:= `charCount`(v9) @signature `Ljava/lang/Character;.charCount:(I)I` @kind static;
  #L23c32c.  v1:= temp;
  #L23c32e.  v2:= v2 + v1 @kind int;
  #L23c330.  goto L23c296;
  #L23c332.  call temp:= `substring`(v10, v11, v12) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L23c338.  v1:= temp @kind object;
  #L23c33a.  goto L23c324;
}
procedure `java.lang.String` `canonicalize`(`java.lang.String` v8 @kind object @name `input`, `java.lang.String` v9 @kind object @name `encodeSet`, `boolean` v10 @name `alreadyEncoded`, `boolean` v11 @name `strict`, `boolean` v12 @name `plusIsSpace`, `boolean` v13 @name `asciiOnly`) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;Ljava/lang/String;ZZZZ)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L23c34c.  v1:= 0I;
  #L23c34e.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L23c354.  v2:= temp;
  #L23c356.  v0:= v8 @kind object;
  #L23c358.  v3:= v9 @kind object;
  #L23c35a.  v4:= v10;
  #L23c35c.  v5:= v11;
  #L23c35e.  v6:= v12;
  #L23c360.  v7:= v13;
  #L23c362.  call temp:= `canonicalize`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;IILjava/lang/String;ZZZZ)Ljava/lang/String;` @kind static;
  #L23c368.  v0:= temp @kind object;
  #L23c36a.  return v0 @kind object;
}
procedure `void` `canonicalize`(`okio.Buffer` v7 @kind object @name `out`, `java.lang.String` v8 @kind object @name `input`, `int` v9 @name `pos`, `int` v10 @name `limit`, `java.lang.String` v11 @kind object @name `encodeSet`, `boolean` v12 @name `alreadyEncoded`, `boolean` v13 @name `strict`, `boolean` v14 @name `plusIsSpace`, `boolean` v15 @name `asciiOnly`) @signature `Lokhttp3/HttpUrl;.canonicalize:(Lokio/Buffer;Ljava/lang/String;IILjava/lang/String;ZZZZ)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L23c37c.  v6:= 37I;
  #L23c380.  v3:= 0I;
  #L23c382.  v2:= v9;
  #L23c384.  if v2 >= v10 then goto L23c488;
  #L23c388.  call temp:= `codePointAt`(v8, v2) @signature `Ljava/lang/String;.codePointAt:(I)I` @kind virtual;
  #L23c38e.  v1:= temp;
  #L23c390.  if v12 == 0 then goto L23c3c0;
  #L23c394.  v4:= 9I;
  #L23c398.  if v1 == v4 then goto L23c3b4;
  #L23c39c.  v4:= 10I;
  #L23c3a0.  if v1 == v4 then goto L23c3b4;
  #L23c3a4.  v4:= 12I;
  #L23c3a8.  if v1 == v4 then goto L23c3b4;
  #L23c3ac.  v4:= 13I;
  #L23c3b0.  if v1 != v4 then goto L23c3c0;
  #L23c3b4.  call temp:= `charCount`(v1) @signature `Ljava/lang/Character;.charCount:(I)I` @kind static;
  #L23c3ba.  v4:= temp;
  #L23c3bc.  v2:= v2 + v4 @kind int;
  #L23c3be.  goto L23c384;
  #L23c3c0.  v4:= 43I;
  #L23c3c4.  if v1 != v4 then goto L23c3e2;
  #L23c3c8.  if v14 == 0 then goto L23c3e2;
  #L23c3cc.  if v12 == 0 then goto L23c3dc;
  #L23c3d0.  v4:= "+" @kind object;
  #L23c3d4.  call temp:= `writeUtf8`(v7, v4) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @kind virtual;
  #L23c3da.  goto L23c3b4;
  #L23c3dc.  v4:= "%2B" @kind object;
  #L23c3e0.  goto L23c3d4;
  #L23c3e2.  v4:= 32I;
  #L23c3e6.  if v1 < v4 then goto L23c424;
  #L23c3ea.  v4:= 127I;
  #L23c3ee.  if v1 == v4 then goto L23c424;
  #L23c3f2.  v4:= 128I;
  #L23c3f6.  if v1 < v4 then goto L23c3fe;
  #L23c3fa.  if v15 != 0 then goto L23c424;
  #L23c3fe.  call temp:= `indexOf`(v11, v1) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L23c404.  v4:= temp;
  #L23c406.  v5:= -1I;
  #L23c408.  if v4 != v5 then goto L23c424;
  #L23c40c.  if v1 != v6 then goto L23c480;
  #L23c410.  if v12 == 0 then goto L23c424;
  #L23c414.  if v13 == 0 then goto L23c480;
  #L23c418.  call temp:= `percentEncoded`(v8, v2, v10) @signature `Lokhttp3/HttpUrl;.percentEncoded:(Ljava/lang/String;II)Z` @kind static;
  #L23c41e.  v4:= temp;
  #L23c420.  if v4 != 0 then goto L23c480;
  #L23c424.  if v3 != 0 then goto L23c432;
  #L23c428.  v3:= new `okio.Buffer`;
  #L23c42c.  call `<init>`(v3) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L23c432.  call temp:= `writeUtf8CodePoint`(v3, v1) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/Buffer;` @kind virtual;
  #L23c438.  call temp:= `exhausted`(v3) @signature `Lokio/Buffer;.exhausted:()Z` @kind virtual;
  #L23c43e.  v4:= temp;
  #L23c440.  if v4 != 0 then goto L23c3b4;
  #L23c444.  call temp:= `readByte`(v3) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L23c44a.  v4:= temp;
  #L23c44c.  v0:= v4 ^& 255;
  #L23c450.  call temp:= `writeByte`(v7, v6) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L23c456.  v4:= `@@okhttp3.HttpUrl.HEX_DIGITS` @type ^`char`[] @kind object;
  #L23c45a.  v5:= v0 ^> 4;
  #L23c45e.  v5:= v5 ^& 15;
  #L23c462.  v4:= v4[v5] @kind char;
  #L23c466.  call temp:= `writeByte`(v7, v4) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L23c46c.  v4:= `@@okhttp3.HttpUrl.HEX_DIGITS` @type ^`char`[] @kind object;
  #L23c470.  v5:= v0 ^& 15;
  #L23c474.  v4:= v4[v5] @kind char;
  #L23c478.  call temp:= `writeByte`(v7, v4) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L23c47e.  goto L23c438;
  #L23c480.  call temp:= `writeUtf8CodePoint`(v7, v1) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/Buffer;` @kind virtual;
  #L23c486.  goto L23c3b4;
  #L23c488.  return @kind void;
}
procedure `int` `decodeHexDigit`(`char` v1 @name `c`) @signature `Lokhttp3/HttpUrl;.decodeHexDigit:(C)I` @AccessFlag STATIC {
    temp;
    v0;

  #L23c49c.  v0:= 48I;
  #L23c4a0.  if v1 < v0 then goto L23c4b2;
  #L23c4a4.  v0:= 57I;
  #L23c4a8.  if v1 > v0 then goto L23c4b2;
  #L23c4ac.  v0:= v1 + -48;
  #L23c4b0.  return v0;
  #L23c4b2.  v0:= 97I;
  #L23c4b6.  if v1 < v0 then goto L23c4cc;
  #L23c4ba.  v0:= 102I;
  #L23c4be.  if v1 > v0 then goto L23c4cc;
  #L23c4c2.  v0:= v1 + -97;
  #L23c4c6.  v0:= v0 + 10;
  #L23c4ca.  goto L23c4b0;
  #L23c4cc.  v0:= 65I;
  #L23c4d0.  if v1 < v0 then goto L23c4e6;
  #L23c4d4.  v0:= 70I;
  #L23c4d8.  if v1 > v0 then goto L23c4e6;
  #L23c4dc.  v0:= v1 + -65;
  #L23c4e0.  v0:= v0 + 10;
  #L23c4e4.  goto L23c4b0;
  #L23c4e6.  v0:= -1I;
  #L23c4e8.  goto L23c4b0;
}
procedure `int` `defaultPort`(`java.lang.String` v1 @kind object @name `scheme`) @signature `Lokhttp3/HttpUrl;.defaultPort:(Ljava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L23c4fc.  v0:= "http" @kind object;
  #L23c500.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L23c506.  v0:= temp;
  #L23c508.  if v0 == 0 then goto L23c512;
  #L23c50c.  v0:= 80I;
  #L23c510.  return v0;
  #L23c512.  v0:= "https" @kind object;
  #L23c516.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L23c51c.  v0:= temp;
  #L23c51e.  if v0 == 0 then goto L23c528;
  #L23c522.  v0:= 443I;
  #L23c526.  goto L23c510;
  #L23c528.  v0:= -1I;
  #L23c52a.  goto L23c510;
}
procedure `okhttp3.HttpUrl` `get`(`java.net.URI` v1 @kind object @name `uri`) @signature `Lokhttp3/HttpUrl;.get:(Ljava/net/URI;)Lokhttp3/HttpUrl;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L23c53c.  call temp:= `toString`(v1) @signature `Ljava/net/URI;.toString:()Ljava/lang/String;` @kind virtual;
  #L23c542.  v0:= temp @kind object;
  #L23c544.  call temp:= `parse`(v0) @signature `Lokhttp3/HttpUrl;.parse:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @kind static;
  #L23c54a.  v0:= temp @kind object;
  #L23c54c.  return v0 @kind object;
}
procedure `okhttp3.HttpUrl` `get`(`java.net.URL` v1 @kind object @name `url`) @signature `Lokhttp3/HttpUrl;.get:(Ljava/net/URL;)Lokhttp3/HttpUrl;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L23c560.  call temp:= `toString`(v1) @signature `Ljava/net/URL;.toString:()Ljava/lang/String;` @kind virtual;
  #L23c566.  v0:= temp @kind object;
  #L23c568.  call temp:= `parse`(v0) @signature `Lokhttp3/HttpUrl;.parse:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @kind static;
  #L23c56e.  v0:= temp @kind object;
  #L23c570.  return v0 @kind object;
}
procedure `okhttp3.HttpUrl` `getChecked`(`java.lang.String` v5 @kind object @name `url`) @signature `Lokhttp3/HttpUrl;.getChecked:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L23c584.  v0:= new `okhttp3.HttpUrl$Builder`;
  #L23c588.  call `<init>`(v0) @signature `Lokhttp3/HttpUrl$Builder;.<init>:()V` @kind direct;
  #L23c58e.  v2:= 0I;
  #L23c590.  call temp:= `parse`(v0, v2, v5) @signature `Lokhttp3/HttpUrl$Builder;.parse:(Lokhttp3/HttpUrl;Ljava/lang/String;)Lokhttp3/HttpUrl$Builder$ParseResult;` @kind virtual;
  #L23c596.  v1:= temp @kind object;
  #L23c598.  v2:= `@@okhttp3.HttpUrl$1.$SwitchMap$okhttp3$HttpUrl$Builder$ParseResult` @type ^`int`[] @kind object;
  #L23c59c.  call temp:= `ordinal`(v1) @signature `Lokhttp3/HttpUrl$Builder$ParseResult;.ordinal:()I` @kind virtual;
  #L23c5a2.  v3:= temp;
  #L23c5a4.  v2:= v2[v3];
  #L23c5a8.  goto L23c630;
  #L23c5ae.  v2:= new `java.net.MalformedURLException`;
  #L23c5b2.  v3:= new `java.lang.StringBuilder`;
  #L23c5b6.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23c5bc.  v4:= "Invalid URL: " @kind object;
  #L23c5c0.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c5c6.  v3:= temp @kind object;
  #L23c5c8.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c5ce.  v3:= temp @kind object;
  #L23c5d0.  v4:= " for " @kind object;
  #L23c5d4.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c5da.  v3:= temp @kind object;
  #L23c5dc.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c5e2.  v3:= temp @kind object;
  #L23c5e4.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23c5ea.  v3:= temp @kind object;
  #L23c5ec.  call `<init>`(v2, v3) @signature `Ljava/net/MalformedURLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23c5f2.  throw v2;
  #L23c5f4.  call temp:= `build`(v0) @signature `Lokhttp3/HttpUrl$Builder;.build:()Lokhttp3/HttpUrl;` @kind virtual;
  #L23c5fa.  v2:= temp @kind object;
  #L23c5fc.  return v2 @kind object;
  #L23c5fe.  v2:= new `java.net.UnknownHostException`;
  #L23c602.  v3:= new `java.lang.StringBuilder`;
  #L23c606.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23c60c.  v4:= "Invalid host: " @kind object;
  #L23c610.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c616.  v3:= temp @kind object;
  #L23c618.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c61e.  v3:= temp @kind object;
  #L23c620.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23c626.  v3:= temp @kind object;
  #L23c628.  call `<init>`(v2, v3) @signature `Ljava/net/UnknownHostException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23c62e.  throw v2;
  #L23c630.  switch v2
                  | 1 => goto L23c5f4
                  | 2 => goto L23c5fe
                  | else => goto L23c5ae;
}
procedure `void` `namesAndValuesToQueryString`(`java.lang.StringBuilder` v5 @kind object @name `out`, `java.util.List` v6 @kind object) @signature `Lokhttp3/HttpUrl;.namesAndValuesToQueryString:(Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L23c650.  v0:= 0I;
  #L23c652.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L23c658.  v2:= temp;
  #L23c65a.  if v0 >= v2 then goto L23c6a8;
  #L23c65e.  call temp:= `get`(v6, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L23c664.  v1:= temp @kind object;
  #L23c666.  v1:= (`java.lang.String`) v1 @kind object;
  #L23c66a.  v4:= v0 + 1;
  #L23c66e.  call temp:= `get`(v6, v4) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L23c674.  v3:= temp @kind object;
  #L23c676.  v3:= (`java.lang.String`) v3 @kind object;
  #L23c67a.  if v0 <= 0 then goto L23c688;
  #L23c67e.  v4:= 38I;
  #L23c682.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c688.  call temp:= `append`(v5, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c68e.  if v3 == 0 then goto L23c6a2;
  #L23c692.  v4:= 61I;
  #L23c696.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c69c.  call temp:= `append`(v5, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c6a2.  v0:= v0 + 2;
  #L23c6a6.  goto L23c65a;
  #L23c6a8.  return @kind void;
}
procedure `okhttp3.HttpUrl` `parse`(`java.lang.String` v4 @kind object @name `url`) @signature `Lokhttp3/HttpUrl;.parse:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L23c6bc.  v2:= 0I;
  #L23c6be.  v0:= new `okhttp3.HttpUrl$Builder`;
  #L23c6c2.  call `<init>`(v0) @signature `Lokhttp3/HttpUrl$Builder;.<init>:()V` @kind direct;
  #L23c6c8.  call temp:= `parse`(v0, v2, v4) @signature `Lokhttp3/HttpUrl$Builder;.parse:(Lokhttp3/HttpUrl;Ljava/lang/String;)Lokhttp3/HttpUrl$Builder$ParseResult;` @kind virtual;
  #L23c6ce.  v1:= temp @kind object;
  #L23c6d0.  v3:= `@@okhttp3.HttpUrl$Builder$ParseResult.SUCCESS` @type ^`okhttp3.HttpUrl$Builder$ParseResult` @kind object;
  #L23c6d4.  if v1 != v3 then goto L23c6e0;
  #L23c6d8.  call temp:= `build`(v0) @signature `Lokhttp3/HttpUrl$Builder;.build:()Lokhttp3/HttpUrl;` @kind virtual;
  #L23c6de.  v2:= temp @kind object;
  #L23c6e0.  return v2 @kind object;
}
procedure `void` `pathSegmentsToString`(`java.lang.StringBuilder` v3 @kind object @name `out`, `java.util.List` v4 @kind object) @signature `Lokhttp3/HttpUrl;.pathSegmentsToString:(Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L23c6f4.  v0:= 0I;
  #L23c6f6.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L23c6fc.  v1:= temp;
  #L23c6fe.  if v0 >= v1 then goto L23c724;
  #L23c702.  v2:= 47I;
  #L23c706.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c70c.  call temp:= `get`(v4, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L23c712.  v2:= temp @kind object;
  #L23c714.  v2:= (`java.lang.String`) v2 @kind object;
  #L23c718.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c71e.  v0:= v0 + 1;
  #L23c722.  goto L23c6fe;
  #L23c724.  return @kind void;
}
procedure `java.lang.String` `percentDecode`(`java.lang.String` v4 @kind object @name `encoded`, `int` v5 @name `pos`, `int` v6 @name `limit`, `boolean` v7 @name `plusIsSpace`) @signature `Lokhttp3/HttpUrl;.percentDecode:(Ljava/lang/String;IIZ)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L23c738.  v1:= v5;
  #L23c73a.  if v1 >= v6 then goto L23c780;
  #L23c73e.  call temp:= `charAt`(v4, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L23c744.  v0:= temp;
  #L23c746.  v3:= 37I;
  #L23c74a.  if v0 == v3 then goto L23c75a;
  #L23c74e.  v3:= 43I;
  #L23c752.  if v0 != v3 then goto L23c77a;
  #L23c756.  if v7 == 0 then goto L23c77a;
  #L23c75a.  v2:= new `okio.Buffer`;
  #L23c75e.  call `<init>`(v2) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L23c764.  call temp:= `writeUtf8`(v2, v4, v5, v1) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @kind virtual;
  #L23c76a.  call `percentDecode`(v2, v4, v1, v6, v7) @signature `Lokhttp3/HttpUrl;.percentDecode:(Lokio/Buffer;Ljava/lang/String;IIZ)V` @kind static;
  #L23c770.  call temp:= `readUtf8`(v2) @signature `Lokio/Buffer;.readUtf8:()Ljava/lang/String;` @kind virtual;
  #L23c776.  v3:= temp @kind object;
  #L23c778.  return v3 @kind object;
  #L23c77a.  v1:= v1 + 1;
  #L23c77e.  goto L23c73a;
  #L23c780.  call temp:= `substring`(v4, v5, v6) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L23c786.  v3:= temp @kind object;
  #L23c788.  goto L23c778;
}
procedure `java.lang.String` `percentDecode`(`java.lang.String` v2 @kind object @name `encoded`, `boolean` v3 @name `plusIsSpace`) @signature `Lokhttp3/HttpUrl;.percentDecode:(Ljava/lang/String;Z)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L23c79c.  v0:= 0I;
  #L23c79e.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L23c7a4.  v1:= temp;
  #L23c7a6.  call temp:= `percentDecode`(v2, v0, v1, v3) @signature `Lokhttp3/HttpUrl;.percentDecode:(Ljava/lang/String;IIZ)Ljava/lang/String;` @kind static;
  #L23c7ac.  v0:= temp @kind object;
  #L23c7ae.  return v0 @kind object;
}
procedure `java.util.List` `percentDecode`(`okhttp3.HttpUrl` v4 @kind this, `java.util.List` v5 @kind object, `boolean` v6 @name `plusIsSpace`) @signature `Lokhttp3/HttpUrl;.percentDecode:(Ljava/util/List;Z)Ljava/util/List;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L23c7c0.  v0:= new `java.util.ArrayList`;
  #L23c7c4.  call temp:= `size`(v5) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L23c7ca.  v2:= temp;
  #L23c7cc.  call `<init>`(v0, v2) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L23c7d2.  call temp:= `iterator`(v5) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L23c7d8.  v3:= temp @kind object;
  #L23c7da.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L23c7e0.  v2:= temp;
  #L23c7e2.  if v2 == 0 then goto L23c80a;
  #L23c7e6.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L23c7ec.  v1:= temp @kind object;
  #L23c7ee.  v1:= (`java.lang.String`) v1 @kind object;
  #L23c7f2.  if v1 == 0 then goto L23c806;
  #L23c7f6.  call temp:= `percentDecode`(v1, v6) @signature `Lokhttp3/HttpUrl;.percentDecode:(Ljava/lang/String;Z)Ljava/lang/String;` @kind static;
  #L23c7fc.  v2:= temp @kind object;
  #L23c7fe.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L23c804.  goto L23c7da;
  #L23c806.  v2:= 0I;
  #L23c808.  goto L23c7fe;
  #L23c80a.  call temp:= `unmodifiableList`(v0) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L23c810.  v2:= temp @kind object;
  #L23c812.  return v2 @kind object;
}
procedure `void` `percentDecode`(`okio.Buffer` v6 @kind object @name `out`, `java.lang.String` v7 @kind object @name `encoded`, `int` v8 @name `pos`, `int` v9 @name `limit`, `boolean` v10 @name `plusIsSpace`) @signature `Lokhttp3/HttpUrl;.percentDecode:(Lokio/Buffer;Ljava/lang/String;IIZ)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L23c824.  v5:= -1I;
  #L23c826.  v3:= v8;
  #L23c828.  if v3 >= v9 then goto L23c8b0;
  #L23c82c.  call temp:= `codePointAt`(v7, v3) @signature `Ljava/lang/String;.codePointAt:(I)I` @kind virtual;
  #L23c832.  v0:= temp;
  #L23c834.  v4:= 37I;
  #L23c838.  if v0 != v4 then goto L23c890;
  #L23c83c.  v4:= v3 + 2;
  #L23c840.  if v4 >= v9 then goto L23c890;
  #L23c844.  v4:= v3 + 1;
  #L23c848.  call temp:= `charAt`(v7, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L23c84e.  v4:= temp;
  #L23c850.  call temp:= `decodeHexDigit`(v4) @signature `Lokhttp3/HttpUrl;.decodeHexDigit:(C)I` @kind static;
  #L23c856.  v1:= temp;
  #L23c858.  v4:= v3 + 2;
  #L23c85c.  call temp:= `charAt`(v7, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L23c862.  v4:= temp;
  #L23c864.  call temp:= `decodeHexDigit`(v4) @signature `Lokhttp3/HttpUrl;.decodeHexDigit:(C)I` @kind static;
  #L23c86a.  v2:= temp;
  #L23c86c.  if v1 == v5 then goto L23c8a8;
  #L23c870.  if v2 == v5 then goto L23c8a8;
  #L23c874.  v4:= v1 ^< 4;
  #L23c878.  v4:= v4 + v2 @kind int;
  #L23c87a.  call temp:= `writeByte`(v6, v4) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L23c880.  v3:= v3 + 2;
  #L23c884.  call temp:= `charCount`(v0) @signature `Ljava/lang/Character;.charCount:(I)I` @kind static;
  #L23c88a.  v4:= temp;
  #L23c88c.  v3:= v3 + v4 @kind int;
  #L23c88e.  goto L23c828;
  #L23c890.  v4:= 43I;
  #L23c894.  if v0 != v4 then goto L23c8a8;
  #L23c898.  if v10 == 0 then goto L23c8a8;
  #L23c89c.  v4:= 32I;
  #L23c8a0.  call temp:= `writeByte`(v6, v4) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L23c8a6.  goto L23c884;
  #L23c8a8.  call temp:= `writeUtf8CodePoint`(v6, v0) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/Buffer;` @kind virtual;
  #L23c8ae.  goto L23c884;
  #L23c8b0.  return @kind void;
}
procedure `boolean` `percentEncoded`(`java.lang.String` v3 @kind object @name `encoded`, `int` v4 @name `pos`, `int` v5 @name `limit`) @signature `Lokhttp3/HttpUrl;.percentEncoded:(Ljava/lang/String;II)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L23c8c4.  v2:= -1I;
  #L23c8c6.  v0:= v4 + 2;
  #L23c8ca.  if v0 >= v5 then goto L23c912;
  #L23c8ce.  call temp:= `charAt`(v3, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L23c8d4.  v0:= temp;
  #L23c8d6.  v1:= 37I;
  #L23c8da.  if v0 != v1 then goto L23c912;
  #L23c8de.  v0:= v4 + 1;
  #L23c8e2.  call temp:= `charAt`(v3, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L23c8e8.  v0:= temp;
  #L23c8ea.  call temp:= `decodeHexDigit`(v0) @signature `Lokhttp3/HttpUrl;.decodeHexDigit:(C)I` @kind static;
  #L23c8f0.  v0:= temp;
  #L23c8f2.  if v0 == v2 then goto L23c912;
  #L23c8f6.  v0:= v4 + 2;
  #L23c8fa.  call temp:= `charAt`(v3, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L23c900.  v0:= temp;
  #L23c902.  call temp:= `decodeHexDigit`(v0) @signature `Lokhttp3/HttpUrl;.decodeHexDigit:(C)I` @kind static;
  #L23c908.  v0:= temp;
  #L23c90a.  if v0 == v2 then goto L23c912;
  #L23c90e.  v0:= 1I;
  #L23c910.  return v0;
  #L23c912.  v0:= 0I;
  #L23c914.  goto L23c910;
}
procedure `java.util.List` `queryStringToNamesAndValues`(`java.lang.String` v6 @kind object @name `encodedQuery`) @signature `Lokhttp3/HttpUrl;.queryStringToNamesAndValues:(Ljava/lang/String;)Ljava/util/List;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L23c928.  v5:= -1I;
  #L23c92a.  v3:= new `java.util.ArrayList`;
  #L23c92e.  call `<init>`(v3) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L23c934.  v2:= 0I;
  #L23c936.  call temp:= `length`(v6) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L23c93c.  v4:= temp;
  #L23c93e.  if v2 > v4 then goto L23c9ac;
  #L23c942.  v4:= 38I;
  #L23c946.  call temp:= `indexOf`(v6, v4, v2) @signature `Ljava/lang/String;.indexOf:(II)I` @kind virtual;
  #L23c94c.  v0:= temp;
  #L23c94e.  if v0 != v5 then goto L23c95a;
  #L23c952.  call temp:= `length`(v6) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L23c958.  v0:= temp;
  #L23c95a.  v4:= 61I;
  #L23c95e.  call temp:= `indexOf`(v6, v4, v2) @signature `Ljava/lang/String;.indexOf:(II)I` @kind virtual;
  #L23c964.  v1:= temp;
  #L23c966.  if v1 == v5 then goto L23c96e;
  #L23c96a.  if v1 <= v0 then goto L23c98a;
  #L23c96e.  call temp:= `substring`(v6, v2, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L23c974.  v4:= temp @kind object;
  #L23c976.  call temp:= `add`(v3, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L23c97c.  v4:= 0I;
  #L23c97e.  call temp:= `add`(v3, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L23c984.  v2:= v0 + 1;
  #L23c988.  goto L23c936;
  #L23c98a.  call temp:= `substring`(v6, v2, v1) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L23c990.  v4:= temp @kind object;
  #L23c992.  call temp:= `add`(v3, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L23c998.  v4:= v1 + 1;
  #L23c99c.  call temp:= `substring`(v6, v4, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L23c9a2.  v4:= temp @kind object;
  #L23c9a4.  call temp:= `add`(v3, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L23c9aa.  goto L23c984;
  #L23c9ac.  return v3 @kind object;
}
procedure `java.lang.String` `encodedFragment`(`okhttp3.HttpUrl` v3 @kind this) @signature `Lokhttp3/HttpUrl;.encodedFragment:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L23c9c0.  v1:= v3.`okhttp3.HttpUrl.fragment` @type ^`java.lang.String` @kind object;
  #L23c9c4.  if v1 != 0 then goto L23c9cc;
  #L23c9c8.  v1:= 0I;
  #L23c9ca.  return v1 @kind object;
  #L23c9cc.  v1:= v3.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L23c9d0.  v2:= 35I;
  #L23c9d4.  call temp:= `indexOf`(v1, v2) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L23c9da.  v1:= temp;
  #L23c9dc.  v0:= v1 + 1;
  #L23c9e0.  v1:= v3.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L23c9e4.  call temp:= `substring`(v1, v0) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L23c9ea.  v1:= temp @kind object;
  #L23c9ec.  goto L23c9ca;
}
procedure `java.lang.String` `encodedPassword`(`okhttp3.HttpUrl` v5 @kind this) @signature `Lokhttp3/HttpUrl;.encodedPassword:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L23ca00.  v2:= v5.`okhttp3.HttpUrl.password` @type ^`java.lang.String` @kind object;
  #L23ca04.  call temp:= `isEmpty`(v2) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L23ca0a.  v2:= temp;
  #L23ca0c.  if v2 == 0 then goto L23ca16;
  #L23ca10.  v2:= "" @kind object;
  #L23ca14.  return v2 @kind object;
  #L23ca16.  v2:= v5.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L23ca1a.  v3:= 58I;
  #L23ca1e.  v4:= v5.`okhttp3.HttpUrl.scheme` @type ^`java.lang.String` @kind object;
  #L23ca22.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L23ca28.  v4:= temp;
  #L23ca2a.  v4:= v4 + 3;
  #L23ca2e.  call temp:= `indexOf`(v2, v3, v4) @signature `Ljava/lang/String;.indexOf:(II)I` @kind virtual;
  #L23ca34.  v2:= temp;
  #L23ca36.  v1:= v2 + 1;
  #L23ca3a.  v2:= v5.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L23ca3e.  v3:= 64I;
  #L23ca42.  call temp:= `indexOf`(v2, v3) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L23ca48.  v0:= temp;
  #L23ca4a.  v2:= v5.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L23ca4e.  call temp:= `substring`(v2, v1, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L23ca54.  v2:= temp @kind object;
  #L23ca56.  goto L23ca14;
}
procedure `java.lang.String` `encodedPath`(`okhttp3.HttpUrl` v5 @kind this) @signature `Lokhttp3/HttpUrl;.encodedPath:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L23ca68.  v2:= v5.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L23ca6c.  v3:= 47I;
  #L23ca70.  v4:= v5.`okhttp3.HttpUrl.scheme` @type ^`java.lang.String` @kind object;
  #L23ca74.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L23ca7a.  v4:= temp;
  #L23ca7c.  v4:= v4 + 3;
  #L23ca80.  call temp:= `indexOf`(v2, v3, v4) @signature `Ljava/lang/String;.indexOf:(II)I` @kind virtual;
  #L23ca86.  v1:= temp;
  #L23ca88.  v2:= v5.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L23ca8c.  v3:= v5.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L23ca90.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L23ca96.  v3:= temp;
  #L23ca98.  v4:= "?#" @kind object;
  #L23ca9c.  call temp:= `delimiterOffset`(v2, v1, v3, v4) @signature `Lokhttp3/internal/Util;.delimiterOffset:(Ljava/lang/String;IILjava/lang/String;)I` @kind static;
  #L23caa2.  v0:= temp;
  #L23caa4.  v2:= v5.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L23caa8.  call temp:= `substring`(v2, v1, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L23caae.  v2:= temp @kind object;
  #L23cab0.  return v2 @kind object;
}
procedure `java.util.List` `encodedPathSegments`(`okhttp3.HttpUrl` v9 @kind this) @signature `Lokhttp3/HttpUrl;.encodedPathSegments:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L23cac4.  v8:= 47I;
  #L23cac8.  v5:= v9.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L23cacc.  v6:= v9.`okhttp3.HttpUrl.scheme` @type ^`java.lang.String` @kind object;
  #L23cad0.  call temp:= `length`(v6) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L23cad6.  v6:= temp;
  #L23cad8.  v6:= v6 + 3;
  #L23cadc.  call temp:= `indexOf`(v5, v8, v6) @signature `Ljava/lang/String;.indexOf:(II)I` @kind virtual;
  #L23cae2.  v2:= temp;
  #L23cae4.  v5:= v9.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L23cae8.  v6:= v9.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L23caec.  call temp:= `length`(v6) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L23caf2.  v6:= temp;
  #L23caf4.  v7:= "?#" @kind object;
  #L23caf8.  call temp:= `delimiterOffset`(v5, v2, v6, v7) @signature `Lokhttp3/internal/Util;.delimiterOffset:(Ljava/lang/String;IILjava/lang/String;)I` @kind static;
  #L23cafe.  v1:= temp;
  #L23cb00.  v3:= new `java.util.ArrayList`;
  #L23cb04.  call `<init>`(v3) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L23cb0a.  v0:= v2;
  #L23cb0c.  if v0 >= v1 then goto L23cb36;
  #L23cb10.  v0:= v0 + 1;
  #L23cb14.  v5:= v9.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L23cb18.  call temp:= `delimiterOffset`(v5, v0, v1, v8) @signature `Lokhttp3/internal/Util;.delimiterOffset:(Ljava/lang/String;IIC)I` @kind static;
  #L23cb1e.  v4:= temp;
  #L23cb20.  v5:= v9.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L23cb24.  call temp:= `substring`(v5, v0, v4) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L23cb2a.  v5:= temp @kind object;
  #L23cb2c.  call temp:= `add`(v3, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L23cb32.  v0:= v4;
  #L23cb34.  goto L23cb0c;
  #L23cb36.  return v3 @kind object;
}
procedure `java.lang.String` `encodedQuery`(`okhttp3.HttpUrl` v6 @kind this) @signature `Lokhttp3/HttpUrl;.encodedQuery:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L23cb48.  v2:= v6.`okhttp3.HttpUrl.queryNamesAndValues` @type ^`java.util.List` @kind object;
  #L23cb4c.  if v2 != 0 then goto L23cb54;
  #L23cb50.  v2:= 0I;
  #L23cb52.  return v2 @kind object;
  #L23cb54.  v2:= v6.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L23cb58.  v3:= 63I;
  #L23cb5c.  call temp:= `indexOf`(v2, v3) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L23cb62.  v2:= temp;
  #L23cb64.  v1:= v2 + 1;
  #L23cb68.  v2:= v6.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L23cb6c.  v3:= v1 + 1;
  #L23cb70.  v4:= v6.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L23cb74.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L23cb7a.  v4:= temp;
  #L23cb7c.  v5:= 35I;
  #L23cb80.  call temp:= `delimiterOffset`(v2, v3, v4, v5) @signature `Lokhttp3/internal/Util;.delimiterOffset:(Ljava/lang/String;IIC)I` @kind static;
  #L23cb86.  v0:= temp;
  #L23cb88.  v2:= v6.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L23cb8c.  call temp:= `substring`(v2, v1, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L23cb92.  v2:= temp @kind object;
  #L23cb94.  goto L23cb52;
}
procedure `java.lang.String` `encodedUsername`(`okhttp3.HttpUrl` v5 @kind this) @signature `Lokhttp3/HttpUrl;.encodedUsername:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L23cba8.  v2:= v5.`okhttp3.HttpUrl.username` @type ^`java.lang.String` @kind object;
  #L23cbac.  call temp:= `isEmpty`(v2) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L23cbb2.  v2:= temp;
  #L23cbb4.  if v2 == 0 then goto L23cbbe;
  #L23cbb8.  v2:= "" @kind object;
  #L23cbbc.  return v2 @kind object;
  #L23cbbe.  v2:= v5.`okhttp3.HttpUrl.scheme` @type ^`java.lang.String` @kind object;
  #L23cbc2.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L23cbc8.  v2:= temp;
  #L23cbca.  v1:= v2 + 3;
  #L23cbce.  v2:= v5.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L23cbd2.  v3:= v5.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L23cbd6.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L23cbdc.  v3:= temp;
  #L23cbde.  v4:= ":@" @kind object;
  #L23cbe2.  call temp:= `delimiterOffset`(v2, v1, v3, v4) @signature `Lokhttp3/internal/Util;.delimiterOffset:(Ljava/lang/String;IILjava/lang/String;)I` @kind static;
  #L23cbe8.  v0:= temp;
  #L23cbea.  v2:= v5.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L23cbee.  call temp:= `substring`(v2, v1, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L23cbf4.  v2:= temp @kind object;
  #L23cbf6.  goto L23cbbc;
}
procedure `boolean` `equals`(`okhttp3.HttpUrl` v2 @kind this, `java.lang.Object` v3 @kind object @name `o`) @signature `Lokhttp3/HttpUrl;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23cc08.  v0:= instanceof @variable v3 @type ^`okhttp3.HttpUrl` @kind boolean;
  #L23cc0c.  if v0 == 0 then goto L23cc2c;
  #L23cc10.  v3:= (`okhttp3.HttpUrl`) v3 @kind object;
  #L23cc14.  v0:= v3.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L23cc18.  v1:= v2.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L23cc1c.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L23cc22.  v0:= temp;
  #L23cc24.  if v0 == 0 then goto L23cc2c;
  #L23cc28.  v0:= 1I;
  #L23cc2a.  return v0;
  #L23cc2c.  v0:= 0I;
  #L23cc2e.  goto L23cc2a;
}
procedure `java.lang.String` `fragment`(`okhttp3.HttpUrl` v1 @kind this) @signature `Lokhttp3/HttpUrl;.fragment:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23cc40.  v0:= v1.`okhttp3.HttpUrl.fragment` @type ^`java.lang.String` @kind object;
  #L23cc44.  return v0 @kind object;
}
procedure `int` `hashCode`(`okhttp3.HttpUrl` v1 @kind this) @signature `Lokhttp3/HttpUrl;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23cc58.  v0:= v1.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L23cc5c.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L23cc62.  v0:= temp;
  #L23cc64.  return v0;
}
procedure `java.lang.String` `host`(`okhttp3.HttpUrl` v1 @kind this) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23cc78.  v0:= v1.`okhttp3.HttpUrl.host` @type ^`java.lang.String` @kind object;
  #L23cc7c.  return v0 @kind object;
}
procedure `boolean` `isHttps`(`okhttp3.HttpUrl` v2 @kind this) @signature `Lokhttp3/HttpUrl;.isHttps:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23cc90.  v0:= v2.`okhttp3.HttpUrl.scheme` @type ^`java.lang.String` @kind object;
  #L23cc94.  v1:= "https" @kind object;
  #L23cc98.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L23cc9e.  v0:= temp;
  #L23cca0.  return v0;
}
procedure `okhttp3.HttpUrl$Builder` `newBuilder`(`okhttp3.HttpUrl` v3 @kind this) @signature `Lokhttp3/HttpUrl;.newBuilder:()Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L23ccb4.  v0:= new `okhttp3.HttpUrl$Builder`;
  #L23ccb8.  call `<init>`(v0) @signature `Lokhttp3/HttpUrl$Builder;.<init>:()V` @kind direct;
  #L23ccbe.  v1:= v3.`okhttp3.HttpUrl.scheme` @type ^`java.lang.String` @kind object;
  #L23ccc2.  v0.`okhttp3.HttpUrl$Builder.scheme` @type ^`java.lang.String` := v1 @kind object;
  #L23ccc6.  call temp:= `encodedUsername`(v3) @signature `Lokhttp3/HttpUrl;.encodedUsername:()Ljava/lang/String;` @kind virtual;
  #L23cccc.  v1:= temp @kind object;
  #L23ccce.  v0.`okhttp3.HttpUrl$Builder.encodedUsername` @type ^`java.lang.String` := v1 @kind object;
  #L23ccd2.  call temp:= `encodedPassword`(v3) @signature `Lokhttp3/HttpUrl;.encodedPassword:()Ljava/lang/String;` @kind virtual;
  #L23ccd8.  v1:= temp @kind object;
  #L23ccda.  v0.`okhttp3.HttpUrl$Builder.encodedPassword` @type ^`java.lang.String` := v1 @kind object;
  #L23ccde.  v1:= v3.`okhttp3.HttpUrl.host` @type ^`java.lang.String` @kind object;
  #L23cce2.  v0.`okhttp3.HttpUrl$Builder.host` @type ^`java.lang.String` := v1 @kind object;
  #L23cce6.  v1:= v3.`okhttp3.HttpUrl.port` @type ^`int`;
  #L23ccea.  v2:= v3.`okhttp3.HttpUrl.scheme` @type ^`java.lang.String` @kind object;
  #L23ccee.  call temp:= `defaultPort`(v2) @signature `Lokhttp3/HttpUrl;.defaultPort:(Ljava/lang/String;)I` @kind static;
  #L23ccf4.  v2:= temp;
  #L23ccf6.  if v1 == v2 then goto L23cd3a;
  #L23ccfa.  v1:= v3.`okhttp3.HttpUrl.port` @type ^`int`;
  #L23ccfe.  v0.`okhttp3.HttpUrl$Builder.port` @type ^`int` := v1;
  #L23cd02.  v1:= v0.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L23cd06.  call `clear`(v1) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L23cd0c.  v1:= v0.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L23cd10.  call temp:= `encodedPathSegments`(v3) @signature `Lokhttp3/HttpUrl;.encodedPathSegments:()Ljava/util/List;` @kind virtual;
  #L23cd16.  v2:= temp @kind object;
  #L23cd18.  call temp:= `addAll`(v1, v2) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L23cd1e.  call temp:= `encodedQuery`(v3) @signature `Lokhttp3/HttpUrl;.encodedQuery:()Ljava/lang/String;` @kind virtual;
  #L23cd24.  v1:= temp @kind object;
  #L23cd26.  call temp:= `encodedQuery`(v0, v1) @signature `Lokhttp3/HttpUrl$Builder;.encodedQuery:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @kind virtual;
  #L23cd2c.  call temp:= `encodedFragment`(v3) @signature `Lokhttp3/HttpUrl;.encodedFragment:()Ljava/lang/String;` @kind virtual;
  #L23cd32.  v1:= temp @kind object;
  #L23cd34.  v0.`okhttp3.HttpUrl$Builder.encodedFragment` @type ^`java.lang.String` := v1 @kind object;
  #L23cd38.  return v0 @kind object;
  #L23cd3a.  v1:= -1I;
  #L23cd3c.  goto L23ccfe;
}
procedure `okhttp3.HttpUrl$Builder` `newBuilder`(`okhttp3.HttpUrl` v3 @kind this, `java.lang.String` v4 @kind object @name `link`) @signature `Lokhttp3/HttpUrl;.newBuilder:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L23cd50.  v0:= new `okhttp3.HttpUrl$Builder`;
  #L23cd54.  call `<init>`(v0) @signature `Lokhttp3/HttpUrl$Builder;.<init>:()V` @kind direct;
  #L23cd5a.  call temp:= `parse`(v0, v3, v4) @signature `Lokhttp3/HttpUrl$Builder;.parse:(Lokhttp3/HttpUrl;Ljava/lang/String;)Lokhttp3/HttpUrl$Builder$ParseResult;` @kind virtual;
  #L23cd60.  v1:= temp @kind object;
  #L23cd62.  v2:= `@@okhttp3.HttpUrl$Builder$ParseResult.SUCCESS` @type ^`okhttp3.HttpUrl$Builder$ParseResult` @kind object;
  #L23cd66.  if v1 != v2 then goto L23cd6c;
  #L23cd6a.  return v0 @kind object;
  #L23cd6c.  v0:= 0I;
  #L23cd6e.  goto L23cd6a;
}
procedure `java.lang.String` `password`(`okhttp3.HttpUrl` v1 @kind this) @signature `Lokhttp3/HttpUrl;.password:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23cd80.  v0:= v1.`okhttp3.HttpUrl.password` @type ^`java.lang.String` @kind object;
  #L23cd84.  return v0 @kind object;
}
procedure `java.util.List` `pathSegments`(`okhttp3.HttpUrl` v1 @kind this) @signature `Lokhttp3/HttpUrl;.pathSegments:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23cd98.  v0:= v1.`okhttp3.HttpUrl.pathSegments` @type ^`java.util.List` @kind object;
  #L23cd9c.  return v0 @kind object;
}
procedure `int` `pathSize`(`okhttp3.HttpUrl` v1 @kind this) @signature `Lokhttp3/HttpUrl;.pathSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23cdb0.  v0:= v1.`okhttp3.HttpUrl.pathSegments` @type ^`java.util.List` @kind object;
  #L23cdb4.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L23cdba.  v0:= temp;
  #L23cdbc.  return v0;
}
procedure `int` `port`(`okhttp3.HttpUrl` v1 @kind this) @signature `Lokhttp3/HttpUrl;.port:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23cdd0.  v0:= v1.`okhttp3.HttpUrl.port` @type ^`int`;
  #L23cdd4.  return v0;
}
procedure `java.lang.String` `query`(`okhttp3.HttpUrl` v2 @kind this) @signature `Lokhttp3/HttpUrl;.query:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23cde8.  v1:= v2.`okhttp3.HttpUrl.queryNamesAndValues` @type ^`java.util.List` @kind object;
  #L23cdec.  if v1 != 0 then goto L23cdf4;
  #L23cdf0.  v1:= 0I;
  #L23cdf2.  return v1 @kind object;
  #L23cdf4.  v0:= new `java.lang.StringBuilder`;
  #L23cdf8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23cdfe.  v1:= v2.`okhttp3.HttpUrl.queryNamesAndValues` @type ^`java.util.List` @kind object;
  #L23ce02.  call `namesAndValuesToQueryString`(v0, v1) @signature `Lokhttp3/HttpUrl;.namesAndValuesToQueryString:(Ljava/lang/StringBuilder;Ljava/util/List;)V` @kind static;
  #L23ce08.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23ce0e.  v1:= temp @kind object;
  #L23ce10.  goto L23cdf2;
}
procedure `java.lang.String` `queryParameter`(`okhttp3.HttpUrl` v4 @kind this, `java.lang.String` v5 @kind object @name `name`) @signature `Lokhttp3/HttpUrl;.queryParameter:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L23ce24.  v2:= 0I;
  #L23ce26.  v3:= v4.`okhttp3.HttpUrl.queryNamesAndValues` @type ^`java.util.List` @kind object;
  #L23ce2a.  if v3 != 0 then goto L23ce30;
  #L23ce2e.  return v2 @kind object;
  #L23ce30.  v0:= 0I;
  #L23ce32.  v3:= v4.`okhttp3.HttpUrl.queryNamesAndValues` @type ^`java.util.List` @kind object;
  #L23ce36.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L23ce3c.  v1:= temp;
  #L23ce3e.  if v0 >= v1 then goto L23ce2e;
  #L23ce42.  v3:= v4.`okhttp3.HttpUrl.queryNamesAndValues` @type ^`java.util.List` @kind object;
  #L23ce46.  call temp:= `get`(v3, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L23ce4c.  v3:= temp @kind object;
  #L23ce4e.  call temp:= `equals`(v5, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L23ce54.  v3:= temp;
  #L23ce56.  if v3 == 0 then goto L23ce70;
  #L23ce5a.  v2:= v4.`okhttp3.HttpUrl.queryNamesAndValues` @type ^`java.util.List` @kind object;
  #L23ce5e.  v3:= v0 + 1;
  #L23ce62.  call temp:= `get`(v2, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L23ce68.  v2:= temp @kind object;
  #L23ce6a.  v2:= (`java.lang.String`) v2 @kind object;
  #L23ce6e.  goto L23ce2e;
  #L23ce70.  v0:= v0 + 2;
  #L23ce74.  goto L23ce3e;
}
procedure `java.lang.String` `queryParameterName`(`okhttp3.HttpUrl` v2 @kind this, `int` v3 @name `index`) @signature `Lokhttp3/HttpUrl;.queryParameterName:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23ce88.  v0:= v2.`okhttp3.HttpUrl.queryNamesAndValues` @type ^`java.util.List` @kind object;
  #L23ce8c.  v1:= v3 * 2;
  #L23ce90.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L23ce96.  v0:= temp @kind object;
  #L23ce98.  v0:= (`java.lang.String`) v0 @kind object;
  #L23ce9c.  return v0 @kind object;
}
procedure `java.util.Set` `queryParameterNames`(`okhttp3.HttpUrl` v4 @kind this) @signature `Lokhttp3/HttpUrl;.queryParameterNames:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L23ceb0.  v3:= v4.`okhttp3.HttpUrl.queryNamesAndValues` @type ^`java.util.List` @kind object;
  #L23ceb4.  if v3 != 0 then goto L23cec2;
  #L23ceb8.  call temp:= `emptySet`() @signature `Ljava/util/Collections;.emptySet:()Ljava/util/Set;` @kind static;
  #L23cebe.  v3:= temp @kind object;
  #L23cec0.  return v3 @kind object;
  #L23cec2.  v1:= new `java.util.LinkedHashSet`;
  #L23cec6.  call `<init>`(v1) @signature `Ljava/util/LinkedHashSet;.<init>:()V` @kind direct;
  #L23cecc.  v0:= 0I;
  #L23cece.  v3:= v4.`okhttp3.HttpUrl.queryNamesAndValues` @type ^`java.util.List` @kind object;
  #L23ced2.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L23ced8.  v2:= temp;
  #L23ceda.  if v0 >= v2 then goto L23cef6;
  #L23cede.  v3:= v4.`okhttp3.HttpUrl.queryNamesAndValues` @type ^`java.util.List` @kind object;
  #L23cee2.  call temp:= `get`(v3, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L23cee8.  v3:= temp @kind object;
  #L23ceea.  call temp:= `add`(v1, v3) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L23cef0.  v0:= v0 + 2;
  #L23cef4.  goto L23ceda;
  #L23cef6.  call temp:= `unmodifiableSet`(v1) @signature `Ljava/util/Collections;.unmodifiableSet:(Ljava/util/Set;)Ljava/util/Set;` @kind static;
  #L23cefc.  v3:= temp @kind object;
  #L23cefe.  goto L23cec0;
}
procedure `java.lang.String` `queryParameterValue`(`okhttp3.HttpUrl` v2 @kind this, `int` v3 @name `index`) @signature `Lokhttp3/HttpUrl;.queryParameterValue:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23cf10.  v0:= v2.`okhttp3.HttpUrl.queryNamesAndValues` @type ^`java.util.List` @kind object;
  #L23cf14.  v1:= v3 * 2;
  #L23cf18.  v1:= v1 + 1;
  #L23cf1c.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L23cf22.  v0:= temp @kind object;
  #L23cf24.  v0:= (`java.lang.String`) v0 @kind object;
  #L23cf28.  return v0 @kind object;
}
procedure `java.util.List` `queryParameterValues`(`okhttp3.HttpUrl` v5 @kind this, `java.lang.String` v6 @kind object @name `name`) @signature `Lokhttp3/HttpUrl;.queryParameterValues:(Ljava/lang/String;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L23cf3c.  v3:= v5.`okhttp3.HttpUrl.queryNamesAndValues` @type ^`java.util.List` @kind object;
  #L23cf40.  if v3 != 0 then goto L23cf4e;
  #L23cf44.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L23cf4a.  v3:= temp @kind object;
  #L23cf4c.  return v3 @kind object;
  #L23cf4e.  v1:= new `java.util.ArrayList`;
  #L23cf52.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L23cf58.  v0:= 0I;
  #L23cf5a.  v3:= v5.`okhttp3.HttpUrl.queryNamesAndValues` @type ^`java.util.List` @kind object;
  #L23cf5e.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L23cf64.  v2:= temp;
  #L23cf66.  if v0 >= v2 then goto L23cf9e;
  #L23cf6a.  v3:= v5.`okhttp3.HttpUrl.queryNamesAndValues` @type ^`java.util.List` @kind object;
  #L23cf6e.  call temp:= `get`(v3, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L23cf74.  v3:= temp @kind object;
  #L23cf76.  call temp:= `equals`(v6, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L23cf7c.  v3:= temp;
  #L23cf7e.  if v3 == 0 then goto L23cf98;
  #L23cf82.  v3:= v5.`okhttp3.HttpUrl.queryNamesAndValues` @type ^`java.util.List` @kind object;
  #L23cf86.  v4:= v0 + 1;
  #L23cf8a.  call temp:= `get`(v3, v4) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L23cf90.  v3:= temp @kind object;
  #L23cf92.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L23cf98.  v0:= v0 + 2;
  #L23cf9c.  goto L23cf66;
  #L23cf9e.  call temp:= `unmodifiableList`(v1) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L23cfa4.  v3:= temp @kind object;
  #L23cfa6.  goto L23cf4c;
}
procedure `int` `querySize`(`okhttp3.HttpUrl` v1 @kind this) @signature `Lokhttp3/HttpUrl;.querySize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23cfb8.  v0:= v1.`okhttp3.HttpUrl.queryNamesAndValues` @type ^`java.util.List` @kind object;
  #L23cfbc.  if v0 == 0 then goto L23cfd2;
  #L23cfc0.  v0:= v1.`okhttp3.HttpUrl.queryNamesAndValues` @type ^`java.util.List` @kind object;
  #L23cfc4.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L23cfca.  v0:= temp;
  #L23cfcc.  v0:= v0 / 2;
  #L23cfd0.  return v0;
  #L23cfd2.  v0:= 0I;
  #L23cfd4.  goto L23cfd0;
}
procedure `okhttp3.HttpUrl` `resolve`(`okhttp3.HttpUrl` v2 @kind this, `java.lang.String` v3 @kind object @name `link`) @signature `Lokhttp3/HttpUrl;.resolve:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23cfe8.  call temp:= `newBuilder`(v2, v3) @signature `Lokhttp3/HttpUrl;.newBuilder:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @kind virtual;
  #L23cfee.  v0:= temp @kind object;
  #L23cff0.  if v0 == 0 then goto L23cffe;
  #L23cff4.  call temp:= `build`(v0) @signature `Lokhttp3/HttpUrl$Builder;.build:()Lokhttp3/HttpUrl;` @kind virtual;
  #L23cffa.  v1:= temp @kind object;
  #L23cffc.  return v1 @kind object;
  #L23cffe.  v1:= 0I;
  #L23d000.  goto L23cffc;
}
procedure `java.lang.String` `scheme`(`okhttp3.HttpUrl` v1 @kind this) @signature `Lokhttp3/HttpUrl;.scheme:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23d014.  v0:= v1.`okhttp3.HttpUrl.scheme` @type ^`java.lang.String` @kind object;
  #L23d018.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okhttp3.HttpUrl` v1 @kind this) @signature `Lokhttp3/HttpUrl;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23d02c.  v0:= v1.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L23d030.  return v0 @kind object;
}
procedure `java.net.URI` `uri`(`okhttp3.HttpUrl` v6 @kind this) @signature `Lokhttp3/HttpUrl;.uri:()Ljava/net/URI;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L23d044.  call temp:= `newBuilder`(v6) @signature `Lokhttp3/HttpUrl;.newBuilder:()Lokhttp3/HttpUrl$Builder;` @kind virtual;
  #L23d04a.  v4:= temp @kind object;
  #L23d04c.  call temp:= `reencodeForUri`(v4) @signature `Lokhttp3/HttpUrl$Builder;.reencodeForUri:()Lokhttp3/HttpUrl$Builder;` @kind virtual;
  #L23d052.  v4:= temp @kind object;
  #L23d054.  call temp:= `toString`(v4) @signature `Lokhttp3/HttpUrl$Builder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23d05a.  v3:= temp @kind object;
  #L23d05c.  v4:= new `java.net.URI`;
  #L23d060.  call `<init>`(v4, v3) @signature `Ljava/net/URI;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23d066.  return v4 @kind object;
  #L23d068.  v0:= Exception @type ^`java.net.URISyntaxException` @kind object;
  #L23d06a.  v4:= "[\\u0000-\\u001F\\u007F-\\u009F\\p{javaWhitespace}]" @kind object;
  #L23d06e.  v5:= "" @kind object;
  #L23d072.  call temp:= `replaceAll`(v3, v4, v5) @signature `Ljava/lang/String;.replaceAll:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L23d078.  v2:= temp @kind object;
  #L23d07a.  call temp:= `create`(v2) @signature `Ljava/net/URI;.create:(Ljava/lang/String;)Ljava/net/URI;` @kind static;
  #L23d080.  v4:= temp @kind object;
  #L23d082.  goto L23d066;
  #L23d084.  v1:= Exception @type ^`java.lang.Exception` @kind object;
  #L23d086.  v4:= new `java.lang.RuntimeException`;
  #L23d08a.  call `<init>`(v4, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L23d090.  throw v4;
  catch `java.net.URISyntaxException` @[L23d05c..L23d066] goto L23d068;
  catch `java.lang.Exception` @[L23d06a..L23d080] goto L23d084;
}
procedure `java.net.URL` `url`(`okhttp3.HttpUrl` v3 @kind this) @signature `Lokhttp3/HttpUrl;.url:()Ljava/net/URL;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L23d0c0.  v1:= new `java.net.URL`;
  #L23d0c4.  v2:= v3.`okhttp3.HttpUrl.url` @type ^`java.lang.String` @kind object;
  #L23d0c8.  call `<init>`(v1, v2) @signature `Ljava/net/URL;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23d0ce.  return v1 @kind object;
  #L23d0d0.  v0:= Exception @type ^`java.net.MalformedURLException` @kind object;
  #L23d0d2.  v1:= new `java.lang.RuntimeException`;
  #L23d0d6.  call `<init>`(v1, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L23d0dc.  throw v1;
  catch `java.net.MalformedURLException` @[L23d0c0..L23d0ce] goto L23d0d0;
}
procedure `java.lang.String` `username`(`okhttp3.HttpUrl` v1 @kind this) @signature `Lokhttp3/HttpUrl;.username:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23d100.  v0:= v1.`okhttp3.HttpUrl.username` @type ^`java.lang.String` @kind object;
  #L23d104.  return v0 @kind object;
}
