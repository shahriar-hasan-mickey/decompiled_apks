record `okhttp3.OkHttpClient$1` @kind class @AccessFlag FINAL extends `okhttp3.internal.Internal` @kind class {
}
procedure `void` `<init>`(`okhttp3.OkHttpClient$1` v0 @kind this) @signature `Lokhttp3/OkHttpClient$1;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L307fb0.  call `<init>`(v0) @signature `Lokhttp3/internal/Internal;.<init>:()V` @kind direct;
  #L307fb6.  return @kind void;
}
procedure `void` `addLenient`(`okhttp3.OkHttpClient$1` v0 @kind this, `okhttp3.Headers$Builder` v1 @kind object @name `builder`, `java.lang.String` v2 @kind object @name `line`) @signature `Lokhttp3/OkHttpClient$1;.addLenient:(Lokhttp3/Headers$Builder;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;

  #L307fc8.  call temp:= `addLenient`(v1, v2) @signature `Lokhttp3/Headers$Builder;.addLenient:(Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L307fce.  return @kind void;
}
procedure `void` `addLenient`(`okhttp3.OkHttpClient$1` v0 @kind this, `okhttp3.Headers$Builder` v1 @kind object @name `builder`, `java.lang.String` v2 @kind object @name `name`, `java.lang.String` v3 @kind object @name `value`) @signature `Lokhttp3/OkHttpClient$1;.addLenient:(Lokhttp3/Headers$Builder;Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;

  #L307fe0.  call temp:= `addLenient`(v1, v2, v3) @signature `Lokhttp3/Headers$Builder;.addLenient:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L307fe6.  return @kind void;
}
procedure `void` `apply`(`okhttp3.OkHttpClient$1` v0 @kind this, `okhttp3.ConnectionSpec` v1 @kind object @name `tlsConfiguration`, `javax.net.ssl.SSLSocket` v2 @kind object @name `sslSocket`, `boolean` v3 @name `isFallback`) @signature `Lokhttp3/OkHttpClient$1;.apply:(Lokhttp3/ConnectionSpec;Ljavax/net/ssl/SSLSocket;Z)V` @AccessFlag PUBLIC {
    temp;

  #L307ff8.  call `apply`(v1, v2, v3) @signature `Lokhttp3/ConnectionSpec;.apply:(Ljavax/net/ssl/SSLSocket;Z)V` @kind virtual;
  #L307ffe.  return @kind void;
}
procedure `okhttp3.internal.http.StreamAllocation` `callEngineGetStreamAllocation`(`okhttp3.OkHttpClient$1` v1 @kind this, `okhttp3.Call` v2 @kind object @name `call`) @signature `Lokhttp3/OkHttpClient$1;.callEngineGetStreamAllocation:(Lokhttp3/Call;)Lokhttp3/internal/http/StreamAllocation;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L308010.  v2:= (`okhttp3.RealCall`) v2 @kind object;
  #L308014.  v0:= v2.`okhttp3.RealCall.engine` @type ^`okhttp3.internal.http.HttpEngine` @kind object;
  #L308018.  v0:= v0.`okhttp3.internal.http.HttpEngine.streamAllocation` @type ^`okhttp3.internal.http.StreamAllocation` @kind object;
  #L30801c.  return v0 @kind object;
}
procedure `void` `callEnqueue`(`okhttp3.OkHttpClient$1` v0 @kind this, `okhttp3.Call` v1 @kind object @name `call`, `okhttp3.Callback` v2 @kind object @name `responseCallback`, `boolean` v3 @name `forWebSocket`) @signature `Lokhttp3/OkHttpClient$1;.callEnqueue:(Lokhttp3/Call;Lokhttp3/Callback;Z)V` @AccessFlag PUBLIC {
    temp;

  #L308030.  v1:= (`okhttp3.RealCall`) v1 @kind object;
  #L308034.  call `enqueue`(v1, v2, v3) @signature `Lokhttp3/RealCall;.enqueue:(Lokhttp3/Callback;Z)V` @kind virtual;
  #L30803a.  return @kind void;
}
procedure `boolean` `connectionBecameIdle`(`okhttp3.OkHttpClient$1` v1 @kind this, `okhttp3.ConnectionPool` v2 @kind object @name `pool`, `okhttp3.internal.io.RealConnection` v3 @kind object @name `connection`) @signature `Lokhttp3/OkHttpClient$1;.connectionBecameIdle:(Lokhttp3/ConnectionPool;Lokhttp3/internal/io/RealConnection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30804c.  call temp:= `connectionBecameIdle`(v2, v3) @signature `Lokhttp3/ConnectionPool;.connectionBecameIdle:(Lokhttp3/internal/io/RealConnection;)Z` @kind virtual;
  #L308052.  v0:= temp;
  #L308054.  return v0;
}
procedure `okhttp3.internal.io.RealConnection` `get`(`okhttp3.OkHttpClient$1` v1 @kind this, `okhttp3.ConnectionPool` v2 @kind object @name `pool`, `okhttp3.Address` v3 @kind object @name `address`, `okhttp3.internal.http.StreamAllocation` v4 @kind object @name `streamAllocation`) @signature `Lokhttp3/OkHttpClient$1;.get:(Lokhttp3/ConnectionPool;Lokhttp3/Address;Lokhttp3/internal/http/StreamAllocation;)Lokhttp3/internal/io/RealConnection;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L308068.  call temp:= `get`(v2, v3, v4) @signature `Lokhttp3/ConnectionPool;.get:(Lokhttp3/Address;Lokhttp3/internal/http/StreamAllocation;)Lokhttp3/internal/io/RealConnection;` @kind virtual;
  #L30806e.  v0:= temp @kind object;
  #L308070.  return v0 @kind object;
}
procedure `okhttp3.HttpUrl` `getHttpUrlChecked`(`okhttp3.OkHttpClient$1` v1 @kind this, `java.lang.String` v2 @kind object @name `url`) @signature `Lokhttp3/OkHttpClient$1;.getHttpUrlChecked:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L308084.  call temp:= `getChecked`(v2) @signature `Lokhttp3/HttpUrl;.getChecked:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @kind static;
  #L30808a.  v0:= temp @kind object;
  #L30808c.  return v0 @kind object;
}
procedure `okhttp3.internal.InternalCache` `internalCache`(`okhttp3.OkHttpClient$1` v1 @kind this, `okhttp3.OkHttpClient` v2 @kind object @name `client`) @signature `Lokhttp3/OkHttpClient$1;.internalCache:(Lokhttp3/OkHttpClient;)Lokhttp3/internal/InternalCache;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3080a0.  call temp:= `internalCache`(v2) @signature `Lokhttp3/OkHttpClient;.internalCache:()Lokhttp3/internal/InternalCache;` @kind virtual;
  #L3080a6.  v0:= temp @kind object;
  #L3080a8.  return v0 @kind object;
}
procedure `void` `put`(`okhttp3.OkHttpClient$1` v0 @kind this, `okhttp3.ConnectionPool` v1 @kind object @name `pool`, `okhttp3.internal.io.RealConnection` v2 @kind object @name `connection`) @signature `Lokhttp3/OkHttpClient$1;.put:(Lokhttp3/ConnectionPool;Lokhttp3/internal/io/RealConnection;)V` @AccessFlag PUBLIC {
    temp;

  #L3080bc.  call `put`(v1, v2) @signature `Lokhttp3/ConnectionPool;.put:(Lokhttp3/internal/io/RealConnection;)V` @kind virtual;
  #L3080c2.  return @kind void;
}
procedure `okhttp3.internal.RouteDatabase` `routeDatabase`(`okhttp3.OkHttpClient$1` v1 @kind this, `okhttp3.ConnectionPool` v2 @kind object @name `connectionPool`) @signature `Lokhttp3/OkHttpClient$1;.routeDatabase:(Lokhttp3/ConnectionPool;)Lokhttp3/internal/RouteDatabase;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3080d4.  v0:= v2.`okhttp3.ConnectionPool.routeDatabase` @type ^`okhttp3.internal.RouteDatabase` @kind object;
  #L3080d8.  return v0 @kind object;
}
procedure `void` `setCache`(`okhttp3.OkHttpClient$1` v0 @kind this, `okhttp3.OkHttpClient$Builder` v1 @kind object @name `builder`, `okhttp3.internal.InternalCache` v2 @kind object @name `internalCache`) @signature `Lokhttp3/OkHttpClient$1;.setCache:(Lokhttp3/OkHttpClient$Builder;Lokhttp3/internal/InternalCache;)V` @AccessFlag PUBLIC {
    temp;

  #L3080ec.  call `setInternalCache`(v1, v2) @signature `Lokhttp3/OkHttpClient$Builder;.setInternalCache:(Lokhttp3/internal/InternalCache;)V` @kind virtual;
  #L3080f2.  return @kind void;
}
