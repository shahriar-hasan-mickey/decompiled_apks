record `okhttp3.OkHttpClient$Builder` @kind class @AccessFlag PUBLIC_FINAL {
  `okhttp3.Authenticator` `okhttp3.OkHttpClient$Builder.authenticator` @AccessFlag ;
  `okhttp3.Cache` `okhttp3.OkHttpClient$Builder.cache` @AccessFlag ;
  `okhttp3.internal.tls.CertificateChainCleaner` `okhttp3.OkHttpClient$Builder.certificateChainCleaner` @AccessFlag ;
  `okhttp3.CertificatePinner` `okhttp3.OkHttpClient$Builder.certificatePinner` @AccessFlag ;
  `int` `okhttp3.OkHttpClient$Builder.connectTimeout` @AccessFlag ;
  `okhttp3.ConnectionPool` `okhttp3.OkHttpClient$Builder.connectionPool` @AccessFlag ;
  `java.util.List` `okhttp3.OkHttpClient$Builder.connectionSpecs` @AccessFlag ;
  `okhttp3.CookieJar` `okhttp3.OkHttpClient$Builder.cookieJar` @AccessFlag ;
  `okhttp3.Dispatcher` `okhttp3.OkHttpClient$Builder.dispatcher` @AccessFlag ;
  `okhttp3.Dns` `okhttp3.OkHttpClient$Builder.dns` @AccessFlag ;
  `boolean` `okhttp3.OkHttpClient$Builder.followRedirects` @AccessFlag ;
  `boolean` `okhttp3.OkHttpClient$Builder.followSslRedirects` @AccessFlag ;
  `javax.net.ssl.HostnameVerifier` `okhttp3.OkHttpClient$Builder.hostnameVerifier` @AccessFlag ;
  `java.util.List` `okhttp3.OkHttpClient$Builder.interceptors` @AccessFlag FINAL;
  `okhttp3.internal.InternalCache` `okhttp3.OkHttpClient$Builder.internalCache` @AccessFlag ;
  `java.util.List` `okhttp3.OkHttpClient$Builder.networkInterceptors` @AccessFlag FINAL;
  `java.util.List` `okhttp3.OkHttpClient$Builder.protocols` @AccessFlag ;
  `java.net.Proxy` `okhttp3.OkHttpClient$Builder.proxy` @AccessFlag ;
  `okhttp3.Authenticator` `okhttp3.OkHttpClient$Builder.proxyAuthenticator` @AccessFlag ;
  `java.net.ProxySelector` `okhttp3.OkHttpClient$Builder.proxySelector` @AccessFlag ;
  `int` `okhttp3.OkHttpClient$Builder.readTimeout` @AccessFlag ;
  `boolean` `okhttp3.OkHttpClient$Builder.retryOnConnectionFailure` @AccessFlag ;
  `javax.net.SocketFactory` `okhttp3.OkHttpClient$Builder.socketFactory` @AccessFlag ;
  `javax.net.ssl.SSLSocketFactory` `okhttp3.OkHttpClient$Builder.sslSocketFactory` @AccessFlag ;
  `int` `okhttp3.OkHttpClient$Builder.writeTimeout` @AccessFlag ;
}
procedure `void` `<init>`(`okhttp3.OkHttpClient$Builder` v3 @kind this) @signature `Lokhttp3/OkHttpClient$Builder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L23d6f8.  v2:= 10000I;
  #L23d6fc.  v1:= 1I;
  #L23d6fe.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L23d704.  v0:= new `java.util.ArrayList`;
  #L23d708.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L23d70e.  v3.`okhttp3.OkHttpClient$Builder.interceptors` @type ^`java.util.List` := v0 @kind object;
  #L23d712.  v0:= new `java.util.ArrayList`;
  #L23d716.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L23d71c.  v3.`okhttp3.OkHttpClient$Builder.networkInterceptors` @type ^`java.util.List` := v0 @kind object;
  #L23d720.  v0:= new `okhttp3.Dispatcher`;
  #L23d724.  call `<init>`(v0) @signature `Lokhttp3/Dispatcher;.<init>:()V` @kind direct;
  #L23d72a.  v3.`okhttp3.OkHttpClient$Builder.dispatcher` @type ^`okhttp3.Dispatcher` := v0 @kind object;
  #L23d72e.  call temp:= `access$000`() @signature `Lokhttp3/OkHttpClient;.access$000:()Ljava/util/List;` @kind static;
  #L23d734.  v0:= temp @kind object;
  #L23d736.  v3.`okhttp3.OkHttpClient$Builder.protocols` @type ^`java.util.List` := v0 @kind object;
  #L23d73a.  call temp:= `access$100`() @signature `Lokhttp3/OkHttpClient;.access$100:()Ljava/util/List;` @kind static;
  #L23d740.  v0:= temp @kind object;
  #L23d742.  v3.`okhttp3.OkHttpClient$Builder.connectionSpecs` @type ^`java.util.List` := v0 @kind object;
  #L23d746.  call temp:= `getDefault`() @signature `Ljava/net/ProxySelector;.getDefault:()Ljava/net/ProxySelector;` @kind static;
  #L23d74c.  v0:= temp @kind object;
  #L23d74e.  v3.`okhttp3.OkHttpClient$Builder.proxySelector` @type ^`java.net.ProxySelector` := v0 @kind object;
  #L23d752.  v0:= `@@okhttp3.CookieJar.NO_COOKIES` @type ^`okhttp3.CookieJar` @kind object;
  #L23d756.  v3.`okhttp3.OkHttpClient$Builder.cookieJar` @type ^`okhttp3.CookieJar` := v0 @kind object;
  #L23d75a.  call temp:= `getDefault`() @signature `Ljavax/net/SocketFactory;.getDefault:()Ljavax/net/SocketFactory;` @kind static;
  #L23d760.  v0:= temp @kind object;
  #L23d762.  v3.`okhttp3.OkHttpClient$Builder.socketFactory` @type ^`javax.net.SocketFactory` := v0 @kind object;
  #L23d766.  v0:= `@@okhttp3.internal.tls.OkHostnameVerifier.INSTANCE` @type ^`okhttp3.internal.tls.OkHostnameVerifier` @kind object;
  #L23d76a.  v3.`okhttp3.OkHttpClient$Builder.hostnameVerifier` @type ^`javax.net.ssl.HostnameVerifier` := v0 @kind object;
  #L23d76e.  v0:= `@@okhttp3.CertificatePinner.DEFAULT` @type ^`okhttp3.CertificatePinner` @kind object;
  #L23d772.  v3.`okhttp3.OkHttpClient$Builder.certificatePinner` @type ^`okhttp3.CertificatePinner` := v0 @kind object;
  #L23d776.  v0:= `@@okhttp3.Authenticator.NONE` @type ^`okhttp3.Authenticator` @kind object;
  #L23d77a.  v3.`okhttp3.OkHttpClient$Builder.proxyAuthenticator` @type ^`okhttp3.Authenticator` := v0 @kind object;
  #L23d77e.  v0:= `@@okhttp3.Authenticator.NONE` @type ^`okhttp3.Authenticator` @kind object;
  #L23d782.  v3.`okhttp3.OkHttpClient$Builder.authenticator` @type ^`okhttp3.Authenticator` := v0 @kind object;
  #L23d786.  v0:= new `okhttp3.ConnectionPool`;
  #L23d78a.  call `<init>`(v0) @signature `Lokhttp3/ConnectionPool;.<init>:()V` @kind direct;
  #L23d790.  v3.`okhttp3.OkHttpClient$Builder.connectionPool` @type ^`okhttp3.ConnectionPool` := v0 @kind object;
  #L23d794.  v0:= `@@okhttp3.Dns.SYSTEM` @type ^`okhttp3.Dns` @kind object;
  #L23d798.  v3.`okhttp3.OkHttpClient$Builder.dns` @type ^`okhttp3.Dns` := v0 @kind object;
  #L23d79c.  v3.`okhttp3.OkHttpClient$Builder.followSslRedirects` @type ^`boolean` := v1 @kind boolean;
  #L23d7a0.  v3.`okhttp3.OkHttpClient$Builder.followRedirects` @type ^`boolean` := v1 @kind boolean;
  #L23d7a4.  v3.`okhttp3.OkHttpClient$Builder.retryOnConnectionFailure` @type ^`boolean` := v1 @kind boolean;
  #L23d7a8.  v3.`okhttp3.OkHttpClient$Builder.connectTimeout` @type ^`int` := v2;
  #L23d7ac.  v3.`okhttp3.OkHttpClient$Builder.readTimeout` @type ^`int` := v2;
  #L23d7b0.  v3.`okhttp3.OkHttpClient$Builder.writeTimeout` @type ^`int` := v2;
  #L23d7b4.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.OkHttpClient$Builder` v2 @kind this, `okhttp3.OkHttpClient` v3 @kind object @name `okHttpClient`) @signature `Lokhttp3/OkHttpClient$Builder;.<init>:(Lokhttp3/OkHttpClient;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L23d7c8.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L23d7ce.  v0:= new `java.util.ArrayList`;
  #L23d7d2.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L23d7d8.  v2.`okhttp3.OkHttpClient$Builder.interceptors` @type ^`java.util.List` := v0 @kind object;
  #L23d7dc.  v0:= new `java.util.ArrayList`;
  #L23d7e0.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L23d7e6.  v2.`okhttp3.OkHttpClient$Builder.networkInterceptors` @type ^`java.util.List` := v0 @kind object;
  #L23d7ea.  v0:= v3.`okhttp3.OkHttpClient.dispatcher` @type ^`okhttp3.Dispatcher` @kind object;
  #L23d7ee.  v2.`okhttp3.OkHttpClient$Builder.dispatcher` @type ^`okhttp3.Dispatcher` := v0 @kind object;
  #L23d7f2.  v0:= v3.`okhttp3.OkHttpClient.proxy` @type ^`java.net.Proxy` @kind object;
  #L23d7f6.  v2.`okhttp3.OkHttpClient$Builder.proxy` @type ^`java.net.Proxy` := v0 @kind object;
  #L23d7fa.  v0:= v3.`okhttp3.OkHttpClient.protocols` @type ^`java.util.List` @kind object;
  #L23d7fe.  v2.`okhttp3.OkHttpClient$Builder.protocols` @type ^`java.util.List` := v0 @kind object;
  #L23d802.  v0:= v3.`okhttp3.OkHttpClient.connectionSpecs` @type ^`java.util.List` @kind object;
  #L23d806.  v2.`okhttp3.OkHttpClient$Builder.connectionSpecs` @type ^`java.util.List` := v0 @kind object;
  #L23d80a.  v0:= v2.`okhttp3.OkHttpClient$Builder.interceptors` @type ^`java.util.List` @kind object;
  #L23d80e.  v1:= v3.`okhttp3.OkHttpClient.interceptors` @type ^`java.util.List` @kind object;
  #L23d812.  call temp:= `addAll`(v0, v1) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L23d818.  v0:= v2.`okhttp3.OkHttpClient$Builder.networkInterceptors` @type ^`java.util.List` @kind object;
  #L23d81c.  v1:= v3.`okhttp3.OkHttpClient.networkInterceptors` @type ^`java.util.List` @kind object;
  #L23d820.  call temp:= `addAll`(v0, v1) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L23d826.  v0:= v3.`okhttp3.OkHttpClient.proxySelector` @type ^`java.net.ProxySelector` @kind object;
  #L23d82a.  v2.`okhttp3.OkHttpClient$Builder.proxySelector` @type ^`java.net.ProxySelector` := v0 @kind object;
  #L23d82e.  v0:= v3.`okhttp3.OkHttpClient.cookieJar` @type ^`okhttp3.CookieJar` @kind object;
  #L23d832.  v2.`okhttp3.OkHttpClient$Builder.cookieJar` @type ^`okhttp3.CookieJar` := v0 @kind object;
  #L23d836.  v0:= v3.`okhttp3.OkHttpClient.internalCache` @type ^`okhttp3.internal.InternalCache` @kind object;
  #L23d83a.  v2.`okhttp3.OkHttpClient$Builder.internalCache` @type ^`okhttp3.internal.InternalCache` := v0 @kind object;
  #L23d83e.  v0:= v3.`okhttp3.OkHttpClient.cache` @type ^`okhttp3.Cache` @kind object;
  #L23d842.  v2.`okhttp3.OkHttpClient$Builder.cache` @type ^`okhttp3.Cache` := v0 @kind object;
  #L23d846.  v0:= v3.`okhttp3.OkHttpClient.socketFactory` @type ^`javax.net.SocketFactory` @kind object;
  #L23d84a.  v2.`okhttp3.OkHttpClient$Builder.socketFactory` @type ^`javax.net.SocketFactory` := v0 @kind object;
  #L23d84e.  v0:= v3.`okhttp3.OkHttpClient.sslSocketFactory` @type ^`javax.net.ssl.SSLSocketFactory` @kind object;
  #L23d852.  v2.`okhttp3.OkHttpClient$Builder.sslSocketFactory` @type ^`javax.net.ssl.SSLSocketFactory` := v0 @kind object;
  #L23d856.  v0:= v3.`okhttp3.OkHttpClient.certificateChainCleaner` @type ^`okhttp3.internal.tls.CertificateChainCleaner` @kind object;
  #L23d85a.  v2.`okhttp3.OkHttpClient$Builder.certificateChainCleaner` @type ^`okhttp3.internal.tls.CertificateChainCleaner` := v0 @kind object;
  #L23d85e.  v0:= v3.`okhttp3.OkHttpClient.hostnameVerifier` @type ^`javax.net.ssl.HostnameVerifier` @kind object;
  #L23d862.  v2.`okhttp3.OkHttpClient$Builder.hostnameVerifier` @type ^`javax.net.ssl.HostnameVerifier` := v0 @kind object;
  #L23d866.  v0:= v3.`okhttp3.OkHttpClient.certificatePinner` @type ^`okhttp3.CertificatePinner` @kind object;
  #L23d86a.  v2.`okhttp3.OkHttpClient$Builder.certificatePinner` @type ^`okhttp3.CertificatePinner` := v0 @kind object;
  #L23d86e.  v0:= v3.`okhttp3.OkHttpClient.proxyAuthenticator` @type ^`okhttp3.Authenticator` @kind object;
  #L23d872.  v2.`okhttp3.OkHttpClient$Builder.proxyAuthenticator` @type ^`okhttp3.Authenticator` := v0 @kind object;
  #L23d876.  v0:= v3.`okhttp3.OkHttpClient.authenticator` @type ^`okhttp3.Authenticator` @kind object;
  #L23d87a.  v2.`okhttp3.OkHttpClient$Builder.authenticator` @type ^`okhttp3.Authenticator` := v0 @kind object;
  #L23d87e.  v0:= v3.`okhttp3.OkHttpClient.connectionPool` @type ^`okhttp3.ConnectionPool` @kind object;
  #L23d882.  v2.`okhttp3.OkHttpClient$Builder.connectionPool` @type ^`okhttp3.ConnectionPool` := v0 @kind object;
  #L23d886.  v0:= v3.`okhttp3.OkHttpClient.dns` @type ^`okhttp3.Dns` @kind object;
  #L23d88a.  v2.`okhttp3.OkHttpClient$Builder.dns` @type ^`okhttp3.Dns` := v0 @kind object;
  #L23d88e.  v0:= v3.`okhttp3.OkHttpClient.followSslRedirects` @type ^`boolean` @kind boolean;
  #L23d892.  v2.`okhttp3.OkHttpClient$Builder.followSslRedirects` @type ^`boolean` := v0 @kind boolean;
  #L23d896.  v0:= v3.`okhttp3.OkHttpClient.followRedirects` @type ^`boolean` @kind boolean;
  #L23d89a.  v2.`okhttp3.OkHttpClient$Builder.followRedirects` @type ^`boolean` := v0 @kind boolean;
  #L23d89e.  v0:= v3.`okhttp3.OkHttpClient.retryOnConnectionFailure` @type ^`boolean` @kind boolean;
  #L23d8a2.  v2.`okhttp3.OkHttpClient$Builder.retryOnConnectionFailure` @type ^`boolean` := v0 @kind boolean;
  #L23d8a6.  v0:= v3.`okhttp3.OkHttpClient.connectTimeout` @type ^`int`;
  #L23d8aa.  v2.`okhttp3.OkHttpClient$Builder.connectTimeout` @type ^`int` := v0;
  #L23d8ae.  v0:= v3.`okhttp3.OkHttpClient.readTimeout` @type ^`int`;
  #L23d8b2.  v2.`okhttp3.OkHttpClient$Builder.readTimeout` @type ^`int` := v0;
  #L23d8b6.  v0:= v3.`okhttp3.OkHttpClient.writeTimeout` @type ^`int`;
  #L23d8ba.  v2.`okhttp3.OkHttpClient$Builder.writeTimeout` @type ^`int` := v0;
  #L23d8be.  return @kind void;
}
procedure `okhttp3.OkHttpClient$Builder` `addInterceptor`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `okhttp3.Interceptor` v2 @kind object @name `interceptor`) @signature `Lokhttp3/OkHttpClient$Builder;.addInterceptor:(Lokhttp3/Interceptor;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23d8d0.  v0:= v1.`okhttp3.OkHttpClient$Builder.interceptors` @type ^`java.util.List` @kind object;
  #L23d8d4.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L23d8da.  return v1 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `addNetworkInterceptor`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `okhttp3.Interceptor` v2 @kind object @name `interceptor`) @signature `Lokhttp3/OkHttpClient$Builder;.addNetworkInterceptor:(Lokhttp3/Interceptor;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23d8ec.  v0:= v1.`okhttp3.OkHttpClient$Builder.networkInterceptors` @type ^`java.util.List` @kind object;
  #L23d8f0.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L23d8f6.  return v1 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `authenticator`(`okhttp3.OkHttpClient$Builder` v2 @kind this, `okhttp3.Authenticator` v3 @kind object @name `authenticator`) @signature `Lokhttp3/OkHttpClient$Builder;.authenticator:(Lokhttp3/Authenticator;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23d908.  if v3 != 0 then goto L23d91c;
  #L23d90c.  v0:= new `java.lang.NullPointerException`;
  #L23d910.  v1:= "authenticator == null" @kind object;
  #L23d914.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23d91a.  throw v0;
  #L23d91c.  v2.`okhttp3.OkHttpClient$Builder.authenticator` @type ^`okhttp3.Authenticator` := v3 @kind object;
  #L23d920.  return v2 @kind object;
}
procedure `okhttp3.OkHttpClient` `build`(`okhttp3.OkHttpClient$Builder` v2 @kind this) @signature `Lokhttp3/OkHttpClient$Builder;.build:()Lokhttp3/OkHttpClient;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23d934.  v0:= new `okhttp3.OkHttpClient`;
  #L23d938.  v1:= 0I;
  #L23d93a.  call `<init>`(v0, v2, v1) @signature `Lokhttp3/OkHttpClient;.<init>:(Lokhttp3/OkHttpClient$Builder;Lokhttp3/OkHttpClient$1;)V` @kind direct;
  #L23d940.  return v0 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `cache`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `okhttp3.Cache` v2 @kind object @name `cache`) @signature `Lokhttp3/OkHttpClient$Builder;.cache:(Lokhttp3/Cache;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23d954.  v1.`okhttp3.OkHttpClient$Builder.cache` @type ^`okhttp3.Cache` := v2 @kind object;
  #L23d958.  v0:= 0I;
  #L23d95a.  v1.`okhttp3.OkHttpClient$Builder.internalCache` @type ^`okhttp3.internal.InternalCache` := v0 @kind object;
  #L23d95e.  return v1 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `certificatePinner`(`okhttp3.OkHttpClient$Builder` v2 @kind this, `okhttp3.CertificatePinner` v3 @kind object @name `certificatePinner`) @signature `Lokhttp3/OkHttpClient$Builder;.certificatePinner:(Lokhttp3/CertificatePinner;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23d970.  if v3 != 0 then goto L23d984;
  #L23d974.  v0:= new `java.lang.NullPointerException`;
  #L23d978.  v1:= "certificatePinner == null" @kind object;
  #L23d97c.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23d982.  throw v0;
  #L23d984.  v2.`okhttp3.OkHttpClient$Builder.certificatePinner` @type ^`okhttp3.CertificatePinner` := v3 @kind object;
  #L23d988.  return v2 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `connectTimeout`(`okhttp3.OkHttpClient$Builder` v7 @kind this, `long` v8 @name `timeout`, `java.util.concurrent.TimeUnit` v10 @kind object @name `unit`) @signature `Lokhttp3/OkHttpClient$Builder;.connectTimeout:(JLjava/util/concurrent/TimeUnit;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L23d99c.  v4:= 0L;
  #L23d9a0.  v2:= lcmp(v8, v4);
  #L23d9a4.  if v2 >= 0 then goto L23d9b8;
  #L23d9a8.  v2:= new `java.lang.IllegalArgumentException`;
  #L23d9ac.  v3:= "timeout < 0" @kind object;
  #L23d9b0.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23d9b6.  throw v2;
  #L23d9b8.  if v10 != 0 then goto L23d9cc;
  #L23d9bc.  v2:= new `java.lang.NullPointerException`;
  #L23d9c0.  v3:= "unit == null" @kind object;
  #L23d9c4.  call `<init>`(v2, v3) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23d9ca.  throw v2;
  #L23d9cc.  call temp:= `toMillis`(v10, v8) @signature `Ljava/util/concurrent/TimeUnit;.toMillis:(J)J` @kind virtual;
  #L23d9d2.  v0:= temp @kind wide;
  #L23d9d4.  v2:= 2147483647L;
  #L23d9da.  v2:= lcmp(v0, v2);
  #L23d9de.  if v2 <= 0 then goto L23d9f2;
  #L23d9e2.  v2:= new `java.lang.IllegalArgumentException`;
  #L23d9e6.  v3:= "Timeout too large." @kind object;
  #L23d9ea.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23d9f0.  throw v2;
  #L23d9f2.  v2:= lcmp(v0, v4);
  #L23d9f6.  if v2 != 0 then goto L23da12;
  #L23d9fa.  v2:= lcmp(v8, v4);
  #L23d9fe.  if v2 <= 0 then goto L23da12;
  #L23da02.  v2:= new `java.lang.IllegalArgumentException`;
  #L23da06.  v3:= "Timeout too small." @kind object;
  #L23da0a.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23da10.  throw v2;
  #L23da12.  v2:= (`int`) v0 @kind l2i;
  #L23da14.  v7.`okhttp3.OkHttpClient$Builder.connectTimeout` @type ^`int` := v2;
  #L23da18.  return v7 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `connectionPool`(`okhttp3.OkHttpClient$Builder` v2 @kind this, `okhttp3.ConnectionPool` v3 @kind object @name `connectionPool`) @signature `Lokhttp3/OkHttpClient$Builder;.connectionPool:(Lokhttp3/ConnectionPool;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23da2c.  if v3 != 0 then goto L23da40;
  #L23da30.  v0:= new `java.lang.NullPointerException`;
  #L23da34.  v1:= "connectionPool == null" @kind object;
  #L23da38.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23da3e.  throw v0;
  #L23da40.  v2.`okhttp3.OkHttpClient$Builder.connectionPool` @type ^`okhttp3.ConnectionPool` := v3 @kind object;
  #L23da44.  return v2 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `connectionSpecs`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `java.util.List` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.connectionSpecs:(Ljava/util/List;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23da58.  call temp:= `immutableList`(v2) @signature `Lokhttp3/internal/Util;.immutableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L23da5e.  v0:= temp @kind object;
  #L23da60.  v1.`okhttp3.OkHttpClient$Builder.connectionSpecs` @type ^`java.util.List` := v0 @kind object;
  #L23da64.  return v1 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `cookieJar`(`okhttp3.OkHttpClient$Builder` v2 @kind this, `okhttp3.CookieJar` v3 @kind object @name `cookieJar`) @signature `Lokhttp3/OkHttpClient$Builder;.cookieJar:(Lokhttp3/CookieJar;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23da78.  if v3 != 0 then goto L23da8c;
  #L23da7c.  v0:= new `java.lang.NullPointerException`;
  #L23da80.  v1:= "cookieJar == null" @kind object;
  #L23da84.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23da8a.  throw v0;
  #L23da8c.  v2.`okhttp3.OkHttpClient$Builder.cookieJar` @type ^`okhttp3.CookieJar` := v3 @kind object;
  #L23da90.  return v2 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `dispatcher`(`okhttp3.OkHttpClient$Builder` v2 @kind this, `okhttp3.Dispatcher` v3 @kind object @name `dispatcher`) @signature `Lokhttp3/OkHttpClient$Builder;.dispatcher:(Lokhttp3/Dispatcher;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23daa4.  if v3 != 0 then goto L23dab8;
  #L23daa8.  v0:= new `java.lang.IllegalArgumentException`;
  #L23daac.  v1:= "dispatcher == null" @kind object;
  #L23dab0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23dab6.  throw v0;
  #L23dab8.  v2.`okhttp3.OkHttpClient$Builder.dispatcher` @type ^`okhttp3.Dispatcher` := v3 @kind object;
  #L23dabc.  return v2 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `dns`(`okhttp3.OkHttpClient$Builder` v2 @kind this, `okhttp3.Dns` v3 @kind object @name `dns`) @signature `Lokhttp3/OkHttpClient$Builder;.dns:(Lokhttp3/Dns;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23dad0.  if v3 != 0 then goto L23dae4;
  #L23dad4.  v0:= new `java.lang.NullPointerException`;
  #L23dad8.  v1:= "dns == null" @kind object;
  #L23dadc.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23dae2.  throw v0;
  #L23dae4.  v2.`okhttp3.OkHttpClient$Builder.dns` @type ^`okhttp3.Dns` := v3 @kind object;
  #L23dae8.  return v2 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `followRedirects`(`okhttp3.OkHttpClient$Builder` v0 @kind this, `boolean` v1 @name `followRedirects`) @signature `Lokhttp3/OkHttpClient$Builder;.followRedirects:(Z)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;

  #L23dafc.  v0.`okhttp3.OkHttpClient$Builder.followRedirects` @type ^`boolean` := v1 @kind boolean;
  #L23db00.  return v0 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `followSslRedirects`(`okhttp3.OkHttpClient$Builder` v0 @kind this, `boolean` v1 @name `followProtocolRedirects`) @signature `Lokhttp3/OkHttpClient$Builder;.followSslRedirects:(Z)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;

  #L23db14.  v0.`okhttp3.OkHttpClient$Builder.followSslRedirects` @type ^`boolean` := v1 @kind boolean;
  #L23db18.  return v0 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `hostnameVerifier`(`okhttp3.OkHttpClient$Builder` v2 @kind this, `javax.net.ssl.HostnameVerifier` v3 @kind object @name `hostnameVerifier`) @signature `Lokhttp3/OkHttpClient$Builder;.hostnameVerifier:(Ljavax/net/ssl/HostnameVerifier;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23db2c.  if v3 != 0 then goto L23db40;
  #L23db30.  v0:= new `java.lang.NullPointerException`;
  #L23db34.  v1:= "hostnameVerifier == null" @kind object;
  #L23db38.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23db3e.  throw v0;
  #L23db40.  v2.`okhttp3.OkHttpClient$Builder.hostnameVerifier` @type ^`javax.net.ssl.HostnameVerifier` := v3 @kind object;
  #L23db44.  return v2 @kind object;
}
procedure `java.util.List` `interceptors`(`okhttp3.OkHttpClient$Builder` v1 @kind this) @signature `Lokhttp3/OkHttpClient$Builder;.interceptors:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23db58.  v0:= v1.`okhttp3.OkHttpClient$Builder.interceptors` @type ^`java.util.List` @kind object;
  #L23db5c.  return v0 @kind object;
}
procedure `java.util.List` `networkInterceptors`(`okhttp3.OkHttpClient$Builder` v1 @kind this) @signature `Lokhttp3/OkHttpClient$Builder;.networkInterceptors:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23db70.  v0:= v1.`okhttp3.OkHttpClient$Builder.networkInterceptors` @type ^`java.util.List` @kind object;
  #L23db74.  return v0 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `protocols`(`okhttp3.OkHttpClient$Builder` v3 @kind this, `java.util.List` v4 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.protocols:(Ljava/util/List;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L23db88.  call temp:= `immutableList`(v4) @signature `Lokhttp3/internal/Util;.immutableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L23db8e.  v4:= temp @kind object;
  #L23db90.  v0:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L23db94.  call temp:= `contains`(v4, v0) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L23db9a.  v0:= temp;
  #L23db9c.  if v0 != 0 then goto L23dbd2;
  #L23dba0.  v0:= new `java.lang.IllegalArgumentException`;
  #L23dba4.  v1:= new `java.lang.StringBuilder`;
  #L23dba8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23dbae.  v2:= "protocols doesn't contain http/1.1: " @kind object;
  #L23dbb2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23dbb8.  v1:= temp @kind object;
  #L23dbba.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23dbc0.  v1:= temp @kind object;
  #L23dbc2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23dbc8.  v1:= temp @kind object;
  #L23dbca.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23dbd0.  throw v0;
  #L23dbd2.  v0:= `@@okhttp3.Protocol.HTTP_1_0` @type ^`okhttp3.Protocol` @kind object;
  #L23dbd6.  call temp:= `contains`(v4, v0) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L23dbdc.  v0:= temp;
  #L23dbde.  if v0 == 0 then goto L23dc14;
  #L23dbe2.  v0:= new `java.lang.IllegalArgumentException`;
  #L23dbe6.  v1:= new `java.lang.StringBuilder`;
  #L23dbea.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23dbf0.  v2:= "protocols must not contain http/1.0: " @kind object;
  #L23dbf4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23dbfa.  v1:= temp @kind object;
  #L23dbfc.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23dc02.  v1:= temp @kind object;
  #L23dc04.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23dc0a.  v1:= temp @kind object;
  #L23dc0c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23dc12.  throw v0;
  #L23dc14.  v0:= 0I;
  #L23dc16.  call temp:= `contains`(v4, v0) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L23dc1c.  v0:= temp;
  #L23dc1e.  if v0 == 0 then goto L23dc32;
  #L23dc22.  v0:= new `java.lang.IllegalArgumentException`;
  #L23dc26.  v1:= "protocols must not contain null" @kind object;
  #L23dc2a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23dc30.  throw v0;
  #L23dc32.  call temp:= `immutableList`(v4) @signature `Lokhttp3/internal/Util;.immutableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L23dc38.  v0:= temp @kind object;
  #L23dc3a.  v3.`okhttp3.OkHttpClient$Builder.protocols` @type ^`java.util.List` := v0 @kind object;
  #L23dc3e.  return v3 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `proxy`(`okhttp3.OkHttpClient$Builder` v0 @kind this, `java.net.Proxy` v1 @kind object @name `proxy`) @signature `Lokhttp3/OkHttpClient$Builder;.proxy:(Ljava/net/Proxy;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;

  #L23dc50.  v0.`okhttp3.OkHttpClient$Builder.proxy` @type ^`java.net.Proxy` := v1 @kind object;
  #L23dc54.  return v0 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `proxyAuthenticator`(`okhttp3.OkHttpClient$Builder` v2 @kind this, `okhttp3.Authenticator` v3 @kind object @name `proxyAuthenticator`) @signature `Lokhttp3/OkHttpClient$Builder;.proxyAuthenticator:(Lokhttp3/Authenticator;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23dc68.  if v3 != 0 then goto L23dc7c;
  #L23dc6c.  v0:= new `java.lang.NullPointerException`;
  #L23dc70.  v1:= "proxyAuthenticator == null" @kind object;
  #L23dc74.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23dc7a.  throw v0;
  #L23dc7c.  v2.`okhttp3.OkHttpClient$Builder.proxyAuthenticator` @type ^`okhttp3.Authenticator` := v3 @kind object;
  #L23dc80.  return v2 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `proxySelector`(`okhttp3.OkHttpClient$Builder` v0 @kind this, `java.net.ProxySelector` v1 @kind object @name `proxySelector`) @signature `Lokhttp3/OkHttpClient$Builder;.proxySelector:(Ljava/net/ProxySelector;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;

  #L23dc94.  v0.`okhttp3.OkHttpClient$Builder.proxySelector` @type ^`java.net.ProxySelector` := v1 @kind object;
  #L23dc98.  return v0 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `readTimeout`(`okhttp3.OkHttpClient$Builder` v7 @kind this, `long` v8 @name `timeout`, `java.util.concurrent.TimeUnit` v10 @kind object @name `unit`) @signature `Lokhttp3/OkHttpClient$Builder;.readTimeout:(JLjava/util/concurrent/TimeUnit;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L23dcac.  v4:= 0L;
  #L23dcb0.  v2:= lcmp(v8, v4);
  #L23dcb4.  if v2 >= 0 then goto L23dcc8;
  #L23dcb8.  v2:= new `java.lang.IllegalArgumentException`;
  #L23dcbc.  v3:= "timeout < 0" @kind object;
  #L23dcc0.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23dcc6.  throw v2;
  #L23dcc8.  if v10 != 0 then goto L23dcdc;
  #L23dccc.  v2:= new `java.lang.NullPointerException`;
  #L23dcd0.  v3:= "unit == null" @kind object;
  #L23dcd4.  call `<init>`(v2, v3) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23dcda.  throw v2;
  #L23dcdc.  call temp:= `toMillis`(v10, v8) @signature `Ljava/util/concurrent/TimeUnit;.toMillis:(J)J` @kind virtual;
  #L23dce2.  v0:= temp @kind wide;
  #L23dce4.  v2:= 2147483647L;
  #L23dcea.  v2:= lcmp(v0, v2);
  #L23dcee.  if v2 <= 0 then goto L23dd02;
  #L23dcf2.  v2:= new `java.lang.IllegalArgumentException`;
  #L23dcf6.  v3:= "Timeout too large." @kind object;
  #L23dcfa.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23dd00.  throw v2;
  #L23dd02.  v2:= lcmp(v0, v4);
  #L23dd06.  if v2 != 0 then goto L23dd22;
  #L23dd0a.  v2:= lcmp(v8, v4);
  #L23dd0e.  if v2 <= 0 then goto L23dd22;
  #L23dd12.  v2:= new `java.lang.IllegalArgumentException`;
  #L23dd16.  v3:= "Timeout too small." @kind object;
  #L23dd1a.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23dd20.  throw v2;
  #L23dd22.  v2:= (`int`) v0 @kind l2i;
  #L23dd24.  v7.`okhttp3.OkHttpClient$Builder.readTimeout` @type ^`int` := v2;
  #L23dd28.  return v7 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `retryOnConnectionFailure`(`okhttp3.OkHttpClient$Builder` v0 @kind this, `boolean` v1 @name `retryOnConnectionFailure`) @signature `Lokhttp3/OkHttpClient$Builder;.retryOnConnectionFailure:(Z)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;

  #L23dd3c.  v0.`okhttp3.OkHttpClient$Builder.retryOnConnectionFailure` @type ^`boolean` := v1 @kind boolean;
  #L23dd40.  return v0 @kind object;
}
procedure `void` `setInternalCache`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `okhttp3.internal.InternalCache` v2 @kind object @name `internalCache`) @signature `Lokhttp3/OkHttpClient$Builder;.setInternalCache:(Lokhttp3/internal/InternalCache;)V` @AccessFlag  {
    temp;
    v0;

  #L23dd54.  v1.`okhttp3.OkHttpClient$Builder.internalCache` @type ^`okhttp3.internal.InternalCache` := v2 @kind object;
  #L23dd58.  v0:= 0I;
  #L23dd5a.  v1.`okhttp3.OkHttpClient$Builder.cache` @type ^`okhttp3.Cache` := v0 @kind object;
  #L23dd5e.  return @kind void;
}
procedure `okhttp3.OkHttpClient$Builder` `socketFactory`(`okhttp3.OkHttpClient$Builder` v2 @kind this, `javax.net.SocketFactory` v3 @kind object @name `socketFactory`) @signature `Lokhttp3/OkHttpClient$Builder;.socketFactory:(Ljavax/net/SocketFactory;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23dd70.  if v3 != 0 then goto L23dd84;
  #L23dd74.  v0:= new `java.lang.NullPointerException`;
  #L23dd78.  v1:= "socketFactory == null" @kind object;
  #L23dd7c.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23dd82.  throw v0;
  #L23dd84.  v2.`okhttp3.OkHttpClient$Builder.socketFactory` @type ^`javax.net.SocketFactory` := v3 @kind object;
  #L23dd88.  return v2 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `sslSocketFactory`(`okhttp3.OkHttpClient$Builder` v4 @kind this, `javax.net.ssl.SSLSocketFactory` v5 @kind object @name `sslSocketFactory`) @signature `Lokhttp3/OkHttpClient$Builder;.sslSocketFactory:(Ljavax/net/ssl/SSLSocketFactory;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L23dd9c.  if v5 != 0 then goto L23ddb0;
  #L23dda0.  v1:= new `java.lang.NullPointerException`;
  #L23dda4.  v2:= "sslSocketFactory == null" @kind object;
  #L23dda8.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23ddae.  throw v1;
  #L23ddb0.  call temp:= `get`() @signature `Lokhttp3/internal/Platform;.get:()Lokhttp3/internal/Platform;` @kind static;
  #L23ddb6.  v1:= temp @kind object;
  #L23ddb8.  call temp:= `trustManager`(v1, v5) @signature `Lokhttp3/internal/Platform;.trustManager:(Ljavax/net/ssl/SSLSocketFactory;)Ljavax/net/ssl/X509TrustManager;` @kind virtual;
  #L23ddbe.  v0:= temp @kind object;
  #L23ddc0.  if v0 != 0 then goto L23de1a;
  #L23ddc4.  v1:= new `java.lang.IllegalStateException`;
  #L23ddc8.  v2:= new `java.lang.StringBuilder`;
  #L23ddcc.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23ddd2.  v3:= "Unable to extract the trust manager on " @kind object;
  #L23ddd6.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23dddc.  v2:= temp @kind object;
  #L23ddde.  call temp:= `get`() @signature `Lokhttp3/internal/Platform;.get:()Lokhttp3/internal/Platform;` @kind static;
  #L23dde4.  v3:= temp @kind object;
  #L23dde6.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23ddec.  v2:= temp @kind object;
  #L23ddee.  v3:= ", sslSocketFactory is " @kind object;
  #L23ddf2.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23ddf8.  v2:= temp @kind object;
  #L23ddfa.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L23de00.  v3:= temp @kind object;
  #L23de02.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23de08.  v2:= temp @kind object;
  #L23de0a.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23de10.  v2:= temp @kind object;
  #L23de12.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23de18.  throw v1;
  #L23de1a.  v4.`okhttp3.OkHttpClient$Builder.sslSocketFactory` @type ^`javax.net.ssl.SSLSocketFactory` := v5 @kind object;
  #L23de1e.  call temp:= `get`(v0) @signature `Lokhttp3/internal/tls/CertificateChainCleaner;.get:(Ljavax/net/ssl/X509TrustManager;)Lokhttp3/internal/tls/CertificateChainCleaner;` @kind static;
  #L23de24.  v1:= temp @kind object;
  #L23de26.  v4.`okhttp3.OkHttpClient$Builder.certificateChainCleaner` @type ^`okhttp3.internal.tls.CertificateChainCleaner` := v1 @kind object;
  #L23de2a.  return v4 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `sslSocketFactory`(`okhttp3.OkHttpClient$Builder` v2 @kind this, `javax.net.ssl.SSLSocketFactory` v3 @kind object @name `sslSocketFactory`, `javax.net.ssl.X509TrustManager` v4 @kind object @name `trustManager`) @signature `Lokhttp3/OkHttpClient$Builder;.sslSocketFactory:(Ljavax/net/ssl/SSLSocketFactory;Ljavax/net/ssl/X509TrustManager;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23de3c.  if v3 != 0 then goto L23de50;
  #L23de40.  v0:= new `java.lang.NullPointerException`;
  #L23de44.  v1:= "sslSocketFactory == null" @kind object;
  #L23de48.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23de4e.  throw v0;
  #L23de50.  if v4 != 0 then goto L23de64;
  #L23de54.  v0:= new `java.lang.NullPointerException`;
  #L23de58.  v1:= "trustManager == null" @kind object;
  #L23de5c.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23de62.  throw v0;
  #L23de64.  v2.`okhttp3.OkHttpClient$Builder.sslSocketFactory` @type ^`javax.net.ssl.SSLSocketFactory` := v3 @kind object;
  #L23de68.  call temp:= `get`(v4) @signature `Lokhttp3/internal/tls/CertificateChainCleaner;.get:(Ljavax/net/ssl/X509TrustManager;)Lokhttp3/internal/tls/CertificateChainCleaner;` @kind static;
  #L23de6e.  v0:= temp @kind object;
  #L23de70.  v2.`okhttp3.OkHttpClient$Builder.certificateChainCleaner` @type ^`okhttp3.internal.tls.CertificateChainCleaner` := v0 @kind object;
  #L23de74.  return v2 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `writeTimeout`(`okhttp3.OkHttpClient$Builder` v7 @kind this, `long` v8 @name `timeout`, `java.util.concurrent.TimeUnit` v10 @kind object @name `unit`) @signature `Lokhttp3/OkHttpClient$Builder;.writeTimeout:(JLjava/util/concurrent/TimeUnit;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L23de88.  v4:= 0L;
  #L23de8c.  v2:= lcmp(v8, v4);
  #L23de90.  if v2 >= 0 then goto L23dea4;
  #L23de94.  v2:= new `java.lang.IllegalArgumentException`;
  #L23de98.  v3:= "timeout < 0" @kind object;
  #L23de9c.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23dea2.  throw v2;
  #L23dea4.  if v10 != 0 then goto L23deb8;
  #L23dea8.  v2:= new `java.lang.NullPointerException`;
  #L23deac.  v3:= "unit == null" @kind object;
  #L23deb0.  call `<init>`(v2, v3) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23deb6.  throw v2;
  #L23deb8.  call temp:= `toMillis`(v10, v8) @signature `Ljava/util/concurrent/TimeUnit;.toMillis:(J)J` @kind virtual;
  #L23debe.  v0:= temp @kind wide;
  #L23dec0.  v2:= 2147483647L;
  #L23dec6.  v2:= lcmp(v0, v2);
  #L23deca.  if v2 <= 0 then goto L23dede;
  #L23dece.  v2:= new `java.lang.IllegalArgumentException`;
  #L23ded2.  v3:= "Timeout too large." @kind object;
  #L23ded6.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23dedc.  throw v2;
  #L23dede.  v2:= lcmp(v0, v4);
  #L23dee2.  if v2 != 0 then goto L23defe;
  #L23dee6.  v2:= lcmp(v8, v4);
  #L23deea.  if v2 <= 0 then goto L23defe;
  #L23deee.  v2:= new `java.lang.IllegalArgumentException`;
  #L23def2.  v3:= "Timeout too small." @kind object;
  #L23def6.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23defc.  throw v2;
  #L23defe.  v2:= (`int`) v0 @kind l2i;
  #L23df00.  v7.`okhttp3.OkHttpClient$Builder.writeTimeout` @type ^`int` := v2;
  #L23df04.  return v7 @kind object;
}
