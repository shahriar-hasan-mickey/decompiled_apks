record `okhttp3.internal.FaultHidingSink` @kind class @AccessFlag  extends `okio.ForwardingSink` @kind class {
  `boolean` `okhttp3.internal.FaultHidingSink.hasErrors` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`okhttp3.internal.FaultHidingSink` v0 @kind this, `okio.Sink` v1 @kind object @name `delegate`) @signature `Lokhttp3/internal/FaultHidingSink;.<init>:(Lokio/Sink;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L350f5c.  call `<init>`(v0, v1) @signature `Lokio/ForwardingSink;.<init>:(Lokio/Sink;)V` @kind direct;
  #L350f62.  return @kind void;
}
procedure `void` `close`(`okhttp3.internal.FaultHidingSink` v2 @kind this) @signature `Lokhttp3/internal/FaultHidingSink;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L350f74.  v1:= v2.`okhttp3.internal.FaultHidingSink.hasErrors` @type ^`boolean` @kind boolean;
  #L350f78.  if v1 == 0 then goto L350f7e;
  #L350f7c.  return @kind void;
  #L350f7e.  call `close`(v2) @signature `Lokio/ForwardingSink;.close:()V` @kind super;
  #L350f84.  goto L350f7c;
  #L350f86.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L350f88.  v1:= 1I;
  #L350f8a.  v2.`okhttp3.internal.FaultHidingSink.hasErrors` @type ^`boolean` := v1 @kind boolean;
  #L350f8e.  call `onException`(v2, v0) @signature `Lokhttp3/internal/FaultHidingSink;.onException:(Ljava/io/IOException;)V` @kind virtual;
  #L350f94.  goto L350f7c;
  catch `java.io.IOException` @[L350f7e..L350f84] goto L350f86;
}
procedure `void` `flush`(`okhttp3.internal.FaultHidingSink` v2 @kind this) @signature `Lokhttp3/internal/FaultHidingSink;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L350fb8.  v1:= v2.`okhttp3.internal.FaultHidingSink.hasErrors` @type ^`boolean` @kind boolean;
  #L350fbc.  if v1 == 0 then goto L350fc2;
  #L350fc0.  return @kind void;
  #L350fc2.  call `flush`(v2) @signature `Lokio/ForwardingSink;.flush:()V` @kind super;
  #L350fc8.  goto L350fc0;
  #L350fca.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L350fcc.  v1:= 1I;
  #L350fce.  v2.`okhttp3.internal.FaultHidingSink.hasErrors` @type ^`boolean` := v1 @kind boolean;
  #L350fd2.  call `onException`(v2, v0) @signature `Lokhttp3/internal/FaultHidingSink;.onException:(Ljava/io/IOException;)V` @kind virtual;
  #L350fd8.  goto L350fc0;
  catch `java.io.IOException` @[L350fc2..L350fc8] goto L350fca;
}
procedure `void` `onException`(`okhttp3.internal.FaultHidingSink` v0 @kind this, `java.io.IOException` v1 @kind object @name `e`) @signature `Lokhttp3/internal/FaultHidingSink;.onException:(Ljava/io/IOException;)V` @AccessFlag PROTECTED {
    temp;

  #L350ffc.  return @kind void;
}
procedure `void` `write`(`okhttp3.internal.FaultHidingSink` v2 @kind this, `okio.Buffer` v3 @kind object @name `source`, `long` v4 @name `byteCount`) @signature `Lokhttp3/internal/FaultHidingSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L351010.  v1:= v2.`okhttp3.internal.FaultHidingSink.hasErrors` @type ^`boolean` @kind boolean;
  #L351014.  if v1 == 0 then goto L351020;
  #L351018.  call `skip`(v3, v4) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L35101e.  return @kind void;
  #L351020.  call `write`(v2, v3, v4) @signature `Lokio/ForwardingSink;.write:(Lokio/Buffer;J)V` @kind super;
  #L351026.  goto L35101e;
  #L351028.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L35102a.  v1:= 1I;
  #L35102c.  v2.`okhttp3.internal.FaultHidingSink.hasErrors` @type ^`boolean` := v1 @kind boolean;
  #L351030.  call `onException`(v2, v0) @signature `Lokhttp3/internal/FaultHidingSink;.onException:(Ljava/io/IOException;)V` @kind virtual;
  #L351036.  goto L35101e;
  catch `java.io.IOException` @[L351020..L351026] goto L351028;
}
