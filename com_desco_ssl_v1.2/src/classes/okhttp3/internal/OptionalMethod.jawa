record `okhttp3.internal.OptionalMethod` @kind class @AccessFlag  {
  `java.lang.String` `okhttp3.internal.OptionalMethod.methodName` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class`[] `okhttp3.internal.OptionalMethod.methodParams` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `okhttp3.internal.OptionalMethod.returnType` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.OptionalMethod` v0 @kind this, `java.lang.Class` v1 @kind object, `java.lang.String` v2 @kind object @name `methodName`, `java.lang.Class`[] v3 @kind object @name `methodParams`) @signature `Lokhttp3/internal/OptionalMethod;.<init>:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L241fe0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L241fe6.  v0.`okhttp3.internal.OptionalMethod.returnType` @type ^`java.lang.Class` := v1 @kind object;
  #L241fea.  v0.`okhttp3.internal.OptionalMethod.methodName` @type ^`java.lang.String` := v2 @kind object;
  #L241fee.  v0.`okhttp3.internal.OptionalMethod.methodParams` @type ^`java.lang.Class`[] := v3 @kind object;
  #L241ff2.  return @kind void;
}
procedure `java.lang.reflect.Method` `getMethod`(`okhttp3.internal.OptionalMethod` v3 @kind this, `java.lang.Class` v4 @kind object) @signature `Lokhttp3/internal/OptionalMethod;.getMethod:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L242004.  v0:= 0I;
  #L242006.  v1:= v3.`okhttp3.internal.OptionalMethod.methodName` @type ^`java.lang.String` @kind object;
  #L24200a.  if v1 == 0 then goto L242044;
  #L24200e.  v1:= v3.`okhttp3.internal.OptionalMethod.methodName` @type ^`java.lang.String` @kind object;
  #L242012.  v2:= v3.`okhttp3.internal.OptionalMethod.methodParams` @type ^`java.lang.Class`[] @kind object;
  #L242016.  call temp:= `getPublicMethod`(v4, v1, v2) @signature `Lokhttp3/internal/OptionalMethod;.getPublicMethod:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind static;
  #L24201c.  v0:= temp @kind object;
  #L24201e.  if v0 == 0 then goto L242044;
  #L242022.  v1:= v3.`okhttp3.internal.OptionalMethod.returnType` @type ^`java.lang.Class` @kind object;
  #L242026.  if v1 == 0 then goto L242044;
  #L24202a.  v1:= v3.`okhttp3.internal.OptionalMethod.returnType` @type ^`java.lang.Class` @kind object;
  #L24202e.  call temp:= `getReturnType`(v0) @signature `Ljava/lang/reflect/Method;.getReturnType:()Ljava/lang/Class;` @kind virtual;
  #L242034.  v2:= temp @kind object;
  #L242036.  call temp:= `isAssignableFrom`(v1, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L24203c.  v1:= temp;
  #L24203e.  if v1 != 0 then goto L242044;
  #L242042.  v0:= 0I;
  #L242044.  return v0 @kind object;
}
procedure `java.lang.reflect.Method` `getPublicMethod`(`java.lang.Class` v2 @kind object, `java.lang.String` v3 @kind object @name `methodName`, `java.lang.Class`[] v4 @kind object @name `parameterTypes`) @signature `Lokhttp3/internal/OptionalMethod;.getPublicMethod:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L242058.  v0:= 0I;
  #L24205a.  call temp:= `getMethod`(v2, v3, v4) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L242060.  v0:= temp @kind object;
  #L242062.  call temp:= `getModifiers`(v0) @signature `Ljava/lang/reflect/Method;.getModifiers:()I` @kind virtual;
  #L242068.  v1:= temp;
  #L24206a.  v1:= v1 ^& 1;
  #L24206e.  if v1 != 0 then goto L242074;
  #L242072.  v0:= 0I;
  #L242074.  return v0 @kind object;
  #L242076.  v1:= Exception @type ^`java.lang.NoSuchMethodException` @kind object;
  #L242078.  goto L242074;
  catch `java.lang.NoSuchMethodException` @[L24205a..L242068] goto L242076;
}
procedure `java.lang.Object` `invoke`(`okhttp3.internal.OptionalMethod` v6 @kind this, `java.lang.Object` v7 @kind object, `java.lang.Object`[] v8 @kind object @name `args`) @signature `Lokhttp3/internal/OptionalMethod;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L24209c.  call temp:= `getClass`(v7) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L2420a2.  v3:= temp @kind object;
  #L2420a4.  call temp:= `getMethod`(v6, v3) @signature `Lokhttp3/internal/OptionalMethod;.getMethod:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L2420aa.  v2:= temp @kind object;
  #L2420ac.  if v2 != 0 then goto L2420fa;
  #L2420b0.  v3:= new `java.lang.AssertionError`;
  #L2420b4.  v4:= new `java.lang.StringBuilder`;
  #L2420b8.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2420be.  v5:= "Method " @kind object;
  #L2420c2.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2420c8.  v4:= temp @kind object;
  #L2420ca.  v5:= v6.`okhttp3.internal.OptionalMethod.methodName` @type ^`java.lang.String` @kind object;
  #L2420ce.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2420d4.  v4:= temp @kind object;
  #L2420d6.  v5:= " not supported for object " @kind object;
  #L2420da.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2420e0.  v4:= temp @kind object;
  #L2420e2.  call temp:= `append`(v4, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2420e8.  v4:= temp @kind object;
  #L2420ea.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2420f0.  v4:= temp @kind object;
  #L2420f2.  call `<init>`(v3, v4) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L2420f8.  throw v3;
  #L2420fa.  call temp:= `invoke`(v2, v7, v8) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L242100.  v3:= temp @kind object;
  #L242102.  return v3 @kind object;
  #L242104.  v0:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L242106.  v1:= new `java.lang.AssertionError`;
  #L24210a.  v3:= new `java.lang.StringBuilder`;
  #L24210e.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L242114.  v4:= "Unexpectedly could not call: " @kind object;
  #L242118.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24211e.  v3:= temp @kind object;
  #L242120.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L242126.  v3:= temp @kind object;
  #L242128.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24212e.  v3:= temp @kind object;
  #L242130.  call `<init>`(v1, v3) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L242136.  call temp:= `initCause`(v1, v0) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L24213c.  throw v1;
  catch `java.lang.IllegalAccessException` @[L2420fa..L242100] goto L242104;
}
procedure `java.lang.Object` `invokeOptional`(`okhttp3.internal.OptionalMethod` v4 @kind this, `java.lang.Object` v5 @kind object, `java.lang.Object`[] v6 @kind object @name `args`) @signature `Lokhttp3/internal/OptionalMethod;.invokeOptional:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L242160.  v2:= 0I;
  #L242162.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L242168.  v3:= temp @kind object;
  #L24216a.  call temp:= `getMethod`(v4, v3) @signature `Lokhttp3/internal/OptionalMethod;.getMethod:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L242170.  v1:= temp @kind object;
  #L242172.  if v1 != 0 then goto L242178;
  #L242176.  return v2 @kind object;
  #L242178.  call temp:= `invoke`(v1, v5, v6) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L24217e.  v2:= temp @kind object;
  #L242180.  goto L242176;
  #L242182.  v0:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L242184.  goto L242176;
  catch `java.lang.IllegalAccessException` @[L242178..L24217e] goto L242182;
}
procedure `java.lang.Object` `invokeOptionalWithoutCheckedException`(`okhttp3.internal.OptionalMethod` v4 @kind this, `java.lang.Object` v5 @kind object, `java.lang.Object`[] v6 @kind object @name `args`) @signature `Lokhttp3/internal/OptionalMethod;.invokeOptionalWithoutCheckedException:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2421a8.  call temp:= `invokeOptional`(v4, v5, v6) @signature `Lokhttp3/internal/OptionalMethod;.invokeOptional:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2421ae.  v3:= temp @kind object;
  #L2421b0.  return v3 @kind object;
  #L2421b2.  v0:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L2421b4.  call temp:= `getTargetException`(v0) @signature `Ljava/lang/reflect/InvocationTargetException;.getTargetException:()Ljava/lang/Throwable;` @kind virtual;
  #L2421ba.  v2:= temp @kind object;
  #L2421bc.  v3:= instanceof @variable v2 @type ^`java.lang.RuntimeException` @kind boolean;
  #L2421c0.  if v3 == 0 then goto L2421ca;
  #L2421c4.  v2:= (`java.lang.RuntimeException`) v2 @kind object;
  #L2421c8.  throw v2;
  #L2421ca.  v1:= new `java.lang.AssertionError`;
  #L2421ce.  v3:= "Unexpected exception" @kind object;
  #L2421d2.  call `<init>`(v1, v3) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L2421d8.  call temp:= `initCause`(v1, v2) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L2421de.  throw v1;
  catch `java.lang.reflect.InvocationTargetException` @[L2421a8..L2421ae] goto L2421b2;
}
procedure `java.lang.Object` `invokeWithoutCheckedException`(`okhttp3.internal.OptionalMethod` v4 @kind this, `java.lang.Object` v5 @kind object, `java.lang.Object`[] v6 @kind object @name `args`) @signature `Lokhttp3/internal/OptionalMethod;.invokeWithoutCheckedException:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L242200.  call temp:= `invoke`(v4, v5, v6) @signature `Lokhttp3/internal/OptionalMethod;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L242206.  v3:= temp @kind object;
  #L242208.  return v3 @kind object;
  #L24220a.  v0:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L24220c.  call temp:= `getTargetException`(v0) @signature `Ljava/lang/reflect/InvocationTargetException;.getTargetException:()Ljava/lang/Throwable;` @kind virtual;
  #L242212.  v2:= temp @kind object;
  #L242214.  v3:= instanceof @variable v2 @type ^`java.lang.RuntimeException` @kind boolean;
  #L242218.  if v3 == 0 then goto L242222;
  #L24221c.  v2:= (`java.lang.RuntimeException`) v2 @kind object;
  #L242220.  throw v2;
  #L242222.  v1:= new `java.lang.AssertionError`;
  #L242226.  v3:= "Unexpected exception" @kind object;
  #L24222a.  call `<init>`(v1, v3) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L242230.  call temp:= `initCause`(v1, v2) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L242236.  throw v1;
  catch `java.lang.reflect.InvocationTargetException` @[L242200..L242206] goto L24220a;
}
procedure `boolean` `isSupported`(`okhttp3.internal.OptionalMethod` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lokhttp3/internal/OptionalMethod;.isSupported:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L242258.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L24225e.  v0:= temp @kind object;
  #L242260.  call temp:= `getMethod`(v1, v0) @signature `Lokhttp3/internal/OptionalMethod;.getMethod:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L242266.  v0:= temp @kind object;
  #L242268.  if v0 == 0 then goto L242270;
  #L24226c.  v0:= 1I;
  #L24226e.  return v0;
  #L242270.  v0:= 0I;
  #L242272.  goto L24226e;
}
