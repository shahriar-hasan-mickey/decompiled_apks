record `okhttp3.internal.framed.NameValueBlockReader$2` @kind class @AccessFlag  extends `java.util.zip.Inflater` @kind class {
  `okhttp3.internal.framed.NameValueBlockReader` `okhttp3.internal.framed.NameValueBlockReader$2.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okhttp3.internal.framed.NameValueBlockReader$2` v0 @kind this, `okhttp3.internal.framed.NameValueBlockReader` v1 @kind object @name `this$0`) @signature `Lokhttp3/internal/framed/NameValueBlockReader$2;.<init>:(Lokhttp3/internal/framed/NameValueBlockReader;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L247288.  v0.`okhttp3.internal.framed.NameValueBlockReader$2.this$0` @type ^`okhttp3.internal.framed.NameValueBlockReader` := v1 @kind object;
  #L24728c.  call `<init>`(v0) @signature `Ljava/util/zip/Inflater;.<init>:()V` @kind direct;
  #L247292.  return @kind void;
}
procedure `int` `inflate`(`okhttp3.internal.framed.NameValueBlockReader$2` v2 @kind this, `byte`[] v3 @kind object @name `buffer`, `int` v4 @name `offset`, `int` v5 @name `count`) @signature `Lokhttp3/internal/framed/NameValueBlockReader$2;.inflate:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2472a4.  call temp:= `inflate`(v2, v3, v4, v5) @signature `Ljava/util/zip/Inflater;.inflate:([BII)I` @kind super;
  #L2472aa.  v0:= temp;
  #L2472ac.  if v0 != 0 then goto L2472ce;
  #L2472b0.  call temp:= `needsDictionary`(v2) @signature `Lokhttp3/internal/framed/NameValueBlockReader$2;.needsDictionary:()Z` @kind virtual;
  #L2472b6.  v1:= temp;
  #L2472b8.  if v1 == 0 then goto L2472ce;
  #L2472bc.  v1:= `@@okhttp3.internal.framed.Spdy3.DICTIONARY` @type ^`byte`[] @kind object;
  #L2472c0.  call `setDictionary`(v2, v1) @signature `Lokhttp3/internal/framed/NameValueBlockReader$2;.setDictionary:([B)V` @kind virtual;
  #L2472c6.  call temp:= `inflate`(v2, v3, v4, v5) @signature `Ljava/util/zip/Inflater;.inflate:([BII)I` @kind super;
  #L2472cc.  v0:= temp;
  #L2472ce.  return v0;
}
