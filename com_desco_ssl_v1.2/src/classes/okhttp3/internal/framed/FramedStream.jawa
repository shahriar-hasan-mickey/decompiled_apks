record `okhttp3.internal.framed.FramedStream` @kind class @AccessFlag PUBLIC_FINAL {
  `long` `okhttp3.internal.framed.FramedStream.bytesLeftInWriteWindow` @AccessFlag ;
  `okhttp3.internal.framed.FramedConnection` `okhttp3.internal.framed.FramedStream.connection` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.framed.ErrorCode` `okhttp3.internal.framed.FramedStream.errorCode` @AccessFlag PRIVATE;
  `int` `okhttp3.internal.framed.FramedStream.id` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.framed.FramedStream$StreamTimeout` `okhttp3.internal.framed.FramedStream.readTimeout` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `okhttp3.internal.framed.FramedStream.requestHeaders` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `okhttp3.internal.framed.FramedStream.responseHeaders` @AccessFlag PRIVATE;
  `okhttp3.internal.framed.FramedStream$FramedDataSink` `okhttp3.internal.framed.FramedStream.sink` @AccessFlag FINAL;
  `okhttp3.internal.framed.FramedStream$FramedDataSource` `okhttp3.internal.framed.FramedStream.source` @AccessFlag PRIVATE_FINAL;
  `long` `okhttp3.internal.framed.FramedStream.unacknowledgedBytesRead` @AccessFlag ;
  `okhttp3.internal.framed.FramedStream$StreamTimeout` `okhttp3.internal.framed.FramedStream.writeTimeout` @AccessFlag PRIVATE_FINAL;
}
global `boolean` `@@okhttp3.internal.framed.FramedStream.$assertionsDisabled` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/framed/FramedStream;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L244904.  v0:= constclass @type ^`okhttp3.internal.framed.FramedStream` @kind object;
  #L244908.  call temp:= `desiredAssertionStatus`(v0) @signature `Ljava/lang/Class;.desiredAssertionStatus:()Z` @kind virtual;
  #L24490e.  v0:= temp;
  #L244910.  if v0 != 0 then goto L24491c;
  #L244914.  v0:= 1I;
  #L244916.  `@@okhttp3.internal.framed.FramedStream.$assertionsDisabled` @type ^`boolean` := v0 @kind boolean;
  #L24491a.  return @kind void;
  #L24491c.  v0:= 0I;
  #L24491e.  goto L244916;
}
procedure `void` `<init>`(`okhttp3.internal.framed.FramedStream` v5 @kind this, `int` v6 @name `id`, `okhttp3.internal.framed.FramedConnection` v7 @kind object @name `connection`, `boolean` v8 @name `outFinished`, `boolean` v9 @name `inFinished`, `java.util.List` v10 @kind object) @signature `Lokhttp3/internal/framed/FramedStream;.<init>:(ILokhttp3/internal/framed/FramedConnection;ZZLjava/util/List;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L244930.  v4:= 0I;
  #L244932.  v2:= 65536I;
  #L244936.  call `<init>`(v5) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L24493c.  v0:= 0L;
  #L244940.  v5.`okhttp3.internal.framed.FramedStream.unacknowledgedBytesRead` @type ^`long` := v0 @kind wide;
  #L244944.  v0:= new `okhttp3.internal.framed.FramedStream$StreamTimeout`;
  #L244948.  call `<init>`(v0, v5) @signature `Lokhttp3/internal/framed/FramedStream$StreamTimeout;.<init>:(Lokhttp3/internal/framed/FramedStream;)V` @kind direct;
  #L24494e.  v5.`okhttp3.internal.framed.FramedStream.readTimeout` @type ^`okhttp3.internal.framed.FramedStream$StreamTimeout` := v0 @kind object;
  #L244952.  v0:= new `okhttp3.internal.framed.FramedStream$StreamTimeout`;
  #L244956.  call `<init>`(v0, v5) @signature `Lokhttp3/internal/framed/FramedStream$StreamTimeout;.<init>:(Lokhttp3/internal/framed/FramedStream;)V` @kind direct;
  #L24495c.  v5.`okhttp3.internal.framed.FramedStream.writeTimeout` @type ^`okhttp3.internal.framed.FramedStream$StreamTimeout` := v0 @kind object;
  #L244960.  v5.`okhttp3.internal.framed.FramedStream.errorCode` @type ^`okhttp3.internal.framed.ErrorCode` := v4 @kind object;
  #L244964.  if v7 != 0 then goto L244978;
  #L244968.  v0:= new `java.lang.NullPointerException`;
  #L24496c.  v1:= "connection == null" @kind object;
  #L244970.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L244976.  throw v0;
  #L244978.  if v10 != 0 then goto L24498c;
  #L24497c.  v0:= new `java.lang.NullPointerException`;
  #L244980.  v1:= "requestHeaders == null" @kind object;
  #L244984.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24498a.  throw v0;
  #L24498c.  v5.`okhttp3.internal.framed.FramedStream.id` @type ^`int` := v6;
  #L244990.  v5.`okhttp3.internal.framed.FramedStream.connection` @type ^`okhttp3.internal.framed.FramedConnection` := v7 @kind object;
  #L244994.  v0:= v7.`okhttp3.internal.framed.FramedConnection.peerSettings` @type ^`okhttp3.internal.framed.Settings` @kind object;
  #L244998.  call temp:= `getInitialWindowSize`(v0, v2) @signature `Lokhttp3/internal/framed/Settings;.getInitialWindowSize:(I)I` @kind virtual;
  #L24499e.  v0:= temp;
  #L2449a0.  v0:= (`long`) v0 @kind i2l;
  #L2449a2.  v5.`okhttp3.internal.framed.FramedStream.bytesLeftInWriteWindow` @type ^`long` := v0 @kind wide;
  #L2449a6.  v0:= new `okhttp3.internal.framed.FramedStream$FramedDataSource`;
  #L2449aa.  v1:= v7.`okhttp3.internal.framed.FramedConnection.okHttpSettings` @type ^`okhttp3.internal.framed.Settings` @kind object;
  #L2449ae.  call temp:= `getInitialWindowSize`(v1, v2) @signature `Lokhttp3/internal/framed/Settings;.getInitialWindowSize:(I)I` @kind virtual;
  #L2449b4.  v1:= temp;
  #L2449b6.  v2:= (`long`) v1 @kind i2l;
  #L2449b8.  call `<init>`(v0, v5, v2, v4) @signature `Lokhttp3/internal/framed/FramedStream$FramedDataSource;.<init>:(Lokhttp3/internal/framed/FramedStream;JLokhttp3/internal/framed/FramedStream$1;)V` @kind direct;
  #L2449be.  v5.`okhttp3.internal.framed.FramedStream.source` @type ^`okhttp3.internal.framed.FramedStream$FramedDataSource` := v0 @kind object;
  #L2449c2.  v0:= new `okhttp3.internal.framed.FramedStream$FramedDataSink`;
  #L2449c6.  call `<init>`(v0, v5) @signature `Lokhttp3/internal/framed/FramedStream$FramedDataSink;.<init>:(Lokhttp3/internal/framed/FramedStream;)V` @kind direct;
  #L2449cc.  v5.`okhttp3.internal.framed.FramedStream.sink` @type ^`okhttp3.internal.framed.FramedStream$FramedDataSink` := v0 @kind object;
  #L2449d0.  v0:= v5.`okhttp3.internal.framed.FramedStream.source` @type ^`okhttp3.internal.framed.FramedStream$FramedDataSource` @kind object;
  #L2449d4.  call temp:= `access$102`(v0, v9) @signature `Lokhttp3/internal/framed/FramedStream$FramedDataSource;.access$102:(Lokhttp3/internal/framed/FramedStream$FramedDataSource;Z)Z` @kind static;
  #L2449da.  v0:= v5.`okhttp3.internal.framed.FramedStream.sink` @type ^`okhttp3.internal.framed.FramedStream$FramedDataSink` @kind object;
  #L2449de.  call temp:= `access$202`(v0, v8) @signature `Lokhttp3/internal/framed/FramedStream$FramedDataSink;.access$202:(Lokhttp3/internal/framed/FramedStream$FramedDataSink;Z)Z` @kind static;
  #L2449e4.  v5.`okhttp3.internal.framed.FramedStream.requestHeaders` @type ^`java.util.List` := v10 @kind object;
  #L2449e8.  return @kind void;
}
procedure `void` `access$1000`(`okhttp3.internal.framed.FramedStream` v0 @kind object @name `x0`) @signature `Lokhttp3/internal/framed/FramedStream;.access$1000:(Lokhttp3/internal/framed/FramedStream;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L2449fc.  call `cancelStreamIfNecessary`(v0) @signature `Lokhttp3/internal/framed/FramedStream;.cancelStreamIfNecessary:()V` @kind direct;
  #L244a02.  return @kind void;
}
procedure `okhttp3.internal.framed.FramedStream$StreamTimeout` `access$1100`(`okhttp3.internal.framed.FramedStream` v1 @kind object @name `x0`) @signature `Lokhttp3/internal/framed/FramedStream;.access$1100:(Lokhttp3/internal/framed/FramedStream;)Lokhttp3/internal/framed/FramedStream$StreamTimeout;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L244a14.  v0:= v1.`okhttp3.internal.framed.FramedStream.writeTimeout` @type ^`okhttp3.internal.framed.FramedStream$StreamTimeout` @kind object;
  #L244a18.  return v0 @kind object;
}
procedure `void` `access$1200`(`okhttp3.internal.framed.FramedStream` v0 @kind object @name `x0`) @signature `Lokhttp3/internal/framed/FramedStream;.access$1200:(Lokhttp3/internal/framed/FramedStream;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L244a2c.  call `checkOutNotClosed`(v0) @signature `Lokhttp3/internal/framed/FramedStream;.checkOutNotClosed:()V` @kind direct;
  #L244a32.  return @kind void;
}
procedure `okhttp3.internal.framed.FramedConnection` `access$500`(`okhttp3.internal.framed.FramedStream` v1 @kind object @name `x0`) @signature `Lokhttp3/internal/framed/FramedStream;.access$500:(Lokhttp3/internal/framed/FramedStream;)Lokhttp3/internal/framed/FramedConnection;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L244a44.  v0:= v1.`okhttp3.internal.framed.FramedStream.connection` @type ^`okhttp3.internal.framed.FramedConnection` @kind object;
  #L244a48.  return v0 @kind object;
}
procedure `int` `access$600`(`okhttp3.internal.framed.FramedStream` v1 @kind object @name `x0`) @signature `Lokhttp3/internal/framed/FramedStream;.access$600:(Lokhttp3/internal/framed/FramedStream;)I` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L244a5c.  v0:= v1.`okhttp3.internal.framed.FramedStream.id` @type ^`int`;
  #L244a60.  return v0;
}
procedure `okhttp3.internal.framed.FramedStream$StreamTimeout` `access$700`(`okhttp3.internal.framed.FramedStream` v1 @kind object @name `x0`) @signature `Lokhttp3/internal/framed/FramedStream;.access$700:(Lokhttp3/internal/framed/FramedStream;)Lokhttp3/internal/framed/FramedStream$StreamTimeout;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L244a74.  v0:= v1.`okhttp3.internal.framed.FramedStream.readTimeout` @type ^`okhttp3.internal.framed.FramedStream$StreamTimeout` @kind object;
  #L244a78.  return v0 @kind object;
}
procedure `okhttp3.internal.framed.ErrorCode` `access$800`(`okhttp3.internal.framed.FramedStream` v1 @kind object @name `x0`) @signature `Lokhttp3/internal/framed/FramedStream;.access$800:(Lokhttp3/internal/framed/FramedStream;)Lokhttp3/internal/framed/ErrorCode;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L244a8c.  v0:= v1.`okhttp3.internal.framed.FramedStream.errorCode` @type ^`okhttp3.internal.framed.ErrorCode` @kind object;
  #L244a90.  return v0 @kind object;
}
procedure `void` `access$900`(`okhttp3.internal.framed.FramedStream` v0 @kind object @name `x0`) @signature `Lokhttp3/internal/framed/FramedStream;.access$900:(Lokhttp3/internal/framed/FramedStream;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L244aa4.  call `waitForIo`(v0) @signature `Lokhttp3/internal/framed/FramedStream;.waitForIo:()V` @kind direct;
  #L244aaa.  return @kind void;
}
procedure `void` `cancelStreamIfNecessary`(`okhttp3.internal.framed.FramedStream` v4 @kind this) @signature `Lokhttp3/internal/framed/FramedStream;.cancelStreamIfNecessary:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L244abc.  v2:= `@@okhttp3.internal.framed.FramedStream.$assertionsDisabled` @type ^`boolean` @kind boolean;
  #L244ac0.  if v2 != 0 then goto L244adc;
  #L244ac4.  call temp:= `holdsLock`(v4) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L244aca.  v2:= temp;
  #L244acc.  if v2 == 0 then goto L244adc;
  #L244ad0.  v2:= new `java.lang.AssertionError`;
  #L244ad4.  call `<init>`(v2) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L244ada.  throw v2;
  #L244adc.  @monitorenter v4
  #L244ade.  v2:= v4.`okhttp3.internal.framed.FramedStream.source` @type ^`okhttp3.internal.framed.FramedStream$FramedDataSource` @kind object;
  #L244ae2.  call temp:= `access$100`(v2) @signature `Lokhttp3/internal/framed/FramedStream$FramedDataSource;.access$100:(Lokhttp3/internal/framed/FramedStream$FramedDataSource;)Z` @kind static;
  #L244ae8.  v2:= temp;
  #L244aea.  if v2 != 0 then goto L244b3a;
  #L244aee.  v2:= v4.`okhttp3.internal.framed.FramedStream.source` @type ^`okhttp3.internal.framed.FramedStream$FramedDataSource` @kind object;
  #L244af2.  call temp:= `access$300`(v2) @signature `Lokhttp3/internal/framed/FramedStream$FramedDataSource;.access$300:(Lokhttp3/internal/framed/FramedStream$FramedDataSource;)Z` @kind static;
  #L244af8.  v2:= temp;
  #L244afa.  if v2 == 0 then goto L244b3a;
  #L244afe.  v2:= v4.`okhttp3.internal.framed.FramedStream.sink` @type ^`okhttp3.internal.framed.FramedStream$FramedDataSink` @kind object;
  #L244b02.  call temp:= `access$200`(v2) @signature `Lokhttp3/internal/framed/FramedStream$FramedDataSink;.access$200:(Lokhttp3/internal/framed/FramedStream$FramedDataSink;)Z` @kind static;
  #L244b08.  v2:= temp;
  #L244b0a.  if v2 != 0 then goto L244b1e;
  #L244b0e.  v2:= v4.`okhttp3.internal.framed.FramedStream.sink` @type ^`okhttp3.internal.framed.FramedStream$FramedDataSink` @kind object;
  #L244b12.  call temp:= `access$400`(v2) @signature `Lokhttp3/internal/framed/FramedStream$FramedDataSink;.access$400:(Lokhttp3/internal/framed/FramedStream$FramedDataSink;)Z` @kind static;
  #L244b18.  v2:= temp;
  #L244b1a.  if v2 == 0 then goto L244b3a;
  #L244b1e.  v0:= 1I;
  #L244b20.  call temp:= `isOpen`(v4) @signature `Lokhttp3/internal/framed/FramedStream;.isOpen:()Z` @kind virtual;
  #L244b26.  v1:= temp;
  #L244b28.  @monitorexit v4
  #L244b2a.  if v0 == 0 then goto L244b44;
  #L244b2e.  v2:= `@@okhttp3.internal.framed.ErrorCode.CANCEL` @type ^`okhttp3.internal.framed.ErrorCode` @kind object;
  #L244b32.  call `close`(v4, v2) @signature `Lokhttp3/internal/framed/FramedStream;.close:(Lokhttp3/internal/framed/ErrorCode;)V` @kind virtual;
  #L244b38.  return @kind void;
  #L244b3a.  v0:= 0I;
  #L244b3c.  goto L244b20;
  #L244b3e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L244b40.  @monitorexit v4
  #L244b42.  throw v2;
  #L244b44.  if v1 != 0 then goto L244b38;
  #L244b48.  v2:= v4.`okhttp3.internal.framed.FramedStream.connection` @type ^`okhttp3.internal.framed.FramedConnection` @kind object;
  #L244b4c.  v3:= v4.`okhttp3.internal.framed.FramedStream.id` @type ^`int`;
  #L244b50.  call temp:= `removeStream`(v2, v3) @signature `Lokhttp3/internal/framed/FramedConnection;.removeStream:(I)Lokhttp3/internal/framed/FramedStream;` @kind virtual;
  #L244b56.  goto L244b38;
  catch `java.lang.Throwable` @[L244ade..L244b2a] goto L244b3e;
  catch `java.lang.Throwable` @[L244b40..L244b42] goto L244b3e;
}
procedure `void` `checkOutNotClosed`(`okhttp3.internal.framed.FramedStream` v2 @kind this) @signature `Lokhttp3/internal/framed/FramedStream;.checkOutNotClosed:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L244b7c.  v0:= v2.`okhttp3.internal.framed.FramedStream.sink` @type ^`okhttp3.internal.framed.FramedStream$FramedDataSink` @kind object;
  #L244b80.  call temp:= `access$400`(v0) @signature `Lokhttp3/internal/framed/FramedStream$FramedDataSink;.access$400:(Lokhttp3/internal/framed/FramedStream$FramedDataSink;)Z` @kind static;
  #L244b86.  v0:= temp;
  #L244b88.  if v0 == 0 then goto L244b9c;
  #L244b8c.  v0:= new `java.io.IOException`;
  #L244b90.  v1:= "stream closed" @kind object;
  #L244b94.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L244b9a.  throw v0;
  #L244b9c.  v0:= v2.`okhttp3.internal.framed.FramedStream.sink` @type ^`okhttp3.internal.framed.FramedStream$FramedDataSink` @kind object;
  #L244ba0.  call temp:= `access$200`(v0) @signature `Lokhttp3/internal/framed/FramedStream$FramedDataSink;.access$200:(Lokhttp3/internal/framed/FramedStream$FramedDataSink;)Z` @kind static;
  #L244ba6.  v0:= temp;
  #L244ba8.  if v0 == 0 then goto L244bbc;
  #L244bac.  v0:= new `java.io.IOException`;
  #L244bb0.  v1:= "stream finished" @kind object;
  #L244bb4.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L244bba.  throw v0;
  #L244bbc.  v0:= v2.`okhttp3.internal.framed.FramedStream.errorCode` @type ^`okhttp3.internal.framed.ErrorCode` @kind object;
  #L244bc0.  if v0 == 0 then goto L244bd4;
  #L244bc4.  v0:= new `okhttp3.internal.framed.StreamResetException`;
  #L244bc8.  v1:= v2.`okhttp3.internal.framed.FramedStream.errorCode` @type ^`okhttp3.internal.framed.ErrorCode` @kind object;
  #L244bcc.  call `<init>`(v0, v1) @signature `Lokhttp3/internal/framed/StreamResetException;.<init>:(Lokhttp3/internal/framed/ErrorCode;)V` @kind direct;
  #L244bd2.  throw v0;
  #L244bd4.  return @kind void;
}
procedure `boolean` `closeInternal`(`okhttp3.internal.framed.FramedStream` v2 @kind this, `okhttp3.internal.framed.ErrorCode` v3 @kind object @name `errorCode`) @signature `Lokhttp3/internal/framed/FramedStream;.closeInternal:(Lokhttp3/internal/framed/ErrorCode;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L244be8.  v0:= 0I;
  #L244bea.  v1:= `@@okhttp3.internal.framed.FramedStream.$assertionsDisabled` @type ^`boolean` @kind boolean;
  #L244bee.  if v1 != 0 then goto L244c0a;
  #L244bf2.  call temp:= `holdsLock`(v2) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L244bf8.  v1:= temp;
  #L244bfa.  if v1 == 0 then goto L244c0a;
  #L244bfe.  v0:= new `java.lang.AssertionError`;
  #L244c02.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L244c08.  throw v0;
  #L244c0a.  @monitorenter v2
  #L244c0c.  v1:= v2.`okhttp3.internal.framed.FramedStream.errorCode` @type ^`okhttp3.internal.framed.ErrorCode` @kind object;
  #L244c10.  if v1 == 0 then goto L244c18;
  #L244c14.  @monitorexit v2
  #L244c16.  return v0;
  #L244c18.  v1:= v2.`okhttp3.internal.framed.FramedStream.source` @type ^`okhttp3.internal.framed.FramedStream$FramedDataSource` @kind object;
  #L244c1c.  call temp:= `access$100`(v1) @signature `Lokhttp3/internal/framed/FramedStream$FramedDataSource;.access$100:(Lokhttp3/internal/framed/FramedStream$FramedDataSource;)Z` @kind static;
  #L244c22.  v1:= temp;
  #L244c24.  if v1 == 0 then goto L244c42;
  #L244c28.  v1:= v2.`okhttp3.internal.framed.FramedStream.sink` @type ^`okhttp3.internal.framed.FramedStream$FramedDataSink` @kind object;
  #L244c2c.  call temp:= `access$200`(v1) @signature `Lokhttp3/internal/framed/FramedStream$FramedDataSink;.access$200:(Lokhttp3/internal/framed/FramedStream$FramedDataSink;)Z` @kind static;
  #L244c32.  v1:= temp;
  #L244c34.  if v1 == 0 then goto L244c42;
  #L244c38.  @monitorexit v2
  #L244c3a.  goto L244c16;
  #L244c3c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L244c3e.  @monitorexit v2
  #L244c40.  throw v0;
  #L244c42.  v2.`okhttp3.internal.framed.FramedStream.errorCode` @type ^`okhttp3.internal.framed.ErrorCode` := v3 @kind object;
  #L244c46.  call `notifyAll`(v2) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L244c4c.  @monitorexit v2
  #L244c4e.  v0:= v2.`okhttp3.internal.framed.FramedStream.connection` @type ^`okhttp3.internal.framed.FramedConnection` @kind object;
  #L244c52.  v1:= v2.`okhttp3.internal.framed.FramedStream.id` @type ^`int`;
  #L244c56.  call temp:= `removeStream`(v0, v1) @signature `Lokhttp3/internal/framed/FramedConnection;.removeStream:(I)Lokhttp3/internal/framed/FramedStream;` @kind virtual;
  #L244c5c.  v0:= 1I;
  #L244c5e.  goto L244c16;
  catch `java.lang.Throwable` @[L244c0c..L244c40] goto L244c3c;
  catch `java.lang.Throwable` @[L244c42..L244c4e] goto L244c3c;
}
procedure `void` `waitForIo`(`okhttp3.internal.framed.FramedStream` v2 @kind this) @signature `Lokhttp3/internal/framed/FramedStream;.waitForIo:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L244c84.  call `wait`(v2) @signature `Ljava/lang/Object;.wait:()V` @kind virtual;
  #L244c8a.  return @kind void;
  #L244c8c.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L244c8e.  v1:= new `java.io.InterruptedIOException`;
  #L244c92.  call `<init>`(v1) @signature `Ljava/io/InterruptedIOException;.<init>:()V` @kind direct;
  #L244c98.  throw v1;
  catch `java.lang.InterruptedException` @[L244c84..L244c8a] goto L244c8c;
}
procedure `void` `addBytesToWriteWindow`(`okhttp3.internal.framed.FramedStream` v3 @kind this, `long` v4 @name `delta`) @signature `Lokhttp3/internal/framed/FramedStream;.addBytesToWriteWindow:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L244cbc.  v0:= v3.`okhttp3.internal.framed.FramedStream.bytesLeftInWriteWindow` @type ^`long` @kind wide;
  #L244cc0.  v0:= v0 + v4 @kind long;
  #L244cc2.  v3.`okhttp3.internal.framed.FramedStream.bytesLeftInWriteWindow` @type ^`long` := v0 @kind wide;
  #L244cc6.  v0:= 0L;
  #L244cca.  v0:= lcmp(v4, v0);
  #L244cce.  if v0 <= 0 then goto L244cd8;
  #L244cd2.  call `notifyAll`(v3) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L244cd8.  return @kind void;
}
procedure `void` `close`(`okhttp3.internal.framed.FramedStream` v2 @kind this, `okhttp3.internal.framed.ErrorCode` v3 @kind object @name `rstStatusCode`) @signature `Lokhttp3/internal/framed/FramedStream;.close:(Lokhttp3/internal/framed/ErrorCode;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L244cec.  call temp:= `closeInternal`(v2, v3) @signature `Lokhttp3/internal/framed/FramedStream;.closeInternal:(Lokhttp3/internal/framed/ErrorCode;)Z` @kind direct;
  #L244cf2.  v0:= temp;
  #L244cf4.  if v0 != 0 then goto L244cfa;
  #L244cf8.  return @kind void;
  #L244cfa.  v0:= v2.`okhttp3.internal.framed.FramedStream.connection` @type ^`okhttp3.internal.framed.FramedConnection` @kind object;
  #L244cfe.  v1:= v2.`okhttp3.internal.framed.FramedStream.id` @type ^`int`;
  #L244d02.  call `writeSynReset`(v0, v1, v3) @signature `Lokhttp3/internal/framed/FramedConnection;.writeSynReset:(ILokhttp3/internal/framed/ErrorCode;)V` @kind virtual;
  #L244d08.  goto L244cf8;
}
procedure `void` `closeLater`(`okhttp3.internal.framed.FramedStream` v2 @kind this, `okhttp3.internal.framed.ErrorCode` v3 @kind object @name `errorCode`) @signature `Lokhttp3/internal/framed/FramedStream;.closeLater:(Lokhttp3/internal/framed/ErrorCode;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L244d1c.  call temp:= `closeInternal`(v2, v3) @signature `Lokhttp3/internal/framed/FramedStream;.closeInternal:(Lokhttp3/internal/framed/ErrorCode;)Z` @kind direct;
  #L244d22.  v0:= temp;
  #L244d24.  if v0 != 0 then goto L244d2a;
  #L244d28.  return @kind void;
  #L244d2a.  v0:= v2.`okhttp3.internal.framed.FramedStream.connection` @type ^`okhttp3.internal.framed.FramedConnection` @kind object;
  #L244d2e.  v1:= v2.`okhttp3.internal.framed.FramedStream.id` @type ^`int`;
  #L244d32.  call `writeSynResetLater`(v0, v1, v3) @signature `Lokhttp3/internal/framed/FramedConnection;.writeSynResetLater:(ILokhttp3/internal/framed/ErrorCode;)V` @kind virtual;
  #L244d38.  goto L244d28;
}
procedure `okhttp3.internal.framed.FramedConnection` `getConnection`(`okhttp3.internal.framed.FramedStream` v1 @kind this) @signature `Lokhttp3/internal/framed/FramedStream;.getConnection:()Lokhttp3/internal/framed/FramedConnection;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L244d4c.  v0:= v1.`okhttp3.internal.framed.FramedStream.connection` @type ^`okhttp3.internal.framed.FramedConnection` @kind object;
  #L244d50.  return v0 @kind object;
}
procedure `okhttp3.internal.framed.ErrorCode` `getErrorCode`(`okhttp3.internal.framed.FramedStream` v1 @kind this) @signature `Lokhttp3/internal/framed/FramedStream;.getErrorCode:()Lokhttp3/internal/framed/ErrorCode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L244d64.  @monitorenter v1
  #L244d66.  v0:= v1.`okhttp3.internal.framed.FramedStream.errorCode` @type ^`okhttp3.internal.framed.ErrorCode` @kind object;
  #L244d6a.  @monitorexit v1
  #L244d6c.  return v0 @kind object;
  #L244d6e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L244d70.  @monitorexit v1
  #L244d72.  throw v0;
  catch `java.lang.Throwable` @[L244d66..L244d6a] goto L244d6e;
}
procedure `int` `getId`(`okhttp3.internal.framed.FramedStream` v1 @kind this) @signature `Lokhttp3/internal/framed/FramedStream;.getId:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L244d90.  v0:= v1.`okhttp3.internal.framed.FramedStream.id` @type ^`int`;
  #L244d94.  return v0;
}
procedure `java.util.List` `getRequestHeaders`(`okhttp3.internal.framed.FramedStream` v1 @kind this) @signature `Lokhttp3/internal/framed/FramedStream;.getRequestHeaders:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L244da8.  v0:= v1.`okhttp3.internal.framed.FramedStream.requestHeaders` @type ^`java.util.List` @kind object;
  #L244dac.  return v0 @kind object;
}
procedure `java.util.List` `getResponseHeaders`(`okhttp3.internal.framed.FramedStream` v2 @kind this) @signature `Lokhttp3/internal/framed/FramedStream;.getResponseHeaders:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L244dc0.  @monitorenter v2
  #L244dc2.  v0:= v2.`okhttp3.internal.framed.FramedStream.readTimeout` @type ^`okhttp3.internal.framed.FramedStream$StreamTimeout` @kind object;
  #L244dc6.  call `enter`(v0) @signature `Lokhttp3/internal/framed/FramedStream$StreamTimeout;.enter:()V` @kind virtual;
  #L244dcc.  v0:= v2.`okhttp3.internal.framed.FramedStream.responseHeaders` @type ^`java.util.List` @kind object;
  #L244dd0.  if v0 != 0 then goto L244df8;
  #L244dd4.  v0:= v2.`okhttp3.internal.framed.FramedStream.errorCode` @type ^`okhttp3.internal.framed.ErrorCode` @kind object;
  #L244dd8.  if v0 != 0 then goto L244df8;
  #L244ddc.  call `waitForIo`(v2) @signature `Lokhttp3/internal/framed/FramedStream;.waitForIo:()V` @kind direct;
  #L244de2.  goto L244dcc;
  #L244de4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L244de6.  v1:= v2.`okhttp3.internal.framed.FramedStream.readTimeout` @type ^`okhttp3.internal.framed.FramedStream$StreamTimeout` @kind object;
  #L244dea.  call `exitAndThrowIfTimedOut`(v1) @signature `Lokhttp3/internal/framed/FramedStream$StreamTimeout;.exitAndThrowIfTimedOut:()V` @kind virtual;
  #L244df0.  throw v0;
  #L244df2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L244df4.  @monitorexit v2
  #L244df6.  throw v0;
  #L244df8.  v0:= v2.`okhttp3.internal.framed.FramedStream.readTimeout` @type ^`okhttp3.internal.framed.FramedStream$StreamTimeout` @kind object;
  #L244dfc.  call `exitAndThrowIfTimedOut`(v0) @signature `Lokhttp3/internal/framed/FramedStream$StreamTimeout;.exitAndThrowIfTimedOut:()V` @kind virtual;
  #L244e02.  v0:= v2.`okhttp3.internal.framed.FramedStream.responseHeaders` @type ^`java.util.List` @kind object;
  #L244e06.  if v0 == 0 then goto L244e12;
  #L244e0a.  v0:= v2.`okhttp3.internal.framed.FramedStream.responseHeaders` @type ^`java.util.List` @kind object;
  #L244e0e.  @monitorexit v2
  #L244e10.  return v0 @kind object;
  #L244e12.  v0:= new `okhttp3.internal.framed.StreamResetException`;
  #L244e16.  v1:= v2.`okhttp3.internal.framed.FramedStream.errorCode` @type ^`okhttp3.internal.framed.ErrorCode` @kind object;
  #L244e1a.  call `<init>`(v0, v1) @signature `Lokhttp3/internal/framed/StreamResetException;.<init>:(Lokhttp3/internal/framed/ErrorCode;)V` @kind direct;
  #L244e20.  throw v0;
  catch `java.lang.Throwable` @[L244dc2..L244dcc] goto L244df2;
  catch `java.lang.Throwable` @[L244dcc..L244de2] goto L244de4;
  catch `java.lang.Throwable` @[L244de6..L244df2] goto L244df2;
  catch `java.lang.Throwable` @[L244df8..L244e0e] goto L244df2;
  catch `java.lang.Throwable` @[L244e12..L244e22] goto L244df2;
}
procedure `okio.Sink` `getSink`(`okhttp3.internal.framed.FramedStream` v2 @kind this) @signature `Lokhttp3/internal/framed/FramedStream;.getSink:()Lokio/Sink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L244e64.  @monitorenter v2
  #L244e66.  v0:= v2.`okhttp3.internal.framed.FramedStream.responseHeaders` @type ^`java.util.List` @kind object;
  #L244e6a.  if v0 != 0 then goto L244e90;
  #L244e6e.  call temp:= `isLocallyInitiated`(v2) @signature `Lokhttp3/internal/framed/FramedStream;.isLocallyInitiated:()Z` @kind virtual;
  #L244e74.  v0:= temp;
  #L244e76.  if v0 != 0 then goto L244e90;
  #L244e7a.  v0:= new `java.lang.IllegalStateException`;
  #L244e7e.  v1:= "reply before requesting the sink" @kind object;
  #L244e82.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L244e88.  throw v0;
  #L244e8a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L244e8c.  @monitorexit v2
  #L244e8e.  throw v0;
  #L244e90.  @monitorexit v2
  #L244e92.  v0:= v2.`okhttp3.internal.framed.FramedStream.sink` @type ^`okhttp3.internal.framed.FramedStream$FramedDataSink` @kind object;
  #L244e96.  return v0 @kind object;
  catch `java.lang.Throwable` @[L244e66..L244e8e] goto L244e8a;
  catch `java.lang.Throwable` @[L244e90..L244e92] goto L244e8a;
}
procedure `okio.Source` `getSource`(`okhttp3.internal.framed.FramedStream` v1 @kind this) @signature `Lokhttp3/internal/framed/FramedStream;.getSource:()Lokio/Source;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L244ebc.  v0:= v1.`okhttp3.internal.framed.FramedStream.source` @type ^`okhttp3.internal.framed.FramedStream$FramedDataSource` @kind object;
  #L244ec0.  return v0 @kind object;
}
procedure `boolean` `isLocallyInitiated`(`okhttp3.internal.framed.FramedStream` v4 @kind this) @signature `Lokhttp3/internal/framed/FramedStream;.isLocallyInitiated:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L244ed4.  v2:= 0I;
  #L244ed6.  v1:= 1I;
  #L244ed8.  v3:= v4.`okhttp3.internal.framed.FramedStream.id` @type ^`int`;
  #L244edc.  v3:= v3 ^& 1;
  #L244ee0.  if v3 != v1 then goto L244ef4;
  #L244ee4.  v0:= v1;
  #L244ee6.  v3:= v4.`okhttp3.internal.framed.FramedStream.connection` @type ^`okhttp3.internal.framed.FramedConnection` @kind object;
  #L244eea.  v3:= v3.`okhttp3.internal.framed.FramedConnection.client` @type ^`boolean` @kind boolean;
  #L244eee.  if v3 != v0 then goto L244ef8;
  #L244ef2.  return v1;
  #L244ef4.  v0:= v2;
  #L244ef6.  goto L244ee6;
  #L244ef8.  v1:= v2;
  #L244efa.  goto L244ef2;
}
procedure `boolean` `isOpen`(`okhttp3.internal.framed.FramedStream` v2 @kind this) @signature `Lokhttp3/internal/framed/FramedStream;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L244f0c.  v0:= 0I;
  #L244f0e.  @monitorenter v2
  #L244f10.  v1:= v2.`okhttp3.internal.framed.FramedStream.errorCode` @type ^`okhttp3.internal.framed.ErrorCode` @kind object;
  #L244f14.  if v1 == 0 then goto L244f1c;
  #L244f18.  @monitorexit v2
  #L244f1a.  return v0;
  #L244f1c.  v1:= v2.`okhttp3.internal.framed.FramedStream.source` @type ^`okhttp3.internal.framed.FramedStream$FramedDataSource` @kind object;
  #L244f20.  call temp:= `access$100`(v1) @signature `Lokhttp3/internal/framed/FramedStream$FramedDataSource;.access$100:(Lokhttp3/internal/framed/FramedStream$FramedDataSource;)Z` @kind static;
  #L244f26.  v1:= temp;
  #L244f28.  if v1 != 0 then goto L244f3c;
  #L244f2c.  v1:= v2.`okhttp3.internal.framed.FramedStream.source` @type ^`okhttp3.internal.framed.FramedStream$FramedDataSource` @kind object;
  #L244f30.  call temp:= `access$300`(v1) @signature `Lokhttp3/internal/framed/FramedStream$FramedDataSource;.access$300:(Lokhttp3/internal/framed/FramedStream$FramedDataSource;)Z` @kind static;
  #L244f36.  v1:= temp;
  #L244f38.  if v1 == 0 then goto L244f64;
  #L244f3c.  v1:= v2.`okhttp3.internal.framed.FramedStream.sink` @type ^`okhttp3.internal.framed.FramedStream$FramedDataSink` @kind object;
  #L244f40.  call temp:= `access$200`(v1) @signature `Lokhttp3/internal/framed/FramedStream$FramedDataSink;.access$200:(Lokhttp3/internal/framed/FramedStream$FramedDataSink;)Z` @kind static;
  #L244f46.  v1:= temp;
  #L244f48.  if v1 != 0 then goto L244f5c;
  #L244f4c.  v1:= v2.`okhttp3.internal.framed.FramedStream.sink` @type ^`okhttp3.internal.framed.FramedStream$FramedDataSink` @kind object;
  #L244f50.  call temp:= `access$400`(v1) @signature `Lokhttp3/internal/framed/FramedStream$FramedDataSink;.access$400:(Lokhttp3/internal/framed/FramedStream$FramedDataSink;)Z` @kind static;
  #L244f56.  v1:= temp;
  #L244f58.  if v1 == 0 then goto L244f64;
  #L244f5c.  v1:= v2.`okhttp3.internal.framed.FramedStream.responseHeaders` @type ^`java.util.List` @kind object;
  #L244f60.  if v1 != 0 then goto L244f18;
  #L244f64.  v0:= 1I;
  #L244f66.  goto L244f18;
  #L244f68.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L244f6a.  @monitorexit v2
  #L244f6c.  throw v0;
  catch `java.lang.Throwable` @[L244f10..L244f14] goto L244f68;
  catch `java.lang.Throwable` @[L244f1c..L244f60] goto L244f68;
}
procedure `okio.Timeout` `readTimeout`(`okhttp3.internal.framed.FramedStream` v1 @kind this) @signature `Lokhttp3/internal/framed/FramedStream;.readTimeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L244f94.  v0:= v1.`okhttp3.internal.framed.FramedStream.readTimeout` @type ^`okhttp3.internal.framed.FramedStream$StreamTimeout` @kind object;
  #L244f98.  return v0 @kind object;
}
procedure `void` `receiveData`(`okhttp3.internal.framed.FramedStream` v4 @kind this, `okio.BufferedSource` v5 @kind object @name `in`, `int` v6 @name `length`) @signature `Lokhttp3/internal/framed/FramedStream;.receiveData:(Lokio/BufferedSource;I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L244fac.  v0:= `@@okhttp3.internal.framed.FramedStream.$assertionsDisabled` @type ^`boolean` @kind boolean;
  #L244fb0.  if v0 != 0 then goto L244fcc;
  #L244fb4.  call temp:= `holdsLock`(v4) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L244fba.  v0:= temp;
  #L244fbc.  if v0 == 0 then goto L244fcc;
  #L244fc0.  v0:= new `java.lang.AssertionError`;
  #L244fc4.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L244fca.  throw v0;
  #L244fcc.  v0:= v4.`okhttp3.internal.framed.FramedStream.source` @type ^`okhttp3.internal.framed.FramedStream$FramedDataSource` @kind object;
  #L244fd0.  v2:= (`long`) v6 @kind i2l;
  #L244fd2.  call `receive`(v0, v5, v2) @signature `Lokhttp3/internal/framed/FramedStream$FramedDataSource;.receive:(Lokio/BufferedSource;J)V` @kind virtual;
  #L244fd8.  return @kind void;
}
procedure `void` `receiveFin`(`okhttp3.internal.framed.FramedStream` v3 @kind this) @signature `Lokhttp3/internal/framed/FramedStream;.receiveFin:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L244fec.  v1:= `@@okhttp3.internal.framed.FramedStream.$assertionsDisabled` @type ^`boolean` @kind boolean;
  #L244ff0.  if v1 != 0 then goto L24500c;
  #L244ff4.  call temp:= `holdsLock`(v3) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L244ffa.  v1:= temp;
  #L244ffc.  if v1 == 0 then goto L24500c;
  #L245000.  v1:= new `java.lang.AssertionError`;
  #L245004.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L24500a.  throw v1;
  #L24500c.  @monitorenter v3
  #L24500e.  v1:= v3.`okhttp3.internal.framed.FramedStream.source` @type ^`okhttp3.internal.framed.FramedStream$FramedDataSource` @kind object;
  #L245012.  v2:= 1I;
  #L245014.  call temp:= `access$102`(v1, v2) @signature `Lokhttp3/internal/framed/FramedStream$FramedDataSource;.access$102:(Lokhttp3/internal/framed/FramedStream$FramedDataSource;Z)Z` @kind static;
  #L24501a.  call temp:= `isOpen`(v3) @signature `Lokhttp3/internal/framed/FramedStream;.isOpen:()Z` @kind virtual;
  #L245020.  v0:= temp;
  #L245022.  call `notifyAll`(v3) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L245028.  @monitorexit v3
  #L24502a.  if v0 != 0 then goto L24503c;
  #L24502e.  v1:= v3.`okhttp3.internal.framed.FramedStream.connection` @type ^`okhttp3.internal.framed.FramedConnection` @kind object;
  #L245032.  v2:= v3.`okhttp3.internal.framed.FramedStream.id` @type ^`int`;
  #L245036.  call temp:= `removeStream`(v1, v2) @signature `Lokhttp3/internal/framed/FramedConnection;.removeStream:(I)Lokhttp3/internal/framed/FramedStream;` @kind virtual;
  #L24503c.  return @kind void;
  #L24503e.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L245040.  @monitorexit v3
  #L245042.  throw v1;
  catch `java.lang.Throwable` @[L24500e..L24502a] goto L24503e;
  catch `java.lang.Throwable` @[L245040..L245042] goto L24503e;
}
procedure `void` `receiveHeaders`(`okhttp3.internal.framed.FramedStream` v5 @kind this, `java.util.List` v6 @kind object, `okhttp3.internal.framed.HeadersMode` v7 @kind object @name `headersMode`) @signature `Lokhttp3/internal/framed/FramedStream;.receiveHeaders:(Ljava/util/List;Lokhttp3/internal/framed/HeadersMode;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L245068.  v3:= `@@okhttp3.internal.framed.FramedStream.$assertionsDisabled` @type ^`boolean` @kind boolean;
  #L24506c.  if v3 != 0 then goto L245088;
  #L245070.  call temp:= `holdsLock`(v5) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L245076.  v3:= temp;
  #L245078.  if v3 == 0 then goto L245088;
  #L24507c.  v3:= new `java.lang.AssertionError`;
  #L245080.  call `<init>`(v3) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L245086.  throw v3;
  #L245088.  v0:= 0I;
  #L24508a.  v2:= 1I;
  #L24508c.  @monitorenter v5
  #L24508e.  v3:= v5.`okhttp3.internal.framed.FramedStream.responseHeaders` @type ^`java.util.List` @kind object;
  #L245092.  if v3 != 0 then goto L2450ce;
  #L245096.  call temp:= `failIfHeadersAbsent`(v7) @signature `Lokhttp3/internal/framed/HeadersMode;.failIfHeadersAbsent:()Z` @kind virtual;
  #L24509c.  v3:= temp;
  #L24509e.  if v3 == 0 then goto L2450b4;
  #L2450a2.  v0:= `@@okhttp3.internal.framed.ErrorCode.PROTOCOL_ERROR` @type ^`okhttp3.internal.framed.ErrorCode` @kind object;
  #L2450a6.  @monitorexit v5
  #L2450a8.  if v0 == 0 then goto L245100;
  #L2450ac.  call `closeLater`(v5, v0) @signature `Lokhttp3/internal/framed/FramedStream;.closeLater:(Lokhttp3/internal/framed/ErrorCode;)V` @kind virtual;
  #L2450b2.  return @kind void;
  #L2450b4.  v5.`okhttp3.internal.framed.FramedStream.responseHeaders` @type ^`java.util.List` := v6 @kind object;
  #L2450b8.  call temp:= `isOpen`(v5) @signature `Lokhttp3/internal/framed/FramedStream;.isOpen:()Z` @kind virtual;
  #L2450be.  v2:= temp;
  #L2450c0.  call `notifyAll`(v5) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L2450c6.  goto L2450a6;
  #L2450c8.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2450ca.  @monitorexit v5
  #L2450cc.  throw v3;
  #L2450ce.  call temp:= `failIfHeadersPresent`(v7) @signature `Lokhttp3/internal/framed/HeadersMode;.failIfHeadersPresent:()Z` @kind virtual;
  #L2450d4.  v3:= temp;
  #L2450d6.  if v3 == 0 then goto L2450e0;
  #L2450da.  v0:= `@@okhttp3.internal.framed.ErrorCode.STREAM_IN_USE` @type ^`okhttp3.internal.framed.ErrorCode` @kind object;
  #L2450de.  goto L2450a6;
  #L2450e0.  v1:= new `java.util.ArrayList`;
  #L2450e4.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2450ea.  v3:= v5.`okhttp3.internal.framed.FramedStream.responseHeaders` @type ^`java.util.List` @kind object;
  #L2450ee.  call temp:= `addAll`(v1, v3) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L2450f4.  call temp:= `addAll`(v1, v6) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L2450fa.  v5.`okhttp3.internal.framed.FramedStream.responseHeaders` @type ^`java.util.List` := v1 @kind object;
  #L2450fe.  goto L2450a6;
  #L245100.  if v2 != 0 then goto L2450b2;
  #L245104.  v3:= v5.`okhttp3.internal.framed.FramedStream.connection` @type ^`okhttp3.internal.framed.FramedConnection` @kind object;
  #L245108.  v4:= v5.`okhttp3.internal.framed.FramedStream.id` @type ^`int`;
  #L24510c.  call temp:= `removeStream`(v3, v4) @signature `Lokhttp3/internal/framed/FramedConnection;.removeStream:(I)Lokhttp3/internal/framed/FramedStream;` @kind virtual;
  #L245112.  goto L2450b2;
  catch `java.lang.Throwable` @[L24508e..L2450a8] goto L2450c8;
  catch `java.lang.Throwable` @[L2450b4..L2450cc] goto L2450c8;
  catch `java.lang.Throwable` @[L2450ce..L2450fe] goto L2450c8;
}
procedure `void` `receiveRstStream`(`okhttp3.internal.framed.FramedStream` v1 @kind this, `okhttp3.internal.framed.ErrorCode` v2 @kind object @name `errorCode`) @signature `Lokhttp3/internal/framed/FramedStream;.receiveRstStream:(Lokhttp3/internal/framed/ErrorCode;)V` @AccessFlag  {
    temp;
    v0;

  #L245140.  @monitorenter v1
  #L245142.  v0:= v1.`okhttp3.internal.framed.FramedStream.errorCode` @type ^`okhttp3.internal.framed.ErrorCode` @kind object;
  #L245146.  if v0 != 0 then goto L245154;
  #L24514a.  v1.`okhttp3.internal.framed.FramedStream.errorCode` @type ^`okhttp3.internal.framed.ErrorCode` := v2 @kind object;
  #L24514e.  call `notifyAll`(v1) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L245154.  @monitorexit v1
  #L245156.  return @kind void;
  #L245158.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24515a.  @monitorexit v1
  #L24515c.  throw v0;
  catch `java.lang.Throwable` @[L245142..L245154] goto L245158;
}
procedure `void` `reply`(`okhttp3.internal.framed.FramedStream` v3 @kind this, `java.util.List` v4 @kind object, `boolean` v5 @name `out`) @signature `Lokhttp3/internal/framed/FramedStream;.reply:(Ljava/util/List;Z)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L24517c.  v1:= `@@okhttp3.internal.framed.FramedStream.$assertionsDisabled` @type ^`boolean` @kind boolean;
  #L245180.  if v1 != 0 then goto L24519c;
  #L245184.  call temp:= `holdsLock`(v3) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L24518a.  v1:= temp;
  #L24518c.  if v1 == 0 then goto L24519c;
  #L245190.  v1:= new `java.lang.AssertionError`;
  #L245194.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L24519a.  throw v1;
  #L24519c.  v0:= 0I;
  #L24519e.  @monitorenter v3
  #L2451a0.  if v4 != 0 then goto L2451ba;
  #L2451a4.  v1:= new `java.lang.NullPointerException`;
  #L2451a8.  v2:= "responseHeaders == null" @kind object;
  #L2451ac.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2451b2.  throw v1;
  #L2451b4.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2451b6.  @monitorexit v3
  #L2451b8.  throw v1;
  #L2451ba.  v1:= v3.`okhttp3.internal.framed.FramedStream.responseHeaders` @type ^`java.util.List` @kind object;
  #L2451be.  if v1 == 0 then goto L2451d2;
  #L2451c2.  v1:= new `java.lang.IllegalStateException`;
  #L2451c6.  v2:= "reply already sent" @kind object;
  #L2451ca.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2451d0.  throw v1;
  #L2451d2.  v3.`okhttp3.internal.framed.FramedStream.responseHeaders` @type ^`java.util.List` := v4 @kind object;
  #L2451d6.  if v5 != 0 then goto L2451e8;
  #L2451da.  v1:= v3.`okhttp3.internal.framed.FramedStream.sink` @type ^`okhttp3.internal.framed.FramedStream$FramedDataSink` @kind object;
  #L2451de.  v2:= 1I;
  #L2451e0.  call temp:= `access$202`(v1, v2) @signature `Lokhttp3/internal/framed/FramedStream$FramedDataSink;.access$202:(Lokhttp3/internal/framed/FramedStream$FramedDataSink;Z)Z` @kind static;
  #L2451e6.  v0:= 1I;
  #L2451e8.  @monitorexit v3
  #L2451ea.  v1:= v3.`okhttp3.internal.framed.FramedStream.connection` @type ^`okhttp3.internal.framed.FramedConnection` @kind object;
  #L2451ee.  v2:= v3.`okhttp3.internal.framed.FramedStream.id` @type ^`int`;
  #L2451f2.  call `writeSynReply`(v1, v2, v0, v4) @signature `Lokhttp3/internal/framed/FramedConnection;.writeSynReply:(IZLjava/util/List;)V` @kind virtual;
  #L2451f8.  if v0 == 0 then goto L245206;
  #L2451fc.  v1:= v3.`okhttp3.internal.framed.FramedStream.connection` @type ^`okhttp3.internal.framed.FramedConnection` @kind object;
  #L245200.  call `flush`(v1) @signature `Lokhttp3/internal/framed/FramedConnection;.flush:()V` @kind virtual;
  #L245206.  return @kind void;
  catch `java.lang.Throwable` @[L2451a4..L2451b8] goto L2451b4;
  catch `java.lang.Throwable` @[L2451ba..L2451ea] goto L2451b4;
}
procedure `okio.Timeout` `writeTimeout`(`okhttp3.internal.framed.FramedStream` v1 @kind this) @signature `Lokhttp3/internal/framed/FramedStream;.writeTimeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24522c.  v0:= v1.`okhttp3.internal.framed.FramedStream.writeTimeout` @type ^`okhttp3.internal.framed.FramedStream$StreamTimeout` @kind object;
  #L245230.  return v0 @kind object;
}
