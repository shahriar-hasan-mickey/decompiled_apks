record `okhttp3.internal.framed.Settings` @kind class @AccessFlag PUBLIC_FINAL {
  `int` `okhttp3.internal.framed.Settings.persistValue` @AccessFlag PRIVATE;
  `int` `okhttp3.internal.framed.Settings.persisted` @AccessFlag PRIVATE;
  `int` `okhttp3.internal.framed.Settings.set` @AccessFlag PRIVATE;
  `int`[] `okhttp3.internal.framed.Settings.values` @AccessFlag PRIVATE_FINAL;
}
global `int` `@@okhttp3.internal.framed.Settings.CLIENT_CERTIFICATE_VECTOR_SIZE` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.framed.Settings.COUNT` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.framed.Settings.CURRENT_CWND` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.framed.Settings.DEFAULT_INITIAL_WINDOW_SIZE` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.framed.Settings.DOWNLOAD_BANDWIDTH` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.framed.Settings.DOWNLOAD_RETRANS_RATE` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.framed.Settings.ENABLE_PUSH` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.framed.Settings.FLAG_CLEAR_PREVIOUSLY_PERSISTED_SETTINGS` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.framed.Settings.FLOW_CONTROL_OPTIONS` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.framed.Settings.FLOW_CONTROL_OPTIONS_DISABLED` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.framed.Settings.HEADER_TABLE_SIZE` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.framed.Settings.INITIAL_WINDOW_SIZE` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.framed.Settings.MAX_CONCURRENT_STREAMS` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.framed.Settings.MAX_FRAME_SIZE` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.framed.Settings.MAX_HEADER_LIST_SIZE` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.framed.Settings.PERSISTED` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.framed.Settings.PERSIST_VALUE` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.framed.Settings.ROUND_TRIP_TIME` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.framed.Settings.UPLOAD_BANDWIDTH` @AccessFlag STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.internal.framed.Settings` v1 @kind this) @signature `Lokhttp3/internal/framed/Settings;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L247690.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L247696.  v0:= 10I;
  #L24769a.  v0:= new `int`[v0];
  #L24769e.  v1.`okhttp3.internal.framed.Settings.values` @type ^`int`[] := v0 @kind object;
  #L2476a2.  return @kind void;
}
procedure `void` `clear`(`okhttp3.internal.framed.Settings` v2 @kind this) @signature `Lokhttp3/internal/framed/Settings;.clear:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2476b4.  v1:= 0I;
  #L2476b6.  v2.`okhttp3.internal.framed.Settings.persisted` @type ^`int` := v1;
  #L2476ba.  v2.`okhttp3.internal.framed.Settings.persistValue` @type ^`int` := v1;
  #L2476be.  v2.`okhttp3.internal.framed.Settings.set` @type ^`int` := v1;
  #L2476c2.  v0:= v2.`okhttp3.internal.framed.Settings.values` @type ^`int`[] @kind object;
  #L2476c6.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([II)V` @kind static;
  #L2476cc.  return @kind void;
}
procedure `int` `flags`(`okhttp3.internal.framed.Settings` v2 @kind this, `int` v3 @name `id`) @signature `Lokhttp3/internal/framed/Settings;.flags:(I)I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2476e0.  v0:= 0I;
  #L2476e2.  call temp:= `isPersisted`(v2, v3) @signature `Lokhttp3/internal/framed/Settings;.isPersisted:(I)Z` @kind virtual;
  #L2476e8.  v1:= temp;
  #L2476ea.  if v1 == 0 then goto L2476f2;
  #L2476ee.  v0:= v0 ^| 2;
  #L2476f2.  call temp:= `persistValue`(v2, v3) @signature `Lokhttp3/internal/framed/Settings;.persistValue:(I)Z` @kind virtual;
  #L2476f8.  v1:= temp;
  #L2476fa.  if v1 == 0 then goto L247702;
  #L2476fe.  v0:= v0 ^| 1;
  #L247702.  return v0;
}
procedure `int` `get`(`okhttp3.internal.framed.Settings` v1 @kind this, `int` v2 @name `id`) @signature `Lokhttp3/internal/framed/Settings;.get:(I)I` @AccessFlag  {
    temp;
    v0;

  #L247714.  v0:= v1.`okhttp3.internal.framed.Settings.values` @type ^`int`[] @kind object;
  #L247718.  v0:= v0[v2];
  #L24771c.  return v0;
}
procedure `int` `getClientCertificateVectorSize`(`okhttp3.internal.framed.Settings` v3 @kind this, `int` v4 @name `defaultValue`) @signature `Lokhttp3/internal/framed/Settings;.getClientCertificateVectorSize:(I)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L247730.  v0:= 256I;
  #L247734.  v1:= v3.`okhttp3.internal.framed.Settings.set` @type ^`int`;
  #L247738.  v1:= v1 ^& v0 @kind int;
  #L24773a.  if v1 == 0 then goto L24774a;
  #L24773e.  v1:= v3.`okhttp3.internal.framed.Settings.values` @type ^`int`[] @kind object;
  #L247742.  v2:= 8I;
  #L247746.  v4:= v1[v2];
  #L24774a.  return v4;
}
procedure `int` `getCurrentCwnd`(`okhttp3.internal.framed.Settings` v3 @kind this, `int` v4 @name `defaultValue`) @signature `Lokhttp3/internal/framed/Settings;.getCurrentCwnd:(I)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L24775c.  v0:= 32I;
  #L247760.  v1:= v3.`okhttp3.internal.framed.Settings.set` @type ^`int`;
  #L247764.  v1:= v1 ^& v0 @kind int;
  #L247766.  if v1 == 0 then goto L247774;
  #L24776a.  v1:= v3.`okhttp3.internal.framed.Settings.values` @type ^`int`[] @kind object;
  #L24776e.  v2:= 5I;
  #L247770.  v4:= v1[v2];
  #L247774.  return v4;
}
procedure `int` `getDownloadBandwidth`(`okhttp3.internal.framed.Settings` v3 @kind this, `int` v4 @name `defaultValue`) @signature `Lokhttp3/internal/framed/Settings;.getDownloadBandwidth:(I)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L247788.  v0:= 4I;
  #L24778a.  v1:= v3.`okhttp3.internal.framed.Settings.set` @type ^`int`;
  #L24778e.  v1:= v1 ^& v0 @kind int;
  #L247790.  if v1 == 0 then goto L24779e;
  #L247794.  v1:= v3.`okhttp3.internal.framed.Settings.values` @type ^`int`[] @kind object;
  #L247798.  v2:= 2I;
  #L24779a.  v4:= v1[v2];
  #L24779e.  return v4;
}
procedure `int` `getDownloadRetransRate`(`okhttp3.internal.framed.Settings` v3 @kind this, `int` v4 @name `defaultValue`) @signature `Lokhttp3/internal/framed/Settings;.getDownloadRetransRate:(I)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L2477b0.  v0:= 64I;
  #L2477b4.  v1:= v3.`okhttp3.internal.framed.Settings.set` @type ^`int`;
  #L2477b8.  v1:= v1 ^& v0 @kind int;
  #L2477ba.  if v1 == 0 then goto L2477c8;
  #L2477be.  v1:= v3.`okhttp3.internal.framed.Settings.values` @type ^`int`[] @kind object;
  #L2477c2.  v2:= 6I;
  #L2477c4.  v4:= v1[v2];
  #L2477c8.  return v4;
}
procedure `boolean` `getEnablePush`(`okhttp3.internal.framed.Settings` v5 @kind this, `boolean` v6 @name `defaultValue`) @signature `Lokhttp3/internal/framed/Settings;.getEnablePush:(Z)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2477dc.  v2:= 0I;
  #L2477de.  v1:= 1I;
  #L2477e0.  v0:= 4I;
  #L2477e2.  v3:= v5.`okhttp3.internal.framed.Settings.set` @type ^`int`;
  #L2477e6.  v3:= v3 ^& v0 @kind int;
  #L2477e8.  if v3 == 0 then goto L2477fc;
  #L2477ec.  v3:= v5.`okhttp3.internal.framed.Settings.values` @type ^`int`[] @kind object;
  #L2477f0.  v4:= 2I;
  #L2477f2.  v3:= v3[v4];
  #L2477f6.  if v3 != v1 then goto L247808;
  #L2477fa.  return v1;
  #L2477fc.  if v6 == 0 then goto L247804;
  #L247800.  v3:= v1;
  #L247802.  goto L2477f6;
  #L247804.  v3:= v2;
  #L247806.  goto L2477f6;
  #L247808.  v1:= v2;
  #L24780a.  goto L2477fa;
}
procedure `int` `getHeaderTableSize`(`okhttp3.internal.framed.Settings` v3 @kind this) @signature `Lokhttp3/internal/framed/Settings;.getHeaderTableSize:()I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L24781c.  v0:= 2I;
  #L24781e.  v1:= v3.`okhttp3.internal.framed.Settings.set` @type ^`int`;
  #L247822.  v1:= v1 ^& v0 @kind int;
  #L247824.  if v1 == 0 then goto L247834;
  #L247828.  v1:= v3.`okhttp3.internal.framed.Settings.values` @type ^`int`[] @kind object;
  #L24782c.  v2:= 1I;
  #L24782e.  v1:= v1[v2];
  #L247832.  return v1;
  #L247834.  v1:= -1I;
  #L247836.  goto L247832;
}
procedure `int` `getInitialWindowSize`(`okhttp3.internal.framed.Settings` v3 @kind this, `int` v4 @name `defaultValue`) @signature `Lokhttp3/internal/framed/Settings;.getInitialWindowSize:(I)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L247848.  v0:= 128I;
  #L24784c.  v1:= v3.`okhttp3.internal.framed.Settings.set` @type ^`int`;
  #L247850.  v1:= v1 ^& v0 @kind int;
  #L247852.  if v1 == 0 then goto L247860;
  #L247856.  v1:= v3.`okhttp3.internal.framed.Settings.values` @type ^`int`[] @kind object;
  #L24785a.  v2:= 7I;
  #L24785c.  v4:= v1[v2];
  #L247860.  return v4;
}
procedure `int` `getMaxConcurrentStreams`(`okhttp3.internal.framed.Settings` v3 @kind this, `int` v4 @name `defaultValue`) @signature `Lokhttp3/internal/framed/Settings;.getMaxConcurrentStreams:(I)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L247874.  v0:= 16I;
  #L247878.  v1:= v3.`okhttp3.internal.framed.Settings.set` @type ^`int`;
  #L24787c.  v1:= v1 ^& v0 @kind int;
  #L24787e.  if v1 == 0 then goto L24788c;
  #L247882.  v1:= v3.`okhttp3.internal.framed.Settings.values` @type ^`int`[] @kind object;
  #L247886.  v2:= 4I;
  #L247888.  v4:= v1[v2];
  #L24788c.  return v4;
}
procedure `int` `getMaxFrameSize`(`okhttp3.internal.framed.Settings` v3 @kind this, `int` v4 @name `defaultValue`) @signature `Lokhttp3/internal/framed/Settings;.getMaxFrameSize:(I)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L2478a0.  v0:= 32I;
  #L2478a4.  v1:= v3.`okhttp3.internal.framed.Settings.set` @type ^`int`;
  #L2478a8.  v1:= v1 ^& v0 @kind int;
  #L2478aa.  if v1 == 0 then goto L2478b8;
  #L2478ae.  v1:= v3.`okhttp3.internal.framed.Settings.values` @type ^`int`[] @kind object;
  #L2478b2.  v2:= 5I;
  #L2478b4.  v4:= v1[v2];
  #L2478b8.  return v4;
}
procedure `int` `getMaxHeaderListSize`(`okhttp3.internal.framed.Settings` v3 @kind this, `int` v4 @name `defaultValue`) @signature `Lokhttp3/internal/framed/Settings;.getMaxHeaderListSize:(I)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L2478cc.  v0:= 64I;
  #L2478d0.  v1:= v3.`okhttp3.internal.framed.Settings.set` @type ^`int`;
  #L2478d4.  v1:= v1 ^& v0 @kind int;
  #L2478d6.  if v1 == 0 then goto L2478e4;
  #L2478da.  v1:= v3.`okhttp3.internal.framed.Settings.values` @type ^`int`[] @kind object;
  #L2478de.  v2:= 6I;
  #L2478e0.  v4:= v1[v2];
  #L2478e4.  return v4;
}
procedure `int` `getRoundTripTime`(`okhttp3.internal.framed.Settings` v3 @kind this, `int` v4 @name `defaultValue`) @signature `Lokhttp3/internal/framed/Settings;.getRoundTripTime:(I)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L2478f8.  v0:= 8I;
  #L2478fc.  v1:= v3.`okhttp3.internal.framed.Settings.set` @type ^`int`;
  #L247900.  v1:= v1 ^& v0 @kind int;
  #L247902.  if v1 == 0 then goto L247910;
  #L247906.  v1:= v3.`okhttp3.internal.framed.Settings.values` @type ^`int`[] @kind object;
  #L24790a.  v2:= 3I;
  #L24790c.  v4:= v1[v2];
  #L247910.  return v4;
}
procedure `int` `getUploadBandwidth`(`okhttp3.internal.framed.Settings` v3 @kind this, `int` v4 @name `defaultValue`) @signature `Lokhttp3/internal/framed/Settings;.getUploadBandwidth:(I)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L247924.  v0:= 2I;
  #L247926.  v1:= v3.`okhttp3.internal.framed.Settings.set` @type ^`int`;
  #L24792a.  v1:= v1 ^& v0 @kind int;
  #L24792c.  if v1 == 0 then goto L24793a;
  #L247930.  v1:= v3.`okhttp3.internal.framed.Settings.values` @type ^`int`[] @kind object;
  #L247934.  v2:= 1I;
  #L247936.  v4:= v1[v2];
  #L24793a.  return v4;
}
procedure `boolean` `isFlowControlDisabled`(`okhttp3.internal.framed.Settings` v5 @kind this) @signature `Lokhttp3/internal/framed/Settings;.isFlowControlDisabled:()Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L24794c.  v2:= 0I;
  #L24794e.  v0:= 1024I;
  #L247952.  v3:= v5.`okhttp3.internal.framed.Settings.set` @type ^`int`;
  #L247956.  v3:= v3 ^& v0 @kind int;
  #L247958.  if v3 == 0 then goto L247974;
  #L24795c.  v3:= v5.`okhttp3.internal.framed.Settings.values` @type ^`int`[] @kind object;
  #L247960.  v4:= 10I;
  #L247964.  v1:= v3[v4];
  #L247968.  v3:= v1 ^& 1;
  #L24796c.  if v3 == 0 then goto L247972;
  #L247970.  v2:= 1I;
  #L247972.  return v2;
  #L247974.  v1:= v2;
  #L247976.  goto L247968;
}
procedure `boolean` `isPersisted`(`okhttp3.internal.framed.Settings` v3 @kind this, `int` v4 @name `id`) @signature `Lokhttp3/internal/framed/Settings;.isPersisted:(I)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L247988.  v1:= 1I;
  #L24798a.  v0:= v1 ^< v4 @kind int;
  #L24798e.  v2:= v3.`okhttp3.internal.framed.Settings.persisted` @type ^`int`;
  #L247992.  v2:= v2 ^& v0 @kind int;
  #L247994.  if v2 == 0 then goto L24799a;
  #L247998.  return v1;
  #L24799a.  v1:= 0I;
  #L24799c.  goto L247998;
}
procedure `boolean` `isSet`(`okhttp3.internal.framed.Settings` v3 @kind this, `int` v4 @name `id`) @signature `Lokhttp3/internal/framed/Settings;.isSet:(I)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L2479b0.  v1:= 1I;
  #L2479b2.  v0:= v1 ^< v4 @kind int;
  #L2479b6.  v2:= v3.`okhttp3.internal.framed.Settings.set` @type ^`int`;
  #L2479ba.  v2:= v2 ^& v0 @kind int;
  #L2479bc.  if v2 == 0 then goto L2479c2;
  #L2479c0.  return v1;
  #L2479c2.  v1:= 0I;
  #L2479c4.  goto L2479c0;
}
procedure `void` `merge`(`okhttp3.internal.framed.Settings` v3 @kind this, `okhttp3.internal.framed.Settings` v4 @kind object @name `other`) @signature `Lokhttp3/internal/framed/Settings;.merge:(Lokhttp3/internal/framed/Settings;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L2479d8.  v0:= 0I;
  #L2479da.  v1:= 10I;
  #L2479de.  if v0 >= v1 then goto L247a0c;
  #L2479e2.  call temp:= `isSet`(v4, v0) @signature `Lokhttp3/internal/framed/Settings;.isSet:(I)Z` @kind virtual;
  #L2479e8.  v1:= temp;
  #L2479ea.  if v1 != 0 then goto L2479f4;
  #L2479ee.  v0:= v0 + 1;
  #L2479f2.  goto L2479da;
  #L2479f4.  call temp:= `flags`(v4, v0) @signature `Lokhttp3/internal/framed/Settings;.flags:(I)I` @kind virtual;
  #L2479fa.  v1:= temp;
  #L2479fc.  call temp:= `get`(v4, v0) @signature `Lokhttp3/internal/framed/Settings;.get:(I)I` @kind virtual;
  #L247a02.  v2:= temp;
  #L247a04.  call temp:= `set`(v3, v0, v1, v2) @signature `Lokhttp3/internal/framed/Settings;.set:(III)Lokhttp3/internal/framed/Settings;` @kind virtual;
  #L247a0a.  goto L2479ee;
  #L247a0c.  return @kind void;
}
procedure `boolean` `persistValue`(`okhttp3.internal.framed.Settings` v3 @kind this, `int` v4 @name `id`) @signature `Lokhttp3/internal/framed/Settings;.persistValue:(I)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L247a20.  v1:= 1I;
  #L247a22.  v0:= v1 ^< v4 @kind int;
  #L247a26.  v2:= v3.`okhttp3.internal.framed.Settings.persistValue` @type ^`int`;
  #L247a2a.  v2:= v2 ^& v0 @kind int;
  #L247a2c.  if v2 == 0 then goto L247a32;
  #L247a30.  return v1;
  #L247a32.  v1:= 0I;
  #L247a34.  goto L247a30;
}
procedure `okhttp3.internal.framed.Settings` `set`(`okhttp3.internal.framed.Settings` v3 @kind this, `int` v4 @name `id`, `int` v5 @name `idFlags`, `int` v6 @name `value`) @signature `Lokhttp3/internal/framed/Settings;.set:(III)Lokhttp3/internal/framed/Settings;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L247a48.  v1:= v3.`okhttp3.internal.framed.Settings.values` @type ^`int`[] @kind object;
  #L247a4c.  v1:= length @variable v1;
  #L247a4e.  if v4 < v1 then goto L247a54;
  #L247a52.  return v3 @kind object;
  #L247a54.  v1:= 1I;
  #L247a56.  v0:= v1 ^< v4 @kind int;
  #L247a5a.  v1:= v3.`okhttp3.internal.framed.Settings.set` @type ^`int`;
  #L247a5e.  v1:= v1 ^| v0 @kind int;
  #L247a60.  v3.`okhttp3.internal.framed.Settings.set` @type ^`int` := v1;
  #L247a64.  v1:= v5 ^& 1;
  #L247a68.  if v1 == 0 then goto L247a92;
  #L247a6c.  v1:= v3.`okhttp3.internal.framed.Settings.persistValue` @type ^`int`;
  #L247a70.  v1:= v1 ^| v0 @kind int;
  #L247a72.  v3.`okhttp3.internal.framed.Settings.persistValue` @type ^`int` := v1;
  #L247a76.  v1:= v5 ^& 2;
  #L247a7a.  if v1 == 0 then goto L247aa2;
  #L247a7e.  v1:= v3.`okhttp3.internal.framed.Settings.persisted` @type ^`int`;
  #L247a82.  v1:= v1 ^| v0 @kind int;
  #L247a84.  v3.`okhttp3.internal.framed.Settings.persisted` @type ^`int` := v1;
  #L247a88.  v1:= v3.`okhttp3.internal.framed.Settings.values` @type ^`int`[] @kind object;
  #L247a8c.  v1[v4]:= v6;
  #L247a90.  goto L247a52;
  #L247a92.  v1:= v3.`okhttp3.internal.framed.Settings.persistValue` @type ^`int`;
  #L247a96.  v2:= v0 ^~ -1;
  #L247a9a.  v1:= v1 ^& v2 @kind int;
  #L247a9c.  v3.`okhttp3.internal.framed.Settings.persistValue` @type ^`int` := v1;
  #L247aa0.  goto L247a76;
  #L247aa2.  v1:= v3.`okhttp3.internal.framed.Settings.persisted` @type ^`int`;
  #L247aa6.  v2:= v0 ^~ -1;
  #L247aaa.  v1:= v1 ^& v2 @kind int;
  #L247aac.  v3.`okhttp3.internal.framed.Settings.persisted` @type ^`int` := v1;
  #L247ab0.  goto L247a88;
}
procedure `int` `size`(`okhttp3.internal.framed.Settings` v1 @kind this) @signature `Lokhttp3/internal/framed/Settings;.size:()I` @AccessFlag  {
    temp;
    v0;

  #L247ac4.  v0:= v1.`okhttp3.internal.framed.Settings.set` @type ^`int`;
  #L247ac8.  call temp:= `bitCount`(v0) @signature `Ljava/lang/Integer;.bitCount:(I)I` @kind static;
  #L247ace.  v0:= temp;
  #L247ad0.  return v0;
}
