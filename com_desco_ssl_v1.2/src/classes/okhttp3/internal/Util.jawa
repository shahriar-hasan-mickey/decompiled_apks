record `okhttp3.internal.Util` @kind class @AccessFlag PUBLIC_FINAL {
}
global `byte`[] `@@okhttp3.internal.Util.EMPTY_BYTE_ARRAY` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.lang.String`[] `@@okhttp3.internal.Util.EMPTY_STRING_ARRAY` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.util.TimeZone` `@@okhttp3.internal.Util.UTC` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.nio.charset.Charset` `@@okhttp3.internal.Util.UTF_8` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.util.regex.Pattern` `@@okhttp3.internal.Util.VERIFY_AS_IP_ADDRESS` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/Util;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L242708.  v1:= 0I;
  #L24270a.  v0:= new `byte`[v1];
  #L24270e.  `@@okhttp3.internal.Util.EMPTY_BYTE_ARRAY` @type ^`byte`[] := v0 @kind object;
  #L242712.  v0:= new `java.lang.String`[v1];
  #L242716.  `@@okhttp3.internal.Util.EMPTY_STRING_ARRAY` @type ^`java.lang.String`[] := v0 @kind object;
  #L24271a.  v0:= "UTF-8" @kind object;
  #L24271e.  call temp:= `forName`(v0) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L242724.  v0:= temp @kind object;
  #L242726.  `@@okhttp3.internal.Util.UTF_8` @type ^`java.nio.charset.Charset` := v0 @kind object;
  #L24272a.  v0:= "GMT" @kind object;
  #L24272e.  call temp:= `getTimeZone`(v0) @signature `Ljava/util/TimeZone;.getTimeZone:(Ljava/lang/String;)Ljava/util/TimeZone;` @kind static;
  #L242734.  v0:= temp @kind object;
  #L242736.  `@@okhttp3.internal.Util.UTC` @type ^`java.util.TimeZone` := v0 @kind object;
  #L24273a.  v0:= "([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([\\d.]+)" @kind object;
  #L24273e.  call temp:= `compile`(v0) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L242744.  v0:= temp @kind object;
  #L242746.  `@@okhttp3.internal.Util.VERIFY_AS_IP_ADDRESS` @type ^`java.util.regex.Pattern` := v0 @kind object;
  #L24274a.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.Util` v0 @kind this) @signature `Lokhttp3/internal/Util;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L24275c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L242762.  return @kind void;
}
procedure `void` `checkOffsetAndCount`(`long` v4 @name `arrayLength`, `long` v6 @name `offset`, `long` v8 @name `count`) @signature `Lokhttp3/internal/Util;.checkOffsetAndCount:(JJJ)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L242774.  v0:= v6 ^| v8 @kind long;
  #L242778.  v2:= 0L;
  #L24277c.  v0:= lcmp(v0, v2);
  #L242780.  if v0 < 0 then goto L242798;
  #L242784.  v0:= lcmp(v6, v4);
  #L242788.  if v0 > 0 then goto L242798;
  #L24278c.  v0:= v4 - v6 @kind long;
  #L242790.  v0:= lcmp(v0, v8);
  #L242794.  if v0 >= 0 then goto L2427a4;
  #L242798.  v0:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L24279c.  call `<init>`(v0) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:()V` @kind direct;
  #L2427a2.  throw v0;
  #L2427a4.  return @kind void;
}
procedure `void` `closeAll`(`java.io.Closeable` v3 @kind object @name `a`, `java.io.Closeable` v4 @kind object @name `b`) @signature `Lokhttp3/internal/Util;.closeAll:(Ljava/io/Closeable;Ljava/io/Closeable;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2427b8.  v1:= 0I;
  #L2427ba.  call `close`(v3) @signature `Ljava/io/Closeable;.close:()V` @kind interface;
  #L2427c0.  call `close`(v4) @signature `Ljava/io/Closeable;.close:()V` @kind interface;
  #L2427c6.  if v1 != 0 then goto L2427dc;
  #L2427ca.  return @kind void;
  #L2427cc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2427ce.  v1:= v0 @kind object;
  #L2427d0.  goto L2427c0;
  #L2427d2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2427d4.  if v1 != 0 then goto L2427c6;
  #L2427d8.  v1:= v0 @kind object;
  #L2427da.  goto L2427c6;
  #L2427dc.  v2:= instanceof @variable v1 @type ^`java.io.IOException` @kind boolean;
  #L2427e0.  if v2 == 0 then goto L2427ea;
  #L2427e4.  v1:= (`java.io.IOException`) v1 @kind object;
  #L2427e8.  throw v1;
  #L2427ea.  v2:= instanceof @variable v1 @type ^`java.lang.RuntimeException` @kind boolean;
  #L2427ee.  if v2 == 0 then goto L2427f8;
  #L2427f2.  v1:= (`java.lang.RuntimeException`) v1 @kind object;
  #L2427f6.  throw v1;
  #L2427f8.  v2:= instanceof @variable v1 @type ^`java.lang.Error` @kind boolean;
  #L2427fc.  if v2 == 0 then goto L242806;
  #L242800.  v1:= (`java.lang.Error`) v1 @kind object;
  #L242804.  throw v1;
  #L242806.  v2:= new `java.lang.AssertionError`;
  #L24280a.  call `<init>`(v2, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L242810.  throw v2;
  catch `java.lang.Throwable` @[L2427ba..L2427c0] goto L2427cc;
  catch `java.lang.Throwable` @[L2427c0..L2427c6] goto L2427d2;
}
procedure `void` `closeQuietly`(`java.io.Closeable` v2 @kind object @name `closeable`) @signature `Lokhttp3/internal/Util;.closeQuietly:(Ljava/io/Closeable;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L242840.  if v2 == 0 then goto L24284a;
  #L242844.  call `close`(v2) @signature `Ljava/io/Closeable;.close:()V` @kind interface;
  #L24284a.  return @kind void;
  #L24284c.  v0:= Exception @type ^`java.lang.RuntimeException` @kind object;
  #L24284e.  throw v0;
  #L242850.  v1:= Exception @type ^`java.lang.Exception` @kind object;
  #L242852.  goto L24284a;
  catch `java.lang.RuntimeException` @[L242844..L24284a] goto L24284c;
  catch `java.lang.Exception` @[L242844..L24284a] goto L242850;
}
procedure `void` `closeQuietly`(`java.net.ServerSocket` v2 @kind object @name `serverSocket`) @signature `Lokhttp3/internal/Util;.closeQuietly:(Ljava/net/ServerSocket;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L242874.  if v2 == 0 then goto L24287e;
  #L242878.  call `close`(v2) @signature `Ljava/net/ServerSocket;.close:()V` @kind virtual;
  #L24287e.  return @kind void;
  #L242880.  v0:= Exception @type ^`java.lang.RuntimeException` @kind object;
  #L242882.  throw v0;
  #L242884.  v1:= Exception @type ^`java.lang.Exception` @kind object;
  #L242886.  goto L24287e;
  catch `java.lang.RuntimeException` @[L242878..L24287e] goto L242880;
  catch `java.lang.Exception` @[L242878..L24287e] goto L242884;
}
procedure `void` `closeQuietly`(`java.net.Socket` v3 @kind object @name `socket`) @signature `Lokhttp3/internal/Util;.closeQuietly:(Ljava/net/Socket;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2428a8.  if v3 == 0 then goto L2428b2;
  #L2428ac.  call `close`(v3) @signature `Ljava/net/Socket;.close:()V` @kind virtual;
  #L2428b2.  return @kind void;
  #L2428b4.  v0:= Exception @type ^`java.lang.AssertionError` @kind object;
  #L2428b6.  call temp:= `isAndroidGetsocknameError`(v0) @signature `Lokhttp3/internal/Util;.isAndroidGetsocknameError:(Ljava/lang/AssertionError;)Z` @kind static;
  #L2428bc.  v2:= temp;
  #L2428be.  if v2 != 0 then goto L2428b2;
  #L2428c2.  throw v0;
  #L2428c4.  v1:= Exception @type ^`java.lang.RuntimeException` @kind object;
  #L2428c6.  throw v1;
  #L2428c8.  v2:= Exception @type ^`java.lang.Exception` @kind object;
  #L2428ca.  goto L2428b2;
  catch `java.lang.AssertionError` @[L2428ac..L2428b2] goto L2428b4;
  catch `java.lang.RuntimeException` @[L2428ac..L2428b2] goto L2428c4;
  catch `java.lang.Exception` @[L2428ac..L2428b2] goto L2428c8;
}
procedure `java.lang.String`[] `concat`(`java.lang.String`[] v3 @kind object @name `array`, `java.lang.String` v4 @kind object @name `value`) @signature `Lokhttp3/internal/Util;.concat:([Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2428f0.  v2:= 0I;
  #L2428f2.  v1:= length @variable v3;
  #L2428f4.  v1:= v1 + 1;
  #L2428f8.  v0:= new `java.lang.String`[v1];
  #L2428fc.  v1:= length @variable v3;
  #L2428fe.  call `arraycopy`(v3, v2, v0, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L242904.  v1:= length @variable v0;
  #L242906.  v1:= v1 + -1;
  #L24290a.  v0[v1]:= v4 @kind object;
  #L24290e.  return v0 @kind object;
}
procedure `boolean` `contains`(`java.lang.String`[] v1 @kind object @name `array`, `java.lang.String` v2 @kind object @name `value`) @signature `Lokhttp3/internal/Util;.contains:([Ljava/lang/String;Ljava/lang/String;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L242920.  call temp:= `asList`(v1) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L242926.  v0:= temp @kind object;
  #L242928.  call temp:= `contains`(v0, v2) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L24292e.  v0:= temp;
  #L242930.  return v0;
}
procedure `boolean` `containsInvalidHostnameAsciiCodes`(`java.lang.String` v5 @kind object @name `hostnameAscii`) @signature `Lokhttp3/internal/Util;.containsInvalidHostnameAsciiCodes:(Ljava/lang/String;)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L242944.  v2:= 1I;
  #L242946.  v1:= 0I;
  #L242948.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L24294e.  v3:= temp;
  #L242950.  if v1 >= v3 then goto L242986;
  #L242954.  call temp:= `charAt`(v5, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L24295a.  v0:= temp;
  #L24295c.  v3:= 31I;
  #L242960.  if v0 <= v3 then goto L24296c;
  #L242964.  v3:= 127I;
  #L242968.  if v0 < v3 then goto L24296e;
  #L24296c.  return v2;
  #L24296e.  v3:= " #%/:?@[\\]" @kind object;
  #L242972.  call temp:= `indexOf`(v3, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L242978.  v3:= temp;
  #L24297a.  v4:= -1I;
  #L24297c.  if v3 != v4 then goto L24296c;
  #L242980.  v1:= v1 + 1;
  #L242984.  goto L242948;
  #L242986.  v2:= 0I;
  #L242988.  goto L24296c;
}
procedure `int` `delimiterOffset`(`java.lang.String` v2 @kind object @name `input`, `int` v3 @name `pos`, `int` v4 @name `limit`, `char` v5 @name `delimiter`) @signature `Lokhttp3/internal/Util;.delimiterOffset:(Ljava/lang/String;IIC)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L24299c.  v0:= v3;
  #L24299e.  if v0 >= v4 then goto L2429b6;
  #L2429a2.  call temp:= `charAt`(v2, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2429a8.  v1:= temp;
  #L2429aa.  if v1 != v5 then goto L2429b0;
  #L2429ae.  return v0;
  #L2429b0.  v0:= v0 + 1;
  #L2429b4.  goto L24299e;
  #L2429b6.  v0:= v4;
  #L2429b8.  goto L2429ae;
}
procedure `int` `delimiterOffset`(`java.lang.String` v3 @kind object @name `input`, `int` v4 @name `pos`, `int` v5 @name `limit`, `java.lang.String` v6 @kind object @name `delimiters`) @signature `Lokhttp3/internal/Util;.delimiterOffset:(Ljava/lang/String;IILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2429cc.  v0:= v4;
  #L2429ce.  if v0 >= v5 then goto L2429f0;
  #L2429d2.  call temp:= `charAt`(v3, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2429d8.  v1:= temp;
  #L2429da.  call temp:= `indexOf`(v6, v1) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L2429e0.  v1:= temp;
  #L2429e2.  v2:= -1I;
  #L2429e4.  if v1 == v2 then goto L2429ea;
  #L2429e8.  return v0;
  #L2429ea.  v0:= v0 + 1;
  #L2429ee.  goto L2429ce;
  #L2429f0.  v0:= v5;
  #L2429f2.  goto L2429e8;
}
procedure `boolean` `discard`(`okio.Source` v2 @kind object @name `source`, `int` v3 @name `timeout`, `java.util.concurrent.TimeUnit` v4 @kind object @name `timeUnit`) @signature `Lokhttp3/internal/Util;.discard:(Lokio/Source;ILjava/util/concurrent/TimeUnit;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L242a04.  call temp:= `skipAll`(v2, v3, v4) @signature `Lokhttp3/internal/Util;.skipAll:(Lokio/Source;ILjava/util/concurrent/TimeUnit;)Z` @kind static;
  #L242a0a.  v1:= temp;
  #L242a0c.  return v1;
  #L242a0e.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L242a10.  v1:= 0I;
  #L242a12.  goto L242a0c;
  catch `java.io.IOException` @[L242a04..L242a0a] goto L242a0e;
}
procedure `java.lang.String` `domainToAscii`(`java.lang.String` v5 @kind object @name `input`) @signature `Lokhttp3/internal/Util;.domainToAscii:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L242a34.  v2:= 0I;
  #L242a36.  call temp:= `toASCII`(v5) @signature `Ljava/net/IDN;.toASCII:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L242a3c.  v3:= temp @kind object;
  #L242a3e.  v4:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L242a42.  call temp:= `toLowerCase`(v3, v4) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L242a48.  v1:= temp @kind object;
  #L242a4a.  call temp:= `isEmpty`(v1) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L242a50.  v3:= temp;
  #L242a52.  if v3 == 0 then goto L242a5a;
  #L242a56.  v1:= v2 @kind object;
  #L242a58.  return v1 @kind object;
  #L242a5a.  call temp:= `containsInvalidHostnameAsciiCodes`(v1) @signature `Lokhttp3/internal/Util;.containsInvalidHostnameAsciiCodes:(Ljava/lang/String;)Z` @kind static;
  #L242a60.  v3:= temp;
  #L242a62.  if v3 == 0 then goto L242a58;
  #L242a66.  v1:= v2 @kind object;
  #L242a68.  goto L242a58;
  #L242a6a.  v0:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L242a6c.  v1:= v2 @kind object;
  #L242a6e.  goto L242a58;
  catch `java.lang.IllegalArgumentException` @[L242a36..L242a60] goto L242a6a;
}
procedure `boolean` `equal`(`java.lang.Object` v1 @kind object @name `a`, `java.lang.Object` v2 @kind object @name `b`) @signature `Lokhttp3/internal/Util;.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L242a90.  if v1 == v2 then goto L242aa4;
  #L242a94.  if v1 == 0 then goto L242aa8;
  #L242a98.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L242a9e.  v0:= temp;
  #L242aa0.  if v0 == 0 then goto L242aa8;
  #L242aa4.  v0:= 1I;
  #L242aa6.  return v0;
  #L242aa8.  v0:= 0I;
  #L242aaa.  goto L242aa6;
}
procedure `java.lang.String` `format`(`java.lang.String` v1 @kind object @name `format`, `java.lang.Object`[] v2 @kind object @name `args`) @signature `Lokhttp3/internal/Util;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L242abc.  v0:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L242ac0.  call temp:= `format`(v0, v1, v2) @signature `Ljava/lang/String;.format:(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L242ac6.  v0:= temp @kind object;
  #L242ac8.  return v0 @kind object;
}
procedure `java.lang.String` `hostHeader`(`okhttp3.HttpUrl` v3 @kind object @name `url`, `boolean` v4 @name `includeDefaultPort`) @signature `Lokhttp3/internal/Util;.hostHeader:(Lokhttp3/HttpUrl;Z)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L242adc.  call temp:= `host`(v3) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L242ae2.  v1:= temp @kind object;
  #L242ae4.  v2:= ":" @kind object;
  #L242ae8.  call temp:= `contains`(v1, v2) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L242aee.  v1:= temp;
  #L242af0.  if v1 == 0 then goto L242b86;
  #L242af4.  v1:= new `java.lang.StringBuilder`;
  #L242af8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L242afe.  v2:= "[" @kind object;
  #L242b02.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L242b08.  v1:= temp @kind object;
  #L242b0a.  call temp:= `host`(v3) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L242b10.  v2:= temp @kind object;
  #L242b12.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L242b18.  v1:= temp @kind object;
  #L242b1a.  v2:= "]" @kind object;
  #L242b1e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L242b24.  v1:= temp @kind object;
  #L242b26.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L242b2c.  v0:= temp @kind object;
  #L242b2e.  if v4 != 0 then goto L242b4e;
  #L242b32.  call temp:= `port`(v3) @signature `Lokhttp3/HttpUrl;.port:()I` @kind virtual;
  #L242b38.  v1:= temp;
  #L242b3a.  call temp:= `scheme`(v3) @signature `Lokhttp3/HttpUrl;.scheme:()Ljava/lang/String;` @kind virtual;
  #L242b40.  v2:= temp @kind object;
  #L242b42.  call temp:= `defaultPort`(v2) @signature `Lokhttp3/HttpUrl;.defaultPort:(Ljava/lang/String;)I` @kind static;
  #L242b48.  v2:= temp;
  #L242b4a.  if v1 == v2 then goto L242b84;
  #L242b4e.  v1:= new `java.lang.StringBuilder`;
  #L242b52.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L242b58.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L242b5e.  v1:= temp @kind object;
  #L242b60.  v2:= ":" @kind object;
  #L242b64.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L242b6a.  v1:= temp @kind object;
  #L242b6c.  call temp:= `port`(v3) @signature `Lokhttp3/HttpUrl;.port:()I` @kind virtual;
  #L242b72.  v2:= temp;
  #L242b74.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L242b7a.  v1:= temp @kind object;
  #L242b7c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L242b82.  v0:= temp @kind object;
  #L242b84.  return v0 @kind object;
  #L242b86.  call temp:= `host`(v3) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L242b8c.  v0:= temp @kind object;
  #L242b8e.  goto L242b2e;
}
procedure `java.util.List` `immutableList`(`java.util.List` v1 @kind object) @signature `Lokhttp3/internal/Util;.immutableList:(Ljava/util/List;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L242ba0.  v0:= new `java.util.ArrayList`;
  #L242ba4.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L242baa.  call temp:= `unmodifiableList`(v0) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L242bb0.  v0:= temp @kind object;
  #L242bb2.  return v0 @kind object;
}
procedure `java.util.List` `immutableList`(`java.lang.Object`[] v1 @kind object) @signature `Lokhttp3/internal/Util;.immutableList:([Ljava/lang/Object;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L242bc4.  call temp:= `clone`(v1) @signature `[Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L242bca.  v0:= temp @kind object;
  #L242bcc.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L242bd0.  call temp:= `asList`(v0) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L242bd6.  v0:= temp @kind object;
  #L242bd8.  call temp:= `unmodifiableList`(v0) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L242bde.  v0:= temp @kind object;
  #L242be0.  return v0 @kind object;
}
procedure `java.util.Map` `immutableMap`(`java.util.Map` v1 @kind object) @signature `Lokhttp3/internal/Util;.immutableMap:(Ljava/util/Map;)Ljava/util/Map;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L242bf4.  v0:= new `java.util.LinkedHashMap`;
  #L242bf8.  call `<init>`(v0, v1) @signature `Ljava/util/LinkedHashMap;.<init>:(Ljava/util/Map;)V` @kind direct;
  #L242bfe.  call temp:= `unmodifiableMap`(v0) @signature `Ljava/util/Collections;.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;` @kind static;
  #L242c04.  v0:= temp @kind object;
  #L242c06.  return v0 @kind object;
}
procedure `java.util.List` `intersect`(`java.lang.Object`[] v9 @kind object, `java.lang.Object`[] v10 @kind object) @signature `Lokhttp3/internal/Util;.intersect:([Ljava/lang/Object;[Ljava/lang/Object;)Ljava/util/List;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L242c18.  v4:= 0I;
  #L242c1a.  v2:= new `java.util.ArrayList`;
  #L242c1e.  call `<init>`(v2) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L242c24.  v6:= length @variable v9;
  #L242c26.  v5:= v4;
  #L242c28.  if v5 >= v6 then goto L242c5c;
  #L242c2c.  v0:= v9[v5] @kind object;
  #L242c30.  v7:= length @variable v10;
  #L242c32.  v3:= v4;
  #L242c34.  if v3 >= v7 then goto L242c4e;
  #L242c38.  v1:= v10[v3] @kind object;
  #L242c3c.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L242c42.  v8:= temp;
  #L242c44.  if v8 == 0 then goto L242c56;
  #L242c48.  call temp:= `add`(v2, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L242c4e.  v3:= v5 + 1;
  #L242c52.  v5:= v3;
  #L242c54.  goto L242c28;
  #L242c56.  v3:= v3 + 1;
  #L242c5a.  goto L242c34;
  #L242c5c.  return v2 @kind object;
}
procedure `java.lang.Object`[] `intersect`(`java.lang.Class` v2 @kind object, `java.lang.Object`[] v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `Lokhttp3/internal/Util;.intersect:(Ljava/lang/Class;[Ljava/lang/Object;[Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L242c70.  call temp:= `intersect`(v3, v4) @signature `Lokhttp3/internal/Util;.intersect:([Ljava/lang/Object;[Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L242c76.  v0:= temp @kind object;
  #L242c78.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L242c7e.  v1:= temp;
  #L242c80.  call temp:= `newInstance`(v2, v1) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L242c86.  v1:= temp @kind object;
  #L242c88.  v1:= (`java.lang.Object`[]) v1 @kind object;
  #L242c8c.  v1:= (`java.lang.Object`[]) v1 @kind object;
  #L242c90.  call temp:= `toArray`(v0, v1) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L242c96.  v1:= temp @kind object;
  #L242c98.  return v1 @kind object;
}
procedure `boolean` `isAndroidGetsocknameError`(`java.lang.AssertionError` v2 @kind object @name `e`) @signature `Lokhttp3/internal/Util;.isAndroidGetsocknameError:(Ljava/lang/AssertionError;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L242cac.  call temp:= `getCause`(v2) @signature `Ljava/lang/AssertionError;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L242cb2.  v0:= temp @kind object;
  #L242cb4.  if v0 == 0 then goto L242ce0;
  #L242cb8.  call temp:= `getMessage`(v2) @signature `Ljava/lang/AssertionError;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L242cbe.  v0:= temp @kind object;
  #L242cc0.  if v0 == 0 then goto L242ce0;
  #L242cc4.  call temp:= `getMessage`(v2) @signature `Ljava/lang/AssertionError;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L242cca.  v0:= temp @kind object;
  #L242ccc.  v1:= "getsockname failed" @kind object;
  #L242cd0.  call temp:= `contains`(v0, v1) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L242cd6.  v0:= temp;
  #L242cd8.  if v0 == 0 then goto L242ce0;
  #L242cdc.  v0:= 1I;
  #L242cde.  return v0;
  #L242ce0.  v0:= 0I;
  #L242ce2.  goto L242cde;
}
procedure `java.lang.String` `md5Hex`(`java.lang.String` v4 @kind object @name `s`) @signature `Lokhttp3/internal/Util;.md5Hex:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L242cf4.  v3:= "MD5" @kind object;
  #L242cf8.  call temp:= `getInstance`(v3) @signature `Ljava/security/MessageDigest;.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;` @kind static;
  #L242cfe.  v2:= temp @kind object;
  #L242d00.  v3:= "UTF-8" @kind object;
  #L242d04.  call temp:= `getBytes`(v4, v3) @signature `Ljava/lang/String;.getBytes:(Ljava/lang/String;)[B` @kind virtual;
  #L242d0a.  v3:= temp @kind object;
  #L242d0c.  call temp:= `digest`(v2, v3) @signature `Ljava/security/MessageDigest;.digest:([B)[B` @kind virtual;
  #L242d12.  v1:= temp @kind object;
  #L242d14.  call temp:= `of`(v1) @signature `Lokio/ByteString;.of:([B)Lokio/ByteString;` @kind static;
  #L242d1a.  v3:= temp @kind object;
  #L242d1c.  call temp:= `hex`(v3) @signature `Lokio/ByteString;.hex:()Ljava/lang/String;` @kind virtual;
  #L242d22.  v3:= temp @kind object;
  #L242d24.  return v3 @kind object;
  #L242d26.  v0:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L242d28.  v3:= new `java.lang.AssertionError`;
  #L242d2c.  call `<init>`(v3, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L242d32.  throw v3;
  #L242d34.  v0:= Exception @type ^`java.io.UnsupportedEncodingException` @kind object;
  #L242d36.  goto L242d28;
  catch `java.security.NoSuchAlgorithmException` @[L242cf4..L242d22] goto L242d26;
  catch `java.io.UnsupportedEncodingException` @[L242cf4..L242d22] goto L242d34;
}
procedure `okio.ByteString` `sha1`(`okio.ByteString` v4 @kind object @name `s`) @signature `Lokhttp3/internal/Util;.sha1:(Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L242d58.  v3:= "SHA-1" @kind object;
  #L242d5c.  call temp:= `getInstance`(v3) @signature `Ljava/security/MessageDigest;.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;` @kind static;
  #L242d62.  v1:= temp @kind object;
  #L242d64.  call temp:= `toByteArray`(v4) @signature `Lokio/ByteString;.toByteArray:()[B` @kind virtual;
  #L242d6a.  v3:= temp @kind object;
  #L242d6c.  call temp:= `digest`(v1, v3) @signature `Ljava/security/MessageDigest;.digest:([B)[B` @kind virtual;
  #L242d72.  v2:= temp @kind object;
  #L242d74.  call temp:= `of`(v2) @signature `Lokio/ByteString;.of:([B)Lokio/ByteString;` @kind static;
  #L242d7a.  v3:= temp @kind object;
  #L242d7c.  return v3 @kind object;
  #L242d7e.  v0:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L242d80.  v3:= new `java.lang.AssertionError`;
  #L242d84.  call `<init>`(v3, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L242d8a.  throw v3;
  catch `java.security.NoSuchAlgorithmException` @[L242d58..L242d7a] goto L242d7e;
}
procedure `okio.ByteString` `sha256`(`okio.ByteString` v4 @kind object @name `s`) @signature `Lokhttp3/internal/Util;.sha256:(Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L242dac.  v3:= "SHA-256" @kind object;
  #L242db0.  call temp:= `getInstance`(v3) @signature `Ljava/security/MessageDigest;.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;` @kind static;
  #L242db6.  v1:= temp @kind object;
  #L242db8.  call temp:= `toByteArray`(v4) @signature `Lokio/ByteString;.toByteArray:()[B` @kind virtual;
  #L242dbe.  v3:= temp @kind object;
  #L242dc0.  call temp:= `digest`(v1, v3) @signature `Ljava/security/MessageDigest;.digest:([B)[B` @kind virtual;
  #L242dc6.  v2:= temp @kind object;
  #L242dc8.  call temp:= `of`(v2) @signature `Lokio/ByteString;.of:([B)Lokio/ByteString;` @kind static;
  #L242dce.  v3:= temp @kind object;
  #L242dd0.  return v3 @kind object;
  #L242dd2.  v0:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L242dd4.  v3:= new `java.lang.AssertionError`;
  #L242dd8.  call `<init>`(v3, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L242dde.  throw v3;
  catch `java.security.NoSuchAlgorithmException` @[L242dac..L242dce] goto L242dd2;
}
procedure `java.lang.String` `shaBase64`(`java.lang.String` v4 @kind object @name `s`) @signature `Lokhttp3/internal/Util;.shaBase64:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L242e00.  v3:= "SHA-1" @kind object;
  #L242e04.  call temp:= `getInstance`(v3) @signature `Ljava/security/MessageDigest;.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;` @kind static;
  #L242e0a.  v1:= temp @kind object;
  #L242e0c.  v3:= "UTF-8" @kind object;
  #L242e10.  call temp:= `getBytes`(v4, v3) @signature `Ljava/lang/String;.getBytes:(Ljava/lang/String;)[B` @kind virtual;
  #L242e16.  v3:= temp @kind object;
  #L242e18.  call temp:= `digest`(v1, v3) @signature `Ljava/security/MessageDigest;.digest:([B)[B` @kind virtual;
  #L242e1e.  v2:= temp @kind object;
  #L242e20.  call temp:= `of`(v2) @signature `Lokio/ByteString;.of:([B)Lokio/ByteString;` @kind static;
  #L242e26.  v3:= temp @kind object;
  #L242e28.  call temp:= `base64`(v3) @signature `Lokio/ByteString;.base64:()Ljava/lang/String;` @kind virtual;
  #L242e2e.  v3:= temp @kind object;
  #L242e30.  return v3 @kind object;
  #L242e32.  v0:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L242e34.  v3:= new `java.lang.AssertionError`;
  #L242e38.  call `<init>`(v3, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L242e3e.  throw v3;
  #L242e40.  v0:= Exception @type ^`java.io.UnsupportedEncodingException` @kind object;
  #L242e42.  goto L242e34;
  catch `java.security.NoSuchAlgorithmException` @[L242e00..L242e2e] goto L242e32;
  catch `java.io.UnsupportedEncodingException` @[L242e00..L242e2e] goto L242e40;
}
procedure `boolean` `skipAll`(`okio.Source` v12 @kind object @name `source`, `int` v13 @name `duration`, `java.util.concurrent.TimeUnit` v14 @kind object @name `timeUnit`) @signature `Lokhttp3/internal/Util;.skipAll:(Lokio/Source;ILjava/util/concurrent/TimeUnit;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L242e64.  v6:= 9223372036854775807L;
  #L242e6e.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L242e74.  v2:= temp @kind wide;
  #L242e76.  call temp:= `timeout`(v12) @signature `Lokio/Source;.timeout:()Lokio/Timeout;` @kind interface;
  #L242e7c.  v8:= temp @kind object;
  #L242e7e.  call temp:= `hasDeadline`(v8) @signature `Lokio/Timeout;.hasDeadline:()Z` @kind virtual;
  #L242e84.  v8:= temp;
  #L242e86.  if v8 == 0 then goto L242f08;
  #L242e8a.  call temp:= `timeout`(v12) @signature `Lokio/Source;.timeout:()Lokio/Timeout;` @kind interface;
  #L242e90.  v8:= temp @kind object;
  #L242e92.  call temp:= `deadlineNanoTime`(v8) @signature `Lokio/Timeout;.deadlineNanoTime:()J` @kind virtual;
  #L242e98.  v8:= temp @kind wide;
  #L242e9a.  v4:= v8 - v2 @kind long;
  #L242e9e.  call temp:= `timeout`(v12) @signature `Lokio/Source;.timeout:()Lokio/Timeout;` @kind interface;
  #L242ea4.  v8:= temp @kind object;
  #L242ea6.  v10:= (`long`) v13 @kind i2l;
  #L242ea8.  call temp:= `toNanos`(v14, v10) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L242eae.  v10:= temp @kind wide;
  #L242eb0.  call temp:= `min`(v4, v10) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L242eb6.  v10:= temp @kind wide;
  #L242eb8.  v10:= v10 + v2 @kind long;
  #L242eba.  call temp:= `deadlineNanoTime`(v8, v10) @signature `Lokio/Timeout;.deadlineNanoTime:(J)Lokio/Timeout;` @kind virtual;
  #L242ec0.  v1:= new `okio.Buffer`;
  #L242ec4.  call `<init>`(v1) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L242eca.  v8:= 8192L;
  #L242ece.  call temp:= `read`(v12, v1, v8) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L242ed4.  v8:= temp @kind wide;
  #L242ed6.  v10:= -1L;
  #L242eda.  v8:= lcmp(v8, v10);
  #L242ede.  if v8 == 0 then goto L242f0c;
  #L242ee2.  call `clear`(v1) @signature `Lokio/Buffer;.clear:()V` @kind virtual;
  #L242ee8.  goto L242eca;
  #L242eea.  v0:= Exception @type ^`java.io.InterruptedIOException` @kind object;
  #L242eec.  v8:= 0I;
  #L242eee.  v6:= lcmp(v4, v6);
  #L242ef2.  if v6 != 0 then goto L242f3c;
  #L242ef6.  call temp:= `timeout`(v12) @signature `Lokio/Source;.timeout:()Lokio/Timeout;` @kind interface;
  #L242efc.  v6:= temp @kind object;
  #L242efe.  call temp:= `clearDeadline`(v6) @signature `Lokio/Timeout;.clearDeadline:()Lokio/Timeout;` @kind virtual;
  #L242f04.  v6:= v8;
  #L242f06.  return v6;
  #L242f08.  v4:= v6 @kind wide;
  #L242f0a.  goto L242e9e;
  #L242f0c.  v8:= 1I;
  #L242f0e.  v6:= lcmp(v4, v6);
  #L242f12.  if v6 != 0 then goto L242f28;
  #L242f16.  call temp:= `timeout`(v12) @signature `Lokio/Source;.timeout:()Lokio/Timeout;` @kind interface;
  #L242f1c.  v6:= temp @kind object;
  #L242f1e.  call temp:= `clearDeadline`(v6) @signature `Lokio/Timeout;.clearDeadline:()Lokio/Timeout;` @kind virtual;
  #L242f24.  v6:= v8;
  #L242f26.  goto L242f06;
  #L242f28.  call temp:= `timeout`(v12) @signature `Lokio/Source;.timeout:()Lokio/Timeout;` @kind interface;
  #L242f2e.  v6:= temp @kind object;
  #L242f30.  v10:= v2 + v4 @kind long;
  #L242f34.  call temp:= `deadlineNanoTime`(v6, v10) @signature `Lokio/Timeout;.deadlineNanoTime:(J)Lokio/Timeout;` @kind virtual;
  #L242f3a.  goto L242f24;
  #L242f3c.  call temp:= `timeout`(v12) @signature `Lokio/Source;.timeout:()Lokio/Timeout;` @kind interface;
  #L242f42.  v6:= temp @kind object;
  #L242f44.  v10:= v2 + v4 @kind long;
  #L242f48.  call temp:= `deadlineNanoTime`(v6, v10) @signature `Lokio/Timeout;.deadlineNanoTime:(J)Lokio/Timeout;` @kind virtual;
  #L242f4e.  goto L242f04;
  #L242f50.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L242f52.  v6:= lcmp(v4, v6);
  #L242f56.  if v6 != 0 then goto L242f6a;
  #L242f5a.  call temp:= `timeout`(v12) @signature `Lokio/Source;.timeout:()Lokio/Timeout;` @kind interface;
  #L242f60.  v6:= temp @kind object;
  #L242f62.  call temp:= `clearDeadline`(v6) @signature `Lokio/Timeout;.clearDeadline:()Lokio/Timeout;` @kind virtual;
  #L242f68.  throw v8;
  #L242f6a.  call temp:= `timeout`(v12) @signature `Lokio/Source;.timeout:()Lokio/Timeout;` @kind interface;
  #L242f70.  v6:= temp @kind object;
  #L242f72.  v10:= v2 + v4 @kind long;
  #L242f76.  call temp:= `deadlineNanoTime`(v6, v10) @signature `Lokio/Timeout;.deadlineNanoTime:(J)Lokio/Timeout;` @kind virtual;
  #L242f7c.  goto L242f68;
  catch `java.io.InterruptedIOException` @[L242ec0..L242ee8] goto L242eea;
  catch `java.lang.Throwable` @[L242ec0..L242ee8] goto L242f50;
}
procedure `int` `skipLeadingAsciiWhitespace`(`java.lang.String` v2 @kind object @name `input`, `int` v3 @name `pos`, `int` v4 @name `limit`) @signature `Lokhttp3/internal/Util;.skipLeadingAsciiWhitespace:(Ljava/lang/String;II)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L242fa0.  v0:= v3;
  #L242fa2.  if v0 >= v4 then goto L242fbc;
  #L242fa6.  call temp:= `charAt`(v2, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L242fac.  v1:= temp;
  #L242fae.  goto L242fc0;
  #L242fb4.  return v0;
  #L242fb6.  v0:= v0 + 1;
  #L242fba.  goto L242fa2;
  #L242fbc.  v0:= v4;
  #L242fbe.  goto L242fb4;
  #L242fc0.  switch v1
                  | 9 => goto L242fb6
                  | 10 => goto L242fb6
                  | 12 => goto L242fb6
                  | 13 => goto L242fb6
                  | 32 => goto L242fb6
                  | else => goto L242fb4;
}
procedure `int` `skipTrailingAsciiWhitespace`(`java.lang.String` v2 @kind object @name `input`, `int` v3 @name `pos`, `int` v4 @name `limit`) @signature `Lokhttp3/internal/Util;.skipTrailingAsciiWhitespace:(Ljava/lang/String;II)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L242ffc.  v0:= v4 + -1;
  #L243000.  if v0 < v3 then goto L243016;
  #L243004.  call temp:= `charAt`(v2, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L24300a.  v1:= temp;
  #L24300c.  goto L243020;
  #L243012.  v3:= v0 + 1;
  #L243016.  return v3;
  #L243018.  v0:= v0 + -1;
  #L24301c.  goto L243000;
  #L24301e.  
  #L243020.  switch v1
                  | 9 => goto L243018
                  | 10 => goto L243018
                  | 12 => goto L243018
                  | 13 => goto L243018
                  | 32 => goto L243018
                  | else => goto L243012;
}
procedure `java.util.concurrent.ThreadFactory` `threadFactory`(`java.lang.String` v1 @kind object @name `name`, `boolean` v2 @name `daemon`) @signature `Lokhttp3/internal/Util;.threadFactory:(Ljava/lang/String;Z)Ljava/util/concurrent/ThreadFactory;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L24305c.  v0:= new `okhttp3.internal.Util$1`;
  #L243060.  call `<init>`(v0, v1, v2) @signature `Lokhttp3/internal/Util$1;.<init>:(Ljava/lang/String;Z)V` @kind direct;
  #L243066.  return v0 @kind object;
}
procedure `java.lang.String` `toHumanReadableAscii`(`java.lang.String` v8 @kind object @name `s`) @signature `Lokhttp3/internal/Util;.toHumanReadableAscii:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L243078.  v7:= 127I;
  #L24307c.  v6:= 31I;
  #L243080.  v2:= 0I;
  #L243082.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L243088.  v4:= temp;
  #L24308a.  if v2 >= v4 then goto L2430f4;
  #L24308e.  call temp:= `codePointAt`(v8, v2) @signature `Ljava/lang/String;.codePointAt:(I)I` @kind virtual;
  #L243094.  v1:= temp;
  #L243096.  if v1 <= v6 then goto L2430aa;
  #L24309a.  if v1 >= v7 then goto L2430aa;
  #L24309e.  call temp:= `charCount`(v1) @signature `Ljava/lang/Character;.charCount:(I)I` @kind static;
  #L2430a4.  v5:= temp;
  #L2430a6.  v2:= v2 + v5 @kind int;
  #L2430a8.  goto L24308a;
  #L2430aa.  v0:= new `okio.Buffer`;
  #L2430ae.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L2430b4.  v5:= 0I;
  #L2430b6.  call temp:= `writeUtf8`(v0, v8, v5, v2) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @kind virtual;
  #L2430bc.  v3:= v2;
  #L2430be.  if v3 >= v4 then goto L2430ec;
  #L2430c2.  call temp:= `codePointAt`(v8, v3) @signature `Ljava/lang/String;.codePointAt:(I)I` @kind virtual;
  #L2430c8.  v1:= temp;
  #L2430ca.  if v1 <= v6 then goto L2430e6;
  #L2430ce.  if v1 >= v7 then goto L2430e6;
  #L2430d2.  v5:= v1;
  #L2430d4.  call temp:= `writeUtf8CodePoint`(v0, v5) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/Buffer;` @kind virtual;
  #L2430da.  call temp:= `charCount`(v1) @signature `Ljava/lang/Character;.charCount:(I)I` @kind static;
  #L2430e0.  v5:= temp;
  #L2430e2.  v3:= v3 + v5 @kind int;
  #L2430e4.  goto L2430be;
  #L2430e6.  v5:= 63I;
  #L2430ea.  goto L2430d4;
  #L2430ec.  call temp:= `readUtf8`(v0) @signature `Lokio/Buffer;.readUtf8:()Ljava/lang/String;` @kind virtual;
  #L2430f2.  v8:= temp @kind object;
  #L2430f4.  return v8 @kind object;
}
procedure `java.lang.String` `trimSubstring`(`java.lang.String` v3 @kind object @name `string`, `int` v4 @name `pos`, `int` v5 @name `limit`) @signature `Lokhttp3/internal/Util;.trimSubstring:(Ljava/lang/String;II)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L243108.  call temp:= `skipLeadingAsciiWhitespace`(v3, v4, v5) @signature `Lokhttp3/internal/Util;.skipLeadingAsciiWhitespace:(Ljava/lang/String;II)I` @kind static;
  #L24310e.  v1:= temp;
  #L243110.  call temp:= `skipTrailingAsciiWhitespace`(v3, v1, v5) @signature `Lokhttp3/internal/Util;.skipTrailingAsciiWhitespace:(Ljava/lang/String;II)I` @kind static;
  #L243116.  v0:= temp;
  #L243118.  call temp:= `substring`(v3, v1, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L24311e.  v2:= temp @kind object;
  #L243120.  return v2 @kind object;
}
procedure `boolean` `verifyAsIpAddress`(`java.lang.String` v1 @kind object @name `host`) @signature `Lokhttp3/internal/Util;.verifyAsIpAddress:(Ljava/lang/String;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L243134.  v0:= `@@okhttp3.internal.Util.VERIFY_AS_IP_ADDRESS` @type ^`java.util.regex.Pattern` @kind object;
  #L243138.  call temp:= `matcher`(v0, v1) @signature `Ljava/util/regex/Pattern;.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;` @kind virtual;
  #L24313e.  v0:= temp @kind object;
  #L243140.  call temp:= `matches`(v0) @signature `Ljava/util/regex/Matcher;.matches:()Z` @kind virtual;
  #L243146.  v0:= temp;
  #L243148.  return v0;
}
