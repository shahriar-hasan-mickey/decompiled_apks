record `okhttp3.internal.http.Http1xStream$ChunkedSource` @kind class @AccessFlag  extends `okhttp3.internal.http.Http1xStream$AbstractSource` @kind class {
  `long` `okhttp3.internal.http.Http1xStream$ChunkedSource.bytesRemainingInChunk` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.http.Http1xStream$ChunkedSource.hasMoreChunks` @AccessFlag PRIVATE;
  `okhttp3.internal.http.HttpEngine` `okhttp3.internal.http.Http1xStream$ChunkedSource.httpEngine` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.http.Http1xStream` `okhttp3.internal.http.Http1xStream$ChunkedSource.this$0` @AccessFlag FINAL_SYNTHETIC;
}
global `long` `@@okhttp3.internal.http.Http1xStream$ChunkedSource.NO_CHUNK_YET` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.internal.http.Http1xStream$ChunkedSource` v2 @kind this, `okhttp3.internal.http.Http1xStream` v3 @kind object, `okhttp3.internal.http.HttpEngine` v4 @kind object @name `httpEngine`) @signature `Lokhttp3/internal/http/Http1xStream$ChunkedSource;.<init>:(Lokhttp3/internal/http/Http1xStream;Lokhttp3/internal/http/HttpEngine;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L351178.  v2.`okhttp3.internal.http.Http1xStream$ChunkedSource.this$0` @type ^`okhttp3.internal.http.Http1xStream` := v3 @kind object;
  #L35117c.  v0:= 0I;
  #L35117e.  call `<init>`(v2, v3, v0) @signature `Lokhttp3/internal/http/Http1xStream$AbstractSource;.<init>:(Lokhttp3/internal/http/Http1xStream;Lokhttp3/internal/http/Http1xStream$1;)V` @kind direct;
  #L351184.  v0:= -1L;
  #L351188.  v2.`okhttp3.internal.http.Http1xStream$ChunkedSource.bytesRemainingInChunk` @type ^`long` := v0 @kind wide;
  #L35118c.  v0:= 1I;
  #L35118e.  v2.`okhttp3.internal.http.Http1xStream$ChunkedSource.hasMoreChunks` @type ^`boolean` := v0 @kind boolean;
  #L351192.  v2.`okhttp3.internal.http.Http1xStream$ChunkedSource.httpEngine` @type ^`okhttp3.internal.http.HttpEngine` := v4 @kind object;
  #L351196.  return @kind void;
}
procedure `void` `readChunkSize`(`okhttp3.internal.http.Http1xStream$ChunkedSource` v8 @kind this) @signature `Lokhttp3/internal/http/Http1xStream$ChunkedSource;.readChunkSize:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3511a8.  v6:= 0L;
  #L3511ac.  v2:= v8.`okhttp3.internal.http.Http1xStream$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L3511b0.  v4:= -1L;
  #L3511b4.  v2:= lcmp(v2, v4);
  #L3511b8.  if v2 == 0 then goto L3511ce;
  #L3511bc.  v2:= v8.`okhttp3.internal.http.Http1xStream$ChunkedSource.this$0` @type ^`okhttp3.internal.http.Http1xStream` @kind object;
  #L3511c0.  call temp:= `access$600`(v2) @signature `Lokhttp3/internal/http/Http1xStream;.access$600:(Lokhttp3/internal/http/Http1xStream;)Lokio/BufferedSource;` @kind static;
  #L3511c6.  v2:= temp @kind object;
  #L3511c8.  call temp:= `readUtf8LineStrict`(v2) @signature `Lokio/BufferedSource;.readUtf8LineStrict:()Ljava/lang/String;` @kind interface;
  #L3511ce.  v2:= v8.`okhttp3.internal.http.Http1xStream$ChunkedSource.this$0` @type ^`okhttp3.internal.http.Http1xStream` @kind object;
  #L3511d2.  call temp:= `access$600`(v2) @signature `Lokhttp3/internal/http/Http1xStream;.access$600:(Lokhttp3/internal/http/Http1xStream;)Lokio/BufferedSource;` @kind static;
  #L3511d8.  v2:= temp @kind object;
  #L3511da.  call temp:= `readHexadecimalUnsignedLong`(v2) @signature `Lokio/BufferedSource;.readHexadecimalUnsignedLong:()J` @kind interface;
  #L3511e0.  v2:= temp @kind wide;
  #L3511e2.  v8.`okhttp3.internal.http.Http1xStream$ChunkedSource.bytesRemainingInChunk` @type ^`long` := v2 @kind wide;
  #L3511e6.  v2:= v8.`okhttp3.internal.http.Http1xStream$ChunkedSource.this$0` @type ^`okhttp3.internal.http.Http1xStream` @kind object;
  #L3511ea.  call temp:= `access$600`(v2) @signature `Lokhttp3/internal/http/Http1xStream;.access$600:(Lokhttp3/internal/http/Http1xStream;)Lokio/BufferedSource;` @kind static;
  #L3511f0.  v2:= temp @kind object;
  #L3511f2.  call temp:= `readUtf8LineStrict`(v2) @signature `Lokio/BufferedSource;.readUtf8LineStrict:()Ljava/lang/String;` @kind interface;
  #L3511f8.  v2:= temp @kind object;
  #L3511fa.  call temp:= `trim`(v2) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L351200.  v1:= temp @kind object;
  #L351202.  v2:= v8.`okhttp3.internal.http.Http1xStream$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L351206.  v2:= lcmp(v2, v6);
  #L35120a.  if v2 < 0 then goto L35122a;
  #L35120e.  call temp:= `isEmpty`(v1) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L351214.  v2:= temp;
  #L351216.  if v2 != 0 then goto L35128a;
  #L35121a.  v2:= ";" @kind object;
  #L35121e.  call temp:= `startsWith`(v1, v2) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L351224.  v2:= temp;
  #L351226.  if v2 != 0 then goto L35128a;
  #L35122a.  v2:= new `java.net.ProtocolException`;
  #L35122e.  v3:= new `java.lang.StringBuilder`;
  #L351232.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L351238.  v4:= "expected chunk size and optional extensions but was \"" @kind object;
  #L35123c.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L351242.  v3:= temp @kind object;
  #L351244.  v4:= v8.`okhttp3.internal.http.Http1xStream$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L351248.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L35124e.  v3:= temp @kind object;
  #L351250.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L351256.  v3:= temp @kind object;
  #L351258.  v4:= "\"" @kind object;
  #L35125c.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L351262.  v3:= temp @kind object;
  #L351264.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L35126a.  v3:= temp @kind object;
  #L35126c.  call `<init>`(v2, v3) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L351272.  throw v2;
  #L351274.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L351276.  v2:= new `java.net.ProtocolException`;
  #L35127a.  call temp:= `getMessage`(v0) @signature `Ljava/lang/NumberFormatException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L351280.  v3:= temp @kind object;
  #L351282.  call `<init>`(v2, v3) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L351288.  throw v2;
  #L35128a.  v2:= v8.`okhttp3.internal.http.Http1xStream$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L35128e.  v2:= lcmp(v2, v6);
  #L351292.  if v2 != 0 then goto L3512ba;
  #L351296.  v2:= 0I;
  #L351298.  v8.`okhttp3.internal.http.Http1xStream$ChunkedSource.hasMoreChunks` @type ^`boolean` := v2 @kind boolean;
  #L35129c.  v2:= v8.`okhttp3.internal.http.Http1xStream$ChunkedSource.httpEngine` @type ^`okhttp3.internal.http.HttpEngine` @kind object;
  #L3512a0.  v3:= v8.`okhttp3.internal.http.Http1xStream$ChunkedSource.this$0` @type ^`okhttp3.internal.http.Http1xStream` @kind object;
  #L3512a4.  call temp:= `readHeaders`(v3) @signature `Lokhttp3/internal/http/Http1xStream;.readHeaders:()Lokhttp3/Headers;` @kind virtual;
  #L3512aa.  v3:= temp @kind object;
  #L3512ac.  call `receiveHeaders`(v2, v3) @signature `Lokhttp3/internal/http/HttpEngine;.receiveHeaders:(Lokhttp3/Headers;)V` @kind virtual;
  #L3512b2.  v2:= 1I;
  #L3512b4.  call `endOfInput`(v8, v2) @signature `Lokhttp3/internal/http/Http1xStream$ChunkedSource;.endOfInput:(Z)V` @kind virtual;
  #L3512ba.  return @kind void;
  catch `java.lang.NumberFormatException` @[L3511ce..L351274] goto L351274;
}
procedure `void` `close`(`okhttp3.internal.http.Http1xStream$ChunkedSource` v2 @kind this) @signature `Lokhttp3/internal/http/Http1xStream$ChunkedSource;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3512dc.  v0:= v2.`okhttp3.internal.http.Http1xStream$ChunkedSource.closed` @type ^`boolean` @kind boolean;
  #L3512e0.  if v0 == 0 then goto L3512e6;
  #L3512e4.  return @kind void;
  #L3512e6.  v0:= v2.`okhttp3.internal.http.Http1xStream$ChunkedSource.hasMoreChunks` @type ^`boolean` @kind boolean;
  #L3512ea.  if v0 == 0 then goto L35130a;
  #L3512ee.  v0:= 100I;
  #L3512f2.  v1:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L3512f6.  call temp:= `discard`(v2, v0, v1) @signature `Lokhttp3/internal/Util;.discard:(Lokio/Source;ILjava/util/concurrent/TimeUnit;)Z` @kind static;
  #L3512fc.  v0:= temp;
  #L3512fe.  if v0 != 0 then goto L35130a;
  #L351302.  v0:= 0I;
  #L351304.  call `endOfInput`(v2, v0) @signature `Lokhttp3/internal/http/Http1xStream$ChunkedSource;.endOfInput:(Z)V` @kind virtual;
  #L35130a.  v0:= 1I;
  #L35130c.  v2.`okhttp3.internal.http.Http1xStream$ChunkedSource.closed` @type ^`boolean` := v0 @kind boolean;
  #L351310.  goto L3512e4;
}
procedure `long` `read`(`okhttp3.internal.http.Http1xStream$ChunkedSource` v8 @kind this, `okio.Buffer` v9 @kind object @name `sink`, `long` v10 @name `byteCount`) @signature `Lokhttp3/internal/http/Http1xStream$ChunkedSource;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L351324.  v6:= 0L;
  #L351328.  v2:= -1L;
  #L35132c.  v4:= lcmp(v10, v6);
  #L351330.  if v4 >= 0 then goto L351366;
  #L351334.  v2:= new `java.lang.IllegalArgumentException`;
  #L351338.  v3:= new `java.lang.StringBuilder`;
  #L35133c.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L351342.  v4:= "byteCount < 0: " @kind object;
  #L351346.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L35134c.  v3:= temp @kind object;
  #L35134e.  call temp:= `append`(v3, v10) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L351354.  v3:= temp @kind object;
  #L351356.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L35135c.  v3:= temp @kind object;
  #L35135e.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L351364.  throw v2;
  #L351366.  v4:= v8.`okhttp3.internal.http.Http1xStream$ChunkedSource.closed` @type ^`boolean` @kind boolean;
  #L35136a.  if v4 == 0 then goto L35137e;
  #L35136e.  v2:= new `java.lang.IllegalStateException`;
  #L351372.  v3:= "closed" @kind object;
  #L351376.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L35137c.  throw v2;
  #L35137e.  v4:= v8.`okhttp3.internal.http.Http1xStream$ChunkedSource.hasMoreChunks` @type ^`boolean` @kind boolean;
  #L351382.  if v4 != 0 then goto L35138a;
  #L351386.  v0:= v2 @kind wide;
  #L351388.  return v0 @kind wide;
  #L35138a.  v4:= v8.`okhttp3.internal.http.Http1xStream$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L35138e.  v4:= lcmp(v4, v6);
  #L351392.  if v4 == 0 then goto L3513a2;
  #L351396.  v4:= v8.`okhttp3.internal.http.Http1xStream$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L35139a.  v4:= lcmp(v4, v2);
  #L35139e.  if v4 != 0 then goto L3513b4;
  #L3513a2.  call `readChunkSize`(v8) @signature `Lokhttp3/internal/http/Http1xStream$ChunkedSource;.readChunkSize:()V` @kind direct;
  #L3513a8.  v4:= v8.`okhttp3.internal.http.Http1xStream$ChunkedSource.hasMoreChunks` @type ^`boolean` @kind boolean;
  #L3513ac.  if v4 != 0 then goto L3513b4;
  #L3513b0.  v0:= v2 @kind wide;
  #L3513b2.  goto L351388;
  #L3513b4.  v4:= v8.`okhttp3.internal.http.Http1xStream$ChunkedSource.this$0` @type ^`okhttp3.internal.http.Http1xStream` @kind object;
  #L3513b8.  call temp:= `access$600`(v4) @signature `Lokhttp3/internal/http/Http1xStream;.access$600:(Lokhttp3/internal/http/Http1xStream;)Lokio/BufferedSource;` @kind static;
  #L3513be.  v4:= temp @kind object;
  #L3513c0.  v6:= v8.`okhttp3.internal.http.Http1xStream$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L3513c4.  call temp:= `min`(v10, v6) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L3513ca.  v6:= temp @kind wide;
  #L3513cc.  call temp:= `read`(v4, v9, v6) @signature `Lokio/BufferedSource;.read:(Lokio/Buffer;J)J` @kind interface;
  #L3513d2.  v0:= temp @kind wide;
  #L3513d4.  v2:= lcmp(v0, v2);
  #L3513d8.  if v2 != 0 then goto L3513f4;
  #L3513dc.  v2:= 0I;
  #L3513de.  call `endOfInput`(v8, v2) @signature `Lokhttp3/internal/http/Http1xStream$ChunkedSource;.endOfInput:(Z)V` @kind virtual;
  #L3513e4.  v2:= new `java.net.ProtocolException`;
  #L3513e8.  v3:= "unexpected end of stream" @kind object;
  #L3513ec.  call `<init>`(v2, v3) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3513f2.  throw v2;
  #L3513f4.  v2:= v8.`okhttp3.internal.http.Http1xStream$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L3513f8.  v2:= v2 - v0 @kind long;
  #L3513fa.  v8.`okhttp3.internal.http.Http1xStream$ChunkedSource.bytesRemainingInChunk` @type ^`long` := v2 @kind wide;
  #L3513fe.  goto L351388;
}
