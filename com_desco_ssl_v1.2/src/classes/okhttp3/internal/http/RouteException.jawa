record `okhttp3.internal.http.RouteException` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.Exception` @kind class {
  `java.io.IOException` `okhttp3.internal.http.RouteException.lastException` @AccessFlag PRIVATE;
}
global `java.lang.reflect.Method` `@@okhttp3.internal.http.RouteException.addSuppressedExceptionMethod` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/http/RouteException;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L24a31c.  v2:= constclass @type ^`java.lang.Throwable` @kind object;
  #L24a320.  v3:= "addSuppressed" @kind object;
  #L24a324.  v4:= 1I;
  #L24a326.  v4:= new `java.lang.Class`[v4];
  #L24a32a.  v5:= 0I;
  #L24a32c.  v6:= constclass @type ^`java.lang.Throwable` @kind object;
  #L24a330.  v4[v5]:= v6 @kind object;
  #L24a334.  call temp:= `getDeclaredMethod`(v2, v3, v4) @signature `Ljava/lang/Class;.getDeclaredMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L24a33a.  v1:= temp @kind object;
  #L24a33c.  `@@okhttp3.internal.http.RouteException.addSuppressedExceptionMethod` @type ^`java.lang.reflect.Method` := v1 @kind object;
  #L24a340.  return @kind void;
  #L24a342.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L24a344.  v1:= 0I;
  #L24a346.  goto L24a33c;
  catch `java.lang.Exception` @[L24a31c..L24a33a] goto L24a342;
}
procedure `void` `<init>`(`okhttp3.internal.http.RouteException` v0 @kind this, `java.io.IOException` v1 @kind object @name `cause`) @signature `Lokhttp3/internal/http/RouteException;.<init>:(Ljava/io/IOException;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L24a368.  call `<init>`(v0, v1) @signature `Ljava/lang/Exception;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L24a36e.  v0.`okhttp3.internal.http.RouteException.lastException` @type ^`java.io.IOException` := v1 @kind object;
  #L24a372.  return @kind void;
}
procedure `void` `addSuppressedIfPossible`(`okhttp3.internal.http.RouteException` v3 @kind this, `java.io.IOException` v4 @kind object @name `e`, `java.io.IOException` v5 @kind object @name `suppressed`) @signature `Lokhttp3/internal/http/RouteException;.addSuppressedIfPossible:(Ljava/io/IOException;Ljava/io/IOException;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L24a384.  v0:= `@@okhttp3.internal.http.RouteException.addSuppressedExceptionMethod` @type ^`java.lang.reflect.Method` @kind object;
  #L24a388.  if v0 == 0 then goto L24a3a2;
  #L24a38c.  v0:= `@@okhttp3.internal.http.RouteException.addSuppressedExceptionMethod` @type ^`java.lang.reflect.Method` @kind object;
  #L24a390.  v1:= 1I;
  #L24a392.  v1:= new `java.lang.Object`[v1];
  #L24a396.  v2:= 0I;
  #L24a398.  v1[v2]:= v5 @kind object;
  #L24a39c.  call temp:= `invoke`(v0, v4, v1) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L24a3a2.  return @kind void;
  #L24a3a4.  v0:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L24a3a6.  goto L24a3a2;
  #L24a3a8.  v0:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L24a3aa.  goto L24a3a2;
  catch `java.lang.reflect.InvocationTargetException` @[L24a38c..L24a3a2] goto L24a3a8;
  catch `java.lang.IllegalAccessException` @[L24a38c..L24a3a2] goto L24a3a4;
}
procedure `void` `addConnectException`(`okhttp3.internal.http.RouteException` v1 @kind this, `java.io.IOException` v2 @kind object @name `e`) @signature `Lokhttp3/internal/http/RouteException;.addConnectException:(Ljava/io/IOException;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24a3cc.  v0:= v1.`okhttp3.internal.http.RouteException.lastException` @type ^`java.io.IOException` @kind object;
  #L24a3d0.  call `addSuppressedIfPossible`(v1, v2, v0) @signature `Lokhttp3/internal/http/RouteException;.addSuppressedIfPossible:(Ljava/io/IOException;Ljava/io/IOException;)V` @kind direct;
  #L24a3d6.  v1.`okhttp3.internal.http.RouteException.lastException` @type ^`java.io.IOException` := v2 @kind object;
  #L24a3da.  return @kind void;
}
procedure `java.io.IOException` `getLastConnectException`(`okhttp3.internal.http.RouteException` v1 @kind this) @signature `Lokhttp3/internal/http/RouteException;.getLastConnectException:()Ljava/io/IOException;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24a3ec.  v0:= v1.`okhttp3.internal.http.RouteException.lastException` @type ^`java.io.IOException` @kind object;
  #L24a3f0.  return v0 @kind object;
}
