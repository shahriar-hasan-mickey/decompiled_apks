record `okhttp3.internal.http.HttpStream` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE {
}
global `int` `@@okhttp3.internal.http.HttpStream.DISCARD_STREAM_TIMEOUT_MILLIS` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `cancel`() @signature `Lokhttp3/internal/http/HttpStream;.cancel:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `okio.Sink` `createRequestBody`(`okhttp3.Request` v0 @kind object, `long` v1 ) @signature `Lokhttp3/internal/http/HttpStream;.createRequestBody:(Lokhttp3/Request;J)Lokio/Sink;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `finishRequest`() @signature `Lokhttp3/internal/http/HttpStream;.finishRequest:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `okhttp3.ResponseBody` `openResponseBody`(`okhttp3.Response` v0 @kind object) @signature `Lokhttp3/internal/http/HttpStream;.openResponseBody:(Lokhttp3/Response;)Lokhttp3/ResponseBody;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `okhttp3.Response$Builder` `readResponseHeaders`() @signature `Lokhttp3/internal/http/HttpStream;.readResponseHeaders:()Lokhttp3/Response$Builder;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `setHttpEngine`(`okhttp3.internal.http.HttpEngine` v0 @kind object) @signature `Lokhttp3/internal/http/HttpStream;.setHttpEngine:(Lokhttp3/internal/http/HttpEngine;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `writeRequestBody`(`okhttp3.internal.http.RetryableSink` v0 @kind object) @signature `Lokhttp3/internal/http/HttpStream;.writeRequestBody:(Lokhttp3/internal/http/RetryableSink;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `writeRequestHeaders`(`okhttp3.Request` v0 @kind object) @signature `Lokhttp3/internal/http/HttpStream;.writeRequestHeaders:(Lokhttp3/Request;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
