record `okhttp3.internal.http.HttpEngine` @kind class @AccessFlag PUBLIC_FINAL {
  `boolean` `okhttp3.internal.http.HttpEngine.bufferRequestBody` @AccessFlag PUBLIC_FINAL;
  `okio.BufferedSink` `okhttp3.internal.http.HttpEngine.bufferedRequestBody` @AccessFlag PRIVATE;
  `okhttp3.Response` `okhttp3.internal.http.HttpEngine.cacheResponse` @AccessFlag PRIVATE;
  `okhttp3.internal.http.CacheStrategy` `okhttp3.internal.http.HttpEngine.cacheStrategy` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.http.HttpEngine.callerWritesRequestBody` @AccessFlag PRIVATE_FINAL;
  `okhttp3.OkHttpClient` `okhttp3.internal.http.HttpEngine.client` @AccessFlag FINAL;
  `boolean` `okhttp3.internal.http.HttpEngine.forWebSocket` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.http.HttpStream` `okhttp3.internal.http.HttpEngine.httpStream` @AccessFlag PRIVATE;
  `okhttp3.Request` `okhttp3.internal.http.HttpEngine.networkRequest` @AccessFlag PRIVATE;
  `okhttp3.Response` `okhttp3.internal.http.HttpEngine.priorResponse` @AccessFlag PRIVATE_FINAL;
  `okio.Sink` `okhttp3.internal.http.HttpEngine.requestBodyOut` @AccessFlag PRIVATE;
  `long` `okhttp3.internal.http.HttpEngine.sentRequestMillis` @AccessFlag ;
  `okhttp3.internal.http.CacheRequest` `okhttp3.internal.http.HttpEngine.storeRequest` @AccessFlag PRIVATE;
  `okhttp3.internal.http.StreamAllocation` `okhttp3.internal.http.HttpEngine.streamAllocation` @AccessFlag PUBLIC_FINAL;
  `boolean` `okhttp3.internal.http.HttpEngine.transparentGzip` @AccessFlag PRIVATE;
  `okhttp3.Request` `okhttp3.internal.http.HttpEngine.userRequest` @AccessFlag PRIVATE_FINAL;
  `okhttp3.Response` `okhttp3.internal.http.HttpEngine.userResponse` @AccessFlag PRIVATE;
}
global `okhttp3.ResponseBody` `@@okhttp3.internal.http.HttpEngine.EMPTY_BODY` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@okhttp3.internal.http.HttpEngine.MAX_FOLLOW_UPS` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/http/HttpEngine;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2486ac.  v0:= new `okhttp3.internal.http.HttpEngine$1`;
  #L2486b0.  call `<init>`(v0) @signature `Lokhttp3/internal/http/HttpEngine$1;.<init>:()V` @kind direct;
  #L2486b6.  `@@okhttp3.internal.http.HttpEngine.EMPTY_BODY` @type ^`okhttp3.ResponseBody` := v0 @kind object;
  #L2486ba.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http.HttpEngine` v2 @kind this, `okhttp3.OkHttpClient` v3 @kind object @name `client`, `okhttp3.Request` v4 @kind object @name `request`, `boolean` v5 @name `bufferRequestBody`, `boolean` v6 @name `callerWritesRequestBody`, `boolean` v7 @name `forWebSocket`, `okhttp3.internal.http.StreamAllocation` v8 @kind object @name `streamAllocation`, `okhttp3.internal.http.RetryableSink` v9 @kind object @name `requestBodyOut`, `okhttp3.Response` v10 @kind object @name `priorResponse`) @signature `Lokhttp3/internal/http/HttpEngine;.<init>:(Lokhttp3/OkHttpClient;Lokhttp3/Request;ZZZLokhttp3/internal/http/StreamAllocation;Lokhttp3/internal/http/RetryableSink;Lokhttp3/Response;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2486cc.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2486d2.  v0:= -1L;
  #L2486d6.  v2.`okhttp3.internal.http.HttpEngine.sentRequestMillis` @type ^`long` := v0 @kind wide;
  #L2486da.  v2.`okhttp3.internal.http.HttpEngine.client` @type ^`okhttp3.OkHttpClient` := v3 @kind object;
  #L2486de.  v2.`okhttp3.internal.http.HttpEngine.userRequest` @type ^`okhttp3.Request` := v4 @kind object;
  #L2486e2.  v2.`okhttp3.internal.http.HttpEngine.bufferRequestBody` @type ^`boolean` := v5 @kind boolean;
  #L2486e6.  v2.`okhttp3.internal.http.HttpEngine.callerWritesRequestBody` @type ^`boolean` := v6 @kind boolean;
  #L2486ea.  v2.`okhttp3.internal.http.HttpEngine.forWebSocket` @type ^`boolean` := v7 @kind boolean;
  #L2486ee.  if v8 == 0 then goto L248700;
  #L2486f2.  v2.`okhttp3.internal.http.HttpEngine.streamAllocation` @type ^`okhttp3.internal.http.StreamAllocation` := v8 @kind object;
  #L2486f6.  v2.`okhttp3.internal.http.HttpEngine.requestBodyOut` @type ^`okio.Sink` := v9 @kind object;
  #L2486fa.  v2.`okhttp3.internal.http.HttpEngine.priorResponse` @type ^`okhttp3.Response` := v10 @kind object;
  #L2486fe.  return @kind void;
  #L248700.  v8:= new `okhttp3.internal.http.StreamAllocation`;
  #L248704.  call temp:= `connectionPool`(v3) @signature `Lokhttp3/OkHttpClient;.connectionPool:()Lokhttp3/ConnectionPool;` @kind virtual;
  #L24870a.  v0:= temp @kind object;
  #L24870c.  call temp:= `createAddress`(v3, v4) @signature `Lokhttp3/internal/http/HttpEngine;.createAddress:(Lokhttp3/OkHttpClient;Lokhttp3/Request;)Lokhttp3/Address;` @kind static;
  #L248712.  v1:= temp @kind object;
  #L248714.  call `<init>`(v8, v0, v1) @signature `Lokhttp3/internal/http/StreamAllocation;.<init>:(Lokhttp3/ConnectionPool;Lokhttp3/Address;)V` @kind direct;
  #L24871a.  goto L2486f2;
}
procedure `okhttp3.internal.http.HttpStream` `access$000`(`okhttp3.internal.http.HttpEngine` v1 @kind object @name `x0`) @signature `Lokhttp3/internal/http/HttpEngine;.access$000:(Lokhttp3/internal/http/HttpEngine;)Lokhttp3/internal/http/HttpStream;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L24872c.  v0:= v1.`okhttp3.internal.http.HttpEngine.httpStream` @type ^`okhttp3.internal.http.HttpStream` @kind object;
  #L248730.  return v0 @kind object;
}
procedure `okhttp3.Request` `access$102`(`okhttp3.internal.http.HttpEngine` v0 @kind object @name `x0`, `okhttp3.Request` v1 @kind object @name `x1`) @signature `Lokhttp3/internal/http/HttpEngine;.access$102:(Lokhttp3/internal/http/HttpEngine;Lokhttp3/Request;)Lokhttp3/Request;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L248744.  v0.`okhttp3.internal.http.HttpEngine.networkRequest` @type ^`okhttp3.Request` := v1 @kind object;
  #L248748.  return v1 @kind object;
}
procedure `okhttp3.Response` `access$200`(`okhttp3.internal.http.HttpEngine` v1 @kind object @name `x0`) @signature `Lokhttp3/internal/http/HttpEngine;.access$200:(Lokhttp3/internal/http/HttpEngine;)Lokhttp3/Response;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L24875c.  call temp:= `readNetworkResponse`(v1) @signature `Lokhttp3/internal/http/HttpEngine;.readNetworkResponse:()Lokhttp3/Response;` @kind direct;
  #L248762.  v0:= temp @kind object;
  #L248764.  return v0 @kind object;
}
procedure `okhttp3.Response` `cacheWritingResponse`(`okhttp3.internal.http.HttpEngine` v8 @kind this, `okhttp3.internal.http.CacheRequest` v9 @kind object @name `cacheRequest`, `okhttp3.Response` v10 @kind object @name `response`) @signature `Lokhttp3/internal/http/HttpEngine;.cacheWritingResponse:(Lokhttp3/internal/http/CacheRequest;Lokhttp3/Response;)Lokhttp3/Response;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L248778.  if v9 != 0 then goto L24877e;
  #L24877c.  return v10 @kind object;
  #L24877e.  call temp:= `body`(v9) @signature `Lokhttp3/internal/http/CacheRequest;.body:()Lokio/Sink;` @kind interface;
  #L248784.  v1:= temp @kind object;
  #L248786.  if v1 == 0 then goto L24877c;
  #L24878a.  call temp:= `body`(v10) @signature `Lokhttp3/Response;.body:()Lokhttp3/ResponseBody;` @kind virtual;
  #L248790.  v4:= temp @kind object;
  #L248792.  call temp:= `source`(v4) @signature `Lokhttp3/ResponseBody;.source:()Lokio/BufferedSource;` @kind virtual;
  #L248798.  v3:= temp @kind object;
  #L24879a.  call temp:= `buffer`(v1) @signature `Lokio/Okio;.buffer:(Lokio/Sink;)Lokio/BufferedSink;` @kind static;
  #L2487a0.  v0:= temp @kind object;
  #L2487a2.  v2:= new `okhttp3.internal.http.HttpEngine$2`;
  #L2487a6.  call `<init>`(v2, v8, v3, v9, v0) @signature `Lokhttp3/internal/http/HttpEngine$2;.<init>:(Lokhttp3/internal/http/HttpEngine;Lokio/BufferedSource;Lokhttp3/internal/http/CacheRequest;Lokio/BufferedSink;)V` @kind direct;
  #L2487ac.  call temp:= `newBuilder`(v10) @signature `Lokhttp3/Response;.newBuilder:()Lokhttp3/Response$Builder;` @kind virtual;
  #L2487b2.  v4:= temp @kind object;
  #L2487b4.  v5:= new `okhttp3.internal.http.RealResponseBody`;
  #L2487b8.  call temp:= `headers`(v10) @signature `Lokhttp3/Response;.headers:()Lokhttp3/Headers;` @kind virtual;
  #L2487be.  v6:= temp @kind object;
  #L2487c0.  call temp:= `buffer`(v2) @signature `Lokio/Okio;.buffer:(Lokio/Source;)Lokio/BufferedSource;` @kind static;
  #L2487c6.  v7:= temp @kind object;
  #L2487c8.  call `<init>`(v5, v6, v7) @signature `Lokhttp3/internal/http/RealResponseBody;.<init>:(Lokhttp3/Headers;Lokio/BufferedSource;)V` @kind direct;
  #L2487ce.  call temp:= `body`(v4, v5) @signature `Lokhttp3/Response$Builder;.body:(Lokhttp3/ResponseBody;)Lokhttp3/Response$Builder;` @kind virtual;
  #L2487d4.  v4:= temp @kind object;
  #L2487d6.  call temp:= `build`(v4) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L2487dc.  v10:= temp @kind object;
  #L2487de.  goto L24877c;
}
procedure `okhttp3.Headers` `combine`(`okhttp3.Headers` v6 @kind object @name `cachedHeaders`, `okhttp3.Headers` v7 @kind object @name `networkHeaders`) @signature `Lokhttp3/internal/http/HttpEngine;.combine:(Lokhttp3/Headers;Lokhttp3/Headers;)Lokhttp3/Headers;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2487f0.  v2:= new `okhttp3.Headers$Builder`;
  #L2487f4.  call `<init>`(v2) @signature `Lokhttp3/Headers$Builder;.<init>:()V` @kind direct;
  #L2487fa.  v1:= 0I;
  #L2487fc.  call temp:= `size`(v6) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L248802.  v3:= temp;
  #L248804.  if v1 >= v3 then goto L24885e;
  #L248808.  call temp:= `name`(v6, v1) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L24880e.  v0:= temp @kind object;
  #L248810.  call temp:= `value`(v6, v1) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @kind virtual;
  #L248816.  v4:= temp @kind object;
  #L248818.  v5:= "Warning" @kind object;
  #L24881c.  call temp:= `equalsIgnoreCase`(v5, v0) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L248822.  v5:= temp;
  #L248824.  if v5 == 0 then goto L24883e;
  #L248828.  v5:= "1" @kind object;
  #L24882c.  call temp:= `startsWith`(v4, v5) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L248832.  v5:= temp;
  #L248834.  if v5 == 0 then goto L24883e;
  #L248838.  v1:= v1 + 1;
  #L24883c.  goto L248804;
  #L24883e.  call temp:= `isEndToEnd`(v0) @signature `Lokhttp3/internal/http/OkHeaders;.isEndToEnd:(Ljava/lang/String;)Z` @kind static;
  #L248844.  v5:= temp;
  #L248846.  if v5 == 0 then goto L248856;
  #L24884a.  call temp:= `get`(v7, v0) @signature `Lokhttp3/Headers;.get:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L248850.  v5:= temp @kind object;
  #L248852.  if v5 != 0 then goto L248838;
  #L248856.  call temp:= `add`(v2, v0, v4) @signature `Lokhttp3/Headers$Builder;.add:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L24885c.  goto L248838;
  #L24885e.  v1:= 0I;
  #L248860.  call temp:= `size`(v7) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L248866.  v3:= temp;
  #L248868.  if v1 >= v3 then goto L2488a6;
  #L24886c.  call temp:= `name`(v7, v1) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L248872.  v0:= temp @kind object;
  #L248874.  v5:= "Content-Length" @kind object;
  #L248878.  call temp:= `equalsIgnoreCase`(v5, v0) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L24887e.  v5:= temp;
  #L248880.  if v5 == 0 then goto L24888a;
  #L248884.  v1:= v1 + 1;
  #L248888.  goto L248868;
  #L24888a.  call temp:= `isEndToEnd`(v0) @signature `Lokhttp3/internal/http/OkHeaders;.isEndToEnd:(Ljava/lang/String;)Z` @kind static;
  #L248890.  v5:= temp;
  #L248892.  if v5 == 0 then goto L248884;
  #L248896.  call temp:= `value`(v7, v1) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @kind virtual;
  #L24889c.  v5:= temp @kind object;
  #L24889e.  call temp:= `add`(v2, v0, v5) @signature `Lokhttp3/Headers$Builder;.add:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L2488a4.  goto L248884;
  #L2488a6.  call temp:= `build`(v2) @signature `Lokhttp3/Headers$Builder;.build:()Lokhttp3/Headers;` @kind virtual;
  #L2488ac.  v5:= temp @kind object;
  #L2488ae.  return v5 @kind object;
}
procedure `okhttp3.internal.http.HttpStream` `connect`(`okhttp3.internal.http.HttpEngine` v6 @kind this) @signature `Lokhttp3/internal/http/HttpEngine;.connect:()Lokhttp3/internal/http/HttpStream;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2488c0.  v0:= v6.`okhttp3.internal.http.HttpEngine.networkRequest` @type ^`okhttp3.Request` @kind object;
  #L2488c4.  call temp:= `method`(v0) @signature `Lokhttp3/Request;.method:()Ljava/lang/String;` @kind virtual;
  #L2488ca.  v0:= temp @kind object;
  #L2488cc.  v1:= "GET" @kind object;
  #L2488d0.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2488d6.  v0:= temp;
  #L2488d8.  if v0 != 0 then goto L24891c;
  #L2488dc.  v5:= 1I;
  #L2488de.  v0:= v6.`okhttp3.internal.http.HttpEngine.streamAllocation` @type ^`okhttp3.internal.http.StreamAllocation` @kind object;
  #L2488e2.  v1:= v6.`okhttp3.internal.http.HttpEngine.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2488e6.  call temp:= `connectTimeoutMillis`(v1) @signature `Lokhttp3/OkHttpClient;.connectTimeoutMillis:()I` @kind virtual;
  #L2488ec.  v1:= temp;
  #L2488ee.  v2:= v6.`okhttp3.internal.http.HttpEngine.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2488f2.  call temp:= `readTimeoutMillis`(v2) @signature `Lokhttp3/OkHttpClient;.readTimeoutMillis:()I` @kind virtual;
  #L2488f8.  v2:= temp;
  #L2488fa.  v3:= v6.`okhttp3.internal.http.HttpEngine.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2488fe.  call temp:= `writeTimeoutMillis`(v3) @signature `Lokhttp3/OkHttpClient;.writeTimeoutMillis:()I` @kind virtual;
  #L248904.  v3:= temp;
  #L248906.  v4:= v6.`okhttp3.internal.http.HttpEngine.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L24890a.  call temp:= `retryOnConnectionFailure`(v4) @signature `Lokhttp3/OkHttpClient;.retryOnConnectionFailure:()Z` @kind virtual;
  #L248910.  v4:= temp;
  #L248912.  call temp:= `newStream`(v0, v1, v2, v3, v4, v5) @signature `Lokhttp3/internal/http/StreamAllocation;.newStream:(IIIZZ)Lokhttp3/internal/http/HttpStream;` @kind virtual;
  #L248918.  v0:= temp @kind object;
  #L24891a.  return v0 @kind object;
  #L24891c.  v5:= 0I;
  #L24891e.  goto L2488de;
}
procedure `java.lang.String` `cookieHeader`(`okhttp3.internal.http.HttpEngine` v6 @kind this, `java.util.List` v7 @kind object) @signature `Lokhttp3/internal/http/HttpEngine;.cookieHeader:(Ljava/util/List;)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L248930.  v1:= new `java.lang.StringBuilder`;
  #L248934.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24893a.  v2:= 0I;
  #L24893c.  call temp:= `size`(v7) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L248942.  v3:= temp;
  #L248944.  if v2 >= v3 then goto L248992;
  #L248948.  if v2 <= 0 then goto L248956;
  #L24894c.  v4:= "; " @kind object;
  #L248950.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L248956.  call temp:= `get`(v7, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L24895c.  v0:= temp @kind object;
  #L24895e.  v0:= (`okhttp3.Cookie`) v0 @kind object;
  #L248962.  call temp:= `name`(v0) @signature `Lokhttp3/Cookie;.name:()Ljava/lang/String;` @kind virtual;
  #L248968.  v4:= temp @kind object;
  #L24896a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L248970.  v4:= temp @kind object;
  #L248972.  v5:= 61I;
  #L248976.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L24897c.  v4:= temp @kind object;
  #L24897e.  call temp:= `value`(v0) @signature `Lokhttp3/Cookie;.value:()Ljava/lang/String;` @kind virtual;
  #L248984.  v5:= temp @kind object;
  #L248986.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24898c.  v2:= v2 + 1;
  #L248990.  goto L248944;
  #L248992.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L248998.  v4:= temp @kind object;
  #L24899a.  return v4 @kind object;
}
procedure `okhttp3.Address` `createAddress`(`okhttp3.OkHttpClient` v13 @kind object @name `client`, `okhttp3.Request` v14 @kind object @name `request`) @signature `Lokhttp3/internal/http/HttpEngine;.createAddress:(Lokhttp3/OkHttpClient;Lokhttp3/Request;)Lokhttp3/Address;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L2489ac.  v5:= 0I;
  #L2489ae.  v6:= 0I;
  #L2489b0.  v7:= 0I;
  #L2489b2.  call temp:= `isHttps`(v14) @signature `Lokhttp3/Request;.isHttps:()Z` @kind virtual;
  #L2489b8.  v0:= temp;
  #L2489ba.  if v0 == 0 then goto L2489d6;
  #L2489be.  call temp:= `sslSocketFactory`(v13) @signature `Lokhttp3/OkHttpClient;.sslSocketFactory:()Ljavax/net/ssl/SSLSocketFactory;` @kind virtual;
  #L2489c4.  v5:= temp @kind object;
  #L2489c6.  call temp:= `hostnameVerifier`(v13) @signature `Lokhttp3/OkHttpClient;.hostnameVerifier:()Ljavax/net/ssl/HostnameVerifier;` @kind virtual;
  #L2489cc.  v6:= temp @kind object;
  #L2489ce.  call temp:= `certificatePinner`(v13) @signature `Lokhttp3/OkHttpClient;.certificatePinner:()Lokhttp3/CertificatePinner;` @kind virtual;
  #L2489d4.  v7:= temp @kind object;
  #L2489d6.  v0:= new `okhttp3.Address`;
  #L2489da.  call temp:= `url`(v14) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L2489e0.  v1:= temp @kind object;
  #L2489e2.  call temp:= `host`(v1) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L2489e8.  v1:= temp @kind object;
  #L2489ea.  call temp:= `url`(v14) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L2489f0.  v2:= temp @kind object;
  #L2489f2.  call temp:= `port`(v2) @signature `Lokhttp3/HttpUrl;.port:()I` @kind virtual;
  #L2489f8.  v2:= temp;
  #L2489fa.  call temp:= `dns`(v13) @signature `Lokhttp3/OkHttpClient;.dns:()Lokhttp3/Dns;` @kind virtual;
  #L248a00.  v3:= temp @kind object;
  #L248a02.  call temp:= `socketFactory`(v13) @signature `Lokhttp3/OkHttpClient;.socketFactory:()Ljavax/net/SocketFactory;` @kind virtual;
  #L248a08.  v4:= temp @kind object;
  #L248a0a.  call temp:= `proxyAuthenticator`(v13) @signature `Lokhttp3/OkHttpClient;.proxyAuthenticator:()Lokhttp3/Authenticator;` @kind virtual;
  #L248a10.  v8:= temp @kind object;
  #L248a12.  call temp:= `proxy`(v13) @signature `Lokhttp3/OkHttpClient;.proxy:()Ljava/net/Proxy;` @kind virtual;
  #L248a18.  v9:= temp @kind object;
  #L248a1a.  call temp:= `protocols`(v13) @signature `Lokhttp3/OkHttpClient;.protocols:()Ljava/util/List;` @kind virtual;
  #L248a20.  v10:= temp @kind object;
  #L248a22.  call temp:= `connectionSpecs`(v13) @signature `Lokhttp3/OkHttpClient;.connectionSpecs:()Ljava/util/List;` @kind virtual;
  #L248a28.  v11:= temp @kind object;
  #L248a2a.  call temp:= `proxySelector`(v13) @signature `Lokhttp3/OkHttpClient;.proxySelector:()Ljava/net/ProxySelector;` @kind virtual;
  #L248a30.  v12:= temp @kind object;
  #L248a32.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12) @signature `Lokhttp3/Address;.<init>:(Ljava/lang/String;ILokhttp3/Dns;Ljavax/net/SocketFactory;Ljavax/net/ssl/SSLSocketFactory;Ljavax/net/ssl/HostnameVerifier;Lokhttp3/CertificatePinner;Lokhttp3/Authenticator;Ljava/net/Proxy;Ljava/util/List;Ljava/util/List;Ljava/net/ProxySelector;)V` @kind direct;
  #L248a38.  return v0 @kind object;
}
procedure `boolean` `hasBody`(`okhttp3.Response` v8 @kind object @name `response`) @signature `Lokhttp3/internal/http/HttpEngine;.hasBody:(Lokhttp3/Response;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L248a4c.  v2:= 1I;
  #L248a4e.  v1:= 0I;
  #L248a50.  call temp:= `request`(v8) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L248a56.  v3:= temp @kind object;
  #L248a58.  call temp:= `method`(v3) @signature `Lokhttp3/Request;.method:()Ljava/lang/String;` @kind virtual;
  #L248a5e.  v3:= temp @kind object;
  #L248a60.  v4:= "HEAD" @kind object;
  #L248a64.  call temp:= `equals`(v3, v4) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L248a6a.  v3:= temp;
  #L248a6c.  if v3 == 0 then goto L248a72;
  #L248a70.  return v1;
  #L248a72.  call temp:= `code`(v8) @signature `Lokhttp3/Response;.code:()I` @kind virtual;
  #L248a78.  v0:= temp;
  #L248a7a.  v3:= 100I;
  #L248a7e.  if v0 < v3 then goto L248a8a;
  #L248a82.  v3:= 200I;
  #L248a86.  if v0 < v3 then goto L248a9e;
  #L248a8a.  v3:= 204I;
  #L248a8e.  if v0 == v3 then goto L248a9e;
  #L248a92.  v3:= 304I;
  #L248a96.  if v0 == v3 then goto L248a9e;
  #L248a9a.  v1:= v2;
  #L248a9c.  goto L248a70;
  #L248a9e.  call temp:= `contentLength`(v8) @signature `Lokhttp3/internal/http/OkHeaders;.contentLength:(Lokhttp3/Response;)J` @kind static;
  #L248aa4.  v4:= temp @kind wide;
  #L248aa6.  v6:= -1L;
  #L248aaa.  v3:= lcmp(v4, v6);
  #L248aae.  if v3 != 0 then goto L248ace;
  #L248ab2.  v3:= "chunked" @kind object;
  #L248ab6.  v4:= "Transfer-Encoding" @kind object;
  #L248aba.  call temp:= `header`(v8, v4) @signature `Lokhttp3/Response;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L248ac0.  v4:= temp @kind object;
  #L248ac2.  call temp:= `equalsIgnoreCase`(v3, v4) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L248ac8.  v3:= temp;
  #L248aca.  if v3 == 0 then goto L248a70;
  #L248ace.  v1:= v2;
  #L248ad0.  goto L248a70;
}
procedure `boolean` `isRecoverable`(`okhttp3.internal.http.HttpEngine` v3 @kind this, `java.io.IOException` v4 @kind object @name `e`, `boolean` v5 @name `routeException`) @signature `Lokhttp3/internal/http/HttpEngine;.isRecoverable:(Ljava/io/IOException;Z)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L248ae4.  v0:= 1I;
  #L248ae6.  v1:= 0I;
  #L248ae8.  v2:= instanceof @variable v4 @type ^`java.net.ProtocolException` @kind boolean;
  #L248aec.  if v2 == 0 then goto L248af2;
  #L248af0.  return v1;
  #L248af2.  v2:= instanceof @variable v4 @type ^`java.io.InterruptedIOException` @kind boolean;
  #L248af6.  if v2 == 0 then goto L248b0e;
  #L248afa.  v2:= instanceof @variable v4 @type ^`java.net.SocketTimeoutException` @kind boolean;
  #L248afe.  if v2 == 0 then goto L248b0a;
  #L248b02.  if v5 == 0 then goto L248b0a;
  #L248b06.  v1:= v0;
  #L248b08.  goto L248af0;
  #L248b0a.  v0:= v1;
  #L248b0c.  goto L248b06;
  #L248b0e.  v2:= instanceof @variable v4 @type ^`javax.net.ssl.SSLHandshakeException` @kind boolean;
  #L248b12.  if v2 == 0 then goto L248b26;
  #L248b16.  call temp:= `getCause`(v4) @signature `Ljava/io/IOException;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L248b1c.  v2:= temp @kind object;
  #L248b1e.  v2:= instanceof @variable v2 @type ^`java.security.cert.CertificateException` @kind boolean;
  #L248b22.  if v2 != 0 then goto L248af0;
  #L248b26.  v2:= instanceof @variable v4 @type ^`javax.net.ssl.SSLPeerUnverifiedException` @kind boolean;
  #L248b2a.  if v2 != 0 then goto L248af0;
  #L248b2e.  v1:= v0;
  #L248b30.  goto L248af0;
}
procedure `void` `maybeCache`(`okhttp3.internal.http.HttpEngine` v3 @kind this) @signature `Lokhttp3/internal/http/HttpEngine;.maybeCache:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L248b44.  v1:= `@@okhttp3.internal.Internal.instance` @type ^`okhttp3.internal.Internal` @kind object;
  #L248b48.  v2:= v3.`okhttp3.internal.http.HttpEngine.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L248b4c.  call temp:= `internalCache`(v1, v2) @signature `Lokhttp3/internal/Internal;.internalCache:(Lokhttp3/OkHttpClient;)Lokhttp3/internal/InternalCache;` @kind virtual;
  #L248b52.  v0:= temp @kind object;
  #L248b54.  if v0 != 0 then goto L248b5a;
  #L248b58.  return @kind void;
  #L248b5a.  v1:= v3.`okhttp3.internal.http.HttpEngine.userResponse` @type ^`okhttp3.Response` @kind object;
  #L248b5e.  v2:= v3.`okhttp3.internal.http.HttpEngine.networkRequest` @type ^`okhttp3.Request` @kind object;
  #L248b62.  call temp:= `isCacheable`(v1, v2) @signature `Lokhttp3/internal/http/CacheStrategy;.isCacheable:(Lokhttp3/Response;Lokhttp3/Request;)Z` @kind static;
  #L248b68.  v1:= temp;
  #L248b6a.  if v1 != 0 then goto L248b96;
  #L248b6e.  v1:= v3.`okhttp3.internal.http.HttpEngine.networkRequest` @type ^`okhttp3.Request` @kind object;
  #L248b72.  call temp:= `method`(v1) @signature `Lokhttp3/Request;.method:()Ljava/lang/String;` @kind virtual;
  #L248b78.  v1:= temp @kind object;
  #L248b7a.  call temp:= `invalidatesCache`(v1) @signature `Lokhttp3/internal/http/HttpMethod;.invalidatesCache:(Ljava/lang/String;)Z` @kind static;
  #L248b80.  v1:= temp;
  #L248b82.  if v1 == 0 then goto L248b58;
  #L248b86.  v1:= v3.`okhttp3.internal.http.HttpEngine.networkRequest` @type ^`okhttp3.Request` @kind object;
  #L248b8a.  call `remove`(v0, v1) @signature `Lokhttp3/internal/InternalCache;.remove:(Lokhttp3/Request;)V` @kind interface;
  #L248b90.  goto L248b58;
  #L248b92.  v1:= Exception @type ^`java.io.IOException` @kind object;
  #L248b94.  goto L248b58;
  #L248b96.  v1:= v3.`okhttp3.internal.http.HttpEngine.userResponse` @type ^`okhttp3.Response` @kind object;
  #L248b9a.  call temp:= `put`(v0, v1) @signature `Lokhttp3/internal/InternalCache;.put:(Lokhttp3/Response;)Lokhttp3/internal/http/CacheRequest;` @kind interface;
  #L248ba0.  v1:= temp @kind object;
  #L248ba2.  v3.`okhttp3.internal.http.HttpEngine.storeRequest` @type ^`okhttp3.internal.http.CacheRequest` := v1 @kind object;
  #L248ba6.  goto L248b58;
  catch `java.io.IOException` @[L248b86..L248b90] goto L248b92;
}
procedure `okhttp3.Request` `networkRequest`(`okhttp3.internal.http.HttpEngine` v5 @kind this, `okhttp3.Request` v6 @kind object @name `request`) @signature `Lokhttp3/internal/http/HttpEngine;.networkRequest:(Lokhttp3/Request;)Lokhttp3/Request;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L248bc8.  call temp:= `newBuilder`(v6) @signature `Lokhttp3/Request;.newBuilder:()Lokhttp3/Request$Builder;` @kind virtual;
  #L248bce.  v1:= temp @kind object;
  #L248bd0.  v2:= "Host" @kind object;
  #L248bd4.  call temp:= `header`(v6, v2) @signature `Lokhttp3/Request;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L248bda.  v2:= temp @kind object;
  #L248bdc.  if v2 != 0 then goto L248bfc;
  #L248be0.  v2:= "Host" @kind object;
  #L248be4.  call temp:= `url`(v6) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L248bea.  v3:= temp @kind object;
  #L248bec.  v4:= 0I;
  #L248bee.  call temp:= `hostHeader`(v3, v4) @signature `Lokhttp3/internal/Util;.hostHeader:(Lokhttp3/HttpUrl;Z)Ljava/lang/String;` @kind static;
  #L248bf4.  v3:= temp @kind object;
  #L248bf6.  call temp:= `header`(v1, v2, v3) @signature `Lokhttp3/Request$Builder;.header:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L248bfc.  v2:= "Connection" @kind object;
  #L248c00.  call temp:= `header`(v6, v2) @signature `Lokhttp3/Request;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L248c06.  v2:= temp @kind object;
  #L248c08.  if v2 != 0 then goto L248c1a;
  #L248c0c.  v2:= "Connection" @kind object;
  #L248c10.  v3:= "Keep-Alive" @kind object;
  #L248c14.  call temp:= `header`(v1, v2, v3) @signature `Lokhttp3/Request$Builder;.header:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L248c1a.  v2:= "Accept-Encoding" @kind object;
  #L248c1e.  call temp:= `header`(v6, v2) @signature `Lokhttp3/Request;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L248c24.  v2:= temp @kind object;
  #L248c26.  if v2 != 0 then goto L248c3e;
  #L248c2a.  v2:= 1I;
  #L248c2c.  v5.`okhttp3.internal.http.HttpEngine.transparentGzip` @type ^`boolean` := v2 @kind boolean;
  #L248c30.  v2:= "Accept-Encoding" @kind object;
  #L248c34.  v3:= "gzip" @kind object;
  #L248c38.  call temp:= `header`(v1, v2, v3) @signature `Lokhttp3/Request$Builder;.header:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L248c3e.  v2:= v5.`okhttp3.internal.http.HttpEngine.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L248c42.  call temp:= `cookieJar`(v2) @signature `Lokhttp3/OkHttpClient;.cookieJar:()Lokhttp3/CookieJar;` @kind virtual;
  #L248c48.  v2:= temp @kind object;
  #L248c4a.  call temp:= `url`(v6) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L248c50.  v3:= temp @kind object;
  #L248c52.  call temp:= `loadForRequest`(v2, v3) @signature `Lokhttp3/CookieJar;.loadForRequest:(Lokhttp3/HttpUrl;)Ljava/util/List;` @kind interface;
  #L248c58.  v0:= temp @kind object;
  #L248c5a.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L248c60.  v2:= temp;
  #L248c62.  if v2 != 0 then goto L248c78;
  #L248c66.  v2:= "Cookie" @kind object;
  #L248c6a.  call temp:= `cookieHeader`(v5, v0) @signature `Lokhttp3/internal/http/HttpEngine;.cookieHeader:(Ljava/util/List;)Ljava/lang/String;` @kind direct;
  #L248c70.  v3:= temp @kind object;
  #L248c72.  call temp:= `header`(v1, v2, v3) @signature `Lokhttp3/Request$Builder;.header:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L248c78.  v2:= "User-Agent" @kind object;
  #L248c7c.  call temp:= `header`(v6, v2) @signature `Lokhttp3/Request;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L248c82.  v2:= temp @kind object;
  #L248c84.  if v2 != 0 then goto L248c9a;
  #L248c88.  v2:= "User-Agent" @kind object;
  #L248c8c.  call temp:= `userAgent`() @signature `Lokhttp3/internal/Version;.userAgent:()Ljava/lang/String;` @kind static;
  #L248c92.  v3:= temp @kind object;
  #L248c94.  call temp:= `header`(v1, v2, v3) @signature `Lokhttp3/Request$Builder;.header:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L248c9a.  call temp:= `build`(v1) @signature `Lokhttp3/Request$Builder;.build:()Lokhttp3/Request;` @kind virtual;
  #L248ca0.  v2:= temp @kind object;
  #L248ca2.  return v2 @kind object;
}
procedure `okhttp3.Response` `readNetworkResponse`(`okhttp3.internal.http.HttpEngine` v4 @kind this) @signature `Lokhttp3/internal/http/HttpEngine;.readNetworkResponse:()Lokhttp3/Response;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L248cb4.  v1:= v4.`okhttp3.internal.http.HttpEngine.httpStream` @type ^`okhttp3.internal.http.HttpStream` @kind object;
  #L248cb8.  call `finishRequest`(v1) @signature `Lokhttp3/internal/http/HttpStream;.finishRequest:()V` @kind interface;
  #L248cbe.  v1:= v4.`okhttp3.internal.http.HttpEngine.httpStream` @type ^`okhttp3.internal.http.HttpStream` @kind object;
  #L248cc2.  call temp:= `readResponseHeaders`(v1) @signature `Lokhttp3/internal/http/HttpStream;.readResponseHeaders:()Lokhttp3/Response$Builder;` @kind interface;
  #L248cc8.  v1:= temp @kind object;
  #L248cca.  v2:= v4.`okhttp3.internal.http.HttpEngine.networkRequest` @type ^`okhttp3.Request` @kind object;
  #L248cce.  call temp:= `request`(v1, v2) @signature `Lokhttp3/Response$Builder;.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;` @kind virtual;
  #L248cd4.  v1:= temp @kind object;
  #L248cd6.  v2:= v4.`okhttp3.internal.http.HttpEngine.streamAllocation` @type ^`okhttp3.internal.http.StreamAllocation` @kind object;
  #L248cda.  call temp:= `connection`(v2) @signature `Lokhttp3/internal/http/StreamAllocation;.connection:()Lokhttp3/internal/io/RealConnection;` @kind virtual;
  #L248ce0.  v2:= temp @kind object;
  #L248ce2.  call temp:= `handshake`(v2) @signature `Lokhttp3/internal/io/RealConnection;.handshake:()Lokhttp3/Handshake;` @kind virtual;
  #L248ce8.  v2:= temp @kind object;
  #L248cea.  call temp:= `handshake`(v1, v2) @signature `Lokhttp3/Response$Builder;.handshake:(Lokhttp3/Handshake;)Lokhttp3/Response$Builder;` @kind virtual;
  #L248cf0.  v1:= temp @kind object;
  #L248cf2.  v2:= v4.`okhttp3.internal.http.HttpEngine.sentRequestMillis` @type ^`long` @kind wide;
  #L248cf6.  call temp:= `sentRequestAtMillis`(v1, v2) @signature `Lokhttp3/Response$Builder;.sentRequestAtMillis:(J)Lokhttp3/Response$Builder;` @kind virtual;
  #L248cfc.  v1:= temp @kind object;
  #L248cfe.  call temp:= `currentTimeMillis`() @signature `Ljava/lang/System;.currentTimeMillis:()J` @kind static;
  #L248d04.  v2:= temp @kind wide;
  #L248d06.  call temp:= `receivedResponseAtMillis`(v1, v2) @signature `Lokhttp3/Response$Builder;.receivedResponseAtMillis:(J)Lokhttp3/Response$Builder;` @kind virtual;
  #L248d0c.  v1:= temp @kind object;
  #L248d0e.  call temp:= `build`(v1) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L248d14.  v0:= temp @kind object;
  #L248d16.  v1:= v4.`okhttp3.internal.http.HttpEngine.forWebSocket` @type ^`boolean` @kind boolean;
  #L248d1a.  if v1 != 0 then goto L248d42;
  #L248d1e.  call temp:= `newBuilder`(v0) @signature `Lokhttp3/Response;.newBuilder:()Lokhttp3/Response$Builder;` @kind virtual;
  #L248d24.  v1:= temp @kind object;
  #L248d26.  v2:= v4.`okhttp3.internal.http.HttpEngine.httpStream` @type ^`okhttp3.internal.http.HttpStream` @kind object;
  #L248d2a.  call temp:= `openResponseBody`(v2, v0) @signature `Lokhttp3/internal/http/HttpStream;.openResponseBody:(Lokhttp3/Response;)Lokhttp3/ResponseBody;` @kind interface;
  #L248d30.  v2:= temp @kind object;
  #L248d32.  call temp:= `body`(v1, v2) @signature `Lokhttp3/Response$Builder;.body:(Lokhttp3/ResponseBody;)Lokhttp3/Response$Builder;` @kind virtual;
  #L248d38.  v1:= temp @kind object;
  #L248d3a.  call temp:= `build`(v1) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L248d40.  v0:= temp @kind object;
  #L248d42.  v1:= "close" @kind object;
  #L248d46.  call temp:= `request`(v0) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L248d4c.  v2:= temp @kind object;
  #L248d4e.  v3:= "Connection" @kind object;
  #L248d52.  call temp:= `header`(v2, v3) @signature `Lokhttp3/Request;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L248d58.  v2:= temp @kind object;
  #L248d5a.  call temp:= `equalsIgnoreCase`(v1, v2) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L248d60.  v1:= temp;
  #L248d62.  if v1 != 0 then goto L248d82;
  #L248d66.  v1:= "close" @kind object;
  #L248d6a.  v2:= "Connection" @kind object;
  #L248d6e.  call temp:= `header`(v0, v2) @signature `Lokhttp3/Response;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L248d74.  v2:= temp @kind object;
  #L248d76.  call temp:= `equalsIgnoreCase`(v1, v2) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L248d7c.  v1:= temp;
  #L248d7e.  if v1 == 0 then goto L248d8c;
  #L248d82.  v1:= v4.`okhttp3.internal.http.HttpEngine.streamAllocation` @type ^`okhttp3.internal.http.StreamAllocation` @kind object;
  #L248d86.  call `noNewStreams`(v1) @signature `Lokhttp3/internal/http/StreamAllocation;.noNewStreams:()V` @kind virtual;
  #L248d8c.  return v0 @kind object;
}
procedure `okhttp3.Response` `stripBody`(`okhttp3.Response` v2 @kind object @name `response`) @signature `Lokhttp3/internal/http/HttpEngine;.stripBody:(Lokhttp3/Response;)Lokhttp3/Response;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L248da0.  if v2 == 0 then goto L248dca;
  #L248da4.  call temp:= `body`(v2) @signature `Lokhttp3/Response;.body:()Lokhttp3/ResponseBody;` @kind virtual;
  #L248daa.  v0:= temp @kind object;
  #L248dac.  if v0 == 0 then goto L248dca;
  #L248db0.  call temp:= `newBuilder`(v2) @signature `Lokhttp3/Response;.newBuilder:()Lokhttp3/Response$Builder;` @kind virtual;
  #L248db6.  v0:= temp @kind object;
  #L248db8.  v1:= 0I;
  #L248dba.  call temp:= `body`(v0, v1) @signature `Lokhttp3/Response$Builder;.body:(Lokhttp3/ResponseBody;)Lokhttp3/Response$Builder;` @kind virtual;
  #L248dc0.  v0:= temp @kind object;
  #L248dc2.  call temp:= `build`(v0) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L248dc8.  v2:= temp @kind object;
  #L248dca.  return v2 @kind object;
}
procedure `okhttp3.Response` `unzip`(`okhttp3.internal.http.HttpEngine` v5 @kind this, `okhttp3.Response` v6 @kind object @name `response`) @signature `Lokhttp3/internal/http/HttpEngine;.unzip:(Lokhttp3/Response;)Lokhttp3/Response;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L248ddc.  v2:= v5.`okhttp3.internal.http.HttpEngine.transparentGzip` @type ^`boolean` @kind boolean;
  #L248de0.  if v2 == 0 then goto L248e04;
  #L248de4.  v2:= "gzip" @kind object;
  #L248de8.  v3:= v5.`okhttp3.internal.http.HttpEngine.userResponse` @type ^`okhttp3.Response` @kind object;
  #L248dec.  v4:= "Content-Encoding" @kind object;
  #L248df0.  call temp:= `header`(v3, v4) @signature `Lokhttp3/Response;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L248df6.  v3:= temp @kind object;
  #L248df8.  call temp:= `equalsIgnoreCase`(v2, v3) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L248dfe.  v2:= temp;
  #L248e00.  if v2 != 0 then goto L248e06;
  #L248e04.  return v6 @kind object;
  #L248e06.  call temp:= `body`(v6) @signature `Lokhttp3/Response;.body:()Lokhttp3/ResponseBody;` @kind virtual;
  #L248e0c.  v2:= temp @kind object;
  #L248e0e.  if v2 == 0 then goto L248e04;
  #L248e12.  v0:= new `okio.GzipSource`;
  #L248e16.  call temp:= `body`(v6) @signature `Lokhttp3/Response;.body:()Lokhttp3/ResponseBody;` @kind virtual;
  #L248e1c.  v2:= temp @kind object;
  #L248e1e.  call temp:= `source`(v2) @signature `Lokhttp3/ResponseBody;.source:()Lokio/BufferedSource;` @kind virtual;
  #L248e24.  v2:= temp @kind object;
  #L248e26.  call `<init>`(v0, v2) @signature `Lokio/GzipSource;.<init>:(Lokio/Source;)V` @kind direct;
  #L248e2c.  call temp:= `headers`(v6) @signature `Lokhttp3/Response;.headers:()Lokhttp3/Headers;` @kind virtual;
  #L248e32.  v2:= temp @kind object;
  #L248e34.  call temp:= `newBuilder`(v2) @signature `Lokhttp3/Headers;.newBuilder:()Lokhttp3/Headers$Builder;` @kind virtual;
  #L248e3a.  v2:= temp @kind object;
  #L248e3c.  v3:= "Content-Encoding" @kind object;
  #L248e40.  call temp:= `removeAll`(v2, v3) @signature `Lokhttp3/Headers$Builder;.removeAll:(Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L248e46.  v2:= temp @kind object;
  #L248e48.  v3:= "Content-Length" @kind object;
  #L248e4c.  call temp:= `removeAll`(v2, v3) @signature `Lokhttp3/Headers$Builder;.removeAll:(Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L248e52.  v2:= temp @kind object;
  #L248e54.  call temp:= `build`(v2) @signature `Lokhttp3/Headers$Builder;.build:()Lokhttp3/Headers;` @kind virtual;
  #L248e5a.  v1:= temp @kind object;
  #L248e5c.  call temp:= `newBuilder`(v6) @signature `Lokhttp3/Response;.newBuilder:()Lokhttp3/Response$Builder;` @kind virtual;
  #L248e62.  v2:= temp @kind object;
  #L248e64.  call temp:= `headers`(v2, v1) @signature `Lokhttp3/Response$Builder;.headers:(Lokhttp3/Headers;)Lokhttp3/Response$Builder;` @kind virtual;
  #L248e6a.  v2:= temp @kind object;
  #L248e6c.  v3:= new `okhttp3.internal.http.RealResponseBody`;
  #L248e70.  call temp:= `buffer`(v0) @signature `Lokio/Okio;.buffer:(Lokio/Source;)Lokio/BufferedSource;` @kind static;
  #L248e76.  v4:= temp @kind object;
  #L248e78.  call `<init>`(v3, v1, v4) @signature `Lokhttp3/internal/http/RealResponseBody;.<init>:(Lokhttp3/Headers;Lokio/BufferedSource;)V` @kind direct;
  #L248e7e.  call temp:= `body`(v2, v3) @signature `Lokhttp3/Response$Builder;.body:(Lokhttp3/ResponseBody;)Lokhttp3/Response$Builder;` @kind virtual;
  #L248e84.  v2:= temp @kind object;
  #L248e86.  call temp:= `build`(v2) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L248e8c.  v6:= temp @kind object;
  #L248e8e.  goto L248e04;
}
procedure `boolean` `validate`(`okhttp3.Response` v8 @kind object @name `cached`, `okhttp3.Response` v9 @kind object @name `network`) @signature `Lokhttp3/internal/http/HttpEngine;.validate:(Lokhttp3/Response;Lokhttp3/Response;)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L248ea0.  v2:= 1I;
  #L248ea2.  call temp:= `code`(v9) @signature `Lokhttp3/Response;.code:()I` @kind virtual;
  #L248ea8.  v3:= temp;
  #L248eaa.  v4:= 304I;
  #L248eae.  if v3 != v4 then goto L248eb4;
  #L248eb2.  return v2;
  #L248eb4.  call temp:= `headers`(v8) @signature `Lokhttp3/Response;.headers:()Lokhttp3/Headers;` @kind virtual;
  #L248eba.  v3:= temp @kind object;
  #L248ebc.  v4:= "Last-Modified" @kind object;
  #L248ec0.  call temp:= `getDate`(v3, v4) @signature `Lokhttp3/Headers;.getDate:(Ljava/lang/String;)Ljava/util/Date;` @kind virtual;
  #L248ec6.  v0:= temp @kind object;
  #L248ec8.  if v0 == 0 then goto L248efc;
  #L248ecc.  call temp:= `headers`(v9) @signature `Lokhttp3/Response;.headers:()Lokhttp3/Headers;` @kind virtual;
  #L248ed2.  v3:= temp @kind object;
  #L248ed4.  v4:= "Last-Modified" @kind object;
  #L248ed8.  call temp:= `getDate`(v3, v4) @signature `Lokhttp3/Headers;.getDate:(Ljava/lang/String;)Ljava/util/Date;` @kind virtual;
  #L248ede.  v1:= temp @kind object;
  #L248ee0.  if v1 == 0 then goto L248efc;
  #L248ee4.  call temp:= `getTime`(v1) @signature `Ljava/util/Date;.getTime:()J` @kind virtual;
  #L248eea.  v4:= temp @kind wide;
  #L248eec.  call temp:= `getTime`(v0) @signature `Ljava/util/Date;.getTime:()J` @kind virtual;
  #L248ef2.  v6:= temp @kind wide;
  #L248ef4.  v3:= lcmp(v4, v6);
  #L248ef8.  if v3 < 0 then goto L248eb2;
  #L248efc.  v2:= 0I;
  #L248efe.  goto L248eb2;
}
procedure `boolean` `writeRequestHeadersEagerly`(`okhttp3.internal.http.HttpEngine` v1 @kind this) @signature `Lokhttp3/internal/http/HttpEngine;.writeRequestHeadersEagerly:()Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L248f10.  v0:= v1.`okhttp3.internal.http.HttpEngine.callerWritesRequestBody` @type ^`boolean` @kind boolean;
  #L248f14.  if v0 == 0 then goto L248f34;
  #L248f18.  v0:= v1.`okhttp3.internal.http.HttpEngine.networkRequest` @type ^`okhttp3.Request` @kind object;
  #L248f1c.  call temp:= `permitsRequestBody`(v1, v0) @signature `Lokhttp3/internal/http/HttpEngine;.permitsRequestBody:(Lokhttp3/Request;)Z` @kind virtual;
  #L248f22.  v0:= temp;
  #L248f24.  if v0 == 0 then goto L248f34;
  #L248f28.  v0:= v1.`okhttp3.internal.http.HttpEngine.requestBodyOut` @type ^`okio.Sink` @kind object;
  #L248f2c.  if v0 != 0 then goto L248f34;
  #L248f30.  v0:= 1I;
  #L248f32.  return v0;
  #L248f34.  v0:= 0I;
  #L248f36.  goto L248f32;
}
procedure `void` `cancel`(`okhttp3.internal.http.HttpEngine` v1 @kind this) @signature `Lokhttp3/internal/http/HttpEngine;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L248f48.  v0:= v1.`okhttp3.internal.http.HttpEngine.streamAllocation` @type ^`okhttp3.internal.http.StreamAllocation` @kind object;
  #L248f4c.  call `cancel`(v0) @signature `Lokhttp3/internal/http/StreamAllocation;.cancel:()V` @kind virtual;
  #L248f52.  return @kind void;
}
procedure `okhttp3.internal.http.StreamAllocation` `close`(`okhttp3.internal.http.HttpEngine` v2 @kind this) @signature `Lokhttp3/internal/http/HttpEngine;.close:()Lokhttp3/internal/http/StreamAllocation;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L248f64.  v0:= v2.`okhttp3.internal.http.HttpEngine.bufferedRequestBody` @type ^`okio.BufferedSink` @kind object;
  #L248f68.  if v0 == 0 then goto L248f96;
  #L248f6c.  v0:= v2.`okhttp3.internal.http.HttpEngine.bufferedRequestBody` @type ^`okio.BufferedSink` @kind object;
  #L248f70.  call `closeQuietly`(v0) @signature `Lokhttp3/internal/Util;.closeQuietly:(Ljava/io/Closeable;)V` @kind static;
  #L248f76.  v0:= v2.`okhttp3.internal.http.HttpEngine.userResponse` @type ^`okhttp3.Response` @kind object;
  #L248f7a.  if v0 == 0 then goto L248faa;
  #L248f7e.  v0:= v2.`okhttp3.internal.http.HttpEngine.userResponse` @type ^`okhttp3.Response` @kind object;
  #L248f82.  call temp:= `body`(v0) @signature `Lokhttp3/Response;.body:()Lokhttp3/ResponseBody;` @kind virtual;
  #L248f88.  v0:= temp @kind object;
  #L248f8a.  call `closeQuietly`(v0) @signature `Lokhttp3/internal/Util;.closeQuietly:(Ljava/io/Closeable;)V` @kind static;
  #L248f90.  v0:= v2.`okhttp3.internal.http.HttpEngine.streamAllocation` @type ^`okhttp3.internal.http.StreamAllocation` @kind object;
  #L248f94.  return v0 @kind object;
  #L248f96.  v0:= v2.`okhttp3.internal.http.HttpEngine.requestBodyOut` @type ^`okio.Sink` @kind object;
  #L248f9a.  if v0 == 0 then goto L248f76;
  #L248f9e.  v0:= v2.`okhttp3.internal.http.HttpEngine.requestBodyOut` @type ^`okio.Sink` @kind object;
  #L248fa2.  call `closeQuietly`(v0) @signature `Lokhttp3/internal/Util;.closeQuietly:(Ljava/io/Closeable;)V` @kind static;
  #L248fa8.  goto L248f76;
  #L248faa.  v0:= v2.`okhttp3.internal.http.HttpEngine.streamAllocation` @type ^`okhttp3.internal.http.StreamAllocation` @kind object;
  #L248fae.  v1:= 0I;
  #L248fb0.  call `streamFailed`(v0, v1) @signature `Lokhttp3/internal/http/StreamAllocation;.streamFailed:(Ljava/io/IOException;)V` @kind virtual;
  #L248fb6.  goto L248f90;
}
procedure `okhttp3.Request` `followUpRequest`(`okhttp3.internal.http.HttpEngine` v13 @kind this) @signature `Lokhttp3/internal/http/HttpEngine;.followUpRequest:()Lokhttp3/Request;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L248fc8.  v10:= 0I;
  #L248fca.  v11:= v13.`okhttp3.internal.http.HttpEngine.userResponse` @type ^`okhttp3.Response` @kind object;
  #L248fce.  if v11 != 0 then goto L248fde;
  #L248fd2.  v10:= new `java.lang.IllegalStateException`;
  #L248fd6.  call `<init>`(v10) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L248fdc.  throw v10;
  #L248fde.  v11:= v13.`okhttp3.internal.http.HttpEngine.streamAllocation` @type ^`okhttp3.internal.http.StreamAllocation` @kind object;
  #L248fe2.  call temp:= `connection`(v11) @signature `Lokhttp3/internal/http/StreamAllocation;.connection:()Lokhttp3/internal/io/RealConnection;` @kind virtual;
  #L248fe8.  v0:= temp @kind object;
  #L248fea.  if v0 == 0 then goto L249016;
  #L248fee.  call temp:= `route`(v0) @signature `Lokhttp3/Connection;.route:()Lokhttp3/Route;` @kind interface;
  #L248ff4.  v6:= temp @kind object;
  #L248ff6.  v11:= v13.`okhttp3.internal.http.HttpEngine.userResponse` @type ^`okhttp3.Response` @kind object;
  #L248ffa.  call temp:= `code`(v11) @signature `Lokhttp3/Response;.code:()I` @kind virtual;
  #L249000.  v4:= temp;
  #L249002.  v11:= v13.`okhttp3.internal.http.HttpEngine.userRequest` @type ^`okhttp3.Request` @kind object;
  #L249006.  call temp:= `method`(v11) @signature `Lokhttp3/Request;.method:()Ljava/lang/String;` @kind virtual;
  #L24900c.  v2:= temp @kind object;
  #L24900e.  goto L2491c8;
  #L249014.  return v10 @kind object;
  #L249016.  v6:= v10 @kind object;
  #L249018.  goto L248ff6;
  #L24901a.  if v6 == 0 then goto L249046;
  #L24901e.  call temp:= `proxy`(v6) @signature `Lokhttp3/Route;.proxy:()Ljava/net/Proxy;` @kind virtual;
  #L249024.  v8:= temp @kind object;
  #L249026.  call temp:= `type`(v8) @signature `Ljava/net/Proxy;.type:()Ljava/net/Proxy$Type;` @kind virtual;
  #L24902c.  v10:= temp @kind object;
  #L24902e.  v11:= `@@java.net.Proxy$Type.HTTP` @type ^`java.net.Proxy$Type` @kind object;
  #L249032.  if v10 == v11 then goto L249054;
  #L249036.  v10:= new `java.net.ProtocolException`;
  #L24903a.  v11:= "Received HTTP_PROXY_AUTH (407) code while not using proxy" @kind object;
  #L24903e.  call `<init>`(v10, v11) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249044.  throw v10;
  #L249046.  v10:= v13.`okhttp3.internal.http.HttpEngine.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L24904a.  call temp:= `proxy`(v10) @signature `Lokhttp3/OkHttpClient;.proxy:()Ljava/net/Proxy;` @kind virtual;
  #L249050.  v8:= temp @kind object;
  #L249052.  goto L249026;
  #L249054.  v10:= v13.`okhttp3.internal.http.HttpEngine.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L249058.  call temp:= `proxyAuthenticator`(v10) @signature `Lokhttp3/OkHttpClient;.proxyAuthenticator:()Lokhttp3/Authenticator;` @kind virtual;
  #L24905e.  v10:= temp @kind object;
  #L249060.  v11:= v13.`okhttp3.internal.http.HttpEngine.userResponse` @type ^`okhttp3.Response` @kind object;
  #L249064.  call temp:= `authenticate`(v10, v6, v11) @signature `Lokhttp3/Authenticator;.authenticate:(Lokhttp3/Route;Lokhttp3/Response;)Lokhttp3/Request;` @kind interface;
  #L24906a.  v10:= temp @kind object;
  #L24906c.  goto L249014;
  #L24906e.  v10:= v13.`okhttp3.internal.http.HttpEngine.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L249072.  call temp:= `authenticator`(v10) @signature `Lokhttp3/OkHttpClient;.authenticator:()Lokhttp3/Authenticator;` @kind virtual;
  #L249078.  v10:= temp @kind object;
  #L24907a.  v11:= v13.`okhttp3.internal.http.HttpEngine.userResponse` @type ^`okhttp3.Response` @kind object;
  #L24907e.  call temp:= `authenticate`(v10, v6, v11) @signature `Lokhttp3/Authenticator;.authenticate:(Lokhttp3/Route;Lokhttp3/Response;)Lokhttp3/Request;` @kind interface;
  #L249084.  v10:= temp @kind object;
  #L249086.  goto L249014;
  #L249088.  v11:= "GET" @kind object;
  #L24908c.  call temp:= `equals`(v2, v11) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L249092.  v11:= temp;
  #L249094.  if v11 != 0 then goto L2490a8;
  #L249098.  v11:= "HEAD" @kind object;
  #L24909c.  call temp:= `equals`(v2, v11) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2490a2.  v11:= temp;
  #L2490a4.  if v11 == 0 then goto L249014;
  #L2490a8.  v11:= v13.`okhttp3.internal.http.HttpEngine.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2490ac.  call temp:= `followRedirects`(v11) @signature `Lokhttp3/OkHttpClient;.followRedirects:()Z` @kind virtual;
  #L2490b2.  v11:= temp;
  #L2490b4.  if v11 == 0 then goto L249014;
  #L2490b8.  v11:= v13.`okhttp3.internal.http.HttpEngine.userResponse` @type ^`okhttp3.Response` @kind object;
  #L2490bc.  v12:= "Location" @kind object;
  #L2490c0.  call temp:= `header`(v11, v12) @signature `Lokhttp3/Response;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L2490c6.  v1:= temp @kind object;
  #L2490c8.  if v1 == 0 then goto L249014;
  #L2490cc.  v11:= v13.`okhttp3.internal.http.HttpEngine.userRequest` @type ^`okhttp3.Request` @kind object;
  #L2490d0.  call temp:= `url`(v11) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L2490d6.  v11:= temp @kind object;
  #L2490d8.  call temp:= `resolve`(v11, v1) @signature `Lokhttp3/HttpUrl;.resolve:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @kind virtual;
  #L2490de.  v9:= temp @kind object;
  #L2490e0.  if v9 == 0 then goto L249014;
  #L2490e4.  call temp:= `scheme`(v9) @signature `Lokhttp3/HttpUrl;.scheme:()Ljava/lang/String;` @kind virtual;
  #L2490ea.  v11:= temp @kind object;
  #L2490ec.  v12:= v13.`okhttp3.internal.http.HttpEngine.userRequest` @type ^`okhttp3.Request` @kind object;
  #L2490f0.  call temp:= `url`(v12) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L2490f6.  v12:= temp @kind object;
  #L2490f8.  call temp:= `scheme`(v12) @signature `Lokhttp3/HttpUrl;.scheme:()Ljava/lang/String;` @kind virtual;
  #L2490fe.  v12:= temp @kind object;
  #L249100.  call temp:= `equals`(v11, v12) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L249106.  v7:= temp;
  #L249108.  if v7 != 0 then goto L24911c;
  #L24910c.  v11:= v13.`okhttp3.internal.http.HttpEngine.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L249110.  call temp:= `followSslRedirects`(v11) @signature `Lokhttp3/OkHttpClient;.followSslRedirects:()Z` @kind virtual;
  #L249116.  v11:= temp;
  #L249118.  if v11 == 0 then goto L249014;
  #L24911c.  v11:= v13.`okhttp3.internal.http.HttpEngine.userRequest` @type ^`okhttp3.Request` @kind object;
  #L249120.  call temp:= `newBuilder`(v11) @signature `Lokhttp3/Request;.newBuilder:()Lokhttp3/Request$Builder;` @kind virtual;
  #L249126.  v3:= temp @kind object;
  #L249128.  call temp:= `permitsRequestBody`(v2) @signature `Lokhttp3/internal/http/HttpMethod;.permitsRequestBody:(Ljava/lang/String;)Z` @kind static;
  #L24912e.  v11:= temp;
  #L249130.  if v11 == 0 then goto L249168;
  #L249134.  call temp:= `redirectsToGet`(v2) @signature `Lokhttp3/internal/http/HttpMethod;.redirectsToGet:(Ljava/lang/String;)Z` @kind static;
  #L24913a.  v11:= temp;
  #L24913c.  if v11 == 0 then goto L249192;
  #L249140.  v11:= "GET" @kind object;
  #L249144.  call temp:= `method`(v3, v11, v10) @signature `Lokhttp3/Request$Builder;.method:(Ljava/lang/String;Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;` @kind virtual;
  #L24914a.  v10:= "Transfer-Encoding" @kind object;
  #L24914e.  call temp:= `removeHeader`(v3, v10) @signature `Lokhttp3/Request$Builder;.removeHeader:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L249154.  v10:= "Content-Length" @kind object;
  #L249158.  call temp:= `removeHeader`(v3, v10) @signature `Lokhttp3/Request$Builder;.removeHeader:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L24915e.  v10:= "Content-Type" @kind object;
  #L249162.  call temp:= `removeHeader`(v3, v10) @signature `Lokhttp3/Request$Builder;.removeHeader:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L249168.  call temp:= `sameConnection`(v13, v9) @signature `Lokhttp3/internal/http/HttpEngine;.sameConnection:(Lokhttp3/HttpUrl;)Z` @kind virtual;
  #L24916e.  v10:= temp;
  #L249170.  if v10 != 0 then goto L24917e;
  #L249174.  v10:= "Authorization" @kind object;
  #L249178.  call temp:= `removeHeader`(v3, v10) @signature `Lokhttp3/Request$Builder;.removeHeader:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L24917e.  call temp:= `url`(v3, v9) @signature `Lokhttp3/Request$Builder;.url:(Lokhttp3/HttpUrl;)Lokhttp3/Request$Builder;` @kind virtual;
  #L249184.  v10:= temp @kind object;
  #L249186.  call temp:= `build`(v10) @signature `Lokhttp3/Request$Builder;.build:()Lokhttp3/Request;` @kind virtual;
  #L24918c.  v10:= temp @kind object;
  #L24918e.  goto L249014;
  #L249192.  call temp:= `method`(v3, v2, v10) @signature `Lokhttp3/Request$Builder;.method:(Ljava/lang/String;Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;` @kind virtual;
  #L249198.  goto L24914a;
  #L24919a.  v11:= v13.`okhttp3.internal.http.HttpEngine.requestBodyOut` @type ^`okio.Sink` @kind object;
  #L24919e.  if v11 == 0 then goto L2491ae;
  #L2491a2.  v11:= v13.`okhttp3.internal.http.HttpEngine.requestBodyOut` @type ^`okio.Sink` @kind object;
  #L2491a6.  v11:= instanceof @variable v11 @type ^`okhttp3.internal.http.RetryableSink` @kind boolean;
  #L2491aa.  if v11 == 0 then goto L2491c4;
  #L2491ae.  v5:= 1I;
  #L2491b0.  v11:= v13.`okhttp3.internal.http.HttpEngine.callerWritesRequestBody` @type ^`boolean` @kind boolean;
  #L2491b4.  if v11 == 0 then goto L2491bc;
  #L2491b8.  if v5 == 0 then goto L249014;
  #L2491bc.  v10:= v13.`okhttp3.internal.http.HttpEngine.userRequest` @type ^`okhttp3.Request` @kind object;
  #L2491c0.  goto L249014;
  #L2491c4.  v5:= 0I;
  #L2491c6.  goto L2491b0;
  #L2491c8.  switch v4
                  | 300 => goto L2490a8
                  | 301 => goto L2490a8
                  | 302 => goto L2490a8
                  | 303 => goto L2490a8
                  | 307 => goto L249088
                  | 308 => goto L249088
                  | 401 => goto L24906e
                  | 407 => goto L24901a
                  | 408 => goto L24919a
                  | else => goto L249014;
}
procedure `okio.BufferedSink` `getBufferedRequestBody`(`okhttp3.internal.http.HttpEngine` v3 @kind this) @signature `Lokhttp3/internal/http/HttpEngine;.getBufferedRequestBody:()Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L249224.  v1:= v3.`okhttp3.internal.http.HttpEngine.bufferedRequestBody` @type ^`okio.BufferedSink` @kind object;
  #L249228.  if v1 == 0 then goto L24922e;
  #L24922c.  return v1 @kind object;
  #L24922e.  call temp:= `getRequestBody`(v3) @signature `Lokhttp3/internal/http/HttpEngine;.getRequestBody:()Lokio/Sink;` @kind virtual;
  #L249234.  v0:= temp @kind object;
  #L249236.  if v0 == 0 then goto L24924a;
  #L24923a.  call temp:= `buffer`(v0) @signature `Lokio/Okio;.buffer:(Lokio/Sink;)Lokio/BufferedSink;` @kind static;
  #L249240.  v2:= temp @kind object;
  #L249242.  v3.`okhttp3.internal.http.HttpEngine.bufferedRequestBody` @type ^`okio.BufferedSink` := v2 @kind object;
  #L249246.  v1:= v2 @kind object;
  #L249248.  goto L24922c;
  #L24924a.  v2:= 0I;
  #L24924c.  goto L249246;
}
procedure `okhttp3.Connection` `getConnection`(`okhttp3.internal.http.HttpEngine` v1 @kind this) @signature `Lokhttp3/internal/http/HttpEngine;.getConnection:()Lokhttp3/Connection;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L249260.  v0:= v1.`okhttp3.internal.http.HttpEngine.streamAllocation` @type ^`okhttp3.internal.http.StreamAllocation` @kind object;
  #L249264.  call temp:= `connection`(v0) @signature `Lokhttp3/internal/http/StreamAllocation;.connection:()Lokhttp3/internal/io/RealConnection;` @kind virtual;
  #L24926a.  v0:= temp @kind object;
  #L24926c.  return v0 @kind object;
}
procedure `okhttp3.Request` `getRequest`(`okhttp3.internal.http.HttpEngine` v1 @kind this) @signature `Lokhttp3/internal/http/HttpEngine;.getRequest:()Lokhttp3/Request;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L249280.  v0:= v1.`okhttp3.internal.http.HttpEngine.userRequest` @type ^`okhttp3.Request` @kind object;
  #L249284.  return v0 @kind object;
}
procedure `okio.Sink` `getRequestBody`(`okhttp3.internal.http.HttpEngine` v1 @kind this) @signature `Lokhttp3/internal/http/HttpEngine;.getRequestBody:()Lokio/Sink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L249298.  v0:= v1.`okhttp3.internal.http.HttpEngine.cacheStrategy` @type ^`okhttp3.internal.http.CacheStrategy` @kind object;
  #L24929c.  if v0 != 0 then goto L2492ac;
  #L2492a0.  v0:= new `java.lang.IllegalStateException`;
  #L2492a4.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L2492aa.  throw v0;
  #L2492ac.  v0:= v1.`okhttp3.internal.http.HttpEngine.requestBodyOut` @type ^`okio.Sink` @kind object;
  #L2492b0.  return v0 @kind object;
}
procedure `okhttp3.Response` `getResponse`(`okhttp3.internal.http.HttpEngine` v1 @kind this) @signature `Lokhttp3/internal/http/HttpEngine;.getResponse:()Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2492c4.  v0:= v1.`okhttp3.internal.http.HttpEngine.userResponse` @type ^`okhttp3.Response` @kind object;
  #L2492c8.  if v0 != 0 then goto L2492d8;
  #L2492cc.  v0:= new `java.lang.IllegalStateException`;
  #L2492d0.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L2492d6.  throw v0;
  #L2492d8.  v0:= v1.`okhttp3.internal.http.HttpEngine.userResponse` @type ^`okhttp3.Response` @kind object;
  #L2492dc.  return v0 @kind object;
}
procedure `boolean` `hasResponse`(`okhttp3.internal.http.HttpEngine` v1 @kind this) @signature `Lokhttp3/internal/http/HttpEngine;.hasResponse:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2492f0.  v0:= v1.`okhttp3.internal.http.HttpEngine.userResponse` @type ^`okhttp3.Response` @kind object;
  #L2492f4.  if v0 == 0 then goto L2492fc;
  #L2492f8.  v0:= 1I;
  #L2492fa.  return v0;
  #L2492fc.  v0:= 0I;
  #L2492fe.  goto L2492fa;
}
procedure `boolean` `permitsRequestBody`(`okhttp3.internal.http.HttpEngine` v1 @kind this, `okhttp3.Request` v2 @kind object @name `request`) @signature `Lokhttp3/internal/http/HttpEngine;.permitsRequestBody:(Lokhttp3/Request;)Z` @AccessFlag  {
    temp;
    v0;

  #L249310.  call temp:= `method`(v2) @signature `Lokhttp3/Request;.method:()Ljava/lang/String;` @kind virtual;
  #L249316.  v0:= temp @kind object;
  #L249318.  call temp:= `permitsRequestBody`(v0) @signature `Lokhttp3/internal/http/HttpMethod;.permitsRequestBody:(Ljava/lang/String;)Z` @kind static;
  #L24931e.  v0:= temp;
  #L249320.  return v0;
}
procedure `void` `readResponse`(`okhttp3.internal.http.HttpEngine` v10 @kind this) @signature `Lokhttp3/internal/http/HttpEngine;.readResponse:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L249334.  v8:= -1L;
  #L249338.  v4:= v10.`okhttp3.internal.http.HttpEngine.userResponse` @type ^`okhttp3.Response` @kind object;
  #L24933c.  if v4 == 0 then goto L249342;
  #L249340.  return @kind void;
  #L249342.  v4:= v10.`okhttp3.internal.http.HttpEngine.networkRequest` @type ^`okhttp3.Request` @kind object;
  #L249346.  if v4 != 0 then goto L249362;
  #L24934a.  v4:= v10.`okhttp3.internal.http.HttpEngine.cacheResponse` @type ^`okhttp3.Response` @kind object;
  #L24934e.  if v4 != 0 then goto L249362;
  #L249352.  v4:= new `java.lang.IllegalStateException`;
  #L249356.  v5:= "call sendRequest() first!" @kind object;
  #L24935a.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249360.  throw v4;
  #L249362.  v4:= v10.`okhttp3.internal.http.HttpEngine.networkRequest` @type ^`okhttp3.Request` @kind object;
  #L249366.  if v4 == 0 then goto L249340;
  #L24936a.  v4:= v10.`okhttp3.internal.http.HttpEngine.forWebSocket` @type ^`boolean` @kind boolean;
  #L24936e.  if v4 == 0 then goto L24947a;
  #L249372.  v4:= v10.`okhttp3.internal.http.HttpEngine.httpStream` @type ^`okhttp3.internal.http.HttpStream` @kind object;
  #L249376.  v5:= v10.`okhttp3.internal.http.HttpEngine.networkRequest` @type ^`okhttp3.Request` @kind object;
  #L24937a.  call `writeRequestHeaders`(v4, v5) @signature `Lokhttp3/internal/http/HttpStream;.writeRequestHeaders:(Lokhttp3/Request;)V` @kind interface;
  #L249380.  call temp:= `readNetworkResponse`(v10) @signature `Lokhttp3/internal/http/HttpEngine;.readNetworkResponse:()Lokhttp3/Response;` @kind direct;
  #L249386.  v2:= temp @kind object;
  #L249388.  call temp:= `headers`(v2) @signature `Lokhttp3/Response;.headers:()Lokhttp3/Headers;` @kind virtual;
  #L24938e.  v4:= temp @kind object;
  #L249390.  call `receiveHeaders`(v10, v4) @signature `Lokhttp3/internal/http/HttpEngine;.receiveHeaders:(Lokhttp3/Headers;)V` @kind virtual;
  #L249396.  v4:= v10.`okhttp3.internal.http.HttpEngine.cacheResponse` @type ^`okhttp3.Response` @kind object;
  #L24939a.  if v4 == 0 then goto L2495b8;
  #L24939e.  v4:= v10.`okhttp3.internal.http.HttpEngine.cacheResponse` @type ^`okhttp3.Response` @kind object;
  #L2493a2.  call temp:= `validate`(v4, v2) @signature `Lokhttp3/internal/http/HttpEngine;.validate:(Lokhttp3/Response;Lokhttp3/Response;)Z` @kind static;
  #L2493a8.  v4:= temp;
  #L2493aa.  if v4 == 0 then goto L2495a6;
  #L2493ae.  v4:= v10.`okhttp3.internal.http.HttpEngine.cacheResponse` @type ^`okhttp3.Response` @kind object;
  #L2493b2.  call temp:= `newBuilder`(v4) @signature `Lokhttp3/Response;.newBuilder:()Lokhttp3/Response$Builder;` @kind virtual;
  #L2493b8.  v4:= temp @kind object;
  #L2493ba.  v5:= v10.`okhttp3.internal.http.HttpEngine.userRequest` @type ^`okhttp3.Request` @kind object;
  #L2493be.  call temp:= `request`(v4, v5) @signature `Lokhttp3/Response$Builder;.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;` @kind virtual;
  #L2493c4.  v4:= temp @kind object;
  #L2493c6.  v5:= v10.`okhttp3.internal.http.HttpEngine.priorResponse` @type ^`okhttp3.Response` @kind object;
  #L2493ca.  call temp:= `stripBody`(v5) @signature `Lokhttp3/internal/http/HttpEngine;.stripBody:(Lokhttp3/Response;)Lokhttp3/Response;` @kind static;
  #L2493d0.  v5:= temp @kind object;
  #L2493d2.  call temp:= `priorResponse`(v4, v5) @signature `Lokhttp3/Response$Builder;.priorResponse:(Lokhttp3/Response;)Lokhttp3/Response$Builder;` @kind virtual;
  #L2493d8.  v4:= temp @kind object;
  #L2493da.  v5:= v10.`okhttp3.internal.http.HttpEngine.cacheResponse` @type ^`okhttp3.Response` @kind object;
  #L2493de.  call temp:= `headers`(v5) @signature `Lokhttp3/Response;.headers:()Lokhttp3/Headers;` @kind virtual;
  #L2493e4.  v5:= temp @kind object;
  #L2493e6.  call temp:= `headers`(v2) @signature `Lokhttp3/Response;.headers:()Lokhttp3/Headers;` @kind virtual;
  #L2493ec.  v6:= temp @kind object;
  #L2493ee.  call temp:= `combine`(v5, v6) @signature `Lokhttp3/internal/http/HttpEngine;.combine:(Lokhttp3/Headers;Lokhttp3/Headers;)Lokhttp3/Headers;` @kind static;
  #L2493f4.  v5:= temp @kind object;
  #L2493f6.  call temp:= `headers`(v4, v5) @signature `Lokhttp3/Response$Builder;.headers:(Lokhttp3/Headers;)Lokhttp3/Response$Builder;` @kind virtual;
  #L2493fc.  v4:= temp @kind object;
  #L2493fe.  v5:= v10.`okhttp3.internal.http.HttpEngine.cacheResponse` @type ^`okhttp3.Response` @kind object;
  #L249402.  call temp:= `stripBody`(v5) @signature `Lokhttp3/internal/http/HttpEngine;.stripBody:(Lokhttp3/Response;)Lokhttp3/Response;` @kind static;
  #L249408.  v5:= temp @kind object;
  #L24940a.  call temp:= `cacheResponse`(v4, v5) @signature `Lokhttp3/Response$Builder;.cacheResponse:(Lokhttp3/Response;)Lokhttp3/Response$Builder;` @kind virtual;
  #L249410.  v4:= temp @kind object;
  #L249412.  call temp:= `stripBody`(v2) @signature `Lokhttp3/internal/http/HttpEngine;.stripBody:(Lokhttp3/Response;)Lokhttp3/Response;` @kind static;
  #L249418.  v5:= temp @kind object;
  #L24941a.  call temp:= `networkResponse`(v4, v5) @signature `Lokhttp3/Response$Builder;.networkResponse:(Lokhttp3/Response;)Lokhttp3/Response$Builder;` @kind virtual;
  #L249420.  v4:= temp @kind object;
  #L249422.  call temp:= `build`(v4) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L249428.  v4:= temp @kind object;
  #L24942a.  v10.`okhttp3.internal.http.HttpEngine.userResponse` @type ^`okhttp3.Response` := v4 @kind object;
  #L24942e.  call temp:= `body`(v2) @signature `Lokhttp3/Response;.body:()Lokhttp3/ResponseBody;` @kind virtual;
  #L249434.  v4:= temp @kind object;
  #L249436.  call `close`(v4) @signature `Lokhttp3/ResponseBody;.close:()V` @kind virtual;
  #L24943c.  call `releaseStreamAllocation`(v10) @signature `Lokhttp3/internal/http/HttpEngine;.releaseStreamAllocation:()V` @kind virtual;
  #L249442.  v4:= `@@okhttp3.internal.Internal.instance` @type ^`okhttp3.internal.Internal` @kind object;
  #L249446.  v5:= v10.`okhttp3.internal.http.HttpEngine.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L24944a.  call temp:= `internalCache`(v4, v5) @signature `Lokhttp3/internal/Internal;.internalCache:(Lokhttp3/OkHttpClient;)Lokhttp3/internal/InternalCache;` @kind virtual;
  #L249450.  v3:= temp @kind object;
  #L249452.  call `trackConditionalCacheHit`(v3) @signature `Lokhttp3/internal/InternalCache;.trackConditionalCacheHit:()V` @kind interface;
  #L249458.  v4:= v10.`okhttp3.internal.http.HttpEngine.cacheResponse` @type ^`okhttp3.Response` @kind object;
  #L24945c.  v5:= v10.`okhttp3.internal.http.HttpEngine.userResponse` @type ^`okhttp3.Response` @kind object;
  #L249460.  call `update`(v3, v4, v5) @signature `Lokhttp3/internal/InternalCache;.update:(Lokhttp3/Response;Lokhttp3/Response;)V` @kind interface;
  #L249466.  v4:= v10.`okhttp3.internal.http.HttpEngine.userResponse` @type ^`okhttp3.Response` @kind object;
  #L24946a.  call temp:= `unzip`(v10, v4) @signature `Lokhttp3/internal/http/HttpEngine;.unzip:(Lokhttp3/Response;)Lokhttp3/Response;` @kind direct;
  #L249470.  v4:= temp @kind object;
  #L249472.  v10.`okhttp3.internal.http.HttpEngine.userResponse` @type ^`okhttp3.Response` := v4 @kind object;
  #L249476.  goto L249340;
  #L24947a.  v4:= v10.`okhttp3.internal.http.HttpEngine.callerWritesRequestBody` @type ^`boolean` @kind boolean;
  #L24947e.  if v4 != 0 then goto L2494ae;
  #L249482.  v4:= new `okhttp3.internal.http.HttpEngine$NetworkInterceptorChain`;
  #L249486.  v5:= 0I;
  #L249488.  v6:= v10.`okhttp3.internal.http.HttpEngine.networkRequest` @type ^`okhttp3.Request` @kind object;
  #L24948c.  v7:= v10.`okhttp3.internal.http.HttpEngine.streamAllocation` @type ^`okhttp3.internal.http.StreamAllocation` @kind object;
  #L249490.  call temp:= `connection`(v7) @signature `Lokhttp3/internal/http/StreamAllocation;.connection:()Lokhttp3/internal/io/RealConnection;` @kind virtual;
  #L249496.  v7:= temp @kind object;
  #L249498.  call `<init>`(v4, v10, v5, v6, v7) @signature `Lokhttp3/internal/http/HttpEngine$NetworkInterceptorChain;.<init>:(Lokhttp3/internal/http/HttpEngine;ILokhttp3/Request;Lokhttp3/Connection;)V` @kind direct;
  #L24949e.  v5:= v10.`okhttp3.internal.http.HttpEngine.networkRequest` @type ^`okhttp3.Request` @kind object;
  #L2494a2.  call temp:= `proceed`(v4, v5) @signature `Lokhttp3/internal/http/HttpEngine$NetworkInterceptorChain;.proceed:(Lokhttp3/Request;)Lokhttp3/Response;` @kind virtual;
  #L2494a8.  v2:= temp @kind object;
  #L2494aa.  goto L249388;
  #L2494ae.  v4:= v10.`okhttp3.internal.http.HttpEngine.bufferedRequestBody` @type ^`okio.BufferedSink` @kind object;
  #L2494b2.  if v4 == 0 then goto L2494e0;
  #L2494b6.  v4:= v10.`okhttp3.internal.http.HttpEngine.bufferedRequestBody` @type ^`okio.BufferedSink` @kind object;
  #L2494ba.  call temp:= `buffer`(v4) @signature `Lokio/BufferedSink;.buffer:()Lokio/Buffer;` @kind interface;
  #L2494c0.  v4:= temp @kind object;
  #L2494c2.  call temp:= `size`(v4) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L2494c8.  v4:= temp @kind wide;
  #L2494ca.  v6:= 0L;
  #L2494ce.  v4:= lcmp(v4, v6);
  #L2494d2.  if v4 <= 0 then goto L2494e0;
  #L2494d6.  v4:= v10.`okhttp3.internal.http.HttpEngine.bufferedRequestBody` @type ^`okio.BufferedSink` @kind object;
  #L2494da.  call temp:= `emit`(v4) @signature `Lokio/BufferedSink;.emit:()Lokio/BufferedSink;` @kind interface;
  #L2494e0.  v4:= v10.`okhttp3.internal.http.HttpEngine.sentRequestMillis` @type ^`long` @kind wide;
  #L2494e4.  v4:= lcmp(v4, v8);
  #L2494e8.  if v4 != 0 then goto L249556;
  #L2494ec.  v4:= v10.`okhttp3.internal.http.HttpEngine.networkRequest` @type ^`okhttp3.Request` @kind object;
  #L2494f0.  call temp:= `contentLength`(v4) @signature `Lokhttp3/internal/http/OkHeaders;.contentLength:(Lokhttp3/Request;)J` @kind static;
  #L2494f6.  v4:= temp @kind wide;
  #L2494f8.  v4:= lcmp(v4, v8);
  #L2494fc.  if v4 != 0 then goto L249548;
  #L249500.  v4:= v10.`okhttp3.internal.http.HttpEngine.requestBodyOut` @type ^`okio.Sink` @kind object;
  #L249504.  v4:= instanceof @variable v4 @type ^`okhttp3.internal.http.RetryableSink` @kind boolean;
  #L249508.  if v4 == 0 then goto L249548;
  #L24950c.  v4:= v10.`okhttp3.internal.http.HttpEngine.requestBodyOut` @type ^`okio.Sink` @kind object;
  #L249510.  v4:= (`okhttp3.internal.http.RetryableSink`) v4 @kind object;
  #L249514.  call temp:= `contentLength`(v4) @signature `Lokhttp3/internal/http/RetryableSink;.contentLength:()J` @kind virtual;
  #L24951a.  v0:= temp @kind wide;
  #L24951c.  v4:= v10.`okhttp3.internal.http.HttpEngine.networkRequest` @type ^`okhttp3.Request` @kind object;
  #L249520.  call temp:= `newBuilder`(v4) @signature `Lokhttp3/Request;.newBuilder:()Lokhttp3/Request$Builder;` @kind virtual;
  #L249526.  v4:= temp @kind object;
  #L249528.  v5:= "Content-Length" @kind object;
  #L24952c.  call temp:= `toString`(v0) @signature `Ljava/lang/Long;.toString:(J)Ljava/lang/String;` @kind static;
  #L249532.  v6:= temp @kind object;
  #L249534.  call temp:= `header`(v4, v5, v6) @signature `Lokhttp3/Request$Builder;.header:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L24953a.  v4:= temp @kind object;
  #L24953c.  call temp:= `build`(v4) @signature `Lokhttp3/Request$Builder;.build:()Lokhttp3/Request;` @kind virtual;
  #L249542.  v4:= temp @kind object;
  #L249544.  v10.`okhttp3.internal.http.HttpEngine.networkRequest` @type ^`okhttp3.Request` := v4 @kind object;
  #L249548.  v4:= v10.`okhttp3.internal.http.HttpEngine.httpStream` @type ^`okhttp3.internal.http.HttpStream` @kind object;
  #L24954c.  v5:= v10.`okhttp3.internal.http.HttpEngine.networkRequest` @type ^`okhttp3.Request` @kind object;
  #L249550.  call `writeRequestHeaders`(v4, v5) @signature `Lokhttp3/internal/http/HttpStream;.writeRequestHeaders:(Lokhttp3/Request;)V` @kind interface;
  #L249556.  v4:= v10.`okhttp3.internal.http.HttpEngine.requestBodyOut` @type ^`okio.Sink` @kind object;
  #L24955a.  if v4 == 0 then goto L24958e;
  #L24955e.  v4:= v10.`okhttp3.internal.http.HttpEngine.bufferedRequestBody` @type ^`okio.BufferedSink` @kind object;
  #L249562.  if v4 == 0 then goto L24959a;
  #L249566.  v4:= v10.`okhttp3.internal.http.HttpEngine.bufferedRequestBody` @type ^`okio.BufferedSink` @kind object;
  #L24956a.  call `close`(v4) @signature `Lokio/BufferedSink;.close:()V` @kind interface;
  #L249570.  v4:= v10.`okhttp3.internal.http.HttpEngine.requestBodyOut` @type ^`okio.Sink` @kind object;
  #L249574.  v4:= instanceof @variable v4 @type ^`okhttp3.internal.http.RetryableSink` @kind boolean;
  #L249578.  if v4 == 0 then goto L24958e;
  #L24957c.  v5:= v10.`okhttp3.internal.http.HttpEngine.httpStream` @type ^`okhttp3.internal.http.HttpStream` @kind object;
  #L249580.  v4:= v10.`okhttp3.internal.http.HttpEngine.requestBodyOut` @type ^`okio.Sink` @kind object;
  #L249584.  v4:= (`okhttp3.internal.http.RetryableSink`) v4 @kind object;
  #L249588.  call `writeRequestBody`(v5, v4) @signature `Lokhttp3/internal/http/HttpStream;.writeRequestBody:(Lokhttp3/internal/http/RetryableSink;)V` @kind interface;
  #L24958e.  call temp:= `readNetworkResponse`(v10) @signature `Lokhttp3/internal/http/HttpEngine;.readNetworkResponse:()Lokhttp3/Response;` @kind direct;
  #L249594.  v2:= temp @kind object;
  #L249596.  goto L249388;
  #L24959a.  v4:= v10.`okhttp3.internal.http.HttpEngine.requestBodyOut` @type ^`okio.Sink` @kind object;
  #L24959e.  call `close`(v4) @signature `Lokio/Sink;.close:()V` @kind interface;
  #L2495a4.  goto L249570;
  #L2495a6.  v4:= v10.`okhttp3.internal.http.HttpEngine.cacheResponse` @type ^`okhttp3.Response` @kind object;
  #L2495aa.  call temp:= `body`(v4) @signature `Lokhttp3/Response;.body:()Lokhttp3/ResponseBody;` @kind virtual;
  #L2495b0.  v4:= temp @kind object;
  #L2495b2.  call `closeQuietly`(v4) @signature `Lokhttp3/internal/Util;.closeQuietly:(Ljava/io/Closeable;)V` @kind static;
  #L2495b8.  call temp:= `newBuilder`(v2) @signature `Lokhttp3/Response;.newBuilder:()Lokhttp3/Response$Builder;` @kind virtual;
  #L2495be.  v4:= temp @kind object;
  #L2495c0.  v5:= v10.`okhttp3.internal.http.HttpEngine.userRequest` @type ^`okhttp3.Request` @kind object;
  #L2495c4.  call temp:= `request`(v4, v5) @signature `Lokhttp3/Response$Builder;.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;` @kind virtual;
  #L2495ca.  v4:= temp @kind object;
  #L2495cc.  v5:= v10.`okhttp3.internal.http.HttpEngine.priorResponse` @type ^`okhttp3.Response` @kind object;
  #L2495d0.  call temp:= `stripBody`(v5) @signature `Lokhttp3/internal/http/HttpEngine;.stripBody:(Lokhttp3/Response;)Lokhttp3/Response;` @kind static;
  #L2495d6.  v5:= temp @kind object;
  #L2495d8.  call temp:= `priorResponse`(v4, v5) @signature `Lokhttp3/Response$Builder;.priorResponse:(Lokhttp3/Response;)Lokhttp3/Response$Builder;` @kind virtual;
  #L2495de.  v4:= temp @kind object;
  #L2495e0.  v5:= v10.`okhttp3.internal.http.HttpEngine.cacheResponse` @type ^`okhttp3.Response` @kind object;
  #L2495e4.  call temp:= `stripBody`(v5) @signature `Lokhttp3/internal/http/HttpEngine;.stripBody:(Lokhttp3/Response;)Lokhttp3/Response;` @kind static;
  #L2495ea.  v5:= temp @kind object;
  #L2495ec.  call temp:= `cacheResponse`(v4, v5) @signature `Lokhttp3/Response$Builder;.cacheResponse:(Lokhttp3/Response;)Lokhttp3/Response$Builder;` @kind virtual;
  #L2495f2.  v4:= temp @kind object;
  #L2495f4.  call temp:= `stripBody`(v2) @signature `Lokhttp3/internal/http/HttpEngine;.stripBody:(Lokhttp3/Response;)Lokhttp3/Response;` @kind static;
  #L2495fa.  v5:= temp @kind object;
  #L2495fc.  call temp:= `networkResponse`(v4, v5) @signature `Lokhttp3/Response$Builder;.networkResponse:(Lokhttp3/Response;)Lokhttp3/Response$Builder;` @kind virtual;
  #L249602.  v4:= temp @kind object;
  #L249604.  call temp:= `build`(v4) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L24960a.  v4:= temp @kind object;
  #L24960c.  v10.`okhttp3.internal.http.HttpEngine.userResponse` @type ^`okhttp3.Response` := v4 @kind object;
  #L249610.  v4:= v10.`okhttp3.internal.http.HttpEngine.userResponse` @type ^`okhttp3.Response` @kind object;
  #L249614.  call temp:= `hasBody`(v4) @signature `Lokhttp3/internal/http/HttpEngine;.hasBody:(Lokhttp3/Response;)Z` @kind static;
  #L24961a.  v4:= temp;
  #L24961c.  if v4 == 0 then goto L249340;
  #L249620.  call `maybeCache`(v10) @signature `Lokhttp3/internal/http/HttpEngine;.maybeCache:()V` @kind direct;
  #L249626.  v4:= v10.`okhttp3.internal.http.HttpEngine.storeRequest` @type ^`okhttp3.internal.http.CacheRequest` @kind object;
  #L24962a.  v5:= v10.`okhttp3.internal.http.HttpEngine.userResponse` @type ^`okhttp3.Response` @kind object;
  #L24962e.  call temp:= `cacheWritingResponse`(v10, v4, v5) @signature `Lokhttp3/internal/http/HttpEngine;.cacheWritingResponse:(Lokhttp3/internal/http/CacheRequest;Lokhttp3/Response;)Lokhttp3/Response;` @kind direct;
  #L249634.  v4:= temp @kind object;
  #L249636.  call temp:= `unzip`(v10, v4) @signature `Lokhttp3/internal/http/HttpEngine;.unzip:(Lokhttp3/Response;)Lokhttp3/Response;` @kind direct;
  #L24963c.  v4:= temp @kind object;
  #L24963e.  v10.`okhttp3.internal.http.HttpEngine.userResponse` @type ^`okhttp3.Response` := v4 @kind object;
  #L249642.  goto L249340;
}
procedure `void` `receiveHeaders`(`okhttp3.internal.http.HttpEngine` v3 @kind this, `okhttp3.Headers` v4 @kind object @name `headers`) @signature `Lokhttp3/internal/http/HttpEngine;.receiveHeaders:(Lokhttp3/Headers;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L249658.  v1:= v3.`okhttp3.internal.http.HttpEngine.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L24965c.  call temp:= `cookieJar`(v1) @signature `Lokhttp3/OkHttpClient;.cookieJar:()Lokhttp3/CookieJar;` @kind virtual;
  #L249662.  v1:= temp @kind object;
  #L249664.  v2:= `@@okhttp3.CookieJar.NO_COOKIES` @type ^`okhttp3.CookieJar` @kind object;
  #L249668.  if v1 != v2 then goto L24966e;
  #L24966c.  return @kind void;
  #L24966e.  v1:= v3.`okhttp3.internal.http.HttpEngine.userRequest` @type ^`okhttp3.Request` @kind object;
  #L249672.  call temp:= `url`(v1) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L249678.  v1:= temp @kind object;
  #L24967a.  call temp:= `parseAll`(v1, v4) @signature `Lokhttp3/Cookie;.parseAll:(Lokhttp3/HttpUrl;Lokhttp3/Headers;)Ljava/util/List;` @kind static;
  #L249680.  v0:= temp @kind object;
  #L249682.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L249688.  v1:= temp;
  #L24968a.  if v1 != 0 then goto L24966c;
  #L24968e.  v1:= v3.`okhttp3.internal.http.HttpEngine.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L249692.  call temp:= `cookieJar`(v1) @signature `Lokhttp3/OkHttpClient;.cookieJar:()Lokhttp3/CookieJar;` @kind virtual;
  #L249698.  v1:= temp @kind object;
  #L24969a.  v2:= v3.`okhttp3.internal.http.HttpEngine.userRequest` @type ^`okhttp3.Request` @kind object;
  #L24969e.  call temp:= `url`(v2) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L2496a4.  v2:= temp @kind object;
  #L2496a6.  call `saveFromResponse`(v1, v2, v0) @signature `Lokhttp3/CookieJar;.saveFromResponse:(Lokhttp3/HttpUrl;Ljava/util/List;)V` @kind interface;
  #L2496ac.  goto L24966c;
}
procedure `okhttp3.internal.http.HttpEngine` `recover`(`okhttp3.internal.http.HttpEngine` v1 @kind this, `java.io.IOException` v2 @kind object @name `e`, `boolean` v3 @name `routeException`) @signature `Lokhttp3/internal/http/HttpEngine;.recover:(Ljava/io/IOException;Z)Lokhttp3/internal/http/HttpEngine;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2496c0.  v0:= v1.`okhttp3.internal.http.HttpEngine.requestBodyOut` @type ^`okio.Sink` @kind object;
  #L2496c4.  call temp:= `recover`(v1, v2, v3, v0) @signature `Lokhttp3/internal/http/HttpEngine;.recover:(Ljava/io/IOException;ZLokio/Sink;)Lokhttp3/internal/http/HttpEngine;` @kind virtual;
  #L2496ca.  v0:= temp @kind object;
  #L2496cc.  return v0 @kind object;
}
procedure `okhttp3.internal.http.HttpEngine` `recover`(`okhttp3.internal.http.HttpEngine` v9 @kind this, `java.io.IOException` v10 @kind object @name `e`, `boolean` v11 @name `routeException`, `okio.Sink` v12 @kind object @name `requestBodyOut`) @signature `Lokhttp3/internal/http/HttpEngine;.recover:(Ljava/io/IOException;ZLokio/Sink;)Lokhttp3/internal/http/HttpEngine;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L2496e0.  v0:= 0I;
  #L2496e2.  v1:= v9.`okhttp3.internal.http.HttpEngine.streamAllocation` @type ^`okhttp3.internal.http.StreamAllocation` @kind object;
  #L2496e6.  call `streamFailed`(v1, v10) @signature `Lokhttp3/internal/http/StreamAllocation;.streamFailed:(Ljava/io/IOException;)V` @kind virtual;
  #L2496ec.  v1:= v9.`okhttp3.internal.http.HttpEngine.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2496f0.  call temp:= `retryOnConnectionFailure`(v1) @signature `Lokhttp3/OkHttpClient;.retryOnConnectionFailure:()Z` @kind virtual;
  #L2496f6.  v1:= temp;
  #L2496f8.  if v1 != 0 then goto L2496fe;
  #L2496fc.  return v0 @kind object;
  #L2496fe.  if v12 == 0 then goto L24970a;
  #L249702.  v1:= instanceof @variable v12 @type ^`okhttp3.internal.http.RetryableSink` @kind boolean;
  #L249706.  if v1 == 0 then goto L2496fc;
  #L24970a.  call temp:= `isRecoverable`(v9, v10, v11) @signature `Lokhttp3/internal/http/HttpEngine;.isRecoverable:(Ljava/io/IOException;Z)Z` @kind direct;
  #L249710.  v1:= temp;
  #L249712.  if v1 == 0 then goto L2496fc;
  #L249716.  v1:= v9.`okhttp3.internal.http.HttpEngine.streamAllocation` @type ^`okhttp3.internal.http.StreamAllocation` @kind object;
  #L24971a.  call temp:= `hasMoreRoutes`(v1) @signature `Lokhttp3/internal/http/StreamAllocation;.hasMoreRoutes:()Z` @kind virtual;
  #L249720.  v1:= temp;
  #L249722.  if v1 == 0 then goto L2496fc;
  #L249726.  call temp:= `close`(v9) @signature `Lokhttp3/internal/http/HttpEngine;.close:()Lokhttp3/internal/http/StreamAllocation;` @kind virtual;
  #L24972c.  v6:= temp @kind object;
  #L24972e.  v0:= new `okhttp3.internal.http.HttpEngine`;
  #L249732.  v1:= v9.`okhttp3.internal.http.HttpEngine.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L249736.  v2:= v9.`okhttp3.internal.http.HttpEngine.userRequest` @type ^`okhttp3.Request` @kind object;
  #L24973a.  v3:= v9.`okhttp3.internal.http.HttpEngine.bufferRequestBody` @type ^`boolean` @kind boolean;
  #L24973e.  v4:= v9.`okhttp3.internal.http.HttpEngine.callerWritesRequestBody` @type ^`boolean` @kind boolean;
  #L249742.  v5:= v9.`okhttp3.internal.http.HttpEngine.forWebSocket` @type ^`boolean` @kind boolean;
  #L249746.  v7:= v12 @kind object;
  #L249748.  v7:= (`okhttp3.internal.http.RetryableSink`) v7 @kind object;
  #L24974c.  v8:= v9.`okhttp3.internal.http.HttpEngine.priorResponse` @type ^`okhttp3.Response` @kind object;
  #L249750.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lokhttp3/internal/http/HttpEngine;.<init>:(Lokhttp3/OkHttpClient;Lokhttp3/Request;ZZZLokhttp3/internal/http/StreamAllocation;Lokhttp3/internal/http/RetryableSink;Lokhttp3/Response;)V` @kind direct;
  #L249756.  goto L2496fc;
}
procedure `void` `releaseStreamAllocation`(`okhttp3.internal.http.HttpEngine` v1 @kind this) @signature `Lokhttp3/internal/http/HttpEngine;.releaseStreamAllocation:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L249768.  v0:= v1.`okhttp3.internal.http.HttpEngine.streamAllocation` @type ^`okhttp3.internal.http.StreamAllocation` @kind object;
  #L24976c.  call `release`(v0) @signature `Lokhttp3/internal/http/StreamAllocation;.release:()V` @kind virtual;
  #L249772.  return @kind void;
}
procedure `boolean` `sameConnection`(`okhttp3.internal.http.HttpEngine` v3 @kind this, `okhttp3.HttpUrl` v4 @kind object @name `followUp`) @signature `Lokhttp3/internal/http/HttpEngine;.sameConnection:(Lokhttp3/HttpUrl;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L249784.  v1:= v3.`okhttp3.internal.http.HttpEngine.userRequest` @type ^`okhttp3.Request` @kind object;
  #L249788.  call temp:= `url`(v1) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L24978e.  v0:= temp @kind object;
  #L249790.  call temp:= `host`(v0) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L249796.  v1:= temp @kind object;
  #L249798.  call temp:= `host`(v4) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L24979e.  v2:= temp @kind object;
  #L2497a0.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2497a6.  v1:= temp;
  #L2497a8.  if v1 == 0 then goto L2497e0;
  #L2497ac.  call temp:= `port`(v0) @signature `Lokhttp3/HttpUrl;.port:()I` @kind virtual;
  #L2497b2.  v1:= temp;
  #L2497b4.  call temp:= `port`(v4) @signature `Lokhttp3/HttpUrl;.port:()I` @kind virtual;
  #L2497ba.  v2:= temp;
  #L2497bc.  if v1 != v2 then goto L2497e0;
  #L2497c0.  call temp:= `scheme`(v0) @signature `Lokhttp3/HttpUrl;.scheme:()Ljava/lang/String;` @kind virtual;
  #L2497c6.  v1:= temp @kind object;
  #L2497c8.  call temp:= `scheme`(v4) @signature `Lokhttp3/HttpUrl;.scheme:()Ljava/lang/String;` @kind virtual;
  #L2497ce.  v2:= temp @kind object;
  #L2497d0.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2497d6.  v1:= temp;
  #L2497d8.  if v1 == 0 then goto L2497e0;
  #L2497dc.  v1:= 1I;
  #L2497de.  return v1;
  #L2497e0.  v1:= 0I;
  #L2497e2.  goto L2497de;
}
procedure `void` `sendRequest`(`okhttp3.internal.http.HttpEngine` v12 @kind this) @signature `Lokhttp3/internal/http/HttpEngine;.sendRequest:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L2497f4.  v8:= v12.`okhttp3.internal.http.HttpEngine.cacheStrategy` @type ^`okhttp3.internal.http.CacheStrategy` @kind object;
  #L2497f8.  if v8 == 0 then goto L2497fe;
  #L2497fc.  return @kind void;
  #L2497fe.  v8:= v12.`okhttp3.internal.http.HttpEngine.httpStream` @type ^`okhttp3.internal.http.HttpStream` @kind object;
  #L249802.  if v8 == 0 then goto L249812;
  #L249806.  v8:= new `java.lang.IllegalStateException`;
  #L24980a.  call `<init>`(v8) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L249810.  throw v8;
  #L249812.  v8:= v12.`okhttp3.internal.http.HttpEngine.userRequest` @type ^`okhttp3.Request` @kind object;
  #L249816.  call temp:= `networkRequest`(v12, v8) @signature `Lokhttp3/internal/http/HttpEngine;.networkRequest:(Lokhttp3/Request;)Lokhttp3/Request;` @kind direct;
  #L24981c.  v1:= temp @kind object;
  #L24981e.  v8:= `@@okhttp3.internal.Internal.instance` @type ^`okhttp3.internal.Internal` @kind object;
  #L249822.  v9:= v12.`okhttp3.internal.http.HttpEngine.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L249826.  call temp:= `internalCache`(v8, v9) @signature `Lokhttp3/internal/Internal;.internalCache:(Lokhttp3/OkHttpClient;)Lokhttp3/internal/InternalCache;` @kind virtual;
  #L24982c.  v6:= temp @kind object;
  #L24982e.  if v6 == 0 then goto L24992e;
  #L249832.  call temp:= `get`(v6, v1) @signature `Lokhttp3/internal/InternalCache;.get:(Lokhttp3/Request;)Lokhttp3/Response;` @kind interface;
  #L249838.  v0:= temp @kind object;
  #L24983a.  call temp:= `currentTimeMillis`() @signature `Ljava/lang/System;.currentTimeMillis:()J` @kind static;
  #L249840.  v4:= temp @kind wide;
  #L249842.  v8:= new `okhttp3.internal.http.CacheStrategy$Factory`;
  #L249846.  call `<init>`(v8, v4, v1, v0) @signature `Lokhttp3/internal/http/CacheStrategy$Factory;.<init>:(JLokhttp3/Request;Lokhttp3/Response;)V` @kind direct;
  #L24984c.  call temp:= `get`(v8) @signature `Lokhttp3/internal/http/CacheStrategy$Factory;.get:()Lokhttp3/internal/http/CacheStrategy;` @kind virtual;
  #L249852.  v8:= temp @kind object;
  #L249854.  v12.`okhttp3.internal.http.HttpEngine.cacheStrategy` @type ^`okhttp3.internal.http.CacheStrategy` := v8 @kind object;
  #L249858.  v8:= v12.`okhttp3.internal.http.HttpEngine.cacheStrategy` @type ^`okhttp3.internal.http.CacheStrategy` @kind object;
  #L24985c.  v8:= v8.`okhttp3.internal.http.CacheStrategy.networkRequest` @type ^`okhttp3.Request` @kind object;
  #L249860.  v12.`okhttp3.internal.http.HttpEngine.networkRequest` @type ^`okhttp3.Request` := v8 @kind object;
  #L249864.  v8:= v12.`okhttp3.internal.http.HttpEngine.cacheStrategy` @type ^`okhttp3.internal.http.CacheStrategy` @kind object;
  #L249868.  v8:= v8.`okhttp3.internal.http.CacheStrategy.cacheResponse` @type ^`okhttp3.Response` @kind object;
  #L24986c.  v12.`okhttp3.internal.http.HttpEngine.cacheResponse` @type ^`okhttp3.Response` := v8 @kind object;
  #L249870.  if v6 == 0 then goto L24987e;
  #L249874.  v8:= v12.`okhttp3.internal.http.HttpEngine.cacheStrategy` @type ^`okhttp3.internal.http.CacheStrategy` @kind object;
  #L249878.  call `trackResponse`(v6, v8) @signature `Lokhttp3/internal/InternalCache;.trackResponse:(Lokhttp3/internal/http/CacheStrategy;)V` @kind interface;
  #L24987e.  if v0 == 0 then goto L249898;
  #L249882.  v8:= v12.`okhttp3.internal.http.HttpEngine.cacheResponse` @type ^`okhttp3.Response` @kind object;
  #L249886.  if v8 != 0 then goto L249898;
  #L24988a.  call temp:= `body`(v0) @signature `Lokhttp3/Response;.body:()Lokhttp3/ResponseBody;` @kind virtual;
  #L249890.  v8:= temp @kind object;
  #L249892.  call `closeQuietly`(v8) @signature `Lokhttp3/internal/Util;.closeQuietly:(Ljava/io/Closeable;)V` @kind static;
  #L249898.  v8:= v12.`okhttp3.internal.http.HttpEngine.networkRequest` @type ^`okhttp3.Request` @kind object;
  #L24989c.  if v8 != 0 then goto L249932;
  #L2498a0.  v8:= v12.`okhttp3.internal.http.HttpEngine.cacheResponse` @type ^`okhttp3.Response` @kind object;
  #L2498a4.  if v8 != 0 then goto L249932;
  #L2498a8.  v8:= new `okhttp3.Response$Builder`;
  #L2498ac.  call `<init>`(v8) @signature `Lokhttp3/Response$Builder;.<init>:()V` @kind direct;
  #L2498b2.  v9:= v12.`okhttp3.internal.http.HttpEngine.userRequest` @type ^`okhttp3.Request` @kind object;
  #L2498b6.  call temp:= `request`(v8, v9) @signature `Lokhttp3/Response$Builder;.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;` @kind virtual;
  #L2498bc.  v8:= temp @kind object;
  #L2498be.  v9:= v12.`okhttp3.internal.http.HttpEngine.priorResponse` @type ^`okhttp3.Response` @kind object;
  #L2498c2.  call temp:= `stripBody`(v9) @signature `Lokhttp3/internal/http/HttpEngine;.stripBody:(Lokhttp3/Response;)Lokhttp3/Response;` @kind static;
  #L2498c8.  v9:= temp @kind object;
  #L2498ca.  call temp:= `priorResponse`(v8, v9) @signature `Lokhttp3/Response$Builder;.priorResponse:(Lokhttp3/Response;)Lokhttp3/Response$Builder;` @kind virtual;
  #L2498d0.  v8:= temp @kind object;
  #L2498d2.  v9:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L2498d6.  call temp:= `protocol`(v8, v9) @signature `Lokhttp3/Response$Builder;.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @kind virtual;
  #L2498dc.  v8:= temp @kind object;
  #L2498de.  v9:= 504I;
  #L2498e2.  call temp:= `code`(v8, v9) @signature `Lokhttp3/Response$Builder;.code:(I)Lokhttp3/Response$Builder;` @kind virtual;
  #L2498e8.  v8:= temp @kind object;
  #L2498ea.  v9:= "Unsatisfiable Request (only-if-cached)" @kind object;
  #L2498ee.  call temp:= `message`(v8, v9) @signature `Lokhttp3/Response$Builder;.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @kind virtual;
  #L2498f4.  v8:= temp @kind object;
  #L2498f6.  v9:= `@@okhttp3.internal.http.HttpEngine.EMPTY_BODY` @type ^`okhttp3.ResponseBody` @kind object;
  #L2498fa.  call temp:= `body`(v8, v9) @signature `Lokhttp3/Response$Builder;.body:(Lokhttp3/ResponseBody;)Lokhttp3/Response$Builder;` @kind virtual;
  #L249900.  v8:= temp @kind object;
  #L249902.  v10:= v12.`okhttp3.internal.http.HttpEngine.sentRequestMillis` @type ^`long` @kind wide;
  #L249906.  call temp:= `sentRequestAtMillis`(v8, v10) @signature `Lokhttp3/Response$Builder;.sentRequestAtMillis:(J)Lokhttp3/Response$Builder;` @kind virtual;
  #L24990c.  v8:= temp @kind object;
  #L24990e.  call temp:= `currentTimeMillis`() @signature `Ljava/lang/System;.currentTimeMillis:()J` @kind static;
  #L249914.  v10:= temp @kind wide;
  #L249916.  call temp:= `receivedResponseAtMillis`(v8, v10) @signature `Lokhttp3/Response$Builder;.receivedResponseAtMillis:(J)Lokhttp3/Response$Builder;` @kind virtual;
  #L24991c.  v8:= temp @kind object;
  #L24991e.  call temp:= `build`(v8) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L249924.  v8:= temp @kind object;
  #L249926.  v12.`okhttp3.internal.http.HttpEngine.userResponse` @type ^`okhttp3.Response` := v8 @kind object;
  #L24992a.  goto L2497fc;
  #L24992e.  v0:= 0I;
  #L249930.  goto L24983a;
  #L249932.  v8:= v12.`okhttp3.internal.http.HttpEngine.networkRequest` @type ^`okhttp3.Request` @kind object;
  #L249936.  if v8 != 0 then goto L24999a;
  #L24993a.  v8:= v12.`okhttp3.internal.http.HttpEngine.cacheResponse` @type ^`okhttp3.Response` @kind object;
  #L24993e.  call temp:= `newBuilder`(v8) @signature `Lokhttp3/Response;.newBuilder:()Lokhttp3/Response$Builder;` @kind virtual;
  #L249944.  v8:= temp @kind object;
  #L249946.  v9:= v12.`okhttp3.internal.http.HttpEngine.userRequest` @type ^`okhttp3.Request` @kind object;
  #L24994a.  call temp:= `request`(v8, v9) @signature `Lokhttp3/Response$Builder;.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;` @kind virtual;
  #L249950.  v8:= temp @kind object;
  #L249952.  v9:= v12.`okhttp3.internal.http.HttpEngine.priorResponse` @type ^`okhttp3.Response` @kind object;
  #L249956.  call temp:= `stripBody`(v9) @signature `Lokhttp3/internal/http/HttpEngine;.stripBody:(Lokhttp3/Response;)Lokhttp3/Response;` @kind static;
  #L24995c.  v9:= temp @kind object;
  #L24995e.  call temp:= `priorResponse`(v8, v9) @signature `Lokhttp3/Response$Builder;.priorResponse:(Lokhttp3/Response;)Lokhttp3/Response$Builder;` @kind virtual;
  #L249964.  v8:= temp @kind object;
  #L249966.  v9:= v12.`okhttp3.internal.http.HttpEngine.cacheResponse` @type ^`okhttp3.Response` @kind object;
  #L24996a.  call temp:= `stripBody`(v9) @signature `Lokhttp3/internal/http/HttpEngine;.stripBody:(Lokhttp3/Response;)Lokhttp3/Response;` @kind static;
  #L249970.  v9:= temp @kind object;
  #L249972.  call temp:= `cacheResponse`(v8, v9) @signature `Lokhttp3/Response$Builder;.cacheResponse:(Lokhttp3/Response;)Lokhttp3/Response$Builder;` @kind virtual;
  #L249978.  v8:= temp @kind object;
  #L24997a.  call temp:= `build`(v8) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L249980.  v8:= temp @kind object;
  #L249982.  v12.`okhttp3.internal.http.HttpEngine.userResponse` @type ^`okhttp3.Response` := v8 @kind object;
  #L249986.  v8:= v12.`okhttp3.internal.http.HttpEngine.userResponse` @type ^`okhttp3.Response` @kind object;
  #L24998a.  call temp:= `unzip`(v12, v8) @signature `Lokhttp3/internal/http/HttpEngine;.unzip:(Lokhttp3/Response;)Lokhttp3/Response;` @kind direct;
  #L249990.  v8:= temp @kind object;
  #L249992.  v12.`okhttp3.internal.http.HttpEngine.userResponse` @type ^`okhttp3.Response` := v8 @kind object;
  #L249996.  goto L2497fc;
  #L24999a.  v7:= 0I;
  #L24999c.  call temp:= `connect`(v12) @signature `Lokhttp3/internal/http/HttpEngine;.connect:()Lokhttp3/internal/http/HttpStream;` @kind direct;
  #L2499a2.  v8:= temp @kind object;
  #L2499a4.  v12.`okhttp3.internal.http.HttpEngine.httpStream` @type ^`okhttp3.internal.http.HttpStream` := v8 @kind object;
  #L2499a8.  v8:= v12.`okhttp3.internal.http.HttpEngine.httpStream` @type ^`okhttp3.internal.http.HttpStream` @kind object;
  #L2499ac.  call `setHttpEngine`(v8, v12) @signature `Lokhttp3/internal/http/HttpStream;.setHttpEngine:(Lokhttp3/internal/http/HttpEngine;)V` @kind interface;
  #L2499b2.  call temp:= `writeRequestHeadersEagerly`(v12) @signature `Lokhttp3/internal/http/HttpEngine;.writeRequestHeadersEagerly:()Z` @kind direct;
  #L2499b8.  v8:= temp;
  #L2499ba.  if v8 == 0 then goto L249a30;
  #L2499be.  call temp:= `contentLength`(v1) @signature `Lokhttp3/internal/http/OkHeaders;.contentLength:(Lokhttp3/Request;)J` @kind static;
  #L2499c4.  v2:= temp @kind wide;
  #L2499c6.  v8:= v12.`okhttp3.internal.http.HttpEngine.bufferRequestBody` @type ^`boolean` @kind boolean;
  #L2499ca.  if v8 == 0 then goto L249a5c;
  #L2499ce.  v8:= 2147483647L;
  #L2499d4.  v8:= lcmp(v2, v8);
  #L2499d8.  if v8 <= 0 then goto L249a06;
  #L2499dc.  v8:= new `java.lang.IllegalStateException`;
  #L2499e0.  v9:= "Use setFixedLengthStreamingMode() or setChunkedStreamingMode() for requests larger than 2 GiB." @kind object;
  #L2499e4.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2499ea.  throw v8;
  #L2499ec.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2499ee.  if v7 != 0 then goto L249a04;
  #L2499f2.  if v0 == 0 then goto L249a04;
  #L2499f6.  call temp:= `body`(v0) @signature `Lokhttp3/Response;.body:()Lokhttp3/ResponseBody;` @kind virtual;
  #L2499fc.  v9:= temp @kind object;
  #L2499fe.  call `closeQuietly`(v9) @signature `Lokhttp3/internal/Util;.closeQuietly:(Ljava/io/Closeable;)V` @kind static;
  #L249a04.  throw v8;
  #L249a06.  v8:= -1L;
  #L249a0a.  v8:= lcmp(v2, v8);
  #L249a0e.  if v8 == 0 then goto L249a4c;
  #L249a12.  v8:= v12.`okhttp3.internal.http.HttpEngine.httpStream` @type ^`okhttp3.internal.http.HttpStream` @kind object;
  #L249a16.  v9:= v12.`okhttp3.internal.http.HttpEngine.networkRequest` @type ^`okhttp3.Request` @kind object;
  #L249a1a.  call `writeRequestHeaders`(v8, v9) @signature `Lokhttp3/internal/http/HttpStream;.writeRequestHeaders:(Lokhttp3/Request;)V` @kind interface;
  #L249a20.  v8:= new `okhttp3.internal.http.RetryableSink`;
  #L249a24.  v9:= (`int`) v2 @kind l2i;
  #L249a26.  call `<init>`(v8, v9) @signature `Lokhttp3/internal/http/RetryableSink;.<init>:(I)V` @kind direct;
  #L249a2c.  v12.`okhttp3.internal.http.HttpEngine.requestBodyOut` @type ^`okio.Sink` := v8 @kind object;
  #L249a30.  v7:= 1I;
  #L249a32.  if v7 != 0 then goto L2497fc;
  #L249a36.  if v0 == 0 then goto L2497fc;
  #L249a3a.  call temp:= `body`(v0) @signature `Lokhttp3/Response;.body:()Lokhttp3/ResponseBody;` @kind virtual;
  #L249a40.  v8:= temp @kind object;
  #L249a42.  call `closeQuietly`(v8) @signature `Lokhttp3/internal/Util;.closeQuietly:(Ljava/io/Closeable;)V` @kind static;
  #L249a48.  goto L2497fc;
  #L249a4c.  v8:= new `okhttp3.internal.http.RetryableSink`;
  #L249a50.  call `<init>`(v8) @signature `Lokhttp3/internal/http/RetryableSink;.<init>:()V` @kind direct;
  #L249a56.  v12.`okhttp3.internal.http.HttpEngine.requestBodyOut` @type ^`okio.Sink` := v8 @kind object;
  #L249a5a.  goto L249a30;
  #L249a5c.  v8:= v12.`okhttp3.internal.http.HttpEngine.httpStream` @type ^`okhttp3.internal.http.HttpStream` @kind object;
  #L249a60.  v9:= v12.`okhttp3.internal.http.HttpEngine.networkRequest` @type ^`okhttp3.Request` @kind object;
  #L249a64.  call `writeRequestHeaders`(v8, v9) @signature `Lokhttp3/internal/http/HttpStream;.writeRequestHeaders:(Lokhttp3/Request;)V` @kind interface;
  #L249a6a.  v8:= v12.`okhttp3.internal.http.HttpEngine.httpStream` @type ^`okhttp3.internal.http.HttpStream` @kind object;
  #L249a6e.  v9:= v12.`okhttp3.internal.http.HttpEngine.networkRequest` @type ^`okhttp3.Request` @kind object;
  #L249a72.  call temp:= `createRequestBody`(v8, v9, v2) @signature `Lokhttp3/internal/http/HttpStream;.createRequestBody:(Lokhttp3/Request;J)Lokio/Sink;` @kind interface;
  #L249a78.  v8:= temp @kind object;
  #L249a7a.  v12.`okhttp3.internal.http.HttpEngine.requestBodyOut` @type ^`okio.Sink` := v8 @kind object;
  #L249a7e.  goto L249a30;
  catch `java.lang.Throwable` @[L24999c..L2499ec] goto L2499ec;
  catch `java.lang.Throwable` @[L249a12..L249a30] goto L2499ec;
  catch `java.lang.Throwable` @[L249a4c..L249a7e] goto L2499ec;
}
procedure `void` `writingRequestHeaders`(`okhttp3.internal.http.HttpEngine` v4 @kind this) @signature `Lokhttp3/internal/http/HttpEngine;.writingRequestHeaders:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L249aac.  v0:= v4.`okhttp3.internal.http.HttpEngine.sentRequestMillis` @type ^`long` @kind wide;
  #L249ab0.  v2:= -1L;
  #L249ab4.  v0:= lcmp(v0, v2);
  #L249ab8.  if v0 == 0 then goto L249ac8;
  #L249abc.  v0:= new `java.lang.IllegalStateException`;
  #L249ac0.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L249ac6.  throw v0;
  #L249ac8.  call temp:= `currentTimeMillis`() @signature `Ljava/lang/System;.currentTimeMillis:()J` @kind static;
  #L249ace.  v0:= temp @kind wide;
  #L249ad0.  v4.`okhttp3.internal.http.HttpEngine.sentRequestMillis` @type ^`long` := v0 @kind wide;
  #L249ad4.  return @kind void;
}
