record `okhttp3.internal.http.RetryableSink` @kind class @AccessFlag PUBLIC_FINAL extends `okio.Sink` @kind interface {
  `boolean` `okhttp3.internal.http.RetryableSink.closed` @AccessFlag PRIVATE;
  `okio.Buffer` `okhttp3.internal.http.RetryableSink.content` @AccessFlag PRIVATE_FINAL;
  `int` `okhttp3.internal.http.RetryableSink.limit` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.http.RetryableSink` v1 @kind this) @signature `Lokhttp3/internal/http/RetryableSink;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L30f3d0.  v0:= -1I;
  #L30f3d2.  call `<init>`(v1, v0) @signature `Lokhttp3/internal/http/RetryableSink;.<init>:(I)V` @kind direct;
  #L30f3d8.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http.RetryableSink` v1 @kind this, `int` v2 @name `limit`) @signature `Lokhttp3/internal/http/RetryableSink;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L30f3ec.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L30f3f2.  v0:= new `okio.Buffer`;
  #L30f3f6.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L30f3fc.  v1.`okhttp3.internal.http.RetryableSink.content` @type ^`okio.Buffer` := v0 @kind object;
  #L30f400.  v1.`okhttp3.internal.http.RetryableSink.limit` @type ^`int` := v2;
  #L30f404.  return @kind void;
}
procedure `void` `close`(`okhttp3.internal.http.RetryableSink` v4 @kind this) @signature `Lokhttp3/internal/http/RetryableSink;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L30f418.  v0:= v4.`okhttp3.internal.http.RetryableSink.closed` @type ^`boolean` @kind boolean;
  #L30f41c.  if v0 == 0 then goto L30f422;
  #L30f420.  return @kind void;
  #L30f422.  v0:= 1I;
  #L30f424.  v4.`okhttp3.internal.http.RetryableSink.closed` @type ^`boolean` := v0 @kind boolean;
  #L30f428.  v0:= v4.`okhttp3.internal.http.RetryableSink.content` @type ^`okio.Buffer` @kind object;
  #L30f42c.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L30f432.  v0:= temp @kind wide;
  #L30f434.  v2:= v4.`okhttp3.internal.http.RetryableSink.limit` @type ^`int`;
  #L30f438.  v2:= (`long`) v2 @kind i2l;
  #L30f43a.  v0:= lcmp(v0, v2);
  #L30f43e.  if v0 >= 0 then goto L30f420;
  #L30f442.  v0:= new `java.net.ProtocolException`;
  #L30f446.  v1:= new `java.lang.StringBuilder`;
  #L30f44a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30f450.  v2:= "content-length promised " @kind object;
  #L30f454.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30f45a.  v1:= temp @kind object;
  #L30f45c.  v2:= v4.`okhttp3.internal.http.RetryableSink.limit` @type ^`int`;
  #L30f460.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L30f466.  v1:= temp @kind object;
  #L30f468.  v2:= " bytes, but received " @kind object;
  #L30f46c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30f472.  v1:= temp @kind object;
  #L30f474.  v2:= v4.`okhttp3.internal.http.RetryableSink.content` @type ^`okio.Buffer` @kind object;
  #L30f478.  call temp:= `size`(v2) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L30f47e.  v2:= temp @kind wide;
  #L30f480.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L30f486.  v1:= temp @kind object;
  #L30f488.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30f48e.  v1:= temp @kind object;
  #L30f490.  call `<init>`(v0, v1) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30f496.  throw v0;
}
procedure `long` `contentLength`(`okhttp3.internal.http.RetryableSink` v2 @kind this) @signature `Lokhttp3/internal/http/RetryableSink;.contentLength:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L30f4a8.  v0:= v2.`okhttp3.internal.http.RetryableSink.content` @type ^`okio.Buffer` @kind object;
  #L30f4ac.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L30f4b2.  v0:= temp @kind wide;
  #L30f4b4.  return v0 @kind wide;
}
procedure `void` `flush`(`okhttp3.internal.http.RetryableSink` v0 @kind this) @signature `Lokhttp3/internal/http/RetryableSink;.flush:()V` @AccessFlag PUBLIC {
    temp;

  #L30f4c8.  return @kind void;
}
procedure `okio.Timeout` `timeout`(`okhttp3.internal.http.RetryableSink` v1 @kind this) @signature `Lokhttp3/internal/http/RetryableSink;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30f4dc.  v0:= `@@okio.Timeout.NONE` @type ^`okio.Timeout` @kind object;
  #L30f4e0.  return v0 @kind object;
}
procedure `void` `write`(`okhttp3.internal.http.RetryableSink` v6 @kind this, `okio.Buffer` v7 @kind object @name `source`, `long` v8 @name `byteCount`) @signature `Lokhttp3/internal/http/RetryableSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L30f4f4.  v0:= v6.`okhttp3.internal.http.RetryableSink.closed` @type ^`boolean` @kind boolean;
  #L30f4f8.  if v0 == 0 then goto L30f50c;
  #L30f4fc.  v0:= new `java.lang.IllegalStateException`;
  #L30f500.  v1:= "closed" @kind object;
  #L30f504.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30f50a.  throw v0;
  #L30f50c.  call temp:= `size`(v7) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L30f512.  v0:= temp @kind wide;
  #L30f514.  v2:= 0L;
  #L30f518.  v4:= v8 @kind wide;
  #L30f51a.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokhttp3/internal/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L30f520.  v0:= v6.`okhttp3.internal.http.RetryableSink.limit` @type ^`int`;
  #L30f524.  v1:= -1I;
  #L30f526.  if v0 == v1 then goto L30f588;
  #L30f52a.  v0:= v6.`okhttp3.internal.http.RetryableSink.content` @type ^`okio.Buffer` @kind object;
  #L30f52e.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L30f534.  v0:= temp @kind wide;
  #L30f536.  v2:= v6.`okhttp3.internal.http.RetryableSink.limit` @type ^`int`;
  #L30f53a.  v2:= (`long`) v2 @kind i2l;
  #L30f53c.  v2:= v2 - v8 @kind long;
  #L30f53e.  v0:= lcmp(v0, v2);
  #L30f542.  if v0 <= 0 then goto L30f588;
  #L30f546.  v0:= new `java.net.ProtocolException`;
  #L30f54a.  v1:= new `java.lang.StringBuilder`;
  #L30f54e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30f554.  v2:= "exceeded content-length limit of " @kind object;
  #L30f558.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30f55e.  v1:= temp @kind object;
  #L30f560.  v2:= v6.`okhttp3.internal.http.RetryableSink.limit` @type ^`int`;
  #L30f564.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L30f56a.  v1:= temp @kind object;
  #L30f56c.  v2:= " bytes" @kind object;
  #L30f570.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30f576.  v1:= temp @kind object;
  #L30f578.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30f57e.  v1:= temp @kind object;
  #L30f580.  call `<init>`(v0, v1) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30f586.  throw v0;
  #L30f588.  v0:= v6.`okhttp3.internal.http.RetryableSink.content` @type ^`okio.Buffer` @kind object;
  #L30f58c.  call `write`(v0, v7, v8) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L30f592.  return @kind void;
}
procedure `void` `writeToSocket`(`okhttp3.internal.http.RetryableSink` v6 @kind this, `okio.Sink` v7 @kind object @name `socketOut`) @signature `Lokhttp3/internal/http/RetryableSink;.writeToSocket:(Lokio/Sink;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L30f5a4.  v1:= new `okio.Buffer`;
  #L30f5a8.  call `<init>`(v1) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L30f5ae.  v0:= v6.`okhttp3.internal.http.RetryableSink.content` @type ^`okio.Buffer` @kind object;
  #L30f5b2.  v2:= 0L;
  #L30f5b6.  v4:= v6.`okhttp3.internal.http.RetryableSink.content` @type ^`okio.Buffer` @kind object;
  #L30f5ba.  call temp:= `size`(v4) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L30f5c0.  v4:= temp @kind wide;
  #L30f5c2.  call temp:= `copyTo`(v0, v1, v2, v4) @signature `Lokio/Buffer;.copyTo:(Lokio/Buffer;JJ)Lokio/Buffer;` @kind virtual;
  #L30f5c8.  call temp:= `size`(v1) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L30f5ce.  v2:= temp @kind wide;
  #L30f5d0.  call `write`(v7, v1, v2) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L30f5d6.  return @kind void;
}
