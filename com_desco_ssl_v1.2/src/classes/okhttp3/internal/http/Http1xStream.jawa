record `okhttp3.internal.http.Http1xStream` @kind class @AccessFlag PUBLIC_FINAL extends `okhttp3.internal.http.HttpStream` @kind interface {
  `okhttp3.internal.http.HttpEngine` `okhttp3.internal.http.Http1xStream.httpEngine` @AccessFlag PRIVATE;
  `okio.BufferedSink` `okhttp3.internal.http.Http1xStream.sink` @AccessFlag PRIVATE_FINAL;
  `okio.BufferedSource` `okhttp3.internal.http.Http1xStream.source` @AccessFlag PRIVATE_FINAL;
  `int` `okhttp3.internal.http.Http1xStream.state` @AccessFlag PRIVATE;
  `okhttp3.internal.http.StreamAllocation` `okhttp3.internal.http.Http1xStream.streamAllocation` @AccessFlag PRIVATE_FINAL;
}
global `int` `@@okhttp3.internal.http.Http1xStream.STATE_CLOSED` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@okhttp3.internal.http.Http1xStream.STATE_IDLE` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@okhttp3.internal.http.Http1xStream.STATE_OPEN_REQUEST_BODY` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@okhttp3.internal.http.Http1xStream.STATE_OPEN_RESPONSE_BODY` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@okhttp3.internal.http.Http1xStream.STATE_READING_RESPONSE_BODY` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@okhttp3.internal.http.Http1xStream.STATE_READ_RESPONSE_HEADERS` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@okhttp3.internal.http.Http1xStream.STATE_WRITING_REQUEST_BODY` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.internal.http.Http1xStream` v1 @kind this, `okhttp3.internal.http.StreamAllocation` v2 @kind object @name `streamAllocation`, `okio.BufferedSource` v3 @kind object @name `source`, `okio.BufferedSink` v4 @kind object @name `sink`) @signature `Lokhttp3/internal/http/Http1xStream;.<init>:(Lokhttp3/internal/http/StreamAllocation;Lokio/BufferedSource;Lokio/BufferedSink;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L30dccc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L30dcd2.  v0:= 0I;
  #L30dcd4.  v1.`okhttp3.internal.http.Http1xStream.state` @type ^`int` := v0;
  #L30dcd8.  v1.`okhttp3.internal.http.Http1xStream.streamAllocation` @type ^`okhttp3.internal.http.StreamAllocation` := v2 @kind object;
  #L30dcdc.  v1.`okhttp3.internal.http.Http1xStream.source` @type ^`okio.BufferedSource` := v3 @kind object;
  #L30dce0.  v1.`okhttp3.internal.http.Http1xStream.sink` @type ^`okio.BufferedSink` := v4 @kind object;
  #L30dce4.  return @kind void;
}
procedure `okio.BufferedSink` `access$300`(`okhttp3.internal.http.Http1xStream` v1 @kind object @name `x0`) @signature `Lokhttp3/internal/http/Http1xStream;.access$300:(Lokhttp3/internal/http/Http1xStream;)Lokio/BufferedSink;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L30dcf8.  v0:= v1.`okhttp3.internal.http.Http1xStream.sink` @type ^`okio.BufferedSink` @kind object;
  #L30dcfc.  return v0 @kind object;
}
procedure `void` `access$400`(`okhttp3.internal.http.Http1xStream` v0 @kind object @name `x0`, `okio.ForwardingTimeout` v1 @kind object @name `x1`) @signature `Lokhttp3/internal/http/Http1xStream;.access$400:(Lokhttp3/internal/http/Http1xStream;Lokio/ForwardingTimeout;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L30dd10.  call `detachTimeout`(v0, v1) @signature `Lokhttp3/internal/http/Http1xStream;.detachTimeout:(Lokio/ForwardingTimeout;)V` @kind direct;
  #L30dd16.  return @kind void;
}
procedure `int` `access$500`(`okhttp3.internal.http.Http1xStream` v1 @kind object @name `x0`) @signature `Lokhttp3/internal/http/Http1xStream;.access$500:(Lokhttp3/internal/http/Http1xStream;)I` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L30dd28.  v0:= v1.`okhttp3.internal.http.Http1xStream.state` @type ^`int`;
  #L30dd2c.  return v0;
}
procedure `int` `access$502`(`okhttp3.internal.http.Http1xStream` v0 @kind object @name `x0`, `int` v1 @name `x1`) @signature `Lokhttp3/internal/http/Http1xStream;.access$502:(Lokhttp3/internal/http/Http1xStream;I)I` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L30dd40.  v0.`okhttp3.internal.http.Http1xStream.state` @type ^`int` := v1;
  #L30dd44.  return v1;
}
procedure `okio.BufferedSource` `access$600`(`okhttp3.internal.http.Http1xStream` v1 @kind object @name `x0`) @signature `Lokhttp3/internal/http/Http1xStream;.access$600:(Lokhttp3/internal/http/Http1xStream;)Lokio/BufferedSource;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L30dd58.  v0:= v1.`okhttp3.internal.http.Http1xStream.source` @type ^`okio.BufferedSource` @kind object;
  #L30dd5c.  return v0 @kind object;
}
procedure `okhttp3.internal.http.StreamAllocation` `access$700`(`okhttp3.internal.http.Http1xStream` v1 @kind object @name `x0`) @signature `Lokhttp3/internal/http/Http1xStream;.access$700:(Lokhttp3/internal/http/Http1xStream;)Lokhttp3/internal/http/StreamAllocation;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L30dd70.  v0:= v1.`okhttp3.internal.http.Http1xStream.streamAllocation` @type ^`okhttp3.internal.http.StreamAllocation` @kind object;
  #L30dd74.  return v0 @kind object;
}
procedure `void` `detachTimeout`(`okhttp3.internal.http.Http1xStream` v2 @kind this, `okio.ForwardingTimeout` v3 @kind object @name `timeout`) @signature `Lokhttp3/internal/http/Http1xStream;.detachTimeout:(Lokio/ForwardingTimeout;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L30dd88.  call temp:= `delegate`(v3) @signature `Lokio/ForwardingTimeout;.delegate:()Lokio/Timeout;` @kind virtual;
  #L30dd8e.  v0:= temp @kind object;
  #L30dd90.  v1:= `@@okio.Timeout.NONE` @type ^`okio.Timeout` @kind object;
  #L30dd94.  call temp:= `setDelegate`(v3, v1) @signature `Lokio/ForwardingTimeout;.setDelegate:(Lokio/Timeout;)Lokio/ForwardingTimeout;` @kind virtual;
  #L30dd9a.  call temp:= `clearDeadline`(v0) @signature `Lokio/Timeout;.clearDeadline:()Lokio/Timeout;` @kind virtual;
  #L30dda0.  call temp:= `clearTimeout`(v0) @signature `Lokio/Timeout;.clearTimeout:()Lokio/Timeout;` @kind virtual;
  #L30dda6.  return @kind void;
}
procedure `okio.Source` `getTransferStream`(`okhttp3.internal.http.Http1xStream` v4 @kind this, `okhttp3.Response` v5 @kind object @name `response`) @signature `Lokhttp3/internal/http/Http1xStream;.getTransferStream:(Lokhttp3/Response;)Lokio/Source;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L30ddb8.  call temp:= `hasBody`(v5) @signature `Lokhttp3/internal/http/HttpEngine;.hasBody:(Lokhttp3/Response;)Z` @kind static;
  #L30ddbe.  v2:= temp;
  #L30ddc0.  if v2 != 0 then goto L30ddd2;
  #L30ddc4.  v2:= 0L;
  #L30ddc8.  call temp:= `newFixedLengthSource`(v4, v2) @signature `Lokhttp3/internal/http/Http1xStream;.newFixedLengthSource:(J)Lokio/Source;` @kind virtual;
  #L30ddce.  v2:= temp @kind object;
  #L30ddd0.  return v2 @kind object;
  #L30ddd2.  v2:= "chunked" @kind object;
  #L30ddd6.  v3:= "Transfer-Encoding" @kind object;
  #L30ddda.  call temp:= `header`(v5, v3) @signature `Lokhttp3/Response;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L30dde0.  v3:= temp @kind object;
  #L30dde2.  call temp:= `equalsIgnoreCase`(v2, v3) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L30dde8.  v2:= temp;
  #L30ddea.  if v2 == 0 then goto L30ddfc;
  #L30ddee.  v2:= v4.`okhttp3.internal.http.Http1xStream.httpEngine` @type ^`okhttp3.internal.http.HttpEngine` @kind object;
  #L30ddf2.  call temp:= `newChunkedSource`(v4, v2) @signature `Lokhttp3/internal/http/Http1xStream;.newChunkedSource:(Lokhttp3/internal/http/HttpEngine;)Lokio/Source;` @kind virtual;
  #L30ddf8.  v2:= temp @kind object;
  #L30ddfa.  goto L30ddd0;
  #L30ddfc.  call temp:= `contentLength`(v5) @signature `Lokhttp3/internal/http/OkHeaders;.contentLength:(Lokhttp3/Response;)J` @kind static;
  #L30de02.  v0:= temp @kind wide;
  #L30de04.  v2:= -1L;
  #L30de08.  v2:= lcmp(v0, v2);
  #L30de0c.  if v2 == 0 then goto L30de1a;
  #L30de10.  call temp:= `newFixedLengthSource`(v4, v0) @signature `Lokhttp3/internal/http/Http1xStream;.newFixedLengthSource:(J)Lokio/Source;` @kind virtual;
  #L30de16.  v2:= temp @kind object;
  #L30de18.  goto L30ddd0;
  #L30de1a.  call temp:= `newUnknownLengthSource`(v4) @signature `Lokhttp3/internal/http/Http1xStream;.newUnknownLengthSource:()Lokio/Source;` @kind virtual;
  #L30de20.  v2:= temp @kind object;
  #L30de22.  goto L30ddd0;
}
procedure `void` `cancel`(`okhttp3.internal.http.Http1xStream` v2 @kind this) @signature `Lokhttp3/internal/http/Http1xStream;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L30de34.  v1:= v2.`okhttp3.internal.http.Http1xStream.streamAllocation` @type ^`okhttp3.internal.http.StreamAllocation` @kind object;
  #L30de38.  call temp:= `connection`(v1) @signature `Lokhttp3/internal/http/StreamAllocation;.connection:()Lokhttp3/internal/io/RealConnection;` @kind virtual;
  #L30de3e.  v0:= temp @kind object;
  #L30de40.  if v0 == 0 then goto L30de4a;
  #L30de44.  call `cancel`(v0) @signature `Lokhttp3/internal/io/RealConnection;.cancel:()V` @kind virtual;
  #L30de4a.  return @kind void;
}
procedure `okio.Sink` `createRequestBody`(`okhttp3.internal.http.Http1xStream` v2 @kind this, `okhttp3.Request` v3 @kind object @name `request`, `long` v4 @name `contentLength`) @signature `Lokhttp3/internal/http/Http1xStream;.createRequestBody:(Lokhttp3/Request;J)Lokio/Sink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L30de5c.  v0:= "chunked" @kind object;
  #L30de60.  v1:= "Transfer-Encoding" @kind object;
  #L30de64.  call temp:= `header`(v3, v1) @signature `Lokhttp3/Request;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L30de6a.  v1:= temp @kind object;
  #L30de6c.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L30de72.  v0:= temp;
  #L30de74.  if v0 == 0 then goto L30de82;
  #L30de78.  call temp:= `newChunkedSink`(v2) @signature `Lokhttp3/internal/http/Http1xStream;.newChunkedSink:()Lokio/Sink;` @kind virtual;
  #L30de7e.  v0:= temp @kind object;
  #L30de80.  return v0 @kind object;
  #L30de82.  v0:= -1L;
  #L30de86.  v0:= lcmp(v4, v0);
  #L30de8a.  if v0 == 0 then goto L30de98;
  #L30de8e.  call temp:= `newFixedLengthSink`(v2, v4) @signature `Lokhttp3/internal/http/Http1xStream;.newFixedLengthSink:(J)Lokio/Sink;` @kind virtual;
  #L30de94.  v0:= temp @kind object;
  #L30de96.  goto L30de80;
  #L30de98.  v0:= new `java.lang.IllegalStateException`;
  #L30de9c.  v1:= "Cannot stream a request body without chunked encoding or a known content length!" @kind object;
  #L30dea0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30dea6.  throw v0;
}
procedure `void` `finishRequest`(`okhttp3.internal.http.Http1xStream` v1 @kind this) @signature `Lokhttp3/internal/http/Http1xStream;.finishRequest:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30deb8.  v0:= v1.`okhttp3.internal.http.Http1xStream.sink` @type ^`okio.BufferedSink` @kind object;
  #L30debc.  call `flush`(v0) @signature `Lokio/BufferedSink;.flush:()V` @kind interface;
  #L30dec2.  return @kind void;
}
procedure `boolean` `isClosed`(`okhttp3.internal.http.Http1xStream` v2 @kind this) @signature `Lokhttp3/internal/http/Http1xStream;.isClosed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L30ded4.  v0:= v2.`okhttp3.internal.http.Http1xStream.state` @type ^`int`;
  #L30ded8.  v1:= 6I;
  #L30deda.  if v0 != v1 then goto L30dee2;
  #L30dede.  v0:= 1I;
  #L30dee0.  return v0;
  #L30dee2.  v0:= 0I;
  #L30dee4.  goto L30dee0;
}
procedure `okio.Sink` `newChunkedSink`(`okhttp3.internal.http.Http1xStream` v3 @kind this) @signature `Lokhttp3/internal/http/Http1xStream;.newChunkedSink:()Lokio/Sink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L30def8.  v0:= v3.`okhttp3.internal.http.Http1xStream.state` @type ^`int`;
  #L30defc.  v1:= 1I;
  #L30defe.  if v0 == v1 then goto L30df38;
  #L30df02.  v0:= new `java.lang.IllegalStateException`;
  #L30df06.  v1:= new `java.lang.StringBuilder`;
  #L30df0a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30df10.  v2:= "state: " @kind object;
  #L30df14.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30df1a.  v1:= temp @kind object;
  #L30df1c.  v2:= v3.`okhttp3.internal.http.Http1xStream.state` @type ^`int`;
  #L30df20.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L30df26.  v1:= temp @kind object;
  #L30df28.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30df2e.  v1:= temp @kind object;
  #L30df30.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30df36.  throw v0;
  #L30df38.  v0:= 2I;
  #L30df3a.  v3.`okhttp3.internal.http.Http1xStream.state` @type ^`int` := v0;
  #L30df3e.  v0:= new `okhttp3.internal.http.Http1xStream$ChunkedSink`;
  #L30df42.  v1:= 0I;
  #L30df44.  call `<init>`(v0, v3, v1) @signature `Lokhttp3/internal/http/Http1xStream$ChunkedSink;.<init>:(Lokhttp3/internal/http/Http1xStream;Lokhttp3/internal/http/Http1xStream$1;)V` @kind direct;
  #L30df4a.  return v0 @kind object;
}
procedure `okio.Source` `newChunkedSource`(`okhttp3.internal.http.Http1xStream` v3 @kind this, `okhttp3.internal.http.HttpEngine` v4 @kind object @name `httpEngine`) @signature `Lokhttp3/internal/http/Http1xStream;.newChunkedSource:(Lokhttp3/internal/http/HttpEngine;)Lokio/Source;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L30df5c.  v0:= v3.`okhttp3.internal.http.Http1xStream.state` @type ^`int`;
  #L30df60.  v1:= 4I;
  #L30df62.  if v0 == v1 then goto L30df9c;
  #L30df66.  v0:= new `java.lang.IllegalStateException`;
  #L30df6a.  v1:= new `java.lang.StringBuilder`;
  #L30df6e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30df74.  v2:= "state: " @kind object;
  #L30df78.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30df7e.  v1:= temp @kind object;
  #L30df80.  v2:= v3.`okhttp3.internal.http.Http1xStream.state` @type ^`int`;
  #L30df84.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L30df8a.  v1:= temp @kind object;
  #L30df8c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30df92.  v1:= temp @kind object;
  #L30df94.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30df9a.  throw v0;
  #L30df9c.  v0:= 5I;
  #L30df9e.  v3.`okhttp3.internal.http.Http1xStream.state` @type ^`int` := v0;
  #L30dfa2.  v0:= new `okhttp3.internal.http.Http1xStream$ChunkedSource`;
  #L30dfa6.  call `<init>`(v0, v3, v4) @signature `Lokhttp3/internal/http/Http1xStream$ChunkedSource;.<init>:(Lokhttp3/internal/http/Http1xStream;Lokhttp3/internal/http/HttpEngine;)V` @kind direct;
  #L30dfac.  return v0 @kind object;
}
procedure `okio.Sink` `newFixedLengthSink`(`okhttp3.internal.http.Http1xStream` v3 @kind this, `long` v4 @name `contentLength`) @signature `Lokhttp3/internal/http/Http1xStream;.newFixedLengthSink:(J)Lokio/Sink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L30dfc0.  v0:= v3.`okhttp3.internal.http.Http1xStream.state` @type ^`int`;
  #L30dfc4.  v1:= 1I;
  #L30dfc6.  if v0 == v1 then goto L30e000;
  #L30dfca.  v0:= new `java.lang.IllegalStateException`;
  #L30dfce.  v1:= new `java.lang.StringBuilder`;
  #L30dfd2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30dfd8.  v2:= "state: " @kind object;
  #L30dfdc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30dfe2.  v1:= temp @kind object;
  #L30dfe4.  v2:= v3.`okhttp3.internal.http.Http1xStream.state` @type ^`int`;
  #L30dfe8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L30dfee.  v1:= temp @kind object;
  #L30dff0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30dff6.  v1:= temp @kind object;
  #L30dff8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30dffe.  throw v0;
  #L30e000.  v0:= 2I;
  #L30e002.  v3.`okhttp3.internal.http.Http1xStream.state` @type ^`int` := v0;
  #L30e006.  v0:= new `okhttp3.internal.http.Http1xStream$FixedLengthSink`;
  #L30e00a.  v1:= 0I;
  #L30e00c.  call `<init>`(v0, v3, v4, v1) @signature `Lokhttp3/internal/http/Http1xStream$FixedLengthSink;.<init>:(Lokhttp3/internal/http/Http1xStream;JLokhttp3/internal/http/Http1xStream$1;)V` @kind direct;
  #L30e012.  return v0 @kind object;
}
procedure `okio.Source` `newFixedLengthSource`(`okhttp3.internal.http.Http1xStream` v3 @kind this, `long` v4 @name `length`) @signature `Lokhttp3/internal/http/Http1xStream;.newFixedLengthSource:(J)Lokio/Source;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L30e024.  v0:= v3.`okhttp3.internal.http.Http1xStream.state` @type ^`int`;
  #L30e028.  v1:= 4I;
  #L30e02a.  if v0 == v1 then goto L30e064;
  #L30e02e.  v0:= new `java.lang.IllegalStateException`;
  #L30e032.  v1:= new `java.lang.StringBuilder`;
  #L30e036.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30e03c.  v2:= "state: " @kind object;
  #L30e040.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30e046.  v1:= temp @kind object;
  #L30e048.  v2:= v3.`okhttp3.internal.http.Http1xStream.state` @type ^`int`;
  #L30e04c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L30e052.  v1:= temp @kind object;
  #L30e054.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30e05a.  v1:= temp @kind object;
  #L30e05c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30e062.  throw v0;
  #L30e064.  v0:= 5I;
  #L30e066.  v3.`okhttp3.internal.http.Http1xStream.state` @type ^`int` := v0;
  #L30e06a.  v0:= new `okhttp3.internal.http.Http1xStream$FixedLengthSource`;
  #L30e06e.  call `<init>`(v0, v3, v4) @signature `Lokhttp3/internal/http/Http1xStream$FixedLengthSource;.<init>:(Lokhttp3/internal/http/Http1xStream;J)V` @kind direct;
  #L30e074.  return v0 @kind object;
}
procedure `okio.Source` `newUnknownLengthSource`(`okhttp3.internal.http.Http1xStream` v3 @kind this) @signature `Lokhttp3/internal/http/Http1xStream;.newUnknownLengthSource:()Lokio/Source;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L30e088.  v0:= v3.`okhttp3.internal.http.Http1xStream.state` @type ^`int`;
  #L30e08c.  v1:= 4I;
  #L30e08e.  if v0 == v1 then goto L30e0c8;
  #L30e092.  v0:= new `java.lang.IllegalStateException`;
  #L30e096.  v1:= new `java.lang.StringBuilder`;
  #L30e09a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30e0a0.  v2:= "state: " @kind object;
  #L30e0a4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30e0aa.  v1:= temp @kind object;
  #L30e0ac.  v2:= v3.`okhttp3.internal.http.Http1xStream.state` @type ^`int`;
  #L30e0b0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L30e0b6.  v1:= temp @kind object;
  #L30e0b8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30e0be.  v1:= temp @kind object;
  #L30e0c0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30e0c6.  throw v0;
  #L30e0c8.  v0:= v3.`okhttp3.internal.http.Http1xStream.streamAllocation` @type ^`okhttp3.internal.http.StreamAllocation` @kind object;
  #L30e0cc.  if v0 != 0 then goto L30e0e0;
  #L30e0d0.  v0:= new `java.lang.IllegalStateException`;
  #L30e0d4.  v1:= "streamAllocation == null" @kind object;
  #L30e0d8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30e0de.  throw v0;
  #L30e0e0.  v0:= 5I;
  #L30e0e2.  v3.`okhttp3.internal.http.Http1xStream.state` @type ^`int` := v0;
  #L30e0e6.  v0:= v3.`okhttp3.internal.http.Http1xStream.streamAllocation` @type ^`okhttp3.internal.http.StreamAllocation` @kind object;
  #L30e0ea.  call `noNewStreams`(v0) @signature `Lokhttp3/internal/http/StreamAllocation;.noNewStreams:()V` @kind virtual;
  #L30e0f0.  v0:= new `okhttp3.internal.http.Http1xStream$UnknownLengthSource`;
  #L30e0f4.  v1:= 0I;
  #L30e0f6.  call `<init>`(v0, v3, v1) @signature `Lokhttp3/internal/http/Http1xStream$UnknownLengthSource;.<init>:(Lokhttp3/internal/http/Http1xStream;Lokhttp3/internal/http/Http1xStream$1;)V` @kind direct;
  #L30e0fc.  return v0 @kind object;
}
procedure `okhttp3.ResponseBody` `openResponseBody`(`okhttp3.internal.http.Http1xStream` v4 @kind this, `okhttp3.Response` v5 @kind object @name `response`) @signature `Lokhttp3/internal/http/Http1xStream;.openResponseBody:(Lokhttp3/Response;)Lokhttp3/ResponseBody;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L30e110.  call temp:= `getTransferStream`(v4, v5) @signature `Lokhttp3/internal/http/Http1xStream;.getTransferStream:(Lokhttp3/Response;)Lokio/Source;` @kind direct;
  #L30e116.  v0:= temp @kind object;
  #L30e118.  v1:= new `okhttp3.internal.http.RealResponseBody`;
  #L30e11c.  call temp:= `headers`(v5) @signature `Lokhttp3/Response;.headers:()Lokhttp3/Headers;` @kind virtual;
  #L30e122.  v2:= temp @kind object;
  #L30e124.  call temp:= `buffer`(v0) @signature `Lokio/Okio;.buffer:(Lokio/Source;)Lokio/BufferedSource;` @kind static;
  #L30e12a.  v3:= temp @kind object;
  #L30e12c.  call `<init>`(v1, v2, v3) @signature `Lokhttp3/internal/http/RealResponseBody;.<init>:(Lokhttp3/Headers;Lokio/BufferedSource;)V` @kind direct;
  #L30e132.  return v1 @kind object;
}
procedure `okhttp3.Headers` `readHeaders`(`okhttp3.internal.http.Http1xStream` v3 @kind this) @signature `Lokhttp3/internal/http/Http1xStream;.readHeaders:()Lokhttp3/Headers;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L30e144.  v0:= new `okhttp3.Headers$Builder`;
  #L30e148.  call `<init>`(v0) @signature `Lokhttp3/Headers$Builder;.<init>:()V` @kind direct;
  #L30e14e.  v2:= v3.`okhttp3.internal.http.Http1xStream.source` @type ^`okio.BufferedSource` @kind object;
  #L30e152.  call temp:= `readUtf8LineStrict`(v2) @signature `Lokio/BufferedSource;.readUtf8LineStrict:()Ljava/lang/String;` @kind interface;
  #L30e158.  v1:= temp @kind object;
  #L30e15a.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L30e160.  v2:= temp;
  #L30e162.  if v2 == 0 then goto L30e172;
  #L30e166.  v2:= `@@okhttp3.internal.Internal.instance` @type ^`okhttp3.internal.Internal` @kind object;
  #L30e16a.  call `addLenient`(v2, v0, v1) @signature `Lokhttp3/internal/Internal;.addLenient:(Lokhttp3/Headers$Builder;Ljava/lang/String;)V` @kind virtual;
  #L30e170.  goto L30e14e;
  #L30e172.  call temp:= `build`(v0) @signature `Lokhttp3/Headers$Builder;.build:()Lokhttp3/Headers;` @kind virtual;
  #L30e178.  v2:= temp @kind object;
  #L30e17a.  return v2 @kind object;
}
procedure `okhttp3.Response$Builder` `readResponse`(`okhttp3.internal.http.Http1xStream` v7 @kind this) @signature `Lokhttp3/internal/http/Http1xStream;.readResponse:()Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L30e18c.  v4:= v7.`okhttp3.internal.http.Http1xStream.state` @type ^`int`;
  #L30e190.  v5:= 1I;
  #L30e192.  if v4 == v5 then goto L30e1d6;
  #L30e196.  v4:= v7.`okhttp3.internal.http.Http1xStream.state` @type ^`int`;
  #L30e19a.  v5:= 3I;
  #L30e19c.  if v4 == v5 then goto L30e1d6;
  #L30e1a0.  v4:= new `java.lang.IllegalStateException`;
  #L30e1a4.  v5:= new `java.lang.StringBuilder`;
  #L30e1a8.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30e1ae.  v6:= "state: " @kind object;
  #L30e1b2.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30e1b8.  v5:= temp @kind object;
  #L30e1ba.  v6:= v7.`okhttp3.internal.http.Http1xStream.state` @type ^`int`;
  #L30e1be.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L30e1c4.  v5:= temp @kind object;
  #L30e1c6.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30e1cc.  v5:= temp @kind object;
  #L30e1ce.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30e1d4.  throw v4;
  #L30e1d6.  v4:= v7.`okhttp3.internal.http.Http1xStream.source` @type ^`okio.BufferedSource` @kind object;
  #L30e1da.  call temp:= `readUtf8LineStrict`(v4) @signature `Lokio/BufferedSource;.readUtf8LineStrict:()Ljava/lang/String;` @kind interface;
  #L30e1e0.  v4:= temp @kind object;
  #L30e1e2.  call temp:= `parse`(v4) @signature `Lokhttp3/internal/http/StatusLine;.parse:(Ljava/lang/String;)Lokhttp3/internal/http/StatusLine;` @kind static;
  #L30e1e8.  v3:= temp @kind object;
  #L30e1ea.  v4:= new `okhttp3.Response$Builder`;
  #L30e1ee.  call `<init>`(v4) @signature `Lokhttp3/Response$Builder;.<init>:()V` @kind direct;
  #L30e1f4.  v5:= v3.`okhttp3.internal.http.StatusLine.protocol` @type ^`okhttp3.Protocol` @kind object;
  #L30e1f8.  call temp:= `protocol`(v4, v5) @signature `Lokhttp3/Response$Builder;.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @kind virtual;
  #L30e1fe.  v4:= temp @kind object;
  #L30e200.  v5:= v3.`okhttp3.internal.http.StatusLine.code` @type ^`int`;
  #L30e204.  call temp:= `code`(v4, v5) @signature `Lokhttp3/Response$Builder;.code:(I)Lokhttp3/Response$Builder;` @kind virtual;
  #L30e20a.  v4:= temp @kind object;
  #L30e20c.  v5:= v3.`okhttp3.internal.http.StatusLine.message` @type ^`java.lang.String` @kind object;
  #L30e210.  call temp:= `message`(v4, v5) @signature `Lokhttp3/Response$Builder;.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @kind virtual;
  #L30e216.  v4:= temp @kind object;
  #L30e218.  call temp:= `readHeaders`(v7) @signature `Lokhttp3/internal/http/Http1xStream;.readHeaders:()Lokhttp3/Headers;` @kind virtual;
  #L30e21e.  v5:= temp @kind object;
  #L30e220.  call temp:= `headers`(v4, v5) @signature `Lokhttp3/Response$Builder;.headers:(Lokhttp3/Headers;)Lokhttp3/Response$Builder;` @kind virtual;
  #L30e226.  v2:= temp @kind object;
  #L30e228.  v4:= v3.`okhttp3.internal.http.StatusLine.code` @type ^`int`;
  #L30e22c.  v5:= 100I;
  #L30e230.  if v4 == v5 then goto L30e1d6;
  #L30e234.  v4:= 4I;
  #L30e236.  v7.`okhttp3.internal.http.Http1xStream.state` @type ^`int` := v4;
  #L30e23a.  return v2 @kind object;
  #L30e23c.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L30e23e.  v1:= new `java.io.IOException`;
  #L30e242.  v4:= new `java.lang.StringBuilder`;
  #L30e246.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30e24c.  v5:= "unexpected end of stream on " @kind object;
  #L30e250.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30e256.  v4:= temp @kind object;
  #L30e258.  v5:= v7.`okhttp3.internal.http.Http1xStream.streamAllocation` @type ^`okhttp3.internal.http.StreamAllocation` @kind object;
  #L30e25c.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30e262.  v4:= temp @kind object;
  #L30e264.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30e26a.  v4:= temp @kind object;
  #L30e26c.  call `<init>`(v1, v4) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30e272.  call temp:= `initCause`(v1, v0) @signature `Ljava/io/IOException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L30e278.  throw v1;
  catch `java.io.EOFException` @[L30e1d6..L30e23a] goto L30e23c;
}
procedure `okhttp3.Response$Builder` `readResponseHeaders`(`okhttp3.internal.http.Http1xStream` v1 @kind this) @signature `Lokhttp3/internal/http/Http1xStream;.readResponseHeaders:()Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30e29c.  call temp:= `readResponse`(v1) @signature `Lokhttp3/internal/http/Http1xStream;.readResponse:()Lokhttp3/Response$Builder;` @kind virtual;
  #L30e2a2.  v0:= temp @kind object;
  #L30e2a4.  return v0 @kind object;
}
procedure `void` `setHttpEngine`(`okhttp3.internal.http.Http1xStream` v0 @kind this, `okhttp3.internal.http.HttpEngine` v1 @kind object @name `httpEngine`) @signature `Lokhttp3/internal/http/Http1xStream;.setHttpEngine:(Lokhttp3/internal/http/HttpEngine;)V` @AccessFlag PUBLIC {
    temp;

  #L30e2b8.  v0.`okhttp3.internal.http.Http1xStream.httpEngine` @type ^`okhttp3.internal.http.HttpEngine` := v1 @kind object;
  #L30e2bc.  return @kind void;
}
procedure `void` `writeRequest`(`okhttp3.internal.http.Http1xStream` v5 @kind this, `okhttp3.Headers` v6 @kind object @name `headers`, `java.lang.String` v7 @kind object @name `requestLine`) @signature `Lokhttp3/internal/http/Http1xStream;.writeRequest:(Lokhttp3/Headers;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L30e2d0.  v2:= v5.`okhttp3.internal.http.Http1xStream.state` @type ^`int`;
  #L30e2d4.  if v2 == 0 then goto L30e30e;
  #L30e2d8.  v2:= new `java.lang.IllegalStateException`;
  #L30e2dc.  v3:= new `java.lang.StringBuilder`;
  #L30e2e0.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30e2e6.  v4:= "state: " @kind object;
  #L30e2ea.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30e2f0.  v3:= temp @kind object;
  #L30e2f2.  v4:= v5.`okhttp3.internal.http.Http1xStream.state` @type ^`int`;
  #L30e2f6.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L30e2fc.  v3:= temp @kind object;
  #L30e2fe.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30e304.  v3:= temp @kind object;
  #L30e306.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30e30c.  throw v2;
  #L30e30e.  v2:= v5.`okhttp3.internal.http.Http1xStream.sink` @type ^`okio.BufferedSink` @kind object;
  #L30e312.  call temp:= `writeUtf8`(v2, v7) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L30e318.  v2:= temp @kind object;
  #L30e31a.  v3:= "\r\n" @kind object;
  #L30e31e.  call temp:= `writeUtf8`(v2, v3) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L30e324.  v0:= 0I;
  #L30e326.  call temp:= `size`(v6) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L30e32c.  v1:= temp;
  #L30e32e.  if v0 >= v1 then goto L30e372;
  #L30e332.  v2:= v5.`okhttp3.internal.http.Http1xStream.sink` @type ^`okio.BufferedSink` @kind object;
  #L30e336.  call temp:= `name`(v6, v0) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L30e33c.  v3:= temp @kind object;
  #L30e33e.  call temp:= `writeUtf8`(v2, v3) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L30e344.  v2:= temp @kind object;
  #L30e346.  v3:= ": " @kind object;
  #L30e34a.  call temp:= `writeUtf8`(v2, v3) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L30e350.  v2:= temp @kind object;
  #L30e352.  call temp:= `value`(v6, v0) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @kind virtual;
  #L30e358.  v3:= temp @kind object;
  #L30e35a.  call temp:= `writeUtf8`(v2, v3) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L30e360.  v2:= temp @kind object;
  #L30e362.  v3:= "\r\n" @kind object;
  #L30e366.  call temp:= `writeUtf8`(v2, v3) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L30e36c.  v0:= v0 + 1;
  #L30e370.  goto L30e32e;
  #L30e372.  v2:= v5.`okhttp3.internal.http.Http1xStream.sink` @type ^`okio.BufferedSink` @kind object;
  #L30e376.  v3:= "\r\n" @kind object;
  #L30e37a.  call temp:= `writeUtf8`(v2, v3) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L30e380.  v2:= 1I;
  #L30e382.  v5.`okhttp3.internal.http.Http1xStream.state` @type ^`int` := v2;
  #L30e386.  return @kind void;
}
procedure `void` `writeRequestBody`(`okhttp3.internal.http.Http1xStream` v3 @kind this, `okhttp3.internal.http.RetryableSink` v4 @kind object @name `requestBody`) @signature `Lokhttp3/internal/http/Http1xStream;.writeRequestBody:(Lokhttp3/internal/http/RetryableSink;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L30e398.  v0:= v3.`okhttp3.internal.http.Http1xStream.state` @type ^`int`;
  #L30e39c.  v1:= 1I;
  #L30e39e.  if v0 == v1 then goto L30e3d8;
  #L30e3a2.  v0:= new `java.lang.IllegalStateException`;
  #L30e3a6.  v1:= new `java.lang.StringBuilder`;
  #L30e3aa.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30e3b0.  v2:= "state: " @kind object;
  #L30e3b4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L30e3ba.  v1:= temp @kind object;
  #L30e3bc.  v2:= v3.`okhttp3.internal.http.Http1xStream.state` @type ^`int`;
  #L30e3c0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L30e3c6.  v1:= temp @kind object;
  #L30e3c8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30e3ce.  v1:= temp @kind object;
  #L30e3d0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L30e3d6.  throw v0;
  #L30e3d8.  v0:= 3I;
  #L30e3da.  v3.`okhttp3.internal.http.Http1xStream.state` @type ^`int` := v0;
  #L30e3de.  v0:= v3.`okhttp3.internal.http.Http1xStream.sink` @type ^`okio.BufferedSink` @kind object;
  #L30e3e2.  call `writeToSocket`(v4, v0) @signature `Lokhttp3/internal/http/RetryableSink;.writeToSocket:(Lokio/Sink;)V` @kind virtual;
  #L30e3e8.  return @kind void;
}
procedure `void` `writeRequestHeaders`(`okhttp3.internal.http.Http1xStream` v2 @kind this, `okhttp3.Request` v3 @kind object @name `request`) @signature `Lokhttp3/internal/http/Http1xStream;.writeRequestHeaders:(Lokhttp3/Request;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L30e3fc.  v1:= v2.`okhttp3.internal.http.Http1xStream.httpEngine` @type ^`okhttp3.internal.http.HttpEngine` @kind object;
  #L30e400.  call `writingRequestHeaders`(v1) @signature `Lokhttp3/internal/http/HttpEngine;.writingRequestHeaders:()V` @kind virtual;
  #L30e406.  v1:= v2.`okhttp3.internal.http.Http1xStream.httpEngine` @type ^`okhttp3.internal.http.HttpEngine` @kind object;
  #L30e40a.  call temp:= `getConnection`(v1) @signature `Lokhttp3/internal/http/HttpEngine;.getConnection:()Lokhttp3/Connection;` @kind virtual;
  #L30e410.  v1:= temp @kind object;
  #L30e412.  call temp:= `route`(v1) @signature `Lokhttp3/Connection;.route:()Lokhttp3/Route;` @kind interface;
  #L30e418.  v1:= temp @kind object;
  #L30e41a.  call temp:= `proxy`(v1) @signature `Lokhttp3/Route;.proxy:()Ljava/net/Proxy;` @kind virtual;
  #L30e420.  v1:= temp @kind object;
  #L30e422.  call temp:= `type`(v1) @signature `Ljava/net/Proxy;.type:()Ljava/net/Proxy$Type;` @kind virtual;
  #L30e428.  v1:= temp @kind object;
  #L30e42a.  call temp:= `get`(v3, v1) @signature `Lokhttp3/internal/http/RequestLine;.get:(Lokhttp3/Request;Ljava/net/Proxy$Type;)Ljava/lang/String;` @kind static;
  #L30e430.  v0:= temp @kind object;
  #L30e432.  call temp:= `headers`(v3) @signature `Lokhttp3/Request;.headers:()Lokhttp3/Headers;` @kind virtual;
  #L30e438.  v1:= temp @kind object;
  #L30e43a.  call `writeRequest`(v2, v1, v0) @signature `Lokhttp3/internal/http/Http1xStream;.writeRequest:(Lokhttp3/Headers;Ljava/lang/String;)V` @kind virtual;
  #L30e440.  return @kind void;
}
