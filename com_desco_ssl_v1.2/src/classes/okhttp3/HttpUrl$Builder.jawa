record `okhttp3.HttpUrl$Builder` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String` `okhttp3.HttpUrl$Builder.encodedFragment` @AccessFlag ;
  `java.lang.String` `okhttp3.HttpUrl$Builder.encodedPassword` @AccessFlag ;
  `java.util.List` `okhttp3.HttpUrl$Builder.encodedPathSegments` @AccessFlag FINAL;
  `java.util.List` `okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @AccessFlag ;
  `java.lang.String` `okhttp3.HttpUrl$Builder.encodedUsername` @AccessFlag ;
  `java.lang.String` `okhttp3.HttpUrl$Builder.host` @AccessFlag ;
  `int` `okhttp3.HttpUrl$Builder.port` @AccessFlag ;
  `java.lang.String` `okhttp3.HttpUrl$Builder.scheme` @AccessFlag ;
}
procedure `void` `<init>`(`okhttp3.HttpUrl$Builder` v2 @kind this) @signature `Lokhttp3/HttpUrl$Builder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L23a960.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L23a966.  v0:= "" @kind object;
  #L23a96a.  v2.`okhttp3.HttpUrl$Builder.encodedUsername` @type ^`java.lang.String` := v0 @kind object;
  #L23a96e.  v0:= "" @kind object;
  #L23a972.  v2.`okhttp3.HttpUrl$Builder.encodedPassword` @type ^`java.lang.String` := v0 @kind object;
  #L23a976.  v0:= -1I;
  #L23a978.  v2.`okhttp3.HttpUrl$Builder.port` @type ^`int` := v0;
  #L23a97c.  v0:= new `java.util.ArrayList`;
  #L23a980.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L23a986.  v2.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` := v0 @kind object;
  #L23a98a.  v0:= v2.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L23a98e.  v1:= "" @kind object;
  #L23a992.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L23a998.  return @kind void;
}
procedure `okhttp3.HttpUrl$Builder` `addPathSegments`(`okhttp3.HttpUrl$Builder` v6 @kind this, `java.lang.String` v7 @kind object @name `pathSegments`, `boolean` v8 @name `alreadyEncoded`) @signature `Lokhttp3/HttpUrl$Builder;.addPathSegments:(Ljava/lang/String;Z)Lokhttp3/HttpUrl$Builder;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L23a9ac.  v2:= 0I;
  #L23a9ae.  call temp:= `length`(v7) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L23a9b4.  v0:= temp;
  #L23a9b6.  v1:= "/\\" @kind object;
  #L23a9ba.  call temp:= `delimiterOffset`(v7, v2, v0, v1) @signature `Lokhttp3/internal/Util;.delimiterOffset:(Ljava/lang/String;IILjava/lang/String;)I` @kind static;
  #L23a9c0.  v3:= temp;
  #L23a9c2.  call temp:= `length`(v7) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L23a9c8.  v0:= temp;
  #L23a9ca.  if v3 >= v0 then goto L23a9ee;
  #L23a9ce.  v4:= 1I;
  #L23a9d0.  v0:= v6 @kind object;
  #L23a9d2.  v1:= v7 @kind object;
  #L23a9d4.  v5:= v8;
  #L23a9d6.  call `push`(v0, v1, v2, v3, v4, v5) @signature `Lokhttp3/HttpUrl$Builder;.push:(Ljava/lang/String;IIZZ)V` @kind direct;
  #L23a9dc.  v2:= v3 + 1;
  #L23a9e0.  call temp:= `length`(v7) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L23a9e6.  v0:= temp;
  #L23a9e8.  if v2 <= v0 then goto L23a9ae;
  #L23a9ec.  return v6 @kind object;
  #L23a9ee.  v4:= 0I;
  #L23a9f0.  goto L23a9d0;
}
procedure `java.lang.String` `canonicalizeHost`(`java.lang.String` v5 @kind object @name `input`, `int` v6 @name `pos`, `int` v7 @name `limit`) @signature `Lokhttp3/HttpUrl$Builder;.canonicalizeHost:(Ljava/lang/String;II)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L23aa04.  v4:= 0I;
  #L23aa06.  call temp:= `percentDecode`(v5, v6, v7, v4) @signature `Lokhttp3/HttpUrl;.percentDecode:(Ljava/lang/String;IIZ)Ljava/lang/String;` @kind static;
  #L23aa0c.  v2:= temp @kind object;
  #L23aa0e.  v3:= ":" @kind object;
  #L23aa12.  call temp:= `contains`(v2, v3) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L23aa18.  v3:= temp;
  #L23aa1a.  if v3 == 0 then goto L23aa96;
  #L23aa1e.  v3:= "[" @kind object;
  #L23aa22.  call temp:= `startsWith`(v2, v3) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L23aa28.  v3:= temp;
  #L23aa2a.  if v3 == 0 then goto L23aa5c;
  #L23aa2e.  v3:= "]" @kind object;
  #L23aa32.  call temp:= `endsWith`(v2, v3) @signature `Ljava/lang/String;.endsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L23aa38.  v3:= temp;
  #L23aa3a.  if v3 == 0 then goto L23aa5c;
  #L23aa3e.  v3:= 1I;
  #L23aa40.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L23aa46.  v4:= temp;
  #L23aa48.  v4:= v4 + -1;
  #L23aa4c.  call temp:= `decodeIpv6`(v2, v3, v4) @signature `Lokhttp3/HttpUrl$Builder;.decodeIpv6:(Ljava/lang/String;II)Ljava/net/InetAddress;` @kind static;
  #L23aa52.  v1:= temp @kind object;
  #L23aa54.  if v1 != 0 then goto L23aa6e;
  #L23aa58.  v3:= 0I;
  #L23aa5a.  return v3 @kind object;
  #L23aa5c.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L23aa62.  v3:= temp;
  #L23aa64.  call temp:= `decodeIpv6`(v2, v4, v3) @signature `Lokhttp3/HttpUrl$Builder;.decodeIpv6:(Ljava/lang/String;II)Ljava/net/InetAddress;` @kind static;
  #L23aa6a.  v1:= temp @kind object;
  #L23aa6c.  goto L23aa54;
  #L23aa6e.  call temp:= `getAddress`(v1) @signature `Ljava/net/InetAddress;.getAddress:()[B` @kind virtual;
  #L23aa74.  v0:= temp @kind object;
  #L23aa76.  v3:= length @variable v0;
  #L23aa78.  v4:= 16I;
  #L23aa7c.  if v3 != v4 then goto L23aa8a;
  #L23aa80.  call temp:= `inet6AddressToAscii`(v0) @signature `Lokhttp3/HttpUrl$Builder;.inet6AddressToAscii:([B)Ljava/lang/String;` @kind static;
  #L23aa86.  v3:= temp @kind object;
  #L23aa88.  goto L23aa5a;
  #L23aa8a.  v3:= new `java.lang.AssertionError`;
  #L23aa8e.  call `<init>`(v3) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L23aa94.  throw v3;
  #L23aa96.  call temp:= `domainToAscii`(v2) @signature `Lokhttp3/internal/Util;.domainToAscii:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L23aa9c.  v3:= temp @kind object;
  #L23aa9e.  goto L23aa5a;
}
procedure `boolean` `decodeIpv4Suffix`(`java.lang.String` v10 @kind object @name `input`, `int` v11 @name `pos`, `int` v12 @name `limit`, `byte`[] v13 @kind object @name `address`, `int` v14 @name `addressOffset`) @signature `Lokhttp3/HttpUrl$Builder;.decodeIpv4Suffix:(Ljava/lang/String;II[BI)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L23aab0.  v7:= 0I;
  #L23aab2.  v0:= v14;
  #L23aab4.  v5:= v11;
  #L23aab6.  v1:= v0;
  #L23aab8.  if v5 >= v12 then goto L23ab32;
  #L23aabc.  v8:= length @variable v13;
  #L23aabe.  if v1 != v8 then goto L23aac4;
  #L23aac2.  return v7;
  #L23aac4.  if v1 == v14 then goto L23aadc;
  #L23aac8.  call temp:= `charAt`(v10, v5) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L23aace.  v8:= temp;
  #L23aad0.  v9:= 46I;
  #L23aad4.  if v8 != v9 then goto L23aac2;
  #L23aad8.  v5:= v5 + 1;
  #L23aadc.  v6:= 0I;
  #L23aade.  v4:= v5;
  #L23aae0.  if v5 >= v12 then goto L23aafc;
  #L23aae4.  call temp:= `charAt`(v10, v5) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L23aaea.  v2:= temp;
  #L23aaec.  v8:= 48I;
  #L23aaf0.  if v2 < v8 then goto L23aafc;
  #L23aaf4.  v8:= 57I;
  #L23aaf8.  if v2 <= v8 then goto L23ab12;
  #L23aafc.  v3:= v5 - v4 @kind int;
  #L23ab00.  if v3 == 0 then goto L23aac2;
  #L23ab04.  v0:= v1 + 1;
  #L23ab08.  v8:= (`byte`) v6 @kind i2b;
  #L23ab0a.  v13[v1]:= v8 @kind byte;
  #L23ab0e.  v1:= v0;
  #L23ab10.  goto L23aab8;
  #L23ab12.  if v6 != 0 then goto L23ab1a;
  #L23ab16.  if v4 != v5 then goto L23aac2;
  #L23ab1a.  v8:= v6 * 10;
  #L23ab1e.  v8:= v8 + v2 @kind int;
  #L23ab20.  v6:= v8 + -48;
  #L23ab24.  v8:= 255I;
  #L23ab28.  if v6 > v8 then goto L23aac2;
  #L23ab2c.  v5:= v5 + 1;
  #L23ab30.  goto L23aae0;
  #L23ab32.  v8:= v14 + 4;
  #L23ab36.  if v1 != v8 then goto L23aac2;
  #L23ab3a.  v7:= 1I;
  #L23ab3c.  goto L23aac2;
}
procedure `java.net.InetAddress` `decodeIpv6`(`java.lang.String` v15 @kind object @name `input`, `int` v16 @name `pos`, `int` v17 @name `limit`) @signature `Lokhttp3/HttpUrl$Builder;.decodeIpv6:(Ljava/lang/String;II)Ljava/net/InetAddress;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L23ab50.  v12:= 16I;
  #L23ab54.  v1:= new `byte`[v12];
  #L23ab58.  v2:= 0I;
  #L23ab5a.  v5:= -1I;
  #L23ab5c.  v8:= -1I;
  #L23ab5e.  v10:= v16;
  #L23ab62.  v0:= v17;
  #L23ab66.  if v10 >= v0 then goto L23abb0;
  #L23ab6a.  v12:= length @variable v1;
  #L23ab6c.  if v2 != v12 then goto L23ab74;
  #L23ab70.  v12:= 0I;
  #L23ab72.  return v12 @kind object;
  #L23ab74.  v12:= v10 + 2;
  #L23ab78.  v0:= v17;
  #L23ab7c.  if v12 > v0 then goto L23abc0;
  #L23ab80.  v12:= "::" @kind object;
  #L23ab84.  v13:= 0I;
  #L23ab86.  v14:= 2I;
  #L23ab88.  call temp:= `regionMatches`(v15, v10, v12, v13, v14) @signature `Ljava/lang/String;.regionMatches:(ILjava/lang/String;II)Z` @kind virtual;
  #L23ab8e.  v12:= temp;
  #L23ab90.  if v12 == 0 then goto L23abc0;
  #L23ab94.  v12:= -1I;
  #L23ab96.  if v5 == v12 then goto L23ab9e;
  #L23ab9a.  v12:= 0I;
  #L23ab9c.  goto L23ab72;
  #L23ab9e.  v10:= v10 + 2;
  #L23aba2.  v2:= v2 + 2;
  #L23aba6.  v5:= v2;
  #L23aba8.  v0:= v17;
  #L23abac.  if v10 != v0 then goto L23abdc;
  #L23abb0.  v12:= length @variable v1;
  #L23abb2.  if v2 == v12 then goto L23ac98;
  #L23abb6.  v12:= -1I;
  #L23abb8.  if v5 != v12 then goto L23ac78;
  #L23abbc.  v12:= 0I;
  #L23abbe.  goto L23ab72;
  #L23abc0.  if v2 == 0 then goto L23abdc;
  #L23abc4.  v12:= ":" @kind object;
  #L23abc8.  v13:= 0I;
  #L23abca.  v14:= 1I;
  #L23abcc.  call temp:= `regionMatches`(v15, v10, v12, v13, v14) @signature `Ljava/lang/String;.regionMatches:(ILjava/lang/String;II)Z` @kind virtual;
  #L23abd2.  v12:= temp;
  #L23abd4.  if v12 == 0 then goto L23ac10;
  #L23abd8.  v10:= v10 + 1;
  #L23abdc.  v11:= 0I;
  #L23abde.  v8:= v10;
  #L23abe0.  v0:= v17;
  #L23abe4.  if v10 >= v0 then goto L23abfe;
  #L23abe8.  call temp:= `charAt`(v15, v10) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L23abee.  v4:= temp;
  #L23abf0.  call temp:= `decodeHexDigit`(v4) @signature `Lokhttp3/HttpUrl;.decodeHexDigit:(C)I` @kind static;
  #L23abf6.  v9:= temp;
  #L23abf8.  v12:= -1I;
  #L23abfa.  if v9 != v12 then goto L23ac46;
  #L23abfe.  v7:= v10 - v8 @kind int;
  #L23ac02.  if v7 == 0 then goto L23ac0c;
  #L23ac06.  v12:= 4I;
  #L23ac08.  if v7 <= v12 then goto L23ac54;
  #L23ac0c.  v12:= 0I;
  #L23ac0e.  goto L23ab72;
  #L23ac10.  v12:= "." @kind object;
  #L23ac14.  v13:= 0I;
  #L23ac16.  v14:= 1I;
  #L23ac18.  call temp:= `regionMatches`(v15, v10, v12, v13, v14) @signature `Ljava/lang/String;.regionMatches:(ILjava/lang/String;II)Z` @kind virtual;
  #L23ac1e.  v12:= temp;
  #L23ac20.  if v12 == 0 then goto L23ac42;
  #L23ac24.  v12:= v2 + -2;
  #L23ac28.  v0:= v17;
  #L23ac2c.  call temp:= `decodeIpv4Suffix`(v15, v8, v0, v1, v12) @signature `Lokhttp3/HttpUrl$Builder;.decodeIpv4Suffix:(Ljava/lang/String;II[BI)Z` @kind static;
  #L23ac32.  v12:= temp;
  #L23ac34.  if v12 != 0 then goto L23ac3c;
  #L23ac38.  v12:= 0I;
  #L23ac3a.  goto L23ab72;
  #L23ac3c.  v2:= v2 + 2;
  #L23ac40.  goto L23abb0;
  #L23ac42.  v12:= 0I;
  #L23ac44.  goto L23ab72;
  #L23ac46.  v12:= v11 ^< 4;
  #L23ac4a.  v11:= v12 + v9 @kind int;
  #L23ac4e.  v10:= v10 + 1;
  #L23ac52.  goto L23abe0;
  #L23ac54.  v3:= v2 + 1;
  #L23ac58.  v12:= v11 ^>> 8;
  #L23ac5c.  v12:= v12 ^& 255;
  #L23ac60.  v12:= (`byte`) v12 @kind i2b;
  #L23ac62.  v1[v2]:= v12 @kind byte;
  #L23ac66.  v2:= v3 + 1;
  #L23ac6a.  v12:= v11 ^& 255;
  #L23ac6e.  v12:= (`byte`) v12 @kind i2b;
  #L23ac70.  v1[v3]:= v12 @kind byte;
  #L23ac74.  goto L23ab62;
  #L23ac78.  v12:= length @variable v1;
  #L23ac7a.  v13:= v2 - v5 @kind int;
  #L23ac7e.  v12:= v12 - v13 @kind int;
  #L23ac80.  v13:= v2 - v5 @kind int;
  #L23ac84.  call `arraycopy`(v1, v5, v1, v12, v13) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L23ac8a.  v12:= length @variable v1;
  #L23ac8c.  v12:= v12 - v2 @kind int;
  #L23ac8e.  v12:= v12 + v5 @kind int;
  #L23ac90.  v13:= 0I;
  #L23ac92.  call `fill`(v1, v5, v12, v13) @signature `Ljava/util/Arrays;.fill:([BIIB)V` @kind static;
  #L23ac98.  call temp:= `getByAddress`(v1) @signature `Ljava/net/InetAddress;.getByAddress:([B)Ljava/net/InetAddress;` @kind static;
  #L23ac9e.  v12:= temp @kind object;
  #L23aca0.  goto L23ab72;
  #L23aca4.  v6:= Exception @type ^`java.net.UnknownHostException` @kind object;
  #L23aca6.  v12:= new `java.lang.AssertionError`;
  #L23acaa.  call `<init>`(v12) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L23acb0.  throw v12;
  catch `java.net.UnknownHostException` @[L23ac98..L23ac9e] goto L23aca4;
}
procedure `java.lang.String` `inet6AddressToAscii`(`byte`[] v12 @kind object @name `address`) @signature `Lokhttp3/HttpUrl$Builder;.inet6AddressToAscii:([B)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L23acd4.  v11:= 16I;
  #L23acd8.  v10:= 58I;
  #L23acdc.  v5:= -1I;
  #L23acde.  v4:= 0I;
  #L23ace0.  v3:= 0I;
  #L23ace2.  v7:= length @variable v12;
  #L23ace4.  if v3 >= v7 then goto L23ad1a;
  #L23ace8.  v1:= v3;
  #L23acea.  if v3 >= v11 then goto L23ad08;
  #L23acee.  v7:= v12[v3] @kind byte;
  #L23acf2.  if v7 != 0 then goto L23ad08;
  #L23acf6.  v7:= v3 + 1;
  #L23acfa.  v7:= v12[v7] @kind byte;
  #L23acfe.  if v7 != 0 then goto L23ad08;
  #L23ad02.  v3:= v3 + 2;
  #L23ad06.  goto L23acea;
  #L23ad08.  v0:= v3 - v1 @kind int;
  #L23ad0c.  if v0 <= v4 then goto L23ad14;
  #L23ad10.  v5:= v1;
  #L23ad12.  v4:= v0;
  #L23ad14.  v3:= v3 + 2;
  #L23ad18.  goto L23ace2;
  #L23ad1a.  v6:= new `okio.Buffer`;
  #L23ad1e.  call `<init>`(v6) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L23ad24.  v3:= 0I;
  #L23ad26.  v7:= length @variable v12;
  #L23ad28.  if v3 >= v7 then goto L23ad78;
  #L23ad2c.  if v3 != v5 then goto L23ad44;
  #L23ad30.  call temp:= `writeByte`(v6, v10) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L23ad36.  v3:= v3 + v4 @kind int;
  #L23ad38.  if v3 != v11 then goto L23ad26;
  #L23ad3c.  call temp:= `writeByte`(v6, v10) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L23ad42.  goto L23ad26;
  #L23ad44.  if v3 <= 0 then goto L23ad4e;
  #L23ad48.  call temp:= `writeByte`(v6, v10) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L23ad4e.  v7:= v12[v3] @kind byte;
  #L23ad52.  v7:= v7 ^& 255;
  #L23ad56.  v7:= v7 ^< 8;
  #L23ad5a.  v8:= v3 + 1;
  #L23ad5e.  v8:= v12[v8] @kind byte;
  #L23ad62.  v8:= v8 ^& 255;
  #L23ad66.  v2:= v7 ^| v8 @kind int;
  #L23ad6a.  v8:= (`long`) v2 @kind i2l;
  #L23ad6c.  call temp:= `writeHexadecimalUnsignedLong`(v6, v8) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/Buffer;` @kind virtual;
  #L23ad72.  v3:= v3 + 2;
  #L23ad76.  goto L23ad26;
  #L23ad78.  call temp:= `readUtf8`(v6) @signature `Lokio/Buffer;.readUtf8:()Ljava/lang/String;` @kind virtual;
  #L23ad7e.  v7:= temp @kind object;
  #L23ad80.  return v7 @kind object;
}
procedure `boolean` `isDot`(`okhttp3.HttpUrl$Builder` v1 @kind this, `java.lang.String` v2 @kind object @name `input`) @signature `Lokhttp3/HttpUrl$Builder;.isDot:(Ljava/lang/String;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L23ad94.  v0:= "." @kind object;
  #L23ad98.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L23ad9e.  v0:= temp;
  #L23ada0.  if v0 != 0 then goto L23adb4;
  #L23ada4.  v0:= "%2e" @kind object;
  #L23ada8.  call temp:= `equalsIgnoreCase`(v2, v0) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L23adae.  v0:= temp;
  #L23adb0.  if v0 == 0 then goto L23adb8;
  #L23adb4.  v0:= 1I;
  #L23adb6.  return v0;
  #L23adb8.  v0:= 0I;
  #L23adba.  goto L23adb6;
}
procedure `boolean` `isDotDot`(`okhttp3.HttpUrl$Builder` v1 @kind this, `java.lang.String` v2 @kind object @name `input`) @signature `Lokhttp3/HttpUrl$Builder;.isDotDot:(Ljava/lang/String;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L23adcc.  v0:= ".." @kind object;
  #L23add0.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L23add6.  v0:= temp;
  #L23add8.  if v0 != 0 then goto L23ae0c;
  #L23addc.  v0:= "%2e." @kind object;
  #L23ade0.  call temp:= `equalsIgnoreCase`(v2, v0) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L23ade6.  v0:= temp;
  #L23ade8.  if v0 != 0 then goto L23ae0c;
  #L23adec.  v0:= ".%2e" @kind object;
  #L23adf0.  call temp:= `equalsIgnoreCase`(v2, v0) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L23adf6.  v0:= temp;
  #L23adf8.  if v0 != 0 then goto L23ae0c;
  #L23adfc.  v0:= "%2e%2e" @kind object;
  #L23ae00.  call temp:= `equalsIgnoreCase`(v2, v0) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L23ae06.  v0:= temp;
  #L23ae08.  if v0 == 0 then goto L23ae10;
  #L23ae0c.  v0:= 1I;
  #L23ae0e.  return v0;
  #L23ae10.  v0:= 0I;
  #L23ae12.  goto L23ae0e;
}
procedure `int` `parsePort`(`java.lang.String` v12 @kind object @name `input`, `int` v13 @name `pos`, `int` v14 @name `limit`) @signature `Lokhttp3/HttpUrl$Builder;.parsePort:(Ljava/lang/String;II)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L23ae24.  v11:= -1I;
  #L23ae26.  v3:= "" @kind object;
  #L23ae2a.  v4:= 0I;
  #L23ae2c.  v5:= 0I;
  #L23ae2e.  v6:= 0I;
  #L23ae30.  v7:= 1I;
  #L23ae32.  v0:= v12 @kind object;
  #L23ae34.  v1:= v13;
  #L23ae36.  v2:= v14;
  #L23ae38.  call temp:= `canonicalize`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;IILjava/lang/String;ZZZZ)Ljava/lang/String;` @kind static;
  #L23ae3e.  v10:= temp @kind object;
  #L23ae40.  call temp:= `parseInt`(v10) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L23ae46.  v9:= temp;
  #L23ae48.  if v9 <= 0 then goto L23ae58;
  #L23ae4c.  v0:= 65535I;
  #L23ae52.  if v9 > v0 then goto L23ae58;
  #L23ae56.  return v9;
  #L23ae58.  v9:= v11;
  #L23ae5a.  goto L23ae56;
  #L23ae5c.  v8:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L23ae5e.  v9:= v11;
  #L23ae60.  goto L23ae56;
  catch `java.lang.NumberFormatException` @[L23ae26..L23ae46] goto L23ae5c;
}
procedure `void` `pop`(`okhttp3.HttpUrl$Builder` v4 @kind this) @signature `Lokhttp3/HttpUrl$Builder;.pop:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L23ae84.  v1:= v4.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L23ae88.  v2:= v4.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L23ae8c.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L23ae92.  v2:= temp;
  #L23ae94.  v2:= v2 + -1;
  #L23ae98.  call temp:= `remove`(v1, v2) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L23ae9e.  v0:= temp @kind object;
  #L23aea0.  v0:= (`java.lang.String`) v0 @kind object;
  #L23aea4.  call temp:= `isEmpty`(v0) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L23aeaa.  v1:= temp;
  #L23aeac.  if v1 == 0 then goto L23aee0;
  #L23aeb0.  v1:= v4.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L23aeb4.  call temp:= `isEmpty`(v1) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L23aeba.  v1:= temp;
  #L23aebc.  if v1 != 0 then goto L23aee0;
  #L23aec0.  v1:= v4.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L23aec4.  v2:= v4.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L23aec8.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L23aece.  v2:= temp;
  #L23aed0.  v2:= v2 + -1;
  #L23aed4.  v3:= "" @kind object;
  #L23aed8.  call temp:= `set`(v1, v2, v3) @signature `Ljava/util/List;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L23aede.  return @kind void;
  #L23aee0.  v1:= v4.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L23aee4.  v2:= "" @kind object;
  #L23aee8.  call temp:= `add`(v1, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L23aeee.  goto L23aede;
}
procedure `int` `portColonOffset`(`java.lang.String` v3 @kind object @name `input`, `int` v4 @name `pos`, `int` v5 @name `limit`) @signature `Lokhttp3/HttpUrl$Builder;.portColonOffset:(Ljava/lang/String;II)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L23af00.  v0:= v4;
  #L23af02.  if v0 >= v5 then goto L23af34;
  #L23af06.  call temp:= `charAt`(v3, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L23af0c.  v1:= temp;
  #L23af0e.  goto L23af38;
  #L23af14.  v0:= v0 + 1;
  #L23af18.  goto L23af02;
  #L23af1a.  v0:= v0 + 1;
  #L23af1e.  if v0 >= v5 then goto L23af14;
  #L23af22.  call temp:= `charAt`(v3, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L23af28.  v1:= temp;
  #L23af2a.  v2:= 93I;
  #L23af2e.  if v1 != v2 then goto L23af1a;
  #L23af32.  goto L23af14;
  #L23af34.  v0:= v5;
  #L23af36.  return v0;
  #L23af38.  switch v1
                  | 58 => goto L23af36
                  | 91 => goto L23af1a
                  | else => goto L23af14;
}
procedure `void` `push`(`okhttp3.HttpUrl$Builder` v9 @kind this, `java.lang.String` v10 @kind object @name `input`, `int` v11 @name `pos`, `int` v12 @name `limit`, `boolean` v13 @name `addTrailingSlash`, `boolean` v14 @name `alreadyEncoded`) @signature `Lokhttp3/HttpUrl$Builder;.push:(Ljava/lang/String;IIZZ)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L23af5c.  v5:= 0I;
  #L23af5e.  v3:= " \"<>^`{}|/\\?#" @kind object;
  #L23af62.  v7:= 1I;
  #L23af64.  v0:= v10 @kind object;
  #L23af66.  v1:= v11;
  #L23af68.  v2:= v12;
  #L23af6a.  v4:= v14;
  #L23af6c.  v6:= v5;
  #L23af6e.  call temp:= `canonicalize`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;IILjava/lang/String;ZZZZ)Ljava/lang/String;` @kind static;
  #L23af74.  v8:= temp @kind object;
  #L23af76.  call temp:= `isDot`(v9, v8) @signature `Lokhttp3/HttpUrl$Builder;.isDot:(Ljava/lang/String;)Z` @kind direct;
  #L23af7c.  v0:= temp;
  #L23af7e.  if v0 == 0 then goto L23af84;
  #L23af82.  return @kind void;
  #L23af84.  call temp:= `isDotDot`(v9, v8) @signature `Lokhttp3/HttpUrl$Builder;.isDotDot:(Ljava/lang/String;)Z` @kind direct;
  #L23af8a.  v0:= temp;
  #L23af8c.  if v0 == 0 then goto L23af98;
  #L23af90.  call `pop`(v9) @signature `Lokhttp3/HttpUrl$Builder;.pop:()V` @kind direct;
  #L23af96.  goto L23af82;
  #L23af98.  v0:= v9.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L23af9c.  v1:= v9.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L23afa0.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L23afa6.  v1:= temp;
  #L23afa8.  v1:= v1 + -1;
  #L23afac.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L23afb2.  v0:= temp @kind object;
  #L23afb4.  v0:= (`java.lang.String`) v0 @kind object;
  #L23afb8.  call temp:= `isEmpty`(v0) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L23afbe.  v0:= temp;
  #L23afc0.  if v0 == 0 then goto L23aff2;
  #L23afc4.  v0:= v9.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L23afc8.  v1:= v9.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L23afcc.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L23afd2.  v1:= temp;
  #L23afd4.  v1:= v1 + -1;
  #L23afd8.  call temp:= `set`(v0, v1, v8) @signature `Ljava/util/List;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L23afde.  if v13 == 0 then goto L23af82;
  #L23afe2.  v0:= v9.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L23afe6.  v1:= "" @kind object;
  #L23afea.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L23aff0.  goto L23af82;
  #L23aff2.  v0:= v9.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L23aff6.  call temp:= `add`(v0, v8) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L23affc.  goto L23afde;
}
procedure `void` `removeAllCanonicalQueryParameters`(`okhttp3.HttpUrl$Builder` v3 @kind this, `java.lang.String` v4 @kind object @name `canonicalName`) @signature `Lokhttp3/HttpUrl$Builder;.removeAllCanonicalQueryParameters:(Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L23b010.  v1:= v3.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` @kind object;
  #L23b014.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L23b01a.  v1:= temp;
  #L23b01c.  v0:= v1 + -2;
  #L23b020.  if v0 < 0 then goto L23b06a;
  #L23b024.  v1:= v3.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` @kind object;
  #L23b028.  call temp:= `get`(v1, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L23b02e.  v1:= temp @kind object;
  #L23b030.  call temp:= `equals`(v4, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L23b036.  v1:= temp;
  #L23b038.  if v1 == 0 then goto L23b06c;
  #L23b03c.  v1:= v3.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` @kind object;
  #L23b040.  v2:= v0 + 1;
  #L23b044.  call temp:= `remove`(v1, v2) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L23b04a.  v1:= v3.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` @kind object;
  #L23b04e.  call temp:= `remove`(v1, v0) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L23b054.  v1:= v3.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` @kind object;
  #L23b058.  call temp:= `isEmpty`(v1) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L23b05e.  v1:= temp;
  #L23b060.  if v1 == 0 then goto L23b06c;
  #L23b064.  v1:= 0I;
  #L23b066.  v3.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` := v1 @kind object;
  #L23b06a.  return @kind void;
  #L23b06c.  v0:= v0 + -2;
  #L23b070.  goto L23b020;
}
procedure `void` `resolvePath`(`okhttp3.HttpUrl$Builder` v8 @kind this, `java.lang.String` v9 @kind object @name `input`, `int` v10 @name `pos`, `int` v11 @name `limit`) @signature `Lokhttp3/HttpUrl$Builder;.resolvePath:(Ljava/lang/String;II)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L23b084.  v5:= 1I;
  #L23b086.  if v10 != v11 then goto L23b08c;
  #L23b08a.  return @kind void;
  #L23b08c.  call temp:= `charAt`(v9, v10) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L23b092.  v6:= temp;
  #L23b094.  v0:= 47I;
  #L23b098.  if v6 == v0 then goto L23b0a4;
  #L23b09c.  v0:= 92I;
  #L23b0a0.  if v6 != v0 then goto L23b0ee;
  #L23b0a4.  v0:= v8.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L23b0a8.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L23b0ae.  v0:= v8.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L23b0b2.  v1:= "" @kind object;
  #L23b0b6.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L23b0bc.  v10:= v10 + 1;
  #L23b0c0.  v2:= v10;
  #L23b0c2.  if v2 >= v11 then goto L23b08a;
  #L23b0c6.  v0:= "/\\" @kind object;
  #L23b0ca.  call temp:= `delimiterOffset`(v9, v2, v11, v0) @signature `Lokhttp3/internal/Util;.delimiterOffset:(Ljava/lang/String;IILjava/lang/String;)I` @kind static;
  #L23b0d0.  v3:= temp;
  #L23b0d2.  if v3 >= v11 then goto L23b10e;
  #L23b0d6.  v4:= v5;
  #L23b0d8.  v0:= v8 @kind object;
  #L23b0da.  v1:= v9 @kind object;
  #L23b0dc.  call `push`(v0, v1, v2, v3, v4, v5) @signature `Lokhttp3/HttpUrl$Builder;.push:(Ljava/lang/String;IIZZ)V` @kind direct;
  #L23b0e2.  v2:= v3;
  #L23b0e4.  if v4 == 0 then goto L23b0c2;
  #L23b0e8.  v2:= v2 + 1;
  #L23b0ec.  goto L23b0c2;
  #L23b0ee.  v0:= v8.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L23b0f2.  v1:= v8.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L23b0f6.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L23b0fc.  v1:= temp;
  #L23b0fe.  v1:= v1 + -1;
  #L23b102.  v7:= "" @kind object;
  #L23b106.  call temp:= `set`(v0, v1, v7) @signature `Ljava/util/List;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L23b10c.  goto L23b0c0;
  #L23b10e.  v4:= 0I;
  #L23b110.  goto L23b0d8;
}
procedure `int` `schemeDelimiterOffset`(`java.lang.String` v10 @kind object @name `input`, `int` v11 @name `pos`, `int` v12 @name `limit`) @signature `Lokhttp3/HttpUrl$Builder;.schemeDelimiterOffset:(Ljava/lang/String;II)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L23b124.  v9:= 122I;
  #L23b128.  v8:= 97I;
  #L23b12c.  v7:= 90I;
  #L23b130.  v6:= 65I;
  #L23b134.  v3:= -1I;
  #L23b136.  v4:= v12 - v11 @kind int;
  #L23b13a.  v5:= 2I;
  #L23b13c.  if v4 >= v5 then goto L23b144;
  #L23b140.  v2:= v3;
  #L23b142.  return v2;
  #L23b144.  call temp:= `charAt`(v10, v11) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L23b14a.  v1:= temp;
  #L23b14c.  if v1 < v8 then goto L23b154;
  #L23b150.  if v1 <= v9 then goto L23b160;
  #L23b154.  if v1 < v6 then goto L23b15c;
  #L23b158.  if v1 <= v7 then goto L23b160;
  #L23b15c.  v2:= v3;
  #L23b15e.  goto L23b142;
  #L23b160.  v2:= v11 + 1;
  #L23b164.  if v2 >= v12 then goto L23b1ba;
  #L23b168.  call temp:= `charAt`(v10, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L23b16e.  v0:= temp;
  #L23b170.  if v0 < v8 then goto L23b178;
  #L23b174.  if v0 <= v9 then goto L23b1a8;
  #L23b178.  if v0 < v6 then goto L23b180;
  #L23b17c.  if v0 <= v7 then goto L23b1a8;
  #L23b180.  v4:= 48I;
  #L23b184.  if v0 < v4 then goto L23b190;
  #L23b188.  v4:= 57I;
  #L23b18c.  if v0 <= v4 then goto L23b1a8;
  #L23b190.  v4:= 43I;
  #L23b194.  if v0 == v4 then goto L23b1a8;
  #L23b198.  v4:= 45I;
  #L23b19c.  if v0 == v4 then goto L23b1a8;
  #L23b1a0.  v4:= 46I;
  #L23b1a4.  if v0 != v4 then goto L23b1ae;
  #L23b1a8.  v2:= v2 + 1;
  #L23b1ac.  goto L23b164;
  #L23b1ae.  v4:= 58I;
  #L23b1b2.  if v0 == v4 then goto L23b142;
  #L23b1b6.  v2:= v3;
  #L23b1b8.  goto L23b142;
  #L23b1ba.  v2:= v3;
  #L23b1bc.  goto L23b142;
}
procedure `int` `slashCount`(`java.lang.String` v3 @kind object @name `input`, `int` v4 @name `pos`, `int` v5 @name `limit`) @signature `Lokhttp3/HttpUrl$Builder;.slashCount:(Ljava/lang/String;II)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L23b1d0.  v1:= 0I;
  #L23b1d2.  if v4 >= v5 then goto L23b1f8;
  #L23b1d6.  call temp:= `charAt`(v3, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L23b1dc.  v0:= temp;
  #L23b1de.  v2:= 92I;
  #L23b1e2.  if v0 == v2 then goto L23b1ee;
  #L23b1e6.  v2:= 47I;
  #L23b1ea.  if v0 != v2 then goto L23b1f8;
  #L23b1ee.  v1:= v1 + 1;
  #L23b1f2.  v4:= v4 + 1;
  #L23b1f6.  goto L23b1d2;
  #L23b1f8.  return v1;
}
procedure `okhttp3.HttpUrl$Builder` `addEncodedPathSegment`(`okhttp3.HttpUrl$Builder` v6 @kind this, `java.lang.String` v7 @kind object @name `encodedPathSegment`) @signature `Lokhttp3/HttpUrl$Builder;.addEncodedPathSegment:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L23b20c.  v2:= 0I;
  #L23b20e.  if v7 != 0 then goto L23b222;
  #L23b212.  v0:= new `java.lang.NullPointerException`;
  #L23b216.  v1:= "encodedPathSegment == null" @kind object;
  #L23b21a.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23b220.  throw v0;
  #L23b222.  call temp:= `length`(v7) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L23b228.  v3:= temp;
  #L23b22a.  v5:= 1I;
  #L23b22c.  v0:= v6 @kind object;
  #L23b22e.  v1:= v7 @kind object;
  #L23b230.  v4:= v2;
  #L23b232.  call `push`(v0, v1, v2, v3, v4, v5) @signature `Lokhttp3/HttpUrl$Builder;.push:(Ljava/lang/String;IIZZ)V` @kind direct;
  #L23b238.  return v6 @kind object;
}
procedure `okhttp3.HttpUrl$Builder` `addEncodedPathSegments`(`okhttp3.HttpUrl$Builder` v2 @kind this, `java.lang.String` v3 @kind object @name `encodedPathSegments`) @signature `Lokhttp3/HttpUrl$Builder;.addEncodedPathSegments:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23b24c.  if v3 != 0 then goto L23b260;
  #L23b250.  v0:= new `java.lang.NullPointerException`;
  #L23b254.  v1:= "encodedPathSegments == null" @kind object;
  #L23b258.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23b25e.  throw v0;
  #L23b260.  v0:= 1I;
  #L23b262.  call temp:= `addPathSegments`(v2, v3, v0) @signature `Lokhttp3/HttpUrl$Builder;.addPathSegments:(Ljava/lang/String;Z)Lokhttp3/HttpUrl$Builder;` @kind direct;
  #L23b268.  v0:= temp @kind object;
  #L23b26a.  return v0 @kind object;
}
procedure `okhttp3.HttpUrl$Builder` `addEncodedQueryParameter`(`okhttp3.HttpUrl$Builder` v7 @kind this, `java.lang.String` v8 @kind object @name `encodedName`, `java.lang.String` v9 @kind object @name `encodedValue`) @signature `Lokhttp3/HttpUrl$Builder;.addEncodedQueryParameter:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L23b27c.  v3:= 0I;
  #L23b27e.  v2:= 1I;
  #L23b280.  if v8 != 0 then goto L23b294;
  #L23b284.  v0:= new `java.lang.NullPointerException`;
  #L23b288.  v1:= "encodedName == null" @kind object;
  #L23b28c.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23b292.  throw v0;
  #L23b294.  v0:= v7.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` @kind object;
  #L23b298.  if v0 != 0 then goto L23b2aa;
  #L23b29c.  v0:= new `java.util.ArrayList`;
  #L23b2a0.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L23b2a6.  v7.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` := v0 @kind object;
  #L23b2aa.  v6:= v7.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` @kind object;
  #L23b2ae.  v1:= " \"'<>#&=" @kind object;
  #L23b2b2.  v0:= v8 @kind object;
  #L23b2b4.  v4:= v2;
  #L23b2b6.  v5:= v2;
  #L23b2b8.  call temp:= `canonicalize`(v0, v1, v2, v3, v4, v5) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;Ljava/lang/String;ZZZZ)Ljava/lang/String;` @kind static;
  #L23b2be.  v0:= temp @kind object;
  #L23b2c0.  call temp:= `add`(v6, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L23b2c6.  v6:= v7.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` @kind object;
  #L23b2ca.  if v9 == 0 then goto L23b2e8;
  #L23b2ce.  v1:= " \"'<>#&=" @kind object;
  #L23b2d2.  v0:= v9 @kind object;
  #L23b2d4.  v4:= v2;
  #L23b2d6.  v5:= v2;
  #L23b2d8.  call temp:= `canonicalize`(v0, v1, v2, v3, v4, v5) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;Ljava/lang/String;ZZZZ)Ljava/lang/String;` @kind static;
  #L23b2de.  v0:= temp @kind object;
  #L23b2e0.  call temp:= `add`(v6, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L23b2e6.  return v7 @kind object;
  #L23b2e8.  v0:= 0I;
  #L23b2ea.  goto L23b2e0;
}
procedure `okhttp3.HttpUrl$Builder` `addPathSegment`(`okhttp3.HttpUrl$Builder` v6 @kind this, `java.lang.String` v7 @kind object @name `pathSegment`) @signature `Lokhttp3/HttpUrl$Builder;.addPathSegment:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L23b2fc.  v2:= 0I;
  #L23b2fe.  if v7 != 0 then goto L23b312;
  #L23b302.  v0:= new `java.lang.NullPointerException`;
  #L23b306.  v1:= "pathSegment == null" @kind object;
  #L23b30a.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23b310.  throw v0;
  #L23b312.  call temp:= `length`(v7) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L23b318.  v3:= temp;
  #L23b31a.  v0:= v6 @kind object;
  #L23b31c.  v1:= v7 @kind object;
  #L23b31e.  v4:= v2;
  #L23b320.  v5:= v2;
  #L23b322.  call `push`(v0, v1, v2, v3, v4, v5) @signature `Lokhttp3/HttpUrl$Builder;.push:(Ljava/lang/String;IIZZ)V` @kind direct;
  #L23b328.  return v6 @kind object;
}
procedure `okhttp3.HttpUrl$Builder` `addPathSegments`(`okhttp3.HttpUrl$Builder` v2 @kind this, `java.lang.String` v3 @kind object @name `pathSegments`) @signature `Lokhttp3/HttpUrl$Builder;.addPathSegments:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23b33c.  if v3 != 0 then goto L23b350;
  #L23b340.  v0:= new `java.lang.NullPointerException`;
  #L23b344.  v1:= "pathSegments == null" @kind object;
  #L23b348.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23b34e.  throw v0;
  #L23b350.  v0:= 0I;
  #L23b352.  call temp:= `addPathSegments`(v2, v3, v0) @signature `Lokhttp3/HttpUrl$Builder;.addPathSegments:(Ljava/lang/String;Z)Lokhttp3/HttpUrl$Builder;` @kind direct;
  #L23b358.  v0:= temp @kind object;
  #L23b35a.  return v0 @kind object;
}
procedure `okhttp3.HttpUrl$Builder` `addQueryParameter`(`okhttp3.HttpUrl$Builder` v7 @kind this, `java.lang.String` v8 @kind object @name `name`, `java.lang.String` v9 @kind object @name `value`) @signature `Lokhttp3/HttpUrl$Builder;.addQueryParameter:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L23b36c.  v4:= 1I;
  #L23b36e.  v2:= 0I;
  #L23b370.  if v8 != 0 then goto L23b384;
  #L23b374.  v0:= new `java.lang.NullPointerException`;
  #L23b378.  v1:= "name == null" @kind object;
  #L23b37c.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23b382.  throw v0;
  #L23b384.  v0:= v7.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` @kind object;
  #L23b388.  if v0 != 0 then goto L23b39a;
  #L23b38c.  v0:= new `java.util.ArrayList`;
  #L23b390.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L23b396.  v7.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` := v0 @kind object;
  #L23b39a.  v6:= v7.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` @kind object;
  #L23b39e.  v1:= " \"'<>#&=" @kind object;
  #L23b3a2.  v0:= v8 @kind object;
  #L23b3a4.  v3:= v2;
  #L23b3a6.  v5:= v4;
  #L23b3a8.  call temp:= `canonicalize`(v0, v1, v2, v3, v4, v5) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;Ljava/lang/String;ZZZZ)Ljava/lang/String;` @kind static;
  #L23b3ae.  v0:= temp @kind object;
  #L23b3b0.  call temp:= `add`(v6, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L23b3b6.  v6:= v7.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` @kind object;
  #L23b3ba.  if v9 == 0 then goto L23b3d8;
  #L23b3be.  v1:= " \"'<>#&=" @kind object;
  #L23b3c2.  v0:= v9 @kind object;
  #L23b3c4.  v3:= v2;
  #L23b3c6.  v5:= v4;
  #L23b3c8.  call temp:= `canonicalize`(v0, v1, v2, v3, v4, v5) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;Ljava/lang/String;ZZZZ)Ljava/lang/String;` @kind static;
  #L23b3ce.  v0:= temp @kind object;
  #L23b3d0.  call temp:= `add`(v6, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L23b3d6.  return v7 @kind object;
  #L23b3d8.  v0:= 0I;
  #L23b3da.  goto L23b3d0;
}
procedure `okhttp3.HttpUrl` `build`(`okhttp3.HttpUrl$Builder` v2 @kind this) @signature `Lokhttp3/HttpUrl$Builder;.build:()Lokhttp3/HttpUrl;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23b3ec.  v0:= v2.`okhttp3.HttpUrl$Builder.scheme` @type ^`java.lang.String` @kind object;
  #L23b3f0.  if v0 != 0 then goto L23b404;
  #L23b3f4.  v0:= new `java.lang.IllegalStateException`;
  #L23b3f8.  v1:= "scheme == null" @kind object;
  #L23b3fc.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23b402.  throw v0;
  #L23b404.  v0:= v2.`okhttp3.HttpUrl$Builder.host` @type ^`java.lang.String` @kind object;
  #L23b408.  if v0 != 0 then goto L23b41c;
  #L23b40c.  v0:= new `java.lang.IllegalStateException`;
  #L23b410.  v1:= "host == null" @kind object;
  #L23b414.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23b41a.  throw v0;
  #L23b41c.  v0:= new `okhttp3.HttpUrl`;
  #L23b420.  v1:= 0I;
  #L23b422.  call `<init>`(v0, v2, v1) @signature `Lokhttp3/HttpUrl;.<init>:(Lokhttp3/HttpUrl$Builder;Lokhttp3/HttpUrl$1;)V` @kind direct;
  #L23b428.  return v0 @kind object;
}
procedure `int` `effectivePort`(`okhttp3.HttpUrl$Builder` v2 @kind this) @signature `Lokhttp3/HttpUrl$Builder;.effectivePort:()I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L23b43c.  v0:= v2.`okhttp3.HttpUrl$Builder.port` @type ^`int`;
  #L23b440.  v1:= -1I;
  #L23b442.  if v0 == v1 then goto L23b44c;
  #L23b446.  v0:= v2.`okhttp3.HttpUrl$Builder.port` @type ^`int`;
  #L23b44a.  return v0;
  #L23b44c.  v0:= v2.`okhttp3.HttpUrl$Builder.scheme` @type ^`java.lang.String` @kind object;
  #L23b450.  call temp:= `defaultPort`(v0) @signature `Lokhttp3/HttpUrl;.defaultPort:(Ljava/lang/String;)I` @kind static;
  #L23b456.  v0:= temp;
  #L23b458.  goto L23b44a;
}
procedure `okhttp3.HttpUrl$Builder` `encodedFragment`(`okhttp3.HttpUrl$Builder` v6 @kind this, `java.lang.String` v7 @kind object @name `encodedFragment`) @signature `Lokhttp3/HttpUrl$Builder;.encodedFragment:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L23b46c.  v3:= 0I;
  #L23b46e.  if v7 == 0 then goto L23b48c;
  #L23b472.  v1:= "" @kind object;
  #L23b476.  v2:= 1I;
  #L23b478.  v0:= v7 @kind object;
  #L23b47a.  v4:= v3;
  #L23b47c.  v5:= v3;
  #L23b47e.  call temp:= `canonicalize`(v0, v1, v2, v3, v4, v5) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;Ljava/lang/String;ZZZZ)Ljava/lang/String;` @kind static;
  #L23b484.  v0:= temp @kind object;
  #L23b486.  v6.`okhttp3.HttpUrl$Builder.encodedFragment` @type ^`java.lang.String` := v0 @kind object;
  #L23b48a.  return v6 @kind object;
  #L23b48c.  v0:= 0I;
  #L23b48e.  goto L23b486;
}
procedure `okhttp3.HttpUrl$Builder` `encodedPassword`(`okhttp3.HttpUrl$Builder` v6 @kind this, `java.lang.String` v7 @kind object @name `encodedPassword`) @signature `Lokhttp3/HttpUrl$Builder;.encodedPassword:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L23b4a0.  v2:= 1I;
  #L23b4a2.  v3:= 0I;
  #L23b4a4.  if v7 != 0 then goto L23b4b8;
  #L23b4a8.  v0:= new `java.lang.NullPointerException`;
  #L23b4ac.  v1:= "encodedPassword == null" @kind object;
  #L23b4b0.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23b4b6.  throw v0;
  #L23b4b8.  v1:= " \"':;<=>@[]^`{}|/\\?#" @kind object;
  #L23b4bc.  v0:= v7 @kind object;
  #L23b4be.  v4:= v3;
  #L23b4c0.  v5:= v2;
  #L23b4c2.  call temp:= `canonicalize`(v0, v1, v2, v3, v4, v5) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;Ljava/lang/String;ZZZZ)Ljava/lang/String;` @kind static;
  #L23b4c8.  v0:= temp @kind object;
  #L23b4ca.  v6.`okhttp3.HttpUrl$Builder.encodedPassword` @type ^`java.lang.String` := v0 @kind object;
  #L23b4ce.  return v6 @kind object;
}
procedure `okhttp3.HttpUrl$Builder` `encodedPath`(`okhttp3.HttpUrl$Builder` v3 @kind this, `java.lang.String` v4 @kind object @name `encodedPath`) @signature `Lokhttp3/HttpUrl$Builder;.encodedPath:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L23b4e0.  if v4 != 0 then goto L23b4f4;
  #L23b4e4.  v0:= new `java.lang.NullPointerException`;
  #L23b4e8.  v1:= "encodedPath == null" @kind object;
  #L23b4ec.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23b4f2.  throw v0;
  #L23b4f4.  v0:= "/" @kind object;
  #L23b4f8.  call temp:= `startsWith`(v4, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L23b4fe.  v0:= temp;
  #L23b500.  if v0 != 0 then goto L23b536;
  #L23b504.  v0:= new `java.lang.IllegalArgumentException`;
  #L23b508.  v1:= new `java.lang.StringBuilder`;
  #L23b50c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23b512.  v2:= "unexpected encodedPath: " @kind object;
  #L23b516.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23b51c.  v1:= temp @kind object;
  #L23b51e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23b524.  v1:= temp @kind object;
  #L23b526.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23b52c.  v1:= temp @kind object;
  #L23b52e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23b534.  throw v0;
  #L23b536.  v0:= 0I;
  #L23b538.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L23b53e.  v1:= temp;
  #L23b540.  call `resolvePath`(v3, v4, v0, v1) @signature `Lokhttp3/HttpUrl$Builder;.resolvePath:(Ljava/lang/String;II)V` @kind direct;
  #L23b546.  return v3 @kind object;
}
procedure `okhttp3.HttpUrl$Builder` `encodedQuery`(`okhttp3.HttpUrl$Builder` v6 @kind this, `java.lang.String` v7 @kind object @name `encodedQuery`) @signature `Lokhttp3/HttpUrl$Builder;.encodedQuery:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L23b558.  v2:= 1I;
  #L23b55a.  if v7 == 0 then goto L23b580;
  #L23b55e.  v1:= " \"'<>#" @kind object;
  #L23b562.  v3:= 0I;
  #L23b564.  v0:= v7 @kind object;
  #L23b566.  v4:= v2;
  #L23b568.  v5:= v2;
  #L23b56a.  call temp:= `canonicalize`(v0, v1, v2, v3, v4, v5) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;Ljava/lang/String;ZZZZ)Ljava/lang/String;` @kind static;
  #L23b570.  v0:= temp @kind object;
  #L23b572.  call temp:= `queryStringToNamesAndValues`(v0) @signature `Lokhttp3/HttpUrl;.queryStringToNamesAndValues:(Ljava/lang/String;)Ljava/util/List;` @kind static;
  #L23b578.  v0:= temp @kind object;
  #L23b57a.  v6.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` := v0 @kind object;
  #L23b57e.  return v6 @kind object;
  #L23b580.  v0:= 0I;
  #L23b582.  goto L23b57a;
}
procedure `okhttp3.HttpUrl$Builder` `encodedUsername`(`okhttp3.HttpUrl$Builder` v6 @kind this, `java.lang.String` v7 @kind object @name `encodedUsername`) @signature `Lokhttp3/HttpUrl$Builder;.encodedUsername:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L23b594.  v2:= 1I;
  #L23b596.  v3:= 0I;
  #L23b598.  if v7 != 0 then goto L23b5ac;
  #L23b59c.  v0:= new `java.lang.NullPointerException`;
  #L23b5a0.  v1:= "encodedUsername == null" @kind object;
  #L23b5a4.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23b5aa.  throw v0;
  #L23b5ac.  v1:= " \"':;<=>@[]^`{}|/\\?#" @kind object;
  #L23b5b0.  v0:= v7 @kind object;
  #L23b5b2.  v4:= v3;
  #L23b5b4.  v5:= v2;
  #L23b5b6.  call temp:= `canonicalize`(v0, v1, v2, v3, v4, v5) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;Ljava/lang/String;ZZZZ)Ljava/lang/String;` @kind static;
  #L23b5bc.  v0:= temp @kind object;
  #L23b5be.  v6.`okhttp3.HttpUrl$Builder.encodedUsername` @type ^`java.lang.String` := v0 @kind object;
  #L23b5c2.  return v6 @kind object;
}
procedure `okhttp3.HttpUrl$Builder` `fragment`(`okhttp3.HttpUrl$Builder` v6 @kind this, `java.lang.String` v7 @kind object @name `fragment`) @signature `Lokhttp3/HttpUrl$Builder;.fragment:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L23b5d4.  v2:= 0I;
  #L23b5d6.  if v7 == 0 then goto L23b5f4;
  #L23b5da.  v1:= "" @kind object;
  #L23b5de.  v0:= v7 @kind object;
  #L23b5e0.  v3:= v2;
  #L23b5e2.  v4:= v2;
  #L23b5e4.  v5:= v2;
  #L23b5e6.  call temp:= `canonicalize`(v0, v1, v2, v3, v4, v5) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;Ljava/lang/String;ZZZZ)Ljava/lang/String;` @kind static;
  #L23b5ec.  v0:= temp @kind object;
  #L23b5ee.  v6.`okhttp3.HttpUrl$Builder.encodedFragment` @type ^`java.lang.String` := v0 @kind object;
  #L23b5f2.  return v6 @kind object;
  #L23b5f4.  v0:= 0I;
  #L23b5f6.  goto L23b5ee;
}
procedure `okhttp3.HttpUrl$Builder` `host`(`okhttp3.HttpUrl$Builder` v4 @kind this, `java.lang.String` v5 @kind object @name `host`) @signature `Lokhttp3/HttpUrl$Builder;.host:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L23b608.  if v5 != 0 then goto L23b61c;
  #L23b60c.  v1:= new `java.lang.NullPointerException`;
  #L23b610.  v2:= "host == null" @kind object;
  #L23b614.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23b61a.  throw v1;
  #L23b61c.  v1:= 0I;
  #L23b61e.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L23b624.  v2:= temp;
  #L23b626.  call temp:= `canonicalizeHost`(v5, v1, v2) @signature `Lokhttp3/HttpUrl$Builder;.canonicalizeHost:(Ljava/lang/String;II)Ljava/lang/String;` @kind static;
  #L23b62c.  v0:= temp @kind object;
  #L23b62e.  if v0 != 0 then goto L23b664;
  #L23b632.  v1:= new `java.lang.IllegalArgumentException`;
  #L23b636.  v2:= new `java.lang.StringBuilder`;
  #L23b63a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23b640.  v3:= "unexpected host: " @kind object;
  #L23b644.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23b64a.  v2:= temp @kind object;
  #L23b64c.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23b652.  v2:= temp @kind object;
  #L23b654.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23b65a.  v2:= temp @kind object;
  #L23b65c.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23b662.  throw v1;
  #L23b664.  v4.`okhttp3.HttpUrl$Builder.host` @type ^`java.lang.String` := v0 @kind object;
  #L23b668.  return v4 @kind object;
}
procedure `okhttp3.HttpUrl$Builder$ParseResult` `parse`(`okhttp3.HttpUrl$Builder` v28 @kind this, `okhttp3.HttpUrl` v29 @kind object @name `base`, `java.lang.String` v30 @kind object @name `input`) @signature `Lokhttp3/HttpUrl$Builder;.parse:(Lokhttp3/HttpUrl;Ljava/lang/String;)Lokhttp3/HttpUrl$Builder$ParseResult;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;
    v22;
    v23;
    v24;
    v25;
    v26;
    v27;

  #L23b67c.  v3:= 0I;
  #L23b67e.  call temp:= `length`(v30) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L23b684.  v4:= temp;
  #L23b686.  v0:= v30 @kind object;
  #L23b68a.  call temp:= `skipLeadingAsciiWhitespace`(v0, v3, v4) @signature `Lokhttp3/internal/Util;.skipLeadingAsciiWhitespace:(Ljava/lang/String;II)I` @kind static;
  #L23b690.  v5:= temp;
  #L23b692.  call temp:= `length`(v30) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L23b698.  v3:= temp;
  #L23b69a.  v0:= v30 @kind object;
  #L23b69e.  call temp:= `skipTrailingAsciiWhitespace`(v0, v5, v3) @signature `Lokhttp3/internal/Util;.skipTrailingAsciiWhitespace:(Ljava/lang/String;II)I` @kind static;
  #L23b6a4.  v23:= temp;
  #L23b6a6.  v0:= v30 @kind object;
  #L23b6aa.  v1:= v23;
  #L23b6ae.  call temp:= `schemeDelimiterOffset`(v0, v5, v1) @signature `Lokhttp3/HttpUrl$Builder;.schemeDelimiterOffset:(Ljava/lang/String;II)I` @kind static;
  #L23b6b4.  v26:= temp;
  #L23b6b6.  v3:= -1I;
  #L23b6b8.  v0:= v26;
  #L23b6bc.  if v0 == v3 then goto L23b814;
  #L23b6c0.  v4:= 1I;
  #L23b6c2.  v6:= "https:" @kind object;
  #L23b6c6.  v7:= 0I;
  #L23b6c8.  v8:= 6I;
  #L23b6ca.  v3:= v30 @kind object;
  #L23b6ce.  call temp:= `regionMatches`(v3, v4, v5, v6, v7, v8) @signature `Ljava/lang/String;.regionMatches:(ZILjava/lang/String;II)Z` @kind virtual;
  #L23b6d4.  v3:= temp;
  #L23b6d6.  if v3 == 0 then goto L23b7d6;
  #L23b6da.  v3:= "https" @kind object;
  #L23b6de.  v0:= v28 @kind object;
  #L23b6e2.  v0.`okhttp3.HttpUrl$Builder.scheme` @type ^`java.lang.String` := v3 @kind object;
  #L23b6e6.  v3:= "https:" @kind object;
  #L23b6ea.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L23b6f0.  v3:= temp;
  #L23b6f2.  v5:= v5 + v3 @kind int;
  #L23b6f4.  v22:= 0I;
  #L23b6f8.  v21:= 0I;
  #L23b6fc.  v0:= v30 @kind object;
  #L23b700.  v1:= v23;
  #L23b704.  call temp:= `slashCount`(v0, v5, v1) @signature `Lokhttp3/HttpUrl$Builder;.slashCount:(Ljava/lang/String;II)I` @kind static;
  #L23b70a.  v27:= temp;
  #L23b70c.  v3:= 2I;
  #L23b70e.  v0:= v27;
  #L23b712.  if v0 >= v3 then goto L23b736;
  #L23b716.  if v29 == 0 then goto L23b736;
  #L23b71a.  call temp:= `access$100`(v29) @signature `Lokhttp3/HttpUrl;.access$100:(Lokhttp3/HttpUrl;)Ljava/lang/String;` @kind static;
  #L23b720.  v3:= temp @kind object;
  #L23b722.  v0:= v28 @kind object;
  #L23b726.  v4:= v0.`okhttp3.HttpUrl$Builder.scheme` @type ^`java.lang.String` @kind object;
  #L23b72a.  call temp:= `equals`(v3, v4) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L23b730.  v3:= temp;
  #L23b732.  if v3 != 0 then goto L23ba70;
  #L23b736.  v5:= v5 + v27 @kind int;
  #L23b73a.  v3:= "@/\\?#" @kind object;
  #L23b73e.  v0:= v30 @kind object;
  #L23b742.  v1:= v23;
  #L23b746.  call temp:= `delimiterOffset`(v0, v5, v1, v3) @signature `Lokhttp3/internal/Util;.delimiterOffset:(Ljava/lang/String;IILjava/lang/String;)I` @kind static;
  #L23b74c.  v20:= temp;
  #L23b74e.  v0:= v20;
  #L23b752.  v1:= v23;
  #L23b756.  if v0 == v1 then goto L23b832;
  #L23b75a.  v0:= v30 @kind object;
  #L23b75e.  v1:= v20;
  #L23b762.  call temp:= `charAt`(v0, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L23b768.  v18:= temp;
  #L23b76a.  goto L23bb08;
  #L23b770.  goto L23b73a;
  #L23b772.  v0:= v30 @kind object;
  #L23b776.  v1:= v20;
  #L23b77a.  call temp:= `portColonOffset`(v0, v5, v1) @signature `Lokhttp3/HttpUrl$Builder;.portColonOffset:(Ljava/lang/String;II)I` @kind static;
  #L23b780.  v25:= temp;
  #L23b782.  v3:= v25 + 1;
  #L23b786.  v0:= v20;
  #L23b78a.  if v3 >= v0 then goto L23b950;
  #L23b78e.  v0:= v30 @kind object;
  #L23b792.  v1:= v25;
  #L23b796.  call temp:= `canonicalizeHost`(v0, v5, v1) @signature `Lokhttp3/HttpUrl$Builder;.canonicalizeHost:(Ljava/lang/String;II)Ljava/lang/String;` @kind static;
  #L23b79c.  v3:= temp @kind object;
  #L23b79e.  v0:= v28 @kind object;
  #L23b7a2.  v0.`okhttp3.HttpUrl$Builder.host` @type ^`java.lang.String` := v3 @kind object;
  #L23b7a6.  v3:= v25 + 1;
  #L23b7aa.  v0:= v30 @kind object;
  #L23b7ae.  v1:= v20;
  #L23b7b2.  call temp:= `parsePort`(v0, v3, v1) @signature `Lokhttp3/HttpUrl$Builder;.parsePort:(Ljava/lang/String;II)I` @kind static;
  #L23b7b8.  v3:= temp;
  #L23b7ba.  v0:= v28 @kind object;
  #L23b7be.  v0.`okhttp3.HttpUrl$Builder.port` @type ^`int` := v3;
  #L23b7c2.  v0:= v28 @kind object;
  #L23b7c6.  v3:= v0.`okhttp3.HttpUrl$Builder.port` @type ^`int`;
  #L23b7ca.  v4:= -1I;
  #L23b7cc.  if v3 != v4 then goto L23b980;
  #L23b7d0.  v3:= `@@okhttp3.HttpUrl$Builder$ParseResult.INVALID_PORT` @type ^`okhttp3.HttpUrl$Builder$ParseResult` @kind object;
  #L23b7d4.  return v3 @kind object;
  #L23b7d6.  v4:= 1I;
  #L23b7d8.  v6:= "http:" @kind object;
  #L23b7dc.  v7:= 0I;
  #L23b7de.  v8:= 5I;
  #L23b7e0.  v3:= v30 @kind object;
  #L23b7e4.  call temp:= `regionMatches`(v3, v4, v5, v6, v7, v8) @signature `Ljava/lang/String;.regionMatches:(ZILjava/lang/String;II)Z` @kind virtual;
  #L23b7ea.  v3:= temp;
  #L23b7ec.  if v3 == 0 then goto L23b80e;
  #L23b7f0.  v3:= "http" @kind object;
  #L23b7f4.  v0:= v28 @kind object;
  #L23b7f8.  v0.`okhttp3.HttpUrl$Builder.scheme` @type ^`java.lang.String` := v3 @kind object;
  #L23b7fc.  v3:= "http:" @kind object;
  #L23b800.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L23b806.  v3:= temp;
  #L23b808.  v5:= v5 + v3 @kind int;
  #L23b80a.  goto L23b6f4;
  #L23b80e.  v3:= `@@okhttp3.HttpUrl$Builder$ParseResult.UNSUPPORTED_SCHEME` @type ^`okhttp3.HttpUrl$Builder$ParseResult` @kind object;
  #L23b812.  goto L23b7d4;
  #L23b814.  if v29 == 0 then goto L23b82c;
  #L23b818.  call temp:= `access$100`(v29) @signature `Lokhttp3/HttpUrl;.access$100:(Lokhttp3/HttpUrl;)Ljava/lang/String;` @kind static;
  #L23b81e.  v3:= temp @kind object;
  #L23b820.  v0:= v28 @kind object;
  #L23b824.  v0.`okhttp3.HttpUrl$Builder.scheme` @type ^`java.lang.String` := v3 @kind object;
  #L23b828.  goto L23b6f4;
  #L23b82c.  v3:= `@@okhttp3.HttpUrl$Builder$ParseResult.MISSING_SCHEME` @type ^`okhttp3.HttpUrl$Builder$ParseResult` @kind object;
  #L23b830.  goto L23b7d4;
  #L23b832.  v18:= -1I;
  #L23b836.  goto L23b76a;
  #L23b838.  if v21 != 0 then goto L23b8f2;
  #L23b83c.  v3:= 58I;
  #L23b840.  v0:= v30 @kind object;
  #L23b844.  v1:= v20;
  #L23b848.  call temp:= `delimiterOffset`(v0, v5, v1, v3) @signature `Lokhttp3/internal/Util;.delimiterOffset:(Ljava/lang/String;IIC)I` @kind static;
  #L23b84e.  v6:= temp;
  #L23b850.  v7:= " \"':;<=>@[]^`{}|/\\?#" @kind object;
  #L23b854.  v8:= 1I;
  #L23b856.  v9:= 0I;
  #L23b858.  v10:= 0I;
  #L23b85a.  v11:= 1I;
  #L23b85c.  v4:= v30 @kind object;
  #L23b860.  call temp:= `canonicalize`(v4, v5, v6, v7, v8, v9, v10, v11) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;IILjava/lang/String;ZZZZ)Ljava/lang/String;` @kind static;
  #L23b866.  v19:= temp @kind object;
  #L23b868.  if v22 == 0 then goto L23b8a6;
  #L23b86c.  v3:= new `java.lang.StringBuilder`;
  #L23b870.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23b876.  v0:= v28 @kind object;
  #L23b87a.  v4:= v0.`okhttp3.HttpUrl$Builder.encodedUsername` @type ^`java.lang.String` @kind object;
  #L23b87e.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23b884.  v3:= temp @kind object;
  #L23b886.  v4:= "%40" @kind object;
  #L23b88a.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23b890.  v3:= temp @kind object;
  #L23b892.  v0:= v19 @kind object;
  #L23b896.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23b89c.  v3:= temp @kind object;
  #L23b89e.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23b8a4.  v19:= temp @kind object;
  #L23b8a6.  v0:= v19 @kind object;
  #L23b8aa.  v1:= v28 @kind object;
  #L23b8ae.  v1.`okhttp3.HttpUrl$Builder.encodedUsername` @type ^`java.lang.String` := v0 @kind object;
  #L23b8b2.  v0:= v20;
  #L23b8b6.  if v6 == v0 then goto L23b8e6;
  #L23b8ba.  v21:= 1I;
  #L23b8be.  v8:= v6 + 1;
  #L23b8c2.  v10:= " \"':;<=>@[]^`{}|/\\?#" @kind object;
  #L23b8c6.  v11:= 1I;
  #L23b8c8.  v12:= 0I;
  #L23b8ca.  v13:= 0I;
  #L23b8cc.  v14:= 1I;
  #L23b8ce.  v7:= v30 @kind object;
  #L23b8d2.  v9:= v20;
  #L23b8d6.  call temp:= `canonicalize`(v7, v8, v9, v10, v11, v12, v13, v14) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;IILjava/lang/String;ZZZZ)Ljava/lang/String;` @kind static;
  #L23b8dc.  v3:= temp @kind object;
  #L23b8de.  v0:= v28 @kind object;
  #L23b8e2.  v0.`okhttp3.HttpUrl$Builder.encodedPassword` @type ^`java.lang.String` := v3 @kind object;
  #L23b8e6.  v22:= 1I;
  #L23b8ea.  v5:= v20 + 1;
  #L23b8ee.  goto L23b73a;
  #L23b8f2.  v3:= new `java.lang.StringBuilder`;
  #L23b8f6.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23b8fc.  v0:= v28 @kind object;
  #L23b900.  v4:= v0.`okhttp3.HttpUrl$Builder.encodedPassword` @type ^`java.lang.String` @kind object;
  #L23b904.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23b90a.  v3:= temp @kind object;
  #L23b90c.  v4:= "%40" @kind object;
  #L23b910.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23b916.  v3:= temp @kind object;
  #L23b918.  v10:= " \"':;<=>@[]^`{}|/\\?#" @kind object;
  #L23b91c.  v11:= 1I;
  #L23b91e.  v12:= 0I;
  #L23b920.  v13:= 0I;
  #L23b922.  v14:= 1I;
  #L23b924.  v7:= v30 @kind object;
  #L23b928.  v8:= v5;
  #L23b92a.  v9:= v20;
  #L23b92e.  call temp:= `canonicalize`(v7, v8, v9, v10, v11, v12, v13, v14) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;IILjava/lang/String;ZZZZ)Ljava/lang/String;` @kind static;
  #L23b934.  v4:= temp @kind object;
  #L23b936.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23b93c.  v3:= temp @kind object;
  #L23b93e.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23b944.  v3:= temp @kind object;
  #L23b946.  v0:= v28 @kind object;
  #L23b94a.  v0.`okhttp3.HttpUrl$Builder.encodedPassword` @type ^`java.lang.String` := v3 @kind object;
  #L23b94e.  goto L23b8ea;
  #L23b950.  v0:= v30 @kind object;
  #L23b954.  v1:= v25;
  #L23b958.  call temp:= `canonicalizeHost`(v0, v5, v1) @signature `Lokhttp3/HttpUrl$Builder;.canonicalizeHost:(Ljava/lang/String;II)Ljava/lang/String;` @kind static;
  #L23b95e.  v3:= temp @kind object;
  #L23b960.  v0:= v28 @kind object;
  #L23b964.  v0.`okhttp3.HttpUrl$Builder.host` @type ^`java.lang.String` := v3 @kind object;
  #L23b968.  v0:= v28 @kind object;
  #L23b96c.  v3:= v0.`okhttp3.HttpUrl$Builder.scheme` @type ^`java.lang.String` @kind object;
  #L23b970.  call temp:= `defaultPort`(v3) @signature `Lokhttp3/HttpUrl;.defaultPort:(Ljava/lang/String;)I` @kind static;
  #L23b976.  v3:= temp;
  #L23b978.  v0:= v28 @kind object;
  #L23b97c.  v0.`okhttp3.HttpUrl$Builder.port` @type ^`int` := v3;
  #L23b980.  v0:= v28 @kind object;
  #L23b984.  v3:= v0.`okhttp3.HttpUrl$Builder.host` @type ^`java.lang.String` @kind object;
  #L23b988.  if v3 != 0 then goto L23b994;
  #L23b98c.  v3:= `@@okhttp3.HttpUrl$Builder$ParseResult.INVALID_HOST` @type ^`okhttp3.HttpUrl$Builder$ParseResult` @kind object;
  #L23b990.  goto L23b7d4;
  #L23b994.  v5:= v20;
  #L23b998.  v3:= "?#" @kind object;
  #L23b99c.  v0:= v30 @kind object;
  #L23b9a0.  v1:= v23;
  #L23b9a4.  call temp:= `delimiterOffset`(v0, v5, v1, v3) @signature `Lokhttp3/internal/Util;.delimiterOffset:(Ljava/lang/String;IILjava/lang/String;)I` @kind static;
  #L23b9aa.  v24:= temp;
  #L23b9ac.  v0:= v28 @kind object;
  #L23b9b0.  v1:= v30 @kind object;
  #L23b9b4.  v2:= v24;
  #L23b9b8.  call `resolvePath`(v0, v1, v5, v2) @signature `Lokhttp3/HttpUrl$Builder;.resolvePath:(Ljava/lang/String;II)V` @kind direct;
  #L23b9be.  v5:= v24;
  #L23b9c2.  v0:= v23;
  #L23b9c6.  if v5 >= v0 then goto L23ba20;
  #L23b9ca.  v0:= v30 @kind object;
  #L23b9ce.  call temp:= `charAt`(v0, v5) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L23b9d4.  v3:= temp;
  #L23b9d6.  v4:= 63I;
  #L23b9da.  if v3 != v4 then goto L23ba20;
  #L23b9de.  v3:= 35I;
  #L23b9e2.  v0:= v30 @kind object;
  #L23b9e6.  v1:= v23;
  #L23b9ea.  call temp:= `delimiterOffset`(v0, v5, v1, v3) @signature `Lokhttp3/internal/Util;.delimiterOffset:(Ljava/lang/String;IIC)I` @kind static;
  #L23b9f0.  v9:= temp;
  #L23b9f2.  v8:= v5 + 1;
  #L23b9f6.  v10:= " \"'<>#" @kind object;
  #L23b9fa.  v11:= 1I;
  #L23b9fc.  v12:= 0I;
  #L23b9fe.  v13:= 1I;
  #L23ba00.  v14:= 1I;
  #L23ba02.  v7:= v30 @kind object;
  #L23ba06.  call temp:= `canonicalize`(v7, v8, v9, v10, v11, v12, v13, v14) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;IILjava/lang/String;ZZZZ)Ljava/lang/String;` @kind static;
  #L23ba0c.  v3:= temp @kind object;
  #L23ba0e.  call temp:= `queryStringToNamesAndValues`(v3) @signature `Lokhttp3/HttpUrl;.queryStringToNamesAndValues:(Ljava/lang/String;)Ljava/util/List;` @kind static;
  #L23ba14.  v3:= temp @kind object;
  #L23ba16.  v0:= v28 @kind object;
  #L23ba1a.  v0.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` := v3 @kind object;
  #L23ba1e.  v5:= v9;
  #L23ba20.  v0:= v23;
  #L23ba24.  if v5 >= v0 then goto L23ba68;
  #L23ba28.  v0:= v30 @kind object;
  #L23ba2c.  call temp:= `charAt`(v0, v5) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L23ba32.  v3:= temp;
  #L23ba34.  v4:= 35I;
  #L23ba38.  if v3 != v4 then goto L23ba68;
  #L23ba3c.  v11:= v5 + 1;
  #L23ba40.  v13:= "" @kind object;
  #L23ba44.  v14:= 1I;
  #L23ba46.  v15:= 0I;
  #L23ba48.  v16:= 0I;
  #L23ba4c.  v17:= 0I;
  #L23ba50.  v10:= v30 @kind object;
  #L23ba54.  v12:= v23;
  #L23ba58.  call temp:= `canonicalize`(v10, v11, v12, v13, v14, v15, v16, v17) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;IILjava/lang/String;ZZZZ)Ljava/lang/String;` @kind static;
  #L23ba5e.  v3:= temp @kind object;
  #L23ba60.  v0:= v28 @kind object;
  #L23ba64.  v0.`okhttp3.HttpUrl$Builder.encodedFragment` @type ^`java.lang.String` := v3 @kind object;
  #L23ba68.  v3:= `@@okhttp3.HttpUrl$Builder$ParseResult.SUCCESS` @type ^`okhttp3.HttpUrl$Builder$ParseResult` @kind object;
  #L23ba6c.  goto L23b7d4;
  #L23ba70.  call temp:= `encodedUsername`(v29) @signature `Lokhttp3/HttpUrl;.encodedUsername:()Ljava/lang/String;` @kind virtual;
  #L23ba76.  v3:= temp @kind object;
  #L23ba78.  v0:= v28 @kind object;
  #L23ba7c.  v0.`okhttp3.HttpUrl$Builder.encodedUsername` @type ^`java.lang.String` := v3 @kind object;
  #L23ba80.  call temp:= `encodedPassword`(v29) @signature `Lokhttp3/HttpUrl;.encodedPassword:()Ljava/lang/String;` @kind virtual;
  #L23ba86.  v3:= temp @kind object;
  #L23ba88.  v0:= v28 @kind object;
  #L23ba8c.  v0.`okhttp3.HttpUrl$Builder.encodedPassword` @type ^`java.lang.String` := v3 @kind object;
  #L23ba90.  call temp:= `access$200`(v29) @signature `Lokhttp3/HttpUrl;.access$200:(Lokhttp3/HttpUrl;)Ljava/lang/String;` @kind static;
  #L23ba96.  v3:= temp @kind object;
  #L23ba98.  v0:= v28 @kind object;
  #L23ba9c.  v0.`okhttp3.HttpUrl$Builder.host` @type ^`java.lang.String` := v3 @kind object;
  #L23baa0.  call temp:= `access$300`(v29) @signature `Lokhttp3/HttpUrl;.access$300:(Lokhttp3/HttpUrl;)I` @kind static;
  #L23baa6.  v3:= temp;
  #L23baa8.  v0:= v28 @kind object;
  #L23baac.  v0.`okhttp3.HttpUrl$Builder.port` @type ^`int` := v3;
  #L23bab0.  v0:= v28 @kind object;
  #L23bab4.  v3:= v0.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L23bab8.  call `clear`(v3) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L23babe.  v0:= v28 @kind object;
  #L23bac2.  v3:= v0.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L23bac6.  call temp:= `encodedPathSegments`(v29) @signature `Lokhttp3/HttpUrl;.encodedPathSegments:()Ljava/util/List;` @kind virtual;
  #L23bacc.  v4:= temp @kind object;
  #L23bace.  call temp:= `addAll`(v3, v4) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L23bad4.  v0:= v23;
  #L23bad8.  if v5 == v0 then goto L23baf0;
  #L23badc.  v0:= v30 @kind object;
  #L23bae0.  call temp:= `charAt`(v0, v5) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L23bae6.  v3:= temp;
  #L23bae8.  v4:= 35I;
  #L23baec.  if v3 != v4 then goto L23b998;
  #L23baf0.  call temp:= `encodedQuery`(v29) @signature `Lokhttp3/HttpUrl;.encodedQuery:()Ljava/lang/String;` @kind virtual;
  #L23baf6.  v3:= temp @kind object;
  #L23baf8.  v0:= v28 @kind object;
  #L23bafc.  call temp:= `encodedQuery`(v0, v3) @signature `Lokhttp3/HttpUrl$Builder;.encodedQuery:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @kind virtual;
  #L23bb02.  goto L23b998;
  #L23bb06.  
  #L23bb08.  switch v18
                  | -1 => goto L23b772
                  | 35 => goto L23b772
                  | 47 => goto L23b772
                  | 63 => goto L23b772
                  | 64 => goto L23b838
                  | 92 => goto L23b772
                  | else => goto L23b770;
}
procedure `okhttp3.HttpUrl$Builder` `password`(`okhttp3.HttpUrl$Builder` v6 @kind this, `java.lang.String` v7 @kind object @name `password`) @signature `Lokhttp3/HttpUrl$Builder;.password:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L23bb4c.  v2:= 0I;
  #L23bb4e.  if v7 != 0 then goto L23bb62;
  #L23bb52.  v0:= new `java.lang.NullPointerException`;
  #L23bb56.  v1:= "password == null" @kind object;
  #L23bb5a.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23bb60.  throw v0;
  #L23bb62.  v1:= " \"':;<=>@[]^`{}|/\\?#" @kind object;
  #L23bb66.  v5:= 1I;
  #L23bb68.  v0:= v7 @kind object;
  #L23bb6a.  v3:= v2;
  #L23bb6c.  v4:= v2;
  #L23bb6e.  call temp:= `canonicalize`(v0, v1, v2, v3, v4, v5) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;Ljava/lang/String;ZZZZ)Ljava/lang/String;` @kind static;
  #L23bb74.  v0:= temp @kind object;
  #L23bb76.  v6.`okhttp3.HttpUrl$Builder.encodedPassword` @type ^`java.lang.String` := v0 @kind object;
  #L23bb7a.  return v6 @kind object;
}
procedure `okhttp3.HttpUrl$Builder` `port`(`okhttp3.HttpUrl$Builder` v3 @kind this, `int` v4 @name `port`) @signature `Lokhttp3/HttpUrl$Builder;.port:(I)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L23bb8c.  if v4 <= 0 then goto L23bb9a;
  #L23bb90.  v0:= 65535I;
  #L23bb96.  if v4 <= v0 then goto L23bbcc;
  #L23bb9a.  v0:= new `java.lang.IllegalArgumentException`;
  #L23bb9e.  v1:= new `java.lang.StringBuilder`;
  #L23bba2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23bba8.  v2:= "unexpected port: " @kind object;
  #L23bbac.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23bbb2.  v1:= temp @kind object;
  #L23bbb4.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L23bbba.  v1:= temp @kind object;
  #L23bbbc.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23bbc2.  v1:= temp @kind object;
  #L23bbc4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23bbca.  throw v0;
  #L23bbcc.  v3.`okhttp3.HttpUrl$Builder.port` @type ^`int` := v4;
  #L23bbd0.  return v3 @kind object;
}
procedure `okhttp3.HttpUrl$Builder` `query`(`okhttp3.HttpUrl$Builder` v6 @kind this, `java.lang.String` v7 @kind object @name `query`) @signature `Lokhttp3/HttpUrl$Builder;.query:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L23bbe4.  v4:= 1I;
  #L23bbe6.  v2:= 0I;
  #L23bbe8.  if v7 == 0 then goto L23bc0c;
  #L23bbec.  v1:= " \"'<>#" @kind object;
  #L23bbf0.  v0:= v7 @kind object;
  #L23bbf2.  v3:= v2;
  #L23bbf4.  v5:= v4;
  #L23bbf6.  call temp:= `canonicalize`(v0, v1, v2, v3, v4, v5) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;Ljava/lang/String;ZZZZ)Ljava/lang/String;` @kind static;
  #L23bbfc.  v0:= temp @kind object;
  #L23bbfe.  call temp:= `queryStringToNamesAndValues`(v0) @signature `Lokhttp3/HttpUrl;.queryStringToNamesAndValues:(Ljava/lang/String;)Ljava/util/List;` @kind static;
  #L23bc04.  v0:= temp @kind object;
  #L23bc06.  v6.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` := v0 @kind object;
  #L23bc0a.  return v6 @kind object;
  #L23bc0c.  v0:= 0I;
  #L23bc0e.  goto L23bc06;
}
procedure `okhttp3.HttpUrl$Builder` `reencodeForUri`(`okhttp3.HttpUrl$Builder` v14 @kind this) @signature `Lokhttp3/HttpUrl$Builder;.reencodeForUri:()Lokhttp3/HttpUrl$Builder;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L23bc20.  v4:= 0I;
  #L23bc22.  v2:= 1I;
  #L23bc24.  v12:= 0I;
  #L23bc26.  v1:= v14.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L23bc2a.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L23bc30.  v13:= temp;
  #L23bc32.  if v12 >= v13 then goto L23bc66;
  #L23bc36.  v1:= v14.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L23bc3a.  call temp:= `get`(v1, v12) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L23bc40.  v0:= temp @kind object;
  #L23bc42.  v0:= (`java.lang.String`) v0 @kind object;
  #L23bc46.  v6:= v14.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L23bc4a.  v1:= "[]" @kind object;
  #L23bc4e.  v3:= v2;
  #L23bc50.  v5:= v2;
  #L23bc52.  call temp:= `canonicalize`(v0, v1, v2, v3, v4, v5) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;Ljava/lang/String;ZZZZ)Ljava/lang/String;` @kind static;
  #L23bc58.  v1:= temp @kind object;
  #L23bc5a.  call temp:= `set`(v6, v12, v1) @signature `Ljava/util/List;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L23bc60.  v12:= v12 + 1;
  #L23bc64.  goto L23bc32;
  #L23bc66.  v1:= v14.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` @kind object;
  #L23bc6a.  if v1 == 0 then goto L23bcb8;
  #L23bc6e.  v12:= 0I;
  #L23bc70.  v1:= v14.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` @kind object;
  #L23bc74.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L23bc7a.  v13:= temp;
  #L23bc7c.  if v12 >= v13 then goto L23bcb8;
  #L23bc80.  v1:= v14.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` @kind object;
  #L23bc84.  call temp:= `get`(v1, v12) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L23bc8a.  v5:= temp @kind object;
  #L23bc8c.  v5:= (`java.lang.String`) v5 @kind object;
  #L23bc90.  if v5 == 0 then goto L23bcb2;
  #L23bc94.  v1:= v14.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` @kind object;
  #L23bc98.  v6:= "\\^`{|}" @kind object;
  #L23bc9c.  v7:= v2;
  #L23bc9e.  v8:= v2;
  #L23bca0.  v9:= v2;
  #L23bca2.  v10:= v2;
  #L23bca4.  call temp:= `canonicalize`(v5, v6, v7, v8, v9, v10) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;Ljava/lang/String;ZZZZ)Ljava/lang/String;` @kind static;
  #L23bcaa.  v3:= temp @kind object;
  #L23bcac.  call temp:= `set`(v1, v12, v3) @signature `Ljava/util/List;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L23bcb2.  v12:= v12 + 1;
  #L23bcb6.  goto L23bc7c;
  #L23bcb8.  v1:= v14.`okhttp3.HttpUrl$Builder.encodedFragment` @type ^`java.lang.String` @kind object;
  #L23bcbc.  if v1 == 0 then goto L23bcdc;
  #L23bcc0.  v6:= v14.`okhttp3.HttpUrl$Builder.encodedFragment` @type ^`java.lang.String` @kind object;
  #L23bcc4.  v7:= " \"#<>\\^`{|}" @kind object;
  #L23bcc8.  v8:= v2;
  #L23bcca.  v9:= v2;
  #L23bccc.  v10:= v4;
  #L23bcce.  v11:= v4;
  #L23bcd0.  call temp:= `canonicalize`(v6, v7, v8, v9, v10, v11) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;Ljava/lang/String;ZZZZ)Ljava/lang/String;` @kind static;
  #L23bcd6.  v1:= temp @kind object;
  #L23bcd8.  v14.`okhttp3.HttpUrl$Builder.encodedFragment` @type ^`java.lang.String` := v1 @kind object;
  #L23bcdc.  return v14 @kind object;
}
procedure `okhttp3.HttpUrl$Builder` `removeAllEncodedQueryParameters`(`okhttp3.HttpUrl$Builder` v6 @kind this, `java.lang.String` v7 @kind object @name `encodedName`) @signature `Lokhttp3/HttpUrl$Builder;.removeAllEncodedQueryParameters:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L23bcf0.  v2:= 1I;
  #L23bcf2.  if v7 != 0 then goto L23bd06;
  #L23bcf6.  v0:= new `java.lang.NullPointerException`;
  #L23bcfa.  v1:= "encodedName == null" @kind object;
  #L23bcfe.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23bd04.  throw v0;
  #L23bd06.  v0:= v6.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` @kind object;
  #L23bd0a.  if v0 != 0 then goto L23bd10;
  #L23bd0e.  return v6 @kind object;
  #L23bd10.  v1:= " \"'<>#&=" @kind object;
  #L23bd14.  v3:= 0I;
  #L23bd16.  v0:= v7 @kind object;
  #L23bd18.  v4:= v2;
  #L23bd1a.  v5:= v2;
  #L23bd1c.  call temp:= `canonicalize`(v0, v1, v2, v3, v4, v5) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;Ljava/lang/String;ZZZZ)Ljava/lang/String;` @kind static;
  #L23bd22.  v0:= temp @kind object;
  #L23bd24.  call `removeAllCanonicalQueryParameters`(v6, v0) @signature `Lokhttp3/HttpUrl$Builder;.removeAllCanonicalQueryParameters:(Ljava/lang/String;)V` @kind direct;
  #L23bd2a.  goto L23bd0e;
}
procedure `okhttp3.HttpUrl$Builder` `removeAllQueryParameters`(`okhttp3.HttpUrl$Builder` v7 @kind this, `java.lang.String` v8 @kind object @name `name`) @signature `Lokhttp3/HttpUrl$Builder;.removeAllQueryParameters:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L23bd3c.  v4:= 1I;
  #L23bd3e.  v2:= 0I;
  #L23bd40.  if v8 != 0 then goto L23bd54;
  #L23bd44.  v0:= new `java.lang.NullPointerException`;
  #L23bd48.  v1:= "name == null" @kind object;
  #L23bd4c.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23bd52.  throw v0;
  #L23bd54.  v0:= v7.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` @kind object;
  #L23bd58.  if v0 != 0 then goto L23bd5e;
  #L23bd5c.  return v7 @kind object;
  #L23bd5e.  v1:= " \"'<>#&=" @kind object;
  #L23bd62.  v0:= v8 @kind object;
  #L23bd64.  v3:= v2;
  #L23bd66.  v5:= v4;
  #L23bd68.  call temp:= `canonicalize`(v0, v1, v2, v3, v4, v5) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;Ljava/lang/String;ZZZZ)Ljava/lang/String;` @kind static;
  #L23bd6e.  v6:= temp @kind object;
  #L23bd70.  call `removeAllCanonicalQueryParameters`(v7, v6) @signature `Lokhttp3/HttpUrl$Builder;.removeAllCanonicalQueryParameters:(Ljava/lang/String;)V` @kind direct;
  #L23bd76.  goto L23bd5c;
}
procedure `okhttp3.HttpUrl$Builder` `removePathSegment`(`okhttp3.HttpUrl$Builder` v2 @kind this, `int` v3 @name `index`) @signature `Lokhttp3/HttpUrl$Builder;.removePathSegment:(I)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23bd88.  v0:= v2.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L23bd8c.  call temp:= `remove`(v0, v3) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L23bd92.  v0:= v2.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L23bd96.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L23bd9c.  v0:= temp;
  #L23bd9e.  if v0 == 0 then goto L23bdb0;
  #L23bda2.  v0:= v2.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L23bda6.  v1:= "" @kind object;
  #L23bdaa.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L23bdb0.  return v2 @kind object;
}
procedure `okhttp3.HttpUrl$Builder` `scheme`(`okhttp3.HttpUrl$Builder` v3 @kind this, `java.lang.String` v4 @kind object @name `scheme`) @signature `Lokhttp3/HttpUrl$Builder;.scheme:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L23bdc4.  if v4 != 0 then goto L23bdd8;
  #L23bdc8.  v0:= new `java.lang.NullPointerException`;
  #L23bdcc.  v1:= "scheme == null" @kind object;
  #L23bdd0.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23bdd6.  throw v0;
  #L23bdd8.  v0:= "http" @kind object;
  #L23bddc.  call temp:= `equalsIgnoreCase`(v4, v0) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L23bde2.  v0:= temp;
  #L23bde4.  if v0 == 0 then goto L23bdf2;
  #L23bde8.  v0:= "http" @kind object;
  #L23bdec.  v3.`okhttp3.HttpUrl$Builder.scheme` @type ^`java.lang.String` := v0 @kind object;
  #L23bdf0.  return v3 @kind object;
  #L23bdf2.  v0:= "https" @kind object;
  #L23bdf6.  call temp:= `equalsIgnoreCase`(v4, v0) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L23bdfc.  v0:= temp;
  #L23bdfe.  if v0 == 0 then goto L23be0c;
  #L23be02.  v0:= "https" @kind object;
  #L23be06.  v3.`okhttp3.HttpUrl$Builder.scheme` @type ^`java.lang.String` := v0 @kind object;
  #L23be0a.  goto L23bdf0;
  #L23be0c.  v0:= new `java.lang.IllegalArgumentException`;
  #L23be10.  v1:= new `java.lang.StringBuilder`;
  #L23be14.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23be1a.  v2:= "unexpected scheme: " @kind object;
  #L23be1e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23be24.  v1:= temp @kind object;
  #L23be26.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23be2c.  v1:= temp @kind object;
  #L23be2e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23be34.  v1:= temp @kind object;
  #L23be36.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23be3c.  throw v0;
}
procedure `okhttp3.HttpUrl$Builder` `setEncodedPathSegment`(`okhttp3.HttpUrl$Builder` v9 @kind this, `int` v10 @name `index`, `java.lang.String` v11 @kind object @name `encodedPathSegment`) @signature `Lokhttp3/HttpUrl$Builder;.setEncodedPathSegment:(ILjava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L23be50.  v4:= 1I;
  #L23be52.  v1:= 0I;
  #L23be54.  if v11 != 0 then goto L23be68;
  #L23be58.  v0:= new `java.lang.NullPointerException`;
  #L23be5c.  v1:= "encodedPathSegment == null" @kind object;
  #L23be60.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23be66.  throw v0;
  #L23be68.  call temp:= `length`(v11) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L23be6e.  v2:= temp;
  #L23be70.  v3:= " \"<>^`{}|/\\?#" @kind object;
  #L23be74.  v0:= v11 @kind object;
  #L23be76.  v5:= v1;
  #L23be78.  v6:= v1;
  #L23be7a.  v7:= v4;
  #L23be7c.  call temp:= `canonicalize`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;IILjava/lang/String;ZZZZ)Ljava/lang/String;` @kind static;
  #L23be82.  v8:= temp @kind object;
  #L23be84.  v0:= v9.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L23be88.  call temp:= `set`(v0, v10, v8) @signature `Ljava/util/List;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L23be8e.  call temp:= `isDot`(v9, v8) @signature `Lokhttp3/HttpUrl$Builder;.isDot:(Ljava/lang/String;)Z` @kind direct;
  #L23be94.  v0:= temp;
  #L23be96.  if v0 != 0 then goto L23bea6;
  #L23be9a.  call temp:= `isDotDot`(v9, v8) @signature `Lokhttp3/HttpUrl$Builder;.isDotDot:(Ljava/lang/String;)Z` @kind direct;
  #L23bea0.  v0:= temp;
  #L23bea2.  if v0 == 0 then goto L23bed8;
  #L23bea6.  v0:= new `java.lang.IllegalArgumentException`;
  #L23beaa.  v1:= new `java.lang.StringBuilder`;
  #L23beae.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23beb4.  v2:= "unexpected path segment: " @kind object;
  #L23beb8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23bebe.  v1:= temp @kind object;
  #L23bec0.  call temp:= `append`(v1, v11) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23bec6.  v1:= temp @kind object;
  #L23bec8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23bece.  v1:= temp @kind object;
  #L23bed0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23bed6.  throw v0;
  #L23bed8.  return v9 @kind object;
}
procedure `okhttp3.HttpUrl$Builder` `setEncodedQueryParameter`(`okhttp3.HttpUrl$Builder` v0 @kind this, `java.lang.String` v1 @kind object @name `encodedName`, `java.lang.String` v2 @kind object @name `encodedValue`) @signature `Lokhttp3/HttpUrl$Builder;.setEncodedQueryParameter:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;

  #L23beec.  call temp:= `removeAllEncodedQueryParameters`(v0, v1) @signature `Lokhttp3/HttpUrl$Builder;.removeAllEncodedQueryParameters:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @kind virtual;
  #L23bef2.  call temp:= `addEncodedQueryParameter`(v0, v1, v2) @signature `Lokhttp3/HttpUrl$Builder;.addEncodedQueryParameter:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @kind virtual;
  #L23bef8.  return v0 @kind object;
}
procedure `okhttp3.HttpUrl$Builder` `setPathSegment`(`okhttp3.HttpUrl$Builder` v9 @kind this, `int` v10 @name `index`, `java.lang.String` v11 @kind object @name `pathSegment`) @signature `Lokhttp3/HttpUrl$Builder;.setPathSegment:(ILjava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L23bf0c.  v1:= 0I;
  #L23bf0e.  if v11 != 0 then goto L23bf22;
  #L23bf12.  v0:= new `java.lang.NullPointerException`;
  #L23bf16.  v1:= "pathSegment == null" @kind object;
  #L23bf1a.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23bf20.  throw v0;
  #L23bf22.  call temp:= `length`(v11) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L23bf28.  v2:= temp;
  #L23bf2a.  v3:= " \"<>^`{}|/\\?#" @kind object;
  #L23bf2e.  v7:= 1I;
  #L23bf30.  v0:= v11 @kind object;
  #L23bf32.  v4:= v1;
  #L23bf34.  v5:= v1;
  #L23bf36.  v6:= v1;
  #L23bf38.  call temp:= `canonicalize`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;IILjava/lang/String;ZZZZ)Ljava/lang/String;` @kind static;
  #L23bf3e.  v8:= temp @kind object;
  #L23bf40.  call temp:= `isDot`(v9, v8) @signature `Lokhttp3/HttpUrl$Builder;.isDot:(Ljava/lang/String;)Z` @kind direct;
  #L23bf46.  v0:= temp;
  #L23bf48.  if v0 != 0 then goto L23bf58;
  #L23bf4c.  call temp:= `isDotDot`(v9, v8) @signature `Lokhttp3/HttpUrl$Builder;.isDotDot:(Ljava/lang/String;)Z` @kind direct;
  #L23bf52.  v0:= temp;
  #L23bf54.  if v0 == 0 then goto L23bf8a;
  #L23bf58.  v0:= new `java.lang.IllegalArgumentException`;
  #L23bf5c.  v1:= new `java.lang.StringBuilder`;
  #L23bf60.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23bf66.  v2:= "unexpected path segment: " @kind object;
  #L23bf6a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23bf70.  v1:= temp @kind object;
  #L23bf72.  call temp:= `append`(v1, v11) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23bf78.  v1:= temp @kind object;
  #L23bf7a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23bf80.  v1:= temp @kind object;
  #L23bf82.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23bf88.  throw v0;
  #L23bf8a.  v0:= v9.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L23bf8e.  call temp:= `set`(v0, v10, v8) @signature `Ljava/util/List;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L23bf94.  return v9 @kind object;
}
procedure `okhttp3.HttpUrl$Builder` `setQueryParameter`(`okhttp3.HttpUrl$Builder` v0 @kind this, `java.lang.String` v1 @kind object @name `name`, `java.lang.String` v2 @kind object @name `value`) @signature `Lokhttp3/HttpUrl$Builder;.setQueryParameter:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;

  #L23bfa8.  call temp:= `removeAllQueryParameters`(v0, v1) @signature `Lokhttp3/HttpUrl$Builder;.removeAllQueryParameters:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @kind virtual;
  #L23bfae.  call temp:= `addQueryParameter`(v0, v1, v2) @signature `Lokhttp3/HttpUrl$Builder;.addQueryParameter:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @kind virtual;
  #L23bfb4.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okhttp3.HttpUrl$Builder` v5 @kind this) @signature `Lokhttp3/HttpUrl$Builder;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L23bfc8.  v4:= 58I;
  #L23bfcc.  v1:= new `java.lang.StringBuilder`;
  #L23bfd0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23bfd6.  v2:= v5.`okhttp3.HttpUrl$Builder.scheme` @type ^`java.lang.String` @kind object;
  #L23bfda.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23bfe0.  v2:= "://" @kind object;
  #L23bfe4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23bfea.  v2:= v5.`okhttp3.HttpUrl$Builder.encodedUsername` @type ^`java.lang.String` @kind object;
  #L23bfee.  call temp:= `isEmpty`(v2) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L23bff4.  v2:= temp;
  #L23bff6.  if v2 == 0 then goto L23c00a;
  #L23bffa.  v2:= v5.`okhttp3.HttpUrl$Builder.encodedPassword` @type ^`java.lang.String` @kind object;
  #L23bffe.  call temp:= `isEmpty`(v2) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L23c004.  v2:= temp;
  #L23c006.  if v2 != 0 then goto L23c03e;
  #L23c00a.  v2:= v5.`okhttp3.HttpUrl$Builder.encodedUsername` @type ^`java.lang.String` @kind object;
  #L23c00e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c014.  v2:= v5.`okhttp3.HttpUrl$Builder.encodedPassword` @type ^`java.lang.String` @kind object;
  #L23c018.  call temp:= `isEmpty`(v2) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L23c01e.  v2:= temp;
  #L23c020.  if v2 != 0 then goto L23c034;
  #L23c024.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c02a.  v2:= v5.`okhttp3.HttpUrl$Builder.encodedPassword` @type ^`java.lang.String` @kind object;
  #L23c02e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c034.  v2:= 64I;
  #L23c038.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c03e.  v2:= v5.`okhttp3.HttpUrl$Builder.host` @type ^`java.lang.String` @kind object;
  #L23c042.  call temp:= `indexOf`(v2, v4) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L23c048.  v2:= temp;
  #L23c04a.  v3:= -1I;
  #L23c04c.  if v2 == v3 then goto L23c0de;
  #L23c050.  v2:= 91I;
  #L23c054.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c05a.  v2:= v5.`okhttp3.HttpUrl$Builder.host` @type ^`java.lang.String` @kind object;
  #L23c05e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c064.  v2:= 93I;
  #L23c068.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c06e.  call temp:= `effectivePort`(v5) @signature `Lokhttp3/HttpUrl$Builder;.effectivePort:()I` @kind virtual;
  #L23c074.  v0:= temp;
  #L23c076.  v2:= v5.`okhttp3.HttpUrl$Builder.scheme` @type ^`java.lang.String` @kind object;
  #L23c07a.  call temp:= `defaultPort`(v2) @signature `Lokhttp3/HttpUrl;.defaultPort:(Ljava/lang/String;)I` @kind static;
  #L23c080.  v2:= temp;
  #L23c082.  if v0 == v2 then goto L23c092;
  #L23c086.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c08c.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c092.  v2:= v5.`okhttp3.HttpUrl$Builder.encodedPathSegments` @type ^`java.util.List` @kind object;
  #L23c096.  call `pathSegmentsToString`(v1, v2) @signature `Lokhttp3/HttpUrl;.pathSegmentsToString:(Ljava/lang/StringBuilder;Ljava/util/List;)V` @kind static;
  #L23c09c.  v2:= v5.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` @kind object;
  #L23c0a0.  if v2 == 0 then goto L23c0b8;
  #L23c0a4.  v2:= 63I;
  #L23c0a8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c0ae.  v2:= v5.`okhttp3.HttpUrl$Builder.encodedQueryNamesAndValues` @type ^`java.util.List` @kind object;
  #L23c0b2.  call `namesAndValuesToQueryString`(v1, v2) @signature `Lokhttp3/HttpUrl;.namesAndValuesToQueryString:(Ljava/lang/StringBuilder;Ljava/util/List;)V` @kind static;
  #L23c0b8.  v2:= v5.`okhttp3.HttpUrl$Builder.encodedFragment` @type ^`java.lang.String` @kind object;
  #L23c0bc.  if v2 == 0 then goto L23c0d4;
  #L23c0c0.  v2:= 35I;
  #L23c0c4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c0ca.  v2:= v5.`okhttp3.HttpUrl$Builder.encodedFragment` @type ^`java.lang.String` @kind object;
  #L23c0ce.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c0d4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23c0da.  v2:= temp @kind object;
  #L23c0dc.  return v2 @kind object;
  #L23c0de.  v2:= v5.`okhttp3.HttpUrl$Builder.host` @type ^`java.lang.String` @kind object;
  #L23c0e2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c0e8.  goto L23c06e;
}
procedure `okhttp3.HttpUrl$Builder` `username`(`okhttp3.HttpUrl$Builder` v6 @kind this, `java.lang.String` v7 @kind object @name `username`) @signature `Lokhttp3/HttpUrl$Builder;.username:(Ljava/lang/String;)Lokhttp3/HttpUrl$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L23c0fc.  v2:= 0I;
  #L23c0fe.  if v7 != 0 then goto L23c112;
  #L23c102.  v0:= new `java.lang.NullPointerException`;
  #L23c106.  v1:= "username == null" @kind object;
  #L23c10a.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23c110.  throw v0;
  #L23c112.  v1:= " \"':;<=>@[]^`{}|/\\?#" @kind object;
  #L23c116.  v5:= 1I;
  #L23c118.  v0:= v7 @kind object;
  #L23c11a.  v3:= v2;
  #L23c11c.  v4:= v2;
  #L23c11e.  call temp:= `canonicalize`(v0, v1, v2, v3, v4, v5) @signature `Lokhttp3/HttpUrl;.canonicalize:(Ljava/lang/String;Ljava/lang/String;ZZZZ)Ljava/lang/String;` @kind static;
  #L23c124.  v0:= temp @kind object;
  #L23c126.  v6.`okhttp3.HttpUrl$Builder.encodedUsername` @type ^`java.lang.String` := v0 @kind object;
  #L23c12a.  return v6 @kind object;
}
