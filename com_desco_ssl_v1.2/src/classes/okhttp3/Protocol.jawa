record `okhttp3.Protocol` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class {
  `java.lang.String` `okhttp3.Protocol.protocol` @AccessFlag PRIVATE_FINAL;
}
global `okhttp3.Protocol`[] `@@okhttp3.Protocol.$VALUES` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `okhttp3.Protocol` `@@okhttp3.Protocol.HTTP_1_0` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `okhttp3.Protocol` `@@okhttp3.Protocol.HTTP_1_1` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `okhttp3.Protocol` `@@okhttp3.Protocol.HTTP_2` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `okhttp3.Protocol` `@@okhttp3.Protocol.SPDY_3` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
procedure `void` `<clinit>`() @signature `Lokhttp3/Protocol;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L23df18.  v6:= 3I;
  #L23df1a.  v5:= 2I;
  #L23df1c.  v4:= 1I;
  #L23df1e.  v3:= 0I;
  #L23df20.  v0:= new `okhttp3.Protocol`;
  #L23df24.  v1:= "HTTP_1_0" @kind object;
  #L23df28.  v2:= "http/1.0" @kind object;
  #L23df2c.  call `<init>`(v0, v1, v3, v2) @signature `Lokhttp3/Protocol;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L23df32.  `@@okhttp3.Protocol.HTTP_1_0` @type ^`okhttp3.Protocol` := v0 @kind object;
  #L23df36.  v0:= new `okhttp3.Protocol`;
  #L23df3a.  v1:= "HTTP_1_1" @kind object;
  #L23df3e.  v2:= "http/1.1" @kind object;
  #L23df42.  call `<init>`(v0, v1, v4, v2) @signature `Lokhttp3/Protocol;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L23df48.  `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` := v0 @kind object;
  #L23df4c.  v0:= new `okhttp3.Protocol`;
  #L23df50.  v1:= "SPDY_3" @kind object;
  #L23df54.  v2:= "spdy/3.1" @kind object;
  #L23df58.  call `<init>`(v0, v1, v5, v2) @signature `Lokhttp3/Protocol;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L23df5e.  `@@okhttp3.Protocol.SPDY_3` @type ^`okhttp3.Protocol` := v0 @kind object;
  #L23df62.  v0:= new `okhttp3.Protocol`;
  #L23df66.  v1:= "HTTP_2" @kind object;
  #L23df6a.  v2:= "h2" @kind object;
  #L23df6e.  call `<init>`(v0, v1, v6, v2) @signature `Lokhttp3/Protocol;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L23df74.  `@@okhttp3.Protocol.HTTP_2` @type ^`okhttp3.Protocol` := v0 @kind object;
  #L23df78.  v0:= 4I;
  #L23df7a.  v0:= new `okhttp3.Protocol`[v0];
  #L23df7e.  v1:= `@@okhttp3.Protocol.HTTP_1_0` @type ^`okhttp3.Protocol` @kind object;
  #L23df82.  v0[v3]:= v1 @kind object;
  #L23df86.  v1:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L23df8a.  v0[v4]:= v1 @kind object;
  #L23df8e.  v1:= `@@okhttp3.Protocol.SPDY_3` @type ^`okhttp3.Protocol` @kind object;
  #L23df92.  v0[v5]:= v1 @kind object;
  #L23df96.  v1:= `@@okhttp3.Protocol.HTTP_2` @type ^`okhttp3.Protocol` @kind object;
  #L23df9a.  v0[v6]:= v1 @kind object;
  #L23df9e.  `@@okhttp3.Protocol.$VALUES` @type ^`okhttp3.Protocol`[] := v0 @kind object;
  #L23dfa2.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.Protocol` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `java.lang.String` v3 @kind object @name `protocol`) @signature `Lokhttp3/Protocol;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L23dfb4.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L23dfba.  v0.`okhttp3.Protocol.protocol` @type ^`java.lang.String` := v3 @kind object;
  #L23dfbe.  return @kind void;
}
procedure `okhttp3.Protocol` `get`(`java.lang.String` v3 @kind object @name `protocol`) @signature `Lokhttp3/Protocol;.get:(Ljava/lang/String;)Lokhttp3/Protocol;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L23dfd0.  v0:= `@@okhttp3.Protocol.HTTP_1_0` @type ^`okhttp3.Protocol` @kind object;
  #L23dfd4.  v0:= v0.`okhttp3.Protocol.protocol` @type ^`java.lang.String` @kind object;
  #L23dfd8.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L23dfde.  v0:= temp;
  #L23dfe0.  if v0 == 0 then goto L23dfea;
  #L23dfe4.  v0:= `@@okhttp3.Protocol.HTTP_1_0` @type ^`okhttp3.Protocol` @kind object;
  #L23dfe8.  return v0 @kind object;
  #L23dfea.  v0:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L23dfee.  v0:= v0.`okhttp3.Protocol.protocol` @type ^`java.lang.String` @kind object;
  #L23dff2.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L23dff8.  v0:= temp;
  #L23dffa.  if v0 == 0 then goto L23e004;
  #L23dffe.  v0:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L23e002.  goto L23dfe8;
  #L23e004.  v0:= `@@okhttp3.Protocol.HTTP_2` @type ^`okhttp3.Protocol` @kind object;
  #L23e008.  v0:= v0.`okhttp3.Protocol.protocol` @type ^`java.lang.String` @kind object;
  #L23e00c.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L23e012.  v0:= temp;
  #L23e014.  if v0 == 0 then goto L23e01e;
  #L23e018.  v0:= `@@okhttp3.Protocol.HTTP_2` @type ^`okhttp3.Protocol` @kind object;
  #L23e01c.  goto L23dfe8;
  #L23e01e.  v0:= `@@okhttp3.Protocol.SPDY_3` @type ^`okhttp3.Protocol` @kind object;
  #L23e022.  v0:= v0.`okhttp3.Protocol.protocol` @type ^`java.lang.String` @kind object;
  #L23e026.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L23e02c.  v0:= temp;
  #L23e02e.  if v0 == 0 then goto L23e038;
  #L23e032.  v0:= `@@okhttp3.Protocol.SPDY_3` @type ^`okhttp3.Protocol` @kind object;
  #L23e036.  goto L23dfe8;
  #L23e038.  v0:= new `java.io.IOException`;
  #L23e03c.  v1:= new `java.lang.StringBuilder`;
  #L23e040.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23e046.  v2:= "Unexpected protocol: " @kind object;
  #L23e04a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23e050.  v1:= temp @kind object;
  #L23e052.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23e058.  v1:= temp @kind object;
  #L23e05a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23e060.  v1:= temp @kind object;
  #L23e062.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23e068.  throw v0;
}
procedure `okhttp3.Protocol` `valueOf`(`java.lang.String` v1 @kind object @name `name`) @signature `Lokhttp3/Protocol;.valueOf:(Ljava/lang/String;)Lokhttp3/Protocol;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L23e07c.  v0:= constclass @type ^`okhttp3.Protocol` @kind object;
  #L23e080.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L23e086.  v0:= temp @kind object;
  #L23e088.  v0:= (`okhttp3.Protocol`) v0 @kind object;
  #L23e08c.  return v0 @kind object;
}
procedure `okhttp3.Protocol`[] `values`() @signature `Lokhttp3/Protocol;.values:()[Lokhttp3/Protocol;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L23e0a0.  v0:= `@@okhttp3.Protocol.$VALUES` @type ^`okhttp3.Protocol`[] @kind object;
  #L23e0a4.  call temp:= `clone`(v0) @signature `[Lokhttp3/Protocol;.clone:()Ljava/lang/Object;` @kind virtual;
  #L23e0aa.  v0:= temp @kind object;
  #L23e0ac.  v0:= (`okhttp3.Protocol`[]) v0 @kind object;
  #L23e0b0.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okhttp3.Protocol` v1 @kind this) @signature `Lokhttp3/Protocol;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23e0c4.  v0:= v1.`okhttp3.Protocol.protocol` @type ^`java.lang.String` @kind object;
  #L23e0c8.  return v0 @kind object;
}
