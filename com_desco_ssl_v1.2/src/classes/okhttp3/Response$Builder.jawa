record `okhttp3.Response$Builder` @kind class @AccessFlag PUBLIC {
  `okhttp3.ResponseBody` `okhttp3.Response$Builder.body` @AccessFlag PRIVATE;
  `okhttp3.Response` `okhttp3.Response$Builder.cacheResponse` @AccessFlag PRIVATE;
  `int` `okhttp3.Response$Builder.code` @AccessFlag PRIVATE;
  `okhttp3.Handshake` `okhttp3.Response$Builder.handshake` @AccessFlag PRIVATE;
  `okhttp3.Headers$Builder` `okhttp3.Response$Builder.headers` @AccessFlag PRIVATE;
  `java.lang.String` `okhttp3.Response$Builder.message` @AccessFlag PRIVATE;
  `okhttp3.Response` `okhttp3.Response$Builder.networkResponse` @AccessFlag PRIVATE;
  `okhttp3.Response` `okhttp3.Response$Builder.priorResponse` @AccessFlag PRIVATE;
  `okhttp3.Protocol` `okhttp3.Response$Builder.protocol` @AccessFlag PRIVATE;
  `long` `okhttp3.Response$Builder.receivedResponseAtMillis` @AccessFlag PRIVATE;
  `okhttp3.Request` `okhttp3.Response$Builder.request` @AccessFlag PRIVATE;
  `long` `okhttp3.Response$Builder.sentRequestAtMillis` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`okhttp3.Response$Builder` v1 @kind this) @signature `Lokhttp3/Response$Builder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L23ea4c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L23ea52.  v0:= -1I;
  #L23ea54.  v1.`okhttp3.Response$Builder.code` @type ^`int` := v0;
  #L23ea58.  v0:= new `okhttp3.Headers$Builder`;
  #L23ea5c.  call `<init>`(v0) @signature `Lokhttp3/Headers$Builder;.<init>:()V` @kind direct;
  #L23ea62.  v1.`okhttp3.Response$Builder.headers` @type ^`okhttp3.Headers$Builder` := v0 @kind object;
  #L23ea66.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.Response$Builder` v2 @kind this, `okhttp3.Response` v3 @kind object @name `response`) @signature `Lokhttp3/Response$Builder;.<init>:(Lokhttp3/Response;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L23ea78.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L23ea7e.  v0:= -1I;
  #L23ea80.  v2.`okhttp3.Response$Builder.code` @type ^`int` := v0;
  #L23ea84.  call temp:= `access$1300`(v3) @signature `Lokhttp3/Response;.access$1300:(Lokhttp3/Response;)Lokhttp3/Request;` @kind static;
  #L23ea8a.  v0:= temp @kind object;
  #L23ea8c.  v2.`okhttp3.Response$Builder.request` @type ^`okhttp3.Request` := v0 @kind object;
  #L23ea90.  call temp:= `access$1400`(v3) @signature `Lokhttp3/Response;.access$1400:(Lokhttp3/Response;)Lokhttp3/Protocol;` @kind static;
  #L23ea96.  v0:= temp @kind object;
  #L23ea98.  v2.`okhttp3.Response$Builder.protocol` @type ^`okhttp3.Protocol` := v0 @kind object;
  #L23ea9c.  call temp:= `access$1500`(v3) @signature `Lokhttp3/Response;.access$1500:(Lokhttp3/Response;)I` @kind static;
  #L23eaa2.  v0:= temp;
  #L23eaa4.  v2.`okhttp3.Response$Builder.code` @type ^`int` := v0;
  #L23eaa8.  call temp:= `access$1600`(v3) @signature `Lokhttp3/Response;.access$1600:(Lokhttp3/Response;)Ljava/lang/String;` @kind static;
  #L23eaae.  v0:= temp @kind object;
  #L23eab0.  v2.`okhttp3.Response$Builder.message` @type ^`java.lang.String` := v0 @kind object;
  #L23eab4.  call temp:= `access$1700`(v3) @signature `Lokhttp3/Response;.access$1700:(Lokhttp3/Response;)Lokhttp3/Handshake;` @kind static;
  #L23eaba.  v0:= temp @kind object;
  #L23eabc.  v2.`okhttp3.Response$Builder.handshake` @type ^`okhttp3.Handshake` := v0 @kind object;
  #L23eac0.  call temp:= `access$1800`(v3) @signature `Lokhttp3/Response;.access$1800:(Lokhttp3/Response;)Lokhttp3/Headers;` @kind static;
  #L23eac6.  v0:= temp @kind object;
  #L23eac8.  call temp:= `newBuilder`(v0) @signature `Lokhttp3/Headers;.newBuilder:()Lokhttp3/Headers$Builder;` @kind virtual;
  #L23eace.  v0:= temp @kind object;
  #L23ead0.  v2.`okhttp3.Response$Builder.headers` @type ^`okhttp3.Headers$Builder` := v0 @kind object;
  #L23ead4.  call temp:= `access$1900`(v3) @signature `Lokhttp3/Response;.access$1900:(Lokhttp3/Response;)Lokhttp3/ResponseBody;` @kind static;
  #L23eada.  v0:= temp @kind object;
  #L23eadc.  v2.`okhttp3.Response$Builder.body` @type ^`okhttp3.ResponseBody` := v0 @kind object;
  #L23eae0.  call temp:= `access$2000`(v3) @signature `Lokhttp3/Response;.access$2000:(Lokhttp3/Response;)Lokhttp3/Response;` @kind static;
  #L23eae6.  v0:= temp @kind object;
  #L23eae8.  v2.`okhttp3.Response$Builder.networkResponse` @type ^`okhttp3.Response` := v0 @kind object;
  #L23eaec.  call temp:= `access$2100`(v3) @signature `Lokhttp3/Response;.access$2100:(Lokhttp3/Response;)Lokhttp3/Response;` @kind static;
  #L23eaf2.  v0:= temp @kind object;
  #L23eaf4.  v2.`okhttp3.Response$Builder.cacheResponse` @type ^`okhttp3.Response` := v0 @kind object;
  #L23eaf8.  call temp:= `access$2200`(v3) @signature `Lokhttp3/Response;.access$2200:(Lokhttp3/Response;)Lokhttp3/Response;` @kind static;
  #L23eafe.  v0:= temp @kind object;
  #L23eb00.  v2.`okhttp3.Response$Builder.priorResponse` @type ^`okhttp3.Response` := v0 @kind object;
  #L23eb04.  call temp:= `access$2300`(v3) @signature `Lokhttp3/Response;.access$2300:(Lokhttp3/Response;)J` @kind static;
  #L23eb0a.  v0:= temp @kind wide;
  #L23eb0c.  v2.`okhttp3.Response$Builder.sentRequestAtMillis` @type ^`long` := v0 @kind wide;
  #L23eb10.  call temp:= `access$2400`(v3) @signature `Lokhttp3/Response;.access$2400:(Lokhttp3/Response;)J` @kind static;
  #L23eb16.  v0:= temp @kind wide;
  #L23eb18.  v2.`okhttp3.Response$Builder.receivedResponseAtMillis` @type ^`long` := v0 @kind wide;
  #L23eb1c.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.Response` v1 @kind object @name `x0`, `okhttp3.Response$1` v2 @kind object @name `x1`) @signature `Lokhttp3/Response$Builder;.<init>:(Lokhttp3/Response;Lokhttp3/Response$1;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L23eb30.  call `<init>`(v0, v1) @signature `Lokhttp3/Response$Builder;.<init>:(Lokhttp3/Response;)V` @kind direct;
  #L23eb36.  return @kind void;
}
procedure `okhttp3.Request` `access$000`(`okhttp3.Response$Builder` v1 @kind object @name `x0`) @signature `Lokhttp3/Response$Builder;.access$000:(Lokhttp3/Response$Builder;)Lokhttp3/Request;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L23eb48.  v0:= v1.`okhttp3.Response$Builder.request` @type ^`okhttp3.Request` @kind object;
  #L23eb4c.  return v0 @kind object;
}
procedure `okhttp3.Protocol` `access$100`(`okhttp3.Response$Builder` v1 @kind object @name `x0`) @signature `Lokhttp3/Response$Builder;.access$100:(Lokhttp3/Response$Builder;)Lokhttp3/Protocol;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L23eb60.  v0:= v1.`okhttp3.Response$Builder.protocol` @type ^`okhttp3.Protocol` @kind object;
  #L23eb64.  return v0 @kind object;
}
procedure `long` `access$1000`(`okhttp3.Response$Builder` v2 @kind object @name `x0`) @signature `Lokhttp3/Response$Builder;.access$1000:(Lokhttp3/Response$Builder;)J` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;
    v1;

  #L23eb78.  v0:= v2.`okhttp3.Response$Builder.sentRequestAtMillis` @type ^`long` @kind wide;
  #L23eb7c.  return v0 @kind wide;
}
procedure `long` `access$1100`(`okhttp3.Response$Builder` v2 @kind object @name `x0`) @signature `Lokhttp3/Response$Builder;.access$1100:(Lokhttp3/Response$Builder;)J` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;
    v1;

  #L23eb90.  v0:= v2.`okhttp3.Response$Builder.receivedResponseAtMillis` @type ^`long` @kind wide;
  #L23eb94.  return v0 @kind wide;
}
procedure `int` `access$200`(`okhttp3.Response$Builder` v1 @kind object @name `x0`) @signature `Lokhttp3/Response$Builder;.access$200:(Lokhttp3/Response$Builder;)I` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L23eba8.  v0:= v1.`okhttp3.Response$Builder.code` @type ^`int`;
  #L23ebac.  return v0;
}
procedure `java.lang.String` `access$300`(`okhttp3.Response$Builder` v1 @kind object @name `x0`) @signature `Lokhttp3/Response$Builder;.access$300:(Lokhttp3/Response$Builder;)Ljava/lang/String;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L23ebc0.  v0:= v1.`okhttp3.Response$Builder.message` @type ^`java.lang.String` @kind object;
  #L23ebc4.  return v0 @kind object;
}
procedure `okhttp3.Handshake` `access$400`(`okhttp3.Response$Builder` v1 @kind object @name `x0`) @signature `Lokhttp3/Response$Builder;.access$400:(Lokhttp3/Response$Builder;)Lokhttp3/Handshake;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L23ebd8.  v0:= v1.`okhttp3.Response$Builder.handshake` @type ^`okhttp3.Handshake` @kind object;
  #L23ebdc.  return v0 @kind object;
}
procedure `okhttp3.Headers$Builder` `access$500`(`okhttp3.Response$Builder` v1 @kind object @name `x0`) @signature `Lokhttp3/Response$Builder;.access$500:(Lokhttp3/Response$Builder;)Lokhttp3/Headers$Builder;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L23ebf0.  v0:= v1.`okhttp3.Response$Builder.headers` @type ^`okhttp3.Headers$Builder` @kind object;
  #L23ebf4.  return v0 @kind object;
}
procedure `okhttp3.ResponseBody` `access$600`(`okhttp3.Response$Builder` v1 @kind object @name `x0`) @signature `Lokhttp3/Response$Builder;.access$600:(Lokhttp3/Response$Builder;)Lokhttp3/ResponseBody;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L23ec08.  v0:= v1.`okhttp3.Response$Builder.body` @type ^`okhttp3.ResponseBody` @kind object;
  #L23ec0c.  return v0 @kind object;
}
procedure `okhttp3.Response` `access$700`(`okhttp3.Response$Builder` v1 @kind object @name `x0`) @signature `Lokhttp3/Response$Builder;.access$700:(Lokhttp3/Response$Builder;)Lokhttp3/Response;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L23ec20.  v0:= v1.`okhttp3.Response$Builder.networkResponse` @type ^`okhttp3.Response` @kind object;
  #L23ec24.  return v0 @kind object;
}
procedure `okhttp3.Response` `access$800`(`okhttp3.Response$Builder` v1 @kind object @name `x0`) @signature `Lokhttp3/Response$Builder;.access$800:(Lokhttp3/Response$Builder;)Lokhttp3/Response;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L23ec38.  v0:= v1.`okhttp3.Response$Builder.cacheResponse` @type ^`okhttp3.Response` @kind object;
  #L23ec3c.  return v0 @kind object;
}
procedure `okhttp3.Response` `access$900`(`okhttp3.Response$Builder` v1 @kind object @name `x0`) @signature `Lokhttp3/Response$Builder;.access$900:(Lokhttp3/Response$Builder;)Lokhttp3/Response;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L23ec50.  v0:= v1.`okhttp3.Response$Builder.priorResponse` @type ^`okhttp3.Response` @kind object;
  #L23ec54.  return v0 @kind object;
}
procedure `void` `checkPriorResponse`(`okhttp3.Response$Builder` v2 @kind this, `okhttp3.Response` v3 @kind object @name `response`) @signature `Lokhttp3/Response$Builder;.checkPriorResponse:(Lokhttp3/Response;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L23ec68.  call temp:= `access$1900`(v3) @signature `Lokhttp3/Response;.access$1900:(Lokhttp3/Response;)Lokhttp3/ResponseBody;` @kind static;
  #L23ec6e.  v0:= temp @kind object;
  #L23ec70.  if v0 == 0 then goto L23ec84;
  #L23ec74.  v0:= new `java.lang.IllegalArgumentException`;
  #L23ec78.  v1:= "priorResponse.body != null" @kind object;
  #L23ec7c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23ec82.  throw v0;
  #L23ec84.  return @kind void;
}
procedure `void` `checkSupportResponse`(`okhttp3.Response$Builder` v3 @kind this, `java.lang.String` v4 @kind object @name `name`, `okhttp3.Response` v5 @kind object @name `response`) @signature `Lokhttp3/Response$Builder;.checkSupportResponse:(Ljava/lang/String;Lokhttp3/Response;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L23ec98.  call temp:= `access$1900`(v5) @signature `Lokhttp3/Response;.access$1900:(Lokhttp3/Response;)Lokhttp3/ResponseBody;` @kind static;
  #L23ec9e.  v0:= temp @kind object;
  #L23eca0.  if v0 == 0 then goto L23ecd6;
  #L23eca4.  v0:= new `java.lang.IllegalArgumentException`;
  #L23eca8.  v1:= new `java.lang.StringBuilder`;
  #L23ecac.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23ecb2.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23ecb8.  v1:= temp @kind object;
  #L23ecba.  v2:= ".body != null" @kind object;
  #L23ecbe.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23ecc4.  v1:= temp @kind object;
  #L23ecc6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23eccc.  v1:= temp @kind object;
  #L23ecce.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23ecd4.  throw v0;
  #L23ecd6.  call temp:= `access$2000`(v5) @signature `Lokhttp3/Response;.access$2000:(Lokhttp3/Response;)Lokhttp3/Response;` @kind static;
  #L23ecdc.  v0:= temp @kind object;
  #L23ecde.  if v0 == 0 then goto L23ed14;
  #L23ece2.  v0:= new `java.lang.IllegalArgumentException`;
  #L23ece6.  v1:= new `java.lang.StringBuilder`;
  #L23ecea.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23ecf0.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23ecf6.  v1:= temp @kind object;
  #L23ecf8.  v2:= ".networkResponse != null" @kind object;
  #L23ecfc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23ed02.  v1:= temp @kind object;
  #L23ed04.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23ed0a.  v1:= temp @kind object;
  #L23ed0c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23ed12.  throw v0;
  #L23ed14.  call temp:= `access$2100`(v5) @signature `Lokhttp3/Response;.access$2100:(Lokhttp3/Response;)Lokhttp3/Response;` @kind static;
  #L23ed1a.  v0:= temp @kind object;
  #L23ed1c.  if v0 == 0 then goto L23ed52;
  #L23ed20.  v0:= new `java.lang.IllegalArgumentException`;
  #L23ed24.  v1:= new `java.lang.StringBuilder`;
  #L23ed28.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23ed2e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23ed34.  v1:= temp @kind object;
  #L23ed36.  v2:= ".cacheResponse != null" @kind object;
  #L23ed3a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23ed40.  v1:= temp @kind object;
  #L23ed42.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23ed48.  v1:= temp @kind object;
  #L23ed4a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23ed50.  throw v0;
  #L23ed52.  call temp:= `access$2200`(v5) @signature `Lokhttp3/Response;.access$2200:(Lokhttp3/Response;)Lokhttp3/Response;` @kind static;
  #L23ed58.  v0:= temp @kind object;
  #L23ed5a.  if v0 == 0 then goto L23ed90;
  #L23ed5e.  v0:= new `java.lang.IllegalArgumentException`;
  #L23ed62.  v1:= new `java.lang.StringBuilder`;
  #L23ed66.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23ed6c.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23ed72.  v1:= temp @kind object;
  #L23ed74.  v2:= ".priorResponse != null" @kind object;
  #L23ed78.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23ed7e.  v1:= temp @kind object;
  #L23ed80.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23ed86.  v1:= temp @kind object;
  #L23ed88.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23ed8e.  throw v0;
  #L23ed90.  return @kind void;
}
procedure `okhttp3.Response$Builder` `addHeader`(`okhttp3.Response$Builder` v1 @kind this, `java.lang.String` v2 @kind object @name `name`, `java.lang.String` v3 @kind object @name `value`) @signature `Lokhttp3/Response$Builder;.addHeader:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23eda4.  v0:= v1.`okhttp3.Response$Builder.headers` @type ^`okhttp3.Headers$Builder` @kind object;
  #L23eda8.  call temp:= `add`(v0, v2, v3) @signature `Lokhttp3/Headers$Builder;.add:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L23edae.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `body`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.ResponseBody` v1 @kind object @name `body`) @signature `Lokhttp3/Response$Builder;.body:(Lokhttp3/ResponseBody;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L23edc0.  v0.`okhttp3.Response$Builder.body` @type ^`okhttp3.ResponseBody` := v1 @kind object;
  #L23edc4.  return v0 @kind object;
}
procedure `okhttp3.Response` `build`(`okhttp3.Response$Builder` v3 @kind this) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L23edd8.  v0:= v3.`okhttp3.Response$Builder.request` @type ^`okhttp3.Request` @kind object;
  #L23eddc.  if v0 != 0 then goto L23edf0;
  #L23ede0.  v0:= new `java.lang.IllegalStateException`;
  #L23ede4.  v1:= "request == null" @kind object;
  #L23ede8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23edee.  throw v0;
  #L23edf0.  v0:= v3.`okhttp3.Response$Builder.protocol` @type ^`okhttp3.Protocol` @kind object;
  #L23edf4.  if v0 != 0 then goto L23ee08;
  #L23edf8.  v0:= new `java.lang.IllegalStateException`;
  #L23edfc.  v1:= "protocol == null" @kind object;
  #L23ee00.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23ee06.  throw v0;
  #L23ee08.  v0:= v3.`okhttp3.Response$Builder.code` @type ^`int`;
  #L23ee0c.  if v0 >= 0 then goto L23ee46;
  #L23ee10.  v0:= new `java.lang.IllegalStateException`;
  #L23ee14.  v1:= new `java.lang.StringBuilder`;
  #L23ee18.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23ee1e.  v2:= "code < 0: " @kind object;
  #L23ee22.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23ee28.  v1:= temp @kind object;
  #L23ee2a.  v2:= v3.`okhttp3.Response$Builder.code` @type ^`int`;
  #L23ee2e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L23ee34.  v1:= temp @kind object;
  #L23ee36.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23ee3c.  v1:= temp @kind object;
  #L23ee3e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23ee44.  throw v0;
  #L23ee46.  v0:= new `okhttp3.Response`;
  #L23ee4a.  v1:= 0I;
  #L23ee4c.  call `<init>`(v0, v3, v1) @signature `Lokhttp3/Response;.<init>:(Lokhttp3/Response$Builder;Lokhttp3/Response$1;)V` @kind direct;
  #L23ee52.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `cacheResponse`(`okhttp3.Response$Builder` v1 @kind this, `okhttp3.Response` v2 @kind object @name `cacheResponse`) @signature `Lokhttp3/Response$Builder;.cacheResponse:(Lokhttp3/Response;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23ee64.  if v2 == 0 then goto L23ee72;
  #L23ee68.  v0:= "cacheResponse" @kind object;
  #L23ee6c.  call `checkSupportResponse`(v1, v0, v2) @signature `Lokhttp3/Response$Builder;.checkSupportResponse:(Ljava/lang/String;Lokhttp3/Response;)V` @kind direct;
  #L23ee72.  v1.`okhttp3.Response$Builder.cacheResponse` @type ^`okhttp3.Response` := v2 @kind object;
  #L23ee76.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `code`(`okhttp3.Response$Builder` v0 @kind this, `int` v1 @name `code`) @signature `Lokhttp3/Response$Builder;.code:(I)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L23ee88.  v0.`okhttp3.Response$Builder.code` @type ^`int` := v1;
  #L23ee8c.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `handshake`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.Handshake` v1 @kind object @name `handshake`) @signature `Lokhttp3/Response$Builder;.handshake:(Lokhttp3/Handshake;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L23eea0.  v0.`okhttp3.Response$Builder.handshake` @type ^`okhttp3.Handshake` := v1 @kind object;
  #L23eea4.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `header`(`okhttp3.Response$Builder` v1 @kind this, `java.lang.String` v2 @kind object @name `name`, `java.lang.String` v3 @kind object @name `value`) @signature `Lokhttp3/Response$Builder;.header:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23eeb8.  v0:= v1.`okhttp3.Response$Builder.headers` @type ^`okhttp3.Headers$Builder` @kind object;
  #L23eebc.  call temp:= `set`(v0, v2, v3) @signature `Lokhttp3/Headers$Builder;.set:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L23eec2.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `headers`(`okhttp3.Response$Builder` v1 @kind this, `okhttp3.Headers` v2 @kind object @name `headers`) @signature `Lokhttp3/Response$Builder;.headers:(Lokhttp3/Headers;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23eed4.  call temp:= `newBuilder`(v2) @signature `Lokhttp3/Headers;.newBuilder:()Lokhttp3/Headers$Builder;` @kind virtual;
  #L23eeda.  v0:= temp @kind object;
  #L23eedc.  v1.`okhttp3.Response$Builder.headers` @type ^`okhttp3.Headers$Builder` := v0 @kind object;
  #L23eee0.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `message`(`okhttp3.Response$Builder` v0 @kind this, `java.lang.String` v1 @kind object @name `message`) @signature `Lokhttp3/Response$Builder;.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L23eef4.  v0.`okhttp3.Response$Builder.message` @type ^`java.lang.String` := v1 @kind object;
  #L23eef8.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `networkResponse`(`okhttp3.Response$Builder` v1 @kind this, `okhttp3.Response` v2 @kind object @name `networkResponse`) @signature `Lokhttp3/Response$Builder;.networkResponse:(Lokhttp3/Response;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23ef0c.  if v2 == 0 then goto L23ef1a;
  #L23ef10.  v0:= "networkResponse" @kind object;
  #L23ef14.  call `checkSupportResponse`(v1, v0, v2) @signature `Lokhttp3/Response$Builder;.checkSupportResponse:(Ljava/lang/String;Lokhttp3/Response;)V` @kind direct;
  #L23ef1a.  v1.`okhttp3.Response$Builder.networkResponse` @type ^`okhttp3.Response` := v2 @kind object;
  #L23ef1e.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `priorResponse`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.Response` v1 @kind object @name `priorResponse`) @signature `Lokhttp3/Response$Builder;.priorResponse:(Lokhttp3/Response;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L23ef30.  if v1 == 0 then goto L23ef3a;
  #L23ef34.  call `checkPriorResponse`(v0, v1) @signature `Lokhttp3/Response$Builder;.checkPriorResponse:(Lokhttp3/Response;)V` @kind direct;
  #L23ef3a.  v0.`okhttp3.Response$Builder.priorResponse` @type ^`okhttp3.Response` := v1 @kind object;
  #L23ef3e.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `protocol`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.Protocol` v1 @kind object @name `protocol`) @signature `Lokhttp3/Response$Builder;.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L23ef50.  v0.`okhttp3.Response$Builder.protocol` @type ^`okhttp3.Protocol` := v1 @kind object;
  #L23ef54.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `receivedResponseAtMillis`(`okhttp3.Response$Builder` v1 @kind this, `long` v2 @name `receivedResponseAtMillis`) @signature `Lokhttp3/Response$Builder;.receivedResponseAtMillis:(J)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23ef68.  v1.`okhttp3.Response$Builder.receivedResponseAtMillis` @type ^`long` := v2 @kind wide;
  #L23ef6c.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `removeHeader`(`okhttp3.Response$Builder` v1 @kind this, `java.lang.String` v2 @kind object @name `name`) @signature `Lokhttp3/Response$Builder;.removeHeader:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23ef80.  v0:= v1.`okhttp3.Response$Builder.headers` @type ^`okhttp3.Headers$Builder` @kind object;
  #L23ef84.  call temp:= `removeAll`(v0, v2) @signature `Lokhttp3/Headers$Builder;.removeAll:(Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L23ef8a.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `request`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.Request` v1 @kind object @name `request`) @signature `Lokhttp3/Response$Builder;.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L23ef9c.  v0.`okhttp3.Response$Builder.request` @type ^`okhttp3.Request` := v1 @kind object;
  #L23efa0.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `sentRequestAtMillis`(`okhttp3.Response$Builder` v1 @kind this, `long` v2 @name `sentRequestAtMillis`) @signature `Lokhttp3/Response$Builder;.sentRequestAtMillis:(J)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23efb4.  v1.`okhttp3.Response$Builder.sentRequestAtMillis` @type ^`long` := v2 @kind wide;
  #L23efb8.  return v1 @kind object;
}
