record `okhttp3.ConnectionSpec` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String`[] `okhttp3.ConnectionSpec.cipherSuites` @AccessFlag PRIVATE_FINAL;
  `boolean` `okhttp3.ConnectionSpec.supportsTlsExtensions` @AccessFlag PRIVATE_FINAL;
  `boolean` `okhttp3.ConnectionSpec.tls` @AccessFlag PRIVATE_FINAL;
  `java.lang.String`[] `okhttp3.ConnectionSpec.tlsVersions` @AccessFlag PRIVATE_FINAL;
}
global `okhttp3.CipherSuite`[] `@@okhttp3.ConnectionSpec.APPROVED_CIPHER_SUITES` @AccessFlag PRIVATE_STATIC_FINAL;
global `okhttp3.ConnectionSpec` `@@okhttp3.ConnectionSpec.CLEARTEXT` @AccessFlag PUBLIC_STATIC_FINAL;
global `okhttp3.ConnectionSpec` `@@okhttp3.ConnectionSpec.COMPATIBLE_TLS` @AccessFlag PUBLIC_STATIC_FINAL;
global `okhttp3.ConnectionSpec` `@@okhttp3.ConnectionSpec.MODERN_TLS` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/ConnectionSpec;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L237ca0.  v6:= 3I;
  #L237ca2.  v5:= 2I;
  #L237ca4.  v4:= 0I;
  #L237ca6.  v3:= 1I;
  #L237ca8.  v0:= 13I;
  #L237cac.  v0:= new `okhttp3.CipherSuite`[v0];
  #L237cb0.  v1:= `@@okhttp3.CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256` @type ^`okhttp3.CipherSuite` @kind object;
  #L237cb4.  v0[v4]:= v1 @kind object;
  #L237cb8.  v1:= `@@okhttp3.CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256` @type ^`okhttp3.CipherSuite` @kind object;
  #L237cbc.  v0[v3]:= v1 @kind object;
  #L237cc0.  v1:= `@@okhttp3.CipherSuite.TLS_DHE_RSA_WITH_AES_128_GCM_SHA256` @type ^`okhttp3.CipherSuite` @kind object;
  #L237cc4.  v0[v5]:= v1 @kind object;
  #L237cc8.  v1:= `@@okhttp3.CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA` @type ^`okhttp3.CipherSuite` @kind object;
  #L237ccc.  v0[v6]:= v1 @kind object;
  #L237cd0.  v1:= 4I;
  #L237cd2.  v2:= `@@okhttp3.CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA` @type ^`okhttp3.CipherSuite` @kind object;
  #L237cd6.  v0[v1]:= v2 @kind object;
  #L237cda.  v1:= 5I;
  #L237cdc.  v2:= `@@okhttp3.CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA` @type ^`okhttp3.CipherSuite` @kind object;
  #L237ce0.  v0[v1]:= v2 @kind object;
  #L237ce4.  v1:= 6I;
  #L237ce6.  v2:= `@@okhttp3.CipherSuite.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA` @type ^`okhttp3.CipherSuite` @kind object;
  #L237cea.  v0[v1]:= v2 @kind object;
  #L237cee.  v1:= 7I;
  #L237cf0.  v2:= `@@okhttp3.CipherSuite.TLS_DHE_RSA_WITH_AES_128_CBC_SHA` @type ^`okhttp3.CipherSuite` @kind object;
  #L237cf4.  v0[v1]:= v2 @kind object;
  #L237cf8.  v1:= 8I;
  #L237cfc.  v2:= `@@okhttp3.CipherSuite.TLS_DHE_RSA_WITH_AES_256_CBC_SHA` @type ^`okhttp3.CipherSuite` @kind object;
  #L237d00.  v0[v1]:= v2 @kind object;
  #L237d04.  v1:= 9I;
  #L237d08.  v2:= `@@okhttp3.CipherSuite.TLS_RSA_WITH_AES_128_GCM_SHA256` @type ^`okhttp3.CipherSuite` @kind object;
  #L237d0c.  v0[v1]:= v2 @kind object;
  #L237d10.  v1:= 10I;
  #L237d14.  v2:= `@@okhttp3.CipherSuite.TLS_RSA_WITH_AES_128_CBC_SHA` @type ^`okhttp3.CipherSuite` @kind object;
  #L237d18.  v0[v1]:= v2 @kind object;
  #L237d1c.  v1:= 11I;
  #L237d20.  v2:= `@@okhttp3.CipherSuite.TLS_RSA_WITH_AES_256_CBC_SHA` @type ^`okhttp3.CipherSuite` @kind object;
  #L237d24.  v0[v1]:= v2 @kind object;
  #L237d28.  v1:= 12I;
  #L237d2c.  v2:= `@@okhttp3.CipherSuite.TLS_RSA_WITH_3DES_EDE_CBC_SHA` @type ^`okhttp3.CipherSuite` @kind object;
  #L237d30.  v0[v1]:= v2 @kind object;
  #L237d34.  `@@okhttp3.ConnectionSpec.APPROVED_CIPHER_SUITES` @type ^`okhttp3.CipherSuite`[] := v0 @kind object;
  #L237d38.  v0:= new `okhttp3.ConnectionSpec$Builder`;
  #L237d3c.  call `<init>`(v0, v3) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Z)V` @kind direct;
  #L237d42.  v1:= `@@okhttp3.ConnectionSpec.APPROVED_CIPHER_SUITES` @type ^`okhttp3.CipherSuite`[] @kind object;
  #L237d46.  call temp:= `cipherSuites`(v0, v1) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Lokhttp3/CipherSuite;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L237d4c.  v0:= temp @kind object;
  #L237d4e.  v1:= new `okhttp3.TlsVersion`[v6];
  #L237d52.  v2:= `@@okhttp3.TlsVersion.TLS_1_2` @type ^`okhttp3.TlsVersion` @kind object;
  #L237d56.  v1[v4]:= v2 @kind object;
  #L237d5a.  v2:= `@@okhttp3.TlsVersion.TLS_1_1` @type ^`okhttp3.TlsVersion` @kind object;
  #L237d5e.  v1[v3]:= v2 @kind object;
  #L237d62.  v2:= `@@okhttp3.TlsVersion.TLS_1_0` @type ^`okhttp3.TlsVersion` @kind object;
  #L237d66.  v1[v5]:= v2 @kind object;
  #L237d6a.  call temp:= `tlsVersions`(v0, v1) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Lokhttp3/TlsVersion;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L237d70.  v0:= temp @kind object;
  #L237d72.  call temp:= `supportsTlsExtensions`(v0, v3) @signature `Lokhttp3/ConnectionSpec$Builder;.supportsTlsExtensions:(Z)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L237d78.  v0:= temp @kind object;
  #L237d7a.  call temp:= `build`(v0) @signature `Lokhttp3/ConnectionSpec$Builder;.build:()Lokhttp3/ConnectionSpec;` @kind virtual;
  #L237d80.  v0:= temp @kind object;
  #L237d82.  `@@okhttp3.ConnectionSpec.MODERN_TLS` @type ^`okhttp3.ConnectionSpec` := v0 @kind object;
  #L237d86.  v0:= new `okhttp3.ConnectionSpec$Builder`;
  #L237d8a.  v1:= `@@okhttp3.ConnectionSpec.MODERN_TLS` @type ^`okhttp3.ConnectionSpec` @kind object;
  #L237d8e.  call `<init>`(v0, v1) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Lokhttp3/ConnectionSpec;)V` @kind direct;
  #L237d94.  v1:= new `okhttp3.TlsVersion`[v3];
  #L237d98.  v2:= `@@okhttp3.TlsVersion.TLS_1_0` @type ^`okhttp3.TlsVersion` @kind object;
  #L237d9c.  v1[v4]:= v2 @kind object;
  #L237da0.  call temp:= `tlsVersions`(v0, v1) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Lokhttp3/TlsVersion;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L237da6.  v0:= temp @kind object;
  #L237da8.  call temp:= `supportsTlsExtensions`(v0, v3) @signature `Lokhttp3/ConnectionSpec$Builder;.supportsTlsExtensions:(Z)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L237dae.  v0:= temp @kind object;
  #L237db0.  call temp:= `build`(v0) @signature `Lokhttp3/ConnectionSpec$Builder;.build:()Lokhttp3/ConnectionSpec;` @kind virtual;
  #L237db6.  v0:= temp @kind object;
  #L237db8.  `@@okhttp3.ConnectionSpec.COMPATIBLE_TLS` @type ^`okhttp3.ConnectionSpec` := v0 @kind object;
  #L237dbc.  v0:= new `okhttp3.ConnectionSpec$Builder`;
  #L237dc0.  call `<init>`(v0, v4) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Z)V` @kind direct;
  #L237dc6.  call temp:= `build`(v0) @signature `Lokhttp3/ConnectionSpec$Builder;.build:()Lokhttp3/ConnectionSpec;` @kind virtual;
  #L237dcc.  v0:= temp @kind object;
  #L237dce.  `@@okhttp3.ConnectionSpec.CLEARTEXT` @type ^`okhttp3.ConnectionSpec` := v0 @kind object;
  #L237dd2.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.ConnectionSpec` v1 @kind this, `okhttp3.ConnectionSpec$Builder` v2 @kind object @name `builder`) @signature `Lokhttp3/ConnectionSpec;.<init>:(Lokhttp3/ConnectionSpec$Builder;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L237de4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L237dea.  call temp:= `access$000`(v2) @signature `Lokhttp3/ConnectionSpec$Builder;.access$000:(Lokhttp3/ConnectionSpec$Builder;)Z` @kind static;
  #L237df0.  v0:= temp;
  #L237df2.  v1.`okhttp3.ConnectionSpec.tls` @type ^`boolean` := v0 @kind boolean;
  #L237df6.  call temp:= `access$100`(v2) @signature `Lokhttp3/ConnectionSpec$Builder;.access$100:(Lokhttp3/ConnectionSpec$Builder;)[Ljava/lang/String;` @kind static;
  #L237dfc.  v0:= temp @kind object;
  #L237dfe.  v1.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] := v0 @kind object;
  #L237e02.  call temp:= `access$200`(v2) @signature `Lokhttp3/ConnectionSpec$Builder;.access$200:(Lokhttp3/ConnectionSpec$Builder;)[Ljava/lang/String;` @kind static;
  #L237e08.  v0:= temp @kind object;
  #L237e0a.  v1.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] := v0 @kind object;
  #L237e0e.  call temp:= `access$300`(v2) @signature `Lokhttp3/ConnectionSpec$Builder;.access$300:(Lokhttp3/ConnectionSpec$Builder;)Z` @kind static;
  #L237e14.  v0:= temp;
  #L237e16.  v1.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` := v0 @kind boolean;
  #L237e1a.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.ConnectionSpec` v0 @kind this, `okhttp3.ConnectionSpec$Builder` v1 @kind object @name `x0`, `okhttp3.ConnectionSpec$1` v2 @kind object @name `x1`) @signature `Lokhttp3/ConnectionSpec;.<init>:(Lokhttp3/ConnectionSpec$Builder;Lokhttp3/ConnectionSpec$1;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L237e2c.  call `<init>`(v0, v1) @signature `Lokhttp3/ConnectionSpec;.<init>:(Lokhttp3/ConnectionSpec$Builder;)V` @kind direct;
  #L237e32.  return @kind void;
}
procedure `boolean` `access$400`(`okhttp3.ConnectionSpec` v1 @kind object @name `x0`) @signature `Lokhttp3/ConnectionSpec;.access$400:(Lokhttp3/ConnectionSpec;)Z` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L237e44.  v0:= v1.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L237e48.  return v0;
}
procedure `java.lang.String`[] `access$500`(`okhttp3.ConnectionSpec` v1 @kind object @name `x0`) @signature `Lokhttp3/ConnectionSpec;.access$500:(Lokhttp3/ConnectionSpec;)[Ljava/lang/String;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L237e5c.  v0:= v1.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L237e60.  return v0 @kind object;
}
procedure `java.lang.String`[] `access$600`(`okhttp3.ConnectionSpec` v1 @kind object @name `x0`) @signature `Lokhttp3/ConnectionSpec;.access$600:(Lokhttp3/ConnectionSpec;)[Ljava/lang/String;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L237e74.  v0:= v1.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L237e78.  return v0 @kind object;
}
procedure `boolean` `access$700`(`okhttp3.ConnectionSpec` v1 @kind object @name `x0`) @signature `Lokhttp3/ConnectionSpec;.access$700:(Lokhttp3/ConnectionSpec;)Z` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L237e8c.  v0:= v1.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L237e90.  return v0;
}
procedure `boolean` `nonEmptyIntersection`(`java.lang.String`[] v5 @kind object @name `a`, `java.lang.String`[] v6 @kind object @name `b`) @signature `Lokhttp3/ConnectionSpec;.nonEmptyIntersection:([Ljava/lang/String;[Ljava/lang/String;)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L237ea4.  v1:= 0I;
  #L237ea6.  if v5 == 0 then goto L237eba;
  #L237eaa.  if v6 == 0 then goto L237eba;
  #L237eae.  v2:= length @variable v5;
  #L237eb0.  if v2 == 0 then goto L237eba;
  #L237eb4.  v2:= length @variable v6;
  #L237eb6.  if v2 != 0 then goto L237ebc;
  #L237eba.  return v1;
  #L237ebc.  v3:= length @variable v5;
  #L237ebe.  v2:= v1;
  #L237ec0.  if v2 >= v3 then goto L237eba;
  #L237ec4.  v0:= v5[v2] @kind object;
  #L237ec8.  call temp:= `contains`(v6, v0) @signature `Lokhttp3/internal/Util;.contains:([Ljava/lang/String;Ljava/lang/String;)Z` @kind static;
  #L237ece.  v4:= temp;
  #L237ed0.  if v4 == 0 then goto L237ed8;
  #L237ed4.  v1:= 1I;
  #L237ed6.  goto L237eba;
  #L237ed8.  v2:= v2 + 1;
  #L237edc.  goto L237ec0;
}
procedure `okhttp3.ConnectionSpec` `supportedSpec`(`okhttp3.ConnectionSpec` v5 @kind this, `javax.net.ssl.SSLSocket` v6 @kind object @name `sslSocket`, `boolean` v7 @name `isFallback`) @signature `Lokhttp3/ConnectionSpec;.supportedSpec:(Ljavax/net/ssl/SSLSocket;Z)Lokhttp3/ConnectionSpec;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L237ef0.  v2:= v5.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L237ef4.  if v2 == 0 then goto L237f88;
  #L237ef8.  v2:= constclass @type ^`java.lang.String` @kind object;
  #L237efc.  v3:= v5.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L237f00.  call temp:= `getEnabledCipherSuites`(v6) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledCipherSuites:()[Ljava/lang/String;` @kind virtual;
  #L237f06.  v4:= temp @kind object;
  #L237f08.  call temp:= `intersect`(v2, v3, v4) @signature `Lokhttp3/internal/Util;.intersect:(Ljava/lang/Class;[Ljava/lang/Object;[Ljava/lang/Object;)[Ljava/lang/Object;` @kind static;
  #L237f0e.  v2:= temp @kind object;
  #L237f10.  v2:= (`java.lang.String`[]) v2 @kind object;
  #L237f14.  v0:= v2 @kind object;
  #L237f16.  v2:= v5.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L237f1a.  if v2 == 0 then goto L237f92;
  #L237f1e.  v2:= constclass @type ^`java.lang.String` @kind object;
  #L237f22.  v3:= v5.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L237f26.  call temp:= `getEnabledProtocols`(v6) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledProtocols:()[Ljava/lang/String;` @kind virtual;
  #L237f2c.  v4:= temp @kind object;
  #L237f2e.  call temp:= `intersect`(v2, v3, v4) @signature `Lokhttp3/internal/Util;.intersect:(Ljava/lang/Class;[Ljava/lang/Object;[Ljava/lang/Object;)[Ljava/lang/Object;` @kind static;
  #L237f34.  v2:= temp @kind object;
  #L237f36.  v2:= (`java.lang.String`[]) v2 @kind object;
  #L237f3a.  v1:= v2 @kind object;
  #L237f3c.  if v7 == 0 then goto L237f64;
  #L237f40.  call temp:= `getSupportedCipherSuites`(v6) @signature `Ljavax/net/ssl/SSLSocket;.getSupportedCipherSuites:()[Ljava/lang/String;` @kind virtual;
  #L237f46.  v2:= temp @kind object;
  #L237f48.  v3:= "TLS_FALLBACK_SCSV" @kind object;
  #L237f4c.  call temp:= `contains`(v2, v3) @signature `Lokhttp3/internal/Util;.contains:([Ljava/lang/String;Ljava/lang/String;)Z` @kind static;
  #L237f52.  v2:= temp;
  #L237f54.  if v2 == 0 then goto L237f64;
  #L237f58.  v2:= "TLS_FALLBACK_SCSV" @kind object;
  #L237f5c.  call temp:= `concat`(v0, v2) @signature `Lokhttp3/internal/Util;.concat:([Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;` @kind static;
  #L237f62.  v0:= temp @kind object;
  #L237f64.  v2:= new `okhttp3.ConnectionSpec$Builder`;
  #L237f68.  call `<init>`(v2, v5) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Lokhttp3/ConnectionSpec;)V` @kind direct;
  #L237f6e.  call temp:= `cipherSuites`(v2, v0) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L237f74.  v2:= temp @kind object;
  #L237f76.  call temp:= `tlsVersions`(v2, v1) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L237f7c.  v2:= temp @kind object;
  #L237f7e.  call temp:= `build`(v2) @signature `Lokhttp3/ConnectionSpec$Builder;.build:()Lokhttp3/ConnectionSpec;` @kind virtual;
  #L237f84.  v2:= temp @kind object;
  #L237f86.  return v2 @kind object;
  #L237f88.  call temp:= `getEnabledCipherSuites`(v6) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledCipherSuites:()[Ljava/lang/String;` @kind virtual;
  #L237f8e.  v0:= temp @kind object;
  #L237f90.  goto L237f16;
  #L237f92.  call temp:= `getEnabledProtocols`(v6) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledProtocols:()[Ljava/lang/String;` @kind virtual;
  #L237f98.  v1:= temp @kind object;
  #L237f9a.  goto L237f3c;
}
procedure `void` `apply`(`okhttp3.ConnectionSpec` v2 @kind this, `javax.net.ssl.SSLSocket` v3 @kind object @name `sslSocket`, `boolean` v4 @name `isFallback`) @signature `Lokhttp3/ConnectionSpec;.apply:(Ljavax/net/ssl/SSLSocket;Z)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L237fac.  call temp:= `supportedSpec`(v2, v3, v4) @signature `Lokhttp3/ConnectionSpec;.supportedSpec:(Ljavax/net/ssl/SSLSocket;Z)Lokhttp3/ConnectionSpec;` @kind direct;
  #L237fb2.  v0:= temp @kind object;
  #L237fb4.  v1:= v0.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L237fb8.  if v1 == 0 then goto L237fc6;
  #L237fbc.  v1:= v0.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L237fc0.  call `setEnabledProtocols`(v3, v1) @signature `Ljavax/net/ssl/SSLSocket;.setEnabledProtocols:([Ljava/lang/String;)V` @kind virtual;
  #L237fc6.  v1:= v0.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L237fca.  if v1 == 0 then goto L237fd8;
  #L237fce.  v1:= v0.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L237fd2.  call `setEnabledCipherSuites`(v3, v1) @signature `Ljavax/net/ssl/SSLSocket;.setEnabledCipherSuites:([Ljava/lang/String;)V` @kind virtual;
  #L237fd8.  return @kind void;
}
procedure `java.util.List` `cipherSuites`(`okhttp3.ConnectionSpec` v3 @kind this) @signature `Lokhttp3/ConnectionSpec;.cipherSuites:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L237fec.  v2:= v3.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L237ff0.  if v2 != 0 then goto L237ff8;
  #L237ff4.  v2:= 0I;
  #L237ff6.  return v2 @kind object;
  #L237ff8.  v2:= v3.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L237ffc.  v2:= length @variable v2;
  #L237ffe.  v1:= new `okhttp3.CipherSuite`[v2];
  #L238002.  v0:= 0I;
  #L238004.  v2:= v3.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L238008.  v2:= length @variable v2;
  #L23800a.  if v0 >= v2 then goto L238028;
  #L23800e.  v2:= v3.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L238012.  v2:= v2[v0] @kind object;
  #L238016.  call temp:= `forJavaName`(v2) @signature `Lokhttp3/CipherSuite;.forJavaName:(Ljava/lang/String;)Lokhttp3/CipherSuite;` @kind static;
  #L23801c.  v2:= temp @kind object;
  #L23801e.  v1[v0]:= v2 @kind object;
  #L238022.  v0:= v0 + 1;
  #L238026.  goto L238004;
  #L238028.  call temp:= `immutableList`(v1) @signature `Lokhttp3/internal/Util;.immutableList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L23802e.  v2:= temp @kind object;
  #L238030.  goto L237ff6;
}
procedure `boolean` `equals`(`okhttp3.ConnectionSpec` v5 @kind this, `java.lang.Object` v6 @kind object @name `other`) @signature `Lokhttp3/ConnectionSpec;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L238044.  v2:= 1I;
  #L238046.  v1:= 0I;
  #L238048.  v3:= instanceof @variable v6 @type ^`okhttp3.ConnectionSpec` @kind boolean;
  #L23804c.  if v3 != 0 then goto L238052;
  #L238050.  return v1;
  #L238052.  if v6 != v5 then goto L23805a;
  #L238056.  v1:= v2;
  #L238058.  goto L238050;
  #L23805a.  v0:= v6 @kind object;
  #L23805c.  v0:= (`okhttp3.ConnectionSpec`) v0 @kind object;
  #L238060.  v3:= v5.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L238064.  v4:= v0.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L238068.  if v3 != v4 then goto L238050;
  #L23806c.  v3:= v5.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L238070.  if v3 == 0 then goto L2380a8;
  #L238074.  v3:= v5.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L238078.  v4:= v0.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L23807c.  call temp:= `equals`(v3, v4) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L238082.  v3:= temp;
  #L238084.  if v3 == 0 then goto L238050;
  #L238088.  v3:= v5.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L23808c.  v4:= v0.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L238090.  call temp:= `equals`(v3, v4) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L238096.  v3:= temp;
  #L238098.  if v3 == 0 then goto L238050;
  #L23809c.  v3:= v5.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L2380a0.  v4:= v0.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L2380a4.  if v3 != v4 then goto L238050;
  #L2380a8.  v1:= v2;
  #L2380aa.  goto L238050;
}
procedure `int` `hashCode`(`okhttp3.ConnectionSpec` v3 @kind this) @signature `Lokhttp3/ConnectionSpec;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2380bc.  v0:= 17I;
  #L2380c0.  v1:= v3.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L2380c4.  if v1 == 0 then goto L2380fe;
  #L2380c8.  v1:= v3.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L2380cc.  call temp:= `hashCode`(v1) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L2380d2.  v1:= temp;
  #L2380d4.  v0:= v1 + 527;
  #L2380d8.  v1:= v0 * 31;
  #L2380dc.  v2:= v3.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L2380e0.  call temp:= `hashCode`(v2) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L2380e6.  v2:= temp;
  #L2380e8.  v0:= v1 + v2 @kind int;
  #L2380ec.  v2:= v0 * 31;
  #L2380f0.  v1:= v3.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L2380f4.  if v1 == 0 then goto L238100;
  #L2380f8.  v1:= 0I;
  #L2380fa.  v0:= v2 + v1 @kind int;
  #L2380fe.  return v0;
  #L238100.  v1:= 1I;
  #L238102.  goto L2380fa;
}
procedure `boolean` `isCompatible`(`okhttp3.ConnectionSpec` v3 @kind this, `javax.net.ssl.SSLSocket` v4 @kind object @name `socket`) @signature `Lokhttp3/ConnectionSpec;.isCompatible:(Ljavax/net/ssl/SSLSocket;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L238114.  v0:= 0I;
  #L238116.  v1:= v3.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L23811a.  if v1 != 0 then goto L238120;
  #L23811e.  return v0;
  #L238120.  v1:= v3.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L238124.  if v1 == 0 then goto L238140;
  #L238128.  v1:= v3.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L23812c.  call temp:= `getEnabledProtocols`(v4) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledProtocols:()[Ljava/lang/String;` @kind virtual;
  #L238132.  v2:= temp @kind object;
  #L238134.  call temp:= `nonEmptyIntersection`(v1, v2) @signature `Lokhttp3/ConnectionSpec;.nonEmptyIntersection:([Ljava/lang/String;[Ljava/lang/String;)Z` @kind static;
  #L23813a.  v1:= temp;
  #L23813c.  if v1 == 0 then goto L23811e;
  #L238140.  v1:= v3.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L238144.  if v1 == 0 then goto L238160;
  #L238148.  v1:= v3.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L23814c.  call temp:= `getEnabledCipherSuites`(v4) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledCipherSuites:()[Ljava/lang/String;` @kind virtual;
  #L238152.  v2:= temp @kind object;
  #L238154.  call temp:= `nonEmptyIntersection`(v1, v2) @signature `Lokhttp3/ConnectionSpec;.nonEmptyIntersection:([Ljava/lang/String;[Ljava/lang/String;)Z` @kind static;
  #L23815a.  v1:= temp;
  #L23815c.  if v1 == 0 then goto L23811e;
  #L238160.  v0:= 1I;
  #L238162.  goto L23811e;
}
procedure `boolean` `isTls`(`okhttp3.ConnectionSpec` v1 @kind this) @signature `Lokhttp3/ConnectionSpec;.isTls:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L238174.  v0:= v1.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L238178.  return v0;
}
procedure `boolean` `supportsTlsExtensions`(`okhttp3.ConnectionSpec` v1 @kind this) @signature `Lokhttp3/ConnectionSpec;.supportsTlsExtensions:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23818c.  v0:= v1.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L238190.  return v0;
}
procedure `java.util.List` `tlsVersions`(`okhttp3.ConnectionSpec` v3 @kind this) @signature `Lokhttp3/ConnectionSpec;.tlsVersions:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2381a4.  v2:= v3.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L2381a8.  if v2 != 0 then goto L2381b0;
  #L2381ac.  v2:= 0I;
  #L2381ae.  return v2 @kind object;
  #L2381b0.  v2:= v3.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L2381b4.  v2:= length @variable v2;
  #L2381b6.  v1:= new `okhttp3.TlsVersion`[v2];
  #L2381ba.  v0:= 0I;
  #L2381bc.  v2:= v3.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L2381c0.  v2:= length @variable v2;
  #L2381c2.  if v0 >= v2 then goto L2381e0;
  #L2381c6.  v2:= v3.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L2381ca.  v2:= v2[v0] @kind object;
  #L2381ce.  call temp:= `forJavaName`(v2) @signature `Lokhttp3/TlsVersion;.forJavaName:(Ljava/lang/String;)Lokhttp3/TlsVersion;` @kind static;
  #L2381d4.  v2:= temp @kind object;
  #L2381d6.  v1[v0]:= v2 @kind object;
  #L2381da.  v0:= v0 + 1;
  #L2381de.  goto L2381bc;
  #L2381e0.  call temp:= `immutableList`(v1) @signature `Lokhttp3/internal/Util;.immutableList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L2381e6.  v2:= temp @kind object;
  #L2381e8.  goto L2381ae;
}
procedure `java.lang.String` `toString`(`okhttp3.ConnectionSpec` v4 @kind this) @signature `Lokhttp3/ConnectionSpec;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2381fc.  v2:= v4.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L238200.  if v2 != 0 then goto L23820a;
  #L238204.  v2:= "ConnectionSpec()" @kind object;
  #L238208.  return v2 @kind object;
  #L23820a.  v2:= v4.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L23820e.  if v2 == 0 then goto L23829a;
  #L238212.  call temp:= `cipherSuites`(v4) @signature `Lokhttp3/ConnectionSpec;.cipherSuites:()Ljava/util/List;` @kind virtual;
  #L238218.  v2:= temp @kind object;
  #L23821a.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L238220.  v0:= temp @kind object;
  #L238222.  v2:= v4.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L238226.  if v2 == 0 then goto L2382a0;
  #L23822a.  call temp:= `tlsVersions`(v4) @signature `Lokhttp3/ConnectionSpec;.tlsVersions:()Ljava/util/List;` @kind virtual;
  #L238230.  v2:= temp @kind object;
  #L238232.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L238238.  v1:= temp @kind object;
  #L23823a.  v2:= new `java.lang.StringBuilder`;
  #L23823e.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L238244.  v3:= "ConnectionSpec(cipherSuites=" @kind object;
  #L238248.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23824e.  v2:= temp @kind object;
  #L238250.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L238256.  v2:= temp @kind object;
  #L238258.  v3:= ", tlsVersions=" @kind object;
  #L23825c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L238262.  v2:= temp @kind object;
  #L238264.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23826a.  v2:= temp @kind object;
  #L23826c.  v3:= ", supportsTlsExtensions=" @kind object;
  #L238270.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L238276.  v2:= temp @kind object;
  #L238278.  v3:= v4.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L23827c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L238282.  v2:= temp @kind object;
  #L238284.  v3:= ")" @kind object;
  #L238288.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23828e.  v2:= temp @kind object;
  #L238290.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L238296.  v2:= temp @kind object;
  #L238298.  goto L238208;
  #L23829a.  v0:= "[all enabled]" @kind object;
  #L23829e.  goto L238222;
  #L2382a0.  v1:= "[all enabled]" @kind object;
  #L2382a4.  goto L23823a;
}
