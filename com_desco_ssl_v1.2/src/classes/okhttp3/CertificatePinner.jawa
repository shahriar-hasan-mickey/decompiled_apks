record `okhttp3.CertificatePinner` @kind class @AccessFlag PUBLIC_FINAL {
  `okhttp3.internal.tls.CertificateChainCleaner` `okhttp3.CertificatePinner.certificateChainCleaner` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `okhttp3.CertificatePinner.pins` @AccessFlag PRIVATE_FINAL;
}
global `okhttp3.CertificatePinner` `@@okhttp3.CertificatePinner.DEFAULT` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/CertificatePinner;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L235a08.  v0:= new `okhttp3.CertificatePinner$Builder`;
  #L235a0c.  call `<init>`(v0) @signature `Lokhttp3/CertificatePinner$Builder;.<init>:()V` @kind direct;
  #L235a12.  call temp:= `build`(v0) @signature `Lokhttp3/CertificatePinner$Builder;.build:()Lokhttp3/CertificatePinner;` @kind virtual;
  #L235a18.  v0:= temp @kind object;
  #L235a1a.  `@@okhttp3.CertificatePinner.DEFAULT` @type ^`okhttp3.CertificatePinner` := v0 @kind object;
  #L235a1e.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.CertificatePinner` v0 @kind this, `java.util.List` v1 @kind object, `okhttp3.internal.tls.CertificateChainCleaner` v2 @kind object @name `certificateChainCleaner`) @signature `Lokhttp3/CertificatePinner;.<init>:(Ljava/util/List;Lokhttp3/internal/tls/CertificateChainCleaner;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L235a30.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L235a36.  v0.`okhttp3.CertificatePinner.pins` @type ^`java.util.List` := v1 @kind object;
  #L235a3a.  v0.`okhttp3.CertificatePinner.certificateChainCleaner` @type ^`okhttp3.internal.tls.CertificateChainCleaner` := v2 @kind object;
  #L235a3e.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.CertificatePinner` v0 @kind this, `java.util.List` v1 @kind object @name `x0`, `okhttp3.internal.tls.CertificateChainCleaner` v2 @kind object @name `x1`, `okhttp3.CertificatePinner$1` v3 @kind object @name `x2`) @signature `Lokhttp3/CertificatePinner;.<init>:(Ljava/util/List;Lokhttp3/internal/tls/CertificateChainCleaner;Lokhttp3/CertificatePinner$1;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L235a50.  call `<init>`(v0, v1, v2) @signature `Lokhttp3/CertificatePinner;.<init>:(Ljava/util/List;Lokhttp3/internal/tls/CertificateChainCleaner;)V` @kind direct;
  #L235a56.  return @kind void;
}
procedure `java.lang.String` `pin`(`java.security.cert.Certificate` v2 @kind object @name `certificate`) @signature `Lokhttp3/CertificatePinner;.pin:(Ljava/security/cert/Certificate;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L235a68.  v0:= instanceof @variable v2 @type ^`java.security.cert.X509Certificate` @kind boolean;
  #L235a6c.  if v0 != 0 then goto L235a80;
  #L235a70.  v0:= new `java.lang.IllegalArgumentException`;
  #L235a74.  v1:= "Certificate pinning requires X509 certificates" @kind object;
  #L235a78.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L235a7e.  throw v0;
  #L235a80.  v0:= new `java.lang.StringBuilder`;
  #L235a84.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L235a8a.  v1:= "sha256/" @kind object;
  #L235a8e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L235a94.  v0:= temp @kind object;
  #L235a96.  v2:= (`java.security.cert.X509Certificate`) v2 @kind object;
  #L235a9a.  call temp:= `sha256`(v2) @signature `Lokhttp3/CertificatePinner;.sha256:(Ljava/security/cert/X509Certificate;)Lokio/ByteString;` @kind static;
  #L235aa0.  v1:= temp @kind object;
  #L235aa2.  call temp:= `base64`(v1) @signature `Lokio/ByteString;.base64:()Ljava/lang/String;` @kind virtual;
  #L235aa8.  v1:= temp @kind object;
  #L235aaa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L235ab0.  v0:= temp @kind object;
  #L235ab2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L235ab8.  v0:= temp @kind object;
  #L235aba.  return v0 @kind object;
}
procedure `okio.ByteString` `sha1`(`java.security.cert.X509Certificate` v1 @kind object @name `x509Certificate`) @signature `Lokhttp3/CertificatePinner;.sha1:(Ljava/security/cert/X509Certificate;)Lokio/ByteString;` @AccessFlag STATIC {
    temp;
    v0;

  #L235acc.  call temp:= `getPublicKey`(v1) @signature `Ljava/security/cert/X509Certificate;.getPublicKey:()Ljava/security/PublicKey;` @kind virtual;
  #L235ad2.  v0:= temp @kind object;
  #L235ad4.  call temp:= `getEncoded`(v0) @signature `Ljava/security/PublicKey;.getEncoded:()[B` @kind interface;
  #L235ada.  v0:= temp @kind object;
  #L235adc.  call temp:= `of`(v0) @signature `Lokio/ByteString;.of:([B)Lokio/ByteString;` @kind static;
  #L235ae2.  v0:= temp @kind object;
  #L235ae4.  call temp:= `sha1`(v0) @signature `Lokhttp3/internal/Util;.sha1:(Lokio/ByteString;)Lokio/ByteString;` @kind static;
  #L235aea.  v0:= temp @kind object;
  #L235aec.  return v0 @kind object;
}
procedure `okio.ByteString` `sha256`(`java.security.cert.X509Certificate` v1 @kind object @name `x509Certificate`) @signature `Lokhttp3/CertificatePinner;.sha256:(Ljava/security/cert/X509Certificate;)Lokio/ByteString;` @AccessFlag STATIC {
    temp;
    v0;

  #L235b00.  call temp:= `getPublicKey`(v1) @signature `Ljava/security/cert/X509Certificate;.getPublicKey:()Ljava/security/PublicKey;` @kind virtual;
  #L235b06.  v0:= temp @kind object;
  #L235b08.  call temp:= `getEncoded`(v0) @signature `Ljava/security/PublicKey;.getEncoded:()[B` @kind interface;
  #L235b0e.  v0:= temp @kind object;
  #L235b10.  call temp:= `of`(v0) @signature `Lokio/ByteString;.of:([B)Lokio/ByteString;` @kind static;
  #L235b16.  v0:= temp @kind object;
  #L235b18.  call temp:= `sha256`(v0) @signature `Lokhttp3/internal/Util;.sha256:(Lokio/ByteString;)Lokio/ByteString;` @kind static;
  #L235b1e.  v0:= temp @kind object;
  #L235b20.  return v0 @kind object;
}
procedure `void` `check`(`okhttp3.CertificatePinner` v12 @kind this, `java.lang.String` v13 @kind object @name `hostname`, `java.util.List` v14 @kind object) @signature `Lokhttp3/CertificatePinner;.check:(Ljava/lang/String;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L235b34.  call temp:= `findMatchingPins`(v12, v13) @signature `Lokhttp3/CertificatePinner;.findMatchingPins:(Ljava/lang/String;)Ljava/util/List;` @kind virtual;
  #L235b3a.  v5:= temp @kind object;
  #L235b3c.  call temp:= `isEmpty`(v5) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L235b42.  v10:= temp;
  #L235b44.  if v10 == 0 then goto L235b4a;
  #L235b48.  return @kind void;
  #L235b4a.  v10:= v12.`okhttp3.CertificatePinner.certificateChainCleaner` @type ^`okhttp3.internal.tls.CertificateChainCleaner` @kind object;
  #L235b4e.  if v10 == 0 then goto L235b5e;
  #L235b52.  v10:= v12.`okhttp3.CertificatePinner.certificateChainCleaner` @type ^`okhttp3.internal.tls.CertificateChainCleaner` @kind object;
  #L235b56.  call temp:= `clean`(v10, v14, v13) @signature `Lokhttp3/internal/tls/CertificateChainCleaner;.clean:(Ljava/util/List;Ljava/lang/String;)Ljava/util/List;` @kind virtual;
  #L235b5c.  v14:= temp @kind object;
  #L235b5e.  v0:= 0I;
  #L235b60.  call temp:= `size`(v14) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L235b66.  v1:= temp;
  #L235b68.  if v0 >= v1 then goto L235c10;
  #L235b6c.  call temp:= `get`(v14, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L235b72.  v9:= temp @kind object;
  #L235b74.  v9:= (`java.security.cert.X509Certificate`) v9 @kind object;
  #L235b78.  v7:= 0I;
  #L235b7a.  v8:= 0I;
  #L235b7c.  v3:= 0I;
  #L235b7e.  call temp:= `size`(v5) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L235b84.  v6:= temp;
  #L235b86.  if v3 >= v6 then goto L235c0a;
  #L235b8a.  call temp:= `get`(v5, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L235b90.  v4:= temp @kind object;
  #L235b92.  v4:= (`okhttp3.CertificatePinner$Pin`) v4 @kind object;
  #L235b96.  v10:= v4.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` @kind object;
  #L235b9a.  v11:= "sha256/" @kind object;
  #L235b9e.  call temp:= `equals`(v10, v11) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L235ba4.  v10:= temp;
  #L235ba6.  if v10 == 0 then goto L235bcc;
  #L235baa.  if v8 != 0 then goto L235bb6;
  #L235bae.  call temp:= `sha256`(v9) @signature `Lokhttp3/CertificatePinner;.sha256:(Ljava/security/cert/X509Certificate;)Lokio/ByteString;` @kind static;
  #L235bb4.  v8:= temp @kind object;
  #L235bb6.  v10:= v4.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` @kind object;
  #L235bba.  call temp:= `equals`(v10, v8) @signature `Lokio/ByteString;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L235bc0.  v10:= temp;
  #L235bc2.  if v10 != 0 then goto L235b48;
  #L235bc6.  v3:= v3 + 1;
  #L235bca.  goto L235b86;
  #L235bcc.  v10:= v4.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` @kind object;
  #L235bd0.  v11:= "sha1/" @kind object;
  #L235bd4.  call temp:= `equals`(v10, v11) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L235bda.  v10:= temp;
  #L235bdc.  if v10 == 0 then goto L235bfe;
  #L235be0.  if v7 != 0 then goto L235bec;
  #L235be4.  call temp:= `sha1`(v9) @signature `Lokhttp3/CertificatePinner;.sha1:(Ljava/security/cert/X509Certificate;)Lokio/ByteString;` @kind static;
  #L235bea.  v7:= temp @kind object;
  #L235bec.  v10:= v4.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` @kind object;
  #L235bf0.  call temp:= `equals`(v10, v7) @signature `Lokio/ByteString;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L235bf6.  v10:= temp;
  #L235bf8.  if v10 == 0 then goto L235bc6;
  #L235bfc.  goto L235b48;
  #L235bfe.  v10:= new `java.lang.AssertionError`;
  #L235c02.  call `<init>`(v10) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L235c08.  throw v10;
  #L235c0a.  v0:= v0 + 1;
  #L235c0e.  goto L235b68;
  #L235c10.  v10:= new `java.lang.StringBuilder`;
  #L235c14.  call `<init>`(v10) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L235c1a.  v11:= "Certificate pinning failure!" @kind object;
  #L235c1e.  call temp:= `append`(v10, v11) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L235c24.  v10:= temp @kind object;
  #L235c26.  v11:= "\n  Peer certificate chain:" @kind object;
  #L235c2a.  call temp:= `append`(v10, v11) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L235c30.  v2:= temp @kind object;
  #L235c32.  v0:= 0I;
  #L235c34.  call temp:= `size`(v14) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L235c3a.  v1:= temp;
  #L235c3c.  if v0 >= v1 then goto L235c90;
  #L235c40.  call temp:= `get`(v14, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L235c46.  v9:= temp @kind object;
  #L235c48.  v9:= (`java.security.cert.X509Certificate`) v9 @kind object;
  #L235c4c.  v10:= "\n    " @kind object;
  #L235c50.  call temp:= `append`(v2, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L235c56.  v10:= temp @kind object;
  #L235c58.  call temp:= `pin`(v9) @signature `Lokhttp3/CertificatePinner;.pin:(Ljava/security/cert/Certificate;)Ljava/lang/String;` @kind static;
  #L235c5e.  v11:= temp @kind object;
  #L235c60.  call temp:= `append`(v10, v11) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L235c66.  v10:= temp @kind object;
  #L235c68.  v11:= ": " @kind object;
  #L235c6c.  call temp:= `append`(v10, v11) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L235c72.  v10:= temp @kind object;
  #L235c74.  call temp:= `getSubjectDN`(v9) @signature `Ljava/security/cert/X509Certificate;.getSubjectDN:()Ljava/security/Principal;` @kind virtual;
  #L235c7a.  v11:= temp @kind object;
  #L235c7c.  call temp:= `getName`(v11) @signature `Ljava/security/Principal;.getName:()Ljava/lang/String;` @kind interface;
  #L235c82.  v11:= temp @kind object;
  #L235c84.  call temp:= `append`(v10, v11) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L235c8a.  v0:= v0 + 1;
  #L235c8e.  goto L235c3c;
  #L235c90.  v10:= "\n  Pinned certificates for " @kind object;
  #L235c94.  call temp:= `append`(v2, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L235c9a.  v10:= temp @kind object;
  #L235c9c.  call temp:= `append`(v10, v13) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L235ca2.  v10:= temp @kind object;
  #L235ca4.  v11:= ":" @kind object;
  #L235ca8.  call temp:= `append`(v10, v11) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L235cae.  v3:= 0I;
  #L235cb0.  call temp:= `size`(v5) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L235cb6.  v6:= temp;
  #L235cb8.  if v3 >= v6 then goto L235ce0;
  #L235cbc.  call temp:= `get`(v5, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L235cc2.  v4:= temp @kind object;
  #L235cc4.  v4:= (`okhttp3.CertificatePinner$Pin`) v4 @kind object;
  #L235cc8.  v10:= "\n    " @kind object;
  #L235ccc.  call temp:= `append`(v2, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L235cd2.  v10:= temp @kind object;
  #L235cd4.  call temp:= `append`(v10, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L235cda.  v3:= v3 + 1;
  #L235cde.  goto L235cb8;
  #L235ce0.  v10:= new `javax.net.ssl.SSLPeerUnverifiedException`;
  #L235ce4.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L235cea.  v11:= temp @kind object;
  #L235cec.  call `<init>`(v10, v11) @signature `Ljavax/net/ssl/SSLPeerUnverifiedException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L235cf2.  throw v10;
}
procedure `void` `check`(`okhttp3.CertificatePinner` v1 @kind this, `java.lang.String` v2 @kind object @name `hostname`, `java.security.cert.Certificate`[] v3 @kind object @name `peerCertificates`) @signature `Lokhttp3/CertificatePinner;.check:(Ljava/lang/String;[Ljava/security/cert/Certificate;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L235d04.  call temp:= `asList`(v3) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L235d0a.  v0:= temp @kind object;
  #L235d0c.  call `check`(v1, v2, v0) @signature `Lokhttp3/CertificatePinner;.check:(Ljava/lang/String;Ljava/util/List;)V` @kind virtual;
  #L235d12.  return @kind void;
}
procedure `java.util.List` `findMatchingPins`(`okhttp3.CertificatePinner` v4 @kind this, `java.lang.String` v5 @kind object @name `hostname`) @signature `Lokhttp3/CertificatePinner;.findMatchingPins:(Ljava/lang/String;)Ljava/util/List;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L235d24.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L235d2a.  v1:= temp @kind object;
  #L235d2c.  v2:= v4.`okhttp3.CertificatePinner.pins` @type ^`java.util.List` @kind object;
  #L235d30.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L235d36.  v2:= temp @kind object;
  #L235d38.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L235d3e.  v3:= temp;
  #L235d40.  if v3 == 0 then goto L235d7a;
  #L235d44.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L235d4a.  v0:= temp @kind object;
  #L235d4c.  v0:= (`okhttp3.CertificatePinner$Pin`) v0 @kind object;
  #L235d50.  call temp:= `matches`(v0, v5) @signature `Lokhttp3/CertificatePinner$Pin;.matches:(Ljava/lang/String;)Z` @kind virtual;
  #L235d56.  v3:= temp;
  #L235d58.  if v3 == 0 then goto L235d38;
  #L235d5c.  call temp:= `isEmpty`(v1) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L235d62.  v3:= temp;
  #L235d64.  if v3 == 0 then goto L235d72;
  #L235d68.  v1:= new `java.util.ArrayList`;
  #L235d6c.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L235d72.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L235d78.  goto L235d38;
  #L235d7a.  return v1 @kind object;
}
procedure `okhttp3.CertificatePinner` `withCertificateChainCleaner`(`okhttp3.CertificatePinner` v2 @kind this, `okhttp3.internal.tls.CertificateChainCleaner` v3 @kind object @name `certificateChainCleaner`) @signature `Lokhttp3/CertificatePinner;.withCertificateChainCleaner:(Lokhttp3/internal/tls/CertificateChainCleaner;)Lokhttp3/CertificatePinner;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L235d8c.  v0:= v2.`okhttp3.CertificatePinner.certificateChainCleaner` @type ^`okhttp3.internal.tls.CertificateChainCleaner` @kind object;
  #L235d90.  if v0 == v3 then goto L235da4;
  #L235d94.  v0:= new `okhttp3.CertificatePinner`;
  #L235d98.  v1:= v2.`okhttp3.CertificatePinner.pins` @type ^`java.util.List` @kind object;
  #L235d9c.  call `<init>`(v0, v1, v3) @signature `Lokhttp3/CertificatePinner;.<init>:(Ljava/util/List;Lokhttp3/internal/tls/CertificateChainCleaner;)V` @kind direct;
  #L235da2.  v2:= v0 @kind object;
  #L235da4.  return v2 @kind object;
}
