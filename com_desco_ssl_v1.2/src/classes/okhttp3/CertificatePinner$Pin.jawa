record `okhttp3.CertificatePinner$Pin` @kind class @AccessFlag FINAL {
  `okio.ByteString` `okhttp3.CertificatePinner$Pin.hash` @AccessFlag FINAL;
  `java.lang.String` `okhttp3.CertificatePinner$Pin.hashAlgorithm` @AccessFlag FINAL;
  `java.lang.String` `okhttp3.CertificatePinner$Pin.pattern` @AccessFlag FINAL;
}
procedure `void` `<init>`(`okhttp3.CertificatePinner$Pin` v3 @kind this, `java.lang.String` v4 @kind object @name `pattern`, `java.lang.String` v5 @kind object @name `pin`) @signature `Lokhttp3/CertificatePinner$Pin;.<init>:(Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L235798.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L23579e.  v3.`okhttp3.CertificatePinner$Pin.pattern` @type ^`java.lang.String` := v4 @kind object;
  #L2357a2.  v0:= "sha1/" @kind object;
  #L2357a6.  call temp:= `startsWith`(v5, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L2357ac.  v0:= temp;
  #L2357ae.  if v0 == 0 then goto L235814;
  #L2357b2.  v0:= "sha1/" @kind object;
  #L2357b6.  v3.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` := v0 @kind object;
  #L2357ba.  v0:= "sha1/" @kind object;
  #L2357be.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2357c4.  v0:= temp;
  #L2357c6.  call temp:= `substring`(v5, v0) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L2357cc.  v0:= temp @kind object;
  #L2357ce.  call temp:= `decodeBase64`(v0) @signature `Lokio/ByteString;.decodeBase64:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L2357d4.  v0:= temp @kind object;
  #L2357d6.  v3.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` := v0 @kind object;
  #L2357da.  v0:= v3.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` @kind object;
  #L2357de.  if v0 != 0 then goto L235880;
  #L2357e2.  v0:= new `java.lang.IllegalArgumentException`;
  #L2357e6.  v1:= new `java.lang.StringBuilder`;
  #L2357ea.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2357f0.  v2:= "pins must be base64: " @kind object;
  #L2357f4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2357fa.  v1:= temp @kind object;
  #L2357fc.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L235802.  v1:= temp @kind object;
  #L235804.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23580a.  v1:= temp @kind object;
  #L23580c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L235812.  throw v0;
  #L235814.  v0:= "sha256/" @kind object;
  #L235818.  call temp:= `startsWith`(v5, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L23581e.  v0:= temp;
  #L235820.  if v0 == 0 then goto L23584e;
  #L235824.  v0:= "sha256/" @kind object;
  #L235828.  v3.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` := v0 @kind object;
  #L23582c.  v0:= "sha256/" @kind object;
  #L235830.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L235836.  v0:= temp;
  #L235838.  call temp:= `substring`(v5, v0) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L23583e.  v0:= temp @kind object;
  #L235840.  call temp:= `decodeBase64`(v0) @signature `Lokio/ByteString;.decodeBase64:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L235846.  v0:= temp @kind object;
  #L235848.  v3.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` := v0 @kind object;
  #L23584c.  goto L2357da;
  #L23584e.  v0:= new `java.lang.IllegalArgumentException`;
  #L235852.  v1:= new `java.lang.StringBuilder`;
  #L235856.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23585c.  v2:= "pins must start with 'sha256/' or 'sha1/': " @kind object;
  #L235860.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L235866.  v1:= temp @kind object;
  #L235868.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23586e.  v1:= temp @kind object;
  #L235870.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L235876.  v1:= temp @kind object;
  #L235878.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23587e.  throw v0;
  #L235880.  return @kind void;
}
procedure `boolean` `equals`(`okhttp3.CertificatePinner$Pin` v2 @kind this, `java.lang.Object` v3 @kind object @name `other`) @signature `Lokhttp3/CertificatePinner$Pin;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L235894.  v0:= instanceof @variable v3 @type ^`okhttp3.CertificatePinner$Pin` @kind boolean;
  #L235898.  if v0 == 0 then goto L2358ec;
  #L23589c.  v1:= v2.`okhttp3.CertificatePinner$Pin.pattern` @type ^`java.lang.String` @kind object;
  #L2358a0.  v0:= v3 @kind object;
  #L2358a2.  v0:= (`okhttp3.CertificatePinner$Pin`) v0 @kind object;
  #L2358a6.  v0:= v0.`okhttp3.CertificatePinner$Pin.pattern` @type ^`java.lang.String` @kind object;
  #L2358aa.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2358b0.  v0:= temp;
  #L2358b2.  if v0 == 0 then goto L2358ec;
  #L2358b6.  v1:= v2.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` @kind object;
  #L2358ba.  v0:= v3 @kind object;
  #L2358bc.  v0:= (`okhttp3.CertificatePinner$Pin`) v0 @kind object;
  #L2358c0.  v0:= v0.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` @kind object;
  #L2358c4.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2358ca.  v0:= temp;
  #L2358cc.  if v0 == 0 then goto L2358ec;
  #L2358d0.  v0:= v2.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` @kind object;
  #L2358d4.  v3:= (`okhttp3.CertificatePinner$Pin`) v3 @kind object;
  #L2358d8.  v1:= v3.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` @kind object;
  #L2358dc.  call temp:= `equals`(v0, v1) @signature `Lokio/ByteString;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2358e2.  v0:= temp;
  #L2358e4.  if v0 == 0 then goto L2358ec;
  #L2358e8.  v0:= 1I;
  #L2358ea.  return v0;
  #L2358ec.  v0:= 0I;
  #L2358ee.  goto L2358ea;
}
procedure `int` `hashCode`(`okhttp3.CertificatePinner$Pin` v3 @kind this) @signature `Lokhttp3/CertificatePinner$Pin;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L235900.  v0:= 17I;
  #L235904.  v1:= v3.`okhttp3.CertificatePinner$Pin.pattern` @type ^`java.lang.String` @kind object;
  #L235908.  call temp:= `hashCode`(v1) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L23590e.  v1:= temp;
  #L235910.  v0:= v1 + 527;
  #L235914.  v1:= v0 * 31;
  #L235918.  v2:= v3.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` @kind object;
  #L23591c.  call temp:= `hashCode`(v2) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L235922.  v2:= temp;
  #L235924.  v0:= v1 + v2 @kind int;
  #L235928.  v1:= v0 * 31;
  #L23592c.  v2:= v3.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` @kind object;
  #L235930.  call temp:= `hashCode`(v2) @signature `Lokio/ByteString;.hashCode:()I` @kind virtual;
  #L235936.  v2:= temp;
  #L235938.  v0:= v1 + v2 @kind int;
  #L23593c.  return v0;
}
procedure `boolean` `matches`(`okhttp3.CertificatePinner$Pin` v8 @kind this, `java.lang.String` v9 @kind object @name `hostname`) @signature `Lokhttp3/CertificatePinner$Pin;.matches:(Ljava/lang/String;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L235950.  v7:= 1I;
  #L235952.  v1:= 0I;
  #L235954.  v0:= v8.`okhttp3.CertificatePinner$Pin.pattern` @type ^`java.lang.String` @kind object;
  #L235958.  call temp:= `equals`(v0, v9) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L23595e.  v0:= temp;
  #L235960.  if v0 == 0 then goto L235966;
  #L235964.  return v7;
  #L235966.  v0:= 46I;
  #L23596a.  call temp:= `indexOf`(v9, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L235970.  v6:= temp;
  #L235972.  v0:= v8.`okhttp3.CertificatePinner$Pin.pattern` @type ^`java.lang.String` @kind object;
  #L235976.  v2:= "*." @kind object;
  #L23597a.  call temp:= `startsWith`(v0, v2) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L235980.  v0:= temp;
  #L235982.  if v0 == 0 then goto L2359b0;
  #L235986.  v2:= v6 + 1;
  #L23598a.  v3:= v8.`okhttp3.CertificatePinner$Pin.pattern` @type ^`java.lang.String` @kind object;
  #L23598e.  v4:= 2I;
  #L235990.  v0:= v8.`okhttp3.CertificatePinner$Pin.pattern` @type ^`java.lang.String` @kind object;
  #L235994.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L23599a.  v0:= temp;
  #L23599c.  v5:= v0 + -2;
  #L2359a0.  v0:= v9 @kind object;
  #L2359a2.  call temp:= `regionMatches`(v0, v1, v2, v3, v4, v5) @signature `Ljava/lang/String;.regionMatches:(ZILjava/lang/String;II)Z` @kind virtual;
  #L2359a8.  v0:= temp;
  #L2359aa.  if v0 == 0 then goto L2359b0;
  #L2359ae.  v1:= v7;
  #L2359b0.  v7:= v1;
  #L2359b2.  goto L235964;
}
procedure `java.lang.String` `toString`(`okhttp3.CertificatePinner$Pin` v2 @kind this) @signature `Lokhttp3/CertificatePinner$Pin;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2359c4.  v0:= new `java.lang.StringBuilder`;
  #L2359c8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2359ce.  v1:= v2.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` @kind object;
  #L2359d2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2359d8.  v0:= temp @kind object;
  #L2359da.  v1:= v2.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` @kind object;
  #L2359de.  call temp:= `base64`(v1) @signature `Lokio/ByteString;.base64:()Ljava/lang/String;` @kind virtual;
  #L2359e4.  v1:= temp @kind object;
  #L2359e6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2359ec.  v0:= temp @kind object;
  #L2359ee.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2359f4.  v0:= temp @kind object;
  #L2359f6.  return v0 @kind object;
}
