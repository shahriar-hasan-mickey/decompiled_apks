record `okhttp3.ConnectionSpec$Builder` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String`[] `okhttp3.ConnectionSpec$Builder.cipherSuites` @AccessFlag PRIVATE;
  `boolean` `okhttp3.ConnectionSpec$Builder.supportsTlsExtensions` @AccessFlag PRIVATE;
  `boolean` `okhttp3.ConnectionSpec$Builder.tls` @AccessFlag PRIVATE;
  `java.lang.String`[] `okhttp3.ConnectionSpec$Builder.tlsVersions` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`okhttp3.ConnectionSpec$Builder` v1 @kind this, `okhttp3.ConnectionSpec` v2 @kind object @name `connectionSpec`) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Lokhttp3/ConnectionSpec;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2379e4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2379ea.  call temp:= `access$400`(v2) @signature `Lokhttp3/ConnectionSpec;.access$400:(Lokhttp3/ConnectionSpec;)Z` @kind static;
  #L2379f0.  v0:= temp;
  #L2379f2.  v1.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` := v0 @kind boolean;
  #L2379f6.  call temp:= `access$500`(v2) @signature `Lokhttp3/ConnectionSpec;.access$500:(Lokhttp3/ConnectionSpec;)[Ljava/lang/String;` @kind static;
  #L2379fc.  v0:= temp @kind object;
  #L2379fe.  v1.`okhttp3.ConnectionSpec$Builder.cipherSuites` @type ^`java.lang.String`[] := v0 @kind object;
  #L237a02.  call temp:= `access$600`(v2) @signature `Lokhttp3/ConnectionSpec;.access$600:(Lokhttp3/ConnectionSpec;)[Ljava/lang/String;` @kind static;
  #L237a08.  v0:= temp @kind object;
  #L237a0a.  v1.`okhttp3.ConnectionSpec$Builder.tlsVersions` @type ^`java.lang.String`[] := v0 @kind object;
  #L237a0e.  call temp:= `access$700`(v2) @signature `Lokhttp3/ConnectionSpec;.access$700:(Lokhttp3/ConnectionSpec;)Z` @kind static;
  #L237a14.  v0:= temp;
  #L237a16.  v1.`okhttp3.ConnectionSpec$Builder.supportsTlsExtensions` @type ^`boolean` := v0 @kind boolean;
  #L237a1a.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.ConnectionSpec$Builder` v0 @kind this, `boolean` v1 @name `tls`) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L237a2c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L237a32.  v0.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` := v1 @kind boolean;
  #L237a36.  return @kind void;
}
procedure `boolean` `access$000`(`okhttp3.ConnectionSpec$Builder` v1 @kind object @name `x0`) @signature `Lokhttp3/ConnectionSpec$Builder;.access$000:(Lokhttp3/ConnectionSpec$Builder;)Z` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L237a48.  v0:= v1.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L237a4c.  return v0;
}
procedure `java.lang.String`[] `access$100`(`okhttp3.ConnectionSpec$Builder` v1 @kind object @name `x0`) @signature `Lokhttp3/ConnectionSpec$Builder;.access$100:(Lokhttp3/ConnectionSpec$Builder;)[Ljava/lang/String;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L237a60.  v0:= v1.`okhttp3.ConnectionSpec$Builder.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L237a64.  return v0 @kind object;
}
procedure `java.lang.String`[] `access$200`(`okhttp3.ConnectionSpec$Builder` v1 @kind object @name `x0`) @signature `Lokhttp3/ConnectionSpec$Builder;.access$200:(Lokhttp3/ConnectionSpec$Builder;)[Ljava/lang/String;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L237a78.  v0:= v1.`okhttp3.ConnectionSpec$Builder.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L237a7c.  return v0 @kind object;
}
procedure `boolean` `access$300`(`okhttp3.ConnectionSpec$Builder` v1 @kind object @name `x0`) @signature `Lokhttp3/ConnectionSpec$Builder;.access$300:(Lokhttp3/ConnectionSpec$Builder;)Z` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L237a90.  v0:= v1.`okhttp3.ConnectionSpec$Builder.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L237a94.  return v0;
}
procedure `okhttp3.ConnectionSpec$Builder` `allEnabledCipherSuites`(`okhttp3.ConnectionSpec$Builder` v2 @kind this) @signature `Lokhttp3/ConnectionSpec$Builder;.allEnabledCipherSuites:()Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L237aa8.  v0:= v2.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L237aac.  if v0 != 0 then goto L237ac0;
  #L237ab0.  v0:= new `java.lang.IllegalStateException`;
  #L237ab4.  v1:= "no cipher suites for cleartext connections" @kind object;
  #L237ab8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L237abe.  throw v0;
  #L237ac0.  v0:= 0I;
  #L237ac2.  v2.`okhttp3.ConnectionSpec$Builder.cipherSuites` @type ^`java.lang.String`[] := v0 @kind object;
  #L237ac6.  return v2 @kind object;
}
procedure `okhttp3.ConnectionSpec$Builder` `allEnabledTlsVersions`(`okhttp3.ConnectionSpec$Builder` v2 @kind this) @signature `Lokhttp3/ConnectionSpec$Builder;.allEnabledTlsVersions:()Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L237ad8.  v0:= v2.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L237adc.  if v0 != 0 then goto L237af0;
  #L237ae0.  v0:= new `java.lang.IllegalStateException`;
  #L237ae4.  v1:= "no TLS versions for cleartext connections" @kind object;
  #L237ae8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L237aee.  throw v0;
  #L237af0.  v0:= 0I;
  #L237af2.  v2.`okhttp3.ConnectionSpec$Builder.tlsVersions` @type ^`java.lang.String`[] := v0 @kind object;
  #L237af6.  return v2 @kind object;
}
procedure `okhttp3.ConnectionSpec` `build`(`okhttp3.ConnectionSpec$Builder` v2 @kind this) @signature `Lokhttp3/ConnectionSpec$Builder;.build:()Lokhttp3/ConnectionSpec;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L237b08.  v0:= new `okhttp3.ConnectionSpec`;
  #L237b0c.  v1:= 0I;
  #L237b0e.  call `<init>`(v0, v2, v1) @signature `Lokhttp3/ConnectionSpec;.<init>:(Lokhttp3/ConnectionSpec$Builder;Lokhttp3/ConnectionSpec$1;)V` @kind direct;
  #L237b14.  return v0 @kind object;
}
procedure `okhttp3.ConnectionSpec$Builder` `cipherSuites`(`okhttp3.ConnectionSpec$Builder` v2 @kind this, `java.lang.String`[] v3 @kind object @name `cipherSuites`) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L237b28.  v0:= v2.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L237b2c.  if v0 != 0 then goto L237b40;
  #L237b30.  v0:= new `java.lang.IllegalStateException`;
  #L237b34.  v1:= "no cipher suites for cleartext connections" @kind object;
  #L237b38.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L237b3e.  throw v0;
  #L237b40.  v0:= length @variable v3;
  #L237b42.  if v0 != 0 then goto L237b56;
  #L237b46.  v0:= new `java.lang.IllegalArgumentException`;
  #L237b4a.  v1:= "At least one cipher suite is required" @kind object;
  #L237b4e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L237b54.  throw v0;
  #L237b56.  call temp:= `clone`(v3) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L237b5c.  v0:= temp @kind object;
  #L237b5e.  v0:= (`java.lang.String`[]) v0 @kind object;
  #L237b62.  v2.`okhttp3.ConnectionSpec$Builder.cipherSuites` @type ^`java.lang.String`[] := v0 @kind object;
  #L237b66.  return v2 @kind object;
}
procedure `okhttp3.ConnectionSpec$Builder` `cipherSuites`(`okhttp3.ConnectionSpec$Builder` v4 @kind this, `okhttp3.CipherSuite`[] v5 @kind object @name `cipherSuites`) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Lokhttp3/CipherSuite;)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L237b78.  v2:= v4.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L237b7c.  if v2 != 0 then goto L237b90;
  #L237b80.  v2:= new `java.lang.IllegalStateException`;
  #L237b84.  v3:= "no cipher suites for cleartext connections" @kind object;
  #L237b88.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L237b8e.  throw v2;
  #L237b90.  v2:= length @variable v5;
  #L237b92.  v1:= new `java.lang.String`[v2];
  #L237b96.  v0:= 0I;
  #L237b98.  v2:= length @variable v5;
  #L237b9a.  if v0 >= v2 then goto L237bb0;
  #L237b9e.  v2:= v5[v0] @kind object;
  #L237ba2.  v2:= v2.`okhttp3.CipherSuite.javaName` @type ^`java.lang.String` @kind object;
  #L237ba6.  v1[v0]:= v2 @kind object;
  #L237baa.  v0:= v0 + 1;
  #L237bae.  goto L237b98;
  #L237bb0.  call temp:= `cipherSuites`(v4, v1) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L237bb6.  v2:= temp @kind object;
  #L237bb8.  return v2 @kind object;
}
procedure `okhttp3.ConnectionSpec$Builder` `supportsTlsExtensions`(`okhttp3.ConnectionSpec$Builder` v2 @kind this, `boolean` v3 @name `supportsTlsExtensions`) @signature `Lokhttp3/ConnectionSpec$Builder;.supportsTlsExtensions:(Z)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L237bcc.  v0:= v2.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L237bd0.  if v0 != 0 then goto L237be4;
  #L237bd4.  v0:= new `java.lang.IllegalStateException`;
  #L237bd8.  v1:= "no TLS extensions for cleartext connections" @kind object;
  #L237bdc.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L237be2.  throw v0;
  #L237be4.  v2.`okhttp3.ConnectionSpec$Builder.supportsTlsExtensions` @type ^`boolean` := v3 @kind boolean;
  #L237be8.  return v2 @kind object;
}
procedure `okhttp3.ConnectionSpec$Builder` `tlsVersions`(`okhttp3.ConnectionSpec$Builder` v2 @kind this, `java.lang.String`[] v3 @kind object @name `tlsVersions`) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L237bfc.  v0:= v2.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L237c00.  if v0 != 0 then goto L237c14;
  #L237c04.  v0:= new `java.lang.IllegalStateException`;
  #L237c08.  v1:= "no TLS versions for cleartext connections" @kind object;
  #L237c0c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L237c12.  throw v0;
  #L237c14.  v0:= length @variable v3;
  #L237c16.  if v0 != 0 then goto L237c2a;
  #L237c1a.  v0:= new `java.lang.IllegalArgumentException`;
  #L237c1e.  v1:= "At least one TLS version is required" @kind object;
  #L237c22.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L237c28.  throw v0;
  #L237c2a.  call temp:= `clone`(v3) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L237c30.  v0:= temp @kind object;
  #L237c32.  v0:= (`java.lang.String`[]) v0 @kind object;
  #L237c36.  v2.`okhttp3.ConnectionSpec$Builder.tlsVersions` @type ^`java.lang.String`[] := v0 @kind object;
  #L237c3a.  return v2 @kind object;
}
procedure `okhttp3.ConnectionSpec$Builder` `tlsVersions`(`okhttp3.ConnectionSpec$Builder` v4 @kind this, `okhttp3.TlsVersion`[] v5 @kind object @name `tlsVersions`) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Lokhttp3/TlsVersion;)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L237c4c.  v2:= v4.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L237c50.  if v2 != 0 then goto L237c64;
  #L237c54.  v2:= new `java.lang.IllegalStateException`;
  #L237c58.  v3:= "no TLS versions for cleartext connections" @kind object;
  #L237c5c.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L237c62.  throw v2;
  #L237c64.  v2:= length @variable v5;
  #L237c66.  v1:= new `java.lang.String`[v2];
  #L237c6a.  v0:= 0I;
  #L237c6c.  v2:= length @variable v5;
  #L237c6e.  if v0 >= v2 then goto L237c84;
  #L237c72.  v2:= v5[v0] @kind object;
  #L237c76.  v2:= v2.`okhttp3.TlsVersion.javaName` @type ^`java.lang.String` @kind object;
  #L237c7a.  v1[v0]:= v2 @kind object;
  #L237c7e.  v0:= v0 + 1;
  #L237c82.  goto L237c6c;
  #L237c84.  call temp:= `tlsVersions`(v4, v1) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L237c8a.  v2:= temp @kind object;
  #L237c8c.  return v2 @kind object;
}
