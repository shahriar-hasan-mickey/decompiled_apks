record `okhttp3.ConnectionPool` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.Runnable` `okhttp3.ConnectionPool.cleanupRunnable` @AccessFlag PRIVATE_FINAL;
  `boolean` `okhttp3.ConnectionPool.cleanupRunning` @AccessFlag ;
  `java.util.Deque` `okhttp3.ConnectionPool.connections` @AccessFlag PRIVATE_FINAL;
  `long` `okhttp3.ConnectionPool.keepAliveDurationNs` @AccessFlag PRIVATE_FINAL;
  `int` `okhttp3.ConnectionPool.maxIdleConnections` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.RouteDatabase` `okhttp3.ConnectionPool.routeDatabase` @AccessFlag FINAL;
}
global `boolean` `@@okhttp3.ConnectionPool.$assertionsDisabled` @AccessFlag STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.Executor` `@@okhttp3.ConnectionPool.executor` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/ConnectionPool;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L237480.  v8:= 1I;
  #L237482.  v2:= 0I;
  #L237484.  v0:= constclass @type ^`okhttp3.ConnectionPool` @kind object;
  #L237488.  call temp:= `desiredAssertionStatus`(v0) @signature `Ljava/lang/Class;.desiredAssertionStatus:()Z` @kind virtual;
  #L23748e.  v0:= temp;
  #L237490.  if v0 != 0 then goto L2374ce;
  #L237494.  v0:= v8;
  #L237496.  `@@okhttp3.ConnectionPool.$assertionsDisabled` @type ^`boolean` := v0 @kind boolean;
  #L23749a.  v1:= new `java.util.concurrent.ThreadPoolExecutor`;
  #L23749e.  v3:= 2147483647I;
  #L2374a4.  v4:= 60L;
  #L2374a8.  v6:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L2374ac.  v7:= new `java.util.concurrent.SynchronousQueue`;
  #L2374b0.  call `<init>`(v7) @signature `Ljava/util/concurrent/SynchronousQueue;.<init>:()V` @kind direct;
  #L2374b6.  v0:= "OkHttp ConnectionPool" @kind object;
  #L2374ba.  call temp:= `threadFactory`(v0, v8) @signature `Lokhttp3/internal/Util;.threadFactory:(Ljava/lang/String;Z)Ljava/util/concurrent/ThreadFactory;` @kind static;
  #L2374c0.  v8:= temp @kind object;
  #L2374c2.  call `<init>`(v1, v2, v3, v4, v6, v7, v8) @signature `Ljava/util/concurrent/ThreadPoolExecutor;.<init>:(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L2374c8.  `@@okhttp3.ConnectionPool.executor` @type ^`java.util.concurrent.Executor` := v1 @kind object;
  #L2374cc.  return @kind void;
  #L2374ce.  v0:= v2;
  #L2374d0.  goto L237496;
}
procedure `void` `<init>`(`okhttp3.ConnectionPool` v4 @kind this) @signature `Lokhttp3/ConnectionPool;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2374e4.  v0:= 5I;
  #L2374e6.  v2:= 5L;
  #L2374ea.  v1:= `@@java.util.concurrent.TimeUnit.MINUTES` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L2374ee.  call `<init>`(v4, v0, v2, v1) @signature `Lokhttp3/ConnectionPool;.<init>:(IJLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L2374f4.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.ConnectionPool` v4 @kind this, `int` v5 @name `maxIdleConnections`, `long` v6 @name `keepAliveDuration`, `java.util.concurrent.TimeUnit` v8 @kind object @name `timeUnit`) @signature `Lokhttp3/ConnectionPool;.<init>:(IJLjava/util/concurrent/TimeUnit;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L237508.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L23750e.  v0:= new `okhttp3.ConnectionPool$1`;
  #L237512.  call `<init>`(v0, v4) @signature `Lokhttp3/ConnectionPool$1;.<init>:(Lokhttp3/ConnectionPool;)V` @kind direct;
  #L237518.  v4.`okhttp3.ConnectionPool.cleanupRunnable` @type ^`java.lang.Runnable` := v0 @kind object;
  #L23751c.  v0:= new `java.util.ArrayDeque`;
  #L237520.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L237526.  v4.`okhttp3.ConnectionPool.connections` @type ^`java.util.Deque` := v0 @kind object;
  #L23752a.  v0:= new `okhttp3.internal.RouteDatabase`;
  #L23752e.  call `<init>`(v0) @signature `Lokhttp3/internal/RouteDatabase;.<init>:()V` @kind direct;
  #L237534.  v4.`okhttp3.ConnectionPool.routeDatabase` @type ^`okhttp3.internal.RouteDatabase` := v0 @kind object;
  #L237538.  v4.`okhttp3.ConnectionPool.maxIdleConnections` @type ^`int` := v5;
  #L23753c.  call temp:= `toNanos`(v8, v6) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L237542.  v0:= temp @kind wide;
  #L237544.  v4.`okhttp3.ConnectionPool.keepAliveDurationNs` @type ^`long` := v0 @kind wide;
  #L237548.  v0:= 0L;
  #L23754c.  v0:= lcmp(v6, v0);
  #L237550.  if v0 > 0 then goto L237586;
  #L237554.  v0:= new `java.lang.IllegalArgumentException`;
  #L237558.  v1:= new `java.lang.StringBuilder`;
  #L23755c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L237562.  v2:= "keepAliveDuration <= 0: " @kind object;
  #L237566.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23756c.  v1:= temp @kind object;
  #L23756e.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L237574.  v1:= temp @kind object;
  #L237576.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23757c.  v1:= temp @kind object;
  #L23757e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L237584.  throw v0;
  #L237586.  return @kind void;
}
procedure `int` `pruneAndGetAllocationCount`(`okhttp3.ConnectionPool` v8 @kind this, `okhttp3.internal.io.RealConnection` v9 @kind object @name `connection`, `long` v10 @name `now`) @signature `Lokhttp3/ConnectionPool;.pruneAndGetAllocationCount:(Lokhttp3/internal/io/RealConnection;J)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L237598.  v2:= v9.`okhttp3.internal.io.RealConnection.allocations` @type ^`java.util.List` @kind object;
  #L23759c.  v0:= 0I;
  #L23759e.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2375a4.  v3:= temp;
  #L2375a6.  if v0 >= v3 then goto L23764c;
  #L2375aa.  call temp:= `get`(v2, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2375b0.  v1:= temp @kind object;
  #L2375b2.  v1:= (`java.lang.ref.Reference`) v1 @kind object;
  #L2375b6.  call temp:= `get`(v1) @signature `Ljava/lang/ref/Reference;.get:()Ljava/lang/Object;` @kind virtual;
  #L2375bc.  v3:= temp @kind object;
  #L2375be.  if v3 == 0 then goto L2375c8;
  #L2375c2.  v0:= v0 + 1;
  #L2375c6.  goto L23759e;
  #L2375c8.  call temp:= `get`() @signature `Lokhttp3/internal/Platform;.get:()Lokhttp3/internal/Platform;` @kind static;
  #L2375ce.  v3:= temp @kind object;
  #L2375d0.  v4:= 5I;
  #L2375d2.  v5:= new `java.lang.StringBuilder`;
  #L2375d6.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2375dc.  v6:= "A connection to " @kind object;
  #L2375e0.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2375e6.  v5:= temp @kind object;
  #L2375e8.  call temp:= `route`(v9) @signature `Lokhttp3/internal/io/RealConnection;.route:()Lokhttp3/Route;` @kind virtual;
  #L2375ee.  v6:= temp @kind object;
  #L2375f0.  call temp:= `address`(v6) @signature `Lokhttp3/Route;.address:()Lokhttp3/Address;` @kind virtual;
  #L2375f6.  v6:= temp @kind object;
  #L2375f8.  call temp:= `url`(v6) @signature `Lokhttp3/Address;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L2375fe.  v6:= temp @kind object;
  #L237600.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L237606.  v5:= temp @kind object;
  #L237608.  v6:= " was leaked. Did you forget to close a response body?" @kind object;
  #L23760c.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L237612.  v5:= temp @kind object;
  #L237614.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23761a.  v5:= temp @kind object;
  #L23761c.  v6:= 0I;
  #L23761e.  call `log`(v3, v4, v5, v6) @signature `Lokhttp3/internal/Platform;.log:(ILjava/lang/String;Ljava/lang/Throwable;)V` @kind virtual;
  #L237624.  call temp:= `remove`(v2, v0) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L23762a.  v3:= 1I;
  #L23762c.  v9.`okhttp3.internal.io.RealConnection.noNewStreams` @type ^`boolean` := v3 @kind boolean;
  #L237630.  call temp:= `isEmpty`(v2) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L237636.  v3:= temp;
  #L237638.  if v3 == 0 then goto L23759e;
  #L23763c.  v4:= v8.`okhttp3.ConnectionPool.keepAliveDurationNs` @type ^`long` @kind wide;
  #L237640.  v4:= v10 - v4 @kind long;
  #L237644.  v9.`okhttp3.internal.io.RealConnection.idleAtNanos` @type ^`long` := v4 @kind wide;
  #L237648.  v3:= 0I;
  #L23764a.  return v3;
  #L23764c.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L237652.  v3:= temp;
  #L237654.  goto L23764a;
}
procedure `long` `cleanup`(`okhttp3.ConnectionPool` v13 @kind this, `long` v14 @name `now`) @signature `Lokhttp3/ConnectionPool;.cleanup:(J)J` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L237668.  v3:= 0I;
  #L23766a.  v2:= 0I;
  #L23766c.  v6:= 0I;
  #L23766e.  v8:= -9223372036854775808L;
  #L237672.  @monitorenter v13
  #L237674.  v7:= v13.`okhttp3.ConnectionPool.connections` @type ^`java.util.Deque` @kind object;
  #L237678.  call temp:= `iterator`(v7) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L23767e.  v1:= temp @kind object;
  #L237680.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L237686.  v7:= temp;
  #L237688.  if v7 == 0 then goto L2376c4;
  #L23768c.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L237692.  v0:= temp @kind object;
  #L237694.  v0:= (`okhttp3.internal.io.RealConnection`) v0 @kind object;
  #L237698.  call temp:= `pruneAndGetAllocationCount`(v13, v0, v14) @signature `Lokhttp3/ConnectionPool;.pruneAndGetAllocationCount:(Lokhttp3/internal/io/RealConnection;J)I` @kind direct;
  #L23769e.  v7:= temp;
  #L2376a0.  if v7 <= 0 then goto L2376aa;
  #L2376a4.  v3:= v3 + 1;
  #L2376a8.  goto L237680;
  #L2376aa.  v2:= v2 + 1;
  #L2376ae.  v10:= v0.`okhttp3.internal.io.RealConnection.idleAtNanos` @type ^`long` @kind wide;
  #L2376b2.  v4:= v14 - v10 @kind long;
  #L2376b6.  v7:= lcmp(v4, v8);
  #L2376ba.  if v7 <= 0 then goto L237680;
  #L2376be.  v8:= v4 @kind wide;
  #L2376c0.  v6:= v0 @kind object;
  #L2376c2.  goto L237680;
  #L2376c4.  v10:= v13.`okhttp3.ConnectionPool.keepAliveDurationNs` @type ^`long` @kind wide;
  #L2376c8.  v7:= lcmp(v8, v10);
  #L2376cc.  if v7 >= 0 then goto L2376d8;
  #L2376d0.  v7:= v13.`okhttp3.ConnectionPool.maxIdleConnections` @type ^`int`;
  #L2376d4.  if v2 <= v7 then goto L2376f8;
  #L2376d8.  v7:= v13.`okhttp3.ConnectionPool.connections` @type ^`java.util.Deque` @kind object;
  #L2376dc.  call temp:= `remove`(v7, v6) @signature `Ljava/util/Deque;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L2376e2.  @monitorexit v13
  #L2376e4.  call temp:= `socket`(v6) @signature `Lokhttp3/internal/io/RealConnection;.socket:()Ljava/net/Socket;` @kind virtual;
  #L2376ea.  v7:= temp @kind object;
  #L2376ec.  call `closeQuietly`(v7) @signature `Lokhttp3/internal/Util;.closeQuietly:(Ljava/net/Socket;)V` @kind static;
  #L2376f2.  v10:= 0L;
  #L2376f6.  return v10 @kind wide;
  #L2376f8.  if v2 <= 0 then goto L23770c;
  #L2376fc.  v10:= v13.`okhttp3.ConnectionPool.keepAliveDurationNs` @type ^`long` @kind wide;
  #L237700.  v10:= v10 - v8 @kind long;
  #L237702.  @monitorexit v13
  #L237704.  goto L2376f6;
  #L237706.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L237708.  @monitorexit v13
  #L23770a.  throw v7;
  #L23770c.  if v3 <= 0 then goto L237718;
  #L237710.  v10:= v13.`okhttp3.ConnectionPool.keepAliveDurationNs` @type ^`long` @kind wide;
  #L237714.  @monitorexit v13
  #L237716.  goto L2376f6;
  #L237718.  v7:= 0I;
  #L23771a.  v13.`okhttp3.ConnectionPool.cleanupRunning` @type ^`boolean` := v7 @kind boolean;
  #L23771e.  v10:= -1L;
  #L237722.  @monitorexit v13
  #L237724.  goto L2376f6;
  catch `java.lang.Throwable` @[L237674..L2376e4] goto L237706;
  catch `java.lang.Throwable` @[L2376fc..L23770a] goto L237706;
  catch `java.lang.Throwable` @[L237710..L237724] goto L237706;
}
procedure `boolean` `connectionBecameIdle`(`okhttp3.ConnectionPool` v1 @kind this, `okhttp3.internal.io.RealConnection` v2 @kind object @name `connection`) @signature `Lokhttp3/ConnectionPool;.connectionBecameIdle:(Lokhttp3/internal/io/RealConnection;)Z` @AccessFlag  {
    temp;
    v0;

  #L237754.  v0:= `@@okhttp3.ConnectionPool.$assertionsDisabled` @type ^`boolean` @kind boolean;
  #L237758.  if v0 != 0 then goto L237774;
  #L23775c.  call temp:= `holdsLock`(v1) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L237762.  v0:= temp;
  #L237764.  if v0 != 0 then goto L237774;
  #L237768.  v0:= new `java.lang.AssertionError`;
  #L23776c.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L237772.  throw v0;
  #L237774.  v0:= v2.`okhttp3.internal.io.RealConnection.noNewStreams` @type ^`boolean` @kind boolean;
  #L237778.  if v0 != 0 then goto L237784;
  #L23777c.  v0:= v1.`okhttp3.ConnectionPool.maxIdleConnections` @type ^`int`;
  #L237780.  if v0 != 0 then goto L237792;
  #L237784.  v0:= v1.`okhttp3.ConnectionPool.connections` @type ^`java.util.Deque` @kind object;
  #L237788.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Deque;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L23778e.  v0:= 1I;
  #L237790.  return v0;
  #L237792.  call `notifyAll`(v1) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L237798.  v0:= 0I;
  #L23779a.  goto L237790;
}
procedure `int` `connectionCount`(`okhttp3.ConnectionPool` v1 @kind this) @signature `Lokhttp3/ConnectionPool;.connectionCount:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2377ac.  @monitorenter v1
  #L2377ae.  v0:= v1.`okhttp3.ConnectionPool.connections` @type ^`java.util.Deque` @kind object;
  #L2377b2.  call temp:= `size`(v0) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #L2377b8.  v0:= temp;
  #L2377ba.  @monitorexit v1
  #L2377bc.  return v0;
  #L2377be.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2377c0.  @monitorexit v1
  #L2377c2.  throw v0;
  catch `java.lang.Throwable` @[L2377ae..L2377b8] goto L2377be;
}
procedure `void` `evictAll`(`okhttp3.ConnectionPool` v5 @kind this) @signature `Lokhttp3/ConnectionPool;.evictAll:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2377e0.  v1:= new `java.util.ArrayList`;
  #L2377e4.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2377ea.  @monitorenter v5
  #L2377ec.  v3:= v5.`okhttp3.ConnectionPool.connections` @type ^`java.util.Deque` @kind object;
  #L2377f0.  call temp:= `iterator`(v3) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2377f6.  v2:= temp @kind object;
  #L2377f8.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2377fe.  v3:= temp;
  #L237800.  if v3 == 0 then goto L23783a;
  #L237804.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L23780a.  v0:= temp @kind object;
  #L23780c.  v0:= (`okhttp3.internal.io.RealConnection`) v0 @kind object;
  #L237810.  v3:= v0.`okhttp3.internal.io.RealConnection.allocations` @type ^`java.util.List` @kind object;
  #L237814.  call temp:= `isEmpty`(v3) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L23781a.  v3:= temp;
  #L23781c.  if v3 == 0 then goto L2377f8;
  #L237820.  v3:= 1I;
  #L237822.  v0.`okhttp3.internal.io.RealConnection.noNewStreams` @type ^`boolean` := v3 @kind boolean;
  #L237826.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L23782c.  call `remove`(v2) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L237832.  goto L2377f8;
  #L237834.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L237836.  @monitorexit v5
  #L237838.  throw v3;
  #L23783a.  @monitorexit v5
  #L23783c.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L237842.  v3:= temp @kind object;
  #L237844.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L23784a.  v4:= temp;
  #L23784c.  if v4 == 0 then goto L23786c;
  #L237850.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L237856.  v0:= temp @kind object;
  #L237858.  v0:= (`okhttp3.internal.io.RealConnection`) v0 @kind object;
  #L23785c.  call temp:= `socket`(v0) @signature `Lokhttp3/internal/io/RealConnection;.socket:()Ljava/net/Socket;` @kind virtual;
  #L237862.  v4:= temp @kind object;
  #L237864.  call `closeQuietly`(v4) @signature `Lokhttp3/internal/Util;.closeQuietly:(Ljava/net/Socket;)V` @kind static;
  #L23786a.  goto L237844;
  #L23786c.  return @kind void;
  catch `java.lang.Throwable` @[L2377ec..L237838] goto L237834;
  catch `java.lang.Throwable` @[L23783a..L23783c] goto L237834;
}
procedure `okhttp3.internal.io.RealConnection` `get`(`okhttp3.ConnectionPool` v4 @kind this, `okhttp3.Address` v5 @kind object @name `address`, `okhttp3.internal.http.StreamAllocation` v6 @kind object @name `streamAllocation`) @signature `Lokhttp3/ConnectionPool;.get:(Lokhttp3/Address;Lokhttp3/internal/http/StreamAllocation;)Lokhttp3/internal/io/RealConnection;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L237894.  v1:= `@@okhttp3.ConnectionPool.$assertionsDisabled` @type ^`boolean` @kind boolean;
  #L237898.  if v1 != 0 then goto L2378b4;
  #L23789c.  call temp:= `holdsLock`(v4) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L2378a2.  v1:= temp;
  #L2378a4.  if v1 != 0 then goto L2378b4;
  #L2378a8.  v1:= new `java.lang.AssertionError`;
  #L2378ac.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2378b2.  throw v1;
  #L2378b4.  v1:= v4.`okhttp3.ConnectionPool.connections` @type ^`java.util.Deque` @kind object;
  #L2378b8.  call temp:= `iterator`(v1) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2378be.  v1:= temp @kind object;
  #L2378c0.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2378c6.  v2:= temp;
  #L2378c8.  if v2 == 0 then goto L237914;
  #L2378cc.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2378d2.  v0:= temp @kind object;
  #L2378d4.  v0:= (`okhttp3.internal.io.RealConnection`) v0 @kind object;
  #L2378d8.  v2:= v0.`okhttp3.internal.io.RealConnection.allocations` @type ^`java.util.List` @kind object;
  #L2378dc.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2378e2.  v2:= temp;
  #L2378e4.  v3:= v0.`okhttp3.internal.io.RealConnection.allocationLimit` @type ^`int`;
  #L2378e8.  if v2 >= v3 then goto L2378c0;
  #L2378ec.  call temp:= `route`(v0) @signature `Lokhttp3/internal/io/RealConnection;.route:()Lokhttp3/Route;` @kind virtual;
  #L2378f2.  v2:= temp @kind object;
  #L2378f4.  v2:= v2.`okhttp3.Route.address` @type ^`okhttp3.Address` @kind object;
  #L2378f8.  call temp:= `equals`(v5, v2) @signature `Lokhttp3/Address;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2378fe.  v2:= temp;
  #L237900.  if v2 == 0 then goto L2378c0;
  #L237904.  v2:= v0.`okhttp3.internal.io.RealConnection.noNewStreams` @type ^`boolean` @kind boolean;
  #L237908.  if v2 != 0 then goto L2378c0;
  #L23790c.  call `acquire`(v6, v0) @signature `Lokhttp3/internal/http/StreamAllocation;.acquire:(Lokhttp3/internal/io/RealConnection;)V` @kind virtual;
  #L237912.  return v0 @kind object;
  #L237914.  v0:= 0I;
  #L237916.  goto L237912;
}
procedure `int` `idleConnectionCount`(`okhttp3.ConnectionPool` v4 @kind this) @signature `Lokhttp3/ConnectionPool;.idleConnectionCount:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L237928.  @monitorenter v4
  #L23792a.  v1:= 0I;
  #L23792c.  v2:= v4.`okhttp3.ConnectionPool.connections` @type ^`java.util.Deque` @kind object;
  #L237930.  call temp:= `iterator`(v2) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L237936.  v2:= temp @kind object;
  #L237938.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L23793e.  v3:= temp;
  #L237940.  if v3 == 0 then goto L237966;
  #L237944.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L23794a.  v0:= temp @kind object;
  #L23794c.  v0:= (`okhttp3.internal.io.RealConnection`) v0 @kind object;
  #L237950.  v3:= v0.`okhttp3.internal.io.RealConnection.allocations` @type ^`java.util.List` @kind object;
  #L237954.  call temp:= `isEmpty`(v3) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L23795a.  v3:= temp;
  #L23795c.  if v3 == 0 then goto L237938;
  #L237960.  v1:= v1 + 1;
  #L237964.  goto L237938;
  #L237966.  @monitorexit v4
  #L237968.  return v1;
  #L23796a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L23796c.  @monitorexit v4
  #L23796e.  throw v2;
  catch `java.lang.Throwable` @[L23792c..L23795a] goto L23796a;
}
procedure `void` `put`(`okhttp3.ConnectionPool` v2 @kind this, `okhttp3.internal.io.RealConnection` v3 @kind object @name `connection`) @signature `Lokhttp3/ConnectionPool;.put:(Lokhttp3/internal/io/RealConnection;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L23798c.  v0:= `@@okhttp3.ConnectionPool.$assertionsDisabled` @type ^`boolean` @kind boolean;
  #L237990.  if v0 != 0 then goto L2379ac;
  #L237994.  call temp:= `holdsLock`(v2) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L23799a.  v0:= temp;
  #L23799c.  if v0 != 0 then goto L2379ac;
  #L2379a0.  v0:= new `java.lang.AssertionError`;
  #L2379a4.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2379aa.  throw v0;
  #L2379ac.  v0:= v2.`okhttp3.ConnectionPool.cleanupRunning` @type ^`boolean` @kind boolean;
  #L2379b0.  if v0 != 0 then goto L2379c8;
  #L2379b4.  v0:= 1I;
  #L2379b6.  v2.`okhttp3.ConnectionPool.cleanupRunning` @type ^`boolean` := v0 @kind boolean;
  #L2379ba.  v0:= `@@okhttp3.ConnectionPool.executor` @type ^`java.util.concurrent.Executor` @kind object;
  #L2379be.  v1:= v2.`okhttp3.ConnectionPool.cleanupRunnable` @type ^`java.lang.Runnable` @kind object;
  #L2379c2.  call `execute`(v0, v1) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L2379c8.  v0:= v2.`okhttp3.ConnectionPool.connections` @type ^`java.util.Deque` @kind object;
  #L2379cc.  call temp:= `add`(v0, v3) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2379d2.  return @kind void;
}
