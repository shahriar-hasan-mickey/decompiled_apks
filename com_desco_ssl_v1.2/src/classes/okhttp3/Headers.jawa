record `okhttp3.Headers` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String`[] `okhttp3.Headers.namesAndValues` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.Headers` v2 @kind this, `okhttp3.Headers$Builder` v3 @kind object @name `builder`) @signature `Lokhttp3/Headers;.<init>:(Lokhttp3/Headers$Builder;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L23a194.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L23a19a.  call temp:= `access$000`(v3) @signature `Lokhttp3/Headers$Builder;.access$000:(Lokhttp3/Headers$Builder;)Ljava/util/List;` @kind static;
  #L23a1a0.  v0:= temp @kind object;
  #L23a1a2.  call temp:= `access$000`(v3) @signature `Lokhttp3/Headers$Builder;.access$000:(Lokhttp3/Headers$Builder;)Ljava/util/List;` @kind static;
  #L23a1a8.  v1:= temp @kind object;
  #L23a1aa.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L23a1b0.  v1:= temp;
  #L23a1b2.  v1:= new `java.lang.String`[v1];
  #L23a1b6.  call temp:= `toArray`(v0, v1) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L23a1bc.  v0:= temp @kind object;
  #L23a1be.  v0:= (`java.lang.String`[]) v0 @kind object;
  #L23a1c2.  v2.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] := v0 @kind object;
  #L23a1c6.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.Headers` v0 @kind this, `okhttp3.Headers$Builder` v1 @kind object @name `x0`, `okhttp3.Headers$1` v2 @kind object @name `x1`) @signature `Lokhttp3/Headers;.<init>:(Lokhttp3/Headers$Builder;Lokhttp3/Headers$1;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L23a1d8.  call `<init>`(v0, v1) @signature `Lokhttp3/Headers;.<init>:(Lokhttp3/Headers$Builder;)V` @kind direct;
  #L23a1de.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.Headers` v0 @kind this, `java.lang.String`[] v1 @kind object @name `namesAndValues`) @signature `Lokhttp3/Headers;.<init>:([Ljava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L23a1f0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L23a1f6.  v0.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] := v1 @kind object;
  #L23a1fa.  return @kind void;
}
procedure `java.lang.String` `get`(`java.lang.String`[] v2 @kind object @name `namesAndValues`, `java.lang.String` v3 @kind object @name `name`) @signature `Lokhttp3/Headers;.get:([Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L23a20c.  v1:= length @variable v2;
  #L23a20e.  v0:= v1 + -2;
  #L23a212.  if v0 < 0 then goto L23a236;
  #L23a216.  v1:= v2[v0] @kind object;
  #L23a21a.  call temp:= `equalsIgnoreCase`(v3, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L23a220.  v1:= temp;
  #L23a222.  if v1 == 0 then goto L23a230;
  #L23a226.  v1:= v0 + 1;
  #L23a22a.  v1:= v2[v1] @kind object;
  #L23a22e.  return v1 @kind object;
  #L23a230.  v0:= v0 + -2;
  #L23a234.  goto L23a212;
  #L23a236.  v1:= 0I;
  #L23a238.  goto L23a22e;
}
procedure `okhttp3.Headers` `of`(`java.util.Map` v9 @kind object) @signature `Lokhttp3/Headers;.of:(Ljava/util/Map;)Lokhttp3/Headers;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L23a24c.  v8:= 0I;
  #L23a24e.  v7:= -1I;
  #L23a250.  if v9 != 0 then goto L23a264;
  #L23a254.  v5:= new `java.lang.NullPointerException`;
  #L23a258.  v6:= "headers == null" @kind object;
  #L23a25c.  call `<init>`(v5, v6) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23a262.  throw v5;
  #L23a264.  call temp:= `size`(v9) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L23a26a.  v5:= temp;
  #L23a26c.  v5:= v5 * 2;
  #L23a270.  v3:= new `java.lang.String`[v5];
  #L23a274.  v1:= 0I;
  #L23a276.  call temp:= `entrySet`(v9) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L23a27c.  v5:= temp @kind object;
  #L23a27e.  call temp:= `iterator`(v5) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L23a284.  v6:= temp @kind object;
  #L23a286.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L23a28c.  v5:= temp;
  #L23a28e.  if v5 == 0 then goto L23a36a;
  #L23a292.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L23a298.  v0:= temp @kind object;
  #L23a29a.  v0:= (`java.util.Map$Entry`) v0 @kind object;
  #L23a29e.  call temp:= `getKey`(v0) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L23a2a4.  v5:= temp @kind object;
  #L23a2a6.  if v5 == 0 then goto L23a2b6;
  #L23a2aa.  call temp:= `getValue`(v0) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L23a2b0.  v5:= temp @kind object;
  #L23a2b2.  if v5 != 0 then goto L23a2c6;
  #L23a2b6.  v5:= new `java.lang.IllegalArgumentException`;
  #L23a2ba.  v6:= "Headers cannot be null" @kind object;
  #L23a2be.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23a2c4.  throw v5;
  #L23a2c6.  call temp:= `getKey`(v0) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L23a2cc.  v5:= temp @kind object;
  #L23a2ce.  v5:= (`java.lang.String`) v5 @kind object;
  #L23a2d2.  call temp:= `trim`(v5) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L23a2d8.  v2:= temp @kind object;
  #L23a2da.  call temp:= `getValue`(v0) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L23a2e0.  v5:= temp @kind object;
  #L23a2e2.  v5:= (`java.lang.String`) v5 @kind object;
  #L23a2e6.  call temp:= `trim`(v5) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L23a2ec.  v4:= temp @kind object;
  #L23a2ee.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L23a2f4.  v5:= temp;
  #L23a2f6.  if v5 == 0 then goto L23a312;
  #L23a2fa.  call temp:= `indexOf`(v2, v8) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L23a300.  v5:= temp;
  #L23a302.  if v5 != v7 then goto L23a312;
  #L23a306.  call temp:= `indexOf`(v4, v8) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L23a30c.  v5:= temp;
  #L23a30e.  if v5 == v7 then goto L23a358;
  #L23a312.  v5:= new `java.lang.IllegalArgumentException`;
  #L23a316.  v6:= new `java.lang.StringBuilder`;
  #L23a31a.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23a320.  v7:= "Unexpected header: " @kind object;
  #L23a324.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23a32a.  v6:= temp @kind object;
  #L23a32c.  call temp:= `append`(v6, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23a332.  v6:= temp @kind object;
  #L23a334.  v7:= ": " @kind object;
  #L23a338.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23a33e.  v6:= temp @kind object;
  #L23a340.  call temp:= `append`(v6, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23a346.  v6:= temp @kind object;
  #L23a348.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23a34e.  v6:= temp @kind object;
  #L23a350.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23a356.  throw v5;
  #L23a358.  v3[v1]:= v2 @kind object;
  #L23a35c.  v5:= v1 + 1;
  #L23a360.  v3[v5]:= v4 @kind object;
  #L23a364.  v1:= v1 + 2;
  #L23a368.  goto L23a286;
  #L23a36a.  v5:= new `okhttp3.Headers`;
  #L23a36e.  call `<init>`(v5, v3) @signature `Lokhttp3/Headers;.<init>:([Ljava/lang/String;)V` @kind direct;
  #L23a374.  return v5 @kind object;
}
procedure `okhttp3.Headers` `of`(`java.lang.String`[] v6 @kind object @name `namesAndValues`) @signature `Lokhttp3/Headers;.of:([Ljava/lang/String;)Lokhttp3/Headers;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L23a388.  v5:= 0I;
  #L23a38a.  v4:= -1I;
  #L23a38c.  if v6 != 0 then goto L23a3a0;
  #L23a390.  v3:= new `java.lang.NullPointerException`;
  #L23a394.  v4:= "namesAndValues == null" @kind object;
  #L23a398.  call `<init>`(v3, v4) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23a39e.  throw v3;
  #L23a3a0.  v3:= length @variable v6;
  #L23a3a2.  v3:= v3 %% 2;
  #L23a3a6.  if v3 == 0 then goto L23a3ba;
  #L23a3aa.  v3:= new `java.lang.IllegalArgumentException`;
  #L23a3ae.  v4:= "Expected alternating header names and values" @kind object;
  #L23a3b2.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23a3b8.  throw v3;
  #L23a3ba.  call temp:= `clone`(v6) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L23a3c0.  v6:= temp @kind object;
  #L23a3c2.  v6:= (`java.lang.String`[]) v6 @kind object;
  #L23a3c6.  v0:= 0I;
  #L23a3c8.  v3:= length @variable v6;
  #L23a3ca.  if v0 >= v3 then goto L23a3fc;
  #L23a3ce.  v3:= v6[v0] @kind object;
  #L23a3d2.  if v3 != 0 then goto L23a3e6;
  #L23a3d6.  v3:= new `java.lang.IllegalArgumentException`;
  #L23a3da.  v4:= "Headers cannot be null" @kind object;
  #L23a3de.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23a3e4.  throw v3;
  #L23a3e6.  v3:= v6[v0] @kind object;
  #L23a3ea.  call temp:= `trim`(v3) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L23a3f0.  v3:= temp @kind object;
  #L23a3f2.  v6[v0]:= v3 @kind object;
  #L23a3f6.  v0:= v0 + 1;
  #L23a3fa.  goto L23a3c8;
  #L23a3fc.  v0:= 0I;
  #L23a3fe.  v3:= length @variable v6;
  #L23a400.  if v0 >= v3 then goto L23a480;
  #L23a404.  v1:= v6[v0] @kind object;
  #L23a408.  v3:= v0 + 1;
  #L23a40c.  v2:= v6[v3] @kind object;
  #L23a410.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L23a416.  v3:= temp;
  #L23a418.  if v3 == 0 then goto L23a434;
  #L23a41c.  call temp:= `indexOf`(v1, v5) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L23a422.  v3:= temp;
  #L23a424.  if v3 != v4 then goto L23a434;
  #L23a428.  call temp:= `indexOf`(v2, v5) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L23a42e.  v3:= temp;
  #L23a430.  if v3 == v4 then goto L23a47a;
  #L23a434.  v3:= new `java.lang.IllegalArgumentException`;
  #L23a438.  v4:= new `java.lang.StringBuilder`;
  #L23a43c.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23a442.  v5:= "Unexpected header: " @kind object;
  #L23a446.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23a44c.  v4:= temp @kind object;
  #L23a44e.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23a454.  v4:= temp @kind object;
  #L23a456.  v5:= ": " @kind object;
  #L23a45a.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23a460.  v4:= temp @kind object;
  #L23a462.  call temp:= `append`(v4, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23a468.  v4:= temp @kind object;
  #L23a46a.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23a470.  v4:= temp @kind object;
  #L23a472.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23a478.  throw v3;
  #L23a47a.  v0:= v0 + 2;
  #L23a47e.  goto L23a3fe;
  #L23a480.  v3:= new `okhttp3.Headers`;
  #L23a484.  call `<init>`(v3, v6) @signature `Lokhttp3/Headers;.<init>:([Ljava/lang/String;)V` @kind direct;
  #L23a48a.  return v3 @kind object;
}
procedure `boolean` `equals`(`okhttp3.Headers` v2 @kind this, `java.lang.Object` v3 @kind object @name `other`) @signature `Lokhttp3/Headers;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23a49c.  v0:= instanceof @variable v3 @type ^`okhttp3.Headers` @kind boolean;
  #L23a4a0.  if v0 == 0 then goto L23a4c0;
  #L23a4a4.  v3:= (`okhttp3.Headers`) v3 @kind object;
  #L23a4a8.  v0:= v3.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L23a4ac.  v1:= v2.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L23a4b0.  call temp:= `equals`(v0, v1) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L23a4b6.  v0:= temp;
  #L23a4b8.  if v0 == 0 then goto L23a4c0;
  #L23a4bc.  v0:= 1I;
  #L23a4be.  return v0;
  #L23a4c0.  v0:= 0I;
  #L23a4c2.  goto L23a4be;
}
procedure `java.lang.String` `get`(`okhttp3.Headers` v1 @kind this, `java.lang.String` v2 @kind object @name `name`) @signature `Lokhttp3/Headers;.get:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23a4d4.  v0:= v1.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L23a4d8.  call temp:= `get`(v0, v2) @signature `Lokhttp3/Headers;.get:([Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L23a4de.  v0:= temp @kind object;
  #L23a4e0.  return v0 @kind object;
}
procedure `java.util.Date` `getDate`(`okhttp3.Headers` v2 @kind this, `java.lang.String` v3 @kind object @name `name`) @signature `Lokhttp3/Headers;.getDate:(Ljava/lang/String;)Ljava/util/Date;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23a4f4.  call temp:= `get`(v2, v3) @signature `Lokhttp3/Headers;.get:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L23a4fa.  v0:= temp @kind object;
  #L23a4fc.  if v0 == 0 then goto L23a50a;
  #L23a500.  call temp:= `parse`(v0) @signature `Lokhttp3/internal/http/HttpDate;.parse:(Ljava/lang/String;)Ljava/util/Date;` @kind static;
  #L23a506.  v1:= temp @kind object;
  #L23a508.  return v1 @kind object;
  #L23a50a.  v1:= 0I;
  #L23a50c.  goto L23a508;
}
procedure `int` `hashCode`(`okhttp3.Headers` v1 @kind this) @signature `Lokhttp3/Headers;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23a520.  v0:= v1.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L23a524.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L23a52a.  v0:= temp;
  #L23a52c.  return v0;
}
procedure `java.lang.String` `name`(`okhttp3.Headers` v2 @kind this, `int` v3 @name `index`) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23a540.  v0:= v2.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L23a544.  v1:= v3 * 2;
  #L23a548.  v0:= v0[v1] @kind object;
  #L23a54c.  return v0 @kind object;
}
procedure `java.util.Set` `names`(`okhttp3.Headers` v4 @kind this) @signature `Lokhttp3/Headers;.names:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L23a560.  v1:= new `java.util.TreeSet`;
  #L23a564.  v3:= `@@java.lang.String.CASE_INSENSITIVE_ORDER` @type ^`java.util.Comparator` @kind object;
  #L23a568.  call `<init>`(v1, v3) @signature `Ljava/util/TreeSet;.<init>:(Ljava/util/Comparator;)V` @kind direct;
  #L23a56e.  v0:= 0I;
  #L23a570.  call temp:= `size`(v4) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L23a576.  v2:= temp;
  #L23a578.  if v0 >= v2 then goto L23a590;
  #L23a57c.  call temp:= `name`(v4, v0) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L23a582.  v3:= temp @kind object;
  #L23a584.  call temp:= `add`(v1, v3) @signature `Ljava/util/TreeSet;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L23a58a.  v0:= v0 + 1;
  #L23a58e.  goto L23a578;
  #L23a590.  call temp:= `unmodifiableSet`(v1) @signature `Ljava/util/Collections;.unmodifiableSet:(Ljava/util/Set;)Ljava/util/Set;` @kind static;
  #L23a596.  v3:= temp @kind object;
  #L23a598.  return v3 @kind object;
}
procedure `okhttp3.Headers$Builder` `newBuilder`(`okhttp3.Headers` v3 @kind this) @signature `Lokhttp3/Headers;.newBuilder:()Lokhttp3/Headers$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L23a5ac.  v0:= new `okhttp3.Headers$Builder`;
  #L23a5b0.  call `<init>`(v0) @signature `Lokhttp3/Headers$Builder;.<init>:()V` @kind direct;
  #L23a5b6.  call temp:= `access$000`(v0) @signature `Lokhttp3/Headers$Builder;.access$000:(Lokhttp3/Headers$Builder;)Ljava/util/List;` @kind static;
  #L23a5bc.  v1:= temp @kind object;
  #L23a5be.  v2:= v3.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L23a5c2.  call temp:= `addAll`(v1, v2) @signature `Ljava/util/Collections;.addAll:(Ljava/util/Collection;[Ljava/lang/Object;)Z` @kind static;
  #L23a5c8.  return v0 @kind object;
}
procedure `int` `size`(`okhttp3.Headers` v1 @kind this) @signature `Lokhttp3/Headers;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23a5dc.  v0:= v1.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L23a5e0.  v0:= length @variable v0;
  #L23a5e2.  v0:= v0 / 2;
  #L23a5e6.  return v0;
}
procedure `java.util.Map` `toMultimap`(`okhttp3.Headers` v7 @kind this) @signature `Lokhttp3/Headers;.toMultimap:()Ljava/util/Map;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L23a5f8.  v2:= new `java.util.LinkedHashMap`;
  #L23a5fc.  call `<init>`(v2) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L23a602.  v0:= 0I;
  #L23a604.  call temp:= `size`(v7) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L23a60a.  v3:= temp;
  #L23a60c.  if v0 >= v3 then goto L23a65a;
  #L23a610.  call temp:= `name`(v7, v0) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L23a616.  v5:= temp @kind object;
  #L23a618.  v6:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L23a61c.  call temp:= `toLowerCase`(v5, v6) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L23a622.  v1:= temp @kind object;
  #L23a624.  call temp:= `get`(v2, v1) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L23a62a.  v4:= temp @kind object;
  #L23a62c.  v4:= (`java.util.List`) v4 @kind object;
  #L23a630.  if v4 != 0 then goto L23a646;
  #L23a634.  v4:= new `java.util.ArrayList`;
  #L23a638.  v5:= 2I;
  #L23a63a.  call `<init>`(v4, v5) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L23a640.  call temp:= `put`(v2, v1, v4) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L23a646.  call temp:= `value`(v7, v0) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @kind virtual;
  #L23a64c.  v5:= temp @kind object;
  #L23a64e.  call temp:= `add`(v4, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L23a654.  v0:= v0 + 1;
  #L23a658.  goto L23a60c;
  #L23a65a.  return v2 @kind object;
}
procedure `java.lang.String` `toString`(`okhttp3.Headers` v5 @kind this) @signature `Lokhttp3/Headers;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L23a66c.  v1:= new `java.lang.StringBuilder`;
  #L23a670.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23a676.  v0:= 0I;
  #L23a678.  call temp:= `size`(v5) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L23a67e.  v2:= temp;
  #L23a680.  if v0 >= v2 then goto L23a6c0;
  #L23a684.  call temp:= `name`(v5, v0) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L23a68a.  v3:= temp @kind object;
  #L23a68c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23a692.  v3:= temp @kind object;
  #L23a694.  v4:= ": " @kind object;
  #L23a698.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23a69e.  v3:= temp @kind object;
  #L23a6a0.  call temp:= `value`(v5, v0) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @kind virtual;
  #L23a6a6.  v4:= temp @kind object;
  #L23a6a8.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23a6ae.  v3:= temp @kind object;
  #L23a6b0.  v4:= "\n" @kind object;
  #L23a6b4.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23a6ba.  v0:= v0 + 1;
  #L23a6be.  goto L23a680;
  #L23a6c0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23a6c6.  v3:= temp @kind object;
  #L23a6c8.  return v3 @kind object;
}
procedure `java.lang.String` `value`(`okhttp3.Headers` v2 @kind this, `int` v3 @name `index`) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23a6dc.  v0:= v2.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L23a6e0.  v1:= v3 * 2;
  #L23a6e4.  v1:= v1 + 1;
  #L23a6e8.  v0:= v0[v1] @kind object;
  #L23a6ec.  return v0 @kind object;
}
procedure `java.util.List` `values`(`okhttp3.Headers` v4 @kind this, `java.lang.String` v5 @kind object @name `name`) @signature `Lokhttp3/Headers;.values:(Ljava/lang/String;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L23a700.  v1:= 0I;
  #L23a702.  v0:= 0I;
  #L23a704.  call temp:= `size`(v4) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L23a70a.  v2:= temp;
  #L23a70c.  if v0 >= v2 then goto L23a748;
  #L23a710.  call temp:= `name`(v4, v0) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L23a716.  v3:= temp @kind object;
  #L23a718.  call temp:= `equalsIgnoreCase`(v5, v3) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L23a71e.  v3:= temp;
  #L23a720.  if v3 == 0 then goto L23a742;
  #L23a724.  if v1 != 0 then goto L23a734;
  #L23a728.  v1:= new `java.util.ArrayList`;
  #L23a72c.  v3:= 2I;
  #L23a72e.  call `<init>`(v1, v3) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L23a734.  call temp:= `value`(v4, v0) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @kind virtual;
  #L23a73a.  v3:= temp @kind object;
  #L23a73c.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L23a742.  v0:= v0 + 1;
  #L23a746.  goto L23a70c;
  #L23a748.  if v1 == 0 then goto L23a756;
  #L23a74c.  call temp:= `unmodifiableList`(v1) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L23a752.  v3:= temp @kind object;
  #L23a754.  return v3 @kind object;
  #L23a756.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L23a75c.  v3:= temp @kind object;
  #L23a75e.  goto L23a754;
}
