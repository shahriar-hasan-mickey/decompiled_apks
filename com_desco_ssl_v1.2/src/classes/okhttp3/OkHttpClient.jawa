record `okhttp3.OkHttpClient` @kind class @AccessFlag PUBLIC extends `java.lang.Cloneable` @kind interface, `okhttp3.Call$Factory` @kind interface {
  `okhttp3.Authenticator` `okhttp3.OkHttpClient.authenticator` @AccessFlag FINAL;
  `okhttp3.Cache` `okhttp3.OkHttpClient.cache` @AccessFlag FINAL;
  `okhttp3.internal.tls.CertificateChainCleaner` `okhttp3.OkHttpClient.certificateChainCleaner` @AccessFlag FINAL;
  `okhttp3.CertificatePinner` `okhttp3.OkHttpClient.certificatePinner` @AccessFlag FINAL;
  `int` `okhttp3.OkHttpClient.connectTimeout` @AccessFlag FINAL;
  `okhttp3.ConnectionPool` `okhttp3.OkHttpClient.connectionPool` @AccessFlag FINAL;
  `java.util.List` `okhttp3.OkHttpClient.connectionSpecs` @AccessFlag FINAL;
  `okhttp3.CookieJar` `okhttp3.OkHttpClient.cookieJar` @AccessFlag FINAL;
  `okhttp3.Dispatcher` `okhttp3.OkHttpClient.dispatcher` @AccessFlag FINAL;
  `okhttp3.Dns` `okhttp3.OkHttpClient.dns` @AccessFlag FINAL;
  `boolean` `okhttp3.OkHttpClient.followRedirects` @AccessFlag FINAL;
  `boolean` `okhttp3.OkHttpClient.followSslRedirects` @AccessFlag FINAL;
  `javax.net.ssl.HostnameVerifier` `okhttp3.OkHttpClient.hostnameVerifier` @AccessFlag FINAL;
  `java.util.List` `okhttp3.OkHttpClient.interceptors` @AccessFlag FINAL;
  `okhttp3.internal.InternalCache` `okhttp3.OkHttpClient.internalCache` @AccessFlag FINAL;
  `java.util.List` `okhttp3.OkHttpClient.networkInterceptors` @AccessFlag FINAL;
  `java.util.List` `okhttp3.OkHttpClient.protocols` @AccessFlag FINAL;
  `java.net.Proxy` `okhttp3.OkHttpClient.proxy` @AccessFlag FINAL;
  `okhttp3.Authenticator` `okhttp3.OkHttpClient.proxyAuthenticator` @AccessFlag FINAL;
  `java.net.ProxySelector` `okhttp3.OkHttpClient.proxySelector` @AccessFlag FINAL;
  `int` `okhttp3.OkHttpClient.readTimeout` @AccessFlag FINAL;
  `boolean` `okhttp3.OkHttpClient.retryOnConnectionFailure` @AccessFlag FINAL;
  `javax.net.SocketFactory` `okhttp3.OkHttpClient.socketFactory` @AccessFlag FINAL;
  `javax.net.ssl.SSLSocketFactory` `okhttp3.OkHttpClient.sslSocketFactory` @AccessFlag FINAL;
  `int` `okhttp3.OkHttpClient.writeTimeout` @AccessFlag FINAL;
}
global `java.util.List` `@@okhttp3.OkHttpClient.DEFAULT_CONNECTION_SPECS` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.List` `@@okhttp3.OkHttpClient.DEFAULT_PROTOCOLS` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/OkHttpClient;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L308104.  v5:= 2I;
  #L308106.  v4:= 1I;
  #L308108.  v3:= 0I;
  #L30810a.  v1:= 3I;
  #L30810c.  v1:= new `okhttp3.Protocol`[v1];
  #L308110.  v2:= `@@okhttp3.Protocol.HTTP_2` @type ^`okhttp3.Protocol` @kind object;
  #L308114.  v1[v3]:= v2 @kind object;
  #L308118.  v2:= `@@okhttp3.Protocol.SPDY_3` @type ^`okhttp3.Protocol` @kind object;
  #L30811c.  v1[v4]:= v2 @kind object;
  #L308120.  v2:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L308124.  v1[v5]:= v2 @kind object;
  #L308128.  call temp:= `immutableList`(v1) @signature `Lokhttp3/internal/Util;.immutableList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L30812e.  v1:= temp @kind object;
  #L308130.  `@@okhttp3.OkHttpClient.DEFAULT_PROTOCOLS` @type ^`java.util.List` := v1 @kind object;
  #L308134.  v0:= new `java.util.ArrayList`;
  #L308138.  v1:= new `okhttp3.ConnectionSpec`[v5];
  #L30813c.  v2:= `@@okhttp3.ConnectionSpec.MODERN_TLS` @type ^`okhttp3.ConnectionSpec` @kind object;
  #L308140.  v1[v3]:= v2 @kind object;
  #L308144.  v2:= `@@okhttp3.ConnectionSpec.COMPATIBLE_TLS` @type ^`okhttp3.ConnectionSpec` @kind object;
  #L308148.  v1[v4]:= v2 @kind object;
  #L30814c.  call temp:= `asList`(v1) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L308152.  v1:= temp @kind object;
  #L308154.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L30815a.  call temp:= `get`() @signature `Lokhttp3/internal/Platform;.get:()Lokhttp3/internal/Platform;` @kind static;
  #L308160.  v1:= temp @kind object;
  #L308162.  call temp:= `isCleartextTrafficPermitted`(v1) @signature `Lokhttp3/internal/Platform;.isCleartextTrafficPermitted:()Z` @kind virtual;
  #L308168.  v1:= temp;
  #L30816a.  if v1 == 0 then goto L308178;
  #L30816e.  v1:= `@@okhttp3.ConnectionSpec.CLEARTEXT` @type ^`okhttp3.ConnectionSpec` @kind object;
  #L308172.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L308178.  call temp:= `immutableList`(v0) @signature `Lokhttp3/internal/Util;.immutableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L30817e.  v1:= temp @kind object;
  #L308180.  `@@okhttp3.OkHttpClient.DEFAULT_CONNECTION_SPECS` @type ^`java.util.List` := v1 @kind object;
  #L308184.  v1:= new `okhttp3.OkHttpClient$1`;
  #L308188.  call `<init>`(v1) @signature `Lokhttp3/OkHttpClient$1;.<init>:()V` @kind direct;
  #L30818e.  `@@okhttp3.internal.Internal.instance` @type ^`okhttp3.internal.Internal` := v1 @kind object;
  #L308192.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3081a4.  v0:= new `okhttp3.OkHttpClient$Builder`;
  #L3081a8.  call `<init>`(v0) @signature `Lokhttp3/OkHttpClient$Builder;.<init>:()V` @kind direct;
  #L3081ae.  call `<init>`(v1, v0) @signature `Lokhttp3/OkHttpClient;.<init>:(Lokhttp3/OkHttpClient$Builder;)V` @kind direct;
  #L3081b4.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.OkHttpClient` v5 @kind this, `okhttp3.OkHttpClient$Builder` v6 @kind object @name `builder`) @signature `Lokhttp3/OkHttpClient;.<init>:(Lokhttp3/OkHttpClient$Builder;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3081c8.  call `<init>`(v5) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3081ce.  v3:= v6.`okhttp3.OkHttpClient$Builder.dispatcher` @type ^`okhttp3.Dispatcher` @kind object;
  #L3081d2.  v5.`okhttp3.OkHttpClient.dispatcher` @type ^`okhttp3.Dispatcher` := v3 @kind object;
  #L3081d6.  v3:= v6.`okhttp3.OkHttpClient$Builder.proxy` @type ^`java.net.Proxy` @kind object;
  #L3081da.  v5.`okhttp3.OkHttpClient.proxy` @type ^`java.net.Proxy` := v3 @kind object;
  #L3081de.  v3:= v6.`okhttp3.OkHttpClient$Builder.protocols` @type ^`java.util.List` @kind object;
  #L3081e2.  v5.`okhttp3.OkHttpClient.protocols` @type ^`java.util.List` := v3 @kind object;
  #L3081e6.  v3:= v6.`okhttp3.OkHttpClient$Builder.connectionSpecs` @type ^`java.util.List` @kind object;
  #L3081ea.  v5.`okhttp3.OkHttpClient.connectionSpecs` @type ^`java.util.List` := v3 @kind object;
  #L3081ee.  v3:= v6.`okhttp3.OkHttpClient$Builder.interceptors` @type ^`java.util.List` @kind object;
  #L3081f2.  call temp:= `immutableList`(v3) @signature `Lokhttp3/internal/Util;.immutableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L3081f8.  v3:= temp @kind object;
  #L3081fa.  v5.`okhttp3.OkHttpClient.interceptors` @type ^`java.util.List` := v3 @kind object;
  #L3081fe.  v3:= v6.`okhttp3.OkHttpClient$Builder.networkInterceptors` @type ^`java.util.List` @kind object;
  #L308202.  call temp:= `immutableList`(v3) @signature `Lokhttp3/internal/Util;.immutableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L308208.  v3:= temp @kind object;
  #L30820a.  v5.`okhttp3.OkHttpClient.networkInterceptors` @type ^`java.util.List` := v3 @kind object;
  #L30820e.  v3:= v6.`okhttp3.OkHttpClient$Builder.proxySelector` @type ^`java.net.ProxySelector` @kind object;
  #L308212.  v5.`okhttp3.OkHttpClient.proxySelector` @type ^`java.net.ProxySelector` := v3 @kind object;
  #L308216.  v3:= v6.`okhttp3.OkHttpClient$Builder.cookieJar` @type ^`okhttp3.CookieJar` @kind object;
  #L30821a.  v5.`okhttp3.OkHttpClient.cookieJar` @type ^`okhttp3.CookieJar` := v3 @kind object;
  #L30821e.  v3:= v6.`okhttp3.OkHttpClient$Builder.cache` @type ^`okhttp3.Cache` @kind object;
  #L308222.  v5.`okhttp3.OkHttpClient.cache` @type ^`okhttp3.Cache` := v3 @kind object;
  #L308226.  v3:= v6.`okhttp3.OkHttpClient$Builder.internalCache` @type ^`okhttp3.internal.InternalCache` @kind object;
  #L30822a.  v5.`okhttp3.OkHttpClient.internalCache` @type ^`okhttp3.internal.InternalCache` := v3 @kind object;
  #L30822e.  v3:= v6.`okhttp3.OkHttpClient$Builder.socketFactory` @type ^`javax.net.SocketFactory` @kind object;
  #L308232.  v5.`okhttp3.OkHttpClient.socketFactory` @type ^`javax.net.SocketFactory` := v3 @kind object;
  #L308236.  v0:= 0I;
  #L308238.  v3:= v5.`okhttp3.OkHttpClient.connectionSpecs` @type ^`java.util.List` @kind object;
  #L30823c.  call temp:= `iterator`(v3) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L308242.  v3:= temp @kind object;
  #L308244.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L30824a.  v4:= temp;
  #L30824c.  if v4 == 0 then goto L308274;
  #L308250.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L308256.  v1:= temp @kind object;
  #L308258.  v1:= (`okhttp3.ConnectionSpec`) v1 @kind object;
  #L30825c.  if v0 != 0 then goto L30826c;
  #L308260.  call temp:= `isTls`(v1) @signature `Lokhttp3/ConnectionSpec;.isTls:()Z` @kind virtual;
  #L308266.  v4:= temp;
  #L308268.  if v4 == 0 then goto L308270;
  #L30826c.  v0:= 1I;
  #L30826e.  goto L308244;
  #L308270.  v0:= 0I;
  #L308272.  goto L30826e;
  #L308274.  v3:= v6.`okhttp3.OkHttpClient$Builder.sslSocketFactory` @type ^`javax.net.ssl.SSLSocketFactory` @kind object;
  #L308278.  if v3 != 0 then goto L308280;
  #L30827c.  if v0 != 0 then goto L3082fe;
  #L308280.  v3:= v6.`okhttp3.OkHttpClient$Builder.sslSocketFactory` @type ^`javax.net.ssl.SSLSocketFactory` @kind object;
  #L308284.  v5.`okhttp3.OkHttpClient.sslSocketFactory` @type ^`javax.net.ssl.SSLSocketFactory` := v3 @kind object;
  #L308288.  v3:= v6.`okhttp3.OkHttpClient$Builder.certificateChainCleaner` @type ^`okhttp3.internal.tls.CertificateChainCleaner` @kind object;
  #L30828c.  v5.`okhttp3.OkHttpClient.certificateChainCleaner` @type ^`okhttp3.internal.tls.CertificateChainCleaner` := v3 @kind object;
  #L308290.  v3:= v6.`okhttp3.OkHttpClient$Builder.hostnameVerifier` @type ^`javax.net.ssl.HostnameVerifier` @kind object;
  #L308294.  v5.`okhttp3.OkHttpClient.hostnameVerifier` @type ^`javax.net.ssl.HostnameVerifier` := v3 @kind object;
  #L308298.  v3:= v6.`okhttp3.OkHttpClient$Builder.certificatePinner` @type ^`okhttp3.CertificatePinner` @kind object;
  #L30829c.  v4:= v5.`okhttp3.OkHttpClient.certificateChainCleaner` @type ^`okhttp3.internal.tls.CertificateChainCleaner` @kind object;
  #L3082a0.  call temp:= `withCertificateChainCleaner`(v3, v4) @signature `Lokhttp3/CertificatePinner;.withCertificateChainCleaner:(Lokhttp3/internal/tls/CertificateChainCleaner;)Lokhttp3/CertificatePinner;` @kind virtual;
  #L3082a6.  v3:= temp @kind object;
  #L3082a8.  v5.`okhttp3.OkHttpClient.certificatePinner` @type ^`okhttp3.CertificatePinner` := v3 @kind object;
  #L3082ac.  v3:= v6.`okhttp3.OkHttpClient$Builder.proxyAuthenticator` @type ^`okhttp3.Authenticator` @kind object;
  #L3082b0.  v5.`okhttp3.OkHttpClient.proxyAuthenticator` @type ^`okhttp3.Authenticator` := v3 @kind object;
  #L3082b4.  v3:= v6.`okhttp3.OkHttpClient$Builder.authenticator` @type ^`okhttp3.Authenticator` @kind object;
  #L3082b8.  v5.`okhttp3.OkHttpClient.authenticator` @type ^`okhttp3.Authenticator` := v3 @kind object;
  #L3082bc.  v3:= v6.`okhttp3.OkHttpClient$Builder.connectionPool` @type ^`okhttp3.ConnectionPool` @kind object;
  #L3082c0.  v5.`okhttp3.OkHttpClient.connectionPool` @type ^`okhttp3.ConnectionPool` := v3 @kind object;
  #L3082c4.  v3:= v6.`okhttp3.OkHttpClient$Builder.dns` @type ^`okhttp3.Dns` @kind object;
  #L3082c8.  v5.`okhttp3.OkHttpClient.dns` @type ^`okhttp3.Dns` := v3 @kind object;
  #L3082cc.  v3:= v6.`okhttp3.OkHttpClient$Builder.followSslRedirects` @type ^`boolean` @kind boolean;
  #L3082d0.  v5.`okhttp3.OkHttpClient.followSslRedirects` @type ^`boolean` := v3 @kind boolean;
  #L3082d4.  v3:= v6.`okhttp3.OkHttpClient$Builder.followRedirects` @type ^`boolean` @kind boolean;
  #L3082d8.  v5.`okhttp3.OkHttpClient.followRedirects` @type ^`boolean` := v3 @kind boolean;
  #L3082dc.  v3:= v6.`okhttp3.OkHttpClient$Builder.retryOnConnectionFailure` @type ^`boolean` @kind boolean;
  #L3082e0.  v5.`okhttp3.OkHttpClient.retryOnConnectionFailure` @type ^`boolean` := v3 @kind boolean;
  #L3082e4.  v3:= v6.`okhttp3.OkHttpClient$Builder.connectTimeout` @type ^`int`;
  #L3082e8.  v5.`okhttp3.OkHttpClient.connectTimeout` @type ^`int` := v3;
  #L3082ec.  v3:= v6.`okhttp3.OkHttpClient$Builder.readTimeout` @type ^`int`;
  #L3082f0.  v5.`okhttp3.OkHttpClient.readTimeout` @type ^`int` := v3;
  #L3082f4.  v3:= v6.`okhttp3.OkHttpClient$Builder.writeTimeout` @type ^`int`;
  #L3082f8.  v5.`okhttp3.OkHttpClient.writeTimeout` @type ^`int` := v3;
  #L3082fc.  return @kind void;
  #L3082fe.  call temp:= `systemDefaultTrustManager`(v5) @signature `Lokhttp3/OkHttpClient;.systemDefaultTrustManager:()Ljavax/net/ssl/X509TrustManager;` @kind direct;
  #L308304.  v2:= temp @kind object;
  #L308306.  call temp:= `systemDefaultSslSocketFactory`(v5, v2) @signature `Lokhttp3/OkHttpClient;.systemDefaultSslSocketFactory:(Ljavax/net/ssl/X509TrustManager;)Ljavax/net/ssl/SSLSocketFactory;` @kind direct;
  #L30830c.  v3:= temp @kind object;
  #L30830e.  v5.`okhttp3.OkHttpClient.sslSocketFactory` @type ^`javax.net.ssl.SSLSocketFactory` := v3 @kind object;
  #L308312.  call temp:= `get`(v2) @signature `Lokhttp3/internal/tls/CertificateChainCleaner;.get:(Ljavax/net/ssl/X509TrustManager;)Lokhttp3/internal/tls/CertificateChainCleaner;` @kind static;
  #L308318.  v3:= temp @kind object;
  #L30831a.  v5.`okhttp3.OkHttpClient.certificateChainCleaner` @type ^`okhttp3.internal.tls.CertificateChainCleaner` := v3 @kind object;
  #L30831e.  goto L308290;
}
procedure `void` `<init>`(`okhttp3.OkHttpClient` v0 @kind this, `okhttp3.OkHttpClient$Builder` v1 @kind object @name `x0`, `okhttp3.OkHttpClient$1` v2 @kind object @name `x1`) @signature `Lokhttp3/OkHttpClient;.<init>:(Lokhttp3/OkHttpClient$Builder;Lokhttp3/OkHttpClient$1;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L308330.  call `<init>`(v0, v1) @signature `Lokhttp3/OkHttpClient;.<init>:(Lokhttp3/OkHttpClient$Builder;)V` @kind direct;
  #L308336.  return @kind void;
}
procedure `java.util.List` `access$000`() @signature `Lokhttp3/OkHttpClient;.access$000:()Ljava/util/List;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L308348.  v0:= `@@okhttp3.OkHttpClient.DEFAULT_PROTOCOLS` @type ^`java.util.List` @kind object;
  #L30834c.  return v0 @kind object;
}
procedure `java.util.List` `access$100`() @signature `Lokhttp3/OkHttpClient;.access$100:()Ljava/util/List;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L308360.  v0:= `@@okhttp3.OkHttpClient.DEFAULT_CONNECTION_SPECS` @type ^`java.util.List` @kind object;
  #L308364.  return v0 @kind object;
}
procedure `javax.net.ssl.SSLSocketFactory` `systemDefaultSslSocketFactory`(`okhttp3.OkHttpClient` v5 @kind this, `javax.net.ssl.X509TrustManager` v6 @kind object @name `trustManager`) @signature `Lokhttp3/OkHttpClient;.systemDefaultSslSocketFactory:(Ljavax/net/ssl/X509TrustManager;)Ljavax/net/ssl/SSLSocketFactory;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L308378.  v2:= "TLS" @kind object;
  #L30837c.  call temp:= `getInstance`(v2) @signature `Ljavax/net/ssl/SSLContext;.getInstance:(Ljava/lang/String;)Ljavax/net/ssl/SSLContext;` @kind static;
  #L308382.  v1:= temp @kind object;
  #L308384.  v2:= 0I;
  #L308386.  v3:= 1I;
  #L308388.  v3:= new `javax.net.ssl.TrustManager`[v3];
  #L30838c.  v4:= 0I;
  #L30838e.  v3[v4]:= v6 @kind object;
  #L308392.  v4:= 0I;
  #L308394.  call `init`(v1, v2, v3, v4) @signature `Ljavax/net/ssl/SSLContext;.init:([Ljavax/net/ssl/KeyManager;[Ljavax/net/ssl/TrustManager;Ljava/security/SecureRandom;)V` @kind virtual;
  #L30839a.  call temp:= `getSocketFactory`(v1) @signature `Ljavax/net/ssl/SSLContext;.getSocketFactory:()Ljavax/net/ssl/SSLSocketFactory;` @kind virtual;
  #L3083a0.  v2:= temp @kind object;
  #L3083a2.  return v2 @kind object;
  #L3083a4.  v0:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L3083a6.  v2:= new `java.lang.AssertionError`;
  #L3083aa.  call `<init>`(v2) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L3083b0.  throw v2;
  catch `java.security.GeneralSecurityException` @[L308378..L3083a0] goto L3083a4;
}
procedure `javax.net.ssl.X509TrustManager` `systemDefaultTrustManager`(`okhttp3.OkHttpClient` v6 @kind this) @signature `Lokhttp3/OkHttpClient;.systemDefaultTrustManager:()Ljavax/net/ssl/X509TrustManager;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3083d4.  call temp:= `getDefaultAlgorithm`() @signature `Ljavax/net/ssl/TrustManagerFactory;.getDefaultAlgorithm:()Ljava/lang/String;` @kind static;
  #L3083da.  v3:= temp @kind object;
  #L3083dc.  call temp:= `getInstance`(v3) @signature `Ljavax/net/ssl/TrustManagerFactory;.getInstance:(Ljava/lang/String;)Ljavax/net/ssl/TrustManagerFactory;` @kind static;
  #L3083e2.  v1:= temp @kind object;
  #L3083e4.  v3:= 0I;
  #L3083e6.  v3:= (`java.security.KeyStore`) v3 @kind object;
  #L3083ea.  call `init`(v1, v3) @signature `Ljavax/net/ssl/TrustManagerFactory;.init:(Ljava/security/KeyStore;)V` @kind virtual;
  #L3083f0.  call temp:= `getTrustManagers`(v1) @signature `Ljavax/net/ssl/TrustManagerFactory;.getTrustManagers:()[Ljavax/net/ssl/TrustManager;` @kind virtual;
  #L3083f6.  v2:= temp @kind object;
  #L3083f8.  v3:= length @variable v2;
  #L3083fa.  v4:= 1I;
  #L3083fc.  if v3 != v4 then goto L30840e;
  #L308400.  v3:= 0I;
  #L308402.  v3:= v2[v3] @kind object;
  #L308406.  v3:= instanceof @variable v3 @type ^`javax.net.ssl.X509TrustManager` @kind boolean;
  #L30840a.  if v3 != 0 then goto L308456;
  #L30840e.  v3:= new `java.lang.IllegalStateException`;
  #L308412.  v4:= new `java.lang.StringBuilder`;
  #L308416.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L30841c.  v5:= "Unexpected default trust managers:" @kind object;
  #L308420.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L308426.  v4:= temp @kind object;
  #L308428.  call temp:= `toString`(v2) @signature `Ljava/util/Arrays;.toString:([Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L30842e.  v5:= temp @kind object;
  #L308430.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L308436.  v4:= temp @kind object;
  #L308438.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L30843e.  v4:= temp @kind object;
  #L308440.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L308446.  throw v3;
  #L308448.  v0:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L30844a.  v3:= new `java.lang.AssertionError`;
  #L30844e.  call `<init>`(v3) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L308454.  throw v3;
  #L308456.  v3:= 0I;
  #L308458.  v3:= v2[v3] @kind object;
  #L30845c.  v3:= (`javax.net.ssl.X509TrustManager`) v3 @kind object;
  #L308460.  return v3 @kind object;
  catch `java.security.GeneralSecurityException` @[L3083d4..L308448] goto L308448;
  catch `java.security.GeneralSecurityException` @[L308458..L308460] goto L308448;
}
procedure `okhttp3.Authenticator` `authenticator`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.authenticator:()Lokhttp3/Authenticator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30848c.  v0:= v1.`okhttp3.OkHttpClient.authenticator` @type ^`okhttp3.Authenticator` @kind object;
  #L308490.  return v0 @kind object;
}
procedure `okhttp3.Cache` `cache`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.cache:()Lokhttp3/Cache;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3084a4.  v0:= v1.`okhttp3.OkHttpClient.cache` @type ^`okhttp3.Cache` @kind object;
  #L3084a8.  return v0 @kind object;
}
procedure `okhttp3.CertificatePinner` `certificatePinner`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.certificatePinner:()Lokhttp3/CertificatePinner;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3084bc.  v0:= v1.`okhttp3.OkHttpClient.certificatePinner` @type ^`okhttp3.CertificatePinner` @kind object;
  #L3084c0.  return v0 @kind object;
}
procedure `int` `connectTimeoutMillis`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.connectTimeoutMillis:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3084d4.  v0:= v1.`okhttp3.OkHttpClient.connectTimeout` @type ^`int`;
  #L3084d8.  return v0;
}
procedure `okhttp3.ConnectionPool` `connectionPool`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.connectionPool:()Lokhttp3/ConnectionPool;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3084ec.  v0:= v1.`okhttp3.OkHttpClient.connectionPool` @type ^`okhttp3.ConnectionPool` @kind object;
  #L3084f0.  return v0 @kind object;
}
procedure `java.util.List` `connectionSpecs`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.connectionSpecs:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L308504.  v0:= v1.`okhttp3.OkHttpClient.connectionSpecs` @type ^`java.util.List` @kind object;
  #L308508.  return v0 @kind object;
}
procedure `okhttp3.CookieJar` `cookieJar`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.cookieJar:()Lokhttp3/CookieJar;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30851c.  v0:= v1.`okhttp3.OkHttpClient.cookieJar` @type ^`okhttp3.CookieJar` @kind object;
  #L308520.  return v0 @kind object;
}
procedure `okhttp3.Dispatcher` `dispatcher`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.dispatcher:()Lokhttp3/Dispatcher;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L308534.  v0:= v1.`okhttp3.OkHttpClient.dispatcher` @type ^`okhttp3.Dispatcher` @kind object;
  #L308538.  return v0 @kind object;
}
procedure `okhttp3.Dns` `dns`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.dns:()Lokhttp3/Dns;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30854c.  v0:= v1.`okhttp3.OkHttpClient.dns` @type ^`okhttp3.Dns` @kind object;
  #L308550.  return v0 @kind object;
}
procedure `boolean` `followRedirects`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.followRedirects:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L308564.  v0:= v1.`okhttp3.OkHttpClient.followRedirects` @type ^`boolean` @kind boolean;
  #L308568.  return v0;
}
procedure `boolean` `followSslRedirects`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.followSslRedirects:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30857c.  v0:= v1.`okhttp3.OkHttpClient.followSslRedirects` @type ^`boolean` @kind boolean;
  #L308580.  return v0;
}
procedure `javax.net.ssl.HostnameVerifier` `hostnameVerifier`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.hostnameVerifier:()Ljavax/net/ssl/HostnameVerifier;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L308594.  v0:= v1.`okhttp3.OkHttpClient.hostnameVerifier` @type ^`javax.net.ssl.HostnameVerifier` @kind object;
  #L308598.  return v0 @kind object;
}
procedure `java.util.List` `interceptors`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.interceptors:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3085ac.  v0:= v1.`okhttp3.OkHttpClient.interceptors` @type ^`java.util.List` @kind object;
  #L3085b0.  return v0 @kind object;
}
procedure `okhttp3.internal.InternalCache` `internalCache`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.internalCache:()Lokhttp3/internal/InternalCache;` @AccessFlag  {
    temp;
    v0;

  #L3085c4.  v0:= v1.`okhttp3.OkHttpClient.cache` @type ^`okhttp3.Cache` @kind object;
  #L3085c8.  if v0 == 0 then goto L3085d6;
  #L3085cc.  v0:= v1.`okhttp3.OkHttpClient.cache` @type ^`okhttp3.Cache` @kind object;
  #L3085d0.  v0:= v0.`okhttp3.Cache.internalCache` @type ^`okhttp3.internal.InternalCache` @kind object;
  #L3085d4.  return v0 @kind object;
  #L3085d6.  v0:= v1.`okhttp3.OkHttpClient.internalCache` @type ^`okhttp3.internal.InternalCache` @kind object;
  #L3085da.  goto L3085d4;
}
procedure `java.util.List` `networkInterceptors`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.networkInterceptors:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3085ec.  v0:= v1.`okhttp3.OkHttpClient.networkInterceptors` @type ^`java.util.List` @kind object;
  #L3085f0.  return v0 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `newBuilder`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.newBuilder:()Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L308604.  v0:= new `okhttp3.OkHttpClient$Builder`;
  #L308608.  call `<init>`(v0, v1) @signature `Lokhttp3/OkHttpClient$Builder;.<init>:(Lokhttp3/OkHttpClient;)V` @kind direct;
  #L30860e.  return v0 @kind object;
}
procedure `okhttp3.Call` `newCall`(`okhttp3.OkHttpClient` v1 @kind this, `okhttp3.Request` v2 @kind object @name `request`) @signature `Lokhttp3/OkHttpClient;.newCall:(Lokhttp3/Request;)Lokhttp3/Call;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L308620.  v0:= new `okhttp3.RealCall`;
  #L308624.  call `<init>`(v0, v1, v2) @signature `Lokhttp3/RealCall;.<init>:(Lokhttp3/OkHttpClient;Lokhttp3/Request;)V` @kind direct;
  #L30862a.  return v0 @kind object;
}
procedure `java.util.List` `protocols`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.protocols:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30863c.  v0:= v1.`okhttp3.OkHttpClient.protocols` @type ^`java.util.List` @kind object;
  #L308640.  return v0 @kind object;
}
procedure `java.net.Proxy` `proxy`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.proxy:()Ljava/net/Proxy;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L308654.  v0:= v1.`okhttp3.OkHttpClient.proxy` @type ^`java.net.Proxy` @kind object;
  #L308658.  return v0 @kind object;
}
procedure `okhttp3.Authenticator` `proxyAuthenticator`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.proxyAuthenticator:()Lokhttp3/Authenticator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30866c.  v0:= v1.`okhttp3.OkHttpClient.proxyAuthenticator` @type ^`okhttp3.Authenticator` @kind object;
  #L308670.  return v0 @kind object;
}
procedure `java.net.ProxySelector` `proxySelector`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.proxySelector:()Ljava/net/ProxySelector;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L308684.  v0:= v1.`okhttp3.OkHttpClient.proxySelector` @type ^`java.net.ProxySelector` @kind object;
  #L308688.  return v0 @kind object;
}
procedure `int` `readTimeoutMillis`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.readTimeoutMillis:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L30869c.  v0:= v1.`okhttp3.OkHttpClient.readTimeout` @type ^`int`;
  #L3086a0.  return v0;
}
procedure `boolean` `retryOnConnectionFailure`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.retryOnConnectionFailure:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3086b4.  v0:= v1.`okhttp3.OkHttpClient.retryOnConnectionFailure` @type ^`boolean` @kind boolean;
  #L3086b8.  return v0;
}
procedure `javax.net.SocketFactory` `socketFactory`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.socketFactory:()Ljavax/net/SocketFactory;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3086cc.  v0:= v1.`okhttp3.OkHttpClient.socketFactory` @type ^`javax.net.SocketFactory` @kind object;
  #L3086d0.  return v0 @kind object;
}
procedure `javax.net.ssl.SSLSocketFactory` `sslSocketFactory`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.sslSocketFactory:()Ljavax/net/ssl/SSLSocketFactory;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3086e4.  v0:= v1.`okhttp3.OkHttpClient.sslSocketFactory` @type ^`javax.net.ssl.SSLSocketFactory` @kind object;
  #L3086e8.  return v0 @kind object;
}
procedure `int` `writeTimeoutMillis`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.writeTimeoutMillis:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3086fc.  v0:= v1.`okhttp3.OkHttpClient.writeTimeout` @type ^`int`;
  #L308700.  return v0;
}
