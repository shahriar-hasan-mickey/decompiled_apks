record `okhttp3.Headers$Builder` @kind class @AccessFlag PUBLIC_FINAL {
  `java.util.List` `okhttp3.Headers$Builder.namesAndValues` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.Headers$Builder` v2 @kind this) @signature `Lokhttp3/Headers$Builder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L239de0.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L239de6.  v0:= new `java.util.ArrayList`;
  #L239dea.  v1:= 20I;
  #L239dee.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L239df4.  v2.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` := v0 @kind object;
  #L239df8.  return @kind void;
}
procedure `java.util.List` `access$000`(`okhttp3.Headers$Builder` v1 @kind object @name `x0`) @signature `Lokhttp3/Headers$Builder;.access$000:(Lokhttp3/Headers$Builder;)Ljava/util/List;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L239e0c.  v0:= v1.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L239e10.  return v0 @kind object;
}
procedure `void` `checkNameAndValue`(`okhttp3.Headers$Builder` v11 @kind this, `java.lang.String` v12 @kind object @name `name`, `java.lang.String` v13 @kind object @name `value`) @signature `Lokhttp3/Headers$Builder;.checkNameAndValue:(Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L239e24.  v4:= 31I;
  #L239e28.  v10:= 3I;
  #L239e2a.  v9:= 2I;
  #L239e2c.  v8:= 1I;
  #L239e2e.  v7:= 0I;
  #L239e30.  if v12 != 0 then goto L239e44;
  #L239e34.  v3:= new `java.lang.NullPointerException`;
  #L239e38.  v4:= "name == null" @kind object;
  #L239e3c.  call `<init>`(v3, v4) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L239e42.  throw v3;
  #L239e44.  call temp:= `isEmpty`(v12) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L239e4a.  v3:= temp;
  #L239e4c.  if v3 == 0 then goto L239e60;
  #L239e50.  v3:= new `java.lang.IllegalArgumentException`;
  #L239e54.  v4:= "name is empty" @kind object;
  #L239e58.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L239e5e.  throw v3;
  #L239e60.  v1:= 0I;
  #L239e62.  call temp:= `length`(v12) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L239e68.  v2:= temp;
  #L239e6a.  if v1 >= v2 then goto L239ec0;
  #L239e6e.  call temp:= `charAt`(v12, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L239e74.  v0:= temp;
  #L239e76.  if v0 <= v4 then goto L239e82;
  #L239e7a.  v3:= 127I;
  #L239e7e.  if v0 < v3 then goto L239eba;
  #L239e82.  v3:= new `java.lang.IllegalArgumentException`;
  #L239e86.  v4:= "Unexpected char %#04x at %d in header name: %s" @kind object;
  #L239e8a.  v5:= new `java.lang.Object`[v10];
  #L239e8e.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L239e94.  v6:= temp @kind object;
  #L239e96.  v5[v7]:= v6 @kind object;
  #L239e9a.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L239ea0.  v6:= temp @kind object;
  #L239ea2.  v5[v8]:= v6 @kind object;
  #L239ea6.  v5[v9]:= v12 @kind object;
  #L239eaa.  call temp:= `format`(v4, v5) @signature `Lokhttp3/internal/Util;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L239eb0.  v4:= temp @kind object;
  #L239eb2.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L239eb8.  throw v3;
  #L239eba.  v1:= v1 + 1;
  #L239ebe.  goto L239e6a;
  #L239ec0.  if v13 != 0 then goto L239ed4;
  #L239ec4.  v3:= new `java.lang.NullPointerException`;
  #L239ec8.  v4:= "value == null" @kind object;
  #L239ecc.  call `<init>`(v3, v4) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L239ed2.  throw v3;
  #L239ed4.  v1:= 0I;
  #L239ed6.  call temp:= `length`(v13) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L239edc.  v2:= temp;
  #L239ede.  if v1 >= v2 then goto L239f3a;
  #L239ee2.  call temp:= `charAt`(v13, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L239ee8.  v0:= temp;
  #L239eea.  if v0 <= v4 then goto L239ef6;
  #L239eee.  v3:= 127I;
  #L239ef2.  if v0 < v3 then goto L239f34;
  #L239ef6.  v3:= new `java.lang.IllegalArgumentException`;
  #L239efa.  v4:= "Unexpected char %#04x at %d in %s value: %s" @kind object;
  #L239efe.  v5:= 4I;
  #L239f00.  v5:= new `java.lang.Object`[v5];
  #L239f04.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L239f0a.  v6:= temp @kind object;
  #L239f0c.  v5[v7]:= v6 @kind object;
  #L239f10.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L239f16.  v6:= temp @kind object;
  #L239f18.  v5[v8]:= v6 @kind object;
  #L239f1c.  v5[v9]:= v12 @kind object;
  #L239f20.  v5[v10]:= v13 @kind object;
  #L239f24.  call temp:= `format`(v4, v5) @signature `Lokhttp3/internal/Util;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L239f2a.  v4:= temp @kind object;
  #L239f2c.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L239f32.  throw v3;
  #L239f34.  v1:= v1 + 1;
  #L239f38.  goto L239ede;
  #L239f3a.  return @kind void;
}
procedure `okhttp3.Headers$Builder` `add`(`okhttp3.Headers$Builder` v4 @kind this, `java.lang.String` v5 @kind object @name `line`) @signature `Lokhttp3/Headers$Builder;.add:(Ljava/lang/String;)Lokhttp3/Headers$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L239f4c.  v1:= ":" @kind object;
  #L239f50.  call temp:= `indexOf`(v5, v1) @signature `Ljava/lang/String;.indexOf:(Ljava/lang/String;)I` @kind virtual;
  #L239f56.  v0:= temp;
  #L239f58.  v1:= -1I;
  #L239f5a.  if v0 != v1 then goto L239f90;
  #L239f5e.  v1:= new `java.lang.IllegalArgumentException`;
  #L239f62.  v2:= new `java.lang.StringBuilder`;
  #L239f66.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L239f6c.  v3:= "Unexpected header: " @kind object;
  #L239f70.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L239f76.  v2:= temp @kind object;
  #L239f78.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L239f7e.  v2:= temp @kind object;
  #L239f80.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L239f86.  v2:= temp @kind object;
  #L239f88.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L239f8e.  throw v1;
  #L239f90.  v1:= 0I;
  #L239f92.  call temp:= `substring`(v5, v1, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L239f98.  v1:= temp @kind object;
  #L239f9a.  call temp:= `trim`(v1) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L239fa0.  v1:= temp @kind object;
  #L239fa2.  v2:= v0 + 1;
  #L239fa6.  call temp:= `substring`(v5, v2) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L239fac.  v2:= temp @kind object;
  #L239fae.  call temp:= `add`(v4, v1, v2) @signature `Lokhttp3/Headers$Builder;.add:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L239fb4.  v1:= temp @kind object;
  #L239fb6.  return v1 @kind object;
}
procedure `okhttp3.Headers$Builder` `add`(`okhttp3.Headers$Builder` v1 @kind this, `java.lang.String` v2 @kind object @name `name`, `java.lang.String` v3 @kind object @name `value`) @signature `Lokhttp3/Headers$Builder;.add:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L239fc8.  call `checkNameAndValue`(v1, v2, v3) @signature `Lokhttp3/Headers$Builder;.checkNameAndValue:(Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L239fce.  call temp:= `addLenient`(v1, v2, v3) @signature `Lokhttp3/Headers$Builder;.addLenient:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L239fd4.  v0:= temp @kind object;
  #L239fd6.  return v0 @kind object;
}
procedure `okhttp3.Headers$Builder` `addLenient`(`okhttp3.Headers$Builder` v3 @kind this, `java.lang.String` v4 @kind object @name `line`) @signature `Lokhttp3/Headers$Builder;.addLenient:(Ljava/lang/String;)Lokhttp3/Headers$Builder;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L239fe8.  v2:= 1I;
  #L239fea.  v1:= ":" @kind object;
  #L239fee.  call temp:= `indexOf`(v4, v1, v2) @signature `Ljava/lang/String;.indexOf:(Ljava/lang/String;I)I` @kind virtual;
  #L239ff4.  v0:= temp;
  #L239ff6.  v1:= -1I;
  #L239ff8.  if v0 == v1 then goto L23a01c;
  #L239ffc.  v1:= 0I;
  #L239ffe.  call temp:= `substring`(v4, v1, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L23a004.  v1:= temp @kind object;
  #L23a006.  v2:= v0 + 1;
  #L23a00a.  call temp:= `substring`(v4, v2) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L23a010.  v2:= temp @kind object;
  #L23a012.  call temp:= `addLenient`(v3, v1, v2) @signature `Lokhttp3/Headers$Builder;.addLenient:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L23a018.  v1:= temp @kind object;
  #L23a01a.  return v1 @kind object;
  #L23a01c.  v1:= ":" @kind object;
  #L23a020.  call temp:= `startsWith`(v4, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L23a026.  v1:= temp;
  #L23a028.  if v1 == 0 then goto L23a042;
  #L23a02c.  v1:= "" @kind object;
  #L23a030.  call temp:= `substring`(v4, v2) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L23a036.  v2:= temp @kind object;
  #L23a038.  call temp:= `addLenient`(v3, v1, v2) @signature `Lokhttp3/Headers$Builder;.addLenient:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L23a03e.  v1:= temp @kind object;
  #L23a040.  goto L23a01a;
  #L23a042.  v1:= "" @kind object;
  #L23a046.  call temp:= `addLenient`(v3, v1, v4) @signature `Lokhttp3/Headers$Builder;.addLenient:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L23a04c.  v1:= temp @kind object;
  #L23a04e.  goto L23a01a;
}
procedure `okhttp3.Headers$Builder` `addLenient`(`okhttp3.Headers$Builder` v2 @kind this, `java.lang.String` v3 @kind object @name `name`, `java.lang.String` v4 @kind object @name `value`) @signature `Lokhttp3/Headers$Builder;.addLenient:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L23a060.  v0:= v2.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L23a064.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L23a06a.  v0:= v2.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L23a06e.  call temp:= `trim`(v4) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L23a074.  v1:= temp @kind object;
  #L23a076.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L23a07c.  return v2 @kind object;
}
procedure `okhttp3.Headers` `build`(`okhttp3.Headers$Builder` v2 @kind this) @signature `Lokhttp3/Headers$Builder;.build:()Lokhttp3/Headers;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23a090.  v0:= new `okhttp3.Headers`;
  #L23a094.  v1:= 0I;
  #L23a096.  call `<init>`(v0, v2, v1) @signature `Lokhttp3/Headers;.<init>:(Lokhttp3/Headers$Builder;Lokhttp3/Headers$1;)V` @kind direct;
  #L23a09c.  return v0 @kind object;
}
procedure `java.lang.String` `get`(`okhttp3.Headers$Builder` v3 @kind this, `java.lang.String` v4 @kind object @name `name`) @signature `Lokhttp3/Headers$Builder;.get:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L23a0b0.  v1:= v3.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L23a0b4.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L23a0ba.  v1:= temp;
  #L23a0bc.  v0:= v1 + -2;
  #L23a0c0.  if v0 < 0 then goto L23a0fc;
  #L23a0c4.  v1:= v3.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L23a0c8.  call temp:= `get`(v1, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L23a0ce.  v1:= temp @kind object;
  #L23a0d0.  v1:= (`java.lang.String`) v1 @kind object;
  #L23a0d4.  call temp:= `equalsIgnoreCase`(v4, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L23a0da.  v1:= temp;
  #L23a0dc.  if v1 == 0 then goto L23a0f6;
  #L23a0e0.  v1:= v3.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L23a0e4.  v2:= v0 + 1;
  #L23a0e8.  call temp:= `get`(v1, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L23a0ee.  v1:= temp @kind object;
  #L23a0f0.  v1:= (`java.lang.String`) v1 @kind object;
  #L23a0f4.  return v1 @kind object;
  #L23a0f6.  v0:= v0 + -2;
  #L23a0fa.  goto L23a0c0;
  #L23a0fc.  v1:= 0I;
  #L23a0fe.  goto L23a0f4;
}
procedure `okhttp3.Headers$Builder` `removeAll`(`okhttp3.Headers$Builder` v2 @kind this, `java.lang.String` v3 @kind object @name `name`) @signature `Lokhttp3/Headers$Builder;.removeAll:(Ljava/lang/String;)Lokhttp3/Headers$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23a110.  v0:= 0I;
  #L23a112.  v1:= v2.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L23a116.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L23a11c.  v1:= temp;
  #L23a11e.  if v0 >= v1 then goto L23a15c;
  #L23a122.  v1:= v2.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L23a126.  call temp:= `get`(v1, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L23a12c.  v1:= temp @kind object;
  #L23a12e.  v1:= (`java.lang.String`) v1 @kind object;
  #L23a132.  call temp:= `equalsIgnoreCase`(v3, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L23a138.  v1:= temp;
  #L23a13a.  if v1 == 0 then goto L23a156;
  #L23a13e.  v1:= v2.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L23a142.  call temp:= `remove`(v1, v0) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L23a148.  v1:= v2.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L23a14c.  call temp:= `remove`(v1, v0) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L23a152.  v0:= v0 + -2;
  #L23a156.  v0:= v0 + 2;
  #L23a15a.  goto L23a112;
  #L23a15c.  return v2 @kind object;
}
procedure `okhttp3.Headers$Builder` `set`(`okhttp3.Headers$Builder` v0 @kind this, `java.lang.String` v1 @kind object @name `name`, `java.lang.String` v2 @kind object @name `value`) @signature `Lokhttp3/Headers$Builder;.set:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @AccessFlag PUBLIC {
    temp;

  #L23a170.  call `checkNameAndValue`(v0, v1, v2) @signature `Lokhttp3/Headers$Builder;.checkNameAndValue:(Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L23a176.  call temp:= `removeAll`(v0, v1) @signature `Lokhttp3/Headers$Builder;.removeAll:(Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L23a17c.  call temp:= `addLenient`(v0, v1, v2) @signature `Lokhttp3/Headers$Builder;.addLenient:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L23a182.  return v0 @kind object;
}
