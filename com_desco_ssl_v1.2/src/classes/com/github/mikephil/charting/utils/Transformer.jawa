record `com.github.mikephil.charting.utils.Transformer` @kind class @AccessFlag PUBLIC {
  `android.graphics.Matrix` `com.github.mikephil.charting.utils.Transformer.mMBuffer1` @AccessFlag PRIVATE;
  `android.graphics.Matrix` `com.github.mikephil.charting.utils.Transformer.mMBuffer2` @AccessFlag PRIVATE;
  `android.graphics.Matrix` `com.github.mikephil.charting.utils.Transformer.mMatrixOffset` @AccessFlag PROTECTED;
  `android.graphics.Matrix` `com.github.mikephil.charting.utils.Transformer.mMatrixValueToPx` @AccessFlag PROTECTED;
  `android.graphics.Matrix` `com.github.mikephil.charting.utils.Transformer.mPixelsToValueMatrixBuffer` @AccessFlag PROTECTED;
  `com.github.mikephil.charting.utils.ViewPortHandler` `com.github.mikephil.charting.utils.Transformer.mViewPortHandler` @AccessFlag PROTECTED;
  `float`[] `com.github.mikephil.charting.utils.Transformer.ptsBuffer` @AccessFlag ;
  `float`[] `com.github.mikephil.charting.utils.Transformer.valuePointsForGenerateTransformedValuesBubble` @AccessFlag PROTECTED;
  `float`[] `com.github.mikephil.charting.utils.Transformer.valuePointsForGenerateTransformedValuesCandle` @AccessFlag PROTECTED;
  `float`[] `com.github.mikephil.charting.utils.Transformer.valuePointsForGenerateTransformedValuesLine` @AccessFlag PROTECTED;
  `float`[] `com.github.mikephil.charting.utils.Transformer.valuePointsForGenerateTransformedValuesScatter` @AccessFlag PROTECTED;
}
procedure `void` `<init>`(`com.github.mikephil.charting.utils.Transformer` v2 @kind this, `com.github.mikephil.charting.utils.ViewPortHandler` v3 @kind object @name `viewPortHandler`) @signature `Lcom/github/mikephil/charting/utils/Transformer;.<init>:(Lcom/github/mikephil/charting/utils/ViewPortHandler;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1da43c.  v1:= 1I;
  #L1da43e.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1da444.  v0:= new `android.graphics.Matrix`;
  #L1da448.  call `<init>`(v0) @signature `Landroid/graphics/Matrix;.<init>:()V` @kind direct;
  #L1da44e.  v2.`com.github.mikephil.charting.utils.Transformer.mMatrixValueToPx` @type ^`android.graphics.Matrix` := v0 @kind object;
  #L1da452.  v0:= new `android.graphics.Matrix`;
  #L1da456.  call `<init>`(v0) @signature `Landroid/graphics/Matrix;.<init>:()V` @kind direct;
  #L1da45c.  v2.`com.github.mikephil.charting.utils.Transformer.mMatrixOffset` @type ^`android.graphics.Matrix` := v0 @kind object;
  #L1da460.  v0:= new `float`[v1];
  #L1da464.  v2.`com.github.mikephil.charting.utils.Transformer.valuePointsForGenerateTransformedValuesScatter` @type ^`float`[] := v0 @kind object;
  #L1da468.  v0:= new `float`[v1];
  #L1da46c.  v2.`com.github.mikephil.charting.utils.Transformer.valuePointsForGenerateTransformedValuesBubble` @type ^`float`[] := v0 @kind object;
  #L1da470.  v0:= new `float`[v1];
  #L1da474.  v2.`com.github.mikephil.charting.utils.Transformer.valuePointsForGenerateTransformedValuesLine` @type ^`float`[] := v0 @kind object;
  #L1da478.  v0:= new `float`[v1];
  #L1da47c.  v2.`com.github.mikephil.charting.utils.Transformer.valuePointsForGenerateTransformedValuesCandle` @type ^`float`[] := v0 @kind object;
  #L1da480.  v0:= new `android.graphics.Matrix`;
  #L1da484.  call `<init>`(v0) @signature `Landroid/graphics/Matrix;.<init>:()V` @kind direct;
  #L1da48a.  v2.`com.github.mikephil.charting.utils.Transformer.mPixelsToValueMatrixBuffer` @type ^`android.graphics.Matrix` := v0 @kind object;
  #L1da48e.  v0:= 2I;
  #L1da490.  v0:= new `float`[v0];
  #L1da494.  v2.`com.github.mikephil.charting.utils.Transformer.ptsBuffer` @type ^`float`[] := v0 @kind object;
  #L1da498.  v0:= new `android.graphics.Matrix`;
  #L1da49c.  call `<init>`(v0) @signature `Landroid/graphics/Matrix;.<init>:()V` @kind direct;
  #L1da4a2.  v2.`com.github.mikephil.charting.utils.Transformer.mMBuffer1` @type ^`android.graphics.Matrix` := v0 @kind object;
  #L1da4a6.  v0:= new `android.graphics.Matrix`;
  #L1da4aa.  call `<init>`(v0) @signature `Landroid/graphics/Matrix;.<init>:()V` @kind direct;
  #L1da4b0.  v2.`com.github.mikephil.charting.utils.Transformer.mMBuffer2` @type ^`android.graphics.Matrix` := v0 @kind object;
  #L1da4b4.  v2.`com.github.mikephil.charting.utils.Transformer.mViewPortHandler` @type ^`com.github.mikephil.charting.utils.ViewPortHandler` := v3 @kind object;
  #L1da4b8.  return @kind void;
}
procedure `float`[] `generateTransformedValuesBubble`(`com.github.mikephil.charting.utils.Transformer` v7 @kind this, `com.github.mikephil.charting.interfaces.datasets.IBubbleDataSet` v8 @kind object @name `data`, `float` v9 @name `phaseY`, `int` v10 @name `from`, `int` v11 @name `to`) @signature `Lcom/github/mikephil/charting/utils/Transformer;.generateTransformedValuesBubble:(Lcom/github/mikephil/charting/interfaces/datasets/IBubbleDataSet;FII)[F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1da4cc.  v6:= 0I;
  #L1da4ce.  v4:= v11 - v10 @kind int;
  #L1da4d2.  v4:= v4 + 1;
  #L1da4d6.  v0:= v4 * 2;
  #L1da4da.  v4:= v7.`com.github.mikephil.charting.utils.Transformer.valuePointsForGenerateTransformedValuesBubble` @type ^`float`[] @kind object;
  #L1da4de.  v4:= length @variable v4;
  #L1da4e0.  if v4 == v0 then goto L1da4ec;
  #L1da4e4.  v4:= new `float`[v0];
  #L1da4e8.  v7.`com.github.mikephil.charting.utils.Transformer.valuePointsForGenerateTransformedValuesBubble` @type ^`float`[] := v4 @kind object;
  #L1da4ec.  v3:= v7.`com.github.mikephil.charting.utils.Transformer.valuePointsForGenerateTransformedValuesBubble` @type ^`float`[] @kind object;
  #L1da4f0.  v2:= 0I;
  #L1da4f2.  if v2 >= v0 then goto L1da53a;
  #L1da4f6.  v4:= v2 / 2;
  #L1da4fa.  v4:= v4 + v10 @kind int;
  #L1da4fc.  call temp:= `getEntryForIndex`(v8, v4) @signature `Lcom/github/mikephil/charting/interfaces/datasets/IBubbleDataSet;.getEntryForIndex:(I)Lcom/github/mikephil/charting/data/Entry;` @kind interface;
  #L1da502.  v1:= temp @kind object;
  #L1da504.  if v1 == 0 then goto L1da52c;
  #L1da508.  call temp:= `getX`(v1) @signature `Lcom/github/mikephil/charting/data/Entry;.getX:()F` @kind virtual;
  #L1da50e.  v4:= temp;
  #L1da510.  v3[v2]:= v4;
  #L1da514.  v4:= v2 + 1;
  #L1da518.  call temp:= `getY`(v1) @signature `Lcom/github/mikephil/charting/data/Entry;.getY:()F` @kind virtual;
  #L1da51e.  v5:= temp;
  #L1da520.  v5:= v5 * v9 @kind float;
  #L1da522.  v3[v4]:= v5;
  #L1da526.  v2:= v2 + 2;
  #L1da52a.  goto L1da4f2;
  #L1da52c.  v3[v2]:= v6;
  #L1da530.  v4:= v2 + 1;
  #L1da534.  v3[v4]:= v6;
  #L1da538.  goto L1da526;
  #L1da53a.  call temp:= `getValueToPixelMatrix`(v7) @signature `Lcom/github/mikephil/charting/utils/Transformer;.getValueToPixelMatrix:()Landroid/graphics/Matrix;` @kind virtual;
  #L1da540.  v4:= temp @kind object;
  #L1da542.  call `mapPoints`(v4, v3) @signature `Landroid/graphics/Matrix;.mapPoints:([F)V` @kind virtual;
  #L1da548.  return v3 @kind object;
}
procedure `float`[] `generateTransformedValuesCandle`(`com.github.mikephil.charting.utils.Transformer` v7 @kind this, `com.github.mikephil.charting.interfaces.datasets.ICandleDataSet` v8 @kind object @name `data`, `float` v9 @name `phaseX`, `float` v10 @name `phaseY`, `int` v11 @name `from`, `int` v12 @name `to`) @signature `Lcom/github/mikephil/charting/utils/Transformer;.generateTransformedValuesCandle:(Lcom/github/mikephil/charting/interfaces/datasets/ICandleDataSet;FFII)[F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1da55c.  v6:= 0I;
  #L1da55e.  v4:= v12 - v11 @kind int;
  #L1da562.  v4:= (`float`) v4 @kind i2f;
  #L1da564.  v4:= v4 * v9 @kind float;
  #L1da566.  v5:= 1.0F;
  #L1da56a.  v4:= v4 + v5 @kind float;
  #L1da56c.  v4:= (`int`) v4 @kind f2i;
  #L1da56e.  v0:= v4 * 2;
  #L1da572.  v4:= v7.`com.github.mikephil.charting.utils.Transformer.valuePointsForGenerateTransformedValuesCandle` @type ^`float`[] @kind object;
  #L1da576.  v4:= length @variable v4;
  #L1da578.  if v4 == v0 then goto L1da584;
  #L1da57c.  v4:= new `float`[v0];
  #L1da580.  v7.`com.github.mikephil.charting.utils.Transformer.valuePointsForGenerateTransformedValuesCandle` @type ^`float`[] := v4 @kind object;
  #L1da584.  v3:= v7.`com.github.mikephil.charting.utils.Transformer.valuePointsForGenerateTransformedValuesCandle` @type ^`float`[] @kind object;
  #L1da588.  v2:= 0I;
  #L1da58a.  if v2 >= v0 then goto L1da5d6;
  #L1da58e.  v4:= v2 / 2;
  #L1da592.  v4:= v4 + v11 @kind int;
  #L1da594.  call temp:= `getEntryForIndex`(v8, v4) @signature `Lcom/github/mikephil/charting/interfaces/datasets/ICandleDataSet;.getEntryForIndex:(I)Lcom/github/mikephil/charting/data/Entry;` @kind interface;
  #L1da59a.  v1:= temp @kind object;
  #L1da59c.  v1:= (`com.github.mikephil.charting.data.CandleEntry`) v1 @kind object;
  #L1da5a0.  if v1 == 0 then goto L1da5c8;
  #L1da5a4.  call temp:= `getX`(v1) @signature `Lcom/github/mikephil/charting/data/CandleEntry;.getX:()F` @kind virtual;
  #L1da5aa.  v4:= temp;
  #L1da5ac.  v3[v2]:= v4;
  #L1da5b0.  v4:= v2 + 1;
  #L1da5b4.  call temp:= `getHigh`(v1) @signature `Lcom/github/mikephil/charting/data/CandleEntry;.getHigh:()F` @kind virtual;
  #L1da5ba.  v5:= temp;
  #L1da5bc.  v5:= v5 * v10 @kind float;
  #L1da5be.  v3[v4]:= v5;
  #L1da5c2.  v2:= v2 + 2;
  #L1da5c6.  goto L1da58a;
  #L1da5c8.  v3[v2]:= v6;
  #L1da5cc.  v4:= v2 + 1;
  #L1da5d0.  v3[v4]:= v6;
  #L1da5d4.  goto L1da5c2;
  #L1da5d6.  call temp:= `getValueToPixelMatrix`(v7) @signature `Lcom/github/mikephil/charting/utils/Transformer;.getValueToPixelMatrix:()Landroid/graphics/Matrix;` @kind virtual;
  #L1da5dc.  v4:= temp @kind object;
  #L1da5de.  call `mapPoints`(v4, v3) @signature `Landroid/graphics/Matrix;.mapPoints:([F)V` @kind virtual;
  #L1da5e4.  return v3 @kind object;
}
procedure `float`[] `generateTransformedValuesLine`(`com.github.mikephil.charting.utils.Transformer` v7 @kind this, `com.github.mikephil.charting.interfaces.datasets.ILineDataSet` v8 @kind object @name `data`, `float` v9 @name `phaseX`, `float` v10 @name `phaseY`, `int` v11 @name `from`, `int` v12 @name `to`) @signature `Lcom/github/mikephil/charting/utils/Transformer;.generateTransformedValuesLine:(Lcom/github/mikephil/charting/interfaces/datasets/ILineDataSet;FFII)[F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1da5f8.  v6:= 0I;
  #L1da5fa.  v4:= v12 - v11 @kind int;
  #L1da5fe.  v4:= (`float`) v4 @kind i2f;
  #L1da600.  v4:= v4 * v9 @kind float;
  #L1da602.  v5:= 1.0F;
  #L1da606.  v4:= v4 + v5 @kind float;
  #L1da608.  v4:= (`int`) v4 @kind f2i;
  #L1da60a.  v0:= v4 * 2;
  #L1da60e.  v4:= v7.`com.github.mikephil.charting.utils.Transformer.valuePointsForGenerateTransformedValuesLine` @type ^`float`[] @kind object;
  #L1da612.  v4:= length @variable v4;
  #L1da614.  if v4 == v0 then goto L1da620;
  #L1da618.  v4:= new `float`[v0];
  #L1da61c.  v7.`com.github.mikephil.charting.utils.Transformer.valuePointsForGenerateTransformedValuesLine` @type ^`float`[] := v4 @kind object;
  #L1da620.  v3:= v7.`com.github.mikephil.charting.utils.Transformer.valuePointsForGenerateTransformedValuesLine` @type ^`float`[] @kind object;
  #L1da624.  v2:= 0I;
  #L1da626.  if v2 >= v0 then goto L1da66e;
  #L1da62a.  v4:= v2 / 2;
  #L1da62e.  v4:= v4 + v11 @kind int;
  #L1da630.  call temp:= `getEntryForIndex`(v8, v4) @signature `Lcom/github/mikephil/charting/interfaces/datasets/ILineDataSet;.getEntryForIndex:(I)Lcom/github/mikephil/charting/data/Entry;` @kind interface;
  #L1da636.  v1:= temp @kind object;
  #L1da638.  if v1 == 0 then goto L1da660;
  #L1da63c.  call temp:= `getX`(v1) @signature `Lcom/github/mikephil/charting/data/Entry;.getX:()F` @kind virtual;
  #L1da642.  v4:= temp;
  #L1da644.  v3[v2]:= v4;
  #L1da648.  v4:= v2 + 1;
  #L1da64c.  call temp:= `getY`(v1) @signature `Lcom/github/mikephil/charting/data/Entry;.getY:()F` @kind virtual;
  #L1da652.  v5:= temp;
  #L1da654.  v5:= v5 * v10 @kind float;
  #L1da656.  v3[v4]:= v5;
  #L1da65a.  v2:= v2 + 2;
  #L1da65e.  goto L1da626;
  #L1da660.  v3[v2]:= v6;
  #L1da664.  v4:= v2 + 1;
  #L1da668.  v3[v4]:= v6;
  #L1da66c.  goto L1da65a;
  #L1da66e.  call temp:= `getValueToPixelMatrix`(v7) @signature `Lcom/github/mikephil/charting/utils/Transformer;.getValueToPixelMatrix:()Landroid/graphics/Matrix;` @kind virtual;
  #L1da674.  v4:= temp @kind object;
  #L1da676.  call `mapPoints`(v4, v3) @signature `Landroid/graphics/Matrix;.mapPoints:([F)V` @kind virtual;
  #L1da67c.  return v3 @kind object;
}
procedure `float`[] `generateTransformedValuesScatter`(`com.github.mikephil.charting.utils.Transformer` v7 @kind this, `com.github.mikephil.charting.interfaces.datasets.IScatterDataSet` v8 @kind object @name `data`, `float` v9 @name `phaseX`, `float` v10 @name `phaseY`, `int` v11 @name `from`, `int` v12 @name `to`) @signature `Lcom/github/mikephil/charting/utils/Transformer;.generateTransformedValuesScatter:(Lcom/github/mikephil/charting/interfaces/datasets/IScatterDataSet;FFII)[F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1da690.  v6:= 0I;
  #L1da692.  v4:= v12 - v11 @kind int;
  #L1da696.  v4:= (`float`) v4 @kind i2f;
  #L1da698.  v4:= v4 * v9 @kind float;
  #L1da69a.  v5:= 1.0F;
  #L1da69e.  v4:= v4 + v5 @kind float;
  #L1da6a0.  v4:= (`int`) v4 @kind f2i;
  #L1da6a2.  v0:= v4 * 2;
  #L1da6a6.  v4:= v7.`com.github.mikephil.charting.utils.Transformer.valuePointsForGenerateTransformedValuesScatter` @type ^`float`[] @kind object;
  #L1da6aa.  v4:= length @variable v4;
  #L1da6ac.  if v4 == v0 then goto L1da6b8;
  #L1da6b0.  v4:= new `float`[v0];
  #L1da6b4.  v7.`com.github.mikephil.charting.utils.Transformer.valuePointsForGenerateTransformedValuesScatter` @type ^`float`[] := v4 @kind object;
  #L1da6b8.  v3:= v7.`com.github.mikephil.charting.utils.Transformer.valuePointsForGenerateTransformedValuesScatter` @type ^`float`[] @kind object;
  #L1da6bc.  v2:= 0I;
  #L1da6be.  if v2 >= v0 then goto L1da706;
  #L1da6c2.  v4:= v2 / 2;
  #L1da6c6.  v4:= v4 + v11 @kind int;
  #L1da6c8.  call temp:= `getEntryForIndex`(v8, v4) @signature `Lcom/github/mikephil/charting/interfaces/datasets/IScatterDataSet;.getEntryForIndex:(I)Lcom/github/mikephil/charting/data/Entry;` @kind interface;
  #L1da6ce.  v1:= temp @kind object;
  #L1da6d0.  if v1 == 0 then goto L1da6f8;
  #L1da6d4.  call temp:= `getX`(v1) @signature `Lcom/github/mikephil/charting/data/Entry;.getX:()F` @kind virtual;
  #L1da6da.  v4:= temp;
  #L1da6dc.  v3[v2]:= v4;
  #L1da6e0.  v4:= v2 + 1;
  #L1da6e4.  call temp:= `getY`(v1) @signature `Lcom/github/mikephil/charting/data/Entry;.getY:()F` @kind virtual;
  #L1da6ea.  v5:= temp;
  #L1da6ec.  v5:= v5 * v10 @kind float;
  #L1da6ee.  v3[v4]:= v5;
  #L1da6f2.  v2:= v2 + 2;
  #L1da6f6.  goto L1da6be;
  #L1da6f8.  v3[v2]:= v6;
  #L1da6fc.  v4:= v2 + 1;
  #L1da700.  v3[v4]:= v6;
  #L1da704.  goto L1da6f2;
  #L1da706.  call temp:= `getValueToPixelMatrix`(v7) @signature `Lcom/github/mikephil/charting/utils/Transformer;.getValueToPixelMatrix:()Landroid/graphics/Matrix;` @kind virtual;
  #L1da70c.  v4:= temp @kind object;
  #L1da70e.  call `mapPoints`(v4, v3) @signature `Landroid/graphics/Matrix;.mapPoints:([F)V` @kind virtual;
  #L1da714.  return v3 @kind object;
}
procedure `android.graphics.Matrix` `getOffsetMatrix`(`com.github.mikephil.charting.utils.Transformer` v1 @kind this) @signature `Lcom/github/mikephil/charting/utils/Transformer;.getOffsetMatrix:()Landroid/graphics/Matrix;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1da728.  v0:= v1.`com.github.mikephil.charting.utils.Transformer.mMatrixOffset` @type ^`android.graphics.Matrix` @kind object;
  #L1da72c.  return v0 @kind object;
}
procedure `android.graphics.Matrix` `getPixelToValueMatrix`(`com.github.mikephil.charting.utils.Transformer` v2 @kind this) @signature `Lcom/github/mikephil/charting/utils/Transformer;.getPixelToValueMatrix:()Landroid/graphics/Matrix;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1da740.  call temp:= `getValueToPixelMatrix`(v2) @signature `Lcom/github/mikephil/charting/utils/Transformer;.getValueToPixelMatrix:()Landroid/graphics/Matrix;` @kind virtual;
  #L1da746.  v0:= temp @kind object;
  #L1da748.  v1:= v2.`com.github.mikephil.charting.utils.Transformer.mMBuffer2` @type ^`android.graphics.Matrix` @kind object;
  #L1da74c.  call temp:= `invert`(v0, v1) @signature `Landroid/graphics/Matrix;.invert:(Landroid/graphics/Matrix;)Z` @kind virtual;
  #L1da752.  v0:= v2.`com.github.mikephil.charting.utils.Transformer.mMBuffer2` @type ^`android.graphics.Matrix` @kind object;
  #L1da756.  return v0 @kind object;
}
procedure `com.github.mikephil.charting.utils.MPPointD` `getPixelsForValues`(`com.github.mikephil.charting.utils.Transformer` v7 @kind this, `float` v8 @name `x`, `float` v9 @name `y`) @signature `Lcom/github/mikephil/charting/utils/Transformer;.getPixelsForValues:(FF)Lcom/github/mikephil/charting/utils/MPPointD;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1da768.  v6:= 1I;
  #L1da76a.  v5:= 0I;
  #L1da76c.  v4:= v7.`com.github.mikephil.charting.utils.Transformer.ptsBuffer` @type ^`float`[] @kind object;
  #L1da770.  v4[v5]:= v8;
  #L1da774.  v4:= v7.`com.github.mikephil.charting.utils.Transformer.ptsBuffer` @type ^`float`[] @kind object;
  #L1da778.  v4[v6]:= v9;
  #L1da77c.  v4:= v7.`com.github.mikephil.charting.utils.Transformer.ptsBuffer` @type ^`float`[] @kind object;
  #L1da780.  call `pointValuesToPixel`(v7, v4) @signature `Lcom/github/mikephil/charting/utils/Transformer;.pointValuesToPixel:([F)V` @kind virtual;
  #L1da786.  v4:= v7.`com.github.mikephil.charting.utils.Transformer.ptsBuffer` @type ^`float`[] @kind object;
  #L1da78a.  v4:= v4[v5];
  #L1da78e.  v0:= (`double`) v4 @kind f2d;
  #L1da790.  v4:= v7.`com.github.mikephil.charting.utils.Transformer.ptsBuffer` @type ^`float`[] @kind object;
  #L1da794.  v4:= v4[v6];
  #L1da798.  v2:= (`double`) v4 @kind f2d;
  #L1da79a.  call temp:= `getInstance`(v0, v2) @signature `Lcom/github/mikephil/charting/utils/MPPointD;.getInstance:(DD)Lcom/github/mikephil/charting/utils/MPPointD;` @kind static;
  #L1da7a0.  v4:= temp @kind object;
  #L1da7a2.  return v4 @kind object;
}
procedure `android.graphics.Matrix` `getValueMatrix`(`com.github.mikephil.charting.utils.Transformer` v1 @kind this) @signature `Lcom/github/mikephil/charting/utils/Transformer;.getValueMatrix:()Landroid/graphics/Matrix;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1da7b4.  v0:= v1.`com.github.mikephil.charting.utils.Transformer.mMatrixValueToPx` @type ^`android.graphics.Matrix` @kind object;
  #L1da7b8.  return v0 @kind object;
}
procedure `android.graphics.Matrix` `getValueToPixelMatrix`(`com.github.mikephil.charting.utils.Transformer` v2 @kind this) @signature `Lcom/github/mikephil/charting/utils/Transformer;.getValueToPixelMatrix:()Landroid/graphics/Matrix;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1da7cc.  v0:= v2.`com.github.mikephil.charting.utils.Transformer.mMBuffer1` @type ^`android.graphics.Matrix` @kind object;
  #L1da7d0.  v1:= v2.`com.github.mikephil.charting.utils.Transformer.mMatrixValueToPx` @type ^`android.graphics.Matrix` @kind object;
  #L1da7d4.  call `set`(v0, v1) @signature `Landroid/graphics/Matrix;.set:(Landroid/graphics/Matrix;)V` @kind virtual;
  #L1da7da.  v0:= v2.`com.github.mikephil.charting.utils.Transformer.mMBuffer1` @type ^`android.graphics.Matrix` @kind object;
  #L1da7de.  v1:= v2.`com.github.mikephil.charting.utils.Transformer.mViewPortHandler` @type ^`com.github.mikephil.charting.utils.ViewPortHandler` @kind object;
  #L1da7e2.  v1:= v1.`com.github.mikephil.charting.utils.ViewPortHandler.mMatrixTouch` @type ^`android.graphics.Matrix` @kind object;
  #L1da7e6.  call temp:= `postConcat`(v0, v1) @signature `Landroid/graphics/Matrix;.postConcat:(Landroid/graphics/Matrix;)Z` @kind virtual;
  #L1da7ec.  v0:= v2.`com.github.mikephil.charting.utils.Transformer.mMBuffer1` @type ^`android.graphics.Matrix` @kind object;
  #L1da7f0.  v1:= v2.`com.github.mikephil.charting.utils.Transformer.mMatrixOffset` @type ^`android.graphics.Matrix` @kind object;
  #L1da7f4.  call temp:= `postConcat`(v0, v1) @signature `Landroid/graphics/Matrix;.postConcat:(Landroid/graphics/Matrix;)Z` @kind virtual;
  #L1da7fa.  v0:= v2.`com.github.mikephil.charting.utils.Transformer.mMBuffer1` @type ^`android.graphics.Matrix` @kind object;
  #L1da7fe.  return v0 @kind object;
}
procedure `com.github.mikephil.charting.utils.MPPointD` `getValuesByTouchPoint`(`com.github.mikephil.charting.utils.Transformer` v4 @kind this, `float` v5 @name `x`, `float` v6 @name `y`) @signature `Lcom/github/mikephil/charting/utils/Transformer;.getValuesByTouchPoint:(FF)Lcom/github/mikephil/charting/utils/MPPointD;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1da810.  v2:= 0L;
  #L1da814.  call temp:= `getInstance`(v2, v2) @signature `Lcom/github/mikephil/charting/utils/MPPointD;.getInstance:(DD)Lcom/github/mikephil/charting/utils/MPPointD;` @kind static;
  #L1da81a.  v0:= temp @kind object;
  #L1da81c.  call `getValuesByTouchPoint`(v4, v5, v6, v0) @signature `Lcom/github/mikephil/charting/utils/Transformer;.getValuesByTouchPoint:(FFLcom/github/mikephil/charting/utils/MPPointD;)V` @kind virtual;
  #L1da822.  return v0 @kind object;
}
procedure `void` `getValuesByTouchPoint`(`com.github.mikephil.charting.utils.Transformer` v3 @kind this, `float` v4 @name `x`, `float` v5 @name `y`, `com.github.mikephil.charting.utils.MPPointD` v6 @kind object @name `outputPoint`) @signature `Lcom/github/mikephil/charting/utils/Transformer;.getValuesByTouchPoint:(FFLcom/github/mikephil/charting/utils/MPPointD;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1da834.  v2:= 1I;
  #L1da836.  v1:= 0I;
  #L1da838.  v0:= v3.`com.github.mikephil.charting.utils.Transformer.ptsBuffer` @type ^`float`[] @kind object;
  #L1da83c.  v0[v1]:= v4;
  #L1da840.  v0:= v3.`com.github.mikephil.charting.utils.Transformer.ptsBuffer` @type ^`float`[] @kind object;
  #L1da844.  v0[v2]:= v5;
  #L1da848.  v0:= v3.`com.github.mikephil.charting.utils.Transformer.ptsBuffer` @type ^`float`[] @kind object;
  #L1da84c.  call `pixelsToValue`(v3, v0) @signature `Lcom/github/mikephil/charting/utils/Transformer;.pixelsToValue:([F)V` @kind virtual;
  #L1da852.  v0:= v3.`com.github.mikephil.charting.utils.Transformer.ptsBuffer` @type ^`float`[] @kind object;
  #L1da856.  v0:= v0[v1];
  #L1da85a.  v0:= (`double`) v0 @kind f2d;
  #L1da85c.  v6.`com.github.mikephil.charting.utils.MPPointD.x` @type ^`double` := v0 @kind wide;
  #L1da860.  v0:= v3.`com.github.mikephil.charting.utils.Transformer.ptsBuffer` @type ^`float`[] @kind object;
  #L1da864.  v0:= v0[v2];
  #L1da868.  v0:= (`double`) v0 @kind f2d;
  #L1da86a.  v6.`com.github.mikephil.charting.utils.MPPointD.y` @type ^`double` := v0 @kind wide;
  #L1da86e.  return @kind void;
}
procedure `void` `pathValueToPixel`(`com.github.mikephil.charting.utils.Transformer` v1 @kind this, `android.graphics.Path` v2 @kind object @name `path`) @signature `Lcom/github/mikephil/charting/utils/Transformer;.pathValueToPixel:(Landroid/graphics/Path;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1da880.  v0:= v1.`com.github.mikephil.charting.utils.Transformer.mMatrixValueToPx` @type ^`android.graphics.Matrix` @kind object;
  #L1da884.  call `transform`(v2, v0) @signature `Landroid/graphics/Path;.transform:(Landroid/graphics/Matrix;)V` @kind virtual;
  #L1da88a.  v0:= v1.`com.github.mikephil.charting.utils.Transformer.mViewPortHandler` @type ^`com.github.mikephil.charting.utils.ViewPortHandler` @kind object;
  #L1da88e.  call temp:= `getMatrixTouch`(v0) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.getMatrixTouch:()Landroid/graphics/Matrix;` @kind virtual;
  #L1da894.  v0:= temp @kind object;
  #L1da896.  call `transform`(v2, v0) @signature `Landroid/graphics/Path;.transform:(Landroid/graphics/Matrix;)V` @kind virtual;
  #L1da89c.  v0:= v1.`com.github.mikephil.charting.utils.Transformer.mMatrixOffset` @type ^`android.graphics.Matrix` @kind object;
  #L1da8a0.  call `transform`(v2, v0) @signature `Landroid/graphics/Path;.transform:(Landroid/graphics/Matrix;)V` @kind virtual;
  #L1da8a6.  return @kind void;
}
procedure `void` `pathValuesToPixel`(`com.github.mikephil.charting.utils.Transformer` v2 @kind this, `java.util.List` v3 @kind object) @signature `Lcom/github/mikephil/charting/utils/Transformer;.pathValuesToPixel:(Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1da8b8.  v0:= 0I;
  #L1da8ba.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1da8c0.  v1:= temp;
  #L1da8c2.  if v0 >= v1 then goto L1da8de;
  #L1da8c6.  call temp:= `get`(v3, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1da8cc.  v1:= temp @kind object;
  #L1da8ce.  v1:= (`android.graphics.Path`) v1 @kind object;
  #L1da8d2.  call `pathValueToPixel`(v2, v1) @signature `Lcom/github/mikephil/charting/utils/Transformer;.pathValueToPixel:(Landroid/graphics/Path;)V` @kind virtual;
  #L1da8d8.  v0:= v0 + 1;
  #L1da8dc.  goto L1da8ba;
  #L1da8de.  return @kind void;
}
procedure `void` `pixelsToValue`(`com.github.mikephil.charting.utils.Transformer` v2 @kind this, `float`[] v3 @kind object @name `pixels`) @signature `Lcom/github/mikephil/charting/utils/Transformer;.pixelsToValue:([F)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1da8f0.  v0:= v2.`com.github.mikephil.charting.utils.Transformer.mPixelsToValueMatrixBuffer` @type ^`android.graphics.Matrix` @kind object;
  #L1da8f4.  call `reset`(v0) @signature `Landroid/graphics/Matrix;.reset:()V` @kind virtual;
  #L1da8fa.  v1:= v2.`com.github.mikephil.charting.utils.Transformer.mMatrixOffset` @type ^`android.graphics.Matrix` @kind object;
  #L1da8fe.  call temp:= `invert`(v1, v0) @signature `Landroid/graphics/Matrix;.invert:(Landroid/graphics/Matrix;)Z` @kind virtual;
  #L1da904.  call `mapPoints`(v0, v3) @signature `Landroid/graphics/Matrix;.mapPoints:([F)V` @kind virtual;
  #L1da90a.  v1:= v2.`com.github.mikephil.charting.utils.Transformer.mViewPortHandler` @type ^`com.github.mikephil.charting.utils.ViewPortHandler` @kind object;
  #L1da90e.  call temp:= `getMatrixTouch`(v1) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.getMatrixTouch:()Landroid/graphics/Matrix;` @kind virtual;
  #L1da914.  v1:= temp @kind object;
  #L1da916.  call temp:= `invert`(v1, v0) @signature `Landroid/graphics/Matrix;.invert:(Landroid/graphics/Matrix;)Z` @kind virtual;
  #L1da91c.  call `mapPoints`(v0, v3) @signature `Landroid/graphics/Matrix;.mapPoints:([F)V` @kind virtual;
  #L1da922.  v1:= v2.`com.github.mikephil.charting.utils.Transformer.mMatrixValueToPx` @type ^`android.graphics.Matrix` @kind object;
  #L1da926.  call temp:= `invert`(v1, v0) @signature `Landroid/graphics/Matrix;.invert:(Landroid/graphics/Matrix;)Z` @kind virtual;
  #L1da92c.  call `mapPoints`(v0, v3) @signature `Landroid/graphics/Matrix;.mapPoints:([F)V` @kind virtual;
  #L1da932.  return @kind void;
}
procedure `void` `pointValuesToPixel`(`com.github.mikephil.charting.utils.Transformer` v1 @kind this, `float`[] v2 @kind object @name `pts`) @signature `Lcom/github/mikephil/charting/utils/Transformer;.pointValuesToPixel:([F)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1da944.  v0:= v1.`com.github.mikephil.charting.utils.Transformer.mMatrixValueToPx` @type ^`android.graphics.Matrix` @kind object;
  #L1da948.  call `mapPoints`(v0, v2) @signature `Landroid/graphics/Matrix;.mapPoints:([F)V` @kind virtual;
  #L1da94e.  v0:= v1.`com.github.mikephil.charting.utils.Transformer.mViewPortHandler` @type ^`com.github.mikephil.charting.utils.ViewPortHandler` @kind object;
  #L1da952.  call temp:= `getMatrixTouch`(v0) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.getMatrixTouch:()Landroid/graphics/Matrix;` @kind virtual;
  #L1da958.  v0:= temp @kind object;
  #L1da95a.  call `mapPoints`(v0, v2) @signature `Landroid/graphics/Matrix;.mapPoints:([F)V` @kind virtual;
  #L1da960.  v0:= v1.`com.github.mikephil.charting.utils.Transformer.mMatrixOffset` @type ^`android.graphics.Matrix` @kind object;
  #L1da964.  call `mapPoints`(v0, v2) @signature `Landroid/graphics/Matrix;.mapPoints:([F)V` @kind virtual;
  #L1da96a.  return @kind void;
}
procedure `void` `prepareMatrixOffset`(`com.github.mikephil.charting.utils.Transformer` v4 @kind this, `boolean` v5 @name `inverted`) @signature `Lcom/github/mikephil/charting/utils/Transformer;.prepareMatrixOffset:(Z)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1da97c.  v0:= v4.`com.github.mikephil.charting.utils.Transformer.mMatrixOffset` @type ^`android.graphics.Matrix` @kind object;
  #L1da980.  call `reset`(v0) @signature `Landroid/graphics/Matrix;.reset:()V` @kind virtual;
  #L1da986.  if v5 != 0 then goto L1da9bc;
  #L1da98a.  v0:= v4.`com.github.mikephil.charting.utils.Transformer.mMatrixOffset` @type ^`android.graphics.Matrix` @kind object;
  #L1da98e.  v1:= v4.`com.github.mikephil.charting.utils.Transformer.mViewPortHandler` @type ^`com.github.mikephil.charting.utils.ViewPortHandler` @kind object;
  #L1da992.  call temp:= `offsetLeft`(v1) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.offsetLeft:()F` @kind virtual;
  #L1da998.  v1:= temp;
  #L1da99a.  v2:= v4.`com.github.mikephil.charting.utils.Transformer.mViewPortHandler` @type ^`com.github.mikephil.charting.utils.ViewPortHandler` @kind object;
  #L1da99e.  call temp:= `getChartHeight`(v2) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.getChartHeight:()F` @kind virtual;
  #L1da9a4.  v2:= temp;
  #L1da9a6.  v3:= v4.`com.github.mikephil.charting.utils.Transformer.mViewPortHandler` @type ^`com.github.mikephil.charting.utils.ViewPortHandler` @kind object;
  #L1da9aa.  call temp:= `offsetBottom`(v3) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.offsetBottom:()F` @kind virtual;
  #L1da9b0.  v3:= temp;
  #L1da9b2.  v2:= v2 - v3 @kind float;
  #L1da9b4.  call temp:= `postTranslate`(v0, v1, v2) @signature `Landroid/graphics/Matrix;.postTranslate:(FF)Z` @kind virtual;
  #L1da9ba.  return @kind void;
  #L1da9bc.  v0:= v4.`com.github.mikephil.charting.utils.Transformer.mMatrixOffset` @type ^`android.graphics.Matrix` @kind object;
  #L1da9c0.  v1:= v4.`com.github.mikephil.charting.utils.Transformer.mViewPortHandler` @type ^`com.github.mikephil.charting.utils.ViewPortHandler` @kind object;
  #L1da9c4.  call temp:= `offsetLeft`(v1) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.offsetLeft:()F` @kind virtual;
  #L1da9ca.  v1:= temp;
  #L1da9cc.  v2:= v4.`com.github.mikephil.charting.utils.Transformer.mViewPortHandler` @type ^`com.github.mikephil.charting.utils.ViewPortHandler` @kind object;
  #L1da9d0.  call temp:= `offsetTop`(v2) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.offsetTop:()F` @kind virtual;
  #L1da9d6.  v2:= temp;
  #L1da9d8.  v2:= -v2 @kind float;
  #L1da9da.  call `setTranslate`(v0, v1, v2) @signature `Landroid/graphics/Matrix;.setTranslate:(FF)V` @kind virtual;
  #L1da9e0.  v0:= v4.`com.github.mikephil.charting.utils.Transformer.mMatrixOffset` @type ^`android.graphics.Matrix` @kind object;
  #L1da9e4.  v1:= 1.0F;
  #L1da9e8.  v2:= -1.0F;
  #L1da9ec.  call temp:= `postScale`(v0, v1, v2) @signature `Landroid/graphics/Matrix;.postScale:(FF)Z` @kind virtual;
  #L1da9f2.  goto L1da9ba;
}
procedure `void` `prepareMatrixValuePx`(`com.github.mikephil.charting.utils.Transformer` v5 @kind this, `float` v6 @name `xChartMin`, `float` v7 @name `deltaX`, `float` v8 @name `deltaY`, `float` v9 @name `yChartMin`) @signature `Lcom/github/mikephil/charting/utils/Transformer;.prepareMatrixValuePx:(FFFF)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1daa04.  v2:= v5.`com.github.mikephil.charting.utils.Transformer.mViewPortHandler` @type ^`com.github.mikephil.charting.utils.ViewPortHandler` @kind object;
  #L1daa08.  call temp:= `contentWidth`(v2) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.contentWidth:()F` @kind virtual;
  #L1daa0e.  v2:= temp;
  #L1daa10.  v0:= v2 / v7 @kind float;
  #L1daa14.  v2:= v5.`com.github.mikephil.charting.utils.Transformer.mViewPortHandler` @type ^`com.github.mikephil.charting.utils.ViewPortHandler` @kind object;
  #L1daa18.  call temp:= `contentHeight`(v2) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.contentHeight:()F` @kind virtual;
  #L1daa1e.  v2:= temp;
  #L1daa20.  v1:= v2 / v8 @kind float;
  #L1daa24.  call temp:= `isInfinite`(v0) @signature `Ljava/lang/Float;.isInfinite:(F)Z` @kind static;
  #L1daa2a.  v2:= temp;
  #L1daa2c.  if v2 == 0 then goto L1daa32;
  #L1daa30.  v0:= 0I;
  #L1daa32.  call temp:= `isInfinite`(v1) @signature `Ljava/lang/Float;.isInfinite:(F)Z` @kind static;
  #L1daa38.  v2:= temp;
  #L1daa3a.  if v2 == 0 then goto L1daa40;
  #L1daa3e.  v1:= 0I;
  #L1daa40.  v2:= v5.`com.github.mikephil.charting.utils.Transformer.mMatrixValueToPx` @type ^`android.graphics.Matrix` @kind object;
  #L1daa44.  call `reset`(v2) @signature `Landroid/graphics/Matrix;.reset:()V` @kind virtual;
  #L1daa4a.  v2:= v5.`com.github.mikephil.charting.utils.Transformer.mMatrixValueToPx` @type ^`android.graphics.Matrix` @kind object;
  #L1daa4e.  v3:= -v6 @kind float;
  #L1daa50.  v4:= -v9 @kind float;
  #L1daa52.  call temp:= `postTranslate`(v2, v3, v4) @signature `Landroid/graphics/Matrix;.postTranslate:(FF)Z` @kind virtual;
  #L1daa58.  v2:= v5.`com.github.mikephil.charting.utils.Transformer.mMatrixValueToPx` @type ^`android.graphics.Matrix` @kind object;
  #L1daa5c.  v3:= -v1 @kind float;
  #L1daa5e.  call temp:= `postScale`(v2, v0, v3) @signature `Landroid/graphics/Matrix;.postScale:(FF)Z` @kind virtual;
  #L1daa64.  return @kind void;
}
procedure `void` `rectToPixelPhase`(`com.github.mikephil.charting.utils.Transformer` v1 @kind this, `android.graphics.RectF` v2 @kind object @name `r`, `float` v3 @name `phaseY`) @signature `Lcom/github/mikephil/charting/utils/Transformer;.rectToPixelPhase:(Landroid/graphics/RectF;F)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1daa78.  v0:= v2.`android.graphics.RectF.top` @type ^`float`;
  #L1daa7c.  v0:= v0 * v3 @kind float;
  #L1daa7e.  v2.`android.graphics.RectF.top` @type ^`float` := v0;
  #L1daa82.  v0:= v2.`android.graphics.RectF.bottom` @type ^`float`;
  #L1daa86.  v0:= v0 * v3 @kind float;
  #L1daa88.  v2.`android.graphics.RectF.bottom` @type ^`float` := v0;
  #L1daa8c.  v0:= v1.`com.github.mikephil.charting.utils.Transformer.mMatrixValueToPx` @type ^`android.graphics.Matrix` @kind object;
  #L1daa90.  call temp:= `mapRect`(v0, v2) @signature `Landroid/graphics/Matrix;.mapRect:(Landroid/graphics/RectF;)Z` @kind virtual;
  #L1daa96.  v0:= v1.`com.github.mikephil.charting.utils.Transformer.mViewPortHandler` @type ^`com.github.mikephil.charting.utils.ViewPortHandler` @kind object;
  #L1daa9a.  call temp:= `getMatrixTouch`(v0) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.getMatrixTouch:()Landroid/graphics/Matrix;` @kind virtual;
  #L1daaa0.  v0:= temp @kind object;
  #L1daaa2.  call temp:= `mapRect`(v0, v2) @signature `Landroid/graphics/Matrix;.mapRect:(Landroid/graphics/RectF;)Z` @kind virtual;
  #L1daaa8.  v0:= v1.`com.github.mikephil.charting.utils.Transformer.mMatrixOffset` @type ^`android.graphics.Matrix` @kind object;
  #L1daaac.  call temp:= `mapRect`(v0, v2) @signature `Landroid/graphics/Matrix;.mapRect:(Landroid/graphics/RectF;)Z` @kind virtual;
  #L1daab2.  return @kind void;
}
procedure `void` `rectToPixelPhaseHorizontal`(`com.github.mikephil.charting.utils.Transformer` v1 @kind this, `android.graphics.RectF` v2 @kind object @name `r`, `float` v3 @name `phaseY`) @signature `Lcom/github/mikephil/charting/utils/Transformer;.rectToPixelPhaseHorizontal:(Landroid/graphics/RectF;F)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1daac4.  v0:= v2.`android.graphics.RectF.left` @type ^`float`;
  #L1daac8.  v0:= v0 * v3 @kind float;
  #L1daaca.  v2.`android.graphics.RectF.left` @type ^`float` := v0;
  #L1daace.  v0:= v2.`android.graphics.RectF.right` @type ^`float`;
  #L1daad2.  v0:= v0 * v3 @kind float;
  #L1daad4.  v2.`android.graphics.RectF.right` @type ^`float` := v0;
  #L1daad8.  v0:= v1.`com.github.mikephil.charting.utils.Transformer.mMatrixValueToPx` @type ^`android.graphics.Matrix` @kind object;
  #L1daadc.  call temp:= `mapRect`(v0, v2) @signature `Landroid/graphics/Matrix;.mapRect:(Landroid/graphics/RectF;)Z` @kind virtual;
  #L1daae2.  v0:= v1.`com.github.mikephil.charting.utils.Transformer.mViewPortHandler` @type ^`com.github.mikephil.charting.utils.ViewPortHandler` @kind object;
  #L1daae6.  call temp:= `getMatrixTouch`(v0) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.getMatrixTouch:()Landroid/graphics/Matrix;` @kind virtual;
  #L1daaec.  v0:= temp @kind object;
  #L1daaee.  call temp:= `mapRect`(v0, v2) @signature `Landroid/graphics/Matrix;.mapRect:(Landroid/graphics/RectF;)Z` @kind virtual;
  #L1daaf4.  v0:= v1.`com.github.mikephil.charting.utils.Transformer.mMatrixOffset` @type ^`android.graphics.Matrix` @kind object;
  #L1daaf8.  call temp:= `mapRect`(v0, v2) @signature `Landroid/graphics/Matrix;.mapRect:(Landroid/graphics/RectF;)Z` @kind virtual;
  #L1daafe.  return @kind void;
}
procedure `void` `rectValueToPixel`(`com.github.mikephil.charting.utils.Transformer` v1 @kind this, `android.graphics.RectF` v2 @kind object @name `r`) @signature `Lcom/github/mikephil/charting/utils/Transformer;.rectValueToPixel:(Landroid/graphics/RectF;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dab10.  v0:= v1.`com.github.mikephil.charting.utils.Transformer.mMatrixValueToPx` @type ^`android.graphics.Matrix` @kind object;
  #L1dab14.  call temp:= `mapRect`(v0, v2) @signature `Landroid/graphics/Matrix;.mapRect:(Landroid/graphics/RectF;)Z` @kind virtual;
  #L1dab1a.  v0:= v1.`com.github.mikephil.charting.utils.Transformer.mViewPortHandler` @type ^`com.github.mikephil.charting.utils.ViewPortHandler` @kind object;
  #L1dab1e.  call temp:= `getMatrixTouch`(v0) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.getMatrixTouch:()Landroid/graphics/Matrix;` @kind virtual;
  #L1dab24.  v0:= temp @kind object;
  #L1dab26.  call temp:= `mapRect`(v0, v2) @signature `Landroid/graphics/Matrix;.mapRect:(Landroid/graphics/RectF;)Z` @kind virtual;
  #L1dab2c.  v0:= v1.`com.github.mikephil.charting.utils.Transformer.mMatrixOffset` @type ^`android.graphics.Matrix` @kind object;
  #L1dab30.  call temp:= `mapRect`(v0, v2) @signature `Landroid/graphics/Matrix;.mapRect:(Landroid/graphics/RectF;)Z` @kind virtual;
  #L1dab36.  return @kind void;
}
procedure `void` `rectValueToPixelHorizontal`(`com.github.mikephil.charting.utils.Transformer` v1 @kind this, `android.graphics.RectF` v2 @kind object @name `r`) @signature `Lcom/github/mikephil/charting/utils/Transformer;.rectValueToPixelHorizontal:(Landroid/graphics/RectF;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dab48.  v0:= v1.`com.github.mikephil.charting.utils.Transformer.mMatrixValueToPx` @type ^`android.graphics.Matrix` @kind object;
  #L1dab4c.  call temp:= `mapRect`(v0, v2) @signature `Landroid/graphics/Matrix;.mapRect:(Landroid/graphics/RectF;)Z` @kind virtual;
  #L1dab52.  v0:= v1.`com.github.mikephil.charting.utils.Transformer.mViewPortHandler` @type ^`com.github.mikephil.charting.utils.ViewPortHandler` @kind object;
  #L1dab56.  call temp:= `getMatrixTouch`(v0) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.getMatrixTouch:()Landroid/graphics/Matrix;` @kind virtual;
  #L1dab5c.  v0:= temp @kind object;
  #L1dab5e.  call temp:= `mapRect`(v0, v2) @signature `Landroid/graphics/Matrix;.mapRect:(Landroid/graphics/RectF;)Z` @kind virtual;
  #L1dab64.  v0:= v1.`com.github.mikephil.charting.utils.Transformer.mMatrixOffset` @type ^`android.graphics.Matrix` @kind object;
  #L1dab68.  call temp:= `mapRect`(v0, v2) @signature `Landroid/graphics/Matrix;.mapRect:(Landroid/graphics/RectF;)Z` @kind virtual;
  #L1dab6e.  return @kind void;
}
procedure `void` `rectValueToPixelHorizontal`(`com.github.mikephil.charting.utils.Transformer` v1 @kind this, `android.graphics.RectF` v2 @kind object @name `r`, `float` v3 @name `phaseY`) @signature `Lcom/github/mikephil/charting/utils/Transformer;.rectValueToPixelHorizontal:(Landroid/graphics/RectF;F)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dab80.  v0:= v2.`android.graphics.RectF.left` @type ^`float`;
  #L1dab84.  v0:= v0 * v3 @kind float;
  #L1dab86.  v2.`android.graphics.RectF.left` @type ^`float` := v0;
  #L1dab8a.  v0:= v2.`android.graphics.RectF.right` @type ^`float`;
  #L1dab8e.  v0:= v0 * v3 @kind float;
  #L1dab90.  v2.`android.graphics.RectF.right` @type ^`float` := v0;
  #L1dab94.  v0:= v1.`com.github.mikephil.charting.utils.Transformer.mMatrixValueToPx` @type ^`android.graphics.Matrix` @kind object;
  #L1dab98.  call temp:= `mapRect`(v0, v2) @signature `Landroid/graphics/Matrix;.mapRect:(Landroid/graphics/RectF;)Z` @kind virtual;
  #L1dab9e.  v0:= v1.`com.github.mikephil.charting.utils.Transformer.mViewPortHandler` @type ^`com.github.mikephil.charting.utils.ViewPortHandler` @kind object;
  #L1daba2.  call temp:= `getMatrixTouch`(v0) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.getMatrixTouch:()Landroid/graphics/Matrix;` @kind virtual;
  #L1daba8.  v0:= temp @kind object;
  #L1dabaa.  call temp:= `mapRect`(v0, v2) @signature `Landroid/graphics/Matrix;.mapRect:(Landroid/graphics/RectF;)Z` @kind virtual;
  #L1dabb0.  v0:= v1.`com.github.mikephil.charting.utils.Transformer.mMatrixOffset` @type ^`android.graphics.Matrix` @kind object;
  #L1dabb4.  call temp:= `mapRect`(v0, v2) @signature `Landroid/graphics/Matrix;.mapRect:(Landroid/graphics/RectF;)Z` @kind virtual;
  #L1dabba.  return @kind void;
}
procedure `void` `rectValuesToPixel`(`com.github.mikephil.charting.utils.Transformer` v3 @kind this, `java.util.List` v4 @kind object) @signature `Lcom/github/mikephil/charting/utils/Transformer;.rectValuesToPixel:(Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1dabcc.  call temp:= `getValueToPixelMatrix`(v3) @signature `Lcom/github/mikephil/charting/utils/Transformer;.getValueToPixelMatrix:()Landroid/graphics/Matrix;` @kind virtual;
  #L1dabd2.  v1:= temp @kind object;
  #L1dabd4.  v0:= 0I;
  #L1dabd6.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1dabdc.  v2:= temp;
  #L1dabde.  if v0 >= v2 then goto L1dabfa;
  #L1dabe2.  call temp:= `get`(v4, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1dabe8.  v2:= temp @kind object;
  #L1dabea.  v2:= (`android.graphics.RectF`) v2 @kind object;
  #L1dabee.  call temp:= `mapRect`(v1, v2) @signature `Landroid/graphics/Matrix;.mapRect:(Landroid/graphics/RectF;)Z` @kind virtual;
  #L1dabf4.  v0:= v0 + 1;
  #L1dabf8.  goto L1dabd6;
  #L1dabfa.  return @kind void;
}
