record `com.github.mikephil.charting.utils.MPPointD` @kind class @AccessFlag PUBLIC extends `com.github.mikephil.charting.utils.ObjectPool$Poolable` @kind class {
  `double` `com.github.mikephil.charting.utils.MPPointD.x` @AccessFlag PUBLIC;
  `double` `com.github.mikephil.charting.utils.MPPointD.y` @AccessFlag PUBLIC;
}
global `com.github.mikephil.charting.utils.ObjectPool` `@@com.github.mikephil.charting.utils.MPPointD.pool` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lcom/github/mikephil/charting/utils/MPPointD;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2bef1c.  v2:= 0L;
  #L2bef20.  v0:= 64I;
  #L2bef24.  v1:= new `com.github.mikephil.charting.utils.MPPointD`;
  #L2bef28.  call `<init>`(v1, v2, v2) @signature `Lcom/github/mikephil/charting/utils/MPPointD;.<init>:(DD)V` @kind direct;
  #L2bef2e.  call temp:= `create`(v0, v1) @signature `Lcom/github/mikephil/charting/utils/ObjectPool;.create:(ILcom/github/mikephil/charting/utils/ObjectPool$Poolable;)Lcom/github/mikephil/charting/utils/ObjectPool;` @kind static;
  #L2bef34.  v0:= temp @kind object;
  #L2bef36.  `@@com.github.mikephil.charting.utils.MPPointD.pool` @type ^`com.github.mikephil.charting.utils.ObjectPool` := v0 @kind object;
  #L2bef3a.  v0:= `@@com.github.mikephil.charting.utils.MPPointD.pool` @type ^`com.github.mikephil.charting.utils.ObjectPool` @kind object;
  #L2bef3e.  v1:= 0.5F;
  #L2bef42.  call `setReplenishPercentage`(v0, v1) @signature `Lcom/github/mikephil/charting/utils/ObjectPool;.setReplenishPercentage:(F)V` @kind virtual;
  #L2bef48.  return @kind void;
}
procedure `void` `<init>`(`com.github.mikephil.charting.utils.MPPointD` v1 @kind this, `double` v2 @name `x`, `double` v4 @name `y`) @signature `Lcom/github/mikephil/charting/utils/MPPointD;.<init>:(DD)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L2bef5c.  call `<init>`(v1) @signature `Lcom/github/mikephil/charting/utils/ObjectPool$Poolable;.<init>:()V` @kind direct;
  #L2bef62.  v1.`com.github.mikephil.charting.utils.MPPointD.x` @type ^`double` := v2 @kind wide;
  #L2bef66.  v1.`com.github.mikephil.charting.utils.MPPointD.y` @type ^`double` := v4 @kind wide;
  #L2bef6a.  return @kind void;
}
procedure `com.github.mikephil.charting.utils.MPPointD` `getInstance`(`double` v2 @name `x`, `double` v4 @name `y`) @signature `Lcom/github/mikephil/charting/utils/MPPointD;.getInstance:(DD)Lcom/github/mikephil/charting/utils/MPPointD;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2bef7c.  v1:= `@@com.github.mikephil.charting.utils.MPPointD.pool` @type ^`com.github.mikephil.charting.utils.ObjectPool` @kind object;
  #L2bef80.  call temp:= `get`(v1) @signature `Lcom/github/mikephil/charting/utils/ObjectPool;.get:()Lcom/github/mikephil/charting/utils/ObjectPool$Poolable;` @kind virtual;
  #L2bef86.  v0:= temp @kind object;
  #L2bef88.  v0:= (`com.github.mikephil.charting.utils.MPPointD`) v0 @kind object;
  #L2bef8c.  v0.`com.github.mikephil.charting.utils.MPPointD.x` @type ^`double` := v2 @kind wide;
  #L2bef90.  v0.`com.github.mikephil.charting.utils.MPPointD.y` @type ^`double` := v4 @kind wide;
  #L2bef94.  return v0 @kind object;
}
procedure `void` `recycleInstance`(`com.github.mikephil.charting.utils.MPPointD` v1 @kind object @name `instance`) @signature `Lcom/github/mikephil/charting/utils/MPPointD;.recycleInstance:(Lcom/github/mikephil/charting/utils/MPPointD;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2befa8.  v0:= `@@com.github.mikephil.charting.utils.MPPointD.pool` @type ^`com.github.mikephil.charting.utils.ObjectPool` @kind object;
  #L2befac.  call `recycle`(v0, v1) @signature `Lcom/github/mikephil/charting/utils/ObjectPool;.recycle:(Lcom/github/mikephil/charting/utils/ObjectPool$Poolable;)V` @kind virtual;
  #L2befb2.  return @kind void;
}
procedure `void` `recycleInstances`(`java.util.List` v1 @kind object) @signature `Lcom/github/mikephil/charting/utils/MPPointD;.recycleInstances:(Ljava/util/List;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2befc4.  v0:= `@@com.github.mikephil.charting.utils.MPPointD.pool` @type ^`com.github.mikephil.charting.utils.ObjectPool` @kind object;
  #L2befc8.  call `recycle`(v0, v1) @signature `Lcom/github/mikephil/charting/utils/ObjectPool;.recycle:(Ljava/util/List;)V` @kind virtual;
  #L2befce.  return @kind void;
}
procedure `com.github.mikephil.charting.utils.ObjectPool$Poolable` `instantiate`(`com.github.mikephil.charting.utils.MPPointD` v4 @kind this) @signature `Lcom/github/mikephil/charting/utils/MPPointD;.instantiate:()Lcom/github/mikephil/charting/utils/ObjectPool$Poolable;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2befe0.  v2:= 0L;
  #L2befe4.  v0:= new `com.github.mikephil.charting.utils.MPPointD`;
  #L2befe8.  call `<init>`(v0, v2, v2) @signature `Lcom/github/mikephil/charting/utils/MPPointD;.<init>:(DD)V` @kind direct;
  #L2befee.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`com.github.mikephil.charting.utils.MPPointD` v4 @kind this) @signature `Lcom/github/mikephil/charting/utils/MPPointD;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2bf000.  v0:= new `java.lang.StringBuilder`;
  #L2bf004.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2bf00a.  v1:= "MPPointD, x: " @kind object;
  #L2bf00e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bf014.  v0:= temp @kind object;
  #L2bf016.  v2:= v4.`com.github.mikephil.charting.utils.MPPointD.x` @type ^`double` @kind wide;
  #L2bf01a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(D)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bf020.  v0:= temp @kind object;
  #L2bf022.  v1:= ", y: " @kind object;
  #L2bf026.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bf02c.  v0:= temp @kind object;
  #L2bf02e.  v2:= v4.`com.github.mikephil.charting.utils.MPPointD.y` @type ^`double` @kind wide;
  #L2bf032.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(D)Ljava/lang/StringBuilder;` @kind virtual;
  #L2bf038.  v0:= temp @kind object;
  #L2bf03a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2bf040.  v0:= temp @kind object;
  #L2bf042.  return v0 @kind object;
}
