record `com.github.mikephil.charting.utils.ViewPortHandler` @kind class @AccessFlag PUBLIC {
  `android.graphics.Matrix` `com.github.mikephil.charting.utils.ViewPortHandler.mCenterViewPortMatrixBuffer` @AccessFlag PROTECTED;
  `float` `com.github.mikephil.charting.utils.ViewPortHandler.mChartHeight` @AccessFlag PROTECTED;
  `float` `com.github.mikephil.charting.utils.ViewPortHandler.mChartWidth` @AccessFlag PROTECTED;
  `android.graphics.RectF` `com.github.mikephil.charting.utils.ViewPortHandler.mContentRect` @AccessFlag PROTECTED;
  `android.graphics.Matrix` `com.github.mikephil.charting.utils.ViewPortHandler.mMatrixTouch` @AccessFlag PROTECTED_FINAL;
  `float` `com.github.mikephil.charting.utils.ViewPortHandler.mMaxScaleX` @AccessFlag PRIVATE;
  `float` `com.github.mikephil.charting.utils.ViewPortHandler.mMaxScaleY` @AccessFlag PRIVATE;
  `float` `com.github.mikephil.charting.utils.ViewPortHandler.mMinScaleX` @AccessFlag PRIVATE;
  `float` `com.github.mikephil.charting.utils.ViewPortHandler.mMinScaleY` @AccessFlag PRIVATE;
  `float` `com.github.mikephil.charting.utils.ViewPortHandler.mScaleX` @AccessFlag PRIVATE;
  `float` `com.github.mikephil.charting.utils.ViewPortHandler.mScaleY` @AccessFlag PRIVATE;
  `float` `com.github.mikephil.charting.utils.ViewPortHandler.mTransOffsetX` @AccessFlag PRIVATE;
  `float` `com.github.mikephil.charting.utils.ViewPortHandler.mTransOffsetY` @AccessFlag PRIVATE;
  `float` `com.github.mikephil.charting.utils.ViewPortHandler.mTransX` @AccessFlag PRIVATE;
  `float` `com.github.mikephil.charting.utils.ViewPortHandler.mTransY` @AccessFlag PRIVATE;
  `float`[] `com.github.mikephil.charting.utils.ViewPortHandler.matrixBuffer` @AccessFlag PROTECTED_FINAL;
  `float`[] `com.github.mikephil.charting.utils.ViewPortHandler.valsBufferForFitScreen` @AccessFlag PROTECTED;
}
procedure `void` `<init>`(`com.github.mikephil.charting.utils.ViewPortHandler` v5 @kind this) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1db918.  v4:= 9I;
  #L1db91c.  v3:= 2139095039I;
  #L1db922.  v2:= 1.0F;
  #L1db926.  v1:= 0I;
  #L1db928.  call `<init>`(v5) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1db92e.  v0:= new `android.graphics.Matrix`;
  #L1db932.  call `<init>`(v0) @signature `Landroid/graphics/Matrix;.<init>:()V` @kind direct;
  #L1db938.  v5.`com.github.mikephil.charting.utils.ViewPortHandler.mMatrixTouch` @type ^`android.graphics.Matrix` := v0 @kind object;
  #L1db93c.  v0:= new `android.graphics.RectF`;
  #L1db940.  call `<init>`(v0) @signature `Landroid/graphics/RectF;.<init>:()V` @kind direct;
  #L1db946.  v5.`com.github.mikephil.charting.utils.ViewPortHandler.mContentRect` @type ^`android.graphics.RectF` := v0 @kind object;
  #L1db94a.  v5.`com.github.mikephil.charting.utils.ViewPortHandler.mChartWidth` @type ^`float` := v1;
  #L1db94e.  v5.`com.github.mikephil.charting.utils.ViewPortHandler.mChartHeight` @type ^`float` := v1;
  #L1db952.  v5.`com.github.mikephil.charting.utils.ViewPortHandler.mMinScaleY` @type ^`float` := v2;
  #L1db956.  v5.`com.github.mikephil.charting.utils.ViewPortHandler.mMaxScaleY` @type ^`float` := v3;
  #L1db95a.  v5.`com.github.mikephil.charting.utils.ViewPortHandler.mMinScaleX` @type ^`float` := v2;
  #L1db95e.  v5.`com.github.mikephil.charting.utils.ViewPortHandler.mMaxScaleX` @type ^`float` := v3;
  #L1db962.  v5.`com.github.mikephil.charting.utils.ViewPortHandler.mScaleX` @type ^`float` := v2;
  #L1db966.  v5.`com.github.mikephil.charting.utils.ViewPortHandler.mScaleY` @type ^`float` := v2;
  #L1db96a.  v5.`com.github.mikephil.charting.utils.ViewPortHandler.mTransX` @type ^`float` := v1;
  #L1db96e.  v5.`com.github.mikephil.charting.utils.ViewPortHandler.mTransY` @type ^`float` := v1;
  #L1db972.  v5.`com.github.mikephil.charting.utils.ViewPortHandler.mTransOffsetX` @type ^`float` := v1;
  #L1db976.  v5.`com.github.mikephil.charting.utils.ViewPortHandler.mTransOffsetY` @type ^`float` := v1;
  #L1db97a.  v0:= new `float`[v4];
  #L1db97e.  v5.`com.github.mikephil.charting.utils.ViewPortHandler.valsBufferForFitScreen` @type ^`float`[] := v0 @kind object;
  #L1db982.  v0:= new `android.graphics.Matrix`;
  #L1db986.  call `<init>`(v0) @signature `Landroid/graphics/Matrix;.<init>:()V` @kind direct;
  #L1db98c.  v5.`com.github.mikephil.charting.utils.ViewPortHandler.mCenterViewPortMatrixBuffer` @type ^`android.graphics.Matrix` := v0 @kind object;
  #L1db990.  v0:= new `float`[v4];
  #L1db994.  v5.`com.github.mikephil.charting.utils.ViewPortHandler.matrixBuffer` @type ^`float`[] := v0 @kind object;
  #L1db998.  return @kind void;
}
procedure `boolean` `canZoomInMoreX`(`com.github.mikephil.charting.utils.ViewPortHandler` v2 @kind this) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.canZoomInMoreX:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1db9ac.  v0:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mScaleX` @type ^`float`;
  #L1db9b0.  v1:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mMaxScaleX` @type ^`float`;
  #L1db9b4.  v0:= fcmpg(v0, v1);
  #L1db9b8.  if v0 >= 0 then goto L1db9c0;
  #L1db9bc.  v0:= 1I;
  #L1db9be.  return v0;
  #L1db9c0.  v0:= 0I;
  #L1db9c2.  goto L1db9be;
}
procedure `boolean` `canZoomInMoreY`(`com.github.mikephil.charting.utils.ViewPortHandler` v2 @kind this) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.canZoomInMoreY:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1db9d4.  v0:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mScaleY` @type ^`float`;
  #L1db9d8.  v1:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mMaxScaleY` @type ^`float`;
  #L1db9dc.  v0:= fcmpg(v0, v1);
  #L1db9e0.  if v0 >= 0 then goto L1db9e8;
  #L1db9e4.  v0:= 1I;
  #L1db9e6.  return v0;
  #L1db9e8.  v0:= 0I;
  #L1db9ea.  goto L1db9e6;
}
procedure `boolean` `canZoomOutMoreX`(`com.github.mikephil.charting.utils.ViewPortHandler` v2 @kind this) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.canZoomOutMoreX:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1db9fc.  v0:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mScaleX` @type ^`float`;
  #L1dba00.  v1:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mMinScaleX` @type ^`float`;
  #L1dba04.  v0:= fcmpl(v0, v1);
  #L1dba08.  if v0 <= 0 then goto L1dba10;
  #L1dba0c.  v0:= 1I;
  #L1dba0e.  return v0;
  #L1dba10.  v0:= 0I;
  #L1dba12.  goto L1dba0e;
}
procedure `boolean` `canZoomOutMoreY`(`com.github.mikephil.charting.utils.ViewPortHandler` v2 @kind this) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.canZoomOutMoreY:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1dba24.  v0:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mScaleY` @type ^`float`;
  #L1dba28.  v1:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mMinScaleY` @type ^`float`;
  #L1dba2c.  v0:= fcmpl(v0, v1);
  #L1dba30.  if v0 <= 0 then goto L1dba38;
  #L1dba34.  v0:= 1I;
  #L1dba36.  return v0;
  #L1dba38.  v0:= 0I;
  #L1dba3a.  goto L1dba36;
}
procedure `void` `centerViewPort`(`com.github.mikephil.charting.utils.ViewPortHandler` v6 @kind this, `float`[] v7 @kind object @name `transformedPts`, `android.view.View` v8 @kind object @name `view`) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.centerViewPort:([FLandroid/view/View;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1dba4c.  v5:= 1I;
  #L1dba4e.  v0:= v6.`com.github.mikephil.charting.utils.ViewPortHandler.mCenterViewPortMatrixBuffer` @type ^`android.graphics.Matrix` @kind object;
  #L1dba52.  call `reset`(v0) @signature `Landroid/graphics/Matrix;.reset:()V` @kind virtual;
  #L1dba58.  v3:= v6.`com.github.mikephil.charting.utils.ViewPortHandler.mMatrixTouch` @type ^`android.graphics.Matrix` @kind object;
  #L1dba5c.  call `set`(v0, v3) @signature `Landroid/graphics/Matrix;.set:(Landroid/graphics/Matrix;)V` @kind virtual;
  #L1dba62.  v3:= 0I;
  #L1dba64.  v3:= v7[v3];
  #L1dba68.  call temp:= `offsetLeft`(v6) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.offsetLeft:()F` @kind virtual;
  #L1dba6e.  v4:= temp;
  #L1dba70.  v1:= v3 - v4 @kind float;
  #L1dba74.  v3:= v7[v5];
  #L1dba78.  call temp:= `offsetTop`(v6) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.offsetTop:()F` @kind virtual;
  #L1dba7e.  v4:= temp;
  #L1dba80.  v2:= v3 - v4 @kind float;
  #L1dba84.  v3:= -v1 @kind float;
  #L1dba86.  v4:= -v2 @kind float;
  #L1dba88.  call temp:= `postTranslate`(v0, v3, v4) @signature `Landroid/graphics/Matrix;.postTranslate:(FF)Z` @kind virtual;
  #L1dba8e.  call temp:= `refresh`(v6, v0, v8, v5) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.refresh:(Landroid/graphics/Matrix;Landroid/view/View;Z)Landroid/graphics/Matrix;` @kind virtual;
  #L1dba94.  return @kind void;
}
procedure `float` `contentBottom`(`com.github.mikephil.charting.utils.ViewPortHandler` v1 @kind this) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.contentBottom:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dbaa8.  v0:= v1.`com.github.mikephil.charting.utils.ViewPortHandler.mContentRect` @type ^`android.graphics.RectF` @kind object;
  #L1dbaac.  v0:= v0.`android.graphics.RectF.bottom` @type ^`float`;
  #L1dbab0.  return v0;
}
procedure `float` `contentHeight`(`com.github.mikephil.charting.utils.ViewPortHandler` v1 @kind this) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.contentHeight:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dbac4.  v0:= v1.`com.github.mikephil.charting.utils.ViewPortHandler.mContentRect` @type ^`android.graphics.RectF` @kind object;
  #L1dbac8.  call temp:= `height`(v0) @signature `Landroid/graphics/RectF;.height:()F` @kind virtual;
  #L1dbace.  v0:= temp;
  #L1dbad0.  return v0;
}
procedure `float` `contentLeft`(`com.github.mikephil.charting.utils.ViewPortHandler` v1 @kind this) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.contentLeft:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dbae4.  v0:= v1.`com.github.mikephil.charting.utils.ViewPortHandler.mContentRect` @type ^`android.graphics.RectF` @kind object;
  #L1dbae8.  v0:= v0.`android.graphics.RectF.left` @type ^`float`;
  #L1dbaec.  return v0;
}
procedure `float` `contentRight`(`com.github.mikephil.charting.utils.ViewPortHandler` v1 @kind this) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.contentRight:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dbb00.  v0:= v1.`com.github.mikephil.charting.utils.ViewPortHandler.mContentRect` @type ^`android.graphics.RectF` @kind object;
  #L1dbb04.  v0:= v0.`android.graphics.RectF.right` @type ^`float`;
  #L1dbb08.  return v0;
}
procedure `float` `contentTop`(`com.github.mikephil.charting.utils.ViewPortHandler` v1 @kind this) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.contentTop:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dbb1c.  v0:= v1.`com.github.mikephil.charting.utils.ViewPortHandler.mContentRect` @type ^`android.graphics.RectF` @kind object;
  #L1dbb20.  v0:= v0.`android.graphics.RectF.top` @type ^`float`;
  #L1dbb24.  return v0;
}
procedure `float` `contentWidth`(`com.github.mikephil.charting.utils.ViewPortHandler` v1 @kind this) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.contentWidth:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dbb38.  v0:= v1.`com.github.mikephil.charting.utils.ViewPortHandler.mContentRect` @type ^`android.graphics.RectF` @kind object;
  #L1dbb3c.  call temp:= `width`(v0) @signature `Landroid/graphics/RectF;.width:()F` @kind virtual;
  #L1dbb42.  v0:= temp;
  #L1dbb44.  return v0;
}
procedure `android.graphics.Matrix` `fitScreen`(`com.github.mikephil.charting.utils.ViewPortHandler` v1 @kind this) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.fitScreen:()Landroid/graphics/Matrix;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dbb58.  v0:= new `android.graphics.Matrix`;
  #L1dbb5c.  call `<init>`(v0) @signature `Landroid/graphics/Matrix;.<init>:()V` @kind direct;
  #L1dbb62.  call `fitScreen`(v1, v0) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.fitScreen:(Landroid/graphics/Matrix;)V` @kind virtual;
  #L1dbb68.  return v0 @kind object;
}
procedure `void` `fitScreen`(`com.github.mikephil.charting.utils.ViewPortHandler` v5 @kind this, `android.graphics.Matrix` v6 @kind object @name `outputMatrix`) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.fitScreen:(Landroid/graphics/Matrix;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1dbb7c.  v4:= 0I;
  #L1dbb7e.  v3:= 1.0F;
  #L1dbb82.  v5.`com.github.mikephil.charting.utils.ViewPortHandler.mMinScaleX` @type ^`float` := v3;
  #L1dbb86.  v5.`com.github.mikephil.charting.utils.ViewPortHandler.mMinScaleY` @type ^`float` := v3;
  #L1dbb8a.  v2:= v5.`com.github.mikephil.charting.utils.ViewPortHandler.mMatrixTouch` @type ^`android.graphics.Matrix` @kind object;
  #L1dbb8e.  call `set`(v6, v2) @signature `Landroid/graphics/Matrix;.set:(Landroid/graphics/Matrix;)V` @kind virtual;
  #L1dbb94.  v1:= v5.`com.github.mikephil.charting.utils.ViewPortHandler.valsBufferForFitScreen` @type ^`float`[] @kind object;
  #L1dbb98.  v0:= 0I;
  #L1dbb9a.  v2:= 9I;
  #L1dbb9e.  if v0 >= v2 then goto L1dbbac;
  #L1dbba2.  v1[v0]:= v4;
  #L1dbba6.  v0:= v0 + 1;
  #L1dbbaa.  goto L1dbb9a;
  #L1dbbac.  call `getValues`(v6, v1) @signature `Landroid/graphics/Matrix;.getValues:([F)V` @kind virtual;
  #L1dbbb2.  v2:= 2I;
  #L1dbbb4.  v1[v2]:= v4;
  #L1dbbb8.  v2:= 5I;
  #L1dbbba.  v1[v2]:= v4;
  #L1dbbbe.  v2:= 0I;
  #L1dbbc0.  v1[v2]:= v3;
  #L1dbbc4.  v2:= 4I;
  #L1dbbc6.  v1[v2]:= v3;
  #L1dbbca.  call `setValues`(v6, v1) @signature `Landroid/graphics/Matrix;.setValues:([F)V` @kind virtual;
  #L1dbbd0.  return @kind void;
}
procedure `float` `getChartHeight`(`com.github.mikephil.charting.utils.ViewPortHandler` v1 @kind this) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.getChartHeight:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dbbe4.  v0:= v1.`com.github.mikephil.charting.utils.ViewPortHandler.mChartHeight` @type ^`float`;
  #L1dbbe8.  return v0;
}
procedure `float` `getChartWidth`(`com.github.mikephil.charting.utils.ViewPortHandler` v1 @kind this) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.getChartWidth:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dbbfc.  v0:= v1.`com.github.mikephil.charting.utils.ViewPortHandler.mChartWidth` @type ^`float`;
  #L1dbc00.  return v0;
}
procedure `com.github.mikephil.charting.utils.MPPointF` `getContentCenter`(`com.github.mikephil.charting.utils.ViewPortHandler` v2 @kind this) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.getContentCenter:()Lcom/github/mikephil/charting/utils/MPPointF;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1dbc14.  v0:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mContentRect` @type ^`android.graphics.RectF` @kind object;
  #L1dbc18.  call temp:= `centerX`(v0) @signature `Landroid/graphics/RectF;.centerX:()F` @kind virtual;
  #L1dbc1e.  v0:= temp;
  #L1dbc20.  v1:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mContentRect` @type ^`android.graphics.RectF` @kind object;
  #L1dbc24.  call temp:= `centerY`(v1) @signature `Landroid/graphics/RectF;.centerY:()F` @kind virtual;
  #L1dbc2a.  v1:= temp;
  #L1dbc2c.  call temp:= `getInstance`(v0, v1) @signature `Lcom/github/mikephil/charting/utils/MPPointF;.getInstance:(FF)Lcom/github/mikephil/charting/utils/MPPointF;` @kind static;
  #L1dbc32.  v0:= temp @kind object;
  #L1dbc34.  return v0 @kind object;
}
procedure `android.graphics.RectF` `getContentRect`(`com.github.mikephil.charting.utils.ViewPortHandler` v1 @kind this) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.getContentRect:()Landroid/graphics/RectF;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dbc48.  v0:= v1.`com.github.mikephil.charting.utils.ViewPortHandler.mContentRect` @type ^`android.graphics.RectF` @kind object;
  #L1dbc4c.  return v0 @kind object;
}
procedure `android.graphics.Matrix` `getMatrixTouch`(`com.github.mikephil.charting.utils.ViewPortHandler` v1 @kind this) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.getMatrixTouch:()Landroid/graphics/Matrix;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dbc60.  v0:= v1.`com.github.mikephil.charting.utils.ViewPortHandler.mMatrixTouch` @type ^`android.graphics.Matrix` @kind object;
  #L1dbc64.  return v0 @kind object;
}
procedure `float` `getMaxScaleX`(`com.github.mikephil.charting.utils.ViewPortHandler` v1 @kind this) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.getMaxScaleX:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dbc78.  v0:= v1.`com.github.mikephil.charting.utils.ViewPortHandler.mMaxScaleX` @type ^`float`;
  #L1dbc7c.  return v0;
}
procedure `float` `getMaxScaleY`(`com.github.mikephil.charting.utils.ViewPortHandler` v1 @kind this) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.getMaxScaleY:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dbc90.  v0:= v1.`com.github.mikephil.charting.utils.ViewPortHandler.mMaxScaleY` @type ^`float`;
  #L1dbc94.  return v0;
}
procedure `float` `getMinScaleX`(`com.github.mikephil.charting.utils.ViewPortHandler` v1 @kind this) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.getMinScaleX:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dbca8.  v0:= v1.`com.github.mikephil.charting.utils.ViewPortHandler.mMinScaleX` @type ^`float`;
  #L1dbcac.  return v0;
}
procedure `float` `getMinScaleY`(`com.github.mikephil.charting.utils.ViewPortHandler` v1 @kind this) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.getMinScaleY:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dbcc0.  v0:= v1.`com.github.mikephil.charting.utils.ViewPortHandler.mMinScaleY` @type ^`float`;
  #L1dbcc4.  return v0;
}
procedure `float` `getScaleX`(`com.github.mikephil.charting.utils.ViewPortHandler` v1 @kind this) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.getScaleX:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dbcd8.  v0:= v1.`com.github.mikephil.charting.utils.ViewPortHandler.mScaleX` @type ^`float`;
  #L1dbcdc.  return v0;
}
procedure `float` `getScaleY`(`com.github.mikephil.charting.utils.ViewPortHandler` v1 @kind this) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.getScaleY:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dbcf0.  v0:= v1.`com.github.mikephil.charting.utils.ViewPortHandler.mScaleY` @type ^`float`;
  #L1dbcf4.  return v0;
}
procedure `float` `getSmallestContentExtension`(`com.github.mikephil.charting.utils.ViewPortHandler` v2 @kind this) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.getSmallestContentExtension:()F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1dbd08.  v0:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mContentRect` @type ^`android.graphics.RectF` @kind object;
  #L1dbd0c.  call temp:= `width`(v0) @signature `Landroid/graphics/RectF;.width:()F` @kind virtual;
  #L1dbd12.  v0:= temp;
  #L1dbd14.  v1:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mContentRect` @type ^`android.graphics.RectF` @kind object;
  #L1dbd18.  call temp:= `height`(v1) @signature `Landroid/graphics/RectF;.height:()F` @kind virtual;
  #L1dbd1e.  v1:= temp;
  #L1dbd20.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(FF)F` @kind static;
  #L1dbd26.  v0:= temp;
  #L1dbd28.  return v0;
}
procedure `float` `getTransX`(`com.github.mikephil.charting.utils.ViewPortHandler` v1 @kind this) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.getTransX:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dbd3c.  v0:= v1.`com.github.mikephil.charting.utils.ViewPortHandler.mTransX` @type ^`float`;
  #L1dbd40.  return v0;
}
procedure `float` `getTransY`(`com.github.mikephil.charting.utils.ViewPortHandler` v1 @kind this) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.getTransY:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dbd54.  v0:= v1.`com.github.mikephil.charting.utils.ViewPortHandler.mTransY` @type ^`float`;
  #L1dbd58.  return v0;
}
procedure `boolean` `hasChartDimens`(`com.github.mikephil.charting.utils.ViewPortHandler` v2 @kind this) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.hasChartDimens:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1dbd6c.  v1:= 0I;
  #L1dbd6e.  v0:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mChartHeight` @type ^`float`;
  #L1dbd72.  v0:= fcmpl(v0, v1);
  #L1dbd76.  if v0 <= 0 then goto L1dbd8a;
  #L1dbd7a.  v0:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mChartWidth` @type ^`float`;
  #L1dbd7e.  v0:= fcmpl(v0, v1);
  #L1dbd82.  if v0 <= 0 then goto L1dbd8a;
  #L1dbd86.  v0:= 1I;
  #L1dbd88.  return v0;
  #L1dbd8a.  v0:= 0I;
  #L1dbd8c.  goto L1dbd88;
}
procedure `boolean` `hasNoDragOffset`(`com.github.mikephil.charting.utils.ViewPortHandler` v2 @kind this) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.hasNoDragOffset:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1dbda0.  v1:= 0I;
  #L1dbda2.  v0:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mTransOffsetX` @type ^`float`;
  #L1dbda6.  v0:= fcmpg(v0, v1);
  #L1dbdaa.  if v0 > 0 then goto L1dbdbe;
  #L1dbdae.  v0:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mTransOffsetY` @type ^`float`;
  #L1dbdb2.  v0:= fcmpg(v0, v1);
  #L1dbdb6.  if v0 > 0 then goto L1dbdbe;
  #L1dbdba.  v0:= 1I;
  #L1dbdbc.  return v0;
  #L1dbdbe.  v0:= 0I;
  #L1dbdc0.  goto L1dbdbc;
}
procedure `boolean` `isFullyZoomedOut`(`com.github.mikephil.charting.utils.ViewPortHandler` v1 @kind this) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.isFullyZoomedOut:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dbdd4.  call temp:= `isFullyZoomedOutX`(v1) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.isFullyZoomedOutX:()Z` @kind virtual;
  #L1dbdda.  v0:= temp;
  #L1dbddc.  if v0 == 0 then goto L1dbdf0;
  #L1dbde0.  call temp:= `isFullyZoomedOutY`(v1) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.isFullyZoomedOutY:()Z` @kind virtual;
  #L1dbde6.  v0:= temp;
  #L1dbde8.  if v0 == 0 then goto L1dbdf0;
  #L1dbdec.  v0:= 1I;
  #L1dbdee.  return v0;
  #L1dbdf0.  v0:= 0I;
  #L1dbdf2.  goto L1dbdee;
}
procedure `boolean` `isFullyZoomedOutX`(`com.github.mikephil.charting.utils.ViewPortHandler` v2 @kind this) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.isFullyZoomedOutX:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1dbe04.  v0:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mScaleX` @type ^`float`;
  #L1dbe08.  v1:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mMinScaleX` @type ^`float`;
  #L1dbe0c.  v0:= fcmpl(v0, v1);
  #L1dbe10.  if v0 > 0 then goto L1dbe24;
  #L1dbe14.  v0:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mMinScaleX` @type ^`float`;
  #L1dbe18.  v1:= 1.0F;
  #L1dbe1c.  v0:= fcmpl(v0, v1);
  #L1dbe20.  if v0 <= 0 then goto L1dbe28;
  #L1dbe24.  v0:= 0I;
  #L1dbe26.  return v0;
  #L1dbe28.  v0:= 1I;
  #L1dbe2a.  goto L1dbe26;
}
procedure `boolean` `isFullyZoomedOutY`(`com.github.mikephil.charting.utils.ViewPortHandler` v2 @kind this) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.isFullyZoomedOutY:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1dbe3c.  v0:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mScaleY` @type ^`float`;
  #L1dbe40.  v1:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mMinScaleY` @type ^`float`;
  #L1dbe44.  v0:= fcmpl(v0, v1);
  #L1dbe48.  if v0 > 0 then goto L1dbe5c;
  #L1dbe4c.  v0:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mMinScaleY` @type ^`float`;
  #L1dbe50.  v1:= 1.0F;
  #L1dbe54.  v0:= fcmpl(v0, v1);
  #L1dbe58.  if v0 <= 0 then goto L1dbe60;
  #L1dbe5c.  v0:= 0I;
  #L1dbe5e.  return v0;
  #L1dbe60.  v0:= 1I;
  #L1dbe62.  goto L1dbe5e;
}
procedure `boolean` `isInBounds`(`com.github.mikephil.charting.utils.ViewPortHandler` v1 @kind this, `float` v2 @name `x`, `float` v3 @name `y`) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.isInBounds:(FF)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dbe74.  call temp:= `isInBoundsX`(v1, v2) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.isInBoundsX:(F)Z` @kind virtual;
  #L1dbe7a.  v0:= temp;
  #L1dbe7c.  if v0 == 0 then goto L1dbe90;
  #L1dbe80.  call temp:= `isInBoundsY`(v1, v3) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.isInBoundsY:(F)Z` @kind virtual;
  #L1dbe86.  v0:= temp;
  #L1dbe88.  if v0 == 0 then goto L1dbe90;
  #L1dbe8c.  v0:= 1I;
  #L1dbe8e.  return v0;
  #L1dbe90.  v0:= 0I;
  #L1dbe92.  goto L1dbe8e;
}
procedure `boolean` `isInBoundsBottom`(`com.github.mikephil.charting.utils.ViewPortHandler` v2 @kind this, `float` v3 @name `y`) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.isInBoundsBottom:(F)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1dbea4.  v1:= 100.0F;
  #L1dbea8.  v0:= v3 * v1 @kind float;
  #L1dbeac.  v0:= (`int`) v0 @kind f2i;
  #L1dbeae.  v0:= (`float`) v0 @kind i2f;
  #L1dbeb0.  v3:= v0 / v1 @kind float;
  #L1dbeb4.  v0:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mContentRect` @type ^`android.graphics.RectF` @kind object;
  #L1dbeb8.  v0:= v0.`android.graphics.RectF.bottom` @type ^`float`;
  #L1dbebc.  v0:= fcmpl(v0, v3);
  #L1dbec0.  if v0 < 0 then goto L1dbec8;
  #L1dbec4.  v0:= 1I;
  #L1dbec6.  return v0;
  #L1dbec8.  v0:= 0I;
  #L1dbeca.  goto L1dbec6;
}
procedure `boolean` `isInBoundsLeft`(`com.github.mikephil.charting.utils.ViewPortHandler` v2 @kind this, `float` v3 @name `x`) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.isInBoundsLeft:(F)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1dbedc.  v0:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mContentRect` @type ^`android.graphics.RectF` @kind object;
  #L1dbee0.  v0:= v0.`android.graphics.RectF.left` @type ^`float`;
  #L1dbee4.  v1:= 1.0F;
  #L1dbee8.  v1:= v1 + v3 @kind float;
  #L1dbeea.  v0:= fcmpg(v0, v1);
  #L1dbeee.  if v0 > 0 then goto L1dbef6;
  #L1dbef2.  v0:= 1I;
  #L1dbef4.  return v0;
  #L1dbef6.  v0:= 0I;
  #L1dbef8.  goto L1dbef4;
}
procedure `boolean` `isInBoundsRight`(`com.github.mikephil.charting.utils.ViewPortHandler` v2 @kind this, `float` v3 @name `x`) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.isInBoundsRight:(F)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1dbf0c.  v1:= 100.0F;
  #L1dbf10.  v0:= v3 * v1 @kind float;
  #L1dbf14.  v0:= (`int`) v0 @kind f2i;
  #L1dbf16.  v0:= (`float`) v0 @kind i2f;
  #L1dbf18.  v3:= v0 / v1 @kind float;
  #L1dbf1c.  v0:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mContentRect` @type ^`android.graphics.RectF` @kind object;
  #L1dbf20.  v0:= v0.`android.graphics.RectF.right` @type ^`float`;
  #L1dbf24.  v1:= 1.0F;
  #L1dbf28.  v1:= v3 - v1 @kind float;
  #L1dbf2c.  v0:= fcmpl(v0, v1);
  #L1dbf30.  if v0 < 0 then goto L1dbf38;
  #L1dbf34.  v0:= 1I;
  #L1dbf36.  return v0;
  #L1dbf38.  v0:= 0I;
  #L1dbf3a.  goto L1dbf36;
}
procedure `boolean` `isInBoundsTop`(`com.github.mikephil.charting.utils.ViewPortHandler` v1 @kind this, `float` v2 @name `y`) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.isInBoundsTop:(F)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dbf4c.  v0:= v1.`com.github.mikephil.charting.utils.ViewPortHandler.mContentRect` @type ^`android.graphics.RectF` @kind object;
  #L1dbf50.  v0:= v0.`android.graphics.RectF.top` @type ^`float`;
  #L1dbf54.  v0:= fcmpg(v0, v2);
  #L1dbf58.  if v0 > 0 then goto L1dbf60;
  #L1dbf5c.  v0:= 1I;
  #L1dbf5e.  return v0;
  #L1dbf60.  v0:= 0I;
  #L1dbf62.  goto L1dbf5e;
}
procedure `boolean` `isInBoundsX`(`com.github.mikephil.charting.utils.ViewPortHandler` v1 @kind this, `float` v2 @name `x`) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.isInBoundsX:(F)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dbf74.  call temp:= `isInBoundsLeft`(v1, v2) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.isInBoundsLeft:(F)Z` @kind virtual;
  #L1dbf7a.  v0:= temp;
  #L1dbf7c.  if v0 == 0 then goto L1dbf90;
  #L1dbf80.  call temp:= `isInBoundsRight`(v1, v2) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.isInBoundsRight:(F)Z` @kind virtual;
  #L1dbf86.  v0:= temp;
  #L1dbf88.  if v0 == 0 then goto L1dbf90;
  #L1dbf8c.  v0:= 1I;
  #L1dbf8e.  return v0;
  #L1dbf90.  v0:= 0I;
  #L1dbf92.  goto L1dbf8e;
}
procedure `boolean` `isInBoundsY`(`com.github.mikephil.charting.utils.ViewPortHandler` v1 @kind this, `float` v2 @name `y`) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.isInBoundsY:(F)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dbfa4.  call temp:= `isInBoundsTop`(v1, v2) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.isInBoundsTop:(F)Z` @kind virtual;
  #L1dbfaa.  v0:= temp;
  #L1dbfac.  if v0 == 0 then goto L1dbfc0;
  #L1dbfb0.  call temp:= `isInBoundsBottom`(v1, v2) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.isInBoundsBottom:(F)Z` @kind virtual;
  #L1dbfb6.  v0:= temp;
  #L1dbfb8.  if v0 == 0 then goto L1dbfc0;
  #L1dbfbc.  v0:= 1I;
  #L1dbfbe.  return v0;
  #L1dbfc0.  v0:= 0I;
  #L1dbfc2.  goto L1dbfbe;
}
procedure `void` `limitTransAndScale`(`com.github.mikephil.charting.utils.ViewPortHandler` v11 @kind this, `android.graphics.Matrix` v12 @kind object @name `matrix`, `android.graphics.RectF` v13 @kind object @name `content`) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.limitTransAndScale:(Landroid/graphics/Matrix;Landroid/graphics/RectF;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L1dbfd4.  v8:= v11.`com.github.mikephil.charting.utils.ViewPortHandler.matrixBuffer` @type ^`float`[] @kind object;
  #L1dbfd8.  call `getValues`(v12, v8) @signature `Landroid/graphics/Matrix;.getValues:([F)V` @kind virtual;
  #L1dbfde.  v8:= v11.`com.github.mikephil.charting.utils.ViewPortHandler.matrixBuffer` @type ^`float`[] @kind object;
  #L1dbfe2.  v9:= 2I;
  #L1dbfe4.  v2:= v8[v9];
  #L1dbfe8.  v8:= v11.`com.github.mikephil.charting.utils.ViewPortHandler.matrixBuffer` @type ^`float`[] @kind object;
  #L1dbfec.  v9:= 0I;
  #L1dbfee.  v0:= v8[v9];
  #L1dbff2.  v8:= v11.`com.github.mikephil.charting.utils.ViewPortHandler.matrixBuffer` @type ^`float`[] @kind object;
  #L1dbff6.  v9:= 5I;
  #L1dbff8.  v3:= v8[v9];
  #L1dbffc.  v8:= v11.`com.github.mikephil.charting.utils.ViewPortHandler.matrixBuffer` @type ^`float`[] @kind object;
  #L1dc000.  v9:= 4I;
  #L1dc002.  v1:= v8[v9];
  #L1dc006.  v8:= v11.`com.github.mikephil.charting.utils.ViewPortHandler.mMinScaleX` @type ^`float`;
  #L1dc00a.  call temp:= `max`(v8, v0) @signature `Ljava/lang/Math;.max:(FF)F` @kind static;
  #L1dc010.  v8:= temp;
  #L1dc012.  v9:= v11.`com.github.mikephil.charting.utils.ViewPortHandler.mMaxScaleX` @type ^`float`;
  #L1dc016.  call temp:= `min`(v8, v9) @signature `Ljava/lang/Math;.min:(FF)F` @kind static;
  #L1dc01c.  v8:= temp;
  #L1dc01e.  v11.`com.github.mikephil.charting.utils.ViewPortHandler.mScaleX` @type ^`float` := v8;
  #L1dc022.  v8:= v11.`com.github.mikephil.charting.utils.ViewPortHandler.mMinScaleY` @type ^`float`;
  #L1dc026.  call temp:= `max`(v8, v1) @signature `Ljava/lang/Math;.max:(FF)F` @kind static;
  #L1dc02c.  v8:= temp;
  #L1dc02e.  v9:= v11.`com.github.mikephil.charting.utils.ViewPortHandler.mMaxScaleY` @type ^`float`;
  #L1dc032.  call temp:= `min`(v8, v9) @signature `Ljava/lang/Math;.min:(FF)F` @kind static;
  #L1dc038.  v8:= temp;
  #L1dc03a.  v11.`com.github.mikephil.charting.utils.ViewPortHandler.mScaleY` @type ^`float` := v8;
  #L1dc03e.  v7:= 0I;
  #L1dc040.  v4:= 0I;
  #L1dc042.  if v13 == 0 then goto L1dc056;
  #L1dc046.  call temp:= `width`(v13) @signature `Landroid/graphics/RectF;.width:()F` @kind virtual;
  #L1dc04c.  v7:= temp;
  #L1dc04e.  call temp:= `height`(v13) @signature `Landroid/graphics/RectF;.height:()F` @kind virtual;
  #L1dc054.  v4:= temp;
  #L1dc056.  v8:= -v7 @kind float;
  #L1dc058.  v9:= v11.`com.github.mikephil.charting.utils.ViewPortHandler.mScaleX` @type ^`float`;
  #L1dc05c.  v10:= 1.0F;
  #L1dc060.  v9:= v9 - v10 @kind float;
  #L1dc062.  v5:= v8 * v9 @kind float;
  #L1dc066.  v8:= v11.`com.github.mikephil.charting.utils.ViewPortHandler.mTransOffsetX` @type ^`float`;
  #L1dc06a.  v8:= v5 - v8 @kind float;
  #L1dc06e.  call temp:= `max`(v2, v8) @signature `Ljava/lang/Math;.max:(FF)F` @kind static;
  #L1dc074.  v8:= temp;
  #L1dc076.  v9:= v11.`com.github.mikephil.charting.utils.ViewPortHandler.mTransOffsetX` @type ^`float`;
  #L1dc07a.  call temp:= `min`(v8, v9) @signature `Ljava/lang/Math;.min:(FF)F` @kind static;
  #L1dc080.  v8:= temp;
  #L1dc082.  v11.`com.github.mikephil.charting.utils.ViewPortHandler.mTransX` @type ^`float` := v8;
  #L1dc086.  v8:= v11.`com.github.mikephil.charting.utils.ViewPortHandler.mScaleY` @type ^`float`;
  #L1dc08a.  v9:= 1.0F;
  #L1dc08e.  v8:= v8 - v9 @kind float;
  #L1dc090.  v6:= v4 * v8 @kind float;
  #L1dc094.  v8:= v11.`com.github.mikephil.charting.utils.ViewPortHandler.mTransOffsetY` @type ^`float`;
  #L1dc098.  v8:= v8 + v6 @kind float;
  #L1dc09a.  call temp:= `min`(v3, v8) @signature `Ljava/lang/Math;.min:(FF)F` @kind static;
  #L1dc0a0.  v8:= temp;
  #L1dc0a2.  v9:= v11.`com.github.mikephil.charting.utils.ViewPortHandler.mTransOffsetY` @type ^`float`;
  #L1dc0a6.  v9:= -v9 @kind float;
  #L1dc0a8.  call temp:= `max`(v8, v9) @signature `Ljava/lang/Math;.max:(FF)F` @kind static;
  #L1dc0ae.  v8:= temp;
  #L1dc0b0.  v11.`com.github.mikephil.charting.utils.ViewPortHandler.mTransY` @type ^`float` := v8;
  #L1dc0b4.  v8:= v11.`com.github.mikephil.charting.utils.ViewPortHandler.matrixBuffer` @type ^`float`[] @kind object;
  #L1dc0b8.  v9:= 2I;
  #L1dc0ba.  v10:= v11.`com.github.mikephil.charting.utils.ViewPortHandler.mTransX` @type ^`float`;
  #L1dc0be.  v8[v9]:= v10;
  #L1dc0c2.  v8:= v11.`com.github.mikephil.charting.utils.ViewPortHandler.matrixBuffer` @type ^`float`[] @kind object;
  #L1dc0c6.  v9:= 0I;
  #L1dc0c8.  v10:= v11.`com.github.mikephil.charting.utils.ViewPortHandler.mScaleX` @type ^`float`;
  #L1dc0cc.  v8[v9]:= v10;
  #L1dc0d0.  v8:= v11.`com.github.mikephil.charting.utils.ViewPortHandler.matrixBuffer` @type ^`float`[] @kind object;
  #L1dc0d4.  v9:= 5I;
  #L1dc0d6.  v10:= v11.`com.github.mikephil.charting.utils.ViewPortHandler.mTransY` @type ^`float`;
  #L1dc0da.  v8[v9]:= v10;
  #L1dc0de.  v8:= v11.`com.github.mikephil.charting.utils.ViewPortHandler.matrixBuffer` @type ^`float`[] @kind object;
  #L1dc0e2.  v9:= 4I;
  #L1dc0e4.  v10:= v11.`com.github.mikephil.charting.utils.ViewPortHandler.mScaleY` @type ^`float`;
  #L1dc0e8.  v8[v9]:= v10;
  #L1dc0ec.  v8:= v11.`com.github.mikephil.charting.utils.ViewPortHandler.matrixBuffer` @type ^`float`[] @kind object;
  #L1dc0f0.  call `setValues`(v12, v8) @signature `Landroid/graphics/Matrix;.setValues:([F)V` @kind virtual;
  #L1dc0f6.  return @kind void;
}
procedure `float` `offsetBottom`(`com.github.mikephil.charting.utils.ViewPortHandler` v2 @kind this) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.offsetBottom:()F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1dc108.  v0:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mChartHeight` @type ^`float`;
  #L1dc10c.  v1:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mContentRect` @type ^`android.graphics.RectF` @kind object;
  #L1dc110.  v1:= v1.`android.graphics.RectF.bottom` @type ^`float`;
  #L1dc114.  v0:= v0 - v1 @kind float;
  #L1dc116.  return v0;
}
procedure `float` `offsetLeft`(`com.github.mikephil.charting.utils.ViewPortHandler` v1 @kind this) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.offsetLeft:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dc128.  v0:= v1.`com.github.mikephil.charting.utils.ViewPortHandler.mContentRect` @type ^`android.graphics.RectF` @kind object;
  #L1dc12c.  v0:= v0.`android.graphics.RectF.left` @type ^`float`;
  #L1dc130.  return v0;
}
procedure `float` `offsetRight`(`com.github.mikephil.charting.utils.ViewPortHandler` v2 @kind this) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.offsetRight:()F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1dc144.  v0:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mChartWidth` @type ^`float`;
  #L1dc148.  v1:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mContentRect` @type ^`android.graphics.RectF` @kind object;
  #L1dc14c.  v1:= v1.`android.graphics.RectF.right` @type ^`float`;
  #L1dc150.  v0:= v0 - v1 @kind float;
  #L1dc152.  return v0;
}
procedure `float` `offsetTop`(`com.github.mikephil.charting.utils.ViewPortHandler` v1 @kind this) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.offsetTop:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dc164.  v0:= v1.`com.github.mikephil.charting.utils.ViewPortHandler.mContentRect` @type ^`android.graphics.RectF` @kind object;
  #L1dc168.  v0:= v0.`android.graphics.RectF.top` @type ^`float`;
  #L1dc16c.  return v0;
}
procedure `android.graphics.Matrix` `refresh`(`com.github.mikephil.charting.utils.ViewPortHandler` v2 @kind this, `android.graphics.Matrix` v3 @kind object @name `newMatrix`, `android.view.View` v4 @kind object @name `chart`, `boolean` v5 @name `invalidate`) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.refresh:(Landroid/graphics/Matrix;Landroid/view/View;Z)Landroid/graphics/Matrix;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1dc180.  v0:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mMatrixTouch` @type ^`android.graphics.Matrix` @kind object;
  #L1dc184.  call `set`(v0, v3) @signature `Landroid/graphics/Matrix;.set:(Landroid/graphics/Matrix;)V` @kind virtual;
  #L1dc18a.  v0:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mMatrixTouch` @type ^`android.graphics.Matrix` @kind object;
  #L1dc18e.  v1:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mContentRect` @type ^`android.graphics.RectF` @kind object;
  #L1dc192.  call `limitTransAndScale`(v2, v0, v1) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.limitTransAndScale:(Landroid/graphics/Matrix;Landroid/graphics/RectF;)V` @kind virtual;
  #L1dc198.  if v5 == 0 then goto L1dc1a2;
  #L1dc19c.  call `invalidate`(v4) @signature `Landroid/view/View;.invalidate:()V` @kind virtual;
  #L1dc1a2.  v0:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mMatrixTouch` @type ^`android.graphics.Matrix` @kind object;
  #L1dc1a6.  call `set`(v3, v0) @signature `Landroid/graphics/Matrix;.set:(Landroid/graphics/Matrix;)V` @kind virtual;
  #L1dc1ac.  return v3 @kind object;
}
procedure `void` `restrainViewPort`(`com.github.mikephil.charting.utils.ViewPortHandler` v3 @kind this, `float` v4 @name `offsetLeft`, `float` v5 @name `offsetTop`, `float` v6 @name `offsetRight`, `float` v7 @name `offsetBottom`) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.restrainViewPort:(FFFF)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1dc1c0.  v0:= v3.`com.github.mikephil.charting.utils.ViewPortHandler.mContentRect` @type ^`android.graphics.RectF` @kind object;
  #L1dc1c4.  v1:= v3.`com.github.mikephil.charting.utils.ViewPortHandler.mChartWidth` @type ^`float`;
  #L1dc1c8.  v1:= v1 - v6 @kind float;
  #L1dc1ca.  v2:= v3.`com.github.mikephil.charting.utils.ViewPortHandler.mChartHeight` @type ^`float`;
  #L1dc1ce.  v2:= v2 - v7 @kind float;
  #L1dc1d0.  call `set`(v0, v4, v5, v1, v2) @signature `Landroid/graphics/RectF;.set:(FFFF)V` @kind virtual;
  #L1dc1d6.  return @kind void;
}
procedure `void` `setChartDimens`(`com.github.mikephil.charting.utils.ViewPortHandler` v4 @kind this, `float` v5 @name `width`, `float` v6 @name `height`) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.setChartDimens:(FF)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1dc1e8.  call temp:= `offsetLeft`(v4) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.offsetLeft:()F` @kind virtual;
  #L1dc1ee.  v1:= temp;
  #L1dc1f0.  call temp:= `offsetTop`(v4) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.offsetTop:()F` @kind virtual;
  #L1dc1f6.  v3:= temp;
  #L1dc1f8.  call temp:= `offsetRight`(v4) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.offsetRight:()F` @kind virtual;
  #L1dc1fe.  v2:= temp;
  #L1dc200.  call temp:= `offsetBottom`(v4) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.offsetBottom:()F` @kind virtual;
  #L1dc206.  v0:= temp;
  #L1dc208.  v4.`com.github.mikephil.charting.utils.ViewPortHandler.mChartHeight` @type ^`float` := v6;
  #L1dc20c.  v4.`com.github.mikephil.charting.utils.ViewPortHandler.mChartWidth` @type ^`float` := v5;
  #L1dc210.  call `restrainViewPort`(v4, v1, v3, v2, v0) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.restrainViewPort:(FFFF)V` @kind virtual;
  #L1dc216.  return @kind void;
}
procedure `void` `setDragOffsetX`(`com.github.mikephil.charting.utils.ViewPortHandler` v1 @kind this, `float` v2 @name `offset`) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.setDragOffsetX:(F)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dc228.  call temp:= `convertDpToPixel`(v2) @signature `Lcom/github/mikephil/charting/utils/Utils;.convertDpToPixel:(F)F` @kind static;
  #L1dc22e.  v0:= temp;
  #L1dc230.  v1.`com.github.mikephil.charting.utils.ViewPortHandler.mTransOffsetX` @type ^`float` := v0;
  #L1dc234.  return @kind void;
}
procedure `void` `setDragOffsetY`(`com.github.mikephil.charting.utils.ViewPortHandler` v1 @kind this, `float` v2 @name `offset`) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.setDragOffsetY:(F)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dc248.  call temp:= `convertDpToPixel`(v2) @signature `Lcom/github/mikephil/charting/utils/Utils;.convertDpToPixel:(F)F` @kind static;
  #L1dc24e.  v0:= temp;
  #L1dc250.  v1.`com.github.mikephil.charting.utils.ViewPortHandler.mTransOffsetY` @type ^`float` := v0;
  #L1dc254.  return @kind void;
}
procedure `void` `setMaximumScaleX`(`com.github.mikephil.charting.utils.ViewPortHandler` v2 @kind this, `float` v3 @name `xScale`) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.setMaximumScaleX:(F)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1dc268.  v0:= 0I;
  #L1dc26a.  v0:= fcmpl(v3, v0);
  #L1dc26e.  if v0 != 0 then goto L1dc278;
  #L1dc272.  v3:= 2139095039I;
  #L1dc278.  v2.`com.github.mikephil.charting.utils.ViewPortHandler.mMaxScaleX` @type ^`float` := v3;
  #L1dc27c.  v0:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mMatrixTouch` @type ^`android.graphics.Matrix` @kind object;
  #L1dc280.  v1:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mContentRect` @type ^`android.graphics.RectF` @kind object;
  #L1dc284.  call `limitTransAndScale`(v2, v0, v1) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.limitTransAndScale:(Landroid/graphics/Matrix;Landroid/graphics/RectF;)V` @kind virtual;
  #L1dc28a.  return @kind void;
}
procedure `void` `setMaximumScaleY`(`com.github.mikephil.charting.utils.ViewPortHandler` v2 @kind this, `float` v3 @name `yScale`) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.setMaximumScaleY:(F)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1dc29c.  v0:= 0I;
  #L1dc29e.  v0:= fcmpl(v3, v0);
  #L1dc2a2.  if v0 != 0 then goto L1dc2ac;
  #L1dc2a6.  v3:= 2139095039I;
  #L1dc2ac.  v2.`com.github.mikephil.charting.utils.ViewPortHandler.mMaxScaleY` @type ^`float` := v3;
  #L1dc2b0.  v0:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mMatrixTouch` @type ^`android.graphics.Matrix` @kind object;
  #L1dc2b4.  v1:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mContentRect` @type ^`android.graphics.RectF` @kind object;
  #L1dc2b8.  call `limitTransAndScale`(v2, v0, v1) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.limitTransAndScale:(Landroid/graphics/Matrix;Landroid/graphics/RectF;)V` @kind virtual;
  #L1dc2be.  return @kind void;
}
procedure `void` `setMinMaxScaleX`(`com.github.mikephil.charting.utils.ViewPortHandler` v2 @kind this, `float` v3 @name `minScaleX`, `float` v4 @name `maxScaleX`) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.setMinMaxScaleX:(FF)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1dc2d0.  v0:= 1.0F;
  #L1dc2d4.  v0:= fcmpg(v3, v0);
  #L1dc2d8.  if v0 >= 0 then goto L1dc2e0;
  #L1dc2dc.  v3:= 1.0F;
  #L1dc2e0.  v0:= 0I;
  #L1dc2e2.  v0:= fcmpl(v4, v0);
  #L1dc2e6.  if v0 != 0 then goto L1dc2f0;
  #L1dc2ea.  v4:= 2139095039I;
  #L1dc2f0.  v2.`com.github.mikephil.charting.utils.ViewPortHandler.mMinScaleX` @type ^`float` := v3;
  #L1dc2f4.  v2.`com.github.mikephil.charting.utils.ViewPortHandler.mMaxScaleX` @type ^`float` := v4;
  #L1dc2f8.  v0:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mMatrixTouch` @type ^`android.graphics.Matrix` @kind object;
  #L1dc2fc.  v1:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mContentRect` @type ^`android.graphics.RectF` @kind object;
  #L1dc300.  call `limitTransAndScale`(v2, v0, v1) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.limitTransAndScale:(Landroid/graphics/Matrix;Landroid/graphics/RectF;)V` @kind virtual;
  #L1dc306.  return @kind void;
}
procedure `void` `setMinMaxScaleY`(`com.github.mikephil.charting.utils.ViewPortHandler` v2 @kind this, `float` v3 @name `minScaleY`, `float` v4 @name `maxScaleY`) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.setMinMaxScaleY:(FF)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1dc318.  v0:= 1.0F;
  #L1dc31c.  v0:= fcmpg(v3, v0);
  #L1dc320.  if v0 >= 0 then goto L1dc328;
  #L1dc324.  v3:= 1.0F;
  #L1dc328.  v0:= 0I;
  #L1dc32a.  v0:= fcmpl(v4, v0);
  #L1dc32e.  if v0 != 0 then goto L1dc338;
  #L1dc332.  v4:= 2139095039I;
  #L1dc338.  v2.`com.github.mikephil.charting.utils.ViewPortHandler.mMinScaleY` @type ^`float` := v3;
  #L1dc33c.  v2.`com.github.mikephil.charting.utils.ViewPortHandler.mMaxScaleY` @type ^`float` := v4;
  #L1dc340.  v0:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mMatrixTouch` @type ^`android.graphics.Matrix` @kind object;
  #L1dc344.  v1:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mContentRect` @type ^`android.graphics.RectF` @kind object;
  #L1dc348.  call `limitTransAndScale`(v2, v0, v1) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.limitTransAndScale:(Landroid/graphics/Matrix;Landroid/graphics/RectF;)V` @kind virtual;
  #L1dc34e.  return @kind void;
}
procedure `void` `setMinimumScaleX`(`com.github.mikephil.charting.utils.ViewPortHandler` v2 @kind this, `float` v3 @name `xScale`) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.setMinimumScaleX:(F)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1dc360.  v0:= 1.0F;
  #L1dc364.  v0:= fcmpg(v3, v0);
  #L1dc368.  if v0 >= 0 then goto L1dc370;
  #L1dc36c.  v3:= 1.0F;
  #L1dc370.  v2.`com.github.mikephil.charting.utils.ViewPortHandler.mMinScaleX` @type ^`float` := v3;
  #L1dc374.  v0:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mMatrixTouch` @type ^`android.graphics.Matrix` @kind object;
  #L1dc378.  v1:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mContentRect` @type ^`android.graphics.RectF` @kind object;
  #L1dc37c.  call `limitTransAndScale`(v2, v0, v1) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.limitTransAndScale:(Landroid/graphics/Matrix;Landroid/graphics/RectF;)V` @kind virtual;
  #L1dc382.  return @kind void;
}
procedure `void` `setMinimumScaleY`(`com.github.mikephil.charting.utils.ViewPortHandler` v2 @kind this, `float` v3 @name `yScale`) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.setMinimumScaleY:(F)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1dc394.  v0:= 1.0F;
  #L1dc398.  v0:= fcmpg(v3, v0);
  #L1dc39c.  if v0 >= 0 then goto L1dc3a4;
  #L1dc3a0.  v3:= 1.0F;
  #L1dc3a4.  v2.`com.github.mikephil.charting.utils.ViewPortHandler.mMinScaleY` @type ^`float` := v3;
  #L1dc3a8.  v0:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mMatrixTouch` @type ^`android.graphics.Matrix` @kind object;
  #L1dc3ac.  v1:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mContentRect` @type ^`android.graphics.RectF` @kind object;
  #L1dc3b0.  call `limitTransAndScale`(v2, v0, v1) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.limitTransAndScale:(Landroid/graphics/Matrix;Landroid/graphics/RectF;)V` @kind virtual;
  #L1dc3b6.  return @kind void;
}
procedure `android.graphics.Matrix` `setZoom`(`com.github.mikephil.charting.utils.ViewPortHandler` v1 @kind this, `float` v2 @name `scaleX`, `float` v3 @name `scaleY`) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.setZoom:(FF)Landroid/graphics/Matrix;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dc3c8.  v0:= new `android.graphics.Matrix`;
  #L1dc3cc.  call `<init>`(v0) @signature `Landroid/graphics/Matrix;.<init>:()V` @kind direct;
  #L1dc3d2.  call `setZoom`(v1, v2, v3, v0) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.setZoom:(FFLandroid/graphics/Matrix;)V` @kind virtual;
  #L1dc3d8.  return v0 @kind object;
}
procedure `android.graphics.Matrix` `setZoom`(`com.github.mikephil.charting.utils.ViewPortHandler` v2 @kind this, `float` v3 @name `scaleX`, `float` v4 @name `scaleY`, `float` v5 @name `x`, `float` v6 @name `y`) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.setZoom:(FFFF)Landroid/graphics/Matrix;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1dc3ec.  v0:= new `android.graphics.Matrix`;
  #L1dc3f0.  call `<init>`(v0) @signature `Landroid/graphics/Matrix;.<init>:()V` @kind direct;
  #L1dc3f6.  v1:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mMatrixTouch` @type ^`android.graphics.Matrix` @kind object;
  #L1dc3fa.  call `set`(v0, v1) @signature `Landroid/graphics/Matrix;.set:(Landroid/graphics/Matrix;)V` @kind virtual;
  #L1dc400.  call `setScale`(v0, v3, v4, v5, v6) @signature `Landroid/graphics/Matrix;.setScale:(FFFF)V` @kind virtual;
  #L1dc406.  return v0 @kind object;
}
procedure `void` `setZoom`(`com.github.mikephil.charting.utils.ViewPortHandler` v1 @kind this, `float` v2 @name `scaleX`, `float` v3 @name `scaleY`, `android.graphics.Matrix` v4 @kind object @name `outputMatrix`) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.setZoom:(FFLandroid/graphics/Matrix;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dc418.  call `reset`(v4) @signature `Landroid/graphics/Matrix;.reset:()V` @kind virtual;
  #L1dc41e.  v0:= v1.`com.github.mikephil.charting.utils.ViewPortHandler.mMatrixTouch` @type ^`android.graphics.Matrix` @kind object;
  #L1dc422.  call `set`(v4, v0) @signature `Landroid/graphics/Matrix;.set:(Landroid/graphics/Matrix;)V` @kind virtual;
  #L1dc428.  call `setScale`(v4, v2, v3) @signature `Landroid/graphics/Matrix;.setScale:(FF)V` @kind virtual;
  #L1dc42e.  return @kind void;
}
procedure `android.graphics.Matrix` `translate`(`com.github.mikephil.charting.utils.ViewPortHandler` v1 @kind this, `float`[] v2 @kind object @name `transformedPts`) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.translate:([F)Landroid/graphics/Matrix;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dc440.  v0:= new `android.graphics.Matrix`;
  #L1dc444.  call `<init>`(v0) @signature `Landroid/graphics/Matrix;.<init>:()V` @kind direct;
  #L1dc44a.  call `translate`(v1, v2, v0) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.translate:([FLandroid/graphics/Matrix;)V` @kind virtual;
  #L1dc450.  return v0 @kind object;
}
procedure `void` `translate`(`com.github.mikephil.charting.utils.ViewPortHandler` v4 @kind this, `float`[] v5 @kind object @name `transformedPts`, `android.graphics.Matrix` v6 @kind object @name `outputMatrix`) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.translate:([FLandroid/graphics/Matrix;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1dc464.  call `reset`(v6) @signature `Landroid/graphics/Matrix;.reset:()V` @kind virtual;
  #L1dc46a.  v2:= v4.`com.github.mikephil.charting.utils.ViewPortHandler.mMatrixTouch` @type ^`android.graphics.Matrix` @kind object;
  #L1dc46e.  call `set`(v6, v2) @signature `Landroid/graphics/Matrix;.set:(Landroid/graphics/Matrix;)V` @kind virtual;
  #L1dc474.  v2:= 0I;
  #L1dc476.  v2:= v5[v2];
  #L1dc47a.  call temp:= `offsetLeft`(v4) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.offsetLeft:()F` @kind virtual;
  #L1dc480.  v3:= temp;
  #L1dc482.  v0:= v2 - v3 @kind float;
  #L1dc486.  v2:= 1I;
  #L1dc488.  v2:= v5[v2];
  #L1dc48c.  call temp:= `offsetTop`(v4) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.offsetTop:()F` @kind virtual;
  #L1dc492.  v3:= temp;
  #L1dc494.  v1:= v2 - v3 @kind float;
  #L1dc498.  v2:= -v0 @kind float;
  #L1dc49a.  v3:= -v1 @kind float;
  #L1dc49c.  call temp:= `postTranslate`(v6, v2, v3) @signature `Landroid/graphics/Matrix;.postTranslate:(FF)Z` @kind virtual;
  #L1dc4a2.  return @kind void;
}
procedure `android.graphics.Matrix` `zoom`(`com.github.mikephil.charting.utils.ViewPortHandler` v1 @kind this, `float` v2 @name `scaleX`, `float` v3 @name `scaleY`) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.zoom:(FF)Landroid/graphics/Matrix;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dc4b4.  v0:= new `android.graphics.Matrix`;
  #L1dc4b8.  call `<init>`(v0) @signature `Landroid/graphics/Matrix;.<init>:()V` @kind direct;
  #L1dc4be.  call `zoom`(v1, v2, v3, v0) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.zoom:(FFLandroid/graphics/Matrix;)V` @kind virtual;
  #L1dc4c4.  return v0 @kind object;
}
procedure `android.graphics.Matrix` `zoom`(`com.github.mikephil.charting.utils.ViewPortHandler` v6 @kind this, `float` v7 @name `scaleX`, `float` v8 @name `scaleY`, `float` v9 @name `x`, `float` v10 @name `y`) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.zoom:(FFFF)Landroid/graphics/Matrix;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1dc4d8.  v5:= new `android.graphics.Matrix`;
  #L1dc4dc.  call `<init>`(v5) @signature `Landroid/graphics/Matrix;.<init>:()V` @kind direct;
  #L1dc4e2.  v0:= v6 @kind object;
  #L1dc4e4.  v1:= v7;
  #L1dc4e6.  v2:= v8;
  #L1dc4e8.  v3:= v9;
  #L1dc4ea.  v4:= v10;
  #L1dc4ec.  call `zoom`(v0, v1, v2, v3, v4, v5) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.zoom:(FFFFLandroid/graphics/Matrix;)V` @kind virtual;
  #L1dc4f2.  return v5 @kind object;
}
procedure `void` `zoom`(`com.github.mikephil.charting.utils.ViewPortHandler` v1 @kind this, `float` v2 @name `scaleX`, `float` v3 @name `scaleY`, `float` v4 @name `x`, `float` v5 @name `y`, `android.graphics.Matrix` v6 @kind object @name `outputMatrix`) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.zoom:(FFFFLandroid/graphics/Matrix;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dc504.  call `reset`(v6) @signature `Landroid/graphics/Matrix;.reset:()V` @kind virtual;
  #L1dc50a.  v0:= v1.`com.github.mikephil.charting.utils.ViewPortHandler.mMatrixTouch` @type ^`android.graphics.Matrix` @kind object;
  #L1dc50e.  call `set`(v6, v0) @signature `Landroid/graphics/Matrix;.set:(Landroid/graphics/Matrix;)V` @kind virtual;
  #L1dc514.  call temp:= `postScale`(v6, v2, v3, v4, v5) @signature `Landroid/graphics/Matrix;.postScale:(FFFF)Z` @kind virtual;
  #L1dc51a.  return @kind void;
}
procedure `void` `zoom`(`com.github.mikephil.charting.utils.ViewPortHandler` v1 @kind this, `float` v2 @name `scaleX`, `float` v3 @name `scaleY`, `android.graphics.Matrix` v4 @kind object @name `outputMatrix`) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.zoom:(FFLandroid/graphics/Matrix;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dc52c.  call `reset`(v4) @signature `Landroid/graphics/Matrix;.reset:()V` @kind virtual;
  #L1dc532.  v0:= v1.`com.github.mikephil.charting.utils.ViewPortHandler.mMatrixTouch` @type ^`android.graphics.Matrix` @kind object;
  #L1dc536.  call `set`(v4, v0) @signature `Landroid/graphics/Matrix;.set:(Landroid/graphics/Matrix;)V` @kind virtual;
  #L1dc53c.  call temp:= `postScale`(v4, v2, v3) @signature `Landroid/graphics/Matrix;.postScale:(FF)Z` @kind virtual;
  #L1dc542.  return @kind void;
}
procedure `android.graphics.Matrix` `zoomIn`(`com.github.mikephil.charting.utils.ViewPortHandler` v1 @kind this, `float` v2 @name `x`, `float` v3 @name `y`) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.zoomIn:(FF)Landroid/graphics/Matrix;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dc554.  v0:= new `android.graphics.Matrix`;
  #L1dc558.  call `<init>`(v0) @signature `Landroid/graphics/Matrix;.<init>:()V` @kind direct;
  #L1dc55e.  call `zoomIn`(v1, v2, v3, v0) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.zoomIn:(FFLandroid/graphics/Matrix;)V` @kind virtual;
  #L1dc564.  return v0 @kind object;
}
procedure `void` `zoomIn`(`com.github.mikephil.charting.utils.ViewPortHandler` v2 @kind this, `float` v3 @name `x`, `float` v4 @name `y`, `android.graphics.Matrix` v5 @kind object @name `outputMatrix`) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.zoomIn:(FFLandroid/graphics/Matrix;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1dc578.  v1:= 1068708659I;
  #L1dc57e.  call `reset`(v5) @signature `Landroid/graphics/Matrix;.reset:()V` @kind virtual;
  #L1dc584.  v0:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mMatrixTouch` @type ^`android.graphics.Matrix` @kind object;
  #L1dc588.  call `set`(v5, v0) @signature `Landroid/graphics/Matrix;.set:(Landroid/graphics/Matrix;)V` @kind virtual;
  #L1dc58e.  call temp:= `postScale`(v5, v1, v1, v3, v4) @signature `Landroid/graphics/Matrix;.postScale:(FFFF)Z` @kind virtual;
  #L1dc594.  return @kind void;
}
procedure `android.graphics.Matrix` `zoomOut`(`com.github.mikephil.charting.utils.ViewPortHandler` v1 @kind this, `float` v2 @name `x`, `float` v3 @name `y`) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.zoomOut:(FF)Landroid/graphics/Matrix;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1dc5a8.  v0:= new `android.graphics.Matrix`;
  #L1dc5ac.  call `<init>`(v0) @signature `Landroid/graphics/Matrix;.<init>:()V` @kind direct;
  #L1dc5b2.  call `zoomOut`(v1, v2, v3, v0) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.zoomOut:(FFLandroid/graphics/Matrix;)V` @kind virtual;
  #L1dc5b8.  return v0 @kind object;
}
procedure `void` `zoomOut`(`com.github.mikephil.charting.utils.ViewPortHandler` v2 @kind this, `float` v3 @name `x`, `float` v4 @name `y`, `android.graphics.Matrix` v5 @kind object @name `outputMatrix`) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.zoomOut:(FFLandroid/graphics/Matrix;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1dc5cc.  v1:= 1060320051I;
  #L1dc5d2.  call `reset`(v5) @signature `Landroid/graphics/Matrix;.reset:()V` @kind virtual;
  #L1dc5d8.  v0:= v2.`com.github.mikephil.charting.utils.ViewPortHandler.mMatrixTouch` @type ^`android.graphics.Matrix` @kind object;
  #L1dc5dc.  call `set`(v5, v0) @signature `Landroid/graphics/Matrix;.set:(Landroid/graphics/Matrix;)V` @kind virtual;
  #L1dc5e2.  call temp:= `postScale`(v5, v1, v1, v3, v4) @signature `Landroid/graphics/Matrix;.postScale:(FFFF)Z` @kind virtual;
  #L1dc5e8.  return @kind void;
}
