record `com.github.mikephil.charting.utils.MPPointF` @kind class @AccessFlag PUBLIC extends `com.github.mikephil.charting.utils.ObjectPool$Poolable` @kind class {
  `float` `com.github.mikephil.charting.utils.MPPointF.x` @AccessFlag PUBLIC;
  `float` `com.github.mikephil.charting.utils.MPPointF.y` @AccessFlag PUBLIC;
}
global `android.os.Parcelable$Creator` `@@com.github.mikephil.charting.utils.MPPointF.CREATOR` @AccessFlag PUBLIC_STATIC_FINAL;
global `com.github.mikephil.charting.utils.ObjectPool` `@@com.github.mikephil.charting.utils.MPPointF.pool` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lcom/github/mikephil/charting/utils/MPPointF;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L2bf054.  v2:= 0I;
  #L2bf056.  v0:= 32I;
  #L2bf05a.  v1:= new `com.github.mikephil.charting.utils.MPPointF`;
  #L2bf05e.  call `<init>`(v1, v2, v2) @signature `Lcom/github/mikephil/charting/utils/MPPointF;.<init>:(FF)V` @kind direct;
  #L2bf064.  call temp:= `create`(v0, v1) @signature `Lcom/github/mikephil/charting/utils/ObjectPool;.create:(ILcom/github/mikephil/charting/utils/ObjectPool$Poolable;)Lcom/github/mikephil/charting/utils/ObjectPool;` @kind static;
  #L2bf06a.  v0:= temp @kind object;
  #L2bf06c.  `@@com.github.mikephil.charting.utils.MPPointF.pool` @type ^`com.github.mikephil.charting.utils.ObjectPool` := v0 @kind object;
  #L2bf070.  v0:= `@@com.github.mikephil.charting.utils.MPPointF.pool` @type ^`com.github.mikephil.charting.utils.ObjectPool` @kind object;
  #L2bf074.  v1:= 0.5F;
  #L2bf078.  call `setReplenishPercentage`(v0, v1) @signature `Lcom/github/mikephil/charting/utils/ObjectPool;.setReplenishPercentage:(F)V` @kind virtual;
  #L2bf07e.  v0:= new `com.github.mikephil.charting.utils.MPPointF$1`;
  #L2bf082.  call `<init>`(v0) @signature `Lcom/github/mikephil/charting/utils/MPPointF$1;.<init>:()V` @kind direct;
  #L2bf088.  `@@com.github.mikephil.charting.utils.MPPointF.CREATOR` @type ^`android.os.Parcelable$Creator` := v0 @kind object;
  #L2bf08c.  return @kind void;
}
procedure `void` `<init>`(`com.github.mikephil.charting.utils.MPPointF` v0 @kind this, `float` v1 @name `x`, `float` v2 @name `y`) @signature `Lcom/github/mikephil/charting/utils/MPPointF;.<init>:(FF)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L2bf0a0.  call `<init>`(v0) @signature `Lcom/github/mikephil/charting/utils/ObjectPool$Poolable;.<init>:()V` @kind direct;
  #L2bf0a6.  v0.`com.github.mikephil.charting.utils.MPPointF.x` @type ^`float` := v1;
  #L2bf0aa.  v0.`com.github.mikephil.charting.utils.MPPointF.y` @type ^`float` := v2;
  #L2bf0ae.  return @kind void;
}
procedure `void` `<init>`(`com.github.mikephil.charting.utils.MPPointF` v0 @kind this, `float` v1 @name `x0`, `float` v2 @name `x1`, `com.github.mikephil.charting.utils.MPPointF$1` v3 @kind object @name `x2`) @signature `Lcom/github/mikephil/charting/utils/MPPointF;.<init>:(FFLcom/github/mikephil/charting/utils/MPPointF$1;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L2bf0c0.  call `<init>`(v0, v1, v2) @signature `Lcom/github/mikephil/charting/utils/MPPointF;.<init>:(FF)V` @kind direct;
  #L2bf0c6.  return @kind void;
}
procedure `com.github.mikephil.charting.utils.MPPointF` `getInstance`(`float` v2 @name `x`, `float` v3 @name `y`) @signature `Lcom/github/mikephil/charting/utils/MPPointF;.getInstance:(FF)Lcom/github/mikephil/charting/utils/MPPointF;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2bf0d8.  v1:= `@@com.github.mikephil.charting.utils.MPPointF.pool` @type ^`com.github.mikephil.charting.utils.ObjectPool` @kind object;
  #L2bf0dc.  call temp:= `get`(v1) @signature `Lcom/github/mikephil/charting/utils/ObjectPool;.get:()Lcom/github/mikephil/charting/utils/ObjectPool$Poolable;` @kind virtual;
  #L2bf0e2.  v0:= temp @kind object;
  #L2bf0e4.  v0:= (`com.github.mikephil.charting.utils.MPPointF`) v0 @kind object;
  #L2bf0e8.  v0.`com.github.mikephil.charting.utils.MPPointF.x` @type ^`float` := v2;
  #L2bf0ec.  v0.`com.github.mikephil.charting.utils.MPPointF.y` @type ^`float` := v3;
  #L2bf0f0.  return v0 @kind object;
}
procedure `void` `recycleInstance`(`com.github.mikephil.charting.utils.MPPointF` v1 @kind object @name `instance`) @signature `Lcom/github/mikephil/charting/utils/MPPointF;.recycleInstance:(Lcom/github/mikephil/charting/utils/MPPointF;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2bf104.  v0:= `@@com.github.mikephil.charting.utils.MPPointF.pool` @type ^`com.github.mikephil.charting.utils.ObjectPool` @kind object;
  #L2bf108.  call `recycle`(v0, v1) @signature `Lcom/github/mikephil/charting/utils/ObjectPool;.recycle:(Lcom/github/mikephil/charting/utils/ObjectPool$Poolable;)V` @kind virtual;
  #L2bf10e.  return @kind void;
}
procedure `void` `recycleInstances`(`java.util.List` v1 @kind object) @signature `Lcom/github/mikephil/charting/utils/MPPointF;.recycleInstances:(Ljava/util/List;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2bf120.  v0:= `@@com.github.mikephil.charting.utils.MPPointF.pool` @type ^`com.github.mikephil.charting.utils.ObjectPool` @kind object;
  #L2bf124.  call `recycle`(v0, v1) @signature `Lcom/github/mikephil/charting/utils/ObjectPool;.recycle:(Ljava/util/List;)V` @kind virtual;
  #L2bf12a.  return @kind void;
}
procedure `float` `getX`(`com.github.mikephil.charting.utils.MPPointF` v1 @kind this) @signature `Lcom/github/mikephil/charting/utils/MPPointF;.getX:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bf13c.  v0:= v1.`com.github.mikephil.charting.utils.MPPointF.x` @type ^`float`;
  #L2bf140.  return v0;
}
procedure `float` `getY`(`com.github.mikephil.charting.utils.MPPointF` v1 @kind this) @signature `Lcom/github/mikephil/charting/utils/MPPointF;.getY:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bf154.  v0:= v1.`com.github.mikephil.charting.utils.MPPointF.y` @type ^`float`;
  #L2bf158.  return v0;
}
procedure `com.github.mikephil.charting.utils.ObjectPool$Poolable` `instantiate`(`com.github.mikephil.charting.utils.MPPointF` v2 @kind this) @signature `Lcom/github/mikephil/charting/utils/MPPointF;.instantiate:()Lcom/github/mikephil/charting/utils/ObjectPool$Poolable;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L2bf16c.  v1:= 0I;
  #L2bf16e.  v0:= new `com.github.mikephil.charting.utils.MPPointF`;
  #L2bf172.  call `<init>`(v0, v1, v1) @signature `Lcom/github/mikephil/charting/utils/MPPointF;.<init>:(FF)V` @kind direct;
  #L2bf178.  return v0 @kind object;
}
procedure `void` `my_readFromParcel`(`com.github.mikephil.charting.utils.MPPointF` v1 @kind this, `android.os.Parcel` v2 @kind object @name `in`) @signature `Lcom/github/mikephil/charting/utils/MPPointF;.my_readFromParcel:(Landroid/os/Parcel;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2bf18c.  call temp:= `readFloat`(v2) @signature `Landroid/os/Parcel;.readFloat:()F` @kind virtual;
  #L2bf192.  v0:= temp;
  #L2bf194.  v1.`com.github.mikephil.charting.utils.MPPointF.x` @type ^`float` := v0;
  #L2bf198.  call temp:= `readFloat`(v2) @signature `Landroid/os/Parcel;.readFloat:()F` @kind virtual;
  #L2bf19e.  v0:= temp;
  #L2bf1a0.  v1.`com.github.mikephil.charting.utils.MPPointF.y` @type ^`float` := v0;
  #L2bf1a4.  return @kind void;
}
