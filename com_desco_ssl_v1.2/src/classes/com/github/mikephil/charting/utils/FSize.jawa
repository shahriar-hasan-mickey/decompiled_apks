record `com.github.mikephil.charting.utils.FSize` @kind class @AccessFlag PUBLIC_FINAL extends `com.github.mikephil.charting.utils.ObjectPool$Poolable` @kind class {
  `float` `com.github.mikephil.charting.utils.FSize.height` @AccessFlag PUBLIC;
  `float` `com.github.mikephil.charting.utils.FSize.width` @AccessFlag PUBLIC;
}
global `com.github.mikephil.charting.utils.ObjectPool` `@@com.github.mikephil.charting.utils.FSize.pool` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lcom/github/mikephil/charting/utils/FSize;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L2bed58.  v2:= 0I;
  #L2bed5a.  v0:= 256I;
  #L2bed5e.  v1:= new `com.github.mikephil.charting.utils.FSize`;
  #L2bed62.  call `<init>`(v1, v2, v2) @signature `Lcom/github/mikephil/charting/utils/FSize;.<init>:(FF)V` @kind direct;
  #L2bed68.  call temp:= `create`(v0, v1) @signature `Lcom/github/mikephil/charting/utils/ObjectPool;.create:(ILcom/github/mikephil/charting/utils/ObjectPool$Poolable;)Lcom/github/mikephil/charting/utils/ObjectPool;` @kind static;
  #L2bed6e.  v0:= temp @kind object;
  #L2bed70.  `@@com.github.mikephil.charting.utils.FSize.pool` @type ^`com.github.mikephil.charting.utils.ObjectPool` := v0 @kind object;
  #L2bed74.  v0:= `@@com.github.mikephil.charting.utils.FSize.pool` @type ^`com.github.mikephil.charting.utils.ObjectPool` @kind object;
  #L2bed78.  v1:= 0.5F;
  #L2bed7c.  call `setReplenishPercentage`(v0, v1) @signature `Lcom/github/mikephil/charting/utils/ObjectPool;.setReplenishPercentage:(F)V` @kind virtual;
  #L2bed82.  return @kind void;
}
procedure `void` `<init>`(`com.github.mikephil.charting.utils.FSize` v0 @kind this, `float` v1 @name `width`, `float` v2 @name `height`) @signature `Lcom/github/mikephil/charting/utils/FSize;.<init>:(FF)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L2bed94.  call `<init>`(v0) @signature `Lcom/github/mikephil/charting/utils/ObjectPool$Poolable;.<init>:()V` @kind direct;
  #L2bed9a.  v0.`com.github.mikephil.charting.utils.FSize.width` @type ^`float` := v1;
  #L2bed9e.  v0.`com.github.mikephil.charting.utils.FSize.height` @type ^`float` := v2;
  #L2beda2.  return @kind void;
}
procedure `com.github.mikephil.charting.utils.FSize` `getInstance`(`float` v2 @name `width`, `float` v3 @name `height`) @signature `Lcom/github/mikephil/charting/utils/FSize;.getInstance:(FF)Lcom/github/mikephil/charting/utils/FSize;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2bedb4.  v1:= `@@com.github.mikephil.charting.utils.FSize.pool` @type ^`com.github.mikephil.charting.utils.ObjectPool` @kind object;
  #L2bedb8.  call temp:= `get`(v1) @signature `Lcom/github/mikephil/charting/utils/ObjectPool;.get:()Lcom/github/mikephil/charting/utils/ObjectPool$Poolable;` @kind virtual;
  #L2bedbe.  v0:= temp @kind object;
  #L2bedc0.  v0:= (`com.github.mikephil.charting.utils.FSize`) v0 @kind object;
  #L2bedc4.  v0.`com.github.mikephil.charting.utils.FSize.width` @type ^`float` := v2;
  #L2bedc8.  v0.`com.github.mikephil.charting.utils.FSize.height` @type ^`float` := v3;
  #L2bedcc.  return v0 @kind object;
}
procedure `void` `recycleInstance`(`com.github.mikephil.charting.utils.FSize` v1 @kind object @name `instance`) @signature `Lcom/github/mikephil/charting/utils/FSize;.recycleInstance:(Lcom/github/mikephil/charting/utils/FSize;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2bede0.  v0:= `@@com.github.mikephil.charting.utils.FSize.pool` @type ^`com.github.mikephil.charting.utils.ObjectPool` @kind object;
  #L2bede4.  call `recycle`(v0, v1) @signature `Lcom/github/mikephil/charting/utils/ObjectPool;.recycle:(Lcom/github/mikephil/charting/utils/ObjectPool$Poolable;)V` @kind virtual;
  #L2bedea.  return @kind void;
}
procedure `void` `recycleInstances`(`java.util.List` v1 @kind object) @signature `Lcom/github/mikephil/charting/utils/FSize;.recycleInstances:(Ljava/util/List;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2bedfc.  v0:= `@@com.github.mikephil.charting.utils.FSize.pool` @type ^`com.github.mikephil.charting.utils.ObjectPool` @kind object;
  #L2bee00.  call `recycle`(v0, v1) @signature `Lcom/github/mikephil/charting/utils/ObjectPool;.recycle:(Ljava/util/List;)V` @kind virtual;
  #L2bee06.  return @kind void;
}
procedure `boolean` `equals`(`com.github.mikephil.charting.utils.FSize` v5 @kind this, `java.lang.Object` v6 @kind object @name `obj`) @signature `Lcom/github/mikephil/charting/utils/FSize;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2bee18.  v1:= 1I;
  #L2bee1a.  v2:= 0I;
  #L2bee1c.  if v6 != 0 then goto L2bee22;
  #L2bee20.  return v2;
  #L2bee22.  if v5 != v6 then goto L2bee2a;
  #L2bee26.  v2:= v1;
  #L2bee28.  goto L2bee20;
  #L2bee2a.  v3:= instanceof @variable v6 @type ^`com.github.mikephil.charting.utils.FSize` @kind boolean;
  #L2bee2e.  if v3 == 0 then goto L2bee20;
  #L2bee32.  v0:= v6 @kind object;
  #L2bee34.  v0:= (`com.github.mikephil.charting.utils.FSize`) v0 @kind object;
  #L2bee38.  v3:= v5.`com.github.mikephil.charting.utils.FSize.width` @type ^`float`;
  #L2bee3c.  v4:= v0.`com.github.mikephil.charting.utils.FSize.width` @type ^`float`;
  #L2bee40.  v3:= fcmpl(v3, v4);
  #L2bee44.  if v3 != 0 then goto L2bee5c;
  #L2bee48.  v3:= v5.`com.github.mikephil.charting.utils.FSize.height` @type ^`float`;
  #L2bee4c.  v4:= v0.`com.github.mikephil.charting.utils.FSize.height` @type ^`float`;
  #L2bee50.  v3:= fcmpl(v3, v4);
  #L2bee54.  if v3 != 0 then goto L2bee5c;
  #L2bee58.  v2:= v1;
  #L2bee5a.  goto L2bee20;
  #L2bee5c.  v1:= v2;
  #L2bee5e.  goto L2bee58;
}
procedure `int` `hashCode`(`com.github.mikephil.charting.utils.FSize` v2 @kind this) @signature `Lcom/github/mikephil/charting/utils/FSize;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2bee70.  v0:= v2.`com.github.mikephil.charting.utils.FSize.width` @type ^`float`;
  #L2bee74.  call temp:= `floatToIntBits`(v0) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L2bee7a.  v0:= temp;
  #L2bee7c.  v1:= v2.`com.github.mikephil.charting.utils.FSize.height` @type ^`float`;
  #L2bee80.  call temp:= `floatToIntBits`(v1) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L2bee86.  v1:= temp;
  #L2bee88.  v0:= v0 ^~ v1 @kind int;
  #L2bee8a.  return v0;
}
procedure `com.github.mikephil.charting.utils.ObjectPool$Poolable` `instantiate`(`com.github.mikephil.charting.utils.FSize` v2 @kind this) @signature `Lcom/github/mikephil/charting/utils/FSize;.instantiate:()Lcom/github/mikephil/charting/utils/ObjectPool$Poolable;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L2bee9c.  v1:= 0I;
  #L2bee9e.  v0:= new `com.github.mikephil.charting.utils.FSize`;
  #L2beea2.  call `<init>`(v0, v1, v1) @signature `Lcom/github/mikephil/charting/utils/FSize;.<init>:(FF)V` @kind direct;
  #L2beea8.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`com.github.mikephil.charting.utils.FSize` v2 @kind this) @signature `Lcom/github/mikephil/charting/utils/FSize;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2beebc.  v0:= new `java.lang.StringBuilder`;
  #L2beec0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2beec6.  v1:= v2.`com.github.mikephil.charting.utils.FSize.width` @type ^`float`;
  #L2beeca.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(F)Ljava/lang/StringBuilder;` @kind virtual;
  #L2beed0.  v0:= temp @kind object;
  #L2beed2.  v1:= "x" @kind object;
  #L2beed6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2beedc.  v0:= temp @kind object;
  #L2beede.  v1:= v2.`com.github.mikephil.charting.utils.FSize.height` @type ^`float`;
  #L2beee2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(F)Ljava/lang/StringBuilder;` @kind virtual;
  #L2beee8.  v0:= temp @kind object;
  #L2beeea.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2beef0.  v0:= temp @kind object;
  #L2beef2.  return v0 @kind object;
}
