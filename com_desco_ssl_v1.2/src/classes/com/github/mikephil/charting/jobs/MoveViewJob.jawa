record `com.github.mikephil.charting.jobs.MoveViewJob` @kind class @AccessFlag PUBLIC extends `com.github.mikephil.charting.jobs.ViewPortJob` @kind class {
}
global `com.github.mikephil.charting.utils.ObjectPool` `@@com.github.mikephil.charting.jobs.MoveViewJob.pool` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lcom/github/mikephil/charting/jobs/MoveViewJob;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L32da88.  v2:= 0I;
  #L32da8a.  v1:= 0I;
  #L32da8c.  v6:= 2I;
  #L32da8e.  v0:= new `com.github.mikephil.charting.jobs.MoveViewJob`;
  #L32da92.  v3:= v2;
  #L32da94.  v4:= v1 @kind object;
  #L32da96.  v5:= v1 @kind object;
  #L32da98.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lcom/github/mikephil/charting/jobs/MoveViewJob;.<init>:(Lcom/github/mikephil/charting/utils/ViewPortHandler;FFLcom/github/mikephil/charting/utils/Transformer;Landroid/view/View;)V` @kind direct;
  #L32da9e.  call temp:= `create`(v6, v0) @signature `Lcom/github/mikephil/charting/utils/ObjectPool;.create:(ILcom/github/mikephil/charting/utils/ObjectPool$Poolable;)Lcom/github/mikephil/charting/utils/ObjectPool;` @kind static;
  #L32daa4.  v0:= temp @kind object;
  #L32daa6.  `@@com.github.mikephil.charting.jobs.MoveViewJob.pool` @type ^`com.github.mikephil.charting.utils.ObjectPool` := v0 @kind object;
  #L32daaa.  v0:= `@@com.github.mikephil.charting.jobs.MoveViewJob.pool` @type ^`com.github.mikephil.charting.utils.ObjectPool` @kind object;
  #L32daae.  v1:= 0.5F;
  #L32dab2.  call `setReplenishPercentage`(v0, v1) @signature `Lcom/github/mikephil/charting/utils/ObjectPool;.setReplenishPercentage:(F)V` @kind virtual;
  #L32dab8.  return @kind void;
}
procedure `void` `<init>`(`com.github.mikephil.charting.jobs.MoveViewJob` v0 @kind this, `com.github.mikephil.charting.utils.ViewPortHandler` v1 @kind object @name `viewPortHandler`, `float` v2 @name `xValue`, `float` v3 @name `yValue`, `com.github.mikephil.charting.utils.Transformer` v4 @kind object @name `trans`, `android.view.View` v5 @kind object @name `v`) @signature `Lcom/github/mikephil/charting/jobs/MoveViewJob;.<init>:(Lcom/github/mikephil/charting/utils/ViewPortHandler;FFLcom/github/mikephil/charting/utils/Transformer;Landroid/view/View;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L32dacc.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lcom/github/mikephil/charting/jobs/ViewPortJob;.<init>:(Lcom/github/mikephil/charting/utils/ViewPortHandler;FFLcom/github/mikephil/charting/utils/Transformer;Landroid/view/View;)V` @kind direct;
  #L32dad2.  return @kind void;
}
procedure `com.github.mikephil.charting.jobs.MoveViewJob` `getInstance`(`com.github.mikephil.charting.utils.ViewPortHandler` v2 @kind object @name `viewPortHandler`, `float` v3 @name `xValue`, `float` v4 @name `yValue`, `com.github.mikephil.charting.utils.Transformer` v5 @kind object @name `trans`, `android.view.View` v6 @kind object @name `v`) @signature `Lcom/github/mikephil/charting/jobs/MoveViewJob;.getInstance:(Lcom/github/mikephil/charting/utils/ViewPortHandler;FFLcom/github/mikephil/charting/utils/Transformer;Landroid/view/View;)Lcom/github/mikephil/charting/jobs/MoveViewJob;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L32dae4.  v1:= `@@com.github.mikephil.charting.jobs.MoveViewJob.pool` @type ^`com.github.mikephil.charting.utils.ObjectPool` @kind object;
  #L32dae8.  call temp:= `get`(v1) @signature `Lcom/github/mikephil/charting/utils/ObjectPool;.get:()Lcom/github/mikephil/charting/utils/ObjectPool$Poolable;` @kind virtual;
  #L32daee.  v0:= temp @kind object;
  #L32daf0.  v0:= (`com.github.mikephil.charting.jobs.MoveViewJob`) v0 @kind object;
  #L32daf4.  v0.`com.github.mikephil.charting.jobs.MoveViewJob.mViewPortHandler` @type ^`com.github.mikephil.charting.utils.ViewPortHandler` := v2 @kind object;
  #L32daf8.  v0.`com.github.mikephil.charting.jobs.MoveViewJob.xValue` @type ^`float` := v3;
  #L32dafc.  v0.`com.github.mikephil.charting.jobs.MoveViewJob.yValue` @type ^`float` := v4;
  #L32db00.  v0.`com.github.mikephil.charting.jobs.MoveViewJob.mTrans` @type ^`com.github.mikephil.charting.utils.Transformer` := v5 @kind object;
  #L32db04.  v0.`com.github.mikephil.charting.jobs.MoveViewJob.view` @type ^`android.view.View` := v6 @kind object;
  #L32db08.  return v0 @kind object;
}
procedure `void` `recycleInstance`(`com.github.mikephil.charting.jobs.MoveViewJob` v1 @kind object @name `instance`) @signature `Lcom/github/mikephil/charting/jobs/MoveViewJob;.recycleInstance:(Lcom/github/mikephil/charting/jobs/MoveViewJob;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L32db1c.  v0:= `@@com.github.mikephil.charting.jobs.MoveViewJob.pool` @type ^`com.github.mikephil.charting.utils.ObjectPool` @kind object;
  #L32db20.  call `recycle`(v0, v1) @signature `Lcom/github/mikephil/charting/utils/ObjectPool;.recycle:(Lcom/github/mikephil/charting/utils/ObjectPool$Poolable;)V` @kind virtual;
  #L32db26.  return @kind void;
}
procedure `com.github.mikephil.charting.utils.ObjectPool$Poolable` `instantiate`(`com.github.mikephil.charting.jobs.MoveViewJob` v6 @kind this) @signature `Lcom/github/mikephil/charting/jobs/MoveViewJob;.instantiate:()Lcom/github/mikephil/charting/utils/ObjectPool$Poolable;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L32db38.  v0:= new `com.github.mikephil.charting.jobs.MoveViewJob`;
  #L32db3c.  v1:= v6.`com.github.mikephil.charting.jobs.MoveViewJob.mViewPortHandler` @type ^`com.github.mikephil.charting.utils.ViewPortHandler` @kind object;
  #L32db40.  v2:= v6.`com.github.mikephil.charting.jobs.MoveViewJob.xValue` @type ^`float`;
  #L32db44.  v3:= v6.`com.github.mikephil.charting.jobs.MoveViewJob.yValue` @type ^`float`;
  #L32db48.  v4:= v6.`com.github.mikephil.charting.jobs.MoveViewJob.mTrans` @type ^`com.github.mikephil.charting.utils.Transformer` @kind object;
  #L32db4c.  v5:= v6.`com.github.mikephil.charting.jobs.MoveViewJob.view` @type ^`android.view.View` @kind object;
  #L32db50.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lcom/github/mikephil/charting/jobs/MoveViewJob;.<init>:(Lcom/github/mikephil/charting/utils/ViewPortHandler;FFLcom/github/mikephil/charting/utils/Transformer;Landroid/view/View;)V` @kind direct;
  #L32db56.  return v0 @kind object;
}
procedure `void` `run`(`com.github.mikephil.charting.jobs.MoveViewJob` v3 @kind this) @signature `Lcom/github/mikephil/charting/jobs/MoveViewJob;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L32db68.  v0:= v3.`com.github.mikephil.charting.jobs.MoveViewJob.pts` @type ^`float`[] @kind object;
  #L32db6c.  v1:= 0I;
  #L32db6e.  v2:= v3.`com.github.mikephil.charting.jobs.MoveViewJob.xValue` @type ^`float`;
  #L32db72.  v0[v1]:= v2;
  #L32db76.  v0:= v3.`com.github.mikephil.charting.jobs.MoveViewJob.pts` @type ^`float`[] @kind object;
  #L32db7a.  v1:= 1I;
  #L32db7c.  v2:= v3.`com.github.mikephil.charting.jobs.MoveViewJob.yValue` @type ^`float`;
  #L32db80.  v0[v1]:= v2;
  #L32db84.  v0:= v3.`com.github.mikephil.charting.jobs.MoveViewJob.mTrans` @type ^`com.github.mikephil.charting.utils.Transformer` @kind object;
  #L32db88.  v1:= v3.`com.github.mikephil.charting.jobs.MoveViewJob.pts` @type ^`float`[] @kind object;
  #L32db8c.  call `pointValuesToPixel`(v0, v1) @signature `Lcom/github/mikephil/charting/utils/Transformer;.pointValuesToPixel:([F)V` @kind virtual;
  #L32db92.  v0:= v3.`com.github.mikephil.charting.jobs.MoveViewJob.mViewPortHandler` @type ^`com.github.mikephil.charting.utils.ViewPortHandler` @kind object;
  #L32db96.  v1:= v3.`com.github.mikephil.charting.jobs.MoveViewJob.pts` @type ^`float`[] @kind object;
  #L32db9a.  v2:= v3.`com.github.mikephil.charting.jobs.MoveViewJob.view` @type ^`android.view.View` @kind object;
  #L32db9e.  call `centerViewPort`(v0, v1, v2) @signature `Lcom/github/mikephil/charting/utils/ViewPortHandler;.centerViewPort:([FLandroid/view/View;)V` @kind virtual;
  #L32dba4.  call `recycleInstance`(v3) @signature `Lcom/github/mikephil/charting/jobs/MoveViewJob;.recycleInstance:(Lcom/github/mikephil/charting/jobs/MoveViewJob;)V` @kind static;
  #L32dbaa.  return @kind void;
}
