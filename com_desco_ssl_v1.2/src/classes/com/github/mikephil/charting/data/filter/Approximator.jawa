record `com.github.mikephil.charting.data.filter.Approximator` @kind class @AccessFlag PUBLIC {
}
procedure `void` `<init>`(`com.github.mikephil.charting.data.filter.Approximator` v0 @kind this) @signature `Lcom/github/mikephil/charting/data/filter/Approximator;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1d8150.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1d8156.  return @kind void;
}
procedure `float`[] `concat`(`com.github.mikephil.charting.data.filter.Approximator` v10 @kind this, `float`[][] v11 @kind object @name `arrays`) @signature `Lcom/github/mikephil/charting/data/filter/Approximator;.concat:([[F)[F` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L1d8168.  v6:= 0I;
  #L1d816a.  v2:= 0I;
  #L1d816c.  v7:= length @variable v11;
  #L1d816e.  v5:= v6;
  #L1d8170.  if v5 >= v7 then goto L1d8182;
  #L1d8174.  v0:= v11[v5] @kind object;
  #L1d8178.  v8:= length @variable v0;
  #L1d817a.  v2:= v2 + v8 @kind int;
  #L1d817c.  v5:= v5 + 1;
  #L1d8180.  goto L1d8170;
  #L1d8182.  v4:= new `float`[v2];
  #L1d8186.  v3:= 0I;
  #L1d8188.  v8:= length @variable v11;
  #L1d818a.  v7:= v6;
  #L1d818c.  if v7 >= v8 then goto L1d81b6;
  #L1d8190.  v0:= v11[v7] @kind object;
  #L1d8194.  v9:= length @variable v0;
  #L1d8196.  v5:= v6;
  #L1d8198.  if v5 >= v9 then goto L1d81ae;
  #L1d819c.  v1:= v0[v5];
  #L1d81a0.  v4[v3]:= v1;
  #L1d81a4.  v3:= v3 + 1;
  #L1d81a8.  v5:= v5 + 1;
  #L1d81ac.  goto L1d8198;
  #L1d81ae.  v5:= v7 + 1;
  #L1d81b2.  v7:= v5;
  #L1d81b4.  goto L1d818c;
  #L1d81b6.  return v4 @kind object;
}
procedure `float`[] `reduceWithDouglasPeucker`(`com.github.mikephil.charting.data.filter.Approximator` v15 @kind this, `float`[] v16 @kind object @name `points`, `float` v17 @name `tolerance`) @signature `Lcom/github/mikephil/charting/data/filter/Approximator;.reduceWithDouglasPeucker:([FF)[F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L1d81c8.  v9:= 0I;
  #L1d81ca.  v8:= 0I;
  #L1d81cc.  v1:= new `com.github.mikephil.charting.data.filter.Approximator$Line`;
  #L1d81d0.  v2:= 0I;
  #L1d81d2.  v3:= v16[v2];
  #L1d81d6.  v2:= 1I;
  #L1d81d8.  v4:= v16[v2];
  #L1d81dc.  v0:= v16 @kind object;
  #L1d81e0.  v2:= length @variable v0;
  #L1d81e2.  v2:= v2 + -2;
  #L1d81e6.  v5:= v16[v2];
  #L1d81ea.  v0:= v16 @kind object;
  #L1d81ee.  v2:= length @variable v0;
  #L1d81f0.  v2:= v2 + -1;
  #L1d81f4.  v6:= v16[v2];
  #L1d81f8.  v2:= v15 @kind object;
  #L1d81fa.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lcom/github/mikephil/charting/data/filter/Approximator$Line;.<init>:(Lcom/github/mikephil/charting/data/filter/Approximator;FFFF)V` @kind direct;
  #L1d8200.  v10:= 2I;
  #L1d8202.  v0:= v16 @kind object;
  #L1d8206.  v2:= length @variable v0;
  #L1d8208.  v2:= v2 + -2;
  #L1d820c.  if v10 >= v2 then goto L1d8236;
  #L1d8210.  v2:= v16[v10];
  #L1d8214.  v3:= v10 + 1;
  #L1d8218.  v3:= v16[v3];
  #L1d821c.  call temp:= `distance`(v1, v2, v3) @signature `Lcom/github/mikephil/charting/data/filter/Approximator$Line;.distance:(FF)F` @kind virtual;
  #L1d8222.  v7:= temp;
  #L1d8224.  v2:= fcmpl(v7, v8);
  #L1d8228.  if v2 <= 0 then goto L1d8230;
  #L1d822c.  v8:= v7;
  #L1d822e.  v9:= v10;
  #L1d8230.  v10:= v10 + 2;
  #L1d8234.  goto L1d8202;
  #L1d8236.  v2:= fcmpl(v8, v17);
  #L1d823a.  if v2 <= 0 then goto L1d82a4;
  #L1d823e.  v2:= 0I;
  #L1d8240.  v3:= v9 + 2;
  #L1d8244.  v0:= v16 @kind object;
  #L1d8248.  call temp:= `copyOfRange`(v0, v2, v3) @signature `Ljava/util/Arrays;.copyOfRange:([FII)[F` @kind static;
  #L1d824e.  v2:= temp @kind object;
  #L1d8250.  v0:= v17;
  #L1d8254.  call temp:= `reduceWithDouglasPeucker`(v15, v2, v0) @signature `Lcom/github/mikephil/charting/data/filter/Approximator;.reduceWithDouglasPeucker:([FF)[F` @kind virtual;
  #L1d825a.  v11:= temp @kind object;
  #L1d825c.  v0:= v16 @kind object;
  #L1d8260.  v2:= length @variable v0;
  #L1d8262.  v0:= v16 @kind object;
  #L1d8266.  call temp:= `copyOfRange`(v0, v9, v2) @signature `Ljava/util/Arrays;.copyOfRange:([FII)[F` @kind static;
  #L1d826c.  v2:= temp @kind object;
  #L1d826e.  v0:= v17;
  #L1d8272.  call temp:= `reduceWithDouglasPeucker`(v15, v2, v0) @signature `Lcom/github/mikephil/charting/data/filter/Approximator;.reduceWithDouglasPeucker:([FF)[F` @kind virtual;
  #L1d8278.  v12:= temp @kind object;
  #L1d827a.  v13:= v11 @kind object;
  #L1d827c.  v2:= 2I;
  #L1d827e.  v3:= length @variable v12;
  #L1d8280.  call temp:= `copyOfRange`(v12, v2, v3) @signature `Ljava/util/Arrays;.copyOfRange:([FII)[F` @kind static;
  #L1d8286.  v14:= temp @kind object;
  #L1d8288.  v2:= 2I;
  #L1d828a.  v2:= new `float`[][v2];
  #L1d828e.  v3:= 0I;
  #L1d8290.  v2[v3]:= v13 @kind object;
  #L1d8294.  v3:= 1I;
  #L1d8296.  v2[v3]:= v14 @kind object;
  #L1d829a.  call temp:= `concat`(v15, v2) @signature `Lcom/github/mikephil/charting/data/filter/Approximator;.concat:([[F)[F` @kind virtual;
  #L1d82a0.  v2:= temp @kind object;
  #L1d82a2.  return v2 @kind object;
  #L1d82a4.  call temp:= `getPoints`(v1) @signature `Lcom/github/mikephil/charting/data/filter/Approximator$Line;.getPoints:()[F` @kind virtual;
  #L1d82aa.  v2:= temp @kind object;
  #L1d82ac.  goto L1d82a2;
}
