record `com.github.mikephil.charting.data.BarEntry` @kind class @AccessFlag PUBLIC extends `com.github.mikephil.charting.data.Entry` @kind class {
  `float` `com.github.mikephil.charting.data.BarEntry.mNegativeSum` @AccessFlag PRIVATE;
  `float` `com.github.mikephil.charting.data.BarEntry.mPositiveSum` @AccessFlag PRIVATE;
  `com.github.mikephil.charting.highlight.Range`[] `com.github.mikephil.charting.data.BarEntry.mRanges` @AccessFlag PRIVATE;
  `float`[] `com.github.mikephil.charting.data.BarEntry.mYVals` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.github.mikephil.charting.data.BarEntry` v0 @kind this, `float` v1 @name `x`, `float` v2 @name `y`) @signature `Lcom/github/mikephil/charting/data/BarEntry;.<init>:(FF)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L32bce8.  call `<init>`(v0, v1, v2) @signature `Lcom/github/mikephil/charting/data/Entry;.<init>:(FF)V` @kind direct;
  #L32bcee.  return @kind void;
}
procedure `void` `<init>`(`com.github.mikephil.charting.data.BarEntry` v0 @kind this, `float` v1 @name `x`, `float` v2 @name `y`, `java.lang.Object` v3 @kind object @name `data`) @signature `Lcom/github/mikephil/charting/data/BarEntry;.<init>:(FFLjava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L32bd00.  call `<init>`(v0, v1, v2, v3) @signature `Lcom/github/mikephil/charting/data/Entry;.<init>:(FFLjava/lang/Object;)V` @kind direct;
  #L32bd06.  return @kind void;
}
procedure `void` `<init>`(`com.github.mikephil.charting.data.BarEntry` v1 @kind this, `float` v2 @name `x`, `float`[] v3 @kind object @name `vals`) @signature `Lcom/github/mikephil/charting/data/BarEntry;.<init>:(F[F)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L32bd18.  call temp:= `calcSum`(v3) @signature `Lcom/github/mikephil/charting/data/BarEntry;.calcSum:([F)F` @kind static;
  #L32bd1e.  v0:= temp;
  #L32bd20.  call `<init>`(v1, v2, v0) @signature `Lcom/github/mikephil/charting/data/Entry;.<init>:(FF)V` @kind direct;
  #L32bd26.  v1.`com.github.mikephil.charting.data.BarEntry.mYVals` @type ^`float`[] := v3 @kind object;
  #L32bd2a.  call `calcRanges`(v1) @signature `Lcom/github/mikephil/charting/data/BarEntry;.calcRanges:()V` @kind virtual;
  #L32bd30.  call `calcPosNegSum`(v1) @signature `Lcom/github/mikephil/charting/data/BarEntry;.calcPosNegSum:()V` @kind direct;
  #L32bd36.  return @kind void;
}
procedure `void` `<init>`(`com.github.mikephil.charting.data.BarEntry` v1 @kind this, `float` v2 @name `x`, `float`[] v3 @kind object @name `vals`, `java.lang.String` v4 @kind object @name `label`) @signature `Lcom/github/mikephil/charting/data/BarEntry;.<init>:(F[FLjava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L32bd48.  call temp:= `calcSum`(v3) @signature `Lcom/github/mikephil/charting/data/BarEntry;.calcSum:([F)F` @kind static;
  #L32bd4e.  v0:= temp;
  #L32bd50.  call `<init>`(v1, v2, v0, v4) @signature `Lcom/github/mikephil/charting/data/Entry;.<init>:(FFLjava/lang/Object;)V` @kind direct;
  #L32bd56.  v1.`com.github.mikephil.charting.data.BarEntry.mYVals` @type ^`float`[] := v3 @kind object;
  #L32bd5a.  call `calcRanges`(v1) @signature `Lcom/github/mikephil/charting/data/BarEntry;.calcRanges:()V` @kind virtual;
  #L32bd60.  call `calcPosNegSum`(v1) @signature `Lcom/github/mikephil/charting/data/BarEntry;.calcPosNegSum:()V` @kind direct;
  #L32bd66.  return @kind void;
}
procedure `void` `calcPosNegSum`(`com.github.mikephil.charting.data.BarEntry` v8 @kind this) @signature `Lcom/github/mikephil/charting/data/BarEntry;.calcPosNegSum:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L32bd78.  v7:= 0I;
  #L32bd7a.  v3:= v8.`com.github.mikephil.charting.data.BarEntry.mYVals` @type ^`float`[] @kind object;
  #L32bd7e.  if v3 != 0 then goto L32bd8c;
  #L32bd82.  v8.`com.github.mikephil.charting.data.BarEntry.mNegativeSum` @type ^`float` := v7;
  #L32bd86.  v8.`com.github.mikephil.charting.data.BarEntry.mPositiveSum` @type ^`float` := v7;
  #L32bd8a.  return @kind void;
  #L32bd8c.  v1:= 0I;
  #L32bd8e.  v2:= 0I;
  #L32bd90.  v4:= v8.`com.github.mikephil.charting.data.BarEntry.mYVals` @type ^`float`[] @kind object;
  #L32bd94.  v5:= length @variable v4;
  #L32bd96.  v3:= 0I;
  #L32bd98.  if v3 >= v5 then goto L32bdbc;
  #L32bd9c.  v0:= v4[v3];
  #L32bda0.  v6:= fcmpg(v0, v7);
  #L32bda4.  if v6 > 0 then goto L32bdb8;
  #L32bda8.  call temp:= `abs`(v0) @signature `Ljava/lang/Math;.abs:(F)F` @kind static;
  #L32bdae.  v6:= temp;
  #L32bdb0.  v1:= v1 + v6 @kind float;
  #L32bdb2.  v3:= v3 + 1;
  #L32bdb6.  goto L32bd98;
  #L32bdb8.  v2:= v2 + v0 @kind float;
  #L32bdba.  goto L32bdb2;
  #L32bdbc.  v8.`com.github.mikephil.charting.data.BarEntry.mNegativeSum` @type ^`float` := v1;
  #L32bdc0.  v8.`com.github.mikephil.charting.data.BarEntry.mPositiveSum` @type ^`float` := v2;
  #L32bdc4.  goto L32bd8a;
}
procedure `float` `calcSum`(`float`[] v4 @kind object @name `vals`) @signature `Lcom/github/mikephil/charting/data/BarEntry;.calcSum:([F)F` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L32bdd8.  if v4 != 0 then goto L32bde0;
  #L32bddc.  v1:= 0I;
  #L32bdde.  return v1;
  #L32bde0.  v1:= 0I;
  #L32bde2.  v3:= length @variable v4;
  #L32bde4.  v2:= 0I;
  #L32bde6.  if v2 >= v3 then goto L32bdde;
  #L32bdea.  v0:= v4[v2];
  #L32bdee.  v1:= v1 + v0 @kind float;
  #L32bdf0.  v2:= v2 + 1;
  #L32bdf4.  goto L32bde6;
}
procedure `void` `calcRanges`(`com.github.mikephil.charting.data.BarEntry` v8 @kind this) @signature `Lcom/github/mikephil/charting/data/BarEntry;.calcRanges:()V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L32be08.  call temp:= `getYVals`(v8) @signature `Lcom/github/mikephil/charting/data/BarEntry;.getYVals:()[F` @kind virtual;
  #L32be0e.  v4:= temp @kind object;
  #L32be10.  if v4 == 0 then goto L32be1a;
  #L32be14.  v5:= length @variable v4;
  #L32be16.  if v5 != 0 then goto L32be1c;
  #L32be1a.  return @kind void;
  #L32be1c.  v5:= length @variable v4;
  #L32be1e.  v5:= new `com.github.mikephil.charting.highlight.Range`[v5];
  #L32be22.  v8.`com.github.mikephil.charting.data.BarEntry.mRanges` @type ^`com.github.mikephil.charting.highlight.Range`[] := v5 @kind object;
  #L32be26.  call temp:= `getNegativeSum`(v8) @signature `Lcom/github/mikephil/charting/data/BarEntry;.getNegativeSum:()F` @kind virtual;
  #L32be2c.  v5:= temp;
  #L32be2e.  v1:= -v5 @kind float;
  #L32be30.  v2:= 0I;
  #L32be32.  v0:= 0I;
  #L32be34.  v5:= v8.`com.github.mikephil.charting.data.BarEntry.mRanges` @type ^`com.github.mikephil.charting.highlight.Range`[] @kind object;
  #L32be38.  v5:= length @variable v5;
  #L32be3a.  if v0 >= v5 then goto L32be1a;
  #L32be3e.  v3:= v4[v0];
  #L32be42.  v5:= 0I;
  #L32be44.  v5:= fcmpg(v3, v5);
  #L32be48.  if v5 >= 0 then goto L32be72;
  #L32be4c.  v5:= v8.`com.github.mikephil.charting.data.BarEntry.mRanges` @type ^`com.github.mikephil.charting.highlight.Range`[] @kind object;
  #L32be50.  v6:= new `com.github.mikephil.charting.highlight.Range`;
  #L32be54.  v7:= v1 + v3 @kind float;
  #L32be58.  call `<init>`(v6, v1, v7) @signature `Lcom/github/mikephil/charting/highlight/Range;.<init>:(FF)V` @kind direct;
  #L32be5e.  v5[v0]:= v6 @kind object;
  #L32be62.  call temp:= `abs`(v3) @signature `Ljava/lang/Math;.abs:(F)F` @kind static;
  #L32be68.  v5:= temp;
  #L32be6a.  v1:= v1 + v5 @kind float;
  #L32be6c.  v0:= v0 + 1;
  #L32be70.  goto L32be34;
  #L32be72.  v5:= v8.`com.github.mikephil.charting.data.BarEntry.mRanges` @type ^`com.github.mikephil.charting.highlight.Range`[] @kind object;
  #L32be76.  v6:= new `com.github.mikephil.charting.highlight.Range`;
  #L32be7a.  v7:= v2 + v3 @kind float;
  #L32be7e.  call `<init>`(v6, v2, v7) @signature `Lcom/github/mikephil/charting/highlight/Range;.<init>:(FF)V` @kind direct;
  #L32be84.  v5[v0]:= v6 @kind object;
  #L32be88.  v2:= v2 + v3 @kind float;
  #L32be8a.  goto L32be6c;
}
procedure `com.github.mikephil.charting.data.BarEntry` `copy`(`com.github.mikephil.charting.data.BarEntry` v4 @kind this) @signature `Lcom/github/mikephil/charting/data/BarEntry;.copy:()Lcom/github/mikephil/charting/data/BarEntry;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L32be9c.  v0:= new `com.github.mikephil.charting.data.BarEntry`;
  #L32bea0.  call temp:= `getX`(v4) @signature `Lcom/github/mikephil/charting/data/BarEntry;.getX:()F` @kind virtual;
  #L32bea6.  v1:= temp;
  #L32bea8.  call temp:= `getY`(v4) @signature `Lcom/github/mikephil/charting/data/BarEntry;.getY:()F` @kind virtual;
  #L32beae.  v2:= temp;
  #L32beb0.  call temp:= `getData`(v4) @signature `Lcom/github/mikephil/charting/data/BarEntry;.getData:()Ljava/lang/Object;` @kind virtual;
  #L32beb6.  v3:= temp @kind object;
  #L32beb8.  call `<init>`(v0, v1, v2, v3) @signature `Lcom/github/mikephil/charting/data/BarEntry;.<init>:(FFLjava/lang/Object;)V` @kind direct;
  #L32bebe.  v1:= v4.`com.github.mikephil.charting.data.BarEntry.mYVals` @type ^`float`[] @kind object;
  #L32bec2.  call `setVals`(v0, v1) @signature `Lcom/github/mikephil/charting/data/BarEntry;.setVals:([F)V` @kind virtual;
  #L32bec8.  return v0 @kind object;
}
procedure `com.github.mikephil.charting.data.Entry` `copy`(`com.github.mikephil.charting.data.BarEntry` v1 @kind this) @signature `Lcom/github/mikephil/charting/data/BarEntry;.copy:()Lcom/github/mikephil/charting/data/Entry;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L32bedc.  call temp:= `copy`(v1) @signature `Lcom/github/mikephil/charting/data/BarEntry;.copy:()Lcom/github/mikephil/charting/data/BarEntry;` @kind virtual;
  #L32bee2.  v0:= temp @kind object;
  #L32bee4.  return v0 @kind object;
}
procedure `float` `getBelowSum`(`com.github.mikephil.charting.data.BarEntry` v3 @kind this, `int` v4 @name `stackIndex`) @signature `Lcom/github/mikephil/charting/data/BarEntry;.getBelowSum:(I)F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L32bef8.  v2:= v3.`com.github.mikephil.charting.data.BarEntry.mYVals` @type ^`float`[] @kind object;
  #L32befc.  if v2 != 0 then goto L32bf04;
  #L32bf00.  v1:= 0I;
  #L32bf02.  return v1;
  #L32bf04.  v1:= 0I;
  #L32bf06.  v2:= v3.`com.github.mikephil.charting.data.BarEntry.mYVals` @type ^`float`[] @kind object;
  #L32bf0a.  v2:= length @variable v2;
  #L32bf0c.  v0:= v2 + -1;
  #L32bf10.  if v0 <= v4 then goto L32bf02;
  #L32bf14.  if v0 < 0 then goto L32bf02;
  #L32bf18.  v2:= v3.`com.github.mikephil.charting.data.BarEntry.mYVals` @type ^`float`[] @kind object;
  #L32bf1c.  v2:= v2[v0];
  #L32bf20.  v1:= v1 + v2 @kind float;
  #L32bf22.  v0:= v0 + -1;
  #L32bf26.  goto L32bf10;
}
procedure `float` `getNegativeSum`(`com.github.mikephil.charting.data.BarEntry` v1 @kind this) @signature `Lcom/github/mikephil/charting/data/BarEntry;.getNegativeSum:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32bf38.  v0:= v1.`com.github.mikephil.charting.data.BarEntry.mNegativeSum` @type ^`float`;
  #L32bf3c.  return v0;
}
procedure `float` `getPositiveSum`(`com.github.mikephil.charting.data.BarEntry` v1 @kind this) @signature `Lcom/github/mikephil/charting/data/BarEntry;.getPositiveSum:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32bf50.  v0:= v1.`com.github.mikephil.charting.data.BarEntry.mPositiveSum` @type ^`float`;
  #L32bf54.  return v0;
}
procedure `com.github.mikephil.charting.highlight.Range`[] `getRanges`(`com.github.mikephil.charting.data.BarEntry` v1 @kind this) @signature `Lcom/github/mikephil/charting/data/BarEntry;.getRanges:()[Lcom/github/mikephil/charting/highlight/Range;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32bf68.  v0:= v1.`com.github.mikephil.charting.data.BarEntry.mRanges` @type ^`com.github.mikephil.charting.highlight.Range`[] @kind object;
  #L32bf6c.  return v0 @kind object;
}
procedure `float` `getY`(`com.github.mikephil.charting.data.BarEntry` v1 @kind this) @signature `Lcom/github/mikephil/charting/data/BarEntry;.getY:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32bf80.  call temp:= `getY`(v1) @signature `Lcom/github/mikephil/charting/data/Entry;.getY:()F` @kind super;
  #L32bf86.  v0:= temp;
  #L32bf88.  return v0;
}
procedure `float`[] `getYVals`(`com.github.mikephil.charting.data.BarEntry` v1 @kind this) @signature `Lcom/github/mikephil/charting/data/BarEntry;.getYVals:()[F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32bf9c.  v0:= v1.`com.github.mikephil.charting.data.BarEntry.mYVals` @type ^`float`[] @kind object;
  #L32bfa0.  return v0 @kind object;
}
procedure `boolean` `isStacked`(`com.github.mikephil.charting.data.BarEntry` v1 @kind this) @signature `Lcom/github/mikephil/charting/data/BarEntry;.isStacked:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32bfb4.  v0:= v1.`com.github.mikephil.charting.data.BarEntry.mYVals` @type ^`float`[] @kind object;
  #L32bfb8.  if v0 == 0 then goto L32bfc0;
  #L32bfbc.  v0:= 1I;
  #L32bfbe.  return v0;
  #L32bfc0.  v0:= 0I;
  #L32bfc2.  goto L32bfbe;
}
procedure `void` `setVals`(`com.github.mikephil.charting.data.BarEntry` v1 @kind this, `float`[] v2 @kind object @name `vals`) @signature `Lcom/github/mikephil/charting/data/BarEntry;.setVals:([F)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L32bfd4.  call temp:= `calcSum`(v2) @signature `Lcom/github/mikephil/charting/data/BarEntry;.calcSum:([F)F` @kind static;
  #L32bfda.  v0:= temp;
  #L32bfdc.  call `setY`(v1, v0) @signature `Lcom/github/mikephil/charting/data/BarEntry;.setY:(F)V` @kind virtual;
  #L32bfe2.  v1.`com.github.mikephil.charting.data.BarEntry.mYVals` @type ^`float`[] := v2 @kind object;
  #L32bfe6.  call `calcPosNegSum`(v1) @signature `Lcom/github/mikephil/charting/data/BarEntry;.calcPosNegSum:()V` @kind direct;
  #L32bfec.  call `calcRanges`(v1) @signature `Lcom/github/mikephil/charting/data/BarEntry;.calcRanges:()V` @kind virtual;
  #L32bff2.  return @kind void;
}
