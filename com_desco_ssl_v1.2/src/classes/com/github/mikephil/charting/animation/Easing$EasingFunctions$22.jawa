record `com.github.mikephil.charting.animation.Easing$EasingFunctions$22` @kind class @AccessFlag FINAL extends `com.github.mikephil.charting.animation.EasingFunction` @kind interface {
}
procedure `void` `<init>`(`com.github.mikephil.charting.animation.Easing$EasingFunctions$22` v0 @kind this) @signature `Lcom/github/mikephil/charting/animation/Easing$EasingFunctions$22;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2b5a38.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2b5a3e.  return @kind void;
}
procedure `float` `getInterpolation`(`com.github.mikephil.charting.animation.Easing$EasingFunctions$22` v13 @kind this, `float` v14 @name `input`) @signature `Lcom/github/mikephil/charting/animation/Easing$EasingFunctions$22;.getInterpolation:(F)F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L2b5a50.  v12:= 0.5F;
  #L2b5a54.  v3:= 0I;
  #L2b5a56.  v10:= 6.283185307179586D;
  #L2b5a60.  v8:= 2.0D;
  #L2b5a64.  v4:= 1.0F;
  #L2b5a68.  v5:= fcmpl(v14, v3);
  #L2b5a6c.  if v5 != 0 then goto L2b5a72;
  #L2b5a70.  return v3;
  #L2b5a72.  v1:= v14 / v12 @kind float;
  #L2b5a76.  v3:= 2.0F;
  #L2b5a7a.  v3:= fcmpl(v1, v3);
  #L2b5a7e.  if v3 != 0 then goto L2b5a86;
  #L2b5a82.  v3:= v4;
  #L2b5a84.  goto L2b5a70;
  #L2b5a86.  v0:= 1055286887I;
  #L2b5a8c.  v3:= 1086918619I;
  #L2b5a92.  v3:= v0 / v3 @kind float;
  #L2b5a96.  v6:= 1.0D;
  #L2b5a9a.  call temp:= `asin`(v6) @signature `Ljava/lang/Math;.asin:(D)D` @kind static;
  #L2b5aa0.  v6:= temp @kind wide;
  #L2b5aa2.  v5:= (`float`) v6 @kind d2f;
  #L2b5aa4.  v2:= v3 * v5 @kind float;
  #L2b5aa8.  v3:= fcmpg(v1, v4);
  #L2b5aac.  if v3 >= 0 then goto L2b5ae4;
  #L2b5ab0.  v3:= -0.5F;
  #L2b5ab4.  v5:= 10.0F;
  #L2b5ab8.  v1:= v1 - v4 @kind float;
  #L2b5aba.  v5:= v5 * v1 @kind float;
  #L2b5abc.  v6:= (`double`) v5 @kind f2d;
  #L2b5abe.  call temp:= `pow`(v8, v6) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L2b5ac4.  v6:= temp @kind wide;
  #L2b5ac6.  v5:= (`float`) v6 @kind d2f;
  #L2b5ac8.  v4:= v4 * v1 @kind float;
  #L2b5aca.  v4:= v4 - v2 @kind float;
  #L2b5acc.  v6:= (`double`) v4 @kind f2d;
  #L2b5ace.  v6:= v6 * v10 @kind double;
  #L2b5ad0.  v8:= (`double`) v0 @kind f2d;
  #L2b5ad2.  v6:= v6 / v8 @kind double;
  #L2b5ad4.  call temp:= `sin`(v6) @signature `Ljava/lang/Math;.sin:(D)D` @kind static;
  #L2b5ada.  v6:= temp @kind wide;
  #L2b5adc.  v4:= (`float`) v6 @kind d2f;
  #L2b5ade.  v4:= v4 * v5 @kind float;
  #L2b5ae0.  v3:= v3 * v4 @kind float;
  #L2b5ae2.  goto L2b5a70;
  #L2b5ae4.  v3:= -10.0F;
  #L2b5ae8.  v1:= v1 - v4 @kind float;
  #L2b5aea.  v3:= v3 * v1 @kind float;
  #L2b5aec.  v6:= (`double`) v3 @kind f2d;
  #L2b5aee.  call temp:= `pow`(v8, v6) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L2b5af4.  v6:= temp @kind wide;
  #L2b5af6.  v3:= (`float`) v6 @kind d2f;
  #L2b5af8.  v5:= v1 * v4 @kind float;
  #L2b5afc.  v5:= v5 - v2 @kind float;
  #L2b5afe.  v6:= (`double`) v5 @kind f2d;
  #L2b5b00.  v6:= v6 * v10 @kind double;
  #L2b5b02.  v8:= (`double`) v0 @kind f2d;
  #L2b5b04.  v6:= v6 / v8 @kind double;
  #L2b5b06.  call temp:= `sin`(v6) @signature `Ljava/lang/Math;.sin:(D)D` @kind static;
  #L2b5b0c.  v6:= temp @kind wide;
  #L2b5b0e.  v5:= (`float`) v6 @kind d2f;
  #L2b5b10.  v3:= v3 * v5 @kind float;
  #L2b5b12.  v3:= v3 * v12 @kind float;
  #L2b5b14.  v3:= v3 + v4 @kind float;
  #L2b5b16.  goto L2b5a70;
}
