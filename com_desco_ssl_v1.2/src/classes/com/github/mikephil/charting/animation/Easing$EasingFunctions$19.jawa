record `com.github.mikephil.charting.animation.Easing$EasingFunctions$19` @kind class @AccessFlag FINAL extends `com.github.mikephil.charting.animation.EasingFunction` @kind interface {
}
procedure `void` `<init>`(`com.github.mikephil.charting.animation.Easing$EasingFunctions$19` v0 @kind this) @signature `Lcom/github/mikephil/charting/animation/Easing$EasingFunctions$19;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2b5844.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2b584a.  return @kind void;
}
procedure `float` `getInterpolation`(`com.github.mikephil.charting.animation.Easing$EasingFunctions$19` v6 @kind this, `float` v7 @name `input`) @signature `Lcom/github/mikephil/charting/animation/Easing$EasingFunctions$19;.getInterpolation:(F)F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2b585c.  v5:= 0.5F;
  #L2b5860.  v4:= 1.0F;
  #L2b5864.  v0:= v7 / v5 @kind float;
  #L2b5868.  v1:= fcmpg(v0, v4);
  #L2b586c.  if v1 >= 0 then goto L2b588e;
  #L2b5870.  v1:= -0.5F;
  #L2b5874.  v2:= v0 * v0 @kind float;
  #L2b5878.  v2:= v4 - v2 @kind float;
  #L2b587c.  v2:= (`double`) v2 @kind f2d;
  #L2b587e.  call temp:= `sqrt`(v2) @signature `Ljava/lang/Math;.sqrt:(D)D` @kind static;
  #L2b5884.  v2:= temp @kind wide;
  #L2b5886.  v2:= (`float`) v2 @kind d2f;
  #L2b5888.  v2:= v2 - v4 @kind float;
  #L2b588a.  v1:= v1 * v2 @kind float;
  #L2b588c.  return v1;
  #L2b588e.  v1:= 2.0F;
  #L2b5892.  v0:= v0 - v1 @kind float;
  #L2b5894.  v1:= v0 * v0 @kind float;
  #L2b5898.  v1:= v4 - v1 @kind float;
  #L2b589c.  v2:= (`double`) v1 @kind f2d;
  #L2b589e.  call temp:= `sqrt`(v2) @signature `Ljava/lang/Math;.sqrt:(D)D` @kind static;
  #L2b58a4.  v2:= temp @kind wide;
  #L2b58a6.  v1:= (`float`) v2 @kind d2f;
  #L2b58a8.  v1:= v1 + v4 @kind float;
  #L2b58aa.  v1:= v1 * v5 @kind float;
  #L2b58ac.  goto L2b588c;
}
