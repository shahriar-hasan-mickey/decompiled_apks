record `com.github.mikephil.charting.animation.Easing$EasingFunctions$7` @kind class @AccessFlag FINAL extends `com.github.mikephil.charting.animation.EasingFunction` @kind interface {
}
procedure `void` `<init>`(`com.github.mikephil.charting.animation.Easing$EasingFunctions$7` v0 @kind this) @signature `Lcom/github/mikephil/charting/animation/Easing$EasingFunctions$7;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2b5eac.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2b5eb2.  return @kind void;
}
procedure `float` `getInterpolation`(`com.github.mikephil.charting.animation.Easing$EasingFunctions$7` v4 @kind this, `float` v5 @name `input`) @signature `Lcom/github/mikephil/charting/animation/Easing$EasingFunctions$7;.getInterpolation:(F)F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2b5ec4.  v3:= 2.0F;
  #L2b5ec8.  v2:= 0.5F;
  #L2b5ecc.  v0:= v5 / v2 @kind float;
  #L2b5ed0.  v1:= 1.0F;
  #L2b5ed4.  v1:= fcmpg(v0, v1);
  #L2b5ed8.  if v1 >= 0 then goto L2b5ee6;
  #L2b5edc.  v1:= v2 * v0 @kind float;
  #L2b5ee0.  v1:= v1 * v0 @kind float;
  #L2b5ee2.  v1:= v1 * v0 @kind float;
  #L2b5ee4.  return v1;
  #L2b5ee6.  v0:= v0 - v3 @kind float;
  #L2b5ee8.  v1:= v0 * v0 @kind float;
  #L2b5eec.  v1:= v1 * v0 @kind float;
  #L2b5eee.  v1:= v1 + v3 @kind float;
  #L2b5ef0.  v1:= v1 * v2 @kind float;
  #L2b5ef2.  goto L2b5ee4;
}
