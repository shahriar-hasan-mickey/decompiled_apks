record `com.github.mikephil.charting.matrix.Vector3` @kind class @AccessFlag PUBLIC_FINAL {
  `float` `com.github.mikephil.charting.matrix.Vector3.x` @AccessFlag PUBLIC;
  `float` `com.github.mikephil.charting.matrix.Vector3.y` @AccessFlag PUBLIC;
  `float` `com.github.mikephil.charting.matrix.Vector3.z` @AccessFlag PUBLIC;
}
global `com.github.mikephil.charting.matrix.Vector3` `@@com.github.mikephil.charting.matrix.Vector3.UNIT_X` @AccessFlag PUBLIC_STATIC_FINAL;
global `com.github.mikephil.charting.matrix.Vector3` `@@com.github.mikephil.charting.matrix.Vector3.UNIT_Y` @AccessFlag PUBLIC_STATIC_FINAL;
global `com.github.mikephil.charting.matrix.Vector3` `@@com.github.mikephil.charting.matrix.Vector3.UNIT_Z` @AccessFlag PUBLIC_STATIC_FINAL;
global `com.github.mikephil.charting.matrix.Vector3` `@@com.github.mikephil.charting.matrix.Vector3.ZERO` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/github/mikephil/charting/matrix/Vector3;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1d89d8.  v2:= 1.0F;
  #L1d89dc.  v1:= 0I;
  #L1d89de.  v0:= new `com.github.mikephil.charting.matrix.Vector3`;
  #L1d89e2.  call `<init>`(v0, v1, v1, v1) @signature `Lcom/github/mikephil/charting/matrix/Vector3;.<init>:(FFF)V` @kind direct;
  #L1d89e8.  `@@com.github.mikephil.charting.matrix.Vector3.ZERO` @type ^`com.github.mikephil.charting.matrix.Vector3` := v0 @kind object;
  #L1d89ec.  v0:= new `com.github.mikephil.charting.matrix.Vector3`;
  #L1d89f0.  call `<init>`(v0, v2, v1, v1) @signature `Lcom/github/mikephil/charting/matrix/Vector3;.<init>:(FFF)V` @kind direct;
  #L1d89f6.  `@@com.github.mikephil.charting.matrix.Vector3.UNIT_X` @type ^`com.github.mikephil.charting.matrix.Vector3` := v0 @kind object;
  #L1d89fa.  v0:= new `com.github.mikephil.charting.matrix.Vector3`;
  #L1d89fe.  call `<init>`(v0, v1, v2, v1) @signature `Lcom/github/mikephil/charting/matrix/Vector3;.<init>:(FFF)V` @kind direct;
  #L1d8a04.  `@@com.github.mikephil.charting.matrix.Vector3.UNIT_Y` @type ^`com.github.mikephil.charting.matrix.Vector3` := v0 @kind object;
  #L1d8a08.  v0:= new `com.github.mikephil.charting.matrix.Vector3`;
  #L1d8a0c.  call `<init>`(v0, v1, v1, v2) @signature `Lcom/github/mikephil/charting/matrix/Vector3;.<init>:(FFF)V` @kind direct;
  #L1d8a12.  `@@com.github.mikephil.charting.matrix.Vector3.UNIT_Z` @type ^`com.github.mikephil.charting.matrix.Vector3` := v0 @kind object;
  #L1d8a16.  return @kind void;
}
procedure `void` `<init>`(`com.github.mikephil.charting.matrix.Vector3` v0 @kind this) @signature `Lcom/github/mikephil/charting/matrix/Vector3;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1d8a28.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1d8a2e.  return @kind void;
}
procedure `void` `<init>`(`com.github.mikephil.charting.matrix.Vector3` v0 @kind this, `float` v1 @name `xValue`, `float` v2 @name `yValue`, `float` v3 @name `zValue`) @signature `Lcom/github/mikephil/charting/matrix/Vector3;.<init>:(FFF)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1d8a40.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1d8a46.  call `set`(v0, v1, v2, v3) @signature `Lcom/github/mikephil/charting/matrix/Vector3;.set:(FFF)V` @kind virtual;
  #L1d8a4c.  return @kind void;
}
procedure `void` `<init>`(`com.github.mikephil.charting.matrix.Vector3` v0 @kind this, `com.github.mikephil.charting.matrix.Vector3` v1 @kind object @name `other`) @signature `Lcom/github/mikephil/charting/matrix/Vector3;.<init>:(Lcom/github/mikephil/charting/matrix/Vector3;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1d8a60.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1d8a66.  call `set`(v0, v1) @signature `Lcom/github/mikephil/charting/matrix/Vector3;.set:(Lcom/github/mikephil/charting/matrix/Vector3;)V` @kind virtual;
  #L1d8a6c.  return @kind void;
}
procedure `void` `<init>`(`com.github.mikephil.charting.matrix.Vector3` v3 @kind this, `float`[] v4 @kind object @name `array`) @signature `Lcom/github/mikephil/charting/matrix/Vector3;.<init>:([F)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1d8a80.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1d8a86.  v0:= 0I;
  #L1d8a88.  v0:= v4[v0];
  #L1d8a8c.  v1:= 1I;
  #L1d8a8e.  v1:= v4[v1];
  #L1d8a92.  v2:= 2I;
  #L1d8a94.  v2:= v4[v2];
  #L1d8a98.  call `set`(v3, v0, v1, v2) @signature `Lcom/github/mikephil/charting/matrix/Vector3;.set:(FFF)V` @kind virtual;
  #L1d8a9e.  return @kind void;
}
procedure `void` `add`(`com.github.mikephil.charting.matrix.Vector3` v1 @kind this, `float` v2 @name `otherX`, `float` v3 @name `otherY`, `float` v4 @name `otherZ`) @signature `Lcom/github/mikephil/charting/matrix/Vector3;.add:(FFF)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1d8ab0.  v0:= v1.`com.github.mikephil.charting.matrix.Vector3.x` @type ^`float`;
  #L1d8ab4.  v0:= v0 + v2 @kind float;
  #L1d8ab6.  v1.`com.github.mikephil.charting.matrix.Vector3.x` @type ^`float` := v0;
  #L1d8aba.  v0:= v1.`com.github.mikephil.charting.matrix.Vector3.y` @type ^`float`;
  #L1d8abe.  v0:= v0 + v3 @kind float;
  #L1d8ac0.  v1.`com.github.mikephil.charting.matrix.Vector3.y` @type ^`float` := v0;
  #L1d8ac4.  v0:= v1.`com.github.mikephil.charting.matrix.Vector3.z` @type ^`float`;
  #L1d8ac8.  v0:= v0 + v4 @kind float;
  #L1d8aca.  v1.`com.github.mikephil.charting.matrix.Vector3.z` @type ^`float` := v0;
  #L1d8ace.  return @kind void;
}
procedure `void` `add`(`com.github.mikephil.charting.matrix.Vector3` v2 @kind this, `com.github.mikephil.charting.matrix.Vector3` v3 @kind object @name `other`) @signature `Lcom/github/mikephil/charting/matrix/Vector3;.add:(Lcom/github/mikephil/charting/matrix/Vector3;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1d8ae0.  v0:= v2.`com.github.mikephil.charting.matrix.Vector3.x` @type ^`float`;
  #L1d8ae4.  v1:= v3.`com.github.mikephil.charting.matrix.Vector3.x` @type ^`float`;
  #L1d8ae8.  v0:= v0 + v1 @kind float;
  #L1d8aea.  v2.`com.github.mikephil.charting.matrix.Vector3.x` @type ^`float` := v0;
  #L1d8aee.  v0:= v2.`com.github.mikephil.charting.matrix.Vector3.y` @type ^`float`;
  #L1d8af2.  v1:= v3.`com.github.mikephil.charting.matrix.Vector3.y` @type ^`float`;
  #L1d8af6.  v0:= v0 + v1 @kind float;
  #L1d8af8.  v2.`com.github.mikephil.charting.matrix.Vector3.y` @type ^`float` := v0;
  #L1d8afc.  v0:= v2.`com.github.mikephil.charting.matrix.Vector3.z` @type ^`float`;
  #L1d8b00.  v1:= v3.`com.github.mikephil.charting.matrix.Vector3.z` @type ^`float`;
  #L1d8b04.  v0:= v0 + v1 @kind float;
  #L1d8b06.  v2.`com.github.mikephil.charting.matrix.Vector3.z` @type ^`float` := v0;
  #L1d8b0a.  return @kind void;
}
procedure `com.github.mikephil.charting.matrix.Vector3` `cross`(`com.github.mikephil.charting.matrix.Vector3` v6 @kind this, `com.github.mikephil.charting.matrix.Vector3` v7 @kind object @name `other`) @signature `Lcom/github/mikephil/charting/matrix/Vector3;.cross:(Lcom/github/mikephil/charting/matrix/Vector3;)Lcom/github/mikephil/charting/matrix/Vector3;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1d8b1c.  v0:= new `com.github.mikephil.charting.matrix.Vector3`;
  #L1d8b20.  v1:= v6.`com.github.mikephil.charting.matrix.Vector3.y` @type ^`float`;
  #L1d8b24.  v2:= v7.`com.github.mikephil.charting.matrix.Vector3.z` @type ^`float`;
  #L1d8b28.  v1:= v1 * v2 @kind float;
  #L1d8b2a.  v2:= v6.`com.github.mikephil.charting.matrix.Vector3.z` @type ^`float`;
  #L1d8b2e.  v3:= v7.`com.github.mikephil.charting.matrix.Vector3.y` @type ^`float`;
  #L1d8b32.  v2:= v2 * v3 @kind float;
  #L1d8b34.  v1:= v1 - v2 @kind float;
  #L1d8b36.  v2:= v6.`com.github.mikephil.charting.matrix.Vector3.z` @type ^`float`;
  #L1d8b3a.  v3:= v7.`com.github.mikephil.charting.matrix.Vector3.x` @type ^`float`;
  #L1d8b3e.  v2:= v2 * v3 @kind float;
  #L1d8b40.  v3:= v6.`com.github.mikephil.charting.matrix.Vector3.x` @type ^`float`;
  #L1d8b44.  v4:= v7.`com.github.mikephil.charting.matrix.Vector3.z` @type ^`float`;
  #L1d8b48.  v3:= v3 * v4 @kind float;
  #L1d8b4a.  v2:= v2 - v3 @kind float;
  #L1d8b4c.  v3:= v6.`com.github.mikephil.charting.matrix.Vector3.x` @type ^`float`;
  #L1d8b50.  v4:= v7.`com.github.mikephil.charting.matrix.Vector3.y` @type ^`float`;
  #L1d8b54.  v3:= v3 * v4 @kind float;
  #L1d8b56.  v4:= v6.`com.github.mikephil.charting.matrix.Vector3.y` @type ^`float`;
  #L1d8b5a.  v5:= v7.`com.github.mikephil.charting.matrix.Vector3.x` @type ^`float`;
  #L1d8b5e.  v4:= v4 * v5 @kind float;
  #L1d8b60.  v3:= v3 - v4 @kind float;
  #L1d8b62.  call `<init>`(v0, v1, v2, v3) @signature `Lcom/github/mikephil/charting/matrix/Vector3;.<init>:(FFF)V` @kind direct;
  #L1d8b68.  return v0 @kind object;
}
procedure `float` `distance2`(`com.github.mikephil.charting.matrix.Vector3` v5 @kind this, `com.github.mikephil.charting.matrix.Vector3` v6 @kind object @name `other`) @signature `Lcom/github/mikephil/charting/matrix/Vector3;.distance2:(Lcom/github/mikephil/charting/matrix/Vector3;)F` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1d8b7c.  v3:= v5.`com.github.mikephil.charting.matrix.Vector3.x` @type ^`float`;
  #L1d8b80.  v4:= v6.`com.github.mikephil.charting.matrix.Vector3.x` @type ^`float`;
  #L1d8b84.  v0:= v3 - v4 @kind float;
  #L1d8b88.  v3:= v5.`com.github.mikephil.charting.matrix.Vector3.y` @type ^`float`;
  #L1d8b8c.  v4:= v6.`com.github.mikephil.charting.matrix.Vector3.y` @type ^`float`;
  #L1d8b90.  v1:= v3 - v4 @kind float;
  #L1d8b94.  v3:= v5.`com.github.mikephil.charting.matrix.Vector3.z` @type ^`float`;
  #L1d8b98.  v4:= v6.`com.github.mikephil.charting.matrix.Vector3.z` @type ^`float`;
  #L1d8b9c.  v2:= v3 - v4 @kind float;
  #L1d8ba0.  v3:= v0 * v0 @kind float;
  #L1d8ba4.  v4:= v1 * v1 @kind float;
  #L1d8ba8.  v3:= v3 + v4 @kind float;
  #L1d8baa.  v4:= v2 * v2 @kind float;
  #L1d8bae.  v3:= v3 + v4 @kind float;
  #L1d8bb0.  return v3;
}
procedure `void` `divide`(`com.github.mikephil.charting.matrix.Vector3` v1 @kind this, `float` v2 @name `magnitude`) @signature `Lcom/github/mikephil/charting/matrix/Vector3;.divide:(F)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1d8bc4.  v0:= 0I;
  #L1d8bc6.  v0:= fcmpl(v2, v0);
  #L1d8bca.  if v0 == 0 then goto L1d8bec;
  #L1d8bce.  v0:= v1.`com.github.mikephil.charting.matrix.Vector3.x` @type ^`float`;
  #L1d8bd2.  v0:= v0 / v2 @kind float;
  #L1d8bd4.  v1.`com.github.mikephil.charting.matrix.Vector3.x` @type ^`float` := v0;
  #L1d8bd8.  v0:= v1.`com.github.mikephil.charting.matrix.Vector3.y` @type ^`float`;
  #L1d8bdc.  v0:= v0 / v2 @kind float;
  #L1d8bde.  v1.`com.github.mikephil.charting.matrix.Vector3.y` @type ^`float` := v0;
  #L1d8be2.  v0:= v1.`com.github.mikephil.charting.matrix.Vector3.z` @type ^`float`;
  #L1d8be6.  v0:= v0 / v2 @kind float;
  #L1d8be8.  v1.`com.github.mikephil.charting.matrix.Vector3.z` @type ^`float` := v0;
  #L1d8bec.  return @kind void;
}
procedure `float` `dot`(`com.github.mikephil.charting.matrix.Vector3` v3 @kind this, `com.github.mikephil.charting.matrix.Vector3` v4 @kind object @name `other`) @signature `Lcom/github/mikephil/charting/matrix/Vector3;.dot:(Lcom/github/mikephil/charting/matrix/Vector3;)F` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1d8c00.  v0:= v3.`com.github.mikephil.charting.matrix.Vector3.x` @type ^`float`;
  #L1d8c04.  v1:= v4.`com.github.mikephil.charting.matrix.Vector3.x` @type ^`float`;
  #L1d8c08.  v0:= v0 * v1 @kind float;
  #L1d8c0a.  v1:= v3.`com.github.mikephil.charting.matrix.Vector3.y` @type ^`float`;
  #L1d8c0e.  v2:= v4.`com.github.mikephil.charting.matrix.Vector3.y` @type ^`float`;
  #L1d8c12.  v1:= v1 * v2 @kind float;
  #L1d8c14.  v0:= v0 + v1 @kind float;
  #L1d8c16.  v1:= v3.`com.github.mikephil.charting.matrix.Vector3.z` @type ^`float`;
  #L1d8c1a.  v2:= v4.`com.github.mikephil.charting.matrix.Vector3.z` @type ^`float`;
  #L1d8c1e.  v1:= v1 * v2 @kind float;
  #L1d8c20.  v0:= v0 + v1 @kind float;
  #L1d8c22.  return v0;
}
procedure `float` `length`(`com.github.mikephil.charting.matrix.Vector3` v2 @kind this) @signature `Lcom/github/mikephil/charting/matrix/Vector3;.length:()F` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1d8c34.  call temp:= `length2`(v2) @signature `Lcom/github/mikephil/charting/matrix/Vector3;.length2:()F` @kind virtual;
  #L1d8c3a.  v0:= temp;
  #L1d8c3c.  v0:= (`double`) v0 @kind f2d;
  #L1d8c3e.  call temp:= `sqrt`(v0) @signature `Ljava/lang/Math;.sqrt:(D)D` @kind static;
  #L1d8c44.  v0:= temp @kind wide;
  #L1d8c46.  v0:= (`float`) v0 @kind d2f;
  #L1d8c48.  return v0;
}
procedure `float` `length2`(`com.github.mikephil.charting.matrix.Vector3` v3 @kind this) @signature `Lcom/github/mikephil/charting/matrix/Vector3;.length2:()F` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L1d8c5c.  v0:= v3.`com.github.mikephil.charting.matrix.Vector3.x` @type ^`float`;
  #L1d8c60.  v1:= v3.`com.github.mikephil.charting.matrix.Vector3.x` @type ^`float`;
  #L1d8c64.  v0:= v0 * v1 @kind float;
  #L1d8c66.  v1:= v3.`com.github.mikephil.charting.matrix.Vector3.y` @type ^`float`;
  #L1d8c6a.  v2:= v3.`com.github.mikephil.charting.matrix.Vector3.y` @type ^`float`;
  #L1d8c6e.  v1:= v1 * v2 @kind float;
  #L1d8c70.  v0:= v0 + v1 @kind float;
  #L1d8c72.  v1:= v3.`com.github.mikephil.charting.matrix.Vector3.z` @type ^`float`;
  #L1d8c76.  v2:= v3.`com.github.mikephil.charting.matrix.Vector3.z` @type ^`float`;
  #L1d8c7a.  v1:= v1 * v2 @kind float;
  #L1d8c7c.  v0:= v0 + v1 @kind float;
  #L1d8c7e.  return v0;
}
procedure `void` `multiply`(`com.github.mikephil.charting.matrix.Vector3` v1 @kind this, `float` v2 @name `magnitude`) @signature `Lcom/github/mikephil/charting/matrix/Vector3;.multiply:(F)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1d8c90.  v0:= v1.`com.github.mikephil.charting.matrix.Vector3.x` @type ^`float`;
  #L1d8c94.  v0:= v0 * v2 @kind float;
  #L1d8c96.  v1.`com.github.mikephil.charting.matrix.Vector3.x` @type ^`float` := v0;
  #L1d8c9a.  v0:= v1.`com.github.mikephil.charting.matrix.Vector3.y` @type ^`float`;
  #L1d8c9e.  v0:= v0 * v2 @kind float;
  #L1d8ca0.  v1.`com.github.mikephil.charting.matrix.Vector3.y` @type ^`float` := v0;
  #L1d8ca4.  v0:= v1.`com.github.mikephil.charting.matrix.Vector3.z` @type ^`float`;
  #L1d8ca8.  v0:= v0 * v2 @kind float;
  #L1d8caa.  v1.`com.github.mikephil.charting.matrix.Vector3.z` @type ^`float` := v0;
  #L1d8cae.  return @kind void;
}
procedure `void` `multiply`(`com.github.mikephil.charting.matrix.Vector3` v2 @kind this, `com.github.mikephil.charting.matrix.Vector3` v3 @kind object @name `other`) @signature `Lcom/github/mikephil/charting/matrix/Vector3;.multiply:(Lcom/github/mikephil/charting/matrix/Vector3;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1d8cc0.  v0:= v2.`com.github.mikephil.charting.matrix.Vector3.x` @type ^`float`;
  #L1d8cc4.  v1:= v3.`com.github.mikephil.charting.matrix.Vector3.x` @type ^`float`;
  #L1d8cc8.  v0:= v0 * v1 @kind float;
  #L1d8cca.  v2.`com.github.mikephil.charting.matrix.Vector3.x` @type ^`float` := v0;
  #L1d8cce.  v0:= v2.`com.github.mikephil.charting.matrix.Vector3.y` @type ^`float`;
  #L1d8cd2.  v1:= v3.`com.github.mikephil.charting.matrix.Vector3.y` @type ^`float`;
  #L1d8cd6.  v0:= v0 * v1 @kind float;
  #L1d8cd8.  v2.`com.github.mikephil.charting.matrix.Vector3.y` @type ^`float` := v0;
  #L1d8cdc.  v0:= v2.`com.github.mikephil.charting.matrix.Vector3.z` @type ^`float`;
  #L1d8ce0.  v1:= v3.`com.github.mikephil.charting.matrix.Vector3.z` @type ^`float`;
  #L1d8ce4.  v0:= v0 * v1 @kind float;
  #L1d8ce6.  v2.`com.github.mikephil.charting.matrix.Vector3.z` @type ^`float` := v0;
  #L1d8cea.  return @kind void;
}
procedure `float` `normalize`(`com.github.mikephil.charting.matrix.Vector3` v2 @kind this) @signature `Lcom/github/mikephil/charting/matrix/Vector3;.normalize:()F` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1d8cfc.  call temp:= `length`(v2) @signature `Lcom/github/mikephil/charting/matrix/Vector3;.length:()F` @kind virtual;
  #L1d8d02.  v0:= temp;
  #L1d8d04.  v1:= 0I;
  #L1d8d06.  v1:= fcmpl(v0, v1);
  #L1d8d0a.  if v1 == 0 then goto L1d8d2c;
  #L1d8d0e.  v1:= v2.`com.github.mikephil.charting.matrix.Vector3.x` @type ^`float`;
  #L1d8d12.  v1:= v1 / v0 @kind float;
  #L1d8d14.  v2.`com.github.mikephil.charting.matrix.Vector3.x` @type ^`float` := v1;
  #L1d8d18.  v1:= v2.`com.github.mikephil.charting.matrix.Vector3.y` @type ^`float`;
  #L1d8d1c.  v1:= v1 / v0 @kind float;
  #L1d8d1e.  v2.`com.github.mikephil.charting.matrix.Vector3.y` @type ^`float` := v1;
  #L1d8d22.  v1:= v2.`com.github.mikephil.charting.matrix.Vector3.z` @type ^`float`;
  #L1d8d26.  v1:= v1 / v0 @kind float;
  #L1d8d28.  v2.`com.github.mikephil.charting.matrix.Vector3.z` @type ^`float` := v1;
  #L1d8d2c.  return v0;
}
procedure `boolean` `pointsInSameDirection`(`com.github.mikephil.charting.matrix.Vector3` v2 @kind this, `com.github.mikephil.charting.matrix.Vector3` v3 @kind object @name `other`) @signature `Lcom/github/mikephil/charting/matrix/Vector3;.pointsInSameDirection:(Lcom/github/mikephil/charting/matrix/Vector3;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1d8d40.  call temp:= `dot`(v2, v3) @signature `Lcom/github/mikephil/charting/matrix/Vector3;.dot:(Lcom/github/mikephil/charting/matrix/Vector3;)F` @kind virtual;
  #L1d8d46.  v0:= temp;
  #L1d8d48.  v1:= 0I;
  #L1d8d4a.  v0:= fcmpl(v0, v1);
  #L1d8d4e.  if v0 <= 0 then goto L1d8d56;
  #L1d8d52.  v0:= 1I;
  #L1d8d54.  return v0;
  #L1d8d56.  v0:= 0I;
  #L1d8d58.  goto L1d8d54;
}
procedure `void` `set`(`com.github.mikephil.charting.matrix.Vector3` v0 @kind this, `float` v1 @name `xValue`, `float` v2 @name `yValue`, `float` v3 @name `zValue`) @signature `Lcom/github/mikephil/charting/matrix/Vector3;.set:(FFF)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L1d8d6c.  v0.`com.github.mikephil.charting.matrix.Vector3.x` @type ^`float` := v1;
  #L1d8d70.  v0.`com.github.mikephil.charting.matrix.Vector3.y` @type ^`float` := v2;
  #L1d8d74.  v0.`com.github.mikephil.charting.matrix.Vector3.z` @type ^`float` := v3;
  #L1d8d78.  return @kind void;
}
procedure `void` `set`(`com.github.mikephil.charting.matrix.Vector3` v1 @kind this, `com.github.mikephil.charting.matrix.Vector3` v2 @kind object @name `other`) @signature `Lcom/github/mikephil/charting/matrix/Vector3;.set:(Lcom/github/mikephil/charting/matrix/Vector3;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1d8d8c.  v0:= v2.`com.github.mikephil.charting.matrix.Vector3.x` @type ^`float`;
  #L1d8d90.  v1.`com.github.mikephil.charting.matrix.Vector3.x` @type ^`float` := v0;
  #L1d8d94.  v0:= v2.`com.github.mikephil.charting.matrix.Vector3.y` @type ^`float`;
  #L1d8d98.  v1.`com.github.mikephil.charting.matrix.Vector3.y` @type ^`float` := v0;
  #L1d8d9c.  v0:= v2.`com.github.mikephil.charting.matrix.Vector3.z` @type ^`float`;
  #L1d8da0.  v1.`com.github.mikephil.charting.matrix.Vector3.z` @type ^`float` := v0;
  #L1d8da4.  return @kind void;
}
procedure `void` `subtract`(`com.github.mikephil.charting.matrix.Vector3` v2 @kind this, `com.github.mikephil.charting.matrix.Vector3` v3 @kind object @name `other`) @signature `Lcom/github/mikephil/charting/matrix/Vector3;.subtract:(Lcom/github/mikephil/charting/matrix/Vector3;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1d8db8.  v0:= v2.`com.github.mikephil.charting.matrix.Vector3.x` @type ^`float`;
  #L1d8dbc.  v1:= v3.`com.github.mikephil.charting.matrix.Vector3.x` @type ^`float`;
  #L1d8dc0.  v0:= v0 - v1 @kind float;
  #L1d8dc2.  v2.`com.github.mikephil.charting.matrix.Vector3.x` @type ^`float` := v0;
  #L1d8dc6.  v0:= v2.`com.github.mikephil.charting.matrix.Vector3.y` @type ^`float`;
  #L1d8dca.  v1:= v3.`com.github.mikephil.charting.matrix.Vector3.y` @type ^`float`;
  #L1d8dce.  v0:= v0 - v1 @kind float;
  #L1d8dd0.  v2.`com.github.mikephil.charting.matrix.Vector3.y` @type ^`float` := v0;
  #L1d8dd4.  v0:= v2.`com.github.mikephil.charting.matrix.Vector3.z` @type ^`float`;
  #L1d8dd8.  v1:= v3.`com.github.mikephil.charting.matrix.Vector3.z` @type ^`float`;
  #L1d8ddc.  v0:= v0 - v1 @kind float;
  #L1d8dde.  v2.`com.github.mikephil.charting.matrix.Vector3.z` @type ^`float` := v0;
  #L1d8de2.  return @kind void;
}
procedure `void` `subtractMultiple`(`com.github.mikephil.charting.matrix.Vector3` v2 @kind this, `com.github.mikephil.charting.matrix.Vector3` v3 @kind object @name `other`, `float` v4 @name `multiplicator`) @signature `Lcom/github/mikephil/charting/matrix/Vector3;.subtractMultiple:(Lcom/github/mikephil/charting/matrix/Vector3;F)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1d8df4.  v0:= v2.`com.github.mikephil.charting.matrix.Vector3.x` @type ^`float`;
  #L1d8df8.  v1:= v3.`com.github.mikephil.charting.matrix.Vector3.x` @type ^`float`;
  #L1d8dfc.  v1:= v1 * v4 @kind float;
  #L1d8dfe.  v0:= v0 - v1 @kind float;
  #L1d8e00.  v2.`com.github.mikephil.charting.matrix.Vector3.x` @type ^`float` := v0;
  #L1d8e04.  v0:= v2.`com.github.mikephil.charting.matrix.Vector3.y` @type ^`float`;
  #L1d8e08.  v1:= v3.`com.github.mikephil.charting.matrix.Vector3.y` @type ^`float`;
  #L1d8e0c.  v1:= v1 * v4 @kind float;
  #L1d8e0e.  v0:= v0 - v1 @kind float;
  #L1d8e10.  v2.`com.github.mikephil.charting.matrix.Vector3.y` @type ^`float` := v0;
  #L1d8e14.  v0:= v2.`com.github.mikephil.charting.matrix.Vector3.z` @type ^`float`;
  #L1d8e18.  v1:= v3.`com.github.mikephil.charting.matrix.Vector3.z` @type ^`float`;
  #L1d8e1c.  v1:= v1 * v4 @kind float;
  #L1d8e1e.  v0:= v0 - v1 @kind float;
  #L1d8e20.  v2.`com.github.mikephil.charting.matrix.Vector3.z` @type ^`float` := v0;
  #L1d8e24.  return @kind void;
}
procedure `void` `zero`(`com.github.mikephil.charting.matrix.Vector3` v1 @kind this) @signature `Lcom/github/mikephil/charting/matrix/Vector3;.zero:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1d8e38.  v0:= 0I;
  #L1d8e3a.  call `set`(v1, v0, v0, v0) @signature `Lcom/github/mikephil/charting/matrix/Vector3;.set:(FFF)V` @kind virtual;
  #L1d8e40.  return @kind void;
}
