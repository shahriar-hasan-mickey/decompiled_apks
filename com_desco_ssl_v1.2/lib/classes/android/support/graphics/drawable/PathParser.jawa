record `android.support.graphics.drawable.PathParser` @kind class @AccessFlag  {
}
global `java.lang.String` `@@android.support.graphics.drawable.PathParser.LOGTAG` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`android.support.graphics.drawable.PathParser` v0 @kind this) @signature `Landroid/support/graphics/drawable/PathParser;.<init>:()V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `void` `addNode`(`java.util.ArrayList` v1 @kind object, `char` v2 @name `cmd`, `float`[] v3 @kind object @name `val`) @signature `Landroid/support/graphics/drawable/PathParser;.addNode:(Ljava/util/ArrayList;C[F)V` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `boolean` `canMorph`(`android.support.graphics.drawable.PathParser$PathDataNode`[] v4 @kind object @name `nodesFrom`, `android.support.graphics.drawable.PathParser$PathDataNode`[] v5 @kind object @name `nodesTo`) @signature `Landroid/support/graphics/drawable/PathParser;.canMorph:([Landroid/support/graphics/drawable/PathParser$PathDataNode;[Landroid/support/graphics/drawable/PathParser$PathDataNode;)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `float`[] `copyOfRange`(`float`[] v5 @kind object @name `original`, `int` v6 @name `start`, `int` v7 @name `end`) @signature `Landroid/support/graphics/drawable/PathParser;.copyOfRange:([FII)[F` @AccessFlag STATIC {

  # return;
}
procedure `android.support.graphics.drawable.PathParser$PathDataNode`[] `createNodesFromPathData`(`java.lang.String` v8 @kind object @name `pathData`) @signature `Landroid/support/graphics/drawable/PathParser;.createNodesFromPathData:(Ljava/lang/String;)[Landroid/support/graphics/drawable/PathParser$PathDataNode;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `android.graphics.Path` `createPathFromPathData`(`java.lang.String` v6 @kind object @name `pathData`) @signature `Landroid/support/graphics/drawable/PathParser;.createPathFromPathData:(Ljava/lang/String;)Landroid/graphics/Path;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `android.support.graphics.drawable.PathParser$PathDataNode`[] `deepCopyNodes`(`android.support.graphics.drawable.PathParser$PathDataNode`[] v4 @kind object @name `source`) @signature `Landroid/support/graphics/drawable/PathParser;.deepCopyNodes:([Landroid/support/graphics/drawable/PathParser$PathDataNode;)[Landroid/support/graphics/drawable/PathParser$PathDataNode;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `extract`(`java.lang.String` v8 @kind object @name `s`, `int` v9 @name `start`, `android.support.graphics.drawable.PathParser$ExtractFloatResult` v10 @kind object @name `result`) @signature `Landroid/support/graphics/drawable/PathParser;.extract:(Ljava/lang/String;ILandroid/support/graphics/drawable/PathParser$ExtractFloatResult;)V` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `float`[] `getFloats`(`java.lang.String` v13 @kind object @name `s`) @signature `Landroid/support/graphics/drawable/PathParser;.getFloats:(Ljava/lang/String;)[F` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `int` `nextStart`(`java.lang.String` v3 @kind object @name `s`, `int` v4 @name `end`) @signature `Landroid/support/graphics/drawable/PathParser;.nextStart:(Ljava/lang/String;I)I` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `void` `updateNodes`(`android.support.graphics.drawable.PathParser$PathDataNode`[] v4 @kind object @name `target`, `android.support.graphics.drawable.PathParser$PathDataNode`[] v5 @kind object @name `source`) @signature `Landroid/support/graphics/drawable/PathParser;.updateNodes:([Landroid/support/graphics/drawable/PathParser$PathDataNode;[Landroid/support/graphics/drawable/PathParser$PathDataNode;)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
