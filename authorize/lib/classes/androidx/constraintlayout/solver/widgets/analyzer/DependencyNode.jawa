record `androidx.constraintlayout.solver.widgets.analyzer.DependencyNode` @kind class @AccessFlag PUBLIC extends `androidx.constraintlayout.solver.widgets.analyzer.Dependency` @kind interface {
  `boolean` `androidx.constraintlayout.solver.widgets.analyzer.DependencyNode.delegateToWidgetRun` @AccessFlag PUBLIC;
  `java.util.List` `androidx.constraintlayout.solver.widgets.analyzer.DependencyNode.dependencies` @AccessFlag ;
  `int` `androidx.constraintlayout.solver.widgets.analyzer.DependencyNode.margin` @AccessFlag ;
  `androidx.constraintlayout.solver.widgets.analyzer.DimensionDependency` `androidx.constraintlayout.solver.widgets.analyzer.DependencyNode.marginDependency` @AccessFlag ;
  `int` `androidx.constraintlayout.solver.widgets.analyzer.DependencyNode.marginFactor` @AccessFlag ;
  `boolean` `androidx.constraintlayout.solver.widgets.analyzer.DependencyNode.readyToSolve` @AccessFlag PUBLIC;
  `boolean` `androidx.constraintlayout.solver.widgets.analyzer.DependencyNode.resolved` @AccessFlag PUBLIC;
  `androidx.constraintlayout.solver.widgets.analyzer.WidgetRun` `androidx.constraintlayout.solver.widgets.analyzer.DependencyNode.run` @AccessFlag ;
  `java.util.List` `androidx.constraintlayout.solver.widgets.analyzer.DependencyNode.targets` @AccessFlag ;
  `androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type` `androidx.constraintlayout.solver.widgets.analyzer.DependencyNode.type` @AccessFlag ;
  `androidx.constraintlayout.solver.widgets.analyzer.Dependency` `androidx.constraintlayout.solver.widgets.analyzer.DependencyNode.updateDelegate` @AccessFlag PUBLIC;
  `int` `androidx.constraintlayout.solver.widgets.analyzer.DependencyNode.value` @AccessFlag PUBLIC;
}
procedure `void` `<init>`(`androidx.constraintlayout.solver.widgets.analyzer.DependencyNode` v3 @kind this, `androidx.constraintlayout.solver.widgets.analyzer.WidgetRun` v4 @kind object @name `run`) @signature `Landroidx/constraintlayout/solver/widgets/analyzer/DependencyNode;.<init>:(Landroidx/constraintlayout/solver/widgets/analyzer/WidgetRun;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `addDependency`(`androidx.constraintlayout.solver.widgets.analyzer.DependencyNode` v1 @kind this, `androidx.constraintlayout.solver.widgets.analyzer.Dependency` v2 @kind object @name `dependency`) @signature `Landroidx/constraintlayout/solver/widgets/analyzer/DependencyNode;.addDependency:(Landroidx/constraintlayout/solver/widgets/analyzer/Dependency;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `clear`(`androidx.constraintlayout.solver.widgets.analyzer.DependencyNode` v1 @kind this) @signature `Landroidx/constraintlayout/solver/widgets/analyzer/DependencyNode;.clear:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `name`(`androidx.constraintlayout.solver.widgets.analyzer.DependencyNode` v3 @kind this) @signature `Landroidx/constraintlayout/solver/widgets/analyzer/DependencyNode;.name:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `resolve`(`androidx.constraintlayout.solver.widgets.analyzer.DependencyNode` v2 @kind this, `int` v3 @name `value`) @signature `Landroidx/constraintlayout/solver/widgets/analyzer/DependencyNode;.resolve:(I)V` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `toString`(`androidx.constraintlayout.solver.widgets.analyzer.DependencyNode` v2 @kind this) @signature `Landroidx/constraintlayout/solver/widgets/analyzer/DependencyNode;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `update`(`androidx.constraintlayout.solver.widgets.analyzer.DependencyNode` v6 @kind this, `androidx.constraintlayout.solver.widgets.analyzer.Dependency` v7 @kind object @name `node`) @signature `Landroidx/constraintlayout/solver/widgets/analyzer/DependencyNode;.update:(Landroidx/constraintlayout/solver/widgets/analyzer/Dependency;)V` @AccessFlag PUBLIC {

  # return;
}
