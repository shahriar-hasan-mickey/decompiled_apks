record `androidx.dynamicanimation.animation.FlingAnimation$DragForce` @kind class @AccessFlag FINAL extends `androidx.dynamicanimation.animation.Force` @kind interface {
  `float` `androidx.dynamicanimation.animation.FlingAnimation$DragForce.mFriction` @AccessFlag PRIVATE;
  `androidx.dynamicanimation.animation.DynamicAnimation$MassState` `androidx.dynamicanimation.animation.FlingAnimation$DragForce.mMassState` @AccessFlag PRIVATE_FINAL;
  `float` `androidx.dynamicanimation.animation.FlingAnimation$DragForce.mVelocityThreshold` @AccessFlag PRIVATE;
}
global `float` `@@androidx.dynamicanimation.animation.FlingAnimation$DragForce.DEFAULT_FRICTION` @AccessFlag PRIVATE_STATIC_FINAL;
global `float` `@@androidx.dynamicanimation.animation.FlingAnimation$DragForce.VELOCITY_THRESHOLD_MULTIPLIER` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`androidx.dynamicanimation.animation.FlingAnimation$DragForce` v1 @kind this) @signature `Landroidx/dynamicanimation/animation/FlingAnimation$DragForce;.<init>:()V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `float` `getAcceleration`(`androidx.dynamicanimation.animation.FlingAnimation$DragForce` v1 @kind this, `float` v2 @name `position`, `float` v3 @name `velocity`) @signature `Landroidx/dynamicanimation/animation/FlingAnimation$DragForce;.getAcceleration:(FF)F` @AccessFlag PUBLIC {

  # return;
}
procedure `float` `getFrictionScalar`(`androidx.dynamicanimation.animation.FlingAnimation$DragForce` v2 @kind this) @signature `Landroidx/dynamicanimation/animation/FlingAnimation$DragForce;.getFrictionScalar:()F` @AccessFlag  {

  # return;
}
procedure `boolean` `isAtEquilibrium`(`androidx.dynamicanimation.animation.FlingAnimation$DragForce` v2 @kind this, `float` v3 @name `value`, `float` v4 @name `velocity`) @signature `Landroidx/dynamicanimation/animation/FlingAnimation$DragForce;.isAtEquilibrium:(FF)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `setFrictionScalar`(`androidx.dynamicanimation.animation.FlingAnimation$DragForce` v1 @kind this, `float` v2 @name `frictionScalar`) @signature `Landroidx/dynamicanimation/animation/FlingAnimation$DragForce;.setFrictionScalar:(F)V` @AccessFlag  {

  # return;
}
procedure `void` `setValueThreshold`(`androidx.dynamicanimation.animation.FlingAnimation$DragForce` v1 @kind this, `float` v2 @name `threshold`) @signature `Landroidx/dynamicanimation/animation/FlingAnimation$DragForce;.setValueThreshold:(F)V` @AccessFlag  {

  # return;
}
procedure `androidx.dynamicanimation.animation.DynamicAnimation$MassState` `updateValueAndVelocity`(`androidx.dynamicanimation.animation.FlingAnimation$DragForce` v9 @kind this, `float` v10 @name `value`, `float` v11 @name `velocity`, `long` v12 @name `deltaT`) @signature `Landroidx/dynamicanimation/animation/FlingAnimation$DragForce;.updateValueAndVelocity:(FFJ)Landroidx/dynamicanimation/animation/DynamicAnimation$MassState;` @AccessFlag  {

  # return;
}
